<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.security"/>
        <import package="java.util"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="java.rmi.server.RMISocketFactory"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.runtime.NewThreadAction"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.security.action.GetLongAction"/>
        <class name="RMIMasterSocketFactory" line="38">
            <extends class="RMISocketFactory"/>
            <comment line="58">
                                
            </comment>
            <javadoc line="38">
                RMIMasterSocketFactory attempts to create a socket connection to the
                  specified host using successively less efficient mechanisms
                  until one succeeds.  If the host is successfully connected to,
                  the factory for the successful mechanism is stored in an internal
                  hash table keyed by the host name, so that future attempts to
                  connect to the same host will automatically use the same
                  mechanism.                
            </javadoc>
            <declaration name="logLevel" type="int" line="49"/>
            <javadoc line="49">
                &quot;proxy&quot; package log level                
            </javadoc>
            <method name="getLogLevel" type="String" line="52"/>
            <declaration name="proxyLog" type="Log" line="58"/>
            <declaration name="connectTimeout" type="long" line="62"/>
            <javadoc line="62">
                timeout for attemping direct socket connections                
            </javadoc>
            <method name="getConnectTimeout" type="long" line="65">
                <comment line="69">
                    default: 15 seconds                    
                </comment>
            </method>
            <declaration name="eagerHttpFallback" type="boolean" line="71"/>
            <javadoc line="71">
                whether to fallback to HTTP on general connect failures                
            </javadoc>
            <declaration name="successTable" type="Hashtable" line="76"/>
            <javadoc line="76">
                table of hosts successfully connected to and the factory used                
            </javadoc>
            <declaration name="MaxRememberedHosts" type="int" line="79"/>
            <javadoc line="79">
                maximum number of hosts to remember successful connection to                
            </javadoc>
            <declaration name="hostList" type="Vector" line="82"/>
            <javadoc line="82">
                list of the hosts in successTable in initial connection order                
            </javadoc>
            <declaration name="initialFactory" type="RMISocketFactory" line="85"/>
            <javadoc line="85">
                default factory to initally use for direct socket connection                
            </javadoc>
            <declaration name="altFactoryList" type="Vector" line="88"/>
            <javadoc line="88">
                ordered list of factories to try as alternate connection
                  mechanisms if a direct socket connections fails                
            </javadoc>
            <javadoc line="92">
                Create a RMIMasterSocketFactory object.  Establish order of
                  connection mechanisms to attempt on createSocket, if a direct
                  socket connection fails.                
            </javadoc>
            <method name="RMIMasterSocketFactory" type="constructor" line="97">
                <comment line="119">
                    unable to obtain the properties, so assume default behavior.                    
                </comment>
                <declaration name="setFactories" type="boolean" line="99"/>
                <scope line="101">
                    <declaration name="proxyHost" type="String" line="102"/>
                    <declaration name="tmp" type="Boolean" line="110"/>
                    <scope line="114"/>
                </scope>
                <scope line="117"/>
                <scope line="122"/>
            </method>
            <javadoc line="128">
                Create a new client socket.  If we remember connecting to this host
                  successfully before, then use the same factory again.  Otherwise,
                  try using a direct socket connection and then the alternate factories
                  in the order specified in altFactoryList.                
            </javadoc>
            <method name="createSocket" type="Socket" line="136">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <comment line="142">
                    If we don&apos;t have any alternate factories to consult, short circuit
                     the fallback procedure and delegate to the initial factory.                    
                </comment>
                <comment line="152">
                    If we remember successfully connecting to this host before,
                     use the same factory.                    
                </comment>
                <comment line="165">
                    Next, try a direct socket connection.  Open socket in another
                     thread and only wait for specified timeout, in case the socket
                     would otherwise spend minutes trying an unreachable host.                    
                </comment>
                <comment line="175">
                    connection must be attempted with
                     this thread&apos;s access control context                    
                </comment>
                <comment line="202">
                    assume no route to host (for now) if no connection yet                    
                </comment>
                <comment line="229">
                    Finally, try any alternate connection mechanisms.                    
                </comment>
                <comment line="238">
                    For HTTP connections, the output (POST request) must
                     be sent before we verify a successful connection.
                     So, sacrifice a socket for the sake of testing...
                     The following sequence should verify a successful
                     HTTP connection if no IOException is thrown.                    
                </comment>
                <comment line="245">
                    probably -1 for EOF...                    
                </comment>
                <comment line="256">
                    factory succeeded, open new socket for caller&apos;s use                    
                </comment>
                <comment line="259">
                    if it fails 2nd time,                    
                </comment>
                <comment line="260">
                    just give up                    
                </comment>
                <comment line="268">
                    check once again to see if direct connection succeeded                    
                </comment>
                <comment line="273">
                    if we had made another one as well, clean it up...                    
                </comment>
                <comment line="278">
                    if connector ever does get socket, it won&apos;t be used                    
                </comment>
                <comment line="291">
                    if we had found an alternate mechanism, go and use it                    
                </comment>
                <comment line="293">
                    remember this successful host/factory pair                    
                </comment>
                <scope line="137"/>
                <scope line="145"/>
                <declaration name="factory" type="RMISocketFactory" line="149"/>
                <scope line="156">
                    <scope line="157"/>
                </scope>
                <declaration name="initialSocket" type="Socket" line="169"/>
                <declaration name="fallbackSocket" type="Socket" line="170"/>
                <declaration name="connector" type="AsyncConnector" line="171"/>
                <declaration name="initialFailure" type="IOException" line="176"/>
                <scope line="178">
                    <scope line="179">
                        <declaration name="t" type="Thread" line="181"/>
                        <scope line="185">
                            <declaration name="now" type="long" line="186"/>
                            <declaration name="deadline" type="long" line="187"/>
                            <scope line="188"/>
                        </scope>
                        <scope line="195"/>
                    </scope>
                </scope>
                <scope line="210"/>
                <scope line="212"/>
                <scope line="214">
                    <scope line="215"/>
                    <scope line="217"/>
                </scope>
                <scope line="220">
                    <scope line="221">
                        <scope line="223"/>
                        <scope line="229">
                            <scope line="231">
                                <scope line="232"/>
                                <declaration name="testSocket" type="Socket" line="242"/>
                                <declaration name="in" type="InputStream" line="243"/>
                                <declaration name="b" type="int" line="244"/>
                            </scope>
                            <scope line="246">
                                <scope line="247"/>
                            </scope>
                            <scope line="256"/>
                            <scope line="258"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="265">
                    <scope line="266">
                        <scope line="268"/>
                        <scope line="271"/>
                    </scope>
                    <scope line="279"/>
                    <scope line="281"/>
                    <scope line="283">
                        <scope line="284"/>
                        <scope line="286"/>
                    </scope>
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="300">
                Remember a successful factory for connecting to host.
                  Currently, excess hosts are removed from the remembered list
                  using a Least Recently Created strategy.                
            </javadoc>
            <method name="rememberFactory" type="void" line="305">
                <params>
                    <param name="host" type="String"/>
                    <param name="factory" type="RMISocketFactory"/>
                </params>
                <scope line="306">
                    <scope line="307"/>
                </scope>
            </method>
            <javadoc line="316">
                Check if an AsyncConnector succeeded.  If not, return socket
                  given to fall back to.                
            </javadoc>
            <method name="checkConnector" type="Socket" line="322">
                <params>
                    <param name="connector" type="AsyncConnector"/>
                </params>
                <comment line="327">
                    The AsyncConnector implementation guaranteed that the exception
                     will be either an IOException or a RuntimeException, and we can
                     only throw one of those, so convince that compiler that it must
                     be one of those.                    
                </comment>
                <declaration name="e" type="Exception" line="323"/>
                <scope line="324">
                    <scope line="332"/>
                    <scope line="334"/>
                    <scope line="336"/>
                </scope>
            </method>
            <javadoc line="344">
                Create a new server socket.                
            </javadoc>
            <method name="createServerSocket" type="ServerSocket" line="347">
                <params>
                    <param name="port" type="int"/>
                </params>
                <comment line="349">
                    return new HttpAwareServerSocket(port);                    
                </comment>
            </method>
            <class name="AsyncConnector" line="353">
                <implements interface="Runnable"/>
                <javadoc line="353">
                    AsyncConnector is used by RMIMasterSocketFactory to attempt socket
                      connections on a separate thread.  This allows RMIMasterSocketFactory
                      to control how long it will wait for the connection to succeed.                    
                </javadoc>
                <declaration name="factory" type="RMISocketFactory" line="360"/>
                <javadoc line="360">
                    what factory to use to attempt connection                    
                </javadoc>
                <declaration name="host" type="String" line="363"/>
                <javadoc line="363">
                    the host to connect to                    
                </javadoc>
                <declaration name="port" type="int" line="366"/>
                <javadoc line="366">
                    the port to connect to                    
                </javadoc>
                <declaration name="acc" type="AccessControlContext" line="369"/>
                <javadoc line="369">
                    access control context to attempt connection within                    
                </javadoc>
                <declaration name="exception" type="Exception" line="372"/>
                <javadoc line="372">
                    exception that occurred during connection, if any                    
                </javadoc>
                <declaration name="socket" type="Socket" line="375"/>
                <javadoc line="375">
                    the connected socket, if successful                    
                </javadoc>
                <declaration name="cleanUp" type="boolean" line="378"/>
                <javadoc line="378">
                    socket should be closed after created, if ever                    
                </javadoc>
                <javadoc line="381">
                    Create a new asynchronous connector object.                    
                </javadoc>
                <method name="AsyncConnector" type="constructor" line="386">
                    <params>
                        <param name="factory" type="RMISocketFactory"/>
                        <param name="host" type="String"/>
                        <param name="port" type="int"/>
                        <param name="acc" type="AccessControlContext"/>
                    </params>
                    <declaration name="security" type="SecurityManager" line="391"/>
                    <scope line="392"/>
                </method>
                <javadoc line="397">
                    Attempt socket connection in separate thread.  If successful,
                      notify master waiting,                    
                </javadoc>
                <method name="run" type="void" line="401">
                    <comment line="404">
                        Using the privileges of the thread that wants to make the
                         connection is tempting, but it will fail with applets with
                         the current applet security manager because the applet
                         network connection policy is not captured in the permission
                         framework of the access control context we have.
                        
                         java.security.AccessController.beginPrivileged(acc);                        
                    </comment>
                    <comment line="428">
                        Note that the only exceptions which could actually have
                         occurred here are IOException or RuntimeException.                        
                    </comment>
                    <comment line="438">
                        See above comments for matching beginPrivileged() call that
                         is also commented out.
                        
                         java.security.AccessController.endPrivileged();                        
                    </comment>
                    <scope line="402">
                        <scope line="412">
                            <declaration name="temp" type="Socket" line="413"/>
                            <scope line="414"/>
                            <scope line="419">
                                <scope line="421"/>
                                <scope line="423"/>
                            </scope>
                        </scope>
                        <scope line="426">
                            <scope line="431"/>
                        </scope>
                    </scope>
                    <scope line="436"/>
                </method>
                <javadoc line="446">
                    Get exception that occurred during connection attempt, if any.
                      In the current implementation, this is guaranteed to be either
                      an IOException or a RuntimeException.                    
                </javadoc>
                <method name="getException" type="Exception" line="451"/>
                <javadoc line="455">
                    Get successful socket, if any.                    
                </javadoc>
                <method name="getSocket" type="Socket" line="458"/>
                <javadoc line="462">
                    Note that this connector&apos;s socket, if ever successfully created,
                      will not be used, so it should be cleaned up quickly                    
                </javadoc>
                <method name="notUsed" type="void" line="466">
                    <scope line="467">
                        <scope line="468"/>
                        <scope line="470"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>