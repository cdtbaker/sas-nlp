<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport.proxy">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.security"/>
        <import package="java.util"/>
        <import package="java.rmi.server.LogStream"/>
        <import package="java.rmi.server.RMISocketFactory"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.runtime.NewThreadAction"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.security.action.GetLongAction"/>
        <class name="RMIMasterSocketFactory" line="12">
            <extends class="RMISocketFactory"/>
            <javadoc line="12">
                RMIMasterSocketFactory attempts to create a socket connection to the
                  specified host using successively less efficient mechanisms
                  until one succeeds.  If the host is successfully connected to,
                  the factory for the successful mechanism is stored in an internal
                  hash table keyed by the host name, so that future attempts to
                  connect to the same host will automatically use the same
                  mechanism.                
            </javadoc>
            <declaration name="logLevel" type="int" line="22"/>
            <javadoc line="22">
                &quot;proxy&quot; package log level                
            </javadoc>
            <method name="getLogLevel" type="String" line="26"/>
            <declaration name="proxyLog" type="Log" line="29"/>
            <declaration name="connectTimeout" type="long" line="30"/>
            <javadoc line="30">
                timeout for attemping direct socket connections                
            </javadoc>
            <method name="getConnectTimeout" type="long" line="34"/>
            <declaration name="eagerHttpFallback" type="boolean" line="37"/>
            <javadoc line="37">
                whether to fallback to HTTP on general connect failures                
            </javadoc>
            <declaration name="successTable" type="Hashtable" line="41"/>
            <javadoc line="41">
                table of hosts successfully connected to and the factory used                
            </javadoc>
            <declaration name="MaxRememberedHosts" type="int" line="45"/>
            <javadoc line="45">
                maximum number of hosts to remember successful connection to                
            </javadoc>
            <declaration name="hostList" type="Vector" line="49"/>
            <javadoc line="49">
                list of the hosts in successTable in initial connection order                
            </javadoc>
            <declaration name="initialFactory" type="RMISocketFactory" line="53"/>
            <javadoc line="53">
                default factory to initally use for direct socket connection                
            </javadoc>
            <declaration name="altFactoryList" type="Vector" line="57"/>
            <javadoc line="57">
                ordered list of factories to try as alternate connection
                  mechanisms if a direct socket connections fails                
            </javadoc>
            <javadoc line="62">
                Create a RMIMasterSocketFactory object.  Establish order of
                  connection mechanisms to attempt on createSocket, if a direct
                  socket connection fails.                
            </javadoc>
            <method name="RMIMasterSocketFactory" type="constructor" line="67">
                <declaration name="setFactories" type="boolean" line="69"/>
                <scope line="70">
                    <declaration name="proxyHost" type="String" line="71"/>
                    <declaration name="tmp" type="Boolean" line="74"/>
                    <scope line="75"/>
                </scope>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Create a new client socket.  If we remember connecting to this host
                  successfully before, then use the same factory again.  Otherwise,
                  try using a direct socket connection and then the alternate factories
                  in the order specified in altFactoryList.                
            </javadoc>
            <method name="createSocket" type="Socket" line="93">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="94"/>
                <scope line="97"/>
                <declaration name="factory" type="RMISocketFactory" line="100"/>
                <scope line="102">
                    <scope line="103"/>
                </scope>
                <declaration name="initialSocket" type="Socket" line="108"/>
                <declaration name="fallbackSocket" type="Socket" line="109"/>
                <declaration name="connector" type="AsyncConnector" line="110"/>
                <declaration name="initialFailure" type="IOException" line="111"/>
                <scope line="112">
                    <scope line="113">
                        <declaration name="t" type="Thread" line="114"/>
                        <scope line="116">
                            <declaration name="now" type="long" line="117"/>
                            <declaration name="deadline" type="long" line="118"/>
                            <scope line="119"/>
                        </scope>
                        <scope line="127"/>
                    </scope>
                </scope>
                <scope line="135"/>
                <scope line="138"/>
                <scope line="141">
                    <scope line="142"/>
                    <scope line="145"/>
                </scope>
                <scope line="149">
                    <scope line="150">
                        <scope line="151"/>
                        <scope line="154">
                            <scope line="156">
                                <scope line="157"/>
                                <declaration name="testSocket" type="Socket" line="160"/>
                                <declaration name="in" type="InputStream" line="161"/>
                                <declaration name="b" type="int" line="162"/>
                            </scope>
                            <scope line="165">
                                <scope line="166"/>
                            </scope>
                            <scope line="172"/>
                            <scope line="175"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="181">
                    <scope line="182">
                        <scope line="183"/>
                        <scope line="186"/>
                    </scope>
                    <scope line="192"/>
                    <scope line="195"/>
                    <scope line="198">
                        <scope line="199"/>
                        <scope line="202"/>
                    </scope>
                    <scope line="206"/>
                </scope>
            </method>
            <javadoc line="213">
                Remember a successful factory for connecting to host.
                  Currently, excess hosts are removed from the remembered list
                  using a Least Recently Created strategy.                
            </javadoc>
            <method name="rememberFactory" type="void" line="218">
                <params>
                    <param name="host" type="String"/>
                    <param name="factory" type="RMISocketFactory"/>
                </params>
                <scope line="219">
                    <scope line="220"/>
                </scope>
            </method>
            <javadoc line="228">
                Check if an AsyncConnector succeeded.  If not, return socket
                  given to fall back to.                
            </javadoc>
            <method name="checkConnector" type="Socket" line="232">
                <params>
                    <param name="connector" type="AsyncConnector"/>
                </params>
                <declaration name="e" type="Exception" line="233"/>
                <scope line="234">
                    <scope line="236"/>
                    <scope line="239"/>
                    <scope line="242"/>
                </scope>
            </method>
            <javadoc line="248">
                Create a new server socket.                
            </javadoc>
            <method name="createServerSocket" type="ServerSocket" line="251">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <class name="AsyncConnector" line="254">
                <implements interface="Runnable"/>
                <javadoc line="254">
                    AsyncConnector is used by RMIMasterSocketFactory to attempt socket
                      connections on a separate thread.  This allows RMIMasterSocketFactory
                      to control how long it will wait for the connection to succeed.                    
                </javadoc>
                <declaration name="factory" type="RMISocketFactory" line="260"/>
                <javadoc line="260">
                    what factory to use to attempt connection                    
                </javadoc>
                <declaration name="host" type="String" line="264"/>
                <javadoc line="264">
                    the host to connect to                    
                </javadoc>
                <declaration name="port" type="int" line="268"/>
                <javadoc line="268">
                    the port to connect to                    
                </javadoc>
                <declaration name="acc" type="AccessControlContext" line="272"/>
                <javadoc line="272">
                    access control context to attempt connection within                    
                </javadoc>
                <declaration name="exception" type="Exception" line="276"/>
                <javadoc line="276">
                    exception that occurred during connection, if any                    
                </javadoc>
                <declaration name="socket" type="Socket" line="280"/>
                <javadoc line="280">
                    the connected socket, if successful                    
                </javadoc>
                <declaration name="cleanUp" type="boolean" line="284"/>
                <javadoc line="284">
                    socket should be closed after created, if ever                    
                </javadoc>
                <javadoc line="288">
                    Create a new asynchronous connector object.                    
                </javadoc>
                <method name="AsyncConnector" type="constructor" line="291">
                    <params>
                        <param name="factory" type="RMISocketFactory"/>
                        <param name="host" type="String"/>
                        <param name="port" type="int"/>
                        <param name="acc" type="AccessControlContext"/>
                    </params>
                    <declaration name="security" type="SecurityManager" line="296"/>
                    <scope line="297"/>
                </method>
                <javadoc line="301">
                    Attempt socket connection in separate thread.  If successful,
                      notify master waiting,                    
                </javadoc>
                <method name="run" type="void" line="305">
                    <scope line="306">
                        <scope line="307">
                            <declaration name="temp" type="Socket" line="308"/>
                            <scope line="309"/>
                            <scope line="314">
                                <scope line="315"/>
                                <scope line="318"/>
                            </scope>
                        </scope>
                        <scope line="322">
                            <scope line="323"/>
                        </scope>
                    </scope>
                    <scope line="329"/>
                </method>
                <javadoc line="332">
                    Get exception that occurred during connection attempt, if any.
                      In the current implementation, this is guaranteed to be either
                      an IOException or a RuntimeException.                    
                </javadoc>
                <method name="getException" type="Exception" line="337"/>
                <javadoc line="340">
                    Get successful socket, if any.                    
                </javadoc>
                <method name="getSocket" type="Socket" line="343"/>
                <javadoc line="346">
                    Note that this connector&apos;s socket, if ever successfully created,
                      will not be used, so it should be cleaned up quickly                    
                </javadoc>
                <method name="notUsed" type="void" line="350">
                    <scope line="351">
                        <scope line="352"/>
                        <scope line="355"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>