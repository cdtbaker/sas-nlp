<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.transport">
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.dgc.VMID"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.Unreferenced"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.util"/>
        <import package="sun.rmi.runtime.Log"/>
        <import package="sun.rmi.runtime.NewThreadAction"/>
        <import package="sun.rmi.server.Dispatcher"/>
        <class name="Target" line="13">
            <javadoc line="13">
                A target contains information pertaining to a remote object that
                  resides in this address space.  Targets are located via the
                  ObjectTable.                
            </javadoc>
            <declaration name="id" type="ObjID" line="19"/>
            <javadoc line="19">
                object id for target                
            </javadoc>
            <declaration name="permanent" type="boolean" line="23"/>
            <javadoc line="23">
                flag indicating whether target is subject to collection                
            </javadoc>
            <declaration name="weakImpl" type="WeakRef" line="27"/>
            <javadoc line="27">
                weak reference to remote object implementation                
            </javadoc>
            <declaration name="disp" type="Dispatcher" line="31"/>
            <javadoc line="31">
                dispatcher for remote object                
            </javadoc>
            <declaration name="stub" type="Remote" line="35"/>
            <javadoc line="35">
                stub for remote object                
            </javadoc>
            <declaration name="refSet" type="Vector" line="39"/>
            <javadoc line="39">
                set of clients that hold references to this target                
            </javadoc>
            <declaration name="sequenceTable" type="Hashtable" line="43"/>
            <javadoc line="43">
                table that maps client endpoints to sequence numbers                
            </javadoc>
            <declaration name="acc" type="AccessControlContext" line="47"/>
            <javadoc line="47">
                access control context in which target was created                
            </javadoc>
            <declaration name="ccl" type="ClassLoader" line="51"/>
            <javadoc line="51">
                context class loader in which target was created                
            </javadoc>
            <declaration name="callCount" type="int" line="55"/>
            <javadoc line="55">
                number of pending/executing calls                
            </javadoc>
            <declaration name="removed" type="boolean" line="59"/>
            <javadoc line="59">
                true if this target has been removed from the object table                
            </javadoc>
            <declaration name="exportedTransport" type="Transport" line="63"/>
            <javadoc line="63">
                the transport through which this target was exported and
                  through which remote calls will be allowed                
            </javadoc>
            <declaration name="nextThreadNum" type="int" line="68"/>
            <javadoc line="68">
                number to identify next callback thread created here                
            </javadoc>
            <javadoc line="72">
                Construct a Target for a remote object &quot;impl&quot; with
                  a specific object id.
                  If &quot;permanent&quot; is true, then the impl is pinned permanently
                  (the impl will not be collected via distributed and/or local
                  GC).  If &quot;on&quot; is false, than the impl is subject to
                  collection. Permanent objects do not keep a server from
                  exiting.                
            </javadoc>
            <method name="Target" type="constructor" line="81">
                <params>
                    <param name="impl" type="Remote"/>
                    <param name="disp" type="Dispatcher"/>
                    <param name="stub" type="Remote"/>
                    <param name="id" type="ObjID"/>
                    <param name="permanent" type="boolean"/>
                </params>
                <declaration name="threadContextLoader" type="ClassLoader" line="87"/>
                <declaration name="serverLoader" type="ClassLoader" line="88"/>
                <scope line="89"/>
                <scope line="92"/>
                <scope line="96"/>
            </method>
            <javadoc line="100">
                Return true if the first class loader is a child of (or identical
                  to) the second class loader.  Either loader may be &quot;null&quot;, which is
                  considered to be the parent of any non-null class loader.
                  (utility method added for the 1.2beta4 fix for 4149366)                
            </javadoc>
            <method name="checkLoaderAncestry" type="boolean" line="106">
                <params>
                    <param name="child" type="ClassLoader"/>
                    <param name="ancestor" type="ClassLoader"/>
                </params>
                <scope line="107"/>
                <scope line="110"/>
                <scope line="113">
                    <scope line="114">
                        <scope line="115"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="122">
                Get the stub (proxy) object for this target                
            </javadoc>
            <method name="getStub" type="Remote" line="125"/>
            <javadoc line="128">
                Returns the object endpoint for the target.                
            </javadoc>
            <method name="getObjectEndpoint" type="ObjectEndpoint" line="131"/>
            <javadoc line="134">
                Get the weak reference for the Impl of this target.                
            </javadoc>
            <method name="getWeakImpl" type="WeakRef" line="137"/>
            <javadoc line="140">
                Returns the dispatcher for this remote object target.                
            </javadoc>
            <method name="getDispatcher" type="Dispatcher" line="143"/>
            <method name="getAccessControlContext" type="AccessControlContext" line="146"/>
            <method name="getContextClassLoader" type="ClassLoader" line="149"/>
            <javadoc line="152">
                Get the impl for this target.
                  Note: this may return null if the impl has been garbage collected.
                  (currently, there is no need to make this method public)                
            </javadoc>
            <method name="getImpl" type="Remote" line="157"/>
            <javadoc line="160">
                Returns true if the target is permanent.                
            </javadoc>
            <method name="isPermanent" type="boolean" line="163"/>
            <javadoc line="166">
                Pin impl in target. Pin the WeakRef object so it holds a strong
                  reference to the object to it will not be garbage collected locally.
                  This way there is a single object responsible for the weak ref
                  mechanism.                
            </javadoc>
            <method name="pinImpl" type="void" line="172"/>
            <javadoc line="175">
                Unpin impl in target.  Weaken the reference to impl so that it
                  can be garbage collected locally. But only if there the refSet
                  is empty.  All of the weak/strong handling is in WeakRef                
            </javadoc>
            <method name="unpinImpl" type="void" line="180">
                <scope line="181"/>
            </method>
            <javadoc line="185">
                Enable the transport through which remote calls to this target
                  are allowed to be set if it has not already been set.                
            </javadoc>
            <method name="setExportedTransport" type="void" line="189">
                <params>
                    <param name="exportedTransport" type="Transport"/>
                </params>
                <scope line="190"/>
            </method>
            <javadoc line="194">
                Add an endpoint to the remembered set.  Also adds a notifier
                  to call back if the address space associated with the endpoint
                  dies.                
            </javadoc>
            <method name="referenced" type="void" line="199">
                <params>
                    <param name="sequenceNum" type="long"/>
                    <param name="vmid" type="VMID"/>
                </params>
                <declaration name="entry" type="SequenceEntry" line="200"/>
                <scope line="201"/>
                <scope line="204"/>
                <scope line="207"/>
                <scope line="210">
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="220">
                Remove endpoint from remembered set.  If set becomes empty,
                  remove server from Transport&apos;s object table.                
            </javadoc>
            <method name="unreferenced" type="void" line="224">
                <params>
                    <param name="sequenceNum" type="long"/>
                    <param name="vmid" type="VMID"/>
                    <param name="strong" type="boolean"/>
                </params>
                <declaration name="entry" type="SequenceEntry" line="225"/>
                <scope line="226"/>
                <scope line="229"/>
                <scope line="232"/>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Remove endpoint from the reference set.                
            </javadoc>
            <method name="refSetRemove" type="void" line="243">
                <params>
                    <param name="vmid" type="VMID"/>
                </params>
                <scope line="245">
                    <scope line="246"/>
                    <declaration name="obj" type="Remote" line="249"/>
                    <scope line="250">
                        <declaration name="unrefObj" type="Unreferenced" line="251"/>
                        <anonymous_class line="252">
                            <method name="run" type="void" line="253"/>
                        </anonymous_class>
                        <declaration name="t" type="Thread" line="252"/>
                        <anonymous_class line="258">
                            <method name="run" type="Void" line="259"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="270">
                Mark this target as not accepting new calls if any of the
                  following conditions exist: a) the force parameter is true,
                  b) the target&apos;s call count is zero, or c) the object is already
                  not accepting calls. Returns true if target is marked as not
                  accepting new calls; returns false otherwise.                
            </javadoc>
            <method name="unexport" type="boolean" line="277">
                <params>
                    <param name="force" type="boolean"/>
                </params>
                <scope line="278">
                    <declaration name="dgc" type="DGCImpl" line="281"/>
                    <declaration name="enum_" type="Enumeration" line="282"/>
                    <scope line="283">
                        <declaration name="vmid" type="VMID" line="284"/>
                    </scope>
                </scope>
                <scope line="289"/>
            </method>
            <javadoc line="293">
                Mark this target as having been removed from the object table.                
            </javadoc>
            <method name="markRemoved" type="void" line="296">
                <scope line="297"/>
                <scope line="301"/>
                <scope line="304"/>
            </method>
            <javadoc line="308">
                Increment call count.                
            </javadoc>
            <method name="incrementCallCount" type="void" line="311">
                <scope line="312"/>
                <scope line="315"/>
            </method>
            <javadoc line="319">
                Decrement call count.                
            </javadoc>
            <method name="decrementCallCount" type="void" line="322">
                <scope line="323"/>
                <scope line="326"/>
            </method>
            <javadoc line="330">
                Returns true if remembered set is empty; otherwise returns
                  false                
            </javadoc>
            <method name="isEmpty" type="boolean" line="334"/>
            <javadoc line="337">
                This method is called if the address space associated with the
                  vmid dies.  In that case, the vmid should be removed
                  from the reference set.                
            </javadoc>
            <method name="vmidDead" type="void" line="342">
                <params>
                    <param name="vmid" type="VMID"/>
                </params>
                <scope line="343"/>
            </method>
        </class>
        <class name="SequenceEntry" line="350">
            <declaration name="sequenceNum" type="long" line="351"/>
            <declaration name="keep" type="boolean" line="352"/>
            <method name="SequenceEntry" type="constructor" line="353">
                <params>
                    <param name="sequenceNum" type="long"/>
                </params>
            </method>
            <method name="retain" type="void" line="357">
                <params>
                    <param name="sequenceNum" type="long"/>
                </params>
            </method>
            <method name="update" type="void" line="361">
                <params>
                    <param name="sequenceNum" type="long"/>
                </params>
            </method>
        </class>
    </source>