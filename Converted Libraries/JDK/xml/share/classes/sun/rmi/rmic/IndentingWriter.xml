<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 */
package sun.rmi.rmic">
        <import package="java.io.Writer"/>
        <import package="java.io.BufferedWriter"/>
        <import package="java.io.IOException"/>
        <javadoc line="31">
                        
        </javadoc>
        <class name="IndentingWriter" line="39">
            <extends class="BufferedWriter"/>
            <javadoc line="39">
                IndentingWriter is a BufferedWriter subclass that supports automatic
                  indentation of lines of text written to the underlying Writer.
                  Methods are provided for compact, convenient indenting, writing text,
                  and writing lines in various combinations.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="beginningOfLine" type="boolean" line="52"/>
            <javadoc line="52">
                true if the next character written is the first on a line                
            </javadoc>
            <declaration name="currentIndent" type="int" line="55"/>
            <javadoc line="55">
                current number of spaces to prepend to lines                
            </javadoc>
            <declaration name="indentStep" type="int" line="58"/>
            <javadoc line="58">
                number of spaces to change indent when indenting in or out                
            </javadoc>
            <declaration name="tabSize" type="int" line="61"/>
            <javadoc line="61">
                number of spaces to convert into tabs. Use MAX_VALUE to disable                
            </javadoc>
            <javadoc line="64">
                Create a new IndentingWriter that writes indented text to the
                  given Writer.  Use the default indent step of four spaces.                
            </javadoc>
            <method name="IndentingWriter" type="constructor" line="68">
                <params>
                    <param name="out" type="Writer"/>
                </params>
            </method>
            <javadoc line="72">
                Create a new IndentingWriter that writes indented text to the
                  given Writer and uses the supplied indent step.                
            </javadoc>
            <method name="IndentingWriter" type="constructor" line="76">
                <params>
                    <param name="out" type="Writer"/>
                    <param name="step" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Create a new IndentingWriter that writes indented text to the
                  given Writer and uses the supplied indent step and tab size.                
            </javadoc>
            <method name="IndentingWriter" type="constructor" line="89">
                <params>
                    <param name="out" type="Writer"/>
                    <param name="step" type="int"/>
                    <param name="tabSize" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Write a single character.                
            </javadoc>
            <method name="write" type="void" line="102">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Write a portion of an array of characters.                
            </javadoc>
            <method name="write" type="void" line="110">
                <params>
                    <param name="cbuf" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="111"/>
            </method>
            <javadoc line="117">
                Write a portion of a String.                
            </javadoc>
            <method name="write" type="void" line="120">
                <params>
                    <param name="s" type="String"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="121"/>
            </method>
            <javadoc line="127">
                Write a line separator.  The next character written will be
                  preceded by an indent.                
            </javadoc>
            <method name="newLine" type="void" line="131"/>
            <javadoc line="136">
                Check if an indent needs to be written before writing the next
                  character.
                  The indent generation is optimized (and made consistent with
                  certain coding conventions) by condensing groups of eight spaces
                  into tab characters.                
            </javadoc>
            <method name="checkWrite" type="void" line="144">
                <scope line="145">
                    <declaration name="i" type="int" line="147"/>
                    <scope line="148"/>
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="159">
                Increase the current indent by the indent step.                
            </javadoc>
            <method name="indentIn" type="void" line="162"/>
            <javadoc line="166">
                Decrease the current indent by the indent step.                
            </javadoc>
            <method name="indentOut" type="void" line="169"/>
            <javadoc line="175">
                Indent in.                
            </javadoc>
            <method name="pI" type="void" line="178"/>
            <javadoc line="182">
                Indent out.                
            </javadoc>
            <method name="pO" type="void" line="185"/>
            <javadoc line="189">
                Write string.                
            </javadoc>
            <method name="p" type="void" line="192">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="196">
                End current line.                
            </javadoc>
            <method name="pln" type="void" line="199"/>
            <javadoc line="203">
                Write string; end current line.                
            </javadoc>
            <method name="pln" type="void" line="206">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="211">
                Write string; end current line; indent in.                
            </javadoc>
            <method name="plnI" type="void" line="214">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="220">
                Indent out; write string.                
            </javadoc>
            <method name="pO" type="void" line="223">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="228">
                Indent out; write string; end current line.                
            </javadoc>
            <method name="pOln" type="void" line="231">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="236">
                Indent out; write string; end current line; indent in.
                  This method is useful for generating lines of code that both
                  end and begin nested blocks, like &quot;} else {&quot;.                
            </javadoc>
            <method name="pOlnI" type="void" line="242">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="248">
                Write Object.                
            </javadoc>
            <method name="p" type="void" line="251">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="254">
                Write Object; end current line.                
            </javadoc>
            <method name="pln" type="void" line="257">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="262">
                Write Object; end current line; indent in.                
            </javadoc>
            <method name="plnI" type="void" line="265">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="271">
                Indent out; write Object.                
            </javadoc>
            <method name="pO" type="void" line="274">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="279">
                Indent out; write Object; end current line.                
            </javadoc>
            <method name="pOln" type="void" line="282">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="287">
                Indent out; write Object; end current line; indent in.
                  This method is useful for generating lines of code that both
                  end and begin nested blocks, like &quot;} else {&quot;.                
            </javadoc>
            <method name="pOlnI" type="void" line="293">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
        </class>
    </source>