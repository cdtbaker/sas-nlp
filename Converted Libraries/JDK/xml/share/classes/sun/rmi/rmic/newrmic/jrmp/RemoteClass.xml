<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic.newrmic.jrmp">
        <import package="com.sun.javadoc.ClassDoc"/>
        <import package="com.sun.javadoc.MethodDoc"/>
        <import package="com.sun.javadoc.Parameter"/>
        <import package="com.sun.javadoc.Type"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.DigestOutputStream"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.List"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.rmi.rmic.newrmic.BatchEnvironment"/>
        <import package="sun.rmi.rmic.newrmic.Constants"/>
        <import package="sun.rmi.rmic.newrmic.jrmp.Constants"/>
        <class name="RemoteClass" line="49">
            <javadoc line="49">
                Encapsulates RMI-specific information about a remote implementation
                  class (a class that implements one or more remote interfaces).
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="env" type="BatchEnvironment" line="61"/>
            <javadoc line="61">
                rmic environment for this object                
            </javadoc>
            <declaration name="implClass" type="ClassDoc" line="64"/>
            <javadoc line="64">
                the remote implementation class this object represents                
            </javadoc>
            <declaration name="remoteInterfaces" type="ClassDoc[]" line="67"/>
            <javadoc line="67">
                remote interfaces implemented by this class                
            </javadoc>
            <declaration name="remoteMethods" type="Method[]" line="70"/>
            <javadoc line="70">
                the remote methods of this class                
            </javadoc>
            <declaration name="interfaceHash" type="long" line="73"/>
            <javadoc line="73">
                stub/skeleton &quot;interface hash&quot; for this class                
            </javadoc>
            <javadoc line="76">
                Creates a RemoteClass instance that represents the RMI-specific
                  information about the specified remote implementation class.
                  If the class is not a valid remote implementation class or if
                  some other error occurs, the return value will be null, and
                  errors will have been reported to the supplied
                  BatchEnvironment.                
            </javadoc>
            <method name="forClass" type="RemoteClass" line="85">
                <params>
                    <param name="env" type="BatchEnvironment"/>
                    <param name="implClass" type="ClassDoc"/>
                </params>
                <declaration name="remoteClass" type="RemoteClass" line="86"/>
                <scope line="87"/>
                <scope line="89"/>
            </method>
            <javadoc line="94">
                Creates a RemoteClass instance for the specified class.  The
                  resulting object is not yet initialized.                
            </javadoc>
            <method name="RemoteClass" type="constructor" line="98">
                <params>
                    <param name="env" type="BatchEnvironment"/>
                    <param name="implClass" type="ClassDoc"/>
                </params>
            </method>
            <javadoc line="103">
                Returns the ClassDoc for this remote implementation class.                
            </javadoc>
            <method name="classDoc" type="ClassDoc" line="106"/>
            <javadoc line="110">
                Returns the remote interfaces implemented by this remote
                  implementation class.
                  A remote interface is an interface that is a subinterface of
                  java.rmi.Remote.  The remote interfaces of a class are the
                  direct superinterfaces of the class and all of its superclasses
                  that are remote interfaces.
                  The order of the array returned is arbitrary, and some elements
                  may be superfluous (i.e., superinterfaces of other interfaces
                  in the array).                
            </javadoc>
            <method name="remoteInterfaces" type="ClassDoc[]" line="123"/>
            <javadoc line="127">
                Returns an array of RemoteClass.Method objects representing all
                  of the remote methods of this remote implementation class (all
                  of the member methods of the class&apos;s remote interfaces).
                  The methods in the array are ordered according to a comparison
                  of strings consisting of their name followed by their
                  descriptor, so each method&apos;s index in the array corresponds to
                  its &quot;operation number&quot; in the JDK 1.1 version of the JRMP
                  stub/skeleton protocol.                
            </javadoc>
            <method name="remoteMethods" type="Method[]" line="138"/>
            <javadoc line="142">
                Returns the &quot;interface hash&quot; used to match a stub/skeleton pair
                  for this remote implementation class in the JDK 1.1 version of
                  the JRMP stub/skeleton protocol.                
            </javadoc>
            <method name="interfaceHash" type="long" line="147"/>
            <javadoc line="151">
                Validates this remote implementation class and computes the
                  RMI-specific information.  Returns true if successful, or false
                  if an error occurred.                
            </javadoc>
            <method name="init" type="boolean" line="156">
                <comment line="157">
                    Verify that it is really a class, not an interface.                    
                </comment>
                <comment line="166">
                    Find all of the remote interfaces of our remote
                     implementation class-- for each class up the superclass
                     chain, add each directly-implemented interface that somehow
                     extends Remote to a list.                    
                </comment>
                <comment line="175">
                    Add interface to the list if it extends Remote and
                     it is not already there.                    
                </comment>
                <comment line="190">
                    Verify that the candidate remote implementation class
                     implements at least one remote interface directly.                    
                </comment>
                <comment line="196">
                    This error message is used if the class does
                     implement a remote interface through one of its
                     superclasses, but not directly.                    
                </comment>
                <comment line="204">
                    This error message is used if the class does
                     not implement a remote interface at all.                    
                </comment>
                <comment line="215">
                    Convert list of remote interfaces to an array
                     (order is not important for this array).                    
                </comment>
                <comment line="223">
                    Collect the methods from all of the remote interfaces into
                     a table, which maps from method name-and-descriptor string
                     to Method object.                    
                </comment>
                <comment line="232">
                    Continue iterating despite errors in order to
                     generate more complete error report.                    
                </comment>
                <comment line="243">
                    Sort table of remote methods into an array.  The elements
                     are sorted in ascending order of the string of the method&apos;s
                     name and descriptor, so that each elements index is equal
                     to its operation number in the JDK 1.1 version of the JRMP
                     stubskeleton protocol.                    
                </comment>
                <comment line="277">
                    Finally, pre-compute the interface hash to be used by
                     stubsskeletons for this remote class in the JDK 1.1
                     version of the JRMP stubskeleton protocol.                    
                </comment>
                <scope line="160"/>
                <declaration name="remotesImplemented" type="List&lt;ClassDoc&gt;" line="172"/>
                <scope line="173">
                    <scope line="174">
                        <scope line="181">
                            <scope line="183"/>
                        </scope>
                    </scope>
                    <scope line="194">
                        <scope line="195"/>
                        <scope line="203"/>
                    </scope>
                </scope>
                <declaration name="methods" type="Map&lt;String,Method&gt;" line="228"/>
                <declaration name="errors" type="boolean" line="229"/>
                <scope line="230">
                    <scope line="231"/>
                </scope>
                <scope line="239"/>
                <declaration name="orderedKeys" type="String[]" line="250"/>
                <scope line="254">
                    <scope line="256">
                        <declaration name="msg" type="String" line="257"/>
                        <declaration name="exceptions" type="ClassDoc[]" line="259"/>
                        <scope line="260">
                            <scope line="262">
                                <scope line="263"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="287">
                Collects and validates all methods from the specified interface
                  and all of its superinterfaces as remote methods.  Remote
                  methods are added to the supplied table.  Returns true if
                  successful, or false if an error occurred.                
            </javadoc>
            <method name="collectRemoteMethods" type="boolean" line="295">
                <params>
                    <param name="intf" type="ClassDoc"/>
                    <param name="table" type="Map<String,Method>"/>
                </params>
                <comment line="303">
                    Search interface&apos;s declared methods.                    
                </comment>
                <comment line="309">
                    Verify that each method throws RemoteException (or a
                     superclass of RemoteException).                    
                </comment>
                <comment line="321">
                    If this method did not throw RemoteException as required,
                     generate the error but continue, so that multiple such
                     errors can be reported.                    
                </comment>
                <comment line="334">
                    Verify that the implementation of this method throws only
                     java.lang.Exception or its subclasses (fix bugid 4092486).
                     JRMP does not support remote methods throwing
                     java.lang.Throwable or other subclasses.                    
                </comment>
                <comment line="341">
                    should not be null                    
                </comment>
                <comment line="353">
                    Create RemoteClass.Method object to represent this method
                     found in a remote interface.                    
                </comment>
                <comment line="359">
                    Store remote method&apos;s representation in the table of
                     remote methods found, keyed by its name and descriptor.
                    
                     If the table already contains an entry with the same
                     method name and descriptor, then we must replace the
                     old entry with a Method object that represents a legal
                     combination of the old and the new methods;
                     specifically, the combined method must have a throws
                     clause that contains (only) all of the checked
                     exceptions that can be thrown by both the old and the
                     new method (see bugid 4070653).                    
                </comment>
                <comment line="380">
                    Recursively collect methods for all superinterfaces.                    
                </comment>
                <scope line="296"/>
                <declaration name="errors" type="boolean" line="301"/>
                <scope line="307">
                    <declaration name="hasRemoteException" type="boolean" line="313"/>
                    <scope line="314">
                        <scope line="315"/>
                    </scope>
                    <scope line="326"/>
                    <declaration name="implMethod" type="MethodDoc" line="340"/>
                    <scope line="341">
                        <scope line="342">
                            <scope line="343"/>
                        </scope>
                    </scope>
                    <declaration name="newMethod" type="Method" line="357"/>
                    <declaration name="key" type="String" line="372"/>
                    <declaration name="oldMethod" type="Method" line="373"/>
                    <scope line="374"/>
                </scope>
                <scope line="383">
                    <scope line="384"/>
                </scope>
            </method>
            <javadoc line="392">
                Returns the MethodDoc for the method of this remote
                  implementation class that implements the specified remote
                  method of a remote interface.  Returns null if no matching
                  method was found in this remote implementation class.                
            </javadoc>
            <method name="findImplMethod" type="MethodDoc" line="398">
                <params>
                    <param name="interfaceMethod" type="MethodDoc"/>
                </params>
                <declaration name="name" type="String" line="399"/>
                <declaration name="desc" type="String" line="400"/>
                <scope line="401">
                    <scope line="404"/>
                </scope>
            </method>
            <javadoc line="411">
                Computes the &quot;interface hash&quot; of the stub/skeleton pair for
                  this remote implementation class.  This is the 64-bit value
                  used to enforce compatibility between a stub class and a
                  skeleton class in the JDK 1.1 version of the JRMP stub/skeleton
                  protocol.
                  It is calculated using the first 64 bits of an SHA digest.  The
                  digest is of a stream consisting of the following data:
                  (int) stub version number, always 1
                  for each remote method, in order of operation number:
                  (UTF-8) method name
                  (UTF-8) method descriptor
                  for each declared exception, in alphabetical name order:
                  (UTF-8) name of exception class
                  (where &quot;UTF-8&quot; includes a 16-bit length prefix as written by
                  java.io.DataOutput.writeUTF).                
            </javadoc>
            <method name="computeInterfaceHash" type="long" line="429">
                <comment line="444">
                    descriptors already use binary names                    
                </comment>
                <comment line="454">
                    use only the first 64 bits of the digest for the hash                    
                </comment>
                <declaration name="hash" type="long" line="430"/>
                <declaration name="sink" type="ByteArrayOutputStream" line="431"/>
                <scope line="432">
                    <declaration name="md" type="MessageDigest" line="433"/>
                    <declaration name="out" type="DataOutputStream" line="434"/>
                    <scope line="439">
                        <declaration name="methodDoc" type="MethodDoc" line="440"/>
                        <declaration name="exceptions" type="ClassDoc" line="446"/>
                        <scope line="448"/>
                    </scope>
                    <declaration name="hashArray" type="byte" line="455"/>
                    <scope line="456"/>
                </scope>
                <scope line="459"/>
                <scope line="461"/>
            </method>
            <class name="ClassDocComparator" line="468">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="ClassDoc"/>
                    </type_params>
                </implements>
                <javadoc line="468">
                    Compares ClassDoc instances according to the lexicographic
                      order of their binary names.                    
                </javadoc>
                <method name="compare" type="int" line="473">
                    <params>
                        <param name="o1" type="ClassDoc"/>
                        <param name="o2" type="ClassDoc"/>
                    </params>
                </method>
            </class>
            <class name="Method" line="478">
                <implements interface="Cloneable"/>
                <javadoc line="478">
                    Encapsulates RMI-specific information about a particular remote
                      method in the remote implementation class represented by the
                      enclosing RemoteClass.                    
                </javadoc>
                <declaration name="methodDoc" type="MethodDoc" line="485"/>
                <javadoc line="485">
                    MethodDoc for this remove method, from one of the remote
                      interfaces that this method was found in.
                      Note that this MethodDoc may be only one of multiple that
                      correspond to this remote method object, if multiple of
                      this class&apos;s remote interfaces contain methods with the
                      same name and descriptor.  Therefore, this MethodDoc may
                      declare more exceptions thrown that this remote method
                      does.                    
                </javadoc>
                <declaration name="operationString" type="String" line="498"/>
                <javadoc line="498">
                    java.rmi.server.Operation string for this remote method                    
                </javadoc>
                <declaration name="nameAndDescriptor" type="String" line="501"/>
                <javadoc line="501">
                    name and descriptor of this remote method                    
                </javadoc>
                <declaration name="methodHash" type="long" line="504"/>
                <javadoc line="504">
                    JRMP &quot;method hash&quot; for this remote method                    
                </javadoc>
                <declaration name="exceptionTypes" type="ClassDoc[]" line="507"/>
                <javadoc line="507">
                    Exceptions declared to be thrown by this remote method.
                      This list may include superfluous entries, such as
                      unchecked exceptions and subclasses of other entries.                    
                </javadoc>
                <javadoc line="515">
                    Creates a new Method instance for the specified method.                    
                </javadoc>
                <method name="Method" type="constructor" line="518">
                    <params>
                        <param name="methodDoc" type="MethodDoc"/>
                    </params>
                    <comment line="521">
                        Sort exception types to improve consistency with
                         previous implementations.                        
                    </comment>
                </method>
                <javadoc line="532">
                    Returns the MethodDoc object corresponding to this method
                      of a remote interface.                    
                </javadoc>
                <method name="methodDoc" type="MethodDoc" line="536"/>
                <javadoc line="540">
                    Returns the parameter types declared by this method.                    
                </javadoc>
                <method name="parameterTypes" type="Type[]" line="543">
                    <declaration name="parameters" type="Parameter[]" line="544"/>
                    <declaration name="paramTypes" type="Type[]" line="545"/>
                    <scope line="546"/>
                </method>
                <javadoc line="552">
                    Returns the exception types declared to be thrown by this
                      remote method.
                      For methods with the same name and descriptor inherited
                      from multiple remote interfaces, the array will contain the
                      set of exceptions declared in all of the interfaces&apos;
                      methods that can be legally thrown by all of them.                    
                </javadoc>
                <method name="exceptionTypes" type="ClassDoc[]" line="561"/>
                <javadoc line="565">
                    Returns the JRMP &quot;method hash&quot; used to identify this remote
                      method in the JDK 1.2 version of the stub protocol.                    
                </javadoc>
                <method name="methodHash" type="long" line="569"/>
                <javadoc line="573">
                    Returns the string representation of this method
                      appropriate for the construction of a
                      java.rmi.server.Operation object.                    
                </javadoc>
                <method name="operationString" type="String" line="578"/>
                <javadoc line="582">
                    Returns a string consisting of this method&apos;s name followed
                      by its descriptor.                    
                </javadoc>
                <method name="nameAndDescriptor" type="String" line="586"/>
                <javadoc line="590">
                    Returns a new Method object that is a legal combination of
                      this Method object and another one.
                      Doing this requires determining the exceptions declared by
                      the combined method, which must be (only) all of the
                      exceptions declared in both old Methods that may thrown in
                      either of them.                    
                </javadoc>
                <method name="mergeWith" type="Method" line="599">
                    <params>
                        <param name="other" type="Method"/>
                    </params>
                    <scope line="600"/>
                    <declaration name="legalExceptions" type="List&lt;ClassDoc&gt;" line="607"/>
                    <declaration name="merged" type="Method" line="613"/>
                </method>
                <javadoc line="620">
                    Cloning is supported by returning a shallow copy of this
                      object.                    
                </javadoc>
                <method name="clone" type="Method" line="624">
                    <scope line="625"/>
                    <scope line="627"/>
                </method>
                <javadoc line="632">
                    Adds to the supplied list all exceptions in the &quot;froms&quot;
                      array that are subclasses of an exception in the &quot;withs&quot;
                      array.                    
                </javadoc>
                <method name="collectCompatibleExceptions" type="void" line="640">
                    <params>
                        <param name="froms" type="ClassDoc[]"/>
                        <param name="withs" type="ClassDoc[]"/>
                        <param name="list" type="List<ClassDoc>"/>
                    </params>
                    <scope line="641">
                        <scope line="642">
                            <scope line="643">
                                <scope line="644"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="653">
                    Computes the JRMP &quot;method hash&quot; of this remote method.  The
                      method hash is a long containing the first 64 bits of the
                      SHA digest from the UTF-8 encoded string of the method name
                      and descriptor.                    
                </javadoc>
                <method name="computeMethodHash" type="long" line="659">
                    <comment line="670">
                        use only the first 64 bits of the digest for the hash                        
                    </comment>
                    <declaration name="hash" type="long" line="660"/>
                    <declaration name="sink" type="ByteArrayOutputStream" line="661"/>
                    <scope line="662">
                        <declaration name="md" type="MessageDigest" line="663"/>
                        <declaration name="out" type="DataOutputStream" line="664"/>
                        <declaration name="methodString" type="String" line="667"/>
                        <declaration name="hashArray" type="byte" line="672"/>
                        <scope line="673"/>
                    </scope>
                    <scope line="676"/>
                    <scope line="678"/>
                </method>
                <javadoc line="685">
                    Computes the string representation of this method
                      appropriate for the construction of a
                      java.rmi.server.Operation object.                    
                </javadoc>
                <method name="computeOperationString" type="String" line="690">
                    <comment line="691">
                        To be consistent with previous implementations, we use
                         the deprecated style of placing the &quot;[]&quot; for the return
                         type (if any) after the parameter list.                        
                    </comment>
                    <declaration name="returnType" type="Type" line="696"/>
                    <declaration name="op" type="String" line="697"/>
                    <declaration name="parameters" type="Parameter[]" line="699"/>
                    <scope line="700">
                        <scope line="701"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>