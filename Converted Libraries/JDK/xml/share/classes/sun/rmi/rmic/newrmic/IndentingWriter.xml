<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic.newrmic">
        <import package="java.io.Writer"/>
        <import package="java.io.BufferedWriter"/>
        <import package="java.io.IOException"/>
        <class name="IndentingWriter" line="5">
            <extends class="BufferedWriter"/>
            <javadoc line="5">
                A BufferedWriter that supports automatic indentation of lines of
                  text written to the underlying Writer.
                  Methods are provided for compact/convenient indenting in and out,
                  writing text, and writing lines of text in various combinations.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="indentStep" type="int" line="16"/>
            <javadoc line="16">
                number of spaces to change indent when indenting in or out                
            </javadoc>
            <declaration name="tabSize" type="int" line="20"/>
            <javadoc line="20">
                number of spaces to convert into tabs (use MAX_VALUE to disable)                
            </javadoc>
            <declaration name="beginningOfLine" type="boolean" line="24"/>
            <javadoc line="24">
                true if the next character written is the first on a line                
            </javadoc>
            <declaration name="currentIndent" type="int" line="28"/>
            <javadoc line="28">
                current number of spaces to prepend to lines                
            </javadoc>
            <javadoc line="32">
                Creates a new IndentingWriter that writes indented text to the
                  given Writer.  Use the default indent step of four spaces.                
            </javadoc>
            <method name="IndentingWriter" type="constructor" line="36">
                <params>
                    <param name="out" type="Writer"/>
                </params>
            </method>
            <javadoc line="39">
                Creates a new IndentingWriter that writes indented text to the
                  given Writer and uses the supplied indent step.                
            </javadoc>
            <method name="IndentingWriter" type="constructor" line="43">
                <params>
                    <param name="out" type="Writer"/>
                    <param name="indentStep" type="int"/>
                </params>
            </method>
            <javadoc line="46">
                Creates a new IndentingWriter that writes indented text to the
                  given Writer and uses the supplied indent step and tab size.                
            </javadoc>
            <method name="IndentingWriter" type="constructor" line="50">
                <params>
                    <param name="out" type="Writer"/>
                    <param name="indentStep" type="int"/>
                    <param name="tabSize" type="int"/>
                </params>
                <scope line="52"/>
                <scope line="55"/>
            </method>
            <javadoc line="61">
                Writes a single character.                
            </javadoc>
            <method name="write" type="void" line="64">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="68">
                Writes a portion of an array of characters.                
            </javadoc>
            <method name="write" type="void" line="71">
                <params>
                    <param name="cbuf" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="72"/>
            </method>
            <javadoc line="77">
                Writes a portion of a String.                
            </javadoc>
            <method name="write" type="void" line="80">
                <params>
                    <param name="s" type="String"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="81"/>
            </method>
            <javadoc line="86">
                Writes a line separator.  The next character written will be
                  preceded by an indent.                
            </javadoc>
            <method name="newLine" type="void" line="90"/>
            <javadoc line="94">
                Checks if an indent needs to be written before writing the next
                  character.
                  The indent generation is optimized (and made consistent with
                  certain coding conventions) by condensing groups of eight
                  spaces into tab characters.                
            </javadoc>
            <method name="checkWrite" type="void" line="101">
                <scope line="102">
                    <declaration name="i" type="int" line="104"/>
                    <scope line="105"/>
                    <scope line="109"/>
                </scope>
            </method>
            <javadoc line="115">
                Increases the current indent by the indent step.                
            </javadoc>
            <method name="indentIn" type="void" line="118"/>
            <javadoc line="121">
                Decreases the current indent by the indent step.                
            </javadoc>
            <method name="indentOut" type="void" line="124"/>
            <javadoc line="128">
                Indents in.                
            </javadoc>
            <method name="pI" type="void" line="131"/>
            <javadoc line="134">
                Indents out.                
            </javadoc>
            <method name="pO" type="void" line="137"/>
            <javadoc line="140">
                Writes string.                
            </javadoc>
            <method name="p" type="void" line="143">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="146">
                Ends current line.                
            </javadoc>
            <method name="pln" type="void" line="149"/>
            <javadoc line="152">
                Writes string; ends current line.                
            </javadoc>
            <method name="pln" type="void" line="155">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="159">
                Writes string; ends current line; indents in.                
            </javadoc>
            <method name="plnI" type="void" line="162">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="167">
                Indents out; writes string.                
            </javadoc>
            <method name="pO" type="void" line="170">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="174">
                Indents out; writes string; ends current line.                
            </javadoc>
            <method name="pOln" type="void" line="177">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="181">
                Indents out; writes string; ends current line; indents in.
                  This method is useful for generating lines of code that both
                  end and begin nested blocks, like &quot;} else {&quot;.                
            </javadoc>
            <method name="pOlnI" type="void" line="186">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="191">
                Writes object.                
            </javadoc>
            <method name="p" type="void" line="194">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="197">
                Writes object; ends current line.                
            </javadoc>
            <method name="pln" type="void" line="200">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="204">
                Writes object; ends current line; indents in.                
            </javadoc>
            <method name="plnI" type="void" line="207">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="212">
                Indents out; writes object.                
            </javadoc>
            <method name="pO" type="void" line="215">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="219">
                Indents out; writes object; ends current line.                
            </javadoc>
            <method name="pOln" type="void" line="222">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="226">
                Indents out; writes object; ends current line; indents in.
                  This method is useful for generating lines of code that both
                  end and begin nested blocks, like &quot;} else {&quot;.                
            </javadoc>
            <method name="pOlnI" type="void" line="231">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
        </class>
    </source>