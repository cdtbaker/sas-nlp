<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic">
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.OutputStreamWriter"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="sun.tools.java.Type"/>
        <import package="sun.tools.java.Identifier"/>
        <import package="sun.tools.java.ClassDefinition"/>
        <import package="sun.tools.java.ClassDeclaration"/>
        <import package="sun.tools.java.ClassNotFound"/>
        <import package="sun.tools.java.ClassFile"/>
        <import package="sun.tools.java.MemberDefinition"/>
        <import package="com.sun.corba.se.impl.util.Utility"/>
        <class name="RMIGenerator" line="19">
            <implements interface="RMIConstants"/>
            <implements interface="Generator"/>
            <javadoc line="19">
                A Generator object will generate the Java source code of the stub
                  and skeleton classes for an RMI remote implementation class, using
                  a particular stub protocol version.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Peter Jones,  Bryan Atsatt                    
                </author>
            </javadoc>
            <declaration name="versionOptions" type="Hashtable" line="29"/>
            <scope line="30"/>
            <javadoc line="35">
                Default constructor for Main to use.                
            </javadoc>
            <method name="RMIGenerator" type="constructor" line="38"/>
            <javadoc line="41">
                Examine and consume command line arguments.                
                <param>
                    argv The command line arguments. Ignore null
                      and unknown arguments. Set each consumed argument to null.                    
                </param>
                <param>
                    error Report any errors using the main.error() methods.                    
                </param>
                <return>
                    true if no errors, false otherwise.                    
                </return>
            </javadoc>
            <method name="parseArgs" type="boolean" line="48">
                <params>
                    <param name="argv" type="String"/>
                    <param name="main" type="Main"/>
                </params>
                <declaration name="explicitVersion" type="String" line="49"/>
                <scope line="50">
                    <scope line="51">
                        <declaration name="arg" type="String" line="52"/>
                        <scope line="53">
                            <scope line="54"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="66">
                Generate the source files for the stub and/or skeleton classes
                  needed by RMI for the given remote implementation class.                
                <param>
                    env       compiler environment                    
                </param>
                <param>
                    cdef      definition of remote implementation class
                      to generate stubs and/or skeletons for                    
                </param>
                <param>
                    destDir   directory for the root of the package hierarchy
                      for generated files                    
                </param>
            </javadoc>
            <method name="generate" type="void" line="75">
                <params>
                    <param name="env" type="BatchEnvironment"/>
                    <param name="cdef" type="ClassDefinition"/>
                    <param name="destDir" type="File"/>
                </params>
                <declaration name="remoteClass" type="RemoteClass" line="76"/>
                <declaration name="gen" type="RMIGenerator" line="78"/>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <method name="generate" type="void" line="88">
                <scope line="90">
                    <declaration name="out" type="IndentingWriter" line="91"/>
                    <scope line="94"/>
                </scope>
                <scope line="99"/>
                <scope line="103">
                    <scope line="105">
                        <declaration name="out" type="IndentingWriter" line="106"/>
                        <scope line="109"/>
                    </scope>
                    <scope line="114"/>
                </scope>
                <scope line="119">
                    <declaration name="outputDir" type="File" line="120"/>
                    <declaration name="skeletonClassFile" type="File" line="121"/>
                </scope>
            </method>
            <javadoc line="126">
                Return the File object that should be used as the source file
                  for the given Java class, using the supplied destination
                  directory for the top of the package hierarchy.                
            </javadoc>
            <method name="sourceFileForClass" type="File" line="131">
                <params>
                    <param name="className" type="Identifier"/>
                    <param name="outputClassName" type="Identifier"/>
                    <param name="destDir" type="File"/>
                    <param name="env" type="BatchEnvironment"/>
                </params>
                <declaration name="packageDir" type="File" line="132"/>
                <declaration name="outputName" type="String" line="133"/>
                <scope line="134">
                    <declaration name="classNameStr" type="String" line="135"/>
                    <declaration name="temp" type="File" line="136"/>
                    <scope line="137">
                        <scope line="138"/>
                    </scope>
                </scope>
                <declaration name="outputFileName" type="String" line="143"/>
            </method>
            <declaration name="env" type="BatchEnvironment" line="146"/>
            <javadoc line="146">
                rmic environment for this object                
            </javadoc>
            <declaration name="remoteClass" type="RemoteClass" line="150"/>
            <javadoc line="150">
                the remote class that this instance is generating code for                
            </javadoc>
            <declaration name="version" type="int" line="154"/>
            <javadoc line="154">
                version of the stub protocol to use in code generation                
            </javadoc>
            <declaration name="remoteMethods" type="RemoteClass.Method[]" line="158"/>
            <javadoc line="158">
                remote methods for remote class, indexed by operation number                
            </javadoc>
            <declaration name="remoteClassName" type="Identifier" line="162"/>
            <javadoc line="162">
                Names for the remote class and the stub and skeleton classes
                  to be generated for it.                
            </javadoc>
            <declaration name="stubClassName" type="Identifier" line="167"/>
            <declaration name="skeletonClassName" type="Identifier" line="168"/>
            <declaration name="cdef" type="ClassDefinition" line="169"/>
            <declaration name="destDir" type="File" line="170"/>
            <declaration name="stubFile" type="File" line="171"/>
            <declaration name="skeletonFile" type="File" line="172"/>
            <declaration name="methodFieldNames" type="String[]" line="173"/>
            <javadoc line="173">
                Names to use for the java.lang.reflect.Method static fields
                  corresponding to each remote method.                
            </javadoc>
            <declaration name="defException" type="ClassDefinition" line="178"/>
            <javadoc line="178">
                cached definition for certain exception classes in this environment                
            </javadoc>
            <declaration name="defRemoteException" type="ClassDefinition" line="182"/>
            <declaration name="defRuntimeException" type="ClassDefinition" line="183"/>
            <javadoc line="184">
                Create a new stub/skeleton Generator object for the given
                  remote implementation class to generate code according to
                  the given stub protocol version.                
            </javadoc>
            <method name="RMIGenerator" type="constructor" line="189">
                <params>
                    <param name="env" type="BatchEnvironment"/>
                    <param name="cdef" type="ClassDefinition"/>
                    <param name="destDir" type="File"/>
                    <param name="remoteClass" type="RemoteClass"/>
                    <param name="version" type="int"/>
                </params>
            </method>
            <javadoc line="206">
                Write the stub for the remote class to a stream.                
            </javadoc>
            <method name="writeStub" type="void" line="209">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="213"/>
                <declaration name="remoteInterfaces" type="ClassDefinition[]" line="219"/>
                <scope line="220">
                    <scope line="222"/>
                </scope>
                <scope line="229"/>
                <scope line="235">
                    <scope line="238">
                        <scope line="239"/>
                        <scope line="246"/>
                        <scope line="259"/>
                        <scope line="262"/>
                    </scope>
                </scope>
                <scope line="274">
                    <scope line="276"/>
                </scope>
            </method>
            <javadoc line="283">
                Write the constructors for the stub class.                
            </javadoc>
            <method name="writeStubConstructors" type="void" line="286">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="288"/>
            </method>
            <javadoc line="297">
                Write the stub method for the remote method with the given &quot;opnum&quot;.                
            </javadoc>
            <method name="writeStubMethod" type="void" line="300">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="opnum" type="int"/>
                </params>
                <declaration name="method" type="RemoteClass.Method" line="301"/>
                <declaration name="methodName" type="Identifier" line="302"/>
                <declaration name="methodType" type="Type" line="303"/>
                <declaration name="paramTypes" type="Type" line="304"/>
                <declaration name="paramNames" type="String" line="305"/>
                <declaration name="returnType" type="Type" line="306"/>
                <declaration name="exceptions" type="ClassDeclaration[]" line="307"/>
                <scope line="310"/>
                <scope line="315">
                    <scope line="317"/>
                </scope>
                <declaration name="catchList" type="Vector" line="324"/>
                <scope line="325"/>
                <scope line="328"/>
                <scope line="331">
                    <scope line="332"/>
                    <scope line="336">
                        <scope line="338"/>
                    </scope>
                    <scope line="344"/>
                    <scope line="348"/>
                </scope>
                <scope line="352"/>
                <scope line="355">
                    <scope line="357"/>
                    <scope line="366"/>
                    <scope line="369">
                        <declaration name="objectRead" type="boolean" line="373"/>
                        <scope line="377"/>
                    </scope>
                </scope>
                <scope line="387"/>
                <scope line="390">
                    <scope line="391">
                        <declaration name="def" type="ClassDefinition" line="392"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="402">
                Compute the exceptions which need to be caught and rethrown in a
                  stub method before wrapping Exceptions in UnexpectedExceptions,
                  given the exceptions declared in the throws clause of the method.
                  Returns a Vector containing ClassDefinition objects for each
                  exception to catch.  Each exception is guaranteed to be unique,
                  i.e. not a subclass of any of the other exceptions in the Vector,
                  so the catch blocks for these exceptions may be generated in any
                  order relative to each other.
                  RemoteException and RuntimeException are each automatically placed
                  in the returned Vector (if none of their superclasses are already
                  present), since those exceptions should always be directly rethrown
                  by a stub method.
                  The returned Vector will be empty if java.lang.Exception or one
                  of its superclasses is in the throws clause of the method, indicating
                  that no exceptions need to be caught.                
            </javadoc>
            <method name="computeUniqueCatchList" type="Vector" line="419">
                <params>
                    <param name="exceptions" type="ClassDeclaration[]"/>
                </params>
                <declaration name="uniqueList" type="Vector" line="420"/>
                <scope line="423">
                    <declaration name="decl" type="ClassDeclaration" line="424"/>
                    <scope line="425">
                        <scope line="426"/>
                        <scope line="430"/>
                        <scope line="433">
                            <declaration name="def" type="ClassDefinition" line="434"/>
                            <scope line="435"/>
                            <scope line="438"/>
                            <scope line="441"/>
                        </scope>
                    </scope>
                    <scope line="447"/>
                </scope>
            </method>
            <javadoc line="453">
                Write the skeleton for the remote class to a stream.                
            </javadoc>
            <method name="writeSkeleton" type="void" line="456">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="457"/>
                <scope line="463"/>
                <scope line="481">
                    <scope line="483">
                        <scope line="484"/>
                    </scope>
                    <scope line="492"/>
                </scope>
                <scope line="500"/>
                <scope line="506"/>
            </method>
            <javadoc line="515">
                Write the case block for the skeleton&apos;s dispatch method for
                  the remote method with the given &quot;opnum&quot;.                
            </javadoc>
            <method name="writeSkeletonDispatchCase" type="void" line="519">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="opnum" type="int"/>
                </params>
                <declaration name="method" type="RemoteClass.Method" line="520"/>
                <declaration name="methodName" type="Identifier" line="521"/>
                <declaration name="methodType" type="Type" line="522"/>
                <declaration name="paramTypes" type="Type" line="523"/>
                <declaration name="paramNames" type="String" line="524"/>
                <declaration name="returnType" type="Type" line="525"/>
                <scope line="528">
                    <scope line="529"/>
                    <declaration name="objectsRead" type="boolean" line="534"/>
                    <scope line="537"/>
                </scope>
                <scope line="545"/>
                <scope line="548"/>
                <scope line="552"/>
                <scope line="558"/>
                <scope line="562"/>
            </method>
            <javadoc line="573">
                Write declaration and initializer for &quot;operations&quot; static array.                
            </javadoc>
            <method name="writeOperationsArray" type="void" line="576">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="578"/>
            </method>
            <javadoc line="585">
                Write declaration and initializer for &quot;interfaceHash&quot; static field.                
            </javadoc>
            <method name="writeInterfaceHash" type="void" line="588">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
            </method>
            <javadoc line="591">
                Write declaration for java.lang.reflect.Method static fields
                  corresponding to each remote method in a stub.                
            </javadoc>
            <method name="writeMethodFieldDeclarations" type="void" line="595">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="596"/>
            </method>
            <javadoc line="600">
                Write code to initialize the static fields for each method
                  using the Java Reflection API.                
            </javadoc>
            <method name="writeMethodFieldInitializers" type="void" line="604">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="605">
                    <declaration name="method" type="RemoteClass.Method" line="607"/>
                    <declaration name="def" type="MemberDefinition" line="608"/>
                    <declaration name="methodName" type="Identifier" line="609"/>
                    <declaration name="methodType" type="Type" line="610"/>
                    <declaration name="paramTypes" type="Type" line="611"/>
                    <scope line="613"/>
                </scope>
            </method>
            <javadoc line="620">
                Generate an array of names for fields that correspond to the given
                  array of remote methods.  Each name in the returned array is
                  guaranteed to be unique.
                  The name of a method is included in its corresponding field name
                  to enhance readability of the generated code.                
            </javadoc>
            <method name="nameMethodFields" type="String[]" line="627">
                <params>
                    <param name="methods" type="RemoteClass.Method[]"/>
                </params>
                <declaration name="names" type="String[]" line="628"/>
                <scope line="629"/>
            </method>
            <javadoc line="634">
                Generate an array of names for parameters corresponding to the
                  given array of types for the parameters.  Each name in the returned
                  array is guaranteed to be unique.
                  A representation of the type of a parameter is included in its
                  corresponding field name to enhance the readability of the generated
                  code.                
            </javadoc>
            <method name="nameParameters" type="String[]" line="642">
                <params>
                    <param name="types" type="Type[]"/>
                </params>
                <declaration name="names" type="String[]" line="643"/>
                <scope line="644"/>
            </method>
            <javadoc line="649">
                Generate a readable string representing the given type suitable
                  for embedding within a Java identifier.                
            </javadoc>
            <method name="generateNameFromType" type="String" line="653">
                <params>
                    <param name="type" type="Type"/>
                </params>
                <declaration name="typeCode" type="int" line="654"/>
            </method>
            <javadoc line="673">
                Write a snippet of Java code to marshal a value named &quot;name&quot; of
                  type &quot;type&quot; to the java.io.ObjectOutput stream named &quot;stream&quot;.
                  Primitive types are marshalled with their corresponding methods
                  in the java.io.DataOutput interface, and objects (including arrays)
                  are marshalled using the writeObject method.                
            </javadoc>
            <method name="writeMarshalArgument" type="void" line="680">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="typeCode" type="int" line="681"/>
            </method>
            <javadoc line="715">
                Write Java statements to marshal a series of values in order as
                  named in the &quot;names&quot; array, with types as specified in the &quot;types&quot;
                  array&quot;, to the java.io.ObjectOutput stream named &quot;stream&quot;.                
            </javadoc>
            <method name="writeMarshalArguments" type="void" line="720">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="types" type="Type[]"/>
                    <param name="names" type="String[]"/>
                </params>
                <scope line="721"/>
                <scope line="724"/>
            </method>
            <javadoc line="729">
                Write a snippet of Java code to unmarshal a value of type &quot;type&quot;
                  from the java.io.ObjectInput stream named &quot;stream&quot; into a variable
                  named &quot;name&quot; (if &quot;name&quot; is null, the value in unmarshalled and
                  discarded).
                  Primitive types are unmarshalled with their corresponding methods
                  in the java.io.DataInput interface, and objects (including arrays)
                  are unmarshalled using the readObject method.                
            </javadoc>
            <method name="writeUnmarshalArgument" type="boolean" line="738">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="readObject" type="boolean" line="739"/>
                <scope line="740"/>
                <declaration name="typeCode" type="int" line="743"/>
            </method>
            <javadoc line="779">
                Write Java statements to unmarshal a series of values in order of
                  types as in the &quot;types&quot; array from the java.io.ObjectInput stream
                  named &quot;stream&quot; into variables as named in &quot;names&quot; (for any element
                  of &quot;names&quot; that is null, the corresponding value is unmarshalled
                  and discarded).                
            </javadoc>
            <method name="writeUnmarshalArguments" type="boolean" line="786">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="types" type="Type[]"/>
                    <param name="names" type="String[]"/>
                </params>
                <scope line="787"/>
                <declaration name="readObject" type="boolean" line="790"/>
                <scope line="791">
                    <scope line="792"/>
                </scope>
            </method>
            <javadoc line="799">
                Return a snippet of Java code to wrap a value named &quot;name&quot; of
                  type &quot;type&quot; into an object as appropriate for use by the
                  Java Reflection API.
                  For primitive types, an appropriate wrapper class instantiated
                  with the primitive value.  For object types (including arrays),
                  no wrapping is necessary, so the value is named directly.                
            </javadoc>
            <method name="wrapArgumentCode" type="String" line="807">
                <params>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="typeCode" type="int" line="808"/>
            </method>
            <javadoc line="833">
                Return a snippet of Java code to unwrap a value named &quot;name&quot; into
                  a value of type &quot;type&quot;, as appropriate for the Java Reflection API.
                  For primitive types, the value is assumed to be of the corresponding
                  wrapper type, and a method is called on the wrapper type to retrieve
                  the primitive value.  For object types (include arrays), no
                  unwrapping is necessary; the value is simply cast to the expected
                  real object type.                
            </javadoc>
            <method name="unwrapArgumentCode" type="String" line="842">
                <params>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="typeCode" type="int" line="843"/>
            </method>
        </class>
    </source>