<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="sun.tools.java.ClassFile"/>
        <import package="sun.tools.java.ClassDefinition"/>
        <import package="sun.tools.java.ClassDeclaration"/>
        <import package="sun.tools.java.ClassNotFound"/>
        <import package="sun.tools.java.Identifier"/>
        <import package="sun.tools.java.ClassPath"/>
        <import package="sun.tools.javac.SourceClass"/>
        <import package="sun.tools.util.CommandLine"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.util.Properties"/>
        <class name="Main" line="61">
            <comment line="665">
                Compile all classes that need to be compiled.                
            </comment>
            <comment line="684">
                Compile a single class.                
            </comment>
            <implements interface="sun.rmi.rmic.Constants"/>
            <javadoc line="61">
                Main &quot;rmic&quot; program.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="sourcePathArg" type="String" line="69"/>
            <declaration name="sysClassPathArg" type="String" line="70"/>
            <declaration name="extDirsArg" type="String" line="71"/>
            <declaration name="classPathString" type="String" line="72"/>
            <declaration name="destDir" type="File" line="73"/>
            <declaration name="flags" type="int" line="74"/>
            <declaration name="tm" type="long" line="75"/>
            <declaration name="classes" type="Vector" line="76"/>
            <declaration name="nowrite" type="boolean" line="77"/>
            <declaration name="nocompile" type="boolean" line="78"/>
            <declaration name="keepGenerated" type="boolean" line="79"/>
            <declaration name="status" type="boolean" line="80"/>
            <declaration name="generatorArgs" type="String[]" line="81"/>
            <declaration name="generators" type="Vector" line="82"/>
            <declaration name="environmentClass" type="Class" line="83"/>
            <declaration name="iiopGeneration" type="boolean" line="84"/>
            <declaration name="program" type="String" line="86"/>
            <javadoc line="86">
                Name of the program.                
            </javadoc>
            <declaration name="out" type="OutputStream" line="91"/>
            <javadoc line="91">
                The stream where error message are printed.                
            </javadoc>
            <javadoc line="96">
                Constructor.                
            </javadoc>
            <method name="Main" type="constructor" line="99">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="program" type="String"/>
                </params>
            </method>
            <javadoc line="104">
                Output a message.                
            </javadoc>
            <method name="output" type="void" line="107">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <declaration name="out" type="PrintStream" line="108"/>
            </method>
            <javadoc line="114">
                Top level error message.  This method is called when the
                  environment could not be set up yet.                
            </javadoc>
            <method name="error" type="void" line="118">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="122">
                <params>
                    <param name="msg" type="String"/>
                    <param name="arg1" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="126">
                <params>
                    <param name="msg" type="String"/>
                    <param name="arg1" type="String"/>
                    <param name="arg2" type="String"/>
                </params>
            </method>
            <javadoc line="130">
                Usage                
            </javadoc>
            <method name="usage" type="void" line="133"/>
            <javadoc line="137">
                Run the compiler                
            </javadoc>
            <method name="compile" type="boolean" line="140">
                <params>
                    <param name="argv" type="String"/>
                </params>
                <comment line="143">
                    Handle internal option to use the new (and incomplete) rmic
                     implementation.  This option is handled here, rather than
                     in parseArgs, so that none of the arguments will be nulled
                     before delegating to the new implementation.                    
                </comment>
                <scope line="148">
                    <scope line="149"/>
                </scope>
                <scope line="155"/>
                <scope line="159"/>
            </method>
            <javadoc line="167">
                Get the destination directory.                
            </javadoc>
            <method name="getDestinationDir" type="File" line="170"/>
            <javadoc line="174">
                Parse the arguments for compile.                
            </javadoc>
            <method name="parseArgs" type="boolean" line="177">
                <params>
                    <param name="argv" type="String"/>
                </params>
                <comment line="197">
                    Pre-process command line for @file arguments                    
                </comment>
                <comment line="210">
                    Parse arguments                    
                </comment>
                <comment line="339">
                    Now that all generators have had a chance at the args,
                     scan what&apos;s left for classes and illegal args...                    
                </comment>
                <comment line="355">
                    If the generators vector is empty, add the default generator...                    
                </comment>
                <scope line="191"/>
                <scope line="197"/>
                <scope line="199"/>
                <scope line="202"/>
                <scope line="210">
                    <scope line="211">
                        <scope line="212"/>
                        <scope line="216"/>
                        <scope line="221"/>
                        <scope line="224"/>
                        <scope line="227"/>
                        <scope line="230"/>
                        <scope line="233"/>
                        <scope line="236"/>
                        <scope line="241"/>
                        <scope line="244"/>
                        <scope line="248">
                            <scope line="249">
                                <scope line="250"/>
                            </scope>
                            <scope line="258"/>
                        </scope>
                        <scope line="263">
                            <scope line="264">
                                <scope line="265"/>
                            </scope>
                            <scope line="273"/>
                        </scope>
                        <scope line="278">
                            <scope line="279">
                                <scope line="280"/>
                            </scope>
                            <scope line="288"/>
                        </scope>
                        <scope line="293">
                            <scope line="294">
                                <scope line="295"/>
                            </scope>
                            <scope line="303"/>
                        </scope>
                        <scope line="308">
                            <scope line="309">
                                <scope line="310"/>
                                <scope line="318"/>
                            </scope>
                            <scope line="323"/>
                        </scope>
                        <scope line="328">
                            <scope line="329"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="341">
                    <scope line="342">
                        <scope line="343"/>
                        <scope line="347"/>
                    </scope>
                </scope>
                <scope line="356"/>
            </method>
            <javadoc line="363">
                If this argument is for a generator, instantiate it, call
                  parseArgs(...) and add generator to generators vector.
                  Returns false on error.                
            </javadoc>
            <method name="checkGeneratorArg" type="boolean" line="368">
                <params>
                    <param name="argv" type="String[]"/>
                    <param name="currentIndex" type="int"/>
                </params>
                <comment line="372">
                    Remove &apos;-&apos;                    
                </comment>
                <comment line="375">
                    Got a match, add Generator and call parseArgs...                    
                </comment>
                <declaration name="result" type="boolean" line="369"/>
                <scope line="370">
                    <declaration name="arg" type="String" line="371"/>
                    <scope line="372">
                        <scope line="373">
                            <declaration name="gen" type="Generator" line="375"/>
                            <scope line="376"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="387">
                Instantiate and add a generator to the generators array.                
            </javadoc>
            <method name="addGenerator" type="Generator" line="390">
                <params>
                    <param name="arg" type="String"/>
                </params>
                <comment line="395">
                    Create an instance of the generator and add it to
                     the array...                    
                </comment>
                <comment line="413">
                    Get the environment required by this generator...                    
                </comment>
                <comment line="421">
                    Is the new class a subclass of the current one?                    
                </comment>
                <comment line="425">
                    Yes, so switch to the new one...                    
                </comment>
                <comment line="431">
                    No. Is the current class a subclass of the
                     new one?                    
                </comment>
                <comment line="436">
                    No, so it&apos;s a conflict...                    
                </comment>
                <comment line="448">
                    If this is the iiop stub generator, cache
                     that fact for the jrmp generator...                    
                </comment>
                <declaration name="gen" type="Generator" line="392"/>
                <declaration name="className" type="String" line="397"/>
                <scope line="398"/>
                <scope line="403"/>
                <scope line="405"/>
                <declaration name="envClass" type="Class" line="414"/>
                <declaration name="env" type="String" line="415"/>
                <scope line="416">
                    <scope line="417">
                        <scope line="422"/>
                        <scope line="428">
                            <scope line="433"/>
                        </scope>
                    </scope>
                    <scope line="441"/>
                </scope>
                <scope line="450"/>
            </method>
            <javadoc line="456">
                Grab a resource string and parse it into an array of strings. Assumes
                  comma separated list.                
                <param>
                    name The resource name.                    
                </param>
                <param>
                    mustExist If true, throws error if resource does not exist. If
                      false and resource does not exist, returns zero element array.                    
                </param>
            </javadoc>
            <method name="getArray" type="String[]" line="463">
                <params>
                    <param name="name" type="String"/>
                    <param name="mustExist" type="boolean"/>
                </params>
                <declaration name="result" type="String[]" line="464"/>
                <declaration name="value" type="String" line="465"/>
                <scope line="466">
                    <scope line="467"/>
                    <scope line="470"/>
                </scope>
                <declaration name="parser" type="StringTokenizer" line="475"/>
                <declaration name="count" type="int" line="476"/>
                <scope line="478"/>
            </method>
            <javadoc line="485">
                Get the correct type of BatchEnvironment                
            </javadoc>
            <method name="getEnv" type="BatchEnvironment" line="488">
                <declaration name="classPath" type="ClassPath" line="490"/>
                <declaration name="result" type="BatchEnvironment" line="494"/>
                <scope line="495">
                    <declaration name="ctorArgTypes" type="Class[]" line="496"/>
                    <declaration name="ctorArgs" type="Object[]" line="497"/>
                    <declaration name="constructor" type="Constructor" line="498"/>
                </scope>
                <scope line="502"/>
            </method>
            <javadoc line="509">
                Do the compile with the switches and files already supplied                
            </javadoc>
            <method name="doCompile" type="boolean" line="512">
                <comment line="514">
                    Create batch environment                    
                </comment>
                <comment line="518">
                    Set the classfile version numbers
                     Compat and 1.1 stubs must retain the old version number.                    
                </comment>
                <comment line="523">
                    Preload the &quot;out of memory&quot; error string just in case we run
                     out of memory during the compile.                    
                </comment>
                <comment line="529">
                    Load the classes on the command line
                     Replace the entries in classes with the ClassDefinition for the class                    
                </comment>
                <comment line="536">
                    Fix bugid 4049354: support using &apos;.&apos; as an inner class
                     qualifier on the command line (previously, only mangled
                     inner class names were understood, like &quot;pkg.Outer$Inner&quot;).
                    
                     The following method, also used by &quot;javap&quot;, resolves the
                     given unmangled inner class name to the appropriate
                     internal identifier.  For example, it translates
                     &quot;pkg.Outer.Inner&quot; to &quot;pkg.Outer. Inner&quot;.                    
                </comment>
                <comment line="547">
                    But if we use such an internal inner class name identifier
                     to load the class definition, the Java compiler will notice
                     if the impl class is a &quot;private&quot; inner class and then deny
                     skeletons (needed unless &quot;-v1.2&quot; is used) the ability to
                     cast to it.  To work around this problem, we mangle inner
                     class name identifiers to their binary &quot;outer&quot; class name:
                     &quot;pkg.Outer. Inner&quot; becomes &quot;pkg.Outer$Inner&quot;.                    
                </comment>
                <comment line="571">
                    compile all classes that need compilation                    
                </comment>
                <comment line="576">
                    The compiler has run out of memory.  Use the error string
                     which we preloaded.                    
                </comment>
                <comment line="584">
                    We allow the compiler to take an exception silently if a program
                     error has previously been detected.  Presumably, this makes the
                     compiler more robust in the face of bad error recovery.                    
                </comment>
                <comment line="631">
                    last step is to delete generated source files                    
                </comment>
                <comment line="636">
                    We&apos;re done                    
                </comment>
                <comment line="642">
                    Shutdown the environment object and release our resources.
                     Note that while this is unneccessary when rmic is invoked
                     the command line, there are environments in which rmic
                     from is invoked within a server process, so resource
                     reclamation is important...                    
                </comment>
                <declaration name="env" type="BatchEnvironment" line="514"/>
                <declaration name="noMemoryErrorString" type="String" line="524"/>
                <declaration name="stackOverflowErrorString" type="String" line="525"/>
                <scope line="527">
                    <scope line="531">
                        <declaration name="implClassName" type="Identifier" line="532"/>
                        <declaration name="decl" type="ClassDeclaration" line="557"/>
                        <scope line="558">
                            <declaration name="def" type="ClassDefinition" line="559"/>
                            <scope line="560">
                                <declaration name="gen" type="Generator" line="561"/>
                            </scope>
                        </scope>
                        <scope line="564"/>
                    </scope>
                    <scope line="571"/>
                </scope>
                <scope line="574"/>
                <scope line="579"/>
                <scope line="582">
                    <scope line="586"/>
                </scope>
                <scope line="592">
                    <scope line="593"/>
                </scope>
                <declaration name="status" type="boolean" line="603"/>
                <scope line="604">
                    <declaration name="msg" type="String" line="605"/>
                    <scope line="606"/>
                    <scope line="608"/>
                    <scope line="611">
                        <scope line="612"/>
                        <scope line="614"/>
                    </scope>
                </scope>
                <scope line="620">
                    <scope line="621">
                        <scope line="622"/>
                        <scope line="624"/>
                    </scope>
                </scope>
                <scope line="631"/>
                <scope line="636"/>
            </method>
            <method name="compileAllClasses" type="void" line="670">
                <params>
                    <param name="env" type="BatchEnvironment"/>
                </params>
                <declaration name="buf" type="ByteArrayOutputStream" line="671"/>
                <declaration name="done" type="boolean" line="672"/>
                <scope line="674">
                    <scope line="676">
                        <declaration name="c" type="ClassDeclaration" line="677"/>
                    </scope>
                </scope>
            </method>
            <method name="compileClass" type="boolean" line="691">
                <params>
                    <param name="c" type="ClassDeclaration"/>
                    <param name="buf" type="ByteArrayOutputStream"/>
                    <param name="env" type="BatchEnvironment"/>
                </params>
                <comment line="703">
                    fall through                    
                </comment>
                <comment line="713">
                    fall through                    
                </comment>
                <comment line="721">
                    If we get to here, then compilation is going
                     to occur. If the -Xnocompile switch is set
                     then fail. Note that this check is required
                     here because this method is called from
                     generators, not just from within this class...                    
                </comment>
                <comment line="736">
                    fall through                    
                </comment>
                <comment line="742">
                    bail out if there were any errors                    
                </comment>
                <comment line="781">
                    Create the file                    
                </comment>
                <declaration name="done" type="boolean" line="692"/>
                <declaration name="src" type="SourceClass" line="694"/>
                <scope line="698">
                    <scope line="699"/>
                </scope>
                <scope line="706">
                    <scope line="709"/>
                </scope>
                <scope line="716">
                    <scope line="717"/>
                    <scope line="726"/>
                </scope>
                <scope line="739">
                    <scope line="742"/>
                    <scope line="752"/>
                    <declaration name="pkgName" type="String" line="756"/>
                    <declaration name="className" type="String" line="757"/>
                    <declaration name="file" type="File" line="759"/>
                    <scope line="760">
                        <scope line="761">
                            <scope line="763"/>
                        </scope>
                        <scope line="767"/>
                    </scope>
                    <scope line="770">
                        <declaration name="classfile" type="ClassFile" line="771"/>
                        <scope line="772"/>
                    </scope>
                    <scope line="781">
                        <declaration name="out" type="FileOutputStream" line="782"/>
                        <scope line="785"/>
                    </scope>
                    <scope line="788"/>
                </scope>
            </method>
            <javadoc line="796">
                Main program                
            </javadoc>
            <method name="main" type="void" line="799">
                <params>
                    <param name="argv" type="String"/>
                </params>
                <declaration name="compiler" type="Main" line="800"/>
            </method>
            <javadoc line="804">
                Return the string value of a named resource in the rmic.properties
                  resource bundle.  If the resource is not found, null is returned.                
            </javadoc>
            <method name="getString" type="String" line="808">
                <params>
                    <param name="key" type="String"/>
                </params>
                <comment line="814">
                    To enable extensions, search the &apos;resourcesExt&apos;
                     bundle first, followed by the &apos;resources&apos; bundle...                    
                </comment>
                <scope line="809"/>
                <scope line="816">
                    <scope line="817"/>
                    <scope line="819"/>
                </scope>
                <scope line="822"/>
                <scope line="824"/>
            </method>
            <declaration name="resourcesInitialized" type="boolean" line="829"/>
            <declaration name="resources" type="ResourceBundle" line="830"/>
            <declaration name="resourcesExt" type="ResourceBundle" line="831"/>
            <method name="initResources" type="void" line="833">
                <scope line="834">
                    <scope line="838"/>
                    <scope line="841"/>
                </scope>
                <scope line="842"/>
            </method>
            <method name="getText" type="String" line="848">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="message" type="String" line="849"/>
                <scope line="850"/>
            </method>
            <method name="getText" type="String" line="856">
                <params>
                    <param name="key" type="String"/>
                    <param name="num" type="int"/>
                </params>
            </method>
            <method name="getText" type="String" line="860">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg0" type="String"/>
                </params>
            </method>
            <method name="getText" type="String" line="864">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg0" type="String"/>
                    <param name="arg1" type="String"/>
                </params>
            </method>
            <method name="getText" type="String" line="870">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg0" type="String"/>
                    <param name="arg1" type="String"/>
                    <param name="arg2" type="String"/>
                </params>
                <declaration name="format" type="String" line="871"/>
                <scope line="872"/>
                <declaration name="args" type="String[]" line="877"/>
            </method>
        </class>
    </source>