<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic.newrmic.jrmp">
        <import package="com.sun.javadoc.ClassDoc"/>
        <import package="com.sun.javadoc.MethodDoc"/>
        <import package="com.sun.javadoc.Type"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="sun.rmi.rmic.newrmic.BatchEnvironment"/>
        <import package="sun.rmi.rmic.newrmic.IndentingWriter"/>
        <import package="sun.rmi.rmic.newrmic.Constants"/>
        <import package="sun.rmi.rmic.newrmic.jrmp.Constants"/>
        <class name="StubSkeletonWriter" line="13">
            <javadoc line="13">
                Writes the source code for the stub class and (optionally) skeleton
                  class for a particular remote implementation class.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="env" type="BatchEnvironment" line="22"/>
            <javadoc line="22">
                rmic environment for this object                
            </javadoc>
            <declaration name="remoteClass" type="RemoteClass" line="26"/>
            <javadoc line="26">
                the remote implemention class to generate code for                
            </javadoc>
            <declaration name="version" type="StubVersion" line="30"/>
            <javadoc line="30">
                version of the JRMP stub protocol to generate code for                
            </javadoc>
            <declaration name="stubClassName" type="String" line="34"/>
            <declaration name="skeletonClassName" type="String" line="35"/>
            <declaration name="packageName" type="String" line="36"/>
            <declaration name="stubClassSimpleName" type="String" line="37"/>
            <declaration name="skeletonClassSimpleName" type="String" line="38"/>
            <declaration name="remoteMethods" type="RemoteClass.Method[]" line="39"/>
            <javadoc line="39">
                remote methods of class, indexed by operation number                
            </javadoc>
            <declaration name="methodFieldNames" type="String[]" line="43"/>
            <javadoc line="43">
                Names to use for the java.lang.reflect.Method static fields in
                  the generated stub class corresponding to each remote method.                
            </javadoc>
            <javadoc line="48">
                Creates a StubSkeletonWriter instance for the specified remote
                  implementation class.  The generated code will implement the
                  specified JRMP stub protocol version.                
            </javadoc>
            <method name="StubSkeletonWriter" type="constructor" line="53">
                <params>
                    <param name="env" type="BatchEnvironment"/>
                    <param name="remoteClass" type="RemoteClass"/>
                    <param name="version" type="StubVersion"/>
                </params>
                <declaration name="i" type="int" line="59"/>
            </method>
            <javadoc line="66">
                Returns the binary name of the stub class to generate for the
                  remote implementation class.                
            </javadoc>
            <method name="stubClassName" type="String" line="70"/>
            <javadoc line="73">
                Returns the binary name of the skeleton class to generate for
                  the remote implementation class.                
            </javadoc>
            <method name="skeletonClassName" type="String" line="77"/>
            <javadoc line="80">
                Writes the stub class for the remote class to a stream.                
            </javadoc>
            <method name="writeStub" type="void" line="83">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="87"/>
                <declaration name="remoteInterfaces" type="ClassDoc[]" line="93"/>
                <scope line="94">
                    <scope line="96">
                        <scope line="97"/>
                    </scope>
                </scope>
                <scope line="105"/>
                <scope line="111">
                    <scope line="114">
                        <scope line="115"/>
                        <scope line="122"/>
                        <scope line="135"/>
                        <scope line="138"/>
                    </scope>
                </scope>
                <scope line="150">
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="159">
                Writes the constructors for the stub class.                
            </javadoc>
            <method name="writeStubConstructors" type="void" line="162">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="164"/>
            </method>
            <javadoc line="173">
                Writes the stub method for the remote method with the given
                  operation number.                
            </javadoc>
            <method name="writeStubMethod" type="void" line="177">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="opnum" type="int"/>
                </params>
                <declaration name="method" type="RemoteClass.Method" line="178"/>
                <declaration name="methodDoc" type="MethodDoc" line="179"/>
                <declaration name="methodName" type="String" line="180"/>
                <declaration name="paramTypes" type="Type[]" line="181"/>
                <declaration name="paramNames" type="String" line="182"/>
                <declaration name="returnType" type="Type" line="183"/>
                <declaration name="exceptions" type="ClassDoc[]" line="184"/>
                <scope line="187">
                    <scope line="188"/>
                </scope>
                <scope line="194">
                    <scope line="196">
                        <scope line="197"/>
                    </scope>
                </scope>
                <declaration name="catchList" type="List&amp;lt;ClassDoc&amp;gt;" line="205"/>
                <scope line="206"/>
                <scope line="209"/>
                <scope line="212">
                    <scope line="213"/>
                    <scope line="217">
                        <scope line="219"/>
                    </scope>
                    <scope line="225"/>
                    <scope line="229"/>
                </scope>
                <scope line="233"/>
                <scope line="236">
                    <scope line="238"/>
                    <scope line="247"/>
                    <scope line="250">
                        <declaration name="objectRead" type="boolean" line="254"/>
                        <scope line="258"/>
                    </scope>
                </scope>
                <scope line="268"/>
                <scope line="271">
                    <scope line="272"/>
                </scope>
            </method>
            <javadoc line="282">
                Computes the exceptions that need to be caught and rethrown in
                  a stub method before wrapping Exceptions in
                  UnexpectedExceptions, given the exceptions declared in the
                  throws clause of the method.  Returns a list containing the
                  exception to catch.  Each exception is guaranteed to be unique,
                  i.e. not a subclass of any of the other exceptions in the list,
                  so the catch blocks for these exceptions may be generated in
                  any order relative to each other.
                  RemoteException and RuntimeException are each automatically
                  placed in the returned list (unless any of their superclasses
                  are already present), since those exceptions should always be
                  directly rethrown by a stub method.
                  The returned list will be empty if java.lang.Exception or one
                  of its superclasses is in the throws clause of the method,
                  indicating that no exceptions need to be caught.                
            </javadoc>
            <method name="computeUniqueCatchList" type="List&lt;ClassDoc&gt;" line="299">
                <params>
                    <param name="exceptions" type="ClassDoc[]"/>
                </params>
                <declaration name="uniqueList" type="List&amp;lt;ClassDoc&amp;gt;" line="300"/>
                <scope line="303">
                    <scope line="304"/>
                    <scope line="308"/>
                    <scope line="311">
                        <declaration name="ex2" type="ClassDoc" line="312"/>
                        <scope line="313"/>
                        <scope line="316"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="324">
                Writes the skeleton for the remote class to a stream.                
            </javadoc>
            <method name="writeSkeleton" type="void" line="327">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="328"/>
                <scope line="334"/>
                <scope line="352">
                    <scope line="354">
                        <scope line="355"/>
                    </scope>
                    <scope line="363"/>
                </scope>
                <scope line="371"/>
                <scope line="375"/>
                <scope line="379"/>
            </method>
            <javadoc line="388">
                Writes the case block for the skeleton&apos;s dispatch method for
                  the remote method with the given &quot;opnum&quot;.                
            </javadoc>
            <method name="writeSkeletonDispatchCase" type="void" line="392">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="opnum" type="int"/>
                </params>
                <declaration name="method" type="RemoteClass.Method" line="393"/>
                <declaration name="methodDoc" type="MethodDoc" line="394"/>
                <declaration name="methodName" type="String" line="395"/>
                <declaration name="paramTypes" type="Type" line="396"/>
                <declaration name="paramNames" type="String" line="397"/>
                <declaration name="returnType" type="Type" line="398"/>
                <scope line="401">
                    <scope line="402"/>
                    <declaration name="objectsRead" type="boolean" line="407"/>
                    <scope line="410"/>
                </scope>
                <scope line="418"/>
                <scope line="421"/>
                <declaration name="target" type="String" line="424"/>
                <scope line="426"/>
                <scope line="432"/>
                <scope line="436"/>
            </method>
            <javadoc line="447">
                Writes declaration and initializer for &quot;operations&quot; static array.                
            </javadoc>
            <method name="writeOperationsArray" type="void" line="450">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="452"/>
            </method>
            <javadoc line="459">
                Writes declaration and initializer for &quot;interfaceHash&quot; static field.                
            </javadoc>
            <method name="writeInterfaceHash" type="void" line="462">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
            </method>
            <javadoc line="465">
                Writes declaration for java.lang.reflect.Method static fields
                  corresponding to each remote method in a stub.                
            </javadoc>
            <method name="writeMethodFieldDeclarations" type="void" line="469">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="470"/>
            </method>
            <javadoc line="474">
                Writes code to initialize the static fields for each method
                  using the Java Reflection API.                
            </javadoc>
            <method name="writeMethodFieldInitializers" type="void" line="478">
                <params>
                    <param name="p" type="IndentingWriter"/>
                </params>
                <scope line="479">
                    <declaration name="method" type="RemoteClass.Method" line="481"/>
                    <declaration name="methodDoc" type="MethodDoc" line="482"/>
                    <declaration name="methodName" type="String" line="483"/>
                    <declaration name="paramTypes" type="Type" line="484"/>
                    <scope line="486"/>
                </scope>
            </method>
            <javadoc line="493">
                Generates an array of names for fields correspondins to the
                  given array of remote methods.  Each name in the returned array
                  is guaranteed to be unique.
                  The name of a method is included in its corresponding field
                  name to enhance readability of the generated code.                
            </javadoc>
            <method name="nameMethodFields" type="String[]" line="500">
                <params>
                    <param name="methods" type="RemoteClass.Method[]"/>
                </params>
                <declaration name="names" type="String[]" line="501"/>
                <scope line="502"/>
            </method>
            <javadoc line="507">
                Generates an array of names for parameters corresponding to the
                  given array of types for the parameters.  Each name in the
                  returned array is guaranteed to be unique.
                  A representation of the type of a parameter is included in its
                  corresponding parameter name to enhance the readability of the
                  generated code.                
            </javadoc>
            <method name="nameParameters" type="String[]" line="515">
                <params>
                    <param name="types" type="Type[]"/>
                </params>
                <declaration name="names" type="String[]" line="516"/>
                <scope line="517"/>
            </method>
            <javadoc line="522">
                Generates a readable string representing the given type
                  suitable for embedding within a Java identifier.                
            </javadoc>
            <method name="generateNameFromType" type="String" line="526">
                <params>
                    <param name="type" type="Type"/>
                </params>
                <declaration name="name" type="String" line="527"/>
                <declaration name="dimensions" type="int" line="528"/>
                <scope line="529"/>
            </method>
            <javadoc line="534">
                Writes a snippet of Java code to marshal a value named &quot;name&quot;
                  of type &quot;type&quot; to the java.io.ObjectOutput stream named
                  &quot;stream&quot;.
                  Primitive types are marshalled with their corresponding methods
                  in the java.io.DataOutput interface, and objects (including
                  arrays) are marshalled using the writeObject method.                
            </javadoc>
            <method name="writeMarshalArgument" type="void" line="542">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="543"/>
                <scope line="546"/>
                <scope line="549"/>
                <scope line="552"/>
                <scope line="555"/>
                <scope line="558"/>
                <scope line="561"/>
                <scope line="564"/>
                <scope line="567"/>
                <scope line="570"/>
            </method>
            <javadoc line="574">
                Writes Java statements to marshal a series of values in order
                  as named in the &quot;names&quot; array, with types as specified in the
                  &quot;types&quot; array, to the java.io.ObjectOutput stream named
                  &quot;stream&quot;.                
            </javadoc>
            <method name="writeMarshalArguments" type="void" line="580">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="types" type="Type[]"/>
                    <param name="names" type="String[]"/>
                </params>
            </method>
            <javadoc line="587">
                Writes a snippet of Java code to unmarshal a value of type
                  &quot;type&quot; from the java.io.ObjectInput stream named &quot;stream&quot; into
                  a variable named &quot;name&quot; (if &quot;name&quot; is null, the value is
                  unmarshalled and discarded).
                  Primitive types are unmarshalled with their corresponding
                  methods in the java.io.DataInput interface, and objects
                  (including arrays) are unmarshalled using the readObject
                  method.
                  Returns true if code to invoke readObject was written, and
                  false otherwise.                
            </javadoc>
            <method name="writeUnmarshalArgument" type="boolean" line="599">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="readObject" type="boolean" line="600"/>
                <scope line="601"/>
                <scope line="604"/>
                <scope line="608"/>
                <scope line="611"/>
                <scope line="614"/>
                <scope line="617"/>
                <scope line="620"/>
                <scope line="623"/>
                <scope line="626"/>
                <scope line="629"/>
                <scope line="632"/>
            </method>
            <javadoc line="637">
                Writes Java statements to unmarshal a series of values in order
                  of types as in the &quot;types&quot; array from the java.io.ObjectInput
                  stream named &quot;stream&quot; into variables as named in &quot;names&quot; (for
                  any element of &quot;names&quot; that is null, the corresponding value is
                  unmarshalled and discarded).                
            </javadoc>
            <method name="writeUnmarshalArguments" type="boolean" line="644">
                <params>
                    <param name="p" type="IndentingWriter"/>
                    <param name="streamName" type="String"/>
                    <param name="types" type="Type[]"/>
                    <param name="names" type="String[]"/>
                </params>
            </method>
            <javadoc line="655">
                Returns a snippet of Java code to wrap a value named &quot;name&quot; of
                  type &quot;type&quot; into an object as appropriate for use by the Java
                  Reflection API.
                  For primitive types, an appropriate wrapper class is
                  instantiated with the primitive value.  For object types
                  (including arrays), no wrapping is necessary, so the value is
                  named directly.                
            </javadoc>
            <method name="wrapArgumentCode" type="String" line="664">
                <params>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="665"/>
                <scope line="668"/>
                <scope line="671"/>
                <scope line="674"/>
                <scope line="677"/>
                <scope line="680"/>
                <scope line="683"/>
                <scope line="686"/>
                <scope line="689"/>
                <scope line="692"/>
            </method>
            <javadoc line="696">
                Returns a snippet of Java code to unwrap a value named &quot;name&quot;
                  into a value of type &quot;type&quot;, as appropriate for the Java
                  Reflection API.
                  For primitive types, the value is assumed to be of the
                  corresponding wrapper class, and a method is called on the
                  wrapper to retrieve the primitive value.  For object types
                  (include arrays), no unwrapping is necessary; the value is
                  simply cast to the expected real object type.                
            </javadoc>
            <method name="unwrapArgumentCode" type="String" line="706">
                <params>
                    <param name="type" type="Type"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="707"/>
                <scope line="710"/>
                <scope line="713"/>
                <scope line="716"/>
                <scope line="719"/>
                <scope line="722"/>
                <scope line="725"/>
                <scope line="728"/>
                <scope line="731"/>
                <scope line="734"/>
            </method>
        </class>
    </source>