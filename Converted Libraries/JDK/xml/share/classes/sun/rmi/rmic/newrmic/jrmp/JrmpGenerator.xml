<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic.newrmic.jrmp">
        <import package="com.sun.javadoc.ClassDoc"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStreamWriter"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="sun.rmi.rmic.newrmic.BatchEnvironment"/>
        <import package="sun.rmi.rmic.newrmic.Generator"/>
        <import package="sun.rmi.rmic.newrmic.IndentingWriter"/>
        <import package="sun.rmi.rmic.newrmic.Main"/>
        <import package="sun.rmi.rmic.newrmic.Resources"/>
        <import package="sun.rmi.rmic.newrmic.jrmp.Constants"/>
        <class name="JrmpGenerator" line="46">
            <comment line="77">
                default is -v1.2                
            </comment>
            <implements interface="Generator"/>
            <javadoc line="46">
                JRMP rmic back end; generates source code for JRMP stub and
                  skeleton classes.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="versionOptions" type="Map&lt;String,StubVersion&gt;" line="58"/>
            <scope line="60"/>
            <declaration name="bootstrapClassNames" type="Set&lt;String&gt;" line="66"/>
            <scope line="68"/>
            <declaration name="version" type="StubVersion" line="75"/>
            <javadoc line="75">
                version of the JRMP stub protocol to generate code for                
            </javadoc>
            <javadoc line="78">
                Creates a new JrmpGenerator.                
            </javadoc>
            <method name="JrmpGenerator" type="constructor" line="81"/>
            <javadoc line="83">
                The JRMP generator recognizes command line options for
                  selecting the JRMP stub protocol version to generate classes
                  for.  Only one such option is allowed.                
            </javadoc>
            <method name="parseArgs" type="boolean" line="88">
                <params>
                    <param name="args" type="String[]"/>
                    <param name="main" type="Main"/>
                </params>
                <declaration name="explicitVersion" type="String" line="89"/>
                <scope line="90">
                    <declaration name="arg" type="String" line="91"/>
                    <scope line="92">
                        <scope line="93"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="105">
                The JRMP generator does not require an environment class more
                  specific than BatchEnvironment.                
            </javadoc>
            <method name="envClass" type="Class<? extends BatchEnvironment>" line="109"/>
            <method name="bootstrapClassNames" type="Set<String>" line="113"/>
            <javadoc line="117">
                Generates the source file(s) for the JRMP stub class and
                  (optionally) skeleton class for the specified remote
                  implementation class.                
            </javadoc>
            <method name="generate" type="void" line="125">
                <params>
                    <param name="env" type="BatchEnvironment"/>
                    <param name="inputClass" type="ClassDoc"/>
                    <param name="destDir" type="File"/>
                </params>
                <comment line="128">
                    an error must have occurred                    
                </comment>
                <comment line="171">
                    If skeleton files are not being generated for this run,
                     delete old skeleton source or class files for this
                     remote implementation class that were (presumably) left
                     over from previous runs, to avoid user confusion from
                     extraneous or inconsistent generated files.                    
                </comment>
                <comment line="181">
                    ignore failures (no big deal)                    
                </comment>
                <declaration name="remoteClass" type="RemoteClass" line="126"/>
                <scope line="127"/>
                <declaration name="writer" type="StubSkeletonWriter" line="131"/>
                <declaration name="stubFile" type="File" line="134"/>
                <scope line="135">
                    <declaration name="out" type="IndentingWriter" line="136"/>
                    <scope line="140"/>
                </scope>
                <scope line="145"/>
                <declaration name="skeletonFile" type="File" line="150"/>
                <scope line="154">
                    <scope line="155">
                        <declaration name="out" type="IndentingWriter" line="156"/>
                        <scope line="161"/>
                    </scope>
                    <scope line="166"/>
                </scope>
                <scope line="170">
                    <declaration name="skeletonClassFile" type="File" line="178"/>
                </scope>
            </method>
            <javadoc line="187">
                Returns the File object to be used as the source file for a
                  class with the specified binary name, with the specified
                  destination directory as the top of the package hierarchy.                
            </javadoc>
            <method name="sourceFileForClass" type="File" line="192">
                <params>
                    <param name="binaryName" type="String"/>
                    <param name="destDir" type="File"/>
                </params>
            </method>
            <javadoc line="196">
                Returns the File object to be used as the class file for a
                  class with the specified binary name, with the supplied
                  destination directory as the top of the package hierarchy.                
            </javadoc>
            <method name="classFileForClass" type="File" line="201">
                <params>
                    <param name="binaryName" type="String"/>
                    <param name="destDir" type="File"/>
                </params>
            </method>
            <method name="fileForClass" type="File" line="205">
                <params>
                    <param name="binaryName" type="String"/>
                    <param name="destDir" type="File"/>
                    <param name="ext" type="String"/>
                </params>
                <comment line="212">
                    Make sure that the directory for this package exists.
                     We assume that the caller has verified that the top-
                     level destination directory exists, so we need not
                     worry about creating it unintentionally.                    
                </comment>
                <declaration name="i" type="int" line="206"/>
                <declaration name="classFileName" type="String" line="207"/>
                <scope line="208">
                    <declaration name="packageName" type="String" line="209"/>
                    <declaration name="packagePath" type="String" line="210"/>
                    <declaration name="packageDir" type="File" line="211"/>
                    <scope line="218"/>
                </scope>
                <scope line="222"/>
            </method>
        </class>
    </source>