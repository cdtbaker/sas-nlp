<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic.newrmic">
        <import package="com.sun.javadoc.ClassDoc"/>
        <import package="com.sun.javadoc.RootDoc"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="sun.rmi.rmic.newrmic.jrmp.JrmpGenerator"/>
        <import package="sun.tools.util.CommandLine"/>
        <class name="Main" line="48">
            <comment line="79">
                Implementation note:
                
                 In order to use the doclet API to read class files, much of
                 this implementation of rmic executes as a doclet within an
                 invocation of javadoc.  This class is used as the doclet class
                 for such javadoc invocations, via its static &quot;start&quot; and
                 &quot;optionLength&quot; methods.  There is one javadoc invocation per
                 rmic compilation batch.
                
                 The only guaranteed way to pass data to a doclet through a
                 javadoc invocation is through doclet-specific options on the
                 javadoc &quot;command line&quot;.  Rather than passing numerous pieces of
                 individual data in string form as javadoc options, we use a
                 single doclet-specific option (&quot;-batchID&quot;) to pass a numeric
                 identifier that uniquely identifies the rmic compilation batch
                 that the javadoc invocation is for, and that identifier can
                 then be used as a key in a global table to retrieve an object
                 containing all of batch-specific data (rmic command line
                 arguments, etc.).                
            </comment>
            <javadoc line="48">
                The rmic front end.  This class contains the &quot;main&quot; method for rmic
                  command line invocation.
                  A Main instance contains the stream to output error messages and
                  other diagnostics to.
                  An rmic compilation batch (for example, one rmic command line
                  invocation) is executed by invoking the &quot;compile&quot; method of a Main
                  instance.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.
                  NOTE: If and when there is a J2SE API for invoking SDK tools, this
                  class should be updated to support that API.
                  NOTE: This class is the front end for a &quot;new&quot; rmic implementation,
                  which uses javadoc and the doclet API for reading class files and
                  javac for compiling generated source files.  This implementation is
                  incomplete: it lacks any CORBA-based back end implementations, and
                  thus the command line options &quot;-idl&quot;, &quot;-iiop&quot;, and their related
                  options are not yet supported.  The front end for the &quot;old&quot;,
                  oldjavac-based rmic implementation is sun.rmi.rmic.Main.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="batchCountLock" type="Object" line="100"/>
            <javadoc line="100">
                guards &quot;batchCount&quot;                
            </javadoc>
            <declaration name="batchCount" type="long" line="103"/>
            <javadoc line="103">
                number of batches run; used to generated batch IDs                
            </javadoc>
            <declaration name="batchTable" type="Map&lt;Long,Batch&gt;" line="106"/>
            <javadoc line="106">
                maps batch ID to batch data                
            </javadoc>
            <declaration name="out" type="PrintStream" line="110"/>
            <javadoc line="110">
                stream to output error messages and other diagnostics to                
            </javadoc>
            <declaration name="program" type="String" line="113"/>
            <javadoc line="113">
                name of this program, to use in error messages                
            </javadoc>
            <javadoc line="116">
                Command line entry point.                
            </javadoc>
            <method name="main" type="void" line="119">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="rmic" type="Main" line="120"/>
            </method>
            <javadoc line="124">
                Creates a Main instance that writes output to the specified
                  stream.  The specified program name is used in error messages.                
            </javadoc>
            <method name="Main" type="constructor" line="128">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="program" type="String"/>
                </params>
            </method>
            <javadoc line="134">
                Compiles a batch of input classes, as given by the specified
                  command line arguments.  Protocol-specific generators are
                  determined by the choice options on the command line.  Returns
                  true if successful, or false if an error occurred.
                  NOTE: This method is retained for transitional consistency with
                  previous implementations.                
            </javadoc>
            <method name="compile" type="boolean" line="143">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="149">
                    assign batch ID                    
                </comment>
                <comment line="152">
                    process command line                    
                </comment>
                <comment line="155">
                    terminate if error occurred                    
                </comment>
                <comment line="158">
                    With the batch data retrievable in the global table, run
                     javadoc to continue the rest of the batch&apos;s compliation as
                     a doclet.                    
                </comment>
                <declaration name="startTime" type="long" line="144"/>
                <declaration name="batchID" type="long" line="146"/>
                <scope line="147"/>
                <declaration name="batch" type="Batch" line="152"/>
                <scope line="153"/>
                <declaration name="status" type="boolean" line="162"/>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="170">
                    <declaration name="deltaTime" type="long" line="171"/>
                </scope>
            </method>
            <javadoc line="179">
                Prints the specified string to the output stream of this Main
                  instance.                
            </javadoc>
            <method name="output" type="void" line="183">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <javadoc line="187">
                Prints an error message to the output stream of this Main
                  instance.  The first argument is used as a key in rmic&apos;s
                  resource bundle, and the rest of the arguments are used as
                  arguments in the formatting of the resource string.                
            </javadoc>
            <method name="error" type="void" line="193">
                <params>
                    <param name="msg" type="String"/>
                    <param name="args" type="String"/>
                </params>
            </method>
            <javadoc line="197">
                Prints rmic&apos;s usage message to the output stream of this Main
                  instance.
                  This method is public so that it can be used by the &quot;parseArgs&quot;
                  methods of Generator implementations.                
            </javadoc>
            <method name="usage" type="void" line="204"/>
            <javadoc line="208">
                Processes rmic command line arguments.  Returns a Batch object
                  representing the command line arguments if successful, or null
                  if an error occurred.  Processed elements of the args array are
                  set to null.                
            </javadoc>
            <method name="parseArgs" type="Batch" line="214">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="218">
                    Pre-process command line for @file arguments.                    
                </comment>
                <comment line="234">
                    already processed by a generator                    
                </comment>
                <comment line="238">
                    we&apos;re already using the &quot;new&quot; implementation                    
                </comment>
                <comment line="242">
                    obselete: fail                    
                </comment>
                <comment line="248">
                    obselete: warn but tolerate                    
                </comment>
                <comment line="253">
                    obselete: warn but tolerate                    
                </comment>
                <comment line="258">
                    obselete: warn but tolerate
                     REMIND: should this fail instead?                    
                </comment>
                <comment line="365">
                    JrmpGenerator only requires base BatchEnvironment class                    
                </comment>
                <comment line="374">
                    Generator gen = new IiopGenerator();
                     batch.generators.add(gen);
                     if (!batch.envClass.isAssignableFrom(gen.envClass())) {
                       error(&quot;rmic.cannot.use.both&quot;,
                             batch.envClass.getName(), gen.envClass().getName());
                       return null;
                     }
                     batch.envClass = gen.envClass();
                     if (!gen.parseArgs(args, this)) {
                       return null;
                     }                    
                </comment>
                <comment line="390">
                    see implementation sketch above                    
                </comment>
                <comment line="396">
                    see implementation sketch above                    
                </comment>
                <comment line="400">
                    At this point, all that remains non-null in the args
                     array are input class names or illegal options.                    
                </comment>
                <comment line="420">
                    If options did not specify at least one protocol-specific
                     generator, then JRMP is the default.                    
                </comment>
                <declaration name="batch" type="Batch" line="215"/>
                <scope line="220"/>
                <scope line="222"/>
                <scope line="225"/>
                <scope line="230">
                    <scope line="232"/>
                    <scope line="236"/>
                    <scope line="240"/>
                    <scope line="246"/>
                    <scope line="251"/>
                    <scope line="256"/>
                    <scope line="264"/>
                    <scope line="268"/>
                    <scope line="272"/>
                    <scope line="276"/>
                    <scope line="280"/>
                    <scope line="284"/>
                    <scope line="289">
                        <scope line="290"/>
                        <scope line="295"/>
                    </scope>
                    <scope line="305">
                        <scope line="306"/>
                        <scope line="311"/>
                    </scope>
                    <scope line="321">
                        <scope line="322"/>
                        <scope line="327"/>
                    </scope>
                    <scope line="337">
                        <scope line="338"/>
                        <scope line="343"/>
                        <scope line="352"/>
                    </scope>
                    <scope line="361">
                        <declaration name="gen" type="Generator" line="362"/>
                        <scope line="365"/>
                    </scope>
                    <scope line="369"/>
                    <scope line="385"/>
                    <scope line="391"/>
                </scope>
                <scope line="403">
                    <scope line="404">
                        <scope line="405"/>
                        <scope line="409"/>
                    </scope>
                </scope>
                <scope line="414"/>
                <scope line="423"/>
            </method>
            <javadoc line="429">
                Doclet class entry point.                
            </javadoc>
            <method name="start" type="boolean" line="432">
                <params>
                    <param name="rootDoc" type="RootDoc"/>
                </params>
                <comment line="435">
                    Find batch ID among javadoc options, and retrieve
                     corresponding batch data from global table.                    
                </comment>
                <comment line="452">
                    Construct batch environment using class agreed upon by
                     generator implementations.                    
                </comment>
                <comment line="473">
                    Determine the destination directory (the top of the package
                     hierarchy) for the output of this batch; if no destination
                     directory was specified on the command line, then the
                     default is the current working directory.                    
                </comment>
                <comment line="484">
                    Run each input class through each generator.                    
                </comment>
                <comment line="494">
                    We assume that this means that some class that was
                     needed (perhaps even a bootstrap class) was not
                     found, and that javadoc has already reported this
                     as an error.  There is nothing for us to do here
                     but try to continue with the next input class.
                    
                     REMIND: More explicit error checking throughout
                     would be preferable, however.                    
                </comment>
                <comment line="507">
                    Compile any generated source files, if configured to do so.                    
                </comment>
                <comment line="516">
                    Delete any generated source files, if configured to do so.                    
                </comment>
                <declaration name="batchID" type="long" line="438"/>
                <scope line="439">
                    <scope line="440">
                        <scope line="441"/>
                        <scope line="443"/>
                    </scope>
                </scope>
                <declaration name="batch" type="Batch" line="448"/>
                <declaration name="env" type="BatchEnvironment" line="455"/>
                <scope line="456">
                    <declaration name="cons" type="Constructor&lt;? extends BatchEnvironment&gt;" line="457"/>
                </scope>
                <scope line="460"/>
                <scope line="462"/>
                <scope line="464"/>
                <scope line="466"/>
                <declaration name="destDir" type="File" line="478"/>
                <scope line="479"/>
                <scope line="486">
                    <declaration name="inputClass" type="ClassDoc" line="487"/>
                    <scope line="488">
                        <scope line="489"/>
                    </scope>
                    <scope line="492"/>
                </scope>
                <declaration name="status" type="boolean" line="509"/>
                <declaration name="generatedFiles" type="List&lt;File&gt;" line="510"/>
                <scope line="511"/>
                <scope line="518">
                    <scope line="519"/>
                </scope>
            </method>
            <javadoc line="527">
                Doclet class method that indicates that this doclet class
                  recognizes (only) the &quot;-batchID&quot; option on the javadoc command
                  line, and that the &quot;-batchID&quot; option comprises two arguments on
                  the javadoc command line.                
            </javadoc>
            <method name="optionLength" type="int" line="533">
                <params>
                    <param name="option" type="String"/>
                </params>
                <scope line="534"/>
                <scope line="536"/>
            </method>
            <javadoc line="541">
                Runs the javadoc tool to invoke this class as a doclet, passing
                  command line options derived from the specified batch data and
                  indicating the specified batch ID.
                  NOTE: This method currently uses a J2SE-internal API to run
                  javadoc.  If and when there is a J2SE API for invoking SDK
                  tools, this method should be updated to use that API instead.                
            </javadoc>
            <method name="invokeJavadoc" type="boolean" line="550">
                <params>
                    <param name="batch" type="Batch"/>
                    <param name="batchID" type="long"/>
                </params>
                <comment line="554">
                    include all types, regardless of language-level access                    
                </comment>
                <comment line="557">
                    inputs are class names, not source files                    
                </comment>
                <comment line="560">
                    reproduce relevant options from rmic invocation                    
                </comment>
                <comment line="577">
                    specify batch ID                    
                </comment>
                <comment line="581">
                    Run javadoc on union of rmic input classes and all
                     generators&apos; bootstrap classes, so that they will all be
                     available to the doclet code.                    
                </comment>
                <comment line="595">
                    run javadoc with our program name and output stream                    
                </comment>
                <comment line="601">
                    doclet class is this class                    
                </comment>
                <declaration name="javadocArgs" type="List&lt;String&gt;" line="551"/>
                <scope line="560"/>
                <scope line="563"/>
                <scope line="567"/>
                <scope line="571"/>
                <declaration name="classNames" type="Set&lt;String&gt;" line="585"/>
                <scope line="586"/>
                <scope line="590"/>
                <declaration name="status" type="int" line="595"/>
            </method>
            <javadoc line="605">
                Runs the javac tool to compile the specified source files,
                  passing command line options derived from the specified batch
                  data.
                  NOTE: This method currently uses a J2SE-internal API to run
                  javac.  If and when there is a J2SE API for invoking SDK tools,
                  this method should be updated to use that API instead.                
            </javadoc>
            <method name="invokeJavac" type="boolean" line="614">
                <params>
                    <param name="batch" type="Batch"/>
                    <param name="files" type="List<File>"/>
                </params>
                <comment line="618">
                    rmic never wants to display javac warnings                    
                </comment>
                <comment line="621">
                    reproduce relevant options from rmic invocation                    
                </comment>
                <comment line="641">
                    For now, rmic still always produces class files that have a
                     class file format version compatible with JDK 1.1.                    
                </comment>
                <comment line="650">
                    add source files to compile                    
                </comment>
                <comment line="655">
                    run javac with our output stream                    
                </comment>
                <declaration name="javacArgs" type="List&lt;String&gt;" line="615"/>
                <scope line="621"/>
                <scope line="624"/>
                <scope line="627"/>
                <scope line="631"/>
                <scope line="635"/>
                <scope line="650"/>
                <declaration name="status" type="int" line="655"/>
            </method>
            <class name="Batch" line="661">
                <comment line="667">
                    -keep or -keepgenerated                    
                </comment>
                <comment line="668">
                    -g                    
                </comment>
                <comment line="669">
                    -nowarn                    
                </comment>
                <comment line="670">
                    -nowrite                    
                </comment>
                <comment line="671">
                    -verbose                    
                </comment>
                <comment line="672">
                    -Xnocompile                    
                </comment>
                <comment line="673">
                    -bootclasspath                    
                </comment>
                <comment line="674">
                    -extdirs                    
                </comment>
                <comment line="675">
                    -classpath                    
                </comment>
                <comment line="676">
                    -d                    
                </comment>
                <javadoc line="661">
                    The data for an rmic compliation batch: the processed command
                      line arguments.                    
                </javadoc>
                <declaration name="keepGenerated" type="boolean" line="666"/>
                <declaration name="debug" type="boolean" line="667"/>
                <declaration name="noWarn" type="boolean" line="668"/>
                <declaration name="noWrite" type="boolean" line="669"/>
                <declaration name="verbose" type="boolean" line="670"/>
                <declaration name="noCompile" type="boolean" line="671"/>
                <declaration name="bootClassPath" type="String" line="672"/>
                <declaration name="extDirs" type="String" line="673"/>
                <declaration name="classPath" type="String" line="674"/>
                <declaration name="destDir" type="File" line="675"/>
                <declaration name="generators" type="List&lt;Generator&gt;" line="676"/>
                <declaration name="envClass" type="Class&lt;? extends BatchEnvironment&gt;" line="677"/>
                <declaration name="classes" type="List&lt;String&gt;" line="678"/>
                <method name="Batch" type="constructor" line="680"/>
                <javadoc line="682">
                    Returns the Main instance for this batch.                    
                </javadoc>
                <method name="enclosingMain" type="Main" line="685"/>
            </class>
        </class>
    </source>