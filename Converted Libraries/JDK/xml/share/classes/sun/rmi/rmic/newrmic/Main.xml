<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic.newrmic">
        <import package="com.sun.javadoc.ClassDoc"/>
        <import package="com.sun.javadoc.RootDoc"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="sun.rmi.rmic.newrmic.jrmp.JrmpGenerator"/>
        <import package="sun.tools.util.CommandLine"/>
        <class name="Main" line="21">
            <javadoc line="21">
                The rmic front end.  This class contains the &quot;main&quot; method for rmic
                  command line invocation.
                  A Main instance contains the stream to output error messages and
                  other diagnostics to.
                  An rmic compilation batch (for example, one rmic command line
                  invocation) is executed by invoking the &quot;compile&quot; method of a Main
                  instance.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.
                  NOTE: If and when there is a J2SE API for invoking SDK tools, this
                  class should be updated to support that API.
                  NOTE: This class is the front end for a &quot;new&quot; rmic implementation,
                  which uses javadoc and the doclet API for reading class files and
                  javac for compiling generated source files.  This implementation is
                  incomplete: it lacks any CORBA-based back end implementations, and
                  thus the command line options &quot;-idl&quot;, &quot;-iiop&quot;, and their related
                  options are not yet supported.  The front end for the &quot;old&quot;,
                  oldjavac-based rmic implementation is sun.rmi.rmic.Main.                
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="batchCountLock" type="Object" line="44"/>
            <javadoc line="44">
                guards &quot;batchCount&quot;                
            </javadoc>
            <declaration name="batchCount" type="long" line="48"/>
            <javadoc line="48">
                number of batches run; used to generated batch IDs                
            </javadoc>
            <declaration name="batchTable" type="Map&lt;Long,Batch&gt;" line="52"/>
            <javadoc line="52">
                maps batch ID to batch data                
            </javadoc>
            <declaration name="out" type="PrintStream" line="56"/>
            <javadoc line="56">
                stream to output error messages and other diagnostics to                
            </javadoc>
            <declaration name="program" type="String" line="60"/>
            <javadoc line="60">
                name of this program, to use in error messages                
            </javadoc>
            <javadoc line="64">
                Command line entry point.                
            </javadoc>
            <method name="main" type="void" line="67">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="rmic" type="Main" line="68"/>
            </method>
            <javadoc line="71">
                Creates a Main instance that writes output to the specified
                  stream.  The specified program name is used in error messages.                
            </javadoc>
            <method name="Main" type="constructor" line="75">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="program" type="String"/>
                </params>
            </method>
            <javadoc line="79">
                Compiles a batch of input classes, as given by the specified
                  command line arguments.  Protocol-specific generators are
                  determined by the choice options on the command line.  Returns
                  true if successful, or false if an error occurred.
                  NOTE: This method is retained for transitional consistency with
                  previous implementations.                
            </javadoc>
            <method name="compile" type="boolean" line="87">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="startTime" type="long" line="88"/>
                <declaration name="batchID" type="long" line="89"/>
                <scope line="90"/>
                <declaration name="batch" type="Batch" line="93"/>
                <scope line="94"/>
                <declaration name="status" type="boolean" line="97"/>
                <scope line="98"/>
                <scope line="102"/>
                <scope line="105">
                    <declaration name="deltaTime" type="long" line="106"/>
                </scope>
            </method>
            <javadoc line="111">
                Prints the specified string to the output stream of this Main
                  instance.                
            </javadoc>
            <method name="output" type="void" line="115">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <javadoc line="118">
                Prints an error message to the output stream of this Main
                  instance.  The first argument is used as a key in rmic&apos;s
                  resource bundle, and the rest of the arguments are used as
                  arguments in the formatting of the resource string.                
            </javadoc>
            <method name="error" type="void" line="124">
                <params>
                    <param name="msg" type="String"/>
                    <param name="args" type="String"/>
                </params>
            </method>
            <javadoc line="127">
                Prints rmic&apos;s usage message to the output stream of this Main
                  instance.
                  This method is public so that it can be used by the &quot;parseArgs&quot;
                  methods of Generator implementations.                
            </javadoc>
            <method name="usage" type="void" line="133"/>
            <javadoc line="136">
                Processes rmic command line arguments.  Returns a Batch object
                  representing the command line arguments if successful, or null
                  if an error occurred.  Processed elements of the args array are
                  set to null.                
            </javadoc>
            <method name="parseArgs" type="Batch" line="142">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
            <javadoc line="314">
                Doclet class entry point.                
            </javadoc>
            <method name="start" type="boolean" line="317">
                <params>
                    <param name="rootDoc" type="RootDoc"/>
                </params>
            </method>
            <javadoc line="375">
                Doclet class method that indicates that this doclet class
                  recognizes (only) the &quot;-batchID&quot; option on the javadoc command
                  line, and that the &quot;-batchID&quot; option comprises two arguments on
                  the javadoc command line.                
            </javadoc>
            <method name="optionLength" type="int" line="381">
                <params>
                    <param name="option" type="String"/>
                </params>
                <scope line="382"/>
                <scope line="385"/>
            </method>
            <javadoc line="389">
                Runs the javadoc tool to invoke this class as a doclet, passing
                  command line options derived from the specified batch data and
                  indicating the specified batch ID.
                  NOTE: This method currently uses a J2SE-internal API to run
                  javadoc.  If and when there is a J2SE API for invoking SDK
                  tools, this method should be updated to use that API instead.                
            </javadoc>
            <method name="invokeJavadoc" type="boolean" line="397">
                <params>
                    <param name="batch" type="Batch"/>
                    <param name="batchID" type="long"/>
                </params>
                <declaration name="javadocArgs" type="List&lt;String&gt;" line="398"/>
                <scope line="401"/>
                <scope line="404"/>
                <scope line="408"/>
                <scope line="412"/>
                <declaration name="classNames" type="Set&lt;String&gt;" line="418"/>
                <scope line="419"/>
                <scope line="423"/>
                <declaration name="status" type="int" line="426"/>
            </method>
            <javadoc line="429">
                Runs the javac tool to compile the specified source files,
                  passing command line options derived from the specified batch
                  data.
                  NOTE: This method currently uses a J2SE-internal API to run
                  javac.  If and when there is a J2SE API for invoking SDK tools,
                  this method should be updated to use that API instead.                
            </javadoc>
            <method name="invokeJavac" type="boolean" line="437">
                <params>
                    <param name="batch" type="Batch"/>
                    <param name="files" type="List<File>"/>
                </params>
                <declaration name="javacArgs" type="List&lt;String&gt;" line="438"/>
                <scope line="440"/>
                <scope line="443"/>
                <scope line="446"/>
                <scope line="450"/>
                <scope line="454"/>
                <scope line="462"/>
                <declaration name="status" type="int" line="465"/>
            </method>
            <class name="Batch" line="468">
                <javadoc line="468">
                    The data for an rmic compliation batch: the processed command
                      line arguments.                    
                </javadoc>
                <declaration name="keepGenerated" type="boolean" line="473"/>
                <declaration name="debug" type="boolean" line="474"/>
                <declaration name="noWarn" type="boolean" line="475"/>
                <declaration name="noWrite" type="boolean" line="476"/>
                <declaration name="verbose" type="boolean" line="477"/>
                <declaration name="noCompile" type="boolean" line="478"/>
                <declaration name="bootClassPath" type="String" line="479"/>
                <declaration name="extDirs" type="String" line="480"/>
                <declaration name="classPath" type="String" line="481"/>
                <declaration name="destDir" type="File" line="482"/>
                <declaration name="generators" type="List&lt;Generator&gt;" line="483"/>
                <declaration name="envClass" type="Class&lt;? extends BatchEnvironment&gt;" line="484"/>
                <declaration name="classes" type="List&lt;String&gt;" line="485"/>
                <method name="Batch" type="constructor" line="486"/>
                <javadoc line="488">
                    Returns the Main instance for this batch.                    
                </javadoc>
                <method name="enclosingMain" type="Main" line="491"/>
            </class>
        </class>
    </source>