<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 */
package sun.rmi.rmic">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedHashSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.util.jar.Attributes"/>
        <import package="sun.tools.java.ClassPath"/>
        <javadoc line="31">
                        
        </javadoc>
        <class name="BatchEnvironment" line="49">
            <extends class="sun.tools.javac.BatchEnvironment"/>
            <javadoc line="49">
                BatchEnvironment for rmic extends javac&apos;s version in four ways:
                  1. It overrides errorString() to handle looking for rmic-specific
                  error messages in rmic&apos;s resource bundle
                  2. It provides a mechanism for recording intermediate generated
                  files so that they can be deleted later.
                  3. It holds a reference to the Main instance so that generators
                  can refer to it.
                  4. It provides access to the ClassPath passed to the constructor.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="main" type="Main" line="66"/>
            <javadoc line="66">
                instance of Main which created this environment                
            </javadoc>
            <javadoc line="69">
                Create a ClassPath object for rmic from a class path string.                
            </javadoc>
            <method name="createClassPath" type="ClassPath" line="72">
                <params>
                    <param name="classPathString" type="String"/>
                </params>
                <declaration name="paths" type="ClassPath[]" line="73"/>
            </method>
            <javadoc line="77">
                Create a ClassPath object for rmic from the relevant command line
                  options for class path, boot class path, and extension directories.                
            </javadoc>
            <method name="createClassPath" type="ClassPath" line="84">
                <params>
                    <param name="classPathString" type="String"/>
                    <param name="sysClassPathString" type="String"/>
                    <param name="extDirsString" type="String"/>
                </params>
                <comment line="85">
                    Previously, this method delegated to the
                     sun.tools.javac.BatchEnvironment.classPaths method in order
                     to supply default values for paths not specified on the
                     command line, expand extensions directories into specific
                     JAR files, and construct the ClassPath object-- but as part
                     of the fix for 6473331, which adds support for Class-Path
                     manifest entries in JAR files, those steps are now handled
                     here directly, with the help of a Path utility class copied
                     from the new javac implementation (see below).                    
                </comment>
                <comment line="105">
                    Class-Path manifest entries are supported for JAR files
                     everywhere except in the boot class path.                    
                </comment>
                <comment line="118">
                    In the application class path, an empty element means
                     the current working directory.                    
                </comment>
                <comment line="125">
                    The env.class.path property is the user&apos;s CLASSPATH                    
                </comment>
                <comment line="126">
                    environment variable, and it set by the wrapper (ie,                    
                </comment>
                <comment line="127">
                    javac.exe).                    
                </comment>
                <declaration name="path" type="Path" line="96"/>
                <scope line="98"/>
                <scope line="101"/>
                <scope line="111"/>
                <scope line="114"/>
                <scope line="124">
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="138">
                Create a BatchEnvironment for rmic with the given class path,
                  stream for messages and Main.                
            </javadoc>
            <method name="BatchEnvironment" type="constructor" line="142">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="path" type="ClassPath"/>
                    <param name="main" type="Main"/>
                </params>
                <comment line="144">
                    use empty &quot;sourcePath&quot; (see 4666958)                    
                </comment>
            </method>
            <javadoc line="148">
                Get the instance of Main which created this environment.                
            </javadoc>
            <method name="getMain" type="Main" line="151"/>
            <javadoc line="155">
                Get the ClassPath.                
            </javadoc>
            <method name="getClassPath" type="ClassPath" line="158"/>
            <declaration name="generatedFiles" type="Vector" line="162"/>
            <javadoc line="162">
                list of generated source files created in this environment                
            </javadoc>
            <javadoc line="165">
                Remember a generated source file generated so that it
                  can be removed later, if appropriate.                
            </javadoc>
            <method name="addGeneratedFile" type="void" line="169">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="173">
                Delete all the generated source files made during the execution
                  of this environment (those that have been registered with the
                  &quot;addGeneratedFile&quot; method).                
            </javadoc>
            <method name="deleteGeneratedFiles" type="void" line="178">
                <scope line="179">
                    <declaration name="enumeration" type="Enumeration" line="180"/>
                    <scope line="181">
                        <declaration name="file" type="File" line="182"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="189">
                Release resources, if any.                
            </javadoc>
            <method name="shutdown" type="void" line="192"/>
            <javadoc line="198">
                Return the formatted, localized string for a named error message
                  and supplied arguments.  For rmic error messages, with names that
                  being with &quot;rmic.&quot;, look up the error message in rmic&apos;s resource
                  bundle; otherwise, defer to java&apos;s superclass method.                
            </javadoc>
            <method name="errorString" type="String" line="206">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg0" type="Object"/>
                    <param name="arg1" type="Object"/>
                    <param name="arg2" type="Object"/>
                </params>
                <scope line="207">
                    <declaration name="result" type="String" line="208"/>
                    <scope line="213"/>
                </scope>
                <scope line="217"/>
            </method>
            <method name="reset" type="void" line="221"/>
            <class name="Path" line="224">
                <extends class="LinkedHashSet">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </extends>
                <comment line="410">
                    Adds referenced classpath elements from a jar&apos;s Class-Path                    
                </comment>
                <comment line="411">
                    Manifest entry.  In some future release, we may want to                    
                </comment>
                <comment line="412">
                    update this code to recognize URLs rather than simple                    
                </comment>
                <comment line="413">
                    filenames, but if we do, we should redo all path-related code.                    
                </comment>
                <javadoc line="224">
                    Utility for building paths of directories and JAR files.  This
                      class was copied from com.sun.tools.javac.util.Paths as part of
                      the fix for 6473331, which adds support for Class-Path manifest
                      entries in JAR files.  Diagnostic code is simply commented out
                      because rmic silently ignored these conditions historically.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="232"/>
                <declaration name="warn" type="boolean" line="233"/>
                <class name="PathIterator" line="235">
                    <comment line="269">
                        required for Collection.                        
                    </comment>
                    <implements interface="Collection">
                        <type_params>
                            <type_param name="String"/>
                        </type_params>
                    </implements>
                    <declaration name="pos" type="int" line="236"/>
                    <declaration name="path" type="String" line="237"/>
                    <declaration name="emptyPathDefault" type="String" line="238"/>
                    <method name="PathIterator" type="constructor" line="240">
                        <params>
                            <param name="path" type="String"/>
                            <param name="emptyPathDefault" type="String"/>
                        </params>
                    </method>
                    <method name="PathIterator" type="constructor" line="244">
                        <params>
                            <param name="path" type="String"/>
                        </params>
                    </method>
                    <method name="iterator" type="Iterator<String>" line="245">
                        <anonymous_class line="246">
                            <method name="hasNext" type="boolean" line="247"/>
                            <method name="next" type="String" line="250">
                                <declaration name="beg" type="int" line="251"/>
                                <declaration name="end" type="int" line="252"/>
                            </method>
                            <method name="remove" type="void" line="262"/>
                        </anonymous_class>
                    </method>
                    <method name="size" type="int" line="269"/>
                    <method name="isEmpty" type="boolean" line="272"/>
                    <method name="contains" type="boolean" line="275">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="toArray" type="Object[]" line="278"/>
                    <method name="toArray" type="T[]" line="281">
                        <params>
                            <param name="a" type="T[]"/>
                        </params>
                    </method>
                    <method name="add" type="boolean" line="284">
                        <params>
                            <param name="o" type="String"/>
                        </params>
                    </method>
                    <method name="remove" type="boolean" line="287">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="containsAll" type="boolean" line="290">
                        <params>
                            <param name="c" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="addAll" type="boolean" line="293">
                        <params>
                            <param name="c" type="Collection<? extends String>"/>
                        </params>
                    </method>
                    <method name="removeAll" type="boolean" line="296">
                        <params>
                            <param name="c" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="retainAll" type="boolean" line="299">
                        <params>
                            <param name="c" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="clear" type="void" line="302"/>
                    <method name="equals" type="boolean" line="305">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="hashCode" type="int" line="308"/>
                </class>
                <javadoc line="313">
                    Is this the name of a zip file?                    
                </javadoc>
                <method name="isZip" type="boolean" line="314">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <declaration name="expandJarClassPaths" type="boolean" line="318"/>
                <method name="expandJarClassPaths" type="Path" line="320">
                    <params>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <declaration name="emptyPathDefault" type="String" line="325"/>
                <javadoc line="325">
                    What to use when path element is the empty string                    
                </javadoc>
                <method name="emptyPathDefault" type="Path" line="328">
                    <params>
                        <param name="x" type="String"/>
                    </params>
                </method>
                <method name="Path" type="constructor" line="333"/>
                <method name="addDirectories" type="Path" line="335">
                    <params>
                        <param name="dirs" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                </method>
                <method name="addDirectories" type="Path" line="342">
                    <params>
                        <param name="dirs" type="String"/>
                    </params>
                </method>
                <method name="addDirectory" type="void" line="346">
                    <params>
                        <param name="dir" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                    <comment line="348">
                        if (warn)                        
                    </comment>
                    <comment line="349">
                        log.warning(Position.NOPOS,                        
                    </comment>
                    <comment line="350">
                        &quot;dir.path.element.not.found&quot;, dir);                        
                    </comment>
                    <scope line="347"/>
                    <scope line="354">
                        <declaration name="canonicalized" type="String" line="355"/>
                    </scope>
                </method>
                <method name="addFiles" type="Path" line="362">
                    <params>
                        <param name="files" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                </method>
                <method name="addFiles" type="Path" line="369">
                    <params>
                        <param name="files" type="String"/>
                    </params>
                </method>
                <method name="addFile" type="void" line="373">
                    <params>
                        <param name="file" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                    <comment line="375">
                                                
                    </comment>
                    <comment line="381">
                                                
                    </comment>
                    <comment line="383">
                        log.warning(Position.NOPOS,                        
                    </comment>
                    <comment line="384">
                        &quot;path.element.not.found&quot;, file);                        
                    </comment>
                    <comment line="389">
                                                
                    </comment>
                    <comment line="393">
                                                
                    </comment>
                    <comment line="394">
                        if (warn)                        
                    </comment>
                    <comment line="395">
                        log.warning(Position.NOPOS,                        
                    </comment>
                    <comment line="396">
                        &quot;invalid.archive.file&quot;, file);                        
                    </comment>
                    <comment line="401">
                        Now what we have left is either a directory or a file name                        
                    </comment>
                    <scope line="374"/>
                    <declaration name="ele" type="File" line="379"/>
                    <scope line="380"/>
                    <scope line="388">
                        <declaration name="arcname" type="String" line="390"/>
                        <scope line="392"/>
                    </scope>
                </method>
                <method name="addJarClassPath" type="void" line="413">
                    <params>
                        <param name="jarFileName" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                    <comment line="439">
                        log.error(Position.NOPOS,                        
                    </comment>
                    <comment line="440">
                        &quot;error.reading.file&quot;, jarFileName,                        
                    </comment>
                    <comment line="441">
                        e.getLocalizedMessage());                        
                    </comment>
                    <scope line="414">
                        <declaration name="jarParent" type="String" line="415"/>
                        <declaration name="jar" type="JarFile" line="416"/>
                        <scope line="418">
                            <declaration name="man" type="Manifest" line="419"/>
                            <declaration name="attr" type="Attributes" line="422"/>
                            <declaration name="path" type="String" line="425"/>
                            <scope line="429">
                                <declaration name="elt" type="String" line="430"/>
                            </scope>
                        </scope>
                        <scope line="435"/>
                    </scope>
                    <scope line="438"/>
                </method>
            </class>
        </class>
    </source>