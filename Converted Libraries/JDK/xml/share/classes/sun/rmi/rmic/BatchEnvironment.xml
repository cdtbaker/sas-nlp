<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.rmi.rmic">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedHashSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.util.jar.Attributes"/>
        <import package="sun.tools.java.ClassPath"/>
        <class name="BatchEnvironment" line="17">
            <extends class="sun.tools.javac.BatchEnvironment"/>
            <javadoc line="17">
                BatchEnvironment for rmic extends javac&apos;s version in four ways:
                  1. It overrides errorString() to handle looking for rmic-specific
                  error messages in rmic&apos;s resource bundle
                  2. It provides a mechanism for recording intermediate generated
                  files so that they can be deleted later.
                  3. It holds a reference to the Main instance so that generators
                  can refer to it.
                  4. It provides access to the ClassPath passed to the constructor.
                  WARNING: The contents of this source file are not part of any
                  supported API.  Code that depends on them does so at its own risk:
                  they are subject to change or removal without notice.                
            </javadoc>
            <declaration name="main" type="Main" line="31"/>
            <javadoc line="31">
                instance of Main which created this environment                
            </javadoc>
            <javadoc line="35">
                Create a ClassPath object for rmic from a class path string.                
            </javadoc>
            <method name="createClassPath" type="ClassPath" line="38">
                <params>
                    <param name="classPathString" type="String"/>
                </params>
                <declaration name="paths" type="ClassPath[]" line="39"/>
            </method>
            <javadoc line="42">
                Create a ClassPath object for rmic from the relevant command line
                  options for class path, boot class path, and extension directories.                
            </javadoc>
            <method name="createClassPath" type="ClassPath" line="46">
                <params>
                    <param name="classPathString" type="String"/>
                    <param name="sysClassPathString" type="String"/>
                    <param name="extDirsString" type="String"/>
                </params>
                <declaration name="path" type="Path" line="47"/>
                <scope line="48"/>
                <scope line="51"/>
                <scope line="55"/>
                <scope line="58"/>
                <scope line="62">
                    <scope line="64"/>
                </scope>
            </method>
            <javadoc line="71">
                Create a BatchEnvironment for rmic with the given class path,
                  stream for messages and Main.                
            </javadoc>
            <method name="BatchEnvironment" type="constructor" line="75">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="path" type="ClassPath"/>
                    <param name="main" type="Main"/>
                </params>
            </method>
            <javadoc line="79">
                Get the instance of Main which created this environment.                
            </javadoc>
            <method name="getMain" type="Main" line="82"/>
            <javadoc line="85">
                Get the ClassPath.                
            </javadoc>
            <method name="getClassPath" type="ClassPath" line="88"/>
            <declaration name="generatedFiles" type="Vector" line="91"/>
            <javadoc line="91">
                list of generated source files created in this environment                
            </javadoc>
            <javadoc line="95">
                Remember a generated source file generated so that it
                  can be removed later, if appropriate.                
            </javadoc>
            <method name="addGeneratedFile" type="void" line="99">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="102">
                Delete all the generated source files made during the execution
                  of this environment (those that have been registered with the
                  &quot;addGeneratedFile&quot; method).                
            </javadoc>
            <method name="deleteGeneratedFiles" type="void" line="107">
                <scope line="108">
                    <declaration name="enumeration" type="Enumeration" line="109"/>
                    <scope line="110">
                        <declaration name="file" type="File" line="111"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="117">
                Release resources, if any.                
            </javadoc>
            <method name="shutdown" type="void" line="120"/>
            <javadoc line="125">
                Return the formatted, localized string for a named error message
                  and supplied arguments.  For rmic error messages, with names that
                  being with &quot;rmic.&quot;, look up the error message in rmic&apos;s resource
                  bundle; otherwise, defer to java&apos;s superclass method.                
            </javadoc>
            <method name="errorString" type="String" line="131">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg0" type="Object"/>
                    <param name="arg1" type="Object"/>
                    <param name="arg2" type="Object"/>
                </params>
                <scope line="132">
                    <declaration name="result" type="String" line="133"/>
                    <scope line="134"/>
                </scope>
                <scope line="139"/>
            </method>
            <method name="reset" type="void" line="143"/>
            <class name="Path" line="145">
                <extends class="LinkedHashSet">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </extends>
                <javadoc line="145">
                    Utility for building paths of directories and JAR files.  This
                      class was copied from com.sun.tools.javac.util.Paths as part of
                      the fix for 6473331, which adds support for Class-Path manifest
                      entries in JAR files.  Diagnostic code is simply commented out
                      because rmic silently ignored these conditions historically.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="153"/>
                <declaration name="warn" type="boolean" line="154"/>
                <class name="PathIterator" line="155">
                    <implements interface="Collection">
                        <type_params>
                            <type_param name="String"/>
                        </type_params>
                    </implements>
                    <declaration name="pos" type="int" line="156"/>
                    <declaration name="path" type="String" line="157"/>
                    <declaration name="emptyPathDefault" type="String" line="158"/>
                    <method name="PathIterator" type="constructor" line="159">
                        <params>
                            <param name="path" type="String"/>
                            <param name="emptyPathDefault" type="String"/>
                        </params>
                    </method>
                    <method name="PathIterator" type="constructor" line="163">
                        <params>
                            <param name="path" type="String"/>
                        </params>
                    </method>
                    <method name="iterator" type="Iterator<String>" line="166">
                        <anonymous_class line="167">
                            <method name="hasNext" type="boolean" line="168"/>
                            <method name="next" type="String" line="171">
                                <declaration name="beg" type="int" line="172"/>
                                <declaration name="end" type="int" line="173"/>
                            </method>
                            <method name="remove" type="void" line="179"/>
                        </anonymous_class>
                    </method>
                    <method name="size" type="int" line="185"/>
                    <method name="isEmpty" type="boolean" line="188"/>
                    <method name="contains" type="boolean" line="191">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="toArray" type="Object[]" line="194"/>
                    <method name="toArray" type="T[]" line="197">
                        <params>
                            <param name="a" type="T[]"/>
                        </params>
                    </method>
                    <method name="add" type="boolean" line="200">
                        <params>
                            <param name="o" type="String"/>
                        </params>
                    </method>
                    <method name="remove" type="boolean" line="203">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="containsAll" type="boolean" line="206">
                        <params>
                            <param name="c" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="addAll" type="boolean" line="209">
                        <params>
                            <param name="c" type="Collection<? extends String>"/>
                        </params>
                    </method>
                    <method name="removeAll" type="boolean" line="212">
                        <params>
                            <param name="c" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="retainAll" type="boolean" line="215">
                        <params>
                            <param name="c" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="clear" type="void" line="218"/>
                    <method name="equals" type="boolean" line="221">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="hashCode" type="int" line="224"/>
                </class>
                <javadoc line="228">
                    Is this the name of a zip file?                    
                </javadoc>
                <method name="isZip" type="boolean" line="231">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <declaration name="expandJarClassPaths" type="boolean" line="234"/>
                <method name="expandJarClassPaths" type="Path" line="235">
                    <params>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <declaration name="emptyPathDefault" type="String" line="239"/>
                <javadoc line="239">
                    What to use when path element is the empty string                    
                </javadoc>
                <method name="emptyPathDefault" type="Path" line="243">
                    <params>
                        <param name="x" type="String"/>
                    </params>
                </method>
                <method name="Path" type="constructor" line="247"/>
                <method name="addDirectories" type="Path" line="250">
                    <params>
                        <param name="dirs" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                </method>
                <method name="addDirectories" type="Path" line="254">
                    <params>
                        <param name="dirs" type="String"/>
                    </params>
                </method>
                <method name="addDirectory" type="void" line="257">
                    <params>
                        <param name="dir" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                    <scope line="258"/>
                    <scope line="261">
                        <declaration name="canonicalized" type="String" line="262"/>
                    </scope>
                </method>
                <method name="addFiles" type="Path" line="266">
                    <params>
                        <param name="files" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                </method>
                <method name="addFiles" type="Path" line="270">
                    <params>
                        <param name="files" type="String"/>
                    </params>
                </method>
                <method name="addFile" type="void" line="273">
                    <params>
                        <param name="file" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                    <scope line="274"/>
                    <declaration name="ele" type="File" line="277"/>
                    <scope line="278"/>
                    <scope line="281">
                        <declaration name="arcname" type="String" line="282"/>
                        <scope line="283"/>
                    </scope>
                </method>
                <method name="addJarClassPath" type="void" line="290">
                    <params>
                        <param name="jarFileName" type="String"/>
                        <param name="warn" type="boolean"/>
                    </params>
                    <scope line="291">
                        <declaration name="jarParent" type="String" line="292"/>
                        <declaration name="jar" type="JarFile" line="293"/>
                        <scope line="294">
                            <declaration name="man" type="Manifest" line="295"/>
                            <declaration name="attr" type="Attributes" line="297"/>
                            <declaration name="path" type="String" line="299"/>
                            <scope line="301">
                                <declaration name="elt" type="String" line="302"/>
                            </scope>
                        </scope>
                        <scope line="307"/>
                    </scope>
                    <scope line="311"/>
                </method>
            </class>
        </class>
    </source>