<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.spi.nameservice.dns">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi.NamingManager"/>
        <import package="java.util"/>
        <import package="sun.net.util.IPAddressUtil"/>
        <import package="sun.net.dns.ResolverConfiguration"/>
        <import package="sun.net.spi.nameservice"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action"/>
        <class name="DNSNameService" line="45">
            <comment line="48">
                List of domains specified by property                
            </comment>
            <comment line="51">
                JNDI-DNS URL for name servers specified via property                
            </comment>
            <comment line="54">
                Per-thread soft cache of the last temporary context                
            </comment>
            <comment line="58">
                Simple class to encapsulate the temporary context                
            </comment>
            <comment line="77">
                Returns a per-thread DirContext                
            </comment>
            <comment line="465">
                ---------                
            </comment>
            <comment line="477">
                @return String containing the JNDI-DNS provider URL
                         corresponding to the supplied List of nameservers.                
            </comment>
            <comment line="489">
                @return String containing the JNDI-DNS provider URL
                         corresponding to the list of nameservers
                         contained in the provided str.                
            </comment>
            <implements interface="NameService"/>
            <declaration name="domainList" type="LinkedList&lt;String&gt;" line="48"/>
            <declaration name="nameProviderUrl" type="String" line="51"/>
            <declaration name="contextRef" type="ThreadLocal&lt;SoftReference&lt;ThreadContext&gt;&gt;" line="54"/>
            <class name="ThreadContext" line="58">
                <declaration name="dirCtxt" type="DirContext" line="59"/>
                <declaration name="nsList" type="List&lt;String&gt;" line="60"/>
                <method name="ThreadContext" type="constructor" line="62">
                    <params>
                        <param name="dirCtxt" type="DirContext"/>
                        <param name="nsList" type="List<String>"/>
                    </params>
                </method>
                <method name="dirContext" type="DirContext" line="67"/>
                <method name="nameservers" type="List<String>" line="71"/>
            </class>
            <method name="getTemporaryContext" type="DirContext" line="77">
                <comment line="83">
                    if no property specified we need to obtain the list of servers                    
                </comment>
                <comment line="88">
                    if soft reference hasn&apos;t been gc&apos;ed no property has been
                     specified then we need to check if the DNS configuration
                     has changed.                    
                </comment>
                <comment line="95">
                    DNS configuration has changed                    
                </comment>
                <comment line="101">
                    new thread context needs to be created                    
                </comment>
                <comment line="107">
                    If no nameservers property specified we create provider URL
                     based on system configured name servers                    
                </comment>
                <comment line="119">
                    Need to create directory context in privileged block
                     as JNDI-DNS needs to resolve the name servers.                    
                </comment>
                <comment line="127">
                    Create the DNS context using NamingManager rather than using
                     the initial context constructor. This avoids having the initial
                     context constructor call itself.                    
                </comment>
                <comment line="132">
                    cannot create a DNS context                    
                </comment>
                <comment line="141">
                    create new soft reference to our thread context                    
                </comment>
                <declaration name="ref" type="SoftReference&lt;ThreadContext&gt;" line="78"/>
                <declaration name="thrCtxt" type="ThreadContext" line="79"/>
                <declaration name="nsList" type="List&lt;String&gt;" line="80"/>
                <scope line="91">
                    <scope line="92">
                        <scope line="93"/>
                    </scope>
                </scope>
                <scope line="101">
                    <declaration name="env" type="Hashtable&lt;String,Object&gt;" line="102"/>
                    <declaration name="provUrl" type="String" line="109"/>
                    <scope line="110">
                        <scope line="112"/>
                    </scope>
                    <declaration name="dirCtxt" type="DirContext" line="121"/>
                    <scope line="122">
                        <anonymous_class line="124">
                            <method name="run" type="DirContext" line="125">
                                <comment line="127">
                                    Create the DNS context using NamingManager rather than using
                                     the initial context constructor. This avoids having the initial
                                     context constructor call itself.                                    
                                </comment>
                                <comment line="132">
                                    cannot create a DNS context                                    
                                </comment>
                                <declaration name="ctx" type="Context" line="129"/>
                                <scope line="130"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="136"/>
                </scope>
            </method>
            <javadoc line="149">
                Resolves the specified entry in DNS.
                  Canonical name records are recursively resolved (to a maximum
                  of 5 to avoid performance hit and potential CNAME loops).                
                <param>
                    ctx     JNDI directory context                    
                </param>
                <param>
                    name    name to resolve                    
                </param>
                <param>
                    ids     record types to search                    
                </param>
                <param>
                    depth   call depth - pass as 0.                    
                </param>
                <return>
                    array list with results (will have at least on entry)                    
                </return>
                <throws>
                    UnknownHostException if lookup fails or other error.                    
                </throws>
            </javadoc>
            <method name="resolve" type="ArrayList<String>" line="167">
                <params>
                    <param name="ctx" type="DirContext"/>
                    <param name="name" type="String"/>
                    <param name="ids" type="String[]"/>
                    <param name="depth" type="int"/>
                </params>
                <comment line="172">
                    do the query                    
                </comment>
                <comment line="184">
                    non-requested type returned so enumeration is empty                    
                </comment>
                <comment line="190">
                    iterate through the returned attributes                    
                </comment>
                <comment line="200">
                    for canoncical name records do recursive lookup
                     - also check for CNAME loops to avoid stack overflow                    
                </comment>
                <comment line="210">
                    canonical name can&apos;t be resolved.                    
                </comment>
                <comment line="223">
                    pending exception as canonical name could not be resolved.                    
                </comment>
                <declaration name="results" type="ArrayList&lt;String&gt;" line="168"/>
                <declaration name="attrs" type="Attributes" line="169"/>
                <scope line="172">
                    <anonymous_class line="174">
                        <method name="run" type="Attributes" line="175"/>
                    </anonymous_class>
                </scope>
                <scope line="179"/>
                <declaration name="ne" type="NamingEnumeration&lt;? extends Attribute&gt;" line="184"/>
                <scope line="185"/>
                <declaration name="uhe" type="UnknownHostException" line="190"/>
                <scope line="191">
                    <scope line="192">
                        <declaration name="attr" type="Attribute" line="193"/>
                        <declaration name="attrID" type="String" line="194"/>
                        <scope line="196">
                            <declaration name="addr" type="String" line="197"/>
                            <scope line="202">
                                <scope line="203"/>
                                <scope line="206"/>
                                <scope line="208"/>
                            </scope>
                            <scope line="213"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="218"/>
                <scope line="223"/>
            </method>
            <method name="DNSNameService" type="constructor" line="230">
                <comment line="233">
                    default domain                    
                </comment>
                <comment line="241">
                    name servers                    
                </comment>
                <comment line="252">
                    no property specified so check host DNS resolver configured
                     with at least one nameserver in dotted notation.                    
                </comment>
                <declaration name="domain" type="String" line="233"/>
                <scope line="235"/>
                <declaration name="nameservers" type="String" line="241"/>
                <scope line="243">
                    <scope line="245"/>
                </scope>
                <scope line="249">
                    <declaration name="nsList" type="List&lt;String&gt;" line="254"/>
                    <scope line="255"/>
                    <declaration name="found" type="boolean" line="258"/>
                    <scope line="259">
                        <scope line="261"/>
                    </scope>
                    <scope line="266"/>
                </scope>
            </method>
            <method name="lookupAllHostAddr" type="InetAddress[]" line="272">
                <params>
                    <param name="host" type="String"/>
                </params>
                <comment line="275">
                    DNS records that we search for                    
                </comment>
                <comment line="278">
                    first get directory context                    
                </comment>
                <comment line="289">
                    If host already contains a domain name then just look it up                    
                </comment>
                <comment line="298">
                    Here we try to resolve the host using the domain suffix or
                     the domain suffix search list. If the host cannot be resolved
                     using the domain suffix then we attempt devolution of
                     the suffix - eg: if we are searching for &quot;foo&quot; and our
                     domain suffix is &quot;eng.sun.com&quot; we will try to resolve
                     &quot;foo.eng.sun.com&quot; and &quot;foo.sun.com&quot;.
                     It&apos;s not normal to attempt devolation with domains on the
                     domain suffix search list - however as ResolverConfiguration
                     doesn&apos;t distinguish domain or search list in the list it
                     returns we approximate by doing devolution on the domain
                     suffix if the list has one entry.                    
                </comment>
                <comment line="325">
                    iterator through each domain suffix                    
                </comment>
                <comment line="340">
                    devolve                    
                </comment>
                <comment line="350">
                    finally try the host if it doesn&apos;t have a domain name                    
                </comment>
                <comment line="355">
                    if not found then throw the (last) exception thrown.                    
                </comment>
                <comment line="361">
                    Convert the array list into a byte aray list - this
                     filters out any invalid IPv4IPv6 addresses.                    
                </comment>
                <comment line="379">
                    If addresses are filtered then we need to resize the
                     array. Additionally if all addresses are filtered then
                     we throw an exception.                    
                </comment>
                <declaration name="ids" type="String[]" line="275"/>
                <declaration name="ctx" type="DirContext" line="278"/>
                <scope line="279"/>
                <scope line="281"/>
                <declaration name="results" type="ArrayList" line="285"/>
                <declaration name="uhe" type="UnknownHostException" line="286"/>
                <scope line="289">
                    <scope line="290"/>
                    <scope line="292"/>
                </scope>
                <scope line="309">
                    <declaration name="searchList" type="List&lt;String&gt;" line="310"/>
                    <declaration name="i" type="Iterator&lt;String&gt;" line="311"/>
                    <declaration name="usingSearchList" type="boolean" line="312"/>
                    <scope line="314"/>
                    <scope line="316">
                        <scope line="318"/>
                    </scope>
                    <scope line="325">
                        <declaration name="parentDomain" type="String" line="326"/>
                        <declaration name="start" type="int" line="327"/>
                        <scope line="329">
                            <scope line="330"/>
                            <scope line="333">
                                <scope line="335"/>
                            </scope>
                        </scope>
                        <scope line="343"/>
                    </scope>
                </scope>
                <scope line="350"/>
                <scope line="355"/>
                <declaration name="addrs" type="InetAddress[]" line="365"/>
                <declaration name="count" type="int" line="366"/>
                <scope line="367">
                    <declaration name="addrString" type="String" line="368"/>
                    <declaration name="addr" type="byte" line="369"/>
                    <scope line="370"/>
                    <scope line="373"/>
                </scope>
                <scope line="383"/>
                <scope line="386">
                    <declaration name="tmp" type="InetAddress[]" line="387"/>
                    <scope line="388"/>
                </scope>
            </method>
            <javadoc line="397">
                Reverse lookup code. I.E: find a host name from an IP address.
                  IPv4 addresses are mapped in the IN-ADDR.ARPA. top domain, while
                  IPv6 addresses can be in IP6.ARPA or IP6.INT.
                  In both cases the address has to be converted into a dotted form.                
            </javadoc>
            <method name="getHostByAddr" type="String" line="403">
                <params>
                    <param name="addr" type="byte[]"/>
                </params>
                <comment line="416">
                    IPv4 Address                    
                </comment>
                <comment line="424">
                    IPv6 Address                    
                </comment>
                <comment line="425">
                    Because RFC 3152 changed the root domain name for reverse
                     lookups from IP6.INT. to IP6.ARPA., we need to check
                     both. I.E. first the new one, IP6.ARPA, then if it fails
                     the older one, IP6.INT                    
                </comment>
                <comment line="445">
                    IP6.ARPA lookup failed, let&apos;s try the older IP6.INT                    
                </comment>
                <comment line="454">
                    Either we couldn&apos;t find it or the address was neither IPv4 or IPv6                    
                </comment>
                <comment line="457">
                    remove trailing dot                    
                </comment>
                <declaration name="host" type="String" line="404"/>
                <scope line="405">
                    <declaration name="literalip" type="String" line="406"/>
                    <declaration name="ids" type="String[]" line="407"/>
                    <declaration name="ctx" type="DirContext" line="408"/>
                    <declaration name="results" type="ArrayList&lt;String&gt;" line="409"/>
                    <scope line="410"/>
                    <scope line="412"/>
                    <scope line="415">
                        <scope line="416"/>
                    </scope>
                    <scope line="423">
                        <scope line="431"/>
                        <declaration name="ip6lit" type="String" line="435"/>
                        <scope line="437"/>
                        <scope line="440"/>
                        <scope line="443"/>
                    </scope>
                </scope>
                <scope line="450"/>
                <scope line="457"/>
            </method>
            <method name="appendIfLiteralAddress" type="void" line="466">
                <params>
                    <param name="addr" type="String"/>
                    <param name="sb" type="StringBuffer"/>
                </params>
                <scope line="467"/>
                <scope line="469">
                    <scope line="470"/>
                </scope>
            </method>
            <method name="createProviderURL" type="String" line="480">
                <params>
                    <param name="nsList" type="List<String>"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="481"/>
                <scope line="482"/>
            </method>
            <method name="createProviderURL" type="String" line="493">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="494"/>
                <declaration name="st" type="StringTokenizer" line="495"/>
                <scope line="496"/>
            </method>
        </class>
    </source>