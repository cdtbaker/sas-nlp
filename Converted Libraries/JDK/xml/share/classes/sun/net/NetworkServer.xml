<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net">
        <import package="java.io"/>
        <import package="java.net.Socket"/>
        <import package="java.net.ServerSocket"/>
        <class name="NetworkServer" line="31">
            <implements interface="Runnable"/>
            <implements interface="Cloneable"/>
            <javadoc line="31">
                This is the base class for network servers.  To define a new type
                  of server define a new subclass of NetworkServer with a serviceRequest
                  method that services one request.  Start the server by executing:
                  &lt;pre&gt;
                  new MyServerClass().startServer(port);
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="clientSocket" type="Socket" line="40"/>
            <javadoc line="40">
                Socket for communicating with client.                
            </javadoc>
            <declaration name="serverInstance" type="Thread" line="42"/>
            <declaration name="serverSocket" type="ServerSocket" line="43"/>
            <declaration name="clientOutput" type="PrintStream" line="45"/>
            <javadoc line="45">
                Stream for printing to the client.                
            </javadoc>
            <declaration name="clientInput" type="InputStream" line="48"/>
            <javadoc line="48">
                Buffered stream for reading replies from client.                
            </javadoc>
            <javadoc line="51">
                Close an open connection to the client.                
            </javadoc>
            <method name="close" type="void" line="52"/>
            <javadoc line="59">
                Return client connection status                
            </javadoc>
            <method name="clientIsOpen" type="boolean" line="60"/>
            <method name="run" type="void" line="64">
                <comment line="68">
                    System.out.print(&quot;Server starts &quot; + serverSocket + &quot;\n&quot;);                    
                </comment>
                <comment line="72">
                    System.out.print(&quot;New connection &quot; + ns + &quot;\n&quot;);                    
                </comment>
                <comment line="87">
                    close();                    
                </comment>
                <comment line="95">
                    System.out.print(&quot;Service handler exits
                     &quot;+clientSocket+&quot;\n&quot;);                    
                </comment>
                <comment line="98">
                    System.out.print(&quot;Service handler failure\n&quot;);
                     e.printStackTrace();                    
                </comment>
                <scope line="65">
                    <scope line="68">
                        <scope line="69">
                            <declaration name="ns" type="Socket" line="70"/>
                            <declaration name="n" type="NetworkServer" line="72"/>
                        </scope>
                        <scope line="76">
                            <scope line="79"/>
                            <scope line="81"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="87">
                    <scope line="88"/>
                    <scope line="96"/>
                    <scope line="100"/>
                    <scope line="102"/>
                </scope>
            </method>
            <javadoc line="106">
                Start a server on port &lt;i&gt;port&lt;/i&gt;.  It will call serviceRequest()
                  for each new connection.                
            </javadoc>
            <method name="startServer" type="void" line="108">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="114">
                Service one request.  It is invoked with the clientInput and
                  clientOutput streams initialized.  This method handles one client
                  connection. When it is done, it can simply exit. The default
                  server just echoes it&apos;s input. It is invoked in it&apos;s own private
                  thread.                
            </javadoc>
            <method name="serviceRequest" type="void" line="119">
                <declaration name="buf" type="byte" line="120"/>
                <declaration name="n" type="int" line="121"/>
                <scope line="124"/>
            </method>
            <method name="main" type="void" line="129">
                <params>
                    <param name="argv" type="String"/>
                </params>
                <scope line="130"/>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Clone this object;                
            </javadoc>
            <method name="clone" type="Object" line="140">
                <comment line="145">
                    this shouldn&apos;t happen, since we are Cloneable                    
                </comment>
                <scope line="141"/>
                <scope line="143"/>
            </method>
            <method name="NetworkServer" type="constructor" line="149"/>
        </class>
    </source>