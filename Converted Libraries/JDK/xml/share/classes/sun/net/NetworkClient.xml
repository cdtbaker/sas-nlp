<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net">
        <import package="java.io"/>
        <import package="java.net.Socket"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.InetSocketAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.net.Proxy"/>
        <import package="java.util.Arrays"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="NetworkClient" line="37">
            <comment line="44">
                                
            </comment>
            <comment line="47">
                                
            </comment>
            <comment line="65">
                                
            </comment>
            <javadoc line="37">
                This is the base class for network clients.                
                <author>
                    Jonathan Payne                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_READ_TIMEOUT" type="int" line="44"/>
            <declaration name="DEFAULT_CONNECT_TIMEOUT" type="int" line="47"/>
            <declaration name="proxy" type="Proxy" line="49"/>
            <declaration name="serverSocket" type="Socket" line="50"/>
            <javadoc line="50">
                Socket for communicating with server.                
            </javadoc>
            <declaration name="serverOutput" type="PrintStream" line="53"/>
            <javadoc line="53">
                Stream for printing to the server.                
            </javadoc>
            <declaration name="serverInput" type="InputStream" line="56"/>
            <javadoc line="56">
                Buffered stream for reading replies from server.                
            </javadoc>
            <declaration name="defaultSoTimeout" type="int" line="59"/>
            <declaration name="defaultConnectTimeout" type="int" line="60"/>
            <declaration name="readTimeout" type="int" line="62"/>
            <declaration name="connectTimeout" type="int" line="63"/>
            <declaration name="encoding" type="String" line="65"/>
            <scope line="67">
                <declaration name="vals" type="int" line="68"/>
                <declaration name="encs" type="String" line="69"/>
                <anonymous_class line="72">
                    <method name="run" type="Void" line="73"/>
                </anonymous_class>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="88">
                    <scope line="89"/>
                </scope>
                <scope line="92"/>
            </scope>
            <javadoc line="98">
                Test the named character encoding to verify that it converts ASCII
                  characters correctly. We have to use an ASCII based encoding, or else
                  the NetworkClients will not work correctly in EBCDIC based systems.
                  However, we cannot just use ASCII or ISO8859_1 universally, because in
                  Asian locales, non-ASCII characters may be embedded in otherwise
                  ASCII based protocols (eg. HTTP). The specifications (RFC2616, 2398)
                  are a little ambiguous in this matter. For instance, RFC2398 [part 2.1]
                  says that the HTTP request URI should be escaped using a defined
                  mechanism, but there is no way to specify in the escaped string what
                  the original character set is. It is not correct to assume that
                  UTF-8 is always used (as in URLs in HTML 4.0).  For this reason,
                  until the specifications are updated to deal with this issue more
                  comprehensively, and more importantly, HTTP servers are known to
                  support these mechanisms, we will maintain the current behavior
                  where it is possible to send non-ASCII characters in their original
                  unescaped form.                
            </javadoc>
            <method name="isASCIISuperset" type="boolean" line="116">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <comment line="120">
                    Expected byte sequence for string above                    
                </comment>
                <declaration name="chkS" type="String" line="117"/>
                <declaration name="chkB" type="byte[]" line="121"/>
                <declaration name="b" type="byte[]" line="127"/>
            </method>
            <javadoc line="131">
                Open a connection to the server.                
            </javadoc>
            <method name="openServer" type="void" line="133">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="137"/>
                <scope line="141"/>
            </method>
            <javadoc line="147">
                Return a socket connected to the server, with any
                  appropriate options pre-established                
            </javadoc>
            <method name="doConnect" type="Socket" line="152">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <comment line="164">
                    Still connecting through a proxy                    
                </comment>
                <comment line="165">
                    server &amp; port will be the proxy address and port                    
                </comment>
                <comment line="170">
                    Instance specific timeouts do have priority, that means                    
                </comment>
                <comment line="171">
                    connectTimeout &amp; readTimeout (-1 means not set)                    
                </comment>
                <comment line="172">
                    Then global default timeouts                    
                </comment>
                <comment line="173">
                    Then no timeout.                    
                </comment>
                <declaration name="s" type="Socket" line="153"/>
                <scope line="154">
                    <scope line="155">
                        <anonymous_class line="157">
                            <method name="run" type="Socket" line="158"/>
                        </anonymous_class>
                    </scope>
                    <scope line="161"/>
                    <scope line="163"/>
                </scope>
                <scope line="174"/>
                <scope line="176">
                    <scope line="177"/>
                    <scope line="179"/>
                </scope>
                <scope line="185"/>
            </method>
            <javadoc line="191">
                The following method, createSocket, is provided to allow the
                  https client to override it so that it may use its socket factory
                  to create the socket.                
            </javadoc>
            <method name="createSocket" type="Socket" line="196"/>
            <method name="getLocalAddress" type="InetAddress" line="200"/>
            <javadoc line="206">
                Close an open connection to the server.                
            </javadoc>
            <method name="closeServer" type="void" line="207">
                <scope line="208"/>
            </method>
            <javadoc line="217">
                Return server connection status                
            </javadoc>
            <method name="serverIsOpen" type="boolean" line="218"/>
            <javadoc line="222">
                Create connection with host &lt;i&gt;host&lt;/i&gt; on port &lt;i&gt;port&lt;/i&gt;                
            </javadoc>
            <method name="NetworkClient" type="constructor" line="223">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="NetworkClient" type="constructor" line="227"/>
            <method name="setConnectTimeout" type="void" line="229">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="getConnectTimeout" type="int" line="233"/>
            <javadoc line="237">
                Sets the read timeout.
                  Note: Public URLConnection (and protocol specific implementations)
                  protect against negative timeout values being set. This implemenation,
                  and protocol specific implementations, use -1 to represent the default
                  read timeout.
                  This method may be invoked with the default timeout value when the
                  protocol handler is trying to reset the timeout after doing a
                  potentially blocking internal operation, e.g. cleaning up unread
                  response data, buffering error stream response data, etc                
            </javadoc>
            <method name="setReadTimeout" type="void" line="250">
                <params>
                    <param name="timeout" type="int"/>
                </params>
                <comment line="258">
                    We tried...                    
                </comment>
                <scope line="254">
                    <scope line="255"/>
                    <scope line="257"/>
                </scope>
            </method>
            <method name="getReadTimeout" type="int" line="264"/>
        </class>
    </source>