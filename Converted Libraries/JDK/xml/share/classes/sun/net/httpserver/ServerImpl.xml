<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.httpserver">
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.security"/>
        <import package="java.nio.channels"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.net.ssl"/>
        <import package="com.sun.net.httpserver"/>
        <import package="com.sun.net.httpserver.spi"/>
        <import package="sun.net.httpserver.HttpConnection.State"/>
        <class name="ServerImpl" line="42">
            <comment line="60">
                following two are used to keep track of the times
                 when a connectionrequest is first received
                 and when we start to send the response                
            </comment>
            <comment line="72">
                                
            </comment>
            <comment line="74">
                                
            </comment>
            <comment line="265">
                                
            </comment>
            <comment line="471">
                                
            </comment>
            <comment line="769">
                called after a request has been completely read
                 by the server. This stops the timer which would
                 close the connection if the request doesn&apos;t arrive
                 quickly enough. It then starts the timer
                 that ensures the client reads the response in a timely
                 fashion.                
            </comment>
            <comment line="784">
                called after response has been sent                
            </comment>
            <implements interface="TimeSource"/>
            <javadoc line="42">
                Provides implementation for both HTTP and HTTPS                
            </javadoc>
            <declaration name="protocol" type="String" line="47"/>
            <declaration name="https" type="boolean" line="48"/>
            <declaration name="executor" type="Executor" line="49"/>
            <declaration name="httpsConfig" type="HttpsConfigurator" line="50"/>
            <declaration name="sslContext" type="SSLContext" line="51"/>
            <declaration name="contexts" type="ContextList" line="52"/>
            <declaration name="address" type="InetSocketAddress" line="53"/>
            <declaration name="schan" type="ServerSocketChannel" line="54"/>
            <declaration name="selector" type="Selector" line="55"/>
            <declaration name="listenerKey" type="SelectionKey" line="56"/>
            <declaration name="idleConnections" type="Set&lt;HttpConnection&gt;" line="57"/>
            <declaration name="allConnections" type="Set&lt;HttpConnection&gt;" line="58"/>
            <declaration name="reqConnections" type="Set&lt;HttpConnection&gt;" line="63"/>
            <declaration name="rspConnections" type="Set&lt;HttpConnection&gt;" line="64"/>
            <declaration name="events" type="List&lt;Event&gt;" line="65"/>
            <declaration name="lolock" type="Object" line="66"/>
            <declaration name="finished" type="boolean" line="67"/>
            <declaration name="terminating" type="boolean" line="68"/>
            <declaration name="bound" type="boolean" line="69"/>
            <declaration name="started" type="boolean" line="70"/>
            <declaration name="time" type="long" line="71"/>
            <declaration name="subticks" type="long" line="72"/>
            <declaration name="ticks" type="long" line="73"/>
            <declaration name="wrapper" type="HttpServer" line="74"/>
            <declaration name="CLOCK_TICK" type="int" line="76"/>
            <declaration name="IDLE_INTERVAL" type="long" line="77"/>
            <declaration name="MAX_IDLE_CONNECTIONS" type="int" line="78"/>
            <declaration name="TIMER_MILLIS" type="long" line="79"/>
            <declaration name="MAX_REQ_TIME" type="long" line="80"/>
            <declaration name="MAX_RSP_TIME" type="long" line="81"/>
            <declaration name="timer1Enabled" type="boolean" line="82"/>
            <declaration name="timer" type="Timer" line="84"/>
            <declaration name="logger" type="Logger" line="85"/>
            <method name="ServerImpl" type="constructor" line="89">
                <params>
                    <param name="wrapper" type="HttpServer"/>
                    <param name="protocol" type="String"/>
                    <param name="addr" type="InetSocketAddress"/>
                    <param name="backlog" type="int"/>
                </params>
                <scope line="99">
                    <declaration name="socket" type="ServerSocket" line="100"/>
                </scope>
                <scope line="115"/>
            </method>
            <method name="bind" type="void" line="126">
                <params>
                    <param name="addr" type="InetSocketAddress"/>
                    <param name="backlog" type="int"/>
                </params>
                <scope line="127"/>
                <scope line="130"/>
                <declaration name="socket" type="ServerSocket" line="133"/>
            </method>
            <method name="start" type="void" line="138">
                <scope line="139"/>
                <scope line="142"/>
                <declaration name="t" type="Thread" line="145"/>
            </method>
            <method name="setExecutor" type="void" line="150">
                <params>
                    <param name="executor" type="Executor"/>
                </params>
                <scope line="151"/>
            </method>
            <class name="DefaultExecutor" line="157">
                <comment line="656">
                                        
                </comment>
                <comment line="816">
                    runs every TIMER_MILLIS                    
                </comment>
                <implements interface="Executor"/>
                <method name="execute" type="void" line="158">
                    <params>
                        <param name="task" type="Runnable"/>
                    </params>
                </method>
            </class>
            <method name="getExecutor" type="Executor" line="163"/>
            <method name="setHttpsConfigurator" type="void" line="167">
                <params>
                    <param name="config" type="HttpsConfigurator"/>
                </params>
                <scope line="168"/>
                <scope line="171"/>
            </method>
            <method name="getHttpsConfigurator" type="HttpsConfigurator" line="178"/>
            <method name="stop" type="void" line="182">
                <params>
                    <param name="delay" type="int"/>
                </params>
                <scope line="183"/>
                <scope line="187"/>
                <scope line="187"/>
                <declaration name="latest" type="long" line="189"/>
                <scope line="190">
                    <scope line="192"/>
                </scope>
                <scope line="198">
                    <scope line="199"/>
                </scope>
                <scope line="206"/>
            </method>
            <declaration name="dispatcher" type="Dispatcher" line="211"/>
            <method name="createContext" type="HttpContextImpl" line="213">
                <params>
                    <param name="path" type="String"/>
                    <param name="handler" type="HttpHandler"/>
                </params>
                <scope line="214"/>
                <declaration name="context" type="HttpContextImpl" line="217"/>
            </method>
            <method name="createContext" type="HttpContextImpl" line="223">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="224"/>
                <declaration name="context" type="HttpContextImpl" line="227"/>
            </method>
            <method name="removeContext" type="void" line="233">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="234"/>
            </method>
            <method name="removeContext" type="void" line="241">
                <params>
                    <param name="context" type="HttpContext"/>
                </params>
                <scope line="242"/>
            </method>
            <method name="getAddress" type="InetSocketAddress" line="249"/>
            <method name="getSelector" type="Selector" line="253"/>
            <method name="addEvent" type="void" line="257">
                <params>
                    <param name="r" type="Event"/>
                </params>
                <scope line="258"/>
            </method>
            <class name="Dispatcher" line="266">
                <comment line="656">
                                        
                </comment>
                <comment line="816">
                    runs every TIMER_MILLIS                    
                </comment>
                <implements interface="Runnable"/>
                <method name="handleEvent" type="void" line="268">
                    <params>
                        <param name="r" type="Event"/>
                    </params>
                    <comment line="289">
                                                
                    </comment>
                    <declaration name="t" type="ExchangeImpl" line="269"/>
                    <declaration name="c" type="HttpConnection" line="270"/>
                    <scope line="271">
                        <scope line="272">
                            <declaration name="exchanges" type="int" line="274"/>
                            <scope line="275"/>
                            <declaration name="is" type="LeftOverInputStream" line="279"/>
                            <scope line="280"/>
                            <scope line="283"/>
                            <scope line="286">
                                <scope line="287"/>
                                <scope line="291"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="296"/>
                </method>
                <declaration name="connsToRegister" type="LinkedList&lt;HttpConnection&gt;" line="304"/>
                <method name="reRegister" type="void" line="307">
                    <params>
                        <param name="c" type="HttpConnection"/>
                    </params>
                    <comment line="309">
                                                
                    </comment>
                    <scope line="309">
                        <declaration name="chan" type="SocketChannel" line="310"/>
                        <declaration name="key" type="SelectionKey" line="312"/>
                    </scope>
                    <scope line="317"/>
                </method>
                <method name="run" type="void" line="324">
                    <comment line="350">
                                                
                    </comment>
                    <comment line="363">
                                                
                    </comment>
                    <comment line="383">
                        was an idle connection so add it
                         to reqConnections set.                        
                    </comment>
                    <comment line="398">
                        call the selector just to process the cancelled keys                        
                    </comment>
                    <scope line="325">
                        <scope line="326">
                            <declaration name="li" type="ListIterator&lt;HttpConnection&gt;" line="327"/>
                            <scope line="329"/>
                            <declaration name="list" type="List&lt;Event&gt;" line="334"/>
                            <scope line="336">
                                <scope line="337"/>
                            </scope>
                            <scope line="343">
                                <scope line="344"/>
                            </scope>
                            <declaration name="selected" type="Set&lt;SelectionKey&gt;" line="351"/>
                            <declaration name="iter" type="Iterator&lt;SelectionKey&gt;" line="352"/>
                            <scope line="353">
                                <declaration name="key" type="SelectionKey" line="354"/>
                                <scope line="356">
                                    <scope line="357"/>
                                    <declaration name="chan" type="SocketChannel" line="360"/>
                                    <scope line="361"/>
                                    <declaration name="newkey" type="SelectionKey" line="365"/>
                                    <declaration name="c" type="HttpConnection" line="366"/>
                                </scope>
                                <scope line="372">
                                    <scope line="373">
                                        <scope line="374">
                                            <declaration name="closed" type="boolean" line="375"/>
                                            <declaration name="chan" type="SocketChannel" line="376"/>
                                            <declaration name="conn" type="HttpConnection" line="377"/>
                                            <scope line="381"/>
                                        </scope>
                                        <scope line="387"/>
                                    </scope>
                                    <scope line="390"/>
                                    <scope line="392"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="399"/>
                        <scope line="401"/>
                    </scope>
                </method>
                <method name="handleException" type="void" line="408">
                    <params>
                        <param name="key" type="SelectionKey"/>
                        <param name="e" type="Exception"/>
                    </params>
                    <declaration name="conn" type="HttpConnection" line="409"/>
                    <scope line="410"/>
                </method>
                <method name="handle" type="void" line="418">
                    <params>
                        <param name="chan" type="SocketChannel"/>
                        <param name="conn" type="HttpConnection"/>
                    </params>
                    <scope line="419">
                        <declaration name="t" type="Exchange" line="420"/>
                    </scope>
                    <scope line="422"/>
                    <scope line="425"/>
                </method>
            </class>
            <declaration name="debug" type="boolean" line="432"/>
            <method name="dprint" type="void" line="434">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="435"/>
            </method>
            <method name="dprint" type="void" line="440">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <scope line="441"/>
            </method>
            <method name="getLogger" type="Logger" line="447"/>
            <method name="closeConnection" type="void" line="451">
                <params>
                    <param name="conn" type="HttpConnection"/>
                </params>
            </method>
            <class name="Exchange" line="472">
                <comment line="656">
                                        
                </comment>
                <comment line="816">
                    runs every TIMER_MILLIS                    
                </comment>
                <implements interface="Runnable"/>
                <declaration name="chan" type="SocketChannel" line="473"/>
                <declaration name="connection" type="HttpConnection" line="474"/>
                <declaration name="context" type="HttpContextImpl" line="475"/>
                <declaration name="rawin" type="InputStream" line="476"/>
                <declaration name="rawout" type="OutputStream" line="477"/>
                <declaration name="protocol" type="String" line="478"/>
                <declaration name="tx" type="ExchangeImpl" line="479"/>
                <declaration name="ctx" type="HttpContextImpl" line="480"/>
                <declaration name="rejected" type="boolean" line="481"/>
                <method name="Exchange" type="constructor" line="483">
                    <params>
                        <param name="chan" type="SocketChannel"/>
                        <param name="protocol" type="String"/>
                        <param name="conn" type="HttpConnection"/>
                    </params>
                </method>
                <method name="run" type="void" line="489">
                    <comment line="491">
                                                
                    </comment>
                    <comment line="503">
                                                
                    </comment>
                    <comment line="530">
                                                
                    </comment>
                    <comment line="607">
                        check if client sent an Expect 100 Continue.
                         In that case, need to send an interim response.
                         In future API may be modified to allow app to
                         be involved in this process.                        
                    </comment>
                    <comment line="619">
                        uf is the list of filters seenset by the user.
                         sf is the list of filters established internally
                         and which are not visible to the user. uc and sc
                         are the corresponding Filter.Chains.
                         They are linked together by a LinkHandler
                         so that they can both be invoked in one call.                        
                    </comment>
                    <comment line="632">
                                                
                    </comment>
                    <declaration name="newconnection" type="boolean" line="492"/>
                    <declaration name="engine" type="SSLEngine" line="493"/>
                    <declaration name="requestLine" type="String" line="494"/>
                    <declaration name="sslStreams" type="SSLStreams" line="495"/>
                    <scope line="496">
                        <scope line="497"/>
                        <scope line="501">
                            <scope line="504">
                                <scope line="505"/>
                            </scope>
                            <scope line="514"/>
                        </scope>
                        <declaration name="req" type="Request" line="526"/>
                        <scope line="528"/>
                        <declaration name="space" type="int" line="533"/>
                        <scope line="534"/>
                        <declaration name="method" type="String" line="539"/>
                        <declaration name="start" type="int" line="540"/>
                        <scope line="542"/>
                        <declaration name="uriStr" type="String" line="547"/>
                        <declaration name="uri" type="URI" line="548"/>
                        <declaration name="version" type="String" line="550"/>
                        <declaration name="headers" type="Headers" line="551"/>
                        <declaration name="s" type="String" line="552"/>
                        <declaration name="clen" type="long" line="553"/>
                        <scope line="554"/>
                        <scope line="556">
                            <scope line="558"/>
                            <scope line="561"/>
                        </scope>
                        <scope line="566"/>
                        <scope line="572"/>
                        <declaration name="chdr" type="String" line="580"/>
                        <declaration name="rheaders" type="Headers" line="581"/>
                        <scope line="583"/>
                        <scope line="586">
                            <scope line="588"/>
                            <scope line="591">
                                <declaration name="idle" type="int" line="593"/>
                                <declaration name="max" type="int" line="594"/>
                                <declaration name="val" type="String" line="595"/>
                            </scope>
                        </scope>
                        <scope line="600"/>
                        <declaration name="exp" type="String" line="611"/>
                        <scope line="612"/>
                        <declaration name="sf" type="List&lt;Filter&gt;" line="625"/>
                        <declaration name="uf" type="List&lt;Filter&gt;" line="626"/>
                        <declaration name="sc" type="Filter.Chain" line="628"/>
                        <declaration name="uc" type="Filter.Chain" line="629"/>
                        <scope line="634"/>
                        <scope line="636"/>
                    </scope>
                    <scope line="640"/>
                    <scope line="643"/>
                    <scope line="646"/>
                    <scope line="649"/>
                </method>
                <class name="LinkHandler" line="657">
                    <implements interface="HttpHandler"/>
                    <declaration name="nextChain" type="Filter.Chain" line="658"/>
                    <method name="LinkHandler" type="constructor" line="660">
                        <params>
                            <param name="nextChain" type="Filter.Chain"/>
                        </params>
                    </method>
                    <method name="handle" type="void" line="664">
                        <params>
                            <param name="exchange" type="HttpExchange"/>
                        </params>
                    </method>
                </class>
                <method name="reject" type="void" line="669">
                    <params>
                        <param name="code" type="int"/>
                        <param name="requestStr" type="String"/>
                        <param name="message" type="String"/>
                    </params>
                </method>
                <method name="sendReply" type="void" line="680">
                    <params>
                        <param name="code" type="int"/>
                        <param name="closeNow" type="boolean"/>
                        <param name="text" type="String"/>
                    </params>
                    <scope line="681">
                        <declaration name="builder" type="StringBuilder" line="682"/>
                        <scope line="686"/>
                        <scope line="690"/>
                        <scope line="694"/>
                        <declaration name="s" type="String" line="698"/>
                        <declaration name="b" type="byte[]" line="699"/>
                        <scope line="702"/>
                    </scope>
                    <scope line="705"/>
                </method>
            </class>
            <method name="logReply" type="void" line="713">
                <params>
                    <param name="code" type="int"/>
                    <param name="requestStr" type="String"/>
                    <param name="text" type="String"/>
                </params>
                <scope line="714"/>
                <scope line="717"/>
                <declaration name="r" type="String" line="720"/>
                <scope line="721"/>
                <scope line="723"/>
                <declaration name="message" type="String" line="726"/>
            </method>
            <method name="getTicks" type="long" line="731"/>
            <method name="getTime" type="long" line="735"/>
            <method name="delay" type="void" line="739">
                <scope line="741"/>
                <scope line="743"/>
            </method>
            <declaration name="exchangeCount" type="int" line="746"/>
            <method name="startExchange" type="void" line="748"/>
            <method name="endExchange" type="int" line="752"/>
            <method name="getWrapper" type="HttpServer" line="758"/>
            <method name="requestStarted" type="void" line="762">
                <params>
                    <param name="c" type="HttpConnection"/>
                </params>
            </method>
            <method name="requestCompleted" type="void" line="775">
                <params>
                    <param name="c" type="HttpConnection"/>
                </params>
            </method>
            <method name="responseCompleted" type="void" line="784">
                <params>
                    <param name="c" type="HttpConnection"/>
                </params>
            </method>
            <class name="ServerTimerTask" line="790">
                <extends class="TimerTask"/>
                <comment line="656">
                                        
                </comment>
                <comment line="816">
                    runs every TIMER_MILLIS                    
                </comment>
                <javadoc line="790">
                    TimerTask run every CLOCK_TICK ms                    
                </javadoc>
                <method name="run" type="void" line="794">
                    <declaration name="toClose" type="LinkedList&lt;HttpConnection&gt;" line="795"/>
                    <scope line="798">
                        <scope line="799">
                            <scope line="800"/>
                        </scope>
                        <scope line="804"/>
                    </scope>
                </method>
            </class>
            <class name="ServerTimerTask1" line="813">
                <extends class="TimerTask"/>
                <comment line="656">
                                        
                </comment>
                <comment line="816">
                    runs every TIMER_MILLIS                    
                </comment>
                <method name="run" type="void" line="816">
                    <declaration name="toClose" type="LinkedList&lt;HttpConnection&gt;" line="817"/>
                    <scope line="819">
                        <scope line="820">
                            <scope line="821">
                                <scope line="822"/>
                            </scope>
                            <scope line="826"/>
                        </scope>
                    </scope>
                    <scope line="835">
                        <scope line="836">
                            <scope line="837">
                                <scope line="838"/>
                            </scope>
                            <scope line="842"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="logStackTrace" type="void" line="853">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="b" type="StringBuilder" line="855"/>
                <declaration name="e" type="StackTraceElement[]" line="856"/>
                <scope line="857"/>
            </method>
            <method name="getTimeMillis" type="long" line="863">
                <params>
                    <param name="secs" type="long"/>
                </params>
                <scope line="864"/>
                <scope line="866"/>
            </method>
        </class>
    </source>