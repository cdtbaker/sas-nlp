<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.httpserver">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="com.sun.net.httpserver"/>
        <import package="com.sun.net.httpserver.spi"/>
        <class name="ChunkedInputStream" line="6">
            <extends class="LeftOverInputStream"/>
            <method name="ChunkedInputStream" type="constructor" line="7">
                <params>
                    <param name="t" type="ExchangeImpl"/>
                    <param name="src" type="InputStream"/>
                </params>
            </method>
            <declaration name="remaining" type="int" line="10"/>
            <declaration name="needToReadHeader" type="boolean" line="11"/>
            <declaration name="CR" type="char" line="12"/>
            <declaration name="LF" type="char" line="13"/>
            <method name="numeric" type="int" line="14">
                <params>
                    <param name="arr" type="char[]"/>
                    <param name="nchars" type="int"/>
                </params>
            </method>
            <method name="readChunkHeader" type="int" line="36">
                <declaration name="gotCR" type="boolean" line="37"/>
                <declaration name="c" type="int" line="38"/>
                <declaration name="len_arr" type="char[]" line="39"/>
                <declaration name="len_size" type="int" line="40"/>
                <declaration name="end_of_len" type="boolean" line="41"/>
                <scope line="42">
                    <declaration name="ch" type="char" line="43"/>
                    <scope line="44"/>
                    <scope line="47">
                        <scope line="48">
                            <declaration name="l" type="int" line="49"/>
                        </scope>
                        <scope line="52"/>
                        <scope line="55"/>
                    </scope>
                    <scope line="59">
                        <scope line="60"/>
                        <scope line="63"/>
                        <scope line="66"/>
                    </scope>
                </scope>
            </method>
            <method name="readImpl" type="int" line="73">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="74"/>
                <scope line="77">
                    <scope line="79"/>
                </scope>
                <scope line="87"/>
                <declaration name="n" type="int" line="90"/>
                <scope line="91"/>
                <scope line="94"/>
            </method>
            <method name="consumeCRLF" type="void" line="100">
                <declaration name="c" type="char" line="101"/>
                <scope line="103"/>
                <scope line="107"/>
            </method>
            <javadoc line="111">
                returns the number of bytes available to read in the current chunk
                  which may be less than the real amount, but we&apos;ll live with that
                  limitation for the moment. It only affects potential efficiency
                  rather than correctness.                
            </javadoc>
            <method name="available" type="int" line="117">
                <scope line="118"/>
                <declaration name="n" type="int" line="121"/>
            </method>
            <method name="isDataBuffered" type="boolean" line="124">
                <declaration name="eof" type="assert" line="125"/>
            </method>
            <method name="markSupported" type="boolean" line="128"/>
            <method name="mark" type="void" line="131">
                <params>
                    <param name="l" type="int"/>
                </params>
            </method>
            <method name="reset" type="void" line="133"/>
        </class>
    </source>