<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.httpserver">
        <import package="java.util"/>
        <import package="java.nio"/>
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.nio.channels"/>
        <import package="com.sun.net.httpserver"/>
        <import package="com.sun.net.httpserver.spi"/>
        <class name="Request" line="9">
            <javadoc line="9">
                                
            </javadoc>
            <declaration name="BUF_LEN" type="int" line="12"/>
            <declaration name="CR" type="byte" line="13"/>
            <declaration name="LF" type="byte" line="14"/>
            <declaration name="startLine" type="String" line="15"/>
            <declaration name="chan" type="SocketChannel" line="16"/>
            <declaration name="is" type="InputStream" line="17"/>
            <declaration name="os" type="OutputStream" line="18"/>
            <method name="Request" type="constructor" line="19">
                <params>
                    <param name="rawInputStream" type="InputStream"/>
                    <param name="rawout" type="OutputStream"/>
                </params>
                <scope line="23">
                    <scope line="25"/>
                </scope>
            </method>
            <declaration name="buf" type="char[]" line="31"/>
            <declaration name="pos" type="int" line="32"/>
            <declaration name="lineBuf" type="StringBuffer" line="33"/>
            <method name="inputStream" type="InputStream" line="34"/>
            <method name="outputStream" type="OutputStream" line="37"/>
            <javadoc line="40">
                read a line from the stream returning as a String.
                  Not used for reading headers.                
            </javadoc>
            <method name="readLine" type="String" line="44">
                <declaration name="gotCR" type="boolean" line="45"/>
                <scope line="48">
                    <declaration name="c" type="int" line="49"/>
                    <scope line="50"/>
                    <scope line="53">
                        <scope line="54"/>
                        <scope line="57"/>
                    </scope>
                    <scope line="63">
                        <scope line="64"/>
                        <scope line="67"/>
                    </scope>
                </scope>
            </method>
            <method name="consume" type="void" line="75">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="76"/>
            </method>
            <javadoc line="82">
                returns the request line (first line of a request)                
            </javadoc>
            <method name="requestLine" type="String" line="85"/>
            <declaration name="hdrs" type="Headers" line="88"/>
            <method name="headers" type="Headers" line="89">
                <scope line="90"/>
                <declaration name="s" type="char" line="94"/>
                <declaration name="len" type="int" line="95"/>
                <declaration name="firstc" type="int" line="96"/>
                <scope line="97">
                    <declaration name="c" type="int" line="98"/>
                    <scope line="99"/>
                </scope>
                <scope line="106">
                    <declaration name="keyend" type="int" line="107"/>
                    <declaration name="c" type="int" line="108"/>
                    <declaration name="inKey" type="boolean" line="109"/>
                    <scope line="111">
                        <scope line="112">
                            <scope line="126"/>
                            <scope line="134">
                                <declaration name="ns" type="char" line="135"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="k" type="String" line="144"/>
                    <scope line="145"/>
                    <scope line="149"/>
                    <declaration name="v" type="String" line="154"/>
                </scope>
            </method>
            <class name="ReadStream" line="162">
                <extends class="InputStream"/>
                <javadoc line="162">
                    Implements blocking reading semantics on top of a non-blocking channel                    
                </javadoc>
                <declaration name="channel" type="SocketChannel" line="166"/>
                <declaration name="chanbuf" type="ByteBuffer" line="167"/>
                <declaration name="one" type="byte[]" line="168"/>
                <declaration name="closed" type="boolean" line="169"/>
                <declaration name="markBuf" type="ByteBuffer" line="170"/>
                <declaration name="marked" type="boolean" line="171"/>
                <declaration name="reset" type="boolean" line="172"/>
                <declaration name="readlimit" type="int" line="173"/>
                <declaration name="readTimeout" type="long" line="174"/>
                <declaration name="server" type="ServerImpl" line="175"/>
                <declaration name="BUFSIZE" type="int" line="176"/>
                <method name="ReadStream" type="constructor" line="177">
                    <params>
                        <param name="server" type="ServerImpl"/>
                        <param name="chan" type="SocketChannel"/>
                    </params>
                </method>
                <method name="read" type="int" line="185">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="read" type="int" line="188">
                    <declaration name="result" type="int" line="189"/>
                    <scope line="190"/>
                    <scope line="193"/>
                </method>
                <method name="read" type="int" line="197">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="srclen" type="int"/>
                    </params>
                </method>
                <method name="markSupported" type="boolean" line="241"/>
                <method name="available" type="int" line="244"/>
                <method name="close" type="void" line="250">
                    <scope line="251"/>
                </method>
                <method name="mark" type="void" line="257">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                </method>
                <method name="reset" type="void" line="264"/>
            </class>
            <class name="WriteStream" line="272">
                <extends class="java.io.OutputStream"/>
                <declaration name="channel" type="SocketChannel" line="273"/>
                <declaration name="buf" type="ByteBuffer" line="274"/>
                <declaration name="key" type="SelectionKey" line="275"/>
                <declaration name="closed" type="boolean" line="276"/>
                <declaration name="one" type="byte[]" line="277"/>
                <declaration name="server" type="ServerImpl" line="278"/>
                <method name="WriteStream" type="constructor" line="279">
                    <params>
                        <param name="server" type="ServerImpl"/>
                        <param name="channel" type="SocketChannel"/>
                    </params>
                </method>
                <method name="write" type="void" line="287">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="291">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="write" type="void" line="294">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="l" type="int" line="295"/>
                    <declaration name="cap" type="int" line="297"/>
                    <scope line="298">
                        <declaration name="diff" type="int" line="299"/>
                    </scope>
                    <declaration name="n" type="int" line="305"/>
                    <scope line="306"/>
                </method>
                <method name="close" type="void" line="311"/>
            </class>
        </class>
    </source>