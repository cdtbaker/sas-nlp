<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.httpserver">
        <import package="java.util"/>
        <import package="java.nio"/>
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.nio.channels"/>
        <import package="com.sun.net.httpserver"/>
        <import package="com.sun.net.httpserver.spi"/>
        <class name="Request" line="36">
            <javadoc line="36">
                                
            </javadoc>
            <declaration name="BUF_LEN" type="int" line="40"/>
            <declaration name="CR" type="byte" line="41"/>
            <declaration name="LF" type="byte" line="42"/>
            <declaration name="startLine" type="String" line="44"/>
            <declaration name="chan" type="SocketChannel" line="45"/>
            <declaration name="is" type="InputStream" line="46"/>
            <declaration name="os" type="OutputStream" line="47"/>
            <method name="Request" type="constructor" line="49">
                <params>
                    <param name="rawInputStream" type="InputStream"/>
                    <param name="rawout" type="OutputStream"/>
                </params>
                <comment line="58">
                                        
                </comment>
                <scope line="53">
                    <scope line="55"/>
                </scope>
            </method>
            <declaration name="buf" type="char[]" line="63"/>
            <declaration name="pos" type="int" line="64"/>
            <declaration name="lineBuf" type="StringBuffer" line="65"/>
            <method name="inputStream" type="InputStream" line="67"/>
            <method name="outputStream" type="OutputStream" line="71"/>
            <javadoc line="75">
                read a line from the stream returning as a String.
                  Not used for reading headers.                
            </javadoc>
            <method name="readLine" type="String" line="80">
                <declaration name="gotCR" type="boolean" line="81"/>
                <scope line="83">
                    <declaration name="c" type="int" line="84"/>
                    <scope line="85"/>
                    <scope line="88">
                        <scope line="89"/>
                        <scope line="91"/>
                    </scope>
                    <scope line="96">
                        <scope line="97"/>
                        <scope line="99"/>
                    </scope>
                </scope>
            </method>
            <method name="consume" type="void" line="108">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="109"/>
            </method>
            <javadoc line="116">
                returns the request line (first line of a request)                
            </javadoc>
            <method name="requestLine" type="String" line="119"/>
            <declaration name="hdrs" type="Headers" line="123"/>
            <method name="headers" type="Headers" line="125">
                <comment line="136">
                    check for empty headers                    
                </comment>
                <comment line="175">
                                        
                </comment>
                <scope line="126"/>
                <declaration name="s" type="char" line="131"/>
                <declaration name="len" type="int" line="132"/>
                <declaration name="firstc" type="int" line="134"/>
                <scope line="137">
                    <declaration name="c" type="int" line="138"/>
                    <scope line="139"/>
                </scope>
                <scope line="147">
                    <declaration name="keyend" type="int" line="148"/>
                    <declaration name="c" type="int" line="149"/>
                    <declaration name="inKey" type="boolean" line="150"/>
                    <scope line="152">
                        <scope line="153">
                            <scope line="168"/>
                            <scope line="179">
                                <declaration name="ns" type="char" line="180"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="k" type="String" line="190"/>
                    <scope line="191"/>
                    <scope line="194"/>
                    <declaration name="v" type="String" line="201"/>
                </scope>
            </method>
            <class name="ReadStream" line="212">
                <extends class="InputStream"/>
                <comment line="222">
                                        
                </comment>
                <comment line="306">
                                        
                </comment>
                <javadoc line="212">
                    Implements blocking reading semantics on top of a non-blocking channel                    
                </javadoc>
                <declaration name="channel" type="SocketChannel" line="217"/>
                <declaration name="chanbuf" type="ByteBuffer" line="218"/>
                <declaration name="one" type="byte[]" line="219"/>
                <declaration name="closed" type="boolean" line="220"/>
                <declaration name="markBuf" type="ByteBuffer" line="221"/>
                <declaration name="marked" type="boolean" line="222"/>
                <declaration name="reset" type="boolean" line="223"/>
                <declaration name="readlimit" type="int" line="224"/>
                <declaration name="readTimeout" type="long" line="225"/>
                <declaration name="server" type="ServerImpl" line="226"/>
                <declaration name="BUFSIZE" type="int" line="227"/>
                <method name="ReadStream" type="constructor" line="229">
                    <params>
                        <param name="server" type="ServerImpl"/>
                        <param name="chan" type="SocketChannel"/>
                    </params>
                </method>
                <method name="read" type="int" line="238">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="read" type="int" line="242">
                    <declaration name="result" type="int" line="243"/>
                    <scope line="244"/>
                    <scope line="246"/>
                </method>
                <method name="read" type="int" line="251">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="srclen" type="int"/>
                    </params>
                    <comment line="268">
                                                
                    </comment>
                    <comment line="275">
                                                
                    </comment>
                    <comment line="290">
                                                
                    </comment>
                    <declaration name="canreturn" type="int" line="253"/>
                    <scope line="258"/>
                    <scope line="264"/>
                    <scope line="268">
                        <scope line="272"/>
                    </scope>
                    <scope line="275">
                        <scope line="277"/>
                        <scope line="280"/>
                        <scope line="283"/>
                        <scope line="290">
                            <scope line="291"/>
                            <scope line="293"/>
                        </scope>
                    </scope>
                </method>
                <method name="markSupported" type="boolean" line="301"/>
                <method name="available" type="int" line="306"/>
                <method name="close" type="void" line="319">
                    <scope line="320"/>
                </method>
                <method name="mark" type="void" line="327">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                </method>
                <method name="reset" type="void" line="336"/>
            </class>
            <class name="WriteStream" line="347">
                <extends class="java.io.OutputStream"/>
                <comment line="222">
                                        
                </comment>
                <comment line="306">
                                        
                </comment>
                <declaration name="channel" type="SocketChannel" line="348"/>
                <declaration name="buf" type="ByteBuffer" line="349"/>
                <declaration name="key" type="SelectionKey" line="350"/>
                <declaration name="closed" type="boolean" line="351"/>
                <declaration name="one" type="byte[]" line="352"/>
                <declaration name="server" type="ServerImpl" line="353"/>
                <method name="WriteStream" type="constructor" line="355">
                    <params>
                        <param name="server" type="ServerImpl"/>
                        <param name="channel" type="SocketChannel"/>
                    </params>
                </method>
                <method name="write" type="void" line="364">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="369">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="write" type="void" line="373">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="l" type="int" line="374"/>
                    <declaration name="cap" type="int" line="378"/>
                    <scope line="379">
                        <declaration name="diff" type="int" line="380"/>
                    </scope>
                    <declaration name="n" type="int" line="386"/>
                    <scope line="387"/>
                </method>
                <method name="close" type="void" line="394">
                    <comment line="397">
                        server.logStackTrace (&quot;Request.OS.close: isOpen=&quot;+channel.isOpen());                        
                    </comment>
                </method>
            </class>
        </class>
    </source>