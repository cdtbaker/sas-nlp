<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.httpserver">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="javax.net.ssl"/>
        <import package="java.util"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.text"/>
        <import package="com.sun.net.httpserver"/>
        <class name="ExchangeImpl" line="36">
            <comment line="47">
                                
            </comment>
            <comment line="51">
                                
            </comment>
            <comment line="56">
                                
            </comment>
            <comment line="70">
                streams which take care of the HTTP protocol framing
                 and are passed up to higher layers                
            </comment>
            <comment line="75">
                uis may have be a user supplied wrapper                
            </comment>
            <comment line="78">
                                
            </comment>
            <comment line="192">
                returns the place holder stream, which is the stream
                 returned from the 1st call to getResponseBody()
                 The &quot;real&quot; ouputstream is then placed inside this                
            </comment>
            <comment line="296">
                used by bytes()                
            </comment>
            <declaration name="reqHdrs" type="Headers" line="38"/>
            <declaration name="req" type="Request" line="39"/>
            <declaration name="method" type="String" line="40"/>
            <declaration name="writefinished" type="boolean" line="41"/>
            <declaration name="uri" type="URI" line="42"/>
            <declaration name="connection" type="HttpConnection" line="43"/>
            <declaration name="reqContentLen" type="long" line="44"/>
            <declaration name="rspContentLen" type="long" line="45"/>
            <declaration name="ris" type="InputStream" line="47"/>
            <declaration name="ros" type="OutputStream" line="48"/>
            <declaration name="thread" type="Thread" line="49"/>
            <declaration name="close" type="boolean" line="51"/>
            <declaration name="closed" type="boolean" line="52"/>
            <declaration name="http10" type="boolean" line="53"/>
            <declaration name="pattern" type="String" line="56"/>
            <declaration name="gmtTZ" type="TimeZone" line="57"/>
            <declaration name="dateFormat" type="ThreadLocal&lt;DateFormat&gt;" line="58"/>
            <anonymous_class line="59">
                <method name="initialValue" type="DateFormat" line="60">
                    <declaration name="df" type="DateFormat" line="61"/>
                </method>
            </anonymous_class>
            <declaration name="HEAD" type="String" line="67"/>
            <declaration name="uis" type="InputStream" line="72"/>
            <declaration name="uos" type="OutputStream" line="73"/>
            <declaration name="uis_orig" type="LeftOverInputStream" line="74"/>
            <declaration name="uos_orig" type="PlaceholderOutputStream" line="75"/>
            <declaration name="sentHeaders" type="boolean" line="77"/>
            <declaration name="attributes" type="Map&lt;String,Object&gt;" line="78"/>
            <declaration name="rcode" type="int" line="79"/>
            <declaration name="principal" type="HttpPrincipal" line="80"/>
            <declaration name="server" type="ServerImpl" line="81"/>
            <method name="ExchangeImpl" type="constructor" line="85">
                <params>
                    <param name="m" type="String"/>
                    <param name="u" type="URI"/>
                    <param name="req" type="Request"/>
                    <param name="len" type="long"/>
                    <param name="connection" type="HttpConnection"/>
                </params>
                <comment line="93">
                                        
                </comment>
            </method>
            <method name="getRequestHeaders" type="Headers" line="100"/>
            <method name="getResponseHeaders" type="Headers" line="104"/>
            <method name="getRequestURI" type="URI" line="108"/>
            <method name="getRequestMethod" type="String" line="112"/>
            <method name="getHttpContext" type="HttpContextImpl" line="116"/>
            <method name="isHeadRequest" type="boolean" line="120"/>
            <method name="close" type="void" line="124">
                <comment line="130">
                    close the underlying connection if,
                     a) the streams not set up yet, no response can be sent, or
                     b) if the wrapper output stream is not set up, or
                     c) if the close of the inputoutpu stream fails                    
                </comment>
                <scope line="125"/>
                <scope line="135">
                    <scope line="136"/>
                    <scope line="140"/>
                    <scope line="144"/>
                </scope>
                <scope line="148"/>
            </method>
            <method name="getRequestBody" type="InputStream" line="153">
                <scope line="154"/>
                <scope line="157"/>
                <scope line="160"/>
            </method>
            <method name="getOriginalInputStream" type="LeftOverInputStream" line="167"/>
            <method name="getResponseCode" type="int" line="171"/>
            <method name="getResponseBody" type="OutputStream" line="175">
                <comment line="176">
                    TODO. Change spec to remove restriction below. Filters
                     cannot work with this restriction
                    
                     if (!sentHeaders) {
                        throw new IllegalStateException (&quot;headers not sent&quot;);
                     }                    
                </comment>
                <scope line="183"/>
            </method>
            <method name="getPlaceholderResponseBody" type="PlaceholderOutputStream" line="195"/>
            <method name="sendResponseHeaders" type="void" line="202">
                <params>
                    <param name="rCode" type="int"/>
                    <param name="contentLen" type="long"/>
                </params>
                <comment line="211">
                    assume there is content                    
                </comment>
                <comment line="214">
                                        
                </comment>
                <comment line="216">
                                        
                </comment>
                <comment line="217">
                                        
                </comment>
                <comment line="218">
                                        
                </comment>
                <comment line="230">
                    HEAD requests should not set a content length by passing it
                     through this API, but should instead manually set the required                    
                </comment>
                <comment line="241">
                                        
                </comment>
                <scope line="203"/>
                <declaration name="statusLine" type="String" line="207"/>
                <declaration name="tmpout" type="OutputStream" line="208"/>
                <declaration name="o" type="PlaceholderOutputStream" line="209"/>
                <declaration name="noContentToSend" type="boolean" line="211"/>
                <scope line="219">
                    <scope line="220">
                        <declaration name="logger" type="Logger" line="221"/>
                        <declaration name="msg" type="String" line="222"/>
                    </scope>
                </scope>
                <scope line="229">
                    <scope line="233">
                        <declaration name="logger" type="Logger" line="234"/>
                        <declaration name="msg" type="String" line="235"/>
                    </scope>
                </scope>
                <scope line="241">
                    <scope line="242">
                        <scope line="243"/>
                        <scope line="246"/>
                    </scope>
                    <scope line="250">
                        <scope line="251"/>
                    </scope>
                </scope>
                <scope line="264">
                    <declaration name="e" type="WriteFinishedEvent" line="265"/>
                </scope>
            </method>
            <method name="write" type="void" line="272">
                <params>
                    <param name="map" type="Headers"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <declaration name="entries" type="Set&lt;Map.Entry&lt;String,List&lt;String&gt;&gt;&gt;" line="273"/>
                <scope line="274">
                    <declaration name="key" type="String" line="275"/>
                    <declaration name="buf" type="byte[]" line="276"/>
                    <declaration name="values" type="List&lt;String&gt;" line="277"/>
                    <scope line="278">
                        <declaration name="i" type="int" line="279"/>
                    </scope>
                </scope>
            </method>
            <declaration name="rspbuf" type="byte[]" line="295"/>
            <javadoc line="297">
                convert string to byte[], using rspbuf
                  Make sure that at least &quot;extra&quot; bytes are free at end
                  of rspbuf. Reallocate rspbuf if not big enough.
                  caller must check return value to see if rspbuf moved                
            </javadoc>
            <method name="bytes" type="byte[]" line="303">
                <params>
                    <param name="s" type="String"/>
                    <param name="extra" type="int"/>
                </params>
                <declaration name="slen" type="int" line="304"/>
                <scope line="305">
                    <declaration name="diff" type="int" line="306"/>
                </scope>
                <declaration name="c" type="char" line="309"/>
                <scope line="310"/>
            </method>
            <method name="getRemoteAddress" type="InetSocketAddress" line="316">
                <declaration name="s" type="Socket" line="317"/>
                <declaration name="ia" type="InetAddress" line="318"/>
                <declaration name="port" type="int" line="319"/>
            </method>
            <method name="getLocalAddress" type="InetSocketAddress" line="323">
                <declaration name="s" type="Socket" line="324"/>
                <declaration name="ia" type="InetAddress" line="325"/>
                <declaration name="port" type="int" line="326"/>
            </method>
            <method name="getProtocol" type="String" line="330">
                <declaration name="reqline" type="String" line="331"/>
                <declaration name="index" type="int" line="332"/>
            </method>
            <method name="getSSLSession" type="SSLSession" line="336">
                <declaration name="e" type="SSLEngine" line="337"/>
                <scope line="338"/>
            </method>
            <method name="getAttribute" type="Object" line="344">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="345"/>
                <scope line="348"/>
            </method>
            <method name="setAttribute" type="void" line="354">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="355"/>
                <scope line="358"/>
            </method>
            <method name="setStreams" type="void" line="364">
                <params>
                    <param name="i" type="InputStream"/>
                    <param name="o" type="OutputStream"/>
                </params>
                <scope line="366"/>
                <scope line="369"/>
            </method>
            <javadoc line="374">
                PP                
            </javadoc>
            <method name="getConnection" type="HttpConnection" line="377"/>
            <method name="getServerImpl" type="ServerImpl" line="381"/>
            <method name="getPrincipal" type="HttpPrincipal" line="385"/>
            <method name="setPrincipal" type="void" line="389">
                <params>
                    <param name="principal" type="HttpPrincipal"/>
                </params>
            </method>
            <method name="get" type="ExchangeImpl" line="393">
                <params>
                    <param name="t" type="HttpExchange"/>
                </params>
                <scope line="394"/>
                <scope line="396"/>
            </method>
        </class>
        <class name="PlaceholderOutputStream" line="403">
            <extends class="java.io.OutputStream"/>
            <comment line="47">
                                
            </comment>
            <comment line="51">
                                
            </comment>
            <comment line="56">
                                
            </comment>
            <comment line="70">
                streams which take care of the HTTP protocol framing
                 and are passed up to higher layers                
            </comment>
            <comment line="75">
                uis may have be a user supplied wrapper                
            </comment>
            <comment line="78">
                                
            </comment>
            <comment line="192">
                returns the place holder stream, which is the stream
                 returned from the 1st call to getResponseBody()
                 The &quot;real&quot; ouputstream is then placed inside this                
            </comment>
            <comment line="296">
                used by bytes()                
            </comment>
            <javadoc line="403">
                An OutputStream which wraps another stream
                  which is supplied either at creation time, or sometime later.
                  If a caller/user tries to write to this stream before
                  the wrapped stream has been provided, then an IOException will
                  be thrown.                
            </javadoc>
            <declaration name="wrapped" type="OutputStream" line="412"/>
            <method name="PlaceholderOutputStream" type="constructor" line="414">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="setWrappedStream" type="void" line="418">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="isWrapped" type="boolean" line="422"/>
            <method name="checkWrap" type="void" line="426">
                <scope line="427"/>
            </method>
            <method name="write" type="void" line="432">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="437">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="write" type="void" line="442">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="flush" type="void" line="447"/>
            <method name="close" type="void" line="452"/>
        </class>
    </source>