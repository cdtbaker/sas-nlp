<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.httpserver">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="javax.net.ssl"/>
        <import package="java.util"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.text"/>
        <import package="com.sun.net.httpserver"/>
        <class name="ExchangeImpl" line="9">
            <declaration name="reqHdrs" type="Headers" line="10"/>
            <declaration name="req" type="Request" line="11"/>
            <declaration name="method" type="String" line="12"/>
            <declaration name="writefinished" type="boolean" line="13"/>
            <declaration name="uri" type="URI" line="14"/>
            <declaration name="connection" type="HttpConnection" line="15"/>
            <declaration name="reqContentLen" type="long" line="16"/>
            <declaration name="rspContentLen" type="long" line="17"/>
            <declaration name="ris" type="InputStream" line="18"/>
            <declaration name="ros" type="OutputStream" line="19"/>
            <declaration name="thread" type="Thread" line="20"/>
            <declaration name="close" type="boolean" line="21"/>
            <declaration name="closed" type="boolean" line="22"/>
            <declaration name="http10" type="boolean" line="23"/>
            <declaration name="pattern" type="String" line="24"/>
            <declaration name="gmtTZ" type="TimeZone" line="25"/>
            <declaration name="dateFormat" type="ThreadLocal&amp;lt;DateFormat&amp;gt;" line="26"/>
            <anonymous_class line="26">
                <method name="initialValue" type="DateFormat" line="27">
                    <declaration name="df" type="DateFormat" line="28"/>
                </method>
            </anonymous_class>
            <declaration name="HEAD" type="String" line="34"/>
            <declaration name="uis" type="InputStream" line="35"/>
            <declaration name="uos" type="OutputStream" line="36"/>
            <declaration name="uis_orig" type="LeftOverInputStream" line="37"/>
            <declaration name="uos_orig" type="PlaceholderOutputStream" line="38"/>
            <declaration name="sentHeaders" type="boolean" line="39"/>
            <declaration name="attributes" type="Map&amp;lt;String,Object&amp;gt;" line="40"/>
            <declaration name="rcode" type="int" line="41"/>
            <declaration name="principal" type="HttpPrincipal" line="42"/>
            <declaration name="server" type="ServerImpl" line="43"/>
            <method name="ExchangeImpl" type="constructor" line="44">
                <params>
                    <param name="m" type="String"/>
                    <param name="u" type="URI"/>
                    <param name="req" type="Request"/>
                    <param name="len" type="long"/>
                    <param name="connection" type="HttpConnection"/>
                </params>
            </method>
            <method name="getRequestHeaders" type="Headers" line="57"/>
            <method name="getResponseHeaders" type="Headers" line="60"/>
            <method name="getRequestURI" type="URI" line="63"/>
            <method name="getRequestMethod" type="String" line="66"/>
            <method name="getHttpContext" type="HttpContextImpl" line="69"/>
            <method name="isHeadRequest" type="boolean" line="72"/>
            <method name="close" type="void" line="75">
                <scope line="76"/>
                <scope line="80">
                    <scope line="81"/>
                    <scope line="85"/>
                    <scope line="89"/>
                </scope>
                <scope line="94"/>
            </method>
            <method name="getRequestBody" type="InputStream" line="98">
                <scope line="99"/>
                <scope line="102"/>
                <scope line="106"/>
            </method>
            <method name="getOriginalInputStream" type="LeftOverInputStream" line="112"/>
            <method name="getResponseCode" type="int" line="115"/>
            <method name="getResponseBody" type="OutputStream" line="118">
                <scope line="119"/>
            </method>
            <method name="getPlaceholderResponseBody" type="PlaceholderOutputStream" line="125"/>
            <method name="sendResponseHeaders" type="void" line="129">
                <params>
                    <param name="rCode" type="int"/>
                    <param name="contentLen" type="long"/>
                </params>
                <scope line="130"/>
                <declaration name="statusLine" type="String" line="134"/>
                <declaration name="tmpout" type="OutputStream" line="135"/>
                <declaration name="o" type="PlaceholderOutputStream" line="136"/>
                <declaration name="noContentToSend" type="boolean" line="138"/>
                <scope line="140">
                    <scope line="141">
                        <declaration name="logger" type="Logger" line="142"/>
                        <declaration name="msg" type="String" line="143"/>
                    </scope>
                </scope>
                <scope line="148">
                    <scope line="149">
                        <declaration name="logger" type="Logger" line="150"/>
                        <declaration name="msg" type="String" line="151"/>
                    </scope>
                </scope>
                <scope line="157">
                    <scope line="158">
                        <scope line="159"/>
                        <scope line="163"/>
                    </scope>
                    <scope line="168">
                        <scope line="169"/>
                    </scope>
                </scope>
                <scope line="182">
                    <declaration name="e" type="WriteFinishedEvent" line="183"/>
                </scope>
            </method>
            <method name="write" type="void" line="189">
                <params>
                    <param name="map" type="Headers"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <declaration name="entries" type="Set&amp;lt;Map.Entry&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;&amp;gt;" line="190"/>
                <scope line="191">
                    <declaration name="key" type="String" line="192"/>
                    <declaration name="buf" type="byte[]" line="193"/>
                    <declaration name="values" type="List&amp;lt;String&amp;gt;" line="194"/>
                    <scope line="195">
                        <declaration name="i" type="int" line="196"/>
                    </scope>
                </scope>
            </method>
            <declaration name="rspbuf" type="byte[]" line="211"/>
            <javadoc line="212">
                convert string to byte[], using rspbuf
                  Make sure that at least &quot;extra&quot; bytes are free at end
                  of rspbuf. Reallocate rspbuf if not big enough.
                  caller must check return value to see if rspbuf moved                
            </javadoc>
            <method name="bytes" type="byte[]" line="218">
                <params>
                    <param name="s" type="String"/>
                    <param name="extra" type="int"/>
                </params>
                <declaration name="slen" type="int" line="219"/>
                <scope line="220">
                    <declaration name="diff" type="int" line="221"/>
                </scope>
                <declaration name="c" type="char" line="224"/>
                <scope line="225"/>
            </method>
            <method name="getRemoteAddress" type="InetSocketAddress" line="230">
                <declaration name="s" type="Socket" line="231"/>
                <declaration name="ia" type="InetAddress" line="232"/>
                <declaration name="port" type="int" line="233"/>
            </method>
            <method name="getLocalAddress" type="InetSocketAddress" line="236">
                <declaration name="s" type="Socket" line="237"/>
                <declaration name="ia" type="InetAddress" line="238"/>
                <declaration name="port" type="int" line="239"/>
            </method>
            <method name="getProtocol" type="String" line="242">
                <declaration name="reqline" type="String" line="243"/>
                <declaration name="index" type="int" line="244"/>
            </method>
            <method name="getSSLSession" type="SSLSession" line="247">
                <declaration name="e" type="SSLEngine" line="248"/>
                <scope line="249"/>
            </method>
            <method name="getAttribute" type="Object" line="254">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="255"/>
                <scope line="258"/>
            </method>
            <method name="setAttribute" type="void" line="263">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="264"/>
                <scope line="267"/>
            </method>
            <method name="setStreams" type="void" line="272">
                <params>
                    <param name="i" type="InputStream"/>
                    <param name="o" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="281">
                PP                
            </javadoc>
            <method name="getConnection" type="HttpConnection" line="284"/>
            <method name="getServerImpl" type="ServerImpl" line="287"/>
            <method name="getPrincipal" type="HttpPrincipal" line="290"/>
            <method name="setPrincipal" type="void" line="293">
                <params>
                    <param name="principal" type="HttpPrincipal"/>
                </params>
            </method>
            <method name="get" type="ExchangeImpl" line="296">
                <params>
                    <param name="t" type="HttpExchange"/>
                </params>
            </method>
        </class>
        <class name="PlaceholderOutputStream" line="306">
            <extends class="java.io.OutputStream"/>
            <javadoc line="306">
                An OutputStream which wraps another stream
                  which is supplied either at creation time, or sometime later.
                  If a caller/user tries to write to this stream before
                  the wrapped stream has been provided, then an IOException will
                  be thrown.                
            </javadoc>
            <declaration name="wrapped" type="OutputStream" line="314"/>
            <method name="PlaceholderOutputStream" type="constructor" line="315">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="setWrappedStream" type="void" line="318">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="isWrapped" type="boolean" line="321"/>
            <method name="checkWrap" type="void" line="324">
                <scope line="325"/>
            </method>
            <method name="write" type="void" line="329">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="333">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="write" type="void" line="337">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="flush" type="void" line="341"/>
            <method name="close" type="void" line="345"/>
        </class>
    </source>