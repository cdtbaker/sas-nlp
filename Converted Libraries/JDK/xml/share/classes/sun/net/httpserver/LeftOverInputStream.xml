<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.httpserver">
        <import package="java.io"/>
        <import package="com.sun.net.httpserver"/>
        <import package="com.sun.net.httpserver.spi"/>
        <class name="LeftOverInputStream" line="5">
            <extends class="FilterInputStream"/>
            <javadoc line="5">
                a (filter) input stream which can tell us if bytes are &quot;left over&quot;
                  on the underlying stream which can be read (without blocking)
                  on another instance of this class.
                  The class can also report if all bytes &quot;expected&quot; to be read
                  were read, by the time close() was called. In that case,
                  bytes may be drained to consume them (by calling drain() ).
                  isEOF() returns true, when all expected bytes have been read                
            </javadoc>
            <declaration name="t" type="ExchangeImpl" line="15"/>
            <declaration name="server" type="ServerImpl" line="16"/>
            <declaration name="closed" type="boolean" line="17"/>
            <declaration name="eof" type="boolean" line="18"/>
            <declaration name="one" type="byte[]" line="19"/>
            <method name="LeftOverInputStream" type="constructor" line="20">
                <params>
                    <param name="t" type="ExchangeImpl"/>
                    <param name="src" type="InputStream"/>
                </params>
            </method>
            <javadoc line="25">
                if bytes are left over buffered on the UNDERLYING stream                
            </javadoc>
            <method name="isDataBuffered" type="boolean" line="28">
                <declaration name="eof" type="assert" line="29"/>
            </method>
            <method name="close" type="void" line="32">
                <scope line="33"/>
                <scope line="37"/>
            </method>
            <method name="isClosed" type="boolean" line="41"/>
            <method name="isEOF" type="boolean" line="44"/>
            <method name="readImpl" type="int" line="47"/>
            <method name="read" type="int" line="48">
                <scope line="49"/>
                <declaration name="c" type="int" line="52"/>
                <scope line="53"/>
                <scope line="56"/>
            </method>
            <method name="read" type="int" line="60">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="61"/>
            </method>
            <javadoc line="66">
                read and discard up to l bytes or &quot;eof&quot; occurs,
                  (whichever is first). Then return true if the stream
                  is at eof (ie. all bytes were read) or false if not
                  (still bytes to be read)                
            </javadoc>
            <method name="drain" type="boolean" line="72">
                <params>
                    <param name="l" type="long"/>
                </params>
                <declaration name="bufSize" type="int" line="73"/>
                <declaration name="db" type="byte[]" line="74"/>
                <scope line="75">
                    <declaration name="len" type="long" line="76"/>
                    <scope line="77"/>
                    <scope line="81"/>
                </scope>
            </method>
        </class>
    </source>