<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.gopher">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.net"/>
        <import package="sun.net.www"/>
        <import package="sun.net.NetworkClient"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLStreamHandler"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="GopherClient" line="10">
            <extends class="NetworkClient"/>
            <implements interface="Runnable"/>
            <javadoc line="10">
                Class to maintain the state of a gopher fetch and handle the protocol                
            </javadoc>
            <declaration name="useGopherProxy" type="boolean" line="14"/>
            <javadoc line="14">
                @deprecated                
            </javadoc>
            <declaration name="gopherProxyHost" type="String" line="18"/>
            <javadoc line="18">
                @deprecated                
            </javadoc>
            <declaration name="gopherProxyPort" type="int" line="22"/>
            <javadoc line="22">
                @deprecated                
            </javadoc>
            <scope line="26"/>
            <declaration name="os" type="PipedOutputStream" line="31"/>
            <declaration name="u" type="URL" line="32"/>
            <declaration name="gtype" type="int" line="33"/>
            <declaration name="gkey" type="String" line="34"/>
            <declaration name="connection" type="sun.net.www.URLConnection" line="35"/>
            <method name="GopherClient" type="constructor" line="36">
                <params>
                    <param name="connection" type="sun.net.www.URLConnection"/>
                </params>
            </method>
            <javadoc line="39">
                @return true if gopher connections should go through a proxy, according
                  to system properties.                
            </javadoc>
            <method name="getUseGopherProxy" type="boolean" line="43"/>
            <javadoc line="46">
                @return the proxy host to use, or null if nothing is set.                
            </javadoc>
            <method name="getGopherProxyHost" type="String" line="49">
                <declaration name="host" type="String" line="50"/>
                <scope line="51"/>
            </method>
            <javadoc line="56">
                @return the proxy port to use.  Will default reasonably.                
            </javadoc>
            <method name="getGopherProxyPort" type="int" line="59"/>
            <javadoc line="62">
                Given a url, setup to fetch the gopher document it refers to                
            </javadoc>
            <method name="openStream" type="InputStream" line="65">
                <params>
                    <param name="u" type="URL"/>
                </params>
                <declaration name="i" type="int" line="68"/>
                <declaration name="s" type="String" line="69"/>
                <declaration name="limit" type="int" line="70"/>
                <declaration name="c" type="int" line="71"/>
                <declaration name="msgh" type="MessageHeader" line="77"/>
                <scope line="94"/>
                <scope line="98"/>
                <scope line="103"/>
                <scope line="107">
                    <declaration name="ret" type="PipedInputStream" line="109"/>
                </scope>
            </method>
            <javadoc line="116">
                Translate all the instances of %NN into the character they represent                
            </javadoc>
            <method name="decodePercent" type="String" line="119">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="limit" type="int" line="121"/>
                <declaration name="d" type="char" line="122"/>
                <declaration name="dp" type="int" line="123"/>
                <scope line="124">
                    <declaration name="c" type="int" line="125"/>
                    <scope line="126">
                        <declaration name="s1" type="int" line="127"/>
                        <declaration name="s2" type="int" line="128"/>
                        <scope line="137"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="146">
                Turn special characters into the %NN form                
            </javadoc>
            <method name="encodePercent" type="String" line="149">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="limit" type="int" line="151"/>
                <declaration name="d" type="char" line="152"/>
                <declaration name="dp" type="int" line="153"/>
                <scope line="154">
                    <declaration name="c" type="int" line="155"/>
                    <scope line="156">
                        <scope line="158">
                            <declaration name="nd" type="char" line="159"/>
                        </scope>
                        <declaration name="dig" type="int" line="164"/>
                    </scope>
                    <scope line="170">
                        <scope line="171">
                            <scope line="172">
                                <declaration name="nd" type="char" line="173"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="184">
                This method is run as a seperate thread when an incoming gopher
                  document requires translation to html                
            </javadoc>
            <method name="run" type="void" line="188">
                <declaration name="qpos" type="int" line="189"/>
                <scope line="190">
                    <scope line="191">
                        <declaration name="ps" type="PrintStream" line="192"/>
                    </scope>
                    <scope line="195">
                        <declaration name="buf" type="byte" line="196"/>
                        <scope line="197">
                            <declaration name="n" type="int" line="198"/>
                        </scope>
                        <scope line="201"/>
                    </scope>
                    <scope line="204">
                        <declaration name="ps" type="PrintStream" line="205"/>
                        <declaration name="title" type="String" line="206"/>
                        <declaration name="ds" type="DataInputStream" line="214"/>
                        <declaration name="s" type="String" line="215"/>
                        <scope line="216">
                            <declaration name="len" type="int" line="217"/>
                            <declaration name="key" type="int" line="220"/>
                            <declaration name="t1" type="int" line="221"/>
                            <declaration name="t2" type="int" line="222"/>
                            <declaration name="t3" type="int" line="223"/>
                            <scope line="224"/>
                            <declaration name="port" type="String" line="227"/>
                            <declaration name="host" type="String" line="228"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="252"/>
                <scope line="255"/>
                <scope line="257">
                    <scope line="258"/>
                    <scope line="262"/>
                </scope>
            </method>
        </class>
        <class name="GopherInputStream" line="267">
            <extends class="FilterInputStream"/>
            <javadoc line="267">
                An input stream that does nothing more than hold on to the NetworkClient
                  that created it.  This is used when only the input stream is needed, and
                  the network client needs to be closed when the input stream is closed.                
            </javadoc>
            <declaration name="parent" type="NetworkClient" line="273"/>
            <method name="GopherInputStream" type="constructor" line="274">
                <params>
                    <param name="o" type="NetworkClient"/>
                    <param name="fd" type="InputStream"/>
                </params>
            </method>
            <method name="close" type="void" line="278">
                <scope line="279"/>
                <scope line="283"/>
            </method>
        </class>
    </source>