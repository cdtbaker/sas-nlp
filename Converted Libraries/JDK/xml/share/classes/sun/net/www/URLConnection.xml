<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www">
        <import package="java.net.URL"/>
        <import package="java.net.ContentHandler"/>
        <import package="java.util"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.net.UnknownServiceException"/>
        <class name="URLConnection" line="9">
            <extends class="java.net.URLConnection"/>
            <javadoc line="9">
                A class to represent an active connection to an object
                  represented by a URL.                
                <author>
                    James Gosling                    
                </author>
            </javadoc>
            <declaration name="contentType" type="String" line="15"/>
            <javadoc line="15">
                The URL that it is connected to                
            </javadoc>
            <declaration name="contentLength" type="int" line="19"/>
            <declaration name="properties" type="MessageHeader" line="20"/>
            <javadoc line="21">
                Create a URLConnection object.  These should not be created directly:
                  instead they should be created by protocol handers in response to
                  URL.openConnection.                
                <param>
                    u       The URL that this connects to.                    
                </param>
            </javadoc>
            <method name="URLConnection" type="constructor" line="27">
                <params>
                    <param name="u" type="URL"/>
                </params>
            </method>
            <javadoc line="31">
                Call this routine to get the property list for this object.
                  Properties (like content-type) that have explicit getXX() methods
                  associated with them should be accessed using those methods.                
            </javadoc>
            <method name="getProperties" type="MessageHeader" line="36"/>
            <javadoc line="39">
                Call this routine to set the property list for this object.                
            </javadoc>
            <method name="setProperties" type="void" line="42">
                <params>
                    <param name="properties" type="MessageHeader"/>
                </params>
            </method>
            <method name="setRequestProperty" type="void" line="45">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="50">
                The following three methods addRequestProperty, getRequestProperty,
                  and getRequestProperties were copied from the superclass implementation
                  before it was changed by CR:6230836, to maintain backward compatibility.                
            </javadoc>
            <method name="addRequestProperty" type="void" line="55">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="getRequestProperty" type="String" line="59">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="getRequestProperties" type="Map&lt;String,List&lt;String&gt;&gt;" line="63"/>
            <method name="getHeaderField" type="String" line="67">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="68"/>
                <scope line="71"/>
            </method>
            <javadoc line="76">
                Return the key for the nth header field. Returns null if
                  there are fewer than n fields.  This can be used to iterate
                  through all the headers in the message.                
            </javadoc>
            <method name="getHeaderFieldKey" type="String" line="81">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="82"/>
                <scope line="85"/>
                <declaration name="props" type="MessageHeader" line="88"/>
            </method>
            <javadoc line="91">
                Return the value for the nth header field. Returns null if
                  there are fewer than n fields.  This can be used in conjunction
                  with getHeaderFieldKey to iterate through all the headers in the message.                
            </javadoc>
            <method name="getHeaderField" type="String" line="96">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="97"/>
                <scope line="100"/>
                <declaration name="props" type="MessageHeader" line="103"/>
            </method>
            <javadoc line="106">
                Call this routine to get the content-type associated with this
                  object.                
            </javadoc>
            <method name="getContentType" type="String" line="110">
                <scope line="112">
                    <declaration name="ct" type="String" line="113"/>
                    <scope line="114"/>
                    <scope line="117"/>
                    <declaration name="ce" type="String" line="119"/>
                    <scope line="120"/>
                </scope>
            </method>
            <javadoc line="130">
                Set the content type of this URL to a specific value.                
                <param>
                    type    The content type to use.  One of the
                      content_ static variables in this
                      class should be used.
                      eg. setType(URL.content_html);                    
                </param>
            </javadoc>
            <method name="setContentType" type="void" line="137">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="141">
                Call this routine to get the content-length associated with this
                  object.                
            </javadoc>
            <method name="getContentLength" type="int" line="145">
                <scope line="146"/>
                <scope line="149"/>
                <declaration name="l" type="int" line="152"/>
                <scope line="153">
                    <scope line="154"/>
                    <scope line="158"/>
                </scope>
            </method>
            <javadoc line="163">
                Call this routine to set the content-length associated with this
                  object.                
            </javadoc>
            <method name="setContentLength" type="void" line="167">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="171">
                Returns true if the data associated with this URL can be cached.                
            </javadoc>
            <method name="canCache" type="boolean" line="174"/>
            <javadoc line="177">
                Call this to close the connection and flush any remaining data.
                  Overriders must remember to call super.close()                
            </javadoc>
            <method name="close" type="void" line="181"/>
            <declaration name="proxiedHosts" type="HashMap&amp;lt;String,Void&amp;gt;" line="184"/>
            <method name="setProxiedHost" type="void" line="185">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
            <method name="isProxiedHost" type="boolean" line="188">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
        </class>
    </source>