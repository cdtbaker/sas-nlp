<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www">
        <import package="java.net.URL"/>
        <import package="java.net.ContentHandler"/>
        <import package="java.util"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.net.UnknownServiceException"/>
        <class name="URLConnection" line="36">
            <extends class="java.net.URLConnection"/>
            <javadoc line="36">
                A class to represent an active connection to an object
                  represented by a URL.                
                <author>
                    James Gosling                    
                </author>
            </javadoc>
            <declaration name="contentType" type="String" line="44"/>
            <javadoc line="44">
                The URL that it is connected to                
            </javadoc>
            <declaration name="contentLength" type="int" line="47"/>
            <declaration name="properties" type="MessageHeader" line="49"/>
            <javadoc line="51">
                Create a URLConnection object.  These should not be created directly:
                  instead they should be created by protocol handers in response to
                  URL.openConnection.                
                <param>
                    u       The URL that this connects to.                    
                </param>
            </javadoc>
            <method name="URLConnection" type="constructor" line="56">
                <params>
                    <param name="u" type="URL"/>
                </params>
            </method>
            <javadoc line="61">
                Call this routine to get the property list for this object.
                  Properties (like content-type) that have explicit getXX() methods
                  associated with them should be accessed using those methods.                
            </javadoc>
            <method name="getProperties" type="MessageHeader" line="64"/>
            <javadoc line="68">
                Call this routine to set the property list for this object.                
            </javadoc>
            <method name="setProperties" type="void" line="69">
                <params>
                    <param name="properties" type="MessageHeader"/>
                </params>
            </method>
            <method name="setRequestProperty" type="void" line="73">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="81">
                The following three methods addRequestProperty, getRequestProperty,
                  and getRequestProperties were copied from the superclass implementation
                  before it was changed by CR:6230836, to maintain backward compatibility.                
            </javadoc>
            <method name="addRequestProperty" type="void" line="86">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="getRequestProperty" type="String" line="93">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="getRequestProperties" type="Map<String,List<String>>" line="99"/>
            <method name="getHeaderField" type="String" line="105">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="106"/>
                <scope line="108"/>
            </method>
            <javadoc line="114">
                Return the key for the nth header field. Returns null if
                  there are fewer than n fields.  This can be used to iterate
                  through all the headers in the message.                
            </javadoc>
            <method name="getHeaderFieldKey" type="String" line="119">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="120"/>
                <scope line="122"/>
                <declaration name="props" type="MessageHeader" line="125"/>
            </method>
            <javadoc line="129">
                Return the value for the nth header field. Returns null if
                  there are fewer than n fields.  This can be used in conjunction
                  with getHeaderFieldKey to iterate through all the headers in the message.                
            </javadoc>
            <method name="getHeaderField" type="String" line="134">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="135"/>
                <scope line="137"/>
                <declaration name="props" type="MessageHeader" line="140"/>
            </method>
            <javadoc line="144">
                Call this routine to get the content-type associated with this
                  object.                
            </javadoc>
            <method name="getContentType" type="String" line="147">
                <comment line="168">
                    If the Mime header had a Content-encoding field and its value
                     was not one of the values that essentially indicate no
                     encoding, we force the content type to be unknown. This will
                     cause a save dialog to be presented to the user.  It is not
                     ideal but is better than what we were previously doing, namely
                     bringing up an image tool for compressed tar files.                    
                </comment>
                <scope line="150">
                    <declaration name="ct" type="String" line="151"/>
                    <scope line="152"/>
                    <scope line="154"/>
                    <declaration name="ce" type="String" line="156"/>
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="186">
                Set the content type of this URL to a specific value.                
                <param>
                    type    The content type to use.  One of the
                      content_ static variables in this
                      class should be used.
                      eg. setType(URL.content_html);                    
                </param>
            </javadoc>
            <method name="setContentType" type="void" line="193">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="198">
                Call this routine to get the content-length associated with this
                  object.                
            </javadoc>
            <method name="getContentLength" type="int" line="201">
                <scope line="202"/>
                <scope line="204"/>
                <declaration name="l" type="int" line="207"/>
                <scope line="208">
                    <scope line="209"/>
                    <scope line="212"/>
                </scope>
            </method>
            <javadoc line="218">
                Call this routine to set the content-length associated with this
                  object.                
            </javadoc>
            <method name="setContentLength" type="void" line="221">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="226">
                Returns true if the data associated with this URL can be cached.                
            </javadoc>
            <method name="canCache" type="boolean" line="229">
                <comment line="231">
                    return url.getFile().indexOf(&apos;?&apos;) &lt; 0    &amp;&amp; url.postData == null                    
                </comment>
            </method>
            <javadoc line="234">
                Call this to close the connection and flush any remaining data.
                  Overriders must remember to call super.close()                
            </javadoc>
            <method name="close" type="void" line="238"/>
            <declaration name="proxiedHosts" type="HashMap&lt;String,Void&gt;" line="242"/>
            <method name="setProxiedHost" type="void" line="244">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
            <method name="isProxiedHost" type="boolean" line="248">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
        </class>
    </source>