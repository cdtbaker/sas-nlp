<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http">
        <import package="sun.net.www"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.HashMap"/>
        <class name="AuthenticationHeader" line="32">
            <comment line="82">
                the response to be parsed                
            </comment>
            <comment line="84">
                raw Strings                
            </comment>
            <comment line="85">
                un-schemed, need check                
            </comment>
            <comment line="87">
                When set true, do not use Negotiate even if the response                
            </comment>
            <comment line="88">
                headers suggest so.                
            </comment>
            <comment line="114">
                Name of the header to look for                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="142">
                Iterate through each header line, and then within each line.
                 If multiple entries exist for a particular scheme (unlikely)
                 then the last one will be used. The
                 preferred scheme that we support will be used.                
            </comment>
            <comment line="247">
                                
            </comment>
            <javadoc line="32">
                This class is used to parse the information in WWW-Authenticate: and Proxy-Authenticate:
                  headers. It searches among multiple header lines and within each header line
                  for the best currently supported scheme. It can also return a HeaderParser
                  containing the challenge data for that particular scheme.
                  Some examples:
                  WWW-Authenticate: Basic realm=&quot;foo&quot; Digest realm=&quot;bar&quot; NTLM
                  Note the realm parameter must be associated with the particular scheme.
                  or
                  WWW-Authenticate: Basic realm=&quot;foo&quot;
                  WWW-Authenticate: Digest realm=&quot;foo&quot;,qop=&quot;auth&quot;,nonce=&quot;thisisanunlikelynonce&quot;
                  WWW-Authenticate: NTLM
                  or
                  WWW-Authenticate: Basic realm=&quot;foo&quot;
                  WWW-Authenticate: NTLM ASKAJK9893289889QWQIOIONMNMN
                  The last example shows how NTLM breaks the rules of rfc2617 for the structure of
                  the authentication header. This is the reason why the raw header field is used for ntlm.
                  At present, the class chooses schemes in following order :
                  1. Negotiate (if supported)
                  2. Kerberos (if supported)
                  3. Digest
                  4. NTLM (if supported)
                  5. Basic
                  This choice can be modified by setting a system property:
                  -Dhttp.auth.preference=&quot;scheme&quot;
                  which in this case, specifies that &quot;scheme&quot; should be used as the auth scheme when offered
                  disregarding the default prioritisation. If scheme is not offered then the default priority
                  is used.
                  Attention: when http.auth.preference is set as SPNEGO or Kerberos, it&apos;s actually &quot;Negotiate
                  with SPNEGO&quot; or &quot;Negotiate with Kerberos&quot;, which means the user will prefer the Negotiate
                  scheme with GSS/SPNEGO or GSS/Kerberos mechanism.
                  This also means that the real &quot;Kerberos&quot; scheme can never be set as a preference.                
            </javadoc>
            <declaration name="rsp" type="MessageHeader" line="81"/>
            <declaration name="preferred" type="HeaderParser" line="82"/>
            <declaration name="preferred_r" type="String" line="83"/>
            <declaration name="hci" type="HttpCallerInfo" line="84"/>
            <declaration name="dontUseNegotiate" type="boolean" line="88"/>
            <declaration name="authPref" type="String" line="89"/>
            <method name="toString" type="String" line="91"/>
            <scope line="95">
                <scope line="105">
                    <scope line="107"/>
                </scope>
            </scope>
            <declaration name="hdrname" type="String" line="113"/>
            <javadoc line="115">
                parse a set of authentication headers and choose the preferred scheme
                  that we support for a given host                
            </javadoc>
            <method name="AuthenticationHeader" type="constructor" line="120">
                <params>
                    <param name="hdrname" type="String"/>
                    <param name="response" type="MessageHeader"/>
                    <param name="hci" type="HttpCallerInfo"/>
                    <param name="dontUseNegotiate" type="boolean"/>
                </params>
            </method>
            <method name="getHttpCallerInfo" type="HttpCallerInfo" line="129"/>
            <class name="SchemeMapValue" line="133">
                <method name="SchemeMapValue" type="constructor" line="134">
                    <params>
                        <param name="h" type="HeaderParser"/>
                        <param name="r" type="String"/>
                    </params>
                </method>
                <declaration name="raw" type="String" line="135"/>
                <declaration name="parser" type="HeaderParser" line="136"/>
            </class>
            <declaration name="schemes" type="HashMap" line="139"/>
            <method name="parse" type="void" line="146">
                <comment line="155">
                                        
                </comment>
                <comment line="171">
                    choose the best of them, the order is
                     negotiate -&gt; kerberos -&gt; digest -&gt; ntlm -&gt; basic                    
                </comment>
                <comment line="190">
                    the Kerberos scheme is only observed in MS ISA Server. In                    
                </comment>
                <comment line="191">
                    fact i think it&apos;s a Kerberos-mechnism-only Negotiate.                    
                </comment>
                <comment line="192">
                    Since the Kerberos scheme is always accompanied with the                    
                </comment>
                <comment line="193">
                    Negotiate scheme, so it seems impossible to reach this                    
                </comment>
                <comment line="194">
                    line. Even if the user explicitly set http.auth.preference                    
                </comment>
                <comment line="195">
                    as Kerberos, it means Negotiate with Kerberos, and the code                    
                </comment>
                <comment line="196">
                    will still tried to use Negotiate at first.                    
                </comment>
                <comment line="197">
                                        
                </comment>
                <comment line="198">
                    The only chance this line get executed is that the server                    
                </comment>
                <comment line="199">
                    only suggest the Kerberos scheme.                    
                </comment>
                <comment line="214">
                    authPref != null &amp;&amp; it&apos;s found in reponses&apos;                    
                </comment>
                <declaration name="iter" type="Iterator" line="147"/>
                <scope line="148">
                    <declaration name="raw" type="String" line="149"/>
                    <declaration name="hp" type="HeaderParser" line="150"/>
                    <declaration name="keys" type="Iterator" line="151"/>
                    <declaration name="i" type="int" line="152"/>
                    <scope line="153">
                        <scope line="155">
                            <scope line="156">
                                <declaration name="hpn" type="HeaderParser" line="157"/>
                                <declaration name="scheme" type="String" line="158"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="164">
                        <declaration name="hpn" type="HeaderParser" line="165"/>
                        <declaration name="scheme" type="String" line="166"/>
                    </scope>
                </scope>
                <declaration name="v" type="SchemeMapValue" line="174"/>
                <scope line="175">
                    <scope line="177">
                        <declaration name="tmp" type="SchemeMapValue" line="178"/>
                        <scope line="179">
                            <scope line="180"/>
                        </scope>
                    </scope>
                    <scope line="187">
                        <declaration name="tmp" type="SchemeMapValue" line="188"/>
                        <scope line="189">
                            <scope line="200"/>
                        </scope>
                    </scope>
                    <scope line="207">
                        <scope line="208">
                            <scope line="209"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="214">
                    <scope line="215"/>
                </scope>
                <scope line="220"/>
            </method>
            <javadoc line="226">
                return a header parser containing the preferred authentication scheme (only).
                  The preferred scheme is the strongest of the schemes proposed by the server.
                  The returned HeaderParser will contain the relevant parameters for that scheme                
            </javadoc>
            <method name="headerParser" type="HeaderParser" line="231"/>
            <javadoc line="235">
                return the name of the preferred scheme                
            </javadoc>
            <method name="scheme" type="String" line="238">
                <scope line="239"/>
                <scope line="241"/>
            </method>
            <method name="raw" type="String" line="248"/>
            <javadoc line="252">
                returns true is the header exists and contains a recognised scheme                
            </javadoc>
            <method name="isPresent" type="boolean" line="255"/>
        </class>
    </source>