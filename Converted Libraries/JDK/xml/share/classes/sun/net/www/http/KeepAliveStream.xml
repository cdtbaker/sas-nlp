<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.http">
        <import package="java.io"/>
        <import package="sun.net.ProgressSource"/>
        <import package="sun.net.www.MeteredStream"/>
        <class name="KeepAliveStream" line="32">
            <extends class="MeteredStream"/>
            <comment line="43">
                instance variables                
            </comment>
            <comment line="48">
                has this KeepAliveStream been put on the queue for asynchronous cleanup.                
            </comment>
            <comment line="52">
                null                
            </comment>
            <comment line="117">
                                
            </comment>
            <implements interface="Hurryable"/>
            <javadoc line="32">
                A stream that has the property of being able to be kept alive for
                  multiple downloads from the same server.                
                <author>
                    Stephen R. Pietrowicz (NCSA)                    
                </author>
                <author>
                    Dave Brown                    
                </author>
            </javadoc>
            <declaration name="hc" type="HttpClient" line="43"/>
            <declaration name="hurried" type="boolean" line="45"/>
            <declaration name="queuedForCleanup" type="boolean" line="48"/>
            <declaration name="queue" type="KeepAliveStreamCleaner" line="50"/>
            <declaration name="cleanerThread" type="Thread" line="51"/>
            <javadoc line="53">
                Constructor                
            </javadoc>
            <method name="KeepAliveStream" type="constructor" line="56">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="pi" type="ProgressSource"/>
                    <param name="expected" type="long"/>
                    <param name="hc" type="HttpClient"/>
                </params>
            </method>
            <javadoc line="61">
                Attempt to cache this connection                
            </javadoc>
            <method name="close" type="void" line="64">
                <comment line="66">
                    If the inputstream is closed already, just return.                    
                </comment>
                <comment line="71">
                    If this stream has already been queued for cleanup.                    
                </comment>
                <comment line="76">
                    Skip past the data that&apos;s left in the Inputstream because
                     some sort of error may have occurred.
                     Do this ONLY if the skip won&apos;t block. The stream may have
                     been closed at the beginning of a big file and we don&apos;t want
                     to hang around for nothing. So if we can&apos;t skip without blocking
                     we just close the socket and, therefore, terminate the keepAlive
                     NOTE: Don&apos;t close super class                    
                </comment>
                <comment line="93">
                    put this KeepAliveStream on the queue so that the data remaining
                    on the socket can be cleanup asyncronously.                    
                </comment>
                <comment line="108">
                    nulling out the underlying inputstream as well as
                     httpClient to let gc collect the memories faster                    
                </comment>
                <scope line="66"/>
                <scope line="71"/>
                <scope line="82">
                    <scope line="83">
                        <declaration name="nskip" type="long" line="84"/>
                        <scope line="85">
                            <declaration name="n" type="long" line="86"/>
                            <scope line="87"/>
                        </scope>
                        <scope line="91"/>
                        <scope line="95"/>
                    </scope>
                    <scope line="99"/>
                </scope>
                <scope line="102">
                    <scope line="106"/>
                </scope>
            </method>
            <method name="markSupported" type="boolean" line="118"/>
            <method name="mark" type="void" line="122">
                <params>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="reset" type="void" line="124"/>
            <method name="hurry" type="boolean" line="128">
                <comment line="131">
                                        
                </comment>
                <comment line="135">
                                        
                </comment>
                <comment line="138">
                    CASE II: fill our internal buffer
                     Remind: possibly check memory here                    
                </comment>
                <comment line="150">
                    e.printStackTrace();                    
                </comment>
                <scope line="129">
                    <scope line="131"/>
                    <scope line="133"/>
                    <scope line="136">
                        <declaration name="size" type="int" line="140"/>
                        <declaration name="buf" type="byte[]" line="141"/>
                        <declaration name="dis" type="DataInputStream" line="142"/>
                    </scope>
                </scope>
                <scope line="148"/>
            </method>
            <method name="queueForCleanup" type="void" line="154">
                <params>
                    <param name="kace" type="KeepAliveCleanerEntry"/>
                </params>
                <comment line="178">
                    We want to create the Keep-Alive-SocketCleaner in the
                     system threadgroup                    
                </comment>
                <comment line="189">
                    Set the context class loader to null in order to avoid
                     keeping a strong reference to an application classloader.                    
                </comment>
                <comment line="197">
                    queue                    
                </comment>
                <scope line="155">
                    <scope line="156">
                        <scope line="157"/>
                    </scope>
                    <declaration name="startCleanupThread" type="boolean" line="166"/>
                    <scope line="167">
                        <scope line="168"/>
                    </scope>
                    <scope line="173">
                        <anonymous_class line="175">
                            <method name="run" type="Void" line="176">
                                <comment line="178">
                                    We want to create the Keep-Alive-SocketCleaner in the
                                     system threadgroup                                    
                                </comment>
                                <comment line="189">
                                    Set the context class loader to null in order to avoid
                                     keeping a strong reference to an application classloader.                                    
                                </comment>
                                <declaration name="grp" type="ThreadGroup" line="179"/>
                                <declaration name="parent" type="ThreadGroup" line="180"/>
                                <scope line="181"/>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <method name="remainingToRead" type="long" line="199"/>
            <method name="setClosed" type="void" line="203"/>
        </class>
        <class name="KeepAliveCleanerEntry" line="211">
            <comment line="43">
                instance variables                
            </comment>
            <comment line="48">
                has this KeepAliveStream been put on the queue for asynchronous cleanup.                
            </comment>
            <comment line="52">
                null                
            </comment>
            <comment line="117">
                                
            </comment>
            <declaration name="kas" type="KeepAliveStream" line="213"/>
            <declaration name="hc" type="HttpClient" line="214"/>
            <method name="KeepAliveCleanerEntry" type="constructor" line="216">
                <params>
                    <param name="kas" type="KeepAliveStream"/>
                    <param name="hc" type="HttpClient"/>
                </params>
            </method>
            <method name="getKeepAliveStream" type="KeepAliveStream" line="221"/>
            <method name="getHttpClient" type="HttpClient" line="225"/>
            <method name="setQueuedForCleanup" type="void" line="229"/>
            <method name="getQueuedForCleanup" type="boolean" line="233"/>
        </class>
    </source>