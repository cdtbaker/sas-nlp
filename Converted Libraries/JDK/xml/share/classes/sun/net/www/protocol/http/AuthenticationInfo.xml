<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.net.PasswordAuthentication"/>
        <import package="java.net.URL"/>
        <import package="java.util.HashMap"/>
        <import package="sun.net.www.HeaderParser"/>
        <class name="AuthenticationInfo" line="8">
            <extends class="AuthCacheValue"/>
            <implements interface="Cloneable"/>
            <javadoc line="8">
                AuthenticationInfo: Encapsulate the information needed to
                  authenticate a user to a server.                
                <author>
                    Jon Payne                    
                </author>
                <author>
                    Herb Jellinek                    
                </author>
                <author>
                    Bill Foote                    
                </author>
            </javadoc>
            <declaration name="SERVER_AUTHENTICATION" type="char" line="16"/>
            <declaration name="PROXY_AUTHENTICATION" type="char" line="17"/>
            <declaration name="serializeAuth" type="boolean" line="18"/>
            <javadoc line="18">
                If true, then simultaneous authentication requests to the same realm/proxy
                  are serialized, in order to avoid a user having to type the same username/passwords
                  repeatedly, via the Authenticator. Default is false, which means that this
                  behavior is switched off.                
            </javadoc>
            <scope line="25"/>
            <declaration name="pw" type="PasswordAuthentication" line="28"/>
            <method name="credentials" type="PasswordAuthentication" line="29"/>
            <method name="getAuthType" type="AuthCacheValue.Type" line="32"/>
            <method name="getAuthScheme" type="AuthScheme" line="35"/>
            <method name="getHost" type="String" line="38"/>
            <method name="getPort" type="int" line="41"/>
            <method name="getRealm" type="String" line="44"/>
            <method name="getPath" type="String" line="47"/>
            <method name="getProtocolScheme" type="String" line="50"/>
            <declaration name="requests" type="HashMap&lt;String,Thread&gt;" line="53"/>
            <javadoc line="53">
                requests is used to ensure that interaction with the
                  Authenticator for a particular realm is single threaded.
                  ie. if multiple threads need to get credentials from the user
                  at the same time, then all but the first will block until
                  the first completes its authentication.                
            </javadoc>
            <method name="requestIsInProgress" type="boolean" line="61">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="62"/>
                <scope line="65">
                    <declaration name="t" type="Thread" line="66"/>
                    <scope line="68"/>
                    <scope line="72"/>
                    <scope line="75">
                        <scope line="76"/>
                        <scope line="79"/>
                    </scope>
                </scope>
            </method>
            <method name="requestCompleted" type="void" line="85">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="86">
                    <declaration name="thread" type="Thread" line="87"/>
                    <scope line="88">
                        <declaration name="waspresent" type="boolean" line="89"/>
                        <declaration name="waspresent" type="assert" line="90"/>
                    </scope>
                </scope>
            </method>
            <declaration name="type" type="char" line="95"/>
            <javadoc line="95">
                The type (server/proxy) of authentication this is.  Used for key lookup                
            </javadoc>
            <declaration name="authScheme" type="AuthScheme" line="99"/>
            <javadoc line="99">
                The authentication scheme (basic/digest). Also used for key lookup                
            </javadoc>
            <declaration name="protocol" type="String" line="103"/>
            <javadoc line="103">
                The protocol/scheme (i.e. http or https ). Need to keep the caches
                  logically separate for the two protocols. This field is only used
                  when constructed with a URL (the normal case for server authentication)
                  For proxy authentication the protocol is not relevant.                
            </javadoc>
            <declaration name="host" type="String" line="110"/>
            <javadoc line="110">
                The host we&apos;re authenticating against.                
            </javadoc>
            <declaration name="port" type="int" line="114"/>
            <javadoc line="114">
                The port on the host we&apos;re authenticating against.                
            </javadoc>
            <declaration name="realm" type="String" line="118"/>
            <javadoc line="118">
                The realm we&apos;re authenticating against.                
            </javadoc>
            <declaration name="path" type="String" line="122"/>
            <javadoc line="122">
                The shortest path from the URL we authenticated against.                
            </javadoc>
            <javadoc line="126">
                Use this constructor only for proxy entries                
            </javadoc>
            <method name="AuthenticationInfo" type="constructor" line="129">
                <params>
                    <param name="type" type="char"/>
                    <param name="authScheme" type="AuthScheme"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="realm" type="String"/>
                </params>
            </method>
            <method name="clone" type="Object" line="138">
                <scope line="139"/>
                <scope line="142"/>
            </method>
            <method name="AuthenticationInfo" type="constructor" line="146">
                <params>
                    <param name="type" type="char"/>
                    <param name="authScheme" type="AuthScheme"/>
                    <param name="url" type="URL"/>
                    <param name="realm" type="String"/>
                </params>
                <scope line="152"/>
                <declaration name="urlPath" type="String" line="156"/>
                <scope line="158"/>
            </method>
            <method name="reducePath" type="String" line="162">
                <params>
                    <param name="urlPath" type="String"/>
                </params>
                <declaration name="sepIndex" type="int" line="163"/>
                <declaration name="targetSuffixIndex" type="int" line="164"/>
            </method>
            <javadoc line="169">
                Returns info for the URL, for an HTTP server auth.  Used when we
                  don&apos;t yet know the realm
                  (i.e. when we&apos;re preemptively setting the auth).                
            </javadoc>
            <method name="getServerAuth" type="AuthenticationInfo" line="174">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="port" type="int" line="175"/>
                <scope line="176"/>
                <declaration name="key" type="String" line="179"/>
            </method>
            <javadoc line="182">
                Returns info for the URL, for an HTTP server auth.  Used when we
                  do know the realm (i.e. when we&apos;re responding to a challenge).
                  In this case we do not use the path because the protection space
                  is identified by the host:port:realm only                
            </javadoc>
            <method name="getServerAuthKey" type="String" line="188">
                <params>
                    <param name="url" type="URL"/>
                    <param name="realm" type="String"/>
                    <param name="scheme" type="AuthScheme"/>
                </params>
                <declaration name="port" type="int" line="189"/>
                <scope line="190"/>
                <declaration name="key" type="String" line="193"/>
            </method>
            <method name="getServerAuth" type="AuthenticationInfo" line="196">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="cached" type="AuthenticationInfo" line="197"/>
                <scope line="198"/>
            </method>
            <javadoc line="203">
                Return the AuthenticationInfo object from the cache if it&apos;s path is
                  a substring of the supplied URLs path.                
            </javadoc>
            <method name="getAuth" type="AuthenticationInfo" line="207">
                <params>
                    <param name="key" type="String"/>
                    <param name="url" type="URL"/>
                </params>
                <scope line="208"/>
                <scope line="211"/>
            </method>
            <javadoc line="215">
                Returns a firewall authentication, for the given host/port.  Used
                  for preemptive header-setting. Note, the protocol field is always
                  blank for proxies.                
            </javadoc>
            <method name="getProxyAuth" type="AuthenticationInfo" line="220">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="key" type="String" line="221"/>
                <declaration name="result" type="AuthenticationInfo" line="222"/>
            </method>
            <javadoc line="225">
                Returns a firewall authentication, for the given host/port and realm.
                  Used in response to a challenge. Note, the protocol field is always
                  blank for proxies.                
            </javadoc>
            <method name="getProxyAuthKey" type="String" line="230">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="realm" type="String"/>
                    <param name="scheme" type="AuthScheme"/>
                </params>
                <declaration name="key" type="String" line="231"/>
            </method>
            <method name="getProxyAuth" type="AuthenticationInfo" line="234">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="cached" type="AuthenticationInfo" line="235"/>
                <scope line="236"/>
            </method>
            <javadoc line="241">
                Add this authentication to the cache                
            </javadoc>
            <method name="addToCache" type="void" line="244">
                <declaration name="key" type="String" line="245"/>
                <scope line="247"/>
            </method>
            <method name="endAuthRequest" type="void" line="252">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <javadoc line="260">
                Remove this authentication from the cache                
            </javadoc>
            <method name="removeFromCache" type="void" line="263">
                <scope line="265"/>
            </method>
            <method name="supportsPreemptiveAuthorization" type="boolean" line="269"/>
            <javadoc line="269">
                @return true if this authentication supports preemptive authorization                
            </javadoc>
            <javadoc line="273">
                @return the name of the HTTP header this authentication wants set.
                  This is used for preemptive authorization.                
            </javadoc>
            <method name="getHeaderName" type="String" line="277">
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <method name="getHeaderValue" type="String" line="285"/>
            <javadoc line="285">
                Calculates and returns the authentication header value based
                  on the stored authentication parameters. If the calculation does not depend
                  on the URL or the request method then these parameters are ignored.                
                <param>
                    url The URL                    
                </param>
                <param>
                    method The request method                    
                </param>
                <return>
                    the value of the HTTP header this authentication wants set.
                      Used for preemptive authorization.                    
                </return>
            </javadoc>
            <method name="setHeaders" type="boolean" line="295"/>
            <javadoc line="295">
                Set header(s) on the given connection.  Subclasses must override
                  This will only be called for
                  definitive (i.e. non-preemptive) authorization.                
                <param>
                    conn The connection to apply the header(s) to                    
                </param>
                <param>
                    p A source of header values for this connection, if needed.                    
                </param>
                <param>
                    raw The raw header field (if needed)                    
                </param>
                <return>
                    true if all goes well, false if no headers were set.                    
                </return>
            </javadoc>
            <method name="isAuthorizationStale" type="boolean" line="305"/>
            <javadoc line="305">
                Check if the header indicates that the current auth. parameters are stale.
                  If so, then replace the relevant field with the new value
                  and return true. Otherwise return false.
                  returning true means the request can be retried with the same userid/password
                  returning false means we have to go back to the user to ask for a new
                  username password.                
            </javadoc>
            <javadoc line="314">
                Give a key for hash table lookups.                
                <param>
                    includeRealm if you want the realm considered.  Preemptively
                      setting an authorization is done before the realm is known.                    
                </param>
            </javadoc>
            <method name="cacheKey" type="String" line="319">
                <params>
                    <param name="includeRealm" type="boolean"/>
                </params>
                <scope line="320"/>
                <scope line="323"/>
            </method>
            <declaration name="s1" type="String" line="327"/>
            <method name="readObject" type="void" line="328">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="334">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
        </class>
    </source>