<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www">
        <import package="java.net.URL"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="sun.net.ProgressSource"/>
        <import package="sun.net.www.http.ChunkedInputStream"/>
        <class name="MeteredStream" line="35">
            <extends class="FilterInputStream"/>
            <comment line="38">
                Instance variables.                
            </comment>
            <comment line="39">
                if expected != -1, after we&apos;ve read &gt;= expected, we&apos;re &quot;closed&quot; and return -1
                 from subsequest read() &apos;s                
            </comment>
            <declaration name="closed" type="boolean" line="41"/>
            <declaration name="expected" type="long" line="42"/>
            <declaration name="count" type="long" line="43"/>
            <declaration name="markedCount" type="long" line="44"/>
            <declaration name="markLimit" type="int" line="45"/>
            <declaration name="pi" type="ProgressSource" line="46"/>
            <method name="MeteredStream" type="constructor" line="49">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="pi" type="ProgressSource"/>
                    <param name="expected" type="long"/>
                </params>
                <scope line="55"/>
            </method>
            <method name="justRead" type="void" line="60">
                <params>
                    <param name="n" type="long"/>
                </params>
                <comment line="63">
                    don&apos;t close automatically when mark is set and is valid;
                     cannot reset() after close()                    
                </comment>
                <comment line="75">
                    If read beyond the markLimit, invalidate the mark                    
                </comment>
                <comment line="89">
                    if expected length is known, we could determine if                    
                </comment>
                <comment line="90">
                    read overrun.                    
                </comment>
                <scope line="61">
                    <scope line="67"/>
                </scope>
                <scope line="78"/>
                <scope line="85"/>
                <scope line="91">
                    <scope line="92"/>
                </scope>
            </method>
            <javadoc line="98">
                Returns true if the mark is valid, false otherwise                
            </javadoc>
            <method name="isMarked" type="boolean" line="101">
                <comment line="107">
                    mark is set, but is not valid anymore                    
                </comment>
                <comment line="112">
                    mark still holds                    
                </comment>
                <scope line="103"/>
                <scope line="108"/>
            </method>
            <method name="read" type="int" line="116">
                <scope line="117"/>
                <declaration name="c" type="int" line="120"/>
                <scope line="121"/>
                <scope line="123"/>
            </method>
            <method name="read" type="int" line="130">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="131"/>
                <declaration name="n" type="int" line="134"/>
            </method>
            <method name="skip" type="long" line="139">
                <params>
                    <param name="n" type="long"/>
                </params>
                <comment line="141">
                    REMIND: what does skip do on EOF????                    
                </comment>
                <comment line="150">
                    just skip min(n, num_bytes_left)                    
                </comment>
                <scope line="142"/>
                <scope line="146"/>
                <scope line="149">
                    <declaration name="min" type="long" line="151"/>
                </scope>
            </method>
            <method name="close" type="void" line="158">
                <scope line="159"/>
            </method>
            <method name="available" type="int" line="169"/>
            <method name="mark" type="void" line="173">
                <params>
                    <param name="readLimit" type="int"/>
                </params>
                <comment line="179">
                    mark the count to restore upon reset                    
                </comment>
                <scope line="174"/>
            </method>
            <method name="reset" type="void" line="186">
                <scope line="187"/>
                <scope line="191"/>
            </method>
            <method name="markSupported" type="boolean" line="199">
                <scope line="200"/>
            </method>
            <method name="finalize" type="void" line="206">
                <comment line="213">
                    Call super class                    
                </comment>
                <scope line="207"/>
                <scope line="212"/>
            </method>
        </class>
    </source>