<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http">
        <import package="java.net.URL"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="java.net.PasswordAuthentication"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="sun.net.www.HeaderParser"/>
        <import package="sun.misc.BASE64Encoder"/>
        <class name="BasicAuthentication" line="37">
            <extends class="AuthenticationInfo"/>
            <comment line="206">
                                
            </comment>
            <javadoc line="37">
                BasicAuthentication: Encapsulate an http server authentication using
                  the &quot;basic&quot; scheme.                
                <author>
                    Bill Foote                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <declaration name="auth" type="String" line="49"/>
            <javadoc line="49">
                The authentication string for this host, port, and realm.  This is
                  a simple BASE64 encoding of &quot;login:password&quot;.                
            </javadoc>
            <javadoc line="53">
                Create a BasicAuthentication                
            </javadoc>
            <method name="BasicAuthentication" type="constructor" line="57">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="realm" type="String"/>
                    <param name="pw" type="PasswordAuthentication"/>
                </params>
                <comment line="68">
                    get password bytes                    
                </comment>
                <comment line="74">
                    concatenate user name and password bytes and encode them                    
                </comment>
                <declaration name="plain" type="String" line="60"/>
                <declaration name="nameBytes" type="byte[]" line="61"/>
                <scope line="62"/>
                <scope line="64"/>
                <declaration name="passwd" type="char[]" line="69"/>
                <declaration name="passwdBytes" type="byte[]" line="70"/>
                <declaration name="concat" type="byte[]" line="75"/>
            </method>
            <javadoc line="83">
                Create a BasicAuthentication                
            </javadoc>
            <method name="BasicAuthentication" type="constructor" line="87">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="realm" type="String"/>
                    <param name="auth" type="String"/>
                </params>
            </method>
            <javadoc line="93">
                Create a BasicAuthentication                
            </javadoc>
            <method name="BasicAuthentication" type="constructor" line="97">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="url" type="URL"/>
                    <param name="realm" type="String"/>
                    <param name="pw" type="PasswordAuthentication"/>
                </params>
                <comment line="108">
                    get password bytes                    
                </comment>
                <comment line="114">
                    concatenate user name and password bytes and encode them                    
                </comment>
                <declaration name="plain" type="String" line="100"/>
                <declaration name="nameBytes" type="byte[]" line="101"/>
                <scope line="102"/>
                <scope line="104"/>
                <declaration name="passwd" type="char[]" line="109"/>
                <declaration name="passwdBytes" type="byte[]" line="110"/>
                <declaration name="concat" type="byte[]" line="115"/>
            </method>
            <javadoc line="123">
                Create a BasicAuthentication                
            </javadoc>
            <method name="BasicAuthentication" type="constructor" line="127">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="url" type="URL"/>
                    <param name="realm" type="String"/>
                    <param name="auth" type="String"/>
                </params>
            </method>
            <javadoc line="133">
                @return true if this authentication supports preemptive authorization                
            </javadoc>
            <method name="supportsPreemptiveAuthorization" type="boolean" line="137"/>
            <javadoc line="141">
                Set header(s) on the given connection. This will only be called for
                  definitive (i.e. non-preemptive) authorization.                
                <param>
                    conn The connection to apply the header(s) to                    
                </param>
                <param>
                    p A source of header values for this connection, if needed.                    
                </param>
                <param>
                    raw The raw header values for this connection, if needed.                    
                </param>
                <return>
                    true if all goes well, false if no headers were set.                    
                </return>
            </javadoc>
            <method name="setHeaders" type="boolean" line="150">
                <params>
                    <param name="conn" type="HttpURLConnection"/>
                    <param name="p" type="HeaderParser"/>
                    <param name="raw" type="String"/>
                </params>
            </method>
            <javadoc line="155">
                @return the value of the HTTP header this authentication wants set                
            </javadoc>
            <method name="getHeaderValue" type="String" line="159">
                <params>
                    <param name="url" type="URL"/>
                    <param name="method" type="String"/>
                </params>
                <comment line="160">
                    For Basic the authorization string does not depend on the request URL
                     or the request method                    
                </comment>
            </method>
            <javadoc line="166">
                For Basic Authentication, the security parameters can never be stale.
                  In other words there is no possibility to reuse the credentials.
                  They are always either valid or invalid.                
            </javadoc>
            <method name="isAuthorizationStale" type="boolean" line="172">
                <params>
                    <param name="header" type="String"/>
                </params>
            </method>
            <javadoc line="176">
                @return the common root path between npath and path.
                  This is used to detect when we have an authentication for two
                  paths and the root of th authentication space is the common root.                
            </javadoc>
            <method name="getRootPath" type="String" line="182">
                <params>
                    <param name="npath" type="String"/>
                    <param name="opath" type="String"/>
                </params>
                <comment line="186">
                                        
                </comment>
                <comment line="191">
                                        
                </comment>
                <comment line="201">
                                        
                </comment>
                <declaration name="index" type="int" line="183"/>
                <declaration name="toindex" type="int" line="184"/>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="194"/>
            </method>
            <class name="BasicBASE64Encoder" line="206">
                <extends class="BASE64Encoder"/>
                <method name="bytesPerLine" type="int" line="208"/>
            </class>
        </class>
    </source>