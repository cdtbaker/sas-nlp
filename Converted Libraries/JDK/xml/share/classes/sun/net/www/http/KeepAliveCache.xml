<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.http">
        <import package="java.io.IOException"/>
        <import package="java.io.NotSerializableException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.net.URL"/>
        <class name="KeepAliveCache" line="34">
            <extends class="HashMap">
                <type_params>
                    <type_param name="KeepAliveKey"/>
                    <type_param name="ClientVector"/>
                </type_params>
            </extends>
            <comment line="46">
                maximum # keep-alive connections to maintain at once
                 This should be 2 by the HTTP spec, but because we don&apos;t support pipe-lining
                 a larger value is more appropriate. So we now set a default of 5, and the value
                 refers to the number of idle connections per destination (in the cache) only.
                 It can be reset by setting system property &quot;http.maxConnections&quot;.                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="145">
                called by a clientVector thread when all its connections have timed out
                 and that vector of connections should be removed.                
            </comment>
            <comment line="165">
                Sleeps for an alloted timeout, then checks for timed out connections.
                 Errs on the side of caution (leave connections idle for a relatively
                 short time).                
            </comment>
            <comment line="222">
                Do not serialize this class!                
            </comment>
            <comment line="244">
                sleep time in milliseconds, before cache clear                
            </comment>
            <comment line="272">
                                
            </comment>
            <comment line="281">
                Do not serialize this class!                
            </comment>
            <comment line="300">
                additional key, such as socketfactory                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="34">
                A class that implements a cache of idle Http connections for keep-alive                
                <author>
                    Stephen R. Pietrowicz (NCSA)                    
                </author>
                <author>
                    Dave Brown                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <declaration name="MAX_CONNECTIONS" type="int" line="51"/>
            <declaration name="result" type="int" line="52"/>
            <method name="getMaxConnections" type="int" line="53">
                <scope line="54"/>
            </method>
            <declaration name="LIFETIME" type="int" line="65"/>
            <declaration name="keepAliveTimer" type="Thread" line="67"/>
            <javadoc line="69">
                Constructor                
            </javadoc>
            <method name="KeepAliveCache" type="constructor" line="72"/>
            <javadoc line="74">
                Register this URL and HttpClient (that supports keep-alive) with the cache                
                <param>
                    url  The URL contains info about the host and port                    
                </param>
                <param>
                    http The HttpClient to be cached                    
                </param>
            </javadoc>
            <method name="put" type="void" line="79">
                <params>
                    <param name="url" type="URL"/>
                    <param name="obj" type="Object"/>
                    <param name="http" type="HttpClient"/>
                </params>
                <comment line="88">
                    Unfortunately, we can&apos;t always believe the keep-alive timeout we got
                     back from the server.  If I&apos;m connected through a Netscape proxy
                     to a server that sent me a keep-alive
                     time of 15 sec, the proxy unilaterally terminates my connection
                     The robustness to get around this is in HttpClient.parseHTTP()                    
                </comment>
                <comment line="98">
                    We want to create the Keep-Alive-Timer in the                    
                </comment>
                <comment line="99">
                    system threadgroup                    
                </comment>
                <comment line="109">
                    Set the context class loader to null in order to avoid                    
                </comment>
                <comment line="110">
                    keeping a strong reference to an application classloader.                    
                </comment>
                <declaration name="startThread" type="boolean" line="80"/>
                <scope line="81">
                    <scope line="82"/>
                </scope>
                <scope line="86">
                    <declaration name="cache" type="KeepAliveCache" line="94"/>
                    <anonymous_class line="96">
                        <method name="run" type="Void" line="97">
                            <comment line="98">
                                We want to create the Keep-Alive-Timer in the                                
                            </comment>
                            <comment line="99">
                                system threadgroup                                
                            </comment>
                            <comment line="109">
                                Set the context class loader to null in order to avoid                                
                            </comment>
                            <comment line="110">
                                keeping a strong reference to an application classloader.                                
                            </comment>
                            <declaration name="grp" type="ThreadGroup" line="100"/>
                            <declaration name="parent" type="ThreadGroup" line="101"/>
                            <scope line="102"/>
                        </method>
                    </anonymous_class>
                </scope>
                <declaration name="key" type="KeepAliveKey" line="118"/>
                <declaration name="v" type="ClientVector" line="119"/>
                <scope line="121">
                    <declaration name="keepAliveTimeout" type="int" line="122"/>
                </scope>
                <scope line="127"/>
            </method>
            <method name="remove" type="void" line="133">
                <params>
                    <param name="h" type="HttpClient"/>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="key" type="KeepAliveKey" line="134"/>
                <declaration name="v" type="ClientVector" line="135"/>
                <scope line="136">
                    <scope line="138"/>
                </scope>
            </method>
            <method name="removeVector" type="void" line="147">
                <params>
                    <param name="k" type="KeepAliveKey"/>
                </params>
            </method>
            <javadoc line="151">
                Check to see if this URL has a cached HttpClient                
            </javadoc>
            <method name="get" type="HttpClient" line="154">
                <params>
                    <param name="url" type="URL"/>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="158">
                    nothing in cache yet                    
                </comment>
                <declaration name="key" type="KeepAliveKey" line="156"/>
                <declaration name="v" type="ClientVector" line="157"/>
                <scope line="158"/>
            </method>
            <method name="run" type="void" line="169">
                <comment line="175">
                    Remove all unused HttpClients.  Starting from the
                     bottom of the stack (the least-recently used first).
                     REMIND: It&apos;d be nice to not remove all connections
                     that aren&apos;t presently in use.  One could have been added
                     a second ago that&apos;s still perfectly valid, and we&apos;re
                     needlessly axing it.  But it&apos;s not clear how to do this
                     cleanly, and doing it right may be more trouble than it&apos;s
                     worth.                    
                </comment>
                <scope line="170">
                    <scope line="171"/>
                    <scope line="173"/>
                    <scope line="174">
                        <declaration name="currentTime" type="long" line="185"/>
                        <declaration name="keysToRemove" type="ArrayList&lt;KeepAliveKey&gt;" line="187"/>
                        <scope line="190">
                            <declaration name="v" type="ClientVector" line="191"/>
                            <scope line="192">
                                <declaration name="i" type="int" line="193"/>
                                <scope line="195">
                                    <declaration name="e" type="KeepAliveEntry" line="196"/>
                                    <scope line="197">
                                        <declaration name="h" type="HttpClient" line="198"/>
                                    </scope>
                                    <scope line="200"/>
                                </scope>
                                <scope line="206"/>
                            </scope>
                        </scope>
                        <scope line="212"/>
                    </scope>
                </scope>
            </method>
            <method name="writeObject" type="void" line="225">
                <params>
                    <param name="stream" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="230">
                <params>
                    <param name="stream" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
        <class name="ClientVector" line="240">
            <extends class="java.util.Stack">
                <type_params>
                    <type_param name="KeepAliveEntry"/>
                </type_params>
            </extends>
            <comment line="46">
                maximum # keep-alive connections to maintain at once
                 This should be 2 by the HTTP spec, but because we don&apos;t support pipe-lining
                 a larger value is more appropriate. So we now set a default of 5, and the value
                 refers to the number of idle connections per destination (in the cache) only.
                 It can be reset by setting system property &quot;http.maxConnections&quot;.                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="145">
                called by a clientVector thread when all its connections have timed out
                 and that vector of connections should be removed.                
            </comment>
            <comment line="165">
                Sleeps for an alloted timeout, then checks for timed out connections.
                 Errs on the side of caution (leave connections idle for a relatively
                 short time).                
            </comment>
            <comment line="222">
                Do not serialize this class!                
            </comment>
            <comment line="244">
                sleep time in milliseconds, before cache clear                
            </comment>
            <comment line="272">
                                
            </comment>
            <comment line="281">
                Do not serialize this class!                
            </comment>
            <comment line="300">
                additional key, such as socketfactory                
            </comment>
            <declaration name="serialVersionUID" type="long" line="241"/>
            <declaration name="nap" type="int" line="244"/>
            <method name="ClientVector" type="constructor" line="248">
                <params>
                    <param name="nap" type="int"/>
                </params>
            </method>
            <method name="get" type="HttpClient" line="252">
                <comment line="256">
                    Loop until we find a connection that has not timed out                    
                </comment>
                <scope line="253"/>
                <scope line="255">
                    <declaration name="hc" type="HttpClient" line="257"/>
                    <declaration name="currentTime" type="long" line="258"/>
                    <scope line="259">
                        <declaration name="e" type="KeepAliveEntry" line="260"/>
                        <scope line="261"/>
                        <scope line="263"/>
                    </scope>
                </scope>
            </method>
            <method name="put" type="void" line="272">
                <params>
                    <param name="h" type="HttpClient"/>
                </params>
                <comment line="274">
                    otherwise the connection remains in limbo                    
                </comment>
                <scope line="273"/>
                <scope line="275"/>
            </method>
            <method name="writeObject" type="void" line="284">
                <params>
                    <param name="stream" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="289">
                <params>
                    <param name="stream" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
        <class name="KeepAliveKey" line="295">
            <comment line="46">
                maximum # keep-alive connections to maintain at once
                 This should be 2 by the HTTP spec, but because we don&apos;t support pipe-lining
                 a larger value is more appropriate. So we now set a default of 5, and the value
                 refers to the number of idle connections per destination (in the cache) only.
                 It can be reset by setting system property &quot;http.maxConnections&quot;.                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="145">
                called by a clientVector thread when all its connections have timed out
                 and that vector of connections should be removed.                
            </comment>
            <comment line="165">
                Sleeps for an alloted timeout, then checks for timed out connections.
                 Errs on the side of caution (leave connections idle for a relatively
                 short time).                
            </comment>
            <comment line="222">
                Do not serialize this class!                
            </comment>
            <comment line="244">
                sleep time in milliseconds, before cache clear                
            </comment>
            <comment line="272">
                                
            </comment>
            <comment line="281">
                Do not serialize this class!                
            </comment>
            <comment line="300">
                additional key, such as socketfactory                
            </comment>
            <declaration name="protocol" type="String" line="296"/>
            <declaration name="host" type="String" line="297"/>
            <declaration name="port" type="int" line="298"/>
            <declaration name="obj" type="Object" line="299"/>
            <javadoc line="301">
                Constructor                
                <param>
                    url the URL containing the protocol, host and port information                    
                </param>
            </javadoc>
            <method name="KeepAliveKey" type="constructor" line="306">
                <params>
                    <param name="url" type="URL"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="313">
                Determine whether or not two objects of this type are equal                
            </javadoc>
            <method name="equals" type="boolean" line="317">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="kae" type="KeepAliveKey" line="320"/>
            </method>
            <javadoc line="327">
                The hashCode() for this object is the string hashCode() of
                  concatenation of the protocol, host name and port.                
            </javadoc>
            <method name="hashCode" type="int" line="332">
                <declaration name="str" type="String" line="333"/>
            </method>
        </class>
        <class name="KeepAliveEntry" line="339">
            <comment line="46">
                maximum # keep-alive connections to maintain at once
                 This should be 2 by the HTTP spec, but because we don&apos;t support pipe-lining
                 a larger value is more appropriate. So we now set a default of 5, and the value
                 refers to the number of idle connections per destination (in the cache) only.
                 It can be reset by setting system property &quot;http.maxConnections&quot;.                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="145">
                called by a clientVector thread when all its connections have timed out
                 and that vector of connections should be removed.                
            </comment>
            <comment line="165">
                Sleeps for an alloted timeout, then checks for timed out connections.
                 Errs on the side of caution (leave connections idle for a relatively
                 short time).                
            </comment>
            <comment line="222">
                Do not serialize this class!                
            </comment>
            <comment line="244">
                sleep time in milliseconds, before cache clear                
            </comment>
            <comment line="272">
                                
            </comment>
            <comment line="281">
                Do not serialize this class!                
            </comment>
            <comment line="300">
                additional key, such as socketfactory                
            </comment>
            <declaration name="hc" type="HttpClient" line="340"/>
            <declaration name="idleStartTime" type="long" line="341"/>
            <method name="KeepAliveEntry" type="constructor" line="343">
                <params>
                    <param name="hc" type="HttpClient"/>
                    <param name="idleStartTime" type="long"/>
                </params>
            </method>
        </class>
    </source>