<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http">
        <import package="java.net.URL"/>
        <import package="java.io.IOException"/>
        <import package="java.net.Authenticator.RequestorType"/>
        <import package="java.util.HashMap"/>
        <import package="sun.net.www.HeaderParser"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.misc.BASE64Encoder"/>
        <import package="sun.net.www.protocol.http.AuthScheme.NEGOTIATE"/>
        <import package="sun.net.www.protocol.http.AuthScheme.KERBEROS"/>
        <class name="NegotiateAuthentication" line="11">
            <extends class="AuthenticationInfo"/>
            <javadoc line="11">
                NegotiateAuthentication:                
                <author>
                    weijun.wang@sun.com                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="17"/>
            <declaration name="hci" type="HttpCallerInfo" line="18"/>
            <declaration name="supported" type="HashMap&amp;lt;String,Boolean&amp;gt;" line="19"/>
            <declaration name="cache" type="HashMap&amp;lt;String,Negotiator&amp;gt;" line="20"/>
            <declaration name="negotiator" type="Negotiator" line="21"/>
            <javadoc line="22">
                Constructor used for both WWW and proxy entries.                
                <param>
                    hci a schemed object.                    
                </param>
            </javadoc>
            <method name="NegotiateAuthentication" type="constructor" line="26">
                <params>
                    <param name="hci" type="HttpCallerInfo"/>
                </params>
            </method>
            <javadoc line="30">
                @return true if this authentication supports preemptive authorization                
            </javadoc>
            <method name="supportsPreemptiveAuthorization" type="boolean" line="33"/>
            <javadoc line="36">
                Find out if the HttpCallerInfo supports Negotiate protocol. In order to
                  find out yes or no, an initialization of a Negotiator object against it
                  is tried. The generated object will be cached under the name of ths
                  hostname at a success try.&lt;br&gt;
                  If this method is called for the second time on an HttpCallerInfo with
                  the same hostname, the answer is retrieved from cache.                
                <return>
                    true if supported                    
                </return>
            </javadoc>
            <method name="isSupported" type="boolean" line="45">
                <params>
                    <param name="hci" type="HttpCallerInfo"/>
                </params>
                <scope line="46"/>
                <declaration name="hostname" type="String" line="50"/>
                <scope line="52"/>
                <declaration name="neg" type="Negotiator" line="55"/>
                <scope line="56"/>
                <scope line="61"/>
            </method>
            <javadoc line="66">
                Not supported. Must use the setHeaders() method                
            </javadoc>
            <method name="getHeaderValue" type="String" line="69">
                <params>
                    <param name="url" type="URL"/>
                    <param name="method" type="String"/>
                </params>
            </method>
            <javadoc line="72">
                Check if the header indicates that the current auth. parameters are stale.
                  If so, then replace the relevant field with the new value
                  and return true. Otherwise return false.
                  returning true means the request can be retried with the same userid/password
                  returning false means we have to go back to the user to ask for a new
                  username password.                
            </javadoc>
            <method name="isAuthorizationStale" type="boolean" line="80">
                <params>
                    <param name="header" type="String"/>
                </params>
            </method>
            <javadoc line="83">
                Set header(s) on the given connection.                
                <param>
                    conn The connection to apply the header(s) to                    
                </param>
                <param>
                    p A source of header values for this connection, not used because
                      HeaderParser converts the fields to lower case, use raw instead                    
                </param>
                <param>
                    raw The raw header field.                    
                </param>
                <return>
                    true if all goes well, false if no headers were set.                    
                </return>
            </javadoc>
            <method name="setHeaders" type="boolean" line="91">
                <params>
                    <param name="conn" type="HttpURLConnection"/>
                    <param name="p" type="HeaderParser"/>
                    <param name="raw" type="String"/>
                </params>
                <scope line="92">
                    <declaration name="response" type="String" line="93"/>
                    <declaration name="incoming" type="byte[]" line="94"/>
                    <declaration name="parts" type="String[]" line="95"/>
                    <scope line="96"/>
                </scope>
                <scope line="103"/>
            </method>
            <javadoc line="107">
                return the first token.                
                <returns>
                    the token                    
                </returns>
                <throws>
                    IOException if &lt;code&gt;Negotiator.getNegotiator()&lt;/code&gt; or
                      &lt;code&gt;Negotiator.firstToken()&lt;/code&gt; failed.                    
                </throws>
            </javadoc>
            <method name="firstToken" type="byte[]" line="113">
                <scope line="115">
                    <scope line="116">
                        <scope line="118"/>
                    </scope>
                </scope>
                <scope line="123">
                    <scope line="125">
                        <declaration name="ioe" type="IOException" line="126"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                return more tokens                
                <param>
                    token the token to be fed into &lt;code&gt;negotiator.nextToken()&lt;/code&gt;                    
                </param>
                <returns>
                    the token                    
                </returns>
                <throws>
                    IOException if &lt;code&gt;negotiator.nextToken()&lt;/code&gt; throws Exception.
                      May happen if the input token is invalid.                    
                </throws>
            </javadoc>
            <method name="nextToken" type="byte[]" line="139">
                <params>
                    <param name="token" type="byte[]"/>
                </params>
            </method>
            <class name="B64Encoder" line="142">
                <extends class="BASE64Encoder"/>
                <method name="bytesPerLine" type="int" line="143"/>
            </class>
        </class>
    </source>