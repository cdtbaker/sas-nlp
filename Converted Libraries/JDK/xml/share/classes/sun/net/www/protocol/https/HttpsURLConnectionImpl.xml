<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.https">
        <import package="java.net.URL"/>
        <import package="java.net.Proxy"/>
        <import package="java.net.ProtocolException"/>
        <import package="java.io"/>
        <import package="javax.net.ssl"/>
        <import package="java.security.Permission"/>
        <import package="java.security.Principal"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="sun.net.www.http.HttpClient"/>
        <class name="HttpsURLConnectionImpl" line="49">
            <extends class="javax.net.ssl.HttpsURLConnection"/>
            <comment line="66">
                For both copies of the file, uncomment one line and comment the                
            </comment>
            <comment line="67">
                other. The differences between the two copies are introduced for                
            </comment>
            <comment line="68">
                plugin, and it is marked as such.                
            </comment>
            <comment line="71">
                public class HttpsURLConnectionOldImpl                
            </comment>
            <comment line="72">
                extends com.sun.net.ssl.HttpsURLConnection {                
            </comment>
            <comment line="74">
                NOTE: made protected for plugin so that subclass can set it.                
            </comment>
            <comment line="77">
                For both copies of the file, uncomment one line and comment the other                
            </comment>
            <comment line="83">
                For both copies of the file, uncomment one line and comment the other                
            </comment>
            <comment line="90">
                NOTE: introduced for plugin                
            </comment>
            <comment line="91">
                subclass needs to overwrite this to set delegate to                
            </comment>
            <comment line="92">
                the appropriate delegatee                
            </comment>
            <comment line="239">
                Allowable inputoutput sequences:
                 [interpreted as POSTPUT]
                 - get output, [write output,] get input, [read input]
                 - get output, [write output]
                 [interpreted as GET]
                 - get input, [read input]
                 Disallowed:
                 - get input, [read input,] get output, [write output]                
            </comment>
            <comment line="362">
                We support JDK 1.2.x so we can&apos;t count on these from JDK 1.3.
                 We override and supply our own version.                
            </comment>
            <comment line="494">
                finalize (dispose) the delegated object.  Otherwise
                 sun.net.www.protocol.http.HttpURLConnection&apos;s finalize()
                 would have to be made public.                
            </comment>
            <javadoc line="49">
                A class to represent an HTTP connection to a remote object.
                  Ideally, this class should subclass and inherit the http handler
                  implementation, but it can&apos;t do so because that class have the
                  wrong Java Type.  Thus it uses the delegate (aka, the
                  Adapter/Wrapper design pattern) to reuse code from the http
                  handler.
                  Since it would use a delegate to access
                  sun.net.www.protocol.http.HttpURLConnection functionalities, it
                  needs to implement all public methods in it&apos;s super class and all
                  the way to Object.                
            </javadoc>
            <declaration name="delegate" type="DelegateHttpsURLConnection" line="74"/>
            <method name="HttpsURLConnectionImpl" type="constructor" line="77">
                <params>
                    <param name="u" type="URL"/>
                    <param name="handler" type="Handler"/>
                </params>
                <comment line="78">
                    HttpsURLConnectionOldImpl(URL u, Handler handler) throws IOException {                    
                </comment>
            </method>
            <method name="HttpsURLConnectionImpl" type="constructor" line="83">
                <params>
                    <param name="u" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="handler" type="Handler"/>
                </params>
                <comment line="84">
                    HttpsURLConnectionOldImpl(URL u, Proxy p, Handler handler) throws IOException {                    
                </comment>
            </method>
            <method name="HttpsURLConnectionImpl" type="constructor" line="92">
                <params>
                    <param name="u" type="URL"/>
                </params>
            </method>
            <javadoc line="96">
                Create a new HttpClient object, bypassing the cache of
                  HTTP client objects/connections.                
                <param>
                    url       the URL being accessed                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="102">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="106">
                Obtain a HttpClient object. Use the cached copy if specified.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="114">
                <params>
                    <param name="url" type="URL"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="118">
                Create a new HttpClient object, set up so that it uses
                  per-instance proxying to the given HTTP proxy.  This
                  bypasses the cache of HTTP client objects/connections.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="128">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                </params>
            </method>
            <javadoc line="132">
                Obtain a HttpClient object, set up so that it uses per-instance
                  proxying to the given HTTP proxy. Use the cached copy of HTTP
                  client objects/connections if specified.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="144">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="148">
                Implements the HTTP protocol handler&apos;s &quot;connect&quot; method,
                  establishing an SSL connection to the server as necessary.                
            </javadoc>
            <method name="connect" type="void" line="152"/>
            <javadoc line="156">
                Used by subclass to access &quot;connected&quot; variable.  Since we are
                  delegating the actual implementation to &quot;delegate&quot;, we need to
                  delegate the access of &quot;connected&quot; as well.                
            </javadoc>
            <method name="isConnected" type="boolean" line="161"/>
            <javadoc line="165">
                Used by subclass to access &quot;connected&quot; variable.  Since we are
                  delegating the actual implementation to &quot;delegate&quot;, we need to
                  delegate the access of &quot;connected&quot; as well.                
            </javadoc>
            <method name="setConnected" type="void" line="170">
                <params>
                    <param name="conn" type="boolean"/>
                </params>
            </method>
            <javadoc line="174">
                Returns the cipher suite in use on this connection.                
            </javadoc>
            <method name="getCipherSuite" type="String" line="177"/>
            <javadoc line="181">
                Returns the certificate chain the client sent to the
                  server, or null if the client did not authenticate.                
            </javadoc>
            <method name="getLocalCertificates" type="java.security.cert.Certificate[]" line="186"/>
            <javadoc line="190">
                Returns the server&apos;s certificate chain, or throws
                  SSLPeerUnverified Exception if
                  the server did not authenticate.                
            </javadoc>
            <method name="getServerCertificates" type="java.security.cert.Certificate[]" line="196"/>
            <javadoc line="200">
                Returns the server&apos;s X.509 certificate chain, or null if
                  the server did not authenticate.
                  NOTE: This method is not necessary for the version of this class
                  implementing javax.net.ssl.HttpsURLConnection, but provided for
                  compatibility with the com.sun.net.ssl.HttpsURLConnection version.                
            </javadoc>
            <method name="getServerCertificateChain" type="javax.security.cert.X509Certificate[]" line="208">
                <comment line="212">
                    this method does not throw an exception as declared in                    
                </comment>
                <comment line="213">
                    com.sun.net.ssl.HttpsURLConnection.                    
                </comment>
                <comment line="214">
                    Return null for compatibility.                    
                </comment>
                <scope line="209"/>
                <scope line="211"/>
            </method>
            <javadoc line="219">
                Returns the principal with which the server authenticated itself,
                  or throw a SSLPeerUnverifiedException if the server did not authenticate.                
            </javadoc>
            <method name="getPeerPrincipal" type="Principal" line="225"/>
            <javadoc line="229">
                Returns the principal the client sent to the
                  server, or null if the client did not authenticate.                
            </javadoc>
            <method name="getLocalPrincipal" type="Principal" line="234"/>
            <method name="getOutputStream" type="OutputStream" line="249"/>
            <method name="getInputStream" type="InputStream" line="253"/>
            <method name="getErrorStream" type="InputStream" line="257"/>
            <javadoc line="261">
                Disconnect from the server.                
            </javadoc>
            <method name="disconnect" type="void" line="264"/>
            <method name="usingProxy" type="boolean" line="268"/>
            <javadoc line="272">
                Returns an unmodifiable Map of the header fields.
                  The Map keys are Strings that represent the
                  response-header field names. Each Map value is an
                  unmodifiable List of Strings that represents
                  the corresponding field values.                
                <return>
                    a Map of header fields                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHeaderFields" type="Map<String,List<String>>" line="282"/>
            <javadoc line="286">
                Gets a header field by name. Returns null if not known.                
                <param>
                    name the name of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderField" type="String" line="290">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="294">
                Gets a header field by index. Returns null if not known.                
                <param>
                    n the index of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderField" type="String" line="298">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="302">
                Gets a header field by index. Returns null if not known.                
                <param>
                    n the index of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderFieldKey" type="String" line="306">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="310">
                Sets request property. If a property with the key already
                  exists, overwrite its value with the new value.                
                <param>
                    value the value to be set                    
                </param>
            </javadoc>
            <method name="setRequestProperty" type="void" line="315">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="319">
                Adds a general request property specified by a
                  key-value pair.  This method will not overwrite
                  existing values associated with the same key.                
                <param>
                    key     the keyword by which the request is known
                      (e.g., "<code>accept</code>").                    
                </param>
                <param>
                    value  the value associated with it.                    
                </param>
                <see>
                    #getRequestProperties(java.lang.String)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addRequestProperty" type="void" line="330">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="334">
                Overwrite super class method                
            </javadoc>
            <method name="getResponseCode" type="int" line="337"/>
            <method name="getRequestProperty" type="String" line="341">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="345">
                Returns an unmodifiable Map of general request
                  properties for this connection. The Map keys
                  are Strings that represent the request-header
                  field names. Each Map value is a unmodifiable List
                  of Strings that represents the corresponding
                  field values.                
                <return>
                    a Map of the general request properties for this connection.                    
                </return>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRequestProperties" type="Map<String,List<String>>" line="357"/>
            <method name="setInstanceFollowRedirects" type="void" line="365">
                <params>
                    <param name="shouldFollow" type="boolean"/>
                </params>
            </method>
            <method name="getInstanceFollowRedirects" type="boolean" line="369"/>
            <method name="setRequestMethod" type="void" line="373">
                <params>
                    <param name="method" type="String"/>
                </params>
            </method>
            <method name="getRequestMethod" type="String" line="377"/>
            <method name="getResponseMessage" type="String" line="381"/>
            <method name="getHeaderFieldDate" type="long" line="385">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="long"/>
                </params>
            </method>
            <method name="getPermission" type="Permission" line="389"/>
            <method name="getURL" type="URL" line="393"/>
            <method name="getContentLength" type="int" line="397"/>
            <method name="getContentLengthLong" type="long" line="401"/>
            <method name="getContentType" type="String" line="405"/>
            <method name="getContentEncoding" type="String" line="409"/>
            <method name="getExpiration" type="long" line="413"/>
            <method name="getDate" type="long" line="417"/>
            <method name="getLastModified" type="long" line="421"/>
            <method name="getHeaderFieldInt" type="int" line="425">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="int"/>
                </params>
            </method>
            <method name="getHeaderFieldLong" type="long" line="429">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="long"/>
                </params>
            </method>
            <method name="getContent" type="Object" line="433"/>
            <method name="getContent" type="Object" line="437">
                <params>
                    <param name="classes" type="Class[]"/>
                </params>
            </method>
            <method name="toString" type="String" line="441"/>
            <method name="setDoInput" type="void" line="445">
                <params>
                    <param name="doinput" type="boolean"/>
                </params>
            </method>
            <method name="getDoInput" type="boolean" line="449"/>
            <method name="setDoOutput" type="void" line="453">
                <params>
                    <param name="dooutput" type="boolean"/>
                </params>
            </method>
            <method name="getDoOutput" type="boolean" line="457"/>
            <method name="setAllowUserInteraction" type="void" line="461">
                <params>
                    <param name="allowuserinteraction" type="boolean"/>
                </params>
            </method>
            <method name="getAllowUserInteraction" type="boolean" line="465"/>
            <method name="setUseCaches" type="void" line="469">
                <params>
                    <param name="usecaches" type="boolean"/>
                </params>
            </method>
            <method name="getUseCaches" type="boolean" line="473"/>
            <method name="setIfModifiedSince" type="void" line="477">
                <params>
                    <param name="ifmodifiedsince" type="long"/>
                </params>
            </method>
            <method name="getIfModifiedSince" type="long" line="481"/>
            <method name="getDefaultUseCaches" type="boolean" line="485"/>
            <method name="setDefaultUseCaches" type="void" line="489">
                <params>
                    <param name="defaultusecaches" type="boolean"/>
                </params>
            </method>
            <method name="finalize" type="void" line="498"/>
            <method name="equals" type="boolean" line="502">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="506"/>
            <method name="setConnectTimeout" type="void" line="510">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="getConnectTimeout" type="int" line="514"/>
            <method name="setReadTimeout" type="void" line="518">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="getReadTimeout" type="int" line="522"/>
            <method name="setFixedLengthStreamingMode" type="void" line="526">
                <params>
                    <param name="contentLength" type="int"/>
                </params>
            </method>
            <method name="setFixedLengthStreamingMode" type="void" line="530">
                <params>
                    <param name="contentLength" type="long"/>
                </params>
            </method>
            <method name="setChunkedStreamingMode" type="void" line="534">
                <params>
                    <param name="chunklen" type="int"/>
                </params>
            </method>
        </class>
    </source>