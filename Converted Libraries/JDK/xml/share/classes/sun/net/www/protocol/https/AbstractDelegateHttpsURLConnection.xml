<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.https">
        <import package="java.net.URL"/>
        <import package="java.net.Proxy"/>
        <import package="java.net.SecureCacheResponse"/>
        <import package="java.security.Principal"/>
        <import package="java.io.IOException"/>
        <import package="java.util.List"/>
        <import package="javax.net.ssl.SSLPeerUnverifiedException"/>
        <import package="sun.net.www.http"/>
        <import package="sun.net.www.protocol.http.HttpURLConnection"/>
        <class name="AbstractDelegateHttpsURLConnection" line="11">
            <extends class="HttpURLConnection"/>
            <javadoc line="11">
                HTTPS URL connection support.
                  We need this delegate because HttpsURLConnection is a subclass of
                  java.net.HttpURLConnection. We will avoid copying over the code from
                  sun.net.www.protocol.http.HttpURLConnection by having this class                
            </javadoc>
            <method name="AbstractDelegateHttpsURLConnection" type="constructor" line="18">
                <params>
                    <param name="url" type="URL"/>
                    <param name="handler" type="sun.net.www.protocol.http.Handler"/>
                </params>
            </method>
            <method name="AbstractDelegateHttpsURLConnection" type="constructor" line="21">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="handler" type="sun.net.www.protocol.http.Handler"/>
                </params>
            </method>
            <method name="getSSLSocketFactory" type="javax.net.ssl.SSLSocketFactory" line="24"/>
            <method name="getHostnameVerifier" type="javax.net.ssl.HostnameVerifier" line="25"/>
            <javadoc line="26">
                Create a new HttpClient object, bypassing the cache of
                  HTTP client objects/connections.
                  Note: this method is changed from protected to public because
                  the com.sun.ssl.internal.www.protocol.https handler reuses this
                  class for its actual implemantation                
                <param>
                    url the URL being accessed                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="34">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="37">
                Obtain a HttpClient object. Use the cached copy if specified.
                  Note: this method is changed from protected to public because
                  the com.sun.ssl.internal.www.protocol.https handler reuses this
                  class for its actual implemantation                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="46">
                <params>
                    <param name="url" type="URL"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="50">
                Create a new HttpClient object, set up so that it uses
                  per-instance proxying to the given HTTP proxy.  This
                  bypasses the cache of HTTP client objects/connections.
                  Note: this method is changed from protected to public because
                  the com.sun.ssl.internal.www.protocol.https handler reuses this
                  class for its actual implemantation                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="61">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                </params>
            </method>
            <javadoc line="64">
                Obtain a HttpClient object, set up so that it uses per-instance
                  proxying to the given HTTP proxy. Use the cached copy of HTTP
                  client objects/connections if specified.
                  Note: this method is changed from protected to public because
                  the com.sun.ssl.internal.www.protocol.https handler reuses this
                  class for its actual implemantation                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="77">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
                <scope line="79"/>
            </method>
            <method name="proxiedConnect" type="void" line="84">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="89">
                Used by subclass to access &quot;connected&quot; variable.                
            </javadoc>
            <method name="isConnected" type="boolean" line="92"/>
            <javadoc line="95">
                Used by subclass to access &quot;connected&quot; variable.                
            </javadoc>
            <method name="setConnected" type="void" line="98">
                <params>
                    <param name="conn" type="boolean"/>
                </params>
            </method>
            <javadoc line="101">
                Implements the HTTP protocol handler&apos;s &quot;connect&quot; method,
                  establishing an SSL connection to the server as necessary.                
            </javadoc>
            <method name="connect" type="void" line="105">
                <scope line="108"/>
                <scope line="111"/>
            </method>
            <method name="getNewHttpClient" type="HttpClient" line="116">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="connectTimeout" type="int"/>
                </params>
            </method>
            <method name="getNewHttpClient" type="HttpClient" line="119">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="connectTimeout" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="122">
                Returns the cipher suite in use on this connection.                
            </javadoc>
            <method name="getCipherSuite" type="String" line="125">
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="136">
                Returns the certificate chain the client sent to the
                  server, or null if the client did not authenticate.                
            </javadoc>
            <method name="getLocalCertificates" type="java.security.cert.Certificate[]" line="140">
                <scope line="141">
                    <declaration name="l" type="List" line="142"/>
                    <scope line="143"/>
                    <scope line="146"/>
                </scope>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="157">
                Returns the server&apos;s certificate chain, or throws
                  SSLPeerUnverified Exception if
                  the server did not authenticate.                
            </javadoc>
            <method name="getServerCertificates" type="java.security.cert.Certificate[]" line="162">
                <scope line="163">
                    <declaration name="l" type="List" line="164"/>
                    <scope line="165"/>
                    <scope line="168"/>
                </scope>
                <scope line="172"/>
                <scope line="175"/>
            </method>
            <javadoc line="179">
                Returns the server&apos;s X.509 certificate chain, or null if
                  the server did not authenticate.                
            </javadoc>
            <method name="getServerCertificateChain" type="javax.security.cert.X509Certificate[]" line="183">
                <scope line="184"/>
                <scope line="187"/>
                <scope line="190"/>
            </method>
            <javadoc line="194">
                Returns the server&apos;s principal, or throws SSLPeerUnverifiedException
                  if the server did not authenticate.                
            </javadoc>
            <method name="getPeerPrincipal" type="Principal" line="198">
                <scope line="199"/>
                <scope line="202"/>
                <scope line="205"/>
            </method>
            <javadoc line="209">
                Returns the principal the client sent to the
                  server, or null if the client did not authenticate.                
            </javadoc>
            <method name="getLocalPrincipal" type="Principal" line="213">
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220"/>
            </method>
        </class>
    </source>