<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http.spnego">
        <import package="com.sun.security.jgss.ExtendedGSSContext"/>
        <import package="java.io.IOException"/>
        <import package="org.ietf.jgss.GSSContext"/>
        <import package="org.ietf.jgss.GSSException"/>
        <import package="org.ietf.jgss.GSSName"/>
        <import package="org.ietf.jgss.Oid"/>
        <import package="sun.net.www.protocol.http.HttpCallerInfo"/>
        <import package="sun.net.www.protocol.http.Negotiator"/>
        <import package="sun.security.jgss.GSSManagerImpl"/>
        <import package="sun.security.jgss.GSSUtil"/>
        <import package="sun.security.jgss.HttpCaller"/>
        <class name="NegotiatorImpl" line="13">
            <extends class="Negotiator"/>
            <javadoc line="13">
                This class encapsulates all JAAS and JGSS API calls in a separate class
                  outside NegotiateAuthentication.java so that J2SE build can go smoothly
                  without the presence of it.                
                <author>
                    weijun.wang@sun.com                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="21"/>
            <declaration name="context" type="GSSContext" line="22"/>
            <declaration name="oneToken" type="byte[]" line="23"/>
            <javadoc line="24">
                Initialize the object, which includes:&lt;ul&gt;
                  &lt;li&gt;Find out what GSS mechanism to use from the system property
                  &lt;code&gt;http.negotiate.mechanism.oid&lt;/code&gt;, defaults SPNEGO
                  &lt;li&gt;Creating the GSSName for the target host, &quot;HTTP/&quot;+hostname
                  &lt;li&gt;Creating GSSContext
                  &lt;li&gt;A first call to initSecContext&lt;/ul&gt;                
            </javadoc>
            <method name="init" type="void" line="32">
                <params>
                    <param name="hci" type="HttpCallerInfo"/>
                </params>
                <declaration name="oid" type="Oid" line="33"/>
                <scope line="34"/>
                <scope line="37">
                    <anonymous_class line="38">
                        <method name="run" type="String" line="39"/>
                    </anonymous_class>
                    <declaration name="pref" type="String" line="38"/>
                    <scope line="44"/>
                    <scope line="47"/>
                </scope>
                <declaration name="manager" type="GSSManagerImpl" line="51"/>
                <declaration name="peerName" type="String" line="52"/>
                <declaration name="serverName" type="GSSName" line="53"/>
                <scope line="55"/>
            </method>
            <javadoc line="60">
                Constructor                
                <throws>
                    java.io.IOException If negotiator cannot be constructed                    
                </throws>
            </javadoc>
            <method name="NegotiatorImpl" type="constructor" line="64">
                <params>
                    <param name="hci" type="HttpCallerInfo"/>
                </params>
                <scope line="65"/>
                <scope line="68">
                    <scope line="69"/>
                    <declaration name="ioe" type="IOException" line="73"/>
                </scope>
            </method>
            <javadoc line="78">
                Return the first token of GSS, in SPNEGO, it&apos;s called NegTokenInit                
                <return>
                    the first token                    
                </return>
            </javadoc>
            <method name="firstToken" type="byte[]" line="82"/>
            <javadoc line="85">
                Return the rest tokens of GSS, in SPNEGO, it&apos;s called NegTokenTarg                
                <param>
                    token the token received from server                    
                </param>
                <return>
                    the next token                    
                </return>
                <throws>
                    java.io.IOException if the token cannot be created successfully                    
                </throws>
            </javadoc>
            <method name="nextToken" type="byte[]" line="91">
                <params>
                    <param name="token" type="byte[]"/>
                </params>
                <scope line="92"/>
                <scope line="95">
                    <scope line="96"/>
                    <declaration name="ioe" type="IOException" line="100"/>
                </scope>
            </method>
        </class>
    </source>