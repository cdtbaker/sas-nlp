<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.ftp">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.FilterOutputStream"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.net.URL"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.net.InetSocketAddress"/>
        <import package="java.net.URI"/>
        <import package="java.net.Proxy"/>
        <import package="java.net.ProxySelector"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Iterator"/>
        <import package="java.security.Permission"/>
        <import package="sun.net.NetworkClient"/>
        <import package="sun.net.www.MessageHeader"/>
        <import package="sun.net.www.MeteredStream"/>
        <import package="sun.net.www.URLConnection"/>
        <import package="sun.net.www.protocol.http.HttpURLConnection"/>
        <import package="sun.net.ftp.FtpClient"/>
        <import package="sun.net.ftp.FtpProtocolException"/>
        <import package="sun.net.ProgressSource"/>
        <import package="sun.net.ProgressMonitor"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="FtpURLConnection" line="33">
            <extends class="URLConnection"/>
            <javadoc line="33">
                This class Opens an FTP input (or output) stream given a URL.
                  It works as a one shot FTP transfer :
                  &lt;UL&gt;
                  &lt;LI&gt;Login&lt;/LI&gt;
                  &lt;LI&gt;Get (or Put) the file&lt;/LI&gt;
                  &lt;LI&gt;Disconnect&lt;/LI&gt;
                  &lt;/UL&gt;
                  You should not have to use it directly in most cases because all will be handled
                  in a abstract layer. Here is an example of how to use the class :
                  &lt;P&gt;
                  &lt;code&gt;URL url = new URL(&quot;ftp://ftp.sun.com/pub/test.txt&quot;);&lt;p&gt;
                  UrlConnection con = url.openConnection();&lt;p&gt;
                  InputStream is = con.getInputStream();&lt;p&gt;
                  ...&lt;p&gt;
                  is.close();&lt;/code&gt;                
                <see>
                    sun.net.ftp.FtpClient                    
                </see>
            </javadoc>
            <declaration name="http" type="HttpURLConnection" line="52"/>
            <declaration name="instProxy" type="Proxy" line="53"/>
            <declaration name="is" type="InputStream" line="54"/>
            <declaration name="os" type="OutputStream" line="55"/>
            <declaration name="ftp" type="FtpClient" line="56"/>
            <declaration name="permission" type="Permission" line="57"/>
            <declaration name="password" type="String" line="58"/>
            <declaration name="user" type="String" line="59"/>
            <declaration name="host" type="String" line="60"/>
            <declaration name="pathname" type="String" line="61"/>
            <declaration name="filename" type="String" line="62"/>
            <declaration name="fullpath" type="String" line="63"/>
            <declaration name="port" type="int" line="64"/>
            <declaration name="NONE" type="int" line="65"/>
            <declaration name="ASCII" type="int" line="66"/>
            <declaration name="BIN" type="int" line="67"/>
            <declaration name="DIR" type="int" line="68"/>
            <declaration name="type" type="int" line="69"/>
            <declaration name="connectTimeout" type="int" line="70"/>
            <declaration name="readTimeout" type="int" line="71"/>
            <class name="FtpInputStream" line="72">
                <extends class="FilterInputStream"/>
                <javadoc line="72">
                    For FTP URLs we need to have a special InputStream because we
                      need to close 2 sockets after we&apos;re done with it :
                      - The Data socket (for the file).
                      - The command socket (FtpClient).
                      Since that&apos;s the only class that needs to see that, it is an inner class.                    
                </javadoc>
                <declaration name="ftp" type="FtpClient" line="80"/>
                <method name="FtpInputStream" type="constructor" line="81">
                    <params>
                        <param name="cl" type="FtpClient"/>
                        <param name="fd" type="InputStream"/>
                    </params>
                </method>
                <method name="close" type="void" line="85">
                    <scope line="87"/>
                </method>
            </class>
            <class name="FtpOutputStream" line="92">
                <extends class="FilterOutputStream"/>
                <javadoc line="92">
                    For FTP URLs we need to have a special OutputStream because we
                      need to close 2 sockets after we&apos;re done with it :
                      - The Data socket (for the file).
                      - The command socket (FtpClient).
                      Since that&apos;s the only class that needs to see that, it is an inner class.                    
                </javadoc>
                <declaration name="ftp" type="FtpClient" line="100"/>
                <method name="FtpOutputStream" type="constructor" line="101">
                    <params>
                        <param name="cl" type="FtpClient"/>
                        <param name="fd" type="OutputStream"/>
                    </params>
                </method>
                <method name="close" type="void" line="105">
                    <scope line="107"/>
                </method>
            </class>
            <javadoc line="112">
                Creates an FtpURLConnection from a URL.                
                <param>
                    url     The <code>URL</code> to retrieve or store.                    
                </param>
            </javadoc>
            <method name="FtpURLConnection" type="constructor" line="116">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="119">
                Same as FtpURLconnection(URL) with a per connection proxy specified                
            </javadoc>
            <method name="FtpURLConnection" type="constructor" line="122">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                </params>
                <declaration name="userInfo" type="String" line="127"/>
                <scope line="128">
                    <declaration name="delimiter" type="int" line="129"/>
                    <scope line="130"/>
                    <scope line="134"/>
                </scope>
            </method>
            <method name="setTimeouts" type="void" line="140">
                <scope line="141">
                    <scope line="142"/>
                    <scope line="145"/>
                </scope>
            </method>
            <javadoc line="150">
                Connects to the FTP server and logs in.                
                <throws>
                    FtpLoginException if the login is unsuccessful                    
                </throws>
                <throws>
                    FtpProtocolException if an error occurs                    
                </throws>
                <throws>
                    UnknownHostException if trying to connect to an unknown host                    
                </throws>
            </javadoc>
            <method name="connect" type="void" line="156">
                <scope line="157"/>
                <declaration name="p" type="Proxy" line="160"/>
                <scope line="161">
                    <anonymous_class line="162">
                        <method name="run" type="ProxySelector" line="163"/>
                    </anonymous_class>
                    <declaration name="sel" type="ProxySelector" line="162"/>
                    <scope line="168">
                        <declaration name="uri" type="URI" line="169"/>
                        <declaration name="it" type="Iterator&lt;Proxy&gt;" line="170"/>
                        <scope line="171">
                            <scope line="173"/>
                            <scope line="176"/>
                            <declaration name="paddr" type="InetSocketAddress" line="180"/>
                            <scope line="181">
                                <scope line="185"/>
                                <scope line="188"/>
                            </scope>
                            <scope line="195"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="202">
                    <scope line="204">
                        <scope line="208"/>
                        <scope line="211"/>
                    </scope>
                </scope>
                <scope line="219">
                    <declaration name="vers" type="String" line="221"/>
                </scope>
                <scope line="224">
                    <scope line="226"/>
                    <scope line="230"/>
                    <scope line="233"/>
                </scope>
                <scope line="237"/>
                <scope line="240"/>
                <scope line="243"/>
                <scope line="246"/>
            </method>
            <method name="decodePath" type="void" line="252">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="i" type="int" line="253"/>
                <scope line="254">
                    <declaration name="s1" type="String" line="255"/>
                    <scope line="256"/>
                    <scope line="259"/>
                    <scope line="262"/>
                </scope>
                <scope line="267"/>
                <scope line="270"/>
                <scope line="273">
                    <scope line="275"/>
                    <scope line="280"/>
                </scope>
                <scope line="285"/>
                <scope line="289"/>
                <scope line="292"/>
            </method>
            <method name="cd" type="void" line="296">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="297"/>
                <scope line="300"/>
                <declaration name="token" type="StringTokenizer" line="304"/>
                <scope line="305"/>
            </method>
            <javadoc line="309">
                Get the InputStream to retreive the remote file. It will issue the
                  &quot;get&quot; (or &quot;dir&quot;) command to the ftp server.                
                <return>
                    the <code>InputStream</code> to the connection.                    
                </return>
                <throws>
                    IOException if already opened for output                    
                </throws>
                <throws>
                    FtpProtocolException if errors occur during the transfert.                    
                </throws>
            </javadoc>
            <method name="getInputStream" type="InputStream" line="316">
                <scope line="317"/>
                <scope line="320"/>
                <scope line="323"/>
                <scope line="326"/>
                <declaration name="msgh" type="MessageHeader" line="329"/>
                <declaration name="isAdir" type="boolean" line="330"/>
                <scope line="331">
                    <scope line="333">
                        <scope line="336"/>
                        <scope line="339"/>
                    </scope>
                    <scope line="343">
                        <scope line="344"/>
                        <scope line="347"/>
                    </scope>
                    <scope line="353">
                        <declaration name="l" type="long" line="354"/>
                        <scope line="356">
                            <declaration name="meteredInput" type="boolean" line="357"/>
                            <declaration name="pi" type="ProgressSource" line="358"/>
                            <scope line="359"/>
                        </scope>
                    </scope>
                    <scope line="366"/>
                    <scope line="369"/>
                    <scope line="373">
                        <declaration name="ftype" type="String" line="375"/>
                        <scope line="376"/>
                        <scope line="379"/>
                    </scope>
                </scope>
                <scope line="384">
                    <scope line="385"/>
                    <scope line="392"/>
                    <scope line="395"/>
                </scope>
                <scope line="399"/>
            </method>
            <javadoc line="405">
                Get the OutputStream to store the remote file. It will issue the
                  &quot;put&quot; command to the ftp server.                
                <return>
                    the <code>OutputStream</code> to the connection.                    
                </return>
                <throws>
                    IOException if already opened for input or the URL
                      points to a directory                    
                </throws>
                <throws>
                    FtpProtocolException if errors occur during the transfert.                    
                </throws>
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="413">
                <scope line="414"/>
                <scope line="417">
                    <declaration name="out" type="OutputStream" line="418"/>
                </scope>
                <scope line="422"/>
                <scope line="425"/>
                <scope line="429"/>
                <scope line="432">
                    <scope line="433"/>
                    <scope line="436"/>
                    <scope line="439"/>
                </scope>
                <scope line="444"/>
            </method>
            <method name="guessContentTypeFromFilename" type="String" line="449">
                <params>
                    <param name="fname" type="String"/>
                </params>
            </method>
            <javadoc line="452">
                Gets the &lt;code&gt;Permission&lt;/code&gt; associated with the host &amp; port.                
                <return>
                    The <code>Permission</code> object.                    
                </return>
            </javadoc>
            <method name="getPermission" type="Permission" line="456">
                <scope line="457">
                    <declaration name="urlport" type="int" line="458"/>
                    <declaration name="urlhost" type="String" line="460"/>
                </scope>
            </method>
            <javadoc line="465">
                Sets the general request property. If a property with the key already
                  exists, overwrite its value with the new value.                
                <param>
                    key     the keyword by which the request is known
                      (e.g., "<code>accept</code>").                    
                </param>
                <param>
                    value   the value associated with it.                    
                </param>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    #getRequestProperty(java.lang.String)                    
                </see>
            </javadoc>
            <method name="setRequestProperty" type="void" line="474">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="476">
                    <scope line="477"/>
                    <scope line="480"/>
                    <scope line="483"/>
                    <scope line="486"/>
                </scope>
            </method>
            <javadoc line="491">
                Returns the value of the named general request property for this
                  connection.                
                <param>
                    key the keyword by which the request is known (e.g., "accept").                    
                </param>
                <return>
                    the value of the named general request property for this
                      connection.                    
                </return>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <see>
                    #setRequestProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getRequestProperty" type="String" line="500">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="value" type="String" line="501"/>
                <scope line="502">
                    <scope line="503"/>
                </scope>
            </method>
            <method name="setConnectTimeout" type="void" line="509">
                <params>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="510"/>
            </method>
            <method name="getConnectTimeout" type="int" line="515"/>
            <method name="setReadTimeout" type="void" line="518">
                <params>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="519"/>
            </method>
            <method name="getReadTimeout" type="int" line="524"/>
        </class>
    </source>