<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http">
        <import package="java.net.URL"/>
        <import package="java.net.URLConnection"/>
        <import package="java.net.ProtocolException"/>
        <import package="java.net.HttpRetryException"/>
        <import package="java.net.PasswordAuthentication"/>
        <import package="java.net.Authenticator"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.net.SocketTimeoutException"/>
        <import package="java.net.Proxy"/>
        <import package="java.net.ProxySelector"/>
        <import package="java.net.URI"/>
        <import package="java.net.InetSocketAddress"/>
        <import package="java.net.CookieHandler"/>
        <import package="java.net.ResponseCache"/>
        <import package="java.net.CacheResponse"/>
        <import package="java.net.SecureCacheResponse"/>
        <import package="java.net.CacheRequest"/>
        <import package="java.net.Authenticator.RequestorType"/>
        <import package="java.io"/>
        <import package="java.util.Date"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Set"/>
        <import package="sun.net"/>
        <import package="sun.net.www"/>
        <import package="sun.net.www.http.HttpClient"/>
        <import package="sun.net.www.http.PosterOutputStream"/>
        <import package="sun.net.www.http.ChunkedInputStream"/>
        <import package="sun.net.www.http.ChunkedOutputStream"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.text.SimpleDateFormat"/>
        <import package="java.util.TimeZone"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.net.www.protocol.http.AuthScheme.BASIC"/>
        <import package="sun.net.www.protocol.http.AuthScheme.DIGEST"/>
        <import package="sun.net.www.protocol.http.AuthScheme.NTLM"/>
        <import package="sun.net.www.protocol.http.AuthScheme.NEGOTIATE"/>
        <import package="sun.net.www.protocol.http.AuthScheme.KERBEROS"/>
        <import package="sun.net.www.protocol.http.AuthScheme.UNKNOWN"/>
        <class name="HttpURLConnection" line="48">
            <extends class="java.net.HttpURLConnection"/>
            <javadoc line="48">
                A class to represent an HTTP connection to a remote object.                
            </javadoc>
            <declaration name="HTTP_CONNECT" type="String" line="52"/>
            <declaration name="version" type="String" line="53"/>
            <declaration name="userAgent" type="String" line="54"/>
            <declaration name="defaultmaxRedirects" type="int" line="55"/>
            <declaration name="maxRedirects" type="int" line="56"/>
            <declaration name="validateProxy" type="boolean" line="57"/>
            <declaration name="validateServer" type="boolean" line="58"/>
            <declaration name="strOutputStream" type="StreamingOutputStream" line="59"/>
            <declaration name="RETRY_MSG1" type="String" line="60"/>
            <declaration name="RETRY_MSG2" type="String" line="61"/>
            <declaration name="RETRY_MSG3" type="String" line="62"/>
            <declaration name="enableESBuffer" type="boolean" line="63"/>
            <declaration name="timeout4ESBuffer" type="int" line="64"/>
            <declaration name="bufSize4ES" type="int" line="65"/>
            <declaration name="allowRestrictedHeaders" type="boolean" line="66"/>
            <declaration name="restrictedHeaderSet" type="Set&lt;String&gt;" line="67"/>
            <declaration name="restrictedHeaders" type="String[]" line="68"/>
            <scope line="69">
                <declaration name="agent" type="String" line="72"/>
                <scope line="73"/>
                <scope line="76"/>
                <scope line="84"/>
                <scope line="88"/>
                <scope line="92">
                    <scope line="94"/>
                </scope>
                <scope line="98"/>
            </scope>
            <declaration name="httpVersion" type="String" line="102"/>
            <declaration name="acceptString" type="String" line="103"/>
            <declaration name="EXCLUDE_HEADERS" type="String[]" line="104"/>
            <declaration name="EXCLUDE_HEADERS2" type="String[]" line="105"/>
            <declaration name="http" type="HttpClient" line="106"/>
            <declaration name="handler" type="Handler" line="107"/>
            <declaration name="instProxy" type="Proxy" line="108"/>
            <declaration name="cookieHandler" type="CookieHandler" line="109"/>
            <declaration name="cacheHandler" type="ResponseCache" line="110"/>
            <declaration name="cachedResponse" type="CacheResponse" line="111"/>
            <declaration name="cachedHeaders" type="MessageHeader" line="112"/>
            <declaration name="cachedInputStream" type="InputStream" line="113"/>
            <declaration name="ps" type="PrintStream" line="114"/>
            <declaration name="errorStream" type="InputStream" line="115"/>
            <declaration name="setUserCookies" type="boolean" line="116"/>
            <declaration name="userCookies" type="String" line="117"/>
            <declaration name="userCookies2" type="String" line="118"/>
            <declaration name="defaultAuth" type="HttpAuthenticator" line="119"/>
            <declaration name="requests" type="MessageHeader" line="120"/>
            <declaration name="domain" type="String" line="121"/>
            <declaration name="digestparams" type="DigestAuthentication.Parameters" line="122"/>
            <declaration name="currentProxyCredentials" type="AuthenticationInfo" line="123"/>
            <declaration name="currentServerCredentials" type="AuthenticationInfo" line="124"/>
            <declaration name="needToCheck" type="boolean" line="125"/>
            <declaration name="doingNTLM2ndStage" type="boolean" line="126"/>
            <declaration name="doingNTLMp2ndStage" type="boolean" line="127"/>
            <declaration name="tryTransparentNTLMServer" type="boolean" line="128"/>
            <declaration name="tryTransparentNTLMProxy" type="boolean" line="129"/>
            <declaration name="authObj" type="Object" line="130"/>
            <declaration name="isUserServerAuth" type="boolean" line="131"/>
            <declaration name="isUserProxyAuth" type="boolean" line="132"/>
            <declaration name="serverAuthKey" type="String" line="133"/>
            <declaration name="pi" type="ProgressSource" line="134"/>
            <declaration name="responses" type="MessageHeader" line="135"/>
            <declaration name="inputStream" type="InputStream" line="136"/>
            <declaration name="poster" type="PosterOutputStream" line="137"/>
            <declaration name="setRequests" type="boolean" line="138"/>
            <declaration name="failedOnce" type="boolean" line="139"/>
            <declaration name="rememberedException" type="Exception" line="140"/>
            <declaration name="reuseClient" type="HttpClient" line="141"/>
            <declaration name="TunnelState" type="enum" line="142"/>
            <scope line="142"/>
            <declaration name="tunnelState" type="TunnelState" line="143"/>
            <declaration name="connectTimeout" type="int" line="144"/>
            <declaration name="readTimeout" type="int" line="145"/>
            <declaration name="logger" type="PlatformLogger" line="146"/>
            <method name="privilegedRequestPasswordAuthentication" type="PasswordAuthentication" line="147">
                <params>
                    <param name="host" type="String"/>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="protocol" type="String"/>
                    <param name="prompt" type="String"/>
                    <param name="scheme" type="String"/>
                    <param name="url" type="URL"/>
                    <param name="authType" type="RequestorType"/>
                </params>
                <anonymous_class line="148">
                    <method name="run" type="PasswordAuthentication" line="149">
                        <scope line="150"/>
                        <declaration name="pass" type="PasswordAuthentication" line="153"/>
                        <scope line="154"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="isRestrictedHeader" type="boolean" line="162">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="163"/>
                <scope line="167">
                    <scope line="168"/>
                </scope>
                <scope line="173"/>
            </method>
            <method name="isExternalMessageHeaderAllowed" type="boolean" line="178">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="180"/>
            </method>
            <method name="getHttpLogger" type="PlatformLogger" line="185"/>
            <method name="authObj" type="Object" line="188"/>
            <method name="authObj" type="void" line="191">
                <params>
                    <param name="authObj" type="Object"/>
                </params>
            </method>
            <method name="checkMessageHeader" type="void" line="194">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="LF" type="char" line="195"/>
                <declaration name="index" type="int" line="196"/>
                <scope line="197"/>
                <scope line="200">
                    <scope line="201"/>
                    <scope line="205">
                        <scope line="207">
                            <declaration name="c" type="char" line="208"/>
                            <scope line="209"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="writeRequests" type="void" line="218">
                <scope line="219"/>
                <scope line="222">
                    <scope line="224"/>
                    <declaration name="port" type="int" line="229"/>
                    <declaration name="host" type="String" line="230"/>
                    <scope line="231"/>
                    <scope line="236">
                        <scope line="237"/>
                        <scope line="240"/>
                    </scope>
                    <scope line="244"/>
                    <declaration name="modTime" type="long" line="247"/>
                    <scope line="248">
                        <declaration name="date" type="Date" line="249"/>
                        <declaration name="fo" type="SimpleDateFormat" line="250"/>
                    </scope>
                    <declaration name="sauth" type="AuthenticationInfo" line="254"/>
                    <scope line="255"/>
                    <scope line="259"/>
                    <declaration name="chunked" type="boolean" line="262"/>
                    <scope line="263">
                        <scope line="264"/>
                        <scope line="268">
                            <scope line="269"/>
                            <scope line="272"/>
                        </scope>
                    </scope>
                    <scope line="277">
                        <scope line="278"/>
                    </scope>
                    <scope line="283">
                        <scope line="284">
                            <scope line="286"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="294"/>
                <scope line="298">
                    <declaration name="proxyHost" type="String" line="299"/>
                    <declaration name="proxyPort" type="int" line="300"/>
                    <scope line="302"/>
                    <scope line="305">
                        <scope line="307"/>
                        <scope line="310"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="321">
                Create a new HttpClient object, bypassing the cache of
                  HTTP client objects/connections.                
                <param>
                    url       the URL being accessed                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="326">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="329">
                Obtain a HttpsClient object. Use the cached copy if specified.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="335">
                <params>
                    <param name="url" type="URL"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="339">
                Create a new HttpClient object, set up so that it uses
                  per-instance proxying to the given HTTP proxy.  This
                  bypasses the cache of HTTP client objects/connections.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="347">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                </params>
            </method>
            <javadoc line="350">
                Obtain a HttpClient object, set up so that it uses per-instance
                  proxying to the given HTTP proxy. Use the cached copy of HTTP
                  client objects/connections if specified.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="360">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <method name="proxiedConnect" type="void" line="363">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <method name="HttpURLConnection" type="constructor" line="367">
                <params>
                    <param name="u" type="URL"/>
                    <param name="handler" type="Handler"/>
                </params>
            </method>
            <method name="HttpURLConnection" type="constructor" line="370">
                <params>
                    <param name="u" type="URL"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="373">
                this constructor is used by other protocol handlers such as ftp
                  that want to use http to fetch urls on their behalf.                
            </javadoc>
            <method name="HttpURLConnection" type="constructor" line="377">
                <params>
                    <param name="u" type="URL"/>
                    <param name="p" type="Proxy"/>
                </params>
            </method>
            <method name="HttpURLConnection" type="constructor" line="380">
                <params>
                    <param name="u" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="handler" type="Handler"/>
                </params>
            </method>
            <method name="run" type="ResponseCache" line="402"/>
            <scope line="-1"/>
            <javadoc line="408">
                Use java.net.Authenticator.setDefault() instead.                
            </javadoc>
            <method name="setDefaultAuthenticator" type="void" line="411">
                <params>
                    <param name="a" type="HttpAuthenticator"/>
                </params>
            </method>
            <javadoc line="414">
                opens a stream allowing redirects only to the same host.                
            </javadoc>
            <method name="openConnectionCheckRedirects" type="InputStream" line="417">
                <params>
                    <param name="c" type="URLConnection"/>
                </params>
                <declaration name="redir" type="boolean" line="418"/>
                <declaration name="redirects" type="int" line="419"/>
                <declaration name="in" type="InputStream" line="420"/>
                <scope line="421">
                    <scope line="422"/>
                    <scope line="427">
                        <declaration name="http" type="HttpURLConnection" line="428"/>
                        <declaration name="stat" type="int" line="429"/>
                        <scope line="430">
                            <declaration name="base" type="URL" line="431"/>
                            <declaration name="loc" type="String" line="432"/>
                            <declaration name="target" type="URL" line="433"/>
                            <scope line="434"/>
                            <scope line="438"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="hostsEqual" type="boolean" line="450">
                <params>
                    <param name="u1" type="URL"/>
                    <param name="u2" type="URL"/>
                </params>
                <declaration name="h1" type="String" line="451"/>
                <declaration name="h2" type="String" line="452"/>
                <scope line="453"/>
                <scope line="456"/>
                <scope line="459"/>
                <declaration name="result" type="boolean" line="462"/>
                <anonymous_class line="463">
                    <method name="run" type="Void" line="464">
                        <scope line="465">
                            <declaration name="a1" type="InetAddress" line="466"/>
                            <declaration name="a2" type="InetAddress" line="467"/>
                        </scope>
                        <scope line="470"/>
                        <scope line="472"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="connect" type="void" line="480"/>
            <method name="checkReuseConnection" type="boolean" line="483">
                <scope line="484"/>
                <scope line="487"/>
            </method>
            <method name="plainConnect" type="void" line="497">
                <scope line="498"/>
                <scope line="501">
                    <scope line="502">
                        <declaration name="uri" type="URI" line="503"/>
                        <scope line="504">
                            <scope line="506"/>
                            <scope line="509"/>
                            <scope line="513"/>
                        </scope>
                    </scope>
                    <scope line="519"/>
                    <scope line="521"/>
                    <scope line="525"/>
                </scope>
                <scope line="529">
                    <scope line="530">
                        <anonymous_class line="531">
                            <method name="run" type="ProxySelector" line="532"/>
                        </anonymous_class>
                        <declaration name="sel" type="ProxySelector" line="531"/>
                        <scope line="537">
                            <declaration name="uri" type="URI" line="538"/>
                            <scope line="539"/>
                            <declaration name="it" type="Iterator&lt;Proxy&gt;" line="542"/>
                            <declaration name="p" type="Proxy" line="543"/>
                            <scope line="544">
                                <scope line="546">
                                    <scope line="547"/>
                                    <scope line="551"/>
                                    <scope line="555">
                                        <scope line="556"/>
                                    </scope>
                                </scope>
                                <scope line="562">
                                    <scope line="563">
                                        <scope line="565"/>
                                    </scope>
                                    <scope line="571"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="578">
                            <scope line="579"/>
                            <scope line="583"/>
                        </scope>
                    </scope>
                    <scope line="589">
                        <scope line="590"/>
                        <scope line="594"/>
                    </scope>
                </scope>
                <scope line="601"/>
            </method>
            <method name="getNewHttpClient" type="HttpClient" line="606">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="connectTimeout" type="int"/>
                </params>
            </method>
            <method name="getNewHttpClient" type="HttpClient" line="609">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="connectTimeout" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <method name="expect100Continue" type="void" line="612">
                <declaration name="oldTimeout" type="int" line="613"/>
                <declaration name="enforceTimeOut" type="boolean" line="614"/>
                <declaration name="timedOut" type="boolean" line="615"/>
                <scope line="616"/>
                <scope line="620"/>
                <scope line="623">
                    <scope line="624"/>
                </scope>
                <scope line="630">
                    <declaration name="resp" type="String" line="631"/>
                    <scope line="632">
                        <declaration name="sa" type="String[]" line="633"/>
                        <scope line="635"/>
                        <scope line="638"/>
                    </scope>
                    <scope line="641"/>
                </scope>
            </method>
            <method name="getOutputStream" type="OutputStream" line="649">
                <scope line="650">
                    <scope line="651"/>
                    <scope line="654"/>
                    <scope line="657"/>
                    <scope line="660"/>
                    <declaration name="expectContinue" type="boolean" line="664"/>
                    <declaration name="expects" type="String" line="665"/>
                    <scope line="666"/>
                    <scope line="670"/>
                    <scope line="673"/>
                    <scope line="677">
                        <scope line="678">
                            <scope line="679"/>
                            <scope line="682">
                                <declaration name="length" type="long" line="683"/>
                                <scope line="684"/>
                                <scope line="687"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="695">
                        <scope line="696"/>
                    </scope>
                </scope>
                <scope line="702"/>
                <scope line="706">
                    <declaration name="i" type="int" line="707"/>
                </scope>
                <scope line="712"/>
            </method>
            <method name="streaming" type="boolean" line="717"/>
            <method name="setCookieHeader" type="void" line="720">
                <scope line="721">
                    <scope line="722">
                        <scope line="723">
                            <declaration name="k" type="int" line="724"/>
                        </scope>
                    </scope>
                    <declaration name="uri" type="URI" line="733"/>
                    <scope line="734">
                        <scope line="735"/>
                        <declaration name="cookies" type="Map&lt;String,List&lt;String&gt;&gt;" line="738"/>
                        <scope line="739">
                            <scope line="740"/>
                            <scope line="743">
                                <declaration name="key" type="String" line="744"/>
                                <scope line="745"/>
                                <declaration name="l" type="List&lt;String&gt;" line="748"/>
                                <scope line="749">
                                    <declaration name="cookieValue" type="StringBuilder" line="750"/>
                                    <scope line="751"/>
                                    <scope line="754"/>
                                    <scope line="757"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="763">
                        <declaration name="k" type="int" line="764"/>
                    </scope>
                    <scope line="768">
                        <declaration name="k" type="int" line="769"/>
                    </scope>
                </scope>
            </method>
            <method name="getInputStream" type="InputStream" line="775">
                <scope line="776"/>
                <scope line="779">
                    <scope line="781"/>
                </scope>
                <scope line="785"/>
                <scope line="788">
                    <scope line="789"/>
                    <scope line="793"/>
                </scope>
                <declaration name="redirects" type="int" line="797"/>
                <declaration name="respCode" type="int" line="798"/>
                <declaration name="cl" type="long" line="799"/>
                <declaration name="serverAuthentication" type="AuthenticationInfo" line="800"/>
                <declaration name="proxyAuthentication" type="AuthenticationInfo" line="801"/>
                <declaration name="srvHdr" type="AuthenticationHeader" line="802"/>
                <declaration name="inNegotiate" type="boolean" line="803"/>
                <declaration name="inNegotiateProxy" type="boolean" line="804"/>
                <scope line="807">
                    <scope line="808">
                        <scope line="810"/>
                        <declaration name="meteredInput" type="boolean" line="813"/>
                        <scope line="814"/>
                        <scope line="819"/>
                        <scope line="823"/>
                        <scope line="828"/>
                        <scope line="832">
                            <scope line="833"/>
                            <declaration name="dontUseNegotiate" type="boolean" line="837"/>
                            <declaration name="iter" type="Iterator" line="838"/>
                            <scope line="839">
                                <declaration name="value" type="String" line="840"/>
                                <scope line="841">
                                    <scope line="842"/>
                                    <scope line="845"/>
                                </scope>
                            </scope>
                            <declaration name="authhdr" type="AuthenticationHeader" line="853"/>
                            <scope line="854">
                                <scope line="856"/>
                            </scope>
                            <scope line="862">
                                <declaration name="raw" type="String" line="863"/>
                                <scope line="865"/>
                                <scope line="869"/>
                            </scope>
                        </scope>
                        <scope line="878"/>
                        <scope line="883"/>
                        <scope line="886">
                            <scope line="887"/>
                            <declaration name="dontUseNegotiate" type="boolean" line="891"/>
                            <declaration name="iter" type="Iterator" line="892"/>
                            <scope line="893">
                                <declaration name="value" type="String" line="894"/>
                                <scope line="895">
                                    <scope line="896"/>
                                    <scope line="899"/>
                                </scope>
                            </scope>
                            <declaration name="raw" type="String" line="908"/>
                            <scope line="909">
                                <scope line="910">
                                    <scope line="911"/>
                                    <scope line="919"/>
                                </scope>
                                <scope line="925"/>
                            </scope>
                            <scope line="932">
                                <scope line="934"/>
                            </scope>
                        </scope>
                        <scope line="944">
                            <scope line="945">
                                <scope line="946">
                                    <declaration name="npath" type="String" line="947"/>
                                    <declaration name="opath" type="String" line="948"/>
                                    <scope line="949"/>
                                    <declaration name="a" type="BasicAuthentication" line="952"/>
                                </scope>
                            </scope>
                            <scope line="959">
                                <declaration name="srv" type="DigestAuthentication" line="960"/>
                                <declaration name="tok" type="StringTokenizer" line="961"/>
                                <declaration name="realm" type="String" line="962"/>
                                <declaration name="pw" type="PasswordAuthentication" line="963"/>
                                <scope line="965">
                                    <declaration name="path" type="String" line="966"/>
                                    <scope line="967">
                                        <declaration name="u" type="URL" line="968"/>
                                        <declaration name="d" type="DigestAuthentication" line="969"/>
                                    </scope>
                                    <scope line="972"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="983"/>
                        <scope line="986"/>
                        <scope line="990"/>
                        <scope line="995"/>
                        <scope line="998"/>
                        <scope line="1001">
                            <scope line="1002"/>
                        </scope>
                        <scope line="1011">
                            <scope line="1012">
                                <declaration name="uri" type="URI" line="1013"/>
                                <scope line="1014">
                                    <declaration name="uconn" type="URLConnection" line="1015"/>
                                    <scope line="1016">
                                        <scope line="1017"/>
                                        <scope line="1020"/>
                                        <scope line="1022"/>
                                    </scope>
                                    <declaration name="cacheRequest" type="CacheRequest" line="1025"/>
                                    <scope line="1026"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1033"/>
                        <scope line="1036">
                            <scope line="1037"/>
                            <scope line="1040"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1051"/>
                <scope line="1056">
                    <declaration name="te" type="String" line="1058"/>
                    <scope line="1059"/>
                </scope>
                <scope line="1064">
                    <scope line="1065"/>
                    <scope line="1068"/>
                </scope>
            </method>
            <method name="getChainedException" type="IOException" line="1073">
                <params>
                    <param name="rememberedException" type="IOException"/>
                </params>
                <scope line="1074">
                    <declaration name="args" type="Object[]" line="1075"/>
                    <anonymous_class line="1076">
                        <method name="run" type="IOException" line="1077"/>
                    </anonymous_class>
                    <declaration name="chainedException" type="IOException" line="1076"/>
                </scope>
                <scope line="1085"/>
            </method>
            <method name="getErrorStream" type="InputStream" line="1089">
                <scope line="1090">
                    <scope line="1091"/>
                    <scope line="1094"/>
                </scope>
            </method>
            <javadoc line="1100">
                set or reset proxy authentication info in request headers
                  after receiving a 407 error. In the case of NTLM however,
                  receiving a 407 is normal and we just skip the stale check
                  because ntlm does not support this feature.                
            </javadoc>
            <method name="resetProxyAuthentication" type="AuthenticationInfo" line="1106">
                <params>
                    <param name="proxyAuthentication" type="AuthenticationInfo"/>
                    <param name="auth" type="AuthenticationHeader"/>
                </params>
                <scope line="1107">
                    <declaration name="raw" type="String" line="1108"/>
                    <scope line="1109">
                        <declaration name="value" type="String" line="1110"/>
                        <scope line="1111">
                            <declaration name="digestProxy" type="DigestAuthentication" line="1112"/>
                            <scope line="1113"/>
                            <scope line="1116"/>
                        </scope>
                        <scope line="1120"/>
                    </scope>
                    <scope line="1127"/>
                </scope>
            </method>
            <javadoc line="1135">
                Returns the tunnel state.                
                <return>
                    the state                    
                </return>
            </javadoc>
            <method name="tunnelState" type="TunnelState" line="1139"/>
            <javadoc line="1142">
                Set the tunneling status.                
                <param>
                    the state                    
                </param>
            </javadoc>
            <method name="setTunnelState" type="void" line="1146">
                <params>
                    <param name="tunnelState" type="TunnelState"/>
                </params>
            </method>
            <javadoc line="1149">
                establish a tunnel through proxy server                
            </javadoc>
            <method name="doTunneling" type="void" line="1152">
                <declaration name="retryTunnel" type="int" line="1153"/>
                <declaration name="statusLine" type="String" line="1154"/>
                <declaration name="respCode" type="int" line="1155"/>
                <declaration name="proxyAuthentication" type="AuthenticationInfo" line="1156"/>
                <declaration name="proxyHost" type="String" line="1157"/>
                <declaration name="proxyPort" type="int" line="1158"/>
                <declaration name="savedRequests" type="MessageHeader" line="1159"/>
                <declaration name="inNegotiateProxy" type="boolean" line="1161"/>
                <scope line="1162">
                    <scope line="1164">
                        <scope line="1165"/>
                        <scope line="1171"/>
                        <declaration name="st" type="StringTokenizer" line="1175"/>
                        <scope line="1178">
                            <declaration name="dontUseNegotiate" type="boolean" line="1179"/>
                            <declaration name="iter" type="Iterator" line="1180"/>
                            <scope line="1181">
                                <declaration name="value" type="String" line="1182"/>
                                <scope line="1183">
                                    <scope line="1184"/>
                                    <scope line="1187"/>
                                </scope>
                            </scope>
                            <declaration name="authhdr" type="AuthenticationHeader" line="1195"/>
                            <scope line="1196">
                                <scope line="1198"/>
                            </scope>
                            <scope line="1206">
                                <declaration name="raw" type="String" line="1207"/>
                                <scope line="1209"/>
                            </scope>
                        </scope>
                        <scope line="1218"/>
                        <scope line="1221"/>
                    </scope>
                    <scope line="1230"/>
                </scope>
                <scope line="1234">
                    <scope line="1235"/>
                </scope>
            </method>
            <method name="connectRequestURI" type="String" line="1242">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="host" type="String" line="1243"/>
                <declaration name="port" type="int" line="1244"/>
            </method>
            <javadoc line="1248">
                send a CONNECT request for establishing a tunnel to proxy server                
            </javadoc>
            <method name="sendCONNECTRequest" type="void" line="1251">
                <declaration name="port" type="int" line="1252"/>
                <declaration name="host" type="String" line="1256"/>
                <scope line="1257"/>
                <scope line="1262"/>
                <scope line="1266"/>
            </method>
            <javadoc line="1272">
                Sets pre-emptive proxy authentication in header                
            </javadoc>
            <method name="setPreemptiveProxyAuthentication" type="void" line="1275">
                <params>
                    <param name="requests" type="MessageHeader"/>
                </params>
                <declaration name="pauth" type="AuthenticationInfo" line="1276"/>
                <scope line="1277">
                    <declaration name="value" type="String" line="1278"/>
                    <scope line="1279">
                        <declaration name="digestProxy" type="DigestAuthentication" line="1280"/>
                        <scope line="1281"/>
                        <scope line="1284"/>
                    </scope>
                    <scope line="1288"/>
                </scope>
            </method>
            <javadoc line="1295">
                Gets the authentication for an HTTP proxy, and applies it to
                  the connection.                
            </javadoc>
            <method name="getHttpProxyAuthentication" type="AuthenticationInfo" line="1299">
                <params>
                    <param name="authhdr" type="AuthenticationHeader"/>
                </params>
                <declaration name="ret" type="AuthenticationInfo" line="1300"/>
                <declaration name="raw" type="String" line="1301"/>
                <declaration name="host" type="String" line="1302"/>
                <declaration name="port" type="int" line="1303"/>
                <scope line="1304">
                    <declaration name="p" type="HeaderParser" line="1305"/>
                    <declaration name="realm" type="String" line="1306"/>
                    <declaration name="scheme" type="String" line="1307"/>
                    <declaration name="authScheme" type="AuthScheme" line="1308"/>
                    <scope line="1309"/>
                    <scope line="1312"/>
                    <scope line="1315"/>
                    <scope line="1319"/>
                    <scope line="1323"/>
                    <scope line="1330">
                        <declaration name="addr" type="InetAddress" line="1333"/>
                        <scope line="1334">
                            <declaration name="finalHost" type="String" line="1335"/>
                            <anonymous_class line="1336">
                                <method name="run" type="InetAddress" line="1337"/>
                            </anonymous_class>
                        </scope>
                        <scope line="1343"/>
                        <declaration name="a" type="PasswordAuthentication" line="1345"/>
                        <scope line="1346"/>
                        <scope line="1352">
                            <declaration name="params" type="DigestAuthentication.Parameters" line="1353"/>
                        </scope>
                        <scope line="1358">
                            <scope line="1359"/>
                            <scope line="1363"/>
                            <scope line="1366"/>
                            <scope line="1369"/>
                        </scope>
                    </scope>
                    <scope line="1387">
                        <scope line="1388">
                            <declaration name="u" type="URL" line="1389"/>
                            <declaration name="a" type="String" line="1390"/>
                            <scope line="1391"/>
                        </scope>
                        <scope line="1395"/>
                    </scope>
                    <scope line="1398">
                        <scope line="1399"/>
                    </scope>
                </scope>
                <scope line="1404"/>
            </method>
            <javadoc line="1409">
                Gets the authentication for an HTTP server, and applies it to
                  the connection.                
                <param>
                    authHdr the AuthenticationHeader which tells what auth scheme is
                      prefered.                    
                </param>
            </javadoc>
            <method name="getServerAuthentication" type="AuthenticationInfo" line="1415">
                <params>
                    <param name="authhdr" type="AuthenticationHeader"/>
                </params>
                <declaration name="ret" type="AuthenticationInfo" line="1416"/>
                <declaration name="raw" type="String" line="1417"/>
                <scope line="1418">
                    <declaration name="p" type="HeaderParser" line="1419"/>
                    <declaration name="realm" type="String" line="1420"/>
                    <declaration name="scheme" type="String" line="1421"/>
                    <declaration name="authScheme" type="AuthScheme" line="1422"/>
                    <scope line="1423"/>
                    <scope line="1426"/>
                    <scope line="1429"/>
                    <scope line="1433"/>
                    <scope line="1437"/>
                    <declaration name="addr" type="InetAddress" line="1445"/>
                    <scope line="1446">
                        <scope line="1447"/>
                        <scope line="1450"/>
                    </scope>
                    <declaration name="port" type="int" line="1453"/>
                    <scope line="1454"/>
                    <scope line="1457">
                        <declaration name="a" type="PasswordAuthentication" line="1466"/>
                        <scope line="1467"/>
                        <scope line="1473"/>
                        <scope line="1479">
                            <declaration name="url1" type="URL" line="1480"/>
                            <scope line="1481"/>
                            <scope line="1484"/>
                            <scope line="1487">
                                <scope line="1489"/>
                            </scope>
                            <scope line="1494"/>
                            <scope line="1497"/>
                            <scope line="1500"/>
                        </scope>
                    </scope>
                    <scope line="1512">
                        <declaration name="a" type="String" line="1513"/>
                        <scope line="1514"/>
                    </scope>
                    <scope line="1518">
                        <scope line="1519"/>
                    </scope>
                </scope>
                <scope line="1524"/>
            </method>
            <method name="checkResponseCredentials" type="void" line="1529">
                <params>
                    <param name="inClose" type="boolean"/>
                </params>
                <scope line="1530">
                    <scope line="1532">
                        <declaration name="raw" type="String" line="1533"/>
                        <scope line="1534">
                            <declaration name="da" type="DigestAuthentication" line="1535"/>
                        </scope>
                    </scope>
                    <scope line="1540">
                        <declaration name="raw" type="String" line="1541"/>
                        <scope line="1542">
                            <declaration name="da" type="DigestAuthentication" line="1543"/>
                        </scope>
                    </scope>
                    <scope line="1548"/>
                </scope>
                <scope line="1552"/>
            </method>
            <declaration name="requestURI" type="String" line="1558"/>
            <method name="getRequestURI" type="String" line="1559">
                <scope line="1560"/>
            </method>
            <method name="followRedirect" type="boolean" line="1565">
                <scope line="1566"/>
                <declaration name="stat" type="int" line="1569"/>
                <scope line="1570"/>
                <declaration name="loc" type="String" line="1573"/>
                <scope line="1574"/>
                <declaration name="locUrl" type="URL" line="1577"/>
                <scope line="1578">
                    <scope line="1580"/>
                </scope>
                <scope line="1584"/>
                <scope line="1588"/>
                <scope line="1591"/>
                <scope line="1595">
                    <declaration name="proxyHost" type="String" line="1596"/>
                    <declaration name="proxyPort" type="int" line="1597"/>
                    <declaration name="security" type="SecurityManager" line="1598"/>
                    <scope line="1599"/>
                </scope>
                <scope line="1606">
                    <scope line="1609"/>
                    <scope line="1616">
                        <scope line="1618">
                            <declaration name="port" type="int" line="1620"/>
                            <declaration name="host" type="String" line="1621"/>
                            <scope line="1622"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="cdata" type="byte[]" line="1631"/>
            <javadoc line="1632">
                Reset (without disconnecting the TCP conn) in order to do another transaction with this instance                
            </javadoc>
            <method name="reset" type="void" line="1635">
                <declaration name="is" type="InputStream" line="1638"/>
                <scope line="1639">
                    <scope line="1640">
                        <scope line="1641">
                            <scope line="1642"/>
                        </scope>
                        <scope line="1645">
                            <declaration name="cl" type="long" line="1646"/>
                            <declaration name="n" type="int" line="1647"/>
                            <declaration name="cls" type="String" line="1648"/>
                            <scope line="1649">
                                <scope line="1650"/>
                                <scope line="1653"/>
                            </scope>
                            <scope line="1657">
                                <scope line="1658"/>
                                <scope line="1661"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1667"/>
                    <scope line="1673">
                        <scope line="1674"/>
                    </scope>
                    <scope line="1678"/>
                </scope>
            </method>
            <javadoc line="1685">
                Disconnect from the web server at the first 401 error. Do not
                  disconnect when using a proxy, a good proxy should have already
                  closed the connection to the web server.                
            </javadoc>
            <method name="disconnectWeb" type="void" line="1690">
                <scope line="1691"/>
                <scope line="1695"/>
            </method>
            <javadoc line="1699">
                Disconnect from the server (for internal use)                
            </javadoc>
            <method name="disconnectInternal" type="void" line="1702">
                <scope line="1705"/>
                <scope line="1709"/>
            </method>
            <javadoc line="1715">
                Disconnect from the server (public API)                
            </javadoc>
            <method name="disconnect" type="void" line="1718">
                <scope line="1720"/>
                <scope line="1724">
                    <scope line="1725">
                        <declaration name="hc" type="HttpClient" line="1726"/>
                        <declaration name="ka" type="boolean" line="1727"/>
                        <scope line="1728"/>
                        <scope line="1731"/>
                        <scope line="1733"/>
                    </scope>
                    <scope line="1737"/>
                </scope>
                <scope line="1745"/>
            </method>
            <method name="usingProxy" type="boolean" line="1749">
                <scope line="1750"/>
            </method>
            <javadoc line="1755">
                Gets a header field by name. Returns null if not known.                
                <param>
                    name the name of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderField" type="String" line="1759">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="1760"/>
                <scope line="1763"/>
                <scope line="1765"/>
            </method>
            <javadoc line="1770">
                Returns an unmodifiable Map of the header fields.
                  The Map keys are Strings that represent the
                  response-header field names. Each Map value is an
                  unmodifiable List of Strings that represents
                  the corresponding field values.                
                <return>
                    a Map of header fields                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHeaderFields" type="Map<String,List<String>>" line="1779">
                <scope line="1780"/>
                <scope line="1783"/>
                <scope line="1785"/>
            </method>
            <javadoc line="1790">
                Gets a header field by index. Returns null if not known.                
                <param>
                    n the index of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderField" type="String" line="1794">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="1795"/>
                <scope line="1798"/>
                <scope line="1800"/>
            </method>
            <javadoc line="1805">
                Gets a header field by index. Returns null if not known.                
                <param>
                    n the index of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderFieldKey" type="String" line="1809">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="1810"/>
                <scope line="1813"/>
                <scope line="1815"/>
            </method>
            <javadoc line="1820">
                Sets request property. If a property with the key already
                  exists, overwrite its value with the new value.                
                <param>
                    value the value to be set                    
                </param>
            </javadoc>
            <method name="setRequestProperty" type="void" line="1825">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="1828"/>
            </method>
            <javadoc line="1832">
                Adds a general request property specified by a
                  key-value pair.  This method will not overwrite
                  existing values associated with the same key.                
                <param>
                    key     the keyword by which the request is known
                      (e.g., "<code>accept</code>").                    
                </param>
                <param>
                    value  the value associated with it.                    
                </param>
                <see>
                    #getRequestProperties(java.lang.String)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addRequestProperty" type="void" line="1842">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="1845"/>
            </method>
            <method name="setAuthenticationProperty" type="void" line="1849">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="getRequestProperty" type="String" line="1853">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="1854"/>
                <scope line="1857">
                    <scope line="1858"/>
                </scope>
                <scope line="1862">
                    <scope line="1863"/>
                    <scope line="1866"/>
                </scope>
            </method>
            <javadoc line="1872">
                Returns an unmodifiable Map of general request
                  properties for this connection. The Map keys
                  are Strings that represent the request-header
                  field names. Each Map value is a unmodifiable List
                  of Strings that represents the corresponding
                  field values.                
                <return>
                    a Map of the general request properties for this connection.                    
                </return>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRequestProperties" type="Map<String,List<String>>" line="1883">
                <scope line="1885"/>
                <declaration name="userCookiesMap" type="Map" line="1888"/>
                <scope line="1889">
                    <scope line="1891"/>
                    <scope line="1894"/>
                </scope>
            </method>
            <method name="setConnectTimeout" type="void" line="1900">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="1904">
                Returns setting for connect timeout.
                  &lt;p&gt;
                  0 return implies that the option is disabled
                  (i.e., timeout of infinity).                
                <return>
                    an <code>int</code> that indicates the connect timeout
                      value in milliseconds                    
                </return>
                <see>
                    java.net.URLConnection#setConnectTimeout(int)                    
                </see>
                <see>
                    java.net.URLConnection#connect()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getConnectTimeout" type="int" line="1915"/>
            <javadoc line="1918">
                Sets the read timeout to a specified timeout, in
                  milliseconds. A non-zero value specifies the timeout when
                  reading from Input stream when a connection is established to a
                  resource. If the timeout expires before there is data available
                  for read, a java.net.SocketTimeoutException is raised. A
                  timeout of zero is interpreted as an infinite timeout.
                  &lt;p&gt; Some non-standard implementation of this method ignores the
                  specified timeout. To see the read timeout set, please call
                  getReadTimeout().                
                <param>
                    timeout an <code>int</code> that specifies the timeout
                      value to be used in milliseconds                    
                </param>
                <throws>
                    IllegalArgumentException if the timeout parameter is negative                    
                </throws>
                <see>
                    java.net.URLConnectiongetReadTimeout()                    
                </see>
                <see>
                    java.io.InputStream#read()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setReadTimeout" type="void" line="1935">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="1939">
                Returns setting for read timeout. 0 return implies that the
                  option is disabled (i.e., timeout of infinity).                
                <return>
                    an <code>int</code> that indicates the read timeout
                      value in milliseconds                    
                </return>
                <see>
                    java.net.URLConnection#setReadTimeout(int)                    
                </see>
                <see>
                    java.io.InputStream#read()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getReadTimeout" type="int" line="1948"/>
            <method name="getMethod" type="String" line="1951"/>
            <method name="mapToMessageHeader" type="MessageHeader" line="1954">
                <params>
                    <param name="map" type="Map<String,List<String>>"/>
                </params>
                <declaration name="headers" type="MessageHeader" line="1955"/>
                <scope line="1956"/>
                <scope line="1959">
                    <declaration name="key" type="String" line="1960"/>
                    <declaration name="values" type="List&lt;String&gt;" line="1961"/>
                    <scope line="1962">
                        <scope line="1963"/>
                        <scope line="1966"/>
                    </scope>
                </scope>
            </method>
            <class name="HttpInputStream" line="1973">
                <extends class="FilterInputStream"/>
                <declaration name="cacheRequest" type="CacheRequest" line="1974"/>
                <declaration name="outputStream" type="OutputStream" line="1975"/>
                <declaration name="marked" type="boolean" line="1976"/>
                <declaration name="inCache" type="int" line="1977"/>
                <declaration name="markCount" type="int" line="1978"/>
                <method name="HttpInputStream" type="constructor" line="1979">
                    <params>
                        <param name="is" type="InputStream"/>
                    </params>
                </method>
                <method name="HttpInputStream" type="constructor" line="1984">
                    <params>
                        <param name="is" type="InputStream"/>
                        <param name="cacheRequest" type="CacheRequest"/>
                    </params>
                    <scope line="1987"/>
                    <scope line="1990"/>
                </method>
                <javadoc line="1996">
                    Marks the current position in this input stream. A subsequent
                      call to the &lt;code&gt;reset&lt;/code&gt; method repositions this stream at
                      the last marked position so that subsequent reads re-read the same
                      bytes.
                      &lt;p&gt;
                      The &lt;code&gt;readlimit&lt;/code&gt; argument tells this input stream to
                      allow that many bytes to be read before the mark position gets
                      invalidated.
                      &lt;p&gt;
                      This method simply performs &lt;code&gt;in.mark(readlimit)&lt;/code&gt;.                    
                    <param>
                        readlimit   the maximum limit of bytes that can be read before
                          the mark position becomes invalid.                        
                    </param>
                    <see>
                        java.io.FilterInputStream#in                        
                    </see>
                    <see>
                        java.io.FilterInputStream#reset()                        
                    </see>
                </javadoc>
                <method name="mark" type="void" line="2012">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                    <scope line="2014"/>
                </method>
                <javadoc line="2019">
                    Repositions this stream to the position at the time the
                      &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.
                      &lt;p&gt;
                      This method
                      simply performs &lt;code&gt;in.reset()&lt;/code&gt;.
                      &lt;p&gt;
                      Stream marks are intended to be used in
                      situations where you need to read ahead a little to see what&apos;s in
                      the stream. Often this is most easily done by invoking some
                      general parser. If the stream is of the type handled by the
                      parse, it just chugs along happily. If the stream is not of
                      that type, the parser should toss an exception when it fails.
                      If this happens within readlimit bytes, it allows the outer
                      code to reset the stream and try another parser.                    
                    <exception>
                        IOException  if the stream has not been marked or if the
                          mark has been invalidated.                        
                    </exception>
                    <see>
                        java.io.FilterInputStream#in                        
                    </see>
                    <see>
                        java.io.FilterInputStream#mark(int)                        
                    </see>
                </javadoc>
                <method name="reset" type="void" line="2039">
                    <scope line="2041"/>
                </method>
                <method name="read" type="int" line="2046">
                    <scope line="2047">
                        <declaration name="b" type="byte[]" line="2048"/>
                        <declaration name="ret" type="int" line="2049"/>
                    </scope>
                    <scope line="2052">
                        <scope line="2053"/>
                    </scope>
                </method>
                <method name="read" type="int" line="2059">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="read" type="int" line="2062">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="2063">
                        <declaration name="newLen" type="int" line="2064"/>
                        <declaration name="nWrite" type="int" line="2065"/>
                        <scope line="2066">
                            <scope line="2067"/>
                            <scope line="2071"/>
                        </scope>
                        <scope line="2076"/>
                        <scope line="2080"/>
                    </scope>
                    <scope line="2085">
                        <scope line="2086"/>
                    </scope>
                </method>
                <declaration name="skipBuffer" type="byte[]" line="2092"/>
                <declaration name="SKIP_BUFFER_SIZE" type="int" line="2093"/>
                <method name="skip" type="long" line="2094">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <declaration name="remaining" type="long" line="2095"/>
                    <declaration name="nr" type="int" line="2096"/>
                    <declaration name="localSkipBuffer" type="byte[]" line="2098"/>
                    <scope line="2099"/>
                    <scope line="2102">
                        <scope line="2104"/>
                    </scope>
                </method>
                <method name="close" type="void" line="2111">
                    <scope line="2112">
                        <scope line="2113">
                            <scope line="2114"/>
                            <scope line="2117"/>
                        </scope>
                    </scope>
                    <scope line="2123">
                        <scope line="2124"/>
                    </scope>
                    <scope line="2129"/>
                </method>
            </class>
            <class name="StreamingOutputStream" line="2135">
                <extends class="FilterOutputStream"/>
                <declaration name="expected" type="long" line="2136"/>
                <declaration name="written" type="long" line="2137"/>
                <declaration name="closed" type="boolean" line="2138"/>
                <declaration name="error" type="boolean" line="2139"/>
                <declaration name="errorExcp" type="IOException" line="2140"/>
                <javadoc line="2141">
                    expectedLength == -1 if the stream is chunked
                      expectedLength &gt; 0 if the stream is fixed content-length
                      In the 2nd case, we make sure the expected number of
                      of bytes are actually written                    
                </javadoc>
                <method name="StreamingOutputStream" type="constructor" line="2147">
                    <params>
                        <param name="os" type="OutputStream"/>
                        <param name="expectedLength" type="long"/>
                    </params>
                </method>
                <method name="write" type="void" line="2154">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                    <scope line="2157"/>
                </method>
                <method name="write" type="void" line="2162">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="write" type="void" line="2165">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="2168"/>
                </method>
                <method name="checkError" type="void" line="2174">
                    <scope line="2175"/>
                    <scope line="2178"/>
                    <scope line="2181"/>
                </method>
                <method name="writtenOK" type="boolean" line="2185"/>
                <method name="close" type="void" line="2188">
                    <scope line="2189"/>
                    <scope line="2193">
                        <scope line="2194"/>
                    </scope>
                    <scope line="2202">
                        <declaration name="o" type="OutputStream" line="2204"/>
                    </scope>
                </method>
            </class>
            <class name="ErrorStream" line="2211">
                <extends class="InputStream"/>
                <declaration name="buffer" type="ByteBuffer" line="2212"/>
                <declaration name="is" type="InputStream" line="2213"/>
                <method name="ErrorStream" type="constructor" line="2214">
                    <params>
                        <param name="buf" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="ErrorStream" type="constructor" line="2218">
                    <params>
                        <param name="buf" type="ByteBuffer"/>
                        <param name="is" type="InputStream"/>
                    </params>
                </method>
                <method name="getErrorStream" type="InputStream" line="2222">
                    <params>
                        <param name="is" type="InputStream"/>
                        <param name="cl" type="long"/>
                        <param name="http" type="HttpClient"/>
                    </params>
                    <scope line="2223"/>
                    <scope line="2226">
                        <declaration name="oldTimeout" type="int" line="2227"/>
                        <declaration name="expected" type="long" line="2229"/>
                        <declaration name="isChunked" type="boolean" line="2230"/>
                        <scope line="2231"/>
                        <scope line="2235"/>
                        <scope line="2238">
                            <declaration name="exp" type="int" line="2239"/>
                            <declaration name="buffer" type="byte[]" line="2240"/>
                            <declaration name="count" type="int" line="2241"/>
                            <scope line="2242">
                                <scope line="2243">
                                    <scope line="2245">
                                        <scope line="2246"/>
                                    </scope>
                                </scope>
                                <scope line="2253"/>
                            </scope>
                            <scope line="2259"/>
                            <scope line="2262"/>
                            <scope line="2266"/>
                        </scope>
                    </scope>
                    <scope line="2272"/>
                </method>
                <method name="available" type="int" line="2276">
                    <scope line="2277"/>
                    <scope line="2280"/>
                </method>
                <method name="read" type="int" line="2284">
                    <declaration name="b" type="byte[]" line="2285"/>
                    <declaration name="ret" type="int" line="2286"/>
                </method>
                <method name="read" type="int" line="2289">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="read" type="int" line="2292">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="rem" type="int" line="2293"/>
                    <scope line="2294">
                        <declaration name="ret" type="int" line="2295"/>
                    </scope>
                    <scope line="2299">
                        <scope line="2300"/>
                        <scope line="2303"/>
                    </scope>
                </method>
                <method name="close" type="void" line="2308">
                    <scope line="2310"/>
                </method>
            </class>
        </class>
        <class name="EmptyInputStream" line="2316">
            <extends class="InputStream"/>
            <javadoc line="2316">
                An input stream that just returns EOF.  This is for
                  HTTP URLConnections that are KeepAlive &amp;&amp; use the
                  HEAD method - i.e., stream not dead, but nothing to be read.                
            </javadoc>
            <method name="available" type="int" line="2322"/>
            <method name="read" type="int" line="2325"/>
        </class>
    </source>