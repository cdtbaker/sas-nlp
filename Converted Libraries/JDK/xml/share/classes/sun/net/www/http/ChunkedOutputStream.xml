<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.http">
        <import package="java.io"/>
        <class name="ChunkedOutputStream" line="29">
            <extends class="PrintStream"/>
            <comment line="36">
                                
            </comment>
            <comment line="45">
                                
            </comment>
            <comment line="47">
                                
            </comment>
            <comment line="49">
                                
            </comment>
            <comment line="51">
                number of bytes to be filled up to complete a data chunk                
            </comment>
            <comment line="55">
                                
            </comment>
            <comment line="58">
                                
            </comment>
            <comment line="62">
                                
            </comment>
            <comment line="65">
                                
            </comment>
            <comment line="70">
                                
            </comment>
            <comment line="133">
                Flush a buffered, completed chunk to an underlying stream. If the data in
                 the buffer is insufficient to build up a chunk of &quot;preferredChunkSize&quot;
                 then the data do not get flushed unless flushAll is true. If flushAll is
                 true then the remaining data builds up a last chunk which size is smaller
                 than preferredChunkSize, and then the last chunk gets flushed to
                 underlying stream. If flushAll is true and there is no data in a buffer
                 at all then an empty chunk (containing a header only) gets flushed to
                 underlying stream.                
            </comment>
            <comment line="183">
                                
            </comment>
            <comment line="189">
                Writes data from b[] to an internal buffer and stores the data as data
                 chunks of a following format: {Data length in Hex}{CRLF}{data}{CRLF}
                 The size of the data is preferredChunkSize. As soon as a completed chunk
                 is read from b[] a process of reading from b[] suspends, the chunk gets
                 flushed to the underlying stream and then the reading process from b[]
                 continues. When there is no more sufficient data in b[] to build up a
                 chunk of preferredChunkSize size the data get stored as an incomplete
                 chunk of a following format: {space for data length}{CRLF}{data}
                 The size of the data is of course smaller than preferredChunkSize.                
            </comment>
            <javadoc line="29">
                OutputStream that sends the output to the underlying stream using chunked
                  encoding as specified in RFC 2068.                
            </javadoc>
            <declaration name="DEFAULT_CHUNK_SIZE" type="int" line="36"/>
            <declaration name="CRLF" type="byte[]" line="37"/>
            <declaration name="CRLF_SIZE" type="int" line="38"/>
            <declaration name="FOOTER" type="byte[]" line="39"/>
            <declaration name="FOOTER_SIZE" type="int" line="40"/>
            <declaration name="EMPTY_CHUNK_HEADER" type="byte[]" line="41"/>
            <declaration name="EMPTY_CHUNK_HEADER_SIZE" type="int" line="42"/>
            <declaration name="buf" type="byte" line="45"/>
            <declaration name="size" type="int" line="47"/>
            <declaration name="count" type="int" line="49"/>
            <declaration name="spaceInCurrentChunk" type="int" line="52"/>
            <declaration name="out" type="PrintStream" line="55"/>
            <declaration name="preferredChunkDataSize" type="int" line="58"/>
            <declaration name="preferedHeaderSize" type="int" line="59"/>
            <declaration name="preferredChunkGrossSize" type="int" line="60"/>
            <declaration name="completeHeader" type="byte[]" line="62"/>
            <method name="getHeaderSize" type="int" line="65">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="getHeader" type="byte[]" line="70">
                <params>
                    <param name="size" type="int"/>
                </params>
                <comment line="81">
                                        
                </comment>
                <scope line="71">
                    <declaration name="hexStr" type="String" line="72"/>
                    <declaration name="hexBytes" type="byte[]" line="73"/>
                    <declaration name="header" type="byte[]" line="74"/>
                </scope>
                <scope line="80"/>
            </method>
            <method name="ChunkedOutputStream" type="constructor" line="86">
                <params>
                    <param name="o" type="PrintStream"/>
                </params>
            </method>
            <method name="ChunkedOutputStream" type="constructor" line="90">
                <params>
                    <param name="o" type="PrintStream"/>
                    <param name="size" type="int"/>
                </params>
                <comment line="98">
                    Adjust the size to cater for the chunk header - eg: if the
                     preferred chunk size is 1k this means the chunk size should
                     be 1017 bytes (differs by 7 from preferred size because of
                     3 bytes for chunk size in hex and CRLF (header) and CRLF (footer)).
                    
                     If headerSize(adjusted_size) is shorter then headerSize(size)
                     then try to use the extra byte unless headerSize(adjusted_size+1)
                     increases back to headerSize(size)                    
                </comment>
                <comment line="127">
                                        
                </comment>
                <scope line="94"/>
                <scope line="107">
                    <declaration name="adjusted_size" type="int" line="108"/>
                    <scope line="109"/>
                </scope>
                <scope line="115"/>
                <scope line="117"/>
            </method>
            <method name="flush" type="void" line="142">
                <params>
                    <param name="flushAll" type="boolean"/>
                </params>
                <comment line="144">
                                        
                </comment>
                <comment line="149">
                                        
                </comment>
                <comment line="151">
                    adjust a header start index in case the header of the last                    
                </comment>
                <comment line="157">
                                        
                </comment>
                <comment line="161">
                                        
                </comment>
                <comment line="165">
                    send the last chunk to underlying stream                    
                </comment>
                <comment line="168">
                    send an empty chunk (containing just a header) to underlying stream                    
                </comment>
                <scope line="143"/>
                <scope line="148">
                    <scope line="150">
                        <declaration name="adjustedHeaderStartIndex" type="int" line="154"/>
                    </scope>
                    <scope line="167"/>
                </scope>
            </method>
            <method name="checkError" type="boolean" line="178"/>
            <method name="ensureOpen" type="void" line="183"/>
            <method name="write" type="void" line="200">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="209">
                    if b[] contains enough data then one loop cycle creates one complete
                     data chunk with a header, body and a footer, and then flushes the
                     chunk to the underlying stream. Otherwise, the last loop cycle
                     creates incomplete data chunk with empty header and with no footer
                     and stores this incomplete chunk in an internal buffer buf[]                    
                </comment>
                <comment line="216">
                                        
                </comment>
                <comment line="219">
                                        
                </comment>
                <comment line="222">
                                        
                </comment>
                <comment line="226">
                                        
                </comment>
                <comment line="232">
                                        
                </comment>
                <comment line="235">
                    chunk is complete                    
                </comment>
                <comment line="243">
                                        
                </comment>
                <comment line="245">
                                        
                </comment>
                <comment line="246">
                                        
                </comment>
                <comment line="248">
                                        
                </comment>
                <comment line="255">
                                        
                </comment>
                <comment line="256">
                                        
                </comment>
                <scope line="203"/>
                <scope line="205"/>
                <declaration name="bytesToWrite" type="int" line="215"/>
                <declaration name="inputIndex" type="int" line="216"/>
                <scope line="218">
                    <scope line="220">
                        <scope line="238"/>
                    </scope>
                    <scope line="244"/>
                </scope>
            </method>
            <method name="write" type="void" line="262">
                <params>
                    <param name="_b" type="int"/>
                </params>
                <declaration name="b" type="byte" line="263"/>
            </method>
            <method name="reset" type="void" line="267"/>
            <method name="size" type="int" line="273"/>
            <method name="close" type="void" line="278">
                <comment line="281">
                                        
                </comment>
                <comment line="286">
                                        
                </comment>
                <comment line="289">
                                        
                </comment>
                <scope line="282"/>
            </method>
            <method name="flush" type="void" line="294">
                <scope line="296"/>
            </method>
        </class>
    </source>