<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.http">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="sun.net"/>
        <import package="sun.net.www"/>
        <class name="ChunkedInputStream" line="6">
            <extends class="InputStream"/>
            <implements interface="Hurryable"/>
            <javadoc line="6">
                A &lt;code&gt;ChunkedInputStream&lt;/code&gt; provides a stream for reading a body of
                  a http message that can be sent as a series of chunks, each with its own
                  size indicator. Optionally the last chunk can be followed by trailers
                  containing entity-header fields.
                  &lt;p&gt;
                  A &lt;code&gt;ChunkedInputStream&lt;/code&gt; is also &lt;code&gt;Hurryable&lt;/code&gt; so it
                  can be hurried to the end of the stream if the bytes are available on
                  the underlying stream.                
            </javadoc>
            <declaration name="in" type="InputStream" line="17"/>
            <javadoc line="17">
                The underlying stream                
            </javadoc>
            <declaration name="hc" type="HttpClient" line="21"/>
            <javadoc line="21">
                The &lt;code&gt;HttpClient&lt;/code&gt; that should be notified when the chunked stream has
                  completed.                
            </javadoc>
            <declaration name="responses" type="MessageHeader" line="26"/>
            <javadoc line="26">
                The &lt;code&gt;MessageHeader&lt;/code&gt; that is populated with any optional trailer
                  that appear after the last chunk.                
            </javadoc>
            <declaration name="chunkSize" type="int" line="31"/>
            <javadoc line="31">
                The size, in bytes, of the chunk that is currently being read.
                  This size is only valid if the current position in the underlying
                  input stream is inside a chunk (ie: state == STATE_READING_CHUNK).                
            </javadoc>
            <declaration name="chunkRead" type="int" line="37"/>
            <javadoc line="37">
                The number of bytes read from the underlying stream for the current
                  chunk. This value is always in the range &lt;code&gt;0&lt;/code&gt; through to
                  &lt;code&gt;chunkSize&lt;/code&gt;                
            </javadoc>
            <declaration name="chunkData" type="byte" line="43"/>
            <javadoc line="43">
                The internal buffer array where chunk data is available for the
                  application to read.                
            </javadoc>
            <declaration name="chunkPos" type="int" line="48"/>
            <javadoc line="48">
                The current position in the buffer. It contains the index
                  of the next byte to read from &lt;code&gt;chunkData&lt;/code&gt;                
            </javadoc>
            <declaration name="chunkCount" type="int" line="53"/>
            <javadoc line="53">
                The index one greater than the index of the last valid byte in the
                  buffer. This value is always in the range &lt;code&gt;0&lt;/code&gt; through
                  &lt;code&gt;chunkData.length&lt;/code&gt;.                
            </javadoc>
            <declaration name="rawData" type="byte" line="59"/>
            <javadoc line="59">
                The internal buffer where bytes from the underlying stream can be
                  read. It may contain bytes representing chunk-size, chunk-data, or
                  trailer fields.                
            </javadoc>
            <declaration name="rawPos" type="int" line="65"/>
            <javadoc line="65">
                The current position in the buffer. It contains the index
                  of the next byte to read from &lt;code&gt;rawData&lt;/code&gt;                
            </javadoc>
            <declaration name="rawCount" type="int" line="70"/>
            <javadoc line="70">
                The index one greater than the index of the last valid byte in the
                  buffer. This value is always in the range &lt;code&gt;0&lt;/code&gt; through
                  &lt;code&gt;rawData.length&lt;/code&gt;.                
            </javadoc>
            <declaration name="error" type="boolean" line="76"/>
            <javadoc line="76">
                Indicates if an error was encountered when processing the chunked
                  stream.                
            </javadoc>
            <declaration name="closed" type="boolean" line="81"/>
            <javadoc line="81">
                Indicates if the chunked stream has been closed using the
                  &lt;code&gt;close&lt;/code&gt; method.                
            </javadoc>
            <declaration name="STATE_AWAITING_CHUNK_HEADER" type="int" line="86"/>
            <javadoc line="86">
                State to indicate that next field should be :-
                  chunk-size [ chunk-extension ] CRLF                
            </javadoc>
            <declaration name="STATE_READING_CHUNK" type="int" line="91"/>
            <javadoc line="91">
                State to indicate that we are currently reading the chunk-data.                
            </javadoc>
            <declaration name="STATE_AWAITING_CHUNK_EOL" type="int" line="95"/>
            <javadoc line="95">
                Indicates that a chunk has been completely read and the next
                  fields to be examine should be CRLF                
            </javadoc>
            <declaration name="STATE_AWAITING_TRAILERS" type="int" line="100"/>
            <javadoc line="100">
                Indicates that all chunks have been read and the next field
                  should be optional trailers or an indication that the chunked
                  stream is complete.                
            </javadoc>
            <declaration name="STATE_DONE" type="int" line="106"/>
            <javadoc line="106">
                State to indicate that the chunked stream is complete and
                  no further bytes should be read from the underlying stream.                
            </javadoc>
            <declaration name="state" type="int" line="111"/>
            <javadoc line="111">
                Indicates the current state.                
            </javadoc>
            <javadoc line="115">
                Check to make sure that this stream has not been closed.                
            </javadoc>
            <method name="ensureOpen" type="void" line="118">
                <scope line="119"/>
            </method>
            <javadoc line="123">
                Ensures there is &lt;code&gt;size&lt;/code&gt; bytes available in
                  &lt;code&gt;rawData&lt;/code&gt;. This requires that we either
                  shift the bytes in use to the begining of the buffer
                  or allocate a large buffer with sufficient space available.                
            </javadoc>
            <method name="ensureRawAvailable" type="void" line="129">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="130">
                    <declaration name="used" type="int" line="131"/>
                    <scope line="132">
                        <declaration name="tmp" type="byte" line="133"/>
                        <scope line="134"/>
                    </scope>
                    <scope line="139">
                        <scope line="140"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="148">
                Close the underlying input stream by either returning it to the
                  keep alive cache or closing the stream.
                  &lt;p&gt;
                  As a chunked stream is inheritly persistent (see HTTP 1.1 RFC) the
                  underlying stream can be returned to the keep alive cache if the
                  stream can be completely read without error.                
            </javadoc>
            <method name="closeUnderlying" type="void" line="156">
                <scope line="157"/>
                <scope line="160"/>
                <scope line="163">
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="170">
                Attempt to read the remainder of a chunk directly into the
                  caller&apos;s buffer.
                  &lt;p&gt;
                  Return the number of bytes read.                
            </javadoc>
            <method name="fastRead" type="int" line="176">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="remaining" type="int" line="177"/>
                <declaration name="cnt" type="int" line="178"/>
                <scope line="179">
                    <declaration name="nread" type="int" line="180"/>
                    <scope line="181"/>
                    <scope line="184"/>
                    <scope line="188">
                        <scope line="190"/>
                    </scope>
                </scope>
                <scope line="198"/>
            </method>
            <javadoc line="202">
                Process any outstanding bytes that have already been read into
                  &lt;code&gt;rawData&lt;/code&gt;.
                  &lt;p&gt;
                  The parsing of the chunked stream is performed as a state machine with
                  &lt;code&gt;state&lt;/code&gt; representing the current state of the processing.
                  &lt;p&gt;
                  Returns when either all the outstanding bytes in rawData have been
                  processed or there is insufficient bytes available to continue
                  processing. When the latter occurs &lt;code&gt;rawPos&lt;/code&gt; will not have
                  been updated and thus the processing can be restarted once further
                  bytes have been read into &lt;code&gt;rawData&lt;/code&gt;.                
            </javadoc>
            <method name="processRaw" type="void" line="215">
                <declaration name="pos" type="int" line="216"/>
                <declaration name="i" type="int" line="217"/>
                <scope line="218">
                    <scope line="222">
                        <scope line="223"/>
                    </scope>
                    <scope line="228"/>
                    <declaration name="header" type="String" line="231"/>
                    <scope line="232"/>
                    <scope line="235"/>
                    <scope line="238"/>
                    <scope line="244"/>
                    <scope line="247"/>
                    <scope line="252"/>
                    <declaration name="copyLen" type="int" line="255"/>
                    <scope line="256">
                        <declaration name="cnt" type="int" line="257"/>
                        <scope line="258">
                            <declaration name="tmp" type="byte" line="259"/>
                        </scope>
                        <scope line="263"/>
                    </scope>
                    <scope line="273"/>
                    <scope line="276"/>
                    <scope line="281"/>
                    <scope line="284"/>
                    <scope line="288"/>
                    <scope line="297">
                        <scope line="298"/>
                    </scope>
                    <scope line="303"/>
                    <scope line="306"/>
                    <scope line="310"/>
                    <scope line="314"/>
                    <declaration name="trailer" type="String" line="319"/>
                    <scope line="321"/>
                    <declaration name="key" type="String" line="324"/>
                    <declaration name="value" type="String" line="325"/>
                </scope>
            </method>
            <javadoc line="332">
                Reads any available bytes from the underlying stream into
                  &lt;code&gt;rawData&lt;/code&gt; and returns the number of bytes of
                  chunk data available in &lt;code&gt;chunkData&lt;/code&gt; that the
                  application can read.                
            </javadoc>
            <method name="readAheadNonBlocking" type="int" line="338">
                <declaration name="avail" type="int" line="339"/>
                <scope line="340">
                    <declaration name="nread" type="int" line="342"/>
                    <scope line="343"/>
                    <scope line="346"/>
                    <scope line="350"/>
                </scope>
            </method>
            <javadoc line="359">
                Reads from the underlying stream until there is chunk data
                  available in &lt;code&gt;chunkData&lt;/code&gt; for the application to
                  read.                
            </javadoc>
            <method name="readAheadBlocking" type="int" line="364">
                <scope line="365">
                    <scope line="366"/>
                    <declaration name="nread" type="int" line="370"/>
                    <scope line="371"/>
                    <scope line="374"/>
                    <scope line="378"/>
                </scope>
            </method>
            <javadoc line="388">
                Read ahead in either blocking or non-blocking mode. This method
                  is typically used when we run out of available bytes in
                  &lt;code&gt;chunkData&lt;/code&gt; or we need to determine how many bytes
                  are available on the input stream.                
            </javadoc>
            <method name="readAhead" type="int" line="394">
                <params>
                    <param name="allowBlocking" type="boolean"/>
                </params>
                <scope line="395"/>
                <scope line="398"/>
                <scope line="402"/>
                <scope line="405"/>
            </method>
            <javadoc line="409">
                Creates a &lt;code&gt;ChunkedInputStream&lt;/code&gt; and saves its  arguments, for
                  later use.                
                <param>
                    in   the underlying input stream.                    
                </param>
                <param>
                    hc   the HttpClient                    
                </param>
                <param>
                    responses   the MessageHeader that should be populated with optional
                      trailers.                    
                </param>
            </javadoc>
            <method name="ChunkedInputStream" type="constructor" line="417">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="hc" type="HttpClient"/>
                    <param name="responses" type="MessageHeader"/>
                </params>
            </method>
            <javadoc line="423">
                See
                  the general contract of the &lt;code&gt;read&lt;/code&gt;
                  method of &lt;code&gt;InputStream&lt;/code&gt;.                
                <return>
                    the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="read" type="int" line="432">
                <scope line="434">
                    <scope line="435"/>
                </scope>
            </method>
            <javadoc line="441">
                Reads bytes from this stream into the specified byte array, starting at
                  the given offset.                
                <param>
                    b     destination buffer.                    
                </param>
                <param>
                    off   offset at which to start storing bytes.                    
                </param>
                <param>
                    len   maximum number of bytes to read.                    
                </param>
                <return>
                    the number of bytes read, or &lt;code&gt;-1&lt;/code&gt; if the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="451">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="453"/>
                <scope line="456"/>
                <declaration name="avail" type="int" line="459"/>
                <scope line="460">
                    <scope line="461"/>
                    <scope line="465"/>
                </scope>
                <declaration name="cnt" type="int" line="469"/>
            </method>
            <javadoc line="474">
                Returns the number of bytes that can be read from this input
                  stream without blocking.                
                <return>
                    the number of bytes that can be read from this input
                      stream without blocking.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="available" type="int" line="482">
                <declaration name="avail" type="int" line="484"/>
                <scope line="485"/>
                <scope line="489"/>
                <scope line="492"/>
            </method>
            <javadoc line="496">
                Close the stream by either returning the connection to the
                  keep alive cache or closing the underlying stream.
                  &lt;p&gt;
                  If the chunked response hasn&apos;t been completely read we
                  try to &quot;hurry&quot; to the end of the response. If this is
                  possible (without blocking) then the connection can be
                  returned to the keep alive cache.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="506">
                <scope line="507"/>
            </method>
            <javadoc line="513">
                Hurry the input stream by reading everything from the underlying
                  stream. If the last chunk (and optional trailers) can be read without
                  blocking then the stream is considered hurried.
                  &lt;p&gt;
                  Note that if an error has occured or we can&apos;t get to last chunk
                  without blocking then this stream can&apos;t be hurried and should be
                  closed.                
            </javadoc>
            <method name="hurry" type="boolean" line="522">
                <scope line="523"/>
                <scope line="526"/>
                <scope line="529"/>
                <scope line="532"/>
            </method>
        </class>
    </source>