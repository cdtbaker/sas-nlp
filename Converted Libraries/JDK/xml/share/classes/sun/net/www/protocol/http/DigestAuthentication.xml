<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www.protocol.http">
        <import package="java.io"/>
        <import package="java.net.URL"/>
        <import package="java.net.ProtocolException"/>
        <import package="java.net.PasswordAuthentication"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Random"/>
        <import package="sun.net.www.HeaderParser"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="sun.net.www.protocol.http.HttpURLConnection.HTTP_CONNECT"/>
        <class name="DigestAuthentication" line="13">
            <extends class="AuthenticationInfo"/>
            <javadoc line="13">
                DigestAuthentication: Encapsulate an http server authentication using
                  the &quot;Digest&quot; scheme, as described in RFC2069 and updated in RFC2617                
                <author>
                    Bill Foote                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="19"/>
            <declaration name="authMethod" type="String" line="20"/>
            <class name="Parameters" line="21">
                <implements interface="java.io.Serializable"/>
                <declaration name="serialVersionUID" type="long" line="22"/>
                <declaration name="serverQop" type="boolean" line="23"/>
                <declaration name="opaque" type="String" line="24"/>
                <declaration name="cnonce" type="String" line="25"/>
                <declaration name="nonce" type="String" line="26"/>
                <declaration name="algorithm" type="String" line="27"/>
                <declaration name="NCcount" type="int" line="28"/>
                <declaration name="cachedHA1" type="String" line="29"/>
                <declaration name="redoCachedHA1" type="boolean" line="30"/>
                <declaration name="cnonceRepeat" type="int" line="31"/>
                <declaration name="cnoncelen" type="int" line="32"/>
                <declaration name="random" type="Random" line="33"/>
                <scope line="34"/>
                <method name="Parameters" type="constructor" line="37"/>
                <method name="authQop" type="boolean" line="45"/>
                <method name="incrementNC" type="void" line="48"/>
                <method name="getNCCount" type="int" line="51"/>
                <declaration name="cnonce_count" type="int" line="54"/>
                <method name="getCnonce" type="String" line="55">
                    <scope line="56"/>
                </method>
                <method name="setNewCnonce" type="void" line="62">
                    <declaration name="bb" type="byte" line="63"/>
                    <declaration name="cc" type="char" line="64"/>
                    <scope line="66">
                        <declaration name="x" type="int" line="67"/>
                    </scope>
                </method>
                <method name="setQop" type="void" line="75">
                    <params>
                        <param name="qop" type="String"/>
                    </params>
                    <scope line="76">
                        <declaration name="st" type="StringTokenizer" line="77"/>
                        <scope line="78">
                            <scope line="79"/>
                        </scope>
                    </scope>
                </method>
                <method name="getOpaque" type="String" line="87"/>
                <method name="setOpaque" type="void" line="90">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="getNonce" type="String" line="93"/>
                <method name="setNonce" type="void" line="96">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <scope line="97"/>
                </method>
                <method name="getCachedHA1" type="String" line="103">
                    <scope line="104"/>
                    <scope line="107"/>
                </method>
                <method name="setCachedHA1" type="void" line="111">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="getAlgorithm" type="String" line="115"/>
                <method name="setAlgorithm" type="void" line="118">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="params" type="Parameters" line="122"/>
            <javadoc line="123">
                Create a DigestAuthentication                
            </javadoc>
            <method name="DigestAuthentication" type="constructor" line="126">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="url" type="URL"/>
                    <param name="realm" type="String"/>
                    <param name="authMethod" type="String"/>
                    <param name="pw" type="PasswordAuthentication"/>
                    <param name="params" type="Parameters"/>
                </params>
            </method>
            <method name="DigestAuthentication" type="constructor" line="132">
                <params>
                    <param name="isProxy" type="boolean"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="realm" type="String"/>
                    <param name="authMethod" type="String"/>
                    <param name="pw" type="PasswordAuthentication"/>
                    <param name="params" type="Parameters"/>
                </params>
            </method>
            <javadoc line="138">
                @return true if this authentication supports preemptive authorization                
            </javadoc>
            <method name="supportsPreemptiveAuthorization" type="boolean" line="141"/>
            <javadoc line="144">
                Reclaculates the request-digest and returns it.
                  &lt;P&gt; Used in the common case where the requestURI is simply the
                  abs_path.                
                <param>
                    urlthe URL                    
                </param>
                <param>
                    methodthe HTTP method                    
                </param>
                <return>
                    the value of the HTTP header this authentication wants set                    
                </return>
            </javadoc>
            <method name="getHeaderValue" type="String" line="152">
                <params>
                    <param name="url" type="URL"/>
                    <param name="method" type="String"/>
                </params>
            </method>
            <javadoc line="155">
                Reclaculates the request-digest and returns it.
                  &lt;P&gt; Used when the requestURI is not the abs_path. The exact
                  requestURI can be passed as a String.                
                <param>
                    requestURIthe Request-URI from the HTTP request line                    
                </param>
                <param>
                    methodthe HTTP method                    
                </param>
                <return>
                    the value of the HTTP header this authentication wants set                    
                </return>
            </javadoc>
            <method name="getHeaderValue" type="String" line="163">
                <params>
                    <param name="requestURI" type="String"/>
                    <param name="method" type="String"/>
                </params>
            </method>
            <javadoc line="166">
                Check if the header indicates that the current auth. parameters are stale.
                  If so, then replace the relevant field with the new value
                  and return true. Otherwise return false.
                  returning true means the request can be retried with the same userid/password
                  returning false means we have to go back to the user to ask for a new
                  username password.                
            </javadoc>
            <method name="isAuthorizationStale" type="boolean" line="174">
                <params>
                    <param name="header" type="String"/>
                </params>
                <declaration name="p" type="HeaderParser" line="175"/>
                <declaration name="s" type="String" line="176"/>
                <declaration name="newNonce" type="String" line="178"/>
                <scope line="179"/>
            </method>
            <javadoc line="185">
                Set header(s) on the given connection.                
                <param>
                    conn The connection to apply the header(s) to                    
                </param>
                <param>
                    p A source of header values for this connection, if needed.                    
                </param>
                <param>
                    raw Raw header values for this connection, if needed.                    
                </param>
                <return>
                    true if all goes well, false if no headers were set.                    
                </return>
            </javadoc>
            <method name="setHeaders" type="boolean" line="192">
                <params>
                    <param name="conn" type="HttpURLConnection"/>
                    <param name="p" type="HeaderParser"/>
                    <param name="raw" type="String"/>
                </params>
                <declaration name="uri" type="String" line="196"/>
                <declaration name="method" type="String" line="197"/>
                <scope line="198"/>
                <scope line="202">
                    <scope line="203"/>
                    <scope line="206"/>
                </scope>
                <scope line="210"/>
                <scope line="213"/>
                <declaration name="algorithm" type="String" line="216"/>
                <scope line="217"/>
                <scope line="221"/>
                <declaration name="value" type="String" line="224"/>
                <scope line="225"/>
                <scope line="229"/>
            </method>
            <method name="getHeaderValueImpl" type="String" line="233">
                <params>
                    <param name="uri" type="String"/>
                    <param name="method" type="String"/>
                </params>
                <declaration name="response" type="String" line="234"/>
                <declaration name="passwd" type="char[]" line="235"/>
                <declaration name="qop" type="boolean" line="236"/>
                <declaration name="opaque" type="String" line="237"/>
                <declaration name="cnonce" type="String" line="238"/>
                <declaration name="nonce" type="String" line="239"/>
                <declaration name="algorithm" type="String" line="240"/>
                <declaration name="nccount" type="int" line="242"/>
                <declaration name="ncstring" type="String" line="243"/>
                <scope line="244">
                    <declaration name="len" type="int" line="246"/>
                </scope>
                <scope line="249"/>
                <scope line="252"/>
                <declaration name="ncfield" type="String" line="255"/>
                <scope line="256"/>
                <declaration name="value" type="String" line="259"/>
                <scope line="260"/>
                <scope line="263"/>
                <scope line="266"/>
            </method>
            <method name="checkResponse" type="void" line="272">
                <params>
                    <param name="header" type="String"/>
                    <param name="method" type="String"/>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <method name="checkResponse" type="void" line="275">
                <params>
                    <param name="header" type="String"/>
                    <param name="method" type="String"/>
                    <param name="uri" type="String"/>
                </params>
                <declaration name="passwd" type="char[]" line="276"/>
                <declaration name="username" type="String" line="277"/>
                <declaration name="qop" type="boolean" line="278"/>
                <declaration name="opaque" type="String" line="279"/>
                <declaration name="cnonce" type="String" line="280"/>
                <declaration name="nonce" type="String" line="281"/>
                <declaration name="algorithm" type="String" line="282"/>
                <declaration name="nccount" type="int" line="283"/>
                <declaration name="ncstring" type="String" line="284"/>
                <scope line="285"/>
                <scope line="288">
                    <declaration name="len" type="int" line="290"/>
                </scope>
                <scope line="293">
                    <declaration name="expected" type="String" line="294"/>
                    <declaration name="p" type="HeaderParser" line="295"/>
                    <declaration name="rspauth" type="String" line="296"/>
                    <scope line="297"/>
                    <scope line="300"/>
                    <declaration name="nextnonce" type="String" line="303"/>
                    <scope line="304"/>
                </scope>
                <scope line="308"/>
            </method>
            <method name="computeDigest" type="String" line="312">
                <params>
                    <param name="isRequest" type="boolean"/>
                    <param name="userName" type="String"/>
                    <param name="password" type="char[]"/>
                    <param name="realm" type="String"/>
                    <param name="connMethod" type="String"/>
                    <param name="requestURI" type="String"/>
                    <param name="nonceString" type="String"/>
                    <param name="cnonce" type="String"/>
                    <param name="ncValue" type="String"/>
                </params>
                <declaration name="A1" type="String" line="313"/>
                <declaration name="algorithm" type="String" line="314"/>
                <declaration name="md5sess" type="boolean" line="315"/>
                <declaration name="md" type="MessageDigest" line="316"/>
                <scope line="317">
                    <scope line="318">
                        <declaration name="s" type="String" line="319"/>
                        <declaration name="s1" type="String" line="320"/>
                    </scope>
                </scope>
                <scope line="326"/>
                <declaration name="A2" type="String" line="330"/>
                <scope line="331"/>
                <scope line="334"/>
                <declaration name="HashA2" type="String" line="337"/>
                <declaration name="combo" type="String" line="338"/>
                <scope line="339"/>
                <scope line="342"/>
            </method>
            <declaration name="charArray" type="char" line="348"/>
            <declaration name="zeroPad" type="String" line="349"/>
            <method name="encode" type="String" line="350">
                <params>
                    <param name="src" type="String"/>
                    <param name="passwd" type="char[]"/>
                    <param name="md" type="MessageDigest"/>
                </params>
            </method>
        </class>
    </source>