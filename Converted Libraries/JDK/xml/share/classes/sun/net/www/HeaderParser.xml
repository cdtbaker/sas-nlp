<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www">
        <import package="java.util.Iterator"/>
        <class name="HeaderParser" line="49">
            <comment line="52">
                                
            </comment>
            <comment line="56">
                initial size of array is 10                
            </comment>
            <comment line="248">
                public static void main(String[] a) throws Exception {
                System.out.print(&quot;enter line to parse&gt; &quot;);
                System.out.flush();
                DataInputStream dis = new DataInputStream(System.in);
                String line = dis.readLine();
                HeaderParser p = new HeaderParser(line);
                for (int i = 0; i &lt; asize; ++i) {
                if (p.findKey(i) == null) break;
                String v = p.findValue(i);
                System.out.println(i + &quot;) &quot; +p.findKey(i) + &quot;=&quot;+v);
                }
                System.out.println(&quot;Done!&quot;);
                
                }                
            </comment>
            <declaration name="raw" type="String" line="52"/>
            <declaration name="tab" type="String[][]" line="53"/>
            <declaration name="nkeys" type="int" line="54"/>
            <declaration name="asize" type="int" line="55"/>
            <method name="HeaderParser" type="constructor" line="57">
                <params>
                    <param name="raw" type="String"/>
                </params>
            </method>
            <method name="HeaderParser" type="constructor" line="63"/>
            <javadoc line="66">
                create a new HeaderParser from this, whose keys (and corresponding values)
                  range from &quot;start&quot; to &quot;end-1&quot;                
            </javadoc>
            <method name="subsequence" type="HeaderParser" line="70">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="71"/>
                <declaration name="n" type="HeaderParser" line="76"/>
            </method>
            <method name="parse" type="void" line="84">
                <comment line="96">
                    end of a key                    
                </comment>
                <comment line="115">
                    end key/val, of whatever we&apos;re in                    
                </comment>
                <comment line="139">
                    get last key/val, if any                    
                </comment>
                <scope line="86">
                    <declaration name="ca" type="char[]" line="88"/>
                    <declaration name="beg" type="int" line="89"/>
                    <declaration name="inKey" type="boolean" line="90"/>
                    <declaration name="inQuote" type="boolean" line="91"/>
                    <declaration name="len" type="int" line="92"/>
                    <scope line="93">
                        <declaration name="c" type="char" line="94"/>
                        <scope line="95"/>
                        <scope line="100">
                            <scope line="101">
                                <scope line="104"/>
                            </scope>
                            <scope line="109"/>
                        </scope>
                        <scope line="114">
                            <scope line="115"/>
                            <scope line="118"/>
                            <scope line="120"/>
                            <scope line="123"/>
                        </scope>
                        <scope line="128"/>
                        <scope line="131">
                            <declaration name="ntab" type="String[][]" line="133"/>
                        </scope>
                    </scope>
                    <scope line="139">
                        <scope line="140">
                            <scope line="141"/>
                            <scope line="143"/>
                        </scope>
                        <scope line="146"/>
                    </scope>
                    <scope line="149">
                        <scope line="150">
                            <scope line="151"/>
                            <scope line="153"/>
                        </scope>
                        <scope line="156"/>
                    </scope>
                </scope>
            </method>
            <method name="findKey" type="String" line="165">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="findValue" type="String" line="171">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="findValue" type="String" line="177">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="findValue" type="String" line="181">
                <params>
                    <param name="k" type="String"/>
                    <param name="Default" type="String"/>
                </params>
                <scope line="185">
                    <scope line="186"/>
                    <scope line="188"/>
                </scope>
            </method>
            <class name="ParserIterator" line="195">
                <comment line="198">
                    or key                    
                </comment>
                <implements interface="Iterator"/>
                <declaration name="index" type="int" line="196"/>
                <declaration name="returnsValue" type="boolean" line="197"/>
                <method name="ParserIterator" type="constructor" line="199">
                    <params>
                        <param name="returnValue" type="boolean"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="202"/>
                <method name="next" type="Object" line="205"/>
                <method name="remove" type="void" line="208"/>
            </class>
            <method name="keys" type="Iterator" line="213"/>
            <method name="values" type="Iterator" line="217"/>
            <method name="toString" type="String" line="221">
                <declaration name="k" type="Iterator" line="222"/>
                <declaration name="sbuf" type="StringBuffer" line="223"/>
                <scope line="225">
                    <declaration name="key" type="String" line="226"/>
                    <declaration name="val" type="String" line="227"/>
                    <scope line="228"/>
                    <scope line="232"/>
                </scope>
            </method>
            <method name="findInt" type="int" line="240">
                <params>
                    <param name="k" type="String"/>
                    <param name="Default" type="int"/>
                </params>
                <scope line="241"/>
                <scope line="243"/>
            </method>
        </class>
    </source>