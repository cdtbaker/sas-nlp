<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www">
        <import package="java.io"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Set"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="MessageHeader" line="42">
            <comment line="93">
                return the location of the key                
            </comment>
            <javadoc line="42">
                An RFC 844 or MIME message header.  Includes methods
                  for parsing headers from incoming streams, fetching
                  values, setting values, and printing headers.
                  Key values of null are legal: they indicate lines in
                  the header that don&apos;t have a valid key, but do have
                  a value (this isn&apos;t legal according to the standard,
                  but lines like this are everywhere).                
            </javadoc>
            <declaration name="keys" type="String" line="51"/>
            <declaration name="values" type="String" line="52"/>
            <declaration name="nkeys" type="int" line="53"/>
            <method name="MessageHeader" type="constructor" line="55"/>
            <method name="MessageHeader" type="constructor" line="59">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <javadoc line="63">
                Reset a message header (all key/values removed)                
            </javadoc>
            <method name="reset" type="void" line="66"/>
            <javadoc line="73">
                Find the value that corresponds to this key.
                  It finds only the first occurrence of the key.                
                <param>
                    k the key to find.                    
                </param>
                <return>
                    null if not found.                    
                </return>
            </javadoc>
            <method name="findValue" type="String" line="79">
                <params>
                    <param name="k" type="String"/>
                </params>
                <scope line="80"/>
                <scope line="85"/>
            </method>
            <method name="getKey" type="int" line="93">
                <params>
                    <param name="k" type="String"/>
                </params>
            </method>
            <method name="getKey" type="String" line="101">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="getValue" type="String" line="106">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                Deprecated: Use multiValueIterator() instead.
                  Find the next value that corresponds to this key.
                  It finds the first value that follows v. To iterate
                  over all the values of a key use:
                  &lt;pre&gt;
                  for(String v=h.findValue(k); v!=null; v=h.findNextValue(k, v)) {
                  ...
                  }
                  &lt;/pre&gt;                
            </javadoc>
            <method name="findNextValue" type="String" line="122">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <declaration name="foundV" type="boolean" line="123"/>
                <scope line="124"/>
            </method>
            <class name="HeaderIterator" line="141">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <declaration name="index" type="int" line="142"/>
                <declaration name="next" type="int" line="143"/>
                <declaration name="key" type="String" line="144"/>
                <declaration name="haveNext" type="boolean" line="145"/>
                <declaration name="lock" type="Object" line="146"/>
                <method name="HeaderIterator" type="constructor" line="148">
                    <params>
                        <param name="k" type="String"/>
                        <param name="lock" type="Object"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="152">
                    <scope line="153">
                        <scope line="154"/>
                        <scope line="157">
                            <scope line="158"/>
                        </scope>
                    </scope>
                </method>
                <method name="next" type="String" line="168">
                    <scope line="169">
                        <scope line="170"/>
                        <scope line="174"/>
                        <scope line="176"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="181"/>
            </class>
            <javadoc line="186">
                return an Iterator that returns all values of a particular
                  key in sequence                
            </javadoc>
            <method name="multiValueIterator" type="Iterator<String>" line="190">
                <params>
                    <param name="k" type="String"/>
                </params>
            </method>
            <method name="getHeaders" type="Map<String,List<String>>" line="194"/>
            <method name="getHeaders" type="Map<String,List<String>>" line="198">
                <params>
                    <param name="excludeList" type="String[]"/>
                </params>
            </method>
            <method name="filterAndAddHeaders" type="Map<String,List<String>>" line="202">
                <params>
                    <param name="excludeList" type="String[]"/>
                    <param name="include" type="Map<String,List<String>>"/>
                </params>
                <comment line="207">
                    check if the key is in the excludeList.                    
                </comment>
                <comment line="208">
                    if so, don&apos;t include it in the Map.                    
                </comment>
                <comment line="225">
                    reset the flag                    
                </comment>
                <declaration name="skipIt" type="boolean" line="203"/>
                <declaration name="m" type="Map&lt;String,List&lt;String&gt;&gt;" line="204"/>
                <scope line="205">
                    <scope line="206">
                        <scope line="209">
                            <scope line="211"/>
                        </scope>
                    </scope>
                    <scope line="217">
                        <declaration name="l" type="List&lt;String&gt;" line="218"/>
                        <scope line="219"/>
                    </scope>
                    <scope line="224"/>
                </scope>
                <scope line="230">
                    <declaration name="entries" type="Iterator" line="231"/>
                    <scope line="232">
                        <declaration name="entry" type="Map.Entry" line="233"/>
                        <declaration name="l" type="List" line="234"/>
                        <scope line="235"/>
                    </scope>
                </scope>
                <scope line="243"/>
            </method>
            <javadoc line="250">
                Prints the key-value pairs represented by this
                  header.  Also prints the RFC required blank line
                  at the end. Omits pairs with a null key.                
            </javadoc>
            <method name="print" type="void" line="253">
                <params>
                    <param name="p" type="PrintStream"/>
                </params>
                <scope line="255"/>
            </method>
            <javadoc line="263">
                Adds a key value pair to the end of the
                  header.  Duplicates are allowed                
            </javadoc>
            <method name="add" type="void" line="265">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
            </method>
            <javadoc line="272">
                Prepends a key value pair to the beginning of the
                  header.  Duplicates are allowed                
            </javadoc>
            <method name="prepend" type="void" line="274">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="276"/>
            </method>
            <javadoc line="285">
                Overwrite the previous key/val pair at location &apos;i&apos;
                  with the new k/v.  If the index didn&apos;t exist before
                  the key/val is simply tacked onto the end.                
            </javadoc>
            <method name="set" type="void" line="290">
                <params>
                    <param name="i" type="int"/>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="292"/>
                <scope line="294"/>
                <scope line="296"/>
            </method>
            <javadoc line="303">
                grow the key/value arrays as needed                
            </javadoc>
            <method name="grow" type="void" line="305">
                <scope line="306">
                    <declaration name="nk" type="String[]" line="307"/>
                    <declaration name="nv" type="String[]" line="308"/>
                </scope>
            </method>
            <javadoc line="318">
                Remove the key from the header. If there are multiple values under
                  the same key, they are all removed.
                  Nothing is done if the key doesn&apos;t exist.
                  After a remove, the other pairs&apos; order are not changed.                
                <param>
                    k the key to remove                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="325">
                <params>
                    <param name="k" type="String"/>
                </params>
                <scope line="326">
                    <scope line="327">
                        <scope line="328">
                            <scope line="329"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="336">
                    <scope line="337">
                        <scope line="338">
                            <scope line="339"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="349">
                Sets the value of a key.  If the key already
                  exists in the header, it&apos;s value will be
                  changed.  Otherwise a new key/value pair will
                  be added to the end of the header.                
            </javadoc>
            <method name="set" type="void" line="353">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="355"/>
            </method>
            <javadoc line="362">
                Set&apos;s the value of a key only if there is no
                  key with that value already.                
            </javadoc>
            <method name="setIfNotSet" type="void" line="366">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="367"/>
            </method>
            <javadoc line="372">
                Convert a message-id string to canonical form (strips off
                  leading and trailing &lt;&gt;s)                
            </javadoc>
            <method name="canonicalID" type="String" line="374">
                <params>
                    <param name="id" type="String"/>
                </params>
                <declaration name="st" type="int" line="377"/>
                <declaration name="len" type="int" line="378"/>
                <declaration name="substr" type="boolean" line="379"/>
                <declaration name="c" type="int" line="380"/>
                <scope line="382"/>
                <scope line="387"/>
            </method>
            <javadoc line="394">
                Parse a MIME header from an input stream.                
            </javadoc>
            <method name="parseHeader" type="void" line="395">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="396"/>
            </method>
            <javadoc line="402">
                Parse and merge a MIME header from an input stream.                
            </javadoc>
            <method name="mergeHeader" type="void" line="403">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="437">
                                        
                </comment>
                <declaration name="s" type="char" line="406"/>
                <declaration name="firstc" type="int" line="407"/>
                <scope line="408">
                    <declaration name="len" type="int" line="409"/>
                    <declaration name="keyend" type="int" line="410"/>
                    <declaration name="c" type="int" line="411"/>
                    <declaration name="inKey" type="boolean" line="412"/>
                    <scope line="414">
                        <scope line="415">
                            <scope line="430"/>
                            <scope line="441">
                                <declaration name="ns" type="char" line="442"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="k" type="String" line="452"/>
                    <scope line="453"/>
                    <scope line="456"/>
                    <declaration name="v" type="String" line="463"/>
                </scope>
            </method>
            <method name="toString" type="String" line="472">
                <declaration name="result" type="String" line="473"/>
                <scope line="474"/>
            </method>
        </class>
    </source>