<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.www">
        <import package="java.io"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Set"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="MessageHeader" line="11">
            <javadoc line="11">
                An RFC 844 or MIME message header.  Includes methods
                  for parsing headers from incoming streams, fetching
                  values, setting values, and printing headers.
                  Key values of null are legal: they indicate lines in
                  the header that don&apos;t have a valid key, but do have
                  a value (this isn&apos;t legal according to the standard,
                  but lines like this are everywhere).                
            </javadoc>
            <declaration name="keys" type="String" line="21"/>
            <declaration name="values" type="String" line="22"/>
            <declaration name="nkeys" type="int" line="23"/>
            <method name="MessageHeader" type="constructor" line="24"/>
            <method name="MessageHeader" type="constructor" line="27">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <javadoc line="30">
                Reset a message header (all key/values removed)                
            </javadoc>
            <method name="reset" type="void" line="33"/>
            <javadoc line="39">
                Find the value that corresponds to this key.
                  It finds only the first occurrence of the key.                
                <param>
                    k the key to find.                    
                </param>
                <return>
                    null if not found.                    
                </return>
            </javadoc>
            <method name="findValue" type="String" line="45">
                <params>
                    <param name="k" type="String"/>
                </params>
                <scope line="46"/>
                <scope line="49"/>
            </method>
            <method name="getKey" type="int" line="54">
                <params>
                    <param name="k" type="String"/>
                </params>
            </method>
            <method name="getKey" type="String" line="58">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="getValue" type="String" line="62">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Deprecated: Use multiValueIterator() instead.
                  Find the next value that corresponds to this key.
                  It finds the first value that follows v. To iterate
                  over all the values of a key use:
                  &lt;pre&gt;
                  for(String v=h.findValue(k); v!=null; v=h.findNextValue(k, v)) {
                  ...
                  }
                  &lt;/pre&gt;                
            </javadoc>
            <method name="findNextValue" type="String" line="77">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <declaration name="foundV" type="boolean" line="78"/>
                <scope line="79"/>
            </method>
            <class name="HeaderIterator" line="87">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <declaration name="index" type="int" line="88"/>
                <declaration name="next" type="int" line="89"/>
                <declaration name="key" type="String" line="90"/>
                <declaration name="haveNext" type="boolean" line="91"/>
                <declaration name="lock" type="Object" line="92"/>
                <method name="HeaderIterator" type="constructor" line="93">
                    <params>
                        <param name="k" type="String"/>
                        <param name="lock" type="Object"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="97">
                    <scope line="98">
                        <scope line="99"/>
                        <scope line="102">
                            <scope line="103"/>
                        </scope>
                    </scope>
                </method>
                <method name="next" type="String" line="113">
                    <scope line="114">
                        <scope line="115"/>
                        <scope line="119"/>
                        <scope line="122"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="127"/>
            </class>
            <javadoc line="131">
                return an Iterator that returns all values of a particular
                  key in sequence                
            </javadoc>
            <method name="multiValueIterator" type="Iterator<String>" line="135">
                <params>
                    <param name="k" type="String"/>
                </params>
            </method>
            <method name="getHeaders" type="Map<String,List<String>>" line="138"/>
            <method name="getHeaders" type="Map<String,List<String>>" line="141">
                <params>
                    <param name="excludeList" type="String[]"/>
                </params>
            </method>
            <method name="filterAndAddHeaders" type="Map<String,List<String>>" line="144">
                <params>
                    <param name="excludeList" type="String[]"/>
                    <param name="include" type="Map<String,List<String>>"/>
                </params>
                <declaration name="skipIt" type="boolean" line="145"/>
                <declaration name="m" type="Map&lt;String,List&lt;String&gt;&gt;" line="146"/>
                <scope line="147">
                    <scope line="148">
                        <scope line="149">
                            <scope line="150"/>
                        </scope>
                    </scope>
                    <scope line="156">
                        <declaration name="l" type="List&lt;String&gt;" line="157"/>
                        <scope line="158"/>
                    </scope>
                    <scope line="164"/>
                </scope>
                <scope line="168">
                    <declaration name="entries" type="Iterator" line="169"/>
                    <scope line="170">
                        <declaration name="entry" type="Map.Entry" line="171"/>
                        <declaration name="l" type="List" line="172"/>
                        <scope line="173"/>
                    </scope>
                </scope>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Prints the key-value pairs represented by this
                  header.  Also prints the RFC required blank line
                  at the end. Omits pairs with a null key.                
            </javadoc>
            <method name="print" type="void" line="190">
                <params>
                    <param name="p" type="PrintStream"/>
                </params>
                <scope line="191"/>
            </method>
            <javadoc line="197">
                Adds a key value pair to the end of the
                  header.  Duplicates are allowed                
            </javadoc>
            <method name="add" type="void" line="201">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
            </method>
            <javadoc line="207">
                Prepends a key value pair to the beginning of the
                  header.  Duplicates are allowed                
            </javadoc>
            <method name="prepend" type="void" line="211">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="213"/>
            </method>
            <javadoc line="221">
                Overwrite the previous key/val pair at location &apos;i&apos;
                  with the new k/v.  If the index didn&apos;t exist before
                  the key/val is simply tacked onto the end.                
            </javadoc>
            <method name="set" type="void" line="226">
                <params>
                    <param name="i" type="int"/>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="228"/>
                <scope line="231"/>
                <scope line="234"/>
            </method>
            <javadoc line="239">
                grow the key/value arrays as needed                
            </javadoc>
            <method name="grow" type="void" line="242">
                <scope line="243">
                    <declaration name="nk" type="String[]" line="244"/>
                    <declaration name="nv" type="String[]" line="245"/>
                </scope>
            </method>
            <javadoc line="252">
                Remove the key from the header. If there are multiple values under
                  the same key, they are all removed.
                  Nothing is done if the key doesn&apos;t exist.
                  After a remove, the other pairs&apos; order are not changed.                
                <param>
                    k the key to remove                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="259">
                <params>
                    <param name="k" type="String"/>
                </params>
                <scope line="260">
                    <scope line="261">
                        <scope line="262">
                            <scope line="263"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="271">
                    <scope line="272">
                        <scope line="273">
                            <scope line="274"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="283">
                Sets the value of a key.  If the key already
                  exists in the header, it&apos;s value will be
                  changed.  Otherwise a new key/value pair will
                  be added to the end of the header.                
            </javadoc>
            <method name="set" type="void" line="289">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="290"/>
            </method>
            <javadoc line="296">
                Set&apos;s the value of a key only if there is no
                  key with that value already.                
            </javadoc>
            <method name="setIfNotSet" type="void" line="300">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <scope line="301"/>
            </method>
            <javadoc line="305">
                Convert a message-id string to canonical form (strips off
                  leading and trailing &lt;&gt;s)                
            </javadoc>
            <method name="canonicalID" type="String" line="309">
                <params>
                    <param name="id" type="String"/>
                </params>
                <declaration name="st" type="int" line="311"/>
                <declaration name="len" type="int" line="312"/>
                <declaration name="substr" type="boolean" line="313"/>
                <declaration name="c" type="int" line="314"/>
                <scope line="315"/>
                <scope line="319"/>
            </method>
            <javadoc line="325">
                Parse a MIME header from an input stream.                
            </javadoc>
            <method name="parseHeader" type="void" line="328">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="329"/>
            </method>
            <javadoc line="334">
                Parse and merge a MIME header from an input stream.                
            </javadoc>
            <method name="mergeHeader" type="void" line="337">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <declaration name="s" type="char" line="339"/>
                <declaration name="firstc" type="int" line="340"/>
                <scope line="341">
                    <declaration name="len" type="int" line="342"/>
                    <declaration name="keyend" type="int" line="343"/>
                    <declaration name="c" type="int" line="344"/>
                    <declaration name="inKey" type="boolean" line="345"/>
                    <scope line="347">
                        <scope line="348">
                            <scope line="362"/>
                            <scope line="370">
                                <declaration name="ns" type="char" line="371"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="k" type="String" line="380"/>
                    <scope line="381"/>
                    <scope line="385"/>
                    <declaration name="v" type="String" line="390"/>
                </scope>
            </method>
            <method name="toString" type="String" line="396">
                <declaration name="result" type="String" line="397"/>
                <scope line="398"/>
            </method>
        </class>
    </source>