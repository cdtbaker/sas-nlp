<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.idn">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.text.ParseException"/>
        <import package="sun.text.Normalizer"/>
        <import package="sun.text.normalizer.CharTrie"/>
        <import package="sun.text.normalizer.Trie"/>
        <import package="sun.text.normalizer.NormalizerImpl"/>
        <import package="sun.text.normalizer.VersionInfo"/>
        <import package="sun.text.normalizer.UCharacter"/>
        <import package="sun.text.normalizer.UCharacterIterator"/>
        <import package="sun.text.normalizer.UTF16"/>
        <import package="sun.net.idn.UCharacterDirection"/>
        <import package="sun.net.idn.StringPrepDataReader"/>
        <class name="StringPrep" line="17">
            <javadoc line="17">
                StringPrep API implements the StingPrep framework as described by
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3454.txt&quot;&gt;RFC 3454&lt;/a&gt;.
                  StringPrep prepares Unicode strings for use in network protocols.
                  Profiles of StingPrep are set of rules and data according to which the
                  Unicode Strings are prepared. Each profiles contains tables which describe
                  how a code point should be treated. The tables are broadly classied into
                  &lt;ul&gt;
                  &lt;li&gt; Unassigned Table: Contains code points that are unassigned
                  in the Unicode Version supported by StringPrep. Currently
                  RFC 3454 supports Unicode 3.2. &lt;/li&gt;
                  &lt;li&gt; Prohibited Table: Contains code points that are prohibted from
                  the output of the StringPrep processing function. &lt;/li&gt;
                  &lt;li&gt; Mapping Table: Contains code ponts that are deleted from the output or case mapped. &lt;/li&gt;
                  &lt;/ul&gt;
                  The procedure for preparing Unicode strings:
                  &lt;ol&gt;
                  &lt;li&gt; Map: For each character in the input, check if it has a mapping
                  and, if so, replace it with its mapping. &lt;/li&gt;
                  &lt;li&gt; Normalize: Possibly normalize the result of step 1 using Unicode
                  normalization. &lt;/li&gt;
                  &lt;li&gt; Prohibit: Check for any characters that are not allowed in the
                  output.  If any are found, return an error.&lt;/li&gt;
                  &lt;li&gt; Check bidi: Possibly check for right-to-left characters, and if
                  any are found, make sure that the whole string satisfies the
                  requirements for bidirectional strings.  If the string does not
                  satisfy the requirements for bidirectional strings, return an
                  error.  &lt;/li&gt;
                  &lt;/ol&gt;                
                <author>
                    Ram Viswanadha                    
                </author>
                <draft>
                    ICU 2.8                    
                </draft>
            </javadoc>
            <declaration name="DEFAULT" type="int" line="50"/>
            <javadoc line="50">
                Option to prohibit processing of unassigned code points in the input                
                <see>
                    #prepare                    
                </see>
                <draft>
                    ICU 2.8                    
                </draft>
            </javadoc>
            <declaration name="ALLOW_UNASSIGNED" type="int" line="56"/>
            <javadoc line="56">
                Option to allow processing of unassigned code points in the input                
                <see>
                    #prepare                    
                </see>
                <draft>
                    ICU 2.8                    
                </draft>
            </javadoc>
            <declaration name="UNASSIGNED" type="int" line="62"/>
            <declaration name="MAP" type="int" line="63"/>
            <declaration name="PROHIBITED" type="int" line="64"/>
            <declaration name="DELETE" type="int" line="65"/>
            <declaration name="TYPE_LIMIT" type="int" line="66"/>
            <declaration name="NORMALIZATION_ON" type="int" line="67"/>
            <declaration name="CHECK_BIDI_ON" type="int" line="68"/>
            <declaration name="TYPE_THRESHOLD" type="int" line="69"/>
            <declaration name="MAX_INDEX_VALUE" type="int" line="70"/>
            <declaration name="MAX_INDEX_TOP_LENGTH" type="int" line="71"/>
            <declaration name="INDEX_TRIE_SIZE" type="int" line="72"/>
            <declaration name="INDEX_MAPPING_DATA_SIZE" type="int" line="73"/>
            <declaration name="NORM_CORRECTNS_LAST_UNI_VERSION" type="int" line="74"/>
            <declaration name="ONE_UCHAR_MAPPING_INDEX_START" type="int" line="75"/>
            <declaration name="TWO_UCHARS_MAPPING_INDEX_START" type="int" line="76"/>
            <declaration name="THREE_UCHARS_MAPPING_INDEX_START" type="int" line="77"/>
            <declaration name="FOUR_UCHARS_MAPPING_INDEX_START" type="int" line="78"/>
            <declaration name="OPTIONS" type="int" line="79"/>
            <declaration name="INDEX_TOP" type="int" line="80"/>
            <declaration name="DATA_BUFFER_SIZE" type="int" line="81"/>
            <javadoc line="81">
                Default buffer size of datafile                
            </javadoc>
            <class name="StringPrepTrieImpl" line="85">
                <implements interface="Trie.DataManipulate"/>
                <declaration name="sprepTrie" type="CharTrie" line="86"/>
                <javadoc line="87">
                    Called by com.ibm.icu.util.Trie to extract from a lead surrogate&apos;s
                      data the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        property data value for a surrogate from the trie, including
                          the folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
                <method name="getFoldingOffset" type="int" line="94">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="sprepTrieImpl" type="StringPrepTrieImpl" line="98"/>
            <declaration name="indexes" type="int[]" line="99"/>
            <declaration name="mappingData" type="char[]" line="100"/>
            <declaration name="formatVersion" type="byte[]" line="101"/>
            <declaration name="sprepUniVer" type="VersionInfo" line="102"/>
            <declaration name="normCorrVer" type="VersionInfo" line="103"/>
            <declaration name="doNFKC" type="boolean" line="104"/>
            <declaration name="checkBiDi" type="boolean" line="105"/>
            <method name="getCodePointValue" type="char" line="106">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <method name="getVersionInfo" type="VersionInfo" line="109">
                <params>
                    <param name="comp" type="int"/>
                </params>
                <declaration name="micro" type="int" line="110"/>
                <declaration name="milli" type="int" line="111"/>
                <declaration name="minor" type="int" line="112"/>
                <declaration name="major" type="int" line="113"/>
            </method>
            <method name="getVersionInfo" type="VersionInfo" line="116">
                <params>
                    <param name="version" type="byte[]"/>
                </params>
                <scope line="117"/>
            </method>
            <javadoc line="122">
                Creates an StringPrep object after reading the input stream.
                  The object does not hold a reference to the input steam, so the stream can be
                  closed after the method returns.                
                <param>
                    inputStream The stream for reading the StringPrep profile binarySun                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <draft>
                    ICU 2.8                    
                </draft>
            </javadoc>
            <method name="StringPrep" type="constructor" line="130">
                <params>
                    <param name="inputStream" type="InputStream"/>
                </params>
                <declaration name="b" type="BufferedInputStream" line="131"/>
                <declaration name="reader" type="StringPrepDataReader" line="132"/>
                <declaration name="sprepBytes" type="byte[]" line="134"/>
                <declaration name="normUniVer" type="VersionInfo" line="144"/>
                <scope line="145"/>
            </method>
            <class name="Values" line="150">
                <declaration name="isIndex" type="boolean" line="151"/>
                <declaration name="value" type="int" line="152"/>
                <declaration name="type" type="int" line="153"/>
                <method name="reset" type="void" line="154"/>
            </class>
            <method name="getValues" type="void" line="160">
                <params>
                    <param name="trieWord" type="char"/>
                    <param name="values" type="Values"/>
                </params>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168">
                    <scope line="170"/>
                    <scope line="174"/>
                    <scope line="179"/>
                </scope>
            </method>
            <method name="map" type="StringBuffer" line="186">
                <params>
                    <param name="iter" type="UCharacterIterator"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="val" type="Values" line="187"/>
                <declaration name="result" type="char" line="188"/>
                <declaration name="ch" type="int" line="189"/>
                <declaration name="dest" type="StringBuffer" line="190"/>
                <declaration name="allowUnassigned" type="boolean" line="191"/>
                <scope line="192">
                    <scope line="195"/>
                    <scope line="198">
                        <declaration name="index" type="int" line="199"/>
                        <scope line="200">
                            <scope line="202"/>
                            <scope line="205"/>
                            <scope line="208"/>
                            <scope line="211"/>
                        </scope>
                        <scope line="217"/>
                    </scope>
                    <scope line="221"/>
                </scope>
            </method>
            <method name="normalize" type="StringBuffer" line="228">
                <params>
                    <param name="src" type="StringBuffer"/>
                </params>
            </method>
            <javadoc line="231">
                Prepare the input buffer for use in applications with the given profile. This operation maps, normalizes(NFKC),
                  checks for prohited and BiDi characters in the order defined by RFC 3454
                  depending on the options specified in the profile.                
                <param>
                    src           A UCharacterIterator object containing the source string                    
                </param>
                <param>
                    options       A bit set of options:
                      - StringPrep.NONE               Prohibit processing of unassigned code points in the input
                      - StringPrep.ALLOW_UNASSIGNED   Treat the unassigned code points are in the input
                      as normal Unicode code points.                    
                </param>
                <return>
                    StringBuffer A StringBuffer containing the output                    
                </return>
                <throws>
                    ParseException                    
                </throws>
                <draft>
                    ICU 2.8                    
                </draft>
            </javadoc>
            <method name="prepare" type="StringBuffer" line="244">
                <params>
                    <param name="src" type="UCharacterIterator"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="mapOut" type="StringBuffer" line="245"/>
                <declaration name="normOut" type="StringBuffer" line="246"/>
                <scope line="247"/>
                <declaration name="ch" type="int" line="250"/>
                <declaration name="result" type="char" line="251"/>
                <declaration name="iter" type="UCharacterIterator" line="252"/>
                <declaration name="val" type="Values" line="253"/>
                <declaration name="direction" type="int" line="254"/>
                <declaration name="rtlPos" type="int" line="255"/>
                <declaration name="rightToLeft" type="boolean" line="256"/>
                <scope line="257">
                    <scope line="260"/>
                    <scope line="264"/>
                    <scope line="267"/>
                    <scope line="271"/>
                </scope>
                <scope line="276">
                    <scope line="277"/>
                    <scope line="280"/>
                </scope>
            </method>
        </class>
    </source>