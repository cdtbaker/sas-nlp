<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.idn">
        <import package="java.text.ParseException"/>
        <import package="sun.text.normalizer.UCharacter"/>
        <import package="sun.text.normalizer.UTF16"/>
        <class name="Punycode" line="45">
            <comment line="51">
                                
            </comment>
            <comment line="54">
                                
            </comment>
            <comment line="63">
                                
            </comment>
            <comment line="76">
                TODO: eliminate the 256 limitation                
            </comment>
            <javadoc line="45">
                Ported code from ICU punycode.c                
                <author>
                    ram                    
                </author>
            </javadoc>
            <declaration name="BASE" type="int" line="54"/>
            <declaration name="TMIN" type="int" line="55"/>
            <declaration name="TMAX" type="int" line="56"/>
            <declaration name="SKEW" type="int" line="57"/>
            <declaration name="DAMP" type="int" line="58"/>
            <declaration name="INITIAL_BIAS" type="int" line="59"/>
            <declaration name="INITIAL_N" type="int" line="60"/>
            <declaration name="HYPHEN" type="int" line="63"/>
            <declaration name="DELIMITER" type="int" line="64"/>
            <declaration name="ZERO" type="int" line="66"/>
            <declaration name="NINE" type="int" line="67"/>
            <declaration name="SMALL_A" type="int" line="69"/>
            <declaration name="SMALL_Z" type="int" line="70"/>
            <declaration name="CAPITAL_A" type="int" line="72"/>
            <declaration name="CAPITAL_Z" type="int" line="73"/>
            <declaration name="MAX_CP_COUNT" type="int" line="76"/>
            <declaration name="UINT_MAGIC" type="int" line="78"/>
            <declaration name="ULONG_MAGIC" type="long" line="79"/>
            <method name="adaptBias" type="int" line="81">
                <params>
                    <param name="delta" type="int"/>
                    <param name="length" type="int"/>
                    <param name="firstTime" type="boolean"/>
                </params>
                <scope line="82"/>
                <scope line="84"/>
                <declaration name="count" type="int" line="89"/>
                <scope line="90"/>
            </method>
            <declaration name="basicToDigit" type="int[]" line="97"/>
            <javadoc line="97">
                basicToDigit[] contains the numeric value of a basic code
                  point (for use in representing integers) in the range 0 to
                  BASE-1, or -1 if b is does not represent a value.                
            </javadoc>
            <method name="asciiCaseMap" type="char" line="128">
                <params>
                    <param name="b" type="char"/>
                    <param name="uppercase" type="boolean"/>
                </params>
                <scope line="129">
                    <scope line="130"/>
                </scope>
                <scope line="133">
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="141">
                digitToBasic() returns the basic code point whose value
                  (when used for representing integers) is d, which must be in the
                  range 0 to BASE-1. The lowercase form is used unless the uppercase flag is
                  nonzero, in which case the uppercase form is used.                
            </javadoc>
            <method name="digitToBasic" type="char" line="147">
                <params>
                    <param name="digit" type="int"/>
                    <param name="uppercase" type="boolean"/>
                </params>
                <comment line="148">
                                        
                </comment>
                <comment line="149">
                                        
                </comment>
                <scope line="150">
                    <scope line="151"/>
                    <scope line="153"/>
                </scope>
                <scope line="156"/>
            </method>
            <javadoc line="160">
                Converts Unicode to Punycode.
                  The input string must not contain single, unpaired surrogates.
                  The output will be represented as an array of ASCII code points.                
                <param>
                    src                    
                </param>
                <param>
                    caseFlags                    
                </param>
                <return>
                                        
                </return>
                <throws>
                    ParseException                    
                </throws>
            </javadoc>
            <method name="encode" type="StringBuffer" line="170">
                <params>
                    <param name="src" type="StringBuffer"/>
                    <param name="caseFlags" type="boolean[]"/>
                </params>
                <comment line="179">
                    Handle the basic code points and
                     convert extended ones to UTF-32 in cpBuffer (caseFlag in sign bit):                    
                </comment>
                <comment line="187">
                                        
                </comment>
                <comment line="209">
                                        
                </comment>
                <comment line="216">
                                        
                </comment>
                <comment line="225">
                    handledCPCount is the number of code points that have been handled
                     basicLength is the number of basic code points
                     destLength is the number of chars that have been output                    
                </comment>
                <comment line="231">
                                        
                </comment>
                <comment line="236">
                                        
                </comment>
                <comment line="237">
                                        
                </comment>
                <comment line="238">
                    All non-basic code points &lt; n have been handled already.
                     Find the next larger one:                    
                </comment>
                <comment line="243">
                                        
                </comment>
                <comment line="249">
                    Increase delta enough to advance the decoder&apos;s
                     &lt;n,i&gt; state to &lt;m,0&gt;, but guard against overflow:                    
                </comment>
                <comment line="259">
                                        
                </comment>
                <comment line="261">
                                        
                </comment>
                <comment line="265">
                                        
                </comment>
                <comment line="266">
                                        
                </comment>
                <comment line="268">
                    RAM: comment out the old code for conformance with draft-ietf-idn-punycode-03.txt
                    
                    t=k-bias;
                    if(t&lt;TMIN) {
                    t=TMIN;
                    } else if(t&gt;TMAX) {
                    t=TMAX;
                    }                    
                </comment>
                <declaration name="cpBuffer" type="int[]" line="172"/>
                <declaration name="n" type="int" line="173"/>
                <declaration name="c" type="char" line="174"/>
                <declaration name="srcLength" type="int" line="175"/>
                <declaration name="destCapacity" type="int" line="176"/>
                <declaration name="dest" type="char[]" line="177"/>
                <declaration name="result" type="StringBuffer" line="178"/>
                <scope line="185">
                    <scope line="186"/>
                    <scope line="191">
                        <scope line="192"/>
                    </scope>
                    <scope line="200">
                        <scope line="202"/>
                        <scope line="204"/>
                        <scope line="208"/>
                    </scope>
                </scope>
                <scope line="218">
                    <scope line="219"/>
                </scope>
                <scope line="237">
                    <scope line="242">
                        <scope line="244"/>
                    </scope>
                    <scope line="253"/>
                    <scope line="260">
                        <scope line="262"/>
                        <scope line="264">
                            <scope line="266">
                                <scope line="279"/>
                                <scope line="281"/>
                                <scope line="285"/>
                                <scope line="289"/>
                            </scope>
                            <scope line="295"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isBasic" type="boolean" line="311">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <method name="isBasicUpperCase" type="boolean" line="315">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <method name="isSurrogate" type="boolean" line="319">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="322">
                Converts Punycode to Unicode.
                  The Unicode string will be at most as long as the Punycode string.                
                <param>
                    src                    
                </param>
                <param>
                    caseFlags                    
                </param>
                <return>
                                        
                </return>
                <throws>
                    ParseException                    
                </throws>
            </javadoc>
            <method name="decode" type="StringBuffer" line="332">
                <params>
                    <param name="src" type="StringBuffer"/>
                    <param name="caseFlags" type="boolean[]"/>
                </params>
                <comment line="341">
                    Handle the basic code points:
                     Let basicLength be the number of input code points
                     before the last delimiter, or 0 if there is none,
                     then copy the first basicLength code points to the output.
                    
                     The two following loops iterate backward.                    
                </comment>
                <comment line="371">
                                        
                </comment>
                <comment line="377">
                    Main decoding loop:
                     Start just after the last delimiter if any
                     basic code points were copied; start at the beginning otherwise.                    
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="383">
                    in is the index of the next character to be consumed, and
                     destCPCount is the number of code points in the output array.
                    
                     Decode a generalized variable-length integer into delta,
                     which gets added to i.  The overflow checking is easier
                     if we increase i as we go, then subtract off its starting
                     value at the end to obtain delta.                    
                </comment>
                <comment line="392">
                                        
                </comment>
                <comment line="402">
                                        
                </comment>
                <comment line="418">
                                        
                </comment>
                <comment line="424">
                    Modification from sample code:
                     Increments destCPCount here,
                     where needed instead of in for() loop tail.                    
                </comment>
                <comment line="432">
                    i was supposed to wrap around from (incremented) destCPCount to 0,
                     incrementing n each time, so we&apos;ll fix that now:                    
                </comment>
                <comment line="437">
                                        
                </comment>
                <comment line="443">
                                        
                </comment>
                <comment line="444">
                                        
                </comment>
                <comment line="447">
                                        
                </comment>
                <comment line="451">
                                        
                </comment>
                <comment line="456">
                    Handle indexes when supplementary code points are present.
                    
                     In almost all cases, there will be only BMP code points before i
                     and even in the entire string.
                     This is handled with the same efficiency as with UTF-32.
                    
                     Only the rare cases with supplementary code points are handled
                     more slowly - but not too bad since this is an insertion anyway.                    
                </comment>
                <comment line="478">
                                        
                </comment>
                <comment line="490">
                                        
                </comment>
                <comment line="493">
                                        
                </comment>
                <comment line="498">
                                        
                </comment>
                <declaration name="srcLength" type="int" line="333"/>
                <declaration name="result" type="StringBuffer" line="334"/>
                <declaration name="n" type="int" line="335"/>
                <declaration name="b" type="char" line="337"/>
                <declaration name="destCapacity" type="int" line="338"/>
                <declaration name="dest" type="char[]" line="339"/>
                <scope line="349">
                    <scope line="350"/>
                </scope>
                <scope line="356">
                    <scope line="358"/>
                    <scope line="362">
                        <scope line="365"/>
                    </scope>
                </scope>
                <scope line="382">
                    <scope line="392">
                        <scope line="393"/>
                        <scope line="398"/>
                        <scope line="401"/>
                        <scope line="408"/>
                        <scope line="410"/>
                        <scope line="413"/>
                        <scope line="417"/>
                    </scope>
                    <scope line="436"/>
                    <scope line="446"/>
                    <scope line="453">
                        <declaration name="codeUnitIndex" type="int" line="454"/>
                        <scope line="466">
                            <scope line="468"/>
                            <scope line="470"/>
                        </scope>
                        <scope line="473"/>
                        <scope line="479">
                            <scope line="483"/>
                        </scope>
                        <scope line="489"/>
                        <scope line="492"/>
                        <scope line="497">
                            <scope line="500"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>