<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net">
        <import package="java.lang.StringIndexOutOfBoundsException"/>
        <import package="java.io"/>
        <import package="java.util.Vector"/>
        <import package="sun.net.NetworkClient"/>
        <class name="TransferProtocolClient" line="33">
            <extends class="NetworkClient"/>
            <javadoc line="33">
                This class implements that basic intefaces of transfer protocols.
                  It is used by subclasses implementing specific protocols.                
                <author>
                    Jonathan Payne                    
                </author>
                <see>
                    sun.net.ftp.FtpClient                    
                </see>
                <see>
                    sun.net.nntp.NntpClient                    
                </see>
            </javadoc>
            <declaration name="debug" type="boolean" line="43"/>
            <declaration name="serverResponse" type="Vector" line="45"/>
            <javadoc line="45">
                Array of strings (usually 1 entry) for the last reply
                  from the server.                
            </javadoc>
            <declaration name="lastReplyCode" type="int" line="49"/>
            <javadoc line="49">
                code for last reply                
            </javadoc>
            <javadoc line="53">
                Pulls the response from the server and returns the code as a
                  number. Returns -1 on failure.                
            </javadoc>
            <method name="readServerResponse" type="int" line="57">
                <comment line="89">
                    this line doesn&apos;t contain a response code, so                    
                </comment>
                <comment line="96">
                                        
                </comment>
                <comment line="101">
                                        
                </comment>
                <declaration name="replyBuf" type="StringBuffer" line="58"/>
                <declaration name="c" type="int" line="59"/>
                <declaration name="continuingCode" type="int" line="60"/>
                <declaration name="code" type="int" line="61"/>
                <declaration name="response" type="String" line="62"/>
                <scope line="65">
                    <scope line="66">
                        <scope line="67"/>
                    </scope>
                    <scope line="77"/>
                    <scope line="81"/>
                    <scope line="83">
                        <scope line="84"/>
                        <scope line="86"/>
                        <scope line="88"/>
                    </scope>
                    <scope line="95">
                        <scope line="98"/>
                        <scope line="100"/>
                    </scope>
                    <scope line="105"/>
                    <scope line="108"/>
                </scope>
            </method>
            <javadoc line="116">
                Sends command &lt;i&gt;cmd&lt;/i&gt; to the server.                
            </javadoc>
            <method name="sendServer" type="void" line="117">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                converts the server response into a string.                
            </javadoc>
            <method name="getResponseString" type="String" line="125"/>
            <javadoc line="129">
                Returns all server response strings.                
            </javadoc>
            <method name="getResponseStrings" type="Vector" line="130"/>
            <javadoc line="134">
                standard constructor to host &lt;i&gt;host&lt;/i&gt;, port &lt;i&gt;port&lt;/i&gt;.                
            </javadoc>
            <method name="TransferProtocolClient" type="constructor" line="135">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="139">
                creates an uninitialized instance of this class.                
            </javadoc>
            <method name="TransferProtocolClient" type="constructor" line="140"/>
        </class>
    </source>