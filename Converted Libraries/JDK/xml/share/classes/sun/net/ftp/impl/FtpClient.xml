<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.ftp.impl">
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.text.DateFormat"/>
        <import package="java.text.ParseException"/>
        <import package="java.text.SimpleDateFormat"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Calendar"/>
        <import package="java.util.Date"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.Vector"/>
        <import package="java.util.regex.Matcher"/>
        <import package="java.util.regex.Pattern"/>
        <import package="javax.net.ssl.SSLSocket"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.misc.BASE64Encoder"/>
        <import package="sun.net.ftp"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="FtpClient" line="24">
            <extends class="sun.net.ftp.FtpClient"/>
            <declaration name="defaultSoTimeout" type="int" line="25"/>
            <declaration name="defaultConnectTimeout" type="int" line="26"/>
            <declaration name="logger" type="PlatformLogger" line="27"/>
            <declaration name="proxy" type="Proxy" line="28"/>
            <declaration name="server" type="Socket" line="29"/>
            <declaration name="out" type="PrintStream" line="30"/>
            <declaration name="in" type="InputStream" line="31"/>
            <declaration name="readTimeout" type="int" line="32"/>
            <declaration name="connectTimeout" type="int" line="33"/>
            <declaration name="encoding" type="String" line="34"/>
            <declaration name="serverAddr" type="InetSocketAddress" line="35"/>
            <javadoc line="35">
                remember the ftp server name because we may need it                
            </javadoc>
            <declaration name="replyPending" type="boolean" line="39"/>
            <declaration name="loggedIn" type="boolean" line="40"/>
            <declaration name="useCrypto" type="boolean" line="41"/>
            <declaration name="sslFact" type="SSLSocketFactory" line="42"/>
            <declaration name="oldSocket" type="Socket" line="43"/>
            <declaration name="serverResponse" type="Vector&lt;String&gt;" line="44"/>
            <javadoc line="44">
                Array of strings (usually 1 entry) for the last reply from the server.                
            </javadoc>
            <declaration name="lastReplyCode" type="FtpReplyCode" line="48"/>
            <javadoc line="48">
                The last reply code from the ftp daemon.                
            </javadoc>
            <declaration name="welcomeMsg" type="String" line="52"/>
            <javadoc line="52">
                Welcome message from the server, if any.                
            </javadoc>
            <declaration name="passiveMode" type="boolean" line="56"/>
            <declaration name="type" type="TransferType" line="57"/>
            <declaration name="restartOffset" type="long" line="58"/>
            <declaration name="lastTransSize" type="long" line="59"/>
            <declaration name="lastFileName" type="String" line="60"/>
            <declaration name="patStrings" type="String[]" line="61"/>
            <javadoc line="61">
                Static members used by the parser                
            </javadoc>
            <declaration name="patternGroups" type="int[][]" line="65"/>
            <declaration name="patterns" type="Pattern[]" line="66"/>
            <declaration name="linkp" type="Pattern" line="67"/>
            <declaration name="df" type="DateFormat" line="68"/>
            <scope line="69">
                <declaration name="vals" type="int" line="70"/>
                <declaration name="encs" type="String" line="71"/>
                <anonymous_class line="72">
                    <method name="run" type="Object" line="73"/>
                </anonymous_class>
                <scope line="81"/>
                <scope line="84"/>
                <scope line="87"/>
                <scope line="90"/>
                <scope line="94">
                    <scope line="95"/>
                </scope>
                <scope line="99"/>
                <scope line="103"/>
            </scope>
            <javadoc line="107">
                Test the named character encoding to verify that it converts ASCII
                  characters correctly. We have to use an ASCII based encoding, or else
                  the NetworkClients will not work correctly in EBCDIC based systems.
                  However, we cannot just use ASCII or ISO8859_1 universally, because in
                  Asian locales, non-ASCII characters may be embedded in otherwise
                  ASCII based protocols (eg. HTTP). The specifications (RFC2616, 2398)
                  are a little ambiguous in this matter. For instance, RFC2398 [part 2.1]
                  says that the HTTP request URI should be escaped using a defined
                  mechanism, but there is no way to specify in the escaped string what
                  the original character set is. It is not correct to assume that
                  UTF-8 is always used (as in URLs in HTML 4.0).  For this reason,
                  until the specifications are updated to deal with this issue more
                  comprehensively, and more importantly, HTTP servers are known to
                  support these mechanisms, we will maintain the current behavior
                  where it is possible to send non-ASCII characters in their original
                  unescaped form.                
            </javadoc>
            <method name="isASCIISuperset" type="boolean" line="125">
                <params>
                    <param name="encoding" type="String"/>
                </params>
                <declaration name="chkS" type="String" line="126"/>
                <declaration name="chkB" type="byte[]" line="127"/>
                <declaration name="b" type="byte[]" line="128"/>
            </method>
            <class name="DefaultParser" line="131">
                <implements interface="FtpDirParser"/>
                <javadoc line="132">
                    Possible patterns:
                      drwxr-xr-x  1 user01        ftp   512 Jan 29 23:32 prog
                      drwxr-xr-x  1 user01        ftp   512 Jan 29 1997 prog
                      drwxr-xr-x  1 1             1     512 Jan 29 23:32 prog
                      lrwxr-xr-x  1 user01        ftp   512 Jan 29 23:32 prog -&gt; prog2000
                      drwxr-xr-x  1 username      ftp   512 Jan 29 23:32 prog
                      -rw-r--r--  1 jcc      staff     105009 Feb  3 15:05 test.1
                      01-29-97    11:32PM &lt;DIR&gt; prog
                      04/28/2006  09:12a               3,563 genBuffer.sh
                      drwxr-xr-x  folder   0       Jan 29 23:32 prog
                      0 DIR 01-29-97 23:32 PROG                    
                </javadoc>
                <method name="DefaultParser" type="constructor" line="145"/>
                <method name="parseLine" type="FtpDirEntry" line="147">
                    <params>
                        <param name="line" type="String"/>
                    </params>
                    <declaration name="fdate" type="String" line="148"/>
                    <declaration name="fsize" type="String" line="149"/>
                    <declaration name="time" type="String" line="150"/>
                    <declaration name="filename" type="String" line="151"/>
                    <declaration name="permstring" type="String" line="152"/>
                    <declaration name="username" type="String" line="153"/>
                    <declaration name="groupname" type="String" line="154"/>
                    <declaration name="dir" type="boolean" line="155"/>
                    <declaration name="now" type="Calendar" line="156"/>
                    <declaration name="year" type="int" line="157"/>
                    <declaration name="m" type="Matcher" line="158"/>
                    <scope line="159">
                        <scope line="161">
                            <scope line="165"/>
                            <scope line="168"/>
                            <scope line="171"/>
                            <scope line="174"/>
                            <scope line="178"/>
                            <scope line="181"/>
                            <scope line="184"/>
                        </scope>
                    </scope>
                    <scope line="190">
                        <declaration name="d" type="Date" line="191"/>
                        <scope line="192"/>
                        <scope line="195"/>
                        <scope line="198">
                            <declaration name="c" type="int" line="199"/>
                        </scope>
                        <declaration name="m2" type="Matcher" line="205"/>
                        <scope line="206"/>
                        <declaration name="perms" type="boolean[][]" line="209"/>
                        <scope line="210">
                            <scope line="211"/>
                        </scope>
                        <declaration name="file" type="FtpDirEntry" line="215"/>
                    </scope>
                </method>
            </class>
            <class name="MLSxParser" line="225">
                <implements interface="FtpDirParser"/>
                <declaration name="df" type="SimpleDateFormat" line="226"/>
                <method name="parseLine" type="FtpDirEntry" line="227">
                    <params>
                        <param name="line" type="String"/>
                    </params>
                    <declaration name="name" type="String" line="228"/>
                    <declaration name="i" type="int" line="229"/>
                    <scope line="230"/>
                    <scope line="234"/>
                    <declaration name="file" type="FtpDirEntry" line="238"/>
                    <scope line="239">
                        <declaration name="s" type="String" line="240"/>
                        <scope line="242"/>
                        <scope line="246"/>
                        <scope line="251">
                            <declaration name="fact" type="String" line="252"/>
                            <declaration name="value" type="String" line="253"/>
                        </scope>
                    </scope>
                    <declaration name="s" type="String" line="257"/>
                    <scope line="258"/>
                    <scope line="262">
                        <declaration name="d" type="Date" line="263"/>
                        <scope line="264"/>
                        <scope line="267"/>
                        <scope line="269"/>
                    </scope>
                    <scope line="274">
                        <declaration name="d" type="Date" line="275"/>
                        <scope line="276"/>
                        <scope line="279"/>
                        <scope line="281"/>
                    </scope>
                    <scope line="286">
                        <scope line="287"/>
                        <scope line="290"/>
                        <scope line="293"/>
                        <scope line="296"/>
                    </scope>
                </method>
            </class>
            <declaration name="parser" type="FtpDirParser" line="303"/>
            <declaration name="mlsxParser" type="FtpDirParser" line="304"/>
            <declaration name="transPat" type="Pattern" line="305"/>
            <method name="getTransferSize" type="void" line="306">
                <declaration name="response" type="String" line="308"/>
                <scope line="309"/>
                <declaration name="m" type="Matcher" line="312"/>
                <scope line="313">
                    <declaration name="s" type="String" line="314"/>
                </scope>
            </method>
            <javadoc line="318">
                extract the created file name from the response string:
                  226 Transfer complete (unique file name:toto.txt.1).
                  Usually happens when a STOU (store unique) command had been issued.                
            </javadoc>
            <method name="getTransferName" type="void" line="323">
                <declaration name="response" type="String" line="325"/>
                <declaration name="i" type="int" line="326"/>
                <declaration name="e" type="int" line="327"/>
                <scope line="328"/>
            </method>
            <javadoc line="333">
                Pulls the response from the server and returns the code as a
                  number. Returns -1 on failure.                
            </javadoc>
            <method name="readServerResponse" type="int" line="337">
                <declaration name="replyBuf" type="StringBuffer" line="338"/>
                <declaration name="c" type="int" line="339"/>
                <declaration name="continuingCode" type="int" line="340"/>
                <declaration name="code" type="int" line="341"/>
                <declaration name="response" type="String" line="342"/>
                <scope line="344">
                    <scope line="345">
                        <scope line="346">
                            <scope line="347"/>
                        </scope>
                        <scope line="352"/>
                    </scope>
                    <scope line="358"/>
                    <scope line="361"/>
                    <scope line="364">
                        <scope line="365"/>
                        <scope line="368"/>
                        <scope line="371"/>
                    </scope>
                    <scope line="376">
                        <scope line="377"/>
                        <scope line="380"/>
                    </scope>
                    <scope line="385"/>
                    <scope line="389"/>
                </scope>
            </method>
            <javadoc line="395">
                Sends command &lt;i&gt;cmd&lt;/i&gt; to the server.                
            </javadoc>
            <method name="sendServer" type="void" line="398">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <scope line="400"/>
            </method>
            <javadoc line="404">
                converts the server response into a string.                
            </javadoc>
            <method name="getResponseString" type="String" line="407"/>
            <javadoc line="410">
                Returns all server response strings.                
            </javadoc>
            <method name="getResponseStrings" type="Vector<String>" line="413"/>
            <javadoc line="416">
                Read the reply from the FTP server.                
                <return>
                    <code>true</code> if the command was successful                    
                </return>
                <throws>
                    IOException if an error occured                    
                </throws>
            </javadoc>
            <method name="readReply" type="boolean" line="421">
                <scope line="423"/>
                <scope line="427">
                    <scope line="428"/>
                </scope>
            </method>
            <javadoc line="435">
                Sends a command to the FTP server and returns the error code
                  (which can be a &quot;success&quot;) sent by the server.                
                <param>
                    cmd                    
                </param>
                <return>
                    <code>true</code> if the command was successful                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="issueCommand" type="boolean" line="442">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <scope line="443"/>
                <scope line="446">
                    <scope line="447"/>
                    <scope line="450"/>
                </scope>
            </method>
            <javadoc line="456">
                Send a command to the FTP server and check for success.                
                <param>
                    cmd String containing the command                    
                </param>
                <throws>
                    FtpProtocolException if an error occured                    
                </throws>
            </javadoc>
            <method name="issueCommandCheck" type="void" line="461">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <scope line="462"/>
            </method>
            <declaration name="epsvPat" type="Pattern" line="466"/>
            <declaration name="pasvPat" type="Pattern" line="467"/>
            <javadoc line="468">
                Opens a &quot;PASSIVE&quot; connection with the server and returns the connected
                  &lt;code&gt;Socket&lt;/code&gt;.                
                <return>
                    the connected <code>Socket</code>                    
                </return>
                <throws>
                    IOException if the connection was unsuccessful.                    
                </throws>
            </javadoc>
            <method name="openPassiveDataConnection" type="Socket" line="474">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <declaration name="serverAnswer" type="String" line="475"/>
                <declaration name="port" type="int" line="476"/>
                <declaration name="dest" type="InetSocketAddress" line="477"/>
                <scope line="478">
                    <scope line="481"/>
                    <declaration name="m" type="Matcher" line="484"/>
                    <scope line="485"/>
                    <declaration name="s" type="String" line="488"/>
                    <declaration name="add" type="InetAddress" line="490"/>
                    <scope line="491"/>
                    <scope line="494"/>
                </scope>
                <scope line="498">
                    <scope line="501"/>
                    <declaration name="m" type="Matcher" line="504"/>
                    <scope line="505"/>
                    <declaration name="s" type="String" line="509"/>
                </scope>
                <declaration name="s" type="Socket" line="512"/>
                <scope line="513">
                    <scope line="514">
                        <anonymous_class line="515">
                            <method name="run" type="Socket" line="516"/>
                        </anonymous_class>
                    </scope>
                    <scope line="522"/>
                </scope>
                <scope line="526"/>
                <scope line="530"/>
                <scope line="533">
                    <scope line="534"/>
                    <scope line="537"/>
                </scope>
                <scope line="541"/>
                <scope line="544"/>
                <scope line="547">
                    <scope line="548"/>
                    <scope line="551"/>
                </scope>
                <scope line="555">
                    <scope line="557"/>
                </scope>
            </method>
            <javadoc line="564">
                Opens a data connection with the server according to the set mode
                  (ACTIVE or PASSIVE) then send the command passed as an argument.                
                <param>
                    cmd the <code>String</code> containing the command to execute                    
                </param>
                <return>
                    the connected <code>Socket</code>                    
                </return>
                <throws>
                    IOException if the connection or command failed                    
                </throws>
            </javadoc>
            <method name="openDataConnection" type="Socket" line="571">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <declaration name="clientSocket" type="Socket" line="572"/>
                <scope line="573">
                    <scope line="574"/>
                    <scope line="577">
                        <declaration name="errmsg" type="String" line="578"/>
                        <scope line="579"/>
                    </scope>
                </scope>
                <declaration name="portSocket" type="ServerSocket" line="584"/>
                <declaration name="myAddress" type="InetAddress" line="585"/>
                <declaration name="portCmd" type="String" line="586"/>
                <scope line="587"/>
                <scope line="591">
                    <scope line="593"/>
                    <scope line="597">
                        <declaration name="addr" type="byte[]" line="599"/>
                        <scope line="600"/>
                    </scope>
                    <scope line="607"/>
                    <scope line="610">
                        <scope line="611"/>
                    </scope>
                    <scope line="616"/>
                    <scope line="619">
                        <scope line="620"/>
                    </scope>
                </scope>
                <scope line="625"/>
                <scope line="628">
                    <scope line="629"/>
                    <scope line="632"/>
                </scope>
            </method>
            <method name="createInputStream" type="InputStream" line="638">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="639"/>
            </method>
            <method name="createOutputStream" type="OutputStream" line="644">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="645"/>
            </method>
            <javadoc line="650">
                Creates an instance of FtpClient. The client is not connected to any
                  server yet.                
            </javadoc>
            <method name="FtpClient" type="constructor" line="654"/>
            <javadoc line="656">
                Creates an instance of FtpClient. The client is not connected to any
                  server yet.                
            </javadoc>
            <method name="create" type="sun.net.ftp.FtpClient" line="660"/>
            <javadoc line="663">
                Set the transfer mode to &lt;I&gt;passive&lt;/I&gt;. In that mode, data connections
                  are established by having the client connect to the server.
                  This is the recommended default mode as it will work best through
                  firewalls and NATs.                
                <return>
                    This FtpClient                    
                </return>
                <see>
                    #setActiveMode()                    
                </see>
            </javadoc>
            <method name="enablePassiveMode" type="sun.net.ftp.FtpClient" line="671">
                <params>
                    <param name="passive" type="boolean"/>
                </params>
            </method>
            <javadoc line="675">
                Gets the current transfer mode.                
                <return>
                    the current <code>FtpTransferMode</code>                    
                </return>
            </javadoc>
            <method name="isPassiveModeEnabled" type="boolean" line="679"/>
            <javadoc line="682">
                Sets the timeout value to use when connecting to the server,                
                <param>
                    timeout the timeout value, in milliseconds, to use for the connect
                      operation. A value of zero or less, means use the default timeout.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
            </javadoc>
            <method name="setConnectTimeout" type="sun.net.ftp.FtpClient" line="688">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="692">
                Returns the current connection timeout value.                
                <return>
                    the value, in milliseconds, of the current connect timeout.                    
                </return>
                <see>
                    #setConnectTimeout(int)                    
                </see>
            </javadoc>
            <method name="getConnectTimeout" type="int" line="697"/>
            <javadoc line="700">
                Sets the timeout value to use when reading from the server,                
                <param>
                    timeout the timeout value, in milliseconds, to use for the read
                      operation. A value of zero or less, means use the default timeout.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
            </javadoc>
            <method name="setReadTimeout" type="sun.net.ftp.FtpClient" line="706">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="710">
                Returns the current read timeout value.                
                <return>
                    the value, in milliseconds, of the current read timeout.                    
                </return>
                <see>
                    #setReadTimeout(int)                    
                </see>
            </javadoc>
            <method name="getReadTimeout" type="int" line="715"/>
            <method name="setProxy" type="sun.net.ftp.FtpClient" line="718">
                <params>
                    <param name="p" type="Proxy"/>
                </params>
            </method>
            <javadoc line="722">
                Get the proxy of this FtpClient                
                <return>
                    the <code>Proxy</code>, this client is using, or <code>null</code>
                      if none is used.                    
                </return>
                <see>
                    #setProxy(Proxy)                    
                </see>
            </javadoc>
            <method name="getProxy" type="Proxy" line="728"/>
            <javadoc line="731">
                Connects to the specified destination.                
                <param>
                    dest the <code>InetSocketAddress</code> to connect to.                    
                </param>
                <throws>
                    IOException if the connection fails.                    
                </throws>
            </javadoc>
            <method name="tryConnect" type="void" line="736">
                <params>
                    <param name="dest" type="InetSocketAddress"/>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="737"/>
                <scope line="741"/>
                <scope line="744"/>
            </method>
            <method name="doConnect" type="Socket" line="749">
                <params>
                    <param name="dest" type="InetSocketAddress"/>
                    <param name="timeout" type="int"/>
                </params>
                <declaration name="s" type="Socket" line="750"/>
                <scope line="751">
                    <scope line="752">
                        <anonymous_class line="753">
                            <method name="run" type="Socket" line="754"/>
                        </anonymous_class>
                    </scope>
                    <scope line="760"/>
                </scope>
                <scope line="764"/>
                <scope line="767"/>
                <scope line="770">
                    <scope line="771"/>
                    <scope line="774">
                        <scope line="775"/>
                        <scope line="778"/>
                    </scope>
                </scope>
                <scope line="783"/>
                <scope line="786"/>
            </method>
            <method name="disconnect" type="void" line="791">
                <scope line="792"/>
            </method>
            <javadoc line="805">
                Tests whether this client is connected or not to a server.                
                <return>
                    <code>true</code> if the client is connected.                    
                </return>
            </javadoc>
            <method name="isConnected" type="boolean" line="809"/>
            <method name="getServerAddress" type="SocketAddress" line="812"/>
            <method name="connect" type="sun.net.ftp.FtpClient" line="815">
                <params>
                    <param name="dest" type="SocketAddress"/>
                </params>
            </method>
            <javadoc line="818">
                Connects the FtpClient to the specified destination.                
                <param>
                    dest the address of the destination server                    
                </param>
                <throws>
                    IOException if connection failed.                    
                </throws>
            </javadoc>
            <method name="connect" type="sun.net.ftp.FtpClient" line="823">
                <params>
                    <param name="dest" type="SocketAddress"/>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="824"/>
                <scope line="829"/>
            </method>
            <method name="tryLogin" type="void" line="835">
                <params>
                    <param name="user" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="837">
                    <scope line="838"/>
                </scope>
            </method>
            <javadoc line="843">
                Attempts to log on the server with the specified user name and password.                
                <param>
                    user The user name                    
                </param>
                <param>
                    password The password for that user                    
                </param>
                <return>
                    <code>true</code> if the login was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission                    
                </throws>
            </javadoc>
            <method name="login" type="sun.net.ftp.FtpClient" line="850">
                <params>
                    <param name="user" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="851"/>
                <scope line="854"/>
                <declaration name="l" type="String" line="858"/>
                <declaration name="sb" type="StringBuffer" line="859"/>
                <scope line="860">
                    <scope line="862">
                        <scope line="863"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="873">
                Attempts to log on the server with the specified user name, password and
                  account name.                
                <param>
                    user The user name                    
                </param>
                <param>
                    password The password for that user.                    
                </param>
                <param>
                    account The account name for that user.                    
                </param>
                <return>
                    <code>true</code> if the login was successful.                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
            </javadoc>
            <method name="login" type="sun.net.ftp.FtpClient" line="882">
                <params>
                    <param name="user" type="String"/>
                    <param name="password" type="char[]"/>
                    <param name="account" type="String"/>
                </params>
                <scope line="883"/>
                <scope line="886"/>
                <scope line="890"/>
                <declaration name="sb" type="StringBuffer" line="893"/>
                <scope line="894">
                    <scope line="895">
                        <scope line="896">
                            <scope line="897"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="908">
                Logs out the current user. This is in effect terminates the current
                  session and the connection to the server will be closed.                
            </javadoc>
            <method name="close" type="void" line="912">
                <scope line="913"/>
            </method>
            <javadoc line="919">
                Checks whether the client is logged in to the server or not.                
                <return>
                    <code>true</code> if the client has already completed a login.                    
                </return>
            </javadoc>
            <method name="isLoggedIn" type="boolean" line="923"/>
            <javadoc line="926">
                Changes to a specific directory on a remote FTP server                
                <param>
                    remoteDirectory path of the directory to CD to.                    
                </param>
                <return>
                    <code>true</code> if the operation was successful.                    
                </return>
                <exception>
                    <code>FtpProtocolException</code>                    
                </exception>
            </javadoc>
            <method name="changeDirectory" type="sun.net.ftp.FtpClient" line="932">
                <params>
                    <param name="remoteDirectory" type="String"/>
                </params>
                <scope line="933"/>
            </method>
            <javadoc line="939">
                Changes to the parent directory, sending the CDUP command to the server.                
                <return>
                    <code>true</code> if the command was successful.                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="changeToParentDirectory" type="sun.net.ftp.FtpClient" line="944"/>
            <javadoc line="948">
                Returns the server current working directory, or &lt;code&gt;null&lt;/code&gt; if
                  the PWD command failed.                
                <return>
                    a <code>String</code> containing the current working directory,
                      or <code>null</code>                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="getWorkingDirectory" type="String" line="955">
                <declaration name="answ" type="String" line="957"/>
                <scope line="958"/>
            </method>
            <javadoc line="963">
                Sets the restart offset to the specified value.  That value will be
                  sent through a &lt;code&gt;REST&lt;/code&gt; command to server before a file
                  transfer and has the effect of resuming a file transfer from the
                  specified point. After a transfer the restart offset is set back to
                  zero.                
                <param>
                    offset the offset in the remote file at which to start the next
                      transfer. This must be a value greater than or equal to zero.                    
                </param>
                <throws>
                    IllegalArgumentException if the offset is negative.                    
                </throws>
            </javadoc>
            <method name="setRestartOffset" type="sun.net.ftp.FtpClient" line="973">
                <params>
                    <param name="offset" type="long"/>
                </params>
                <scope line="974"/>
            </method>
            <javadoc line="980">
                Retrieves a file from the ftp server and writes it to the specified
                  &lt;code&gt;OutputStream&lt;/code&gt;.
                  If the restart offset was set, then a &lt;code&gt;REST&lt;/code&gt; command will be
                  sent before the RETR in order to restart the tranfer from the specified
                  offset.
                  The &lt;code&gt;OutputStream&lt;/code&gt; is not closed by this method at the end
                  of the transfer.                
                <param>
                    name a <code>String<code> containing the name of the file to
                      retreive from the server.                    
                </param>
                <param>
                    local the <code>OutputStream</code> the file should be written to.                    
                </param>
                <throws>
                    IOException if the transfer fails.                    
                </throws>
            </javadoc>
            <method name="getFile" type="sun.net.ftp.FtpClient" line="993">
                <params>
                    <param name="name" type="String"/>
                    <param name="local" type="OutputStream"/>
                </params>
                <declaration name="mtu" type="int" line="994"/>
                <scope line="995">
                    <declaration name="s" type="Socket" line="996"/>
                    <scope line="997"/>
                    <scope line="1000"/>
                    <declaration name="remote" type="InputStream" line="1005"/>
                    <declaration name="buf" type="byte[]" line="1006"/>
                    <declaration name="l" type="int" line="1007"/>
                    <scope line="1008">
                        <scope line="1009"/>
                    </scope>
                </scope>
                <scope line="1015">
                    <declaration name="s" type="Socket" line="1016"/>
                    <declaration name="remote" type="InputStream" line="1018"/>
                    <declaration name="buf" type="byte[]" line="1019"/>
                    <declaration name="l" type="int" line="1020"/>
                    <scope line="1021">
                        <scope line="1022"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1030">
                Retrieves a file from the ftp server, using the RETR command, and
                  returns the InputStream from the established data connection.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is done reading from the returned stream.                
                <param>
                    name the name of the remote file                    
                </param>
                <return>
                    the {@link java.io.InputStream} from the data connection, or
                      <code>null</code> if the command was unsuccessful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="getFileStream" type="InputStream" line="1039">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="s" type="Socket" line="1040"/>
                <scope line="1041">
                    <scope line="1042"/>
                    <scope line="1045"/>
                    <scope line="1048"/>
                </scope>
                <scope line="1056"/>
            </method>
            <javadoc line="1062">
                Transfers a file from the client to the server (aka a &lt;I&gt;put&lt;/I&gt;)
                  by sending the STOR or STOU command, depending on the
                  &lt;code&gt;unique&lt;/code&gt; argument, and returns the &lt;code&gt;OutputStream&lt;/code&gt;
                  from the established data connection.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished writing to the stream.
                  A new file is created at the server site if the file specified does
                  not already exist.
                  If &lt;code&gt;unique&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the resultant file
                  is to be created under a name unique to that directory, meaning
                  it will not overwrite an existing file, instead the server will
                  generate a new, unique, file name.
                  The name of the remote file can be retrieved, after completion of the
                  transfer, by calling {@link #getLastFileName()}.                
                <param>
                    name the name of the remote file to write.                    
                </param>
                <param>
                    unique <code>true</code> if the remote files should be unique,
                      in which case the STOU command will be used.                    
                </param>
                <return>
                    the {@link java.io.OutputStream} from the data connection or
                      <code>null</code> if the command was unsuccessful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="putFileStream" type="OutputStream" line="1083">
                <params>
                    <param name="name" type="String"/>
                    <param name="unique" type="boolean"/>
                </params>
                <declaration name="cmd" type="String" line="1084"/>
                <declaration name="s" type="Socket" line="1085"/>
                <scope line="1086"/>
                <scope line="1089"/>
            </method>
            <javadoc line="1094">
                Transfers a file from the client to the server (aka a &lt;I&gt;put&lt;/I&gt;)
                  by sending the STOR command. The content of the &lt;code&gt;InputStream&lt;/code&gt;
                  passed in argument is written into the remote file, overwriting any
                  existing data.
                  A new file is created at the server site if the file specified does
                  not already exist.                
                <param>
                    name the name of the remote file to write.                    
                </param>
                <param>
                    local the <code>InputStream</code> that points to the data to
                      transfer.                    
                </param>
                <param>
                    unique <code>true</code> if the remote file should be unique
                      (i.e. not already existing), <code>false</code> otherwise.                    
                </param>
                <return>
                    <code>true</code> if the transfer was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <see>
                    #getLastFileName()                    
                </see>
            </javadoc>
            <method name="putFile" type="sun.net.ftp.FtpClient" line="1110">
                <params>
                    <param name="name" type="String"/>
                    <param name="local" type="InputStream"/>
                    <param name="unique" type="boolean"/>
                </params>
                <declaration name="cmd" type="String" line="1111"/>
                <declaration name="mtu" type="int" line="1112"/>
                <scope line="1113">
                    <declaration name="s" type="Socket" line="1114"/>
                    <declaration name="remote" type="OutputStream" line="1115"/>
                    <declaration name="buf" type="byte[]" line="1116"/>
                    <declaration name="l" type="int" line="1117"/>
                    <scope line="1118">
                        <scope line="1119"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1127">
                Sends the APPE command to the server in order to transfer a data stream
                  passed in argument and append it to the content of the specified remote
                  file.                
                <param>
                    name A <code>String</code> containing the name of the remote file
                      to append to.                    
                </param>
                <param>
                    local The <code>InputStream</code> providing access to the data
                      to be appended.                    
                </param>
                <return>
                    <code>true</code> if the transfer was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="appendFile" type="sun.net.ftp.FtpClient" line="1138">
                <params>
                    <param name="name" type="String"/>
                    <param name="local" type="InputStream"/>
                </params>
                <declaration name="mtu" type="int" line="1139"/>
                <declaration name="s" type="Socket" line="1140"/>
                <declaration name="remote" type="OutputStream" line="1141"/>
                <declaration name="buf" type="byte[]" line="1142"/>
                <declaration name="l" type="int" line="1143"/>
                <scope line="1144">
                    <scope line="1145"/>
                </scope>
            </method>
            <javadoc line="1152">
                Renames a file on the server.                
                <param>
                    from the name of the file being renamed                    
                </param>
                <param>
                    to the new name for the file                    
                </param>
                <throws>
                    IOException if the command fails                    
                </throws>
            </javadoc>
            <method name="rename" type="sun.net.ftp.FtpClient" line="1158">
                <params>
                    <param name="from" type="String"/>
                    <param name="to" type="String"/>
                </params>
            </method>
            <javadoc line="1163">
                Deletes a file on the server.                
                <param>
                    name a <code>String</code> containing the name of the file
                      to delete.                    
                </param>
                <return>
                    <code>true</code> if the command was successful                    
                </return>
                <throws>
                    IOException if an error occured during the exchange                    
                </throws>
            </javadoc>
            <method name="deleteFile" type="sun.net.ftp.FtpClient" line="1170">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1174">
                Creates a new directory on the server.                
                <param>
                    name a <code>String</code> containing the name of the directory
                      to create.                    
                </param>
                <return>
                    <code>true</code> if the operation was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the exchange                    
                </throws>
            </javadoc>
            <method name="makeDirectory" type="sun.net.ftp.FtpClient" line="1181">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1185">
                Removes a directory on the server.                
                <param>
                    name a <code>String</code> containing the name of the directory
                      to remove.                    
                </param>
                <return>
                    <code>true</code> if the operation was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the exchange.                    
                </throws>
            </javadoc>
            <method name="removeDirectory" type="sun.net.ftp.FtpClient" line="1192">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1196">
                Sends a No-operation command. It&apos;s useful for testing the connection
                  status or as a &lt;I&gt;keep alive&lt;/I&gt; mechanism.                
                <throws>
                    FtpProtocolException if the command fails                    
                </throws>
            </javadoc>
            <method name="noop" type="sun.net.ftp.FtpClient" line="1201"/>
            <javadoc line="1205">
                Sends the STAT command to the server.
                  This can be used while a data connection is open to get a status
                  on the current transfer, in that case the parameter should be
                  &lt;code&gt;null&lt;/code&gt;.
                  If used between file transfers, it may have a pathname as argument
                  in which case it will work as the LIST command except no data
                  connection will be created.                
                <param>
                    name an optional <code>String</code> containing the pathname
                      the STAT command should apply to.                    
                </param>
                <return>
                    the response from the server or <code>null</code> if the
                      command failed.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="getStatus" type="String" line="1219">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="resp" type="Vector&lt;String&gt;" line="1221"/>
                <declaration name="sb" type="StringBuffer" line="1222"/>
                <scope line="1223"/>
            </method>
            <javadoc line="1228">
                Sends the FEAT command to the server and returns the list of supported
                  features in the form of strings.
                  The features are the supported commands, like AUTH TLS, PROT or PASV.
                  See the RFCs for a complete list.
                  Note that not all FTP servers support that command, in which case
                  the method will return &lt;code&gt;null&lt;/code&gt;                
                <return>
                    a <code>List</code> of <code>Strings</code> describing the
                      supported additional features, or <code>null</code>
                      if the command is not supported.                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
            </javadoc>
            <method name="getFeatures" type="List<String>" line="1240">
                <declaration name="features" type="ArrayList&lt;String&gt;" line="1241"/>
                <declaration name="resp" type="Vector&lt;String&gt;" line="1243"/>
                <scope line="1244">
                    <declaration name="s" type="String" line="1245"/>
                </scope>
            </method>
            <javadoc line="1250">
                sends the ABOR command to the server.
                  It tells the server to stop the previous command or transfer.                
                <return>
                    <code>true</code> if the command was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="abort" type="sun.net.ftp.FtpClient" line="1256"/>
            <javadoc line="1260">
                Some methods do not wait until completion before returning, so this
                  method can be called to wait until completion. This is typically the case
                  with commands that trigger a transfer like {@link #getFileStream(String)}.
                  So this method should be called before accessing information related to
                  such a command.
                  &lt;p&gt;This method will actually block reading on the command channel for a
                  notification from the server that the command is finished. Such a
                  notification often carries extra information concerning the completion
                  of the pending action (e.g. number of bytes transfered).&lt;/p&gt;
                  &lt;p&gt;Note that this will return true immediately if no command or action
                  is pending&lt;/p&gt;
                  &lt;p&gt;It should be also noted that most methods issuing commands to the ftp
                  server will call this method if a previous command is pending.
                  &lt;p&gt;Example of use:
                  &lt;pre&gt;
                  InputStream in = cl.getFileStream(&quot;file&quot;);
                  ...
                  cl.completePending();
                  long size = cl.getLastTransferSize();
                  &lt;/pre&gt;
                  On the other hand, it&apos;s not necessary in a case like:
                  &lt;pre&gt;
                  InputStream in = cl.getFileStream(&quot;file&quot;);
                  // read content
                  ...
                  cl.logout();
                  &lt;/pre&gt;
                  &lt;p&gt;Since {@link #logout()} will call completePending() if necessary.&lt;/p&gt;                
                <return>
                    <code>true</code> if the completion was successful or if no
                      action was pending.                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="completePending" type="sun.net.ftp.FtpClient" line="1293">
                <scope line="1294">
                    <scope line="1296"/>
                </scope>
            </method>
            <javadoc line="1302">
                Reinitializes the USER parameters on the FTP server                
                <throws>
                    FtpProtocolException if the command fails                    
                </throws>
            </javadoc>
            <method name="reInit" type="sun.net.ftp.FtpClient" line="1306">
                <scope line="1309">
                    <scope line="1310">
                        <declaration name="session" type="javax.net.ssl.SSLSession" line="1311"/>
                        <scope line="1315"/>
                        <scope line="1318"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1327">
                Changes the transfer type (binary, ascii, ebcdic) and issue the
                  proper command (e.g. TYPE A) to the server.                
                <param>
                    type the <code>FtpTransferType</code> to use.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during transmission.                    
                </throws>
            </javadoc>
            <method name="setType" type="sun.net.ftp.FtpClient" line="1334">
                <params>
                    <param name="type" type="TransferType"/>
                </params>
                <declaration name="cmd" type="String" line="1335"/>
                <scope line="1337"/>
                <scope line="1340"/>
                <scope line="1343"/>
            </method>
            <javadoc line="1349">
                Issues a LIST command to the server to get the current directory
                  listing, and returns the InputStream from the data connection.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished writing to the stream.                
                <param>
                    path the pathname of the directory to list, or <code>null</code>
                      for the current working directory.                    
                </param>
                <return>
                    the <code>InputStream</code> from the resulting data connection                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <see>
                    #changeDirectory(String)                    
                </see>
                <see>
                    #listFiles(String)                    
                </see>
            </javadoc>
            <method name="list" type="InputStream" line="1360">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="s" type="Socket" line="1361"/>
                <scope line="1363"/>
            </method>
            <javadoc line="1368">
                Issues a NLST path command to server to get the specified directory
                  content. It differs from {@link #list(String)} method by the fact that
                  it will only list the file names which would make the parsing of the
                  somewhat easier.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished writing to the stream.                
                <param>
                    path a <code>String</code> containing the pathname of the
                      directory to list or <code>null</code> for the current working
                      directory.                    
                </param>
                <return>
                    the <code>InputStream</code> from the resulting data connection                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
            </javadoc>
            <method name="nameList" type="InputStream" line="1380">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="s" type="Socket" line="1381"/>
                <scope line="1383"/>
            </method>
            <javadoc line="1388">
                Issues the SIZE [path] command to the server to get the size of a
                  specific file on the server.
                  Note that this command may not be supported by the server. In which
                  case -1 will be returned.                
                <param>
                    path a <code>String</code> containing the pathname of the
                      file.                    
                </param>
                <return>
                    a <code>long</code> containing the size of the file or -1 if
                      the server returned an error, which can be checked with{@link #getLastReplyCode()}.                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
            </javadoc>
            <method name="getSize" type="long" line="1399">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="1400"/>
                <scope line="1404">
                    <declaration name="s" type="String" line="1405"/>
                </scope>
            </method>
            <declaration name="MDTMformats" type="String[]" line="1411"/>
            <declaration name="dateFormats" type="SimpleDateFormat[]" line="1412"/>
            <scope line="1413">
                <scope line="1414"/>
            </scope>
            <javadoc line="1419">
                Issues the MDTM [path] command to the server to get the modification
                  time of a specific file on the server.
                  Note that this command may not be supported by the server, in which
                  case &lt;code&gt;null&lt;/code&gt; will be returned.                
                <param>
                    path a <code>String</code> containing the pathname of the file.                    
                </param>
                <return>
                    a <code>Date</code> representing the last modification time
                      or <code>null</code> if the server returned an error, which
                      can be checked with {@link #getLastReplyCode()}.                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
            </javadoc>
            <method name="getLastModified" type="Date" line="1430">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="1432">
                    <declaration name="s" type="String" line="1433"/>
                    <declaration name="d" type="Date" line="1434"/>
                    <scope line="1435">
                        <scope line="1436"/>
                        <scope line="1439"/>
                        <scope line="1441"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1448">
                Sets the parser used to handle the directory output to the specified
                  one. By default the parser is set to one that can handle most FTP
                  servers output (Unix base mostly). However it may be necessary for
                  and application to provide its own parser due to some uncommon
                  output format.                
                <param>
                    p The <code>FtpDirParser</code> to use.                    
                </param>
                <see>
                    #listFiles(String)                    
                </see>
            </javadoc>
            <method name="setDirParser" type="sun.net.ftp.FtpClient" line="1457">
                <params>
                    <param name="p" type="FtpDirParser"/>
                </params>
            </method>
            <class name="FtpFileIterator" line="1461">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="FtpDirEntry"/>
                    </type_params>
                </implements>
                <implements interface="Closeable"/>
                <declaration name="in" type="BufferedReader" line="1462"/>
                <declaration name="nextFile" type="FtpDirEntry" line="1463"/>
                <declaration name="fparser" type="FtpDirParser" line="1464"/>
                <declaration name="eof" type="boolean" line="1465"/>
                <method name="FtpFileIterator" type="constructor" line="1466">
                    <params>
                        <param name="p" type="FtpDirParser"/>
                        <param name="in" type="BufferedReader"/>
                    </params>
                </method>
                <method name="readNext" type="void" line="1471">
                    <scope line="1473"/>
                    <declaration name="line" type="String" line="1476"/>
                    <scope line="1477">
                        <scope line="1478">
                            <scope line="1480">
                                <scope line="1482"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1490"/>
                </method>
                <method name="hasNext" type="boolean" line="1494"/>
                <method name="next" type="FtpDirEntry" line="1497">
                    <declaration name="ret" type="FtpDirEntry" line="1498"/>
                </method>
                <method name="remove" type="void" line="1502"/>
                <method name="close" type="void" line="1505">
                    <scope line="1506"/>
                </method>
            </class>
            <javadoc line="1513">
                Issues a MLSD command to the server to get the specified directory
                  listing and applies the current parser to create an Iterator of{@link java.net.ftp.FtpDirEntry}. Note that the Iterator returned is also a{@link java.io.Closeable}.
                  If the server doesn&apos;t support the MLSD command, the LIST command is used
                  instead.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished iterating through the files.                
                <param>
                    path the pathname of the directory to list or <code>null</code>
                      for the current working directoty.                    
                </param>
                <return>
                    a <code>Iterator</code> of files or <code>null</code> if the
                      command failed.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission                    
                </throws>
                <see>
                    #setDirParser(FtpDirParser)                    
                </see>
                <see>
                    #changeDirectory(String)                    
                </see>
            </javadoc>
            <method name="listFiles" type="Iterator<FtpDirEntry>" line="1527">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="s" type="Socket" line="1528"/>
                <declaration name="sin" type="BufferedReader" line="1529"/>
                <scope line="1530"/>
                <scope line="1533"/>
                <scope line="1535"/>
                <scope line="1539">
                    <scope line="1541"/>
                </scope>
            </method>
            <method name="sendSecurityData" type="boolean" line="1548">
                <params>
                    <param name="buf" type="byte[]"/>
                </params>
                <declaration name="encoder" type="BASE64Encoder" line="1549"/>
                <declaration name="s" type="String" line="1550"/>
            </method>
            <method name="getSecurityData" type="byte[]" line="1553">
                <declaration name="s" type="String" line="1554"/>
                <scope line="1555">
                    <declaration name="decoder" type="BASE64Decoder" line="1556"/>
                    <scope line="1557"/>
                    <scope line="1560"/>
                </scope>
            </method>
            <javadoc line="1565">
                Attempts to use Kerberos GSSAPI as an authentication mechanism with the
                  ftp server. This will issue an &lt;code&gt;AUTH GSSAPI&lt;/code&gt; command, and if
                  it is accepted by the server, will followup with &lt;code&gt;ADAT&lt;/code&gt;
                  command to exchange the various tokens until authentification is
                  successful. This conforms to Appendix I of RFC 2228.                
                <return>
                    <code>true</code> if authentication was successful.                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
            </javadoc>
            <method name="useKerberos" type="sun.net.ftp.FtpClient" line="1574"/>
            <javadoc line="1577">
                Returns the Welcome string the server sent during initial connection.                
                <return>
                    a <code>String</code> containing the message the server
                      returned during connection or <code>null</code>.                    
                </return>
            </javadoc>
            <method name="getWelcomeMsg" type="String" line="1582"/>
            <javadoc line="1585">
                Returns the last reply code sent by the server.                
                <return>
                    the lastReplyCode                    
                </return>
            </javadoc>
            <method name="getLastReplyCode" type="FtpReplyCode" line="1589"/>
            <javadoc line="1592">
                Returns the last response string sent by the server.                
                <return>
                    the message string, which can be quite long, last returned
                      by the server.                    
                </return>
            </javadoc>
            <method name="getLastResponseString" type="String" line="1597">
                <declaration name="sb" type="StringBuffer" line="1598"/>
                <scope line="1599">
                    <scope line="1600">
                        <scope line="1601"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1608">
                Returns, when available, the size of the latest started transfer.
                  This is retreived by parsing the response string received as an initial
                  response to a RETR or similar request.                
                <return>
                    the size of the latest transfer or -1 if either there was no
                      transfer or the information was unavailable.                    
                </return>
            </javadoc>
            <method name="getLastTransferSize" type="long" line="1615"/>
            <javadoc line="1618">
                Returns, when available, the remote name of the last transfered file.
                  This is mainly useful for &quot;put&quot; operation when the unique flag was
                  set since it allows to recover the unique file name created on the
                  server which may be different from the one submitted with the command.                
                <return>
                    the name the latest transfered file remote name, or
                      <code>null</code> if that information is unavailable.                    
                </return>
            </javadoc>
            <method name="getLastFileName" type="String" line="1626"/>
            <javadoc line="1629">
                Attempts to switch to a secure, encrypted connection. This is done by
                  sending the &quot;AUTH TLS&quot; command.
                  &lt;p&gt;See &lt;a href=&quot;http://www.ietf.org/rfc/rfc4217.txt&quot;&gt;RFC 4217&lt;/a&gt;&lt;/p&gt;
                  If successful this will establish a secure command channel with the
                  server, it will also make it so that all other transfers (e.g. a RETR
                  command) will be done over an encrypted channel as well unless a{@link #reInit()} command or a {@link #endSecureSession()} command is issued.                
                <return>
                    <code>true</code> if the operation was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <see>
                    #endSecureSession()                    
                </see>
            </javadoc>
            <method name="startSecureSession" type="sun.net.ftp.FtpClient" line="1640">
                <scope line="1641"/>
                <scope line="1644">
                    <scope line="1645"/>
                    <scope line="1648"/>
                </scope>
                <declaration name="s" type="Socket" line="1653"/>
                <scope line="1654"/>
                <scope line="1657">
                    <scope line="1658"/>
                    <scope line="1661"/>
                </scope>
                <scope line="1667"/>
                <scope line="1670"/>
            </method>
            <javadoc line="1679">
                Sends a &lt;code&gt;CCC&lt;/code&gt; command followed by a &lt;code&gt;PROT C&lt;/code&gt;
                  command to the server terminating an encrypted session and reverting
                  back to a non crypted transmission.                
                <return>
                    <code>true</code> if the operation was successful.                    
                </return>
                <throws>
                    IOException if an error occured during transmission.                    
                </throws>
                <see>
                    #startSecureSession()                    
                </see>
            </javadoc>
            <method name="endSecureSession" type="sun.net.ftp.FtpClient" line="1687">
                <scope line="1688"/>
                <scope line="1696"/>
                <scope line="1699"/>
            </method>
            <javadoc line="1705">
                Sends the &quot;Allocate&quot; (ALLO) command to the server telling it to
                  pre-allocate the specified number of bytes for the next transfer.                
                <param>
                    size The number of bytes to allocate.                    
                </param>
                <return>
                    <code>true</code> if the operation was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="allocate" type="sun.net.ftp.FtpClient" line="1712">
                <params>
                    <param name="size" type="long"/>
                </params>
            </method>
            <javadoc line="1716">
                Sends the &quot;Structure Mount&quot; (SMNT) command to the server. This let the
                  user mount a different file system data structure without altering his
                  login or accounting information.                
                <param>
                    struct a <code>String</code> containing the name of the
                      structure to mount.                    
                </param>
                <return>
                    <code>true</code> if the operation was successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="structureMount" type="sun.net.ftp.FtpClient" line="1725">
                <params>
                    <param name="struct" type="String"/>
                </params>
            </method>
            <javadoc line="1729">
                Sends a SYST (System) command to the server and returns the String
                  sent back by the server describing the operating system at the
                  server.                
                <return>
                    a <code>String</code> describing the OS, or <code>null</code>
                      if the operation was not successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
            </javadoc>
            <method name="getSystem" type="String" line="1737">
                <declaration name="resp" type="String" line="1739"/>
            </method>
            <javadoc line="1742">
                Sends the HELP command to the server, with an optional command, like
                  SITE, and returns the text sent back by the server.                
                <param>
                    cmd the command for which the help is requested or
                      <code>null</code> for the general help                    
                </param>
                <return>
                    a <code>String</code> containing the text sent back by the
                      server, or <code>null</code> if the command failed.                    
                </return>
                <throws>
                    IOException if an error occured during transmission                    
                </throws>
            </javadoc>
            <method name="getHelp" type="String" line="1751">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <declaration name="resp" type="Vector&lt;String&gt;" line="1753"/>
                <scope line="1754"/>
                <declaration name="sb" type="StringBuffer" line="1757"/>
                <scope line="1758"/>
            </method>
            <javadoc line="1763">
                Sends the SITE command to the server. This is used by the server
                  to provide services specific to his system that are essential
                  to file transfer.                
                <param>
                    cmd the command to be sent.                    
                </param>
                <return>
                    <code>true</code> if the command was successful.                    
                </return>
                <throws>
                    IOException if an error occured during transmission                    
                </throws>
            </javadoc>
            <method name="siteCmd" type="sun.net.ftp.FtpClient" line="1771">
                <params>
                    <param name="cmd" type="String"/>
                </params>
            </method>
        </class>
    </source>