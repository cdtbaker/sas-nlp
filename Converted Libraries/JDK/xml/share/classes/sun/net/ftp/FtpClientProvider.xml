<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.ftp">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ServiceConfigurationError"/>
        <class name="FtpClientProvider" line="32">
            <javadoc line="32">
                Service provider class for FtpClient.
                  Sub-classes of FtpClientProvider provide an implementation of {@link FtpClient}and associated classes. Applications do not normally use this class directly.
                  See {@link #provider() } for how providers are found and loaded.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createFtpClient" type="FtpClient" line="42"/>
            <javadoc line="42">
                Creates a FtpClient from this provider.                
                <return>
                    The created {@link FtpClient}.                    
                </return>
            </javadoc>
            <declaration name="lock" type="Object" line="48"/>
            <declaration name="provider" type="FtpClientProvider" line="49"/>
            <javadoc line="51">
                Initializes a new instance of this class.                
                <throws>
                    SecurityException if a security manager is installed and it denies{@link RuntimePermission}<tt>("ftpClientProvider")</tt>                    
                </throws>
            </javadoc>
            <method name="FtpClientProvider" type="constructor" line="57">
                <declaration name="sm" type="SecurityManager" line="58"/>
                <scope line="59"/>
            </method>
            <method name="loadProviderFromProperty" type="boolean" line="64">
                <declaration name="cm" type="String" line="65"/>
                <scope line="66"/>
                <scope line="69">
                    <declaration name="c" type="Class" line="70"/>
                </scope>
                <scope line="73"/>
                <scope line="75"/>
                <scope line="77"/>
                <scope line="79"/>
            </method>
            <method name="loadProviderAsService" type="boolean" line="84">
                <comment line="86">
                    Iterator i = Service.providers(FtpClientProvider.class,
                                    ClassLoader.getSystemClassLoader());
                            while (i.hasNext()) {
                                try {
                                    provider = (FtpClientProvider) i.next();
                                    return true;
                                } catch (ServiceConfigurationError sce) {
                                    if (sce.getCause() instanceof SecurityException) {
                                         Ignore, try next provider, if any
                                        continue;
                                    }
                                    throw sce;
                                }
                            }                    
                </comment>
            </method>
            <javadoc line="102">
                Returns the system wide default FtpClientProvider for this invocation of
                  the Java virtual machine.
                  &lt;p&gt; The first invocation of this method locates the default provider
                  object as follows: &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;&lt;p&gt; If the system property
                  &lt;tt&gt;java.net.FtpClientProvider&lt;/tt&gt; is defined then it is
                  taken to be the fully-qualified name of a concrete provider class.
                  The class is loaded and instantiated; if this process fails then an
                  unspecified unchecked error or exception is thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; If a provider class has been installed in a jar file that is
                  visible to the system class loader, and that jar file contains a
                  provider-configuration file named
                  &lt;tt&gt;java.net.FtpClientProvider&lt;/tt&gt; in the resource
                  directory &lt;tt&gt;META-INF/services&lt;/tt&gt;, then the first class name
                  specified in that file is taken.  The class is loaded and
                  instantiated; if this process fails then an unspecified unchecked error or exception is
                  thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; Finally, if no provider has been specified by any of the above
                  means then the system-default provider class is instantiated and the
                  result is returned.  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; Subsequent invocations of this method return the provider that was
                  returned by the first invocation.  &lt;/p&gt;                
                <return>
                    The system-wide default FtpClientProvider                    
                </return>
            </javadoc>
            <method name="provider" type="FtpClientProvider" line="137">
                <scope line="138">
                    <scope line="139"/>
                    <anonymous_class line="143">
                        <method name="run" type="Object" line="145">
                            <scope line="146"/>
                            <scope line="149"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>