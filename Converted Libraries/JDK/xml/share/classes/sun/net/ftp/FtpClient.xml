<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.net.ftp">
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.util.Date"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <class name="FtpClient" line="7">
            <implements interface="java.io.Closeable"/>
            <javadoc line="7">
                A class that implements the FTP protocol according to
                  RFCs &lt;A href=&quot;http://www.ietf.org/rfc/rfc0959.txt&quot;&gt;959&lt;/A&gt;,
                  &lt;A href=&quot;http://www.ietf.org/rfc/rfc2228.txt&quot;&gt;2228&lt;/A&gt;,
                  &lt;A href=&quot;http://www.ietf.org/rfc/rfc2389.txt&quot;&gt;2389&lt;/A&gt;,
                  &lt;A href=&quot;http://www.ietf.org/rfc/rfc2428.txt&quot;&gt;2428&lt;/A&gt;,
                  &lt;A href=&quot;http://www.ietf.org/rfc/rfc3659.txt&quot;&gt;3659&lt;/A&gt;,
                  &lt;A href=&quot;http://www.ietf.org/rfc/rfc4217.txt&quot;&gt;4217&lt;/A&gt;.
                  Which includes support for FTP over SSL/TLS (aka ftps).{@code FtpClient} provides all the functionalities of a typical FTP
                  client, like storing or retrieving files, listing or creating directories.
                  A typical usage would consist of connecting the client to the server,
                  log in, issue a few commands then logout.
                  Here is a code example:
                  &lt;pre&gt;
                  FtpClient cl = FtpClient.create();
                  cl.connect(&quot;ftp.gnu.org&quot;).login(&quot;anonymous&quot;, &quot;john.doe@mydomain.com&quot;.toCharArray())).changeDirectory(&quot;pub/gnu&quot;);
                  Iterator&amp;lt;FtpDirEntry&amp;gt; dir = cl.listFiles();
                  while (dir.hasNext()) {
                  FtpDirEntry f = dir.next();
                  System.err.println(f.getName());
                  }
                  cl.close();
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;&lt;b&gt;Error reporting:&lt;/b&gt; There are, mostly, two families of errors that
                  can occur during an FTP session. The first kind are the network related issues
                  like a connection reset, and they are usually fatal to the session, meaning,
                  in all likelyhood the connection to the server has been lost and the session
                  should be restarted from scratch. These errors are reported by throwing an{@link IOException}. The second kind are the errors reported by the FTP server,
                  like when trying to download a non-existing file for example. These errors
                  are usually non fatal to the session, meaning more commands can be sent to the
                  server. In these cases, a {@link FtpProtocolException} is thrown.&lt;/p&gt;
                  &lt;p&gt;
                  It should be noted that this is not a thread-safe API, as it wouldn&apos;t make
                  too much sense, due to the very sequential nature of FTP, to provide a
                  client able to be manipulated from multiple threads.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="FTP_PORT" type="int" line="46"/>
            <declaration name="TransferType" type="enum" line="47"/>
            <scope line="47"/>
            <javadoc line="48">
                Returns the default FTP port number.                
                <return>
                    the port number.                    
                </return>
            </javadoc>
            <method name="defaultPort" type="int" line="52"/>
            <javadoc line="55">
                Creates an instance of FtpClient. The client is not connected to any
                  server yet.                
            </javadoc>
            <method name="FtpClient" type="constructor" line="59"/>
            <javadoc line="61">
                Creates an instance of {@code FtpClient}. The client is not connected to any
                  server yet.                
                <return>
                    the created {@code FtpClient}                    
                </return>
            </javadoc>
            <method name="create" type="FtpClient" line="66">
                <declaration name="provider" type="FtpClientProvider" line="67"/>
            </method>
            <javadoc line="70">
                Creates an instance of FtpClient and connects it to the specified
                  address.                
                <param>
                    dest the {@code InetSocketAddress} to connect to.                    
                </param>
                <return>
                    The created {@code FtpClient}                    
                </return>
                <throws>
                    IOException if the connection fails                    
                </throws>
                <see>
                    #connect(java.net.SocketAddress)                    
                </see>
            </javadoc>
            <method name="create" type="FtpClient" line="78">
                <params>
                    <param name="dest" type="InetSocketAddress"/>
                </params>
                <declaration name="client" type="FtpClient" line="79"/>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Creates an instance of {@code FtpClient} and connects it to the
                  specified host on the default FTP port.                
                <param>
                    dest the {@code String} containing the name of the host
                      to connect to.                    
                </param>
                <return>
                    The created {@code FtpClient}                    
                </return>
                <throws>
                    IOException if the connection fails.                    
                </throws>
                <throws>
                    FtpProtocolException if the server rejected the connection                    
                </throws>
            </javadoc>
            <method name="create" type="FtpClient" line="94">
                <params>
                    <param name="dest" type="String"/>
                </params>
            </method>
            <method name="enablePassiveMode" type="FtpClient" line="97"/>
            <javadoc line="97">
                Enables, or disables, the use of the &lt;I&gt;passive&lt;/I&gt; mode. In that mode,
                  data connections are established by having the client connect to the server.
                  This is the recommended default mode as it will work best through
                  firewalls and NATs. If set to {@code false} the mode is said to be
                  &lt;I&gt;active&lt;/I&gt; which means the server will connect back to the client
                  after a PORT command to establish a data connection.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Since the passive mode might not be supported by all
                  FTP servers, enabling it means the client will try to use it. If the
                  server rejects it, then the client will attempt to fall back to using
                  the &lt;I&gt;active&lt;/I&gt; mode by issuing a {@code PORT} command instead.&lt;/p&gt;                
                <param>
                    passive {@code true} to force passive mode.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
                <see>
                    #isPassiveModeEnabled()                    
                </see>
            </javadoc>
            <method name="isPassiveModeEnabled" type="boolean" line="113"/>
            <javadoc line="113">
                Tests whether passive mode is enabled.                
                <return>
                    {@code true} if the passive mode has been enabled.                    
                </return>
                <see>
                    #enablePassiveMode(boolean)                    
                </see>
            </javadoc>
            <method name="setConnectTimeout" type="FtpClient" line="119"/>
            <javadoc line="119">
                Sets the default timeout value to use when connecting to the server,                
                <param>
                    timeout the timeout value, in milliseconds, to use for the connect
                      operation. A value of zero or less, means use the default timeout.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
            </javadoc>
            <method name="getConnectTimeout" type="int" line="126"/>
            <javadoc line="126">
                Returns the current default connection timeout value.                
                <return>
                    the value, in milliseconds, of the current connect timeout.                    
                </return>
                <see>
                    #setConnectTimeout(int)                    
                </see>
            </javadoc>
            <method name="setReadTimeout" type="FtpClient" line="132"/>
            <javadoc line="132">
                Sets the timeout value to use when reading from the server,                
                <param>
                    timeout the timeout value, in milliseconds, to use for the read
                      operation. A value of zero or less, means use the default timeout.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
            </javadoc>
            <method name="getReadTimeout" type="int" line="139"/>
            <javadoc line="139">
                Returns the current read timeout value.                
                <return>
                    the value, in milliseconds, of the current read timeout.                    
                </return>
                <see>
                    #setReadTimeout(int)                    
                </see>
            </javadoc>
            <method name="setProxy" type="FtpClient" line="145"/>
            <javadoc line="145">
                Set the {@code Proxy} to be used for the next connection.
                  If the client is already connected, it doesn&apos;t affect the current
                  connection. However it is not recommended to change this during a session.                
                <param>
                    p the {@code Proxy} to use, or {@code null} for no proxy.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
            </javadoc>
            <method name="getProxy" type="Proxy" line="153"/>
            <javadoc line="153">
                Get the proxy of this FtpClient                
                <return>
                    the {@code Proxy}, this client is using, or {@code null}if none is used.                    
                </return>
                <see>
                    #setProxy(Proxy)                    
                </see>
            </javadoc>
            <method name="isConnected" type="boolean" line="159"/>
            <javadoc line="159">
                Tests whether this client is connected or not to a server.                
                <return>
                    {@code true} if the client is connected.                    
                </return>
            </javadoc>
            <method name="connect" type="FtpClient" line="164"/>
            <javadoc line="164">
                Connects the {@code FtpClient} to the specified destination server.                
                <param>
                    dest the address of the destination server                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if connection failed.                    
                </throws>
                <throws>
                    SecurityException if there is a SecurityManager installed and it
                      denied the authorization to connect to the destination.                    
                </throws>
                <throws>
                    FtpProtocolException                    
                </throws>
            </javadoc>
            <method name="connect" type="FtpClient" line="174"/>
            <javadoc line="174">
                Connects the FtpClient to the specified destination server.                
                <param>
                    dest the address of the destination server                    
                </param>
                <param>
                    timeout the value, in milliseconds, to use as a connection timeout                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if connection failed.                    
                </throws>
                <throws>
                    SecurityException if there is a SecurityManager installed and it
                      denied the authorization to connect to the destination.                    
                </throws>
                <throws>
                    FtpProtocolException                    
                </throws>
            </javadoc>
            <method name="getServerAddress" type="SocketAddress" line="185"/>
            <javadoc line="185">
                Retrieves the address of the FTP server this client is connected to.                
                <return>
                    the {@link SocketAddress} of the server, or {@code null} if this
                      client is not connected yet.                    
                </return>
            </javadoc>
            <method name="login" type="FtpClient" line="191"/>
            <javadoc line="191">
                Attempts to log on the server with the specified user name and password.                
                <param>
                    user The user name                    
                </param>
                <param>
                    password The password for that user                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission                    
                </throws>
                <throws>
                    FtpProtocolException if the login was refused by the server                    
                </throws>
            </javadoc>
            <method name="login" type="FtpClient" line="200"/>
            <javadoc line="200">
                Attempts to log on the server with the specified user name, password and
                  account name.                
                <param>
                    user The user name                    
                </param>
                <param>
                    password The password for that user.                    
                </param>
                <param>
                    account The account name for that user.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the login was refused by the server                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="211"/>
            <javadoc line="211">
                Closes the current connection. Logs out the current user, if any, by
                  issuing the QUIT command to the server.
                  This is in effect terminates the current
                  session and the connection to the server will be closed.
                  &lt;p&gt;After a close, the client can then be connected to another server
                  to start an entirely different session.&lt;/P&gt;                
                <throws>
                    IOException if an error occurs during transmission                    
                </throws>
            </javadoc>
            <method name="isLoggedIn" type="boolean" line="221"/>
            <javadoc line="221">
                Checks whether the client is logged in to the server or not.                
                <return>
                    {@code true} if the client has already completed a login.                    
                </return>
            </javadoc>
            <method name="changeDirectory" type="FtpClient" line="226"/>
            <javadoc line="226">
                Changes to a specific directory on a remote FTP server                
                <param>
                    remoteDirectory path of the directory to CD to.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was refused by the server                    
                </throws>
            </javadoc>
            <method name="changeToParentDirectory" type="FtpClient" line="234"/>
            <javadoc line="234">
                Changes to the parent directory, sending the CDUP command to the server.                
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was refused by the server                    
                </throws>
            </javadoc>
            <method name="getWorkingDirectory" type="String" line="241"/>
            <javadoc line="241">
                Retrieve the server current working directory using the PWD command.                
                <return>
                    a {@code String} containing the current working directory                    
                </return>
                <throws>
                    IOException if an error occurs during transmission                    
                </throws>
                <throws>
                    FtpProtocolException if the command was refused by the server,                    
                </throws>
            </javadoc>
            <method name="setRestartOffset" type="FtpClient" line="248"/>
            <javadoc line="248">
                Sets the restart offset to the specified value.  That value will be
                  sent through a {@code REST} command to server before the next file
                  transfer and has the effect of resuming a file transfer from the
                  specified point. After the transfer the restart offset is set back to
                  zero.                
                <param>
                    offset the offset in the remote file at which to start the next
                      transfer. This must be a value greater than or equal to zero.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IllegalArgumentException if the offset is negative.                    
                </throws>
            </javadoc>
            <method name="getFile" type="FtpClient" line="260"/>
            <javadoc line="260">
                Retrieves a file from the ftp server and writes its content to the specified{@code OutputStream}.
                  &lt;p&gt;If the restart offset was set, then a {@code REST} command will be
                  sent before the {@code RETR} in order to restart the tranfer from the specified
                  offset.&lt;/p&gt;
                  &lt;p&gt;The {@code OutputStream} is not closed by this method at the end
                  of the transfer. &lt;/p&gt;
                  &lt;p&gt;This method will block until the transfer is complete or an exception
                  is thrown.&lt;/p&gt;                
                <param>
                    name a {@code String} containing the name of the file to
                      retreive from the server.                    
                </param>
                <param>
                    local the {@code OutputStream} the file should be written to.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if the transfer fails.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was refused by the server                    
                </throws>
                <see>
                    #setRestartOffset(long)                    
                </see>
            </javadoc>
            <method name="getFileStream" type="InputStream" line="278"/>
            <javadoc line="278">
                Retrieves a file from the ftp server, using the {@code RETR} command, and
                  returns the InputStream from the established data connection.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is done reading from the returned stream.
                  &lt;p&gt;If the restart offset was set, then a {@code REST} command will be
                  sent before the {@code RETR} in order to restart the tranfer from the specified
                  offset.&lt;/p&gt;                
                <param>
                    name the name of the remote file                    
                </param>
                <return>
                    the {@link java.io.InputStream} from the data connection                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was refused by the server                    
                </throws>
                <see>
                    #setRestartOffset(long)                    
                </see>
            </javadoc>
            <javadoc line="292">
                Transfers a file from the client to the server (aka a &lt;I&gt;put&lt;/I&gt;)
                  by sending the STOR command, and returns the {@code OutputStream}from the established data connection.
                  A new file is created at the server site if the file specified does
                  not already exist.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished writing to the returned stream.                
                <param>
                    name the name of the remote file to write.                    
                </param>
                <return>
                    the {@link java.io.OutputStream} from the data connection or{@code null} if the command was unsuccessful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="putFileStream" type="OutputStream" line="303">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="putFileStream" type="OutputStream" line="306"/>
            <javadoc line="306">
                Transfers a file from the client to the server (aka a &lt;I&gt;put&lt;/I&gt;)
                  by sending the STOR or STOU command, depending on the{@code unique} argument, and returns the {@code OutputStream}from the established data connection.{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished writing to the stream.
                  A new file is created at the server site if the file specified does
                  not already exist.
                  If {@code unique} is set to {@code true}, the resultant file
                  is to be created under a name unique to that directory, meaning
                  it will not overwrite an existing file, instead the server will
                  generate a new, unique, file name.
                  The name of the remote file can be retrieved, after completion of the
                  transfer, by calling {@link #getLastFileName()}.                
                <param>
                    name the name of the remote file to write.                    
                </param>
                <param>
                    unique {@code true} if the remote files should be unique,
                      in which case the STOU command will be used.                    
                </param>
                <return>
                    the {@link java.io.OutputStream} from the data connection.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <javadoc line="326">
                Transfers a file from the client to the server (aka a &lt;I&gt;put&lt;/I&gt;)
                  by sending the STOR or STOU command, depending on the{@code unique} argument. The content of the {@code InputStream}passed in argument is written into the remote file, overwriting any
                  existing data.
                  A new file is created at the server site if the file specified does
                  not already exist.
                  If {@code unique} is set to {@code true}, the resultant file
                  is to be created under a name unique to that directory, meaning
                  it will not overwrite an existing file, instead the server will
                  generate a new, unique, file name.
                  The name of the remote file can be retrieved, after completion of the
                  transfer, by calling {@link #getLastFileName()}.
                  &lt;p&gt;This method will block until the transfer is complete or an exception
                  is thrown.&lt;/p&gt;                
                <param>
                    name the name of the remote file to write.                    
                </param>
                <param>
                    local the {@code InputStream} that points to the data to
                      transfer.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="putFile" type="FtpClient" line="347">
                <params>
                    <param name="name" type="String"/>
                    <param name="local" type="InputStream"/>
                </params>
            </method>
            <method name="putFile" type="FtpClient" line="350"/>
            <javadoc line="350">
                Transfers a file from the client to the server (aka a &lt;I&gt;put&lt;/I&gt;)
                  by sending the STOR command. The content of the {@code InputStream}passed in argument is written into the remote file, overwriting any
                  existing data.
                  A new file is created at the server site if the file specified does
                  not already exist.
                  &lt;p&gt;This method will block until the transfer is complete or an exception
                  is thrown.&lt;/p&gt;                
                <param>
                    name the name of the remote file to write.                    
                </param>
                <param>
                    local the {@code InputStream} that points to the data to
                      transfer.                    
                </param>
                <param>
                    unique {@code true} if the remote file should be unique
                      (i.e. not already existing), {@code false} otherwise.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
                <see>
                    #getLastFileName()                    
                </see>
            </javadoc>
            <method name="appendFile" type="FtpClient" line="369"/>
            <javadoc line="369">
                Sends the APPE command to the server in order to transfer a data stream
                  passed in argument and append it to the content of the specified remote
                  file.
                  &lt;p&gt;This method will block until the transfer is complete or an exception
                  is thrown.&lt;/p&gt;                
                <param>
                    name A {@code String} containing the name of the remote file
                      to append to.                    
                </param>
                <param>
                    local The {@code InputStream} providing access to the data
                      to be appended.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="rename" type="FtpClient" line="384"/>
            <javadoc line="384">
                Renames a file on the server.                
                <param>
                    from the name of the file being renamed                    
                </param>
                <param>
                    to the new name for the file                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="deleteFile" type="FtpClient" line="393"/>
            <javadoc line="393">
                Deletes a file on the server.                
                <param>
                    name a {@code String} containing the name of the file
                      to delete.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the exchange                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="makeDirectory" type="FtpClient" line="402"/>
            <javadoc line="402">
                Creates a new directory on the server.                
                <param>
                    name a {@code String} containing the name of the directory
                      to create.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the exchange                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="removeDirectory" type="FtpClient" line="411"/>
            <javadoc line="411">
                Removes a directory on the server.                
                <param>
                    name a {@code String} containing the name of the directory
                      to remove.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the exchange.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="noop" type="FtpClient" line="420"/>
            <javadoc line="420">
                Sends a No-operation command. It&apos;s useful for testing the connection
                  status or as a &lt;I&gt;keep alive&lt;/I&gt; mechanism.                
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="getStatus" type="String" line="428"/>
            <javadoc line="428">
                Sends the {@code STAT} command to the server.
                  This can be used while a data connection is open to get a status
                  on the current transfer, in that case the parameter should be{@code null}.
                  If used between file transfers, it may have a pathname as argument
                  in which case it will work as the LIST command except no data
                  connection will be created.                
                <param>
                    name an optional {@code String} containing the pathname
                      the STAT command should apply to.                    
                </param>
                <return>
                    the response from the server                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="getFeatures" type="List<String>" line="442"/>
            <javadoc line="442">
                Sends the {@code FEAT} command to the server and returns the list of supported
                  features in the form of strings.
                  The features are the supported commands, like AUTH TLS, PROT or PASV.
                  See the RFCs for a complete list.
                  Note that not all FTP servers support that command, in which case
                  a {@link FtpProtocolException} will be thrown.                
                <return>
                    a {@code List} of {@code Strings} describing the
                      supported additional features                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command is rejected by the server                    
                </throws>
            </javadoc>
            <method name="abort" type="FtpClient" line="455"/>
            <javadoc line="455">
                Sends the {@code ABOR} command to the server.
                  &lt;p&gt;It tells the server to stop the previous command or transfer. No action
                  will be taken if the previous command has already been completed.&lt;/p&gt;
                  &lt;p&gt;This doesn&apos;t abort the current session, more commands can be issued
                  after an abort.&lt;/p&gt;                
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="completePending" type="FtpClient" line="466"/>
            <javadoc line="466">
                Some methods do not wait until completion before returning, so this
                  method can be called to wait until completion. This is typically the case
                  with commands that trigger a transfer like {@link #getFileStream(String)}.
                  So this method should be called before accessing information related to
                  such a command.
                  &lt;p&gt;This method will actually block reading on the command channel for a
                  notification from the server that the command is finished. Such a
                  notification often carries extra information concerning the completion
                  of the pending action (e.g. number of bytes transfered).&lt;/p&gt;
                  &lt;p&gt;Note that this will return immediately if no command or action
                  is pending&lt;/p&gt;
                  &lt;p&gt;It should be also noted that most methods issuing commands to the ftp
                  server will call this method if a previous command is pending.
                  &lt;p&gt;Example of use:
                  &lt;pre&gt;
                  InputStream in = cl.getFileStream(&quot;file&quot;);
                  ...
                  cl.completePending();
                  long size = cl.getLastTransferSize();
                  &lt;/pre&gt;
                  On the other hand, it&apos;s not necessary in a case like:
                  &lt;pre&gt;
                  InputStream in = cl.getFileStream(&quot;file&quot;);
                  // read content
                  ...
                  cl.close();
                  &lt;/pre&gt;
                  &lt;p&gt;Since {@link #close()} will call completePending() if necessary.&lt;/p&gt;                
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transfer                    
                </throws>
                <throws>
                    FtpProtocolException if the command didn't complete successfully                    
                </throws>
            </javadoc>
            <method name="reInit" type="FtpClient" line="500"/>
            <javadoc line="500">
                Reinitializes the USER parameters on the FTP server                
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during transmission                    
                </throws>
                <throws>
                    FtpProtocolException if the command fails                    
                </throws>
            </javadoc>
            <method name="setType" type="FtpClient" line="507"/>
            <javadoc line="507">
                Changes the transfer type (binary, ascii, ebcdic) and issue the
                  proper command (e.g. TYPE A) to the server.                
                <param>
                    type the {@code TransferType} to use.                    
                </param>
                <return>
                    This FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <javadoc line="516">
                Changes the current transfer type to binary.
                  This is a convenience method that is equivalent to{@code setType(TransferType.BINARY)}                
                <return>
                    This FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
                <see>
                    #setType(TransferType)                    
                </see>
            </javadoc>
            <method name="setBinaryType" type="FtpClient" line="524"/>
            <javadoc line="528">
                Changes the current transfer type to ascii.
                  This is a convenience method that is equivalent to{@code setType(TransferType.ASCII)}                
                <return>
                    This FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
                <see>
                    #setType(TransferType)                    
                </see>
            </javadoc>
            <method name="setAsciiType" type="FtpClient" line="536"/>
            <method name="list" type="InputStream" line="540"/>
            <javadoc line="540">
                Issues a {@code LIST} command to the server to get the current directory
                  listing, and returns the InputStream from the data connection.
                  &lt;p&gt;{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished reading from the stream.&lt;/p&gt;                
                <param>
                    path the pathname of the directory to list, or {@code null}for the current working directory.                    
                </param>
                <return>
                    the {@code InputStream} from the resulting data connection                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
                <see>
                    #changeDirectory(String)                    
                </see>
                <see>
                    #listFiles(String)                    
                </see>
            </javadoc>
            <method name="nameList" type="InputStream" line="553"/>
            <javadoc line="553">
                Issues a {@code NLST path} command to server to get the specified directory
                  content. It differs from {@link #list(String)} method by the fact that
                  it will only list the file names which would make the parsing of the
                  somewhat easier.
                  &lt;p&gt;{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished reading from the stream.&lt;/p&gt;                
                <param>
                    path a {@code String} containing the pathname of the
                      directory to list or {@code null} for the current working directory.                    
                </param>
                <return>
                    the {@code InputStream} from the resulting data connection                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="getSize" type="long" line="567"/>
            <javadoc line="567">
                Issues the {@code SIZE [path]} command to the server to get the size of a
                  specific file on the server.
                  Note that this command may not be supported by the server. In which
                  case -1 will be returned.                
                <param>
                    path a {@code String} containing the pathname of the
                      file.                    
                </param>
                <return>
                    a {@code long} containing the size of the file or -1 if
                      the server returned an error, which can be checked with{@link #getLastReplyCode()}.                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="getLastModified" type="Date" line="580"/>
            <javadoc line="580">
                Issues the {@code MDTM [path]} command to the server to get the modification
                  time of a specific file on the server.
                  Note that this command may not be supported by the server, in which
                  case {@code null} will be returned.                
                <param>
                    path a {@code String} containing the pathname of the file.                    
                </param>
                <return>
                    a {@code Date} representing the last modification time
                      or {@code null} if the server returned an error, which
                      can be checked with {@link #getLastReplyCode()}.                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="setDirParser" type="FtpClient" line="593"/>
            <javadoc line="593">
                Sets the parser used to handle the directory output to the specified
                  one. By default the parser is set to one that can handle most FTP
                  servers output (Unix base mostly). However it may be necessary for
                  and application to provide its own parser due to some uncommon
                  output format.                
                <param>
                    p The {@code FtpDirParser} to use.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <see>
                    #listFiles(String)                    
                </see>
            </javadoc>
            <method name="listFiles" type="Iterator<FtpDirEntry>" line="604"/>
            <javadoc line="604">
                Issues a {@code MLSD} command to the server to get the specified directory
                  listing and applies the internal parser to create an Iterator of{@link java.net.FtpDirEntry}. Note that the Iterator returned is also a{@link java.io.Closeable}.
                  &lt;p&gt;If the server doesn&apos;t support the MLSD command, the LIST command is used
                  instead and the parser set by {@link #setDirParser(java.net.FtpDirParser) }is used instead.&lt;/p&gt;{@link #completePending()} &lt;b&gt;has&lt;/b&gt; to be called once the application
                  is finished iterating through the files.                
                <param>
                    path the pathname of the directory to list or {@code null}for the current working directoty.                    
                </param>
                <return>
                    a {@code Iterator} of files or {@code null} if the
                      command failed.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission                    
                </throws>
                <see>
                    #setDirParser(FtpDirParser)                    
                </see>
                <see>
                    #changeDirectory(String)                    
                </see>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="useKerberos" type="FtpClient" line="619"/>
            <javadoc line="619">
                Attempts to use Kerberos GSSAPI as an authentication mechanism with the
                  ftp server. This will issue an {@code AUTH GSSAPI} command, and if
                  it is accepted by the server, will followup with {@code ADAT}command to exchange the various tokens until authentication is
                  successful. This conforms to Appendix I of RFC 2228.                
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occurs during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="getWelcomeMsg" type="String" line="629"/>
            <javadoc line="629">
                Returns the Welcome string the server sent during initial connection.                
                <return>
                    a {@code String} containing the message the server
                      returned during connection or {@code null}.                    
                </return>
            </javadoc>
            <method name="getLastReplyCode" type="FtpReplyCode" line="635"/>
            <javadoc line="635">
                Returns the last reply code sent by the server.                
                <return>
                    the lastReplyCode or {@code null} if none were received yet.                    
                </return>
            </javadoc>
            <method name="getLastResponseString" type="String" line="640"/>
            <javadoc line="640">
                Returns the last response string sent by the server.                
                <return>
                    the message string, which can be quite long, last returned
                      by the server, or {@code null} if no response were received yet.                    
                </return>
            </javadoc>
            <method name="getLastTransferSize" type="long" line="646"/>
            <javadoc line="646">
                Returns, when available, the size of the latest started transfer.
                  This is retreived by parsing the response string received as an initial
                  response to a {@code RETR} or similar request.                
                <return>
                    the size of the latest transfer or -1 if either there was no
                      transfer or the information was unavailable.                    
                </return>
            </javadoc>
            <method name="getLastFileName" type="String" line="654"/>
            <javadoc line="654">
                Returns, when available, the remote name of the last transfered file.
                  This is mainly useful for &quot;put&quot; operation when the unique flag was
                  set since it allows to recover the unique file name created on the
                  server which may be different from the one submitted with the command.                
                <return>
                    the name the latest transfered file remote name, or{@code null} if that information is unavailable.                    
                </return>
            </javadoc>
            <method name="startSecureSession" type="FtpClient" line="662"/>
            <javadoc line="662">
                Attempts to switch to a secure, encrypted connection. This is done by
                  sending the {@code AUTH TLS} command.
                  &lt;p&gt;See &lt;a href=&quot;http://www.ietf.org/rfc/rfc4217.txt&quot;&gt;RFC 4217&lt;/a&gt;&lt;/p&gt;
                  If successful this will establish a secure command channel with the
                  server, it will also make it so that all other transfers (e.g. a RETR
                  command) will be done over an encrypted channel as well unless a{@link #reInit()} command or a {@link #endSecureSession()} command is issued.
                  &lt;p&gt;This method should be called after a successful {@link #connect(java.net.InetSocketAddress) }but before calling {@link #login(java.lang.String,char[]) }.&lt;/p&gt;                
                <return>
                    this FtpCLient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
                <see>
                    #endSecureSession()                    
                </see>
            </javadoc>
            <method name="endSecureSession" type="FtpClient" line="676"/>
            <javadoc line="676">
                Sends a {@code CCC} command followed by a {@code PROT C}command to the server terminating an encrypted session and reverting
                  back to a non encrypted transmission.                
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
                <see>
                    #startSecureSession()                    
                </see>
            </javadoc>
            <method name="allocate" type="FtpClient" line="685"/>
            <javadoc line="685">
                Sends the &quot;Allocate&quot; ({@code ALLO}) command to the server telling it to
                  pre-allocate the specified number of bytes for the next transfer.                
                <param>
                    size The number of bytes to allocate.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="structureMount" type="FtpClient" line="694"/>
            <javadoc line="694">
                Sends the &quot;Structure Mount&quot; ({@code SMNT}) command to the server. This let the
                  user mount a different file system data structure without altering his
                  login or accounting information.                
                <param>
                    struct a {@code String} containing the name of the
                      structure to mount.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="getSystem" type="String" line="705"/>
            <javadoc line="705">
                Sends a System ({@code SYST}) command to the server and returns the String
                  sent back by the server describing the operating system at the
                  server.                
                <return>
                    a {@code String} describing the OS, or {@code null}if the operation was not successful.                    
                </return>
                <throws>
                    IOException if an error occured during the transmission.                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="getHelp" type="String" line="714"/>
            <javadoc line="714">
                Sends the {@code HELP} command to the server, with an optional command, like
                  SITE, and returns the text sent back by the server.                
                <param>
                    cmd the command for which the help is requested or{@code null} for the general help                    
                </param>
                <return>
                    a {@code String} containing the text sent back by the
                      server, or {@code null} if the command failed.                    
                </return>
                <throws>
                    IOException if an error occured during transmission                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
            <method name="siteCmd" type="FtpClient" line="724"/>
            <javadoc line="724">
                Sends the {@code SITE} command to the server. This is used by the server
                  to provide services specific to his system that are essential
                  to file transfer.                
                <param>
                    cmd the command to be sent.                    
                </param>
                <return>
                    this FtpClient                    
                </return>
                <throws>
                    IOException if an error occured during transmission                    
                </throws>
                <throws>
                    FtpProtocolException if the command was rejected by the server                    
                </throws>
            </javadoc>
        </class>
    </source>