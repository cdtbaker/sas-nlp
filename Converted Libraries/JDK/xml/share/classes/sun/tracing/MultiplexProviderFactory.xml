<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tracing">
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="com.sun.tracing.ProviderFactory"/>
        <import package="com.sun.tracing.Provider"/>
        <import package="com.sun.tracing.Probe"/>
        <class name="MultiplexProviderFactory" line="10">
            <extends class="ProviderFactory"/>
            <javadoc line="10">
                Factory class to create tracing Providers.
                  This factory creates a &quot;multiplex provider&quot;, which is a provider that
                  encapsulates a list of providers and whose probes trigger a corresponding
                  trigger in each of the encapsulated providers&apos; probes.
                  This is used when there are multiple tracing frameworks activated at once.
                  A user-defined provider gets implementation for each of the activated
                  frameworks and this multiplex framework is what is ultimately passed
                  back to the user.  All probe triggers are multiplexed to each
                  active framework.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="factories" type="Set&lt;ProviderFactory&gt;" line="23"/>
            <method name="MultiplexProviderFactory" type="constructor" line="24">
                <params>
                    <param name="factories" type="Set<ProviderFactory>"/>
                </params>
            </method>
            <method name="createProvider" type="T" line="27">
                <params>
                    <param name="cls" type="Class<T>"/>
                </params>
                <declaration name="providers" type="HashSet&lt;Provider&gt;" line="28"/>
                <scope line="29"/>
                <declaration name="provider" type="MultiplexProvider" line="32"/>
            </method>
        </class>
        <class name="MultiplexProvider" line="37">
            <extends class="ProviderSkeleton"/>
            <declaration name="providers" type="Set&lt;Provider&gt;" line="38"/>
            <method name="createProbe" type="ProbeSkeleton" line="39">
                <params>
                    <param name="m" type="Method"/>
                </params>
            </method>
            <method name="MultiplexProvider" type="constructor" line="42">
                <params>
                    <param name="type" type="Class<? extends Provider>"/>
                    <param name="providers" type="Set<Provider>"/>
                </params>
            </method>
            <method name="dispose" type="void" line="46">
                <scope line="47"/>
            </method>
        </class>
        <class name="MultiplexProbe" line="53">
            <extends class="ProbeSkeleton"/>
            <declaration name="probes" type="Set&lt;Probe&gt;" line="54"/>
            <method name="MultiplexProbe" type="constructor" line="55">
                <params>
                    <param name="m" type="Method"/>
                    <param name="providers" type="Set<Provider>"/>
                </params>
                <scope line="58">
                    <declaration name="probe" type="Probe" line="59"/>
                    <scope line="60"/>
                </scope>
            </method>
            <method name="isEnabled" type="boolean" line="65">
                <scope line="66">
                    <scope line="67"/>
                </scope>
            </method>
            <method name="uncheckedTrigger" type="void" line="73">
                <params>
                    <param name="args" type="Object[]"/>
                </params>
            </method>
        </class>
    </source>