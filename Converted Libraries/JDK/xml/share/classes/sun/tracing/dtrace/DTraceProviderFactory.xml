<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tracing.dtrace">
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.security.Permission"/>
        <import package="com.sun.tracing.ProviderFactory"/>
        <import package="com.sun.tracing.Provider"/>
        <class name="DTraceProviderFactory" line="37">
            <extends class="ProviderFactory"/>
            <javadoc line="37">
                Factory class to create JSDT Providers.
                  This class contains methods to create an instance of a Provider
                  interface which can be used to place tracepoints in an application.
                  Method calls upon that instance trigger DTrace probes that
                  are visible from DTrace scripts.   Such calls have no other
                  side effects in the application.
                  &lt;p&gt;
                  The DTrace script mechanisms for listing and matching probes will not see
                  nor match any probes until the provider they reside in is created by a
                  call to {@code createProvider()} (or {@code createProviders()}).
                  &lt;p&gt;
                  Providers that are created should be disposed of when they are no longer
                  needed to free up system resources, at which point the associated
                  DTrace probes will no longer be available to DTrace.  One disposes a
                  provider by calling{@link com.sun.tracing.Provider#dispose Provider.dispose()} on a
                  created provider instance.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="60">
                Creates an instance of a provider which can then be used to trigger
                  DTrace probes.
                  The provider specification, provided as an argument, should only
                  contain methods which have a &apos;void&apos; return type and String or
                  integer-based typed arguments (long, int, short, char, byte, or boolean).                
                <param>
                    cls A user-defined interface which extends {@code Provider}.                    
                </param>
                <return>
                    An instance of the interface which is used to trigger
                      the DTrace probes.                    
                </return>
                <throws>
                    java.lang.SecurityException if a security manager has been
                      installed and it denies
                      RuntimePermission("com.sun.dtrace.jsdt.createProvider")                    
                </throws>
                <throws>
                    java.lang.IllegalArgumentException if the interface contains
                      methods that do not return null, or that contain arguments that are
                      not String or integer types.                    
                </throws>
            </javadoc>
            <method name="createProvider" type="T" line="78">
                <params>
                    <param name="cls" type="Class<T>"/>
                </params>
                <declaration name="jsdt" type="DTraceProvider" line="79"/>
                <declaration name="proxy" type="T" line="80"/>
            </method>
            <javadoc line="87">
                Creates multiple providers at once.
                  This method batches together a number of provider instantiations.
                  It works similarly
                  to {@code createProvider}, but operates on a set of providers instead
                  of one at a time.  This method is in place since some DTrace
                  implementations limit the number of times that providers can be
                  created.  When numerous providers can be created at once with this
                  method, it will count only as a single creation point to DTrace, thus
                  it uses less system resources.
                  &lt;p&gt;
                  All of the probes in the providers will be visible to DTrace after
                  this call and all will remain visible until all of the providers
                  are disposed.
                  &lt;p&gt;
                  The {@code moduleName} parameter will override any {@code ModuleName}annotation associated with any of the providers in the set.
                  All of the probes created by this call will share the same
                  module name.
                  &lt;p&gt;                
                <param>
                    providers a set of provider specification interfaces                    
                </param>
                <param>
                    moduleName the module name to associate with all probes                    
                </param>
                <return>
                    A map which maps the provider interface specification to an
                      implementing instance.                    
                </return>
                <throws>
                    java.lang.SecurityException if a security manager has been
                      installed and it denies
                      RuntimePermission("com.sun.dtrace.jsdt.createProvider")                    
                </throws>
                <throws>
                    java.lang.IllegalArgumentException if any of the interface
                      contains methods that do not return null, or that contain arguments
                      that are not String or integer types.                    
                </throws>
            </javadoc>
            <method name="createProviders" type="Map<Class<? extends Provider>,Provider>" line="120">
                <params>
                    <param name="providers" type="Set<Class<? extends Provider>>"/>
                    <param name="moduleName" type="String"/>
                </params>
                <declaration name="map" type="HashMap&lt;Class&lt;? extends Provider&gt;,Provider&gt;" line="121"/>
                <declaration name="jsdts" type="HashSet&lt;DTraceProvider&gt;" line="123"/>
                <scope line="124">
                    <declaration name="jsdt" type="DTraceProvider" line="125"/>
                </scope>
            </method>
            <javadoc line="133">
                Used to check the status of DTrace support in the underlying JVM and
                  operating system.
                  This is an informative method only - the Java-level effects of
                  creating providers and triggering probes will not change whether or
                  not DTrace is supported by the underlying systems.                
                <return>
                    true if DTrace is supported                    
                </return>
            </javadoc>
            <method name="isSupported" type="boolean" line="143">
                <scope line="144">
                    <declaration name="security" type="SecurityManager" line="145"/>
                    <scope line="146">
                        <declaration name="perm" type="Permission" line="147"/>
                    </scope>
                </scope>
                <scope line="152"/>
            </method>
        </class>
    </source>