<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.tracing.dtrace">
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.security.Permission"/>
        <import package="java.util.HashSet"/>
        <class name="Activation" line="33">
            <declaration name="resource" type="SystemResource" line="34"/>
            <declaration name="referenceCount" type="int" line="35"/>
            <method name="Activation" type="constructor" line="37">
                <params>
                    <param name="moduleName" type="String"/>
                    <param name="providers" type="DTraceProvider[]"/>
                </params>
                <declaration name="security" type="SecurityManager" line="38"/>
                <scope line="39">
                    <declaration name="perm" type="Permission" line="40"/>
                </scope>
                <scope line="45"/>
            </method>
            <method name="disposeProvider" type="void" line="52">
                <params>
                    <param name="p" type="DTraceProvider"/>
                </params>
                <scope line="53"/>
            </method>
        </class>
        <class name="SystemResource" line="59">
            <extends class="WeakReference">
                <type_params>
                    <type_param name="Activation"/>
                </type_params>
            </extends>
            <javadoc line="59">
                The native resource part of an Activation.
                  This holds the native handle.
                  If the user loses a reference to a set of Providers without disposing them,
                  and GC determines the Activation is unreachable, then the next
                  activation or flush call will automatically dispose the unreachable objects
                  The SystemResource instances are creating during activation, and
                  unattached during disposal.  When created, they always have a
                  strong reference to them via the {@code resources} static member.  Explicit{@code dispose} calls will unregister the native resource and remove
                  references to the SystemResource object.  Absent an explicit dispose,
                  when their associated Activation object becomes garbage, the SystemResource
                  object will be enqueued on the reference queue and disposed at the
                  next call to {@code flush}.                
            </javadoc>
            <declaration name="handle" type="long" line="79"/>
            <declaration name="referenceQueue" type="ReferenceQueue&lt;Activation&gt;" line="81"/>
            <declaration name="resources" type="HashSet&lt;SystemResource&gt;" line="83"/>
            <method name="SystemResource" type="constructor" line="85">
                <params>
                    <param name="activation" type="Activation"/>
                    <param name="handle" type="long"/>
                </params>
            </method>
            <method name="dispose" type="void" line="92"/>
            <method name="flush" type="void" line="98">
                <declaration name="resource" type="SystemResource" line="99"/>
                <scope line="100">
                    <scope line="101"/>
                </scope>
            </method>
        </class>
    </source>