<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management">
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationEmitter"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Collections"/>
        <class name="NotificationEmitterSupport" line="12">
            <implements interface="NotificationEmitter"/>
            <javadoc line="12">
                Abstract helper class for notification emitter support.                
            </javadoc>
            <method name="NotificationEmitterSupport" type="constructor" line="16"/>
            <declaration name="listenerLock" type="Object" line="18"/>
            <method name="addNotificationListener" type="void" line="19">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <scope line="20"/>
                <scope line="23">
                    <declaration name="newList" type="List&amp;lt;ListenerInfo&amp;gt;" line="24"/>
                </scope>
            </method>
            <method name="removeNotificationListener" type="void" line="30">
                <params>
                    <param name="listener" type="NotificationListener"/>
                </params>
                <scope line="31">
                    <declaration name="newList" type="List&amp;lt;ListenerInfo&amp;gt;" line="32"/>
                    <scope line="33">
                        <declaration name="li" type="ListenerInfo" line="34"/>
                    </scope>
                </scope>
            </method>
            <method name="removeNotificationListener" type="void" line="41">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <declaration name="found" type="boolean" line="42"/>
                <scope line="43">
                    <declaration name="newList" type="List&amp;lt;ListenerInfo&amp;gt;" line="44"/>
                    <declaration name="size" type="int" line="45"/>
                    <scope line="46">
                        <declaration name="li" type="ListenerInfo" line="47"/>
                        <scope line="48">
                            <scope line="50"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="58"/>
                <scope line="61"/>
            </method>
            <method name="sendNotification" type="void" line="65">
                <params>
                    <param name="notification" type="Notification"/>
                </params>
                <scope line="66"/>
                <declaration name="currentList" type="List&amp;lt;ListenerInfo&amp;gt;" line="69"/>
                <scope line="70"/>
                <declaration name="size" type="int" line="73"/>
                <scope line="74">
                    <declaration name="li" type="ListenerInfo" line="75"/>
                    <scope line="76">
                        <scope line="77"/>
                        <scope line="80"/>
                    </scope>
                </scope>
            </method>
            <method name="hasListeners" type="boolean" line="87">
                <scope line="88"/>
            </method>
            <class name="ListenerInfo" line="92">
                <declaration name="listener" type="NotificationListener" line="93"/>
                <declaration name="filter" type="NotificationFilter" line="94"/>
                <declaration name="handback" type="Object" line="95"/>
                <method name="ListenerInfo" type="constructor" line="96">
                    <params>
                        <param name="listener" type="NotificationListener"/>
                        <param name="filter" type="NotificationFilter"/>
                        <param name="handback" type="Object"/>
                    </params>
                </method>
            </class>
            <declaration name="listenerList" type="List&amp;lt;ListenerInfo&amp;gt;" line="102"/>
            <javadoc line="102">
                Current list of listeners, a List of ListenerInfo.  The object
                  referenced by this field is never modified.  Instead, the field
                  is set to a new object when a listener is added or removed,
                  within a synchronized(this).  In this way, there is no need to
                  synchronize when traversing the list to send a notification to
                  the listeners in it.  That avoids potential deadlocks if the
                  listeners end up depending on other threads that are themselves
                  accessing this NotificationBroadcasterSupport.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="113"/>
        </class>
    </source>