<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management">
        <import package="java.lang.management.MemoryUsage"/>
        <import package="java.lang.management.MemoryNotificationInfo"/>
        <import package="java.lang.management.MonitorInfo"/>
        <import package="java.lang.management.LockInfo"/>
        <import package="java.lang.management.ThreadInfo"/>
        <import package="java.lang.reflect"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="javax.management"/>
        <import package="javax.management.openmbean"/>
        <import package="javax.management.openmbean.SimpleType"/>
        <import package="com.sun.management.VMOption"/>
        <class name="MappedMXBeanType" line="46">
            <comment line="61">
                Suppress unchecked cast warnings at line 442, 523 and 546
                 Suppress unchecked calls at line 235, 284, 380 and 430.                
            </comment>
            <comment line="109">
                basic types do not require data mapping                
            </comment>
            <comment line="130">
                Convert a class to an OpenType                
            </comment>
            <comment line="155">
                Return the mapped open type                
            </comment>
            <comment line="164">
                Return the type name of the mapped open type
                 For primitive types, the type name is the same as the javaType
                 but the mapped open type is the wrapper class                
            </comment>
            <comment line="171">
                Return the mapped open type                
            </comment>
            <comment line="178">
                return name of the class or the generic type                
            </comment>
            <comment line="187">
                Basic Types - Classes that do not require data conversion
                               including primitive types and all SimpleType
                
                   Mapped open type: SimpleType for corresponding basic type
                
                 Data Mapping:
                   T &lt;-&gt; T (no conversion)                
            </comment>
            <comment line="224">
                Enum subclasses
                   Mapped open type - String
                
                 Data Mapping:
                   Enum &lt;-&gt; enum&apos;s name                
            </comment>
            <comment line="266">
                Array E[]
                   Mapped open type - Array with element of OpenType for E
                
                 Data Mapping:
                   E[] &lt;-&gt; openTypeData(E)[]                
            </comment>
            <comment line="411">
                List&lt;E&gt;
                   Mapped open type - Array with element of OpenType for E
                
                 Data Mapping:
                   List&lt;E&gt; &lt;-&gt; openTypeData(E)[]                
            </comment>
            <comment line="490">
                Map&lt;K,V&gt;
                   Mapped open type - TabularType with row type:
                                        CompositeType:
                                          &quot;key&quot;   of openDataType(K)
                                          &quot;value&quot; of openDataType(V)
                                        &quot;key&quot; is the index name
                
                 Data Mapping:
                   Map&lt;K,V&gt; &lt;-&gt; TabularData                
            </comment>
            <comment line="577">
                Classes that have a static from method
                   Mapped open type - CompositeData
                
                 Data Mapping:
                   Classes &lt;-&gt; CompositeData
                
                 The name and type of items for a class are identified from
                 the getter methods. For example, a class defines a method:
                
                    public FooType getFoo();
                
                 The composite data view for this class will contain one
                 item entry for a &quot;foo&quot; attribute and the item type is
                 one of the open types defined in the OpenType class that
                 can be determined in the following manner:
                 o If FooType is a primitive type, the item type a wrapper
                   class for the corresponding primitive type (such as
                   Integer, Long, Boolean, etc).
                 o If FooType is of type CompositeData or TabularData,
                   the item type is FooType.
                 o If FooType is an Enum, the item type is a String and
                   the value is the name of the enum constant.
                 o If FooType is a class or an interface other than the above,
                   the item type is CompositeData. The same convention
                   can be recursively applied to the FooType class when
                   constructing the composite data for the &quot;foo&quot; attribute.
                 o If FooType is an array, the item type is an array and
                   its element type is determined as described above.                
            </comment>
            <javadoc line="46">
                A mapped mxbean type maps a Java type to an open type.
                  Only the following Java types are mappable
                  (currently required by the platform MXBeans):
                  1. Primitive types
                  2. Wrapper classes such java.lang.Integer, etc
                  3. Classes with only getter methods and with a static &quot;from&quot; method
                  that takes a CompositeData argument.
                  4. E[] where E is a type of 1-4 (can be multi-dimensional array)
                  5. List&lt;E&gt; where E is a type of 1-3
                  6. Map&lt;K, V&gt; where K and V are a type of 1-4
                  OpenDataException will be thrown if a Java type is not supported.                
            </javadoc>
            <declaration name="convertedTypes" type="WeakHashMap&lt;Type,MappedMXBeanType&gt;" line="64"/>
            <declaration name="isBasicType" type="boolean" line="67"/>
            <declaration name="openType" type="OpenType" line="68"/>
            <declaration name="mappedTypeClass" type="Class" line="69"/>
            <method name="newMappedType" type="MappedMXBeanType" line="72">
                <params>
                    <param name="javaType" type="Type"/>
                </params>
                <comment line="100">
                    No open type mapped for the javaType                    
                </comment>
                <declaration name="mt" type="MappedMXBeanType" line="74"/>
                <scope line="75">
                    <declaration name="c" type="Class" line="76"/>
                    <scope line="77"/>
                    <scope line="79"/>
                    <scope line="81"/>
                </scope>
                <scope line="84">
                    <declaration name="pt" type="ParameterizedType" line="85"/>
                    <declaration name="rawType" type="Type" line="86"/>
                    <scope line="87">
                        <declaration name="rc" type="Class" line="88"/>
                        <scope line="89"/>
                        <scope line="91"/>
                    </scope>
                </scope>
                <scope line="95">
                    <declaration name="t" type="GenericArrayType" line="96"/>
                </scope>
                <scope line="100"/>
            </method>
            <method name="newBasicType" type="MappedMXBeanType" line="110">
                <params>
                    <param name="c" type="Class"/>
                    <param name="ot" type="OpenType"/>
                </params>
                <declaration name="mt" type="MappedMXBeanType" line="111"/>
            </method>
            <method name="getMappedType" type="MappedMXBeanType" line="117">
                <params>
                    <param name="t" type="Type"/>
                </params>
                <declaration name="mt" type="MappedMXBeanType" line="118"/>
                <scope line="119"/>
                <scope line="123"/>
            </method>
            <method name="toOpenType" type="OpenType" line="131">
                <params>
                    <param name="t" type="Type"/>
                </params>
                <declaration name="mt" type="MappedMXBeanType" line="132"/>
            </method>
            <method name="toJavaTypeData" type="Object" line="137">
                <params>
                    <param name="openData" type="Object"/>
                    <param name="t" type="Type"/>
                </params>
                <scope line="138"/>
                <declaration name="mt" type="MappedMXBeanType" line="141"/>
            </method>
            <method name="toOpenTypeData" type="Object" line="146">
                <params>
                    <param name="data" type="Object"/>
                    <param name="t" type="Type"/>
                </params>
                <scope line="147"/>
                <declaration name="mt" type="MappedMXBeanType" line="150"/>
            </method>
            <method name="getOpenType" type="OpenType" line="155"/>
            <method name="isBasicType" type="boolean" line="159"/>
            <method name="getTypeName" type="String" line="166"/>
            <method name="getMappedTypeClass" type="Class" line="171"/>
            <method name="getJavaType" type="Type" line="175"/>
            <method name="getName" type="String" line="178"/>
            <method name="toOpenTypeData" type="Object" line="180"/>
            <method name="toJavaTypeData" type="Object" line="183"/>
            <class name="BasicMXBeanType" line="194">
                <extends class="MappedMXBeanType"/>
                <declaration name="basicType" type="Class" line="195"/>
                <method name="BasicMXBeanType" type="constructor" line="196">
                    <params>
                        <param name="c" type="Class"/>
                        <param name="openType" type="OpenType"/>
                    </params>
                </method>
                <method name="getJavaType" type="Type" line="203"/>
                <method name="getName" type="String" line="207"/>
                <method name="toOpenTypeData" type="Object" line="211">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                </method>
                <method name="toJavaTypeData" type="Object" line="216">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="EnumMXBeanType" line="229">
                <extends class="MappedMXBeanType"/>
                <declaration name="enumClass" type="Class" line="230"/>
                <method name="EnumMXBeanType" type="constructor" line="231">
                    <params>
                        <param name="c" type="Class"/>
                    </params>
                </method>
                <method name="getJavaType" type="Type" line="237"/>
                <method name="getName" type="String" line="241"/>
                <method name="toOpenTypeData" type="Object" line="245">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                </method>
                <method name="toJavaTypeData" type="Object" line="250">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <comment line="256">
                        missing enum constants                        
                    </comment>
                    <scope line="252"/>
                    <scope line="254">
                        <declaration name="ioe" type="InvalidObjectException" line="256"/>
                    </scope>
                </method>
            </class>
            <class name="ArrayMXBeanType" line="271">
                <extends class="MappedMXBeanType"/>
                <declaration name="arrayClass" type="Class" line="272"/>
                <declaration name="componentType" type="MappedMXBeanType" line="273"/>
                <declaration name="baseElementType" type="MappedMXBeanType" line="274"/>
                <method name="ArrayMXBeanType" type="constructor" line="276">
                    <params>
                        <param name="c" type="Class"/>
                    </params>
                    <declaration name="className" type="StringBuilder" line="280"/>
                    <declaration name="et" type="Class" line="281"/>
                    <declaration name="dim" type="int" line="282"/>
                    <scope line="283"/>
                    <scope line="288"/>
                    <scope line="290"/>
                    <scope line="293"/>
                    <scope line="295">
                        <declaration name="ode" type="OpenDataException" line="296"/>
                    </scope>
                </method>
                <method name="ArrayMXBeanType" type="constructor" line="305"/>
                <method name="getJavaType" type="Type" line="309"/>
                <method name="getName" type="String" line="313"/>
                <method name="toOpenTypeData" type="Object" line="317">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <comment line="319">
                        If the base element type is a basic type
                         return the data as no conversion is needed.
                         Primitive types are not converted to wrappers.                        
                    </comment>
                    <scope line="321"/>
                    <declaration name="array" type="Object[]" line="325"/>
                    <declaration name="openArray" type="Object[]" line="326"/>
                    <declaration name="i" type="int" line="329"/>
                    <scope line="330">
                        <scope line="331"/>
                        <scope line="333"/>
                    </scope>
                </method>
                <method name="toJavaTypeData" type="Object" line="343">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <comment line="346">
                        If the base element type is a basic type
                         return the data as no conversion is needed.                        
                    </comment>
                    <scope line="347"/>
                    <declaration name="openArray" type="Object[]" line="351"/>
                    <declaration name="array" type="Object[]" line="352"/>
                    <declaration name="i" type="int" line="355"/>
                    <scope line="356">
                        <scope line="357"/>
                        <scope line="359"/>
                    </scope>
                </method>
            </class>
            <class name="GenericArrayMXBeanType" line="369">
                <extends class="ArrayMXBeanType"/>
                <declaration name="gtype" type="GenericArrayType" line="370"/>
                <method name="GenericArrayMXBeanType" type="constructor" line="371">
                    <params>
                        <param name="gat" type="GenericArrayType"/>
                    </params>
                    <declaration name="className" type="StringBuilder" line="375"/>
                    <declaration name="elementType" type="Type" line="376"/>
                    <declaration name="dim" type="int" line="377"/>
                    <scope line="378">
                        <declaration name="et" type="GenericArrayType" line="380"/>
                    </scope>
                    <scope line="384"/>
                    <scope line="386"/>
                    <scope line="389"/>
                    <scope line="391">
                        <declaration name="ode" type="OpenDataException" line="392"/>
                    </scope>
                </method>
                <method name="getJavaType" type="Type" line="401"/>
                <method name="getName" type="String" line="405"/>
            </class>
            <class name="ListMXBeanType" line="416">
                <extends class="MappedMXBeanType"/>
                <declaration name="javaType" type="ParameterizedType" line="417"/>
                <declaration name="paramType" type="MappedMXBeanType" line="418"/>
                <declaration name="typeName" type="String" line="419"/>
                <method name="ListMXBeanType" type="constructor" line="421">
                    <params>
                        <param name="pt" type="ParameterizedType"/>
                    </params>
                    <declaration name="argTypes" type="Type[]" line="424"/>
                    <scope line="427"/>
                    <declaration name="et" type="Class" line="431"/>
                    <scope line="432"/>
                    <scope line="439"/>
                    <scope line="442">
                        <declaration name="ode" type="OpenDataException" line="443"/>
                    </scope>
                </method>
                <method name="getJavaType" type="Type" line="451"/>
                <method name="getName" type="String" line="455"/>
                <method name="toOpenTypeData" type="Object" line="459">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <declaration name="list" type="List&lt;Object&gt;" line="460"/>
                    <declaration name="openArray" type="Object[]" line="462"/>
                    <declaration name="i" type="int" line="465"/>
                    <scope line="466"/>
                </method>
                <method name="toJavaTypeData" type="Object" line="473">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <declaration name="openArray" type="Object[]" line="475"/>
                    <declaration name="result" type="List&lt;Object&gt;" line="476"/>
                    <scope line="477"/>
                </method>
            </class>
            <declaration name="KEY" type="String" line="484"/>
            <declaration name="VALUE" type="String" line="485"/>
            <declaration name="mapIndexNames" type="String[]" line="486"/>
            <declaration name="mapItemNames" type="String[]" line="487"/>
            <class name="MapMXBeanType" line="499">
                <extends class="MappedMXBeanType"/>
                <declaration name="javaType" type="ParameterizedType" line="500"/>
                <declaration name="keyType" type="MappedMXBeanType" line="501"/>
                <declaration name="valueType" type="MappedMXBeanType" line="502"/>
                <declaration name="typeName" type="String" line="503"/>
                <method name="MapMXBeanType" type="constructor" line="505">
                    <params>
                        <param name="pt" type="ParameterizedType"/>
                    </params>
                    <comment line="515">
                        FIXME: generate typeName for generic                        
                    </comment>
                    <declaration name="argTypes" type="Type[]" line="508"/>
                    <declaration name="mapItemTypes" type="OpenType[]" line="517"/>
                    <declaration name="rowType" type="CompositeType" line="521"/>
                </method>
                <method name="getJavaType" type="Type" line="532"/>
                <method name="getName" type="String" line="536"/>
                <method name="toOpenTypeData" type="Object" line="540">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <declaration name="map" type="Map&lt;Object,Object&gt;" line="541"/>
                    <declaration name="tabularType" type="TabularType" line="542"/>
                    <declaration name="table" type="TabularData" line="543"/>
                    <declaration name="rowType" type="CompositeType" line="544"/>
                    <scope line="546">
                        <declaration name="key" type="Object" line="547"/>
                        <declaration name="value" type="Object" line="548"/>
                        <declaration name="row" type="CompositeData" line="549"/>
                    </scope>
                </method>
                <method name="toJavaTypeData" type="Object" line="559">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <declaration name="td" type="TabularData" line="561"/>
                    <declaration name="result" type="Map&lt;Object,Object&gt;" line="563"/>
                    <scope line="564">
                        <declaration name="key" type="Object" line="565"/>
                        <declaration name="value" type="Object" line="566"/>
                    </scope>
                </method>
            </class>
            <declaration name="COMPOSITE_DATA_CLASS" type="Class&lt;?&gt;" line="573"/>
            <class name="CompositeDataMXBeanType" line="605">
                <extends class="MappedMXBeanType"/>
                <declaration name="javaClass" type="Class&lt;?&gt;" line="606"/>
                <declaration name="isCompositeData" type="boolean" line="607"/>
                <declaration name="fromMethod" type="Method" line="608"/>
                <method name="CompositeDataMXBeanType" type="constructor" line="610">
                    <params>
                        <param name="c" type="Class"/>
                    </params>
                    <comment line="615">
                        check if a static from method exists                        
                    </comment>
                    <comment line="623">
                        ignore NoSuchMethodException since we allow classes
                         that has no from method to be embeded in another class.                        
                    </comment>
                    <comment line="628">
                        c implements CompositeData - set openType to null
                         defer generating the CompositeType
                         until the object is constructed                        
                    </comment>
                    <comment line="636">
                        Make a CompositeData containing all the getters                        
                    </comment>
                    <comment line="646">
                        Select public methods that look like &quot;T getX()&quot; or &quot;boolean
                        isX()&quot;, where T is not void and X is not the empty                        
                    </comment>
                    <comment line="661">
                        ignore non-getter methods                        
                    </comment>
                    <comment line="670">
                        ignore non-getter methods                        
                    </comment>
                    <comment line="680">
                        field names                        
                    </comment>
                    <comment line="681">
                        field descriptions                        
                    </comment>
                    <scope line="615">
                        <anonymous_class line="616">
                            <method name="run" type="Method" line="617"/>
                        </anonymous_class>
                    </scope>
                    <scope line="621"/>
                    <scope line="626"/>
                    <scope line="632">
                        <anonymous_class line="637">
                            <method name="run" type="Method[]" line="638"/>
                        </anonymous_class>
                        <declaration name="methods" type="Method[]" line="636"/>
                        <declaration name="names" type="List&lt;String&gt;" line="642"/>
                        <declaration name="types" type="List&lt;OpenType&gt;" line="643"/>
                        <scope line="648">
                            <declaration name="method" type="Method" line="649"/>
                            <declaration name="name" type="String" line="650"/>
                            <declaration name="type" type="Type" line="651"/>
                            <declaration name="rest" type="String" line="652"/>
                            <scope line="653"/>
                            <scope line="657"/>
                            <scope line="659"/>
                            <scope line="667"/>
                        </scope>
                        <declaration name="nameArray" type="String[]" line="676"/>
                    </scope>
                </method>
                <method name="getJavaType" type="Type" line="685"/>
                <method name="getName" type="String" line="689"/>
                <method name="toOpenTypeData" type="Object" line="693">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <comment line="720">
                        Classes that implement CompositeData
                        
                         construct a new CompositeDataSupport object
                         so that no other classes are sent over the wire                        
                    </comment>
                    <scope line="694"/>
                    <scope line="698"/>
                    <scope line="702">
                        <scope line="703"/>
                    </scope>
                    <scope line="709"/>
                    <scope line="714"/>
                    <scope line="718">
                        <declaration name="cd" type="CompositeData" line="723"/>
                        <declaration name="ct" type="CompositeType" line="724"/>
                        <declaration name="itemNames" type="String[]" line="725"/>
                        <declaration name="itemValues" type="Object[]" line="726"/>
                    </scope>
                </method>
                <method name="toJavaTypeData" type="Object" line="735">
                    <params>
                        <param name="data" type="Object"/>
                    </params>
                    <comment line="745">
                        should never reach here                        
                    </comment>
                    <scope line="737"/>
                    <scope line="741"/>
                    <scope line="743"/>
                    <scope line="746">
                        <declaration name="ode" type="OpenDataException" line="747"/>
                    </scope>
                </method>
            </class>
            <class name="InProgress" line="757">
                <extends class="OpenType"/>
                <declaration name="description" type="String" line="758"/>
                <method name="InProgress" type="constructor" line="761"/>
                <method name="toString" type="String" line="765"/>
                <method name="hashCode" type="int" line="769"/>
                <method name="equals" type="boolean" line="773">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="isValue" type="boolean" line="777">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <declaration name="serialVersionUID" type="long" line="780"/>
            </class>
            <declaration name="inProgress" type="OpenType" line="782"/>
            <scope line="783">
                <declaration name="t" type="OpenType" line="784"/>
                <scope line="785"/>
                <scope line="787"/>
            </scope>
            <declaration name="simpleTypes" type="OpenType[]" line="794"/>
            <scope line="799">
                <scope line="800">
                    <scope line="801">
                        <declaration name="t" type="OpenType" line="802"/>
                        <declaration name="c" type="Class" line="803"/>
                        <scope line="804"/>
                        <scope line="808"/>
                        <scope line="812"/>
                        <scope line="816">
                            <scope line="817">
                                <declaration name="typeField" type="Field" line="818"/>
                                <declaration name="primitiveType" type="Class" line="819"/>
                            </scope>
                            <scope line="821"/>
                            <scope line="823"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="829"/>
            </scope>
            <javadoc line="834">
                Utility method to take a string and convert it to normal Java variable
                  name capitalization.  This normally means converting the first
                  character from upper case to lower case, but in the (unusual) special
                  case when there is more than one character and both the first and
                  second characters are upper case, we leave it alone.
                  &lt;p&gt;
                  Thus &quot;FooBah&quot; becomes &quot;fooBah&quot; and &quot;X&quot; becomes &quot;x&quot;, but &quot;URL&quot; stays
                  as &quot;URL&quot;.                
                <param>
                    name The string to be decapitalized.                    
                </param>
                <return>
                    The decapitalized version of the string.                    
                </return>
            </javadoc>
            <method name="decapitalize" type="String" line="847">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="848"/>
                <scope line="852"/>
                <declaration name="chars" type="char" line="855"/>
            </method>
        </class>
    </source>