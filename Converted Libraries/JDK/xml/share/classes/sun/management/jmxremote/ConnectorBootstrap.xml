<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.jmxremote">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.registry.Registry"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.rmi.server.UnicastRemoteObject"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.Principal"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Set"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="javax.net.ssl"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.remote.JMXAuthenticator"/>
        <import package="javax.management.remote.JMXConnectorServer"/>
        <import package="javax.management.remote.JMXConnectorServerFactory"/>
        <import package="javax.management.remote.JMXServiceURL"/>
        <import package="javax.management.remote.rmi.RMIConnectorServer"/>
        <import package="javax.rmi.ssl.SslRMIClientSocketFactory"/>
        <import package="javax.rmi.ssl.SslRMIServerSocketFactory"/>
        <import package="javax.security.auth.Subject"/>
        <import package="sun.rmi.server.UnicastRef"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.server.UnicastServerRef2"/>
        <import package="sun.management.Agent"/>
        <import package="sun.management.AgentConfigurationError"/>
        <import package="sun.management.AgentConfigurationError"/>
        <import package="sun.management.ConnectorAddressLink"/>
        <import package="sun.management.FileSystem"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.internal.RMIExporter"/>
        <import package="com.sun.jmx.remote.security.JMXPluggableAuthenticator"/>
        <class name="ConnectorBootstrap" line="88">
            <comment line="452">
                Creates and starts a RMI Connector Server for &quot;local&quot; monitoring
                 and management.                
            </comment>
            <javadoc line="88">
                This class initializes and starts the RMIConnectorServer for JSR 163
                  JMX Monitoring.                
            </javadoc>
            <interface name="DefaultValues">
                <comment line="200">
                    Nothing special to be done for this case                    
                </comment>
                <javadoc line="94">
                    Default values for JMX configuration properties.                    
                </javadoc>
                <declaration name="PORT" type="String" line="99"/>
                <declaration name="CONFIG_FILE_NAME" type="String" line="100"/>
                <declaration name="USE_SSL" type="String" line="101"/>
                <declaration name="USE_LOCAL_ONLY" type="String" line="102"/>
                <declaration name="USE_REGISTRY_SSL" type="String" line="103"/>
                <declaration name="USE_AUTHENTICATION" type="String" line="104"/>
                <declaration name="PASSWORD_FILE_NAME" type="String" line="105"/>
                <declaration name="ACCESS_FILE_NAME" type="String" line="106"/>
                <declaration name="SSL_NEED_CLIENT_AUTH" type="String" line="107"/>
            </interface>
            <interface name="PropertyNames">
                <comment line="200">
                    Nothing special to be done for this case                    
                </comment>
                <javadoc line="110">
                    Names of JMX configuration properties.                    
                </javadoc>
                <declaration name="PORT" type="String" line="115"/>
                <declaration name="CONFIG_FILE_NAME" type="String" line="117"/>
                <declaration name="USE_LOCAL_ONLY" type="String" line="119"/>
                <declaration name="USE_SSL" type="String" line="121"/>
                <declaration name="USE_REGISTRY_SSL" type="String" line="123"/>
                <declaration name="USE_AUTHENTICATION" type="String" line="125"/>
                <declaration name="PASSWORD_FILE_NAME" type="String" line="127"/>
                <declaration name="ACCESS_FILE_NAME" type="String" line="129"/>
                <declaration name="LOGIN_CONFIG_NAME" type="String" line="131"/>
                <declaration name="SSL_ENABLED_CIPHER_SUITES" type="String" line="133"/>
                <declaration name="SSL_ENABLED_PROTOCOLS" type="String" line="135"/>
                <declaration name="SSL_NEED_CLIENT_AUTH" type="String" line="137"/>
                <declaration name="SSL_CONFIG_FILE_NAME" type="String" line="139"/>
            </interface>
            <class name="JMXConnectorServerData" line="143">
                <comment line="200">
                    Nothing special to be done for this case                    
                </comment>
                <javadoc line="143">
                    JMXConnectorServer associated data.                    
                </javadoc>
                <method name="JMXConnectorServerData" type="constructor" line="150">
                    <params>
                        <param name="jmxConnectorServer" type="JMXConnectorServer"/>
                        <param name="jmxRemoteURL" type="JMXServiceURL"/>
                    </params>
                </method>
                <declaration name="jmxConnectorServer" type="JMXConnectorServer" line="154"/>
                <declaration name="jmxRemoteURL" type="JMXServiceURL" line="155"/>
            </class>
            <class name="PermanentExporter" line="158">
                <comment line="200">
                    Nothing special to be done for this case                    
                </comment>
                <implements interface="RMIExporter"/>
                <javadoc line="158">
                    &lt;p&gt;Prevents our RMI server objects from keeping the JVM alive.&lt;/p&gt;
                      &lt;p&gt;We use a private interface in Sun&apos;s JMX Remote API implementation
                      that allows us to specify how to export RMI objects.  We do so using
                      UnicastServerRef, a class in Sun&apos;s RMI implementation.  This is all
                      non-portable, of course, so this is only valid because we are inside
                      Sun&apos;s JRE.&lt;/p&gt;
                      &lt;p&gt;Objects are exported using {@link UnicastServerRef#exportObject(Remote,Object,boolean)}.  The
                      boolean parameter is called &lt;code&gt;permanent&lt;/code&gt; and means
                      both that the object is not eligible for Distributed Garbage
                      Collection, and that its continued existence will not prevent
                      the JVM from exiting.  It is the latter semantics we want (we
                      already have the former because of the way the JMX Remote API
                      works).  Hence the somewhat misleading name of this class.&lt;/p&gt;                    
                </javadoc>
                <method name="exportObject" type="Remote" line="182">
                    <params>
                        <param name="obj" type="Remote"/>
                        <param name="port" type="int"/>
                        <param name="csf" type="RMIClientSocketFactory"/>
                        <param name="ssf" type="RMIServerSocketFactory"/>
                    </params>
                    <scope line="184">
                        <scope line="185"/>
                    </scope>
                    <declaration name="ref" type="UnicastServerRef" line="190"/>
                    <scope line="191"/>
                    <scope line="193"/>
                </method>
                <method name="unexportObject" type="boolean" line="201">
                    <params>
                        <param name="obj" type="Remote"/>
                        <param name="force" type="boolean"/>
                    </params>
                </method>
                <declaration name="firstExported" type="Remote" line="204"/>
            </class>
            <class name="AccessFileCheckerAuthenticator" line="207">
                <comment line="200">
                    Nothing special to be done for this case                    
                </comment>
                <implements interface="JMXAuthenticator"/>
                <javadoc line="207">
                    This JMXAuthenticator wraps the JMXPluggableAuthenticator and verifies
                      that at least one of the principal names contained in the authenticated
                      Subject is present in the access file.                    
                </javadoc>
                <method name="AccessFileCheckerAuthenticator" type="constructor" line="215">
                    <params>
                        <param name="env" type="Map<String,Object>"/>
                    </params>
                </method>
                <method name="authenticate" type="Subject" line="221">
                    <params>
                        <param name="credentials" type="Object"/>
                    </params>
                    <declaration name="authenticator" type="JMXAuthenticator" line="222"/>
                    <declaration name="subject" type="Subject" line="224"/>
                </method>
                <method name="checkAccessFileEntries" type="void" line="229">
                    <params>
                        <param name="subject" type="Subject"/>
                    </params>
                    <scope line="230"/>
                    <declaration name="principals" type="Set" line="236"/>
                    <scope line="237">
                        <declaration name="p" type="Principal" line="238"/>
                        <scope line="239"/>
                    </scope>
                    <declaration name="principalsStr" type="Set&lt;String&gt;" line="243"/>
                    <scope line="244">
                        <declaration name="p" type="Principal" line="245"/>
                    </scope>
                </method>
                <method name="propertiesFromFile" type="Properties" line="255">
                    <params>
                        <param name="fname" type="String"/>
                    </params>
                    <declaration name="p" type="Properties" line="256"/>
                    <scope line="257"/>
                    <declaration name="fin" type="FileInputStream" line="260"/>
                </method>
                <declaration name="environment" type="Map&lt;String,Object&gt;" line="265"/>
                <declaration name="properties" type="Properties" line="266"/>
                <declaration name="accessFile" type="String" line="267"/>
            </class>
            <javadoc line="270">
                Initializes and starts the JMX Connector Server.
                  If the com.sun.management.jmxremote.port property is not defined,
                  simply return. Otherwise, attempts to load the config file, and
                  then calls {@link #initialize(java.lang.String,java.util.Properties)}.                
            </javadoc>
            <method name="initialize" type="JMXConnectorServer" line="277">
                <comment line="279">
                    Load a new management properties                    
                </comment>
                <comment line="288">
                    System.out.println(&quot;initializing: {port=&quot; + portStr + &quot;,                    
                </comment>
                <comment line="289">
                    properties=&quot;+props+&quot;}&quot;);                    
                </comment>
                <declaration name="props" type="Properties" line="280"/>
                <scope line="281"/>
                <declaration name="portStr" type="String" line="285"/>
            </method>
            <javadoc line="293">
                Initializes and starts a JMX Connector Server for remote
                  monitoring and management.                
            </javadoc>
            <method name="initialize" type="JMXConnectorServer" line="297">
                <params>
                    <param name="portStr" type="String"/>
                    <param name="props" type="Properties"/>
                </params>
                <comment line="299">
                    Get port number                    
                </comment>
                <comment line="310">
                    Do we use authentication?                    
                </comment>
                <comment line="317">
                    Do we use SSL?                    
                </comment>
                <comment line="324">
                    Do we use RMI Registry SSL?                    
                </comment>
                <comment line="361">
                    Read SSL config file name                    
                </comment>
                <comment line="369">
                    Initialize settings when authentication is active                    
                </comment>
                <comment line="372">
                    Get non-default login configuration                    
                </comment>
                <comment line="377">
                    Get password file                    
                </comment>
                <comment line="384">
                    Get access file                    
                </comment>
                <comment line="433">
                    Export remote connector address and associated configuration                    
                </comment>
                <comment line="434">
                    properties to the instrumentation buffer.                    
                </comment>
                <comment line="443">
                    Remote connector server started but unable to export remote                    
                </comment>
                <comment line="444">
                    connector address and associated configuration properties to                    
                </comment>
                <comment line="445">
                    the instrumentation buffer - non-fatal error.                    
                </comment>
                <declaration name="port" type="int" line="300"/>
                <scope line="301"/>
                <scope line="303"/>
                <scope line="306"/>
                <declaration name="useAuthenticationStr" type="String" line="311"/>
                <declaration name="useAuthentication" type="boolean" line="314"/>
                <declaration name="useSslStr" type="String" line="318"/>
                <declaration name="useSsl" type="boolean" line="321"/>
                <declaration name="useRegistrySslStr" type="String" line="325"/>
                <declaration name="useRegistrySsl" type="boolean" line="328"/>
                <declaration name="enabledCipherSuites" type="String" line="331"/>
                <declaration name="enabledCipherSuitesList" type="String" line="333"/>
                <scope line="334">
                    <declaration name="st" type="StringTokenizer" line="335"/>
                    <declaration name="tokens" type="int" line="336"/>
                    <scope line="338"/>
                </scope>
                <declaration name="enabledProtocols" type="String" line="343"/>
                <declaration name="enabledProtocolsList" type="String" line="345"/>
                <scope line="346">
                    <declaration name="st" type="StringTokenizer" line="347"/>
                    <declaration name="tokens" type="int" line="348"/>
                    <scope line="350"/>
                </scope>
                <declaration name="sslNeedClientAuthStr" type="String" line="355"/>
                <declaration name="sslNeedClientAuth" type="boolean" line="358"/>
                <declaration name="sslConfigFileName" type="String" line="362"/>
                <declaration name="loginConfigName" type="String" line="365"/>
                <declaration name="passwordFileName" type="String" line="366"/>
                <declaration name="accessFileName" type="String" line="367"/>
                <scope line="370">
                    <scope line="376"/>
                </scope>
                <scope line="390"/>
                <declaration name="mbs" type="MBeanServer" line="414"/>
                <declaration name="cs" type="JMXConnectorServer" line="415"/>
                <declaration name="url" type="JMXServiceURL" line="416"/>
                <scope line="417">
                    <declaration name="data" type="JMXConnectorServerData" line="418"/>
                </scope>
                <scope line="429"/>
                <scope line="432">
                    <declaration name="properties" type="Map&lt;String,String&gt;" line="435"/>
                </scope>
                <scope line="442"/>
            </method>
            <method name="startLocalConnectorServer" type="JMXConnectorServer" line="455">
                <comment line="456">
                    Ensure cryptographically strong random number generater used                    
                </comment>
                <comment line="457">
                    to choose the object number - see java.rmi.server.ObjID                    
                </comment>
                <comment line="460">
                    This RMI server should not keep the VM alive                    
                </comment>
                <comment line="464">
                    The local connector server need only be available via the                    
                </comment>
                <comment line="465">
                    loopback connection.                    
                </comment>
                <comment line="474">
                    localhost unknown or (somehow) didn&apos;t resolve to                    
                </comment>
                <comment line="475">
                    a loopback address.                    
                </comment>
                <comment line="483">
                    Do we accept connections from local interfaces only?                    
                </comment>
                <declaration name="env" type="Map&lt;String,Object&gt;" line="461"/>
                <declaration name="localhost" type="String" line="466"/>
                <declaration name="lh" type="InetAddress" line="467"/>
                <scope line="468"/>
                <scope line="471"/>
                <scope line="476"/>
                <declaration name="mbs" type="MBeanServer" line="480"/>
                <scope line="481">
                    <declaration name="url" type="JMXServiceURL" line="482"/>
                    <declaration name="props" type="Properties" line="484"/>
                    <scope line="485"/>
                    <declaration name="useLocalOnlyStr" type="String" line="488"/>
                    <declaration name="useLocalOnly" type="boolean" line="490"/>
                    <scope line="491"/>
                    <declaration name="server" type="JMXConnectorServer" line="495"/>
                </scope>
                <scope line="499"/>
            </method>
            <method name="checkPasswordFile" type="void" line="504">
                <params>
                    <param name="passwordFileName" type="String"/>
                </params>
                <scope line="505"/>
                <declaration name="file" type="File" line="508"/>
                <scope line="509"/>
                <scope line="513"/>
                <declaration name="fs" type="FileSystem" line="517"/>
                <scope line="518">
                    <scope line="519">
                        <scope line="520">
                            <declaration name="msg" type="String" line="521"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="528"/>
            </method>
            <method name="checkAccessFile" type="void" line="534">
                <params>
                    <param name="accessFileName" type="String"/>
                </params>
                <scope line="535"/>
                <declaration name="file" type="File" line="538"/>
                <scope line="539"/>
                <scope line="543"/>
            </method>
            <method name="checkRestrictedFile" type="void" line="548">
                <params>
                    <param name="restrictedFileName" type="String"/>
                </params>
                <scope line="549"/>
                <declaration name="file" type="File" line="552"/>
                <scope line="553"/>
                <scope line="556"/>
                <declaration name="fs" type="FileSystem" line="559"/>
                <scope line="560">
                    <scope line="561">
                        <scope line="562">
                            <declaration name="msg" type="String" line="563"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="571"/>
            </method>
            <javadoc line="577">
                Compute the full path name for a default file.                
                <param>
                    basename basename (with extension) of the default file.                    
                </param>
                <return>
                    ${JRE}/lib/management/${basename}                    
                </return>
            </javadoc>
            <method name="getDefaultFileName" type="String" line="582">
                <params>
                    <param name="basename" type="String"/>
                </params>
                <declaration name="fileSeparator" type="String" line="583"/>
            </method>
            <method name="createSslRMIServerSocketFactory" type="SslRMIServerSocketFactory" line="593">
                <params>
                    <param name="sslConfigFileName" type="String"/>
                    <param name="enabledCipherSuites" type="String[]"/>
                    <param name="enabledProtocols" type="String[]"/>
                    <param name="sslNeedClientAuth" type="boolean"/>
                </params>
                <comment line="602">
                    Load the SSL keystore properties from the config file                    
                </comment>
                <scope line="594"/>
                <scope line="599">
                    <scope line="601">
                        <declaration name="p" type="Properties" line="603"/>
                        <declaration name="in" type="InputStream" line="604"/>
                        <scope line="605">
                            <declaration name="bin" type="BufferedInputStream" line="606"/>
                        </scope>
                        <scope line="608"/>
                        <declaration name="keyStore" type="String" line="611"/>
                        <declaration name="keyStorePassword" type="String" line="613"/>
                        <declaration name="trustStore" type="String" line="615"/>
                        <declaration name="trustStorePassword" type="String" line="617"/>
                        <declaration name="keyStorePasswd" type="char[]" line="620"/>
                        <scope line="621"/>
                        <declaration name="trustStorePasswd" type="char[]" line="625"/>
                        <scope line="626"/>
                        <declaration name="ks" type="KeyStore" line="630"/>
                        <scope line="631">
                            <declaration name="ksfis" type="FileInputStream" line="633"/>
                            <scope line="634"/>
                            <scope line="636"/>
                        </scope>
                        <declaration name="kmf" type="KeyManagerFactory" line="640"/>
                        <declaration name="ts" type="KeyStore" line="644"/>
                        <scope line="645">
                            <declaration name="tsfis" type="FileInputStream" line="647"/>
                            <scope line="648"/>
                            <scope line="650"/>
                        </scope>
                        <declaration name="tmf" type="TrustManagerFactory" line="654"/>
                        <declaration name="ctx" type="SSLContext" line="658"/>
                    </scope>
                    <scope line="666"/>
                </scope>
            </method>
            <method name="exportMBeanServer" type="JMXConnectorServerData" line="685">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="port" type="int"/>
                    <param name="useSsl" type="boolean"/>
                    <param name="useRegistrySsl" type="boolean"/>
                    <param name="sslConfigFileName" type="String"/>
                    <param name="enabledCipherSuites" type="String[]"/>
                    <param name="enabledProtocols" type="String[]"/>
                    <param name="sslNeedClientAuth" type="boolean"/>
                    <param name="useAuthentication" type="boolean"/>
                    <param name="loginConfigName" type="String"/>
                    <param name="passwordFileName" type="String"/>
                    <param name="accessFileName" type="String"/>
                </params>
                <comment line="687">
                    Make sure we use non-guessable RMI object IDs.  Otherwise
                     attackers could hijack open connections by guessing their                    
                </comment>
                <comment line="765">
                    Our exporter remembers the first object it was asked to
                    export, which will be an RMIServerImpl appropriate for
                    publication in our special registry.  We could
                    alternatively have constructed the RMIServerImpl explicitly
                    and then constructed an RMIConnectorServer passing it as a
                    parameter, but that&apos;s quite a bit more verbose and pulls in                    
                </comment>
                <declaration name="url" type="JMXServiceURL" line="692"/>
                <declaration name="env" type="Map&lt;String,Object&gt;" line="694"/>
                <declaration name="exporter" type="PermanentExporter" line="696"/>
                <scope line="700">
                    <scope line="701"/>
                    <scope line="704"/>
                    <scope line="711"/>
                </scope>
                <declaration name="csf" type="RMIClientSocketFactory" line="717"/>
                <declaration name="ssf" type="RMIServerSocketFactory" line="718"/>
                <scope line="720"/>
                <scope line="727"/>
                <declaration name="connServer" type="JMXConnectorServer" line="734"/>
                <scope line="735"/>
                <scope line="739">
                    <scope line="740"/>
                    <scope line="743"/>
                </scope>
                <declaration name="registry" type="Registry" line="749"/>
                <scope line="750"/>
                <scope line="754"/>
                <declaration name="remoteURL" type="JMXServiceURL" line="760"/>
            </method>
            <javadoc line="776">
                This class cannot be instantiated.                
            </javadoc>
            <method name="ConnectorBootstrap" type="constructor" line="779"/>
            <declaration name="log" type="ClassLogger" line="782"/>
        </class>
    </source>