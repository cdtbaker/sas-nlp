<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.jmxremote">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.registry.Registry"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.rmi.server.UnicastRemoteObject"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.Principal"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Set"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="javax.net.ssl"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.remote.JMXAuthenticator"/>
        <import package="javax.management.remote.JMXConnectorServer"/>
        <import package="javax.management.remote.JMXConnectorServerFactory"/>
        <import package="javax.management.remote.JMXServiceURL"/>
        <import package="javax.management.remote.rmi.RMIConnectorServer"/>
        <import package="javax.rmi.ssl.SslRMIClientSocketFactory"/>
        <import package="javax.rmi.ssl.SslRMIServerSocketFactory"/>
        <import package="javax.security.auth.Subject"/>
        <import package="sun.rmi.server.UnicastRef"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.server.UnicastServerRef2"/>
        <import package="sun.management.Agent"/>
        <import package="sun.management.AgentConfigurationError"/>
        <import package="sun.management.AgentConfigurationError"/>
        <import package="sun.management.ConnectorAddressLink"/>
        <import package="sun.management.FileSystem"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.internal.RMIExporter"/>
        <import package="com.sun.jmx.remote.security.JMXPluggableAuthenticator"/>
        <class name="ConnectorBootstrap" line="49">
            <javadoc line="49">
                This class initializes and starts the RMIConnectorServer for JSR 163
                  JMX Monitoring.                
            </javadoc>
            <interface name="DefaultValues">
                <javadoc line="54">
                    Default values for JMX configuration properties.                    
                </javadoc>
                <declaration name="PORT" type="String" line="58"/>
                <declaration name="CONFIG_FILE_NAME" type="String" line="59"/>
                <declaration name="USE_SSL" type="String" line="60"/>
                <declaration name="USE_LOCAL_ONLY" type="String" line="61"/>
                <declaration name="USE_REGISTRY_SSL" type="String" line="62"/>
                <declaration name="USE_AUTHENTICATION" type="String" line="63"/>
                <declaration name="PASSWORD_FILE_NAME" type="String" line="64"/>
                <declaration name="ACCESS_FILE_NAME" type="String" line="65"/>
                <declaration name="SSL_NEED_CLIENT_AUTH" type="String" line="66"/>
            </interface>
            <interface name="PropertyNames">
                <javadoc line="68">
                    Names of JMX configuration properties.                    
                </javadoc>
                <declaration name="PORT" type="String" line="72"/>
                <declaration name="CONFIG_FILE_NAME" type="String" line="73"/>
                <declaration name="USE_LOCAL_ONLY" type="String" line="74"/>
                <declaration name="USE_SSL" type="String" line="75"/>
                <declaration name="USE_REGISTRY_SSL" type="String" line="76"/>
                <declaration name="USE_AUTHENTICATION" type="String" line="77"/>
                <declaration name="PASSWORD_FILE_NAME" type="String" line="78"/>
                <declaration name="ACCESS_FILE_NAME" type="String" line="79"/>
                <declaration name="LOGIN_CONFIG_NAME" type="String" line="80"/>
                <declaration name="SSL_ENABLED_CIPHER_SUITES" type="String" line="81"/>
                <declaration name="SSL_ENABLED_PROTOCOLS" type="String" line="82"/>
                <declaration name="SSL_NEED_CLIENT_AUTH" type="String" line="83"/>
                <declaration name="SSL_CONFIG_FILE_NAME" type="String" line="84"/>
            </interface>
            <class name="JMXConnectorServerData" line="86">
                <javadoc line="86">
                    JMXConnectorServer associated data.                    
                </javadoc>
                <method name="JMXConnectorServerData" type="constructor" line="90">
                    <params>
                        <param name="jmxConnectorServer" type="JMXConnectorServer"/>
                        <param name="jmxRemoteURL" type="JMXServiceURL"/>
                    </params>
                </method>
                <declaration name="jmxConnectorServer" type="JMXConnectorServer" line="94"/>
                <declaration name="jmxRemoteURL" type="JMXServiceURL" line="95"/>
            </class>
            <class name="PermanentExporter" line="97">
                <implements interface="RMIExporter"/>
                <javadoc line="97">
                    &lt;p&gt;Prevents our RMI server objects from keeping the JVM alive.&lt;/p&gt;
                      &lt;p&gt;We use a private interface in Sun&apos;s JMX Remote API implementation
                      that allows us to specify how to export RMI objects.  We do so using
                      UnicastServerRef, a class in Sun&apos;s RMI implementation.  This is all
                      non-portable, of course, so this is only valid because we are inside
                      Sun&apos;s JRE.&lt;/p&gt;
                      &lt;p&gt;Objects are exported using {@link UnicastServerRef#exportObject(Remote,Object,boolean)}.  The
                      boolean parameter is called &lt;code&gt;permanent&lt;/code&gt; and means
                      both that the object is not eligible for Distributed Garbage
                      Collection, and that its continued existence will not prevent
                      the JVM from exiting.  It is the latter semantics we want (we
                      already have the former because of the way the JMX Remote API
                      works).  Hence the somewhat misleading name of this class.&lt;/p&gt;                    
                </javadoc>
                <method name="exportObject" type="Remote" line="113">
                    <params>
                        <param name="obj" type="Remote"/>
                        <param name="port" type="int"/>
                        <param name="csf" type="RMIClientSocketFactory"/>
                        <param name="ssf" type="RMIServerSocketFactory"/>
                    </params>
                    <scope line="114">
                        <scope line="115"/>
                    </scope>
                    <declaration name="ref" type="UnicastServerRef" line="119"/>
                    <scope line="120"/>
                    <scope line="123"/>
                </method>
                <method name="unexportObject" type="boolean" line="128">
                    <params>
                        <param name="obj" type="Remote"/>
                        <param name="force" type="boolean"/>
                    </params>
                </method>
                <declaration name="firstExported" type="Remote" line="131"/>
            </class>
            <class name="AccessFileCheckerAuthenticator" line="133">
                <implements interface="JMXAuthenticator"/>
                <javadoc line="133">
                    This JMXAuthenticator wraps the JMXPluggableAuthenticator and verifies
                      that at least one of the principal names contained in the authenticated
                      Subject is present in the access file.                    
                </javadoc>
                <method name="AccessFileCheckerAuthenticator" type="constructor" line="139">
                    <params>
                        <param name="env" type="Map<String,Object>"/>
                    </params>
                </method>
                <method name="authenticate" type="Subject" line="144">
                    <params>
                        <param name="credentials" type="Object"/>
                    </params>
                    <declaration name="authenticator" type="JMXAuthenticator" line="145"/>
                    <declaration name="subject" type="Subject" line="146"/>
                </method>
                <method name="checkAccessFileEntries" type="void" line="150">
                    <params>
                        <param name="subject" type="Subject"/>
                    </params>
                    <scope line="151"/>
                    <declaration name="principals" type="Set" line="154"/>
                    <scope line="155">
                        <declaration name="p" type="Principal" line="156"/>
                        <scope line="157"/>
                    </scope>
                    <declaration name="principalsStr" type="Set&lt;String&gt;" line="161"/>
                    <scope line="162">
                        <declaration name="p" type="Principal" line="163"/>
                    </scope>
                </method>
                <method name="propertiesFromFile" type="Properties" line="168">
                    <params>
                        <param name="fname" type="String"/>
                    </params>
                    <declaration name="p" type="Properties" line="169"/>
                    <scope line="170"/>
                    <declaration name="fin" type="FileInputStream" line="173"/>
                </method>
                <declaration name="environment" type="Map&lt;String,Object&gt;" line="178"/>
                <declaration name="properties" type="Properties" line="179"/>
                <declaration name="accessFile" type="String" line="180"/>
            </class>
            <javadoc line="182">
                Initializes and starts the JMX Connector Server.
                  If the com.sun.management.jmxremote.port property is not defined,
                  simply return. Otherwise, attempts to load the config file, and
                  then calls {@link #initialize(java.lang.String,java.util.Properties)}.                
            </javadoc>
            <method name="initialize" type="JMXConnectorServer" line="188">
                <declaration name="props" type="Properties" line="189"/>
                <scope line="190"/>
                <declaration name="portStr" type="String" line="193"/>
            </method>
            <javadoc line="196">
                Initializes and starts a JMX Connector Server for remote
                  monitoring and management.                
            </javadoc>
            <method name="initialize" type="JMXConnectorServer" line="200">
                <params>
                    <param name="portStr" type="String"/>
                    <param name="props" type="Properties"/>
                </params>
                <declaration name="port" type="int" line="201"/>
                <scope line="202"/>
                <scope line="205"/>
                <scope line="208"/>
                <declaration name="useAuthenticationStr" type="String" line="211"/>
                <declaration name="useAuthentication" type="boolean" line="212"/>
                <declaration name="useSslStr" type="String" line="213"/>
                <declaration name="useSsl" type="boolean" line="214"/>
                <declaration name="useRegistrySslStr" type="String" line="215"/>
                <declaration name="useRegistrySsl" type="boolean" line="216"/>
                <declaration name="enabledCipherSuites" type="String" line="217"/>
                <declaration name="enabledCipherSuitesList" type="String" line="218"/>
                <scope line="219">
                    <declaration name="st" type="StringTokenizer" line="220"/>
                    <declaration name="tokens" type="int" line="221"/>
                    <scope line="223"/>
                </scope>
                <declaration name="enabledProtocols" type="String" line="227"/>
                <declaration name="enabledProtocolsList" type="String" line="228"/>
                <scope line="229">
                    <declaration name="st" type="StringTokenizer" line="230"/>
                    <declaration name="tokens" type="int" line="231"/>
                    <scope line="233"/>
                </scope>
                <declaration name="sslNeedClientAuthStr" type="String" line="237"/>
                <declaration name="sslNeedClientAuth" type="boolean" line="238"/>
                <declaration name="sslConfigFileName" type="String" line="239"/>
                <declaration name="loginConfigName" type="String" line="240"/>
                <declaration name="passwordFileName" type="String" line="241"/>
                <declaration name="accessFileName" type="String" line="242"/>
                <scope line="243">
                    <scope line="245"/>
                </scope>
                <scope line="252"/>
                <declaration name="mbs" type="MBeanServer" line="255"/>
                <declaration name="cs" type="JMXConnectorServer" line="256"/>
                <declaration name="url" type="JMXServiceURL" line="257"/>
                <scope line="258">
                    <declaration name="data" type="JMXConnectorServerData" line="259"/>
                </scope>
                <scope line="264"/>
                <scope line="267">
                    <declaration name="properties" type="Map&lt;String,String&gt;" line="268"/>
                </scope>
                <scope line="276"/>
            </method>
            <method name="startLocalConnectorServer" type="JMXConnectorServer" line="281">
                <declaration name="env" type="Map&lt;String,Object&gt;" line="283"/>
                <declaration name="localhost" type="String" line="285"/>
                <declaration name="lh" type="InetAddress" line="286"/>
                <scope line="287"/>
                <scope line="291"/>
                <scope line="293"/>
                <declaration name="mbs" type="MBeanServer" line="296"/>
                <scope line="297">
                    <declaration name="url" type="JMXServiceURL" line="298"/>
                    <declaration name="props" type="Properties" line="299"/>
                    <scope line="300"/>
                    <declaration name="useLocalOnlyStr" type="String" line="303"/>
                    <declaration name="useLocalOnly" type="boolean" line="304"/>
                    <scope line="305"/>
                    <declaration name="server" type="JMXConnectorServer" line="308"/>
                </scope>
                <scope line="312"/>
            </method>
            <method name="checkPasswordFile" type="void" line="316">
                <params>
                    <param name="passwordFileName" type="String"/>
                </params>
                <scope line="317"/>
                <declaration name="file" type="File" line="320"/>
                <scope line="321"/>
                <scope line="324"/>
                <declaration name="fs" type="FileSystem" line="327"/>
                <scope line="328">
                    <scope line="329">
                        <scope line="330">
                            <declaration name="msg" type="String" line="331"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="337"/>
            </method>
            <method name="checkAccessFile" type="void" line="341">
                <params>
                    <param name="accessFileName" type="String"/>
                </params>
                <scope line="342"/>
                <declaration name="file" type="File" line="345"/>
                <scope line="346"/>
                <scope line="349"/>
            </method>
            <method name="checkRestrictedFile" type="void" line="353">
                <params>
                    <param name="restrictedFileName" type="String"/>
                </params>
                <scope line="354"/>
                <declaration name="file" type="File" line="357"/>
                <scope line="358"/>
                <scope line="361"/>
                <declaration name="fs" type="FileSystem" line="364"/>
                <scope line="365">
                    <scope line="366">
                        <scope line="367">
                            <declaration name="msg" type="String" line="368"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="374"/>
            </method>
            <javadoc line="378">
                Compute the full path name for a default file.                
                <param>
                    basename basename (with extension) of the default file.                    
                </param>
                <return>
                    ${JRE}/lib/management/${basename}                    
                </return>
            </javadoc>
            <method name="getDefaultFileName" type="String" line="383">
                <params>
                    <param name="basename" type="String"/>
                </params>
                <declaration name="fileSeparator" type="String" line="384"/>
            </method>
            <method name="createSslRMIServerSocketFactory" type="SslRMIServerSocketFactory" line="387">
                <params>
                    <param name="sslConfigFileName" type="String"/>
                    <param name="enabledCipherSuites" type="String[]"/>
                    <param name="enabledProtocols" type="String[]"/>
                    <param name="sslNeedClientAuth" type="boolean"/>
                </params>
                <scope line="388"/>
                <scope line="391">
                    <scope line="393">
                        <declaration name="p" type="Properties" line="394"/>
                        <declaration name="in" type="InputStream" line="395"/>
                        <scope line="396">
                            <declaration name="bin" type="BufferedInputStream" line="397"/>
                        </scope>
                        <scope line="400"/>
                        <declaration name="keyStore" type="String" line="403"/>
                        <declaration name="keyStorePassword" type="String" line="404"/>
                        <declaration name="trustStore" type="String" line="405"/>
                        <declaration name="trustStorePassword" type="String" line="406"/>
                        <declaration name="keyStorePasswd" type="char[]" line="407"/>
                        <scope line="408"/>
                        <declaration name="trustStorePasswd" type="char[]" line="411"/>
                        <scope line="412"/>
                        <declaration name="ks" type="KeyStore" line="415"/>
                        <scope line="416">
                            <declaration name="ksfis" type="FileInputStream" line="418"/>
                            <scope line="419"/>
                            <scope line="422"/>
                        </scope>
                        <declaration name="kmf" type="KeyManagerFactory" line="426"/>
                        <declaration name="ts" type="KeyStore" line="428"/>
                        <scope line="429">
                            <declaration name="tsfis" type="FileInputStream" line="431"/>
                            <scope line="432"/>
                            <scope line="435"/>
                        </scope>
                        <declaration name="tmf" type="TrustManagerFactory" line="439"/>
                        <declaration name="ctx" type="SSLContext" line="441"/>
                    </scope>
                    <scope line="445"/>
                </scope>
            </method>
            <method name="exportMBeanServer" type="JMXConnectorServerData" line="450">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="port" type="int"/>
                    <param name="useSsl" type="boolean"/>
                    <param name="useRegistrySsl" type="boolean"/>
                    <param name="sslConfigFileName" type="String"/>
                    <param name="enabledCipherSuites" type="String[]"/>
                    <param name="enabledProtocols" type="String[]"/>
                    <param name="sslNeedClientAuth" type="boolean"/>
                    <param name="useAuthentication" type="boolean"/>
                    <param name="loginConfigName" type="String"/>
                    <param name="passwordFileName" type="String"/>
                    <param name="accessFileName" type="String"/>
                </params>
                <declaration name="url" type="JMXServiceURL" line="452"/>
                <declaration name="env" type="Map&lt;String,Object&gt;" line="453"/>
                <declaration name="exporter" type="PermanentExporter" line="454"/>
                <scope line="456">
                    <scope line="457"/>
                    <scope line="460"/>
                    <scope line="464"/>
                </scope>
                <declaration name="csf" type="RMIClientSocketFactory" line="468"/>
                <declaration name="ssf" type="RMIServerSocketFactory" line="469"/>
                <scope line="470"/>
                <scope line="474"/>
                <declaration name="connServer" type="JMXConnectorServer" line="478"/>
                <scope line="479"/>
                <scope line="483">
                    <scope line="484"/>
                    <scope line="487"/>
                </scope>
                <declaration name="registry" type="Registry" line="491"/>
                <scope line="492"/>
                <scope line="495"/>
                <declaration name="remoteURL" type="JMXServiceURL" line="498"/>
            </method>
            <javadoc line="501">
                This class cannot be instantiated.                
            </javadoc>
            <method name="ConnectorBootstrap" type="constructor" line="504"/>
            <declaration name="log" type="ClassLogger" line="506"/>
        </class>
    </source>