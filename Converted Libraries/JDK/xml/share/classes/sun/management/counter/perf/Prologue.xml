<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.counter.perf">
        <import package="sun.management.counter"/>
        <import package="java.nio"/>
        <class name="Prologue" line="31">
            <comment line="33">
                these constants should match their #define counterparts in vmdata.hpp                
            </comment>
            <comment line="138">
                The following fields are updated asynchronously
                 while they are accessed by these methods.                
            </comment>
            <declaration name="PERFDATA_BIG_ENDIAN" type="byte" line="33"/>
            <declaration name="PERFDATA_LITTLE_ENDIAN" type="byte" line="34"/>
            <declaration name="PERFDATA_MAGIC" type="int" line="35"/>
            <class name="PrologueFieldOffset" line="37">
                <comment line="54">
                    these constants must match the field offsets and sizes
                     in the PerfDataPrologue structure in perfMemory.hpp                    
                </comment>
                <declaration name="SIZEOF_BYTE" type="int" line="38"/>
                <declaration name="SIZEOF_INT" type="int" line="39"/>
                <declaration name="SIZEOF_LONG" type="int" line="40"/>
                <declaration name="MAGIC_SIZE" type="int" line="42"/>
                <declaration name="BYTE_ORDER_SIZE" type="int" line="43"/>
                <declaration name="MAJOR_SIZE" type="int" line="44"/>
                <declaration name="MINOR_SIZE" type="int" line="45"/>
                <declaration name="ACCESSIBLE_SIZE" type="int" line="46"/>
                <declaration name="USED_SIZE" type="int" line="47"/>
                <declaration name="OVERFLOW_SIZE" type="int" line="48"/>
                <declaration name="MOD_TIMESTAMP_SIZE" type="int" line="49"/>
                <declaration name="ENTRY_OFFSET_SIZE" type="int" line="50"/>
                <declaration name="NUM_ENTRIES_SIZE" type="int" line="51"/>
                <declaration name="MAGIC" type="int" line="55"/>
                <declaration name="BYTE_ORDER" type="int" line="56"/>
                <declaration name="MAJOR_VERSION" type="int" line="57"/>
                <declaration name="MINOR_VERSION" type="int" line="58"/>
                <declaration name="ACCESSIBLE" type="int" line="59"/>
                <declaration name="USED" type="int" line="60"/>
                <declaration name="OVERFLOW" type="int" line="61"/>
                <declaration name="MOD_TIMESTAMP" type="int" line="62"/>
                <declaration name="ENTRY_OFFSET" type="int" line="63"/>
                <declaration name="NUM_ENTRIES" type="int" line="64"/>
                <declaration name="PROLOGUE_2_0_SIZE" type="int" line="65"/>
            </class>
            <declaration name="header" type="ByteBuffer" line="69"/>
            <declaration name="magic" type="int" line="70"/>
            <method name="Prologue" type="constructor" line="72">
                <params>
                    <param name="b" type="ByteBuffer"/>
                </params>
                <comment line="76">
                    the magic number is always stored in big-endian format
                     save and restore the buffer&apos;s initial byte order around
                     the fetch of the data.                    
                </comment>
                <comment line="83">
                    the magic number is always stored in big-endian format                    
                </comment>
                <comment line="90">
                    set the buffer&apos;s byte order according to the value of its
                     byte order field.                    
                </comment>
                <comment line="94">
                    Check version                    
                </comment>
                <comment line="103">
                    Currently, only support 2.0 version.                    
                </comment>
                <scope line="83"/>
                <declaration name="major" type="int" line="94"/>
                <declaration name="minor" type="int" line="95"/>
                <scope line="97"/>
            </method>
            <method name="getMagic" type="int" line="106"/>
            <method name="getMajorVersion" type="int" line="110"/>
            <method name="getMinorVersion" type="int" line="115"/>
            <method name="getByteOrder" type="ByteOrder" line="120">
                <declaration name="byte_order" type="byte" line="123"/>
                <scope line="124"/>
                <scope line="127"/>
            </method>
            <method name="getEntryOffset" type="int" line="132"/>
            <method name="getUsed" type="int" line="139"/>
            <method name="getOverflow" type="int" line="144"/>
            <method name="getModificationTimeStamp" type="long" line="149"/>
            <method name="getNumEntries" type="int" line="154"/>
            <method name="isAccessible" type="boolean" line="159">
                <declaration name="b" type="byte" line="161"/>
            </method>
        </class>
    </source>