<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management">
        <import package="java.lang.management"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="sun.security.action.LoadLibraryAction"/>
        <import package="sun.util.logging.LoggingSupport"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="com.sun.management.OSMBeanFactory"/>
        <import package="com.sun.management.HotSpotDiagnosticMXBean"/>
        <import package="java.lang.management.ManagementFactory"/>
        <class name="ManagementFactoryHelper" line="52">
            <comment line="149">
                The logging MXBean object is an instance of                
            </comment>
            <comment line="150">
                PlatformLoggingMXBean and java.util.logging.LoggingMXBean                
            </comment>
            <comment line="151">
                but it can&apos;t directly implement two MXBean interfaces                
            </comment>
            <comment line="152">
                as a compliant MXBean implements exactly one MXBean interface,                
            </comment>
            <comment line="153">
                or if it implements one interface that is a subinterface of                
            </comment>
            <comment line="154">
                all the others; otherwise, it is a non-compliant MXBean                
            </comment>
            <comment line="155">
                and MBeanServer will throw NotCompliantMBeanException.                
            </comment>
            <comment line="156">
                See the Definition of an MXBean section in javax.management.MXBean spec.                
            </comment>
            <comment line="157">
                                
            </comment>
            <comment line="158">
                To create a compliant logging MXBean, define a LoggingMXBean interface                
            </comment>
            <comment line="159">
                that extend PlatformLoggingMXBean and j.u.l.LoggingMXBean                
            </comment>
            <comment line="442">
                These values are defined in jmm.h                
            </comment>
            <javadoc line="52">
                ManagementFactoryHelper provides static factory methods to create
                  instances of the management interface.                
            </javadoc>
            <method name="ManagementFactoryHelper" type="constructor" line="57"/>
            <declaration name="jvm" type="VMManagement" line="59"/>
            <declaration name="classMBean" type="ClassLoadingImpl" line="61"/>
            <declaration name="memoryMBean" type="MemoryImpl" line="62"/>
            <declaration name="threadMBean" type="ThreadImpl" line="63"/>
            <declaration name="runtimeMBean" type="RuntimeImpl" line="64"/>
            <declaration name="compileMBean" type="CompilationImpl" line="65"/>
            <declaration name="osMBean" type="OperatingSystemImpl" line="66"/>
            <method name="getClassLoadingMXBean" type="ClassLoadingMXBean" line="68">
                <scope line="69"/>
            </method>
            <method name="getMemoryMXBean" type="MemoryMXBean" line="75">
                <scope line="76"/>
            </method>
            <method name="getThreadMXBean" type="ThreadMXBean" line="82">
                <scope line="83"/>
            </method>
            <method name="getRuntimeMXBean" type="RuntimeMXBean" line="89">
                <scope line="90"/>
            </method>
            <method name="getCompilationMXBean" type="CompilationMXBean" line="96">
                <scope line="97"/>
            </method>
            <method name="getOperatingSystemMXBean" type="OperatingSystemMXBean" line="103">
                <scope line="104"/>
            </method>
            <method name="getMemoryPoolMXBeans" type="List<MemoryPoolMXBean>" line="111">
                <declaration name="pools" type="MemoryPoolMXBean[]" line="112"/>
                <declaration name="list" type="List&lt;MemoryPoolMXBean&gt;" line="113"/>
                <scope line="114"/>
            </method>
            <method name="getMemoryManagerMXBeans" type="List<MemoryManagerMXBean>" line="120">
                <declaration name="mgrs" type="MemoryManagerMXBean[]" line="121"/>
                <declaration name="result" type="List&lt;MemoryManagerMXBean&gt;" line="122"/>
                <scope line="123"/>
            </method>
            <method name="getGarbageCollectorMXBeans" type="List<GarbageCollectorMXBean>" line="129">
                <declaration name="mgrs" type="MemoryManagerMXBean[]" line="130"/>
                <declaration name="result" type="List&lt;GarbageCollectorMXBean&gt;" line="131"/>
                <scope line="132">
                    <scope line="133"/>
                </scope>
            </method>
            <method name="getPlatformLoggingMXBean" type="PlatformLoggingMXBean" line="140">
                <scope line="141"/>
                <scope line="143"/>
            </method>
            <interface name="LoggingMXBean">
                <implements interface="PlatformLoggingMXBean"/>
                <implements interface="java.util.logging.LoggingMXBean"/>
                <comment line="169">
                    created lazily                    
                </comment>
            </interface>
            <class name="PlatformLoggingImpl" line="163">
                <comment line="169">
                    created lazily                    
                </comment>
                <implements interface="LoggingMXBean"/>
                <declaration name="instance" type="PlatformLoggingMXBean" line="165"/>
                <declaration name="LOGGING_MXBEAN_NAME" type="String" line="166"/>
                <declaration name="objname" type="ObjectName" line="168"/>
                <method name="getObjectName" type="ObjectName" line="170">
                    <declaration name="result" type="ObjectName" line="171"/>
                    <scope line="172">
                        <scope line="173">
                            <scope line="174"/>
                        </scope>
                    </scope>
                </method>
                <method name="getLoggerNames" type="java.util.List<String>" line="184"/>
                <method name="getLoggerLevel" type="String" line="189">
                    <params>
                        <param name="loggerName" type="String"/>
                    </params>
                </method>
                <method name="setLoggerLevel" type="void" line="194">
                    <params>
                        <param name="loggerName" type="String"/>
                        <param name="levelName" type="String"/>
                    </params>
                </method>
                <method name="getParentLoggerName" type="String" line="199">
                    <params>
                        <param name="loggerName" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="bufferPools" type="List&lt;BufferPoolMXBean&gt;" line="204"/>
            <method name="getBufferPoolMXBeans" type="List<BufferPoolMXBean>" line="205">
                <scope line="206"/>
            </method>
            <declaration name="BUFFER_POOL_MXBEAN_NAME" type="String" line="216"/>
            <javadoc line="218">
                Creates management interface for the given buffer pool.                
            </javadoc>
            <method name="createBufferPoolMXBean" type="BufferPoolMXBean" line="223">
                <params>
                    <param name="pool" type="sun.misc.JavaNioAccess.BufferPool"/>
                </params>
                <comment line="225">
                    created lazily                    
                </comment>
                <anonymous_class line="224">
                    <declaration name="objname" type="ObjectName" line="225"/>
                    <method name="getObjectName" type="ObjectName" line="227">
                        <declaration name="result" type="ObjectName" line="228"/>
                        <scope line="229">
                            <scope line="230">
                                <scope line="231"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="getName" type="String" line="241"/>
                    <method name="getCount" type="long" line="245"/>
                    <method name="getTotalCapacity" type="long" line="249"/>
                    <method name="getMemoryUsed" type="long" line="253"/>
                </anonymous_class>
            </method>
            <declaration name="hsDiagMBean" type="HotSpotDiagnostic" line="259"/>
            <declaration name="hsRuntimeMBean" type="HotspotRuntime" line="260"/>
            <declaration name="hsClassMBean" type="HotspotClassLoading" line="261"/>
            <declaration name="hsThreadMBean" type="HotspotThread" line="262"/>
            <declaration name="hsCompileMBean" type="HotspotCompilation" line="263"/>
            <declaration name="hsMemoryMBean" type="HotspotMemory" line="264"/>
            <method name="getDiagnosticMXBean" type="HotSpotDiagnosticMXBean" line="266">
                <scope line="267"/>
            </method>
            <javadoc line="273">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotRuntimeMBean" type="HotspotRuntimeMBean" line="276">
                <scope line="277"/>
            </method>
            <javadoc line="283">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotClassLoadingMBean" type="HotspotClassLoadingMBean" line="286">
                <scope line="287"/>
            </method>
            <javadoc line="293">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotThreadMBean" type="HotspotThreadMBean" line="296">
                <scope line="297"/>
            </method>
            <javadoc line="303">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotMemoryMBean" type="HotspotMemoryMBean" line="306">
                <scope line="307"/>
            </method>
            <javadoc line="313">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotCompilationMBean" type="HotspotCompilationMBean" line="316">
                <scope line="317"/>
            </method>
            <javadoc line="323">
                Registers a given MBean if not registered in the MBeanServer;
                  otherwise, just return.                
            </javadoc>
            <method name="addMBean" type="void" line="327">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="mbean" type="Object"/>
                    <param name="mbeanName" type="String"/>
                </params>
                <comment line="331">
                    inner class requires these fields to be final                    
                </comment>
                <comment line="341">
                    if an instance with the object name exists in                    
                </comment>
                <comment line="342">
                    the MBeanServer ignore the exception                    
                </comment>
                <scope line="328">
                    <declaration name="objName" type="ObjectName" line="329"/>
                    <declaration name="mbs0" type="MBeanServer" line="332"/>
                    <declaration name="mbean0" type="Object" line="333"/>
                    <anonymous_class line="334">
                        <method name="run" type="Void" line="336">
                            <comment line="341">
                                if an instance with the object name exists in                                
                            </comment>
                            <comment line="342">
                                the MBeanServer ignore the exception                                
                            </comment>
                            <scope line="337"/>
                            <scope line="340"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="347"/>
            </method>
            <declaration name="HOTSPOT_CLASS_LOADING_MBEAN_NAME" type="String" line="352"/>
            <declaration name="HOTSPOT_COMPILATION_MBEAN_NAME" type="String" line="355"/>
            <declaration name="HOTSPOT_MEMORY_MBEAN_NAME" type="String" line="358"/>
            <declaration name="HOTSPOT_RUNTIME_MBEAN_NAME" type="String" line="361"/>
            <declaration name="HOTSPOT_THREAD_MBEAN_NAME" type="String" line="364"/>
            <method name="registerInternalMBeans" type="void" line="367">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <comment line="368">
                    register all internal MBeans if not registered                    
                </comment>
                <comment line="369">
                    No exception is thrown if a MBean with that object name                    
                </comment>
                <comment line="370">
                    already registered                    
                </comment>
                <comment line="380">
                    CompilationMBean may not exist                    
                </comment>
                <scope line="381"/>
            </method>
            <method name="unregisterMBean" type="void" line="387">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="mbeanName" type="String"/>
                </params>
                <comment line="391">
                    inner class requires these fields to be final                    
                </comment>
                <comment line="399">
                    ignore exception if not found                    
                </comment>
                <scope line="388">
                    <declaration name="objName" type="ObjectName" line="389"/>
                    <declaration name="mbs0" type="MBeanServer" line="392"/>
                    <anonymous_class line="393">
                        <method name="run" type="Void" line="395">
                            <comment line="399">
                                ignore exception if not found                                
                            </comment>
                            <scope line="396"/>
                            <scope line="398"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="404"/>
            </method>
            <method name="unregisterInternalMBeans" type="void" line="409">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <comment line="410">
                    unregister all internal MBeans                    
                </comment>
                <comment line="416">
                    CompilationMBean may not exist                    
                </comment>
                <scope line="417"/>
            </method>
            <scope line="422"/>
            <method name="isThreadSuspended" type="boolean" line="427">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="isThreadRunningNative" type="boolean" line="431">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="toThreadState" type="Thread.State" line="435">
                <params>
                    <param name="state" type="int"/>
                </params>
                <comment line="436">
                    suspended and native bits may be set in state                    
                </comment>
                <declaration name="threadStatus" type="int" line="437"/>
            </method>
            <declaration name="JMM_THREAD_STATE_FLAG_MASK" type="int" line="442"/>
            <declaration name="JMM_THREAD_STATE_FLAG_SUSPENDED" type="int" line="443"/>
            <declaration name="JMM_THREAD_STATE_FLAG_NATIVE" type="int" line="444"/>
        </class>
    </source>