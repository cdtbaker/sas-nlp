<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management">
        <import package="java.lang.management"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="sun.security.action.LoadLibraryAction"/>
        <import package="sun.util.logging.LoggingSupport"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="com.sun.management.OSMBeanFactory"/>
        <import package="com.sun.management.HotSpotDiagnosticMXBean"/>
        <import package="java.lang.management.ManagementFactory"/>
        <class name="ManagementFactoryHelper" line="21">
            <javadoc line="21">
                ManagementFactoryHelper provides static factory methods to create
                  instances of the management interface.                
            </javadoc>
            <method name="ManagementFactoryHelper" type="constructor" line="26"/>
            <declaration name="jvm" type="VMManagement" line="28"/>
            <declaration name="classMBean" type="ClassLoadingImpl" line="29"/>
            <declaration name="memoryMBean" type="MemoryImpl" line="30"/>
            <declaration name="threadMBean" type="ThreadImpl" line="31"/>
            <declaration name="runtimeMBean" type="RuntimeImpl" line="32"/>
            <declaration name="compileMBean" type="CompilationImpl" line="33"/>
            <declaration name="osMBean" type="OperatingSystemImpl" line="34"/>
            <method name="getClassLoadingMXBean" type="ClassLoadingMXBean" line="35">
                <scope line="36"/>
            </method>
            <method name="getMemoryMXBean" type="MemoryMXBean" line="41">
                <scope line="42"/>
            </method>
            <method name="getThreadMXBean" type="ThreadMXBean" line="47">
                <scope line="48"/>
            </method>
            <method name="getRuntimeMXBean" type="RuntimeMXBean" line="53">
                <scope line="54"/>
            </method>
            <method name="getCompilationMXBean" type="CompilationMXBean" line="59">
                <scope line="60"/>
            </method>
            <method name="getOperatingSystemMXBean" type="OperatingSystemMXBean" line="65">
                <scope line="66"/>
            </method>
            <method name="getMemoryPoolMXBeans" type="List<MemoryPoolMXBean>" line="71">
                <declaration name="pools" type="MemoryPoolMXBean[]" line="72"/>
                <declaration name="list" type="List&lt;MemoryPoolMXBean&gt;" line="73"/>
                <scope line="74"/>
            </method>
            <method name="getMemoryManagerMXBeans" type="List<MemoryManagerMXBean>" line="79">
                <declaration name="mgrs" type="MemoryManagerMXBean[]" line="80"/>
                <declaration name="result" type="List&lt;MemoryManagerMXBean&gt;" line="81"/>
                <scope line="82"/>
            </method>
            <method name="getGarbageCollectorMXBeans" type="List<GarbageCollectorMXBean>" line="87">
                <declaration name="mgrs" type="MemoryManagerMXBean[]" line="88"/>
                <declaration name="result" type="List&lt;GarbageCollectorMXBean&gt;" line="89"/>
                <scope line="90">
                    <scope line="91"/>
                </scope>
            </method>
            <method name="getPlatformLoggingMXBean" type="PlatformLoggingMXBean" line="97">
                <scope line="98"/>
                <scope line="101"/>
            </method>
            <interface name="LoggingMXBean">
                <implements interface="PlatformLoggingMXBean"/>
                <implements interface="java.util.logging.LoggingMXBean"/>
            </interface>
            <class name="PlatformLoggingImpl" line="107">
                <implements interface="LoggingMXBean"/>
                <declaration name="instance" type="PlatformLoggingMXBean" line="108"/>
                <declaration name="LOGGING_MXBEAN_NAME" type="String" line="109"/>
                <declaration name="objname" type="ObjectName" line="110"/>
                <method name="getObjectName" type="ObjectName" line="111">
                    <declaration name="result" type="ObjectName" line="112"/>
                    <scope line="113">
                        <scope line="114">
                            <scope line="115"/>
                        </scope>
                    </scope>
                </method>
                <method name="getLoggerNames" type="java.util.List<String>" line="123"/>
                <method name="getLoggerLevel" type="String" line="126">
                    <params>
                        <param name="loggerName" type="String"/>
                    </params>
                </method>
                <method name="setLoggerLevel" type="void" line="129">
                    <params>
                        <param name="loggerName" type="String"/>
                        <param name="levelName" type="String"/>
                    </params>
                </method>
                <method name="getParentLoggerName" type="String" line="132">
                    <params>
                        <param name="loggerName" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="bufferPools" type="List&lt;BufferPoolMXBean&gt;" line="136"/>
            <method name="getBufferPoolMXBeans" type="List<BufferPoolMXBean>" line="137">
                <scope line="138"/>
            </method>
            <declaration name="BUFFER_POOL_MXBEAN_NAME" type="String" line="145"/>
            <javadoc line="146">
                Creates management interface for the given buffer pool.                
            </javadoc>
            <method name="createBufferPoolMXBean" type="BufferPoolMXBean" line="149">
                <params>
                    <param name="pool" type="sun.misc.JavaNioAccess.BufferPool"/>
                </params>
                <anonymous_class line="150">
                    <declaration name="objname" type="ObjectName" line="151"/>
                    <method name="getObjectName" type="ObjectName" line="152">
                        <declaration name="result" type="ObjectName" line="153"/>
                        <scope line="154">
                            <scope line="155">
                                <scope line="156"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="getName" type="String" line="164"/>
                    <method name="getCount" type="long" line="167"/>
                    <method name="getTotalCapacity" type="long" line="170"/>
                    <method name="getMemoryUsed" type="long" line="173"/>
                </anonymous_class>
            </method>
            <declaration name="hsDiagMBean" type="HotSpotDiagnostic" line="179"/>
            <declaration name="hsRuntimeMBean" type="HotspotRuntime" line="180"/>
            <declaration name="hsClassMBean" type="HotspotClassLoading" line="181"/>
            <declaration name="hsThreadMBean" type="HotspotThread" line="182"/>
            <declaration name="hsCompileMBean" type="HotspotCompilation" line="183"/>
            <declaration name="hsMemoryMBean" type="HotspotMemory" line="184"/>
            <method name="getDiagnosticMXBean" type="HotSpotDiagnosticMXBean" line="185">
                <scope line="186"/>
            </method>
            <javadoc line="191">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotRuntimeMBean" type="HotspotRuntimeMBean" line="194">
                <scope line="195"/>
            </method>
            <javadoc line="200">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotClassLoadingMBean" type="HotspotClassLoadingMBean" line="203">
                <scope line="204"/>
            </method>
            <javadoc line="209">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotThreadMBean" type="HotspotThreadMBean" line="212">
                <scope line="213"/>
            </method>
            <javadoc line="218">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotMemoryMBean" type="HotspotMemoryMBean" line="221">
                <scope line="222"/>
            </method>
            <javadoc line="227">
                This method is for testing only.                
            </javadoc>
            <method name="getHotspotCompilationMBean" type="HotspotCompilationMBean" line="230">
                <scope line="231"/>
            </method>
            <javadoc line="236">
                Registers a given MBean if not registered in the MBeanServer;
                  otherwise, just return.                
            </javadoc>
            <method name="addMBean" type="void" line="240">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="mbean" type="Object"/>
                    <param name="mbeanName" type="String"/>
                </params>
                <scope line="241">
                    <declaration name="objName" type="ObjectName" line="242"/>
                    <declaration name="mbs0" type="MBeanServer" line="243"/>
                    <declaration name="mbean0" type="Object" line="244"/>
                    <anonymous_class line="245">
                        <method name="run" type="Void" line="246">
                            <scope line="247"/>
                            <scope line="251"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="258"/>
            </method>
            <declaration name="HOTSPOT_CLASS_LOADING_MBEAN_NAME" type="String" line="262"/>
            <declaration name="HOTSPOT_COMPILATION_MBEAN_NAME" type="String" line="263"/>
            <declaration name="HOTSPOT_MEMORY_MBEAN_NAME" type="String" line="264"/>
            <declaration name="HOTSPOT_RUNTIME_MBEAN_NAME" type="String" line="265"/>
            <declaration name="HOTSPOT_THREAD_MBEAN_NAME" type="String" line="266"/>
            <method name="registerInternalMBeans" type="void" line="267">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <scope line="272"/>
            </method>
            <method name="unregisterMBean" type="void" line="276">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="mbeanName" type="String"/>
                </params>
                <scope line="277">
                    <declaration name="objName" type="ObjectName" line="278"/>
                    <declaration name="mbs0" type="MBeanServer" line="279"/>
                    <anonymous_class line="280">
                        <method name="run" type="Void" line="281">
                            <scope line="282"/>
                            <scope line="285"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="292"/>
            </method>
            <method name="unregisterInternalMBeans" type="void" line="296">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <scope line="301"/>
            </method>
            <scope line="305"/>
            <method name="isThreadSuspended" type="boolean" line="309">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="isThreadRunningNative" type="boolean" line="312">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="toThreadState" type="Thread.State" line="315">
                <params>
                    <param name="state" type="int"/>
                </params>
                <declaration name="threadStatus" type="int" line="316"/>
            </method>
            <declaration name="JMM_THREAD_STATE_FLAG_MASK" type="int" line="319"/>
            <declaration name="JMM_THREAD_STATE_FLAG_SUSPENDED" type="int" line="320"/>
            <declaration name="JMM_THREAD_STATE_FLAG_NATIVE" type="int" line="321"/>
        </class>
    </source>