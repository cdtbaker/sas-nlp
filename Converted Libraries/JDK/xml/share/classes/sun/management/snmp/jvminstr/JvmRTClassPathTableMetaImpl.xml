<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <import package="com.sun.jmx.snmp.SnmpCounter"/>
        <import package="com.sun.jmx.snmp.SnmpCounter64"/>
        <import package="com.sun.jmx.snmp.SnmpGauge"/>
        <import package="com.sun.jmx.snmp.SnmpInt"/>
        <import package="com.sun.jmx.snmp.SnmpUnsignedInt"/>
        <import package="com.sun.jmx.snmp.SnmpIpAddress"/>
        <import package="com.sun.jmx.snmp.SnmpTimeticks"/>
        <import package="com.sun.jmx.snmp.SnmpOpaque"/>
        <import package="com.sun.jmx.snmp.SnmpString"/>
        <import package="com.sun.jmx.snmp.SnmpStringFixed"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpNull"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpIndex"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibTable"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibSubRequest"/>
        <import package="com.sun.jmx.snmp.agent.SnmpStandardObjectServer"/>
        <import package="sun.management.snmp.jvmmib.JvmRTClassPathTableMeta"/>
        <import package="sun.management.snmp.util.SnmpCachedData"/>
        <import package="sun.management.snmp.util.SnmpTableCache"/>
        <import package="sun.management.snmp.util.SnmpTableHandler"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmRTClassPathTableMetaImpl" line="68">
            <extends class="JvmRTClassPathTableMeta"/>
            <comment line="136">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <comment line="143">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <comment line="175">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <comment line="190">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <javadoc line="68">
                The class is used for implementing the &quot;JvmRTClassPathTable&quot;.                
            </javadoc>
            <declaration name="cache" type="SnmpTableCache" line="73"/>
            <class name="JvmRTClassPathTableCache" line="75">
                <extends class="SnmpTableCache"/>
                <javadoc line="75">
                    A concrete implementation of {@link SnmpTableCache}, for the
                      JvmRTClassPathTable.                    
                </javadoc>
                <declaration name="meta" type="JvmRTClassPathTableMetaImpl" line="80"/>
                <method name="JvmRTClassPathTableCache" type="constructor" line="83">
                    <params>
                        <param name="meta" type="JvmRTClassPathTableMetaImpl"/>
                        <param name="validity" type="long"/>
                    </params>
                </method>
                <javadoc line="88">
                    Call &lt;code&gt;getTableDatas(JvmContextFactory.getUserData())&lt;/code&gt;.                    
                </javadoc>
                <method name="getTableHandler" type="SnmpTableHandler" line="91">
                    <declaration name="userData" type="Map" line="92"/>
                </method>
                <javadoc line="97">
                    Return a table handler containing the Thread indexes.
                      Indexes are computed from the ThreadId.                    
                </javadoc>
                <method name="updateCachedDatas" type="SnmpCachedData" line="101">
                    <params>
                        <param name="userData" type="Object"/>
                    </params>
                    <comment line="105">
                        We are getting all the input args                        
                    </comment>
                    <comment line="109">
                        Time stamp for the cache                        
                    </comment>
                    <declaration name="path" type="String[]" line="105"/>
                    <declaration name="time" type="long" line="109"/>
                    <declaration name="len" type="int" line="110"/>
                    <declaration name="indexes" type="SnmpOid" line="112"/>
                    <scope line="114"/>
                </method>
            </class>
            <javadoc line="122">
                Constructor for the table. Initialize metadata for
                  &quot;JvmRTClassPathTableMeta&quot;.
                  The reference on the MBean server is updated so the entries
                  created through an SNMP SET will be AUTOMATICALLY REGISTERED
                  in Java DMK.                
            </javadoc>
            <method name="JvmRTClassPathTableMetaImpl" type="constructor" line="130">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="objserv" type="SnmpStandardObjectServer"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="137">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="139">
                    null means get the first OID.                    
                </comment>
            </method>
            <method name="getNextOid" type="SnmpOid" line="144">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="150">
                    Get the data handler.                    
                </comment>
                <comment line="154">
                    This should never happen.
                     If we get here it&apos;s a bug.                    
                </comment>
                <comment line="161">
                    Get the next oid                    
                </comment>
                <comment line="166">
                    if next is null: we reached the end of the table.                    
                </comment>
                <declaration name="dbg" type="boolean" line="145"/>
                <declaration name="handler" type="SnmpTableHandler" line="151"/>
                <scope line="152"/>
                <declaration name="next" type="SnmpOid" line="162"/>
            </method>
            <method name="contains" type="boolean" line="175">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="178">
                    Get the handler.                    
                </comment>
                <comment line="182">
                    handler should never be null.                    
                </comment>
                <declaration name="handler" type="SnmpTableHandler" line="179"/>
            </method>
            <method name="getEntry" type="Object" line="191">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <comment line="200">
                    Get the request contextual cache (userData).                    
                </comment>
                <comment line="204">
                    We&apos;re going to use this name to store/retrieve the entry in
                     the request contextual cache.
                    
                     Revisit: Probably better programming to put all these strings
                              in some interface.                    
                </comment>
                <comment line="214">
                    If the entry is in the cache, simply return it.                    
                </comment>
                <comment line="226">
                    The entry was not in the cache, make a new one.
                    
                     Get the data hanler.                    
                </comment>
                <comment line="232">
                    handler should never be null.                    
                </comment>
                <comment line="237">
                    Get the data associated with our entry.                    
                </comment>
                <comment line="241">
                    data may be null if the OID we were given is not valid.                    
                </comment>
                <comment line="246">
                    make the new entry (transient object that will be kept only
                     for the duration of the request.                    
                </comment>
                <comment line="254">
                    Put the entry in the cache in case we need it later while processing
                     the request.                    
                </comment>
                <declaration name="dbg" type="boolean" line="192"/>
                <scope line="194"/>
                <declaration name="m" type="Map&lt;Object,Object&gt;" line="201"/>
                <declaration name="entryTag" type="String" line="209"/>
                <scope line="215">
                    <declaration name="entry" type="Object" line="216"/>
                    <scope line="217"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="229"/>
                <declaration name="data" type="Object" line="238"/>
                <declaration name="entry" type="Object" line="250"/>
                <scope line="256"/>
            </method>
            <javadoc line="263">
                Get the SnmpTableHandler that holds the jvmThreadInstanceTable data.
                  First look it up in the request contextual cache, and if it is
                  not found, obtain it from the weak cache.
                  &lt;br&gt;The request contextual cache will be released at the end of the
                  current requests, and is used only to process this request.
                  &lt;br&gt;The weak cache is shared by all requests, and is only
                  recomputed when it is found to be obsolete.
                  &lt;br&gt;Note that the data put in the request contextual cache is
                  never considered to be obsolete, in order to preserve data
                  coherency.                
            </javadoc>
            <method name="getHandler" type="SnmpTableHandler" line="275">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="281">
                    Look in the contextual cache.                    
                </comment>
                <comment line="288">
                    No handler in contextual cache, make a new one.                    
                </comment>
                <declaration name="m" type="Map&lt;Object,Object&gt;" line="276"/>
                <scope line="281">
                    <declaration name="handler" type="SnmpTableHandler" line="282"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="288"/>
            </method>
            <declaration name="log" type="MibLogger" line="296"/>
        </class>
    </source>