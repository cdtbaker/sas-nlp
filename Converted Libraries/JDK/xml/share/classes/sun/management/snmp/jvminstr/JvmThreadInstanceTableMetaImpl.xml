<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.Enumeration"/>
        <import package="java.lang.management.ThreadInfo"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <import package="com.sun.jmx.snmp.SnmpCounter"/>
        <import package="com.sun.jmx.snmp.SnmpCounter64"/>
        <import package="com.sun.jmx.snmp.SnmpGauge"/>
        <import package="com.sun.jmx.snmp.SnmpInt"/>
        <import package="com.sun.jmx.snmp.SnmpUnsignedInt"/>
        <import package="com.sun.jmx.snmp.SnmpIpAddress"/>
        <import package="com.sun.jmx.snmp.SnmpTimeticks"/>
        <import package="com.sun.jmx.snmp.SnmpOpaque"/>
        <import package="com.sun.jmx.snmp.SnmpString"/>
        <import package="com.sun.jmx.snmp.SnmpStringFixed"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpNull"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpIndex"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibTable"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibSubRequest"/>
        <import package="com.sun.jmx.snmp.agent.SnmpStandardObjectServer"/>
        <import package="sun.management.snmp.jvmmib.JvmThreadInstanceEntryMBean"/>
        <import package="sun.management.snmp.jvmmib.JvmThreadInstanceTableMeta"/>
        <import package="sun.management.snmp.util.SnmpTableCache"/>
        <import package="sun.management.snmp.util.SnmpCachedData"/>
        <import package="sun.management.snmp.util.SnmpTableHandler"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmThreadInstanceTableMetaImpl" line="39">
            <extends class="JvmThreadInstanceTableMeta"/>
            <javadoc line="39">
                The class is used for implementing the &quot;JvmThreadInstanceTable&quot; group.                
            </javadoc>
            <declaration name="MAX_STACK_TRACE_DEPTH" type="int" line="43"/>
            <javadoc line="43">
                Maximum depth of the stacktrace that might be returned through
                  SNMP.
                  Since we do not export the stack trace through SNMP, we set
                  MAX_STACK_TRACE_DEPTH=0 so that ThreadMXBean.getThreadInfo(long) does
                  not compute the stack trace.                
            </javadoc>
            <javadoc line="51">
                Translate from a long to a Oid. Arc follow the long big-endian order.                
                <param>
                    l The long to make the index from                    
                </param>
                <return>
                    The arc array.                    
                </return>
            </javadoc>
            <method name="makeOid" type="SnmpOid" line="56">
                <params>
                    <param name="l" type="long"/>
                </params>
                <declaration name="x" type="long[]" line="57"/>
            </method>
            <javadoc line="68">
                Translate an Oid to a thread id. Arc follow the long big-endian order.                
                <param>
                    oid The oid to make the id from                    
                </param>
                <return>
                    The thread id.                    
                </return>
            </javadoc>
            <method name="makeId" type="long" line="73">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <declaration name="id" type="long" line="74"/>
                <declaration name="arcs" type="long[]" line="75"/>
            </method>
            <class name="JvmThreadInstanceTableCache" line="86">
                <extends class="SnmpTableCache"/>
                <javadoc line="86">
                    A concrete implementation of {@link SnmpTableCache}, for the
                      JvmThreadInstanceTable.                    
                </javadoc>
                <declaration name="meta" type="JvmThreadInstanceTableMetaImpl" line="91"/>
                <javadoc line="92">
                    Create a weak cache for the JvmThreadInstanceTable.                    
                    <param>
                        validity validity of the cached data, in ms.                        
                    </param>
                </javadoc>
                <method name="JvmThreadInstanceTableCache" type="constructor" line="96">
                    <params>
                        <param name="meta" type="JvmThreadInstanceTableMetaImpl"/>
                        <param name="validity" type="long"/>
                    </params>
                </method>
                <javadoc line="100">
                    Call &lt;code&gt;getTableDatas(JvmContextFactory.getUserData())&lt;/code&gt;.                    
                </javadoc>
                <method name="getTableHandler" type="SnmpTableHandler" line="103">
                    <declaration name="userData" type="Map" line="104"/>
                </method>
                <javadoc line="107">
                    Return a table handler containing the Thread indexes.
                      Indexes are computed from the ThreadId.                    
                </javadoc>
                <method name="updateCachedDatas" type="SnmpCachedData" line="111">
                    <params>
                        <param name="userData" type="Object"/>
                    </params>
                    <declaration name="id" type="long[]" line="112"/>
                    <declaration name="time" type="long" line="113"/>
                    <declaration name="indexes" type="SnmpOid" line="114"/>
                    <declaration name="table" type="TreeMap&amp;lt;SnmpOid,Object&amp;gt;" line="115"/>
                    <scope line="116">
                        <declaration name="oid" type="SnmpOid" line="118"/>
                    </scope>
                </method>
            </class>
            <declaration name="cache" type="SnmpTableCache" line="124"/>
            <javadoc line="125">
                Constructor for the table. Initialize metadata for
                  &quot;JvmThreadInstanceTableMeta&quot;.
                  The reference on the MBean server is updated so the entries created
                  through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.                
            </javadoc>
            <method name="JvmThreadInstanceTableMetaImpl" type="constructor" line="131">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="objserv" type="SnmpStandardObjectServer"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="136">
                <params>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="140">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="handler" type="SnmpTableHandler" line="142"/>
                <scope line="143"/>
                <declaration name="next" type="SnmpOid" line="147"/>
                <scope line="148"/>
            </method>
            <method name="contains" type="boolean" line="157">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="handler" type="SnmpTableHandler" line="158"/>
                <declaration name="inst" type="JvmThreadInstanceEntryImpl" line="161"/>
            </method>
            <method name="getEntry" type="Object" line="164">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <scope line="166"/>
                <declaration name="m" type="Map" line="170"/>
                <declaration name="handler" type="SnmpTableHandler" line="171"/>
                <declaration name="entry" type="JvmThreadInstanceEntryImpl" line="173"/>
            </method>
            <javadoc line="177">
                Get the SnmpTableHandler that holds the jvmThreadInstanceTable data.
                  First look it up in the request contextual cache, and if it is
                  not found, obtain it from the weak cache.
                  &lt;br&gt;The request contextual cache will be released at the end of the
                  current requests, and is used only to process this request.
                  &lt;br&gt;The weak cache is shared by all requests, and is only
                  recomputed when it is found to be obsolete.
                  &lt;br&gt;Note that the data put in the request contextual cache is
                  never considered to be obsolete, in order to preserve data
                  coherency.                
            </javadoc>
            <method name="getHandler" type="SnmpTableHandler" line="189">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="190"/>
                <scope line="193">
                    <declaration name="handler" type="SnmpTableHandler" line="194"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="197"/>
            </method>
            <method name="getThreadInfo" type="ThreadInfo" line="201">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="getThreadInfo" type="ThreadInfo" line="204">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
            </method>
            <method name="getJvmThreadInstance" type="JvmThreadInstanceEntryImpl" line="207">
                <params>
                    <param name="userData" type="Object"/>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <declaration name="cached" type="JvmThreadInstanceEntryImpl" line="208"/>
                <declaration name="entryTag" type="String" line="209"/>
                <declaration name="map" type="Map&amp;lt;Object,Object&amp;gt;" line="210"/>
                <declaration name="dbg" type="boolean" line="211"/>
                <scope line="212"/>
                <scope line="217"/>
                <declaration name="info" type="ThreadInfo" line="222"/>
                <scope line="223"/>
                <scope line="226"/>
                <scope line="230"/>
            </method>
            <declaration name="log" type="MibLogger" line="239"/>
        </class>
    </source>