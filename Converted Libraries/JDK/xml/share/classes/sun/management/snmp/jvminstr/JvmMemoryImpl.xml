<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="javax.management.MBeanServer"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="java.util.Map"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="java.lang.management.MemoryUsage"/>
        <import package="java.lang.management.MemoryType"/>
        <import package="java.lang.management.MemoryMXBean"/>
        <import package="javax.management.openmbean.CompositeData"/>
        <import package="sun.management.snmp.jvmmib.JvmMemoryMBean"/>
        <import package="sun.management.snmp.jvmmib.EnumJvmMemoryGCCall"/>
        <import package="sun.management.snmp.jvmmib.EnumJvmMemoryGCVerboseLevel"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmMemoryImpl" line="17">
            <implements interface="JvmMemoryMBean"/>
            <javadoc line="17">
                The class is used for implementing the &quot;JvmMemory&quot; group.                
            </javadoc>
            <declaration name="JvmMemoryGCCallSupported" type="EnumJvmMemoryGCCall" line="21"/>
            <javadoc line="21">
                Variable for storing the value of &quot;JvmMemoryGCCall&quot;.
                  &quot;This object makes it possible to remotelly trigger the
                  Garbage Collector in the JVM.
                  This object&apos;s syntax is an enumeration which defines:
                   Two state values, that can be returned from a GET request:
                  unsupported(1): means that remote invocation of gc() is not
                  supported by the SNMP agent.
                  supported(2)  : means that remote invocation of gc() is supported
                  by the SNMP agent.
                   One action value, that can be provided in a SET request to
                  trigger the garbage collector:
                  start(3)      : means that a manager wishes to trigger
                  garbage collection.
                   Two result value, that will be returned as a result of a
                  SET request when remote invocation of gc is supported
                  by the SNMP agent:
                  started(4)       : means that garbage collection was
                  successfully triggered. It does not mean
                  however that the action was successfullly
                  completed: gc might still be running when
                  this value is returned.
                  failed(5)     : means that garbage collection couldn&apos;t be
                  triggered.
                   If remote invocation is not supported by the SNMP agent, then
                  unsupported(1) will always be returned as a result of either
                  a GET request, or a SET request with start(3) as input value.
                   If a SET request with anything but start(3) is received, then
                  the agent will return a wrongValue error.
                  See java.management.MemoryMXBean.gc()
                  &quot;                
            </javadoc>
            <declaration name="JvmMemoryGCCallStart" type="EnumJvmMemoryGCCall" line="54"/>
            <declaration name="JvmMemoryGCCallFailed" type="EnumJvmMemoryGCCall" line="55"/>
            <declaration name="JvmMemoryGCCallStarted" type="EnumJvmMemoryGCCall" line="56"/>
            <declaration name="JvmMemoryGCVerboseLevelVerbose" type="EnumJvmMemoryGCVerboseLevel" line="57"/>
            <javadoc line="57">
                Variable for storing the value of &quot;JvmMemoryGCVerboseLevel&quot;.
                  &quot;State of the -verbose:gc state.
                  verbose: if the -verbose:gc flag is on,
                  silent:  otherwise.
                  See java.management.MemoryMXBean.isVerbose(),
                  java.management.MemoryMXBean.setVerbose()
                  &quot;                
            </javadoc>
            <declaration name="JvmMemoryGCVerboseLevelSilent" type="EnumJvmMemoryGCVerboseLevel" line="67"/>
            <javadoc line="68">
                Constructor for the &quot;JvmMemory&quot; group.
                  If the group contains a table, the entries created through an
                  SNMP SET will not be registered in Java DMK.                
            </javadoc>
            <method name="JvmMemoryImpl" type="constructor" line="73">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                </params>
            </method>
            <javadoc line="75">
                Constructor for the &quot;JvmMemory&quot; group.
                  If the group contains a table, the entries created through an
                  SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.                
            </javadoc>
            <method name="JvmMemoryImpl" type="constructor" line="80">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="server" type="MBeanServer"/>
                </params>
            </method>
            <declaration name="heapMemoryTag" type="String" line="82"/>
            <declaration name="nonHeapMemoryTag" type="String" line="83"/>
            <method name="getMemoryUsage" type="MemoryUsage" line="84">
                <params>
                    <param name="type" type="MemoryType"/>
                </params>
                <scope line="85"/>
                <scope line="88"/>
            </method>
            <method name="getNonHeapMemoryUsage" type="MemoryUsage" line="92">
                <scope line="93">
                    <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="94"/>
                    <scope line="95">
                        <declaration name="cached" type="MemoryUsage" line="96"/>
                        <scope line="97"/>
                        <declaration name="u" type="MemoryUsage" line="101"/>
                    </scope>
                </scope>
                <scope line="108"/>
            </method>
            <method name="getHeapMemoryUsage" type="MemoryUsage" line="114">
                <scope line="115">
                    <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="116"/>
                    <scope line="117">
                        <declaration name="cached" type="MemoryUsage" line="118"/>
                        <scope line="119"/>
                        <declaration name="u" type="MemoryUsage" line="123"/>
                    </scope>
                </scope>
                <scope line="130"/>
            </method>
            <declaration name="Long0" type="Long" line="136"/>
            <javadoc line="137">
                Getter for the &quot;JvmMemoryNonHeapMaxSize&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryNonHeapMaxSize" type="Long" line="140">
                <declaration name="val" type="long" line="141"/>
            </method>
            <javadoc line="145">
                Getter for the &quot;JvmMemoryNonHeapCommitted&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryNonHeapCommitted" type="Long" line="148">
                <declaration name="val" type="long" line="149"/>
            </method>
            <javadoc line="153">
                Getter for the &quot;JvmMemoryNonHeapUsed&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryNonHeapUsed" type="Long" line="156">
                <declaration name="val" type="long" line="157"/>
            </method>
            <javadoc line="161">
                Getter for the &quot;JvmMemoryNonHeapInitSize&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryNonHeapInitSize" type="Long" line="164">
                <declaration name="val" type="long" line="165"/>
            </method>
            <javadoc line="169">
                Getter for the &quot;JvmMemoryHeapMaxSize&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryHeapMaxSize" type="Long" line="172">
                <declaration name="val" type="long" line="173"/>
            </method>
            <javadoc line="177">
                Getter for the &quot;JvmMemoryGCCall&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryGCCall" type="EnumJvmMemoryGCCall" line="180">
                <declaration name="m" type="Map" line="181"/>
                <scope line="182">
                    <declaration name="cached" type="EnumJvmMemoryGCCall" line="183"/>
                </scope>
            </method>
            <javadoc line="188">
                Setter for the &quot;JvmMemoryGCCall&quot; variable.                
            </javadoc>
            <method name="setJvmMemoryGCCall" type="void" line="191">
                <params>
                    <param name="x" type="EnumJvmMemoryGCCall"/>
                </params>
                <scope line="192">
                    <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="193"/>
                    <scope line="194"/>
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="205">
                Checker for the &quot;JvmMemoryGCCall&quot; variable.                
            </javadoc>
            <method name="checkJvmMemoryGCCall" type="void" line="208">
                <params>
                    <param name="x" type="EnumJvmMemoryGCCall"/>
                </params>
            </method>
            <javadoc line="211">
                Getter for the &quot;JvmMemoryHeapCommitted&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryHeapCommitted" type="Long" line="214">
                <declaration name="val" type="long" line="215"/>
            </method>
            <javadoc line="219">
                Getter for the &quot;JvmMemoryGCVerboseLevel&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryGCVerboseLevel" type="EnumJvmMemoryGCVerboseLevel" line="222"/>
            <javadoc line="226">
                Setter for the &quot;JvmMemoryGCVerboseLevel&quot; variable.                
            </javadoc>
            <method name="setJvmMemoryGCVerboseLevel" type="void" line="229">
                <params>
                    <param name="x" type="EnumJvmMemoryGCVerboseLevel"/>
                </params>
            </method>
            <javadoc line="233">
                Checker for the &quot;JvmMemoryGCVerboseLevel&quot; variable.                
            </javadoc>
            <method name="checkJvmMemoryGCVerboseLevel" type="void" line="236">
                <params>
                    <param name="x" type="EnumJvmMemoryGCVerboseLevel"/>
                </params>
            </method>
            <javadoc line="238">
                Getter for the &quot;JvmMemoryHeapUsed&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryHeapUsed" type="Long" line="241">
                <declaration name="val" type="long" line="242"/>
            </method>
            <javadoc line="246">
                Getter for the &quot;JvmMemoryHeapInitSize&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryHeapInitSize" type="Long" line="249">
                <declaration name="val" type="long" line="250"/>
            </method>
            <javadoc line="254">
                Getter for the &quot;JvmMemoryPendingFinalCount&quot; variable.                
            </javadoc>
            <method name="getJvmMemoryPendingFinalCount" type="Long" line="257">
                <declaration name="val" type="long" line="258"/>
            </method>
            <declaration name="log" type="MibLogger" line="262"/>
        </class>
    </source>