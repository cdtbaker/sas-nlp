<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="com.sun.jmx.snmp.agent.SnmpStandardObjectServer"/>
        <import package="java.lang.management.MemoryManagerMXBean"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="sun.management.snmp.jvmmib.JvmMemManagerTableMeta"/>
        <import package="sun.management.snmp.util.SnmpTableCache"/>
        <import package="sun.management.snmp.util.SnmpNamedListTableCache"/>
        <import package="sun.management.snmp.util.SnmpTableHandler"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmMemManagerTableMetaImpl" line="19">
            <extends class="JvmMemManagerTableMeta"/>
            <javadoc line="19">
                The class is used for implementing the &quot;JvmMemManagerTable&quot; table.
                  This custom implementation show how to implement an SNMP table
                  over a weak cache, recomputing the cahed data when needed.                
            </javadoc>
            <class name="JvmMemManagerTableCache" line="25">
                <extends class="SnmpNamedListTableCache"/>
                <javadoc line="25">
                    A concrete implementation of {@link SnmpNamedListTableCache}, for the
                      jvmMemManagerTable.                    
                </javadoc>
                <javadoc line="30">
                    Create a weak cache for the jvmMemManagerTable.                    
                    <param>
                        validity validity of the cached data, in ms.                        
                    </param>
                </javadoc>
                <method name="JvmMemManagerTableCache" type="constructor" line="34">
                    <params>
                        <param name="validity" type="long"/>
                    </params>
                </method>
                <javadoc line="37">
                    Use the MemoryManagerMXBean name as key.                    
                    <param>
                        context A {@link TreeMap} as allocated by the parent{@link SnmpNamedListTableCache} class.                        
                    </param>
                    <param>
                        rawDatas List of {@link MemoryManagerMXBean}, as
                          returned by
                          &lt;code&gt;ManagementFactory.getMemoryMBean().getMemoryManagers()&lt;/code&gt;                        
                    </param>
                    <param>
                        rank The &lt;var&gt;rank&lt;/var&gt; of &lt;var&gt;item&lt;/var&gt; in the list.                        
                    </param>
                    <param>
                        item The &lt;var&gt;rank&lt;/var&gt;&lt;super&gt;th&lt;/super&gt;
                          &lt;code&gt;MemoryManagerMXBean&lt;/code&gt; in the list.                        
                    </param>
                    <return>
                        &lt;code&gt;((MemoryManagerMXBean)item).getName()&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="getKey" type="String" line="48">
                    <params>
                        <param name="context" type="Object"/>
                        <param name="rawDatas" type="List"/>
                        <param name="rank" type="int"/>
                        <param name="item" type="Object"/>
                    </params>
                    <declaration name="name" type="String" line="50"/>
                </method>
                <javadoc line="54">
                    Call &lt;code&gt;getTableHandler(JvmContextFactory.getUserData())&lt;/code&gt;.                    
                </javadoc>
                <method name="getTableHandler" type="SnmpTableHandler" line="57">
                    <declaration name="userData" type="Map" line="58"/>
                </method>
                <javadoc line="61">
                    Return the key used to cache the raw data of this table.                    
                </javadoc>
                <method name="getRawDatasKey" type="String" line="64"/>
                <javadoc line="67">
                    Call ManagementFactory.getMemoryManagerMXBeans() to
                      load the raw data of this table.                    
                </javadoc>
                <method name="loadRawDatas" type="List" line="71">
                    <params>
                        <param name="userData" type="Map"/>
                    </params>
                </method>
            </class>
            <declaration name="cache" type="SnmpTableCache" line="75"/>
            <javadoc line="76">
                Constructor for the table. Initialize metadata for
                  &quot;JvmMemManagerTableMeta&quot;.
                  The reference on the MBean server is updated so the entries
                  created through an SNMP SET will be AUTOMATICALLY REGISTERED
                  in Java DMK.                
            </javadoc>
            <method name="JvmMemManagerTableMetaImpl" type="constructor" line="83">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="objserv" type="SnmpStandardObjectServer"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="87">
                <params>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="90">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="dbg" type="boolean" line="91"/>
                <declaration name="handler" type="SnmpTableHandler" line="93"/>
                <scope line="94"/>
                <declaration name="next" type="SnmpOid" line="98"/>
            </method>
            <method name="contains" type="boolean" line="103">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="handler" type="SnmpTableHandler" line="104"/>
            </method>
            <method name="getEntry" type="Object" line="108">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="110"/>
                <declaration name="index" type="long" line="111"/>
                <declaration name="entryTag" type="String" line="112"/>
                <scope line="113">
                    <declaration name="entry" type="Object" line="114"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="117"/>
                <declaration name="data" type="Object" line="119"/>
                <declaration name="entry" type="Object" line="121"/>
                <scope line="122"/>
            </method>
            <javadoc line="127">
                Get the SnmpTableHandler that holds the jvmMemManagerTable data.
                  First look it up in the request contextual cache, and if it is
                  not found, obtain it from the weak cache.
                  &lt;br&gt;The request contextual cache will be released at the end of the
                  current requests, and is used only to process this request.
                  &lt;br&gt;The weak cache is shared by all requests, and is only
                  recomputed when it is found to be obsolete.
                  &lt;br&gt;Note that the data put in the request contextual cache is
                  never considered to be obsolete, in order to preserve data
                  coherency.                
            </javadoc>
            <method name="getHandler" type="SnmpTableHandler" line="139">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="140"/>
                <scope line="143">
                    <declaration name="handler" type="SnmpTableHandler" line="144"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="147"/>
            </method>
            <declaration name="log" type="MibLogger" line="151"/>
        </class>
    </source>