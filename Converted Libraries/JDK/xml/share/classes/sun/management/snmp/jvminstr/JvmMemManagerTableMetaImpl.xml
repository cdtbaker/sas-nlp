<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="com.sun.jmx.snmp.agent.SnmpStandardObjectServer"/>
        <import package="java.lang.management.MemoryManagerMXBean"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="sun.management.snmp.jvmmib.JvmMemManagerTableMeta"/>
        <import package="sun.management.snmp.util.SnmpTableCache"/>
        <import package="sun.management.snmp.util.SnmpNamedListTableCache"/>
        <import package="sun.management.snmp.util.SnmpTableHandler"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmMemManagerTableMetaImpl" line="56">
            <extends class="JvmMemManagerTableMeta"/>
            <comment line="124">
                The weak cache for this table.                
            </comment>
            <comment line="142">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <comment line="149">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <comment line="181">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <comment line="196">
                See com.sun.jmx.snmp.agent.SnmpMibTable                
            </comment>
            <javadoc line="56">
                The class is used for implementing the &quot;JvmMemManagerTable&quot; table.
                  This custom implementation show how to implement an SNMP table
                  over a weak cache, recomputing the cahed data when needed.                
            </javadoc>
            <class name="JvmMemManagerTableCache" line="64">
                <extends class="SnmpNamedListTableCache"/>
                <javadoc line="64">
                    A concrete implementation of {@link SnmpNamedListTableCache}, for the
                      jvmMemManagerTable.                    
                </javadoc>
                <javadoc line="70">
                    Create a weak cache for the jvmMemManagerTable.                    
                    <param>
                        validity validity of the cached data, in ms.                        
                    </param>
                </javadoc>
                <method name="JvmMemManagerTableCache" type="constructor" line="74">
                    <params>
                        <param name="validity" type="long"/>
                    </params>
                </method>
                <javadoc line="78">
                    Use the MemoryManagerMXBean name as key.                    
                    <param>
                        context A {@link TreeMap} as allocated by the parent{@link SnmpNamedListTableCache} class.                        
                    </param>
                    <param>
                        rawDatas List of {@link MemoryManagerMXBean}, as
                          returned by
                          <code>ManagementFactory.getMemoryMBean().getMemoryManagers()</code>                        
                    </param>
                    <param>
                        rank The <var>rank</var> of <var>item</var> in the list.                        
                    </param>
                    <param>
                        item The <var>rank</var><super>th</super>
                          <code>MemoryManagerMXBean</code> in the list.                        
                    </param>
                    <return>
                        <code>((MemoryManagerMXBean)item).getName()</code>                        
                    </return>
                </javadoc>
                <method name="getKey" type="String" line="91">
                    <params>
                        <param name="context" type="Object"/>
                        <param name="rawDatas" type="List"/>
                        <param name="rank" type="int"/>
                        <param name="item" type="Object"/>
                    </params>
                    <declaration name="name" type="String" line="93"/>
                </method>
                <javadoc line="98">
                    Call &lt;code&gt;getTableHandler(JvmContextFactory.getUserData())&lt;/code&gt;.                    
                </javadoc>
                <method name="getTableHandler" type="SnmpTableHandler" line="101">
                    <declaration name="userData" type="Map" line="102"/>
                </method>
                <javadoc line="106">
                    Return the key used to cache the raw data of this table.                    
                </javadoc>
                <method name="getRawDatasKey" type="String" line="109"/>
                <javadoc line="113">
                    Call ManagementFactory.getMemoryManagerMXBeans() to
                      load the raw data of this table.                    
                </javadoc>
                <method name="loadRawDatas" type="List" line="117">
                    <params>
                        <param name="userData" type="Map"/>
                    </params>
                </method>
            </class>
            <declaration name="cache" type="SnmpTableCache" line="124"/>
            <javadoc line="126">
                Constructor for the table. Initialize metadata for
                  &quot;JvmMemManagerTableMeta&quot;.
                  The reference on the MBean server is updated so the entries
                  created through an SNMP SET will be AUTOMATICALLY REGISTERED
                  in Java DMK.                
            </javadoc>
            <method name="JvmMemManagerTableMetaImpl" type="constructor" line="134">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="objserv" type="SnmpStandardObjectServer"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="143">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="145">
                    null means get the first OID.                    
                </comment>
            </method>
            <method name="getNextOid" type="SnmpOid" line="150">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="156">
                    Get the data handler.                    
                </comment>
                <comment line="160">
                    This should never happen.
                     If we get here it&apos;s a bug.                    
                </comment>
                <comment line="167">
                    Get the next oid                    
                </comment>
                <comment line="172">
                    if next is null: we reached the end of the table.                    
                </comment>
                <declaration name="dbg" type="boolean" line="151"/>
                <declaration name="handler" type="SnmpTableHandler" line="157"/>
                <scope line="158"/>
                <declaration name="next" type="SnmpOid" line="168"/>
            </method>
            <method name="contains" type="boolean" line="181">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="184">
                    Get the handler.                    
                </comment>
                <comment line="188">
                    handler should never be null.                    
                </comment>
                <declaration name="handler" type="SnmpTableHandler" line="185"/>
            </method>
            <method name="getEntry" type="Object" line="197">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <comment line="203">
                    Get the request contextual cache (userData).                    
                </comment>
                <comment line="207">
                    We know in the case of this table that the index is an integer,
                     it is thus the first OID arc of the index OID.                    
                </comment>
                <comment line="212">
                    We&apos;re going to use this name to store/retrieve the entry in
                     the request contextual cache.
                    
                     Revisit: Probably better programming to put all these strings
                              in some interface.                    
                </comment>
                <comment line="221">
                    If the entry is in the cache, simply return it.                    
                </comment>
                <comment line="228">
                    The entry was not in the cache, make a new one.
                    
                     Get the data hanler.                    
                </comment>
                <comment line="234">
                    handler should never be null.                    
                </comment>
                <comment line="239">
                    Get the data associated with our entry.                    
                </comment>
                <comment line="243">
                    data may be null if the OID we were given is not valid.                    
                </comment>
                <comment line="248">
                    make the new entry (transient object that will be kept only
                     for the duration of the request.                    
                </comment>
                <comment line="254">
                    Put the entry in the cache in case we need it later while processing
                     the request.                    
                </comment>
                <declaration name="m" type="Map&lt;Object,Object&gt;" line="204"/>
                <declaration name="index" type="long" line="209"/>
                <declaration name="entryTag" type="String" line="217"/>
                <scope line="222">
                    <declaration name="entry" type="Object" line="223"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="231"/>
                <declaration name="data" type="Object" line="240"/>
                <declaration name="entry" type="Object" line="250"/>
                <scope line="256"/>
            </method>
            <javadoc line="263">
                Get the SnmpTableHandler that holds the jvmMemManagerTable data.
                  First look it up in the request contextual cache, and if it is
                  not found, obtain it from the weak cache.
                  &lt;br&gt;The request contextual cache will be released at the end of the
                  current requests, and is used only to process this request.
                  &lt;br&gt;The weak cache is shared by all requests, and is only
                  recomputed when it is found to be obsolete.
                  &lt;br&gt;Note that the data put in the request contextual cache is
                  never considered to be obsolete, in order to preserve data
                  coherency.                
            </javadoc>
            <method name="getHandler" type="SnmpTableHandler" line="275">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="281">
                    Look in the contextual cache.                    
                </comment>
                <comment line="288">
                    No handler in contextual cache, make a new one.                    
                </comment>
                <declaration name="m" type="Map&lt;Object,Object&gt;" line="276"/>
                <scope line="281">
                    <declaration name="handler" type="SnmpTableHandler" line="282"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="288"/>
            </method>
            <declaration name="log" type="MibLogger" line="296"/>
        </class>
    </source>