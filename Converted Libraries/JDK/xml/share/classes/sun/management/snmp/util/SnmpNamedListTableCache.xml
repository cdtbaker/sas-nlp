<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.util">
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="SnmpNamedListTableCache" line="42">
            <extends class="SnmpListTableCache"/>
            <javadoc line="42">
                This abstract class implements a weak cache that holds table data, for
                  a table whose data is obtained from a list  where a name can be obtained
                  for each item in the list.
                  &lt;p&gt;This object maintains a map between an entry name and its associated
                  SnmpOid index, so that a given entry is always associated to the same
                  index.&lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;NOTE: This class is not synchronized, subclasses must implement
                  the appropriate synchronization whwn needed.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="names" type="TreeMap" line="54"/>
            <javadoc line="54">
                This map associate an entry name with the SnmpOid index that&apos;s
                  been allocated for it.                
            </javadoc>
            <declaration name="last" type="long" line="60"/>
            <javadoc line="60">
                The last allocate index.                
            </javadoc>
            <declaration name="wrapped" type="boolean" line="65"/>
            <javadoc line="65">
                true if the index has wrapped.                
            </javadoc>
            <method name="getKey" type="String" line="70"/>
            <javadoc line="70">
                Returns the key to use as name for the given &lt;var&gt;item&lt;/var&gt;.
                  &lt;br&gt;This method is called by {@link #getIndex(Object,List,int,Object)}.
                  The given &lt;var&gt;item&lt;/var&gt; is expected to be always associated with
                  the same name.                
                <param>
                    context The context passed to{@link #updateCachedDatas(Object,List)}.                    
                </param>
                <param>
                    rawDatas Raw table datas passed to{@link #updateCachedDatas(Object,List)}.                    
                </param>
                <param>
                    rank Rank of the given &lt;var&gt;item&lt;/var&gt; in the
                      &lt;var&gt;rawDatas&lt;/var&gt; list iterator.                    
                </param>
                <param>
                    item The raw data object for which a key name must be determined.                    
                </param>
            </javadoc>
            <javadoc line="86">
                Find a new index for the entry corresponding to the
                  given &lt;var&gt;item&lt;/var&gt;.
                  &lt;br&gt;This method is called by {@link #getIndex(Object,List,int,Object)}when a new index needs to be allocated for an &lt;var&gt;item&lt;/var&gt;. The
                  index returned must not be already in used.                
                <param>
                    context The context passed to{@link #updateCachedDatas(Object,List)}.                    
                </param>
                <param>
                    rawDatas Raw table datas passed to{@link #updateCachedDatas(Object,List)}.                    
                </param>
                <param>
                    rank Rank of the given &lt;var&gt;item&lt;/var&gt; in the
                      &lt;var&gt;rawDatas&lt;/var&gt; list iterator.                    
                </param>
                <param>
                    item The raw data object for which an index must be determined.                    
                </param>
            </javadoc>
            <method name="makeIndex" type="SnmpOid" line="101">
                <params>
                    <param name="context" type="Object"/>
                    <param name="rawDatas" type="List"/>
                    <param name="rank" type="int"/>
                    <param name="item" type="Object"/>
                </params>
                <comment line="104">
                    check we are in the limits of an unsigned32.                    
                </comment>
                <comment line="106">
                    we just wrapped.                    
                </comment>
                <comment line="112">
                    If we never wrapped, we can safely return last as new index.                    
                </comment>
                <comment line="115">
                    We wrapped. We must look for an unused index.                    
                </comment>
                <comment line="120">
                    Was this index already in use?                    
                </comment>
                <comment line="124">
                    Have we just used it in a previous iteration?                    
                </comment>
                <comment line="128">
                    Ok, not in use.                    
                </comment>
                <comment line="131">
                    all indexes are in use! we&apos;re stuck.
                      throw new IndexOutOfBoundsException(&quot;No index available.&quot;);
                     better to return null and log an error.                    
                </comment>
                <scope line="104"/>
                <scope line="115">
                    <declaration name="testOid" type="SnmpOid" line="117"/>
                </scope>
            </method>
            <javadoc line="136">
                Call {@link #getKey(Object,List,int,Object)} in order to get
                  the item name. Then check whether an index was already allocated
                  for the entry by that name. If yes return it. Otherwise, call{@link #makeIndex(Object,List,int,Object)} to compute a new
                  index for that entry.
                  Finally store the association between
                  the name and index in the context TreeMap.                
                <param>
                    context The context passed to{@link #updateCachedDatas(Object,List)}.
                      It is expected to
                      be an instance of  {@link TreeMap}.                    
                </param>
                <param>
                    rawDatas Raw table datas passed to{@link #updateCachedDatas(Object,List)}.                    
                </param>
                <param>
                    rank Rank of the given &lt;var&gt;item&lt;/var&gt; in the
                      &lt;var&gt;rawDatas&lt;/var&gt; list iterator.                    
                </param>
                <param>
                    item The raw data object for which an index must be determined.                    
                </param>
            </javadoc>
            <method name="getIndex" type="SnmpOid" line="155">
                <params>
                    <param name="context" type="Object"/>
                    <param name="rawDatas" type="List"/>
                    <param name="rank" type="int"/>
                    <param name="item" type="Object"/>
                </params>
                <declaration name="key" type="String" line="156"/>
                <declaration name="index" type="Object" line="157"/>
                <declaration name="result" type="SnmpOid" line="158"/>
                <scope line="161">
                    <declaration name="map" type="Map&lt;Object,Object&gt;" line="162"/>
                </scope>
            </method>
            <javadoc line="169">
                Allocate a new {@link TreeMap} to serve as context, then
                  call {@link SnmpListTableCache#updateCachedDatas(Object,List)}, and
                  finally replace the {@link #names} TreeMap by the new allocated
                  TreeMap.                
                <param>
                    rawDatas The table datas from which the cached data will be
                      computed.                    
                </param>
            </javadoc>
            <method name="updateCachedDatas" type="SnmpCachedData" line="177">
                <params>
                    <param name="context" type="Object"/>
                    <param name="rawDatas" type="List"/>
                </params>
                <declaration name="ctxt" type="TreeMap" line="178"/>
                <declaration name="result" type="SnmpCachedData" line="179"/>
            </method>
            <method name="loadRawDatas" type="List" line="186"/>
            <javadoc line="186">
                Load a list of raw data from which to build the cached data.
                  This method is called when nothing is found in the request
                  contextual cache.                
                <param>
                    userData The request contextual cache allocated by
                      the {@link JvmContextFactory}.                    
                </param>
            </javadoc>
            <method name="getRawDatasKey" type="String" line="196"/>
            <javadoc line="196">
                The name under which the raw data is to be found/put in
                  the request contextual cache.                
            </javadoc>
            <javadoc line="202">
                Get a list of raw data from which to build the cached data.
                  Obtains a list of raw data by first looking it up in the
                  request contextual cache &lt;var&gt;userData&lt;/var&gt; under the given
                  &lt;var&gt;key&lt;/var&gt;. If nothing is found in the cache, calls{@link #loadRawDatas(Map)} to obtain a new rawData list,
                  and cache the result in &lt;var&gt;userData&lt;/var&gt; under &lt;var&gt;key&lt;/var&gt;.                
                <param>
                    userData The request contextual cache allocated by
                      the {@link JvmContextFactory}.                    
                </param>
                <param>
                    key The name under which the raw data is to be found/put in
                      the request contextual cache.                    
                </param>
            </javadoc>
            <method name="getRawDatas" type="List" line="215">
                <params>
                    <param name="userData" type="Map<Object,Object>"/>
                    <param name="key" type="String"/>
                </params>
                <comment line="219">
                    Look for memory manager list in request contextual cache.                    
                </comment>
                <comment line="224">
                    No list in contextual cache, get it from API                    
                </comment>
                <comment line="228">
                    Put list in cache...                    
                </comment>
                <declaration name="rawDatas" type="List" line="216"/>
                <scope line="222"/>
            </method>
            <javadoc line="235">
                Update cahed datas.
                  Obtains a {@link List} of raw datas by calling{@link #getRawDatas(Map,String) getRawDatas((Map)context,getRawDatasKey())}.&lt;br&gt;
                  Then allocate a new {@link TreeMap} to serve as temporary map between
                  names and indexes, and call {@link #updateCachedDatas(Object,List)}with that temporary map as context.&lt;br&gt;
                  Finally replaces the {@link #names} TreeMap by the temporary
                  TreeMap.                
                <param>
                    context The request contextual cache allocated by the{@link JvmContextFactory}.                    
                </param>
            </javadoc>
            <method name="updateCachedDatas" type="SnmpCachedData" line="247">
                <params>
                    <param name="context" type="Object"/>
                </params>
                <comment line="253">
                    Look for memory manager list in request contextual cache.                    
                </comment>
                <declaration name="userData" type="Map&lt;Object,Object&gt;" line="249"/>
                <declaration name="rawDatas" type="List" line="253"/>
                <declaration name="ctxt" type="TreeMap" line="258"/>
                <declaration name="result" type="SnmpCachedData" line="259"/>
            </method>
            <declaration name="log" type="MibLogger" line="265"/>
        </class>
    </source>