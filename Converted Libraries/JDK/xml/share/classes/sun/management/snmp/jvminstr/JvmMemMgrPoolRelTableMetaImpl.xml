<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.Collections"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="com.sun.jmx.snmp.agent.SnmpStandardObjectServer"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibTable"/>
        <import package="java.lang.management.MemoryManagerMXBean"/>
        <import package="java.lang.management.MemoryPoolMXBean"/>
        <import package="sun.management.snmp.jvmmib.JvmMemMgrPoolRelTableMeta"/>
        <import package="sun.management.snmp.util.SnmpTableCache"/>
        <import package="sun.management.snmp.util.SnmpCachedData"/>
        <import package="sun.management.snmp.util.SnmpTableHandler"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmMemMgrPoolRelTableMetaImpl" line="25">
            <extends class="JvmMemMgrPoolRelTableMeta"/>
            <implements interface="Serializable"/>
            <javadoc line="25">
                The class is used for implementing the &quot;JvmMemMgrPoolRelTable&quot; group.                
            </javadoc>
            <class name="JvmMemMgrPoolRelTableCache" line="29">
                <extends class="SnmpTableCache"/>
                <javadoc line="29">
                    A concrete implementation of {@link SnmpTableCache}, for the
                      jvmMemMgrPoolRelTable.                    
                </javadoc>
                <declaration name="meta" type="JvmMemMgrPoolRelTableMetaImpl" line="34"/>
                <javadoc line="35">
                    Create a weak cache for the jvmMemMgrPoolRelTable.                    
                    <param>
                        validity validity of the cached data, in ms.                        
                    </param>
                </javadoc>
                <method name="JvmMemMgrPoolRelTableCache" type="constructor" line="39">
                    <params>
                        <param name="meta" type="JvmMemMgrPoolRelTableMetaImpl"/>
                        <param name="validity" type="long"/>
                    </params>
                </method>
                <javadoc line="43">
                    Call &lt;code&gt;getTableDatas(JvmContextFactory.getUserData())&lt;/code&gt;.                    
                </javadoc>
                <method name="getTableHandler" type="SnmpTableHandler" line="46">
                    <declaration name="userData" type="Map" line="47"/>
                </method>
                <javadoc line="50">
                    Builds a map pool-name =&gt; pool-index from the SnmpTableHandler
                      of the JvmMemPoolTable.                    
                </javadoc>
                <method name="buildPoolIndexMap" type="Map&lt;String,SnmpOid&gt;" line="54">
                    <params>
                        <param name="handler" type="SnmpTableHandler"/>
                    </params>
                    <declaration name="m" type="Map&amp;lt;String,SnmpOid&amp;gt;" line="56"/>
                    <declaration name="index" type="SnmpOid" line="57"/>
                    <scope line="58">
                        <declaration name="mpm" type="MemoryPoolMXBean" line="59"/>
                        <declaration name="name" type="String" line="61"/>
                    </scope>
                </method>
                <javadoc line="67">
                    Builds a map pool-name =&gt; pool-index from the SnmpTableHandler
                      of the JvmMemPoolTable.
                      Optimized algorithm.                    
                </javadoc>
                <method name="buildPoolIndexMap" type="Map&lt;String,SnmpOid&gt;" line="72">
                    <params>
                        <param name="cached" type="SnmpCachedData"/>
                    </params>
                    <declaration name="indexes" type="SnmpOid[]" line="74"/>
                    <declaration name="datas" type="Object[]" line="75"/>
                    <declaration name="len" type="int" line="76"/>
                    <declaration name="m" type="Map&amp;lt;String,SnmpOid&amp;gt;" line="77"/>
                    <scope line="78">
                        <declaration name="index" type="SnmpOid" line="79"/>
                        <declaration name="mpm" type="MemoryPoolMXBean" line="81"/>
                        <declaration name="name" type="String" line="83"/>
                    </scope>
                </method>
                <javadoc line="89">
                    Return a table handler that holds the jvmMemManagerTable table data.
                      This method return the cached table data if it is still
                      valid, recompute it and cache the new value if it&apos;s not.
                      If it needs to recompute the cached data, it first
                      try to obtain the list of memory managers from the request
                      contextual cache, and if it is not found, it calls
                      &lt;code&gt;ManagementFactory.getMemoryMBean().getMemoryManagers()&lt;/code&gt;
                      and caches the value.
                      This ensures that
                      &lt;code&gt;ManagementFactory.getMemoryMBean().getMemoryManagers()&lt;/code&gt;
                      is not called more than once per request, thus ensuring a
                      consistent view of the table.                    
                </javadoc>
                <method name="updateCachedDatas" type="SnmpCachedData" line="103">
                    <params>
                        <param name="userData" type="Object"/>
                    </params>
                    <declaration name="mmHandler" type="SnmpTableHandler" line="104"/>
                    <declaration name="mpHandler" type="SnmpTableHandler" line="105"/>
                    <declaration name="time" type="long" line="106"/>
                    <declaration name="poolIndexMap" type="Map" line="107"/>
                    <declaration name="table" type="TreeMap&amp;lt;SnmpOid,Object&amp;gt;" line="108"/>
                </method>
                <javadoc line="112">
                    Get the list of memory pool associated with the
                      given MemoryManagerMXBean.                    
                </javadoc>
                <method name="getMemoryPools" type="String[]" line="116">
                    <params>
                        <param name="userData" type="Object"/>
                        <param name="mmm" type="MemoryManagerMXBean"/>
                        <param name="mmarc" type="long"/>
                    </params>
                    <declaration name="listTag" type="String" line="117"/>
                    <declaration name="result" type="String[]" line="118"/>
                    <scope line="119"/>
                    <scope line="123"/>
                    <scope line="126">
                        <declaration name="map" type="Map&amp;lt;Object,Object&amp;gt;" line="127"/>
                    </scope>
                </method>
                <method name="updateTreeMap" type="void" line="132">
                    <params>
                        <param name="table" type="TreeMap&lt;SnmpOid,Object&gt;"/>
                        <param name="userData" type="Object"/>
                        <param name="mmm" type="MemoryManagerMXBean"/>
                        <param name="mmIndex" type="SnmpOid"/>
                        <param name="poolIndexMap" type="Map"/>
                    </params>
                    <declaration name="mmarc" type="long" line="133"/>
                    <scope line="134"/>
                    <scope line="137"/>
                    <declaration name="mpList" type="String[]" line="142"/>
                    <declaration name="mmmName" type="String" line="144"/>
                    <scope line="145">
                        <declaration name="mpmName" type="String" line="146"/>
                        <declaration name="mpIndex" type="SnmpOid" line="148"/>
                        <declaration name="mparc" type="long" line="150"/>
                        <scope line="151"/>
                        <scope line="154"/>
                        <declaration name="arcs" type="long[]" line="159"/>
                        <declaration name="index" type="SnmpOid" line="160"/>
                    </scope>
                </method>
                <method name="updateTreeMap" type="void" line="164">
                    <params>
                        <param name="table" type="TreeMap&lt;SnmpOid,Object&gt;"/>
                        <param name="userData" type="Object"/>
                        <param name="mmHandler" type="SnmpTableHandler"/>
                        <param name="mpHandler" type="SnmpTableHandler"/>
                        <param name="poolIndexMap" type="Map"/>
                    </params>
                    <scope line="165"/>
                    <declaration name="mmIndex" type="SnmpOid" line="169"/>
                    <scope line="170">
                        <declaration name="mmm" type="MemoryManagerMXBean" line="171"/>
                    </scope>
                </method>
                <method name="updateTreeMap" type="void" line="176">
                    <params>
                        <param name="table" type="TreeMap&lt;SnmpOid,Object&gt;"/>
                        <param name="userData" type="Object"/>
                        <param name="mmHandler" type="SnmpCachedData"/>
                        <param name="mpHandler" type="SnmpTableHandler"/>
                        <param name="poolIndexMap" type="Map"/>
                    </params>
                    <declaration name="indexes" type="SnmpOid[]" line="177"/>
                    <declaration name="datas" type="Object[]" line="178"/>
                    <declaration name="size" type="int" line="179"/>
                    <scope line="180">
                        <declaration name="mmm" type="MemoryManagerMXBean" line="181"/>
                    </scope>
                </method>
            </class>
            <declaration name="cache" type="SnmpTableCache" line="187"/>
            <declaration name="managers" type="JvmMemManagerTableMetaImpl" line="188"/>
            <declaration name="pools" type="JvmMemPoolTableMetaImpl" line="189"/>
            <javadoc line="190">
                Constructor for the table. Initialize metadata for
                  &quot;JvmMemMgrPoolRelTableMeta&quot;.
                  The reference on the MBean server is updated so the entries
                  created through an SNMP SET will be AUTOMATICALLY REGISTERED
                  in Java DMK.                
            </javadoc>
            <method name="JvmMemMgrPoolRelTableMetaImpl" type="constructor" line="197">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="objserv" type="SnmpStandardObjectServer"/>
                </params>
            </method>
            <method name="getManagers" type="JvmMemManagerTableMetaImpl" line="201">
                <params>
                    <param name="mib" type="SnmpMib"/>
                </params>
                <scope line="202"/>
            </method>
            <method name="getPools" type="JvmMemPoolTableMetaImpl" line="207">
                <params>
                    <param name="mib" type="SnmpMib"/>
                </params>
                <scope line="208"/>
            </method>
            <javadoc line="213">
                Returns the JvmMemManagerTable SnmpTableHandler                
            </javadoc>
            <method name="getManagerHandler" type="SnmpTableHandler" line="216">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="managerTable" type="JvmMemManagerTableMetaImpl" line="217"/>
            </method>
            <javadoc line="220">
                Returns the JvmMemPoolTable SnmpTableHandler                
            </javadoc>
            <method name="getPoolHandler" type="SnmpTableHandler" line="223">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="poolTable" type="JvmMemPoolTableMetaImpl" line="224"/>
            </method>
            <method name="getNextOid" type="SnmpOid" line="227">
                <params>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="230">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="dbg" type="boolean" line="231"/>
                <declaration name="handler" type="SnmpTableHandler" line="233"/>
                <scope line="234"/>
                <declaration name="next" type="SnmpOid" line="238"/>
            </method>
            <method name="contains" type="boolean" line="243">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="handler" type="SnmpTableHandler" line="244"/>
            </method>
            <method name="getEntry" type="Object" line="248">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="250"/>
                <declaration name="mgrIndex" type="long" line="251"/>
                <declaration name="poolIndex" type="long" line="252"/>
                <declaration name="entryTag" type="String" line="253"/>
                <scope line="254">
                    <declaration name="entry" type="Object" line="255"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="258"/>
                <declaration name="data" type="Object" line="260"/>
                <declaration name="entry" type="Object" line="262"/>
                <scope line="263"/>
            </method>
            <javadoc line="268">
                Get the SnmpTableHandler that holds the jvmMemManagerTable data.
                  First look it up in the request contextual cache, and if it is
                  not found, obtain it from the weak cache.
                  &lt;br&gt;The request contextual cache will be released at the end of the
                  current requests, and is used only to process this request.
                  &lt;br&gt;The weak cache is shared by all requests, and is only
                  recomputed when it is found to be obsolete.
                  &lt;br&gt;Note that the data put in the request contextual cache is
                  never considered to be obsolete, in order to preserve data
                  coherency.                
            </javadoc>
            <method name="getHandler" type="SnmpTableHandler" line="280">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="281"/>
                <scope line="284">
                    <declaration name="handler" type="SnmpTableHandler" line="285"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="288"/>
            </method>
            <declaration name="log" type="MibLogger" line="292"/>
        </class>
    </source>