<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="java.io.Serializable"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="com.sun.jmx.snmp.agent.SnmpStandardObjectServer"/>
        <import package="java.lang.management.MemoryManagerMXBean"/>
        <import package="java.lang.management.GarbageCollectorMXBean"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="sun.management.snmp.jvmmib.JvmMemGCTableMeta"/>
        <import package="sun.management.snmp.util.SnmpCachedData"/>
        <import package="sun.management.snmp.util.SnmpTableCache"/>
        <import package="sun.management.snmp.util.SnmpTableHandler"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmMemGCTableMetaImpl" line="19">
            <extends class="JvmMemGCTableMeta"/>
            <javadoc line="19">
                The class is used for implementing the &quot;JvmMemGCTable&quot; table.                
            </javadoc>
            <class name="GCTableFilter" line="23">
                <javadoc line="23">
                    This class acts as a filter over the SnmpTableHandler
                      used for the JvmMemoryManagerTable. It filters out
                      (skip) all MemoryManagerMXBean that are not instances of
                      GarbageCollectorMXBean so that only Garbage Collectors are
                      seen. This is a better solution than relying on
                      ManagementFactory.getGarbageCollectorMXBeans() because it makes it
                      possible to guarantee the consistency betwen the MemoryManager table
                      and the GCTable since both will be sharing the same cache.                    
                </javadoc>
                <javadoc line="34">
                    Returns the index that immediately follows the given
                      &lt;var&gt;index&lt;/var&gt;. The returned index is strictly greater
                      than the given &lt;var&gt;index&lt;/var&gt;, and is contained in the table.
                      &lt;br&gt;If the given &lt;var&gt;index&lt;/var&gt; is null, returns the first
                      index in the table.
                      &lt;br&gt;If there are no index after the given &lt;var&gt;index&lt;/var&gt;,
                      returns null.
                      This method is an optimization for the case where the
                      SnmpTableHandler is in fact an instance of SnmpCachedData.                    
                </javadoc>
                <method name="getNext" type="SnmpOid" line="45">
                    <params>
                        <param name="datas" type="SnmpCachedData"/>
                        <param name="index" type="SnmpOid"/>
                    </params>
                    <declaration name="dbg" type="boolean" line="46"/>
                    <declaration name="insertion" type="int" line="47"/>
                    <declaration name="next" type="int" line="49"/>
                    <scope line="52">
                        <declaration name="value" type="Object" line="54"/>
                        <scope line="56"/>
                    </scope>
                </method>
                <javadoc line="64">
                    Returns the index that immediately follows the given
                      &lt;var&gt;index&lt;/var&gt;. The returned index is strictly greater
                      than the given &lt;var&gt;index&lt;/var&gt;, and is contained in the table.
                      &lt;br&gt;If the given &lt;var&gt;index&lt;/var&gt; is null, returns the first
                      index in the table.
                      &lt;br&gt;If there are no index after the given &lt;var&gt;index&lt;/var&gt;,
                      returns null.                    
                </javadoc>
                <method name="getNext" type="SnmpOid" line="73">
                    <params>
                        <param name="handler" type="SnmpTableHandler"/>
                        <param name="index" type="SnmpOid"/>
                    </params>
                    <declaration name="next" type="SnmpOid" line="75"/>
                    <scope line="76">
                        <declaration name="value" type="Object" line="78"/>
                    </scope>
                </method>
                <javadoc line="84">
                    Returns the data associated with the given index.
                      If the given index is not found, null is returned.
                      Note that returning null does not necessarily means that
                      the index was not found.                    
                </javadoc>
                <method name="getData" type="Object" line="90">
                    <params>
                        <param name="handler" type="SnmpTableHandler"/>
                        <param name="index" type="SnmpOid"/>
                    </params>
                    <declaration name="value" type="Object" line="91"/>
                </method>
                <javadoc line="95">
                    Returns true if the given &lt;var&gt;index&lt;/var&gt; is present.                    
                </javadoc>
                <method name="contains" type="boolean" line="98">
                    <params>
                        <param name="handler" type="SnmpTableHandler"/>
                        <param name="index" type="SnmpOid"/>
                    </params>
                </method>
            </class>
            <declaration name="managers" type="JvmMemManagerTableMetaImpl" line="103"/>
            <declaration name="filter" type="GCTableFilter" line="104"/>
            <javadoc line="105">
                Constructor for the table. Initialize metadata for &quot;JvmMemGCTableMeta&quot;.                
            </javadoc>
            <method name="JvmMemGCTableMetaImpl" type="constructor" line="108">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="objserv" type="SnmpStandardObjectServer"/>
                </params>
            </method>
            <method name="getManagers" type="JvmMemManagerTableMetaImpl" line="111">
                <params>
                    <param name="mib" type="SnmpMib"/>
                </params>
                <scope line="112"/>
            </method>
            <javadoc line="117">
                Returns the JvmMemManagerTable SnmpTableHandler                
            </javadoc>
            <method name="getHandler" type="SnmpTableHandler" line="120">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="managerTable" type="JvmMemManagerTableMetaImpl" line="121"/>
            </method>
            <method name="getNextOid" type="SnmpOid" line="124">
                <params>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="127">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="dbg" type="boolean" line="128"/>
                <scope line="129">
                    <declaration name="handler" type="SnmpTableHandler" line="131"/>
                    <scope line="132"/>
                    <declaration name="next" type="SnmpOid" line="136"/>
                </scope>
                <scope line="141"/>
            </method>
            <method name="contains" type="boolean" line="146">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="handler" type="SnmpTableHandler" line="147"/>
            </method>
            <method name="getEntry" type="Object" line="151">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <declaration name="m" type="Map&amp;lt;Object,Object&amp;gt;" line="153"/>
                <declaration name="index" type="long" line="154"/>
                <declaration name="entryTag" type="String" line="155"/>
                <scope line="156">
                    <declaration name="entry" type="Object" line="157"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="160"/>
                <declaration name="data" type="Object" line="162"/>
                <declaration name="entry" type="Object" line="164"/>
                <scope line="165"/>
            </method>
            <declaration name="log" type="MibLogger" line="170"/>
        </class>
    </source>