<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.management.snmp.jvminstr">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <import package="com.sun.jmx.snmp.SnmpCounter"/>
        <import package="com.sun.jmx.snmp.SnmpCounter64"/>
        <import package="com.sun.jmx.snmp.SnmpGauge"/>
        <import package="com.sun.jmx.snmp.SnmpInt"/>
        <import package="com.sun.jmx.snmp.SnmpUnsignedInt"/>
        <import package="com.sun.jmx.snmp.SnmpIpAddress"/>
        <import package="com.sun.jmx.snmp.SnmpTimeticks"/>
        <import package="com.sun.jmx.snmp.SnmpOpaque"/>
        <import package="com.sun.jmx.snmp.SnmpString"/>
        <import package="com.sun.jmx.snmp.SnmpStringFixed"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpNull"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpIndex"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMib"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibTable"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibSubRequest"/>
        <import package="com.sun.jmx.snmp.agent.SnmpStandardObjectServer"/>
        <import package="sun.management.snmp.jvmmib.JvmRTBootClassPathTableMeta"/>
        <import package="sun.management.snmp.util.SnmpCachedData"/>
        <import package="sun.management.snmp.util.SnmpTableCache"/>
        <import package="sun.management.snmp.util.SnmpTableHandler"/>
        <import package="sun.management.snmp.util.MibLogger"/>
        <import package="sun.management.snmp.util.JvmContextFactory"/>
        <class name="JvmRTBootClassPathTableMetaImpl" line="33">
            <extends class="JvmRTBootClassPathTableMeta"/>
            <javadoc line="33">
                The class is used for implementing the &quot;JvmRTBootClassPathTable&quot;.                
            </javadoc>
            <declaration name="cache" type="SnmpTableCache" line="37"/>
            <class name="JvmRTBootClassPathTableCache" line="38">
                <extends class="SnmpTableCache"/>
                <javadoc line="38">
                    A concrete implementation of {@link SnmpTableCache}, for the
                      JvmRTBootClassPathTable.                    
                </javadoc>
                <declaration name="meta" type="JvmRTBootClassPathTableMetaImpl" line="43"/>
                <method name="JvmRTBootClassPathTableCache" type="constructor" line="44">
                    <params>
                        <param name="meta" type="JvmRTBootClassPathTableMetaImpl"/>
                        <param name="validity" type="long"/>
                    </params>
                </method>
                <javadoc line="48">
                    Call &lt;code&gt;getTableDatas(JvmContextFactory.getUserData())&lt;/code&gt;.                    
                </javadoc>
                <method name="getTableHandler" type="SnmpTableHandler" line="51">
                    <declaration name="userData" type="Map" line="52"/>
                </method>
                <javadoc line="55">
                    Return a table handler containing the Thread indexes.
                      Indexes are computed from the ThreadId.                    
                </javadoc>
                <method name="updateCachedDatas" type="SnmpCachedData" line="59">
                    <params>
                        <param name="userData" type="Object"/>
                    </params>
                    <declaration name="path" type="String[]" line="60"/>
                    <declaration name="time" type="long" line="61"/>
                    <declaration name="len" type="int" line="62"/>
                    <declaration name="indexes" type="SnmpOid" line="63"/>
                    <scope line="64"/>
                </method>
            </class>
            <javadoc line="70">
                Constructor for the table. Initialize metadata for
                  &quot;JvmRTBootClassPathTableMeta&quot;.
                  The reference on the MBean server is updated so the entries
                  created through an SNMP SET will be AUTOMATICALLY REGISTERED
                  in Java DMK.                
            </javadoc>
            <method name="JvmRTBootClassPathTableMetaImpl" type="constructor" line="77">
                <params>
                    <param name="myMib" type="SnmpMib"/>
                    <param name="objserv" type="SnmpStandardObjectServer"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="81">
                <params>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="getNextOid" type="SnmpOid" line="84">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="dbg" type="boolean" line="85"/>
                <declaration name="handler" type="SnmpTableHandler" line="87"/>
                <scope line="88"/>
                <declaration name="next" type="SnmpOid" line="92"/>
            </method>
            <method name="contains" type="boolean" line="97">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="handler" type="SnmpTableHandler" line="98"/>
            </method>
            <method name="getEntry" type="Object" line="102">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <declaration name="dbg" type="boolean" line="103"/>
                <scope line="105"/>
                <declaration name="m" type="Map&lt;Object,Object&gt;" line="109"/>
                <declaration name="entryTag" type="String" line="110"/>
                <scope line="111">
                    <declaration name="entry" type="Object" line="112"/>
                    <scope line="113"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="119"/>
                <declaration name="data" type="Object" line="121"/>
                <declaration name="entry" type="Object" line="124"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Get the SnmpTableHandler that holds the jvmThreadInstanceTable data.
                  First look it up in the request contextual cache, and if it is
                  not found, obtain it from the weak cache.
                  &lt;br&gt;The request contextual cache will be released at the end of the
                  current requests, and is used only to process this request.
                  &lt;br&gt;The weak cache is shared by all requests, and is only
                  recomputed when it is found to be obsolete.
                  &lt;br&gt;Note that the data put in the request contextual cache is
                  never considered to be obsolete, in order to preserve data
                  coherency.                
            </javadoc>
            <method name="getHandler" type="SnmpTableHandler" line="142">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="m" type="Map&lt;Object,Object&gt;" line="143"/>
                <scope line="146">
                    <declaration name="handler" type="SnmpTableHandler" line="147"/>
                </scope>
                <declaration name="handler" type="SnmpTableHandler" line="150"/>
            </method>
            <declaration name="log" type="MibLogger" line="154"/>
        </class>
    </source>