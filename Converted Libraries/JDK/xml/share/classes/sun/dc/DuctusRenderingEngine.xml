<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.dc">
        <import package="java.awt.Shape"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.geom.Path2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="sun.awt.geom.PathConsumer2D"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.java2d.pipe.AATileGenerator"/>
        <import package="sun.java2d.pipe.RenderingEngine"/>
        <import package="sun.dc.pr.Rasterizer"/>
        <import package="sun.dc.pr.PathStroker"/>
        <import package="sun.dc.pr.PathDasher"/>
        <import package="sun.dc.pr.PRException"/>
        <import package="sun.dc.path.PathConsumer"/>
        <import package="sun.dc.path.PathException"/>
        <import package="sun.dc.path.FastPathProducer"/>
        <class name="DuctusRenderingEngine" line="47">
            <extends class="RenderingEngine"/>
            <comment line="172">
                Feed a path from a PathIterator to a Ductus PathConsumer.                
            </comment>
            <declaration name="PenUnits" type="float" line="48"/>
            <declaration name="MinPenUnits" type="int" line="49"/>
            <declaration name="MinPenUnitsAA" type="int" line="50"/>
            <declaration name="MinPenSizeAA" type="float" line="51"/>
            <declaration name="UPPER_BND" type="float" line="53"/>
            <declaration name="LOWER_BND" type="float" line="54"/>
            <declaration name="RasterizerCaps" type="int" line="56"/>
            <declaration name="RasterizerCorners" type="int" line="60"/>
            <method name="getTransformMatrix" type="float[]" line="64">
                <params>
                    <param name="transform" type="AffineTransform"/>
                </params>
                <declaration name="matrix" type="float" line="65"/>
                <declaration name="dmatrix" type="double" line="66"/>
                <scope line="68"/>
            </method>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="createStrokedShape" type="Shape" line="85">
                <params>
                    <param name="src" type="Shape"/>
                    <param name="width" type="float"/>
                    <param name="caps" type="int"/>
                    <param name="join" type="int"/>
                    <param name="miterlimit" type="float"/>
                    <param name="dashes" type="float"/>
                    <param name="dashphase" type="float"/>
                </params>
                <declaration name="filler" type="FillAdapter" line="86"/>
                <declaration name="stroker" type="PathStroker" line="87"/>
                <declaration name="dasher" type="PathDasher" line="88"/>
                <scope line="90">
                    <declaration name="consumer" type="PathConsumer" line="91"/>
                    <scope line="97"/>
                    <scope line="102"/>
                </scope>
                <scope line="107">
                    <scope line="109"/>
                </scope>
            </method>
            <javadoc line="117">
                {@inheritDoc}                
            </javadoc>
            <method name="strokeTo" type="void" line="128">
                <params>
                    <param name="src" type="Shape"/>
                    <param name="transform" type="AffineTransform"/>
                    <param name="bs" type="BasicStroke"/>
                    <param name="thin" type="boolean"/>
                    <param name="normalize" type="boolean"/>
                    <param name="antialias" type="boolean"/>
                    <param name="sr" type="PathConsumer2D"/>
                </params>
                <declaration name="stroker" type="PathStroker" line="129"/>
                <declaration name="consumer" type="PathConsumer" line="130"/>
                <declaration name="matrix" type="float" line="132"/>
                <scope line="133">
                    <scope line="135"/>
                </scope>
                <declaration name="dashes" type="float[]" line="144"/>
                <scope line="145">
                    <declaration name="dasher" type="PathDasher" line="146"/>
                    <scope line="148"/>
                </scope>
                <scope line="155">
                    <declaration name="pi" type="PathIterator" line="156"/>
                </scope>
                <scope line="159"/>
                <scope line="162">
                    <scope line="163">
                        <declaration name="next" type="PathConsumer" line="164"/>
                    </scope>
                </scope>
            </method>
            <method name="feedConsumer" type="void" line="177">
                <params>
                    <param name="pi" type="PathIterator"/>
                    <param name="consumer" type="PathConsumer"/>
                    <param name="normalize" type="boolean"/>
                    <param name="norm" type="float"/>
                </params>
                <comment line="195">
                    Force current point back to last moveto point                    
                </comment>
                <comment line="250">
                    Checking SEG_MOVETO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles NaN
                     and Infinity values. Skipping next path segment in case of
                     invalid data.                    
                </comment>
                <comment line="268">
                    Checking SEG_LINETO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles NaN
                     and Infinity values. Ignoring current path segment in case
                     of invalid data. If segment is skipped its endpoint
                     (if valid) is used to begin new subpath.                    
                </comment>
                <comment line="287">
                    Quadratic curves take two points                    
                </comment>
                <comment line="289">
                    Checking SEG_QUADTO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles NaN
                     and Infinity values. Ignoring current path segment in case
                     of invalid endpoints&apos;s data. Equivalent to the SEG_LINETO
                     if endpoint coordinates are valid but there are invalid data
                     amoung other coordinates                    
                </comment>
                <comment line="316">
                    Cubic curves take three points                    
                </comment>
                <comment line="318">
                    Checking SEG_CUBICTO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles NaN
                     and Infinity values. Ignoring current path segment in case
                     of invalid endpoints&apos;s data. Equivalent to the SEG_LINETO
                     if endpoint coordinates are valid but there are invalid data
                     amoung other coordinates                    
                </comment>
                <declaration name="pathClosed" type="boolean" line="179"/>
                <declaration name="skip" type="boolean" line="180"/>
                <declaration name="subpathStarted" type="boolean" line="181"/>
                <declaration name="mx" type="float" line="182"/>
                <declaration name="my" type="float" line="183"/>
                <declaration name="point" type="float" line="184"/>
                <declaration name="rnd" type="float" line="185"/>
                <declaration name="ax" type="float" line="186"/>
                <declaration name="ay" type="float" line="187"/>
                <scope line="189">
                    <declaration name="type" type="int" line="190"/>
                    <scope line="191">
                        <scope line="193"/>
                    </scope>
                    <scope line="199">
                        <declaration name="index" type="int" line="200"/>
                        <scope line="217">
                            <declaration name="ox" type="float" line="218"/>
                            <declaration name="oy" type="float" line="219"/>
                            <declaration name="newax" type="float" line="220"/>
                            <declaration name="neway" type="float" line="221"/>
                        </scope>
                    </scope>
                    <scope line="256"/>
                    <scope line="262"/>
                    <scope line="275">
                        <scope line="276"/>
                        <scope line="280"/>
                    </scope>
                    <scope line="297">
                        <scope line="298"/>
                        <scope line="302">
                            <scope line="305"/>
                            <scope line="308"/>
                        </scope>
                    </scope>
                    <scope line="326">
                        <scope line="327"/>
                        <scope line="331">
                            <scope line="336"/>
                            <scope line="340"/>
                        </scope>
                    </scope>
                    <scope line="347"/>
                </scope>
            </method>
            <declaration name="theRasterizer" type="Rasterizer" line="360"/>
            <method name="getRasterizer" type="Rasterizer" line="362">
                <declaration name="r" type="Rasterizer" line="363"/>
                <scope line="364"/>
                <scope line="366"/>
            </method>
            <method name="dropRasterizer" type="void" line="372">
                <params>
                    <param name="r" type="Rasterizer"/>
                </params>
            </method>
            <javadoc line="377">
                {@inheritDoc}                
            </javadoc>
            <method name="getMinimumAAPenSize" type="float" line="381"/>
            <javadoc line="385">
                {@inheritDoc}                
            </javadoc>
            <method name="getAATileGenerator" type="AATileGenerator" line="396">
                <params>
                    <param name="s" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="clip" type="Region"/>
                    <param name="bs" type="BasicStroke"/>
                    <param name="thin" type="boolean"/>
                    <param name="normalize" type="boolean"/>
                    <param name="bbox" type="int"/>
                </params>
                <comment line="447">
                    Force current point back to last moveto point                    
                </comment>
                <comment line="502">
                    Checking SEG_MOVETO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles NaN
                     and Infinity values. Skipping next path segment in case
                     of invalid data.                    
                </comment>
                <comment line="522">
                    Checking SEG_LINETO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles
                     NaN and Infinity values. Ignoring current path segment
                     in case of invalid data. If segment is skipped its
                     endpoint (if valid) is used to begin new subpath.                    
                </comment>
                <comment line="542">
                    Quadratic curves take two points                    
                </comment>
                <comment line="544">
                    Checking SEG_QUADTO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles
                     NaN and Infinity values. Ignoring current path segment
                     in case of invalid endpoints&apos;s data. Equivalent to the
                     SEG_LINETO if endpoint coordinates are valid but there
                     are invalid data amoung other coordinates                    
                </comment>
                <comment line="571">
                    Cubic curves take three points                    
                </comment>
                <comment line="573">
                    Checking SEG_CUBICTO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range. This check also handles
                     NaN and Infinity values. Ignoring  current path segment
                     in case of invalid endpoints&apos;s data. Equivalent to the
                     SEG_LINETO if endpoint coordinates are valid but there
                     are invalid data amoung other coordinates                    
                </comment>
                <comment line="627">
                    This exeption is thrown from the native part of the Ductus
                     (only in case of a debug build) to indicate that some
                     segments of the path have very large coordinates.
                     See 4485298 for more info.                    
                </comment>
                <declaration name="r" type="Rasterizer" line="397"/>
                <declaration name="pi" type="PathIterator" line="398"/>
                <scope line="400">
                    <declaration name="matrix" type="float" line="401"/>
                    <scope line="403"/>
                    <scope line="405">
                        <scope line="407"/>
                    </scope>
                    <declaration name="dashes" type="float[]" line="416"/>
                    <scope line="417">
                        <scope line="419"/>
                    </scope>
                </scope>
                <scope line="424"/>
                <scope line="431">
                    <declaration name="pathClosed" type="boolean" line="432"/>
                    <declaration name="skip" type="boolean" line="433"/>
                    <declaration name="subpathStarted" type="boolean" line="434"/>
                    <declaration name="mx" type="float" line="435"/>
                    <declaration name="my" type="float" line="436"/>
                    <declaration name="point" type="float" line="437"/>
                    <declaration name="ax" type="float" line="438"/>
                    <declaration name="ay" type="float" line="439"/>
                    <scope line="441">
                        <declaration name="type" type="int" line="442"/>
                        <scope line="443">
                            <scope line="445"/>
                        </scope>
                        <scope line="451">
                            <declaration name="index" type="int" line="452"/>
                            <scope line="469">
                                <declaration name="ox" type="float" line="470"/>
                                <declaration name="oy" type="float" line="471"/>
                                <declaration name="newax" type="float" line="472"/>
                                <declaration name="neway" type="float" line="473"/>
                            </scope>
                        </scope>
                        <scope line="509"/>
                        <scope line="515"/>
                        <scope line="529">
                            <scope line="530"/>
                            <scope line="534"/>
                        </scope>
                        <scope line="552">
                            <scope line="553"/>
                            <scope line="557">
                                <scope line="560"/>
                                <scope line="563"/>
                            </scope>
                        </scope>
                        <scope line="582">
                            <scope line="583"/>
                            <scope line="587">
                                <scope line="592"/>
                                <scope line="596"/>
                            </scope>
                        </scope>
                        <scope line="603"/>
                    </scope>
                </scope>
                <scope line="614">
                    <scope line="618"/>
                </scope>
                <scope line="625"/>
            </method>
            <javadoc line="638">
                {@inheritDoc}                
            </javadoc>
            <method name="getAATileGenerator" type="AATileGenerator" line="648">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                    <param name="lw1" type="double"/>
                    <param name="lw2" type="double"/>
                    <param name="clip" type="Region"/>
                    <param name="bbox" type="int"/>
                </params>
                <comment line="650">
                    REMIND: Deal with large coordinates!                    
                </comment>
                <comment line="666">
                    Inner parallelogram was entirely consumed by stroke...                    
                </comment>
                <comment line="709">
                    This exeption is thrown from the native part of the Ductus
                     (only in case of a debug build) to indicate that some
                     segments of the path have very large coordinates.
                     See 4485298 for more info.                    
                </comment>
                <declaration name="ldx1" type="double" line="650"/>
                <declaration name="innerpgram" type="boolean" line="651"/>
                <scope line="653">
                    <scope line="664"/>
                </scope>
                <scope line="668"/>
                <declaration name="r" type="Rasterizer" line="672"/>
                <scope line="682"/>
                <scope line="696">
                    <scope line="700"/>
                </scope>
                <scope line="707"/>
            </method>
            <method name="feedConsumer" type="void" line="720">
                <params>
                    <param name="consumer" type="PathConsumer"/>
                    <param name="pi" type="PathIterator"/>
                </params>
                <comment line="734">
                    Force current point back to last moveto point                    
                </comment>
                <scope line="721">
                    <declaration name="pathClosed" type="boolean" line="723"/>
                    <declaration name="mx" type="float" line="724"/>
                    <declaration name="my" type="float" line="725"/>
                    <declaration name="point" type="float" line="726"/>
                    <scope line="728">
                        <declaration name="type" type="int" line="729"/>
                        <scope line="730">
                            <scope line="732"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="764"/>
            </method>
            <class name="FillAdapter" line="770">
                <implements interface="PathConsumer"/>
                <declaration name="closed" type="boolean" line="771"/>
                <declaration name="path" type="Path2D.Float" line="772"/>
                <method name="FillAdapter" type="constructor" line="774">
                    <comment line="776">
                        Ductus only supplies float coordinates so
                         Path2D.Double is not necessary here.                        
                    </comment>
                </method>
                <method name="getShape" type="Shape" line="780"/>
                <method name="dispose" type="void" line="784"/>
                <method name="getConsumer" type="PathConsumer" line="787"/>
                <method name="beginPath" type="void" line="791"/>
                <method name="beginSubpath" type="void" line="793">
                    <params>
                        <param name="x0" type="float"/>
                        <param name="y0" type="float"/>
                    </params>
                    <scope line="794"/>
                </method>
                <method name="appendLine" type="void" line="801">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                    </params>
                </method>
                <method name="appendQuadratic" type="void" line="805">
                    <params>
                        <param name="xm" type="float"/>
                        <param name="ym" type="float"/>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                    </params>
                </method>
                <method name="appendCubic" type="void" line="811">
                    <params>
                        <param name="xm" type="float"/>
                        <param name="ym" type="float"/>
                        <param name="xn" type="float"/>
                        <param name="yn" type="float"/>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                    </params>
                </method>
                <method name="closedSubpath" type="void" line="815"/>
                <method name="endPath" type="void" line="819">
                    <scope line="820"/>
                </method>
                <method name="useProxy" type="void" line="828">
                    <params>
                        <param name="proxy" type="FastPathProducer"/>
                    </params>
                </method>
                <method name="getCPathConsumer" type="long" line="832"/>
            </class>
        </class>
    </source>