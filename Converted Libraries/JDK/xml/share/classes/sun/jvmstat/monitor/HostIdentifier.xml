<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.monitor">
        <import package="java.net"/>
        <class name="HostIdentifier" line="3">
            <javadoc line="3">
                An abstraction that identifies a target host and communications
                  protocol. The HostIdentifier, or hostid, provides a convenient string
                  representation of the information needed to locate and communicate with
                  a target host. The string, based on a {@link URI}, may specify the
                  the communications protocol, host name, and protocol specific information
                  for a target host. The format for a HostIdentifier string is:
                  &lt;pre&gt;
                  [&lt;I&gt;protocol&lt;/I&gt;:][[&lt;I&gt;//&lt;/I&gt;]&lt;I&gt;hostname&lt;/I&gt;][&lt;I&gt;:port&lt;/I&gt;][&lt;I&gt;/servername&lt;/I&gt;]
                  &lt;/pre&gt;
                  There are actually no required components of this string, as a null string
                  is interpreted to mean a local connection to the local host and is equivalent
                  to the string &lt;em&gt;local://localhost&lt;/em&gt;. The components of the
                  HostIdentifier are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;protocol&lt;/tt&gt; - The communications protocol. If omitted,
                  and a hostname is not specified, then default local protocol,
                  &lt;em&gt;local:&lt;/em&gt;, is assumed. If the protocol is omitted and a
                  hostname is specified then the default remote protocol,
                  &lt;em&gt;rmi:&lt;/em&gt; is assumed.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;hostname&lt;/tt&gt; - The hostname. If omitted, then
                  &lt;em&gt;localhost&lt;/em&gt; is assumed. If the protocol is also omitted,
                  then default local protocol &lt;em&gt;local:&lt;/em&gt; is also assumed.
                  If the hostname is not omitted but the protocol is omitted,
                  then the default remote protocol, &lt;em&gt;rmi:&lt;/em&gt; is assumed.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;port&lt;/tt&gt; - The port for the communications protocol.
                  Treatment of the &lt;tt&gt;port&lt;/tt&gt; parameter is implementation
                  (protocol) specific. It is unused by the default local protocol,
                  &lt;em&gt;local:&lt;/em&gt;. For the default remote protocol, &lt;em&gt;rmi:&lt;/em&gt;,
                  &lt;tt&gt;port&lt;/tt&gt; indicates the port number of the &lt;em&gt;rmiregistry&lt;/em&gt;
                  on the target host and defaults to port 1099.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;servername&lt;/tt&gt; - The treatment of the Path, Query, and
                  Fragment components of the HostIdentifier are implementation
                  (protocol) dependent. These components are ignored by the
                  default local protocol, &lt;em&gt;local:&lt;/em&gt;. For the default remote
                  protocol, &lt;em&gt;rmi&lt;/em&gt;, the Path component is interpreted as
                  the name of the RMI remote object. The Query component may
                  contain an access mode specifier &lt;em&gt;?mode=&lt;/em&gt; specifying
                  &lt;em&gt;&quot;r&quot;&lt;/em&gt; or &lt;em&gt;&quot;rw&quot;&lt;/em&gt; access (write access currently
                  ignored). The Fragment part is ignored.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  All HostIdentifier objects are represented as absolute, hierarchical URIs.
                  The constructors accept relative URIs, but these will generally be
                  transformed into an absolute URI specifying a default protocol. A
                  HostIdentifier differs from a URI in that certain contractions and
                  illicit syntactical constructions are allowed. The following are all
                  valid HostIdentifier strings:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&amp;lt null &amp;gt - transformed into &quot;//localhost&quot;&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;localhost - transformed into &quot;//localhost&quot;&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;hostname - transformed into &quot;//hostname&quot;&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;hostname:port - transformed into &quot;//hostname:port&quot;&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;proto:hostname - transformed into &quot;proto://hostname&quot;&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;proto:hostname:port - transformed into
                  &quot;proto://hostname:port&quot;&lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;proto://hostname:port&lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <see>
                    URI                    
                </see>
                <see>
                    VmIdentifier                    
                </see>
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="uri" type="URI" line="72"/>
            <javadoc line="73">
                creates a canonical representation of the uriString. This method
                  performs certain translations depending on the type of URI generated
                  by the string.                
            </javadoc>
            <method name="canonicalize" type="URI" line="78">
                <params>
                    <param name="uriString" type="String"/>
                </params>
                <scope line="79"/>
                <declaration name="u" type="URI" line="83"/>
                <scope line="84">
                    <scope line="85">
                        <declaration name="scheme" type="String" line="86"/>
                        <declaration name="ssp" type="String" line="87"/>
                        <declaration name="frag" type="String" line="88"/>
                        <declaration name="u2" type="URI" line="89"/>
                        <declaration name="c1index" type="int" line="90"/>
                        <declaration name="c2index" type="int" line="91"/>
                        <scope line="92">
                            <scope line="93"/>
                            <scope line="96"/>
                        </scope>
                    </scope>
                    <scope line="104"/>
                </scope>
                <scope line="108">
                    <declaration name="ssp" type="String" line="109"/>
                    <scope line="110"/>
                    <scope line="113"/>
                </scope>
            </method>
            <javadoc line="118">
                Create a HostIdentifier instance from a string value.                
                <param>
                    uriString a string representing a target host. The syntax of
                      the string must conform to the rules specified in the
                      class documentation.                    
                </param>
                <throws>
                    URISyntaxException Thrown when the uriString or its canonical
                      form is poorly formed. This exception may
                      get encapsulated into a MonitorException in
                      a future version.                    
                </throws>
            </javadoc>
            <method name="HostIdentifier" type="constructor" line="128">
                <params>
                    <param name="uriString" type="String"/>
                </params>
            </method>
            <javadoc line="131">
                Create a HostIdentifier instance from component parts of a URI.                
                <param>
                    scheme the {@link URI#getScheme} component of a URI.                    
                </param>
                <param>
                    authority the {@link URI#getAuthority} component of a URI.                    
                </param>
                <param>
                    path the {@link URI#getPath} component of a URI.                    
                </param>
                <param>
                    query the {@link URI#getQuery} component of a URI.                    
                </param>
                <param>
                    fragment the {@link URI#getFragment} component of a URI.                    
                </param>
                <throws>
                    URISyntaxException Thrown when the uriString or its canonical
                      form is poorly formed. This exception may
                      get encapsulated into a MonitorException in
                      a future version.                    
                </throws>
                <see>
                    URI                    
                </see>
            </javadoc>
            <method name="HostIdentifier" type="constructor" line="144">
                <params>
                    <param name="scheme" type="String"/>
                    <param name="authority" type="String"/>
                    <param name="path" type="String"/>
                    <param name="query" type="String"/>
                    <param name="fragment" type="String"/>
                </params>
            </method>
            <javadoc line="147">
                Create a HostIdentifier instance from a VmIdentifier.
                  The necessary components of the VmIdentifier are extracted and
                  reassembled into a HostIdentifier. If a &quot;file:&quot; scheme (protocol)
                  is specified, the the returned HostIdentifier will always be
                  equivalent to HostIdentifier(&quot;file://localhost&quot;).                
                <param>
                    vmid the VmIdentifier use to construct the HostIdentifier.                    
                </param>
            </javadoc>
            <method name="HostIdentifier" type="constructor" line="155">
                <params>
                    <param name="vmid" type="VmIdentifier"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="156"/>
                <declaration name="scheme" type="String" line="157"/>
                <declaration name="host" type="String" line="158"/>
                <declaration name="authority" type="String" line="159"/>
                <scope line="160">
                    <scope line="161"/>
                    <scope line="164"/>
                </scope>
                <scope line="169"/>
                <scope line="172">
                    <scope line="173"/>
                    <scope line="176"/>
                </scope>
                <scope line="181"/>
                <scope line="184"/>
                <declaration name="port" type="int" line="187"/>
                <scope line="188"/>
                <declaration name="path" type="String" line="191"/>
                <scope line="192"/>
                <declaration name="query" type="String" line="195"/>
                <scope line="196"/>
                <declaration name="frag" type="String" line="199"/>
                <scope line="200"/>
                <scope line="203"/>
                <scope line="206"/>
            </method>
            <javadoc line="210">
                Resolve a VmIdentifier with this HostIdentifier. A VmIdentifier, such
                  as &lt;em&gt;1234&lt;/em&gt; or &lt;em&gt;1234@hostname&lt;/em&gt; or any other string that
                  omits certain components of the URI string may be valid, but is certainly
                  incomplete. They are missing critical information for identifying the
                  the communications protocol, target host, or other parameters. A
                  VmIdentifier of this form is considered &lt;em&gt;unresolved&lt;/em&gt;. This method
                  uses components of the HostIdentifier to resolve the missing components
                  of the VmIdentifier.
                  &lt;p&gt;
                  Specified components of the unresolved VmIdentifier take precedence
                  over their HostIdentifier counterparts. For example, if the VmIdentifier
                  indicates &lt;em&gt;1234@hostname:2099&lt;/em&gt; and the HostIdentifier indicates
                  &lt;em&gt;rmi://hostname:1099/&lt;/em&gt;, then the resolved VmIdentifier will
                  be &lt;em&gt;rmi://1234@hostname:2099&lt;/em&gt;. Any component not explicitly
                  specified or assumed by the HostIdentifier, will remain unresolved in
                  resolved VmIdentifier.
                  &lt;p&gt;
                  A VmIdentifier specifying a &lt;em&gt;file:&lt;/em&gt; scheme (protocol), is
                  not changed in any way by this method.                
                <param>
                    vmid the unresolved VmIdentifier.                    
                </param>
                <return>
                    VmIdentifier - the resolved VmIdentifier. If vmid was resolved
                      on entry to this method, then the returned
                      VmIdentifier will be equal, but not identical, to
                      vmid.                    
                </return>
            </javadoc>
            <method name="resolve" type="VmIdentifier" line="236">
                <params>
                    <param name="vmid" type="VmIdentifier"/>
                </params>
                <declaration name="scheme" type="String" line="237"/>
                <declaration name="host" type="String" line="238"/>
                <declaration name="authority" type="String" line="239"/>
                <scope line="240"/>
                <scope line="243"/>
                <scope line="246"/>
                <declaration name="nuri" type="URI" line="249"/>
                <declaration name="sb" type="StringBuffer" line="250"/>
                <declaration name="userInfo" type="String" line="252"/>
                <scope line="253"/>
                <scope line="256"/>
                <scope line="259"/>
                <declaration name="port" type="int" line="263"/>
                <scope line="264"/>
                <scope line="267"/>
                <declaration name="path" type="String" line="270"/>
                <scope line="271"/>
                <scope line="274"/>
                <declaration name="query" type="String" line="277"/>
                <scope line="278"/>
                <scope line="281"/>
                <declaration name="fragment" type="String" line="284"/>
                <scope line="285"/>
                <scope line="288"/>
                <declaration name="s" type="String" line="291"/>
            </method>
            <javadoc line="294">
                Return the Scheme, or protocol, portion of this HostIdentifier.                
                <return>
                    String - the scheme for this HostIdentifier.                    
                </return>
                <see>
                    URI#getScheme()                    
                </see>
            </javadoc>
            <method name="getScheme" type="String" line="299"/>
            <javadoc line="302">
                Return the Scheme Specific Part of this HostIdentifier.                
                <return>
                    String - the scheme specific part for this HostIdentifier.                    
                </return>
                <see>
                    URI#getSchemeSpecificPart()                    
                </see>
            </javadoc>
            <method name="getSchemeSpecificPart" type="String" line="307"/>
            <javadoc line="310">
                Return the User Info part of this HostIdentifier.                
                <return>
                    String - the user info part for this HostIdentifier.                    
                </return>
                <see>
                    URI#getUserInfo()                    
                </see>
            </javadoc>
            <method name="getUserInfo" type="String" line="315"/>
            <javadoc line="318">
                Return the Host part of this HostIdentifier.                
                <return>
                    String - the host part for this HostIdentifier, or
                      &quot;localhost&quot; if the URI.getHost() returns null.                    
                </return>
                <see>
                    URI#getUserInfo()                    
                </see>
            </javadoc>
            <method name="getHost" type="String" line="324"/>
            <javadoc line="327">
                Return the Port for of this HostIdentifier.                
                <return>
                    String - the port for this HostIdentifier                    
                </return>
                <see>
                    URI#getPort()                    
                </see>
            </javadoc>
            <method name="getPort" type="int" line="332"/>
            <javadoc line="335">
                Return the Path part of this HostIdentifier.                
                <return>
                    String - the path part for this HostIdentifier.                    
                </return>
                <see>
                    URI#getPath()                    
                </see>
            </javadoc>
            <method name="getPath" type="String" line="340"/>
            <javadoc line="343">
                Return the Query part of this HostIdentifier.                
                <return>
                    String - the query part for this HostIdentifier.                    
                </return>
                <see>
                    URI#getQuery()                    
                </see>
            </javadoc>
            <method name="getQuery" type="String" line="348"/>
            <javadoc line="351">
                Return the Fragment part of this HostIdentifier.                
                <return>
                    String - the fragment part for this HostIdentifier.                    
                </return>
                <see>
                    URI#getFragment()                    
                </see>
            </javadoc>
            <method name="getFragment" type="String" line="356"/>
            <javadoc line="359">
                Return the mode indicated in this HostIdentifier.                
                <return>
                    String - the mode string. If no mode is specified, then &quot;r&quot;
                      is returned. otherwise, the specified mode is returned.                    
                </return>
            </javadoc>
            <method name="getMode" type="String" line="364">
                <declaration name="query" type="String" line="365"/>
                <scope line="366">
                    <declaration name="queryArgs" type="String[]" line="367"/>
                    <scope line="368">
                        <scope line="369">
                            <declaration name="index" type="int" line="370"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="377">
                Return the URI associated with the HostIdentifier.                
                <return>
                    URI - the URI.                    
                </return>
                <see>
                    URI                    
                </see>
            </javadoc>
            <method name="getURI" type="URI" line="382"/>
            <javadoc line="385">
                Return the hash code for this HostIdentifier. The hash code is
                  identical to the hash code for the contained URI.                
                <return>
                    int - the hashcode.                    
                </return>
                <see>
                    URI#hashCode()                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="391"/>
            <javadoc line="394">
                Test for quality with other objects.                
                <param>
                    object the object to be test for equality.                    
                </param>
                <return>
                    boolean - returns true if the given object is of type
                      HostIdentifier and its URI field is equal to this
                      object&apos;s URI field. Otherwise, returns false.                    
                </return>
                <see>
                    URI#equals(Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="402">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="403"/>
                <scope line="406"/>
            </method>
            <javadoc line="411">
                Convert to a string representation. Conversion is identical to
                  calling getURI().toString(). This may change in a future release.                
                <return>
                    String - a String representation of the HostIdentifier.                    
                </return>
                <see>
                    URI#toString()                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="417"/>
        </class>
    </source>