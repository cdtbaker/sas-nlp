<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.monitor">
        <import package="java.net"/>
        <class name="VmIdentifier" line="3">
            <javadoc line="3">
                An abstraction that identifies a target Java Virtual Machine.
                  The VmIdentifier, or vmid, provides a convenient string representation
                  of the information needed to locate and communicate with a target
                  Java Virtual Machine. The string, based on a {@link URI}, may specify
                  the communications protocol, host name, local vm identifier, and protocol
                  specific information for a target Java Virtual Machine. The format for
                  a VmIdentifier string is:
                  &lt;pre&gt;
                  [&lt;I&gt;protocol&lt;/I&gt;:][&lt;I&gt;//&lt;/I&gt;]&lt;I&gt;&lt;B&gt;lvmid&lt;/B&gt;&lt;/I&gt;[&lt;I&gt;@hostname&lt;/I&gt;][&lt;I&gt;:port&lt;/I&gt;][&lt;I&gt;/servername&lt;/I&gt;]
                  &lt;/pre&gt;
                  The only required component of this string is the Local Virtual Machine
                  Identifier, or &lt;tt&gt;lvmid&lt;/tt&gt;, which uniquely identifies the target
                  Java Virtual Machine on a host. The optional components of the VmIdentifier
                  include:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;protocol&lt;/tt&gt; - The communications protocol. A VmIdentifier
                  omitting the protocol must be resolved against a HostIdentifier
                  using {@link HostIdentifier#resolve}.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;hostname&lt;/tt&gt; - A hostname or IP address indicating the target
                  host. A VmIdentifier omitting the protocol must be resolved
                  against a HostIdentifier using {@link HostIdentifier#resolve}.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;port&lt;/tt&gt; - The port for the communications protocol.
                  Treatment of the &lt;tt&gt;port&lt;/tt&gt; parameter is implementation
                  (protocol) specific. A VmIdentifier omitting the protocol should
                  be resolved against a HostIdentifier using{@link HostIdentifier#resolve}.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;tt&gt;servername&lt;/tt&gt; - The treatment of the Path, Query, and
                  Fragment components of the VmIdentifier are implementation
                  (protocol) dependent. A VmIdentifier omitting the protocol should
                  be resolved against a HostIdentifier using{@link HostIdentifier#resolve}.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  All VmIdentifier instances are constructed as absolute, hierarchical URIs.
                  The constructors will accept relative (and even some malformed,
                  though convenient) URI strings. Such strings are transformed into
                  legitimate, absolute URI strings.
                  &lt;/p&gt;
                  &lt;p&gt;
                  With the exception of &lt;em&gt;file:&lt;/em&gt; based VmIdentifier strings, all
                  VmIdentifier strings must include a &lt;tt&gt;lvmid&lt;/tt&gt;. Attempting to construct
                  a non-file based VmIdentifier that doesn&apos;t include a &lt;tt&gt;lvmid&lt;/tt&gt;
                  component will result in a &lt;tt&gt;MonitorException&lt;/tt&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Here are some examples of VmIdentifier strings.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;Relative URIs&lt;/p&gt;&lt;/li&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;em&gt;1234&lt;/em&gt; - Specifies the Java Virtual Machine
                  identified by lvmid &lt;em&gt;1234&lt;/em&gt; on an unnamed host.
                  This string is transformed into the absolute form
                  &lt;em&gt;//1234&lt;/em&gt;, which must be resolved against a
                  HostIdentifier.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;em&gt;1234@hostname&lt;/em&gt; - Specifies the Java Virtual
                  Machine identified by lvmid &lt;em&gt;1234&lt;/em&gt; on host
                  &lt;em&gt;hostname&lt;/em&gt; with an unnamed protocol.
                  This string is transformed into the absolute form
                  &lt;em&gt;//1234@hostname&lt;/em&gt;, which must be resolved against
                  a HostIdentifier.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;em&gt;1234@hostname:2099&lt;/em&gt; - Specifies the Java Virtual
                  Machine identified by lvmid &lt;em&gt;1234&lt;/em&gt; on host
                  &lt;em&gt;hostname&lt;/em&gt; with an unnamed protocol, but with
                  port &lt;em&gt;2099&lt;/em&gt;. This string is transformed into
                  the absolute form &lt;em&gt;//1234@hostname:2099&lt;/em&gt;, which
                  must be resolved against a HostIdentifier.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;li&gt;&lt;p&gt;Absolute URIs&lt;/p&gt;&lt;/li&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;em&gt;rmi://1234@hostname:2099/remoteobjectname&lt;/em&gt; -
                  Specifies the Java Virtual Machine identified by lvmid
                  &lt;em&gt;1234&lt;/em&gt; on host &lt;em&gt;hostname&lt;/em&gt; accessed
                  using the &lt;em&gt;rmi:&lt;/em&gt; protocol through the rmi remote
                  object named &lt;em&gt;remoteobjectname&lt;/em&gt; as registered with
                  the &lt;em&gt;rmiserver&lt;/em&gt; on port &lt;em&gt;2099&lt;/em&gt; on host
                  &lt;em&gt;hostname&lt;/em&gt;.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt;&lt;em&gt;file:/path/file&lt;/em&gt; - Identifies a Java Virtual Machine
                  through accessing a special file based protocol to use as
                  the communications mechanism.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <see>
                    URI                    
                </see>
                <see>
                    HostIdentifier                    
                </see>
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="uri" type="URI" line="99"/>
            <javadoc line="100">
                creates a canonical representation of the uriString. This method
                  performs certain translations depending on the type of URI generated
                  by the string.                
            </javadoc>
            <method name="canonicalize" type="URI" line="105">
                <params>
                    <param name="uriString" type="String"/>
                </params>
                <scope line="106"/>
                <declaration name="u" type="URI" line="110"/>
                <scope line="111">
                    <scope line="112"/>
                </scope>
                <scope line="116">
                    <scope line="117">
                        <scope line="118"/>
                        <scope line="121"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="128">
                check that the VmIdentifier includes a unique numerical identifier
                  for the target JVM.                
            </javadoc>
            <method name="validate" type="void" line="132">
                <declaration name="s" type="String" line="133"/>
                <scope line="134"/>
                <scope line="137"/>
            </method>
            <javadoc line="141">
                Create a VmIdentifier instance from a string value.                
                <param>
                    uriString a string representing a target Java Virtual Machine.
                      The syntax of the string must conforms to the rules
                      specified in the class documentation.                    
                </param>
                <throws>
                    URISyntaxException Thrown when the uriString or its canonical
                      form is poorly formed.                    
                </throws>
            </javadoc>
            <method name="VmIdentifier" type="constructor" line="149">
                <params>
                    <param name="uriString" type="String"/>
                </params>
                <declaration name="u" type="URI" line="150"/>
                <scope line="151"/>
                <scope line="154">
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="163">
                Create a VmIdentifier instance from a URI object.                
                <param>
                    uri a well formed, absolute URI indicating the
                      target Java Virtual Machine.                    
                </param>
                <throws>
                    URISyntaxException Thrown if the URI is missing some
                      required component.                    
                </throws>
            </javadoc>
            <method name="VmIdentifier" type="constructor" line="170">
                <params>
                    <param name="uri" type="URI"/>
                </params>
            </method>
            <javadoc line="174">
                Return the corresponding HostIdentifier for this VmIdentifier.
                  &lt;p&gt;
                  This method constructs a HostIdentifier object from the VmIdentifier.
                  If the VmIdentifier is not specific about the protocol or other
                  components of the URI, then the resulting HostIdentifier will
                  be constructed based on this missing information. Typically, the
                  missing components will have result in the HostIdentifier assigning
                  assumed defaults that allow the VmIdentifier to be resolved according
                  to those defaults.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For example, a VmIdentifier that specifies only a &lt;tt&gt;lvmid&lt;/tt&gt;
                  will result in a HostIdentifier for &lt;em&gt;localhost&lt;/em&gt; utilizing
                  the default local protocol, &lt;em&gt;local:&lt;/em&gt;. A VmIdentifier that
                  specifies both a &lt;tt&gt;vmid&lt;/tt&gt; and a &lt;tt&gt;hostname&lt;/tt&gt; will result
                  in a HostIdentifier for the specified host with the default remote
                  protocol, &lt;em&gt;rmi:&lt;/em&gt;, using the protocol defaults for the
                  &lt;tt&gt;port&lt;/tt&gt; and &lt;tt&gt;servername&lt;/tt&gt; components.
                  &lt;/p&gt;                
                <return>
                    HostIdentifier - the host identifier for the host containing
                      the Java Virtual Machine represented by this
                      VmIdentifier.                    
                </return>
                <throws>
                    URISyntaxException Thrown if a bad host URI is constructed.
                      This exception may get encapsulated into
                      a MonitorException in a future version.                    
                </throws>
            </javadoc>
            <method name="getHostIdentifier" type="HostIdentifier" line="201">
                <declaration name="sb" type="StringBuffer" line="202"/>
                <scope line="203"/>
                <scope line="207"/>
                <scope line="210"/>
            </method>
            <javadoc line="215">
                Return the Scheme, or protocol, portion of this VmIdentifier.                
                <return>
                    String - the scheme for this VmIdentifier.                    
                </return>
                <see>
                    URI#getScheme()                    
                </see>
            </javadoc>
            <method name="getScheme" type="String" line="220"/>
            <javadoc line="223">
                Return the Scheme Specific Part of this VmIdentifier.                
                <return>
                    String - the Scheme Specific Part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getSchemeSpecificPart()                    
                </see>
            </javadoc>
            <method name="getSchemeSpecificPart" type="String" line="228"/>
            <javadoc line="231">
                Return the UserInfo part of this VmIdentifier.                
                <return>
                    String - the UserInfo part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getUserInfo()                    
                </see>
            </javadoc>
            <method name="getUserInfo" type="String" line="236"/>
            <javadoc line="239">
                Return the Host part of this VmIdentifier.                
                <return>
                    String - the Host part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getHost()                    
                </see>
            </javadoc>
            <method name="getHost" type="String" line="244"/>
            <javadoc line="247">
                Return the Port part of this VmIdentifier.                
                <return>
                    int - the Port part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getPort()                    
                </see>
            </javadoc>
            <method name="getPort" type="int" line="252"/>
            <javadoc line="255">
                Return the Authority part of this VmIdentifier.                
                <return>
                    String - the Authority part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getAuthority()                    
                </see>
            </javadoc>
            <method name="getAuthority" type="String" line="260"/>
            <javadoc line="263">
                Return the Path part of this VmIdentifier.                
                <return>
                    String - the Path part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getPath()                    
                </see>
            </javadoc>
            <method name="getPath" type="String" line="268"/>
            <javadoc line="271">
                Return the Query part of this VmIdentifier.                
                <return>
                    String - the Query part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getQuery()                    
                </see>
            </javadoc>
            <method name="getQuery" type="String" line="276"/>
            <javadoc line="279">
                Return the Fragment part of this VmIdentifier.                
                <return>
                    String - the Fragment part for this VmIdentifier.                    
                </return>
                <see>
                    URI#getFragment()                    
                </see>
            </javadoc>
            <method name="getFragment" type="String" line="284"/>
            <javadoc line="287">
                Return the Local Virtual Machine Identifier for this VmIdentifier.
                  The Local Virtual Machine Identifier is also known as the
                  &lt;em&gt;lvmid&lt;/em&gt;.                
                <return>
                    int - the lvmid for this VmIdentifier.                    
                </return>
            </javadoc>
            <method name="getLocalVmId" type="int" line="293">
                <declaration name="result" type="int" line="294"/>
                <scope line="295">
                    <scope line="296"/>
                    <scope line="299"/>
                </scope>
                <scope line="303"/>
            </method>
            <javadoc line="307">
                Return the mode indicated in this VmIdentifier.                
                <return>
                    String - the mode string. If no mode is specified, then &quot;r&quot;
                      is returned. otherwise, the specified mode is returned.                    
                </return>
            </javadoc>
            <method name="getMode" type="String" line="312">
                <declaration name="query" type="String" line="313"/>
                <scope line="314">
                    <declaration name="queryArgs" type="String[]" line="315"/>
                    <scope line="316">
                        <scope line="317">
                            <declaration name="index" type="int" line="318"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="325">
                Return the URI associated with the VmIdentifier.                
                <return>
                    URI - the URI.                    
                </return>
                <see>
                    URI                    
                </see>
            </javadoc>
            <method name="getURI" type="URI" line="330"/>
            <javadoc line="333">
                Return the hash code for this VmIdentifier. The hash code is
                  identical to the hash code for the contained URI.                
                <return>
                    int - the hashcode.                    
                </return>
                <see>
                    URI#hashCode()                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="339"/>
            <javadoc line="342">
                Test for quality with other objects.                
                <param>
                    object the object to be test for equality.                    
                </param>
                <return>
                    boolean - returns true if the given object is of type
                      VmIdentifier and its URI field is equal to
                      this object&apos;s URI field. Otherwise, return false.                    
                </return>
                <see>
                    URI#equals(Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="350">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="351"/>
                <scope line="354"/>
            </method>
            <javadoc line="359">
                Convert to a string representation. Conversion is identical to
                  calling getURI().toString(). This may change in a future release.                
                <return>
                    String - a String representation of the VmIdentifier.                    
                </return>
                <see>
                    URI#toString()                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="365"/>
        </class>
    </source>