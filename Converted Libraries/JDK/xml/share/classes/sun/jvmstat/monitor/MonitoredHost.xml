<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.monitor">
        <import package="java.util"/>
        <import package="java.net"/>
        <import package="java.lang.reflect"/>
        <import package="sun.jvmstat.monitor.event.HostListener"/>
        <class name="MonitoredHost" line="34">
            <comment line="55">
                The monitoring implementation override mechanism. The value of
                 this property is used as the class name for the concrete MonitoredHost
                 subclass that implements the monitoring APIs.  Setting this property
                 will cause the remaining override mechanisms to be ignored. When
                 this mechanism is used, the HostIdentifier scheme name, which
                 indicates the communications protocol, is not used to locate a
                 the protocol specific package. However, the HostIdentifier is
                 still passed to the corresponding single arg constructor.
                 This property is not expected to be set in normal circumstances.                
            </comment>
            <comment line="69">
                The monitoring package name override mechanism. The value
                 the this property is used as base package name for the
                 monitoring implementation package. This property is not
                 expected to be set under normal circumstances.                
            </comment>
            <comment line="80">
                The default optimized local protocol override mechanism. The value
                 of this property is used to construct the default package name
                 for the default optimized local protocol as follows:
                        &lt;IMPL_PACKAGE&gt;.monitor.&lt;LOCAL_PROTOCOL&gt;
                 This property is not expected to be set under normal circumstances.                
            </comment>
            <comment line="92">
                The default remote protocol override mechanism. The value of
                 this property is used to construct the default package name
                 for the default remote protocol protocol as follows:
                        &lt;IMPL_PACKAGE&gt;.monitor.protocol.&lt;REMOTE_PROTOCOL&gt;
                 This property is not expected to be set under normal circumstances.                
            </comment>
            <comment line="104">
                The default class name of the MonitoredHost implementation subclass.
                 There is no override mechanism for this variable, other than the
                 IMPL_OVERRIDE_PROP_NAME override, which is larger in scope. A concrete
                 instance of this class is expected to be found in:
                     &lt;IMPL_PACKAGE&gt;.monitor.protocol.&lt;protocol&gt;.&lt;MONITORED_HOST_CLASS&gt;                
            </comment>
            <comment line="299">
                                
            </comment>
            <javadoc line="34">
                An abstraction for a host that contains instrumented Java Virtual
                  Machines. The class provides abstract factory methods for creating
                  concrete instances of this class and factory methods for creating{@link MonitoredVm} instances. Concrete implementations of this class
                  provide methods for managing the communications protocols and provide
                  for event notification.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    HostIdentifier                    
                </see>
                <see>
                    VmIdentifier                    
                </see>
                <see>
                    MonitoredVm                    
                </see>
                <see>
                    HostListener                    
                </see>
            </javadoc>
            <declaration name="monitoredHosts" type="Map&lt;HostIdentifier,MonitoredHost&gt;" line="51"/>
            <declaration name="IMPL_OVERRIDE_PROP_NAME" type="String" line="65"/>
            <declaration name="IMPL_PKG_PROP_NAME" type="String" line="74"/>
            <declaration name="IMPL_PACKAGE" type="String" line="76"/>
            <declaration name="LOCAL_PROTOCOL_PROP_NAME" type="String" line="86"/>
            <declaration name="LOCAL_PROTOCOL" type="String" line="88"/>
            <declaration name="REMOTE_PROTOCOL_PROP_NAME" type="String" line="98"/>
            <declaration name="REMOTE_PROTOCOL" type="String" line="100"/>
            <declaration name="MONITORED_HOST_CLASS" type="String" line="110"/>
            <declaration name="hostId" type="HostIdentifier" line="112"/>
            <javadoc line="112">
                The HostIdentifier for this MonitoredHost instance.                
            </javadoc>
            <declaration name="interval" type="int" line="117"/>
            <javadoc line="117">
                The polling interval, in milliseconds, for this MonitoredHost instance.                
            </javadoc>
            <declaration name="lastException" type="Exception" line="122"/>
            <javadoc line="122">
                The last Exception encountered while polling this MonitoredHost.                
            </javadoc>
            <javadoc line="127">
                Factory method to construct MonitoredHost instances to manage
                  connections to the host indicated by &lt;tt&gt;hostIdString&lt;/tt&gt;                
                <param>
                    hostIdString a String representation of a {@link HostIdentifier}                    
                </param>
                <return>
                    MonitoredHost - the MonitoredHost instance for communicating
                      with the indicated host using the protocol
                      specified in hostIdString.                    
                </return>
                <throws>
                    MonitorException  Thrown if monitoring errors occur.                    
                </throws>
                <throws>
                    URISyntaxException Thrown when the hostIdString is poorly
                      formed. This exception may get encapsulated
                      into MonitorException in a future revision.                    
                </throws>
            </javadoc>
            <method name="getMonitoredHost" type="MonitoredHost" line="141">
                <params>
                    <param name="hostIdString" type="String"/>
                </params>
                <declaration name="hostId" type="HostIdentifier" line="142"/>
            </method>
            <javadoc line="146">
                Factory method to construct a MonitoredHost instance to manage the
                  connection to the Java Virtual Machine indicated by &lt;tt&gt;vmid&lt;/tt&gt;.
                  This method provide a convenient short cut for attaching to a specific
                  instrumented Java Virtual Machine. The information in the VmIdentifier
                  is used to construct a corresponding HostIdentifier, which in turn is
                  used to create the MonitoredHost instance.                
                <param>
                    vmid The identifier for the target Java Virtual Machine.                    
                </param>
                <return>
                    MonitoredHost - The MonitoredHost object needed to attach to
                      the target Java Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="getMonitoredHost" type="MonitoredHost" line="162">
                <params>
                    <param name="vmid" type="VmIdentifier"/>
                </params>
                <comment line="164">
                    use the VmIdentifier to construct the corresponding HostIdentifier                    
                </comment>
                <declaration name="hostId" type="HostIdentifier" line="164"/>
            </method>
            <javadoc line="168">
                Factory method to construct a MonitoredHost instance to manage the
                  connection to the host indicated by &lt;tt&gt;hostId&lt;/tt&gt;.                
                <param>
                    hostId the identifier for the target host.                    
                </param>
                <return>
                    MonitoredHost - The MonitoredHost object needed to attach to
                      the target host.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="getMonitoredHost" type="MonitoredHost" line="179">
                <params>
                    <param name="hostId" type="HostIdentifier"/>
                </params>
                <comment line="181">
                    determine the class name to load. If the system property is set,
                     use the indicated class. otherwise, use the default class.                    
                </comment>
                <comment line="202">
                    construct the class name                    
                </comment>
                <comment line="208">
                    run the constructor taking a single String parameter.                    
                </comment>
                <comment line="222">
                    from Class.forName();                    
                </comment>
                <comment line="226">
                    from Class.getConstructor();                    
                </comment>
                <comment line="231">
                    from Constructor.newInstance()                    
                </comment>
                <declaration name="classname" type="String" line="184"/>
                <declaration name="mh" type="MonitoredHost" line="185"/>
                <scope line="187">
                    <scope line="189">
                        <scope line="190"/>
                        <scope line="192"/>
                    </scope>
                </scope>
                <scope line="200"/>
                <scope line="206">
                    <declaration name="c" type="Class&lt;?&gt;" line="208"/>
                    <declaration name="cons" type="Constructor" line="210"/>
                    <scope line="216"/>
                </scope>
                <scope line="220"/>
                <scope line="224"/>
                <scope line="229"/>
                <scope line="234"/>
                <scope line="237">
                    <declaration name="cause" type="Throwable" line="238"/>
                    <scope line="239"/>
                </scope>
            </method>
            <javadoc line="246">
                Method to resolve unspecified components of the given HostIdentifier
                  by constructing a new HostIdentifier that replaces the unspecified
                  components with the default values.                
                <param>
                    hostId the unresolved HostIdentifier.                    
                </param>
                <return>
                    HostIdentifier - a resolved HostIdentifier.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="resolveHostId" type="HostIdentifier" line="257">
                <params>
                    <param name="hostId" type="HostIdentifier"/>
                </params>
                <comment line="283">
                    programming error - HostIdentifier was valid.                    
                </comment>
                <declaration name="hostname" type="String" line="258"/>
                <declaration name="scheme" type="String" line="259"/>
                <declaration name="sb" type="StringBuffer" line="260"/>
                <scope line="264">
                    <scope line="265"/>
                    <scope line="267"/>
                </scope>
                <declaration name="frag" type="String" line="274"/>
                <scope line="275"/>
                <scope line="279"/>
                <scope line="281"/>
            </method>
            <javadoc line="289">
                Return the resolved HostIdentifier for this MonitoredHost.                
                <return>
                    HostIdentifier - the resolved HostIdentifier.                    
                </return>
            </javadoc>
            <method name="getHostIdentifier" type="HostIdentifier" line="294"/>
            <javadoc line="300">
                Set the polling interval for this MonitoredHost.                
                <param>
                    interval the polling interval, in milliseconds                    
                </param>
            </javadoc>
            <method name="setInterval" type="void" line="305">
                <params>
                    <param name="interval" type="int"/>
                </params>
            </method>
            <javadoc line="309">
                Get the polling interval.                
                <return>
                    int - the polling interval in milliseconds for this MonitoredHost                    
                </return>
            </javadoc>
            <method name="getInterval" type="int" line="314"/>
            <javadoc line="318">
                Set the last exception encountered while polling this MonitoredHost.                
                <param>
                    lastException the last exception encountered;                    
                </param>
            </javadoc>
            <method name="setLastException" type="void" line="323">
                <params>
                    <param name="lastException" type="Exception"/>
                </params>
            </method>
            <javadoc line="327">
                Get the last exception encountered while polling this MonitoredHost.                
                <return>
                    Exception - the last exception occurred while polling this
                      MonitoredHost, or <tt>null</tt> if no exception
                      has occurred or the exception has been cleared,                    
                </return>
            </javadoc>
            <method name="getLastException" type="Exception" line="334"/>
            <javadoc line="338">
                Clear the last exception.                
            </javadoc>
            <method name="clearLastException" type="void" line="341"/>
            <javadoc line="345">
                Test if this MonitoredHost is in the errored state. If this method
                  returns true, then the Exception returned by getLastException()
                  indicates the Exception that caused the error condition.                
                <return>
                    boolean - true if the MonitoredHost instance has experienced
                      an error, or false if it hasn't or if any past
                      error has been cleared.                    
                </return>
            </javadoc>
            <method name="isErrored" type="boolean" line="354"/>
            <method name="getMonitoredVm" type="MonitoredVm" line="358"/>
            <javadoc line="358">
                Get the MonitoredVm for the given Java Virtual Machine. The default
                  sampling interval is used for the MonitoredVm instance.                
                <param>
                    id the VmIdentifier specifying the target Java Virtual Machine.                    
                </param>
                <return>
                    MonitoredVm - the MonitoredVm instance for the target Java
                      Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="getMonitoredVm" type="MonitoredVm" line="370"/>
            <javadoc line="370">
                Get the MonitoredVm for the given Java Virtual Machine. The sampling
                  interval is set to the given interval.                
                <param>
                    id the VmIdentifier specifying the target Java Virtual Machine.                    
                </param>
                <param>
                    interval the sampling interval for the target Java Virtual Machine.                    
                </param>
                <return>
                    MonitoredVm - the MonitoredVm instance for the target Java
                      Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="detach" type="void" line="383"/>
            <javadoc line="383">
                Detach from the indicated MonitoredVm.                
                <param>
                    vm the monitored Java Virtual Machine.                    
                </param>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="addHostListener" type="void" line="391"/>
            <javadoc line="391">
                Add a HostListener. The given listener is added to the list
                  of HostListener objects to be notified of MonitoredHost related events.                
                <param>
                    listener the HostListener to add.                    
                </param>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="removeHostListener" type="void" line="401"/>
            <javadoc line="401">
                Remove a HostListener. The given listener is removed from the list
                  of HostListener objects to be notified of MonitoredHost related events.                
                <param>
                    listener the HostListener to add.                    
                </param>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="activeVms" type="Set<Integer>" line="411"/>
            <javadoc line="411">
                Return the current set of active Java Virtual Machines for this
                  MonitoredHost. The returned Set contains {@link Integer} instances
                  holding the local virtual machine identifier, or &lt;em&gt;lvmid&lt;/em&gt;
                  for each instrumented Java Virtual Machine currently available.                
                <return>
                    Set - the current set of active Java Virtual Machines associated
                      with this MonitoredHost, or the empty set of none.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
        </class>
    </source>