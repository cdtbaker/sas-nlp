<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.monitor">
        <import package="java.util"/>
        <import package="java.net"/>
        <import package="java.lang.reflect"/>
        <import package="sun.jvmstat.monitor.event.HostListener"/>
        <class name="MonitoredHost" line="6">
            <javadoc line="6">
                An abstraction for a host that contains instrumented Java Virtual
                  Machines. The class provides abstract factory methods for creating
                  concrete instances of this class and factory methods for creating{@link MonitoredVm} instances. Concrete implementations of this class
                  provide methods for managing the communications protocols and provide
                  for event notification.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    HostIdentifier                    
                </see>
                <see>
                    VmIdentifier                    
                </see>
                <see>
                    MonitoredVm                    
                </see>
                <see>
                    HostListener                    
                </see>
            </javadoc>
            <declaration name="monitoredHosts" type="Map&amp;lt;HostIdentifier,MonitoredHost&amp;gt;" line="20"/>
            <declaration name="IMPL_OVERRIDE_PROP_NAME" type="String" line="21"/>
            <declaration name="IMPL_PKG_PROP_NAME" type="String" line="22"/>
            <declaration name="IMPL_PACKAGE" type="String" line="23"/>
            <declaration name="LOCAL_PROTOCOL_PROP_NAME" type="String" line="24"/>
            <declaration name="LOCAL_PROTOCOL" type="String" line="25"/>
            <declaration name="REMOTE_PROTOCOL_PROP_NAME" type="String" line="26"/>
            <declaration name="REMOTE_PROTOCOL" type="String" line="27"/>
            <declaration name="MONITORED_HOST_CLASS" type="String" line="28"/>
            <declaration name="hostId" type="HostIdentifier" line="29"/>
            <javadoc line="29">
                The HostIdentifier for this MonitoredHost instance.                
            </javadoc>
            <declaration name="interval" type="int" line="33"/>
            <javadoc line="33">
                The polling interval, in milliseconds, for this MonitoredHost instance.                
            </javadoc>
            <declaration name="lastException" type="Exception" line="37"/>
            <javadoc line="37">
                The last Exception encountered while polling this MonitoredHost.                
            </javadoc>
            <javadoc line="41">
                Factory method to construct MonitoredHost instances to manage
                  connections to the host indicated by &lt;tt&gt;hostIdString&lt;/tt&gt;                
                <param>
                    hostIdString a String representation of a {@link HostIdentifier}                    
                </param>
                <return>
                    MonitoredHost - the MonitoredHost instance for communicating
                      with the indicated host using the protocol
                      specified in hostIdString.                    
                </return>
                <throws>
                    MonitorException  Thrown if monitoring errors occur.                    
                </throws>
                <throws>
                    URISyntaxException Thrown when the hostIdString is poorly
                      formed. This exception may get encapsulated
                      into MonitorException in a future revision.                    
                </throws>
            </javadoc>
            <method name="getMonitoredHost" type="MonitoredHost" line="53">
                <params>
                    <param name="hostIdString" type="String"/>
                </params>
                <declaration name="hostId" type="HostIdentifier" line="54"/>
            </method>
            <javadoc line="57">
                Factory method to construct a MonitoredHost instance to manage the
                  connection to the Java Virtual Machine indicated by &lt;tt&gt;vmid&lt;/tt&gt;.
                  This method provide a convenient short cut for attaching to a specific
                  instrumented Java Virtual Machine. The information in the VmIdentifier
                  is used to construct a corresponding HostIdentifier, which in turn is
                  used to create the MonitoredHost instance.                
                <param>
                    vmid The identifier for the target Java Virtual Machine.                    
                </param>
                <return>
                    MonitoredHost - The MonitoredHost object needed to attach to
                      the target Java Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="getMonitoredHost" type="MonitoredHost" line="69">
                <params>
                    <param name="vmid" type="VmIdentifier"/>
                </params>
                <declaration name="hostId" type="HostIdentifier" line="70"/>
            </method>
            <javadoc line="73">
                Factory method to construct a MonitoredHost instance to manage the
                  connection to the host indicated by &lt;tt&gt;hostId&lt;/tt&gt;.                
                <param>
                    hostId the identifier for the target host.                    
                </param>
                <return>
                    MonitoredHost - The MonitoredHost object needed to attach to
                      the target host.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="getMonitoredHost" type="MonitoredHost" line="81">
                <params>
                    <param name="hostId" type="HostIdentifier"/>
                </params>
                <declaration name="classname" type="String" line="82"/>
                <declaration name="mh" type="MonitoredHost" line="83"/>
                <scope line="84">
                    <scope line="86">
                        <scope line="87"/>
                        <scope line="90"/>
                    </scope>
                </scope>
                <scope line="96"/>
                <scope line="99">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="100"/>
                    <declaration name="cons" type="Constructor" line="101"/>
                    <scope line="103"/>
                </scope>
                <scope line="108"/>
                <scope line="111"/>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="120">
                    <declaration name="cause" type="Throwable" line="121"/>
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="128">
                Method to resolve unspecified components of the given HostIdentifier
                  by constructing a new HostIdentifier that replaces the unspecified
                  components with the default values.                
                <param>
                    hostId the unresolved HostIdentifier.                    
                </param>
                <return>
                    HostIdentifier - a resolved HostIdentifier.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="resolveHostId" type="HostIdentifier" line="136">
                <params>
                    <param name="hostId" type="HostIdentifier"/>
                </params>
            </method>
            <javadoc line="162">
                Return the resolved HostIdentifier for this MonitoredHost.                
                <return>
                    HostIdentifier - the resolved HostIdentifier.                    
                </return>
            </javadoc>
            <method name="getHostIdentifier" type="HostIdentifier" line="166"/>
            <javadoc line="169">
                Set the polling interval for this MonitoredHost.                
                <param>
                    interval the polling interval, in milliseconds                    
                </param>
            </javadoc>
            <method name="setInterval" type="void" line="173">
                <params>
                    <param name="interval" type="int"/>
                </params>
            </method>
            <javadoc line="176">
                Get the polling interval.                
                <return>
                    int - the polling interval in milliseconds for this MonitoredHost                    
                </return>
            </javadoc>
            <method name="getInterval" type="int" line="180"/>
            <javadoc line="183">
                Set the last exception encountered while polling this MonitoredHost.                
                <param>
                    lastException the last exception encountered;                    
                </param>
            </javadoc>
            <method name="setLastException" type="void" line="187">
                <params>
                    <param name="lastException" type="Exception"/>
                </params>
            </method>
            <javadoc line="190">
                Get the last exception encountered while polling this MonitoredHost.                
                <return>
                    Exception - the last exception occurred while polling this
                      MonitoredHost, or &lt;tt&gt;null&lt;/tt&gt; if no exception
                      has occurred or the exception has been cleared,                    
                </return>
            </javadoc>
            <method name="getLastException" type="Exception" line="196"/>
            <javadoc line="199">
                Clear the last exception.                
            </javadoc>
            <method name="clearLastException" type="void" line="202"/>
            <javadoc line="205">
                Test if this MonitoredHost is in the errored state. If this method
                  returns true, then the Exception returned by getLastException()
                  indicates the Exception that caused the error condition.                
                <return>
                    boolean - true if the MonitoredHost instance has experienced
                      an error, or false if it hasn&apos;t or if any past
                      error has been cleared.                    
                </return>
            </javadoc>
            <method name="isErrored" type="boolean" line="213"/>
            <method name="getMonitoredVm" type="MonitoredVm" line="216"/>
            <javadoc line="216">
                Get the MonitoredVm for the given Java Virtual Machine. The default
                  sampling interval is used for the MonitoredVm instance.                
                <param>
                    id the VmIdentifier specifying the target Java Virtual Machine.                    
                </param>
                <return>
                    MonitoredVm - the MonitoredVm instance for the target Java
                      Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="getMonitoredVm" type="MonitoredVm" line="225"/>
            <javadoc line="225">
                Get the MonitoredVm for the given Java Virtual Machine. The sampling
                  interval is set to the given interval.                
                <param>
                    id the VmIdentifier specifying the target Java Virtual Machine.                    
                </param>
                <param>
                    interval the sampling interval for the target Java Virtual Machine.                    
                </param>
                <return>
                    MonitoredVm - the MonitoredVm instance for the target Java
                      Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="detach" type="void" line="235"/>
            <javadoc line="235">
                Detach from the indicated MonitoredVm.                
                <param>
                    vm the monitored Java Virtual Machine.                    
                </param>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="addHostListener" type="void" line="241"/>
            <javadoc line="241">
                Add a HostListener. The given listener is added to the list
                  of HostListener objects to be notified of MonitoredHost related events.                
                <param>
                    listener the HostListener to add.                    
                </param>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="removeHostListener" type="void" line="248"/>
            <javadoc line="248">
                Remove a HostListener. The given listener is removed from the list
                  of HostListener objects to be notified of MonitoredHost related events.                
                <param>
                    listener the HostListener to add.                    
                </param>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
            <method name="activeVms" type="Set&lt;Integer&gt;" line="255"/>
            <javadoc line="255">
                Return the current set of active Java Virtual Machines for this
                  MonitoredHost. The returned Set contains {@link Integer} instances
                  holding the local virtual machine identifier, or &lt;em&gt;lvmid&lt;/em&gt;
                  for each instrumented Java Virtual Machine currently available.                
                <return>
                    Set - the current set of active Java Virtual Machines associated
                      with this MonitoredHost, or the empty set of none.                    
                </return>
                <throws>
                    MonitorException Thrown if monitoring errors occur.                    
                </throws>
            </javadoc>
        </class>
    </source>