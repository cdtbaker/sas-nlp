<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.monitor">
        <import package="java.util.List"/>
        <import package="sun.jvmstat.monitor.event.VmListener"/>
        <interface name="MonitoredVm">
            <comment line="99">
                                
            </comment>
            <javadoc line="32">
                Interface for interacting with a monitorable Java Virtual Machine.
                  The MonitoredVm interface provides methods for discovery of exported
                  instrumentation, for attaching event listeners, and for overall
                  maintenance of the connection to the target.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getVmIdentifier" type="VmIdentifier" line="43"/>
            <javadoc line="43">
                Get the VmIdentifier associated with this MonitoredVm                
                <return>
                    VmIdentifier - the fully resolved Vm identifier associated
                      with this MonitoredVm.                    
                </return>
            </javadoc>
            <method name="findByName" type="Monitor" line="51"/>
            <javadoc line="51">
                Find a named Instrumentation object.
                  This method will look for the named instrumentation object in the
                  instrumentation exported by this Java Virtual Machine. If an
                  instrumentation object with the given name exists, a Monitor interface
                  to that object will be return. Otherwise, the method returns
                  &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    name the name of the Instrumentation object to find.                    
                </param>
                <return>
                    Monitor - the {@link Monitor} object that can be used to
                      monitor the the named instrumentation object, or
                      &lt;tt&gt;null&lt;/tt&gt; if the named object doesn&apos;t exist.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
            </javadoc>
            <method name="findByPattern" type="List<Monitor>" line="69"/>
            <javadoc line="69">
                Find all Instrumentation objects with names matching the given pattern.
                  This method returns a {@link List} of Monitor objects such that
                  the name of each object matches the given pattern.                
                <param>
                    patternString a string containing a pattern as described in{@link java.util.regex.Pattern}.                    
                </param>
                <return>
                    List&lt;Monitor&gt; - a List of {@link Monitor} objects that can be used to
                      monitor the instrumentation objects whose names match
                      the given pattern. If no instrumentation objects have`
                      names matching the given pattern, then an empty List
                      is returned.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
            </javadoc>
            <method name="detach" type="void" line="88"/>
            <javadoc line="88">
                Detach from target Java Virtual Machine.
                  After calling this method, updates of the instrumentation data values
                  may be halted. All event notifications are halted. Further interactions
                  with this object should be avoided.                
            </javadoc>
            <method name="setInterval" type="void" line="100"/>
            <javadoc line="100">
                Set the polling interval to &lt;code&gt;interval&lt;/code&gt; milliseconds.
                  Polling based monitoring implementations need to refresh the
                  instrumentation data on a periodic basis. This interface allows
                  the interval to override the implementation specific default
                  interval.                
                <param>
                    interval the polling interval in milliseconds                    
                </param>
            </javadoc>
            <method name="getInterval" type="int" line="112"/>
            <javadoc line="112">
                Get the polling interval.                
                <return>
                    int - the current polling interval in milliseconds.                    
                </return>
                <see>
                    #setInterval                    
                </see>
            </javadoc>
            <method name="setLastException" type="void" line="120"/>
            <javadoc line="120">
                Set the last exception encountered while polling this MonitoredVm.
                  Polling implementations may choose to poll asynchronously. This
                  method allows an asynchronous task to communicate any polling related
                  exceptions with the application. When an a non-null exception is reported
                  through this interface, the MonitoredVm instance is considered to
                  be in the &lt;em&gt;errored&lt;/em&gt; state.                
                <param>
                    cause the exception to record.                    
                </param>
                <see>
                    #isErrored                    
                </see>
            </javadoc>
            <method name="getLastException" type="Exception" line="134"/>
            <javadoc line="134">
                Get the last exception encountered while polling this MonitoredVm.
                  Returns the last exception observed by the implementation dependent
                  polling task or &lt;tt&gt;null&lt;/tt&gt; if no such error has occurred.                
                <return>
                    Exception - the last exception that occurred during polling
                      or &lt;tt&gt;null&lt;/tt&gt; if no error condition exists.                    
                </return>
                <see>
                    #isErrored                    
                </see>
                <see>
                    #setLastException                    
                </see>
            </javadoc>
            <method name="clearLastException" type="void" line="147"/>
            <javadoc line="147">
                Clear the last exception.
                  Calling this method will clear the &lt;em&gt;errored&lt;/em&gt; state of this
                  MonitoredVm. However, there is no guarantee that clearing the
                  the errored state return the asynchronous polling task to an
                  operational state.                
            </javadoc>
            <method name="isErrored" type="boolean" line="158"/>
            <javadoc line="158">
                Test if this MonitoredVm is in the errored state.
                  The errored state exists only if an error was reported with
                  call to {@link #setLastException} and only if the parameter to
                  that call was non-null and no subsequent calls are made to{@link #clearLastException}.                
                <return>
                    boolean - true if the instance has a non-null error condition
                      set, false otherwise.                    
                </return>
                <see>
                    #setLastException                    
                </see>
                <see>
                    #getLastException                    
                </see>
            </javadoc>
            <method name="addVmListener" type="void" line="173"/>
            <javadoc line="173">
                Add a VmListener. The given listener is added to the list of
                  VmListener objects to be notified of MonitoredVm related events.                
                <param>
                    listener the VmListener to add.                    
                </param>
                <throws>
                    MonitorException Thrown if any problems occur while attempting
                      to add this listener.                    
                </throws>
            </javadoc>
            <method name="removeVmListener" type="void" line="183"/>
            <javadoc line="183">
                Remove a VmListener. The given listener is removed from the list of
                  VmListener objects to be notified of MonitoredVm related events.                
                <param>
                    listener the VmListener to be removed.                    
                </param>
                <throws>
                    MonitorException Thrown if any problems occur while attempting
                      to remove this listener.                    
                </throws>
            </javadoc>
        </interface>
    </source>