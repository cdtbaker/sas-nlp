<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor">
        <import package="java.util.List"/>
        <import package="java.lang.reflect"/>
        <import package="java.io"/>
        <import package="sun.jvmstat.monitor"/>
        <import package="sun.jvmstat.monitor.remote"/>
        <import package="sun.jvmstat.monitor.event.VmListener"/>
        <class name="AbstractMonitoredVm" line="36">
            <comment line="107">
                                
            </comment>
            <comment line="166">
                                
            </comment>
            <comment line="179">
                                
            </comment>
            <implements interface="BufferedMonitoredVm"/>
            <javadoc line="36">
                Base class for all MonitoredVm implementations that utilize the
                  HotSpot PerfData instrumentation buffer as the communications
                  mechanism to the target Java Virtual Machine.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="vmid" type="VmIdentifier" line="46"/>
            <javadoc line="46">
                The VmIdentifier for the target.                
            </javadoc>
            <declaration name="pdb" type="AbstractPerfDataBuffer" line="51"/>
            <javadoc line="51">
                The shared memory instrumentation buffer for the target.                
            </javadoc>
            <declaration name="interval" type="int" line="56"/>
            <javadoc line="56">
                The sampling interval, if the instrumentation buffer is acquired
                  by sampling instead of shared memory mechanisms.                
            </javadoc>
            <javadoc line="62">
                Create an AbstractMonitoredVm instance.                
                <param>
                    vmid the VmIdentifier for the target                    
                </param>
                <param>
                    interval the initial sampling interval                    
                </param>
            </javadoc>
            <method name="AbstractMonitoredVm" type="constructor" line="69">
                <params>
                    <param name="vmid" type="VmIdentifier"/>
                    <param name="interval" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="getVmIdentifier" type="VmIdentifier" line="77"/>
            <javadoc line="81">
                {@inheritDoc}                
            </javadoc>
            <method name="findByName" type="Monitor" line="84">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="88">
                {@inheritDoc}                
            </javadoc>
            <method name="findByPattern" type="List<Monitor>" line="91">
                <params>
                    <param name="patternString" type="String"/>
                </params>
            </method>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="detach" type="void" line="98">
                <comment line="99">
                    no default action required because the detach operation for the
                     native byte buffer is managed by the sun.misc.Perf class.                    
                </comment>
            </method>
            <javadoc line="108">
                {@inheritDoc}                
            </javadoc>
            <method name="setInterval" type="void" line="111">
                <params>
                    <param name="interval" type="int"/>
                </params>
            </method>
            <javadoc line="115">
                {@inheritDoc}                
            </javadoc>
            <method name="getInterval" type="int" line="118"/>
            <javadoc line="122">
                {@inheritDoc}                
            </javadoc>
            <method name="setLastException" type="void" line="125">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <comment line="126">
                    XXX: implement                    
                </comment>
            </method>
            <javadoc line="129">
                {@inheritDoc}                
            </javadoc>
            <method name="getLastException" type="Exception" line="132">
                <comment line="133">
                    XXX: implement                    
                </comment>
            </method>
            <javadoc line="137">
                {@inheritDoc}                
            </javadoc>
            <method name="clearLastException" type="void" line="140">
                <comment line="141">
                    XXX: implement                    
                </comment>
            </method>
            <javadoc line="144">
                {@inheritDoc}                
            </javadoc>
            <method name="isErrored" type="boolean" line="147">
                <comment line="148">
                    XXX: implement                    
                </comment>
            </method>
            <javadoc line="152">
                Get a list of the inserted and removed monitors since last called.                
                <return>
                    MonitorStatus - the status of available Monitors for the
                      target Java Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="getMonitorStatus" type="MonitorStatus" line="160"/>
            <method name="addVmListener" type="void" line="167"/>
            <javadoc line="167">
                {@inheritDoc}                
            </javadoc>
            <method name="removeVmListener" type="void" line="172"/>
            <javadoc line="172">
                {@inheritDoc}                
            </javadoc>
            <javadoc line="180">
                {@inheritDoc}                
            </javadoc>
            <method name="getBytes" type="byte[]" line="183"/>
            <javadoc line="187">
                {@inheritDoc}                
            </javadoc>
            <method name="getCapacity" type="int" line="190"/>
        </class>
    </source>