<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor.v1_0">
        <import package="sun.jvmstat.monitor"/>
        <import package="sun.jvmstat.perfdata.monitor"/>
        <import package="java.nio"/>
        <class name="PerfDataBufferPrologue" line="5">
            <extends class="AbstractPerfDataBufferPrologue"/>
            <javadoc line="5">
                Class representing the 1.0 version of the HotSpot PerfData instrumentation
                  buffer header.
                  &lt;p&gt;
                  The PerfDataBufferPrologue2_0 class supports parsing of the version
                  specific portions of the PerfDataPrologue C structure:
                  &lt;pre&gt;
                  typedef struct {
                  ...                      // handled by superclass
                  jint used;               // number of PerfData memory bytes used
                  jint overflow;           // number of bytes of overflow
                  jlong mod_time_stamp;    // time stamp of the last structural modification
                  } PerfDataPrologue
                  &lt;/pre&gt;                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="SUPPORTED_MAJOR_VERSION" type="int" line="23"/>
            <declaration name="SUPPORTED_MINOR_VERSION" type="int" line="24"/>
            <declaration name="PERFDATA_PROLOG_USED_OFFSET" type="int" line="25"/>
            <declaration name="PERFDATA_PROLOG_USED_SIZE" type="int" line="26"/>
            <declaration name="PERFDATA_PROLOG_OVERFLOW_OFFSET" type="int" line="27"/>
            <declaration name="PERFDATA_PROLOG_OVERFLOW_SIZE" type="int" line="28"/>
            <declaration name="PERFDATA_PROLOG_MODTIMESTAMP_OFFSET" type="int" line="29"/>
            <declaration name="PERFDATA_PROLOG_MODTIMESTAMP_SIZE" type="int" line="30"/>
            <declaration name="PERFDATA_PROLOG_SIZE" type="int" line="31"/>
            <declaration name="PERFDATA_BUFFER_SIZE_NAME" type="String" line="32"/>
            <declaration name="PERFDATA_BUFFER_USED_NAME" type="String" line="33"/>
            <declaration name="PERFDATA_OVERFLOW_NAME" type="String" line="34"/>
            <declaration name="PERFDATA_MODTIMESTAMP_NAME" type="String" line="35"/>
            <javadoc line="36">
                Create an instance of PerfDataBufferPrologue from the given
                  ByteBuffer object.                
                <param>
                    byteBuffer the buffer containing the binary header data                    
                </param>
            </javadoc>
            <method name="PerfDataBufferPrologue" type="constructor" line="41">
                <params>
                    <param name="byteBuffer" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="45">
                {@inheritDoc}                
            </javadoc>
            <method name="supportsAccessible" type="boolean" line="48"/>
            <javadoc line="51">
                {@inheritDoc}                
            </javadoc>
            <method name="isAccessible" type="boolean" line="54"/>
            <javadoc line="57">
                Get the utilization of the instrumentation memory buffer.                
                <return>
                    int - the utilization of the buffer                    
                </return>
            </javadoc>
            <method name="getUsed" type="int" line="61"/>
            <javadoc line="65">
                Get the size of the instrumentation memory buffer.                
                <return>
                    int - the size of the buffer                    
                </return>
            </javadoc>
            <method name="getBufferSize" type="int" line="69"/>
            <javadoc line="72">
                Get the buffer overflow amount. This value is non-zero if the
                  HotSpot JVM has overflowed the instrumentation memory buffer.
                  The target JVM can be restarted with -XX:PerfDataMemSize=X to
                  create a larger memory buffer.                
                <return>
                    int - the size of the buffer                    
                </return>
            </javadoc>
            <method name="getOverflow" type="int" line="79"/>
            <javadoc line="83">
                Get the time of last modification for the instrumentation
                  memory buffer. This method returns the time, as ticks since the
                  start of the target JVM, of the last structural modification to
                  the instrumentation buffer. Structural modifications correspond to
                  the addition or deletion of instrumentation objects. Updates to
                  counter values are not structural modifications.                
            </javadoc>
            <method name="getModificationTimeStamp" type="long" line="91"/>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="getSize" type="int" line="98"/>
            <javadoc line="101">
                Return an IntBuffer that accesses the used value. This is used
                  to create a Monitor object for this value.                
                <return>
                    IntBuffer - a ByteBuffer that accesses the used value
                      in the instrumentation buffer header.                    
                </return>
                <see>
                    #getUsed()                    
                </see>
            </javadoc>
            <method name="usedBuffer" type="IntBuffer" line="108">
                <declaration name="ib" type="IntBuffer" line="110"/>
            </method>
            <javadoc line="114">
                Return an IntBuffer that accesses the size value. This is used
                  to create a Monitor object for this value.                
                <return>
                    IntBuffer - a ByteBuffer that accesses the size value
                      in the instrumentation buffer header.                    
                </return>
                <see>
                    #getBufferSize()                    
                </see>
            </javadoc>
            <method name="sizeBuffer" type="IntBuffer" line="121">
                <declaration name="ib" type="IntBuffer" line="122"/>
            </method>
            <javadoc line="126">
                Return an IntBuffer that accesses the overflow value. This is used
                  to create a Monitor object for this value.                
                <return>
                    IntBuffer - a ByteBuffer that accesses the overflow value
                      in the instrumentation buffer header.                    
                </return>
                <see>
                    #getOverflow()                    
                </see>
            </javadoc>
            <method name="overflowBuffer" type="IntBuffer" line="133">
                <declaration name="ib" type="IntBuffer" line="135"/>
            </method>
            <javadoc line="139">
                Return an LongBuffer that accesses the modification timestamp value.
                  This is used to create a Monitor object for this value.                
                <return>
                    LongBuffer - a ByteBuffer that accesses the modification time
                      stamp value in the instrumentation buffer header.                    
                </return>
                <see>
                    #getModificationTimeStamp()                    
                </see>
            </javadoc>
            <method name="modificationTimeStampBuffer" type="LongBuffer" line="146">
                <declaration name="lb" type="LongBuffer" line="148"/>
            </method>
        </class>
    </source>