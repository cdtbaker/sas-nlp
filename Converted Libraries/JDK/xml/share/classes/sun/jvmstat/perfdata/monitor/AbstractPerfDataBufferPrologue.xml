<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor">
        <import package="sun.jvmstat.monitor"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.IntBuffer"/>
        <class name="AbstractPerfDataBufferPrologue" line="33">
            <comment line="61">
                the following constants must match the field offsets and sizes
                 in the PerfDataPrologue structure in perfMemory.hpp                
            </comment>
            <comment line="68">
                sizeof(byte)                
            </comment>
            <comment line="70">
                sizeof(byte)                
            </comment>
            <comment line="72">
                sizeof(byte)                
            </comment>
            <comment line="74">
                sizeof(byte)                
            </comment>
            <comment line="76">
                sizeof(struct PerfDataProlog)                
            </comment>
            <comment line="78">
                these constants should match their #define counterparts in perfMemory.hpp                
            </comment>
            <comment line="83">
                names for counters that expose the prolog fields                
            </comment>
            <javadoc line="33">
                Abstraction representing the HotSpot PerfData instrumentation buffer
                  header. This class represents only the fixed portion of the header.
                  Version specific classes represent the portion of the header that
                  may change from release to release.
                  &lt;p&gt;
                  The PerfDataBufferProlog class supports parsing of the following
                  C structure:
                  &lt;pre&gt;
                  typedef struct {
                  jint magic;             // magic number - 0xcafec0c0
                  jbyte byte_order;       // byte order of the buffer
                  jbyte major_version;    // major and minor version numbers
                  jbyte minor_version;
                  jbyte reserved_byte1;   // reserved - see concrete implementations for
                  // possible definition.
                  ...                     // remainder is handled by the subclasses.
                  } PerfDataPrologue
                  &lt;/pre&gt;                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="byteBuffer" type="ByteBuffer" line="58"/>
            <declaration name="PERFDATA_PROLOG_OFFSET" type="int" line="64"/>
            <declaration name="PERFDATA_PROLOG_MAGIC_OFFSET" type="int" line="65"/>
            <declaration name="PERFDATA_PROLOG_BYTEORDER_OFFSET" type="int" line="66"/>
            <declaration name="PERFDATA_PROLOG_BYTEORDER_SIZE" type="int" line="67"/>
            <declaration name="PERFDATA_PROLOG_MAJOR_OFFSET" type="int" line="68"/>
            <declaration name="PERFDATA_PROLOG_MAJOR_SIZE" type="int" line="69"/>
            <declaration name="PERFDATA_PROLOG_MINOR_OFFSET" type="int" line="70"/>
            <declaration name="PERFDATA_PROLOG_MINOR_SIZE" type="int" line="71"/>
            <declaration name="PERFDATA_PROLOG_RESERVEDB1_OFFSET" type="int" line="72"/>
            <declaration name="PERFDATA_PROLOG_RESERVEDB1_SIZE" type="int" line="73"/>
            <declaration name="PERFDATA_PROLOG_SIZE" type="int" line="75"/>
            <declaration name="PERFDATA_BIG_ENDIAN" type="byte" line="78"/>
            <declaration name="PERFDATA_LITTLE_ENDIAN" type="byte" line="79"/>
            <declaration name="PERFDATA_MAGIC" type="int" line="80"/>
            <declaration name="PERFDATA_MAJOR_NAME" type="String" line="83"/>
            <declaration name="PERFDATA_MINOR_NAME" type="String" line="85"/>
            <javadoc line="88">
                Construct a PerfDataBufferPrologue instance.                
                <param>
                    byteBuffer buffer containing the instrumentation data                    
                </param>
            </javadoc>
            <method name="AbstractPerfDataBufferPrologue" type="constructor" line="94">
                <params>
                    <param name="byteBuffer" type="ByteBuffer"/>
                </params>
                <comment line="97">
                    the magic number is always stored in big-endian format                    
                </comment>
                <comment line="103">
                    set the byte order                    
                </comment>
                <scope line="98"/>
            </method>
            <javadoc line="107">
                Get the magic number.                
                <return>
                    int - the magic number                    
                </return>
            </javadoc>
            <method name="getMagic" type="int" line="112">
                <comment line="113">
                    the magic number is always stored in big-endian format                    
                </comment>
                <comment line="117">
                    get the magic number                    
                </comment>
                <comment line="121">
                    restore the byte order                    
                </comment>
                <declaration name="order" type="ByteOrder" line="114"/>
                <declaration name="magic" type="int" line="119"/>
            </method>
            <javadoc line="126">
                Get the byte order.                
                <return>
                    int - the byte order of the instrumentation buffer                    
                </return>
            </javadoc>
            <method name="getByteOrder" type="ByteOrder" line="131">
                <comment line="132">
                    byte order field is byte order independent                    
                </comment>
                <declaration name="byte_order" type="byte" line="135"/>
                <scope line="137"/>
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Get the major version.                
                <return>
                    int - the major version                    
                </return>
            </javadoc>
            <method name="getMajorVersion" type="int" line="149">
                <comment line="150">
                    major version field is byte order independent                    
                </comment>
            </method>
            <javadoc line="155">
                Get the minor version.                
                <return>
                    int - the minor version                    
                </return>
            </javadoc>
            <method name="getMinorVersion" type="int" line="160">
                <comment line="161">
                    minor version field is byte order independent                    
                </comment>
            </method>
            <method name="isAccessible" type="boolean" line="166"/>
            <javadoc line="166">
                Get the accessible flag. If supported, it indicates that the shared
                  memory region is sufficiently initialized for client acccess.                
                <return>
                    boolean - the initialized status                    
                </return>
                <see>
                    #supportsAccessible()                    
                </see>
            </javadoc>
            <method name="supportsAccessible" type="boolean" line="175"/>
            <javadoc line="175">
                Test if the accessible flag is supported by this version of
                  the PerfDataBufferPrologue. Although not an abstract method, this
                  method should be overridden by version specific subclasses.                
                <return>
                    boolean - the initialized flag support status.                    
                </return>
                <see>
                    #isAccessible()                    
                </see>
            </javadoc>
            <javadoc line="185">
                Get the size of the header portion of the instrumentation buffer.                
                <return>
                    int - the size of the header                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="190">
                <comment line="191">
                    sizeof(struct PerfDataProlog)                    
                </comment>
            </method>
            <javadoc line="194">
                Return an IntBuffer that accesses the major version number.
                  This is used to create a Monitor object for this value.                
                <return>
                    IntBuffer - a ByteBuffer that accesses the major version number
                      in the instrumentation buffer header.                    
                </return>
            </javadoc>
            <method name="majorVersionBuffer" type="IntBuffer" line="201">
                <declaration name="holder" type="int[]" line="202"/>
                <declaration name="ib" type="IntBuffer" line="204"/>
            </method>
            <javadoc line="209">
                Return an IntBuffer that accesses the minor version number.
                  This is used to create a Monitor object for this value.                
                <return>
                    IntBuffer - a ByteBuffer that accesses the minor version number
                      in the instrumentation buffer header.                    
                </return>
            </javadoc>
            <method name="minorVersionBuffer" type="IntBuffer" line="216">
                <declaration name="holder" type="int[]" line="217"/>
                <declaration name="ib" type="IntBuffer" line="219"/>
            </method>
            <javadoc line="224">
                Get the magic number from the given byteBuffer.                
                <return>
                    int - the magic number                    
                </return>
            </javadoc>
            <method name="getMagic" type="int" line="229">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="230">
                    save buffer state                    
                </comment>
                <comment line="234">
                    the magic number is always stored in big-endian format                    
                </comment>
                <comment line="239">
                    restore buffer state.                    
                </comment>
                <declaration name="position" type="int" line="231"/>
                <declaration name="order" type="ByteOrder" line="232"/>
                <declaration name="magic" type="int" line="237"/>
            </method>
            <javadoc line="246">
                Get the major version number from the given ByteBuffer.                
                <return>
                    int - the major version                    
                </return>
            </javadoc>
            <method name="getMajorVersion" type="int" line="251">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="252">
                    save buffer state                    
                </comment>
                <comment line="258">
                    restore buffer state.                    
                </comment>
                <declaration name="position" type="int" line="253"/>
                <declaration name="major" type="int" line="256"/>
            </method>
            <javadoc line="264">
                Get the minor version number from the given ByteBuffer.                
                <return>
                    int - the minor version                    
                </return>
            </javadoc>
            <method name="getMinorVersion" type="int" line="269">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="270">
                    save buffer state                    
                </comment>
                <comment line="276">
                    restore buffer state.                    
                </comment>
                <declaration name="position" type="int" line="271"/>
                <declaration name="minor" type="int" line="274"/>
            </method>
            <javadoc line="282">
                Get the byte order for the given ByteBuffer.                
                <return>
                    int - the byte order of the instrumentation buffer                    
                </return>
            </javadoc>
            <method name="getByteOrder" type="ByteOrder" line="287">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="288">
                    save buffer state                    
                </comment>
                <comment line="296">
                    restore buffer state.                    
                </comment>
                <declaration name="position" type="int" line="289"/>
                <declaration name="order" type="ByteOrder" line="292"/>
            </method>
        </class>
    </source>