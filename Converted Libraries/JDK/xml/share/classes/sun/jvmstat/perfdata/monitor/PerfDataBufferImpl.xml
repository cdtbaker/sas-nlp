<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor">
        <import package="sun.jvmstat.monitor"/>
        <import package="java.util"/>
        <import package="java.nio"/>
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.util.regex"/>
        <class name="PerfDataBufferImpl" line="35">
            <comment line="328">
                PerfDataBuffer implementation specific classes                
            </comment>
            <javadoc line="35">
                The base classes for the concrete implementations of the HotSpot
                  PerfData instrumentation buffer.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    AbstractPerfDataBuffer                    
                </see>
            </javadoc>
            <declaration name="buffer" type="ByteBuffer" line="45"/>
            <javadoc line="45">
                The buffer containing the instrumentation data.                
            </javadoc>
            <declaration name="monitors" type="Map&lt;String,Monitor&gt;" line="50"/>
            <javadoc line="50">
                A Map of monitor objects found in the instrumentation buffer.                
            </javadoc>
            <declaration name="lvmid" type="int" line="55"/>
            <javadoc line="55">
                The Local Java Virtual Machine Identifier for this buffer.                
            </javadoc>
            <declaration name="aliasMap" type="Map&lt;String,ArrayList&lt;String&gt;&gt;" line="60"/>
            <javadoc line="60">
                A Map of monitor object names to aliases as read in from the alias map
                  file.                
            </javadoc>
            <declaration name="aliasCache" type="Map" line="66"/>
            <javadoc line="66">
                A cache of resolved monitor aliases.                
            </javadoc>
            <javadoc line="72">
                Constructor.                
                <param>
                    buffer the ByteBuffer containing the instrumentation data.                    
                </param>
                <param>
                    lvmid the Local Java Virtual Machine Identifier for this
                      instrumentation buffer.                    
                </param>
            </javadoc>
            <method name="PerfDataBufferImpl" type="constructor" line="79">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="lvmid" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Get the Local Java Virtual Machine Identifier, or &lt;em&gt;lvmid&lt;/em&gt;
                  for the target JVM associated with this instrumentation buffer.                
                <return>
                    int - the lvmid                    
                </return>
            </javadoc>
            <method name="getLocalVmId" type="int" line="93"/>
            <javadoc line="97">
                Get a copy of the raw instrumentation data.
                  This method is used to get a copy of the current bytes in the
                  instrumentation buffer. It is generally used for transporting
                  those bytes over the network.                
                <return>
                    byte[] - a copy of the bytes in the instrumentation buffer.                    
                </return>
            </javadoc>
            <method name="getBytes" type="byte[]" line="105">
                <comment line="109">
                    this operation is potentially time consuming, and the result
                     is unused when the getBytes() interface is used. However, the
                     call is necessary in order to synchronize this monitoring
                     client with the target jvm, which assures that the receiver
                     of the byte[] gets an image that is initialized to a usable
                     state. Otherwise, they might only  get a snapshot of an
                     empty instrumentation buffer immediately after it was created.                    
                </comment>
                <comment line="123">
                    just ignore this here and let the reciever of the
                     byte[] detect and handle the problem.                    
                </comment>
                <declaration name="bb" type="ByteBuffer" line="106"/>
                <scope line="107">
                    <scope line="117">
                        <scope line="118"/>
                    </scope>
                    <scope line="121"/>
                </scope>
                <declaration name="bytes" type="byte[]" line="130"/>
            </method>
            <javadoc line="135">
                Get the capacity of the instrumentation buffer.                
                <return>
                    int - the capacity, or size, of the instrumentation buffer.                    
                </return>
            </javadoc>
            <method name="getCapacity" type="int" line="140"/>
            <javadoc line="144">
                Get the ByteBuffer containing the instrumentation data.                
                <return>
                    ByteBuffer - a ByteBuffer object that refers to the
                      instrumentation data.                    
                </return>
            </javadoc>
            <method name="getByteBuffer" type="ByteBuffer" line="150">
                <comment line="152">
                    receiver is responsible for assuring that the buffer&apos;s state
                     is that of an initialized target.                    
                </comment>
            </method>
            <javadoc line="156">
                Build the alias mapping. Uses the default alias map file unless
                  the sun.jvmstat.perfdata.aliasmap file indicates some other
                  file as the source.                
            </javadoc>
            <method name="buildAliasMap" type="void" line="161">
                <declaration name="aliasURL" type="URL" line="164"/>
                <declaration name="filename" type="String" line="165"/>
                <scope line="167">
                    <declaration name="f" type="File" line="168"/>
                    <scope line="169"/>
                    <scope line="172"/>
                </scope>
                <scope line="175"/>
                <declaration name="aliasParser" type="AliasFileParser" line="182"/>
                <scope line="184"/>
                <scope line="187"/>
                <scope line="190"/>
            </method>
            <javadoc line="196">
                Find the Monitor object for the named counter by using one of its
                  aliases.                
            </javadoc>
            <method name="findByAlias" type="Monitor" line="200">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="m" type="Monitor" line="203"/>
                <scope line="204">
                    <declaration name="al" type="ArrayList" line="205"/>
                    <scope line="206">
                        <scope line="207">
                            <declaration name="alias" type="String" line="208"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="217">
                Find a named Instrumentation object.
                  This method will look for the named instrumentation object in the
                  instrumentation exported by this Java Virtual Machine. If an
                  instrumentation object with the given name exists, a Monitor interface
                  to that object will be return. Otherwise, the method returns
                  &lt;tt&gt;null&lt;/tt&gt;. The method will map requests for instrumention objects
                  using old names to their current names, if applicable.                
                <param>
                    name the name of the Instrumentation object to find.                    
                </param>
                <return>
                    Monitor - the {@link Monitor} object that can be used to
                      monitor the the named instrumentation object, or
                      &lt;tt&gt;null&lt;/tt&gt; if the named object doesn&apos;t exist.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
            </javadoc>
            <method name="findByName" type="Monitor" line="236">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="246">
                    look for the requested monitor                    
                </comment>
                <comment line="249">
                    not found - load any new monitors, and try again.                    
                </comment>
                <comment line="254">
                    still not found, look for aliases                    
                </comment>
                <declaration name="m" type="Monitor" line="237"/>
                <scope line="239">
                    <scope line="240"/>
                    <scope line="247"/>
                    <scope line="252"/>
                </scope>
            </method>
            <javadoc line="260">
                Find all Instrumentation objects with names matching the given pattern.
                  This method returns a {@link List} of Monitor objects such that
                  the name of each object matches the given pattern.                
                <param>
                    patternString a string containing a pattern as described in{@link java.util.regex.Pattern}.                    
                </param>
                <return>
                    List&lt;Monitor&gt; - a List of {@link Monitor} objects that can be used to
                      monitor the instrumentation objects whose names match
                      the given pattern. If no instrumentation objects have`
                      names matching the given pattern, then an empty List
                      is returned.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
            </javadoc>
            <method name="findByPattern" type="List<Monitor>" line="278">
                <params>
                    <param name="patternString" type="String"/>
                </params>
                <comment line="295">
                                        
                </comment>
                <comment line="300">
                    apply pattern to monitor item name                    
                </comment>
                <comment line="303">
                    if the pattern matches, then add monitor to list                    
                </comment>
                <scope line="280">
                    <scope line="281"/>
                    <scope line="283"/>
                </scope>
                <declaration name="pattern" type="Pattern" line="288"/>
                <declaration name="matcher" type="Matcher" line="289"/>
                <declaration name="matches" type="List&lt;Monitor&gt;" line="290"/>
                <declaration name="monitorSet" type="Set" line="292"/>
                <scope line="294">
                    <declaration name="me" type="Map.Entry" line="295"/>
                    <declaration name="name" type="String" line="296"/>
                    <declaration name="m" type="Monitor" line="297"/>
                    <scope line="303"/>
                </scope>
            </method>
            <javadoc line="310">
                Get a list of the inserted and removed monitors since last called.                
                <return>
                    MonitorStatus - the status of available Monitors for the
                      target Java Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="getMonitorStatus" type="MonitorStatus" line="318">
                <scope line="319">
                    <scope line="320"/>
                </scope>
            </method>
            <method name="getMonitorStatus" type="MonitorStatus" line="329"/>
            <javadoc line="329">
                get the list of inserted and removed monitors since last called.                
                <param>
                    m the map of Monitors.                    
                </param>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="buildMonitorMap" type="void" line="339"/>
            <javadoc line="339">
                build the map of Monitor objects.                
                <param>
                    m the map of Monitors.                    
                </param>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="getNewMonitors" type="void" line="348"/>
            <javadoc line="348">
                get the new Monitor objects from the Map of Monitor objects.                
                <param>
                    m the map of Monitors.                    
                </param>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
        </class>
    </source>