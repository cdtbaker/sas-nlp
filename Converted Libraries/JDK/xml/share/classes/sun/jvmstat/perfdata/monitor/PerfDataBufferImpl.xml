<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor">
        <import package="sun.jvmstat.monitor"/>
        <import package="java.util"/>
        <import package="java.nio"/>
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.util.regex"/>
        <class name="PerfDataBufferImpl" line="8">
            <javadoc line="8">
                The base classes for the concrete implementations of the HotSpot
                  PerfData instrumentation buffer.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    AbstractPerfDataBuffer                    
                </see>
            </javadoc>
            <declaration name="buffer" type="ByteBuffer" line="16"/>
            <javadoc line="16">
                The buffer containing the instrumentation data.                
            </javadoc>
            <declaration name="monitors" type="Map&lt;String,Monitor&gt;" line="20"/>
            <javadoc line="20">
                A Map of monitor objects found in the instrumentation buffer.                
            </javadoc>
            <declaration name="lvmid" type="int" line="24"/>
            <javadoc line="24">
                The Local Java Virtual Machine Identifier for this buffer.                
            </javadoc>
            <declaration name="aliasMap" type="Map&lt;String,ArrayList&lt;String&gt;&gt;" line="28"/>
            <javadoc line="28">
                A Map of monitor object names to aliases as read in from the alias map
                  file.                
            </javadoc>
            <declaration name="aliasCache" type="Map" line="33"/>
            <javadoc line="33">
                A cache of resolved monitor aliases.                
            </javadoc>
            <javadoc line="37">
                Constructor.                
                <param>
                    buffer the ByteBuffer containing the instrumentation data.                    
                </param>
                <param>
                    lvmid the Local Java Virtual Machine Identifier for this
                      instrumentation buffer.                    
                </param>
            </javadoc>
            <method name="PerfDataBufferImpl" type="constructor" line="43">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="lvmid" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Get the Local Java Virtual Machine Identifier, or &lt;em&gt;lvmid&lt;/em&gt;
                  for the target JVM associated with this instrumentation buffer.                
                <return>
                    int - the lvmid                    
                </return>
            </javadoc>
            <method name="getLocalVmId" type="int" line="55"/>
            <javadoc line="58">
                Get a copy of the raw instrumentation data.
                  This method is used to get a copy of the current bytes in the
                  instrumentation buffer. It is generally used for transporting
                  those bytes over the network.                
                <return>
                    byte[] - a copy of the bytes in the instrumentation buffer.                    
                </return>
            </javadoc>
            <method name="getBytes" type="byte[]" line="65">
                <declaration name="bb" type="ByteBuffer" line="66"/>
                <scope line="67">
                    <scope line="68">
                        <scope line="69"/>
                    </scope>
                    <scope line="73"/>
                </scope>
                <declaration name="bytes" type="byte[]" line="78"/>
            </method>
            <javadoc line="82">
                Get the capacity of the instrumentation buffer.                
                <return>
                    int - the capacity, or size, of the instrumentation buffer.                    
                </return>
            </javadoc>
            <method name="getCapacity" type="int" line="86"/>
            <javadoc line="89">
                Get the ByteBuffer containing the instrumentation data.                
                <return>
                    ByteBuffer - a ByteBuffer object that refers to the
                      instrumentation data.                    
                </return>
            </javadoc>
            <method name="getByteBuffer" type="ByteBuffer" line="94"/>
            <javadoc line="97">
                Build the alias mapping. Uses the default alias map file unless
                  the sun.jvmstat.perfdata.aliasmap file indicates some other
                  file as the source.                
            </javadoc>
            <method name="buildAliasMap" type="void" line="102"/>
            <javadoc line="130">
                Find the Monitor object for the named counter by using one of its
                  aliases.                
            </javadoc>
            <method name="findByAlias" type="Monitor" line="134">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="148">
                Find a named Instrumentation object.
                  This method will look for the named instrumentation object in the
                  instrumentation exported by this Java Virtual Machine. If an
                  instrumentation object with the given name exists, a Monitor interface
                  to that object will be return. Otherwise, the method returns
                  &lt;tt&gt;null&lt;/tt&gt;. The method will map requests for instrumention objects
                  using old names to their current names, if applicable.                
                <param>
                    name the name of the Instrumentation object to find.                    
                </param>
                <return>
                    Monitor - the {@link Monitor} object that can be used to
                      monitor the the named instrumentation object, or
                      <tt>null</tt> if the named object doesn't exist.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
            </javadoc>
            <method name="findByName" type="Monitor" line="163">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="m" type="Monitor" line="164"/>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="171"/>
                    <scope line="175"/>
                </scope>
            </method>
            <javadoc line="181">
                Find all Instrumentation objects with names matching the given pattern.
                  This method returns a {@link List} of Monitor objects such that
                  the name of each object matches the given pattern.                
                <param>
                    patternString a string containing a pattern as described in{@link java.util.regex.Pattern}.                    
                </param>
                <return>
                    List<Monitor> - a List of {@link Monitor} objects that can be used to
                      monitor the instrumentation objects whose names match
                      the given pattern. If no instrumentation objects have`
                      names matching the given pattern, then an empty List
                      is returned.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
            </javadoc>
            <method name="findByPattern" type="List<Monitor>" line="195">
                <params>
                    <param name="patternString" type="String"/>
                </params>
                <scope line="196">
                    <scope line="197"/>
                    <scope line="200"/>
                </scope>
                <declaration name="pattern" type="Pattern" line="204"/>
                <declaration name="matcher" type="Matcher" line="205"/>
                <declaration name="matches" type="List&lt;Monitor&gt;" line="206"/>
                <declaration name="monitorSet" type="Set" line="207"/>
                <scope line="208">
                    <declaration name="me" type="Map.Entry" line="209"/>
                    <declaration name="name" type="String" line="210"/>
                    <declaration name="m" type="Monitor" line="211"/>
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="219">
                Get a list of the inserted and removed monitors since last called.                
                <return>
                    MonitorStatus - the status of available Monitors for the
                      target Java Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="getMonitorStatus" type="MonitorStatus" line="226">
                <scope line="227">
                    <scope line="228"/>
                </scope>
            </method>
            <method name="getMonitorStatus" type="MonitorStatus" line="234"/>
            <javadoc line="234">
                get the list of inserted and removed monitors since last called.                
                <param>
                    m the map of Monitors.                    
                </param>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="buildMonitorMap" type="void" line="241"/>
            <javadoc line="241">
                build the map of Monitor objects.                
                <param>
                    m the map of Monitors.                    
                </param>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="getNewMonitors" type="void" line="248"/>
            <javadoc line="248">
                get the new Monitor objects from the Map of Monitor objects.                
                <param>
                    m the map of Monitors.                    
                </param>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
        </class>
    </source>