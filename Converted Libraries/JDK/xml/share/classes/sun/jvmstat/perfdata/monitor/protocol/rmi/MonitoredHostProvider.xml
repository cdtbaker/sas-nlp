<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor.protocol.rmi">
        <import package="sun.jvmstat.monitor"/>
        <import package="sun.jvmstat.monitor.event"/>
        <import package="sun.jvmstat.monitor.remote"/>
        <import package="sun.jvmstat.perfdata.monitor"/>
        <import package="java.util"/>
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.rmi"/>
        <import package="java.util.HashMap"/>
        <class name="MonitoredHostProvider" line="38">
            <extends class="MonitoredHost"/>
            <javadoc line="38">
                Concrete implementation of the MonitoredHost interface for the
                  &lt;em&gt;rmi&lt;/em&gt; protocol of the HotSpot PerfData monitoring implementation.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serverName" type="String" line="46"/>
            <declaration name="DEFAULT_POLLING_INTERVAL" type="int" line="47"/>
            <declaration name="listeners" type="ArrayList&lt;HostListener&gt;" line="49"/>
            <declaration name="task" type="NotifierTask" line="50"/>
            <declaration name="activeVms" type="HashSet&lt;Integer&gt;" line="51"/>
            <declaration name="vmManager" type="RemoteVmManager" line="52"/>
            <declaration name="remoteHost" type="RemoteHost" line="53"/>
            <declaration name="timer" type="Timer" line="54"/>
            <javadoc line="56">
                Create a MonitoredHostProvider instance using the given HostIdentifier.                
                <param>
                    hostId the host identifier for this MonitoredHost                    
                </param>
                <throws>
                    MonitorException Thrown on any error encountered while
                      communicating with the remote host.                    
                </throws>
            </javadoc>
            <method name="MonitoredHostProvider" type="constructor" line="64">
                <params>
                    <param name="hostId" type="HostIdentifier"/>
                </params>
                <comment line="89">
                    rmi registry not available
                    
                     Access control exceptions, where the rmi server refuses a
                     connection based on policy file configuration, come through
                     here on the client side. Unfortunately, the RemoteException
                     doesn&apos;t contain enough information to determine the true cause
                     of the exception. So, we have to output a rather generic message.                    
                </comment>
                <comment line="115">
                    no server with given name                    
                </comment>
                <comment line="121">
                    this is a programming problem                    
                </comment>
                <declaration name="rmiName" type="String" line="70"/>
                <declaration name="sn" type="String" line="71"/>
                <declaration name="path" type="String" line="72"/>
                <scope line="74"/>
                <scope line="78"/>
                <scope line="80"/>
                <scope line="84"/>
                <scope line="87">
                    <declaration name="message" type="String" line="97"/>
                    <scope line="100"/>
                    <scope line="103"/>
                    <scope line="107"/>
                    <scope line="109"/>
                </scope>
                <scope line="113">
                    <declaration name="message" type="String" line="115"/>
                </scope>
                <scope line="119"/>
            </method>
            <javadoc line="128">
                {@inheritDoc}                
            </javadoc>
            <method name="getMonitoredVm" type="MonitoredVm" line="132">
                <params>
                    <param name="vmid" type="VmIdentifier"/>
                </params>
            </method>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="getMonitoredVm" type="MonitoredVm" line="140">
                <params>
                    <param name="vmid" type="VmIdentifier"/>
                    <param name="interval" type="int"/>
                </params>
                <comment line="156">
                    the VmIdentifier is expected to be a valid and should resolve
                     easonably against the host identifier. A URISyntaxException
                     here is most likely a programming error.                    
                </comment>
                <declaration name="nvmid" type="VmIdentifier" line="141"/>
                <scope line="142">
                    <declaration name="rvm" type="RemoteVm" line="144"/>
                    <declaration name="rmvm" type="RemoteMonitoredVm" line="146"/>
                </scope>
                <scope line="151"/>
                <scope line="154"/>
            </method>
            <javadoc line="165">
                {@inheritDoc}                
            </javadoc>
            <method name="detach" type="void" line="168">
                <params>
                    <param name="vm" type="MonitoredVm"/>
                </params>
                <declaration name="rmvm" type="RemoteMonitoredVm" line="169"/>
                <scope line="171"/>
                <scope line="174"/>
            </method>
            <javadoc line="180">
                {@inheritDoc}                
            </javadoc>
            <method name="addHostListener" type="void" line="183">
                <params>
                    <param name="listener" type="HostListener"/>
                </params>
                <scope line="184">
                    <scope line="186"/>
                </scope>
            </method>
            <javadoc line="193">
                {@inheritDoc}                
            </javadoc>
            <method name="removeHostListener" type="void" line="196">
                <params>
                    <param name="listener" type="HostListener"/>
                </params>
                <comment line="198">
                    XXX: if a disconnect method is added, make sure it calls
                     this method to unregister this object from the watcher. otherwise,
                     an unused MonitoredHostProvider instance may go uncollected.                    
                </comment>
                <scope line="202">
                    <scope line="204"/>
                </scope>
            </method>
            <method name="setInterval" type="void" line="211">
                <params>
                    <param name="newInterval" type="int"/>
                </params>
                <scope line="212">
                    <scope line="213"/>
                    <declaration name="oldInterval" type="int" line="217"/>
                    <scope line="220">
                        <declaration name="oldTask" type="NotifierTask" line="222"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="230">
                {@inheritDoc}                
            </javadoc>
            <method name="activeVms" type="Set<Integer>" line="233"/>
            <javadoc line="237">
                Fire VmStatusChangeEvent events to HostListener objects                
                <param>
                    active Set of Integer objects containing the local
                      Vm Identifiers of the active JVMs                    
                </param>
                <param>
                    started Set of Integer objects containing the local
                      Vm Identifiers of new JVMs started since last
                      interval.                    
                </param>
                <param>
                    terminated Set of Integer objects containing the local
                      Vm Identifiers of terminated JVMs since last
                      interval.                    
                </param>
            </javadoc>
            <method name="fireVmStatusChangedEvents" type="void" line="250">
                <params>
                    <param name="active" type="Set"/>
                    <param name="started" type="Set"/>
                    <param name="terminated" type="Set"/>
                </params>
                <comment line="259">
                                        
                </comment>
                <declaration name="registered" type="ArrayList" line="251"/>
                <declaration name="ev" type="VmStatusChangeEvent" line="252"/>
                <scope line="254"/>
                <scope line="258">
                    <declaration name="l" type="HostListener" line="259"/>
                    <scope line="260"/>
                </scope>
            </method>
            <javadoc line="267">
                Fire hostDisconnectEvent events.                
            </javadoc>
            <method name="fireDisconnectedEvents" type="void" line="270">
                <comment line="279">
                                        
                </comment>
                <declaration name="registered" type="ArrayList" line="271"/>
                <declaration name="ev" type="HostEvent" line="272"/>
                <scope line="274"/>
                <scope line="278">
                    <declaration name="l" type="HostListener" line="279"/>
                    <scope line="280"/>
                </scope>
            </method>
            <class name="NotifierTask" line="287">
                <extends class="CountedTimerTask"/>
                <javadoc line="287">
                    class to poll the remote machine and generate local event notifications.                    
                </javadoc>
                <method name="run" type="void" line="291">
                    <comment line="295">
                        save the last set of active JVMs                        
                    </comment>
                    <comment line="299">
                        get the current set of active JVMs                        
                    </comment>
                    <comment line="303">
                        XXX: use logging api                        
                    </comment>
                    <comment line="308">
                        mark the HostManager as errored and notify listeners                        
                    </comment>
                    <comment line="320">
                                                
                    </comment>
                    <comment line="323">
                        a new file has been detected, add to set                        
                    </comment>
                    <comment line="329">
                                                
                    </comment>
                    <comment line="332">
                        JVM has terminated, remove it from the active list                        
                    </comment>
                    <declaration name="lastActiveVms" type="Set" line="295"/>
                    <scope line="297"/>
                    <scope line="301"/>
                    <scope line="312"/>
                    <declaration name="startedVms" type="Set&lt;Integer&gt;" line="316"/>
                    <declaration name="terminatedVms" type="Set&lt;Object&gt;" line="317"/>
                    <scope line="319">
                        <declaration name="vmid" type="Integer" line="320"/>
                        <scope line="321"/>
                    </scope>
                    <scope line="328">
                        <declaration name="o" type="Object" line="329"/>
                        <scope line="330"/>
                    </scope>
                    <scope line="336"/>
                </method>
            </class>
        </class>
    </source>