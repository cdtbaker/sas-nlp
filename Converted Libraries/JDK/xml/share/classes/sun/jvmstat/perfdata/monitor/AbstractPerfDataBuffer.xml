<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor">
        <import package="sun.misc.Perf"/>
        <import package="sun.jvmstat.monitor"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.lang.reflect"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="AbstractPerfDataBuffer" line="35">
            <javadoc line="35">
                Abstraction for the HotSpot PerfData instrumentation buffer. This class
                  is responsible for acquiring access to the instrumentation buffer for
                  a target HotSpot Java Virtual Machine and providing method level access
                  to its contents.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="impl" type="PerfDataBufferImpl" line="46"/>
            <javadoc line="46">
                Reference to the concrete instance created by the{@link #createPerfDataBuffer} method.                
            </javadoc>
            <javadoc line="52">
                Get the Local Java Virtual Machine Identifier, or &lt;em&gt;lvmid&lt;/em&gt;
                  for the target JVM associated with this instrumentation buffer.                
                <return>
                    int - the lvmid                    
                </return>
            </javadoc>
            <method name="getLocalVmId" type="int" line="58"/>
            <javadoc line="62">
                Get a copy of the raw instrumentation data.
                  This method is used to get a copy of the current bytes in the
                  instrumentation buffer. It is generally used for transporting
                  those bytes over the network.                
                <return>
                    byte[] - a copy of the bytes in the instrumentation buffer.                    
                </return>
            </javadoc>
            <method name="getBytes" type="byte[]" line="70"/>
            <javadoc line="74">
                Get the capacity of the instrumentation buffer.                
                <return>
                    int - the capacity, or size, of the instrumentation buffer.                    
                </return>
            </javadoc>
            <method name="getCapacity" type="int" line="79"/>
            <javadoc line="83">
                Find a named Instrumentation object.
                  This method will look for the named instrumentation object in the
                  instrumentation exported by this Java Virtual Machine. If an
                  instrumentation object with the given name exists, a Monitor interface
                  to that object will be return. Otherwise, the method returns
                  &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    name the name of the Instrumentation object to find.                    
                </param>
                <return>
                    Monitor - the {@link Monitor} object that can be used to
                      monitor the the named instrumentation object, or
                      <tt>null</tt> if the named object doesn't exist.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
            </javadoc>
            <method name="findByName" type="Monitor" line="99">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="103">
                Find all Instrumentation objects with names matching the given pattern.
                  This method returns a {@link List} of Monitor objects such that
                  the name of each object matches the given pattern.                
                <param>
                    patternString  a string containing a pattern as described in{@link java.util.regex.Pattern}.                    
                </param>
                <return>
                    List<Monitor> - a List of {@link Monitor} objects that can be used to
                      monitor the instrumentation objects whose names match
                      the given pattern. If no instrumentation objects have`
                      names matching the given pattern, then an empty List
                      is returned.                    
                </return>
                <throws>
                    MonitorException Thrown if an error occurs while communicating
                      with the target Java Virtual Machine.                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
            </javadoc>
            <method name="findByPattern" type="List<Monitor>" line="120">
                <params>
                    <param name="patternString" type="String"/>
                </params>
            </method>
            <javadoc line="124">
                Get a list of the inserted and removed monitors since last called.                
                <return>
                    MonitorStatus - the status of available Monitors for the
                      target Java Virtual Machine.                    
                </return>
                <throws>
                    MonitorException Thrown if communications errors occur
                      while communicating with the target.                    
                </throws>
            </javadoc>
            <method name="getMonitorStatus" type="MonitorStatus" line="132"/>
            <javadoc line="136">
                Get the ByteBuffer containing the instrumentation data.                
                <return>
                    ByteBuffer - a ByteBuffer object that refers to the
                      instrumentation data.                    
                </return>
            </javadoc>
            <method name="getByteBuffer" type="ByteBuffer" line="142"/>
            <javadoc line="146">
                Create the perfdata instrumentation buffer for the given lvmid
                  using the given ByteBuffer object as the source of the instrumentation
                  data. This method parses the instrumentation buffer header to determine
                  key characteristics of the instrumentation buffer and then dynamically
                  loads the appropriate class to handle the particular instrumentation
                  version.                
                <param>
                    bb the ByteBuffer that references the instrumentation data.                    
                </param>
                <param>
                    lvmid the Local Java Virtual Machine identifier for this
                      instrumentation buffer.                    
                </param>
                <throws>
                    MonitorException                    
                </throws>
            </javadoc>
            <method name="createPerfDataBuffer" type="void" line="161">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="lvmid" type="int"/>
                </params>
                <comment line="165">
                    instantiate the version specific class                    
                </comment>
                <comment line="182">
                    from Class.forName();                    
                </comment>
                <comment line="187">
                    from Class.getConstructor();                    
                </comment>
                <comment line="193">
                    from Constructor.newInstance()                    
                </comment>
                <declaration name="majorVersion" type="int" line="162"/>
                <declaration name="minorVersion" type="int" line="163"/>
                <declaration name="classname" type="String" line="166"/>
                <scope line="170">
                    <declaration name="implClass" type="Class&lt;?&gt;" line="171"/>
                    <declaration name="cons" type="Constructor" line="172"/>
                </scope>
                <scope line="181"/>
                <scope line="186"/>
                <scope line="192"/>
                <scope line="198"/>
                <scope line="202">
                    <declaration name="cause" type="Throwable" line="203"/>
                    <scope line="204"/>
                </scope>
            </method>
        </class>
    </source>