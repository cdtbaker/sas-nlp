<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor.protocol.rmi">
        <import package="sun.jvmstat.monitor"/>
        <import package="sun.jvmstat.monitor.event"/>
        <import package="sun.jvmstat.monitor.remote"/>
        <import package="sun.jvmstat.perfdata.monitor"/>
        <import package="java.lang.reflect"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.rmi"/>
        <class name="RemoteMonitoredVm" line="38">
            <extends class="AbstractMonitoredVm"/>
            <comment line="239">
                Timer Tasks. There are two separate timer tasks here. The SamplerTask
                 is active whenever we are attached to the remote JVM with a periodic
                 sampling interval &gt; 0. The NotifierTask is only active if a VmListener
                 has registered with this RemoteMonitoredVm instance. Also, in the future
                 we may want to run these tasks at different intervals. Currently,
                 they run at the same interval and some significant work may
                 need to be done to complete the separation of these two intervals.                
            </comment>
            <javadoc line="38">
                Concrete implementation of the AbstractMonitoredVm class for the
                  &lt;em&gt;rmi:&lt;/em&gt; protocol for the HotSpot PerfData monitoring implementation.
                  &lt;p&gt;
                  This class provides the ability to acquire to the instrumentation buffer
                  of a live, remote target Java Virtual Machine through an RMI server.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="listeners" type="ArrayList&lt;VmListener&gt;" line="50"/>
            <declaration name="notifierTask" type="NotifierTask" line="51"/>
            <declaration name="samplerTask" type="SamplerTask" line="52"/>
            <declaration name="timer" type="Timer" line="53"/>
            <declaration name="rvm" type="RemoteVm" line="55"/>
            <declaration name="updateBuffer" type="ByteBuffer" line="56"/>
            <javadoc line="58">
                Create a RemoteMonitoredVm instance.                
                <param>
                    rvm the proxy to the remote MonitoredVm instance.                    
                </param>
                <param>
                    vmid the vm identifier specifying the remot target JVM                    
                </param>
                <param>
                    timer the timer used to run polling tasks                    
                </param>
                <param>
                    interval the sampling interval                    
                </param>
            </javadoc>
            <method name="RemoteMonitoredVm" type="constructor" line="68">
                <params>
                    <param name="rvm" type="RemoteVm"/>
                    <param name="vmid" type="VmIdentifier"/>
                    <param name="timer" type="Timer"/>
                    <param name="interval" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Method to attach to the remote MonitoredVm.                
            </javadoc>
            <method name="attach" type="void" line="79">
                <comment line="82">
                    if continuous sampling is requested, register with the sampler thread                    
                </comment>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <method name="detach" type="void" line="92">
                <comment line="106">
                    XXX: - use logging api? throw an exception instead?                    
                </comment>
                <scope line="93">
                    <scope line="94">
                        <scope line="95"/>
                        <scope line="99"/>
                    </scope>
                </scope>
                <scope line="105"/>
                <scope line="110"/>
            </method>
            <javadoc line="115">
                Get a copy of the remote instrumentation buffer.
                  &lt;p&gt;
                  The data in the remote instrumentation buffer is copied into
                  a local byte buffer.                
                <throws>
                    RemoteException Thrown on any communications errors with
                      the remote system.                    
                </throws>
            </javadoc>
            <method name="sample" type="void" line="124"/>
            <javadoc line="129">
                Get the proxy to the remote MonitoredVm.                
                <return>
                    RemoteVm - the proxy to the remote MonitoredVm.                    
                </return>
            </javadoc>
            <method name="getRemoteVm" type="RemoteVm" line="134"/>
            <javadoc line="138">
                {@inheritDoc}                
            </javadoc>
            <method name="addVmListener" type="void" line="141">
                <params>
                    <param name="l" type="VmListener"/>
                </params>
                <scope line="142">
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="151">
                {@inheritDoc}                
            </javadoc>
            <method name="removeVmListener" type="void" line="154">
                <params>
                    <param name="l" type="VmListener"/>
                </params>
                <scope line="155">
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="164">
                {@inheritDoc}                
            </javadoc>
            <method name="setInterval" type="void" line="167">
                <params>
                    <param name="newInterval" type="int"/>
                </params>
                <scope line="168">
                    <scope line="169"/>
                    <declaration name="oldInterval" type="int" line="173"/>
                    <scope line="176">
                        <declaration name="oldSamplerTask" type="SamplerTask" line="178"/>
                    </scope>
                    <scope line="184">
                        <declaration name="oldNotifierTask" type="NotifierTask" line="186"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="195">
                Fire MonitoredVmStructureChanged events.                
                <param>
                    inserted List of Monitor objects inserted.                    
                </param>
                <param>
                    removed List of Monitor objects removed.                    
                </param>
            </javadoc>
            <method name="fireMonitorStatusChangedEvents" type="void" line="201">
                <params>
                    <param name="inserted" type="List"/>
                    <param name="removed" type="List"/>
                </params>
                <comment line="209">
                                        
                </comment>
                <declaration name="registered" type="ArrayList" line="202"/>
                <declaration name="ev" type="MonitorStatusChangeEvent" line="203"/>
                <scope line="205"/>
                <scope line="209">
                    <declaration name="l" type="VmListener" line="210"/>
                    <scope line="211"/>
                </scope>
            </method>
            <javadoc line="218">
                Fire MonitoredVmStructureChanged events.                
            </javadoc>
            <method name="fireMonitorsUpdatedEvents" type="void" line="221">
                <comment line="229">
                                        
                </comment>
                <declaration name="registered" type="ArrayList" line="222"/>
                <declaration name="ev" type="VmEvent" line="223"/>
                <scope line="225"/>
                <scope line="229">
                    <declaration name="l" type="VmListener" line="230"/>
                    <scope line="231"/>
                </scope>
            </method>
            <class name="NotifierTask" line="248">
                <extends class="CountedTimerTask"/>
                <javadoc line="248">
                    Class to periodically check the state of the defined monitors
                      for the remote MonitoredVm instance and to notify listeners of
                      any detected changes.                    
                </javadoc>
                <method name="run" type="void" line="254">
                    <comment line="266">
                        XXX: use logging api? fire disconnect events? mark errored?                        
                    </comment>
                    <comment line="267">
                        fireDisconnectedEvents();                        
                    </comment>
                    <comment line="271">
                        XXX: should we cancle the notifierTask here?                        
                    </comment>
                    <comment line="272">
                        this.cancel();                        
                    </comment>
                    <scope line="256">
                        <declaration name="status" type="MonitorStatus" line="257"/>
                        <declaration name="inserted" type="List" line="259"/>
                        <declaration name="removed" type="List" line="260"/>
                        <scope line="262"/>
                    </scope>
                    <scope line="265"/>
                </method>
            </class>
            <class name="SamplerTask" line="277">
                <extends class="CountedTimerTask"/>
                <javadoc line="277">
                    Class to periodically sample the remote instrumentation byte buffer
                      and refresh the local copy. Registered listeners are notified of
                      the completion of a sampling event.                    
                </javadoc>
                <method name="run" type="void" line="283">
                    <comment line="290">
                        XXX: use logging api, mark vm as errored.                        
                    </comment>
                    <scope line="285"/>
                    <scope line="289"/>
                </method>
            </class>
        </class>
    </source>