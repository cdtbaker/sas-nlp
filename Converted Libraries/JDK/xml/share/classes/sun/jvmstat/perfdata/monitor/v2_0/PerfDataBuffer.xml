<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.jvmstat.perfdata.monitor.v2_0">
        <import package="sun.jvmstat.monitor"/>
        <import package="sun.jvmstat.perfdata.monitor"/>
        <import package="java.util"/>
        <import package="java.util.regex"/>
        <import package="java.nio"/>
        <class name="PerfDataBuffer" line="7">
            <extends class="PerfDataBufferImpl"/>
            <javadoc line="7">
                The concrete implementation of version 2.0 of the HotSpot PerfData
                  Instrumentation buffer. This class is responsible for parsing the
                  instrumentation memory and constructing the necessary objects to
                  represent and access the instrumentation objects contained in the
                  memory buffer.
                  &lt;p&gt;
                  The structure of the 2.0 entry is defined in struct PerfDataEnry
                  as decsribed in perfMemory.hpp. This structure looks like:
                  &lt;pre&gt;
                  typedef struct {
                  jint entry_length;         // entry length in bytes
                  jint name_offset;          // offset to entry name, relative to start
                  // of entry
                  jint vector_length;        // length of the vector. If 0, then scalar.
                  jbyte data_type;           // JNI field descriptor type
                  jbyte flags;               // miscellaneous attribute flags
                  // 0x01 - supported
                  jbyte data_units;          // unit of measure attribute
                  jbyte data_variability;    // variability attribute
                  jbyte data_offset;         // offset to data item, relative to start
                  // of entry.
                  } PerfDataEntry;
                  &lt;/pre&gt;                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    AbstractPerfDataBuffer                    
                </see>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="36"/>
            <declaration name="syncWaitMs" type="int" line="37"/>
            <declaration name="EMPTY_LIST" type="ArrayList" line="38"/>
            <declaration name="PERFDATA_ENTRYLENGTH_OFFSET" type="int" line="39"/>
            <declaration name="PERFDATA_ENTRYLENGTH_SIZE" type="int" line="40"/>
            <declaration name="PERFDATA_NAMEOFFSET_OFFSET" type="int" line="41"/>
            <declaration name="PERFDATA_NAMEOFFSET_SIZE" type="int" line="42"/>
            <declaration name="PERFDATA_VECTORLENGTH_OFFSET" type="int" line="43"/>
            <declaration name="PERFDATA_VECTORLENGTH_SIZE" type="int" line="44"/>
            <declaration name="PERFDATA_DATATYPE_OFFSET" type="int" line="45"/>
            <declaration name="PERFDATA_DATATYPE_SIZE" type="int" line="46"/>
            <declaration name="PERFDATA_FLAGS_OFFSET" type="int" line="47"/>
            <declaration name="PERFDATA_FLAGS_SIZE" type="int" line="48"/>
            <declaration name="PERFDATA_DATAUNITS_OFFSET" type="int" line="49"/>
            <declaration name="PERFDATA_DATAUNITS_SIZE" type="int" line="50"/>
            <declaration name="PERFDATA_DATAVAR_OFFSET" type="int" line="51"/>
            <declaration name="PERFDATA_DATAVAR_SIZE" type="int" line="52"/>
            <declaration name="PERFDATA_DATAOFFSET_OFFSET" type="int" line="53"/>
            <declaration name="PERFDATA_DATAOFFSET_SIZE" type="int" line="54"/>
            <declaration name="prologue" type="PerfDataBufferPrologue" line="55"/>
            <declaration name="nextEntry" type="int" line="56"/>
            <declaration name="lastNumEntries" type="long" line="57"/>
            <declaration name="overflow" type="IntegerMonitor" line="58"/>
            <declaration name="insertedMonitors" type="ArrayList&lt;Monitor&gt;" line="59"/>
            <javadoc line="60">
                Construct a PerfDataBuffer instance.
                  &lt;p&gt;
                  This class is dynamically loaded by{@link AbstractPerfDataBuffer#createPerfDataBuffer}, and this
                  constructor is called to instantiate the instance.                
                <param>
                    buffer the buffer containing the instrumentation data                    
                </param>
                <param>
                    lvmid the Local Java Virtual Machine Identifier for this
                      instrumentation buffer.                    
                </param>
            </javadoc>
            <method name="PerfDataBuffer" type="constructor" line="69">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="lvmid" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="buildMonitorMap" type="void" line="77">
                <params>
                    <param name="map" type="Map<String,Monitor>"/>
                </params>
            </method>
            <javadoc line="92">
                {@inheritDoc}                
            </javadoc>
            <method name="getNewMonitors" type="void" line="95">
                <params>
                    <param name="map" type="Map<String,Monitor>"/>
                </params>
            </method>
            <javadoc line="113">
                {@inheritDoc}                
            </javadoc>
            <method name="getMonitorStatus" type="MonitorStatus" line="116">
                <params>
                    <param name="map" type="Map<String,Monitor>"/>
                </params>
            </method>
            <javadoc line="125">
                Build the pseudo monitors used to map the prolog data into counters.                
            </javadoc>
            <method name="buildPseudoMonitors" type="void" line="128">
                <params>
                    <param name="map" type="Map<String,Monitor>"/>
                </params>
                <declaration name="monitor" type="Monitor" line="129"/>
                <declaration name="name" type="String" line="130"/>
                <declaration name="ib" type="IntBuffer" line="131"/>
                <declaration name="lb" type="LongBuffer" line="154"/>
            </method>
            <javadoc line="158">
                Method that waits until the target jvm indicates that
                  its shared memory is safe to access.                
            </javadoc>
            <method name="synchWithTarget" type="void" line="162">
                <declaration name="timeLimit" type="long" line="163"/>
                <scope line="165">
                    <scope line="167"/>
                    <scope line="170"/>
                    <scope line="172"/>
                </scope>
            </method>
            <javadoc line="179">
                method to extract the next monitor entry from the instrumentation memory.
                  assumes that nextEntry is the offset into the byte array
                  at which to start the search for the next entry. method leaves
                  next entry pointing to the next entry or to the end of data.                
            </javadoc>
            <method name="getNextMonitorEntry" type="Monitor" line="185"/>
            <javadoc line="292">
                Method to dump debugging information                
            </javadoc>
            <method name="dumpAll" type="void" line="295">
                <params>
                    <param name="map" type="Map<String,Monitor>"/>
                    <param name="lvmid" type="int"/>
                </params>
                <scope line="296">
                    <declaration name="keys" type="Set&lt;String&gt;" line="297"/>
                    <declaration name="j" type="int" line="299"/>
                    <scope line="300">
                        <declaration name="monitor" type="Monitor" line="301"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="309">
                Method to dump the fixed portion of an entry.                
            </javadoc>
            <method name="dump_entry_fixed" type="void" line="312">
                <params>
                    <param name="entry_start" type="int"/>
                    <param name="nameOffset" type="int"/>
                    <param name="vectorLength" type="int"/>
                    <param name="typeCodeByte" type="byte"/>
                    <param name="flags" type="byte"/>
                    <param name="unitsByte" type="byte"/>
                    <param name="varByte" type="byte"/>
                    <param name="dataOffset" type="int"/>
                </params>
                <scope line="313"/>
            </method>
            <method name="dump_entry_variable" type="void" line="324">
                <params>
                    <param name="name" type="String"/>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="325">
                    <declaration name="toHex" type="char[]" line="326"/>
                    <declaration name="data" type="ByteBuffer" line="327"/>
                    <declaration name="count" type="int" line="331"/>
                    <scope line="332">
                        <declaration name="b" type="byte" line="333"/>
                        <declaration name="high" type="byte" line="334"/>
                        <declaration name="low" type="byte" line="335"/>
                        <scope line="336"/>
                        <scope line="341"/>
                        <scope line="344"/>
                    </scope>
                    <scope line="348"/>
                </scope>
            </method>
            <method name="logln" type="void" line="353">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="354"/>
            </method>
            <method name="log" type="void" line="358">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="359"/>
            </method>
        </class>
    </source>