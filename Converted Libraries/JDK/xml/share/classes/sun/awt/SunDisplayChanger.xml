<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.IllegalComponentStateException"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="SunDisplayChanger" line="38">
            <comment line="60">
                Create a new synchronizedMap with initial capacity of one listener.
                 It is asserted that the most common case is to have one GraphicsDevice
                 and one top-level Window.                
            </comment>
            <comment line="67">
                Add a DisplayChangeListener to this SunDisplayChanger so that it is
                 notified when the display is changed.                
            </comment>
            <comment line="83">
                Remove the given DisplayChangeListener from this SunDisplayChanger.                
            </comment>
            <comment line="98">
                Notify our list of DisplayChangedListeners that a display change has
                 taken place by calling their displayChanged() methods.                
            </comment>
            <comment line="145">
                Notify our list of DisplayChangedListeners that a palette change has
                 taken place by calling their paletteChanged() methods.                
            </comment>
            <javadoc line="38">
                This class is used to aid in keeping track of DisplayChangedListeners and
                  notifying them when a display change has taken place. DisplayChangedListeners
                  are notified when the display&apos;s bit depth is changed, or when a top-level
                  window has been dragged onto another screen.
                  It is safe for a DisplayChangedListener to be added while the list is being
                  iterated.
                  The displayChanged() call is propagated after some occurrence (either
                  due to user action or some other application) causes the display mode
                  (e.g., depth or resolution) to change.  All heavyweight components need
                  to know when this happens because they need to create new surfaceData
                  objects based on the new depth.
                  displayChanged() is also called on Windows when they are moved from one
                  screen to another on a system equipped with multiple displays.                
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="57"/>
            <declaration name="listeners" type="Map" line="62"/>
            <method name="SunDisplayChanger" type="constructor" line="64"/>
            <method name="add" type="void" line="70">
                <params>
                    <param name="theListener" type="DisplayChangedListener"/>
                </params>
                <scope line="71">
                    <scope line="72"/>
                </scope>
                <scope line="76"/>
            </method>
            <method name="remove" type="void" line="85">
                <params>
                    <param name="theListener" type="DisplayChangedListener"/>
                </params>
                <scope line="86">
                    <scope line="87"/>
                </scope>
                <scope line="91"/>
            </method>
            <method name="notifyListeners" type="void" line="101">
                <comment line="106">
                    This method is implemented by making a clone of the set of listeners,
                     and then iterating over the clone.  This is because during the course
                     of responding to a display change, it may be appropriate for a
                     DisplayChangedListener to add or remove itself from a SunDisplayChanger.
                     If the set itself were iterated over, rather than a clone, it is
                     trivial to get a ConcurrentModificationException by having a
                     DisplayChangedListener remove itself from its list.
                     Because all display change handling is done on the event thread,
                     synchronization provides no protection against modifying the listener
                     list while in the middle of iterating over it.  -bchristi 7/10/2001                    
                </comment>
                <comment line="135">
                    This DisplayChangeListener is no longer valid.  Most
                     likely, a top-level window was dispose()d, but its
                     Java objects have not yet been garbage collected.  In any
                     case, we no longer need to track this listener, though we
                     do need to remove it from the original list, not the clone.                    
                </comment>
                <scope line="102"/>
                <declaration name="listClone" type="HashMap" line="116"/>
                <declaration name="cloneSet" type="Set" line="117"/>
                <scope line="119"/>
                <declaration name="itr" type="Iterator" line="124"/>
                <scope line="125">
                    <declaration name="current" type="DisplayChangedListener" line="126"/>
                    <scope line="128">
                        <scope line="129"/>
                    </scope>
                    <scope line="133"/>
                </scope>
            </method>
            <method name="notifyPaletteChanged" type="void" line="148">
                <comment line="153">
                    This method is implemented by making a clone of the set of listeners,
                     and then iterating over the clone.  This is because during the course
                     of responding to a display change, it may be appropriate for a
                     DisplayChangedListener to add or remove itself from a SunDisplayChanger.
                     If the set itself were iterated over, rather than a clone, it is
                     trivial to get a ConcurrentModificationException by having a
                     DisplayChangedListener remove itself from its list.
                     Because all display change handling is done on the event thread,
                     synchronization provides no protection against modifying the listener
                     list while in the middle of iterating over it.  -bchristi 7/10/2001                    
                </comment>
                <comment line="181">
                    This DisplayChangeListener is no longer valid.  Most
                     likely, a top-level window was dispose()d, but its
                     Java objects have not yet been garbage collected.  In any
                     case, we no longer need to track this listener, though we
                     do need to remove it from the original list, not the clone.                    
                </comment>
                <scope line="149"/>
                <declaration name="listClone" type="HashMap" line="163"/>
                <declaration name="cloneSet" type="Set" line="164"/>
                <scope line="166"/>
                <declaration name="itr" type="Iterator" line="170"/>
                <scope line="171">
                    <declaration name="current" type="DisplayChangedListener" line="172"/>
                    <scope line="174">
                        <scope line="175"/>
                    </scope>
                    <scope line="179"/>
                </scope>
            </method>
        </class>
    </source>