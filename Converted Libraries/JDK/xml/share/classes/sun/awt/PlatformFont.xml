<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.peer.FontPeer"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Vector"/>
        <import package="sun.font.SunFontManager"/>
        <import package="sun.java2d.FontSupport"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="PlatformFont" line="36">
            <comment line="54">
                Maybe this should be a property that is set based                
            </comment>
            <comment line="55">
                on the locale?                
            </comment>
            <comment line="411">
                Create fontCache on demand instead of during construction to
                 reduce overall memory consumption.
                
                 This method is declared final so that its code can be inlined
                 by the compiler.                
            </comment>
            <implements interface="FontPeer"/>
            <scope line="38"/>
            <declaration name="componentFonts" type="FontDescriptor[]" line="43"/>
            <declaration name="defaultChar" type="char" line="44"/>
            <declaration name="fontConfig" type="FontConfiguration" line="45"/>
            <declaration name="defaultFont" type="FontDescriptor" line="47"/>
            <declaration name="familyName" type="String" line="49"/>
            <declaration name="fontCache" type="Object[]" line="51"/>
            <declaration name="FONTCACHESIZE" type="int" line="55"/>
            <declaration name="FONTCACHEMASK" type="int" line="56"/>
            <declaration name="osVersion" type="String" line="57"/>
            <method name="PlatformFont" type="constructor" line="59">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="int"/>
                </params>
                <comment line="68">
                    map given font name to a valid logical font family name                    
                </comment>
                <comment line="76">
                    search default character                    
                </comment>
                <comment line="77">
                                        
                </comment>
                <declaration name="sfm" type="SunFontManager" line="60"/>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="70"/>
                <declaration name="missingGlyphCharacter" type="char" line="78"/>
                <scope line="84">
                    <scope line="85"/>
                    <scope line="89"/>
                </scope>
            </method>
            <method name="getMissingGlyphCharacter" type="char" line="97"/>
            <javadoc line="97">
                Returns the character that should be rendered when a glyph
                  is missing.                
            </javadoc>
            <javadoc line="103">
                make a array of CharsetString with given String.                
            </javadoc>
            <method name="makeMultiCharsetString" type="CharsetString[]" line="106">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="110">
                make a array of CharsetString with given String.                
            </javadoc>
            <method name="makeMultiCharsetString" type="CharsetString[]" line="113">
                <params>
                    <param name="str" type="String"/>
                    <param name="allowdefault" type="boolean"/>
                </params>
            </method>
            <javadoc line="117">
                make a array of CharsetString with given char array.                
                <param>
                    str The char array to convert.                    
                </param>
                <param>
                    offset offset of first character of interest                    
                </param>
                <param>
                    len number of characters to convert                    
                </param>
            </javadoc>
            <method name="makeMultiCharsetString" type="CharsetString[]" line="123">
                <params>
                    <param name="str" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="127">
                make a array of CharsetString with given char array.                
                <param>
                    str The char array to convert.                    
                </param>
                <param>
                    offset offset of first character of interest                    
                </param>
                <param>
                    len number of characters to convert                    
                </param>
                <param>
                    allowDefault whether to allow the default char.
                      Setting this to true overloads the meaning of this method to
                      return non-null only if all chars can be converted.                    
                </param>
                <return>
                    array of CharsetString or if allowDefault is false and any
                      of the returned chars would have been converted to a default char,
                      then return null.
                      This is used to choose alternative means of displaying the text.                    
                </return>
            </javadoc>
            <method name="makeMultiCharsetString" type="CharsetString[]" line="141">
                <params>
                    <param name="str" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="allowDefault" type="boolean"/>
                </params>
                <comment line="159">
                    Need &quot;encoded&quot; variable to distinguish the case when
                     the default char is the same as the encoded char.
                     The defaultChar on Linux is &apos;?&apos; so it is needed there.                    
                </comment>
                <scope line="143"/>
                <declaration name="mcs" type="Vector" line="146"/>
                <declaration name="tmpStr" type="char[]" line="147"/>
                <declaration name="tmpChar" type="char" line="148"/>
                <declaration name="encoded" type="boolean" line="149"/>
                <declaration name="currentFont" type="FontDescriptor" line="151"/>
                <scope line="154">
                    <scope line="155"/>
                    <scope line="163"/>
                </scope>
                <scope line="170"/>
                <scope line="172"/>
                <declaration name="lastIndex" type="int" line="176"/>
                <scope line="177">
                    <declaration name="ch" type="char" line="178"/>
                    <declaration name="fd" type="FontDescriptor" line="179"/>
                    <scope line="182">
                        <scope line="183"/>
                        <scope line="187"/>
                    </scope>
                    <scope line="194"/>
                    <scope line="196"/>
                    <scope line="199">
                        <scope line="200"/>
                    </scope>
                </scope>
                <declaration name="result" type="CharsetString[]" line="210"/>
                <declaration name="cs" type="CharsetString" line="211"/>
                <scope line="213"/>
                <scope line="216">
                    <scope line="219"/>
                </scope>
            </method>
            <javadoc line="226">
                Is it possible that this font&apos;s metrics require the multi-font calls?
                  This might be true, for example, if the font supports kerning.                
            </javadoc>
            <method name="mightHaveMultiFontMetrics" type="boolean" line="230"/>
            <javadoc line="234">
                Specialized fast path string conversion for AWT.                
            </javadoc>
            <method name="makeConvertedMultiFontString" type="Object[]" line="238">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <method name="makeConvertedMultiFontChars" type="Object[]" line="244">
                <params>
                    <param name="data" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="257">
                    Simple bounds check                    
                </comment>
                <comment line="267">
                    coversion loop                    
                </comment>
                <comment line="272">
                    Note that cache sizes must be a power of two!                    
                </comment>
                <comment line="277">
                    Is the unicode char we want cached?                    
                </comment>
                <comment line="280">
                                        
                </comment>
                <comment line="290">
                    fontDescriptor.encoder.onUnmappleCharacterAction(...);                    
                </comment>
                <comment line="307">
                    currentFontDescriptor.unicodeEncoder.encode(CharBuffer.wrap(input),
                    theChar.bb,
                    true);                    
                </comment>
                <comment line="329">
                    Should never happen!                    
                </comment>
                <comment line="336">
                    Check to see if we&apos;ve changed fonts.                    
                </comment>
                <comment line="341">
                    Add the size to the converted data field.                    
                </comment>
                <comment line="399">
                    Add the size to the converted data field.                    
                </comment>
                <declaration name="result" type="Object[]" line="245"/>
                <declaration name="workingCache" type="Object[]" line="246"/>
                <declaration name="convertedData" type="byte[]" line="247"/>
                <declaration name="stringIndex" type="int" line="248"/>
                <declaration name="convertedDataIndex" type="int" line="249"/>
                <declaration name="resultIndex" type="int" line="250"/>
                <declaration name="cacheIndex" type="int" line="251"/>
                <declaration name="currentFontDescriptor" type="FontDescriptor" line="252"/>
                <declaration name="lastFontDescriptor" type="FontDescriptor" line="253"/>
                <declaration name="currentDefaultChar" type="char" line="254"/>
                <declaration name="theChar" type="PlatformFontCache" line="255"/>
                <declaration name="end" type="int" line="258"/>
                <scope line="259"/>
                <scope line="263"/>
                <scope line="269">
                    <scope line="279">
                        <declaration name="ch" type="char" line="283"/>
                        <declaration name="componentCount" type="int" line="284"/>
                        <scope line="286">
                            <declaration name="fontDescriptor" type="FontDescriptor" line="287"/>
                            <scope line="292"/>
                            <scope line="295"/>
                        </scope>
                        <scope line="301">
                            <declaration name="input" type="char[]" line="302"/>
                            <scope line="306">
                                <scope line="312"/>
                                <scope line="315"/>
                            </scope>
                            <scope line="320"/>
                        </scope>
                        <scope line="328"/>
                    </scope>
                    <scope line="337">
                        <scope line="338">
                            <scope line="342"/>
                            <scope line="350">
                                <declaration name="newResult" type="Object[]" line="351"/>
                            </scope>
                        </scope>
                        <scope line="359"/>
                        <scope line="364"/>
                    </scope>
                    <declaration name="ba" type="byte[]" line="375"/>
                    <declaration name="size" type="int" line="376"/>
                    <scope line="377"/>
                    <scope line="380"/>
                    <scope line="383"/>
                    <scope line="387"/>
                </scope>
                <scope line="400"/>
            </method>
            <method name="getFontCache" type="Object[]" line="417">
                <comment line="418">
                    This method is not MT-safe by design. Since this is just a                    
                </comment>
                <comment line="419">
                    cache anyways, it&apos;s okay if we occasionally allocate the array                    
                </comment>
                <comment line="420">
                    twice or return an array which will be dereferenced and gced                    
                </comment>
                <comment line="421">
                    right away.                    
                </comment>
                <scope line="422"/>
            </method>
            <method name="initIDs" type="void" line="429"/>
            <javadoc line="429">
                Initialize JNI field and method IDs                
            </javadoc>
            <class name="PlatformFontCache" line="434">
                <declaration name="uniChar" type="char" line="436"/>
                <declaration name="fontDescriptor" type="FontDescriptor" line="437"/>
                <declaration name="bb" type="ByteBuffer" line="438"/>
            </class>
        </class>
    </source>