<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.RenderingHints"/>
        <class name="SunHints" line="3">
            <javadoc line="3">
                This class contains rendering hints that can be used by the{@link java.awt.Graphics2D} class, and classes that implement{@link java.awt.image.BufferedImageOp} and{@link java.awt.image.Raster}.                
            </javadoc>
            <class name="Key" line="7">
                <extends class="RenderingHints.Key"/>
                <javadoc line="7">
                    Defines the type of all keys used to control various
                      aspects of the rendering and imaging pipelines.  Instances
                      of this class are immutable and unique which means that
                      tests for matches can be made using the == operator instead
                      of the more expensive equals() method.                    
                </javadoc>
                <declaration name="description" type="String" line="15"/>
                <javadoc line="16">
                    Construct a key using the indicated private key.  Each
                      subclass of Key maintains its own unique domain of integer
                      keys.  No two objects with the same integer key and of the
                      same specific subclass can be constructed.  An exception
                      will be thrown if an attempt is made to construct another
                      object of a given class with the same integer key as a
                      pre-existing instance of that subclass of Key.                    
                </javadoc>
                <method name="Key" type="constructor" line="25">
                    <params>
                        <param name="privatekey" type="int"/>
                        <param name="description" type="String"/>
                    </params>
                </method>
                <javadoc line="29">
                    Returns the numeric index associated with this Key.  This
                      is useful for use in switch statements and quick lookups
                      of the setting of a particular key.                    
                </javadoc>
                <method name="getIndex" type="int" line="34"/>
                <javadoc line="37">
                    Returns a string representation of the Key.                    
                </javadoc>
                <method name="toString" type="String" line="40"/>
                <javadoc line="43">
                    Returns true if the specified object is a valid value
                      for this Key.                    
                </javadoc>
                <method name="isCompatibleValue" type="boolean" line="47">
                    <params>
                        <param name="val" type="Object"/>
                    </params>
                    <scope line="48"/>
                </method>
            </class>
            <class name="Value" line="54">
                <javadoc line="54">
                    Defines the type of all &quot;enumerative&quot; values used to control
                      various aspects of the rendering and imaging pipelines.  Instances
                      of this class are immutable and unique which means that
                      tests for matches can be made using the == operator instead
                      of the more expensive equals() method.                    
                </javadoc>
                <declaration name="myKey" type="SunHints.Key" line="62"/>
                <declaration name="index" type="int" line="63"/>
                <declaration name="description" type="String" line="64"/>
                <declaration name="ValueObjects" type="Value[][]" line="65"/>
                <method name="register" type="void" line="66">
                    <params>
                        <param name="key" type="SunHints.Key"/>
                        <param name="value" type="Value"/>
                    </params>
                    <declaration name="kindex" type="int" line="67"/>
                    <declaration name="vindex" type="int" line="68"/>
                    <scope line="69"/>
                </method>
                <method name="get" type="Value" line="74">
                    <params>
                        <param name="keyindex" type="int"/>
                        <param name="valueindex" type="int"/>
                    </params>
                </method>
                <javadoc line="77">
                    Construct a value using the indicated private index.  Each
                      subclass of Value maintains its own unique domain of integer
                      indices.  Enforcing the uniqueness of the integer indices
                      is left to the subclass.                    
                </javadoc>
                <method name="Value" type="constructor" line="83">
                    <params>
                        <param name="key" type="SunHints.Key"/>
                        <param name="index" type="int"/>
                        <param name="description" type="String"/>
                    </params>
                </method>
                <javadoc line="89">
                    Returns the numeric index associated with this Key.  This
                      is useful for use in switch statements and quick lookups
                      of the setting of a particular key.                    
                </javadoc>
                <method name="getIndex" type="int" line="94"/>
                <javadoc line="97">
                    Returns a string representation of this Value.                    
                </javadoc>
                <method name="toString" type="String" line="100"/>
                <javadoc line="103">
                    Returns true if the specified object is a valid Key
                      for this Value.                    
                </javadoc>
                <method name="isCompatibleKey" type="boolean" line="107">
                    <params>
                        <param name="k" type="Key"/>
                    </params>
                </method>
                <javadoc line="110">
                    The hash code for all SunHints.Value objects will be the same
                      as the system identity code of the object as defined by the
                      System.identityHashCode() method.                    
                </javadoc>
                <method name="hashCode" type="int" line="115"/>
                <javadoc line="118">
                    The equals method for all SunHints.Value objects will return
                      the same result as the equality operator &apos;==&apos;.                    
                </javadoc>
                <method name="equals" type="boolean" line="122">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <declaration name="NUM_KEYS" type="int" line="126"/>
            <declaration name="VALS_PER_KEY" type="int" line="127"/>
            <declaration name="INTKEY_RENDERING" type="int" line="128"/>
            <javadoc line="128">
                Rendering hint key and values                
            </javadoc>
            <declaration name="INTVAL_RENDER_DEFAULT" type="int" line="132"/>
            <declaration name="INTVAL_RENDER_SPEED" type="int" line="133"/>
            <declaration name="INTVAL_RENDER_QUALITY" type="int" line="134"/>
            <declaration name="INTKEY_ANTIALIASING" type="int" line="135"/>
            <javadoc line="135">
                Antialiasing hint key and values                
            </javadoc>
            <declaration name="INTVAL_ANTIALIAS_DEFAULT" type="int" line="139"/>
            <declaration name="INTVAL_ANTIALIAS_OFF" type="int" line="140"/>
            <declaration name="INTVAL_ANTIALIAS_ON" type="int" line="141"/>
            <declaration name="INTKEY_TEXT_ANTIALIASING" type="int" line="142"/>
            <javadoc line="142">
                Text antialiasing hint key and values                
            </javadoc>
            <declaration name="INTVAL_TEXT_ANTIALIAS_DEFAULT" type="int" line="146"/>
            <declaration name="INTVAL_TEXT_ANTIALIAS_OFF" type="int" line="147"/>
            <declaration name="INTVAL_TEXT_ANTIALIAS_ON" type="int" line="148"/>
            <declaration name="INTVAL_TEXT_ANTIALIAS_GASP" type="int" line="149"/>
            <declaration name="INTVAL_TEXT_ANTIALIAS_LCD_HRGB" type="int" line="150"/>
            <declaration name="INTVAL_TEXT_ANTIALIAS_LCD_HBGR" type="int" line="151"/>
            <declaration name="INTVAL_TEXT_ANTIALIAS_LCD_VRGB" type="int" line="152"/>
            <declaration name="INTVAL_TEXT_ANTIALIAS_LCD_VBGR" type="int" line="153"/>
            <declaration name="INTKEY_FRACTIONALMETRICS" type="int" line="154"/>
            <javadoc line="154">
                Font fractional metrics hint key and values                
            </javadoc>
            <declaration name="INTVAL_FRACTIONALMETRICS_DEFAULT" type="int" line="158"/>
            <declaration name="INTVAL_FRACTIONALMETRICS_OFF" type="int" line="159"/>
            <declaration name="INTVAL_FRACTIONALMETRICS_ON" type="int" line="160"/>
            <declaration name="INTKEY_DITHERING" type="int" line="161"/>
            <javadoc line="161">
                Dithering hint key and values                
            </javadoc>
            <declaration name="INTVAL_DITHER_DEFAULT" type="int" line="165"/>
            <declaration name="INTVAL_DITHER_DISABLE" type="int" line="166"/>
            <declaration name="INTVAL_DITHER_ENABLE" type="int" line="167"/>
            <declaration name="INTKEY_INTERPOLATION" type="int" line="168"/>
            <javadoc line="168">
                Interpolation hint key and values                
            </javadoc>
            <declaration name="INTVAL_INTERPOLATION_NEAREST_NEIGHBOR" type="int" line="172"/>
            <declaration name="INTVAL_INTERPOLATION_BILINEAR" type="int" line="173"/>
            <declaration name="INTVAL_INTERPOLATION_BICUBIC" type="int" line="174"/>
            <declaration name="INTKEY_ALPHA_INTERPOLATION" type="int" line="175"/>
            <javadoc line="175">
                Alpha interpolation hint key and values                
            </javadoc>
            <declaration name="INTVAL_ALPHA_INTERPOLATION_DEFAULT" type="int" line="179"/>
            <declaration name="INTVAL_ALPHA_INTERPOLATION_SPEED" type="int" line="180"/>
            <declaration name="INTVAL_ALPHA_INTERPOLATION_QUALITY" type="int" line="181"/>
            <declaration name="INTKEY_COLOR_RENDERING" type="int" line="182"/>
            <javadoc line="182">
                Color rendering hint key and values                
            </javadoc>
            <declaration name="INTVAL_COLOR_RENDER_DEFAULT" type="int" line="186"/>
            <declaration name="INTVAL_COLOR_RENDER_SPEED" type="int" line="187"/>
            <declaration name="INTVAL_COLOR_RENDER_QUALITY" type="int" line="188"/>
            <declaration name="INTKEY_STROKE_CONTROL" type="int" line="189"/>
            <javadoc line="189">
                Stroke normalization control hint key and values                
            </javadoc>
            <declaration name="INTVAL_STROKE_DEFAULT" type="int" line="193"/>
            <declaration name="INTVAL_STROKE_NORMALIZE" type="int" line="194"/>
            <declaration name="INTVAL_STROKE_PURE" type="int" line="195"/>
            <declaration name="INTKEY_AATEXT_LCD_CONTRAST" type="int" line="196"/>
            <javadoc line="196">
                LCD text contrast control hint key.
                  Value is &quot;100&quot; to make discontiguous with the others which
                  are all enumerative and are of a different class.                
            </javadoc>
            <declaration name="KEY_RENDERING" type="Key" line="202"/>
            <javadoc line="202">
                Rendering hint key and value objects                
            </javadoc>
            <declaration name="VALUE_RENDER_SPEED" type="Object" line="206"/>
            <declaration name="VALUE_RENDER_QUALITY" type="Object" line="207"/>
            <declaration name="VALUE_RENDER_DEFAULT" type="Object" line="208"/>
            <declaration name="KEY_ANTIALIASING" type="Key" line="209"/>
            <javadoc line="209">
                Antialiasing hint key and value objects                
            </javadoc>
            <declaration name="VALUE_ANTIALIAS_ON" type="Object" line="213"/>
            <declaration name="VALUE_ANTIALIAS_OFF" type="Object" line="214"/>
            <declaration name="VALUE_ANTIALIAS_DEFAULT" type="Object" line="215"/>
            <declaration name="KEY_TEXT_ANTIALIASING" type="Key" line="216"/>
            <javadoc line="216">
                Text antialiasing hint key and value objects                
            </javadoc>
            <declaration name="VALUE_TEXT_ANTIALIAS_ON" type="Object" line="220"/>
            <declaration name="VALUE_TEXT_ANTIALIAS_OFF" type="Object" line="221"/>
            <declaration name="VALUE_TEXT_ANTIALIAS_DEFAULT" type="Object" line="222"/>
            <declaration name="VALUE_TEXT_ANTIALIAS_GASP" type="Object" line="223"/>
            <declaration name="VALUE_TEXT_ANTIALIAS_LCD_HRGB" type="Object" line="224"/>
            <declaration name="VALUE_TEXT_ANTIALIAS_LCD_HBGR" type="Object" line="225"/>
            <declaration name="VALUE_TEXT_ANTIALIAS_LCD_VRGB" type="Object" line="226"/>
            <declaration name="VALUE_TEXT_ANTIALIAS_LCD_VBGR" type="Object" line="227"/>
            <declaration name="KEY_FRACTIONALMETRICS" type="Key" line="228"/>
            <javadoc line="228">
                Font fractional metrics hint key and value objects                
            </javadoc>
            <declaration name="VALUE_FRACTIONALMETRICS_ON" type="Object" line="232"/>
            <declaration name="VALUE_FRACTIONALMETRICS_OFF" type="Object" line="233"/>
            <declaration name="VALUE_FRACTIONALMETRICS_DEFAULT" type="Object" line="234"/>
            <declaration name="KEY_DITHERING" type="Key" line="235"/>
            <javadoc line="235">
                Dithering hint key and value objects                
            </javadoc>
            <declaration name="VALUE_DITHER_ENABLE" type="Object" line="239"/>
            <declaration name="VALUE_DITHER_DISABLE" type="Object" line="240"/>
            <declaration name="VALUE_DITHER_DEFAULT" type="Object" line="241"/>
            <declaration name="KEY_INTERPOLATION" type="Key" line="242"/>
            <javadoc line="242">
                Interpolation hint key and value objects                
            </javadoc>
            <declaration name="VALUE_INTERPOLATION_NEAREST_NEIGHBOR" type="Object" line="246"/>
            <declaration name="VALUE_INTERPOLATION_BILINEAR" type="Object" line="247"/>
            <declaration name="VALUE_INTERPOLATION_BICUBIC" type="Object" line="248"/>
            <declaration name="KEY_ALPHA_INTERPOLATION" type="Key" line="249"/>
            <javadoc line="249">
                Alpha interpolation hint key and value objects                
            </javadoc>
            <declaration name="VALUE_ALPHA_INTERPOLATION_SPEED" type="Object" line="253"/>
            <declaration name="VALUE_ALPHA_INTERPOLATION_QUALITY" type="Object" line="254"/>
            <declaration name="VALUE_ALPHA_INTERPOLATION_DEFAULT" type="Object" line="255"/>
            <declaration name="KEY_COLOR_RENDERING" type="Key" line="256"/>
            <javadoc line="256">
                Color rendering hint key and value objects                
            </javadoc>
            <declaration name="VALUE_COLOR_RENDER_SPEED" type="Object" line="260"/>
            <declaration name="VALUE_COLOR_RENDER_QUALITY" type="Object" line="261"/>
            <declaration name="VALUE_COLOR_RENDER_DEFAULT" type="Object" line="262"/>
            <declaration name="KEY_STROKE_CONTROL" type="Key" line="263"/>
            <javadoc line="263">
                Stroke normalization control hint key and value objects                
            </javadoc>
            <declaration name="VALUE_STROKE_DEFAULT" type="Object" line="267"/>
            <declaration name="VALUE_STROKE_NORMALIZE" type="Object" line="268"/>
            <declaration name="VALUE_STROKE_PURE" type="Object" line="269"/>
            <class name="LCDContrastKey" line="270">
                <extends class="Key"/>
                <method name="LCDContrastKey" type="constructor" line="271">
                    <params>
                        <param name="privatekey" type="int"/>
                        <param name="description" type="String"/>
                    </params>
                </method>
                <javadoc line="274">
                    Returns true if the specified object is a valid value
                      for this Key. The allowable range is 100 to 250.                    
                </javadoc>
                <method name="isCompatibleValue" type="boolean" line="278">
                    <params>
                        <param name="val" type="Object"/>
                    </params>
                    <scope line="279">
                        <declaration name="ival" type="int" line="280"/>
                    </scope>
                </method>
            </class>
            <declaration name="KEY_TEXT_ANTIALIAS_LCD_CONTRAST" type="RenderingHints.Key" line="286"/>
            <javadoc line="286">
                LCD text contrast hint key                
            </javadoc>
        </class>
    </source>