<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.InvocationEvent"/>
        <class name="GlobalCursorManager" line="5">
            <javadoc line="5">
                A stateless class which responds to native mouse moves, Component resizes,
                  Component moves, showing and hiding of Components, minimizing and
                  maximizing of top level Windows, addition and removal of Components,
                  and calls to setCursor().                
            </javadoc>
            <class name="NativeUpdater" line="12">
                <implements interface="Runnable"/>
                <declaration name="pending" type="boolean" line="13"/>
                <method name="run" type="void" line="14">
                    <declaration name="shouldUpdate" type="boolean" line="15"/>
                    <scope line="16">
                        <scope line="17"/>
                    </scope>
                    <scope line="22"/>
                </method>
                <method name="postIfNotPending" type="void" line="26">
                    <params>
                        <param name="heavy" type="Component"/>
                        <param name="in" type="InvocationEvent"/>
                    </params>
                    <declaration name="shouldPost" type="boolean" line="27"/>
                    <scope line="28">
                        <scope line="29"/>
                    </scope>
                    <scope line="33"/>
                </method>
            </class>
            <declaration name="nativeUpdater" type="NativeUpdater" line="38"/>
            <javadoc line="38">
                Use a singleton NativeUpdater for better performance. We cannot use
                  a singleton InvocationEvent because we want each event to have a fresh
                  timestamp.                
            </javadoc>
            <declaration name="lastUpdateMillis" type="long" line="44"/>
            <javadoc line="44">
                The last time the cursor was updated, in milliseconds.                
            </javadoc>
            <declaration name="lastUpdateLock" type="Object" line="48"/>
            <javadoc line="48">
                Locking object for synchronizing access to lastUpdateMillis. The VM
                  does not guarantee atomicity of longs.                
            </javadoc>
            <javadoc line="53">
                Should be called for any activity at the Java level which may affect
                  the global cursor, except for Java MOUSE_MOVED events.                
            </javadoc>
            <method name="updateCursorImmediately" type="void" line="57">
                <scope line="58"/>
            </method>
            <javadoc line="63">
                Should be called in response to Java MOUSE_MOVED events. The update
                  will be discarded if the InputEvent is outdated.                
                <param>
                    e the InputEvent which triggered the cursor update.                    
                </param>
            </javadoc>
            <method name="updateCursorImmediately" type="void" line="68">
                <params>
                    <param name="e" type="InputEvent"/>
                </params>
                <declaration name="shouldUpdate" type="boolean" line="69"/>
                <scope line="70"/>
                <scope line="73"/>
            </method>
            <javadoc line="77">
                Should be called in response to a native mouse enter or native mouse
                  button released message. Should not be called during a mouse drag.                
            </javadoc>
            <method name="updateCursorLater" type="void" line="81">
                <params>
                    <param name="heavy" type="Component"/>
                </params>
            </method>
            <method name="GlobalCursorManager" type="constructor" line="84"/>
            <method name="setCursor" type="void" line="86"/>
            <javadoc line="86">
                Set the global cursor to the specified cursor. The component over
                  which the Cursor current resides is provided as a convenience. Not
                  all platforms may require the Component.                
            </javadoc>
            <method name="getCursorPos" type="void" line="92"/>
            <javadoc line="92">
                Returns the global cursor position, in screen coordinates.                
            </javadoc>
            <method name="findComponentAt" type="Component" line="96"/>
            <method name="getLocationOnScreen" type="Point" line="97"/>
            <method name="findHeavyweightUnderCursor" type="Component" line="98"/>
            <javadoc line="98">
                Returns the most specific, visible, heavyweight Component
                  under the cursor. This method should return null iff the cursor is
                  not over any Java Window.                
                <param>
                    useCache If true, the implementation is free to use caching
                      mechanisms because the Z-order, visibility, and enabled state of the
                      Components has not changed. If false, the implementation should not
                      make these assumptions.                    
                </param>
            </javadoc>
            <javadoc line="108">
                Updates the global cursor. We apply a three-step scheme to cursor
                  updates:&lt;p&gt;
                  (1) InputEvent updates which are outdated are discarded by
                  &lt;code&gt;updateCursorImmediately(InputEvent)&lt;/code&gt;.&lt;p&gt;
                  (2) If &apos;useCache&apos; is true, the native code is free to use a cached
                  value to determine the most specific, visible, enabled heavyweight
                  because this update is occuring in response to a mouse move. If
                  &apos;useCache&apos; is false, the native code must perform a new search given
                  the current mouse coordinates.
                  (3) Once we have determined the most specific, visible, enabled
                  heavyweight, we use findComponentAt to find the most specific, visible,
                  enabled Component.                
            </javadoc>
            <method name="_updateCursor" type="void" line="122">
                <params>
                    <param name="useCache" type="boolean"/>
                </params>
                <scope line="123"/>
                <declaration name="queryPos" type="Point" line="126"/>
                <declaration name="comp" type="Component" line="127"/>
                <scope line="128">
                    <scope line="130"/>
                    <scope line="134"/>
                    <scope line="137"/>
                    <scope line="140">
                        <declaration name="c" type="Component" line="143"/>
                        <scope line="144"/>
                    </scope>
                </scope>
                <scope line="150"/>
            </method>
            <method name="updateCursorOutOfJava" type="void" line="153"/>
        </class>
    </source>