<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.dnd">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.dnd.DnDConstants"/>
        <import package="java.awt.dnd.DragSourceContext"/>
        <import package="java.awt.dnd.DragSourceEvent"/>
        <import package="java.awt.dnd.DragSourceDropEvent"/>
        <import package="java.awt.dnd.DragSourceDragEvent"/>
        <import package="java.awt.dnd.DragGestureEvent"/>
        <import package="java.awt.dnd.InvalidDnDOperationException"/>
        <import package="java.awt.dnd.peer.DragSourceContextPeer"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.util.Map"/>
        <import package="java.util.SortedMap"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.datatransfer.DataTransferer"/>
        <class name="SunDragSourceContextPeer" line="56">
            <comment line="80">
                dispatch constants                
            </comment>
            <implements interface="DragSourceContextPeer"/>
            <javadoc line="56">
                &lt;p&gt;
                  TBC
                  &lt;/p&gt;                
                <since>
                    JDK1.3.1                    
                </since>
            </javadoc>
            <declaration name="trigger" type="DragGestureEvent" line="67"/>
            <declaration name="component" type="Component" line="68"/>
            <declaration name="cursor" type="Cursor" line="69"/>
            <declaration name="dragImage" type="Image" line="70"/>
            <declaration name="dragImageOffset" type="Point" line="71"/>
            <declaration name="nativeCtxt" type="long" line="72"/>
            <declaration name="dragSourceContext" type="DragSourceContext" line="73"/>
            <declaration name="sourceActions" type="int" line="74"/>
            <declaration name="dragDropInProgress" type="boolean" line="76"/>
            <declaration name="discardingMouseEvents" type="boolean" line="77"/>
            <declaration name="DISPATCH_ENTER" type="int" line="83"/>
            <declaration name="DISPATCH_MOTION" type="int" line="84"/>
            <declaration name="DISPATCH_CHANGED" type="int" line="85"/>
            <declaration name="DISPATCH_EXIT" type="int" line="86"/>
            <declaration name="DISPATCH_FINISH" type="int" line="87"/>
            <declaration name="DISPATCH_MOUSE_MOVED" type="int" line="88"/>
            <javadoc line="90">
                construct a new SunDragSourceContextPeer                
            </javadoc>
            <method name="SunDragSourceContextPeer" type="constructor" line="94">
                <params>
                    <param name="dge" type="DragGestureEvent"/>
                </params>
                <scope line="96"/>
                <scope line="98"/>
            </method>
            <javadoc line="103">
                Synchro messages in AWT                
            </javadoc>
            <method name="startSecondaryEventLoop" type="void" line="106"/>
            <method name="quitSecondaryEventLoop" type="void" line="107"/>
            <javadoc line="109">
                initiate a DnD operation ...                
            </javadoc>
            <method name="startDrag" type="void" line="114">
                <params>
                    <param name="dsc" type="DragSourceContext"/>
                    <param name="c" type="Cursor"/>
                    <param name="di" type="Image"/>
                    <param name="p" type="Point"/>
                </params>
                <comment line="117">
                    Fix for 4354044: don&apos;t initiate a drag if event sequence provided by                    
                </comment>
                <comment line="137">
                    Fix for 4613903.
                     Filter out all mouse events that are currently on the event queue.                    
                </comment>
                <scope line="118"/>
                <declaration name="transferable" type="Transferable" line="128"/>
                <declaration name="formatMap" type="SortedMap" line="129"/>
                <declaration name="formats" type="long[]" line="132"/>
                <anonymous_class line="141">
                    <method name="run" type="void" line="142"/>
                </anonymous_class>
            </method>
            <method name="startDrag" type="void" line="148"/>
            <javadoc line="151">
                set cursor                
            </javadoc>
            <method name="setCursor" type="void" line="155">
                <params>
                    <param name="c" type="Cursor"/>
                </params>
                <comment line="160">
                    NOTE: native context can be null at this point.
                     setNativeCursor() should handle it properly.                    
                </comment>
                <scope line="156">
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="167">
                return cursor                
            </javadoc>
            <method name="getCursor" type="Cursor" line="171"/>
            <javadoc line="175">
                Returns the drag image. If there is no image to drag,
                  the returned value is {@code null}                
                <return>
                    the reference to the drag image                    
                </return>
            </javadoc>
            <method name="getDragImage" type="Image" line="181"/>
            <javadoc line="185">
                Returns an anchor offset for the image to drag.                
                <return>
                    a {@code Point} object that corresponds
                      to coordinates of an anchor offset of the image
                      relative to the upper left corner of the image.
                      The point {@code (0,0)} returns by default.                    
                </return>
            </javadoc>
            <method name="getDragImageOffset" type="Point" line="193">
                <scope line="194"/>
            </method>
            <method name="setNativeCursor" type="void" line="200"/>
            <javadoc line="200">
                downcall into native code                
            </javadoc>
            <method name="setTrigger" type="void" line="208">
                <params>
                    <param name="dge" type="DragGestureEvent"/>
                </params>
                <scope line="210"/>
                <scope line="212"/>
            </method>
            <method name="getTrigger" type="DragGestureEvent" line="217"/>
            <method name="getComponent" type="Component" line="221"/>
            <method name="setNativeContext" type="void" line="225">
                <params>
                    <param name="ctxt" type="long"/>
                </params>
            </method>
            <method name="getNativeContext" type="long" line="229"/>
            <method name="getDragSourceContext" type="DragSourceContext" line="233"/>
            <javadoc line="237">
                Notify the peer that the transferables&apos; DataFlavors have changed.
                  No longer useful as the transferables are determined at the time
                  of the drag.                
            </javadoc>
            <method name="transferablesFlavorsChanged" type="void" line="244"/>
            <method name="postDragSourceDragEvent" type="void" line="254">
                <params>
                    <param name="targetAction" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="dispatchType" type="int"/>
                </params>
                <declaration name="dropAction" type="int" line="256"/>
                <declaration name="event" type="DragSourceDragEvent" line="260"/>
                <declaration name="dispatcher" type="EventDispatcher" line="265"/>
            </method>
            <javadoc line="273">
                upcall from native code                
            </javadoc>
            <method name="dragEnter" type="void" line="279">
                <params>
                    <param name="targetActions" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="283">
                upcall from native code                
            </javadoc>
            <method name="dragMotion" type="void" line="289">
                <params>
                    <param name="targetActions" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="293">
                upcall from native code                
            </javadoc>
            <method name="operationChanged" type="void" line="299">
                <params>
                    <param name="targetActions" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="303">
                upcall from native code                
            </javadoc>
            <method name="dragExit" type="void" line="307">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="event" type="DragSourceEvent" line="308"/>
                <declaration name="dispatcher" type="EventDispatcher" line="310"/>
            </method>
            <javadoc line="319">
                upcall from native code                
            </javadoc>
            <method name="dragMouseMoved" type="void" line="325">
                <params>
                    <param name="targetActions" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="330">
                upcall from native code via implemented class (do)                
            </javadoc>
            <method name="dragDropFinished" type="void" line="336">
                <params>
                    <param name="success" type="boolean"/>
                    <param name="operations" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="event" type="DragSourceEvent" line="337"/>
                <declaration name="dispatcher" type="EventDispatcher" line="341"/>
            </method>
            <method name="setDragDropInProgress" type="void" line="354">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="355"/>
                <scope line="359">
                    <scope line="360"/>
                </scope>
            </method>
            <javadoc line="367">
                Filters out all mouse events that were on the java event queue when
                  startDrag was called.                
            </javadoc>
            <method name="checkEvent" type="boolean" line="371">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <scope line="372">
                    <declaration name="mouseEvent" type="MouseEvent" line="373"/>
                    <scope line="374"/>
                </scope>
            </method>
            <method name="checkDragDropInProgress" type="void" line="382">
                <scope line="383"/>
            </method>
            <method name="getExceptionMessage" type="String" line="388">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="convertModifiersToDropAction" type="int" line="393">
                <params>
                    <param name="modifiers" type="int"/>
                    <param name="supportedActions" type="int"/>
                </params>
                <comment line="397">
                    Fix for 4285634.
                     Calculate the drop action to match Motif DnD behavior.
                     If the user selects an operation (by pressing a modifier key),
                     return the selected operation or ACTION_NONE if the selected
                     operation is not supported by the drag source.
                     If the user doesn&apos;t select an operation search the set of operations
                     supported by the drag source for ACTION_MOVE, then for
                     ACTION_COPY, then for ACTION_LINK and return the first operation
                     found.                    
                </comment>
                <declaration name="dropAction" type="int" line="394"/>
                <scope line="416"/>
                <scope line="418"/>
                <scope line="420"/>
            </method>
            <method name="cleanup" type="void" line="428"/>
            <class name="EventDispatcher" line="437">
                <implements interface="Runnable"/>
                <declaration name="dispatchType" type="int" line="439"/>
                <declaration name="event" type="DragSourceEvent" line="441"/>
                <method name="EventDispatcher" type="constructor" line="443">
                    <params>
                        <param name="dispatchType" type="int"/>
                        <param name="event" type="DragSourceEvent"/>
                    </params>
                    <scope line="449"/>
                    <scope line="456"/>
                </method>
                <method name="run" type="void" line="469">
                    <declaration name="dragSourceContext" type="DragSourceContext" line="470"/>
                    <scope line="472">
                        <scope line="490"/>
                        <scope line="492"/>
                    </scope>
                    <scope line="500"/>
                </method>
            </class>
        </class>
    </source>