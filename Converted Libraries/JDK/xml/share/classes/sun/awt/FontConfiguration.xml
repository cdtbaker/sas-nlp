<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.Font"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map.Entry"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="sun.font.CompositeFontDescriptor"/>
        <import package="sun.font.SunFontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="FontConfiguration" line="28">
            <javadoc line="28">
                Provides the definitions of the five logical fonts: Serif, SansSerif,
                  Monospaced, Dialog, and DialogInput. The necessary information
                  is obtained from fontconfig files.                
            </javadoc>
            <declaration name="osVersion" type="String" line="34"/>
            <declaration name="osName" type="String" line="35"/>
            <declaration name="encoding" type="String" line="36"/>
            <declaration name="startupLocale" type="Locale" line="37"/>
            <declaration name="localeMap" type="Hashtable" line="38"/>
            <declaration name="fontConfig" type="FontConfiguration" line="39"/>
            <declaration name="logger" type="PlatformLogger" line="40"/>
            <declaration name="isProperties" type="boolean" line="41"/>
            <declaration name="fontManager" type="SunFontManager" line="42"/>
            <declaration name="preferLocaleFonts" type="boolean" line="43"/>
            <declaration name="preferPropFonts" type="boolean" line="44"/>
            <declaration name="fontConfigFile" type="File" line="45"/>
            <declaration name="foundOsSpecificFile" type="boolean" line="46"/>
            <declaration name="inited" type="boolean" line="47"/>
            <declaration name="javaLib" type="String" line="48"/>
            <method name="FontConfiguration" type="constructor" line="49">
                <params>
                    <param name="fm" type="SunFontManager"/>
                </params>
                <scope line="50"/>
                <scope line="53"/>
            </method>
            <method name="init" type="boolean" line="61">
                <scope line="62"/>
            </method>
            <method name="FontConfiguration" type="constructor" line="72">
                <params>
                    <param name="fm" type="SunFontManager"/>
                    <param name="preferLocaleFonts" type="boolean"/>
                    <param name="preferPropFonts" type="boolean"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="81">
                Fills in this instance&apos;s osVersion and osName members. By
                  default uses the system properties os.name and os.version;
                  subclasses may override.                
            </javadoc>
            <method name="setOsNameAndVersion" type="void" line="86"/>
            <method name="setEncoding" type="void" line="90"/>
            <method name="foundOsSpecificFile" type="boolean" line="94"/>
            <method name="fontFilesArePresent" type="boolean" line="97">
                <declaration name="fontNameID" type="short" line="99"/>
                <declaration name="fileNameID" type="short" line="100"/>
                <declaration name="fileName" type="String" line="101"/>
                <anonymous_class line="102">
                    <method name="run" type="Object" line="103">
                        <scope line="104">
                            <declaration name="f" type="File" line="105"/>
                        </scope>
                        <scope line="108"/>
                    </method>
                </anonymous_class>
                <declaration name="exists" type="Boolean" line="102"/>
            </method>
            <method name="findFontConfigFile" type="void" line="116">
                <declaration name="javaHome" type="String" line="118"/>
                <scope line="119"/>
                <declaration name="userConfigFile" type="String" line="123"/>
                <scope line="124"/>
                <scope line="127"/>
            </method>
            <method name="readFontConfigFile" type="void" line="131">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="133">
                    <scope line="134">
                        <declaration name="in" type="FileInputStream" line="135"/>
                        <scope line="136"/>
                        <scope line="139"/>
                        <scope line="143"/>
                    </scope>
                    <scope line="147">
                        <scope line="148"/>
                    </scope>
                </scope>
                <declaration name="version" type="String" line="153"/>
                <scope line="154"/>
            </method>
            <method name="getInstalledFallbackFonts" type="void" line="158">
                <params>
                    <param name="javaLib" type="String"/>
                </params>
                <declaration name="fallbackDirName" type="String" line="159"/>
                <declaration name="fallbackDir" type="File" line="160"/>
                <scope line="161">
                    <declaration name="ttfs" type="String[]" line="162"/>
                    <declaration name="t1s" type="String[]" line="163"/>
                    <declaration name="numTTFs" type="int" line="164"/>
                    <declaration name="numT1s" type="int" line="165"/>
                    <declaration name="len" type="int" line="166"/>
                    <scope line="167"/>
                    <scope line="171"/>
                    <scope line="174"/>
                </scope>
            </method>
            <method name="findImpl" type="File" line="180">
                <params>
                    <param name="fname" type="String"/>
                </params>
                <declaration name="f" type="File" line="181"/>
                <scope line="182"/>
                <scope line="187"/>
            </method>
            <method name="findFontConfigFile" type="File" line="193">
                <params>
                    <param name="javaLib" type="String"/>
                </params>
                <declaration name="baseName" type="String" line="194"/>
                <declaration name="configFile" type="File" line="195"/>
                <scope line="196">
                    <scope line="198"/>
                </scope>
                <scope line="202">
                    <scope line="204"/>
                </scope>
                <scope line="208">
                    <scope line="210"/>
                </scope>
                <scope line="216"/>
            </method>
            <method name="loadBinary" type="void" line="221">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
                <declaration name="in" type="DataInputStream" line="222"/>
                <declaration name="tableSizes" type="int[]" line="224"/>
                <scope line="225"/>
                <declaration name="len" type="int" line="242"/>
                <declaration name="bb" type="byte[]" line="243"/>
                <declaration name="i" type="int" line="246"/>
                <scope line="247"/>
                <scope line="250"/>
            </method>
            <method name="saveBinary" type="void" line="254">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="dataOut" type="DataOutputStream" line="256"/>
                <scope line="273"/>
            </method>
            <declaration name="stringIDNum" type="short" line="277"/>
            <declaration name="stringIDs" type="short[]" line="278"/>
            <declaration name="stringTable" type="StringBuilder" line="279"/>
            <method name="loadProperties" type="void" line="280">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="284"/>
            </method>
            <javadoc line="291">
                set initLocale, initEncoding and initELC for this FontConfig object
                  currently we just simply use the startup locale and encoding                
            </javadoc>
            <method name="initFontConfig" type="void" line="295">
                <scope line="298"/>
            </method>
            <method name="getInitELC" type="short" line="304">
                <scope line="305"/>
                <declaration name="elcIDs" type="HashMap&amp;lt;String,Integer&amp;gt;" line="308"/>
                <scope line="309"/>
                <declaration name="language" type="String" line="312"/>
                <declaration name="country" type="String" line="313"/>
                <declaration name="elc" type="String" line="314"/>
                <scope line="315"/>
                <scope line="318"/>
                <declaration name="i" type="int" line="321"/>
                <scope line="322">
                    <scope line="323"/>
                </scope>
            </method>
            <declaration name="verbose" type="boolean" line="331"/>
            <declaration name="initELC" type="short" line="332"/>
            <declaration name="initLocale" type="Locale" line="333"/>
            <declaration name="initEncoding" type="String" line="334"/>
            <declaration name="alphabeticSuffix" type="String" line="335"/>
            <declaration name="compFontNameIDs" type="short[][][]" line="336"/>
            <declaration name="compExclusions" type="int[][][]" line="337"/>
            <declaration name="compCoreNum" type="int[]" line="338"/>
            <declaration name="coreFontNameIDs" type="Set&amp;lt;Short&amp;gt;" line="339"/>
            <declaration name="fallbackFontNameIDs" type="Set&amp;lt;Short&amp;gt;" line="340"/>
            <method name="initAllComponentFonts" type="void" line="341">
                <declaration name="fallbackScripts" type="short[]" line="342"/>
                <scope line="343">
                    <declaration name="coreScripts" type="short[]" line="344"/>
                    <declaration name="exclusions" type="int[][]" line="346"/>
                    <scope line="347"/>
                    <scope line="351">
                        <declaration name="index" type="int" line="352"/>
                        <declaration name="nameIDs" type="short[]" line="353"/>
                        <scope line="354">
                            <scope line="356"/>
                            <scope line="359"/>
                        </scope>
                        <scope line="364">
                            <declaration name="id" type="short" line="365"/>
                            <scope line="366"/>
                            <scope line="369"/>
                            <scope line="372"/>
                        </scope>
                        <scope line="378">
                            <declaration name="newNameIDs" type="short[]" line="379"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="remapLocaleMap" type="short" line="387">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                    <param name="scriptID" type="short"/>
                    <param name="fontID" type="short"/>
                </params>
                <declaration name="scriptName" type="String" line="388"/>
                <declaration name="value" type="String" line="389"/>
                <scope line="390">
                    <declaration name="fontName" type="String" line="391"/>
                    <declaration name="styleName" type="String" line="392"/>
                </scope>
                <scope line="395"/>
                <scope line="398">
                    <declaration name="name" type="String" line="399"/>
                    <scope line="400"/>
                </scope>
            </method>
            <method name="hasMonoToPropMap" type="boolean" line="407"/>
            <method name="remapProportional" type="short" line="410">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="id" type="short"/>
                </params>
                <scope line="411">
                    <declaration name="i" type="int" line="412"/>
                    <scope line="413">
                        <scope line="414"/>
                    </scope>
                </scope>
            </method>
            <declaration name="NUM_FONTS" type="int" line="422"/>
            <declaration name="NUM_STYLES" type="int" line="423"/>
            <declaration name="fontNames" type="String[]" line="424"/>
            <declaration name="publicFontNames" type="String[]" line="425"/>
            <declaration name="styleNames" type="String[]" line="426"/>
            <javadoc line="427">
                Checks whether the given font family name is a valid logical font name.
                  The check is case insensitive.                
            </javadoc>
            <method name="isLogicalFontFamilyName" type="boolean" line="431">
                <params>
                    <param name="fontName" type="String"/>
                </params>
            </method>
            <javadoc line="434">
                Checks whether the given font family name is a valid logical font name.
                  The check is case sensitive.                
            </javadoc>
            <method name="isLogicalFontFamilyNameLC" type="boolean" line="438">
                <params>
                    <param name="fontName" type="String"/>
                </params>
                <scope line="439">
                    <scope line="440"/>
                </scope>
            </method>
            <javadoc line="446">
                Checks whether the given style name is a valid logical font style name.                
            </javadoc>
            <method name="isLogicalFontStyleName" type="boolean" line="449">
                <params>
                    <param name="styleName" type="String"/>
                </params>
                <scope line="450">
                    <scope line="451"/>
                </scope>
            </method>
            <javadoc line="457">
                Checks whether the given font face name is a valid logical font name.
                  The check is case insensitive.                
            </javadoc>
            <method name="isLogicalFontFaceName" type="boolean" line="461">
                <params>
                    <param name="fontName" type="String"/>
                </params>
            </method>
            <javadoc line="464">
                Checks whether the given font face name is a valid logical font name.
                  The check is case sensitive.                
            </javadoc>
            <method name="isLogicalFontFaceNameLC" type="boolean" line="468">
                <params>
                    <param name="fontName" type="String"/>
                </params>
                <declaration name="period" type="int" line="469"/>
                <scope line="470">
                    <declaration name="familyName" type="String" line="471"/>
                    <declaration name="styleName" type="String" line="472"/>
                </scope>
                <scope line="475"/>
            </method>
            <method name="getFontIndex" type="int" line="479">
                <params>
                    <param name="fontName" type="String"/>
                </params>
            </method>
            <method name="getStyleIndex" type="int" line="482">
                <params>
                    <param name="styleName" type="String"/>
                </params>
            </method>
            <method name="getArrayIndex" type="int" line="485">
                <params>
                    <param name="names" type="String[]"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getStyleIndex" type="int" line="494">
                <params>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="getFontName" type="String" line="508">
                <params>
                    <param name="fontIndex" type="int"/>
                </params>
            </method>
            <method name="getStyleName" type="String" line="511">
                <params>
                    <param name="styleIndex" type="int"/>
                </params>
            </method>
            <javadoc line="514">
                Returns the font face name for the given logical font
                  family name and style.
                  The style argument is interpreted as in java.awt.Font.Font.                
            </javadoc>
            <method name="getLogicalFontFaceName" type="String" line="519">
                <params>
                    <param name="familyName" type="String"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <javadoc line="523">
                Returns the string typically used in properties files
                  for the given style.
                  The style argument is interpreted as in java.awt.Font.Font.                
            </javadoc>
            <method name="getStyleString" type="String" line="528">
                <params>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="getFallbackFamilyName" type="String" line="531"/>
            <javadoc line="531">
                Returns a fallback name for the given font name. For a few known
                  font names, matching logical font names are returned. For all
                  other font names, defaultFallback is returned.
                  defaultFallback differs between AWT and 2D.                
            </javadoc>
            <javadoc line="538">
                Returns the 1.1 equivalent for some old 1.0 font family names for
                  which we need to maintain compatibility in some configurations.
                  Returns null for other font names.                
            </javadoc>
            <method name="getCompatibilityFamilyName" type="String" line="543">
                <params>
                    <param name="fontName" type="String"/>
                </params>
                <scope line="545"/>
                <scope line="548"/>
                <scope line="551"/>
            </method>
            <declaration name="installedFallbackFontFiles" type="String[]" line="556"/>
            <javadoc line="557">
                Maps a file name given in the font configuration file
                  to a format appropriate for the platform.                
            </javadoc>
            <method name="mapFileName" type="String" line="561">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <declaration name="reorderMap" type="HashMap" line="564"/>
            <method name="initReorderMap" type="void" line="565"/>
            <method name="shuffle" type="void" line="566">
                <params>
                    <param name="seq" type="String[]"/>
                    <param name="src" type="int"/>
                    <param name="dst" type="int"/>
                </params>
                <scope line="567"/>
                <declaration name="tmp" type="String" line="570"/>
                <scope line="571"/>
            </method>
            <method name="willReorderForStartupLocale" type="boolean" line="576"/>
            <method name="getReorderSequence" type="Object" line="579">
                <scope line="580"/>
                <declaration name="reorderMap" type="HashMap" line="583"/>
                <declaration name="language" type="String" line="584"/>
                <declaration name="country" type="String" line="585"/>
                <declaration name="val" type="Object" line="586"/>
                <scope line="587"/>
                <scope line="590"/>
            </method>
            <method name="reorderSequenceForLocale" type="void" line="595">
                <params>
                    <param name="seq" type="String[]"/>
                </params>
                <declaration name="val" type="Object" line="596"/>
                <scope line="597">
                    <scope line="598">
                        <scope line="599"/>
                    </scope>
                </scope>
                <scope line="605">
                    <declaration name="fontLangs" type="String[]" line="606"/>
                    <scope line="607">
                        <scope line="608">
                            <scope line="609"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="splitSequence" type="Vector" line="616">
                <params>
                    <param name="sequence" type="String"/>
                </params>
                <declaration name="parts" type="Vector" line="617"/>
                <declaration name="start" type="int" line="618"/>
                <declaration name="end" type="int" line="619"/>
                <scope line="620"/>
                <scope line="624"/>
            </method>
            <method name="split" type="String[]" line="629">
                <params>
                    <param name="sequence" type="String"/>
                </params>
                <declaration name="v" type="Vector" line="630"/>
            </method>
            <declaration name="charsetRegistry" type="Hashtable" line="633"/>
            <javadoc line="634">
                Returns FontDescriptors describing the physical fonts used for the
                  given logical font name and style. The font name is interpreted
                  in a case insensitive way.
                  The style argument is interpreted as in java.awt.Font.Font.                
            </javadoc>
            <method name="getFontDescriptors" type="FontDescriptor[]" line="640">
                <params>
                    <param name="fontName" type="String"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <declaration name="fontDescriptors" type="FontDescriptor[][][]" line="647"/>
            <method name="getFontDescriptors" type="FontDescriptor[]" line="648">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <declaration name="descriptors" type="FontDescriptor[]" line="649"/>
                <scope line="650"/>
            </method>
            <method name="buildFontDescriptors" type="FontDescriptor[]" line="656">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <declaration name="fontName" type="String" line="657"/>
                <declaration name="styleName" type="String" line="658"/>
                <declaration name="scriptIDs" type="short[]" line="659"/>
                <declaration name="nameIDs" type="short[]" line="660"/>
                <declaration name="sequence" type="String[]" line="661"/>
                <declaration name="names" type="String[]" line="662"/>
                <scope line="663">
                    <scope line="666"/>
                </scope>
                <declaration name="fontExclusionRanges" type="int[][]" line="670"/>
                <declaration name="descriptors" type="FontDescriptor[]" line="671"/>
                <scope line="672">
                    <declaration name="awtFontName" type="String" line="673"/>
                    <declaration name="encoding" type="String" line="674"/>
                    <scope line="677"/>
                    <declaration name="enc" type="CharsetEncoder" line="680"/>
                    <declaration name="exclusionRanges" type="int[]" line="681"/>
                </scope>
            </method>
            <javadoc line="686">
                Returns the AWT font name for the given platform font name and
                  character subset.                
            </javadoc>
            <method name="makeAWTFontName" type="String" line="690">
                <params>
                    <param name="platformFontName" type="String"/>
                    <param name="characterSubsetName" type="String"/>
                </params>
            </method>
            <method name="getEncoding" type="String" line="693"/>
            <javadoc line="693">
                Returns the java.io name of the platform character encoding for the
                  given AWT font name and character subset. May return &quot;default&quot;
                  to indicate that getDefaultFontCharset should be called to obtain
                  a charset encoder.                
            </javadoc>
            <method name="getFontCharsetEncoder" type="CharsetEncoder" line="700">
                <params>
                    <param name="charsetName" type="String"/>
                    <param name="fontName" type="String"/>
                </params>
                <declaration name="fc" type="Charset" line="701"/>
                <scope line="702"/>
                <scope line="705"/>
                <scope line="708"/>
                <scope line="711"/>
                <scope line="714">
                    <anonymous_class line="715">
                        <method name="run" type="Object" line="716">
                            <scope line="717"/>
                            <scope line="720"/>
                        </method>
                    </anonymous_class>
                    <declaration name="fcc" type="Class" line="715"/>
                    <scope line="726">
                        <scope line="727"/>
                        <scope line="730"/>
                    </scope>
                </scope>
                <scope line="734"/>
                <scope line="737"/>
                <scope line="740"/>
            </method>
            <method name="getDefaultFontCharset" type="Charset" line="745"/>
            <method name="getAWTFontPathSet" type="HashSet&lt;String&gt;" line="746"/>
            <javadoc line="749">
                Returns an array of composite font descriptors for all logical font
                  faces.
                  If the font configuration file doesn&apos;t specify Lucida Sans Regular
                  or the given fallback font as component fonts, they are added here.                
            </javadoc>
            <method name="get2DCompositeFontInfo" type="CompositeFontDescriptor[]" line="755">
                <declaration name="result" type="CompositeFontDescriptor[]" line="756"/>
                <declaration name="defaultFontFile" type="String" line="757"/>
                <declaration name="defaultFontFaceName" type="String" line="758"/>
                <scope line="759">
                    <declaration name="fontName" type="String" line="760"/>
                    <declaration name="exclusions" type="int[][]" line="761"/>
                    <declaration name="numExclusionRanges" type="int" line="762"/>
                    <scope line="763"/>
                    <declaration name="exclusionRanges" type="int[]" line="766"/>
                    <declaration name="exclusionRangeLimits" type="int[]" line="767"/>
                    <declaration name="exclusionRangeIndex" type="int" line="768"/>
                    <declaration name="exclusionRangeLimitIndex" type="int" line="769"/>
                    <scope line="770">
                        <declaration name="componentRanges" type="int[]" line="771"/>
                        <scope line="772">
                            <declaration name="value" type="int" line="773"/>
                        </scope>
                    </scope>
                    <scope line="779">
                        <declaration name="maxComponentFontCount" type="int" line="780"/>
                        <declaration name="sawDefaultFontFile" type="boolean" line="781"/>
                        <scope line="782"/>
                        <declaration name="faceName" type="String" line="785"/>
                        <declaration name="componentFaceNames" type="String[]" line="786"/>
                        <declaration name="componentFileNames" type="String[]" line="787"/>
                        <declaration name="index" type="int" line="788"/>
                        <scope line="789">
                            <declaration name="fontNameID" type="short" line="790"/>
                            <declaration name="fileNameID" type="short" line="791"/>
                            <scope line="794"/>
                            <scope line="797"/>
                        </scope>
                        <scope line="801">
                            <declaration name="len" type="int" line="802"/>
                            <scope line="803"/>
                            <scope line="806">
                                <declaration name="newComponentFaceNames" type="String[]" line="807"/>
                                <declaration name="newComponentFileNames" type="String[]" line="810"/>
                            </scope>
                        </scope>
                        <scope line="818">
                            <scope line="819"/>
                        </scope>
                        <scope line="825">
                            <declaration name="newComponentFaceNames" type="String[]" line="826"/>
                            <declaration name="newComponentFileNames" type="String[]" line="829"/>
                        </scope>
                        <declaration name="clippedExclusionRangeLimits" type="int[]" line="833"/>
                        <scope line="834">
                            <declaration name="len" type="int" line="835"/>
                            <scope line="838"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getFaceNameFromComponentFontName" type="String" line="847"/>
            <method name="getFileNameFromComponentFontName" type="String" line="848"/>
            <declaration name="existsMap" type="HashMap&amp;lt;String,Boolean&amp;gt;" line="849"/>
            <method name="needToSearchForFile" type="boolean" line="850">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <scope line="851"/>
                <scope line="854"/>
                <declaration name="exists" type="Boolean" line="857"/>
                <scope line="858">
                    <scope line="860"/>
                    <scope line="863">
                        <scope line="866"/>
                    </scope>
                </scope>
            </method>
            <declaration name="numCoreFonts" type="int" line="873"/>
            <declaration name="componentFonts" type="String[]" line="874"/>
            <declaration name="filenamesMap" type="HashMap&amp;lt;String,String&amp;gt;" line="875"/>
            <declaration name="coreFontFileNames" type="HashSet&amp;lt;String&amp;gt;" line="876"/>
            <method name="getNumberCoreFonts" type="int" line="877">
                <scope line="878">
                    <declaration name="emptyShortArray" type="Short[]" line="880"/>
                    <declaration name="core" type="Short[]" line="881"/>
                    <declaration name="fallback" type="Short[]" line="882"/>
                    <declaration name="numFallbackFonts" type="int" line="883"/>
                    <declaration name="i" type="int" line="884"/>
                    <scope line="885">
                        <scope line="886"/>
                    </scope>
                    <declaration name="filename" type="String" line="893"/>
                    <scope line="894">
                        <declaration name="fontid" type="short" line="895"/>
                        <declaration name="fileid" type="short" line="896"/>
                        <declaration name="compFileName" type="String" line="898"/>
                        <scope line="899"/>
                    </scope>
                    <scope line="904">
                        <scope line="905">
                            <declaration name="fontid" type="short" line="906"/>
                            <declaration name="fileid" type="short" line="907"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getPlatformFontNames" type="String[]" line="916">
                <scope line="917"/>
            </method>
            <javadoc line="922">
                Returns a file name for the physical font represented by this platform font name,
                  if the font configuration has such information available, or null if the
                  information is unavailable. The file name returned is just a hint; a null return
                  value doesn&apos;t necessarily mean that the font is unavailable, nor does a non-null
                  return value guarantee that the file exists and contains the physical font.
                  The file name can be an absolute or a relative path name.                
            </javadoc>
            <method name="getFileNameFromPlatformName" type="String" line="930">
                <params>
                    <param name="platformName" type="String"/>
                </params>
            </method>
            <javadoc line="933">
                Returns a configuration specific path to be appended to the font
                  search path.                
            </javadoc>
            <method name="getExtraFontPath" type="String" line="937"/>
            <method name="getVersion" type="String" line="940"/>
            <method name="getFontConfiguration" type="FontConfiguration" line="943"/>
            <method name="setFontConfiguration" type="void" line="946"/>
            <declaration name="HEAD_LENGTH" type="int" line="949"/>
            <declaration name="INDEX_scriptIDs" type="int" line="950"/>
            <declaration name="INDEX_scriptFonts" type="int" line="951"/>
            <declaration name="INDEX_elcIDs" type="int" line="952"/>
            <declaration name="INDEX_sequences" type="int" line="953"/>
            <declaration name="INDEX_fontfileNameIDs" type="int" line="954"/>
            <declaration name="INDEX_componentFontNameIDs" type="int" line="955"/>
            <declaration name="INDEX_filenames" type="int" line="956"/>
            <declaration name="INDEX_awtfontpaths" type="int" line="957"/>
            <declaration name="INDEX_exclusions" type="int" line="958"/>
            <declaration name="INDEX_proportionals" type="int" line="959"/>
            <declaration name="INDEX_scriptFontsMotif" type="int" line="960"/>
            <declaration name="INDEX_alphabeticSuffix" type="int" line="961"/>
            <declaration name="INDEX_stringIDs" type="int" line="962"/>
            <declaration name="INDEX_stringTable" type="int" line="963"/>
            <declaration name="INDEX_TABLEEND" type="int" line="964"/>
            <declaration name="INDEX_fallbackScripts" type="int" line="965"/>
            <declaration name="INDEX_appendedfontpath" type="int" line="966"/>
            <declaration name="INDEX_version" type="int" line="967"/>
            <declaration name="head" type="short[]" line="968"/>
            <declaration name="table_scriptIDs" type="short[]" line="969"/>
            <declaration name="table_scriptFonts" type="short[]" line="970"/>
            <declaration name="table_elcIDs" type="short[]" line="971"/>
            <declaration name="table_sequences" type="short[]" line="972"/>
            <declaration name="table_fontfileNameIDs" type="short[]" line="973"/>
            <declaration name="table_componentFontNameIDs" type="short[]" line="974"/>
            <declaration name="table_filenames" type="short[]" line="975"/>
            <declaration name="table_awtfontpaths" type="short[]" line="976"/>
            <declaration name="table_exclusions" type="short[]" line="977"/>
            <declaration name="table_proportionals" type="short[]" line="978"/>
            <declaration name="table_scriptFontsMotif" type="short[]" line="979"/>
            <declaration name="table_alphabeticSuffix" type="short[]" line="980"/>
            <declaration name="table_stringIDs" type="short[]" line="981"/>
            <declaration name="table_stringTable" type="char[]" line="982"/>
            <javadoc line="983">
                Checks consistencies of complied fontconfig data. This method
                  is called only at the build-time from
                  build.tools.compilefontconfig.CompileFontConfig.                
            </javadoc>
            <method name="sanityCheck" type="void" line="988">
                <declaration name="errors" type="int" line="989"/>
                <anonymous_class line="990">
                    <method name="run" type="Object" line="991"/>
                </anonymous_class>
                <declaration name="osName" type="String" line="990"/>
                <scope line="996">
                    <scope line="997">
                        <scope line="998"/>
                        <scope line="1002">
                            <scope line="1003"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1009">
                    <declaration name="fid" type="short" line="1010"/>
                    <scope line="1011"/>
                    <scope line="1016">
                        <scope line="1018">
                            <scope line="1019">
                                <declaration name="jj" type="int" line="1020"/>
                                <declaration name="ffid" type="short" line="1021"/>
                                <scope line="1022"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1030">
                    <scope line="1031">
                        <scope line="1032">
                            <declaration name="script" type="String" line="1033"/>
                            <scope line="1034"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1042"/>
            </method>
            <method name="isEmpty" type="boolean" line="1047">
                <params>
                    <param name="a" type="short[]"/>
                </params>
                <scope line="1048">
                    <scope line="1049"/>
                </scope>
            </method>
            <method name="dump" type="void" line="1055">
                <scope line="1057"/>
                <scope line="1063">
                    <declaration name="fid" type="short" line="1064"/>
                    <scope line="1065"/>
                </scope>
                <scope line="1069">
                    <declaration name="fid" type="short" line="1070"/>
                    <scope line="1071">
                        <scope line="1073">
                            <scope line="1074">
                                <declaration name="jj" type="int" line="1075"/>
                                <declaration name="ffid" type="short" line="1076"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1085">
                    <declaration name="ss" type="short[]" line="1087"/>
                    <scope line="1088"/>
                </scope>
                <scope line="1097">
                    <scope line="1098"/>
                    <scope line="1101"/>
                </scope>
                <scope line="1106"/>
                <scope line="1110"/>
                <declaration name="i" type="int" line="1113"/>
                <scope line="1115"/>
                <declaration name="fbsIDs" type="short[]" line="1122"/>
                <scope line="1123"/>
            </method>
            <method name="getComponentFontID" type="short" line="1131">
                <params>
                    <param name="scriptID" type="short"/>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <declaration name="fid" type="short" line="1132"/>
                <scope line="1133"/>
                <scope line="1136"/>
            </method>
            <method name="getComponentFontIDMotif" type="short" line="1140">
                <params>
                    <param name="scriptID" type="short"/>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <scope line="1141"/>
                <declaration name="fid" type="short" line="1144"/>
                <scope line="1145"/>
                <scope line="1148"/>
            </method>
            <method name="getExclusionRanges" type="int[]" line="1152">
                <params>
                    <param name="scriptID" type="short"/>
                </params>
                <declaration name="exID" type="short" line="1153"/>
                <scope line="1154"/>
                <scope line="1157">
                    <declaration name="exChar" type="char[]" line="1158"/>
                    <declaration name="exInt" type="int[]" line="1159"/>
                    <declaration name="i" type="int" line="1160"/>
                    <scope line="1161"/>
                </scope>
            </method>
            <method name="contains" type="boolean" line="1167">
                <params>
                    <param name="IDs" type="short"/>
                    <param name="id" type="short"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="1168">
                    <scope line="1169"/>
                </scope>
            </method>
            <method name="getComponentFontName" type="String" line="1175">
                <params>
                    <param name="id" type="short"/>
                </params>
                <scope line="1176"/>
            </method>
            <method name="getComponentFileName" type="String" line="1181">
                <params>
                    <param name="id" type="short"/>
                </params>
                <scope line="1182"/>
            </method>
            <method name="getComponentFileID" type="short" line="1187">
                <params>
                    <param name="nameID" type="short"/>
                </params>
            </method>
            <method name="getScriptName" type="String" line="1190">
                <params>
                    <param name="scriptID" type="short"/>
                </params>
            </method>
            <declaration name="reorderScripts" type="HashMap&amp;lt;String,Short&amp;gt;" line="1193"/>
            <method name="getCoreScripts" type="short[]" line="1194">
                <params>
                    <param name="fontIndex" type="int"/>
                </params>
                <declaration name="elc" type="short" line="1195"/>
                <declaration name="scripts" type="short[]" line="1196"/>
                <scope line="1197">
                    <scope line="1198"/>
                    <declaration name="ss" type="String[]" line="1201"/>
                    <scope line="1202"/>
                    <scope line="1207"/>
                </scope>
            </method>
            <method name="getFallbackScripts" type="short[]" line="1213"/>
            <method name="printTable" type="void" line="1216">
                <params>
                    <param name="list" type="short[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="1217"/>
            </method>
            <method name="readShortTable" type="short[]" line="1221">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="1222"/>
                <declaration name="data" type="short[]" line="1225"/>
                <declaration name="bb" type="byte[]" line="1226"/>
                <declaration name="i" type="int" line="1228"/>
                <scope line="1229"/>
            </method>
            <method name="writeShortTable" type="void" line="1234">
                <params>
                    <param name="out" type="DataOutputStream"/>
                    <param name="data" type="short[]"/>
                </params>
                <scope line="1235"/>
            </method>
            <method name="toList" type="short[]" line="1239">
                <params>
                    <param name="map" type="HashMap&lt;String,Short&gt;"/>
                </params>
                <declaration name="list" type="short[]" line="1240"/>
                <scope line="1242"/>
            </method>
            <declaration name="stringCache" type="String[]" line="1247"/>
            <method name="getString" type="String" line="1248">
                <params>
                    <param name="stringID" type="short"/>
                </params>
                <scope line="1250"/>
            </method>
            <method name="getShortArray" type="short[]" line="1255">
                <params>
                    <param name="shortArrayID" type="short"/>
                </params>
                <declaration name="s" type="String" line="1256"/>
                <declaration name="cc" type="char[]" line="1257"/>
                <declaration name="ss" type="short[]" line="1258"/>
                <scope line="1259"/>
            </method>
            <method name="getStringID" type="short" line="1264">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="1265"/>
                <declaration name="pos0" type="short" line="1268"/>
                <declaration name="pos1" type="short" line="1270"/>
                <scope line="1274">
                    <declaration name="tmp" type="short[]" line="1275"/>
                </scope>
            </method>
            <method name="getShortArrayID" type="short" line="1281">
                <params>
                    <param name="sa" type="short"/>
                </params>
                <declaration name="cc" type="char[]" line="1282"/>
                <scope line="1283"/>
                <declaration name="s" type="String" line="1286"/>
            </method>
            <declaration name="EMPTY_INT_ARRAY" type="int[]" line="1289"/>
            <declaration name="EMPTY_STRING_ARRAY" type="String[]" line="1290"/>
            <declaration name="EMPTY_SHORT_ARRAY" type="short[]" line="1291"/>
            <declaration name="UNDEFINED_COMPONENT_FONT" type="String" line="1292"/>
            <class name="PropertiesHandler" line="1293">
                <method name="load" type="void" line="1294">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <declaration name="fp" type="FontProperties" line="1297"/>
                </method>
                <method name="initBinaryTable" type="void" line="1301">
                    <declaration name="len" type="int" line="1306"/>
                    <scope line="1308"/>
                    <declaration name="off" type="int" line="1311"/>
                    <scope line="1312">
                        <declaration name="v" type="Short[]" line="1314"/>
                        <scope line="1315">
                            <scope line="1316"/>
                            <scope line="1319"/>
                        </scope>
                    </scope>
                    <scope line="1328">
                        <declaration name="k" type="int" line="1329"/>
                        <declaration name="v" type="short[]" line="1330"/>
                        <scope line="1331">
                            <scope line="1332"/>
                        </scope>
                        <scope line="1336">
                            <scope line="1337"/>
                        </scope>
                    </scope>
                    <scope line="1349"/>
                    <scope line="1354"/>
                    <scope line="1359">
                        <declaration name="exI" type="int[]" line="1360"/>
                        <declaration name="exC" type="char[]" line="1361"/>
                        <declaration name="j" type="int" line="1362"/>
                        <scope line="1363"/>
                    </scope>
                    <declaration name="j" type="int" line="1371"/>
                    <scope line="1372"/>
                    <scope line="1377">
                        <scope line="1380"/>
                        <scope line="1384">
                            <declaration name="v" type="Short[]" line="1386"/>
                            <declaration name="i" type="int" line="1387"/>
                            <scope line="1388">
                                <scope line="1389"/>
                                <scope line="1392"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1399"/>
                    <scope line="1405"/>
                </method>
                <declaration name="scriptIDs" type="HashMap&amp;lt;String,Short&amp;gt;" line="1420"/>
                <declaration name="elcIDs" type="HashMap&amp;lt;String,Short&amp;gt;" line="1421"/>
                <declaration name="componentFontNameIDs" type="HashMap&amp;lt;String,Short&amp;gt;" line="1422"/>
                <declaration name="fontfileNameIDs" type="HashMap&amp;lt;String,Short&amp;gt;" line="1423"/>
                <declaration name="logicalFontIDs" type="HashMap&amp;lt;String,Integer&amp;gt;" line="1424"/>
                <declaration name="fontStyleIDs" type="HashMap&amp;lt;String,Integer&amp;gt;" line="1425"/>
                <declaration name="filenames" type="HashMap&amp;lt;Short,Short&amp;gt;" line="1426"/>
                <declaration name="sequences" type="HashMap&amp;lt;Short,short[]&amp;gt;" line="1427"/>
                <declaration name="scriptFonts" type="HashMap&amp;lt;Short,Short[]&amp;gt;" line="1428"/>
                <declaration name="scriptAllfonts" type="HashMap&amp;lt;Short,Short&amp;gt;" line="1429"/>
                <declaration name="exclusions" type="HashMap&amp;lt;Short,int[]&amp;gt;" line="1430"/>
                <declaration name="awtfontpaths" type="HashMap&amp;lt;Short,Short&amp;gt;" line="1431"/>
                <declaration name="proportionals" type="HashMap&amp;lt;Short,Short&amp;gt;" line="1432"/>
                <declaration name="scriptAllfontsMotif" type="HashMap&amp;lt;Short,Short&amp;gt;" line="1433"/>
                <declaration name="scriptFontsMotif" type="HashMap&amp;lt;Short,Short[]&amp;gt;" line="1434"/>
                <declaration name="alphabeticSuffix" type="HashMap&amp;lt;Short,Short&amp;gt;" line="1435"/>
                <declaration name="fallbackScriptIDs" type="short[]" line="1436"/>
                <declaration name="version" type="String" line="1437"/>
                <declaration name="appendedfontpath" type="String" line="1438"/>
                <method name="initLogicalNameStyle" type="void" line="1439"/>
                <method name="initHashMaps" type="void" line="1452"/>
                <method name="parseExclusions" type="int[]" line="1470">
                    <params>
                        <param name="key" type="String"/>
                        <param name="exclusions" type="String"/>
                    </params>
                    <scope line="1471"/>
                    <declaration name="numExclusions" type="int" line="1474"/>
                    <declaration name="pos" type="int" line="1475"/>
                    <scope line="1476"/>
                    <declaration name="exclusionRanges" type="int[]" line="1480"/>
                    <declaration name="newPos" type="int" line="1482"/>
                    <scope line="1483">
                        <declaration name="lower" type="String" line="1484"/>
                        <declaration name="lo" type="int" line="1485"/>
                        <scope line="1486">
                            <scope line="1491"/>
                            <declaration name="lowerLength" type="int" line="1496"/>
                            <declaration name="upperLength" type="int" line="1497"/>
                            <scope line="1498"/>
                            <scope line="1503"/>
                        </scope>
                        <scope line="1507">
                            <scope line="1508"/>
                        </scope>
                    </scope>
                </method>
                <method name="getID" type="Short" line="1518">
                    <params>
                        <param name="map" type="HashMap&lt;String,Short&gt;"/>
                        <param name="key" type="String"/>
                    </params>
                    <declaration name="ret" type="Short" line="1519"/>
                    <scope line="1520"/>
                </method>
                <class name="FontProperties" line="1526">
                    <extends class="Properties"/>
                    <method name="put" type="Object" line="1527">
                        <params>
                            <param name="k" type="Object"/>
                            <param name="v" type="Object"/>
                        </params>
                    </method>
                </class>
                <method name="parseProperty" type="void" line="1532">
                    <params>
                        <param name="key" type="String"/>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="1533">
                        <scope line="1535"/>
                        <declaration name="faceID" type="Short" line="1538"/>
                        <declaration name="fileID" type="Short" line="1539"/>
                    </scope>
                    <scope line="1542"/>
                    <scope line="1546">
                        <declaration name="hasDefault" type="boolean" line="1548"/>
                        <declaration name="has1252" type="boolean" line="1549"/>
                        <declaration name="ss" type="String[]" line="1550"/>
                        <declaration name="sa" type="short[]" line="1551"/>
                        <scope line="1552">
                            <scope line="1553"/>
                            <scope line="1557"/>
                        </scope>
                        <declaration name="scriptArrayID" type="short" line="1563"/>
                        <declaration name="elcID" type="Short" line="1564"/>
                        <declaration name="dot" type="int" line="1565"/>
                        <scope line="1566">
                            <scope line="1567"/>
                            <scope line="1571"/>
                            <scope line="1574">
                                <scope line="1575"/>
                            </scope>
                        </scope>
                        <scope line="1581"/>
                        <declaration name="scriptArrayIDs" type="short[]" line="1585"/>
                        <scope line="1586"/>
                        <scope line="1590">
                            <scope line="1592"/>
                            <declaration name="fid" type="Integer" line="1595"/>
                            <scope line="1596">
                                <scope line="1597"/>
                            </scope>
                        </scope>
                        <scope line="1605"/>
                        <scope line="1608"/>
                    </scope>
                    <scope line="1612">
                        <scope line="1614"/>
                        <scope line="1618"/>
                    </scope>
                    <scope line="1622"/>
                    <scope line="1626"/>
                    <scope line="1629"/>
                    <scope line="1632"/>
                    <scope line="1636">
                        <declaration name="dot1" type="int" line="1637"/>
                        <declaration name="isMotif" type="boolean" line="1638"/>
                        <scope line="1640">
                            <scope line="1641"/>
                        </scope>
                        <scope line="1647">
                            <scope line="1648"/>
                        </scope>
                        <scope line="1653"/>
                        <declaration name="nameID" type="Integer" line="1657"/>
                        <declaration name="styleID" type="Integer" line="1658"/>
                        <declaration name="scriptID" type="Short" line="1659"/>
                        <scope line="1660">
                            <scope line="1661"/>
                        </scope>
                        <declaration name="pnids" type="Short[]" line="1666"/>
                        <scope line="1667"/>
                        <scope line="1670"/>
                        <scope line="1673"/>
                        <scope line="1677"/>
                        <scope line="1680"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>