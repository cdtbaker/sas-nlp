<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.Font"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map.Entry"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="sun.font.CompositeFontDescriptor"/>
        <import package="sun.font.SunFontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="FontConfiguration" line="55">
            <comment line="63">
                static global runtime env                
            </comment>
            <comment line="66">
                canonical name of default nio charset                
            </comment>
            <comment line="82">
                A default FontConfiguration must be created before an alternate
                 one to ensure proper static initialisation takes place.                
            </comment>
            <comment line="147">
                ///////////////////////////////////////////////////////////////////
                 methods for loading the FontConfig file                         
                /                
            </comment>
            <comment line="155">
                Smoke test to see if we can trust this configuration by testing if
                 the first slot of a composite font maps to an installed file.                
            </comment>
            <comment line="297">
                Initialize the internal data tables from binary format font
                 configuration file.                
            </comment>
            <comment line="337">
                Generate a binary format font configuration from internal data
                 tables.                
            </comment>
            <comment line="366">
                private static boolean loadingProperties;                
            </comment>
            <comment line="389">
                ///////////////////////////////////////////////////////////////////
                 methods for initializing the FontConfig                         
                /                
            </comment>
            <comment line="407">
                &quot;ELC&quot; stands for &quot;Encoding.Language.Country&quot;. This method returns
                the ID of the matched elc setting of &quot;initLocale&quot; in elcIDs table.
                If no match is found, it returns the default ID, which is
                &quot;NULL.NULL.NULL&quot; in elcIDs table.                
            </comment>
            <comment line="563">
                ///////////////////////////////////////////////////////////////////
                 Methods for handling font and style names                       
                /                
            </comment>
            <comment line="728">
                ////////////////////////////////////////////////////////////////////
                  reordering                
            </comment>
            <comment line="732">
                Mappings from file encoding to font config name for font supporting
                 the corresponding language. This is filled in by initReorderMap()                
            </comment>
            <comment line="737">
                                
            </comment>
            <comment line="740">
                Move item at index &quot;src&quot; to &quot;dst&quot;, shuffling all values in
                 between down                
            </comment>
            <comment line="754">
                Called to determine if there&apos;s a re-order sequence for this locale
                 encoding. If there&apos;s none then the caller can &quot;bail&quot; and avoid
                 unnecessary work                
            </comment>
            <comment line="781">
                This method reorders the sequence such that the matches for the
                 file encoding are moved ahead of other elements.
                 If an encoding uses more than one font, they are all moved up.                
            </comment>
            <comment line="826">
                //////////////////////////////////////////////////////////////////////
                 Methods for extracting information from the fontconfig data for AWT                
            </comment>
            <comment line="965">
                This retrieves the platform font directories (path) calculated
                 by setAWTFontPathSequence(String[]). The default implementation
                 returns null, its expected that X11 platforms may return
                 non-null.                
            </comment>
            <comment line="974">
                //////////////////////////////////////////////////////////////////////
                 methods for extracting information from the fontconfig data for 2D                
            </comment>
            <comment line="1120">
                public class 2dFont {
                public String platformName;
                public String fontfileName;
                }
                private 2dFont [] componentFonts = null;                
            </comment>
            <comment line="1128">
                Used on Linux to test if a file referenced in a font configuration
                 file exists in the location that is expected. If it does, no need
                 to search for it. If it doesn&apos;t then unless its a fallback font,
                 return that expensive code should be invoked to search for the font.                
            </comment>
            <comment line="1167">
                Return the number of core fonts. Note this isn&apos;t thread safe but
                 a calling thread can call this and getPlatformFontNames() in either
                 order.                
            </comment>
            <comment line="1213">
                Return all platform font names used by this font configuration.
                 The first getNumberCoreFonts() entries are guaranteed to be the
                 core fonts - ie no fall back only fonts.                
            </comment>
            <comment line="1253">
                                
            </comment>
            <comment line="1262">
                ////////////////////////////////////////////////////////////////////
                 FontConfig data tables and the index constants in binary file                
            </comment>
            <comment line="1265">
                The binary font configuration file begins with a short[] &quot;head&quot;, which
                 contains the offsets to the starts of the individual data table which
                 immediately follow. Teh current implemention includes the tables shown
                 below.
                
                 (00) table_scriptIDs    :stringIDs of all defined CharacterSubsetNames
                 (01) table_scriptFonts  :scriptID x fontIndex x styleIndex-&gt;
                                          PlatformFontNameID mapping. Each scriptID might
                                          have 1 or 20 entries depends on if it is defined
                                          via a &quot;allfonts.CharacterSubsetname&quot; or a list of
                                          &quot;LogicalFontName.StyleName.CharacterSubsetName&quot;
                                          entries, positive entry means it&apos;s a &quot;allfonts&quot;
                                          entry, a negative value means this is a offset to
                                          a NUM_FONTS x NUM_STYLES subtable.
                 (02) table_elcIDs       :stringIDs of all defined ELC names, string
                                          &quot;NULL.NULL.NULL&quot; is used for &quot;default&quot;
                 (03) table_sequences    :elcID x logicalFont -&gt; scriptIDs table defined
                                          by &quot;sequence.allfontsLogicalFontName.ELC&quot; in
                                          font configuration file, each &quot;elcID&quot; has
                                          NUM_FONTS (5) entries in this table.
                 (04) table_fontfileNameIDs
                                         :stringIDs of all defined font file names
                 (05) table_componentFontNameIDs
                                         :stringIDs of all defined PlatformFontNames
                 (06) table_filenames    :platformFontNamesID-&gt;fontfileNameID mapping
                                          table, the index is the platformFontNamesID.
                 (07) table_awtfontpaths :CharacterSubsetNames-&gt;awtfontpaths mapping table,
                                          the index is the CharacterSubsetName&apos;s stringID
                                          and content is the stringID of awtfontpath.
                 (08) table_exclusions   :scriptID -&gt; exclusionRanges mapping table,
                                          the index is the scriptID and the content is
                a id of an exclusionRanges int[].
                 (09) table_proportionals:list of pairs of PlatformFontNameIDs, stores
                                          the replacement info defined by &quot;proportional&quot;
                                          keyword.
                 (10) table_scriptFontsMotif
                                         :same as (01) except this table stores the
                                          info defined with &quot;.motif&quot; keyword
                 (11) table_alphabeticSuffix
                                         :elcID -&gt; stringID of alphabeticXXXX entries
                 (12) table_stringIDs    :The index of this table is the string ID, the
                                          content is the &quot;start index&quot; of this string in
                                          stringTable, use the start index of next entry
                                          as the &quot;end index&quot;.
                 (13) table_stringTable  :The real storage of all character strings defined
                                          used this font configuration, need a pair of
                                          &quot;start&quot; and &quot;end&quot; indices to access.
                 (14) reserved
                 (15) table_fallbackScripts
                                         :stringIDs of fallback CharacterSubsetnames, stored
                                          in the order of they are defined in sequence.fallback.
                 (16) table_appendedfontpath
                                         :stringtID of the &quot;appendedfontpath&quot; defined.
                 (17) table_version   :stringID of the version number of this fontconfig file.                
            </comment>
            <comment line="1452">
                dump the fontconfig data tables                
            </comment>
            <comment line="1548">
                ////////////////////////////////////////////////////////////////////
                 Data table access methods                
            </comment>
            <comment line="1552">
                Return the fontID of the platformFontName defined in this font config
                 by &quot;LogicalFontName.StyleName.CharacterSubsetName&quot; entry or
                 &quot;allfonts.CharacterSubsetName&quot; entry in properties format fc file.                
            </comment>
            <comment line="1567">
                Same as getCompoentFontID() except this method returns the fontID define by
                 &quot;xxxx.motif&quot; entry.                
            </comment>
            <comment line="1607">
                                
            </comment>
            <comment line="1622">
                componentFontID -&gt; componentFileID                
            </comment>
            <comment line="1700">
                runtime cache                
            </comment>
            <comment line="1759">
                utility &quot;empty&quot; objects                
            </comment>
            <comment line="1765">
                ////////////////////////////////////////////////////////////////////////
                Convert the FontConfig data in Properties file to binary data tables                
            </comment>
            <javadoc line="55">
                Provides the definitions of the five logical fonts: Serif, SansSerif,
                  Monospaced, Dialog, and DialogInput. The necessary information
                  is obtained from fontconfig files.                
            </javadoc>
            <declaration name="osVersion" type="String" line="63"/>
            <declaration name="osName" type="String" line="64"/>
            <declaration name="encoding" type="String" line="65"/>
            <declaration name="startupLocale" type="Locale" line="66"/>
            <declaration name="localeMap" type="Hashtable" line="67"/>
            <declaration name="fontConfig" type="FontConfiguration" line="68"/>
            <declaration name="logger" type="PlatformLogger" line="69"/>
            <declaration name="isProperties" type="boolean" line="70"/>
            <declaration name="fontManager" type="SunFontManager" line="72"/>
            <declaration name="preferLocaleFonts" type="boolean" line="73"/>
            <declaration name="preferPropFonts" type="boolean" line="74"/>
            <declaration name="fontConfigFile" type="File" line="76"/>
            <declaration name="foundOsSpecificFile" type="boolean" line="77"/>
            <declaration name="inited" type="boolean" line="78"/>
            <declaration name="javaLib" type="String" line="79"/>
            <method name="FontConfiguration" type="constructor" line="84">
                <params>
                    <param name="fm" type="SunFontManager"/>
                </params>
                <comment line="94">
                                        
                </comment>
                <comment line="95">
                                        
                </comment>
                <comment line="96">
                    Separating out the file location from the rest of the
                     initialisation, so the caller has the option of doing
                     something else if a suitable file isn&apos;t found.                    
                </comment>
                <scope line="85"/>
                <scope line="89"/>
            </method>
            <method name="init" type="boolean" line="102">
                <scope line="103"/>
            </method>
            <method name="FontConfiguration" type="constructor" line="116">
                <params>
                    <param name="fm" type="SunFontManager"/>
                    <param name="preferLocaleFonts" type="boolean"/>
                    <param name="preferPropFonts" type="boolean"/>
                </params>
                <comment line="125">
                    fontConfig should be initialised by default constructor, and
                     its data tables can be shared, since readFontConfigFile doesn&apos;t
                     update any other state. Also avoid a doPrivileged block.                    
                </comment>
                <scope line="118"/>
            </method>
            <javadoc line="131">
                Fills in this instance&apos;s osVersion and osName members. By
                  default uses the system properties os.name and os.version;
                  subclasses may override.                
            </javadoc>
            <method name="setOsNameAndVersion" type="void" line="136"/>
            <method name="setEncoding" type="void" line="141"/>
            <method name="foundOsSpecificFile" type="boolean" line="150"/>
            <method name="fontFilesArePresent" type="boolean" line="157">
                <declaration name="fontNameID" type="short" line="159"/>
                <declaration name="fileNameID" type="short" line="160"/>
                <declaration name="fileName" type="String" line="161"/>
                <anonymous_class line="163">
                    <method name="run" type="Object" line="164">
                        <scope line="165">
                            <declaration name="f" type="File" line="166"/>
                        </scope>
                        <scope line="169"/>
                    </method>
                </anonymous_class>
                <declaration name="exists" type="Boolean" line="162"/>
            </method>
            <method name="findFontConfigFile" type="void" line="177">
                <comment line="180">
                    default assumption.                    
                </comment>
                <declaration name="javaHome" type="String" line="180"/>
                <scope line="181"/>
                <declaration name="userConfigFile" type="String" line="185"/>
                <scope line="186"/>
                <scope line="188"/>
            </method>
            <method name="readFontConfigFile" type="void" line="193">
                <params>
                    <param name="f" type="File"/>
                </params>
                <comment line="195">
                    This is invoked here as readFontConfigFile is only invoked
                     once per VM, and always in a privileged context, thus the
                     directory containing installed fall back fonts is accessed
                     from this context                    
                </comment>
                <scope line="201">
                    <scope line="202">
                        <declaration name="in" type="FileInputStream" line="203"/>
                        <scope line="204"/>
                        <scope line="206"/>
                        <scope line="210"/>
                    </scope>
                    <scope line="213">
                        <scope line="214"/>
                    </scope>
                </scope>
                <declaration name="version" type="String" line="219"/>
                <scope line="220"/>
            </method>
            <method name="getInstalledFallbackFonts" type="void" line="225">
                <params>
                    <param name="javaLib" type="String"/>
                </params>
                <declaration name="fallbackDirName" type="String" line="226"/>
                <declaration name="fallbackDir" type="File" line="229"/>
                <scope line="230">
                    <declaration name="ttfs" type="String[]" line="231"/>
                    <declaration name="t1s" type="String[]" line="232"/>
                    <declaration name="numTTFs" type="int" line="233"/>
                    <declaration name="numT1s" type="int" line="234"/>
                    <declaration name="len" type="int" line="235"/>
                    <scope line="236"/>
                    <scope line="240"/>
                    <scope line="244"/>
                </scope>
            </method>
            <method name="findImpl" type="File" line="252">
                <params>
                    <param name="fname" type="String"/>
                </params>
                <declaration name="f" type="File" line="253"/>
                <scope line="254"/>
                <scope line="259"/>
            </method>
            <method name="findFontConfigFile" type="File" line="266">
                <params>
                    <param name="javaLib" type="String"/>
                </params>
                <declaration name="baseName" type="String" line="267"/>
                <declaration name="configFile" type="File" line="268"/>
                <scope line="269">
                    <scope line="271"/>
                </scope>
                <scope line="275">
                    <scope line="277"/>
                </scope>
                <scope line="281">
                    <scope line="283"/>
                </scope>
                <scope line="290"/>
            </method>
            <method name="loadBinary" type="void" line="299">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
                <comment line="321">
                    StringTable cache                    
                </comment>
                <declaration name="in" type="DataInputStream" line="300"/>
                <declaration name="tableSizes" type="int[]" line="302"/>
                <scope line="303"/>
                <declaration name="len" type="int" line="323"/>
                <declaration name="bb" type="byte[]" line="324"/>
                <declaration name="i" type="int" line="327"/>
                <scope line="328"/>
                <scope line="331"/>
            </method>
            <method name="saveBinary" type="void" line="339">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="358">
                    stringTable                    
                </comment>
                <declaration name="dataOut" type="DataOutputStream" line="342"/>
                <scope line="360"/>
            </method>
            <declaration name="stringIDNum" type="short" line="366"/>
            <declaration name="stringIDs" type="short[]" line="367"/>
            <declaration name="stringTable" type="StringBuilder" line="368"/>
            <method name="loadProperties" type="void" line="370">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="372">
                    loadingProperties = true;
                    StringID starts from &quot;1&quot;, &quot;0&quot; is reserved for &quot;not defined&quot;                    
                </comment>
                <comment line="383">
                    loadingProperties = false;                    
                </comment>
                <scope line="377"/>
            </method>
            <javadoc line="392">
                set initLocale, initEncoding and initELC for this FontConfig object
                  currently we just simply use the startup locale and encoding                
            </javadoc>
            <method name="initFontConfig" type="void" line="396">
                <scope line="399"/>
            </method>
            <method name="getInitELC" type="short" line="410">
                <scope line="411"/>
                <declaration name="elcIDs" type="HashMap&lt;String,Integer&gt;" line="414"/>
                <scope line="415"/>
                <declaration name="language" type="String" line="418"/>
                <declaration name="country" type="String" line="419"/>
                <declaration name="elc" type="String" line="420"/>
                <scope line="423"/>
                <scope line="425"/>
                <declaration name="i" type="int" line="428"/>
                <scope line="429">
                    <scope line="430"/>
                </scope>
            </method>
            <declaration name="verbose" type="boolean" line="439"/>
            <declaration name="initELC" type="short" line="440"/>
            <declaration name="initLocale" type="Locale" line="441"/>
            <declaration name="initEncoding" type="String" line="442"/>
            <declaration name="alphabeticSuffix" type="String" line="443"/>
            <declaration name="compFontNameIDs" type="short[][][]" line="445"/>
            <declaration name="compExclusions" type="int[][][]" line="446"/>
            <declaration name="compCoreNum" type="int[]" line="447"/>
            <declaration name="coreFontNameIDs" type="Set&lt;Short&gt;" line="449"/>
            <declaration name="fallbackFontNameIDs" type="Set&lt;Short&gt;" line="450"/>
            <method name="initAllComponentFonts" type="void" line="452">
                <comment line="458">
                    System.out.println(&quot;coreScriptID=&quot; + table_sequences[initELC  5 + fontIndex]);
                    for (int i = 0; i &lt; coreScripts.length; i++) {
                    System.out.println(&quot;  &quot; + i + &quot; :&quot; + getString(table_scriptIDs[coreScripts[i]]));
                    }                    
                </comment>
                <comment line="464">
                    init exclusionRanges                    
                </comment>
                <comment line="470">
                    init componentFontNames                    
                </comment>
                <comment line="474">
                    core                    
                </comment>
                <comment line="486">
                    System.out.println(&quot;nameid=&quot; + nameIDs[index]);                    
                </comment>
                <comment line="489">
                    fallback                    
                </comment>
                <comment line="503">
                    System.out.println(&quot;fontIndex=&quot; + fontIndex + &quot;, styleIndex=&quot; + styleIndex
                    + &quot;, fbIndex=&quot; + i + &quot;,fbS=&quot; + fallbackScripts[i] + &quot;, id=&quot; + id);                    
                </comment>
                <declaration name="fallbackScripts" type="short[]" line="453"/>
                <scope line="454">
                    <declaration name="coreScripts" type="short[]" line="455"/>
                    <declaration name="exclusions" type="int[][]" line="464"/>
                    <scope line="465"/>
                    <scope line="470">
                        <declaration name="index" type="int" line="471"/>
                        <declaration name="nameIDs" type="short[]" line="472"/>
                        <scope line="474">
                            <scope line="478"/>
                            <scope line="482"/>
                        </scope>
                        <scope line="489">
                            <declaration name="id" type="short" line="490"/>
                            <scope line="493"/>
                            <scope line="496"/>
                            <scope line="499"/>
                        </scope>
                        <scope line="509">
                            <declaration name="newNameIDs" type="short[]" line="510"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="remapLocaleMap" type="short" line="519">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                    <param name="scriptID" type="short"/>
                    <param name="fontID" type="short"/>
                </params>
                <declaration name="scriptName" type="String" line="520"/>
                <declaration name="value" type="String" line="522"/>
                <scope line="523">
                    <declaration name="fontName" type="String" line="524"/>
                    <declaration name="styleName" type="String" line="525"/>
                </scope>
                <scope line="528"/>
                <scope line="532">
                    <declaration name="name" type="String" line="533"/>
                    <scope line="534"/>
                </scope>
            </method>
            <method name="hasMonoToPropMap" type="boolean" line="542"/>
            <method name="remapProportional" type="short" line="546">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="id" type="short"/>
                </params>
                <comment line="550">
                    &quot;monospaced&quot;                    
                </comment>
                <comment line="551">
                    &quot;dialoginput&quot;                    
                </comment>
                <scope line="550">
                    <declaration name="i" type="int" line="551"/>
                    <scope line="552">
                        <scope line="553"/>
                    </scope>
                </scope>
            </method>
            <declaration name="NUM_FONTS" type="int" line="565"/>
            <declaration name="NUM_STYLES" type="int" line="566"/>
            <declaration name="fontNames" type="String[]" line="567"/>
            <declaration name="publicFontNames" type="String[]" line="569"/>
            <declaration name="styleNames" type="String[]" line="572"/>
            <javadoc line="575">
                Checks whether the given font family name is a valid logical font name.
                  The check is case insensitive.                
            </javadoc>
            <method name="isLogicalFontFamilyName" type="boolean" line="579">
                <params>
                    <param name="fontName" type="String"/>
                </params>
            </method>
            <javadoc line="583">
                Checks whether the given font family name is a valid logical font name.
                  The check is case sensitive.                
            </javadoc>
            <method name="isLogicalFontFamilyNameLC" type="boolean" line="587">
                <params>
                    <param name="fontName" type="String"/>
                </params>
                <scope line="588">
                    <scope line="589"/>
                </scope>
            </method>
            <javadoc line="596">
                Checks whether the given style name is a valid logical font style name.                
            </javadoc>
            <method name="isLogicalFontStyleName" type="boolean" line="599">
                <params>
                    <param name="styleName" type="String"/>
                </params>
                <scope line="600">
                    <scope line="601"/>
                </scope>
            </method>
            <javadoc line="608">
                Checks whether the given font face name is a valid logical font name.
                  The check is case insensitive.                
            </javadoc>
            <method name="isLogicalFontFaceName" type="boolean" line="612">
                <params>
                    <param name="fontName" type="String"/>
                </params>
            </method>
            <javadoc line="616">
                Checks whether the given font face name is a valid logical font name.
                  The check is case sensitive.                
            </javadoc>
            <method name="isLogicalFontFaceNameLC" type="boolean" line="620">
                <params>
                    <param name="fontName" type="String"/>
                </params>
                <declaration name="period" type="int" line="621"/>
                <scope line="622">
                    <declaration name="familyName" type="String" line="623"/>
                    <declaration name="styleName" type="String" line="624"/>
                </scope>
                <scope line="627"/>
            </method>
            <method name="getFontIndex" type="int" line="632">
                <params>
                    <param name="fontName" type="String"/>
                </params>
            </method>
            <method name="getStyleIndex" type="int" line="636">
                <params>
                    <param name="styleName" type="String"/>
                </params>
            </method>
            <method name="getArrayIndex" type="int" line="640">
                <params>
                    <param name="names" type="String[]"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="641">
                    <scope line="642"/>
                </scope>
            </method>
            <method name="getStyleIndex" type="int" line="650">
                <params>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="getFontName" type="String" line="665">
                <params>
                    <param name="fontIndex" type="int"/>
                </params>
            </method>
            <method name="getStyleName" type="String" line="669">
                <params>
                    <param name="styleIndex" type="int"/>
                </params>
            </method>
            <javadoc line="673">
                Returns the font face name for the given logical font
                  family name and style.
                  The style argument is interpreted as in java.awt.Font.Font.                
            </javadoc>
            <method name="getLogicalFontFaceName" type="String" line="678">
                <params>
                    <param name="familyName" type="String"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <javadoc line="683">
                Returns the string typically used in properties files
                  for the given style.
                  The style argument is interpreted as in java.awt.Font.Font.                
            </javadoc>
            <method name="getStyleString" type="String" line="688">
                <params>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="getFallbackFamilyName" type="String" line="692"/>
            <javadoc line="692">
                Returns a fallback name for the given font name. For a few known
                  font names, matching logical font names are returned. For all
                  other font names, defaultFallback is returned.
                  defaultFallback differs between AWT and 2D.                
            </javadoc>
            <javadoc line="700">
                Returns the 1.1 equivalent for some old 1.0 font family names for
                  which we need to maintain compatibility in some configurations.
                  Returns null for other font names.                
            </javadoc>
            <method name="getCompatibilityFamilyName" type="String" line="705">
                <params>
                    <param name="fontName" type="String"/>
                </params>
                <scope line="707"/>
                <scope line="709"/>
                <scope line="711"/>
            </method>
            <declaration name="installedFallbackFontFiles" type="String[]" line="717"/>
            <javadoc line="719">
                Maps a file name given in the font configuration file
                  to a format appropriate for the platform.                
            </javadoc>
            <method name="mapFileName" type="String" line="723">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <declaration name="reorderMap" type="HashMap" line="734"/>
            <method name="initReorderMap" type="void" line="737"/>
            <method name="shuffle" type="void" line="742">
                <params>
                    <param name="seq" type="String[]"/>
                    <param name="src" type="int"/>
                    <param name="dst" type="int"/>
                </params>
                <scope line="743"/>
                <declaration name="tmp" type="String" line="746"/>
                <scope line="747"/>
            </method>
            <method name="willReorderForStartupLocale" type="boolean" line="757"/>
            <method name="getReorderSequence" type="Object" line="761">
                <comment line="768">
                                        
                </comment>
                <scope line="762"/>
                <declaration name="reorderMap" type="HashMap" line="765"/>
                <declaration name="language" type="String" line="768"/>
                <declaration name="country" type="String" line="769"/>
                <declaration name="val" type="Object" line="770"/>
                <scope line="771"/>
                <scope line="774"/>
            </method>
            <method name="reorderSequenceForLocale" type="void" line="784">
                <params>
                    <param name="seq" type="String[]"/>
                </params>
                <declaration name="val" type="Object" line="785"/>
                <scope line="786">
                    <scope line="787">
                        <scope line="788"/>
                    </scope>
                </scope>
                <scope line="793">
                    <declaration name="fontLangs" type="String[]" line="794"/>
                    <scope line="795">
                        <scope line="796">
                            <scope line="797"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="splitSequence" type="Vector" line="805">
                <params>
                    <param name="sequence" type="String"/>
                </params>
                <comment line="807">
                    String.split would be more convenient, but incurs big performance penalty                    
                </comment>
                <declaration name="parts" type="Vector" line="807"/>
                <declaration name="start" type="int" line="808"/>
                <declaration name="end" type="int" line="809"/>
                <scope line="810"/>
                <scope line="814"/>
            </method>
            <method name="split" type="String[]" line="820">
                <params>
                    <param name="sequence" type="String"/>
                </params>
                <declaration name="v" type="Vector" line="821"/>
            </method>
            <declaration name="charsetRegistry" type="Hashtable" line="828"/>
            <javadoc line="830">
                Returns FontDescriptors describing the physical fonts used for the
                  given logical font name and style. The font name is interpreted
                  in a case insensitive way.
                  The style argument is interpreted as in java.awt.Font.Font.                
            </javadoc>
            <method name="getFontDescriptors" type="FontDescriptor[]" line="836">
                <params>
                    <param name="fontName" type="String"/>
                    <param name="style" type="int"/>
                </params>
                <declaration name="fontIndex" type="int" line="839"/>
                <declaration name="styleIndex" type="int" line="840"/>
            </method>
            <declaration name="fontDescriptors" type="FontDescriptor[][][]" line="843"/>
            <method name="getFontDescriptors" type="FontDescriptor[]" line="846">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <declaration name="descriptors" type="FontDescriptor[]" line="847"/>
                <scope line="848"/>
            </method>
            <method name="buildFontDescriptors" type="FontDescriptor[]" line="855">
                <params>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <comment line="881">
                    look up character encoding                    
                </comment>
                <comment line="889">
                    we already have the exclusion ranges                    
                </comment>
                <comment line="892">
                    create descriptor                    
                </comment>
                <declaration name="fontName" type="String" line="856"/>
                <declaration name="styleName" type="String" line="857"/>
                <declaration name="scriptIDs" type="short[]" line="859"/>
                <declaration name="nameIDs" type="short[]" line="860"/>
                <declaration name="sequence" type="String[]" line="861"/>
                <declaration name="names" type="String[]" line="862"/>
                <scope line="863">
                    <scope line="866"/>
                </scope>
                <declaration name="fontExclusionRanges" type="int[][]" line="870"/>
                <declaration name="descriptors" type="FontDescriptor[]" line="872"/>
                <scope line="874">
                    <declaration name="awtFontName" type="String" line="875"/>
                    <declaration name="encoding" type="String" line="876"/>
                    <scope line="882"/>
                    <declaration name="enc" type="CharsetEncoder" line="885"/>
                    <declaration name="exclusionRanges" type="int[]" line="889"/>
                </scope>
            </method>
            <javadoc line="897">
                Returns the AWT font name for the given platform font name and
                  character subset.                
            </javadoc>
            <method name="makeAWTFontName" type="String" line="902">
                <params>
                    <param name="platformFontName" type="String"/>
                    <param name="characterSubsetName" type="String"/>
                </params>
            </method>
            <method name="getEncoding" type="String" line="906"/>
            <javadoc line="906">
                Returns the java.io name of the platform character encoding for the
                  given AWT font name and character subset. May return &quot;default&quot;
                  to indicate that getDefaultFontCharset should be called to obtain
                  a charset encoder.                
            </javadoc>
            <method name="getFontCharsetEncoder" type="CharsetEncoder" line="916">
                <params>
                    <param name="charsetName" type="String"/>
                    <param name="fontName" type="String"/>
                </params>
                <declaration name="fc" type="Charset" line="918"/>
                <scope line="919"/>
                <scope line="921"/>
                <scope line="924"/>
                <scope line="928"/>
                <scope line="930">
                    <anonymous_class line="931">
                        <method name="run" type="Object" line="932">
                            <scope line="933"/>
                            <scope line="936"/>
                        </method>
                    </anonymous_class>
                    <declaration name="fcc" type="Class" line="931"/>
                    <scope line="942">
                        <scope line="943"/>
                        <scope line="945"/>
                    </scope>
                </scope>
                <scope line="949"/>
                <scope line="953"/>
                <scope line="955"/>
            </method>
            <method name="getDefaultFontCharset" type="Charset" line="961"/>
            <method name="getAWTFontPathSet" type="HashSet<String>" line="969"/>
            <javadoc line="977">
                Returns an array of composite font descriptors for all logical font
                  faces.
                  If the font configuration file doesn&apos;t specify Lucida Sans Regular
                  or the given fallback font as component fonts, they are added here.                
            </javadoc>
            <method name="get2DCompositeFontInfo" type="CompositeFontDescriptor[]" line="983">
                <comment line="993">
                    determine exclusion ranges for font
                     AWT uses separate exclusion range array per component font.
                     2D packs all range boundaries into one array.
                     Both use separate entries for lower and upper boundary.                    
                </comment>
                <comment line="1015">
                    other info is per style                    
                </comment>
                <comment line="1019">
                    fall back fonts listed in the lib/fonts/fallback directory                    
                </comment>
                <comment line="1025">
                    determine face names and file names of component fonts                    
                </comment>
                <comment line="1043">
                    System.out.println(publicFontNames[fontIndex] + &quot;.&quot; + styleNames[styleIndex] + &quot;.&quot;
                    + getString(table_scriptIDs[coreScripts[index]]) + &quot;=&quot; + componentFileNames[index]);                    
                </comment>
                <comment line="1049">
                    &quot;Lucida Sans Regular&quot; is not in the list, we add it here                    
                </comment>
                <comment line="1084">
                    exclusion range limit array length must match component face name
                     array length - native code relies on this                    
                </comment>
                <comment line="1092">
                    padding for various fallback fonts                    
                </comment>
                <comment line="1097">
                    System.out.println(faceName + &quot;:&quot;);
                    for (int i = 0; i &lt; componentFileNames.length; i++) {
                    System.out.println(&quot;    &quot; + componentFaceNames[i]
                    + &quot;  -&gt; &quot; + componentFileNames[i]);
                    }                    
                </comment>
                <declaration name="result" type="CompositeFontDescriptor[]" line="984"/>
                <declaration name="defaultFontFile" type="String" line="986"/>
                <declaration name="defaultFontFaceName" type="String" line="987"/>
                <scope line="989">
                    <declaration name="fontName" type="String" line="990"/>
                    <declaration name="exclusions" type="int[][]" line="996"/>
                    <declaration name="numExclusionRanges" type="int" line="997"/>
                    <scope line="998"/>
                    <declaration name="exclusionRanges" type="int[]" line="1001"/>
                    <declaration name="exclusionRangeLimits" type="int[]" line="1002"/>
                    <declaration name="exclusionRangeIndex" type="int" line="1003"/>
                    <declaration name="exclusionRangeLimitIndex" type="int" line="1004"/>
                    <scope line="1005">
                        <declaration name="componentRanges" type="int[]" line="1006"/>
                        <scope line="1007">
                            <declaration name="value" type="int" line="1008"/>
                        </scope>
                    </scope>
                    <scope line="1015">
                        <declaration name="maxComponentFontCount" type="int" line="1016"/>
                        <declaration name="sawDefaultFontFile" type="boolean" line="1017"/>
                        <scope line="1019"/>
                        <declaration name="faceName" type="String" line="1022"/>
                        <declaration name="componentFaceNames" type="String[]" line="1025"/>
                        <declaration name="componentFileNames" type="String[]" line="1026"/>
                        <declaration name="index" type="int" line="1028"/>
                        <scope line="1029">
                            <declaration name="fontNameID" type="short" line="1030"/>
                            <declaration name="fileNameID" type="short" line="1031"/>
                            <scope line="1035"/>
                            <scope line="1039"/>
                        </scope>
                        <scope line="1049">
                            <declaration name="len" type="int" line="1050"/>
                            <scope line="1051"/>
                            <scope line="1054">
                                <declaration name="newComponentFaceNames" type="String[]" line="1055"/>
                                <declaration name="newComponentFileNames" type="String[]" line="1058"/>
                            </scope>
                        </scope>
                        <scope line="1067">
                            <scope line="1068"/>
                        </scope>
                        <scope line="1075">
                            <declaration name="newComponentFaceNames" type="String[]" line="1076"/>
                            <declaration name="newComponentFileNames" type="String[]" line="1079"/>
                        </scope>
                        <declaration name="clippedExclusionRangeLimits" type="int[]" line="1086"/>
                        <scope line="1087">
                            <declaration name="len" type="int" line="1088"/>
                            <scope line="1092"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getFaceNameFromComponentFontName" type="String" line="1116"/>
            <method name="getFileNameFromComponentFontName" type="String" line="1117"/>
            <declaration name="existsMap" type="HashMap&lt;String,Boolean&gt;" line="1132"/>
            <method name="needToSearchForFile" type="boolean" line="1133">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <comment line="1142">
                    call getNumberCoreFonts() to ensure these are initialised, and
                     if this file isn&apos;t for a core component, ie, is a for a fallback
                     font which very typically isn&apos;t available, then can&apos;t afford
                     to take the start-up penalty to search for it.                    
                </comment>
                <scope line="1134"/>
                <scope line="1136"/>
                <declaration name="exists" type="Boolean" line="1139"/>
                <scope line="1140">
                    <scope line="1147"/>
                    <scope line="1149">
                        <scope line="1153"/>
                    </scope>
                </scope>
            </method>
            <declaration name="numCoreFonts" type="int" line="1161"/>
            <declaration name="componentFonts" type="String[]" line="1162"/>
            <declaration name="filenamesMap" type="HashMap&lt;String,String&gt;" line="1163"/>
            <declaration name="coreFontFileNames" type="HashSet&lt;String&gt;" line="1164"/>
            <method name="getNumberCoreFonts" type="int" line="1170">
                <scope line="1171">
                    <declaration name="emptyShortArray" type="Short[]" line="1173"/>
                    <declaration name="core" type="Short[]" line="1174"/>
                    <declaration name="fallback" type="Short[]" line="1175"/>
                    <declaration name="numFallbackFonts" type="int" line="1177"/>
                    <declaration name="i" type="int" line="1178"/>
                    <scope line="1179">
                        <scope line="1180"/>
                    </scope>
                    <declaration name="filename" type="String" line="1187"/>
                    <scope line="1188">
                        <declaration name="fontid" type="short" line="1189"/>
                        <declaration name="fileid" type="short" line="1190"/>
                        <declaration name="compFileName" type="String" line="1192"/>
                        <scope line="1193"/>
                    </scope>
                    <scope line="1198">
                        <scope line="1199">
                            <declaration name="fontid" type="short" line="1200"/>
                            <declaration name="fileid" type="short" line="1201"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getPlatformFontNames" type="String[]" line="1216">
                <scope line="1217"/>
            </method>
            <javadoc line="1223">
                Returns a file name for the physical font represented by this platform font name,
                  if the font configuration has such information available, or null if the
                  information is unavailable. The file name returned is just a hint; a null return
                  value doesn&apos;t necessarily mean that the font is unavailable, nor does a non-null
                  return value guarantee that the file exists and contains the physical font.
                  The file name can be an absolute or a relative path name.                
            </javadoc>
            <method name="getFileNameFromPlatformName" type="String" line="1231">
                <params>
                    <param name="platformName" type="String"/>
                </params>
                <comment line="1233">
                    get2DCompositeFontInfo
                         -&gt;  getFileNameFromComponentfontName()  (W/M)
                           -&gt;   getFileNameFromPlatformName()
                     it&apos;s a waste of time on Win32, but I have to give X11 a chance to
                     call getFileNameFromXLFD()                    
                </comment>
            </method>
            <javadoc line="1240">
                Returns a configuration specific path to be appended to the font
                  search path.                
            </javadoc>
            <method name="getExtraFontPath" type="String" line="1244"/>
            <method name="getVersion" type="String" line="1248"/>
            <method name="getFontConfiguration" type="FontConfiguration" line="1253"/>
            <method name="setFontConfiguration" type="void" line="1257">
                <comment line="1259">
                                        
                </comment>
            </method>
            <declaration name="HEAD_LENGTH" type="int" line="1319"/>
            <declaration name="INDEX_scriptIDs" type="int" line="1320"/>
            <declaration name="INDEX_scriptFonts" type="int" line="1321"/>
            <declaration name="INDEX_elcIDs" type="int" line="1322"/>
            <declaration name="INDEX_sequences" type="int" line="1323"/>
            <declaration name="INDEX_fontfileNameIDs" type="int" line="1324"/>
            <declaration name="INDEX_componentFontNameIDs" type="int" line="1325"/>
            <declaration name="INDEX_filenames" type="int" line="1326"/>
            <declaration name="INDEX_awtfontpaths" type="int" line="1327"/>
            <declaration name="INDEX_exclusions" type="int" line="1328"/>
            <declaration name="INDEX_proportionals" type="int" line="1329"/>
            <declaration name="INDEX_scriptFontsMotif" type="int" line="1330"/>
            <declaration name="INDEX_alphabeticSuffix" type="int" line="1331"/>
            <declaration name="INDEX_stringIDs" type="int" line="1332"/>
            <declaration name="INDEX_stringTable" type="int" line="1333"/>
            <declaration name="INDEX_TABLEEND" type="int" line="1334"/>
            <declaration name="INDEX_fallbackScripts" type="int" line="1335"/>
            <declaration name="INDEX_appendedfontpath" type="int" line="1336"/>
            <declaration name="INDEX_version" type="int" line="1337"/>
            <declaration name="head" type="short[]" line="1339"/>
            <declaration name="table_scriptIDs" type="short[]" line="1340"/>
            <declaration name="table_scriptFonts" type="short[]" line="1341"/>
            <declaration name="table_elcIDs" type="short[]" line="1342"/>
            <declaration name="table_sequences" type="short[]" line="1343"/>
            <declaration name="table_fontfileNameIDs" type="short[]" line="1344"/>
            <declaration name="table_componentFontNameIDs" type="short[]" line="1345"/>
            <declaration name="table_filenames" type="short[]" line="1346"/>
            <declaration name="table_awtfontpaths" type="short[]" line="1347"/>
            <declaration name="table_exclusions" type="short[]" line="1348"/>
            <declaration name="table_proportionals" type="short[]" line="1349"/>
            <declaration name="table_scriptFontsMotif" type="short[]" line="1350"/>
            <declaration name="table_alphabeticSuffix" type="short[]" line="1351"/>
            <declaration name="table_stringIDs" type="short[]" line="1352"/>
            <declaration name="table_stringTable" type="char[]" line="1353"/>
            <javadoc line="1355">
                Checks consistencies of complied fontconfig data. This method
                  is called only at the build-time from
                  build.tools.compilefontconfig.CompileFontConfig.                
            </javadoc>
            <method name="sanityCheck" type="void" line="1360">
                <comment line="1364">
                    This method will only be called during build time, do we
                    need do PrivilegedAction?                    
                </comment>
                <comment line="1373">
                    componentFontNameID starts from &quot;1&quot;                    
                </comment>
                <comment line="1376">
                    The corresponding finename entry for a component
                     font name is mandatory on Windows, but it&apos;s
                     optional on Solaris and Linux.                    
                </comment>
                <declaration name="errors" type="int" line="1361"/>
                <anonymous_class line="1366">
                    <method name="run" type="Object" line="1367"/>
                </anonymous_class>
                <declaration name="osName" type="String" line="1365"/>
                <scope line="1373">
                    <scope line="1374">
                        <scope line="1378"/>
                        <scope line="1383">
                            <scope line="1384"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1392">
                    <declaration name="fid" type="short" line="1393"/>
                    <scope line="1394"/>
                    <scope line="1400">
                        <scope line="1402">
                            <scope line="1403">
                                <declaration name="jj" type="int" line="1404"/>
                                <declaration name="ffid" type="short" line="1405"/>
                                <scope line="1406"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1418">
                    <scope line="1419">
                        <scope line="1420">
                            <declaration name="script" type="String" line="1421"/>
                            <scope line="1424"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1435"/>
            </method>
            <method name="isEmpty" type="boolean" line="1442">
                <params>
                    <param name="a" type="short[]"/>
                </params>
                <scope line="1443">
                    <scope line="1444"/>
                </scope>
            </method>
            <method name="dump" type="void" line="1452">
                <scope line="1454"/>
                <scope line="1460">
                    <declaration name="fid" type="short" line="1461"/>
                    <scope line="1462"/>
                </scope>
                <scope line="1469">
                    <declaration name="fid" type="short" line="1470"/>
                    <scope line="1471">
                        <scope line="1473">
                            <scope line="1474">
                                <declaration name="jj" type="int" line="1475"/>
                                <declaration name="ffid" type="short" line="1476"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1491">
                    <declaration name="ss" type="short[]" line="1493"/>
                    <scope line="1494"/>
                </scope>
                <scope line="1504">
                    <scope line="1505"/>
                    <scope line="1507"/>
                </scope>
                <scope line="1513"/>
                <scope line="1519"/>
                <declaration name="i" type="int" line="1525"/>
                <scope line="1527"/>
                <declaration name="fbsIDs" type="short[]" line="1536"/>
                <scope line="1537"/>
            </method>
            <method name="getComponentFontID" type="short" line="1555">
                <params>
                    <param name="scriptID" type="short"/>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <comment line="1558">
                    System.out.println(&quot;fid=&quot; + fid + &quot;/ scriptID=&quot; + scriptID + &quot;, fi=&quot; + fontIndex + &quot;, si=&quot; + styleIndex);                    
                </comment>
                <comment line="1560">
                    &quot;allfonts&quot;                    
                </comment>
                <declaration name="fid" type="short" line="1556"/>
                <scope line="1558"/>
                <scope line="1561"/>
            </method>
            <method name="getComponentFontIDMotif" type="short" line="1569">
                <params>
                    <param name="scriptID" type="short"/>
                    <param name="fontIndex" type="int"/>
                    <param name="styleIndex" type="int"/>
                </params>
                <comment line="1576">
                    &quot;allfonts&quot; &gt; 0 or &quot;not defined&quot; == 0                    
                </comment>
                <scope line="1570"/>
                <declaration name="fid" type="short" line="1573"/>
                <scope line="1574"/>
                <scope line="1577"/>
            </method>
            <method name="getExclusionRanges" type="int[]" line="1582">
                <params>
                    <param name="scriptID" type="short"/>
                </params>
                <declaration name="exID" type="short" line="1583"/>
                <scope line="1584"/>
                <scope line="1586">
                    <declaration name="exChar" type="char[]" line="1587"/>
                    <declaration name="exInt" type="int[]" line="1588"/>
                    <declaration name="i" type="int" line="1589"/>
                    <scope line="1590"/>
                </scope>
            </method>
            <method name="contains" type="boolean" line="1597">
                <params>
                    <param name="IDs" type="short"/>
                    <param name="id" type="short"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="1598">
                    <scope line="1599"/>
                </scope>
            </method>
            <method name="getComponentFontName" type="String" line="1607">
                <params>
                    <param name="id" type="short"/>
                </params>
                <scope line="1608"/>
            </method>
            <method name="getComponentFileName" type="String" line="1614">
                <params>
                    <param name="id" type="short"/>
                </params>
                <scope line="1615"/>
            </method>
            <method name="getComponentFileID" type="short" line="1622">
                <params>
                    <param name="nameID" type="short"/>
                </params>
            </method>
            <method name="getScriptName" type="String" line="1626">
                <params>
                    <param name="scriptID" type="short"/>
                </params>
            </method>
            <declaration name="reorderScripts" type="HashMap&lt;String,Short&gt;" line="1630"/>
            <method name="getCoreScripts" type="short[]" line="1631">
                <params>
                    <param name="fontIndex" type="int"/>
                </params>
                <comment line="1634">
                    System.out.println(&quot;getCoreScripts: elc=&quot; + elc + &quot;, fontIndex=&quot; + fontIndex);
                    short[] ss = getShortArray(table_sequences[elc  NUM_FONTS + fontIndex]);
                    for (int i = 0; i &lt; ss.length; i++) {
                    System.out.println(&quot;     &quot; + getString((short)table_scriptIDs[ss[i]]));
                    }                    
                </comment>
                <declaration name="elc" type="short" line="1632"/>
                <declaration name="scripts" type="short[]" line="1640"/>
                <scope line="1641">
                    <scope line="1642"/>
                    <declaration name="ss" type="String[]" line="1645"/>
                    <scope line="1646"/>
                    <scope line="1651"/>
                </scope>
            </method>
            <method name="getFallbackScripts" type="short[]" line="1658"/>
            <method name="printTable" type="void" line="1662">
                <params>
                    <param name="list" type="short[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="1663"/>
            </method>
            <method name="readShortTable" type="short[]" line="1669">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="1670"/>
                <declaration name="data" type="short[]" line="1673"/>
                <declaration name="bb" type="byte[]" line="1674"/>
                <declaration name="i" type="int" line="1676"/>
                <scope line="1677"/>
            </method>
            <method name="writeShortTable" type="void" line="1684">
                <params>
                    <param name="out" type="DataOutputStream"/>
                    <param name="data" type="short[]"/>
                </params>
                <scope line="1685"/>
            </method>
            <method name="toList" type="short[]" line="1690">
                <params>
                    <param name="map" type="HashMap<String,Short>"/>
                </params>
                <declaration name="list" type="short[]" line="1691"/>
                <scope line="1693"/>
            </method>
            <declaration name="stringCache" type="String[]" line="1700"/>
            <method name="getString" type="String" line="1701">
                <params>
                    <param name="stringID" type="short"/>
                </params>
                <comment line="1705">
                    if (loadingProperties) {
                    return stringTable.substring(stringIDs[stringID],
                    stringIDs[stringID+1]);
                    }                    
                </comment>
                <comment line="1711">
                    sync if we want it to be MT-enabled                    
                </comment>
                <scope line="1711"/>
            </method>
            <method name="getShortArray" type="short[]" line="1720">
                <params>
                    <param name="shortArrayID" type="short"/>
                </params>
                <declaration name="s" type="String" line="1721"/>
                <declaration name="cc" type="char[]" line="1722"/>
                <declaration name="ss" type="short[]" line="1723"/>
                <scope line="1724"/>
            </method>
            <method name="getStringID" type="short" line="1730">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="1731"/>
                <declaration name="pos0" type="short" line="1734"/>
                <declaration name="pos1" type="short" line="1736"/>
                <scope line="1741">
                    <declaration name="tmp" type="short[]" line="1742"/>
                </scope>
            </method>
            <method name="getShortArrayID" type="short" line="1749">
                <params>
                    <param name="sa" type="short"/>
                </params>
                <declaration name="cc" type="char[]" line="1750"/>
                <scope line="1751"/>
                <declaration name="s" type="String" line="1754"/>
            </method>
            <declaration name="EMPTY_INT_ARRAY" type="int[]" line="1759"/>
            <declaration name="EMPTY_STRING_ARRAY" type="String[]" line="1760"/>
            <declaration name="EMPTY_SHORT_ARRAY" type="short[]" line="1761"/>
            <declaration name="UNDEFINED_COMPONENT_FONT" type="String" line="1762"/>
            <class name="PropertiesHandler" line="1767">
                <comment line="1946">
                    ////////////////////////////////////////////                    
                </comment>
                <comment line="1948">
                    elc -&gt; Encoding.Language.Country                    
                </comment>
                <comment line="1950">
                    componentFontNameID starts from &quot;1&quot;, &quot;0&quot; reserves for &quot;undefined&quot;                    
                </comment>
                <comment line="1956">
                    componentFontNameID -&gt; fontfileNameID                    
                </comment>
                <comment line="1959">
                    elcID -&gt; allfonts/logicalFont -&gt; scriptID list
                    (1)if we have a &quot;allfonts&quot;, then the length of the
                       value array is &quot;1&quot;, otherwise it&apos;s 5, each font
                       must have their own individual entry.
                    scriptID list &quot;short[]&quot; is stored as an ID                    
                </comment>
                <comment line="1966">
                    scriptID -&gt;logicFontID/fontStyleID-&gt;componentFontNameID,
                    a 20-entry array (5-name x 4-style) for each script                    
                </comment>
                <comment line="1970">
                    scriptID -&gt; componentFontNameID                    
                </comment>
                <comment line="1973">
                    scriptID -&gt; exclusionRanges[]                    
                </comment>
                <comment line="1976">
                    scriptID -&gt; fontpath                    
                </comment>
                <comment line="1979">
                    fontID -&gt; fontID                    
                </comment>
                <comment line="1982">
                    scriptID -&gt; componentFontNameID                    
                </comment>
                <comment line="1985">
                    scriptID -&gt;logicFontID/fontStyleID-&gt;componentFontNameID,                    
                </comment>
                <comment line="1988">
                    elcID -&gt; stringID of alphabetic/XXXX                    
                </comment>
                <method name="load" type="void" line="1768">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <declaration name="fp" type="FontProperties" line="1771"/>
                </method>
                <method name="initBinaryTable" type="void" line="1776">
                    <comment line="1778">
                        (0)                        
                    </comment>
                    <comment line="1783">
                        (1)a: scriptAllfonts scriptID/allfonts -&gt; componentFontNameID
                           b: scriptFonts    scriptID -&gt; componentFontNameID[20]
                        if we have a &quot;allfonts.script&quot; def, then we just put
                        the &quot;-platformFontID&quot; value in the slot, otherwise the slot
                        value is &quot;offset&quot; which &quot;offset&quot; is where 20 entries located
                        in the table attached.                        
                    </comment>
                    <comment line="1809">
                        (2)                        
                    </comment>
                    <comment line="1813">
                        (3) sequences  elcID -&gt; XXXX[1|5] -&gt; scriptID[]                        
                    </comment>
                    <comment line="1817">
                        table_sequences[entry.getKey().intValue()] = (short)-off;                        
                    </comment>
                    <comment line="1820">
                        System.out.println(&quot;elc=&quot; + k + &quot;&quot; + getString((short)table_elcIDs[k]));
                        short[] ss = getShortArray(v[0]);
                        for (int i = 0; i &lt; ss.length; i++) {
                        System.out.println(&quot;     &quot; + getString((short)table_scriptIDs[ss[i]]));
                        }                        
                    </comment>
                    <comment line="1828">
                        the &quot;allfonts&quot; entries                        
                    </comment>
                    <comment line="1838">
                        (4)                        
                    </comment>
                    <comment line="1842">
                        (5)                        
                    </comment>
                    <comment line="1846">
                        (6)componentFontNameID -&gt; filenameID                        
                    </comment>
                    <comment line="1855">
                        (7)scriptID-&gt; awtfontpath
                        the paths are stored as scriptID -&gt; stringID in awtfontpahts                        
                    </comment>
                    <comment line="1863">
                        (8)exclusions                        
                    </comment>
                    <comment line="1876">
                        (9)proportionals                        
                    </comment>
                    <comment line="1885">
                        (10) see (1) for info, the only difference is &quot;xxx.motif&quot;                        
                    </comment>
                    <comment line="1913">
                        (11)short[] alphabeticSuffix                        
                    </comment>
                    <comment line="1922">
                        (15)short[] fallbackScriptIDs; just put the ID in head                        
                    </comment>
                    <comment line="1925">
                        (16)appendedfontpath                        
                    </comment>
                    <comment line="1928">
                        (17)version                        
                    </comment>
                    <comment line="1931">
                        (12)short[] StringIDs                        
                    </comment>
                    <comment line="1936">
                        (13)StringTable                        
                    </comment>
                    <comment line="1939">
                        (14)                        
                    </comment>
                    <comment line="1942">
                        StringTable cache                        
                    </comment>
                    <declaration name="len" type="int" line="1789"/>
                    <scope line="1792"/>
                    <declaration name="off" type="int" line="1795"/>
                    <scope line="1796">
                        <declaration name="v" type="Short[]" line="1798"/>
                        <scope line="1799">
                            <scope line="1800"/>
                            <scope line="1802"/>
                        </scope>
                    </scope>
                    <scope line="1815">
                        <declaration name="k" type="int" line="1817"/>
                        <declaration name="v" type="short[]" line="1818"/>
                        <scope line="1826">
                            <scope line="1828"/>
                        </scope>
                        <scope line="1831">
                            <scope line="1832"/>
                        </scope>
                    </scope>
                    <scope line="1850"/>
                    <scope line="1858"/>
                    <scope line="1865">
                        <declaration name="exI" type="int[]" line="1866"/>
                        <declaration name="exC" type="char[]" line="1867"/>
                        <declaration name="j" type="int" line="1868"/>
                        <scope line="1869"/>
                    </scope>
                    <declaration name="j" type="int" line="1878"/>
                    <scope line="1879"/>
                    <scope line="1886">
                        <scope line="1890"/>
                        <scope line="1895">
                            <declaration name="v" type="Short[]" line="1897"/>
                            <declaration name="i" type="int" line="1898"/>
                            <scope line="1899">
                                <scope line="1900"/>
                                <scope line="1902"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1908"/>
                    <scope line="1916"/>
                </method>
                <declaration name="scriptIDs" type="HashMap&lt;String,Short&gt;" line="1946"/>
                <declaration name="elcIDs" type="HashMap&lt;String,Short&gt;" line="1948"/>
                <declaration name="componentFontNameIDs" type="HashMap&lt;String,Short&gt;" line="1950"/>
                <declaration name="fontfileNameIDs" type="HashMap&lt;String,Short&gt;" line="1951"/>
                <declaration name="logicalFontIDs" type="HashMap&lt;String,Integer&gt;" line="1952"/>
                <declaration name="fontStyleIDs" type="HashMap&lt;String,Integer&gt;" line="1953"/>
                <declaration name="filenames" type="HashMap&lt;Short,Short&gt;" line="1956"/>
                <declaration name="sequences" type="HashMap&lt;Short,short[]&gt;" line="1963"/>
                <declaration name="scriptFonts" type="HashMap&lt;Short,Short[]&gt;" line="1967"/>
                <declaration name="scriptAllfonts" type="HashMap&lt;Short,Short&gt;" line="1970"/>
                <declaration name="exclusions" type="HashMap&lt;Short,int[]&gt;" line="1973"/>
                <declaration name="awtfontpaths" type="HashMap&lt;Short,Short&gt;" line="1976"/>
                <declaration name="proportionals" type="HashMap&lt;Short,Short&gt;" line="1979"/>
                <declaration name="scriptAllfontsMotif" type="HashMap&lt;Short,Short&gt;" line="1982"/>
                <declaration name="scriptFontsMotif" type="HashMap&lt;Short,Short[]&gt;" line="1985"/>
                <declaration name="alphabeticSuffix" type="HashMap&lt;Short,Short&gt;" line="1988"/>
                <declaration name="fallbackScriptIDs" type="short[]" line="1990"/>
                <declaration name="version" type="String" line="1991"/>
                <declaration name="appendedfontpath" type="String" line="1992"/>
                <method name="initLogicalNameStyle" type="void" line="1994"/>
                <method name="initHashMaps" type="void" line="2008">
                    <comment line="2013">
                        Init these tables to allow componentFontNameID, fontfileNameIDs
                        to start from &quot;1&quot;.                        
                    </comment>
                    <comment line="2030">
                        version
                        appendedfontpath                        
                    </comment>
                </method>
                <method name="parseExclusions" type="int[]" line="2035">
                    <params>
                        <param name="key" type="String"/>
                        <param name="exclusions" type="String"/>
                    </params>
                    <comment line="2040">
                        range format is xxxx-XXXX,yyyyyy-YYYYYY,.....                        
                    </comment>
                    <scope line="2036"/>
                    <declaration name="numExclusions" type="int" line="2040"/>
                    <declaration name="pos" type="int" line="2041"/>
                    <scope line="2042"/>
                    <declaration name="exclusionRanges" type="int[]" line="2046"/>
                    <declaration name="newPos" type="int" line="2048"/>
                    <scope line="2049">
                        <declaration name="lower" type="String" line="2050"/>
                        <declaration name="lo" type="int" line="2051"/>
                        <scope line="2052">
                            <scope line="2057"/>
                            <declaration name="lowerLength" type="int" line="2062"/>
                            <declaration name="upperLength" type="int" line="2063"/>
                            <scope line="2065"/>
                            <scope line="2070"/>
                        </scope>
                        <scope line="2073">
                            <scope line="2075"/>
                        </scope>
                    </scope>
                </method>
                <method name="getID" type="Short" line="2088">
                    <params>
                        <param name="map" type="HashMap<String,Short>"/>
                        <param name="key" type="String"/>
                    </params>
                    <declaration name="ret" type="Short" line="2089"/>
                    <scope line="2090"/>
                </method>
                <class name="FontProperties" line="2097">
                    <extends class="Properties"/>
                    <method name="put" type="Object" line="2098">
                        <params>
                            <param name="k" type="Object"/>
                            <param name="v" type="Object"/>
                        </params>
                    </method>
                </class>
                <method name="parseProperty" type="void" line="2104">
                    <params>
                        <param name="key" type="String"/>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="2107">
                        the only special case is &quot;MingLiu_HKSCS&quot; which has &quot;_&quot; in its
                        facename, we dont want to replace the &quot;_&quot; with &quot; &quot;                        
                    </comment>
                    <comment line="2115">
                        System.out.println(&quot;faceID=&quot; + faceID + &quot;/&quot; + key + &quot; -&gt; &quot;
                            + &quot;fileID=&quot; + fileID + &quot;/&quot; + value);                        
                    </comment>
                    <comment line="2126">
                        get the scriptID list                        
                    </comment>
                    <comment line="2131">
                        System.out.println(key + &quot; -&gt; &quot; + ss[i]);                        
                    </comment>
                    <comment line="2135">
                        System.out.println(key + &quot; -&gt; &quot; + ss[i]);                        
                    </comment>
                    <comment line="2140">
                        System.out.println(&quot;scriptID=&quot; + si[i] + &quot;/&quot; + ss[i]);                        
                    </comment>
                    <comment line="2142">
                        convert the &quot;short[] -&gt; string -&gt; stringID&quot;                        
                    </comment>
                    <comment line="2161">
                        System.out.println(&quot;elcID=&quot; + elcID + &quot;/&quot; + key.substring(dot + 1));                        
                    </comment>
                    <comment line="2180">
                        System.out.println(&quot;sequence.&quot; + key + &quot;/&quot; + id);                        
                    </comment>
                    <comment line="2194">
                        System.out.println(&quot;motif: all.&quot; + key + &quot;=&quot; + value);                        
                    </comment>
                    <comment line="2201">
                        System.out.println(&quot;scriptID=&quot; + getID(scriptIDs, key) + &quot;/&quot; + key);                        
                    </comment>
                    <comment line="2209">
                        System.out.println(key + &quot;=&quot; + value);                        
                    </comment>
                    <comment line="2213">
                        &quot;name.style.script(.motif)&quot;, we dont care anything else                        
                    </comment>
                    <comment line="2238">
                        System.out.println(&quot;motif: &quot; + key + &quot;=&quot; + value);                        
                    </comment>
                    <comment line="2260">
                        System.out.println(&quot;key=&quot; + key + &quot;&lt;&quot; + nameID + &quot;&gt;&lt;&quot; + styleID
                        + &quot;&gt;&lt;&quot; + scriptID + &quot;&gt;=&quot; + value
                        + &quot;&quot; + getID(componentFontNameIDs, value));                        
                    </comment>
                    <scope line="2105">
                        <scope line="2109"/>
                        <declaration name="faceID" type="Short" line="2112"/>
                        <declaration name="fileID" type="Short" line="2113"/>
                    </scope>
                    <scope line="2117"/>
                    <scope line="2120">
                        <declaration name="hasDefault" type="boolean" line="2122"/>
                        <declaration name="has1252" type="boolean" line="2123"/>
                        <declaration name="ss" type="String[]" line="2126"/>
                        <declaration name="sa" type="short[]" line="2127"/>
                        <scope line="2128">
                            <scope line="2129"/>
                            <scope line="2133"/>
                        </scope>
                        <declaration name="scriptArrayID" type="short" line="2142"/>
                        <declaration name="elcID" type="Short" line="2143"/>
                        <declaration name="dot" type="int" line="2144"/>
                        <scope line="2145">
                            <scope line="2146"/>
                            <scope line="2150"/>
                            <scope line="2152">
                                <scope line="2153"/>
                            </scope>
                        </scope>
                        <scope line="2158"/>
                        <declaration name="scriptArrayIDs" type="short[]" line="2163"/>
                        <scope line="2164"/>
                        <scope line="2167">
                            <scope line="2169"/>
                            <declaration name="fid" type="Integer" line="2172"/>
                            <scope line="2173">
                                <scope line="2174"/>
                            </scope>
                        </scope>
                        <scope line="2183"/>
                        <scope line="2186"/>
                    </scope>
                    <scope line="2189">
                        <scope line="2191"/>
                        <scope line="2195"/>
                    </scope>
                    <scope line="2198"/>
                    <scope line="2202"/>
                    <scope line="2204"/>
                    <scope line="2206"/>
                    <scope line="2211">
                        <declaration name="dot1" type="int" line="2213"/>
                        <declaration name="isMotif" type="boolean" line="2214"/>
                        <scope line="2217">
                            <scope line="2218"/>
                        </scope>
                        <scope line="2226">
                            <scope line="2227"/>
                        </scope>
                        <scope line="2234"/>
                        <declaration name="nameID" type="Integer" line="2239"/>
                        <declaration name="styleID" type="Integer" line="2240"/>
                        <declaration name="scriptID" type="Short" line="2241"/>
                        <scope line="2242">
                            <scope line="2243"/>
                        </scope>
                        <declaration name="pnids" type="Short[]" line="2248"/>
                        <scope line="2249"/>
                        <scope line="2251"/>
                        <scope line="2254"/>
                        <scope line="2264"/>
                        <scope line="2266"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>