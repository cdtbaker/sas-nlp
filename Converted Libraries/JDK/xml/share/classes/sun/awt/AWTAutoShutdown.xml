<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.AWTEvent"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.IdentityHashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="AWTAutoShutdown" line="8">
            <implements interface="Runnable"/>
            <javadoc line="8">
                This class is to let AWT shutdown automatically when a user is done
                  with AWT. It tracks AWT state using the following parameters:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;peerMap&lt;/code&gt; - the map between the existing peer objects
                  and their associated targets
                  &lt;li&gt;&lt;code&gt;toolkitThreadBusy&lt;/code&gt; - whether the toolkit thread
                  is waiting for a new native event to appear in its queue
                  or is dispatching an event
                  &lt;li&gt;&lt;code&gt;busyThreadSet&lt;/code&gt; - a set of all the event dispatch
                  threads that are busy at this moment, i.e. those that are not
                  waiting for a new event to appear in their event queue.
                  &lt;/ul&gt;&lt;p&gt;
                  AWT is considered to be in ready-to-shutdown state when
                  &lt;code&gt;peerMap&lt;/code&gt; is empty and &lt;code&gt;toolkitThreadBusy&lt;/code&gt;
                  is false and &lt;code&gt;busyThreadSet&lt;/code&gt; is empty.
                  The internal AWTAutoShutdown logic secures that the single non-daemon
                  thread (&lt;code&gt;blockerThread&lt;/code&gt;) is running when AWT is not in
                  ready-to-shutdown state. This blocker thread is to prevent AWT from
                  exiting since the toolkit thread is now daemon and all the event
                  dispatch threads are started only when needed. Once it is detected
                  that AWT is in ready-to-shutdown state this blocker thread waits
                  for a certain timeout and if AWT state doesn&apos;t change during timeout
                  this blocker thread terminates all the event dispatch threads and
                  exits.                
            </javadoc>
            <declaration name="theInstance" type="AWTAutoShutdown" line="35"/>
            <declaration name="mainLock" type="Object" line="36"/>
            <javadoc line="36">
                This lock object is used to synchronize shutdown operations.                
            </javadoc>
            <declaration name="activationLock" type="Object" line="40"/>
            <javadoc line="40">
                This lock object is to secure that when a new blocker thread is
                  started it will be the first who acquire the main lock after
                  the thread that created the new blocker released the main lock
                  by calling lock.wait() to wait for the blocker to start.                
            </javadoc>
            <declaration name="busyThreadSet" type="HashSet" line="47"/>
            <javadoc line="47">
                This set keeps references to all the event dispatch threads that
                  are busy at this moment, i.e. those that are not waiting for a
                  new event to appear in their event queue.
                  Access is synchronized on the main lock object.                
            </javadoc>
            <declaration name="toolkitThreadBusy" type="boolean" line="54"/>
            <javadoc line="54">
                Indicates whether the toolkit thread is waiting for a new native
                  event to appear or is dispatching an event.                
            </javadoc>
            <declaration name="peerMap" type="Map" line="59"/>
            <javadoc line="59">
                This is a map between components and their peers.
                  we should work with in under activationLock&amp;mainLock lock.                
            </javadoc>
            <declaration name="blockerThread" type="Thread" line="64"/>
            <javadoc line="64">
                References the alive non-daemon thread that is currently used
                  for keeping AWT from exiting.                
            </javadoc>
            <declaration name="timeoutPassed" type="boolean" line="69"/>
            <javadoc line="69">
                We need this flag to secure that AWT state hasn&apos;t changed while
                  we were waiting for the safety timeout to pass.                
            </javadoc>
            <declaration name="SAFETY_TIMEOUT" type="int" line="74"/>
            <javadoc line="74">
                Once we detect that AWT is ready to shutdown we wait for a certain
                  timeout to pass before stopping event dispatch threads.                
            </javadoc>
            <javadoc line="79">
                Constructor method is intentionally made private to secure
                  a single instance. Use getInstance() to reference it.                
                <see>
                    AWTAutoShutdown#getInstance                    
                </see>
            </javadoc>
            <method name="AWTAutoShutdown" type="constructor" line="84"/>
            <javadoc line="86">
                Returns reference to a single AWTAutoShutdown instance.                
            </javadoc>
            <method name="getInstance" type="AWTAutoShutdown" line="89"/>
            <javadoc line="92">
                Notify that the toolkit thread is not waiting for a native event
                  to appear in its queue.                
                <see>
                    AWTAutoShutdown#notifyToolkitThreadFree                    
                </see>
                <see>
                    AWTAutoShutdown#setToolkitBusy                    
                </see>
                <see>
                    AWTAutoShutdown#isReadyToShutdown                    
                </see>
            </javadoc>
            <method name="notifyToolkitThreadBusy" type="void" line="99"/>
            <javadoc line="102">
                Notify that the toolkit thread is waiting for a native event
                  to appear in its queue.                
                <see>
                    AWTAutoShutdown#notifyToolkitThreadFree                    
                </see>
                <see>
                    AWTAutoShutdown#setToolkitBusy                    
                </see>
                <see>
                    AWTAutoShutdown#isReadyToShutdown                    
                </see>
            </javadoc>
            <method name="notifyToolkitThreadFree" type="void" line="109"/>
            <javadoc line="112">
                Add a specified thread to the set of busy event dispatch threads.
                  If this set already contains the specified thread or the thread is null,
                  the call leaves this set unchanged and returns silently.                
                <param>
                    thread thread to be added to this set, if not present.                    
                </param>
                <see>
                    AWTAutoShutdown#notifyThreadFree                    
                </see>
                <see>
                    AWTAutoShutdown#isReadyToShutdown                    
                </see>
            </javadoc>
            <method name="notifyThreadBusy" type="void" line="120">
                <params>
                    <param name="thread" type="Thread"/>
                </params>
                <scope line="121"/>
                <scope line="124">
                    <scope line="125">
                        <scope line="126"/>
                        <scope line="129"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="137">
                Remove a specified thread from the set of busy event dispatch threads.
                  If this set doesn&apos;t contain the specified thread or the thread is null,
                  the call leaves this set unchanged and returns silently.                
                <param>
                    thread thread to be removed from this set, if present.                    
                </param>
                <see>
                    AWTAutoShutdown#notifyThreadBusy                    
                </see>
                <see>
                    AWTAutoShutdown#isReadyToShutdown                    
                </see>
            </javadoc>
            <method name="notifyThreadFree" type="void" line="145">
                <params>
                    <param name="thread" type="Thread"/>
                </params>
                <scope line="146"/>
                <scope line="149">
                    <scope line="150">
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                Notify that the peermap has been updated, that means a new peer
                  has been created or some existing peer has been disposed.                
                <see>
                    AWTAutoShutdown#isReadyToShutdown                    
                </see>
            </javadoc>
            <method name="notifyPeerMapUpdated" type="void" line="164">
                <scope line="165">
                    <scope line="166">
                        <scope line="167"/>
                        <scope line="170"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="177">
                Determine whether AWT is currently in ready-to-shutdown state.
                  AWT is considered to be in ready-to-shutdown state if
                  &lt;code&gt;peerMap&lt;/code&gt; is empty and &lt;code&gt;toolkitThreadBusy&lt;/code&gt;
                  is false and &lt;code&gt;busyThreadSet&lt;/code&gt; is empty.                
                <return>
                    true if AWT is in ready-to-shutdown state.                    
                </return>
            </javadoc>
            <method name="isReadyToShutdown" type="boolean" line="184"/>
            <javadoc line="187">
                Notify about the toolkit thread state change.                
                <param>
                    busy true if the toolkit thread state changes from idle
                      to busy.                    
                </param>
                <see>
                    AWTAutoShutdown#notifyToolkitThreadBusy                    
                </see>
                <see>
                    AWTAutoShutdown#notifyToolkitThreadFree                    
                </see>
                <see>
                    AWTAutoShutdown#isReadyToShutdown                    
                </see>
            </javadoc>
            <method name="setToolkitBusy" type="void" line="195">
                <params>
                    <param name="busy" type="boolean"/>
                </params>
                <scope line="196">
                    <scope line="197">
                        <scope line="198">
                            <scope line="199">
                                <scope line="200">
                                    <scope line="201"/>
                                    <scope line="204"/>
                                </scope>
                                <scope line="210">
                                    <scope line="212"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="222">
                Implementation of the Runnable interface.
                  Incapsulates the blocker thread functionality.                
                <see>
                    AWTAutoShutdown#isReadyToShutdown                    
                </see>
            </javadoc>
            <method name="run" type="void" line="227">
                <declaration name="currentThread" type="Thread" line="228"/>
                <declaration name="interrupted" type="boolean" line="229"/>
                <scope line="230">
                    <scope line="231">
                        <scope line="233">
                            <scope line="236">
                                <scope line="237"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="247"/>
                    <scope line="250">
                        <scope line="251"/>
                    </scope>
                </scope>
                <scope line="256"/>
            </method>
            <method name="getShutdownEvent" type="AWTEvent" line="260">
                <anonymous_class line="261"/>
            </method>
            <javadoc line="265">
                Creates and starts a new blocker thread. Doesn&apos;t return until
                  the new blocker thread starts.                
            </javadoc>
            <method name="activateBlockerThread" type="void" line="269">
                <declaration name="thread" type="Thread" line="270"/>
                <scope line="274"/>
                <scope line="277"/>
            </method>
            <method name="registerPeer" type="void" line="282">
                <params>
                    <param name="target" type="Object"/>
                    <param name="peer" type="Object"/>
                </params>
                <scope line="283">
                    <scope line="284"/>
                </scope>
            </method>
            <method name="unregisterPeer" type="void" line="290">
                <params>
                    <param name="target" type="Object"/>
                    <param name="peer" type="Object"/>
                </params>
                <scope line="291">
                    <scope line="292">
                        <scope line="293"/>
                    </scope>
                </scope>
            </method>
            <method name="getPeer" type="Object" line="300">
                <params>
                    <param name="target" type="Object"/>
                </params>
                <scope line="301">
                    <scope line="302"/>
                </scope>
            </method>
            <method name="dumpPeers" type="void" line="307">
                <params>
                    <param name="aLog" type="PlatformLogger"/>
                </params>
                <scope line="308">
                    <scope line="309">
                        <scope line="311"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>