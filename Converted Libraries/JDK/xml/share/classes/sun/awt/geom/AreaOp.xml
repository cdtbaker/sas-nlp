<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.geom">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Arrays"/>
        <class name="AreaOp" line="33">
            <comment line="137">
                                
            </comment>
            <comment line="141">
                                
            </comment>
            <comment line="146">
                                
            </comment>
            <comment line="547">
                Does the position of the next edge at v1 &quot;obstruct&quot; the
                 connectivity between current edge and the potential
                 partner edge which is positioned at v2?
                
                 Phase tells us whether we are testing for a transition
                 into or out of the interior part of the resulting area.
                
                 Require 4-connected continuity if this edge and the partner
                 edge are both &quot;entering into&quot; type edges
                 Allow 8-connected continuity for &quot;exiting from&quot; type edges                
            </comment>
            <class name="CAGOp" line="34">
                <extends class="AreaOp"/>
                <declaration name="inLeft" type="boolean" line="35"/>
                <declaration name="inRight" type="boolean" line="36"/>
                <declaration name="inResult" type="boolean" line="37"/>
                <method name="newRow" type="void" line="39"/>
                <method name="classify" type="int" line="45">
                    <params>
                        <param name="e" type="Edge"/>
                    </params>
                    <scope line="46"/>
                    <scope line="48"/>
                    <declaration name="newClass" type="boolean" line="51"/>
                    <scope line="52"/>
                </method>
                <method name="getState" type="int" line="59"/>
                <method name="newClassification" type="boolean" line="63"/>
            </class>
            <class name="AddOp" line="67">
                <extends class="CAGOp"/>
                <method name="newClassification" type="boolean" line="68">
                    <params>
                        <param name="inLeft" type="boolean"/>
                        <param name="inRight" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="SubOp" line="73">
                <extends class="CAGOp"/>
                <method name="newClassification" type="boolean" line="74">
                    <params>
                        <param name="inLeft" type="boolean"/>
                        <param name="inRight" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="IntOp" line="79">
                <extends class="CAGOp"/>
                <method name="newClassification" type="boolean" line="80">
                    <params>
                        <param name="inLeft" type="boolean"/>
                        <param name="inRight" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="XorOp" line="85">
                <extends class="CAGOp"/>
                <method name="newClassification" type="boolean" line="86">
                    <params>
                        <param name="inLeft" type="boolean"/>
                        <param name="inRight" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="NZWindOp" line="91">
                <extends class="AreaOp"/>
                <declaration name="count" type="int" line="92"/>
                <method name="newRow" type="void" line="94"/>
                <method name="classify" type="int" line="98">
                    <params>
                        <param name="e" type="Edge"/>
                    </params>
                    <comment line="100">
                        Note: the right curves should be an empty set with this op...
                         assert(e.getCurveTag() == CTAG_LEFT);                        
                    </comment>
                    <declaration name="newCount" type="int" line="101"/>
                    <declaration name="type" type="int" line="102"/>
                </method>
                <method name="getState" type="int" line="108"/>
            </class>
            <class name="EOWindOp" line="113">
                <extends class="AreaOp"/>
                <declaration name="inside" type="boolean" line="114"/>
                <method name="newRow" type="void" line="116"/>
                <method name="classify" type="int" line="120">
                    <params>
                        <param name="e" type="Edge"/>
                    </params>
                    <comment line="122">
                        Note: the right curves should be an empty set with this op...
                         assert(e.getCurveTag() == CTAG_LEFT);                        
                    </comment>
                    <declaration name="newInside" type="boolean" line="123"/>
                </method>
                <method name="getState" type="int" line="128"/>
            </class>
            <method name="AreaOp" type="constructor" line="133"/>
            <declaration name="CTAG_LEFT" type="int" line="137"/>
            <declaration name="CTAG_RIGHT" type="int" line="138"/>
            <declaration name="ETAG_IGNORE" type="int" line="141"/>
            <declaration name="ETAG_ENTER" type="int" line="142"/>
            <declaration name="ETAG_EXIT" type="int" line="143"/>
            <declaration name="RSTAG_INSIDE" type="int" line="146"/>
            <declaration name="RSTAG_OUTSIDE" type="int" line="147"/>
            <method name="newRow" type="void" line="149"/>
            <method name="classify" type="int" line="151"/>
            <method name="getState" type="int" line="153"/>
            <method name="calculate" type="Vector" line="155">
                <params>
                    <param name="left" type="Vector"/>
                    <param name="right" type="Vector"/>
                </params>
                <declaration name="edges" type="Vector" line="156"/>
                <scope line="160">
                    <declaration name="numcurves" type="int" line="162"/>
                    <declaration name="curvelist" type="Curve[]" line="163"/>
                    <scope line="164"/>
                </scope>
            </method>
            <method name="addEdges" type="void" line="171">
                <params>
                    <param name="edges" type="Vector"/>
                    <param name="curves" type="Vector"/>
                    <param name="curvetag" type="int"/>
                </params>
                <declaration name="enum_" type="Enumeration" line="172"/>
                <scope line="173">
                    <declaration name="c" type="Curve" line="174"/>
                    <scope line="175"/>
                </scope>
            </method>
            <declaration name="YXTopComparator" type="Comparator" line="181"/>
            <anonymous_class line="181">
                <method name="compare" type="int" line="182">
                    <params>
                        <param name="o1" type="Object"/>
                        <param name="o2" type="Object"/>
                    </params>
                    <declaration name="c1" type="Curve" line="183"/>
                    <declaration name="c2" type="Curve" line="184"/>
                    <declaration name="v1" type="double" line="185"/>
                    <scope line="186">
                        <scope line="187"/>
                    </scope>
                    <scope line="191"/>
                </method>
            </anonymous_class>
            <method name="pruneEdges" type="Vector" line="198">
                <params>
                    <param name="edges" type="Vector"/>
                </params>
                <comment line="221">
                    Active edges are between left (inclusive) and right (exclusive)                    
                </comment>
                <comment line="224">
                    Prune active edges that fall off the top of the active y range                    
                </comment>
                <comment line="235">
                    Grab a new &quot;top of Y range&quot; if the active edges are empty                    
                </comment>
                <comment line="246">
                    Incorporate new active edges that enter the active y range                    
                </comment>
                <comment line="254">
                    Sort the current active edges by their X values and
                     determine the maximum valid Y range where the X ordering
                     is correct                    
                </comment>
                <comment line="271">
                    Note: We could start at left+1, but we need to make
                     sure that edgelist[left] has its equivalence set to 0.                    
                </comment>
                <comment line="286">
                    If the curves are equal, mark them to be
                     deleted later if they cancel each other
                     out so that we avoid having extraneous
                     curve segments.                    
                </comment>
                <comment line="310">
                    Now prune the active edge list.
                     For each edge in the list, determine its classification
                     (entering shape, exiting shape, ignore - no change) and
                     record the current Y range and its classification in the
                     Edge object for use later in constructing the new outline.                    
                </comment>
                <comment line="323">
                    Find one of the segments in the &quot;equal&quot; range
                     with the right transition state and prefer an
                     edge that was either active up until ystart
                     or the edge that extends the furthest downward
                     (i.e. has the most potential for continuation)                    
                </comment>
                <comment line="336">
                    Note: classify() must be called
                     on every edge we consume here.                    
                </comment>
                <comment line="365">
                    assert(getState() == AreaOp.RSTAG_OUTSIDE);                    
                </comment>
                <comment line="395">
                    Finally capture the bottom of the valid Y range as the top
                     of the next Y range.                    
                </comment>
                <declaration name="numedges" type="int" line="199"/>
                <scope line="200"/>
                <declaration name="edgelist" type="Edge[]" line="203"/>
                <scope line="205">
                    <scope line="207"/>
                </scope>
                <declaration name="e" type="Edge" line="211"/>
                <declaration name="left" type="int" line="212"/>
                <declaration name="right" type="int" line="213"/>
                <declaration name="cur" type="int" line="214"/>
                <declaration name="next" type="int" line="215"/>
                <declaration name="yrange" type="double" line="216"/>
                <declaration name="subcurves" type="Vector" line="217"/>
                <declaration name="chains" type="Vector" line="218"/>
                <declaration name="links" type="Vector" line="219"/>
                <scope line="221">
                    <declaration name="y" type="double" line="222"/>
                    <scope line="224">
                        <scope line="226">
                            <scope line="227"/>
                        </scope>
                    </scope>
                    <scope line="235">
                        <scope line="236"/>
                        <scope line="240"/>
                    </scope>
                    <scope line="246">
                        <scope line="248"/>
                    </scope>
                    <scope line="257">
                        <scope line="259"/>
                    </scope>
                    <scope line="263">
                        <scope line="266"/>
                    </scope>
                    <declaration name="nexteq" type="int" line="272"/>
                    <scope line="273">
                        <scope line="276">
                            <declaration name="prevedge" type="Edge" line="277"/>
                            <declaration name="ordering" type="int" line="278"/>
                            <scope line="279"/>
                            <scope line="283">
                                <scope line="284">
                                    <declaration name="eq" type="int" line="289"/>
                                    <scope line="290"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="302">
                        <scope line="305"/>
                    </scope>
                    <declaration name="ystart" type="double" line="315"/>
                    <declaration name="yend" type="double" line="316"/>
                    <scope line="317">
                        <declaration name="etag" type="int" line="319"/>
                        <declaration name="eq" type="int" line="320"/>
                        <scope line="321">
                            <declaration name="origstate" type="int" line="327"/>
                            <declaration name="activematch" type="Edge" line="331"/>
                            <declaration name="longestmatch" type="Edge" line="332"/>
                            <declaration name="furthesty" type="double" line="333"/>
                            <scope line="334">
                                <scope line="340"/>
                                <scope line="344"/>
                            </scope>
                            <scope line="351"/>
                            <scope line="353"/>
                        </scope>
                        <scope line="356"/>
                        <scope line="359"/>
                    </scope>
                    <scope line="365">
                        <scope line="370"/>
                        <scope line="373"/>
                        <scope line="376">
                            <declaration name="eq" type="int" line="379"/>
                            <scope line="380"/>
                        </scope>
                    </scope>
                    <scope line="385">
                        <scope line="387">
                            <declaration name="link" type="CurveLink" line="388"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ret" type="Vector" line="399"/>
                <declaration name="enum_" type="Enumeration" line="400"/>
                <scope line="401">
                    <declaration name="link" type="CurveLink" line="402"/>
                    <declaration name="nextlink" type="CurveLink" line="404"/>
                    <scope line="405">
                        <scope line="406"/>
                    </scope>
                </scope>
            </method>
            <method name="finalizeSubCurves" type="void" line="416">
                <params>
                    <param name="subcurves" type="Vector"/>
                    <param name="chains" type="Vector"/>
                </params>
                <declaration name="numchains" type="int" line="417"/>
                <scope line="418"/>
                <scope line="421"/>
                <declaration name="endlist" type="ChainEnd[]" line="424"/>
                <scope line="426">
                    <declaration name="open" type="ChainEnd" line="427"/>
                    <declaration name="close" type="ChainEnd" line="428"/>
                    <declaration name="subcurve" type="CurveLink" line="429"/>
                    <scope line="430"/>
                </scope>
            </method>
            <declaration name="EmptyLinkList" type="CurveLink[]" line="437"/>
            <declaration name="EmptyChainList" type="ChainEnd[]" line="438"/>
            <method name="resolveLinks" type="void" line="443">
                <params>
                    <param name="subcurves" type="Vector"/>
                    <param name="chains" type="Vector"/>
                    <param name="links" type="Vector"/>
                </params>
                <comment line="475">
                    Strategy 1:
                     Connect chains or links if they are the only things left...                    
                </comment>
                <comment line="483">
                    assert(link != null &amp;&amp; chain != null);                    
                </comment>
                <comment line="484">
                    Strategy 2:
                     Connect chains or links if they close off an open area...                    
                </comment>
                <comment line="494">
                    Strategy 3:
                     Connect chains or links if their successor is
                     between them and their potential connectee...                    
                </comment>
                <comment line="529">
                    assert(link != null);
                     assert(chain != null);
                     assert(chain.getEtag() == link.getEtag());                    
                </comment>
                <declaration name="numlinks" type="int" line="444"/>
                <declaration name="linklist" type="CurveLink[]" line="445"/>
                <scope line="446"/>
                <scope line="448">
                    <scope line="449"/>
                </scope>
                <declaration name="numchains" type="int" line="455"/>
                <declaration name="endlist" type="ChainEnd[]" line="456"/>
                <scope line="457"/>
                <scope line="459">
                    <scope line="460"/>
                </scope>
                <declaration name="curchain" type="int" line="466"/>
                <declaration name="curlink" type="int" line="467"/>
                <declaration name="chain" type="ChainEnd" line="469"/>
                <declaration name="nextchain" type="ChainEnd" line="470"/>
                <declaration name="link" type="CurveLink" line="471"/>
                <declaration name="nextlink" type="CurveLink" line="472"/>
                <scope line="473">
                    <declaration name="connectchains" type="boolean" line="478"/>
                    <declaration name="connectlinks" type="boolean" line="479"/>
                    <scope line="481">
                        <scope line="492">
                            <declaration name="cx" type="double" line="498"/>
                            <declaration name="lx" type="double" line="499"/>
                        </scope>
                    </scope>
                    <scope line="508">
                        <declaration name="subcurve" type="CurveLink" line="509"/>
                        <scope line="510"/>
                    </scope>
                    <scope line="517">
                        <declaration name="openend" type="ChainEnd" line="518"/>
                        <declaration name="closeend" type="ChainEnd" line="519"/>
                    </scope>
                    <scope line="527"/>
                </scope>
                <scope line="541"/>
            </method>
            <method name="obstructs" type="boolean" line="558">
                <params>
                    <param name="v1" type="double"/>
                    <param name="v2" type="double"/>
                    <param name="phase" type="int"/>
                </params>
            </method>
        </class>
    </source>