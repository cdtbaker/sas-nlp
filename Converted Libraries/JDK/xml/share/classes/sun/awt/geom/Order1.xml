<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.geom">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.util.Vector"/>
        <class name="Order1" line="32">
            <extends class="Curve"/>
            <declaration name="x0" type="double" line="33"/>
            <declaration name="y0" type="double" line="34"/>
            <declaration name="x1" type="double" line="35"/>
            <declaration name="y1" type="double" line="36"/>
            <declaration name="xmin" type="double" line="37"/>
            <declaration name="xmax" type="double" line="38"/>
            <method name="Order1" type="constructor" line="43">
                <params>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="49"/>
                <scope line="52"/>
            </method>
            <method name="getOrder" type="int" line="58"/>
            <method name="getXTop" type="double" line="62"/>
            <method name="getYTop" type="double" line="66"/>
            <method name="getXBot" type="double" line="70"/>
            <method name="getYBot" type="double" line="74"/>
            <method name="getXMin" type="double" line="78"/>
            <method name="getXMax" type="double" line="82"/>
            <method name="getX0" type="double" line="86"/>
            <method name="getY0" type="double" line="90"/>
            <method name="getX1" type="double" line="94"/>
            <method name="getY1" type="double" line="98"/>
            <method name="XforY" type="double" line="102">
                <params>
                    <param name="y" type="double"/>
                </params>
                <comment line="110">
                    assert(y0 != y1); /* No horizontal lines... */                    
                </comment>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <method name="TforY" type="double" line="113">
                <params>
                    <param name="y" type="double"/>
                </params>
                <scope line="114"/>
                <scope line="117"/>
            </method>
            <method name="XforT" type="double" line="123">
                <params>
                    <param name="t" type="double"/>
                </params>
            </method>
            <method name="YforT" type="double" line="127">
                <params>
                    <param name="t" type="double"/>
                </params>
            </method>
            <method name="dXforT" type="double" line="131">
                <params>
                    <param name="t" type="double"/>
                    <param name="deriv" type="int"/>
                </params>
            </method>
            <method name="dYforT" type="double" line="142">
                <params>
                    <param name="t" type="double"/>
                    <param name="deriv" type="int"/>
                </params>
            </method>
            <method name="nextVertical" type="double" line="153">
                <params>
                    <param name="t0" type="double"/>
                    <param name="t1" type="double"/>
                </params>
            </method>
            <method name="accumulateCrossings" type="boolean" line="157">
                <params>
                    <param name="c" type="Crossings"/>
                </params>
                <declaration name="xlo" type="double" line="158"/>
                <declaration name="ylo" type="double" line="159"/>
                <declaration name="xhi" type="double" line="160"/>
                <declaration name="yhi" type="double" line="161"/>
                <scope line="162"/>
                <declaration name="xstart" type="double" line="165"/>
                <scope line="166">
                    <scope line="167"/>
                </scope>
                <scope line="172">
                    <scope line="173"/>
                </scope>
                <scope line="179"/>
                <scope line="182"/>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <method name="enlarge" type="void" line="196">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <method name="getSubCurve" type="Curve" line="201">
                <params>
                    <param name="ystart" type="double"/>
                    <param name="yend" type="double"/>
                    <param name="dir" type="int"/>
                </params>
                <scope line="202"/>
                <scope line="205"/>
                <declaration name="num" type="double" line="208"/>
                <declaration name="denom" type="double" line="209"/>
                <declaration name="xstart" type="double" line="210"/>
                <declaration name="xend" type="double" line="211"/>
            </method>
            <method name="getReversedCurve" type="Curve" line="215"/>
            <method name="compareTo" type="int" line="219">
                <params>
                    <param name="other" type="Curve"/>
                    <param name="yrange" type="double"/>
                </params>
                <comment line="238">
                    If &quot;this&quot; is curve A and &quot;other&quot; is curve B, then...
                     xA(y) = x0A + (y - y0A) (x1A - x0A)  (y1A - y0A)
                     xB(y) = x0B + (y - y0B) (x1B - x0B)  (y1B - y0B)
                     xA(y) == xB(y)
                     x0A + (y - y0A) (x1A - x0A)  (y1A - y0A)
                        == x0B + (y - y0B) (x1B - x0B)  (y1B - y0B)
                     0 == x0A (y1A - y0A) (y1B - y0B) + (y - y0A) (x1A - x0A) (y1B - y0B)
                        - x0B (y1A - y0A) (y1B - y0B) - (y - y0B) (x1B - x0B) (y1A - y0A)
                     0 == (x0A - x0B) (y1A - y0A) (y1B - y0B)
                        + (y - y0A) (x1A - x0A) (y1B - y0B)
                        - (y - y0B) (x1B - x0B) (y1A - y0A)
                     If (dxA == x1A - x0A), etc...
                     0 == (x0A - x0B)  dyA  dyB
                        + (y - y0A)  dxA  dyB
                        - (y - y0B)  dxB  dyA
                     0 == (x0A - x0B)  dyA  dyB
                        + y  dxA  dyB - y0A  dxA  dyB
                        - y  dxB  dyA + y0B  dxB  dyA
                     0 == (x0A - x0B)  dyA  dyB
                        + y  dxA  dyB - y  dxB  dyA
                        - y0A  dxA  dyB + y0B  dxB  dyA
                     0 == (x0A - x0B)  dyA  dyB
                        + y  (dxA  dyB - dxB  dyA)
                        - y0A  dxA  dyB + y0B  dxB  dyA
                     y == ((x0A - x0B)  dyA  dyB
                           - y0A  dxA  dyB + y0B  dxB  dyA)
                         (-(dxA  dyB - dxB  dyA))
                     y == ((x0A - x0B)  dyA  dyB
                           - y0A  dxA  dyB + y0B  dxB  dyA)
                         (dxB  dyA - dxA  dyB)                    
                </comment>
                <comment line="282">
                    intersection is above us
                     Use bottom-most common y for comparison                    
                </comment>
                <comment line="286">
                    intersection is below the top of our range                    
                </comment>
                <comment line="288">
                    If intersection is in our range, adjust valid range                    
                </comment>
                <comment line="291">
                    Use top-most common y for comparison                    
                </comment>
                <comment line="295">
                    lines are parallel, choose any common y for comparison
                     Note - prefer an endpoint for speed of calculating the X
                     (see shortcuts in Order1.XforY())                    
                </comment>
                <scope line="220"/>
                <declaration name="c1" type="Order1" line="223"/>
                <scope line="224"/>
                <scope line="228"/>
                <scope line="231"/>
                <scope line="234"/>
                <declaration name="dxa" type="double" line="269"/>
                <declaration name="dya" type="double" line="270"/>
                <declaration name="dxb" type="double" line="271"/>
                <declaration name="dyb" type="double" line="272"/>
                <declaration name="denom" type="double" line="273"/>
                <declaration name="y" type="double" line="274"/>
                <scope line="275">
                    <declaration name="num" type="double" line="276"/>
                    <scope line="280"/>
                    <scope line="284">
                        <scope line="286"/>
                    </scope>
                </scope>
                <scope line="293"/>
            </method>
            <method name="getSegment" type="int" line="302">
                <params>
                    <param name="coords" type="double"/>
                </params>
                <scope line="303"/>
                <scope line="306"/>
            </method>
        </class>
    </source>