<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.geom">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.QuadCurve2D"/>
        <import package="java.util.Vector"/>
        <class name="Order2" line="33">
            <extends class="Curve"/>
            <comment line="90">
                Return the count of the number of horizontal sections of the
                 specified quadratic Bezier curve.  Put the parameters for the
                 horizontal sections into the specified &lt;code&gt;ret&lt;code&gt; array.
                 &lt;p&gt;
                 If we examine the parametric equation in t, we have:
                     Py(t) = C0(1-t)^2 + 2CPt(1-t) + C1t^2
                           = C0 - 2C0t + C0t^2 + 2CPt - 2CPt^2 + C1t^2
                           = C0 + (2CP - 2C0)t + (C0 - 2CP + C1)t^2
                     Py(t) = (C0 - 2CP + C1)t^2 + (2CP - 2C0)t + (C0)
                 If we take the derivative, we get:
                     Py(t) = At^2 + Bt + C
                     dPy(t) = 2At + B = 0
                     2(C0 - 2CP + C1)t + 2(CP - C0) = 0
                     2(C0 - 2CP + C1)t = 2(C0 - CP)
                     t = 2(C0 - CP)  2(C0 - 2CP + C1)
                     t = (C0 - CP)  (C0 - CP + C1 - CP)
                 Note that this method will return 0 if the equation is a line,
                 which is either always horizontal or never horizontal.
                 Completely horizontal curves need to be eliminated by other
                 means outside of this method.                
            </comment>
            <comment line="133">
                Split the quadratic Bezier stored at coords[pos...pos+5] representing
                 the paramtric range [0..1] into two subcurves representing the
                 parametric subranges [0..t] and [t..1].  Store the results back
                 into the array at coords[pos...pos+5] and coords[pos+4...pos+9].                
            </comment>
            <declaration name="x0" type="double" line="34"/>
            <declaration name="y0" type="double" line="35"/>
            <declaration name="cx0" type="double" line="36"/>
            <declaration name="cy0" type="double" line="37"/>
            <declaration name="x1" type="double" line="38"/>
            <declaration name="y1" type="double" line="39"/>
            <declaration name="xmin" type="double" line="40"/>
            <declaration name="xmax" type="double" line="41"/>
            <declaration name="xcoeff0" type="double" line="43"/>
            <declaration name="xcoeff1" type="double" line="44"/>
            <declaration name="xcoeff2" type="double" line="45"/>
            <declaration name="ycoeff0" type="double" line="46"/>
            <declaration name="ycoeff1" type="double" line="47"/>
            <declaration name="ycoeff2" type="double" line="48"/>
            <method name="insert" type="void" line="55">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="tmp" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="cx0" type="double"/>
                    <param name="cy0" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="58">
                    We are using addInstance here to avoid inserting horisontal                    
                </comment>
                <comment line="59">
                    segments                    
                </comment>
                <comment line="63">
                    assert(numparams == 1);                    
                </comment>
                <declaration name="numparams" type="int" line="56"/>
                <scope line="57"/>
                <declaration name="t" type="double" line="64"/>
                <declaration name="i0" type="int" line="69"/>
                <declaration name="i1" type="int" line="70"/>
            </method>
            <method name="addInstance" type="void" line="81">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="cx0" type="double"/>
                    <param name="cy0" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="82"/>
                <scope line="84"/>
            </method>
            <method name="getHorizontalParams" type="int" line="112">
                <params>
                    <param name="c0" type="double"/>
                    <param name="cp" type="double"/>
                    <param name="c1" type="double"/>
                    <param name="ret" type="double"/>
                </params>
                <comment line="119">
                    If denom == 0 then cp == (c0+c1)/2 and we have a line.                    
                </comment>
                <comment line="124">
                    No splits at t==0 and t==1                    
                </comment>
                <scope line="113"/>
                <declaration name="denom" type="double" line="118"/>
                <scope line="120"/>
                <declaration name="t" type="double" line="123"/>
                <scope line="125"/>
            </method>
            <method name="split" type="void" line="138">
                <params>
                    <param name="coords" type="double"/>
                    <param name="pos" type="int"/>
                    <param name="t" type="double"/>
                </params>
                <declaration name="x0" type="double" line="139"/>
            </method>
            <method name="Order2" type="constructor" line="164">
                <params>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="cx0" type="double"/>
                    <param name="cy0" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="166">
                    REMIND: Better accuracy in the root finding methods would                    
                </comment>
                <comment line="167">
                    ensure that cy0 is in range.  As it stands, it is never                    
                </comment>
                <comment line="168">
                    more than &quot;1 mantissa bit&quot; out of range...                    
                </comment>
                <scope line="169"/>
                <scope line="171"/>
            </method>
            <method name="getOrder" type="int" line="190"/>
            <method name="getXTop" type="double" line="194"/>
            <method name="getYTop" type="double" line="198"/>
            <method name="getXBot" type="double" line="202"/>
            <method name="getYBot" type="double" line="206"/>
            <method name="getXMin" type="double" line="210"/>
            <method name="getXMax" type="double" line="214"/>
            <method name="getX0" type="double" line="218"/>
            <method name="getY0" type="double" line="222"/>
            <method name="getCX0" type="double" line="226"/>
            <method name="getCY0" type="double" line="230"/>
            <method name="getX1" type="double" line="234"/>
            <method name="getY1" type="double" line="238"/>
            <method name="XforY" type="double" line="242">
                <params>
                    <param name="y" type="double"/>
                </params>
                <scope line="243"/>
                <scope line="246"/>
            </method>
            <method name="TforY" type="double" line="252">
                <params>
                    <param name="y" type="double"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <method name="TforY" type="double" line="264">
                <params>
                    <param name="y" type="double"/>
                    <param name="ycoeff0" type="double"/>
                    <param name="ycoeff1" type="double"/>
                    <param name="ycoeff2" type="double"/>
                </params>
                <comment line="265">
                    The caller should have already eliminated y values                    
                </comment>
                <comment line="266">
                    outside of the y0 to y1 range.                    
                </comment>
                <comment line="269">
                    The quadratic parabola has degenerated to a line.                    
                </comment>
                <comment line="270">
                    ycoeff1 should not be 0.0 since we have already eliminated                    
                </comment>
                <comment line="271">
                    totally horizontal lines, but if it is, then we will generate                    
                </comment>
                <comment line="272">
                    infinity here for the root, which will not be in the [0,1]                    
                </comment>
                <comment line="273">
                    range so we will pass to the failure code below.                    
                </comment>
                <comment line="279">
                    From Numerical Recipes, 5.6, Quadratic and Cubic Equations                    
                </comment>
                <comment line="281">
                    If d &lt; 0.0, then there are no roots                    
                </comment>
                <comment line="284">
                    For accuracy, calculate one root using:                    
                </comment>
                <comment line="285">
                    (-ycoeff1 +/- d) / 2ycoeff2                    
                </comment>
                <comment line="286">
                    and the other using:                    
                </comment>
                <comment line="287">
                    2ycoeff0 / (-ycoeff1 +/- d)                    
                </comment>
                <comment line="288">
                    Choose the sign of the +/- so that ycoeff1+d                    
                </comment>
                <comment line="289">
                    gets larger in magnitude                    
                </comment>
                <comment line="294">
                    We already tested ycoeff2 for being 0 above                    
                </comment>
                <comment line="307">
                    We failed to find a root in [0,1].  What could have gone wrong?
                     First, remember that these curves are constructed to be monotonic
                     in Y and totally horizontal curves have already been eliminated.
                     Now keep in mind that the Y coefficients of the polynomial form
                     of the curve are calculated from the Y coordinates which define
                     our curve.  They should theoretically define the same curve,
                     but they can be off by a couple of bits of precision after the
                     math is done and so can represent a slightly modified curve.
                     This is normally not an issue except when we have solutions near
                     the endpoints.  Since the answers we get from solving the polynomial
                     may be off by a few bits that means that they could lie just a
                     few bits of precision outside the [0,1] range.
                    
                     Another problem could be that while the parametric curve defined
                     by the Y coordinates has a local minima or maxima at or just
                     outside of the endpoints, the polynomial form might express
                     that same minmax just inside of and just shy of the Y coordinate
                     of that endpoint.  In that case, if we solve for a Y coordinate
                     at or near that endpoint, we may be solving for a Y coordinate
                     that is below that minima or above that maxima and we would find
                     no solutions at all.
                    
                     In either case, we can assume that y is so near one of the
                     endpoints that we can just collapse it onto the nearest endpoint
                     without losing more than a couple of bits of precision.                    
                </comment>
                <comment line="333">
                    First calculate the midpoint between y0 and y1 and choose to                    
                </comment>
                <comment line="334">
                    return either 0.0 or 1.0 depending on whether y is above                    
                </comment>
                <comment line="335">
                    or below the midpoint...                    
                </comment>
                <comment line="336">
                    Note that we subtracted y from ycoeff0 above so both y0 and y1                    
                </comment>
                <comment line="337">
                    will be &quot;relative to y&quot; so we are really just looking at where                    
                </comment>
                <comment line="338">
                    zero falls with respect to the &quot;relative midpoint&quot; here.                    
                </comment>
                <scope line="268">
                    <declaration name="root" type="double" line="274"/>
                    <scope line="275"/>
                </scope>
                <scope line="278">
                    <declaration name="d" type="double" line="280"/>
                    <scope line="282">
                        <scope line="290"/>
                        <declaration name="q" type="double" line="293"/>
                        <declaration name="root" type="double" line="295"/>
                        <scope line="296"/>
                        <scope line="299">
                            <scope line="301"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="y0" type="double" line="339"/>
                <declaration name="y1" type="double" line="340"/>
            </method>
            <method name="XforT" type="double" line="344">
                <params>
                    <param name="t" type="double"/>
                </params>
            </method>
            <method name="YforT" type="double" line="348">
                <params>
                    <param name="t" type="double"/>
                </params>
            </method>
            <method name="dXforT" type="double" line="352">
                <params>
                    <param name="t" type="double"/>
                    <param name="deriv" type="int"/>
                </params>
            </method>
            <method name="dYforT" type="double" line="365">
                <params>
                    <param name="t" type="double"/>
                    <param name="deriv" type="int"/>
                </params>
            </method>
            <method name="nextVertical" type="double" line="378">
                <params>
                    <param name="t0" type="double"/>
                    <param name="t1" type="double"/>
                </params>
                <declaration name="t" type="double" line="379"/>
                <scope line="380"/>
            </method>
            <method name="enlarge" type="void" line="386">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
                <declaration name="t" type="double" line="388"/>
                <scope line="389"/>
            </method>
            <method name="getSubCurve" type="Curve" line="395">
                <params>
                    <param name="ystart" type="double"/>
                    <param name="yend" type="double"/>
                    <param name="dir" type="int"/>
                </params>
                <declaration name="t0" type="double" line="396"/>
                <scope line="397">
                    <scope line="398"/>
                </scope>
                <scope line="402"/>
                <scope line="405"/>
                <scope line="407"/>
                <declaration name="eqn" type="double" line="410"/>
                <scope line="417"/>
                <declaration name="i" type="int" line="420"/>
                <scope line="421"/>
                <scope line="423"/>
            </method>
            <method name="getReversedCurve" type="Curve" line="433"/>
            <method name="getSegment" type="int" line="437">
                <params>
                    <param name="coords" type="double"/>
                </params>
                <scope line="440"/>
                <scope line="443"/>
            </method>
            <method name="controlPointString" type="String" line="450"/>
        </class>
    </source>