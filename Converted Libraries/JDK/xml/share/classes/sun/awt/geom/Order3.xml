<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.geom">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.QuadCurve2D"/>
        <import package="java.util.Vector"/>
        <class name="Order3" line="33">
            <extends class="Curve"/>
            <comment line="124">
                Return the count of the number of horizontal sections of the
                 specified cubic Bezier curve.  Put the parameters for the
                 horizontal sections into the specified &lt;code&gt;ret&lt;code&gt; array.
                 &lt;p&gt;
                 If we examine the parametric equation in t, we have:
                   Py(t) = C0(1-t)^3 + 3CP0 t(1-t)^2 + 3CP1 t^2(1-t) + C1 t^3
                         = C0 - 3C0t + 3C0t^2 - C0t^3 +
                           3CP0t - 6CP0t^2 + 3CP0t^3 +
                           3CP1t^2 - 3CP1t^3 +
                           C1t^3
                   Py(t) = (C1 - 3CP1 + 3CP0 - C0) t^3 +
                           (3C0 - 6CP0 + 3CP1) t^2 +
                           (3CP0 - 3C0) t +
                           (C0)
                 If we take the derivative, we get:
                   Py(t) = Dt^3 + At^2 + Bt + C
                   dPy(t) = 3Dt^2 + 2At + B = 0
                        0 = 3(C1 - 3CP1 + 3CP0 - C0)t^2
                          + 2(3CP1 - 6CP0 + 3C0)t
                          + (3CP0 - 3C0)
                        0 = 3(C1 - 3CP1 + 3CP0 - C0)t^2
                          + 32(CP1 - 2CP0 + C0)t
                          + 3(CP0 - C0)
                        0 = (C1 - CP1 - CP1 - CP1 + CP0 + CP0 + CP0 - C0)t^2
                          + 2(CP1 - CP0 - CP0 + C0)t
                          + (CP0 - C0)
                        0 = (C1 - CP1 + CP0 - CP1 + CP0 - CP1 + CP0 - C0)t^2
                          + 2(CP1 - CP0 - CP0 + C0)t
                          + (CP0 - C0)
                        0 = ((C1 - CP1) - (CP1 - CP0) - (CP1 - CP0) + (CP0 - C0))t^2
                          + 2((CP1 - CP0) - (CP0 - C0))t
                          + (CP0 - C0)
                 Note that this method will return 0 if the equation is a line,
                 which is either always horizontal or never horizontal.
                 Completely horizontal curves need to be eliminated by other
                 means outside of this method.                
            </comment>
            <comment line="189">
                Split the cubic Bezier stored at coords[pos...pos+7] representing
                 the parametric range [0..1] into two subcurves representing the
                 parametric subranges [0..t] and [t..1].  Store the results back
                 into the array at coords[pos...pos+7] and coords[pos+6...pos+13].                
            </comment>
            <comment line="327">
                Solve the cubic whose coefficients are in the a,b,c,d fields and
                 return the first root in the range [0, 1].
                 The cubic solved is represented by the equation:
                     x^3 + (ycoeff2)x^2 + (ycoeff1)x + (ycoeff0) = y
                 @return the first valid root (in the range [0, 1])                
            </comment>
            <declaration name="x0" type="double" line="34"/>
            <declaration name="y0" type="double" line="35"/>
            <declaration name="cx0" type="double" line="36"/>
            <declaration name="cy0" type="double" line="37"/>
            <declaration name="cx1" type="double" line="38"/>
            <declaration name="cy1" type="double" line="39"/>
            <declaration name="x1" type="double" line="40"/>
            <declaration name="y1" type="double" line="41"/>
            <declaration name="xmin" type="double" line="43"/>
            <declaration name="xmax" type="double" line="44"/>
            <declaration name="xcoeff0" type="double" line="46"/>
            <declaration name="xcoeff1" type="double" line="47"/>
            <declaration name="xcoeff2" type="double" line="48"/>
            <declaration name="xcoeff3" type="double" line="49"/>
            <declaration name="ycoeff0" type="double" line="51"/>
            <declaration name="ycoeff1" type="double" line="52"/>
            <declaration name="ycoeff2" type="double" line="53"/>
            <declaration name="ycoeff3" type="double" line="54"/>
            <method name="insert" type="void" line="62">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="tmp" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="cx0" type="double"/>
                    <param name="cy0" type="double"/>
                    <param name="cx1" type="double"/>
                    <param name="cy1" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="66">
                    We are using addInstance here to avoid inserting horisontal
                     segments                    
                </comment>
                <comment line="71">
                    Store coordinates for splitting at tmp[3..10]                    
                </comment>
                <comment line="78">
                    Perform a &quot;2 element sort&quot;...                    
                </comment>
                <comment line="85">
                    Recalculate tmp[1] relative to the range [tmp[0]...1]                    
                </comment>
                <declaration name="numparams" type="int" line="63"/>
                <scope line="64"/>
                <declaration name="t" type="double" line="75"/>
                <scope line="76"/>
                <scope line="83"/>
                <declaration name="index" type="int" line="88"/>
                <scope line="89"/>
                <scope line="92">
                    <scope line="100"/>
                    <scope line="102"/>
                </scope>
            </method>
            <method name="addInstance" type="void" line="113">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="cx0" type="double"/>
                    <param name="cy0" type="double"/>
                    <param name="cx1" type="double"/>
                    <param name="cy1" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="114"/>
                <scope line="117"/>
            </method>
            <method name="getHorizontalParams" type="int" line="163">
                <params>
                    <param name="c0" type="double"/>
                    <param name="cp0" type="double"/>
                    <param name="cp1" type="double"/>
                    <param name="c1" type="double"/>
                    <param name="ret" type="double"/>
                </params>
                <comment line="178">
                    No splits at t==0 and t==1                    
                </comment>
                <scope line="164"/>
                <declaration name="numroots" type="int" line="173"/>
                <declaration name="j" type="int" line="174"/>
                <scope line="175">
                    <declaration name="t" type="double" line="176"/>
                    <scope line="178">
                        <scope line="179"/>
                    </scope>
                </scope>
            </method>
            <method name="split" type="void" line="194">
                <params>
                    <param name="coords" type="double"/>
                    <param name="pos" type="int"/>
                    <param name="t" type="double"/>
                </params>
                <declaration name="x0" type="double" line="195"/>
            </method>
            <method name="Order3" type="constructor" line="231">
                <params>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="cx0" type="double"/>
                    <param name="cy0" type="double"/>
                    <param name="cx1" type="double"/>
                    <param name="cy1" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="234">
                    REMIND: Better accuracy in the root finding methods would
                      ensure that cys are in range.  As it stands, they are never
                      more than &quot;1 mantissa bit&quot; out of range...                    
                </comment>
            </method>
            <method name="getOrder" type="int" line="259"/>
            <method name="getXTop" type="double" line="263"/>
            <method name="getYTop" type="double" line="267"/>
            <method name="getXBot" type="double" line="271"/>
            <method name="getYBot" type="double" line="275"/>
            <method name="getXMin" type="double" line="279"/>
            <method name="getXMax" type="double" line="283"/>
            <method name="getX0" type="double" line="287"/>
            <method name="getY0" type="double" line="291"/>
            <method name="getCX0" type="double" line="295"/>
            <method name="getCY0" type="double" line="299"/>
            <method name="getCX1" type="double" line="303"/>
            <method name="getCY1" type="double" line="307"/>
            <method name="getX1" type="double" line="311"/>
            <method name="getY1" type="double" line="315"/>
            <declaration name="TforY1" type="double" line="319"/>
            <declaration name="YforT1" type="double" line="320"/>
            <declaration name="TforY2" type="double" line="321"/>
            <declaration name="YforT2" type="double" line="322"/>
            <declaration name="TforY3" type="double" line="323"/>
            <declaration name="YforT3" type="double" line="324"/>
            <method name="TforY" type="double" line="333">
                <params>
                    <param name="y" type="double"/>
                </params>
                <comment line="340">
                    From Numerical Recipes, 5.6, Quadratic and Cubic Equations                    
                </comment>
                <comment line="342">
                    The cubic degenerated to quadratic (or line or ...).                    
                </comment>
                <comment line="381">
                    throw new InternalError(&quot;bad t&quot;);                    
                </comment>
                <scope line="340"/>
                <declaration name="a" type="double" line="344"/>
                <declaration name="b" type="double" line="345"/>
                <declaration name="c" type="double" line="346"/>
                <declaration name="roots" type="int" line="347"/>
                <declaration name="Q" type="double" line="348"/>
                <declaration name="R" type="double" line="349"/>
                <declaration name="R2" type="double" line="350"/>
                <declaration name="Q3" type="double" line="351"/>
                <declaration name="a_3" type="double" line="352"/>
                <declaration name="t" type="double" line="353"/>
                <scope line="354">
                    <declaration name="theta" type="double" line="355"/>
                    <scope line="358"/>
                    <scope line="362"/>
                </scope>
                <scope line="366">
                    <declaration name="neg" type="boolean" line="367"/>
                    <declaration name="S" type="double" line="368"/>
                    <scope line="369"/>
                    <declaration name="A" type="double" line="372"/>
                    <scope line="373"/>
                    <declaration name="B" type="double" line="376"/>
                </scope>
                <scope line="379">
                    <declaration name="t0" type="double" line="381"/>
                    <declaration name="t1" type="double" line="382"/>
                    <scope line="383">
                        <scope line="385"/>
                        <declaration name="yt" type="double" line="388"/>
                        <scope line="389"/>
                        <scope line="391"/>
                        <scope line="393"/>
                    </scope>
                </scope>
                <scope line="398"/>
            </method>
            <method name="refine" type="double" line="411">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="c" type="double"/>
                    <param name="target" type="double"/>
                    <param name="t" type="double"/>
                </params>
                <scope line="412"/>
                <declaration name="y" type="double" line="415"/>
                <declaration name="t0" type="double" line="416"/>
                <scope line="417"/>
                <scope line="420"/>
                <declaration name="origt" type="double" line="424"/>
                <declaration name="origy" type="double" line="425"/>
                <declaration name="useslope" type="boolean" line="426"/>
                <scope line="427">
                    <scope line="428">
                        <declaration name="t2" type="double" line="429"/>
                        <scope line="430"/>
                    </scope>
                    <scope line="434">
                        <declaration name="slope" type="double" line="435"/>
                        <scope line="436"/>
                        <declaration name="t2" type="double" line="440"/>
                        <scope line="441"/>
                    </scope>
                    <scope line="448"/>
                    <scope line="450"/>
                    <scope line="452"/>
                </scope>
                <declaration name="verbose" type="boolean" line="456"/>
                <scope line="457">
                    <declaration name="tdiff" type="long" line="459"/>
                    <declaration name="ydiff" type="long" line="460"/>
                    <declaration name="yerr" type="long" line="461"/>
                    <scope line="462">
                        <declaration name="tlow" type="double" line="469"/>
                        <declaration name="ylow" type="double" line="470"/>
                        <declaration name="thi" type="double" line="471"/>
                        <declaration name="yhi" type="double" line="472"/>
                        <scope line="475"/>
                    </scope>
                </scope>
            </method>
            <method name="XforY" type="double" line="483">
                <params>
                    <param name="y" type="double"/>
                </params>
                <scope line="484"/>
                <scope line="487"/>
            </method>
            <method name="XforT" type="double" line="493">
                <params>
                    <param name="t" type="double"/>
                </params>
            </method>
            <method name="YforT" type="double" line="497">
                <params>
                    <param name="t" type="double"/>
                </params>
            </method>
            <method name="dXforT" type="double" line="501">
                <params>
                    <param name="t" type="double"/>
                    <param name="deriv" type="int"/>
                </params>
            </method>
            <method name="dYforT" type="double" line="516">
                <params>
                    <param name="t" type="double"/>
                    <param name="deriv" type="int"/>
                </params>
            </method>
            <method name="nextVertical" type="double" line="531">
                <params>
                    <param name="t0" type="double"/>
                    <param name="t1" type="double"/>
                </params>
                <declaration name="eqn" type="double" line="532"/>
                <declaration name="numroots" type="int" line="533"/>
                <scope line="534">
                    <scope line="535"/>
                </scope>
            </method>
            <method name="enlarge" type="void" line="542">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
                <declaration name="eqn" type="double" line="544"/>
                <declaration name="numroots" type="int" line="545"/>
                <scope line="546">
                    <declaration name="t" type="double" line="547"/>
                    <scope line="548"/>
                </scope>
            </method>
            <method name="getSubCurve" type="Curve" line="555">
                <params>
                    <param name="ystart" type="double"/>
                    <param name="yend" type="double"/>
                    <param name="dir" type="int"/>
                </params>
                <comment line="573">
                    This happens in only rare cases where ystart is
                     very near yend and solving for the yend root ends
                     up stepping slightly lower in t than solving for
                     the ystart root.
                     Ideally we might want to skip this tiny little
                     segment and just fudge the surrounding coordinates
                     to bridge the gap left behind, but there is no way
                     to do that from here.  Higher levels could
                     potentially eliminate these tiny &quot;fixup&quot; segments,
                     but not without a lot of extra work on the code that
                     coalesces chains of curves into subpaths.  The
                     simplest solution for now is to just reorder the t
                     values and chop out a miniscule curve piece.                    
                </comment>
                <scope line="556"/>
                <declaration name="eqn" type="double" line="559"/>
                <declaration name="t0" type="double" line="560"/>
                <scope line="571">
                    <declaration name="t" type="double" line="586"/>
                </scope>
                <scope line="590"/>
                <declaration name="i" type="int" line="593"/>
                <scope line="594"/>
                <scope line="596"/>
            </method>
            <method name="getReversedCurve" type="Curve" line="607"/>
            <method name="getSegment" type="int" line="611">
                <params>
                    <param name="coords" type="double"/>
                </params>
                <scope line="612"/>
                <scope line="619"/>
            </method>
            <method name="controlPointString" type="String" line="630"/>
        </class>
    </source>