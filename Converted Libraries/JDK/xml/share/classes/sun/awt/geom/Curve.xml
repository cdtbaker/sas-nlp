<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.geom">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.QuadCurve2D"/>
        <import package="java.awt.geom.CubicCurve2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.IllegalPathStateException"/>
        <import package="java.util.Vector"/>
        <class name="Curve" line="8">
            <declaration name="INCREASING" type="int" line="9"/>
            <declaration name="DECREASING" type="int" line="10"/>
            <declaration name="direction" type="int" line="11"/>
            <method name="insertMove" type="void" line="12">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <method name="insertLine" type="void" line="15">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                </params>
                <scope line="16"/>
                <scope line="19"/>
                <scope line="22"/>
            </method>
            <method name="insertQuad" type="void" line="25">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="coords" type="double"/>
                </params>
                <declaration name="y1" type="double" line="26"/>
                <scope line="27"/>
                <scope line="30"/>
                <scope line="33"/>
            </method>
            <method name="insertCubic" type="void" line="37">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="coords" type="double"/>
                </params>
                <declaration name="y1" type="double" line="38"/>
                <scope line="39"/>
                <scope line="42"/>
                <scope line="45"/>
            </method>
            <javadoc line="49">
                Calculates the number of times the given path
                  crosses the ray extending to the right from (px,py).
                  If the point lies on a part of the path,
                  then no crossings are counted for that intersection.
                  +1 is added for each crossing where the Y coordinate is increasing
                  -1 is added for each crossing where the Y coordinate is decreasing
                  The return value is the sum of all crossings for every segment in
                  the path.
                  The path must start with a SEG_MOVETO, otherwise an exception is
                  thrown.
                  The caller must check p[xy] for NaN values.
                  The caller may also reject infinite p[xy] values as well.                
            </javadoc>
            <method name="pointCrossingsForPath" type="int" line="63">
                <params>
                    <param name="pi" type="PathIterator"/>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
                <scope line="64"/>
                <declaration name="coords" type="double" line="67"/>
                <scope line="68"/>
                <declaration name="movx" type="double" line="72"/>
                <declaration name="movy" type="double" line="73"/>
                <declaration name="curx" type="double" line="74"/>
                <declaration name="cury" type="double" line="75"/>
                <declaration name="endx" type="double" line="76"/>
                <declaration name="crossings" type="int" line="77"/>
                <scope line="78">
                    <scope line="81"/>
                    <scope line="109"/>
                </scope>
                <scope line="118"/>
            </method>
            <javadoc line="123">
                Calculates the number of times the line from (x0,y0) to (x1,y1)
                  crosses the ray extending to the right from (px,py).
                  If the point lies on the line, then no crossings are recorded.
                  +1 is returned for a crossing where the Y coordinate is increasing
                  -1 is returned for a crossing where the Y coordinate is decreasing                
            </javadoc>
            <method name="pointCrossingsForLine" type="int" line="130">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                </params>
                <declaration name="xintercept" type="double" line="135"/>
            </method>
            <javadoc line="139">
                Calculates the number of times the quad from (x0,y0) to (x1,y1)
                  crosses the ray extending to the right from (px,py).
                  If the point lies on a part of the curve,
                  then no crossings are counted for that intersection.
                  the level parameter should be 0 at the top-level call and will count
                  up for each recursion level to prevent infinite recursion
                  +1 is added for each crossing where the Y coordinate is increasing
                  -1 is added for each crossing where the Y coordinate is decreasing                
            </javadoc>
            <method name="pointCrossingsForQuad" type="int" line="149">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="xc" type="double"/>
                    <param name="yc" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="level" type="int"/>
                </params>
                <scope line="153">
                    <scope line="154"/>
                    <scope line="157"/>
                </scope>
                <declaration name="x0c" type="double" line="163"/>
                <declaration name="y0c" type="double" line="164"/>
                <declaration name="xc1" type="double" line="165"/>
                <declaration name="yc1" type="double" line="166"/>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Calculates the number of times the cubic from (x0,y0) to (x1,y1)
                  crosses the ray extending to the right from (px,py).
                  If the point lies on a part of the curve,
                  then no crossings are counted for that intersection.
                  the level parameter should be 0 at the top-level call and will count
                  up for each recursion level to prevent infinite recursion
                  +1 is added for each crossing where the Y coordinate is increasing
                  -1 is added for each crossing where the Y coordinate is decreasing                
            </javadoc>
            <method name="pointCrossingsForCubic" type="int" line="184">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="xc0" type="double"/>
                    <param name="yc0" type="double"/>
                    <param name="xc1" type="double"/>
                    <param name="yc1" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="level" type="int"/>
                </params>
                <scope line="188">
                    <scope line="189"/>
                    <scope line="192"/>
                </scope>
                <declaration name="xmid" type="double" line="198"/>
                <declaration name="ymid" type="double" line="199"/>
                <declaration name="xc0m" type="double" line="204"/>
                <declaration name="yc0m" type="double" line="205"/>
                <declaration name="xmc1" type="double" line="206"/>
                <declaration name="ymc1" type="double" line="207"/>
                <scope line="210"/>
            </method>
            <declaration name="RECT_INTERSECTS" type="int" line="215"/>
            <javadoc line="215">
                The rectangle intersection test counts the number of times
                  that the path crosses through the shadow that the rectangle
                  projects to the right towards (x =&gt; +INFINITY).
                  During processing of the path it actually counts every time
                  the path crosses either or both of the top and bottom edges
                  of that shadow.  If the path enters from the top, the count
                  is incremented.  If it then exits back through the top, the
                  same way it came in, the count is decremented and there is
                  no impact on the winding count.  If, instead, the path exits
                  out the bottom, then the count is incremented again and a
                  full pass through the shadow is indicated by the winding count
                  having been incremented by 2.
                  Thus, the winding count that it accumulates is actually double
                  the real winding count.  Since the path is continuous, the
                  final answer should be a multiple of 2, otherwise there is a
                  logic error somewhere.
                  If the path ever has a direct hit on the rectangle, then a
                  special value is returned.  This special value terminates
                  all ongoing accumulation on up through the call chain and
                  ends up getting returned to the calling function which can
                  then produce an answer directly.  For intersection tests,
                  the answer is always &quot;true&quot; if the path intersects the
                  rectangle.  For containment tests, the answer is always
                  &quot;false&quot; if the path intersects the rectangle.  Thus, no
                  further processing is ever needed if an intersection occurs.                
            </javadoc>
            <javadoc line="243">
                Accumulate the number of times the path crosses the shadow
                  extending to the right of the rectangle.  See the comment
                  for the RECT_INTERSECTS constant for more complete details.
                  The return value is the sum of all crossings for both the
                  top and bottom of the shadow for every segment in the path,
                  or the special value RECT_INTERSECTS if the path ever enters
                  the interior of the rectangle.
                  The path must start with a SEG_MOVETO, otherwise an exception is
                  thrown.
                  The caller must check r[xy]{min,max} for NaN values.                
            </javadoc>
            <method name="rectCrossingsForPath" type="int" line="255">
                <params>
                    <param name="pi" type="PathIterator"/>
                    <param name="rxmin" type="double"/>
                    <param name="rymin" type="double"/>
                    <param name="rxmax" type="double"/>
                    <param name="rymax" type="double"/>
                </params>
                <scope line="256"/>
                <scope line="259"/>
                <declaration name="coords" type="double" line="262"/>
                <scope line="263"/>
                <declaration name="curx" type="double" line="267"/>
                <declaration name="crossings" type="int" line="270"/>
                <scope line="271">
                    <scope line="274"/>
                    <scope line="302"/>
                </scope>
                <scope line="311"/>
            </method>
            <javadoc line="316">
                Accumulate the number of times the line crosses the shadow
                  extending to the right of the rectangle.  See the comment
                  for the RECT_INTERSECTS constant for more complete details.                
            </javadoc>
            <method name="rectCrossingsForLine" type="int" line="321">
                <params>
                    <param name="crossings" type="int"/>
                    <param name="rxmin" type="double"/>
                    <param name="rymin" type="double"/>
                    <param name="rxmax" type="double"/>
                    <param name="rymax" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                </params>
                <scope line="325">
                    <scope line="326"/>
                    <scope line="330"/>
                </scope>
                <scope line="336"/>
                <declaration name="xi0" type="double" line="339"/>
                <scope line="340"/>
                <scope line="343"/>
                <declaration name="xi1" type="double" line="346"/>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="354">
                    <scope line="355"/>
                    <scope line="359"/>
                </scope>
            </method>
            <javadoc line="367">
                Accumulate the number of times the quad crosses the shadow
                  extending to the right of the rectangle.  See the comment
                  for the RECT_INTERSECTS constant for more complete details.                
            </javadoc>
            <method name="rectCrossingsForQuad" type="int" line="372">
                <params>
                    <param name="crossings" type="int"/>
                    <param name="rxmin" type="double"/>
                    <param name="rymin" type="double"/>
                    <param name="rxmax" type="double"/>
                    <param name="rymax" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="xc" type="double"/>
                    <param name="yc" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="level" type="int"/>
                </params>
                <scope line="376">
                    <scope line="377"/>
                    <scope line="381"/>
                </scope>
                <scope line="387"/>
                <scope line="390"/>
                <declaration name="x0c" type="double" line="393"/>
                <declaration name="y0c" type="double" line="394"/>
                <declaration name="xc1" type="double" line="395"/>
                <declaration name="yc1" type="double" line="396"/>
                <scope line="399"/>
                <scope line="403"/>
            </method>
            <javadoc line="408">
                Accumulate the number of times the cubic crosses the shadow
                  extending to the right of the rectangle.  See the comment
                  for the RECT_INTERSECTS constant for more complete details.                
            </javadoc>
            <method name="rectCrossingsForCubic" type="int" line="413">
                <params>
                    <param name="crossings" type="int"/>
                    <param name="rxmin" type="double"/>
                    <param name="rymin" type="double"/>
                    <param name="rxmax" type="double"/>
                    <param name="rymax" type="double"/>
                    <param name="x0" type="double"/>
                    <param name="y0" type="double"/>
                    <param name="xc0" type="double"/>
                    <param name="yc0" type="double"/>
                    <param name="xc1" type="double"/>
                    <param name="yc1" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="level" type="int"/>
                </params>
                <scope line="414"/>
                <scope line="417"/>
                <scope line="420"/>
                <scope line="423">
                    <scope line="424"/>
                    <scope line="428"/>
                </scope>
                <scope line="434"/>
                <scope line="437"/>
                <declaration name="xmid" type="double" line="440"/>
                <declaration name="ymid" type="double" line="441"/>
                <declaration name="xc0m" type="double" line="446"/>
                <declaration name="yc0m" type="double" line="447"/>
                <declaration name="xmc1" type="double" line="448"/>
                <declaration name="ymc1" type="double" line="449"/>
                <scope line="452"/>
                <scope line="456"/>
            </method>
            <method name="Curve" type="constructor" line="461">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <method name="getDirection" type="int" line="464"/>
            <method name="getWithDirection" type="Curve" line="467">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <method name="round" type="double" line="470">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <method name="orderof" type="int" line="473">
                <params>
                    <param name="x1" type="double"/>
                    <param name="x2" type="double"/>
                </params>
                <scope line="474"/>
                <scope line="477"/>
            </method>
            <method name="signeddiffbits" type="long" line="482">
                <params>
                    <param name="y1" type="double"/>
                    <param name="y2" type="double"/>
                </params>
            </method>
            <method name="diffbits" type="long" line="485">
                <params>
                    <param name="y1" type="double"/>
                    <param name="y2" type="double"/>
                </params>
            </method>
            <method name="prev" type="double" line="488">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <method name="next" type="double" line="491">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <method name="toString" type="String" line="494"/>
            <method name="controlPointString" type="String" line="497"/>
            <method name="getOrder" type="int" line="500"/>
            <method name="getXTop" type="double" line="501"/>
            <method name="getYTop" type="double" line="502"/>
            <method name="getXBot" type="double" line="503"/>
            <method name="getYBot" type="double" line="504"/>
            <method name="getXMin" type="double" line="505"/>
            <method name="getXMax" type="double" line="506"/>
            <method name="getX0" type="double" line="507"/>
            <method name="getY0" type="double" line="508"/>
            <method name="getX1" type="double" line="509"/>
            <method name="getY1" type="double" line="510"/>
            <method name="XforY" type="double" line="511"/>
            <method name="TforY" type="double" line="512"/>
            <method name="XforT" type="double" line="513"/>
            <method name="YforT" type="double" line="514"/>
            <method name="dXforT" type="double" line="515"/>
            <method name="dYforT" type="double" line="516"/>
            <method name="nextVertical" type="double" line="517"/>
            <method name="crossingsFor" type="int" line="518">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="519">
                    <scope line="520"/>
                </scope>
            </method>
            <method name="accumulateCrossings" type="boolean" line="526">
                <params>
                    <param name="c" type="Crossings"/>
                </params>
                <declaration name="xhi" type="double" line="527"/>
                <scope line="528"/>
                <declaration name="xlo" type="double" line="531"/>
                <declaration name="ylo" type="double" line="532"/>
                <declaration name="yhi" type="double" line="533"/>
                <declaration name="y0" type="double" line="534"/>
                <declaration name="y1" type="double" line="535"/>
                <declaration name="tstart" type="double" line="536"/>
                <scope line="537">
                    <scope line="538"/>
                </scope>
                <scope line="544">
                    <scope line="545"/>
                </scope>
                <scope line="551"/>
                <scope line="555"/>
                <declaration name="hitLo" type="boolean" line="559"/>
                <declaration name="hitHi" type="boolean" line="560"/>
                <scope line="561">
                    <declaration name="x" type="double" line="562"/>
                    <scope line="563">
                        <scope line="564"/>
                    </scope>
                    <scope line="569">
                        <scope line="570"/>
                    </scope>
                    <scope line="575"/>
                </scope>
                <scope line="580"/>
            </method>
            <method name="enlarge" type="void" line="585"/>
            <method name="getSubCurve" type="Curve" line="586">
                <params>
                    <param name="ystart" type="double"/>
                    <param name="yend" type="double"/>
                </params>
            </method>
            <method name="getReversedCurve" type="Curve" line="589"/>
            <method name="getSubCurve" type="Curve" line="590"/>
            <method name="compareTo" type="int" line="591">
                <params>
                    <param name="that" type="Curve"/>
                    <param name="yrange" type="double"/>
                </params>
                <declaration name="y0" type="double" line="592"/>
                <declaration name="y1" type="double" line="593"/>
                <scope line="595"/>
                <scope line="602">
                    <scope line="603"/>
                </scope>
                <scope line="608"/>
                <declaration name="s0" type="double" line="611"/>
                <declaration name="ys0" type="double" line="612"/>
                <scope line="613"/>
                <declaration name="s1" type="double" line="617"/>
                <scope line="618"/>
                <declaration name="t0" type="double" line="621"/>
                <declaration name="yt0" type="double" line="622"/>
                <scope line="623"/>
                <declaration name="t1" type="double" line="627"/>
                <scope line="628"/>
                <declaration name="xs0" type="double" line="631"/>
                <declaration name="xt0" type="double" line="632"/>
                <declaration name="scale" type="double" line="633"/>
                <declaration name="ymin" type="double" line="634"/>
                <scope line="635">
                    <declaration name="bump" type="double" line="636"/>
                    <declaration name="maxbump" type="double" line="637"/>
                    <declaration name="y" type="double" line="638"/>
                    <scope line="639">
                        <scope line="640">
                            <scope line="641"/>
                        </scope>
                        <scope line="645">
                            <scope line="647">
                                <declaration name="newy" type="double" line="649"/>
                                <scope line="650"/>
                                <scope line="653"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="661">
                        <scope line="662"/>
                    </scope>
                </scope>
                <scope line="668"/>
                <scope line="671">
                    <declaration name="sh" type="double" line="672"/>
                    <declaration name="xsh" type="double" line="673"/>
                    <declaration name="ysh" type="double" line="674"/>
                    <declaration name="th" type="double" line="675"/>
                    <declaration name="xth" type="double" line="676"/>
                    <declaration name="yth" type="double" line="677"/>
                    <scope line="678">
                        <scope line="679"/>
                    </scope>
                    <scope line="683"/>
                    <scope line="691">
                        <scope line="692">
                            <scope line="693"/>
                        </scope>
                    </scope>
                    <scope line="702">
                        <scope line="703">
                            <scope line="704"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ymid" type="double" line="714"/>
            </method>
            <declaration name="TMIN" type="double" line="717"/>
            <method name="findIntersect" type="boolean" line="718">
                <params>
                    <param name="that" type="Curve"/>
                    <param name="yrange" type="double"/>
                    <param name="ymin" type="double"/>
                    <param name="slevel" type="int"/>
                    <param name="tlevel" type="int"/>
                    <param name="s0" type="double"/>
                    <param name="xs0" type="double"/>
                    <param name="ys0" type="double"/>
                    <param name="s1" type="double"/>
                    <param name="xs1" type="double"/>
                    <param name="ys1" type="double"/>
                    <param name="t0" type="double"/>
                    <param name="xt0" type="double"/>
                    <param name="yt0" type="double"/>
                    <param name="t1" type="double"/>
                    <param name="xt1" type="double"/>
                    <param name="yt1" type="double"/>
                </params>
                <scope line="719"/>
                <scope line="722"/>
                <scope line="725">
                    <declaration name="s" type="double" line="726"/>
                    <declaration name="xs" type="double" line="727"/>
                    <declaration name="ys" type="double" line="728"/>
                    <scope line="729"/>
                    <scope line="734">
                        <declaration name="t" type="double" line="735"/>
                        <declaration name="xt" type="double" line="736"/>
                        <declaration name="yt" type="double" line="737"/>
                        <scope line="738"/>
                        <scope line="743">
                            <scope line="744"/>
                        </scope>
                        <scope line="748">
                            <scope line="749"/>
                        </scope>
                        <scope line="753">
                            <scope line="754"/>
                        </scope>
                        <scope line="758">
                            <scope line="759"/>
                        </scope>
                    </scope>
                    <scope line="764">
                        <scope line="765">
                            <scope line="766"/>
                        </scope>
                        <scope line="770">
                            <scope line="771"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="777">
                    <declaration name="t" type="double" line="778"/>
                    <declaration name="xt" type="double" line="779"/>
                    <declaration name="yt" type="double" line="780"/>
                    <scope line="781"/>
                    <scope line="786">
                        <scope line="787"/>
                    </scope>
                    <scope line="791">
                        <scope line="792"/>
                    </scope>
                </scope>
                <scope line="797">
                    <declaration name="xlk" type="double" line="798"/>
                    <declaration name="ylk" type="double" line="799"/>
                    <declaration name="xnm" type="double" line="800"/>
                    <declaration name="ynm" type="double" line="801"/>
                    <declaration name="xmk" type="double" line="802"/>
                    <declaration name="ymk" type="double" line="803"/>
                    <declaration name="det" type="double" line="804"/>
                    <scope line="805">
                        <declaration name="detinv" type="double" line="806"/>
                        <declaration name="s" type="double" line="807"/>
                        <declaration name="t" type="double" line="808"/>
                        <scope line="809">
                            <scope line="812"/>
                            <declaration name="y" type="double" line="815"/>
                            <scope line="816"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="refineTforY" type="double" line="825">
                <params>
                    <param name="t0" type="double"/>
                    <param name="yt0" type="double"/>
                    <param name="y0" type="double"/>
                </params>
                <declaration name="t1" type="double" line="826"/>
                <scope line="827">
                    <declaration name="th" type="double" line="828"/>
                    <scope line="829"/>
                    <declaration name="y" type="double" line="832"/>
                    <scope line="833"/>
                    <scope line="837"/>
                    <scope line="840"/>
                </scope>
            </method>
            <method name="fairlyClose" type="boolean" line="845">
                <params>
                    <param name="v1" type="double"/>
                    <param name="v2" type="double"/>
                </params>
            </method>
            <method name="getSegment" type="int" line="848"/>
        </class>
    </source>