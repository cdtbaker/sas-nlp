<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.SystemTray"/>
        <import package="java.awt.TrayIcon"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.event.InvocationEvent"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.IdentityHashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.beans.PropertyChangeSupport"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="java.util.concurrent.locks.Condition"/>
        <import package="java.util.concurrent.locks.Lock"/>
        <import package="java.util.concurrent.locks.ReentrantLock"/>
        <class name="AppContext" line="23">
            <javadoc line="23">
                The AppContext is a table referenced by ThreadGroup which stores
                  application service instances.  (If you are not writing an application
                  service, or don&apos;t know what one is, please do not use this class.)
                  The AppContext allows applet access to what would otherwise be
                  potentially dangerous services, such as the ability to peek at
                  EventQueues or change the look-and-feel of a Swing application.&lt;p&gt;
                  Most application services use a singleton object to provide their
                  services, either as a default (such as getSystemEventQueue or
                  getDefaultToolkit) or as static methods with class data (System).
                  The AppContext works with the former method by extending the concept
                  of &quot;default&quot; to be ThreadGroup-specific.  Application services
                  lookup their singleton in the AppContext.&lt;p&gt;
                  For example, here we have a Foo service, with its pre-AppContext
                  code:&lt;p&gt;
                  &lt;code&gt;&lt;pre&gt;
                  public class Foo {
                  private static Foo defaultFoo = new Foo();
                  public static Foo getDefaultFoo() {
                  return defaultFoo;
                  }
                  ... Foo service methods
                  }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;
                  The problem with the above is that the Foo service is global in scope,
                  so that applets and other untrusted code can execute methods on the
                  single, shared Foo instance.  The Foo service therefore either needs
                  to block its use by untrusted code using a SecurityManager test, or
                  restrict its capabilities so that it doesn&apos;t matter if untrusted code
                  executes it.&lt;p&gt;
                  Here&apos;s the Foo class written to use the AppContext:&lt;p&gt;
                  &lt;code&gt;&lt;pre&gt;
                  public class Foo {
                  public static Foo getDefaultFoo() {
                  Foo foo = (Foo)AppContext.getAppContext().get(Foo.class);
                  if (foo == null) {
                  foo = new Foo();
                  getAppContext().put(Foo.class, foo);
                  }
                  return foo;
                  }
                  ... Foo service methods
                  }&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;
                  Since a separate AppContext can exist for each ThreadGroup, trusted
                  and untrusted code have access to different Foo instances.  This allows
                  untrusted code access to &quot;system-wide&quot; services -- the service remains
                  within the AppContext &quot;sandbox&quot;.  For example, say a malicious applet
                  wants to peek all of the key events on the EventQueue to listen for
                  passwords; if separate EventQueues are used for each ThreadGroup
                  using AppContexts, the only key events that applet will be able to
                  listen to are its own.  A more reasonable applet request would be to
                  change the Swing default look-and-feel; with that default stored in
                  an AppContext, the applet&apos;s look-and-feel will change without
                  disrupting other applets or potentially the browser itself.&lt;p&gt;
                  Because the AppContext is a facility for safely extending application
                  service support to applets, none of its methods may be blocked by a
                  a SecurityManager check in a valid Java implementation.  Applets may
                  therefore safely invoke any of its methods without worry of being
                  blocked.
                  Note: If a SecurityManager is installed which derives from
                  sun.awt.AWTSecurityManager, it may override the
                  AWTSecurityManager.getAppContext() method to return the proper
                  AppContext based on the execution context, in the case where
                  the default ThreadGroup-based AppContext indexing would return
                  the main &quot;system&quot; AppContext.  For example, in an applet situation,
                  if a system thread calls into an applet, rather than returning the
                  main &quot;system&quot; AppContext (the one corresponding to the system thread),
                  an installed AWTSecurityManager may return the applet&apos;s AppContext
                  based on the execution context.                
                <author>
                    Thomas Ball                    
                </author>
                <author>
                    Fred Ecks                    
                </author>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="95"/>
            <declaration name="EVENT_QUEUE_KEY" type="Object" line="96"/>
            <declaration name="EVENT_QUEUE_LOCK_KEY" type="Object" line="97"/>
            <declaration name="EVENT_QUEUE_COND_KEY" type="Object" line="98"/>
            <declaration name="threadGroup2appContext" type="Map&lt;ThreadGroup,AppContext&gt;" line="99"/>
            <javadoc line="100">
                Returns a set containing all &lt;code&gt;AppContext&lt;/code&gt;s.                
            </javadoc>
            <method name="getAppContexts" type="Set<AppContext>" line="103">
                <scope line="104"/>
            </method>
            <declaration name="mainAppContext" type="AppContext" line="108"/>
            <declaration name="table" type="HashMap" line="109"/>
            <declaration name="threadGroup" type="ThreadGroup" line="110"/>
            <declaration name="changeSupport" type="PropertyChangeSupport" line="111"/>
            <javadoc line="111">
                If any &lt;code&gt;PropertyChangeListeners&lt;/code&gt; have been registered,
                  the &lt;code&gt;changeSupport&lt;/code&gt; field describes them.                
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #firePropertyChange                    
                </see>
            </javadoc>
            <declaration name="DISPOSED_PROPERTY_NAME" type="String" line="119"/>
            <declaration name="GUI_DISPOSED" type="String" line="120"/>
            <declaration name="isDisposed" type="boolean" line="121"/>
            <method name="isDisposed" type="boolean" line="122"/>
            <scope line="125">
                <anonymous_class line="126">
                    <method name="run" type="Object" line="127">
                        <declaration name="currentThreadGroup" type="ThreadGroup" line="128"/>
                        <declaration name="parentThreadGroup" type="ThreadGroup" line="129"/>
                        <scope line="130"/>
                    </method>
                </anonymous_class>
            </scope>
            <declaration name="numAppContexts" type="int" line="141"/>
            <declaration name="contextClassLoader" type="ClassLoader" line="142"/>
            <javadoc line="143">
                Constructor for AppContext.  This method is &lt;i&gt;not&lt;/i&gt; public,
                  nor should it ever be used as such.  The proper way to construct
                  an AppContext is through the use of SunToolkit.createNewAppContext.
                  A ThreadGroup is created for the new AppContext, a Thread is
                  created within that ThreadGroup, and that Thread calls
                  SunToolkit.createNewAppContext before calling anything else.
                  That creates both the new AppContext and its EventQueue.                
                <param>
                    threadGroup     The ThreadGroup for the new AppContext                    
                </param>
                <see>
                    sun.awt.SunToolkit                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="AppContext" type="constructor" line="155">
                <params>
                    <param name="threadGroup" type="ThreadGroup"/>
                </params>
                <anonymous_class line="159">
                    <method name="run" type="ClassLoader" line="160"/>
                </anonymous_class>
                <declaration name="eventQueuePushPopLock" type="Lock" line="165"/>
                <declaration name="eventQueuePushPopCond" type="Condition" line="167"/>
            </method>
            <declaration name="threadAppContext" type="ThreadLocal&lt;AppContext&gt;" line="170"/>
            <javadoc line="171">
                Returns the appropriate AppContext for the caller,
                  as determined by its ThreadGroup.  If the main &quot;system&quot; AppContext
                  would be returned and there&apos;s an AWTSecurityManager installed, it
                  is called to get the proper AppContext based on the execution
                  context.                
                <return>
                    the AppContext for the caller.                    
                </return>
                <see>
                    java.lang.ThreadGroup                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getAppContext" type="AppContext" line="181">
                <declaration name="appContext" type="AppContext" line="183"/>
                <scope line="184">
                    <anonymous_class line="185">
                        <method name="run" type="AppContext" line="186">
                            <declaration name="currentThreadGroup" type="ThreadGroup" line="187"/>
                            <declaration name="threadGroup" type="ThreadGroup" line="188"/>
                            <declaration name="context" type="AppContext" line="189"/>
                            <scope line="190">
                                <scope line="192"/>
                            </scope>
                            <scope line="197"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="206">
                    <declaration name="securityManager" type="SecurityManager" line="207"/>
                    <scope line="208">
                        <declaration name="awtSecMgr" type="AWTSecurityManager" line="209"/>
                        <declaration name="secAppContext" type="AppContext" line="210"/>
                        <scope line="211"/>
                    </scope>
                </scope>
            </method>
            <declaration name="DISPOSAL_TIMEOUT" type="long" line="218"/>
            <declaration name="THREAD_INTERRUPT_TIMEOUT" type="long" line="219"/>
            <javadoc line="220">
                Disposes of this AppContext, all of its top-level Frames, and
                  all Threads and ThreadGroups contained within it.
                  This method must be called from a Thread which is not contained
                  within this AppContext.                
                <exception>
                    IllegalThreadStateException  if the current thread is
                      contained within this AppContext                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="dispose" type="void" line="229">
                <scope line="230"/>
                <scope line="233">
                    <scope line="234"/>
                </scope>
                <declaration name="changeSupport" type="PropertyChangeSupport" line="239"/>
                <scope line="240"/>
                <declaration name="notificationLock" type="Object" line="243"/>
                <anonymous_class line="244">
                    <method name="run" type="void" line="245">
                        <declaration name="windowsToDispose" type="Window[]" line="246"/>
                        <scope line="247">
                            <scope line="248"/>
                            <scope line="251"/>
                        </scope>
                        <anonymous_class line="255">
                            <method name="run" type="Object" line="256">
                                <scope line="257">
                                    <declaration name="systemTray" type="SystemTray" line="258"/>
                                    <declaration name="trayIconsToDispose" type="TrayIcon[]" line="259"/>
                                    <scope line="260"/>
                                </scope>
                            </method>
                        </anonymous_class>
                        <scope line="268"/>
                        <scope line="271"/>
                    </method>
                </anonymous_class>
                <declaration name="runnable" type="Runnable" line="244"/>
                <scope line="277">
                    <scope line="279"/>
                    <scope line="282"/>
                </scope>
                <anonymous_class line="285">
                    <method name="run" type="void" line="286">
                        <scope line="287"/>
                    </method>
                </anonymous_class>
                <scope line="293">
                    <scope line="295"/>
                    <scope line="298"/>
                </scope>
                <declaration name="startTime" type="long" line="302"/>
                <declaration name="endTime" type="long" line="303"/>
                <scope line="304">
                    <scope line="305"/>
                    <scope line="308"/>
                </scope>
                <scope line="314">
                    <scope line="315"/>
                    <scope line="318"/>
                </scope>
                <declaration name="numSubGroups" type="int" line="321"/>
                <scope line="322">
                    <declaration name="subGroups" type="ThreadGroup[]" line="323"/>
                    <scope line="325"/>
                </scope>
                <scope line="331"/>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <class name="PostShutdownEventRunnable" line="342">
                <implements interface="Runnable"/>
                <declaration name="appContext" type="AppContext" line="343"/>
                <method name="PostShutdownEventRunnable" type="constructor" line="344">
                    <params>
                        <param name="ac" type="AppContext"/>
                    </params>
                </method>
                <method name="run" type="void" line="347">
                    <declaration name="eq" type="EventQueue" line="348"/>
                    <scope line="349"/>
                </method>
            </class>
            <class name="CreateThreadAction" line="354">
                <implements interface="PrivilegedAction"/>
                <declaration name="appContext" type="AppContext" line="355"/>
                <declaration name="runnable" type="Runnable" line="356"/>
                <method name="CreateThreadAction" type="constructor" line="357">
                    <params>
                        <param name="ac" type="AppContext"/>
                        <param name="r" type="Runnable"/>
                    </params>
                </method>
                <method name="run" type="Object" line="361">
                    <declaration name="t" type="Thread" line="362"/>
                </method>
            </class>
            <method name="stopEventDispatchThreads" type="void" line="369">
                <scope line="370">
                    <scope line="371"/>
                    <declaration name="r" type="Runnable" line="374"/>
                    <scope line="375">
                        <declaration name="action" type="PrivilegedAction" line="376"/>
                        <declaration name="thread" type="Thread" line="377"/>
                    </scope>
                    <scope line="380"/>
                </scope>
            </method>
            <declaration name="mostRecentKeyValue" type="MostRecentKeyValue" line="385"/>
            <declaration name="shadowMostRecentKeyValue" type="MostRecentKeyValue" line="386"/>
            <javadoc line="387">
                Returns the value to which the specified key is mapped in this context.                
                <param>
                    key   a key in the AppContext.                    
                </param>
                <return>
                    the value to which the key is mapped in this AppContext;
                      <code>null</code> if the key is not mapped to any value.                    
                </return>
                <see>
                    #put(Object,Object)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="get" type="Object" line="395">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="396">
                    <declaration name="recent" type="MostRecentKeyValue" line="397"/>
                    <scope line="398"/>
                    <declaration name="value" type="Object" line="401"/>
                    <scope line="402"/>
                    <scope line="406">
                        <declaration name="auxKeyValue" type="MostRecentKeyValue" line="407"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="415">
                Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified
                  &lt;code&gt;value&lt;/code&gt; in this AppContext.  Neither the key nor the
                  value can be &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  The value can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method
                  with a key that is equal to the original key.                
                <param>
                    key     the AppContext key.                    
                </param>
                <param>
                    value   the value.                    
                </param>
                <return>
                    the previous value of the specified key in this
                      AppContext, or <code>null</code> if it did not have one.                    
                </return>
                <exception>
                    NullPointerException  if the key or value is
                      <code>null</code>.                    
                </exception>
                <see>
                    #get(Object)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="put" type="Object" line="431">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="432">
                    <declaration name="recent" type="MostRecentKeyValue" line="433"/>
                </scope>
            </method>
            <javadoc line="438">
                Removes the key (and its corresponding value) from this
                  AppContext. This method does nothing if the key is not in the
                  AppContext.                
                <param>
                    key   the key that needs to be removed.                    
                </param>
                <return>
                    the value to which the key had been mapped in this AppContext,
                      or <code>null</code> if the key did not have a mapping.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="remove" type="Object" line="447">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="448">
                    <declaration name="recent" type="MostRecentKeyValue" line="449"/>
                </scope>
            </method>
            <javadoc line="454">
                Returns the root ThreadGroup for all Threads contained within
                  this AppContext.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getThreadGroup" type="ThreadGroup" line="459"/>
            <javadoc line="462">
                Returns the context ClassLoader that was used to create this
                  AppContext.                
                <see>
                    java.lang.Thread#getContextClassLoader                    
                </see>
            </javadoc>
            <method name="getContextClassLoader" type="ClassLoader" line="467"/>
            <javadoc line="470">
                Returns a string representation of this AppContext.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="474"/>
            <javadoc line="477">
                Returns an array of all the property change listeners
                  registered on this component.                
                <return>
                    all of this component's <code>PropertyChangeListener</code>s
                      or an empty array if no property change
                      listeners are currently registered                    
                </return>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners(java.lang.String)                    
                </see>
                <see>
                    java.beans.PropertyChangeSupport#getPropertyChangeListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="489">
                <scope line="490"/>
            </method>
            <javadoc line="495">
                Adds a PropertyChangeListener to the listener list for a specific
                  property. The specified property may be one of the following:
                  &lt;ul&gt;
                  &lt;li&gt;if this AppContext is disposed (&quot;disposed&quot;)&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;ul&gt;
                  &lt;li&gt;if this AppContext&apos;s unowned Windows have been disposed
                  (&quot;guidisposed&quot;).  Code to cleanup after the GUI is disposed
                  (such as LookAndFeel.uninitialize()) should execute in response to
                  this property being fired.  Notifications for the &quot;guidisposed&quot;
                  property are sent on the event dispatch thread.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If listener is null, no exception is thrown and no action is performed.                
                <param>
                    propertyName one of the property names listed above                    
                </param>
                <param>
                    listener the PropertyChangeListener to be added                    
                </param>
                <see>
                    #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners(java.lang.String)                    
                </see>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="516">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="517"/>
                <scope line="520"/>
            </method>
            <javadoc line="525">
                Removes a PropertyChangeListener from the listener list for a specific
                  property. This method should be used to remove PropertyChangeListeners
                  that were registered for a specific bound property.
                  &lt;p&gt;
                  If listener is null, no exception is thrown and no action is performed.                
                <param>
                    propertyName a valid property name                    
                </param>
                <param>
                    listener the PropertyChangeListener to be removed                    
                </param>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners(java.lang.String)                    
                </see>
                <see>
                    #removePropertyChangeListener(java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="537">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="538"/>
            </method>
            <javadoc line="543">
                Returns an array of all the listeners which have been associated
                  with the named property.                
                <return>
                    all of the <code>PropertyChangeListeners</code> associated with
                      the named property or an empty array if no listeners have
                      been added                    
                </return>
                <see>
                    #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="554">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
                <scope line="555"/>
            </method>
        </class>
        <class name="MostRecentKeyValue" line="561">
            <declaration name="key" type="Object" line="562"/>
            <declaration name="value" type="Object" line="563"/>
            <method name="MostRecentKeyValue" type="constructor" line="564">
                <params>
                    <param name="k" type="Object"/>
                    <param name="v" type="Object"/>
                </params>
            </method>
            <method name="setPair" type="void" line="568">
                <params>
                    <param name="k" type="Object"/>
                    <param name="v" type="Object"/>
                </params>
            </method>
        </class>
    </source>