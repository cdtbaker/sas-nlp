<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.datatransfer">
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.datatransfer.Clipboard"/>
        <import package="java.awt.datatransfer.FlavorTable"/>
        <import package="java.awt.datatransfer.SystemFlavorMap"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.ClipboardOwner"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.FlavorListener"/>
        <import package="java.awt.datatransfer.FlavorEvent"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.io.IOException"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.PeerEvent"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.EventListenerAggregate"/>
        <class name="SunClipboard" line="55">
            <extends class="Clipboard"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="55">
                Serves as a common, helper superclass for the Win32 and X11 system
                  Clipboards.                
                <author>
                    Danila Sinopalnikov                    
                </author>
                <author>
                    Alexander Gerasimov                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="flavorMap" type="FlavorTable" line="67"/>
            <declaration name="contentsContext" type="AppContext" line="70"/>
            <declaration name="CLIPBOARD_FLAVOR_LISTENER_KEY" type="Object" line="72"/>
            <declaration name="numberOfFlavorListeners" type="int" line="74"/>
            <javadoc line="74">
                A number of &lt;code&gt;FlavorListener&lt;/code&gt;s currently registered
                  on this clipboard across all &lt;code&gt;AppContext&lt;/code&gt;s.                
            </javadoc>
            <declaration name="currentDataFlavors" type="Set" line="80"/>
            <javadoc line="80">
                A set of &lt;code&gt;DataFlavor&lt;/code&gt;s that is available on
                  this clipboard. It is used for tracking changes
                  of &lt;code&gt;DataFlavor&lt;/code&gt;s available on this clipboard.                
            </javadoc>
            <method name="SunClipboard" type="constructor" line="88">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="setContents" type="void" line="94">
                <params>
                    <param name="contents" type="Transferable"/>
                    <param name="owner" type="ClipboardOwner"/>
                </params>
                <comment line="96">
                    4378007 : Toolkit.getSystemClipboard().setContents(null, null)
                     should throw NPE                    
                </comment>
                <scope line="97"/>
                <declaration name="oldOwner" type="ClipboardOwner" line="103"/>
                <declaration name="oldContents" type="Transferable" line="104"/>
                <scope line="106"/>
                <scope line="111">
                    <scope line="112">
                        <anonymous_class line="113">
                            <method name="run" type="void" line="114"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <method name="initContext" type="void" line="122">
                <comment line="127">
                    Need to synchronize on the AppContext to guarantee that it cannot
                     be disposed after the check, but before the listener is added.                    
                </comment>
                <declaration name="context" type="AppContext" line="123"/>
                <scope line="125">
                    <scope line="128">
                        <scope line="129"/>
                    </scope>
                    <scope line="135"/>
                </scope>
            </method>
            <method name="getContents" type="Transferable" line="143">
                <params>
                    <param name="requestor" type="Object"/>
                </params>
                <scope line="144"/>
            </method>
            <javadoc line="151">
                @return the contents of this clipboard if it has been set from the same
                  AppContext as it is currently retrieved or null otherwise                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getContextContents" type="Transferable" line="156">
                <declaration name="context" type="AppContext" line="157"/>
            </method>
            <javadoc line="162">
                @see java.awt.Clipboard#getAvailableDataFlavors                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAvailableDataFlavors" type="DataFlavor[]" line="166">
                <declaration name="cntnts" type="Transferable" line="167"/>
                <scope line="168"/>
                <declaration name="formats" type="long[]" line="172"/>
            </method>
            <javadoc line="178">
                @see java.awt.Clipboard#isDataFlavorAvailable                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isDataFlavorAvailable" type="boolean" line="182">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <scope line="183"/>
                <declaration name="cntnts" type="Transferable" line="187"/>
                <scope line="188"/>
                <declaration name="formats" type="long[]" line="192"/>
            </method>
            <javadoc line="197">
                @see java.awt.Clipboard#getData                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getData" type="Object" line="202">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <scope line="203"/>
                <declaration name="cntnts" type="Transferable" line="207"/>
                <scope line="208"/>
                <declaration name="format" type="long" line="212"/>
                <declaration name="data" type="byte[]" line="213"/>
                <declaration name="localeTransferable" type="Transferable" line="214"/>
                <scope line="216">
                    <declaration name="formats" type="long[]" line="219"/>
                    <declaration name="lFormat" type="Long" line="220"/>
                    <scope line="223"/>
                    <scope line="230"/>
                </scope>
                <scope line="234"/>
            </method>
            <javadoc line="242">
                The clipboard must be opened.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createLocaleTransferable" type="Transferable" line="247">
                <params>
                    <param name="formats" type="long[]"/>
                </params>
            </method>
            <javadoc line="251">
                @throws IllegalStateException if the clipboard has not been opened                
            </javadoc>
            <method name="openClipboard" type="void" line="254">
                <params>
                    <param name="newOwner" type="SunClipboard"/>
                </params>
            </method>
            <method name="closeClipboard" type="void" line="255"/>
            <method name="getID" type="long" line="257"/>
            <method name="propertyChange" type="void" line="259">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <scope line="261">
                    <declaration name="disposedContext" type="AppContext" line="262"/>
                </scope>
            </method>
            <method name="lostOwnershipImpl" type="void" line="267"/>
            <javadoc line="271">
                Clears the clipboard state (contents, owner and contents context) and
                  notifies the current owner that ownership is lost. Does nothing if the
                  argument is not &lt;code&gt;null&lt;/code&gt; and is not equal to the current
                  contents context.                
                <param>
                    disposedContext the AppContext that is disposed or
                      <code>null</code> if the ownership is lost because another
                      application acquired ownership.                    
                </param>
            </javadoc>
            <method name="lostOwnershipLater" type="void" line="281">
                <params>
                    <param name="disposedContext" type="AppContext"/>
                </params>
                <declaration name="context" type="AppContext" line="282"/>
                <scope line="283"/>
                <anonymous_class line="287">
                    <method name="run" type="void" line="288">
                        <declaration name="sunClipboard" type="SunClipboard" line="289"/>
                        <declaration name="owner" type="ClipboardOwner" line="290"/>
                        <declaration name="contents" type="Transferable" line="291"/>
                        <scope line="293">
                            <declaration name="context" type="AppContext" line="294"/>
                            <scope line="296"/>
                            <scope line="300"/>
                            <scope line="309"/>
                        </scope>
                        <scope line="313"/>
                    </method>
                </anonymous_class>
                <declaration name="runnable" type="Runnable" line="287"/>
            </method>
            <method name="clearNativeContext" type="void" line="323"/>
            <method name="setContentsNative" type="void" line="325"/>
            <javadoc line="327">
                @since 1.5                
            </javadoc>
            <method name="getClipboardFormatsOpenClose" type="long[]" line="330">
                <scope line="331"/>
                <scope line="334"/>
            </method>
            <method name="getClipboardFormats" type="long[]" line="339"/>
            <javadoc line="339">
                Returns zero-length array (not null) if the number of available formats is zero.                
                <throws>
                    IllegalStateException if formats could not be retrieved                    
                </throws>
            </javadoc>
            <method name="getClipboardData" type="byte[]" line="346"/>
            <method name="formatArrayAsDataFlavorSet" type="Set" line="349">
                <params>
                    <param name="formats" type="long[]"/>
                </params>
            </method>
            <method name="addFlavorListener" type="void" line="356">
                <params>
                    <param name="listener" type="FlavorListener"/>
                </params>
                <scope line="357"/>
                <declaration name="appContext" type="AppContext" line="360"/>
                <declaration name="contextFlavorListeners" type="EventListenerAggregate" line="361"/>
                <scope line="363"/>
                <scope line="369">
                    <declaration name="currentFormats" type="long[]" line="370"/>
                    <scope line="371"/>
                    <scope line="374"/>
                    <scope line="375"/>
                </scope>
            </method>
            <method name="removeFlavorListener" type="void" line="384">
                <params>
                    <param name="listener" type="FlavorListener"/>
                </params>
                <comment line="393">
                    else we throw NullPointerException, but it is forbidden                    
                </comment>
                <scope line="385"/>
                <declaration name="appContext" type="AppContext" line="388"/>
                <declaration name="contextFlavorListeners" type="EventListenerAggregate" line="389"/>
                <scope line="391"/>
                <scope line="396"/>
            </method>
            <method name="getFlavorListeners" type="FlavorListener[]" line="402">
                <declaration name="contextFlavorListeners" type="EventListenerAggregate" line="403"/>
            </method>
            <method name="areFlavorListenersRegistered" type="boolean" line="409"/>
            <method name="registerClipboardViewerChecked" type="void" line="413"/>
            <method name="unregisterClipboardViewerChecked" type="void" line="415"/>
            <javadoc line="417">
                Checks change of the &lt;code&gt;DataFlavor&lt;/code&gt;s and, if necessary,
                  posts notifications on &lt;code&gt;FlavorEvent&lt;/code&gt;s to the
                  AppContexts&apos; EDTs.
                  The parameter &lt;code&gt;formats&lt;/code&gt; is null iff we have just
                  failed to get formats available on the clipboard.                
                <param>
                    formats data formats that have just been retrieved from
                      this clipboard                    
                </param>
            </javadoc>
            <method name="checkChange" type="void" line="427">
                <params>
                    <param name="formats" type="long[]"/>
                </params>
                <comment line="434">
                    we&apos;ve been able to successfully get available on the clipboard
                     DataFlavors this and previous time and they are coincident;
                     don&apos;t notify                    
                </comment>
                <declaration name="prevDataFlavors" type="Set" line="428"/>
                <scope line="432"/>
                <class name="SunFlavorChangeNotifier" line="439">
                    <implements interface="Runnable"/>
                    <declaration name="flavorListener" type="FlavorListener" line="440"/>
                    <method name="SunFlavorChangeNotifier" type="constructor" line="442">
                        <params>
                            <param name="flavorListener" type="FlavorListener"/>
                        </params>
                    </method>
                    <method name="run" type="void" line="446">
                        <scope line="447"/>
                    </method>
                </class>
                <scope line="453">
                    <declaration name="appContext" type="AppContext" line="454"/>
                    <scope line="455"/>
                    <declaration name="flavorListeners" type="EventListenerAggregate" line="458"/>
                    <scope line="460">
                        <declaration name="flavorListenerArray" type="FlavorListener[]" line="461"/>
                        <scope line="463"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>