<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.datatransfer">
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.datatransfer.Clipboard"/>
        <import package="java.awt.datatransfer.FlavorTable"/>
        <import package="java.awt.datatransfer.SystemFlavorMap"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.ClipboardOwner"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.FlavorListener"/>
        <import package="java.awt.datatransfer.FlavorEvent"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.io.IOException"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.PeerEvent"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.EventListenerAggregate"/>
        <class name="SunClipboard" line="22">
            <extends class="Clipboard"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="22">
                Serves as a common, helper superclass for the Win32 and X11 system
                  Clipboards.                
                <author>
                    Danila Sinopalnikov                    
                </author>
                <author>
                    Alexander Gerasimov                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="flavorMap" type="FlavorTable" line="30"/>
            <declaration name="contentsContext" type="AppContext" line="31"/>
            <declaration name="CLIPBOARD_FLAVOR_LISTENER_KEY" type="Object" line="32"/>
            <declaration name="numberOfFlavorListeners" type="int" line="33"/>
            <javadoc line="33">
                A number of &lt;code&gt;FlavorListener&lt;/code&gt;s currently registered
                  on this clipboard across all &lt;code&gt;AppContext&lt;/code&gt;s.                
            </javadoc>
            <declaration name="currentDataFlavors" type="Set" line="38"/>
            <javadoc line="38">
                A set of &lt;code&gt;DataFlavor&lt;/code&gt;s that is available on
                  this clipboard. It is used for tracking changes
                  of &lt;code&gt;DataFlavor&lt;/code&gt;s available on this clipboard.                
            </javadoc>
            <method name="SunClipboard" type="constructor" line="44">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="setContents" type="void" line="48">
                <params>
                    <param name="contents" type="Transferable"/>
                    <param name="owner" type="ClipboardOwner"/>
                </params>
                <scope line="49"/>
                <declaration name="oldOwner" type="ClipboardOwner" line="53"/>
                <declaration name="oldContents" type="Transferable" line="54"/>
                <scope line="55"/>
                <scope line="60">
                    <scope line="61">
                        <anonymous_class line="62">
                            <method name="run" type="void" line="63"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <method name="initContext" type="void" line="71">
                <declaration name="context" type="AppContext" line="72"/>
                <scope line="73">
                    <scope line="74">
                        <scope line="75"/>
                    </scope>
                    <scope line="80"/>
                </scope>
            </method>
            <method name="getContents" type="Transferable" line="86">
                <params>
                    <param name="requestor" type="Object"/>
                </params>
                <scope line="87"/>
            </method>
            <javadoc line="92">
                @return the contents of this clipboard if it has been set from the same
                  AppContext as it is currently retrieved or null otherwise                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getContextContents" type="Transferable" line="97">
                <declaration name="context" type="AppContext" line="98"/>
            </method>
            <javadoc line="101">
                @see java.awt.Clipboard#getAvailableDataFlavors                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAvailableDataFlavors" type="DataFlavor[]" line="105">
                <declaration name="cntnts" type="Transferable" line="106"/>
                <scope line="107"/>
                <declaration name="formats" type="long[]" line="110"/>
            </method>
            <javadoc line="113">
                @see java.awt.Clipboard#isDataFlavorAvailable                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isDataFlavorAvailable" type="boolean" line="117">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <scope line="118"/>
                <declaration name="cntnts" type="Transferable" line="121"/>
                <scope line="122"/>
                <declaration name="formats" type="long[]" line="125"/>
            </method>
            <javadoc line="128">
                @see java.awt.Clipboard#getData                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getData" type="Object" line="132">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <scope line="133"/>
                <declaration name="cntnts" type="Transferable" line="136"/>
                <scope line="137"/>
                <declaration name="format" type="long" line="140"/>
                <declaration name="data" type="byte[]" line="141"/>
                <declaration name="localeTransferable" type="Transferable" line="142"/>
                <scope line="143">
                    <declaration name="formats" type="long[]" line="145"/>
                    <declaration name="lFormat" type="Long" line="146"/>
                    <scope line="147"/>
                    <scope line="152"/>
                </scope>
                <scope line="156"/>
            </method>
            <javadoc line="161">
                The clipboard must be opened.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createLocaleTransferable" type="Transferable" line="165">
                <params>
                    <param name="formats" type="long[]"/>
                </params>
            </method>
            <javadoc line="168">
                @throws IllegalStateException if the clipboard has not been opened                
            </javadoc>
            <method name="openClipboard" type="void" line="171">
                <params>
                    <param name="newOwner" type="SunClipboard"/>
                </params>
            </method>
            <method name="closeClipboard" type="void" line="173"/>
            <method name="getID" type="long" line="175"/>
            <method name="propertyChange" type="void" line="176">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <scope line="177">
                    <declaration name="disposedContext" type="AppContext" line="178"/>
                </scope>
            </method>
            <method name="lostOwnershipImpl" type="void" line="182"/>
            <javadoc line="185">
                Clears the clipboard state (contents, owner and contents context) and
                  notifies the current owner that ownership is lost. Does nothing if the
                  argument is not &lt;code&gt;null&lt;/code&gt; and is not equal to the current
                  contents context.                
                <param>
                    disposedContext the AppContext that is disposed or
                      &lt;code&gt;null&lt;/code&gt; if the ownership is lost because another
                      application acquired ownership.                    
                </param>
            </javadoc>
            <method name="lostOwnershipLater" type="void" line="194">
                <params>
                    <param name="disposedContext" type="AppContext"/>
                </params>
                <declaration name="context" type="AppContext" line="195"/>
                <scope line="196"/>
                <anonymous_class line="199">
                    <method name="run" type="void" line="200">
                        <declaration name="sunClipboard" type="SunClipboard" line="201"/>
                        <declaration name="owner" type="ClipboardOwner" line="202"/>
                        <declaration name="contents" type="Transferable" line="203"/>
                        <scope line="204">
                            <declaration name="context" type="AppContext" line="205"/>
                            <scope line="206"/>
                            <scope line="209"/>
                            <scope line="218"/>
                        </scope>
                        <scope line="222"/>
                    </method>
                </anonymous_class>
                <declaration name="runnable" type="Runnable" line="199"/>
            </method>
            <method name="clearNativeContext" type="void" line="230"/>
            <method name="setContentsNative" type="void" line="231"/>
            <javadoc line="232">
                @since 1.5                
            </javadoc>
            <method name="getClipboardFormatsOpenClose" type="long[]" line="235">
                <scope line="236"/>
                <scope line="240"/>
            </method>
            <method name="getClipboardFormats" type="long[]" line="244"/>
            <javadoc line="244">
                Returns zero-length array (not null) if the number of available formats is zero.                
                <throws>
                    IllegalStateException if formats could not be retrieved                    
                </throws>
            </javadoc>
            <method name="getClipboardData" type="byte[]" line="249"/>
            <method name="formatArrayAsDataFlavorSet" type="Set" line="250">
                <params>
                    <param name="formats" type="long[]"/>
                </params>
            </method>
            <method name="addFlavorListener" type="void" line="253">
                <params>
                    <param name="listener" type="FlavorListener"/>
                </params>
                <scope line="254"/>
                <declaration name="appContext" type="AppContext" line="257"/>
                <declaration name="contextFlavorListeners" type="EventListenerAggregate" line="258"/>
                <scope line="259"/>
                <scope line="264">
                    <declaration name="currentFormats" type="long[]" line="265"/>
                    <scope line="266"/>
                    <scope line="270"/>
                    <scope line="272"/>
                </scope>
            </method>
            <method name="removeFlavorListener" type="void" line="279">
                <params>
                    <param name="listener" type="FlavorListener"/>
                </params>
                <scope line="280"/>
                <declaration name="appContext" type="AppContext" line="283"/>
                <declaration name="contextFlavorListeners" type="EventListenerAggregate" line="284"/>
                <scope line="285"/>
                <scope line="288"/>
            </method>
            <method name="getFlavorListeners" type="FlavorListener[]" line="293">
                <declaration name="contextFlavorListeners" type="EventListenerAggregate" line="294"/>
            </method>
            <method name="areFlavorListenersRegistered" type="boolean" line="297"/>
            <method name="registerClipboardViewerChecked" type="void" line="300"/>
            <method name="unregisterClipboardViewerChecked" type="void" line="301"/>
            <javadoc line="302">
                Checks change of the &lt;code&gt;DataFlavor&lt;/code&gt;s and, if necessary,
                  posts notifications on &lt;code&gt;FlavorEvent&lt;/code&gt;s to the
                  AppContexts&apos; EDTs.
                  The parameter &lt;code&gt;formats&lt;/code&gt; is null iff we have just
                  failed to get formats available on the clipboard.                
                <param>
                    formats data formats that have just been retrieved from
                      this clipboard                    
                </param>
            </javadoc>
            <method name="checkChange" type="void" line="311">
                <params>
                    <param name="formats" type="long[]"/>
                </params>
                <declaration name="prevDataFlavors" type="Set" line="312"/>
                <scope line="314"/>
                <class name="SunFlavorChangeNotifier" line="317">
                    <implements interface="Runnable"/>
                    <declaration name="flavorListener" type="FlavorListener" line="318"/>
                    <method name="SunFlavorChangeNotifier" type="constructor" line="319">
                        <params>
                            <param name="flavorListener" type="FlavorListener"/>
                        </params>
                    </method>
                    <method name="run" type="void" line="322">
                        <scope line="323"/>
                    </method>
                </class>
                <scope line="329">
                    <declaration name="appContext" type="AppContext" line="330"/>
                    <scope line="331"/>
                    <declaration name="flavorListeners" type="EventListenerAggregate" line="334"/>
                    <scope line="335">
                        <declaration name="flavorListenerArray" type="FlavorListener[]" line="336"/>
                        <scope line="337"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>