<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.datatransfer">
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamClass"/>
        <import package="java.io.OutputStream"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <class name="TransferableProxy" line="21">
            <implements interface="Transferable"/>
            <javadoc line="21">
                Proxies for another Transferable so that Serializable objects are never
                  returned directly by DnD or the Clipboard. Instead, a new instance of the
                  object is returned.                
                <author>
                    Lawrence P.G. Cable                    
                </author>
                <author>
                    David Mendenhall                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="TransferableProxy" type="constructor" line="30">
                <params>
                    <param name="t" type="Transferable"/>
                    <param name="local" type="boolean"/>
                </params>
            </method>
            <method name="getTransferDataFlavors" type="DataFlavor[]" line="34"/>
            <method name="isDataFlavorSupported" type="boolean" line="37">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
            </method>
            <method name="getTransferData" type="Object" line="40">
                <params>
                    <param name="df" type="DataFlavor"/>
                </params>
                <declaration name="data" type="Object" line="41"/>
                <scope line="42">
                    <declaration name="baos" type="ByteArrayOutputStream" line="43"/>
                    <declaration name="oos" type="ClassLoaderObjectOutputStream" line="44"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="46"/>
                    <scope line="47">
                        <declaration name="ois" type="ClassLoaderObjectInputStream" line="48"/>
                    </scope>
                    <scope line="51"/>
                </scope>
            </method>
            <declaration name="transferable" type="Transferable" line="57"/>
            <declaration name="isLocal" type="boolean" line="58"/>
        </class>
        <class name="ClassLoaderObjectOutputStream" line="60">
            <extends class="ObjectOutputStream"/>
            <declaration name="map" type="Map&amp;lt;Set&amp;lt;String&amp;gt;,ClassLoader&amp;gt;" line="61"/>
            <method name="ClassLoaderObjectOutputStream" type="constructor" line="62">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="annotateClass" type="void" line="65">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <anonymous_class line="66">
                    <method name="run" type="Object" line="67"/>
                </anonymous_class>
                <declaration name="classLoader" type="ClassLoader" line="66"/>
                <declaration name="s" type="Set&amp;lt;String&amp;gt;" line="72"/>
            </method>
            <method name="annotateProxyClass" type="void" line="76">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <anonymous_class line="77">
                    <method name="run" type="Object" line="78"/>
                </anonymous_class>
                <declaration name="classLoader" type="ClassLoader" line="77"/>
                <declaration name="interfaces" type="Class[]" line="83"/>
                <declaration name="s" type="Set&amp;lt;String&amp;gt;" line="84"/>
                <scope line="85"/>
            </method>
            <method name="getClassLoaderMap" type="Map&lt;Set&lt;String&gt;,ClassLoader&gt;" line="90"/>
        </class>
        <class name="ClassLoaderObjectInputStream" line="94">
            <extends class="ObjectInputStream"/>
            <declaration name="map" type="Map&amp;lt;Set&amp;lt;String&amp;gt;,ClassLoader&amp;gt;" line="95"/>
            <method name="ClassLoaderObjectInputStream" type="constructor" line="96">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="map" type="Map&lt;Set&lt;String&gt;,ClassLoader&gt;"/>
                </params>
                <scope line="98"/>
            </method>
            <method name="resolveClass" type="Class&lt;?&gt;" line="103">
                <params>
                    <param name="classDesc" type="ObjectStreamClass"/>
                </params>
                <declaration name="className" type="String" line="104"/>
                <declaration name="s" type="Set&amp;lt;String&amp;gt;" line="105"/>
                <declaration name="classLoader" type="ClassLoader" line="107"/>
            </method>
            <method name="resolveProxyClass" type="Class&lt;?&gt;" line="110">
                <params>
                    <param name="interfaces" type="String[]"/>
                </params>
                <declaration name="s" type="Set&amp;lt;String&amp;gt;" line="111"/>
                <scope line="112"/>
                <declaration name="classLoader" type="ClassLoader" line="115"/>
                <declaration name="nonPublicLoader" type="ClassLoader" line="116"/>
                <declaration name="hasNonPublicInterface" type="boolean" line="117"/>
                <declaration name="classObjs" type="Class[]" line="118"/>
                <scope line="119">
                    <declaration name="cl" type="Class" line="120"/>
                    <scope line="121">
                        <scope line="122">
                            <scope line="123"/>
                        </scope>
                        <scope line="127"/>
                    </scope>
                </scope>
                <scope line="134"/>
                <scope line="137"/>
            </method>
        </class>
    </source>