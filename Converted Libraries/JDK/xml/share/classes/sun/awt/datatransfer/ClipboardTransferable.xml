<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.datatransfer">
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.io.IOException"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <class name="ClipboardTransferable" line="9">
            <implements interface="Transferable"/>
            <javadoc line="9">
                Reads all of the data from the system Clipboard which the data transfer
                  subsystem knows how to translate. This includes all text data, File Lists,
                  Serializable objects, Remote objects, and properly registered, arbitrary
                  data as InputStreams. The data is stored in byte format until requested
                  by client code. At that point, the data is converted, if necessary, into
                  the proper format to deliver to the application.
                  This hybrid pre-fetch/delayed-rendering approach allows us to circumvent
                  the API restriction that client code cannot lock the Clipboard to discover
                  its formats before requesting data in a particular format, while avoiding
                  the overhead of fully rendering all data ahead of time.                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Danila Sinopalnikov                    
                </author>
                <since>
                    1.4 (appeared in modified form as FullyRenderedTransferable in 1.3.1)                    
                </since>
            </javadoc>
            <declaration name="flavorsToData" type="HashMap" line="25"/>
            <declaration name="flavors" type="DataFlavor[]" line="26"/>
            <class name="DataFactory" line="27">
                <declaration name="format" type="long" line="28"/>
                <declaration name="data" type="byte[]" line="29"/>
                <method name="DataFactory" type="constructor" line="30">
                    <params>
                        <param name="format" type="long"/>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <method name="getTransferData" type="Object" line="34">
                    <params>
                        <param name="flavor" type="DataFlavor"/>
                    </params>
                </method>
            </class>
            <method name="ClipboardTransferable" type="constructor" line="38">
                <params>
                    <param name="clipboard" type="SunClipboard"/>
                </params>
                <scope line="40">
                    <declaration name="formats" type="long[]" line="41"/>
                    <scope line="42">
                        <declaration name="cached_data" type="HashMap" line="43"/>
                        <declaration name="flavorsForFormats" type="Map" line="44"/>
                        <scope line="45">
                            <declaration name="flavor" type="DataFlavor" line="46"/>
                            <declaration name="lFormat" type="Long" line="47"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="53"/>
            </method>
            <method name="fetchOneFlavor" type="boolean" line="57">
                <params>
                    <param name="clipboard" type="SunClipboard"/>
                    <param name="flavor" type="DataFlavor"/>
                    <param name="lFormat" type="Long"/>
                    <param name="cached_data" type="HashMap"/>
                </params>
                <scope line="58">
                    <declaration name="format" type="long" line="59"/>
                    <declaration name="data" type="Object" line="60"/>
                    <scope line="61">
                        <scope line="62"/>
                        <scope line="65"/>
                        <scope line="68"/>
                    </scope>
                    <scope line="73"/>
                    <scope line="76"/>
                    <scope line="80"/>
                </scope>
            </method>
            <method name="getTransferDataFlavors" type="DataFlavor[]" line="87"/>
            <method name="isDataFlavorSupported" type="boolean" line="90">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
            </method>
            <method name="getTransferData" type="Object" line="93">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <scope line="94"/>
                <declaration name="ret" type="Object" line="97"/>
                <scope line="98"/>
                <scope line="101">
                    <declaration name="factory" type="DataFactory" line="102"/>
                </scope>
            </method>
        </class>
    </source>