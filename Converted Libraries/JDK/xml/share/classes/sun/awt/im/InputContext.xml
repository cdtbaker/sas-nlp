<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.im">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.AWTKeyStroke"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event.ComponentEvent"/>
        <import package="java.awt.event.ComponentListener"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.awt.im.spi.InputMethod"/>
        <import package="java.lang.Character.Subset"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="java.util.prefs.BackingStoreException"/>
        <import package="java.util.prefs.Preferences"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="InputContext" line="31">
            <extends class="java.awt.im.InputContext"/>
            <implements interface="ComponentListener"/>
            <implements interface="WindowListener"/>
            <javadoc line="31">
                This InputContext class contains parts of the implementation of
                  java.text.im.InputContext. These parts have been moved
                  here to avoid exposing protected members that are needed by the
                  subclass InputMethodContext.                
                <see>
                    java.awt.im.InputContext                    
                </see>
                <author>
                    JavaSoft Asia/Pacific                    
                </author>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="40"/>
            <declaration name="inputMethodLocator" type="InputMethodLocator" line="41"/>
            <declaration name="inputMethod" type="InputMethod" line="42"/>
            <declaration name="inputMethodCreationFailed" type="boolean" line="43"/>
            <declaration name="usedInputMethods" type="HashMap" line="44"/>
            <declaration name="currentClientComponent" type="Component" line="45"/>
            <declaration name="awtFocussedComponent" type="Component" line="46"/>
            <declaration name="isInputMethodActive" type="boolean" line="47"/>
            <declaration name="characterSubsets" type="Subset[]" line="48"/>
            <declaration name="compositionAreaHidden" type="boolean" line="49"/>
            <declaration name="inputMethodWindowContext" type="InputContext" line="50"/>
            <declaration name="previousInputMethod" type="InputMethod" line="51"/>
            <declaration name="clientWindowNotificationEnabled" type="boolean" line="52"/>
            <declaration name="clientWindowListened" type="Window" line="53"/>
            <declaration name="clientWindowLocation" type="Rectangle" line="54"/>
            <declaration name="perInputMethodState" type="HashMap" line="55"/>
            <declaration name="inputMethodSelectionKey" type="AWTKeyStroke" line="56"/>
            <declaration name="inputMethodSelectionKeyInitialized" type="boolean" line="57"/>
            <declaration name="inputMethodSelectionKeyPath" type="String" line="58"/>
            <declaration name="inputMethodSelectionKeyCodeName" type="String" line="59"/>
            <declaration name="inputMethodSelectionKeyModifiersName" type="String" line="60"/>
            <javadoc line="61">
                Constructs an InputContext.                
            </javadoc>
            <method name="InputContext" type="constructor" line="64">
                <declaration name="imm" type="InputMethodManager" line="65"/>
                <scope line="66">
                    <scope line="67">
                        <scope line="69"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="76">
                @see java.awt.im.InputContext#selectInputMethod                
                <exception>
                    NullPointerException when the locale is null.                    
                </exception>
            </javadoc>
            <method name="selectInputMethod" type="boolean" line="80">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="81"/>
                <scope line="84">
                    <scope line="85"/>
                </scope>
                <scope line="89">
                    <scope line="90"/>
                </scope>
                <declaration name="newLocator" type="InputMethodLocator" line="95"/>
                <scope line="96"/>
                <scope line="100">
                    <scope line="102"/>
                </scope>
            </method>
            <javadoc line="108">
                @see java.awt.im.InputContext#getLocale                
            </javadoc>
            <method name="getLocale" type="Locale" line="111">
                <scope line="112"/>
                <scope line="115"/>
                <scope line="118"/>
            </method>
            <javadoc line="122">
                @see java.awt.im.InputContext#setCharacterSubsets                
            </javadoc>
            <method name="setCharacterSubsets" type="void" line="125">
                <params>
                    <param name="subsets" type="Subset[]"/>
                </params>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                @see java.awt.im.InputContext#reconvert                
                <since>
                    1.3                    
                </since>
                <exception>
                    UnsupportedOperationException when input method is null                    
                </exception>
            </javadoc>
            <method name="reconvert" type="void" line="142">
                <declaration name="inputMethod" type="InputMethod" line="143"/>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                @see java.awt.im.InputContext#dispatchEvent                
            </javadoc>
            <method name="dispatchEvent" type="void" line="152">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <scope line="153"/>
                <scope line="156">
                    <declaration name="opposite" type="Component" line="157"/>
                    <scope line="158"/>
                </scope>
                <declaration name="inputMethod" type="InputMethod" line="162"/>
                <declaration name="id" type="int" line="163"/>
                <scope line="172"/>
                <scope line="177"/>
            </method>
            <javadoc line="182">
                Handles focus gained events for any component that&apos;s using
                  this input context.
                  These events are generated by AWT when the keyboard focus
                  moves to a component.
                  Besides actual client components, the source components
                  may also be the composition area or any component in an
                  input method window.
                  &lt;p&gt;
                  When handling the focus event for a client component, this
                  method checks whether the input context was previously
                  active for a different client component, and if so, calls
                  endComposition for the previous client component.                
                <param>
                    source the component gaining the focus                    
                </param>
            </javadoc>
            <method name="focusGained" type="void" line="197">
                <params>
                    <param name="source" type="Component"/>
                </params>
                <scope line="198">
                    <scope line="199">
                        <scope line="200"/>
                        <scope line="202"/>
                        <scope line="204">
                            <scope line="205"/>
                            <scope line="208">
                                <scope line="209">
                                    <scope line="210"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="220"/>
                        <scope line="223"/>
                        <declaration name="inputContext" type="InputMethodContext" line="226"/>
                        <scope line="227">
                            <declaration name="req" type="InputMethodRequests" line="228"/>
                            <scope line="229"/>
                            <scope line="232"/>
                        </scope>
                        <scope line="236"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="243">
                Activates the current input method of this input context, and grabs
                  the composition area for use by this input context.
                  If updateCompositionArea is true, the text in the composition area
                  is updated (set to false if the text is going to change immediately
                  to avoid screen flicker).                
            </javadoc>
            <method name="activateInputMethod" type="void" line="250">
                <params>
                    <param name="updateCompositionArea" type="boolean"/>
                </params>
                <scope line="251"/>
                <scope line="255">
                    <scope line="256"/>
                    <scope line="261"/>
                    <scope line="266">
                        <declaration name="state" type="Boolean" line="267"/>
                        <scope line="268"/>
                    </scope>
                    <scope line="272">
                        <scope line="273"/>
                        <scope line="276">
                            <scope line="277"/>
                        </scope>
                    </scope>
                    <scope line="282">
                        <scope line="283"/>
                    </scope>
                </scope>
            </method>
            <method name="getComponentWindow" type="Window" line="291">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="292">
                    <scope line="293"/>
                    <scope line="296"/>
                    <scope line="299"/>
                </scope>
            </method>
            <javadoc line="304">
                Handles focus lost events for any component that&apos;s using
                  this input context.
                  These events are generated by AWT when the keyboard focus
                  moves away from a component.
                  Besides actual client components, the source components
                  may also be the composition area or any component in an
                  input method window.                
                <param>
                    source the component losing the focus                    
                </param>
                <isTemporary>
                    whether the focus change is temporary                    
                </isTemporary>
            </javadoc>
            <method name="focusLost" type="void" line="315">
                <params>
                    <param name="source" type="Component"/>
                    <param name="isTemporary" type="boolean"/>
                </params>
                <scope line="316">
                    <scope line="317">
                        <scope line="318"/>
                        <scope line="322"/>
                        <declaration name="inputContext" type="InputMethodContext" line="325"/>
                        <scope line="326"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="333">
                Checks the key event is the input method selection key or not.                
            </javadoc>
            <method name="checkInputMethodSelectionKey" type="boolean" line="336">
                <params>
                    <param name="event" type="KeyEvent"/>
                </params>
                <scope line="337">
                    <declaration name="aKeyStroke" type="AWTKeyStroke" line="338"/>
                </scope>
                <scope line="341"/>
            </method>
            <method name="deactivateInputMethod" type="void" line="345">
                <params>
                    <param name="isTemporary" type="boolean"/>
                </params>
                <scope line="347"/>
            </method>
            <javadoc line="353">
                Switches from the current input method to the one described by newLocator.
                  The current input method, if any, is asked to end composition, deactivated,
                  and saved for future use. The newLocator is made the current locator. If
                  the input context is active, an input method instance for the new locator
                  is obtained; otherwise this is deferred until required.                
            </javadoc>
            <method name="changeInputMethod" type="void" line="360">
                <params>
                    <param name="newLocator" type="InputMethodLocator"/>
                </params>
                <scope line="361"/>
                <scope line="366">
                    <declaration name="newLocale" type="Locale" line="367"/>
                    <scope line="368">
                        <scope line="369"/>
                    </scope>
                </scope>
                <declaration name="savedLocale" type="Locale" line="376"/>
                <declaration name="wasInputMethodActive" type="boolean" line="377"/>
                <declaration name="wasCompositionEnabledSupported" type="boolean" line="378"/>
                <declaration name="wasCompositionEnabled" type="boolean" line="379"/>
                <scope line="380">
                    <scope line="381"/>
                    <scope line="385"/>
                    <scope line="387">
                        <scope line="388"/>
                        <scope line="393"/>
                    </scope>
                    <scope line="398"/>
                    <scope line="401"/>
                    <scope line="407"/>
                </scope>
                <scope line="415"/>
                <scope line="420">
                    <scope line="422"/>
                </scope>
                <scope line="427">
                    <scope line="429">
                        <scope line="430"/>
                        <scope line="433"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="438">
                Returns the client component.                
            </javadoc>
            <method name="getClientComponent" type="Component" line="441"/>
            <javadoc line="444">
                @see java.awt.im.InputContext#removeNotify                
                <exception>
                    NullPointerException when the component is null.                    
                </exception>
            </javadoc>
            <method name="removeNotify" type="void" line="448">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="449"/>
                <scope line="452">
                    <scope line="453"/>
                </scope>
                <scope line="458"/>
                <scope line="461">
                    <scope line="462"/>
                    <scope line="466"/>
                    <scope line="470"/>
                    <scope line="473"/>
                    <scope line="476">
                        <anonymous_class line="477">
                            <method name="run" type="void" line="478"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="486">
                @see java.awt.im.InputContext#dispose                
                <exception>
                    IllegalStateException when the currentClientComponent is not null                    
                </exception>
            </javadoc>
            <method name="dispose" type="void" line="490">
                <scope line="491"/>
                <scope line="494">
                    <scope line="495"/>
                    <scope line="499"/>
                    <scope line="502">
                        <scope line="503"/>
                    </scope>
                    <scope line="509"/>
                </scope>
                <scope line="515">
                    <declaration name="iterator" type="Iterator" line="516"/>
                    <scope line="518"/>
                </scope>
            </method>
            <javadoc line="526">
                @see java.awt.im.InputContext#getInputMethodControlObject                
            </javadoc>
            <method name="getInputMethodControlObject" type="Object" line="529">
                <declaration name="inputMethod" type="InputMethod" line="530"/>
                <scope line="531"/>
                <scope line="534"/>
            </method>
            <javadoc line="538">
                @see java.awt.im.InputContext#setCompositionEnabled(boolean)                
                <exception>
                    UnsupportedOperationException when input method is null                    
                </exception>
            </javadoc>
            <method name="setCompositionEnabled" type="void" line="542">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
                <declaration name="inputMethod" type="InputMethod" line="543"/>
                <scope line="544"/>
            </method>
            <javadoc line="549">
                @see java.awt.im.InputContext#isCompositionEnabled                
                <exception>
                    UnsupportedOperationException when input method is null                    
                </exception>
            </javadoc>
            <method name="isCompositionEnabled" type="boolean" line="553">
                <declaration name="inputMethod" type="InputMethod" line="554"/>
                <scope line="555"/>
            </method>
            <javadoc line="560">
                @return a string with information about the current input method.                
                <exception>
                    UnsupportedOperationException when input method is null                    
                </exception>
            </javadoc>
            <method name="getInputMethodInfo" type="String" line="564">
                <declaration name="inputMethod" type="InputMethod" line="565"/>
                <scope line="566"/>
                <declaration name="inputMethodInfo" type="String" line="569"/>
                <scope line="570"/>
                <scope line="573"/>
                <scope line="576"/>
            </method>
            <javadoc line="581">
                Turns off the native IM. The native IM is diabled when
                  the deactive method of InputMethod is called. It is
                  delayed until the active method is called on a different
                  peer component. This method is provided to explicitly disable
                  the native IM.                
            </javadoc>
            <method name="disableNativeIM" type="void" line="588">
                <declaration name="inputMethod" type="InputMethod" line="589"/>
                <scope line="590"/>
            </method>
            <method name="getInputMethod" type="InputMethod" line="594">
                <scope line="595"/>
                <scope line="598"/>
            </method>
            <javadoc line="604">
                Returns an instance of the input method described by
                  the current input method locator. This may be an input
                  method that was previously used and switched out of,
                  or a new instance. The locale, character subsets, and
                  input method context of the input method are set.
                  The inputMethodCreationFailed field is set to true if the
                  instantiation failed.                
                <return>
                    an InputMethod instance                    
                </return>
                <see>
                    java.awt.im.spi.InputMethod#setInputMethodContext                    
                </see>
                <see>
                    java.awt.im.spi.InputMethod#setLocale                    
                </see>
                <see>
                    java.awt.im.spi.InputMethod#setCharacterSubsets                    
                </see>
            </javadoc>
            <method name="getInputMethodInstance" type="InputMethod" line="617">
                <declaration name="locator" type="InputMethodLocator" line="618"/>
                <scope line="619"/>
                <declaration name="locale" type="Locale" line="623"/>
                <declaration name="inputMethodInstance" type="InputMethod" line="624"/>
                <scope line="625">
                    <scope line="627">
                        <scope line="628"/>
                        <declaration name="state" type="Boolean" line="632"/>
                        <scope line="633"/>
                    </scope>
                </scope>
                <scope line="640">
                    <scope line="642"/>
                </scope>
                <scope line="648">
                    <scope line="651"/>
                </scope>
                <scope line="655"/>
            </method>
            <method name="logCreationFailed" type="void" line="662">
                <params>
                    <param name="throwable" type="Throwable"/>
                </params>
                <declaration name="errorTextFormat" type="String" line="663"/>
                <declaration name="args" type="Object[]" line="664"/>
                <declaration name="mf" type="MessageFormat" line="665"/>
                <declaration name="logger" type="PlatformLogger" line="666"/>
            </method>
            <method name="getInputMethodLocator" type="InputMethodLocator" line="669">
                <scope line="670"/>
            </method>
            <javadoc line="675">
                @see java.awt.im.InputContext#endComposition                
            </javadoc>
            <method name="endComposition" type="void" line="678">
                <scope line="679"/>
            </method>
            <javadoc line="683">
                @see java.awt.im.spi.InputMethodContext#enableClientWindowNotification                
            </javadoc>
            <method name="enableClientWindowNotification" type="void" line="686">
                <params>
                    <param name="requester" type="InputMethod"/>
                    <param name="enable" type="boolean"/>
                </params>
                <scope line="687">
                    <scope line="688"/>
                </scope>
                <scope line="694"/>
                <scope line="698">
                    <scope line="699"/>
                    <scope line="702"/>
                </scope>
                <scope line="707">
                    <scope line="708"/>
                </scope>
            </method>
            <method name="notifyClientWindowChange" type="void" line="713">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <scope line="714"/>
                <scope line="717"/>
                <declaration name="location" type="Rectangle" line="722"/>
                <scope line="723"/>
            </method>
            <method name="addClientWindowListeners" type="void" line="728">
                <declaration name="client" type="Component" line="729"/>
                <scope line="730"/>
                <declaration name="window" type="Window" line="733"/>
                <scope line="734"/>
            </method>
            <method name="removeClientWindowListeners" type="void" line="741"/>
            <javadoc line="746">
                Returns true if listeners have been set up for client window
                  change notification.                
            </javadoc>
            <method name="addedClientWindowListeners" type="boolean" line="750"/>
            <method name="componentResized" type="void" line="753">
                <params>
                    <param name="e" type="ComponentEvent"/>
                </params>
            </method>
            <method name="componentMoved" type="void" line="756">
                <params>
                    <param name="e" type="ComponentEvent"/>
                </params>
            </method>
            <method name="componentShown" type="void" line="759">
                <params>
                    <param name="e" type="ComponentEvent"/>
                </params>
            </method>
            <method name="componentHidden" type="void" line="762">
                <params>
                    <param name="e" type="ComponentEvent"/>
                </params>
            </method>
            <method name="windowOpened" type="void" line="765">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
            </method>
            <method name="windowClosing" type="void" line="767">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
            </method>
            <method name="windowClosed" type="void" line="769">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
            </method>
            <method name="windowIconified" type="void" line="771">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
            </method>
            <method name="windowDeiconified" type="void" line="774">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
            </method>
            <method name="windowActivated" type="void" line="777">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
            </method>
            <method name="windowDeactivated" type="void" line="779">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
            </method>
            <javadoc line="781">
                Initializes the input method selection key definition in preference trees                
            </javadoc>
            <method name="initializeInputMethodSelectionKey" type="void" line="784">
                <anonymous_class line="785">
                    <method name="run" type="Object" line="786">
                        <declaration name="root" type="Preferences" line="787"/>
                        <scope line="789"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getInputMethodSelectionKeyStroke" type="AWTKeyStroke" line="798">
                <params>
                    <param name="root" type="Preferences"/>
                </params>
                <scope line="799">
                    <scope line="800">
                        <declaration name="node" type="Preferences" line="801"/>
                        <declaration name="keyCode" type="int" line="802"/>
                        <scope line="803">
                            <declaration name="modifiers" type="int" line="804"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="809"/>
            </method>
        </class>
    </source>