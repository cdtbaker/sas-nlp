<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.im">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.event.InputMethodListener"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="javax.swing.JFrame"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.border.LineBorder"/>
        <class name="CompositionArea" line="51">
            <extends class="JPanel"/>
            <comment line="60">
                This class is final due to the 6607310 fix. Refer to the CR for details.                
            </comment>
            <comment line="118">
                returns a 0-width rectangle                
            </comment>
            <comment line="152">
                shows/hides the composition window                
            </comment>
            <comment line="157">
                returns true if composition area is visible                
            </comment>
            <comment line="162">
                workaround for the Solaris focus lost problem                
            </comment>
            <comment line="169">
                InputMethodListener methods - just forward to the current handler                
            </comment>
            <comment line="284">
                support for InputMethodRequests methods                
            </comment>
            <comment line="308">
                Disables or enables decorations of the composition window                
            </comment>
            <implements interface="InputMethodListener"/>
            <javadoc line="51">
                A composition area is used to display text that&apos;s being composed
                  using an input method in its own user interface environment,
                  typically in a root window.                
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <declaration name="handler" type="CompositionAreaHandler" line="62"/>
            <declaration name="composedTextLayout" type="TextLayout" line="64"/>
            <declaration name="caret" type="TextHitInfo" line="65"/>
            <declaration name="compositionWindow" type="JFrame" line="66"/>
            <declaration name="TEXT_ORIGIN_X" type="int" line="67"/>
            <declaration name="TEXT_ORIGIN_Y" type="int" line="68"/>
            <declaration name="PASSIVE_WIDTH" type="int" line="69"/>
            <declaration name="WIDTH_MARGIN" type="int" line="70"/>
            <declaration name="HEIGHT_MARGIN" type="int" line="71"/>
            <method name="CompositionArea" type="constructor" line="73">
                <comment line="74">
                    create composition window with localized title                    
                </comment>
                <comment line="84">
                    if we get the focus, we still want to let the client&apos;s                    
                </comment>
                <comment line="85">
                    input context handle the event                    
                </comment>
                <declaration name="windowTitle" type="String" line="75"/>
                <declaration name="windowSize" type="Dimension" line="94"/>
                <declaration name="screenSize" type="Dimension" line="95"/>
            </method>
            <javadoc line="101">
                Sets the composition area handler that currently owns this
                  composition area, and its input context.                
            </javadoc>
            <method name="setHandlerInfo" type="void" line="105">
                <params>
                    <param name="handler" type="CompositionAreaHandler"/>
                    <param name="inputContext" type="InputContext"/>
                </params>
            </method>
            <javadoc line="110">
                @see java.awt.Component#getInputMethodRequests                
            </javadoc>
            <method name="getInputMethodRequests" type="InputMethodRequests" line="113"/>
            <method name="getCaretRectangle" type="Rectangle" line="118">
                <params>
                    <param name="caret" type="TextHitInfo"/>
                </params>
                <declaration name="caretLocation" type="int" line="119"/>
                <declaration name="layout" type="TextLayout" line="120"/>
                <scope line="121"/>
                <declaration name="g" type="Graphics" line="124"/>
                <declaration name="metrics" type="FontMetrics" line="125"/>
                <scope line="126"/>
                <scope line="128"/>
            </method>
            <method name="paint" type="void" line="136">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="layout" type="TextLayout" line="139"/>
                <scope line="140"/>
                <scope line="143">
                    <declaration name="rectangle" type="Rectangle" line="144"/>
                </scope>
            </method>
            <method name="setCompositionAreaVisible" type="void" line="152">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
            </method>
            <method name="isCompositionAreaVisible" type="boolean" line="157"/>
            <class name="FrameWindowAdapter" line="162">
                <extends class="WindowAdapter"/>
                <method name="windowActivated" type="void" line="163">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <method name="inputMethodTextChanged" type="void" line="169">
                <params>
                    <param name="event" type="InputMethodEvent"/>
                </params>
            </method>
            <method name="caretPositionChanged" type="void" line="173">
                <params>
                    <param name="event" type="InputMethodEvent"/>
                </params>
            </method>
            <javadoc line="177">
                Sets the text and caret to be displayed in this composition area.
                  Shows the window if it contains text, hides it if not.                
            </javadoc>
            <method name="setText" type="void" line="181">
                <params>
                    <param name="composedText" type="AttributedCharacterIterator"/>
                    <param name="caret" type="TextHitInfo"/>
                </params>
                <comment line="184">
                    there&apos;s no composed text to display, so hide the window                    
                </comment>
                <comment line="188">
                    since we have composed text, make sure the window is shown.
                    This is necessary to get a valid graphics object. See 6181385.                    
                </comment>
                <comment line="210">
                    Resize the composition area to just fit the text.                    
                </comment>
                <comment line="216">
                    If it&apos;s a passive client, set the width always to PASSIVE_WIDTH (480px)                    
                </comment>
                <comment line="224">
                    show the composed text                    
                </comment>
                <scope line="183"/>
                <scope line="187">
                    <scope line="191"/>
                    <declaration name="g" type="Graphics" line="195"/>
                    <scope line="197"/>
                    <scope line="201">
                        <declaration name="context" type="FontRenderContext" line="204"/>
                        <declaration name="bounds" type="Rectangle2D" line="206"/>
                        <declaration name="metrics" type="FontMetrics" line="211"/>
                        <declaration name="maxCharBoundsRec" type="Rectangle2D" line="212"/>
                        <declaration name="newHeight" type="int" line="213"/>
                        <declaration name="newFrameHeight" type="int" line="214"/>
                        <declaration name="req" type="InputMethodRequests" line="217"/>
                        <declaration name="newWidth" type="int" line="218"/>
                        <declaration name="newFrameWidth" type="int" line="219"/>
                    </scope>
                    <scope line="227"/>
                </scope>
            </method>
            <javadoc line="233">
                Sets the caret to be displayed in this composition area.
                  The text is not changed.                
            </javadoc>
            <method name="setCaret" type="void" line="237">
                <params>
                    <param name="caret" type="TextHitInfo"/>
                </params>
                <scope line="239">
                    <declaration name="g" type="Graphics" line="240"/>
                    <scope line="241"/>
                    <scope line="243"/>
                </scope>
            </method>
            <javadoc line="249">
                Positions the composition window near (usually below) the
                  insertion point in the client component if the client
                  component is an active client (below-the-spot input).                
            </javadoc>
            <method name="updateWindowLocation" type="void" line="254">
                <comment line="257">
                    not an active client                    
                </comment>
                <declaration name="req" type="InputMethodRequests" line="255"/>
                <scope line="256"/>
                <declaration name="windowLocation" type="Point" line="261"/>
                <declaration name="caretRect" type="Rectangle" line="263"/>
                <declaration name="screenSize" type="Dimension" line="264"/>
                <declaration name="windowSize" type="Dimension" line="265"/>
                <declaration name="SPACING" type="int" line="266"/>
                <scope line="268"/>
                <scope line="270"/>
                <scope line="274"/>
                <scope line="276"/>
            </method>
            <method name="getTextLocation" type="Rectangle" line="284">
                <params>
                    <param name="offset" type="TextHitInfo"/>
                </params>
                <declaration name="rectangle" type="Rectangle" line="285"/>
                <declaration name="location" type="Point" line="286"/>
            </method>
            <method name="getLocationOffset" type="TextHitInfo" line="291">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="layout" type="TextLayout" line="292"/>
                <scope line="293"/>
                <scope line="295">
                    <declaration name="location" type="Point" line="296"/>
                    <scope line="299"/>
                    <scope line="301"/>
                </scope>
            </method>
            <method name="setCompositionAreaUndecorated" type="void" line="308">
                <params>
                    <param name="setUndecorated" type="boolean"/>
                </params>
                <scope line="309"/>
            </method>
        </class>
    </source>