<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.im">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.event.InputMethodListener"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="javax.swing.JFrame"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.border.LineBorder"/>
        <class name="CompositionArea" line="24">
            <extends class="JPanel"/>
            <implements interface="InputMethodListener"/>
            <javadoc line="24">
                A composition area is used to display text that&apos;s being composed
                  using an input method in its own user interface environment,
                  typically in a root window.                
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <declaration name="handler" type="CompositionAreaHandler" line="31"/>
            <declaration name="composedTextLayout" type="TextLayout" line="32"/>
            <declaration name="caret" type="TextHitInfo" line="33"/>
            <declaration name="compositionWindow" type="JFrame" line="34"/>
            <declaration name="TEXT_ORIGIN_X" type="int" line="35"/>
            <declaration name="TEXT_ORIGIN_Y" type="int" line="36"/>
            <declaration name="PASSIVE_WIDTH" type="int" line="37"/>
            <declaration name="WIDTH_MARGIN" type="int" line="38"/>
            <declaration name="HEIGHT_MARGIN" type="int" line="39"/>
            <method name="CompositionArea" type="constructor" line="40">
                <declaration name="windowTitle" type="String" line="41"/>
                <declaration name="windowSize" type="Dimension" line="54"/>
                <declaration name="screenSize" type="Dimension" line="55"/>
            </method>
            <javadoc line="59">
                Sets the composition area handler that currently owns this
                  composition area, and its input context.                
            </javadoc>
            <method name="setHandlerInfo" type="void" line="63">
                <params>
                    <param name="handler" type="CompositionAreaHandler"/>
                    <param name="inputContext" type="InputContext"/>
                </params>
            </method>
            <javadoc line="67">
                @see java.awt.Component#getInputMethodRequests                
            </javadoc>
            <method name="getInputMethodRequests" type="InputMethodRequests" line="70"/>
            <method name="getCaretRectangle" type="Rectangle" line="73">
                <params>
                    <param name="caret" type="TextHitInfo"/>
                </params>
                <declaration name="caretLocation" type="int" line="74"/>
                <declaration name="layout" type="TextLayout" line="75"/>
                <scope line="76"/>
                <declaration name="g" type="Graphics" line="79"/>
                <declaration name="metrics" type="FontMetrics" line="80"/>
                <scope line="81"/>
                <scope line="84"/>
            </method>
            <method name="paint" type="void" line="89">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="layout" type="TextLayout" line="92"/>
                <scope line="93"/>
                <scope line="96">
                    <declaration name="rectangle" type="Rectangle" line="97"/>
                </scope>
            </method>
            <method name="setCompositionAreaVisible" type="void" line="103">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
            </method>
            <method name="isCompositionAreaVisible" type="boolean" line="106"/>
            <class name="FrameWindowAdapter" line="109">
                <extends class="WindowAdapter"/>
                <method name="windowActivated" type="void" line="110">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <method name="inputMethodTextChanged" type="void" line="114">
                <params>
                    <param name="event" type="InputMethodEvent"/>
                </params>
            </method>
            <method name="caretPositionChanged" type="void" line="117">
                <params>
                    <param name="event" type="InputMethodEvent"/>
                </params>
            </method>
            <javadoc line="120">
                Sets the text and caret to be displayed in this composition area.
                  Shows the window if it contains text, hides it if not.                
            </javadoc>
            <method name="setText" type="void" line="124">
                <params>
                    <param name="composedText" type="AttributedCharacterIterator"/>
                    <param name="caret" type="TextHitInfo"/>
                </params>
                <scope line="126"/>
                <scope line="130">
                    <scope line="131"/>
                    <declaration name="g" type="Graphics" line="134"/>
                    <scope line="135"/>
                    <scope line="138">
                        <declaration name="context" type="FontRenderContext" line="140"/>
                        <declaration name="bounds" type="Rectangle2D" line="142"/>
                        <declaration name="metrics" type="FontMetrics" line="144"/>
                        <declaration name="maxCharBoundsRec" type="Rectangle2D" line="145"/>
                        <declaration name="newHeight" type="int" line="146"/>
                        <declaration name="newFrameHeight" type="int" line="147"/>
                        <declaration name="req" type="InputMethodRequests" line="148"/>
                        <declaration name="newWidth" type="int" line="149"/>
                        <declaration name="newFrameWidth" type="int" line="150"/>
                    </scope>
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="160">
                Sets the caret to be displayed in this composition area.
                  The text is not changed.                
            </javadoc>
            <method name="setCaret" type="void" line="164">
                <params>
                    <param name="caret" type="TextHitInfo"/>
                </params>
                <scope line="166">
                    <declaration name="g" type="Graphics" line="167"/>
                    <scope line="168"/>
                    <scope line="171"/>
                </scope>
            </method>
            <javadoc line="176">
                Positions the composition window near (usually below) the
                  insertion point in the client component if the client
                  component is an active client (below-the-spot input).                
            </javadoc>
            <method name="updateWindowLocation" type="void" line="181">
                <declaration name="req" type="InputMethodRequests" line="182"/>
                <scope line="183"/>
                <declaration name="windowLocation" type="Point" line="186"/>
                <declaration name="caretRect" type="Rectangle" line="187"/>
                <declaration name="screenSize" type="Dimension" line="188"/>
                <declaration name="windowSize" type="Dimension" line="189"/>
                <declaration name="SPACING" type="int" line="190"/>
                <scope line="191"/>
                <scope line="194"/>
                <scope line="197"/>
                <scope line="200"/>
            </method>
            <method name="getTextLocation" type="Rectangle" line="205">
                <params>
                    <param name="offset" type="TextHitInfo"/>
                </params>
                <declaration name="rectangle" type="Rectangle" line="206"/>
                <declaration name="location" type="Point" line="207"/>
            </method>
            <method name="getLocationOffset" type="TextHitInfo" line="211">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="layout" type="TextLayout" line="212"/>
                <scope line="213"/>
                <scope line="216">
                    <declaration name="location" type="Point" line="217"/>
                    <scope line="220"/>
                    <scope line="223"/>
                </scope>
            </method>
            <method name="setCompositionAreaUndecorated" type="void" line="228">
                <params>
                    <param name="setUndecorated" type="boolean"/>
                </params>
                <scope line="229"/>
            </method>
        </class>
    </source>