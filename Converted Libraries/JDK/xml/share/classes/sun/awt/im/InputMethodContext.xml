<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.im">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.awt.im.spi.InputMethod"/>
        <import package="java.security.AccessController"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.text.AttributedString"/>
        <import package="java.text.CharacterIterator"/>
        <import package="javax.swing.JFrame"/>
        <import package="sun.awt.InputMethodSupport"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="InputMethodContext" line="49">
            <extends class="sun.awt.im.InputContext"/>
            <comment line="65">
                Creation of the context&apos;s composition area handler is
                 delayed until we really need a composition area.                
            </comment>
            <comment line="107">
                implements java.awt.im.spi.InputMethodContext.dispatchInputMethodEvent                
            </comment>
            <comment line="336">
                implements java.awt.im.spi.InputMethodContext.createInputMethodWindow                
            </comment>
            <comment line="342">
                implements java.awt.im.spi.InputMethodContext.createInputMethodJFrame                
            </comment>
            <implements interface="java.awt.im.spi.InputMethodContext"/>
            <javadoc line="49">
                The InputMethodContext class provides methods that input methods
                  can use to communicate with their client components.
                  It is a subclass of InputContext, which provides methods for use by
                  components.                
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <declaration name="dispatchingCommittedText" type="boolean" line="62"/>
            <declaration name="compositionAreaHandler" type="CompositionAreaHandler" line="66"/>
            <declaration name="compositionAreaHandlerLock" type="Object" line="67"/>
            <declaration name="belowTheSpotInputRequested" type="boolean" line="69"/>
            <declaration name="inputMethodSupportsBelowTheSpot" type="boolean" line="70"/>
            <scope line="72">
                <declaration name="inputStyle" type="String" line="75"/>
                <scope line="78"/>
            </scope>
            <javadoc line="85">
                Constructs an InputMethodContext.                
            </javadoc>
            <method name="InputMethodContext" type="constructor" line="88"/>
            <method name="setInputMethodSupportsBelowTheSpot" type="void" line="92">
                <params>
                    <param name="supported" type="boolean"/>
                </params>
            </method>
            <method name="useBelowTheSpotInput" type="boolean" line="96"/>
            <method name="haveActiveClient" type="boolean" line="100">
                <declaration name="client" type="Component" line="101"/>
            </method>
            <method name="dispatchInputMethodEvent" type="void" line="109">
                <params>
                    <param name="id" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                </params>
                <comment line="111">
                    We need to record the client component as the source so
                     that we have correct information if we later have to break up this
                     event into key events.                    
                </comment>
                <declaration name="source" type="Component" line="113"/>
                <scope line="116">
                    <declaration name="event" type="InputMethodEvent" line="117"/>
                    <scope line="120"/>
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="128">
                Dispatches committed text to a client component.
                  Called by composition window.                
                <param>
                    client The component that the text should get dispatched to.                    
                </param>
                <param>
                    text The iterator providing access to the committed
                      (and possible composed) text.                    
                </param>
                <param>
                    committedCharacterCount The number of committed characters in the text.                    
                </param>
            </javadoc>
            <method name="dispatchCommittedText" type="void" line="139">
                <params>
                    <param name="client" type="Component"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                </params>
                <comment line="141">
                    note that the client is not always the current client component -
                     some host input method adapters may dispatch input method events
                     through the Java event queue, and we may have switched clients while
                     the event was in the queue.                    
                </comment>
                <comment line="154">
                    active client -&gt; send text as InputMethodEvent                    
                </comment>
                <comment line="168">
                    passive client -&gt; send text as KeyEvents                    
                </comment>
                <scope line="145"/>
                <declaration name="time" type="long" line="148"/>
                <scope line="150">
                    <declaration name="req" type="InputMethodRequests" line="151"/>
                    <scope line="152">
                        <declaration name="beginIndex" type="int" line="154"/>
                        <declaration name="toBeCommitted" type="AttributedCharacterIterator" line="155"/>
                        <declaration name="inputEvent" type="InputMethodEvent" line="158"/>
                    </scope>
                    <scope line="166">
                        <declaration name="keyChar" type="char" line="168"/>
                        <scope line="169">
                            <declaration name="keyEvent" type="KeyEvent" line="170"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="176"/>
            </method>
            <method name="dispatchEvent" type="void" line="181">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <comment line="183">
                    some host input method adapters may dispatch input method events
                     through the Java event queue. If the component that the event is
                     intended for isn&apos;t an active client, or if we&apos;re using below-the-spot
                     input, we need to dispatch this event
                     to the input window. Note that that component is not necessarily the
                     current client component, since we may have switched clients while
                     the event was in the queue.                    
                </comment>
                <comment line="196">
                    make sure we don&apos;t dispatch our own key events back to the input method                    
                </comment>
                <scope line="189">
                    <scope line="191"/>
                </scope>
                <scope line="194">
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="202">
                Gets this context&apos;s composition area handler, creating it if necessary.
                  If requested, it grabs the composition area for use by this context.
                  The composition area&apos;s text is not updated.                
            </javadoc>
            <method name="getCompositionAreaHandler" type="CompositionAreaHandler" line="207">
                <params>
                    <param name="grab" type="boolean"/>
                </params>
                <scope line="208">
                    <scope line="209"/>
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="221">
                Grabs the composition area for use by this context.
                  If doUpdate is true, updates the composition area with previously sent
                  composed text.                
            </javadoc>
            <method name="grabCompositionArea" type="void" line="226">
                <params>
                    <param name="doUpdate" type="boolean"/>
                </params>
                <comment line="232">
                    if this context hasn&apos;t seen a need for a composition area yet,
                     just close it without creating the machinery                    
                </comment>
                <scope line="227">
                    <scope line="228"/>
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="238">
                Releases and closes the composition area if it is currently owned by
                  this context&apos;s composition area handler.                
            </javadoc>
            <method name="releaseCompositionArea" type="void" line="242">
                <scope line="243">
                    <scope line="244"/>
                </scope>
            </method>
            <javadoc line="250">
                Calls CompositionAreaHandler.isCompositionAreaVisible() to see
                  whether the composition area is visible or not.
                  Notice that this method is always called on the AWT event dispatch
                  thread.                
            </javadoc>
            <method name="isCompositionAreaVisible" type="boolean" line="256">
                <scope line="257"/>
            </method>
            <javadoc line="263">
                Calls CompositionAreaHandler.setCompositionAreaVisible to
                  show or hide the composition area.
                  As isCompositionAreaVisible method, it is always called
                  on AWT event dispatch thread.                
            </javadoc>
            <method name="setCompositionAreaVisible" type="void" line="269">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <scope line="270"/>
            </method>
            <javadoc line="275">
                Calls the current client component&apos;s implementation of getTextLocation.                
            </javadoc>
            <method name="getTextLocation" type="Rectangle" line="278">
                <params>
                    <param name="offset" type="TextHitInfo"/>
                </params>
            </method>
            <javadoc line="282">
                Calls the current client component&apos;s implementation of getLocationOffset.                
            </javadoc>
            <method name="getLocationOffset" type="TextHitInfo" line="285">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="289">
                Calls the current client component&apos;s implementation of getInsertPositionOffset.                
            </javadoc>
            <method name="getInsertPositionOffset" type="int" line="292"/>
            <javadoc line="296">
                Calls the current client component&apos;s implementation of getCommittedText.                
            </javadoc>
            <method name="getCommittedText" type="AttributedCharacterIterator" line="301">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <javadoc line="305">
                Calls the current client component&apos;s implementation of getCommittedTextLength.                
            </javadoc>
            <method name="getCommittedTextLength" type="int" line="308"/>
            <javadoc line="313">
                Calls the current client component&apos;s implementation of cancelLatestCommittedText.                
            </javadoc>
            <method name="cancelLatestCommittedText" type="AttributedCharacterIterator" line="316">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <javadoc line="320">
                Calls the current client component&apos;s implementation of getSelectedText.                
            </javadoc>
            <method name="getSelectedText" type="AttributedCharacterIterator" line="323">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <method name="getReq" type="InputMethodRequests" line="327">
                <scope line="328"/>
                <scope line="330"/>
            </method>
            <method name="createInputMethodWindow" type="Window" line="336">
                <params>
                    <param name="title" type="String"/>
                    <param name="attachToInputContext" type="boolean"/>
                </params>
                <declaration name="context" type="InputContext" line="337"/>
            </method>
            <method name="createInputMethodJFrame" type="JFrame" line="342">
                <params>
                    <param name="title" type="String"/>
                    <param name="attachToInputContext" type="boolean"/>
                </params>
                <declaration name="context" type="InputContext" line="343"/>
            </method>
            <method name="createInputMethodWindow" type="Window" line="347">
                <params>
                    <param name="title" type="String"/>
                    <param name="context" type="InputContext"/>
                    <param name="isSwing" type="boolean"/>
                </params>
                <scope line="348"/>
                <scope line="351"/>
                <scope line="353">
                    <declaration name="toolkit" type="Toolkit" line="354"/>
                    <scope line="355"/>
                </scope>
            </method>
            <javadoc line="363">
                @see java.awt.im.spi.InputMethodContext#enableClientWindowNotification                
            </javadoc>
            <method name="enableClientWindowNotification" type="void" line="366">
                <params>
                    <param name="inputMethod" type="InputMethod"/>
                    <param name="enable" type="boolean"/>
                </params>
            </method>
            <javadoc line="370">
                Disables or enables decorations for the composition window.                
            </javadoc>
            <method name="setCompositionAreaUndecorated" type="void" line="373">
                <params>
                    <param name="undecorated" type="boolean"/>
                </params>
                <scope line="374"/>
            </method>
        </class>
    </source>