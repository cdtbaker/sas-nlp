<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.im">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.awt.im.spi.InputMethod"/>
        <import package="java.security.AccessController"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.text.AttributedString"/>
        <import package="java.text.CharacterIterator"/>
        <import package="javax.swing.JFrame"/>
        <import package="sun.awt.InputMethodSupport"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="InputMethodContext" line="22">
            <extends class="sun.awt.im.InputContext"/>
            <implements interface="java.awt.im.spi.InputMethodContext"/>
            <javadoc line="22">
                The InputMethodContext class provides methods that input methods
                  can use to communicate with their client components.
                  It is a subclass of InputContext, which provides methods for use by
                  components.                
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <declaration name="dispatchingCommittedText" type="boolean" line="30"/>
            <declaration name="compositionAreaHandler" type="CompositionAreaHandler" line="31"/>
            <declaration name="compositionAreaHandlerLock" type="Object" line="32"/>
            <declaration name="belowTheSpotInputRequested" type="boolean" line="33"/>
            <declaration name="inputMethodSupportsBelowTheSpot" type="boolean" line="34"/>
            <scope line="35">
                <declaration name="inputStyle" type="String" line="36"/>
                <scope line="37"/>
            </scope>
            <javadoc line="42">
                Constructs an InputMethodContext.                
            </javadoc>
            <method name="InputMethodContext" type="constructor" line="45"/>
            <method name="setInputMethodSupportsBelowTheSpot" type="void" line="48">
                <params>
                    <param name="supported" type="boolean"/>
                </params>
            </method>
            <method name="useBelowTheSpotInput" type="boolean" line="51"/>
            <method name="haveActiveClient" type="boolean" line="54">
                <declaration name="client" type="Component" line="55"/>
            </method>
            <method name="dispatchInputMethodEvent" type="void" line="58">
                <params>
                    <param name="id" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                </params>
                <declaration name="source" type="Component" line="59"/>
                <scope line="61">
                    <declaration name="event" type="InputMethodEvent" line="62"/>
                    <scope line="63"/>
                    <scope line="66"/>
                </scope>
            </method>
            <javadoc line="71">
                Dispatches committed text to a client component.
                  Called by composition window.                
                <param>
                    client The component that the text should get dispatched to.                    
                </param>
                <param>
                    text The iterator providing access to the committed
                      (and possible composed) text.                    
                </param>
                <param>
                    committedCharacterCount The number of committed characters in the text.                    
                </param>
            </javadoc>
            <method name="dispatchCommittedText" type="void" line="79">
                <params>
                    <param name="client" type="Component"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                </params>
                <scope line="80"/>
                <declaration name="time" type="long" line="83"/>
                <scope line="85">
                    <declaration name="req" type="InputMethodRequests" line="86"/>
                    <scope line="87">
                        <declaration name="beginIndex" type="int" line="88"/>
                        <declaration name="toBeCommitted" type="AttributedCharacterIterator" line="89"/>
                        <declaration name="inputEvent" type="InputMethodEvent" line="90"/>
                    </scope>
                    <scope line="93">
                        <declaration name="keyChar" type="char" line="94"/>
                        <scope line="95">
                            <declaration name="keyEvent" type="KeyEvent" line="96"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="102"/>
            </method>
            <method name="dispatchEvent" type="void" line="106">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <scope line="107">
                    <scope line="108"/>
                </scope>
                <scope line="112">
                    <scope line="113"/>
                </scope>
            </method>
            <javadoc line="118">
                Gets this context&apos;s composition area handler, creating it if necessary.
                  If requested, it grabs the composition area for use by this context.
                  The composition area&apos;s text is not updated.                
            </javadoc>
            <method name="getCompositionAreaHandler" type="CompositionAreaHandler" line="123">
                <params>
                    <param name="grab" type="boolean"/>
                </params>
                <scope line="124">
                    <scope line="125"/>
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="135">
                Grabs the composition area for use by this context.
                  If doUpdate is true, updates the composition area with previously sent
                  composed text.                
            </javadoc>
            <method name="grabCompositionArea" type="void" line="140">
                <params>
                    <param name="doUpdate" type="boolean"/>
                </params>
                <scope line="141">
                    <scope line="142"/>
                    <scope line="145"/>
                </scope>
            </method>
            <javadoc line="150">
                Releases and closes the composition area if it is currently owned by
                  this context&apos;s composition area handler.                
            </javadoc>
            <method name="releaseCompositionArea" type="void" line="154">
                <scope line="155">
                    <scope line="156"/>
                </scope>
            </method>
            <javadoc line="161">
                Calls CompositionAreaHandler.isCompositionAreaVisible() to see
                  whether the composition area is visible or not.
                  Notice that this method is always called on the AWT event dispatch
                  thread.                
            </javadoc>
            <method name="isCompositionAreaVisible" type="boolean" line="167">
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Calls CompositionAreaHandler.setCompositionAreaVisible to
                  show or hide the composition area.
                  As isCompositionAreaVisible method, it is always called
                  on AWT event dispatch thread.                
            </javadoc>
            <method name="setCompositionAreaVisible" type="void" line="179">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <scope line="180"/>
            </method>
            <javadoc line="184">
                Calls the current client component&apos;s implementation of getTextLocation.                
            </javadoc>
            <method name="getTextLocation" type="Rectangle" line="187">
                <params>
                    <param name="offset" type="TextHitInfo"/>
                </params>
            </method>
            <javadoc line="190">
                Calls the current client component&apos;s implementation of getLocationOffset.                
            </javadoc>
            <method name="getLocationOffset" type="TextHitInfo" line="193">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="196">
                Calls the current client component&apos;s implementation of getInsertPositionOffset.                
            </javadoc>
            <method name="getInsertPositionOffset" type="int" line="199"/>
            <javadoc line="202">
                Calls the current client component&apos;s implementation of getCommittedText.                
            </javadoc>
            <method name="getCommittedText" type="AttributedCharacterIterator" line="205">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <javadoc line="208">
                Calls the current client component&apos;s implementation of getCommittedTextLength.                
            </javadoc>
            <method name="getCommittedTextLength" type="int" line="211"/>
            <javadoc line="214">
                Calls the current client component&apos;s implementation of cancelLatestCommittedText.                
            </javadoc>
            <method name="cancelLatestCommittedText" type="AttributedCharacterIterator" line="217">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <javadoc line="220">
                Calls the current client component&apos;s implementation of getSelectedText.                
            </javadoc>
            <method name="getSelectedText" type="AttributedCharacterIterator" line="223">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <method name="getReq" type="InputMethodRequests" line="226">
                <scope line="227"/>
                <scope line="230"/>
            </method>
            <method name="createInputMethodWindow" type="Window" line="234">
                <params>
                    <param name="title" type="String"/>
                    <param name="attachToInputContext" type="boolean"/>
                </params>
                <declaration name="context" type="InputContext" line="235"/>
            </method>
            <method name="createInputMethodJFrame" type="JFrame" line="238">
                <params>
                    <param name="title" type="String"/>
                    <param name="attachToInputContext" type="boolean"/>
                </params>
                <declaration name="context" type="InputContext" line="239"/>
            </method>
            <method name="createInputMethodWindow" type="Window" line="242">
                <params>
                    <param name="title" type="String"/>
                    <param name="context" type="InputContext"/>
                    <param name="isSwing" type="boolean"/>
                </params>
                <scope line="243"/>
                <scope line="246"/>
                <scope line="249">
                    <declaration name="toolkit" type="Toolkit" line="250"/>
                    <scope line="251"/>
                </scope>
            </method>
            <javadoc line="257">
                @see java.awt.im.spi.InputMethodContext#enableClientWindowNotification                
            </javadoc>
            <method name="enableClientWindowNotification" type="void" line="260">
                <params>
                    <param name="inputMethod" type="InputMethod"/>
                    <param name="enable" type="boolean"/>
                </params>
            </method>
            <javadoc line="263">
                Disables or enables decorations for the composition window.                
            </javadoc>
            <method name="setCompositionAreaUndecorated" type="void" line="266">
                <params>
                    <param name="undecorated" type="boolean"/>
                </params>
                <scope line="267"/>
            </method>
        </class>
    </source>