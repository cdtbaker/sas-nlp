<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.im">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.event.InputMethodListener"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.text.AttributedString"/>
        <class name="CompositionAreaHandler" line="40">
            <comment line="55">
                synchronized through compositionArea                
            </comment>
            <comment line="189">
                InputMethodListener methods                
            </comment>
            <comment line="249">
                InputMethodRequests methods                
            </comment>
            <implements interface="InputMethodListener"/>
            <implements interface="InputMethodRequests"/>
            <javadoc line="40">
                A composition area handler handles events and input method requests for
                  the composition area. Typically each input method context has its own
                  composition area handler if it supports passive clients or below-the-spot
                  input, but all handlers share a single composition area.                
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <declaration name="compositionArea" type="CompositionArea" line="52"/>
            <declaration name="compositionAreaLock" type="Object" line="53"/>
            <declaration name="compositionAreaOwner" type="CompositionAreaHandler" line="54"/>
            <declaration name="composedText" type="AttributedCharacterIterator" line="56"/>
            <declaration name="caret" type="TextHitInfo" line="57"/>
            <declaration name="clientComponent" type="Component" line="58"/>
            <declaration name="inputMethodContext" type="InputMethodContext" line="59"/>
            <javadoc line="61">
                Constructs the composition area handler.                
            </javadoc>
            <method name="CompositionAreaHandler" type="constructor" line="64">
                <params>
                    <param name="context" type="InputMethodContext"/>
                </params>
            </method>
            <javadoc line="68">
                Creates the composition area.                
            </javadoc>
            <method name="createCompositionArea" type="void" line="71">
                <comment line="78">
                    If the client component is an active client using below-the-spot style, then
                     make the composition window undecorated without a title bar.                    
                </comment>
                <scope line="72">
                    <scope line="74"/>
                    <scope line="79">
                        <declaration name="req" type="InputMethodRequests" line="80"/>
                        <scope line="81"/>
                    </scope>
                </scope>
            </method>
            <method name="setClientComponent" type="void" line="88">
                <params>
                    <param name="clientComponent" type="Component"/>
                </params>
            </method>
            <javadoc line="92">
                Grabs the composition area, makes this handler its owner, and installs
                  the handler and its input context into the composition area for event
                  and input method request handling.
                  If doUpdate is true, updates the composition area with previously sent
                  composed text.                
            </javadoc>
            <method name="grabCompositionArea" type="void" line="100">
                <params>
                    <param name="doUpdate" type="boolean"/>
                </params>
                <comment line="109">
                    Create the composition area if necessary                    
                </comment>
                <scope line="101">
                    <scope line="102">
                        <scope line="104"/>
                        <scope line="107">
                            <scope line="109"/>
                            <scope line="112"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="120">
                Releases and closes the composition area if it is currently owned by
                  this composition area handler.                
            </javadoc>
            <method name="releaseCompositionArea" type="void" line="124">
                <scope line="125">
                    <scope line="126">
                        <scope line="128"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="136">
                Releases and closes the composition area if it has been created,
                  independent of the current owner.                
            </javadoc>
            <method name="closeCompositionArea" type="void" line="140">
                <scope line="141">
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="150">
                Returns whether the composition area is currently visible                
            </javadoc>
            <method name="isCompositionAreaVisible" type="boolean" line="153">
                <scope line="154"/>
            </method>
            <javadoc line="162">
                Shows or hides the composition Area                
            </javadoc>
            <method name="setCompositionAreaVisible" type="void" line="165">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <scope line="166"/>
            </method>
            <method name="processInputMethodEvent" type="void" line="171">
                <params>
                    <param name="event" type="InputMethodEvent"/>
                </params>
                <scope line="172"/>
                <scope line="174"/>
            </method>
            <javadoc line="179">
                set the compositionArea frame decoration                
            </javadoc>
            <method name="setCompositionAreaUndecorated" type="void" line="182">
                <params>
                    <param name="undecorated" type="boolean"/>
                </params>
                <scope line="183"/>
            </method>
            <declaration name="IM_ATTRIBUTES" type="Attribute[]" line="192"/>
            <method name="inputMethodTextChanged" type="void" line="195">
                <params>
                    <param name="event" type="InputMethodEvent"/>
                </params>
                <comment line="200">
                    extract composed text and prepare it for display                    
                </comment>
                <comment line="206">
                    Create the composition area if necessary                    
                </comment>
                <comment line="211">
                    copy the composed text                    
                </comment>
                <comment line="214">
                    skip over committed text                    
                </comment>
                <comment line="225">
                    send any committed text to the text component                    
                </comment>
                <comment line="230">
                    this may have changed the text location, so reposition the window                    
                </comment>
                <comment line="236">
                    event has been handled, so consume it                    
                </comment>
                <declaration name="text" type="AttributedCharacterIterator" line="196"/>
                <declaration name="committedCharacterCount" type="int" line="197"/>
                <scope line="203">
                    <scope line="206"/>
                    <declaration name="composedTextString" type="AttributedString" line="211"/>
                </scope>
                <scope line="220"/>
                <scope line="225">
                    <scope line="230"/>
                </scope>
            </method>
            <method name="caretPositionChanged" type="void" line="239">
                <params>
                    <param name="event" type="InputMethodEvent"/>
                </params>
                <comment line="245">
                    event has been handled, so consume it                    
                </comment>
                <scope line="240"/>
            </method>
            <javadoc line="252">
                Returns the input method request handler of the client component.
                  When using the composition window for an active client (below-the-spot
                  input), input method requests that do not relate to the display of
                  the composed text are forwarded to the client component.                
            </javadoc>
            <method name="getClientInputMethodRequests" type="InputMethodRequests" line="258">
                <scope line="259"/>
            </method>
            <method name="getTextLocation" type="Rectangle" line="266">
                <params>
                    <param name="offset" type="TextHitInfo"/>
                </params>
                <comment line="272">
                    there&apos;s composed text, but it&apos;s not displayed, so fake a rectangle                    
                </comment>
                <comment line="279">
                    passive client, no composed text, so fake a rectangle                    
                </comment>
                <scope line="267">
                    <scope line="268"/>
                    <scope line="270"/>
                    <scope line="273">
                        <declaration name="requests" type="InputMethodRequests" line="274"/>
                        <scope line="275"/>
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <method name="getLocationOffset" type="TextHitInfo" line="285">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="286">
                    <scope line="287"/>
                    <scope line="289"/>
                </scope>
            </method>
            <method name="getInsertPositionOffset" type="int" line="295">
                <comment line="302">
                    we don&apos;t have access to the client component&apos;s text.                    
                </comment>
                <declaration name="req" type="InputMethodRequests" line="296"/>
                <scope line="297"/>
            </method>
            <declaration name="EMPTY_TEXT" type="AttributedCharacterIterator" line="305"/>
            <method name="getCommittedText" type="AttributedCharacterIterator" line="310">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="attributes" type="Attribute[]"/>
                </params>
                <comment line="317">
                    we don&apos;t have access to the client component&apos;s text.                    
                </comment>
                <declaration name="req" type="InputMethodRequests" line="311"/>
                <scope line="312"/>
            </method>
            <method name="getCommittedTextLength" type="int" line="320">
                <comment line="327">
                    we don&apos;t have access to the client component&apos;s text.                    
                </comment>
                <declaration name="req" type="InputMethodRequests" line="321"/>
                <scope line="322"/>
            </method>
            <method name="cancelLatestCommittedText" type="AttributedCharacterIterator" line="331">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
                <comment line="338">
                    we don&apos;t have access to the client component&apos;s text.                    
                </comment>
                <declaration name="req" type="InputMethodRequests" line="332"/>
                <scope line="333"/>
            </method>
            <method name="getSelectedText" type="AttributedCharacterIterator" line="341">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
                <comment line="348">
                    we don&apos;t have access to the client component&apos;s text.                    
                </comment>
                <declaration name="req" type="InputMethodRequests" line="342"/>
                <scope line="343"/>
            </method>
        </class>
    </source>