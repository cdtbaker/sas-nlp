<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.BufferCapabilities"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.MenuBar"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Event"/>
        <import package="java.awt.event.PaintEvent"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.peer.CanvasPeer"/>
        <import package="java.awt.peer.LightweightPeer"/>
        <import package="java.awt.peer.PanelPeer"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.ContainerPeer"/>
        <import package="java.awt.Rectangle"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="NullComponentPeer" line="57">
            <implements interface="LightweightPeer"/>
            <implements interface="CanvasPeer"/>
            <implements interface="PanelPeer"/>
            <javadoc line="57">
                Implements the LightweightPeer interface for use in lightweight components
                  that have no native window associated with them.  This gets created by
                  default in Component so that Component and Container can be directly
                  extended to create useful components written entirely in java.  These
                  components must be hosted somewhere higher up in the component tree by a
                  native container (such as a Frame).
                  This implementation provides no useful semantics and serves only as a
                  marker.  One could provide alternative implementations in java that do
                  something useful for some of the other peer interfaces to minimize the
                  native code.
                  This was renamed from java.awt.LightweightPeer (a horrible and confusing
                  name) and moved from java.awt.Toolkit into sun.awt as a public class in
                  its own file.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Michael Martak                    
                </author>
            </javadoc>
            <method name="isObscured" type="boolean" line="81"/>
            <method name="canDetermineObscurity" type="boolean" line="85"/>
            <method name="isFocusable" type="boolean" line="89"/>
            <method name="setVisible" type="void" line="93">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="show" type="void" line="96"/>
            <method name="hide" type="void" line="99"/>
            <method name="setEnabled" type="void" line="102">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="enable" type="void" line="105"/>
            <method name="disable" type="void" line="108"/>
            <method name="paint" type="void" line="111">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="repaint" type="void" line="114">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="print" type="void" line="117">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <method name="setBounds" type="void" line="120">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="op" type="int"/>
                </params>
            </method>
            <method name="reshape" type="void" line="123">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="coalescePaintEvent" type="void" line="126">
                <params>
                    <param name="e" type="PaintEvent"/>
                </params>
            </method>
            <method name="handleEvent" type="boolean" line="129">
                <params>
                    <param name="e" type="Event"/>
                </params>
            </method>
            <method name="handleEvent" type="void" line="133">
                <params>
                    <param name="arg0" type="java.awt.AWTEvent"/>
                </params>
            </method>
            <method name="getPreferredSize" type="Dimension" line="136"/>
            <method name="getMinimumSize" type="Dimension" line="140"/>
            <method name="getToolkit" type="java.awt.Toolkit" line="144"/>
            <method name="getColorModel" type="ColorModel" line="148"/>
            <method name="getGraphics" type="Graphics" line="152"/>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="156"/>
            <method name="getFontMetrics" type="FontMetrics" line="160">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <method name="dispose" type="void" line="164">
                <comment line="165">
                    no native code                    
                </comment>
            </method>
            <method name="setForeground" type="void" line="168">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setBackground" type="void" line="171">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="setFont" type="void" line="174">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <method name="updateCursorImmediately" type="void" line="177"/>
            <method name="setCursor" type="void" line="180">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
            </method>
            <method name="requestFocus" type="boolean" line="185">
                <params>
                    <param name="lightweightChild" type="Component"/>
                    <param name="temporary" type="boolean"/>
                    <param name="focusedWindowChangeAllowed" type="boolean"/>
                    <param name="time" type="long"/>
                    <param name="cause" type="CausedFocusEvent.Cause"/>
                </params>
            </method>
            <method name="createImage" type="Image" line="189">
                <params>
                    <param name="producer" type="ImageProducer"/>
                </params>
            </method>
            <method name="createImage" type="Image" line="193">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="prepareImage" type="boolean" line="197">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="checkImage" type="int" line="201">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="o" type="ImageObserver"/>
                </params>
            </method>
            <method name="preferredSize" type="Dimension" line="205"/>
            <method name="minimumSize" type="Dimension" line="209"/>
            <method name="getLocationOnScreen" type="Point" line="213"/>
            <method name="getInsets" type="Insets" line="217"/>
            <method name="beginValidate" type="void" line="221"/>
            <method name="endValidate" type="void" line="224"/>
            <method name="insets" type="Insets" line="227"/>
            <method name="isPaintPending" type="boolean" line="231"/>
            <method name="handlesWheelScrolling" type="boolean" line="235"/>
            <method name="createVolatileImage" type="VolatileImage" line="239">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="beginLayout" type="void" line="243"/>
            <method name="endLayout" type="void" line="246"/>
            <method name="createBuffers" type="void" line="250">
                <params>
                    <param name="numBuffers" type="int"/>
                    <param name="caps" type="BufferCapabilities"/>
                </params>
            </method>
            <method name="getBackBuffer" type="Image" line="254"/>
            <method name="flip" type="void" line="260">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="flipAction" type="BufferCapabilities.FlipContents"/>
                </params>
            </method>
            <method name="destroyBuffers" type="void" line="264"/>
            <javadoc line="267">
                @see java.awt.peer.ComponentPeer#isReparentSupported                
            </javadoc>
            <method name="isReparentSupported" type="boolean" line="270"/>
            <javadoc line="274">
                @see java.awt.peer.ComponentPeer#reparent                
            </javadoc>
            <method name="reparent" type="void" line="277">
                <params>
                    <param name="newNativeParent" type="ContainerPeer"/>
                </params>
            </method>
            <method name="layout" type="void" line="281"/>
            <method name="getBounds" type="Rectangle" line="284"/>
            <javadoc line="289">
                Applies the shape to the native component window.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="applyShape" type="void" line="293">
                <params>
                    <param name="shape" type="Region"/>
                </params>
            </method>
            <javadoc line="296">
                Lowers this component at the bottom of the above HW peer. If the above parameter
                  is null then the method places this component at the top of the Z-order.                
            </javadoc>
            <method name="setZOrder" type="void" line="300">
                <params>
                    <param name="above" type="ComponentPeer"/>
                </params>
            </method>
            <method name="updateGraphicsData" type="boolean" line="303">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="getAppropriateGraphicsConfiguration" type="GraphicsConfiguration" line="309">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
        </class>
    </source>