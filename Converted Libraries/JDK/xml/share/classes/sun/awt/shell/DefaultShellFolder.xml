<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.shell">
        <import package="java.io.File"/>
        <import package="java.security.AccessController"/>
        <import package="javax.swing.Icon"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="DefaultShellFolder" line="6">
            <extends class="ShellFolder"/>
            <javadoc line="6">
                @author Michael Martak                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="11">
                Create a file system shell folder from a file                
            </javadoc>
            <method name="DefaultShellFolder" type="constructor" line="14">
                <params>
                    <param name="parent" type="ShellFolder"/>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="17">
                This method is implemented to make sure that no instances
                  of &lt;code&gt;ShellFolder&lt;/code&gt; are ever serialized. An instance of
                  this default implementation can always be represented with a
                  &lt;code&gt;java.io.File&lt;/code&gt; object instead.                
                <returns>
                    a &lt;code&gt;java.io.File&lt;/code&gt; replacement object.                    
                </returns>
            </javadoc>
            <method name="writeReplace" type="Object" line="24"/>
            <javadoc line="27">
                @return An array of shell folders that are children of this shell folder
                  object, null if this shell folder is empty.                
            </javadoc>
            <method name="listFiles" type="File[]" line="31">
                <declaration name="files" type="File[]" line="32"/>
                <scope line="33">
                    <scope line="34"/>
                </scope>
            </method>
            <javadoc line="40">
                @return Whether this shell folder is a link                
            </javadoc>
            <method name="isLink" type="boolean" line="43"/>
            <javadoc line="46">
                @return Whether this shell folder is marked as hidden                
            </javadoc>
            <method name="isHidden" type="boolean" line="49">
                <declaration name="fileName" type="String" line="50"/>
                <scope line="51"/>
            </method>
            <javadoc line="56">
                @return The shell folder linked to by this shell folder, or null
                  if this shell folder is not a link                
            </javadoc>
            <method name="getLinkLocation" type="ShellFolder" line="60"/>
            <javadoc line="63">
                @return The name used to display this shell folder                
            </javadoc>
            <method name="getDisplayName" type="String" line="66"/>
            <javadoc line="69">
                @return The type of shell folder as a string                
            </javadoc>
            <method name="getFolderType" type="String" line="72">
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <javadoc line="80">
                @return The executable type as a string                
            </javadoc>
            <method name="getExecutableType" type="String" line="83"/>
        </class>
    </source>