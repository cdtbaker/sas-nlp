<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.shell">
        <import package="javax.swing"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.io"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.Callable"/>
        <class name="ShellFolder" line="36">
            <extends class="File"/>
            <comment line="201">
                Static                
            </comment>
            <comment line="288">
                Override File methods                
            </comment>
            <javadoc line="36">
                @author Michael Martak                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="COLUMN_NAME" type="String" line="42"/>
            <declaration name="COLUMN_SIZE" type="String" line="43"/>
            <declaration name="COLUMN_DATE" type="String" line="44"/>
            <declaration name="parent" type="ShellFolder" line="46"/>
            <javadoc line="48">
                Create a file system shell folder from a file                
            </javadoc>
            <method name="ShellFolder" type="constructor" line="51">
                <params>
                    <param name="parent" type="ShellFolder"/>
                    <param name="pathname" type="String"/>
                </params>
            </method>
            <javadoc line="56">
                @return Whether this is a file system shell folder                
            </javadoc>
            <method name="isFileSystem" type="boolean" line="59"/>
            <method name="writeReplace" type="Object" line="63"/>
            <javadoc line="63">
                This method must be implemented to make sure that no instances
                  of &lt;code&gt;ShellFolder&lt;/code&gt; are ever serialized. If &lt;code&gt;isFileSystem()&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;, then the object should be representable with an instance of
                  &lt;code&gt;java.io.File&lt;/code&gt; instead. If not, then the object is most likely
                  depending on some internal (native) state and cannot be serialized.                
                <returns>
                    a <code>java.io.File</code> replacement object, or <code>null</code>
                      if no suitable replacement can be found.                    
                </returns>
            </javadoc>
            <javadoc line="75">
                Returns the path for this object&apos;s parent,
                  or &lt;code&gt;null&lt;/code&gt; if this object does not name a parent
                  folder.                
                <return>
                    the path as a String for this object's parent,
                      or <code>null</code> if this object does not name a parent
                      folder                    
                </return>
                <see>
                    java.io.File#getParent()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParent" type="String" line="87">
                <scope line="88"/>
                <scope line="91"/>
                <scope line="93"/>
            </method>
            <javadoc line="98">
                Returns a File object representing this object&apos;s parent,
                  or &lt;code&gt;null&lt;/code&gt; if this object does not name a parent
                  folder.                
                <return>
                    a File object representing this object's parent,
                      or <code>null</code> if this object does not name a parent
                      folder                    
                </return>
                <see>
                    java.io.File#getParentFile()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParentFile" type="File" line="110">
                <scope line="111"/>
                <scope line="113"/>
                <scope line="115"/>
            </method>
            <method name="listFiles" type="File[]" line="120"/>
            <method name="listFiles" type="File[]" line="124">
                <params>
                    <param name="includeHiddenFiles" type="boolean"/>
                </params>
                <declaration name="files" type="File[]" line="125"/>
                <scope line="127">
                    <declaration name="v" type="Vector" line="128"/>
                    <declaration name="nameCount" type="int" line="129"/>
                    <scope line="130">
                        <scope line="131"/>
                    </scope>
                </scope>
            </method>
            <method name="isLink" type="boolean" line="142"/>
            <javadoc line="142">
                @return Whether this shell folder is a link                
            </javadoc>
            <method name="getLinkLocation" type="ShellFolder" line="147"/>
            <javadoc line="147">
                @return The shell folder linked to by this shell folder, or null
                  if this shell folder is not a link                
            </javadoc>
            <method name="getDisplayName" type="String" line="153"/>
            <javadoc line="153">
                @return The name used to display this shell folder                
            </javadoc>
            <method name="getFolderType" type="String" line="158"/>
            <javadoc line="158">
                @return The type of shell folder as a string                
            </javadoc>
            <method name="getExecutableType" type="String" line="163"/>
            <javadoc line="163">
                @return The executable type as a string                
            </javadoc>
            <javadoc line="168">
                Compares this ShellFolder with the specified ShellFolder for order.                
                <see>
                    #compareTo(Object)                    
                </see>
            </javadoc>
            <method name="compareTo" type="int" line="173">
                <params>
                    <param name="file2" type="File"/>
                </params>
                <scope line="175">
                    <scope line="177"/>
                    <scope line="179"/>
                </scope>
                <scope line="182">
                    <scope line="183"/>
                    <scope line="185"/>
                </scope>
            </method>
            <javadoc line="191">
                @param getLargeIcon whether to return large icon (ignored in base implementation)                
                <return>
                    The icon used to display this shell folder                    
                </return>
            </javadoc>
            <method name="getIcon" type="Image" line="195">
                <params>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
            </method>
            <declaration name="shellFolderManager" type="ShellFolderManager" line="202"/>
            <declaration name="invoker" type="Invoker" line="204"/>
            <scope line="206">
                <declaration name="managerClassName" type="String" line="207"/>
                <declaration name="managerClass" type="Class" line="209"/>
                <scope line="210"/>
                <scope line="213"/>
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220"/>
                <scope line="223"/>
                <scope line="226"/>
            </scope>
            <javadoc line="234">
                Return a shell folder from a file object                
                <exception>
                    FileNotFoundException if file does not exist                    
                </exception>
            </javadoc>
            <method name="getShellFolder" type="ShellFolder" line="238">
                <params>
                    <param name="file" type="File"/>
                </params>
                <scope line="239"/>
                <scope line="242"/>
            </method>
            <javadoc line="248">
                @param key a &lt;code&gt;String&lt;/code&gt;                
                <return>
                    An Object matching the string <code>key</code>.                    
                </return>
                <see>
                    ShellFolderManager#get(String)                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="253">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="257">
                Does &lt;code&gt;dir&lt;/code&gt; represent a &quot;computer&quot; such as a node on the network, or
                  &quot;My Computer&quot; on the desktop.                
            </javadoc>
            <method name="isComputerNode" type="boolean" line="261">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="265">
                @return Whether this is a file system root directory                
            </javadoc>
            <method name="isFileSystemRoot" type="boolean" line="268">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="272">
                Canonicalizes files that don&apos;t have symbolic links in their path.
                  Normalizes files that do, preserving symbolic links from being resolved.                
            </javadoc>
            <method name="getNormalizedFile" type="File" line="276">
                <params>
                    <param name="f" type="File"/>
                </params>
                <comment line="280">
                    path of f doesn&apos;t contain symbolic links                    
                </comment>
                <comment line="284">
                    preserve symbolic links from being resolved                    
                </comment>
                <declaration name="canonical" type="File" line="277"/>
                <scope line="278"/>
            </method>
            <method name="sort" type="void" line="289">
                <params>
                    <param name="files" type="List<? extends File>"/>
                </params>
                <comment line="295">
                    To avoid loads of synchronizations with Invoker and improve performance we
                     synchronize the whole code of the sort method once                    
                </comment>
                <comment line="299">
                    Check that we can use the ShellFolder.sortChildren() method:
                       1. All files have the same non-null parent
                       2. All files is ShellFolders                    
                </comment>
                <scope line="290"/>
                <anonymous_class line="296">
                    <method name="call" type="Void" line="297">
                        <comment line="299">
                            Check that we can use the ShellFolder.sortChildren() method:
                               1. All files have the same non-null parent
                               2. All files is ShellFolders                            
                        </comment>
                        <declaration name="commonParent" type="File" line="301"/>
                        <scope line="303">
                            <declaration name="parent" type="File" line="304"/>
                            <scope line="306"/>
                            <scope line="312"/>
                            <scope line="314">
                                <scope line="315"/>
                            </scope>
                        </scope>
                        <scope line="323"/>
                        <scope line="325"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="sortChildren" type="void" line="334">
                <params>
                    <param name="files" type="List<? extends File>"/>
                </params>
                <comment line="336">
                    To avoid loads of synchronizations with Invoker and improve performance we
                     synchronize the whole code of the sort method once                    
                </comment>
                <anonymous_class line="337">
                    <method name="call" type="Void" line="338"/>
                </anonymous_class>
            </method>
            <method name="isAbsolute" type="boolean" line="346"/>
            <method name="getAbsoluteFile" type="File" line="350"/>
            <method name="canRead" type="boolean" line="354">
                <comment line="356">
                    ((Fix?))                    
                </comment>
            </method>
            <javadoc line="358">
                Returns true if folder allows creation of children.
                  True for the &quot;Desktop&quot; folder, but false for the &quot;My Computer&quot;
                  folder.                
            </javadoc>
            <method name="canWrite" type="boolean" line="363">
                <comment line="365">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="exists" type="boolean" line="367">
                <comment line="369">
                    Assume top-level drives exist, because state is uncertain for
                     removable drives.                    
                </comment>
            </method>
            <method name="isDirectory" type="boolean" line="373">
                <comment line="375">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="isFile" type="boolean" line="377">
                <comment line="379">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="lastModified" type="long" line="381">
                <comment line="383">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="length" type="long" line="385">
                <comment line="387">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="createNewFile" type="boolean" line="389"/>
            <method name="delete" type="boolean" line="393">
                <comment line="395">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="deleteOnExit" type="void" line="397">
                <comment line="402">
                    Do nothing       // ((Fix?))                    
                </comment>
                <scope line="398"/>
                <scope line="400"/>
            </method>
            <method name="mkdir" type="boolean" line="405"/>
            <method name="mkdirs" type="boolean" line="409"/>
            <method name="renameTo" type="boolean" line="413">
                <params>
                    <param name="dest" type="File"/>
                </params>
                <comment line="415">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="setLastModified" type="boolean" line="417">
                <params>
                    <param name="time" type="long"/>
                </params>
                <comment line="419">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="setReadOnly" type="boolean" line="421">
                <comment line="423">
                    ((Fix?))                    
                </comment>
            </method>
            <method name="toString" type="String" line="425"/>
            <method name="getFolderColumns" type="ShellFolderColumnInfo[]" line="429">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <declaration name="columns" type="ShellFolderColumnInfo[]" line="430"/>
                <scope line="432"/>
                <scope line="436"/>
            </method>
            <method name="getFolderColumns" type="ShellFolderColumnInfo[]" line="453"/>
            <method name="getFolderColumnValue" type="Object" line="457">
                <params>
                    <param name="file" type="File"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="472">
                    By default, file name will be rendered using getSystemDisplayName()                    
                </comment>
                <comment line="475">
                    size                    
                </comment>
                <comment line="478">
                    date                    
                </comment>
                <scope line="458">
                    <declaration name="value" type="Object" line="459"/>
                    <scope line="460"/>
                </scope>
                <scope line="465"/>
                <scope line="478"/>
                <declaration name="time" type="long" line="481"/>
            </method>
            <method name="getFolderColumnValue" type="Object" line="489">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="493">
                Invokes the {@code task} which doesn&apos;t throw checked exceptions
                  from its {@code call} method. If invokation is interrupted then Thread.currentThread().isInterrupted() will
                  be set and result will be {@code null}                
            </javadoc>
            <method name="invoke" type="T" line="498">
                <params>
                    <param name="task" type="Callable<T>"/>
                </params>
                <scope line="499"/>
                <scope line="501"/>
            </method>
            <javadoc line="506">
                Invokes the {@code task} which throws checked exceptions from its {@code call} method.
                  If invokation is interrupted then Thread.currentThread().isInterrupted() will
                  be set and InterruptedException will be thrown as well.                
            </javadoc>
            <method name="invoke" type="T" line="512">
                <params>
                    <param name="task" type="Callable<T>"/>
                    <param name="exceptionClass" type="Class<E>"/>
                </params>
                <comment line="518">
                    Rethrow unchecked exceptions                    
                </comment>
                <comment line="523">
                    Set isInterrupted flag for current thread                    
                </comment>
                <comment line="526">
                    Rethrow InterruptedException                    
                </comment>
                <scope line="513"/>
                <scope line="515">
                    <scope line="516"/>
                    <scope line="521"/>
                    <scope line="529"/>
                </scope>
            </method>
            <interface name="Invoker">
                <javadoc line="537">
                    Interface allowing to invoke tasks in different environments on different platforms.                    
                </javadoc>
                <method name="invoke" type="T" line="541"/>
                <javadoc line="541">
                    Invokes a callable task.                    
                    <param>
                        task a task to invoke                        
                    </param>
                    <throws>
                        Exception {@code InterruptedException} or an exception that was thrown from the {@code task}                        
                    </throws>
                    <return>
                        the result of {@code task}'s invokation                        
                    </return>
                </javadoc>
            </interface>
            <declaration name="DEFAULT_COMPARATOR" type="Comparator" line="551"/>
            <javadoc line="551">
                Provides a default comparator for the default column set                
            </javadoc>
            <anonymous_class line="554">
                <method name="compare" type="int" line="555">
                    <params>
                        <param name="o1" type="Object"/>
                        <param name="o2" type="Object"/>
                    </params>
                    <declaration name="gt" type="int" line="556"/>
                    <scope line="558"/>
                    <scope line="560"/>
                    <scope line="562"/>
                    <scope line="564"/>
                    <scope line="566"/>
                </method>
            </anonymous_class>
            <declaration name="FILE_COMPARATOR" type="Comparator&lt;File&gt;" line="574"/>
            <anonymous_class line="574">
                <method name="compare" type="int" line="575">
                    <params>
                        <param name="f1" type="File"/>
                        <param name="f2" type="File"/>
                    </params>
                    <comment line="596">
                        Non-file shellfolders sort before files                        
                    </comment>
                    <comment line="604">
                        First ignore case when comparing                        
                    </comment>
                    <comment line="609">
                        May differ in case (e.g. &quot;mail&quot; vs. &quot;Mail&quot;)
                         We need this test for consistent sorting                        
                    </comment>
                    <declaration name="sf1" type="ShellFolder" line="576"/>
                    <declaration name="sf2" type="ShellFolder" line="577"/>
                    <scope line="579">
                        <scope line="581"/>
                    </scope>
                    <scope line="585">
                        <scope line="587"/>
                    </scope>
                    <scope line="592"/>
                    <scope line="594"/>
                    <scope line="597"/>
                    <scope line="599">
                        <declaration name="name1" type="String" line="600"/>
                        <declaration name="name2" type="String" line="601"/>
                        <declaration name="diff" type="int" line="604"/>
                        <scope line="605"/>
                        <scope line="607"/>
                    </scope>
                </method>
            </anonymous_class>
        </class>
    </source>