<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.shell">
        <import package="javax.swing"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.io"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.Callable"/>
        <class name="ShellFolder" line="9">
            <extends class="File"/>
            <javadoc line="9">
                @author Michael Martak                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="COLUMN_NAME" type="String" line="14"/>
            <declaration name="COLUMN_SIZE" type="String" line="15"/>
            <declaration name="COLUMN_DATE" type="String" line="16"/>
            <declaration name="parent" type="ShellFolder" line="17"/>
            <javadoc line="18">
                Create a file system shell folder from a file                
            </javadoc>
            <method name="ShellFolder" type="constructor" line="21">
                <params>
                    <param name="parent" type="ShellFolder"/>
                    <param name="pathname" type="String"/>
                </params>
            </method>
            <javadoc line="25">
                @return Whether this is a file system shell folder                
            </javadoc>
            <method name="isFileSystem" type="boolean" line="28"/>
            <method name="writeReplace" type="Object" line="31"/>
            <javadoc line="31">
                This method must be implemented to make sure that no instances
                  of &lt;code&gt;ShellFolder&lt;/code&gt; are ever serialized. If &lt;code&gt;isFileSystem()&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;, then the object should be representable with an instance of
                  &lt;code&gt;java.io.File&lt;/code&gt; instead. If not, then the object is most likely
                  depending on some internal (native) state and cannot be serialized.                
                <returns>
                    a &lt;code&gt;java.io.File&lt;/code&gt; replacement object, or &lt;code&gt;null&lt;/code&gt;
                      if no suitable replacement can be found.                    
                </returns>
            </javadoc>
            <javadoc line="41">
                Returns the path for this object&apos;s parent,
                  or &lt;code&gt;null&lt;/code&gt; if this object does not name a parent
                  folder.                
                <return>
                    the path as a String for this object&apos;s parent,
                      or &lt;code&gt;null&lt;/code&gt; if this object does not name a parent
                      folder                    
                </return>
                <see>
                    java.io.File#getParent()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParent" type="String" line="51">
                <scope line="52"/>
                <scope line="55"/>
                <scope line="58"/>
            </method>
            <javadoc line="62">
                Returns a File object representing this object&apos;s parent,
                  or &lt;code&gt;null&lt;/code&gt; if this object does not name a parent
                  folder.                
                <return>
                    a File object representing this object&apos;s parent,
                      or &lt;code&gt;null&lt;/code&gt; if this object does not name a parent
                      folder                    
                </return>
                <see>
                    java.io.File#getParentFile()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParentFile" type="File" line="72">
                <scope line="73"/>
                <scope line="76"/>
                <scope line="79"/>
            </method>
            <method name="listFiles" type="File[]" line="83"/>
            <method name="listFiles" type="File[]" line="86">
                <params>
                    <param name="includeHiddenFiles" type="boolean"/>
                </params>
                <declaration name="files" type="File[]" line="87"/>
                <scope line="88">
                    <declaration name="v" type="Vector" line="89"/>
                    <declaration name="nameCount" type="int" line="90"/>
                    <scope line="91">
                        <scope line="92"/>
                    </scope>
                </scope>
            </method>
            <method name="isLink" type="boolean" line="100"/>
            <javadoc line="100">
                @return Whether this shell folder is a link                
            </javadoc>
            <method name="getLinkLocation" type="ShellFolder" line="104"/>
            <javadoc line="104">
                @return The shell folder linked to by this shell folder, or null
                  if this shell folder is not a link                
            </javadoc>
            <method name="getDisplayName" type="String" line="109"/>
            <javadoc line="109">
                @return The name used to display this shell folder                
            </javadoc>
            <method name="getFolderType" type="String" line="113"/>
            <javadoc line="113">
                @return The type of shell folder as a string                
            </javadoc>
            <method name="getExecutableType" type="String" line="117"/>
            <javadoc line="117">
                @return The executable type as a string                
            </javadoc>
            <javadoc line="121">
                Compares this ShellFolder with the specified ShellFolder for order.                
                <see>
                    #compareTo(Object)                    
                </see>
            </javadoc>
            <method name="compareTo" type="int" line="125">
                <params>
                    <param name="file2" type="File"/>
                </params>
                <scope line="126">
                    <scope line="127"/>
                    <scope line="130"/>
                </scope>
                <scope line="134">
                    <scope line="135"/>
                    <scope line="138"/>
                </scope>
            </method>
            <javadoc line="143">
                @param getLargeIcon whether to return large icon (ignored in base implementation)                
                <return>
                    The icon used to display this shell folder                    
                </return>
            </javadoc>
            <method name="getIcon" type="Image" line="147">
                <params>
                    <param name="getLargeIcon" type="boolean"/>
                </params>
            </method>
            <declaration name="shellFolderManager" type="ShellFolderManager" line="150"/>
            <declaration name="invoker" type="Invoker" line="151"/>
            <scope line="152">
                <declaration name="managerClassName" type="String" line="153"/>
                <declaration name="managerClass" type="Class" line="154"/>
                <scope line="155"/>
                <scope line="158"/>
                <scope line="160"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
            </scope>
            <javadoc line="176">
                Return a shell folder from a file object                
                <exception>
                    FileNotFoundException if file does not exist                    
                </exception>
            </javadoc>
            <method name="getShellFolder" type="ShellFolder" line="180">
                <params>
                    <param name="file" type="File"/>
                </params>
                <scope line="181"/>
                <scope line="184"/>
            </method>
            <javadoc line="189">
                @param key a &lt;code&gt;String&lt;/code&gt;                
                <return>
                    An Object matching the string &lt;code&gt;key&lt;/code&gt;.                    
                </return>
                <see>
                    ShellFolderManager#get(String)                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="194">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="197">
                Does &lt;code&gt;dir&lt;/code&gt; represent a &quot;computer&quot; such as a node on the network, or
                  &quot;My Computer&quot; on the desktop.                
            </javadoc>
            <method name="isComputerNode" type="boolean" line="201">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="204">
                @return Whether this is a file system root directory                
            </javadoc>
            <method name="isFileSystemRoot" type="boolean" line="207">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="210">
                Canonicalizes files that don&apos;t have symbolic links in their path.
                  Normalizes files that do, preserving symbolic links from being resolved.                
            </javadoc>
            <method name="getNormalizedFile" type="File" line="214">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="canonical" type="File" line="215"/>
                <scope line="216"/>
            </method>
            <method name="sort" type="void" line="221">
                <params>
                    <param name="files" type="List&lt;? extends File&gt;"/>
                </params>
                <scope line="222"/>
                <anonymous_class line="225">
                    <method name="call" type="Void" line="226">
                        <declaration name="commonParent" type="File" line="227"/>
                        <scope line="228">
                            <declaration name="parent" type="File" line="229"/>
                            <scope line="230"/>
                            <scope line="234"/>
                            <scope line="237">
                                <scope line="238"/>
                            </scope>
                        </scope>
                        <scope line="244"/>
                        <scope line="247"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="sortChildren" type="void" line="255">
                <params>
                    <param name="files" type="List&lt;? extends File&gt;"/>
                </params>
                <anonymous_class line="256">
                    <method name="call" type="Void" line="257"/>
                </anonymous_class>
            </method>
            <method name="isAbsolute" type="boolean" line="264"/>
            <method name="getAbsoluteFile" type="File" line="267"/>
            <method name="canRead" type="boolean" line="270"/>
            <javadoc line="273">
                Returns true if folder allows creation of children.
                  True for the &quot;Desktop&quot; folder, but false for the &quot;My Computer&quot;
                  folder.                
            </javadoc>
            <method name="canWrite" type="boolean" line="278"/>
            <method name="exists" type="boolean" line="281"/>
            <method name="isDirectory" type="boolean" line="284"/>
            <method name="isFile" type="boolean" line="287"/>
            <method name="lastModified" type="long" line="290"/>
            <method name="length" type="long" line="293"/>
            <method name="createNewFile" type="boolean" line="296"/>
            <method name="delete" type="boolean" line="299"/>
            <method name="deleteOnExit" type="void" line="302">
                <scope line="303"/>
                <scope line="306"/>
            </method>
            <method name="mkdir" type="boolean" line="309"/>
            <method name="mkdirs" type="boolean" line="312"/>
            <method name="renameTo" type="boolean" line="315">
                <params>
                    <param name="dest" type="File"/>
                </params>
            </method>
            <method name="setLastModified" type="boolean" line="318">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <method name="setReadOnly" type="boolean" line="321"/>
            <method name="toString" type="String" line="324"/>
            <method name="getFolderColumns" type="ShellFolderColumnInfo[]" line="327">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <declaration name="columns" type="ShellFolderColumnInfo[]" line="328"/>
                <scope line="329"/>
                <scope line="332"/>
            </method>
            <method name="getFolderColumns" type="ShellFolderColumnInfo[]" line="337"/>
            <method name="getFolderColumnValue" type="Object" line="340">
                <params>
                    <param name="file" type="File"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="341">
                    <declaration name="value" type="Object" line="342"/>
                    <scope line="343"/>
                </scope>
                <scope line="347"/>
                <scope line="356"/>
                <declaration name="time" type="long" line="359"/>
            </method>
            <method name="getFolderColumnValue" type="Object" line="365">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="368">
                Invokes the {@code task} which doesn&apos;t throw checked exceptions
                  from its {@code call} method. If invokation is interrupted then Thread.currentThread().isInterrupted() will
                  be set and result will be {@code null}                
            </javadoc>
            <method name="invoke" type="T" line="373">
                <params>
                    <param name="task" type="Callable&lt;T&gt;"/>
                </params>
                <scope line="374"/>
                <scope line="377"/>
            </method>
            <javadoc line="381">
                Invokes the {@code task} which throws checked exceptions from its {@code call} method.
                  If invokation is interrupted then Thread.currentThread().isInterrupted() will
                  be set and InterruptedException will be thrown as well.                
            </javadoc>
            <method name="invoke" type="T" line="386">
                <params>
                    <param name="task" type="Callable&lt;T&gt;"/>
                    <param name="exceptionClass" type="Class&lt;E&gt;"/>
                </params>
                <scope line="387"/>
                <scope line="390">
                    <scope line="391"/>
                    <scope line="394"/>
                    <scope line="398"/>
                </scope>
            </method>
            <interface name="Invoker">
                <javadoc line="404">
                    Interface allowing to invoke tasks in different environments on different platforms.                    
                </javadoc>
                <method name="invoke" type="T" line="408"/>
                <javadoc line="408">
                    Invokes a callable task.                    
                    <param>
                        task a task to invoke                        
                    </param>
                    <throws>
                        Exception {@code InterruptedException} or an exception that was thrown from the {@code task}                        
                    </throws>
                    <return>
                        the result of {@code task}&apos;s invokation                        
                    </return>
                </javadoc>
            </interface>
            <declaration name="DEFAULT_COMPARATOR" type="Comparator" line="416"/>
            <javadoc line="416">
                Provides a default comparator for the default column set                
            </javadoc>
            <anonymous_class line="419">
                <method name="compare" type="int" line="420">
                    <params>
                        <param name="o1" type="Object"/>
                        <param name="o2" type="Object"/>
                    </params>
                    <declaration name="gt" type="int" line="421"/>
                    <scope line="422"/>
                    <scope line="425"/>
                    <scope line="428"/>
                    <scope line="431"/>
                    <scope line="434"/>
                </method>
            </anonymous_class>
            <declaration name="FILE_COMPARATOR" type="Comparator&amp;lt;File&amp;gt;" line="441"/>
            <anonymous_class line="441">
                <method name="compare" type="int" line="442">
                    <params>
                        <param name="f1" type="File"/>
                        <param name="f2" type="File"/>
                    </params>
                    <declaration name="sf1" type="ShellFolder" line="443"/>
                    <declaration name="sf2" type="ShellFolder" line="444"/>
                    <scope line="445">
                        <scope line="447"/>
                    </scope>
                    <scope line="451">
                        <scope line="453"/>
                    </scope>
                    <scope line="457"/>
                    <scope line="460"/>
                    <scope line="463"/>
                    <scope line="466">
                        <declaration name="name1" type="String" line="467"/>
                        <declaration name="name2" type="String" line="468"/>
                        <declaration name="diff" type="int" line="469"/>
                        <scope line="470"/>
                        <scope line="473"/>
                    </scope>
                </method>
            </anonymous_class>
        </class>
    </source>