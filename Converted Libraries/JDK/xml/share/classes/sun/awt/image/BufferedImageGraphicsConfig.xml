<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.AWTException"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.image.WritableRaster"/>
        <class name="BufferedImageGraphicsConfig" line="17">
            <extends class="GraphicsConfiguration"/>
            <declaration name="numconfigs" type="int" line="18"/>
            <declaration name="configs" type="BufferedImageGraphicsConfig" line="19"/>
            <method name="getConfig" type="BufferedImageGraphicsConfig" line="20">
                <params>
                    <param name="bImg" type="BufferedImage"/>
                </params>
                <declaration name="ret" type="BufferedImageGraphicsConfig" line="21"/>
                <declaration name="type" type="int" line="22"/>
                <scope line="23">
                    <scope line="25"/>
                </scope>
                <scope line="30"/>
            </method>
            <declaration name="gd" type="GraphicsDevice" line="35"/>
            <declaration name="model" type="ColorModel" line="36"/>
            <declaration name="raster" type="Raster" line="37"/>
            <declaration name="width" type="int" line="38"/>
            <method name="BufferedImageGraphicsConfig" type="constructor" line="39">
                <params>
                    <param name="bufImg" type="BufferedImage"/>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="40"/>
                <scope line="43">
                    <declaration name="g2d" type="Graphics2D" line="44"/>
                </scope>
            </method>
            <javadoc line="52">
                Return the graphics device associated with this configuration.                
            </javadoc>
            <method name="getDevice" type="GraphicsDevice" line="55"/>
            <javadoc line="58">
                Returns a BufferedImage with channel layout and color model
                  compatible with this graphics configuration.  This method
                  has nothing to do with memory-mapping
                  a device.  This BufferedImage has
                  a layout and color model
                  that is closest to this native device configuration and thus
                  can be optimally blitted to this device.                
            </javadoc>
            <method name="createCompatibleImage" type="BufferedImage" line="67">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="wr" type="WritableRaster" line="68"/>
            </method>
            <javadoc line="71">
                Returns the color model associated with this configuration.                
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="74"/>
            <javadoc line="77">
                Returns the color model associated with this configuration that
                  supports the specified transparency.                
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="81">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <scope line="82"/>
            </method>
            <javadoc line="96">
                Returns the default Transform for this configuration.  This
                  Transform is typically the Identity transform for most normal
                  screens.  Device coordinates for screen and printer devices will
                  have the origin in the upper left-hand corner of the target region of
                  the device, with X coordinates
                  increasing to the right and Y coordinates increasing downwards.
                  For image buffers, this Transform will be the Identity transform.                
            </javadoc>
            <method name="getDefaultTransform" type="AffineTransform" line="105"/>
            <javadoc line="108">
                Returns a Transform that can be composed with the default Transform
                  of a Graphics2D so that 72 units in user space will equal 1 inch
                  in device space.
                  Given a Graphics2D, g, one can reset the transformation to create
                  such a mapping by using the following pseudocode:
                  &lt;pre&gt;
                  GraphicsConfiguration gc = g.getGraphicsConfiguration();
                  g.setTransform(gc.getDefaultTransform());
                  g.transform(gc.getNormalizingTransform());
                  &lt;/pre&gt;
                  Note that sometimes this Transform will be identity (e.g. for
                  printers or metafile output) and that this Transform is only
                  as accurate as the information supplied by the underlying system.
                  For image buffers, this Transform will be the Identity transform,
                  since there is no valid distance measurement.                
            </javadoc>
            <method name="getNormalizingTransform" type="AffineTransform" line="125"/>
            <method name="getBounds" type="Rectangle" line="128"/>
        </class>
    </source>