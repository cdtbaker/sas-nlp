<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.awt.DisplayChangedListener"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <class name="VolatileSurfaceManager" line="15">
            <extends class="SurfaceManager"/>
            <implements interface="DisplayChangedListener"/>
            <javadoc line="15">
                This SurfaceManager variant manages an accelerated volatile surface, if it
                  is possible to create that surface.  If there is limited accelerated
                  memory, or if the volatile surface disappears due to an operating system
                  event, the VolatileSurfaceManager will attempt to restore the
                  accelerated surface.  If that fails, a system memory surface will be
                  created in its place.                
            </javadoc>
            <declaration name="vImg" type="SunVolatileImage" line="24"/>
            <javadoc line="24">
                A reference to the VolatileImage whose contents are being managed.                
            </javadoc>
            <declaration name="sdAccel" type="SurfaceData" line="28"/>
            <javadoc line="28">
                The accelerated SurfaceData object.                
            </javadoc>
            <declaration name="sdBackup" type="SurfaceData" line="32"/>
            <javadoc line="32">
                The software-based SurfaceData object.  Only create when first asked
                  to (otherwise it is a waste of memory as it will only be used in
                  situations of surface loss).                
            </javadoc>
            <declaration name="sdCurrent" type="SurfaceData" line="38"/>
            <javadoc line="38">
                The current SurfaceData object.                
            </javadoc>
            <declaration name="sdPrevious" type="SurfaceData" line="42"/>
            <javadoc line="42">
                A record-keeping object.  This keeps track of which SurfaceData was
                  in use during the last call to validate().  This lets us see whether
                  the SurfaceData object has changed since then and allows us to return
                  the correct returnCode to the user in the validate() call.                
            </javadoc>
            <declaration name="lostSurface" type="boolean" line="49"/>
            <javadoc line="49">
                Tracks loss of surface contents; queriable by user to see whether
                  contents need to be restored.                
            </javadoc>
            <declaration name="context" type="Object" line="54"/>
            <javadoc line="54">
                Context for extra initialization parameters.                
            </javadoc>
            <method name="VolatileSurfaceManager" type="constructor" line="58">
                <params>
                    <param name="vImg" type="SunVolatileImage"/>
                    <param name="context" type="Object"/>
                </params>
                <declaration name="ge" type="GraphicsEnvironment" line="61"/>
                <scope line="62"/>
            </method>
            <javadoc line="66">
                This init function is separate from the constructor because the
                  things we are doing here necessitate the object&apos;s existence.
                  Otherwise, we end up calling into a subclass&apos; overridden method
                  during construction, before that subclass is completely constructed.                
            </javadoc>
            <method name="initialize" type="void" line="72">
                <scope line="73">
                    <scope line="75"/>
                </scope>
                <scope line="79"/>
            </method>
            <method name="getPrimarySurfaceData" type="SurfaceData" line="83"/>
            <method name="isAccelerationEnabled" type="boolean" line="86"/>
            <javadoc line="86">
                Returns true if acceleration is enabled.  If not, we simply use the
                  backup SurfaceData object and return quickly from most methods
                  in this class.                
            </javadoc>
            <javadoc line="92">
                Get the image ready for rendering.  This method is called to make
                  sure that the accelerated SurfaceData exists and is
                  ready to be used.  Users call this method prior to any set of
                  rendering to or from the image, to make sure the image is ready
                  and compatible with the given GraphicsConfiguration.
                  The image may not be &quot;ready&quot; if either we had problems creating
                  it in the first place (e.g., there was no space in vram) or if
                  the surface became lost (e.g., some other app or the OS caused
                  vram surfaces to be removed).
                  Note that we want to return RESTORED in any situation where the
                  SurfaceData is different than it was last time.  So whether it&apos;s
                  software or hardware, if we have a different SurfaceData object,
                  then the contents have been altered and we must reflect that
                  change to the user.                
            </javadoc>
            <method name="validate" type="int" line="108">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <declaration name="returnCode" type="int" line="109"/>
                <declaration name="lostSurfaceTmp" type="boolean" line="110"/>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="116">
                        <scope line="118"/>
                        <scope line="123"/>
                    </scope>
                    <scope line="127">
                        <scope line="128"/>
                        <scope line="135"/>
                    </scope>
                    <scope line="139"/>
                </scope>
                <scope line="143"/>
                <scope line="148"/>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Returns true if rendering data was lost since the last validate call.                
                <see>
                    java.awt.image.VolatileImage#contentsLost                    
                </see>
            </javadoc>
            <method name="contentsLost" type="boolean" line="161"/>
            <method name="initAcceleratedSurface" type="SurfaceData" line="164"/>
            <javadoc line="164">
                Creates a new accelerated surface that is compatible with the
                  current GraphicsConfiguration.  Returns the new accelerated
                  SurfaceData object, or null if the surface creation was not successful.
                  Platform-specific subclasses should initialize an accelerated
                  surface (e.g. a DirectDraw surface on Windows, an OpenGL pbuffer,
                  or an X11 pixmap).                
            </javadoc>
            <javadoc line="173">
                Creates a software-based surface (of type BufImgSurfaceData).
                  The software representation is only created when needed, which
                  is only during some situation in which the hardware surface
                  cannot be allocated.  This allows apps to at least run,
                  albeit more slowly than they would otherwise.                
            </javadoc>
            <method name="getBackupSurface" type="SurfaceData" line="180">
                <scope line="181">
                    <declaration name="bImg" type="BufferedImage" line="182"/>
                </scope>
            </method>
            <javadoc line="188">
                Set contents of the current SurfaceData to default state (i.e. clear
                  the background).                
            </javadoc>
            <method name="initContents" type="void" line="192">
                <scope line="193">
                    <declaration name="g" type="Graphics" line="194"/>
                </scope>
            </method>
            <javadoc line="199">
                Called from a SurfaceData object, indicating that our
                  accelerated surface has been lost and should be restored (perhaps
                  using a backup system memory surface).  Returns the newly restored
                  primary SurfaceData object.                
            </javadoc>
            <method name="restoreContents" type="SurfaceData" line="205"/>
            <javadoc line="208">
                If the accelerated surface is the current SurfaceData for this manager,
                  sets the variable lostSurface to true, which indicates that something
                  happened to the image under management.  This variable is used in the
                  validate method to tell the caller that the surface contents need to
                  be restored.                
            </javadoc>
            <method name="acceleratedSurfaceLost" type="void" line="215">
                <scope line="216"/>
            </method>
            <javadoc line="220">
                Restore sdAccel in case it was lost.  Do nothing in this
                  default case; platform-specific implementations may do more in
                  this situation as appropriate.                
            </javadoc>
            <method name="restoreAcceleratedSurface" type="void" line="225"/>
            <javadoc line="227">
                Called from SunGraphicsEnv when there has been a display mode change.
                  Note that we simply invalidate hardware surfaces here; we do not
                  attempt to recreate or re-render them.  This is to avoid threading
                  conflicts with the native toolkit and associated threads.  Instead,
                  we just nullify the old surface data object and wait for a future
                  method in the rendering process to recreate the surface.                
            </javadoc>
            <method name="displayChanged" type="void" line="235">
                <scope line="236"/>
                <scope line="240">
                    <declaration name="oldData" type="SurfaceData" line="243"/>
                </scope>
            </method>
            <javadoc line="249">
                When device palette changes, need to force a new copy
                  of the image into our hardware cache to update the
                  color indices of the pixels (indexed mode only).                
            </javadoc>
            <method name="paletteChanged" type="void" line="254"/>
            <javadoc line="257">
                Called by validate() to see whether the GC passed in is ok for
                  rendering to.  This generic implementation checks to see
                  whether the GC is either null or is from the same
                  device as the one that this image was created on.  Platform-
                  specific implementations may perform other checks as
                  appropriate.                
            </javadoc>
            <method name="isConfigValid" type="boolean" line="265">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="getCapabilities" type="ImageCapabilities" line="268">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="269"/>
            </method>
            <class name="AcceleratedImageCapabilities" line="274">
                <extends class="ImageCapabilities"/>
                <method name="AcceleratedImageCapabilities" type="constructor" line="275"/>
                <method name="isAccelerated" type="boolean" line="278"/>
                <method name="isTrueVolatile" type="boolean" line="281"/>
            </class>
            <javadoc line="285">
                Releases any associated hardware memory for this image by
                  calling flush on sdAccel.  This method forces a lostSurface
                  situation so any future operations on the image will need to
                  revalidate the image first.                
            </javadoc>
            <method name="flush" type="void" line="291">
                <declaration name="oldSD" type="SurfaceData" line="293"/>
                <scope line="295"/>
            </method>
        </class>
    </source>