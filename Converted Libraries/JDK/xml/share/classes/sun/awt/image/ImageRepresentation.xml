<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.AWTException"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="sun.awt.image.ByteComponentRaster"/>
        <import package="sun.awt.image.IntegerComponentRaster"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="sun.awt.image.ImageWatched"/>
        <import package="java.util.Hashtable"/>
        <class name="ImageRepresentation" line="50">
            <extends class="ImageWatched"/>
            <comment line="57">
                used by windows native code only -- internal state REMIND ATTN @@                
            </comment>
            <comment line="107">
                                
            </comment>
            <comment line="725">
                                
            </comment>
            <implements interface="ImageConsumer"/>
            <declaration name="src" type="InputStreamImageSource" line="52"/>
            <declaration name="image" type="ToolkitImage" line="53"/>
            <declaration name="tag" type="int" line="54"/>
            <declaration name="pData" type="long" line="56"/>
            <declaration name="width" type="int" line="58"/>
            <declaration name="height" type="int" line="59"/>
            <declaration name="hints" type="int" line="60"/>
            <declaration name="availinfo" type="int" line="62"/>
            <declaration name="newbits" type="Rectangle" line="64"/>
            <declaration name="bimage" type="BufferedImage" line="66"/>
            <declaration name="biRaster" type="WritableRaster" line="67"/>
            <declaration name="cmodel" type="ColorModel" line="68"/>
            <declaration name="srcModel" type="ColorModel" line="69"/>
            <declaration name="srcLUT" type="int[]" line="70"/>
            <declaration name="srcLUTtransIndex" type="int" line="71"/>
            <declaration name="numSrcLUT" type="int" line="72"/>
            <declaration name="forceCMhint" type="boolean" line="73"/>
            <declaration name="sstride" type="int" line="74"/>
            <declaration name="isDefaultBI" type="boolean" line="75"/>
            <declaration name="isSameCM" type="boolean" line="76"/>
            <method name="initIDs" type="void" line="78"/>
            <scope line="80"/>
            <javadoc line="86">
                Create an ImageRepresentation for the given Image.  The
                  width and height are unknown at this point.  The color
                  model is a hint as to the color model to use when creating
                  the buffered image.  If null, the src color model will
                  be used.                
            </javadoc>
            <method name="ImageRepresentation" type="constructor" line="94">
                <params>
                    <param name="im" type="ToolkitImage"/>
                    <param name="cmodel" type="ColorModel"/>
                    <param name="forceCMhint" type="boolean"/>
                </params>
                <scope line="97"/>
            </method>
            <method name="reconstruct" type="void" line="107">
                <params>
                    <param name="flags" type="int"/>
                </params>
                <scope line="108"/>
                <declaration name="missinginfo" type="int" line="111"/>
                <scope line="112">
                    <scope line="114">
                        <scope line="119">
                            <scope line="120"/>
                            <scope line="122"/>
                        </scope>
                    </scope>
                    <scope line="128"/>
                </scope>
            </method>
            <method name="setDimensions" type="void" line="134">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="150">
                    dimension mismatch =&gt; trigger recreation of the buffer                    
                </comment>
                <scope line="135"/>
                <scope line="144"/>
                <scope line="149"/>
            </method>
            <method name="getWidth" type="int" line="160"/>
            <method name="getHeight" type="int" line="164"/>
            <method name="getColorModel" type="ColorModel" line="168"/>
            <method name="getBufferedImage" type="BufferedImage" line="172"/>
            <javadoc line="176">
                Returns the BufferedImage that will be used as the representation of
                  the pixel data.  Subclasses can override this method to return
                  platform specific subclasses of BufferedImage that may or may not be
                  accelerated.
                  It is subclass&apos; responsibility to propagate acceleration priority
                  to the newly created image.                
            </javadoc>
            <method name="createImage" type="BufferedImage" line="189">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="raster" type="WritableRaster"/>
                    <param name="isRasterPremultiplied" type="boolean"/>
                    <param name="properties" type="Hashtable"/>
                </params>
                <declaration name="bi" type="BufferedImage" line="190"/>
            </method>
            <method name="setProperties" type="void" line="196">
                <params>
                    <param name="props" type="Hashtable<?,?>"/>
                </params>
                <scope line="197"/>
            </method>
            <method name="setColorModel" type="void" line="204">
                <params>
                    <param name="model" type="ColorModel"/>
                </params>
                <comment line="210">
                    Check to see if model is INT_RGB                    
                </comment>
                <comment line="213">
                    REMIND:                    
                </comment>
                <comment line="214">
                    Probably need to composite anyway so force ARGB                    
                </comment>
                <comment line="233">
                    If it is INT_RGB or INT_ARGB, use the model                    
                </comment>
                <scope line="205"/>
                <scope line="211">
                    <scope line="212"/>
                    <scope line="218">
                        <declaration name="icm" type="IndexColorModel" line="219"/>
                    </scope>
                </scope>
                <scope line="227">
                    <scope line="228"/>
                    <scope line="232">
                        <declaration name="dcm" type="DirectColorModel" line="234"/>
                        <scope line="237"/>
                    </scope>
                </scope>
            </method>
            <method name="createBufferedImage" type="void" line="247">
                <comment line="248">
                    REMIND:  Be careful!  Is this called everytime there is a                    
                </comment>
                <comment line="249">
                    startProduction?  We only want to call it if it is new or                    
                </comment>
                <comment line="250">
                    there is an error                    
                </comment>
                <comment line="257">
                    Create a default image                    
                </comment>
                <scope line="252"/>
                <scope line="256"/>
                <declaration name="type" type="int" line="262"/>
                <scope line="266"/>
                <scope line="269">
                    <declaration name="dcm" type="DirectColorModel" line="270"/>
                    <scope line="273"/>
                </scope>
            </method>
            <method name="convertToRGB" type="void" line="279">
                <comment line="285">
                    Note that stealData() requires a markDirty() afterwards                    
                </comment>
                <comment line="286">
                    since we modify the data in it.                    
                </comment>
                <comment line="309">
                    We modified the data array directly above so mark it as dirty now...                    
                </comment>
                <declaration name="w" type="int" line="280"/>
                <declaration name="h" type="int" line="281"/>
                <declaration name="size" type="int" line="282"/>
                <declaration name="dbi" type="DataBufferInt" line="284"/>
                <declaration name="newpixels" type="int" line="287"/>
                <scope line="291">
                    <declaration name="bct" type="ByteComponentRaster" line="292"/>
                    <declaration name="data" type="byte[]" line="293"/>
                    <declaration name="coff" type="int" line="294"/>
                    <scope line="295"/>
                </scope>
                <scope line="299">
                    <declaration name="srcpixels" type="Object" line="300"/>
                    <declaration name="off" type="int" line="301"/>
                    <scope line="302">
                        <scope line="303"/>
                    </scope>
                </scope>
                <declaration name="bandMasks" type="int" line="315"/>
            </method>
            <method name="setHints" type="void" line="329">
                <params>
                    <param name="h" type="int"/>
                </params>
                <scope line="330"/>
            </method>
            <method name="setICMpixels" type="void" line="336"/>
            <method name="setDiffICM" type="int" line="339"/>
            <declaration name="s_useNative" type="boolean" line="343"/>
            <method name="setPixels" type="void" line="347">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pix" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <comment line="356">
                    REMIND: What if the model doesn&apos;t fit in default color model?                    
                </comment>
                <comment line="372">
                    Overflow protection below                    
                </comment>
                <comment line="373">
                    Overflow protection below                    
                </comment>
                <comment line="378">
                    Must be overflow                    
                </comment>
                <comment line="384">
                    Must be overflow                    
                </comment>
                <comment line="395">
                    x,y,x1,y1 are all &gt;= 0, so w,h must be &gt;= 0                    
                </comment>
                <comment line="398">
                    off is first pixel read so it must be in bounds                    
                </comment>
                <comment line="400">
                    They overflowed their own array                    
                </comment>
                <comment line="403">
                    pix.length and off are &gt;= 0 so remainder &gt;= 0                    
                </comment>
                <comment line="406">
                    They overflowed their own array                    
                </comment>
                <comment line="418">
                    They overflowed their own array.                    
                </comment>
                <comment line="436">
                    Note that setDiffICM modified the raster directly                    
                </comment>
                <comment line="437">
                    so we must mark it as changed                    
                </comment>
                <comment line="465">
                    Fill in the new lut                    
                </comment>
                <comment line="471">
                    Note that setICMpixels modifies the raster directly                    
                </comment>
                <comment line="472">
                    so we must mark it as changed afterwards                    
                </comment>
                <comment line="480">
                    It is an IndexColorModel                    
                </comment>
                <declaration name="lineOff" type="int" line="348"/>
                <declaration name="poff" type="int" line="349"/>
                <declaration name="newLUT" type="int[]" line="350"/>
                <scope line="352"/>
                <scope line="357">
                    <scope line="358">
                        <scope line="359"/>
                    </scope>
                    <scope line="365"/>
                    <declaration name="biWidth" type="int" line="369"/>
                    <declaration name="biHeight" type="int" line="370"/>
                    <declaration name="x1" type="int" line="372"/>
                    <declaration name="y1" type="int" line="373"/>
                    <scope line="374"/>
                    <scope line="377"/>
                    <scope line="380"/>
                    <scope line="383"/>
                    <scope line="386"/>
                    <scope line="389"/>
                    <scope line="392"/>
                    <scope line="399"/>
                    <declaration name="remainder" type="int" line="404"/>
                    <scope line="405"/>
                    <declaration name="num" type="int" line="409"/>
                    <scope line="410"/>
                    <scope line="412"/>
                    <scope line="414"/>
                    <scope line="417"/>
                    <scope line="425">
                        <declaration name="icm" type="IndexColorModel" line="426"/>
                        <declaration name="bct" type="ByteComponentRaster" line="427"/>
                        <declaration name="numlut" type="int" line="428"/>
                        <scope line="432"/>
                        <scope line="435">
                            <scope line="439">
                                <declaration name="hasAlpha" type="boolean" line="440"/>
                                <scope line="441"/>
                                <declaration name="nbits" type="int" line="444"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="459">
                        <declaration name="pixel" type="int" line="460"/>
                        <declaration name="iraster" type="IntegerComponentRaster" line="461"/>
                        <scope line="463">
                            <scope line="464"/>
                            <scope line="470"/>
                            <scope line="477">
                                <declaration name="storage" type="int[]" line="478"/>
                                <declaration name="soff" type="int" line="479"/>
                                <scope line="482">
                                    <scope line="484"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="491">
                            <declaration name="storage" type="int[]" line="492"/>
                            <scope line="493">
                                <scope line="495"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="505">
                        <declaration name="bt" type="ByteComponentRaster" line="506"/>
                        <scope line="507"/>
                        <scope line="510">
                            <declaration name="bpix" type="byte[]" line="511"/>
                            <scope line="513"/>
                        </scope>
                    </scope>
                    <scope line="520">
                        <scope line="521">
                            <scope line="523"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="532"/>
            </method>
            <method name="setPixels" type="void" line="540">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pix" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <comment line="548">
                    REMIND: What if the model doesn&apos;t fit in default color model?                    
                </comment>
                <comment line="562">
                    REMIND: Right now we don&apos;t support writing back into ICM                    
                </comment>
                <comment line="563">
                    images.                    
                </comment>
                <comment line="576">
                    Need to pack the data                    
                </comment>
                <comment line="600">
                    Note: manual modification of pixels, mark the                    
                </comment>
                <comment line="601">
                    raster as changed                    
                </comment>
                <comment line="632">
                    Can&apos;t do this here since we might need to transform/clip                    
                </comment>
                <comment line="633">
                    the region                    
                </comment>
                <declaration name="lineOff" type="int" line="541"/>
                <declaration name="poff" type="int" line="542"/>
                <scope line="544"/>
                <scope line="549">
                    <scope line="550">
                        <scope line="551"/>
                    </scope>
                    <declaration name="storage" type="int[]" line="557"/>
                    <declaration name="yoff" type="int" line="558"/>
                    <declaration name="pixel" type="int" line="559"/>
                    <scope line="561"/>
                    <scope line="568">
                        <declaration name="iraster" type="IntegerComponentRaster" line="569"/>
                        <scope line="572"/>
                        <scope line="575">
                            <scope line="577"/>
                        </scope>
                    </scope>
                    <scope line="583">
                        <scope line="585"/>
                        <scope line="589">
                            <declaration name="iraster" type="IntegerComponentRaster" line="590"/>
                            <declaration name="data" type="int[]" line="592"/>
                            <scope line="593">
                                <declaration name="sstride" type="int" line="594"/>
                                <declaration name="doff" type="int" line="595"/>
                                <scope line="596"/>
                            </scope>
                            <scope line="604">
                                <scope line="605">
                                    <scope line="607"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="616">
                            <declaration name="tmp" type="Object" line="617"/>
                            <scope line="619">
                                <scope line="621"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="634"/>
            </method>
            <method name="getOpaqueRGBImage" type="BufferedImage" line="639">
                <comment line="645">
                    Note that we steal the data array here, but only for reading...                    
                </comment>
                <scope line="640">
                    <declaration name="w" type="int" line="641"/>
                    <declaration name="h" type="int" line="642"/>
                    <declaration name="size" type="int" line="643"/>
                    <declaration name="db" type="DataBufferInt" line="646"/>
                    <declaration name="pixels" type="int[]" line="647"/>
                    <scope line="649">
                        <scope line="650"/>
                    </scope>
                    <declaration name="opModel" type="ColorModel" line="655"/>
                    <declaration name="bandmasks" type="int" line="660"/>
                    <declaration name="opRaster" type="WritableRaster" line="661"/>
                    <scope line="665">
                        <declaration name="opImage" type="BufferedImage" line="666"/>
                    </scope>
                    <scope line="669"/>
                </scope>
            </method>
            <declaration name="consuming" type="boolean" line="676"/>
            <method name="imageComplete" type="void" line="678">
                <params>
                    <param name="status" type="int"/>
                </params>
                <scope line="679"/>
                <declaration name="done" type="boolean" line="682"/>
                <declaration name="info" type="int" line="683"/>
                <scope line="705">
                    <scope line="706">
                        <scope line="711"/>
                    </scope>
                </scope>
            </method>
            <method name="startProduction" type="void" line="724">
                <scope line="725"/>
            </method>
            <declaration name="numWaiters" type="int" line="731"/>
            <method name="checkConsumption" type="void" line="733">
                <scope line="736"/>
            </method>
            <method name="notifyWatcherListEmpty" type="void" line="741"/>
            <method name="decrementWaiters" type="void" line="745"/>
            <method name="prepare" type="boolean" line="750">
                <params>
                    <param name="iw" type="ImageObserver"/>
                </params>
                <comment line="765">
                    Some producers deliver image data synchronously                    
                </comment>
                <scope line="751"/>
                <scope line="754">
                    <scope line="755"/>
                </scope>
                <declaration name="done" type="boolean" line="761"/>
                <scope line="762"/>
            </method>
            <method name="check" type="int" line="771">
                <params>
                    <param name="iw" type="ImageObserver"/>
                </params>
                <scope line="773"/>
                <scope line="776"/>
            </method>
            <method name="drawToBufImage" type="boolean" line="785">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="img" type="ToolkitImage"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="bg" type="Color"/>
                    <param name="iw" type="ImageObserver"/>
                </params>
                <comment line="803">
                    Some producers deliver image data synchronously                    
                </comment>
                <scope line="787"/>
                <scope line="790">
                    <scope line="791"/>
                </scope>
                <declaration name="done" type="boolean" line="797"/>
                <declaration name="abort" type="boolean" line="798"/>
                <scope line="800"/>
                <scope line="807"/>
            </method>
            <method name="drawToBufImage" type="boolean" line="816">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="img" type="ToolkitImage"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="bg" type="Color"/>
                    <param name="iw" type="ImageObserver"/>
                </params>
                <comment line="835">
                    Some producers deliver image data synchronously                    
                </comment>
                <scope line="818"/>
                <scope line="821">
                    <scope line="822"/>
                </scope>
                <declaration name="done" type="boolean" line="829"/>
                <declaration name="abort" type="boolean" line="830"/>
                <scope line="832"/>
                <scope line="839"/>
            </method>
            <method name="drawToBufImage" type="boolean" line="849">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="img" type="ToolkitImage"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="bg" type="Color"/>
                    <param name="iw" type="ImageObserver"/>
                </params>
                <comment line="867">
                    Some producers deliver image data synchronously                    
                </comment>
                <scope line="851"/>
                <scope line="854">
                    <scope line="855"/>
                </scope>
                <declaration name="done" type="boolean" line="861"/>
                <declaration name="abort" type="boolean" line="862"/>
                <scope line="864"/>
                <scope line="871"/>
            </method>
            <method name="drawToBufImage" type="boolean" line="884">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="img" type="ToolkitImage"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="iw" type="ImageObserver"/>
                </params>
                <comment line="903">
                    Some producers deliver image data synchronously                    
                </comment>
                <declaration name="g2" type="Graphics2D" line="885"/>
                <scope line="887"/>
                <scope line="890">
                    <scope line="891"/>
                </scope>
                <declaration name="done" type="boolean" line="897"/>
                <declaration name="abort" type="boolean" line="898"/>
                <scope line="900"/>
                <scope line="907"/>
            </method>
            <method name="abort" type="void" line="914"/>
            <method name="dispose" type="void" line="932"/>
            <method name="setAccelerationPriority" type="void" line="941">
                <params>
                    <param name="priority" type="float"/>
                </params>
                <scope line="942"/>
            </method>
        </class>
    </source>