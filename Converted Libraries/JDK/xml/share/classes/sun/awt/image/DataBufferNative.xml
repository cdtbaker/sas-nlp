<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.image.DataBuffer"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="java.awt.Rectangle"/>
        <class name="DataBufferNative" line="33">
            <extends class="DataBuffer"/>
            <javadoc line="33">
                This class extends &lt;CODE&gt;DataBuffer&lt;/CODE&gt; and allows access to
                  native data via the DataBuffer methods.  Note that, unlike other
                  DataBuffer classes, the data is not stored in this class but
                  has been created and stored elsewhere and this class is used
                  merely to access that data.  Note also that this class subclasses
                  from DataBuffer and not from any of the standard subclasses
                  (e.g., DataBufferInt); those subclasses allow the user to
                  get a pointer to the data and manipulate it directly.  That
                  operation may not be possible or wise with native data.
                  One important use of this DataBuffer class is in accessing the
                  data stored in an offscreen vram surface, such as that created
                  by the createVolatileImage() method.                
            </javadoc>
            <declaration name="surfaceData" type="SurfaceData" line="50"/>
            <declaration name="width" type="int" line="51"/>
            <javadoc line="53">
                Constructor.  The constructor of this object requires a
                  SurfaceData object; that surfaceData object will be used
                  to access the actual pixel data in native code.                
            </javadoc>
            <method name="DataBufferNative" type="constructor" line="58">
                <params>
                    <param name="sData" type="SurfaceData"/>
                    <param name="type" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="getElem" type="int" line="64"/>
            <javadoc line="66">
                getElem returns the pixel value for a given index into the
                  dataBuffer array.  The bank value is currently ignored (the
                  type of data accessed through this class is not stored in
                  separate banks).  The x and y coordinates of a pixel are calculated
                  from the index value and the native getElem() method is
                  called with the internal surfaceData object.                
            </javadoc>
            <method name="getElem" type="int" line="74">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="setElem" type="void" line="78"/>
            <javadoc line="80">
                setElem sets the pixel value of a given index into the
                  dataBuffer array.  The bank value is currently ignored (the
                  type of data accessed through this class is not stored in
                  separate banks).  The x and y coordinates of a pixel are calculated
                  from the index value and the native setElem() method is
                  called with the internal surfaceData object.                
            </javadoc>
            <method name="setElem" type="void" line="88">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
        </class>
    </source>