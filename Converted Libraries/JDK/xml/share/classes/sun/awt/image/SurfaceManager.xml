<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.Color"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.util.Iterator"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.SurfaceDataProxy"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <class name="SurfaceManager" line="40">
            <javadoc line="40">
                The abstract base class that manages the various SurfaceData objects that
                  represent an Image&apos;s contents.  Subclasses can customize how the surfaces
                  are organized, whether to cache the original contents in an accelerated
                  surface, and so on.
                  &lt;p&gt;
                  The SurfaceManager also maintains an arbitrary &quot;cache&quot; mechanism which
                  allows other agents to store data in it specific to their use of this
                  image.  The most common use of the caching mechanism is for destination
                  SurfaceData objects to store cached copies of the source image.                
            </javadoc>
            <class name="ImageAccessor" line="53">
                <method name="getSurfaceManager" type="SurfaceManager" line="54"/>
                <method name="setSurfaceManager" type="void" line="55"/>
            </class>
            <declaration name="imgaccessor" type="ImageAccessor" line="58"/>
            <method name="setImageAccessor" type="void" line="60">
                <params>
                    <param name="ia" type="ImageAccessor"/>
                </params>
                <scope line="61"/>
            </method>
            <javadoc line="67">
                Returns the SurfaceManager object contained within the given Image.                
            </javadoc>
            <method name="getManager" type="SurfaceManager" line="70">
                <params>
                    <param name="img" type="Image"/>
                </params>
                <comment line="73">
                    In practice only a BufferedImage will get here.                    
                </comment>
                <declaration name="sMgr" type="SurfaceManager" line="71"/>
                <scope line="72">
                    <scope line="76">
                        <declaration name="bi" type="BufferedImage" line="77"/>
                    </scope>
                    <scope line="80"/>
                </scope>
            </method>
            <method name="setManager" type="void" line="87">
                <params>
                    <param name="img" type="Image"/>
                    <param name="mgr" type="SurfaceManager"/>
                </params>
            </method>
            <declaration name="cacheMap" type="ConcurrentHashMap" line="91"/>
            <javadoc line="93">
                Return an arbitrary cached object for an arbitrary cache key.
                  Other objects can use this mechanism to store cached data about
                  the source image that will let them save time when using or
                  manipulating the image in the future.
                  &lt;p&gt;
                  Note that the cache is maintained as a simple Map with no
                  attempts to keep it up to date or invalidate it so any data
                  stored here must either not be dependent on the state of the
                  image or it must be individually tracked to see if it is
                  outdated or obsolete.
                  &lt;p&gt;
                  The SurfaceData object of the primary (destination) surface
                  has a StateTracker mechanism which can help track the validity
                  and &quot;currentness&quot; of any data stored here.
                  For convenience and expediency an object stored as cached
                  data may implement the FlushableCacheData interface specified
                  below so that it may be notified immediately if the flush()
                  method is ever called.                
            </javadoc>
            <method name="getCacheData" type="Object" line="113">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="117">
                Store an arbitrary cached object for an arbitrary cache key.
                  See the getCacheData() method for notes on tracking the
                  validity of data stored using this mechanism.                
            </javadoc>
            <method name="setCacheData" type="void" line="122">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="123">
                    <scope line="124">
                        <scope line="125"/>
                    </scope>
                </scope>
            </method>
            <method name="getPrimarySurfaceData" type="SurfaceData" line="133"/>
            <javadoc line="133">
                Returns the main SurfaceData object that &quot;owns&quot; the pixels for
                  this SurfaceManager.  This SurfaceData is used as the destination
                  surface in a rendering operation and is the most authoritative
                  storage for the current state of the pixels, though other
                  versions might be cached in other locations for efficiency.                
            </javadoc>
            <method name="restoreContents" type="SurfaceData" line="142"/>
            <javadoc line="142">
                Restores the primary surface being managed, and then returns the
                  replacement surface.  This is called when an accelerated surface has
                  been &quot;lost&quot;, in an attempt to auto-restore its contents.                
            </javadoc>
            <javadoc line="149">
                Notification that any accelerated surfaces associated with this manager
                  have been &quot;lost&quot;, which might mean that they need to be manually
                  restored or recreated.
                  The default implementation does nothing, but platform-specific
                  variants which have accelerated surfaces should perform any necessary
                  actions.                
            </javadoc>
            <method name="acceleratedSurfaceLost" type="void" line="158"/>
            <javadoc line="160">
                Returns an ImageCapabilities object which can be
                  inquired as to the specific capabilities of this
                  Image.  The capabilities object will return true for
                  isAccelerated() if the image has a current and valid
                  SurfaceDataProxy object cached for the specified
                  GraphicsConfiguration parameter.
                  &lt;p&gt;
                  This class provides a default implementation of the
                  ImageCapabilities that will try to determine if there
                  is an associated SurfaceDataProxy object and if it is
                  up to date, but only works for GraphicsConfiguration
                  objects which implement the ProxiedGraphicsConfig
                  interface defined below.  In practice, all configs
                  which can be accelerated are currently implementing
                  that interface.
                  &lt;p&gt;
                  A null GraphicsConfiguration returns a value based on whether the
                  image is currently accelerated on its default GraphicsConfiguration.                
                <see>
                    java.awt.Image#getCapabilities                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCapabilities" type="ImageCapabilities" line="183">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <class name="ImageCapabilitiesGc" line="187">
                <extends class="ImageCapabilities"/>
                <declaration name="gc" type="GraphicsConfiguration" line="188"/>
                <method name="ImageCapabilitiesGc" type="constructor" line="190">
                    <params>
                        <param name="gc" type="GraphicsConfiguration"/>
                    </params>
                </method>
                <method name="isAccelerated" type="boolean" line="195">
                    <comment line="196">
                        Note that when img.getAccelerationPriority() gets set to 0                        
                    </comment>
                    <comment line="197">
                        we remove SurfaceDataProxy objects from the cache and the                        
                    </comment>
                    <comment line="198">
                        answer will be false.                        
                    </comment>
                    <declaration name="tmpGc" type="GraphicsConfiguration" line="199"/>
                    <scope line="200"/>
                    <scope line="204">
                        <declaration name="proxyKey" type="Object" line="205"/>
                        <scope line="207">
                            <declaration name="sdp" type="SurfaceDataProxy" line="208"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <interface name="ProxiedGraphicsConfig">
                <javadoc line="217">
                    An interface for GraphicsConfiguration objects to implement if
                      their surfaces accelerate images using SurfaceDataProxy objects.
                      Implementing this interface facilitates the default
                      implementation of getImageCapabilities() above.                    
                </javadoc>
                <method name="getProxyKey" type="Object" line="225"/>
                <javadoc line="225">
                    Return the key that destination surfaces created on the
                      given GraphicsConfiguration use to store SurfaceDataProxy
                      objects for their cached copies.                    
                </javadoc>
            </interface>
            <javadoc line="233">
                Releases system resources in use by ancillary SurfaceData objects,
                  such as surfaces cached in accelerated memory.  Subclasses should
                  override to release any of their flushable data.
                  &lt;p&gt;
                  The default implementation will visit all of the value objects
                  in the cacheMap and flush them if they implement the
                  FlushableCacheData interface.                
            </javadoc>
            <method name="flush" type="void" line="242"/>
            <method name="flush" type="void" line="246">
                <params>
                    <param name="deaccelerate" type="boolean"/>
                </params>
                <scope line="247">
                    <declaration name="i" type="Iterator" line="248"/>
                    <scope line="249">
                        <declaration name="o" type="Object" line="250"/>
                        <scope line="251">
                            <scope line="252"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <interface name="FlushableCacheData">
                <javadoc line="260">
                    An interface for Objects used in the SurfaceManager cache
                      to implement if they have data that should be flushed when
                      the Image is flushed.                    
                </javadoc>
                <method name="flush" type="boolean" line="266"/>
                <javadoc line="266">
                    Flush all cached resources.
                      The deaccelerated parameter indicates if the flush is
                      happening because the associated surface is no longer
                      being accelerated (for instance the acceleration priority
                      is set below the threshold needed for acceleration).
                      Returns a boolean that indicates if the cached object is
                      no longer needed and should be removed from the cache.                    
                </javadoc>
            </interface>
            <javadoc line="278">
                Called when image&apos;s acceleration priority is changed.
                  &lt;p&gt;
                  The default implementation will visit all of the value objects
                  in the cacheMap when the priority gets set to 0.0 and flush them
                  if they implement the FlushableCacheData interface.                
            </javadoc>
            <method name="setAccelerationPriority" type="void" line="285">
                <params>
                    <param name="priority" type="float"/>
                </params>
                <scope line="286"/>
            </method>
        </class>
    </source>