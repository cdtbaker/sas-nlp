<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.RasterFormatException"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.MultiPixelPackedSampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Point"/>
        <class name="BytePackedRaster" line="11">
            <extends class="SunWritableRaster"/>
            <javadoc line="11">
                This class is useful for describing 1, 2, or 4 bit image data
                  elements.  This raster has one band whose pixels are packed
                  together into individual bytes in a single byte array.  This type
                  of raster can be used with an IndexColorModel. This raster uses a
                  MultiPixelPackedSampleModel.                
            </javadoc>
            <declaration name="dataBitOffset" type="int" line="19"/>
            <javadoc line="19">
                The data bit offset for each pixel.                
            </javadoc>
            <declaration name="scanlineStride" type="int" line="23"/>
            <javadoc line="23">
                Scanline stride of the image data contained in this Raster.                
            </javadoc>
            <declaration name="pixelBitStride" type="int" line="27"/>
            <javadoc line="27">
                The bit stride of a pixel, equal to the total number of bits
                  required to store a pixel.                
            </javadoc>
            <declaration name="bitMask" type="int" line="32"/>
            <javadoc line="32">
                The bit mask for extracting the pixel.                
            </javadoc>
            <declaration name="data" type="byte[]" line="36"/>
            <javadoc line="36">
                The image data array.                
            </javadoc>
            <declaration name="shiftOffset" type="int" line="40"/>
            <javadoc line="40">
                8 minus the pixel bit stride.                
            </javadoc>
            <declaration name="type" type="int" line="44"/>
            <declaration name="maxX" type="int" line="45"/>
            <javadoc line="45">
                A cached copy of minX + width for use in bounds checks.                
            </javadoc>
            <declaration name="maxY" type="int" line="49"/>
            <javadoc line="49">
                A cached copy of minY + height for use in bounds checks.                
            </javadoc>
            <method name="initIDs" type="void" line="53"/>
            <scope line="54"/>
            <javadoc line="58">
                Constructs a BytePackedRaster with the given SampleModel.
                  The Raster&apos;s upper left corner is origin and it is the same
                  size as the SampleModel.  A DataBuffer large enough to describe the
                  Raster is automatically created.  SampleModel must be of type
                  MultiPixelPackedSampleModel.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    origin          The Point that specified the origin.                    
                </param>
            </javadoc>
            <method name="BytePackedRaster" type="constructor" line="67">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="70">
                Constructs a BytePackedRaster with the given SampleModel
                  and DataBuffer.  The Raster&apos;s upper left corner is origin and
                  it is the same size as the SampleModel.  The DataBuffer is not
                  initialized and must be a DataBufferByte compatible with SampleModel.
                  SampleModel must be of type MultiPixelPackedSampleModel.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    dataBuffer      The DataBufferShort that contains the image data.                    
                </param>
                <param>
                    origin          The Point that specifies the origin.                    
                </param>
            </javadoc>
            <method name="BytePackedRaster" type="constructor" line="80">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="83">
                Constructs a BytePackedRaster with the given SampleModel,
                  DataBuffer, and parent.  DataBuffer must be a DataBufferByte and
                  SampleModel must be of type MultiPixelPackedSampleModel.
                  When translated into the base Raster&apos;s
                  coordinate system, aRegion must be contained by the base Raster.
                  Origin is the coordinate in the new Raster&apos;s coordinate system of
                  the origin of the base Raster.  (The base Raster is the Raster&apos;s
                  ancestor which has no parent.)
                  Note that this constructor should generally be called by other
                  constructors or create methods, it should not be used directly.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    dataBuffer      The DataBufferShort that contains the image data.                    
                </param>
                <param>
                    aRegion         The Rectangle that specifies the image area.                    
                </param>
                <param>
                    origin          The Point that specifies the origin.                    
                </param>
                <param>
                    parent          The parent (if any) of this raster.                    
                </param>
                <exception>
                    RasterFormatException if the parameters do not conform
                      to requirements of this Raster type.                    
                </exception>
            </javadoc>
            <method name="BytePackedRaster" type="constructor" line="102">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="aRegion" type="Rectangle"/>
                    <param name="origin" type="Point"/>
                    <param name="parent" type="BytePackedRaster"/>
                </params>
                <scope line="106"/>
                <declaration name="dbb" type="DataBufferByte" line="109"/>
                <scope line="111"/>
                <declaration name="dbOffset" type="int" line="114"/>
                <scope line="115">
                    <declaration name="mppsm" type="MultiPixelPackedSampleModel" line="116"/>
                    <scope line="119"/>
                    <declaration name="xOffset" type="int" line="124"/>
                    <declaration name="yOffset" type="int" line="125"/>
                </scope>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Returns the data bit offset for the Raster.  The data
                  bit offset is the bit index into the data array element
                  corresponding to the first sample of the first scanline.                
            </javadoc>
            <method name="getDataBitOffset" type="int" line="140"/>
            <javadoc line="143">
                Returns the scanline stride -- the number of data array elements between
                  a given sample and the sample in the same column
                  of the next row.                
            </javadoc>
            <method name="getScanlineStride" type="int" line="148"/>
            <javadoc line="151">
                Returns pixel bit stride -- the number of bits between two
                  samples on the same scanline.                
            </javadoc>
            <method name="getPixelBitStride" type="int" line="155"/>
            <javadoc line="158">
                Returns a reference to the entire data array.                
            </javadoc>
            <method name="getDataStorage" type="byte[]" line="161"/>
            <javadoc line="164">
                Returns the data element at the specified
                  location.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinate is out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    outData  An object reference to an array of type defined by
                      getTransferType() and length getNumDataElements().
                      If null an array of appropriate type and size will be
                      allocated.                    
                </param>
                <return>
                    An object reference to an array of type defined by
                      getTransferType() with the request pixel data.                    
                </return>
            </javadoc>
            <method name="getDataElements" type="Object" line="180">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="181"/>
                <declaration name="outData" type="byte" line="184"/>
                <scope line="185"/>
                <scope line="188"/>
                <declaration name="bitnum" type="int" line="191"/>
                <declaration name="element" type="int" line="192"/>
                <declaration name="shift" type="int" line="193"/>
            </method>
            <javadoc line="197">
                Returns the pixel data for the specified rectangle of pixels in a
                  primitive array of type TransferType.
                  For image data supported by the Java 2D API, this
                  will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or
                  DataBuffer.TYPE_INT.  Data may be returned in a packed format,
                  thus increasing efficiency for data transfers.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of TransferType.                
                <see>
                    java.awt.image.SampleModel#getDataElements(int,int,int,int,Object,DataBuffer)                    
                </see>
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    outData  An object reference to an array of type defined by
                      getTransferType() and length whgetNumDataElements().
                      If null, an array of appropriate type and size will be
                      allocated.                    
                </param>
                <return>
                    An object reference to an array of type defined by
                      getTransferType() with the requested pixel data.                    
                </return>
            </javadoc>
            <method name="getDataElements" type="Object" line="220">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="outData" type="Object"/>
                </params>
            </method>
            <javadoc line="223">
                Returns an array  of data elements from the specified rectangular
                  region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.
                  &lt;pre&gt;
                  byte[] bandData = (byte[])raster.getPixelData(x, y, w, h, null);
                  int pixel;
                  // To find a data element at location (x2, y2)
                  pixel = bandData[((y2-y)w + (x2-x))];
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    width    Width of the pixel rectangle.                    
                </param>
                <param>
                    height   Height of the pixel rectangle.                    
                </param>
                <param>
                    outData  An object reference to an array of type defined by
                      getTransferType() and length whgetNumDataElements().
                      If null an array of appropriate type and size will be
                      allocated.                    
                </param>
                <return>
                    An object reference to an array of type defined by
                      getTransferType() with the request pixel data.                    
                </return>
            </javadoc>
            <method name="getPixelData" type="Object" line="247">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="248"/>
                <declaration name="outData" type="byte" line="251"/>
                <scope line="252"/>
                <scope line="255"/>
                <declaration name="pixbits" type="int" line="258"/>
                <declaration name="scanbit" type="int" line="259"/>
                <declaration name="index" type="int" line="260"/>
                <declaration name="outindex" type="int" line="261"/>
                <declaration name="data" type="byte" line="262"/>
                <scope line="263">
                    <declaration name="bitnum" type="int" line="264"/>
                    <scope line="265">
                        <declaration name="shift" type="int" line="266"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="274">
                Returns a byte array containing the specified data elements
                  from the data array.  The band index will be ignored.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  &lt;pre&gt;
                  byte[] byteData = getByteData(x, y, band, w, h, null);
                  // To find a data element at location (x2, y2)
                  byte element = byteData[(y2-y)w + (x2-x)];
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    width    Width of the pixel rectangle.                    
                </param>
                <param>
                    height   Height of the pixel rectangle.                    
                </param>
                <param>
                    band     The band to return, is ignored.                    
                </param>
                <param>
                    outData  If non-null, data elements
                      at the specified locations are returned in this array.                    
                </param>
                <return>
                    Byte array with data elements.                    
                </return>
            </javadoc>
            <method name="getByteData" type="byte[]" line="293">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="band" type="int"/>
                    <param name="outData" type="byte[]"/>
                </params>
            </method>
            <javadoc line="296">
                Returns a byte array containing the specified data elements
                  from the data array.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  &lt;pre&gt;
                  byte[] byteData = raster.getByteData(x, y, w, h, null);
                  byte pixel;
                  // To find a data element at location (x2, y2)
                  pixel = byteData[((y2-y)w + (x2-x))];
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    width    Width of the pixel rectangle.                    
                </param>
                <param>
                    height   Height of the pixel rectangle.                    
                </param>
                <param>
                    outData  If non-null, data elements
                      at the specified locations are returned in this array.                    
                </param>
                <return>
                    Byte array with data elements.                    
                </return>
            </javadoc>
            <method name="getByteData" type="byte[]" line="315">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="outData" type="byte[]"/>
                </params>
                <scope line="316"/>
                <scope line="319"/>
                <declaration name="pixbits" type="int" line="322"/>
                <declaration name="scanbit" type="int" line="323"/>
                <declaration name="index" type="int" line="324"/>
                <declaration name="outindex" type="int" line="325"/>
                <declaration name="data" type="byte" line="326"/>
                <scope line="327">
                    <declaration name="bitnum" type="int" line="328"/>
                    <declaration name="element" type="int" line="329"/>
                    <declaration name="i" type="int" line="330"/>
                    <scope line="331">
                        <declaration name="shift" type="int" line="332"/>
                    </scope>
                    <declaration name="inIndex" type="int" line="337"/>
                    <scope line="340"/>
                    <scope line="354"/>
                    <scope line="369"/>
                    <scope line="386">
                        <declaration name="shift" type="int" line="387"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="395">
                Stores the data elements at the specified location.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinate is out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    inData   An object reference to an array of type defined by
                      getTransferType() and length getNumDataElements()
                      containing the pixel data to place at x,y.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="407">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="408"/>
                <declaration name="inData" type="byte" line="411"/>
                <declaration name="bitnum" type="int" line="412"/>
                <declaration name="index" type="int" line="413"/>
                <declaration name="shift" type="int" line="414"/>
                <declaration name="element" type="byte" line="415"/>
            </method>
            <javadoc line="421">
                Stores the Raster data at the specified location.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.                
                <param>
                    x          The X coordinate of the pixel location.                    
                </param>
                <param>
                    y          The Y coordinate of the pixel location.                    
                </param>
                <param>
                    inRaster   Raster of data to place at x,y location.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="429">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="inRaster" type="Raster"/>
                </params>
                <scope line="430"/>
                <declaration name="srcOffX" type="int" line="434"/>
                <declaration name="srcOffY" type="int" line="435"/>
                <declaration name="dstOffX" type="int" line="436"/>
                <declaration name="dstOffY" type="int" line="437"/>
                <declaration name="width" type="int" line="438"/>
                <declaration name="height" type="int" line="439"/>
                <scope line="440"/>
            </method>
            <javadoc line="445">
                Stores the Raster data at the specified location.                
                <param>
                    dstX The absolute X coordinate of the destination pixel
                      that will receive a copy of the upper-left pixel of the
                      inRaster                    
                </param>
                <param>
                    dstY The absolute Y coordinate of the destination pixel
                      that will receive a copy of the upper-left pixel of the
                      inRaster                    
                </param>
                <param>
                    srcX The absolute X coordinate of the upper-left source
                      pixel that will be copied into this Raster                    
                </param>
                <param>
                    srcY The absolute Y coordinate of the upper-left source
                      pixel that will be copied into this Raster                    
                </param>
                <param>
                    width      The number of pixels to store horizontally                    
                </param>
                <param>
                    height     The number of pixels to store vertically                    
                </param>
                <param>
                    inRaster   BytePackedRaster of data to place at x,y location.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="461">
                <params>
                    <param name="dstX" type="int"/>
                    <param name="dstY" type="int"/>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="inRaster" type="BytePackedRaster"/>
                </params>
                <scope line="462"/>
                <declaration name="inData" type="byte[]" line="465"/>
                <declaration name="outData" type="byte[]" line="466"/>
                <declaration name="inscan" type="int" line="467"/>
                <declaration name="outscan" type="int" line="468"/>
                <declaration name="inbit" type="int" line="469"/>
                <declaration name="outbit" type="int" line="470"/>
                <declaration name="copybits" type="int" line="471"/>
                <scope line="472">
                    <declaration name="bitpos" type="int" line="473"/>
                    <scope line="474">
                        <declaration name="bits" type="int" line="475"/>
                        <declaration name="inbyte" type="int" line="476"/>
                        <declaration name="outbyte" type="int" line="477"/>
                        <declaration name="mask" type="int" line="478"/>
                        <scope line="479"/>
                        <scope line="483">
                            <declaration name="element" type="int" line="484"/>
                        </scope>
                    </scope>
                    <scope line="495">
                        <declaration name="inbyte" type="int" line="496"/>
                        <declaration name="outbyte" type="int" line="497"/>
                        <declaration name="copybytes" type="int" line="498"/>
                        <scope line="499"/>
                        <scope line="502">
                            <scope line="503"/>
                        </scope>
                        <declaration name="bits" type="int" line="509"/>
                    </scope>
                    <scope line="514">
                        <declaration name="inbyte" type="int" line="515"/>
                        <declaration name="outbyte" type="int" line="516"/>
                        <declaration name="mask" type="int" line="517"/>
                        <scope line="518">
                            <declaration name="element" type="int" line="519"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="528">
                    <declaration name="bitpos" type="int" line="529"/>
                    <scope line="530">
                        <declaration name="bits" type="int" line="531"/>
                        <declaration name="inbyte" type="int" line="532"/>
                        <declaration name="outbyte" type="int" line="533"/>
                        <declaration name="lshift" type="int" line="534"/>
                        <declaration name="rshift" type="int" line="535"/>
                        <declaration name="mask" type="int" line="536"/>
                        <scope line="537"/>
                        <declaration name="lastByte" type="int" line="541"/>
                        <scope line="542">
                            <declaration name="inData0" type="byte" line="543"/>
                            <declaration name="inData1" type="byte" line="544"/>
                            <scope line="545"/>
                            <declaration name="element" type="int" line="548"/>
                        </scope>
                    </scope>
                    <scope line="559">
                        <declaration name="inbyte" type="int" line="560"/>
                        <declaration name="outbyte" type="int" line="561"/>
                        <declaration name="copybytes" type="int" line="562"/>
                        <declaration name="lshift" type="int" line="563"/>
                        <declaration name="rshift" type="int" line="564"/>
                        <scope line="565">
                            <declaration name="ibyte" type="int" line="566"/>
                            <declaration name="obyte" type="int" line="567"/>
                            <declaration name="inData0" type="int" line="568"/>
                            <scope line="569">
                                <declaration name="inData1" type="int" line="570"/>
                                <declaration name="val" type="int" line="571"/>
                            </scope>
                        </scope>
                        <declaration name="bits" type="int" line="578"/>
                    </scope>
                    <scope line="583">
                        <declaration name="inbyte" type="int" line="584"/>
                        <declaration name="outbyte" type="int" line="585"/>
                        <declaration name="mask" type="int" line="586"/>
                        <declaration name="lshift" type="int" line="587"/>
                        <declaration name="rshift" type="int" line="588"/>
                        <declaration name="lastByte" type="int" line="589"/>
                        <scope line="590">
                            <declaration name="inData0" type="byte" line="591"/>
                            <declaration name="inData1" type="byte" line="592"/>
                            <scope line="593"/>
                            <declaration name="element" type="int" line="596"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="607">
                Copies pixels from Raster srcRaster to this WritableRaster.
                  For each (x, y) address in srcRaster, the corresponding pixel
                  is copied to address (x+dx, y+dy) in this WritableRaster,
                  unless (x+dx, y+dy) falls outside the bounds of this raster.
                  srcRaster must have the same number of bands as this WritableRaster.
                  The copy is a simple copy of source samples to the corresponding
                  destination samples.  For details, see{@link WritableRaster#setRect(Raster)}.                
                <param>
                    dx        The X translation factor from src space to dst space
                      of the copy.                    
                </param>
                <param>
                    dy        The Y translation factor from src space to dst space
                      of the copy.                    
                </param>
                <param>
                    srcRaster The Raster from which to copy pixels.                    
                </param>
            </javadoc>
            <method name="setRect" type="void" line="621">
                <params>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="srcRaster" type="Raster"/>
                </params>
                <scope line="622"/>
                <declaration name="width" type="int" line="626"/>
                <declaration name="height" type="int" line="627"/>
                <declaration name="srcOffX" type="int" line="628"/>
                <declaration name="srcOffY" type="int" line="629"/>
                <declaration name="dstOffX" type="int" line="630"/>
                <declaration name="dstOffY" type="int" line="631"/>
                <scope line="632">
                    <declaration name="skipX" type="int" line="633"/>
                </scope>
                <scope line="638">
                    <declaration name="skipY" type="int" line="639"/>
                </scope>
                <scope line="644"/>
                <scope line="647"/>
            </method>
            <javadoc line="652">
                Stores an array of data elements into the specified rectangular
                  region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.
                  The data elements in the
                  data array are assumed to be packed.  That is, a data element
                  at location (x2, y2) would be found at:
                  &lt;pre&gt;
                  inData[((y2-y)w + (x2-x))]
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    inData   An object reference to an array of type defined by
                      getTransferType() and length whgetNumDataElements()
                      containing the pixel data to place between x,y and
                      x+h, y+h.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="674">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="677">
                Stores a byte array of data elements into the specified rectangular
                  region.  The band index will be ignored.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  The data elements in the
                  data array are assumed to be packed.  That is, a data element
                  at location (x2, y2) would be found at:
                  &lt;pre&gt;
                  inData[((y2-y)w + (x2-x))]
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    band     The band to set, is ignored.                    
                </param>
                <param>
                    inData   The data elements to be stored.                    
                </param>
            </javadoc>
            <method name="putByteData" type="void" line="695">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="band" type="int"/>
                    <param name="inData" type="byte[]"/>
                </params>
            </method>
            <javadoc line="698">
                Stores a byte array of data elements into the specified rectangular
                  region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  The data elements in the
                  data array are assumed to be packed.  That is, a data element
                  at location (x2, y2) would be found at:
                  &lt;pre&gt;
                  inData[((y2-y)w + (x2-x))]
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    inData   The data elements to be stored.                    
                </param>
            </javadoc>
            <method name="putByteData" type="void" line="715">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="inData" type="byte[]"/>
                </params>
                <scope line="716"/>
                <scope line="719"/>
                <declaration name="pixbits" type="int" line="722"/>
                <declaration name="scanbit" type="int" line="723"/>
                <declaration name="index" type="int" line="724"/>
                <declaration name="outindex" type="int" line="725"/>
                <declaration name="data" type="byte" line="726"/>
                <scope line="727">
                    <declaration name="bitnum" type="int" line="728"/>
                    <declaration name="element" type="int" line="729"/>
                    <declaration name="i" type="int" line="730"/>
                    <scope line="731">
                        <declaration name="shift" type="int" line="732"/>
                    </scope>
                    <declaration name="inIndex" type="int" line="740"/>
                    <scope line="743"/>
                    <scope line="757"/>
                    <scope line="772"/>
                    <scope line="789">
                        <declaration name="shift" type="int" line="790"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="801">
                Returns an int array containing all samples for a rectangle of pixels,
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.                
                <param>
                    x,&amp;nbsp;y   the coordinates of the upper-left pixel location                    
                </param>
                <param>
                    w      Width of the pixel rectangle                    
                </param>
                <param>
                    h      Height of the pixel rectangle                    
                </param>
                <param>
                    iArray An optionally pre-allocated int array                    
                </param>
                <return>
                    the samples for the specified rectangle of pixels.                    
                </return>
            </javadoc>
            <method name="getPixels" type="int[]" line="812">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
                <scope line="813"/>
                <scope line="816"/>
                <declaration name="pixbits" type="int" line="819"/>
                <declaration name="scanbit" type="int" line="820"/>
                <declaration name="index" type="int" line="821"/>
                <declaration name="outindex" type="int" line="822"/>
                <declaration name="data" type="byte" line="823"/>
                <scope line="824">
                    <declaration name="bitnum" type="int" line="825"/>
                    <declaration name="element" type="int" line="826"/>
                    <declaration name="i" type="int" line="827"/>
                    <scope line="828">
                        <declaration name="shift" type="int" line="829"/>
                    </scope>
                    <declaration name="inIndex" type="int" line="834"/>
                    <scope line="837"/>
                    <scope line="851"/>
                    <scope line="866"/>
                    <scope line="883">
                        <declaration name="shift" type="int" line="884"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="892">
                Sets all samples for a rectangle of pixels from an int array containing
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    iArray   The input int pixel array.                    
                </param>
            </javadoc>
            <method name="setPixels" type="void" line="903">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
                <scope line="904"/>
                <declaration name="pixbits" type="int" line="907"/>
                <declaration name="scanbit" type="int" line="908"/>
                <declaration name="index" type="int" line="909"/>
                <declaration name="outindex" type="int" line="910"/>
                <declaration name="data" type="byte" line="911"/>
                <scope line="912">
                    <declaration name="bitnum" type="int" line="913"/>
                    <declaration name="element" type="int" line="914"/>
                    <declaration name="i" type="int" line="915"/>
                    <scope line="916">
                        <declaration name="shift" type="int" line="917"/>
                    </scope>
                    <declaration name="inIndex" type="int" line="925"/>
                    <scope line="928"/>
                    <scope line="942"/>
                    <scope line="957"/>
                    <scope line="974">
                        <declaration name="shift" type="int" line="975"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="986">
                Creates a subraster given a region of the raster.  The x and y
                  coordinates specify the horizontal and vertical offsets
                  from the upper-left corner of this raster to the upper-left corner
                  of the subraster.  Note that the subraster will reference the same
                  DataBuffer as the parent raster, but using different offsets. The
                  bandList is ignored.                
                <param>
                    x               X offset.                    
                </param>
                <param>
                    y               Y offset.                    
                </param>
                <param>
                    width           Width (in pixels) of the subraster.                    
                </param>
                <param>
                    height          Height (in pixels) of the subraster.                    
                </param>
                <param>
                    x0              Translated X origin of the subraster.                    
                </param>
                <param>
                    y0              Translated Y origin of the subraster.                    
                </param>
                <param>
                    bandList        Array of band indices.                    
                </param>
                <exception>
                    RasterFormatExceptionif the specified bounding box is outside of the parent raster.                    
                </exception>
            </javadoc>
            <method name="createChild" type="Raster" line="1002">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="x0" type="int"/>
                    <param name="y0" type="int"/>
                    <param name="bandList" type="int[]"/>
                </params>
                <declaration name="newRaster" type="WritableRaster" line="1003"/>
            </method>
            <javadoc line="1006">
                Creates a Writable subRaster given a region of the Raster. The x and y
                  coordinates specify the horizontal and vertical offsets
                  from the upper-left corner of this Raster to the upper-left corner
                  of the subRaster.  The bandList is ignored.
                  A translation to the subRaster may also be specified.
                  Note that the subRaster will reference the same
                  DataBuffer as the parent Raster, but using different offsets.                
                <param>
                    x               X offset.                    
                </param>
                <param>
                    y               Y offset.                    
                </param>
                <param>
                    width           Width (in pixels) of the subraster.                    
                </param>
                <param>
                    height          Height (in pixels) of the subraster.                    
                </param>
                <param>
                    x0              Translated X origin of the subraster.                    
                </param>
                <param>
                    y0              Translated Y origin of the subraster.                    
                </param>
                <param>
                    bandList        Array of band indices.                    
                </param>
                <exception>
                    RasterFormatExceptionif the specified bounding box is outside of the parent Raster.                    
                </exception>
            </javadoc>
            <method name="createWritableChild" type="WritableRaster" line="1023">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="x0" type="int"/>
                    <param name="y0" type="int"/>
                    <param name="bandList" type="int[]"/>
                </params>
                <scope line="1024"/>
                <scope line="1027"/>
                <scope line="1030"/>
                <scope line="1033"/>
                <declaration name="sm" type="SampleModel" line="1036"/>
                <scope line="1037"/>
                <scope line="1040"/>
                <declaration name="deltaX" type="int" line="1043"/>
                <declaration name="deltaY" type="int" line="1044"/>
            </method>
            <javadoc line="1047">
                Creates a raster with the same layout but using a different
                  width and height, and with new zeroed data arrays.                
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1051">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="1052"/>
                <declaration name="sm" type="SampleModel" line="1055"/>
            </method>
            <javadoc line="1058">
                Creates a raster with the same layout and the same
                  width and height, and with new zeroed data arrays.                
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1062"/>
            <javadoc line="1065">
                Verify that the layout parameters are consistent with
                  the data.  If strictCheck
                  is false, this method will check for ArrayIndexOutOfBounds conditions.
                  If strictCheck is true, this method will check for additional error
                  conditions such as line wraparound (width of a line greater than
                  the scanline stride).                
                <return>
                    String   Error string, if the layout is incompatible with
                      the data.  Otherwise returns null.                    
                </return>
            </javadoc>
            <method name="verify" type="void" line="1075">
                <params>
                    <param name="strictCheck" type="boolean"/>
                </params>
                <scope line="1076"/>
                <declaration name="lastbit" type="int" line="1079"/>
                <scope line="1080"/>
                <scope line="1083">
                    <scope line="1084">
                        <scope line="1086"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="1092"/>
        </class>
    </source>