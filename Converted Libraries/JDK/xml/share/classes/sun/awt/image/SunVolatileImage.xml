<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceManagerFactory"/>
        <import package="sun.java2d.DestSurfaceProvider"/>
        <import package="sun.java2d.Surface"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <class name="SunVolatileImage" line="45">
            <extends class="VolatileImage"/>
            <comment line="216">
                Image method implementations                
            </comment>
            <implements interface="DestSurfaceProvider"/>
            <javadoc line="45">
                This class is the base implementation of the VolatileImage
                  abstract class.  The class implements most of the standard Image
                  methods (width, height, etc.) but delegates all surface management
                  issues to a platform-specific VolatileSurfaceManager.  When a new instance
                  of SunVolatileImage is created, it automatically creates an
                  appropriate VolatileSurfaceManager for the GraphicsConfiguration
                  under which this SunVolatileImage was created.                
            </javadoc>
            <declaration name="volSurfaceManager" type="VolatileSurfaceManager" line="58"/>
            <declaration name="comp" type="Component" line="59"/>
            <declaration name="graphicsConfig" type="GraphicsConfiguration" line="60"/>
            <declaration name="defaultFont" type="Font" line="61"/>
            <declaration name="width" type="int" line="62"/>
            <declaration name="forcedAccelSurfaceType" type="int" line="63"/>
            <method name="SunVolatileImage" type="constructor" line="70">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="graphicsConfig" type="GraphicsConfiguration"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="context" type="Object"/>
                    <param name="transparency" type="int"/>
                    <param name="caps" type="ImageCapabilities"/>
                    <param name="accType" type="int"/>
                </params>
                <comment line="87">
                    post-construction initialization of the surface manager                    
                </comment>
                <comment line="89">
                    clear the background                    
                </comment>
                <scope line="79"/>
            </method>
            <method name="SunVolatileImage" type="constructor" line="97">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="graphicsConfig" type="GraphicsConfiguration"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="context" type="Object"/>
                    <param name="caps" type="ImageCapabilities"/>
                </params>
            </method>
            <method name="SunVolatileImage" type="constructor" line="102">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="SunVolatileImage" type="constructor" line="108">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <method name="SunVolatileImage" type="constructor" line="116">
                <params>
                    <param name="graphicsConfig" type="GraphicsConfiguration"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                    <param name="caps" type="ImageCapabilities"/>
                </params>
            </method>
            <method name="getWidth" type="int" line="121"/>
            <method name="getHeight" type="int" line="125"/>
            <method name="getGraphicsConfig" type="GraphicsConfiguration" line="129"/>
            <method name="updateGraphicsConfig" type="void" line="133">
                <comment line="134">
                    If this VImage is associated with a Component, get an updated                    
                </comment>
                <comment line="135">
                    graphicsConfig from that component.  Otherwise, keep the one                    
                </comment>
                <comment line="136">
                    that we were created with                    
                </comment>
                <comment line="140">
                    Could potentially be null in some failure situations;                    
                </comment>
                <comment line="141">
                    better to keep the old non-null value around than to                    
                </comment>
                <comment line="142">
                    set graphicsConfig to null                    
                </comment>
                <scope line="137">
                    <declaration name="gc" type="GraphicsConfiguration" line="138"/>
                    <scope line="139"/>
                </scope>
            </method>
            <method name="getComponent" type="Component" line="148"/>
            <method name="getForcedAccelSurfaceType" type="int" line="152"/>
            <method name="createSurfaceManager" type="VolatileSurfaceManager" line="158">
                <params>
                    <param name="context" type="Object"/>
                    <param name="caps" type="ImageCapabilities"/>
                </params>
                <comment line="159">
                    Platform-specific SurfaceManagerFactories will return a
                     manager suited to acceleration on each platform.  But if
                     the user is asking for a VolatileImage from a BufferedImageGC,
                     then we need to return the appropriate unaccelerated manager.
                     Note: this could change in the future; if some platform would
                     like to accelerate BIGC volatile images, then this special-casing
                     of the BIGC graphicsConfig should live in platform-specific
                     code instead.
                     We do the same for a Printer Device, and if user requested an
                     unaccelerated VolatileImage by passing the capabilities object.                    
                </comment>
                <scope line="174"/>
                <declaration name="smf" type="SurfaceManagerFactory" line="177"/>
            </method>
            <method name="getForeground" type="Color" line="181">
                <scope line="182"/>
                <scope line="184"/>
            </method>
            <method name="getBackground" type="Color" line="189">
                <scope line="190"/>
                <scope line="192"/>
            </method>
            <method name="getFont" type="Font" line="197">
                <scope line="198"/>
                <scope line="200">
                    <scope line="201"/>
                </scope>
            </method>
            <method name="createGraphics" type="Graphics2D" line="208"/>
            <method name="getProperty" type="Object" line="216">
                <params>
                    <param name="name" type="String"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="217"/>
            </method>
            <method name="getWidth" type="int" line="223">
                <params>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <method name="getHeight" type="int" line="227">
                <params>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="231">
                This method creates a BufferedImage intended for use as a &quot;snapshot&quot;
                  or a backup surface.                
            </javadoc>
            <method name="getBackupImage" type="BufferedImage" line="235"/>
            <method name="getSnapshot" type="BufferedImage" line="240">
                <declaration name="bi" type="BufferedImage" line="241"/>
                <declaration name="g" type="Graphics2D" line="242"/>
            </method>
            <method name="validate" type="int" line="249">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="contentsLost" type="boolean" line="253"/>
            <method name="getCapabilities" type="ImageCapabilities" line="257"/>
            <javadoc line="261">
                {@inheritDoc}                
                <see>
                    sun.java2d.DestSurfaceProvider#getDestSurface                    
                </see>
            </javadoc>
            <method name="getDestSurface" type="Surface" line="267"/>
        </class>
    </source>