<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.util.Vector"/>
        <import package="sun.awt.AppContext"/>
        <class name="ImageFetcher" line="31">
            <extends class="Thread"/>
            <comment line="50">
                Time in milliseconds to wait for an
                 ImageFetchable to be added to the
                 queue before an ImageFetcher dies                
            </comment>
            <comment line="350">
                                
            </comment>
            <javadoc line="31">
                An ImageFetcher is a thread used to fetch ImageFetchable objects.
                  Once an ImageFetchable object has been fetched, the ImageFetcher
                  thread may also be used to animate it if necessary, via the
                  startingAnimation() / stoppingAnimation() methods.
                  There can be up to FetcherInfo.MAX_NUM_FETCHERS_PER_APPCONTEXT
                  ImageFetcher threads for each AppContext.  A per-AppContext queue
                  of ImageFetchables is used to track objects to fetch.                
                <author>
                    Jim Graham                    
                </author>
                <author>
                    Fred Ecks                    
                </author>
            </javadoc>
            <declaration name="HIGH_PRIORITY" type="int" line="45"/>
            <declaration name="LOW_PRIORITY" type="int" line="46"/>
            <declaration name="ANIM_PRIORITY" type="int" line="47"/>
            <declaration name="TIMEOUT" type="int" line="49"/>
            <javadoc line="53">
                Constructor for ImageFetcher -- only called by add() below.                
            </javadoc>
            <method name="ImageFetcher" type="constructor" line="56">
                <params>
                    <param name="threadGroup" type="ThreadGroup"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="61">
                Adds an ImageFetchable to the queue of items to fetch.  Instantiates
                  a new ImageFetcher if it&apos;s reasonable to do so.
                  If there is no available fetcher to process an ImageFetchable, then
                  reports failure to caller.                
            </javadoc>
            <method name="add" type="boolean" line="67">
                <params>
                    <param name="src" type="ImageFetchable"/>
                </params>
                <comment line="77">
                    Creation of new fetcher may fail due to high vm load
                     or some other reason.
                     If there is already exist, but busy, fetcher, we leave
                     the src in queue (it will be handled by existing
                     fetcher later).
                     Otherwise, we report failure: there is no fetcher
                     to handle the src.                    
                </comment>
                <declaration name="info" type="FetcherInfo" line="68"/>
                <scope line="69">
                    <scope line="70">
                        <scope line="73"/>
                        <scope line="84"/>
                        <scope line="86"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="95">
                Removes an ImageFetchable from the queue of items to fetch.                
            </javadoc>
            <method name="remove" type="void" line="98">
                <params>
                    <param name="src" type="ImageFetchable"/>
                </params>
                <declaration name="info" type="FetcherInfo" line="99"/>
                <scope line="100">
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="107">
                Checks to see if the given thread is one of the ImageFetchers.                
            </javadoc>
            <method name="isFetcher" type="boolean" line="110">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <declaration name="info" type="FetcherInfo" line="111"/>
                <scope line="112">
                    <scope line="113">
                        <scope line="114"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="122">
                Checks to see if the current thread is one of the ImageFetchers.                
            </javadoc>
            <method name="amFetcher" type="boolean" line="125"/>
            <javadoc line="129">
                Returns the next ImageFetchable to be processed.  If TIMEOUT
                  elapses in the mean time, or if the ImageFetcher is interrupted,
                  null is returned.                
            </javadoc>
            <method name="nextImage" type="ImageFetchable" line="134">
                <comment line="150">
                    A normal occurrence as an AppContext is disposed                    
                </comment>
                <declaration name="info" type="FetcherInfo" line="135"/>
                <scope line="136">
                    <declaration name="src" type="ImageFetchable" line="137"/>
                    <declaration name="end" type="long" line="138"/>
                    <scope line="139">
                        <scope line="140">
                            <declaration name="now" type="long" line="141"/>
                            <scope line="142"/>
                            <scope line="145"/>
                            <scope line="148"/>
                            <scope line="151"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="162">
                The main run() method of an ImageFetcher Thread.  Calls fetchloop()
                  to do the work, then removes itself from the array of ImageFetchers.                
            </javadoc>
            <method name="run" type="void" line="166">
                <declaration name="info" type="FetcherInfo" line="167"/>
                <scope line="168"/>
                <scope line="170"/>
                <scope line="172">
                    <scope line="173">
                        <declaration name="me" type="Thread" line="174"/>
                        <scope line="175">
                            <scope line="176"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="185">
                The main ImageFetcher loop.  Repeatedly calls nextImage(), and
                  fetches the returned ImageFetchable objects until nextImage()
                  returns null.                
            </javadoc>
            <method name="fetchloop" type="void" line="190">
                <comment line="194">
                    we&apos;re ignoring the return value and just clearing
                     the interrupted flag, instead of bailing out if
                     the fetcher was interrupted, as we used to,
                     because there may be other images waiting
                     to be fetched (see 4789067)                    
                </comment>
                <declaration name="me" type="Thread" line="191"/>
                <scope line="192">
                    <declaration name="src" type="ImageFetchable" line="200"/>
                    <scope line="201"/>
                    <scope line="204"/>
                    <scope line="206"/>
                </scope>
            </method>
            <javadoc line="215">
                Recycles this ImageFetcher thread as an image animator thread.
                  Removes this ImageFetcher from the array of ImageFetchers, and
                  resets the thread name to &quot;ImageAnimator&quot;.                
            </javadoc>
            <method name="startingAnimation" type="void" line="220">
                <declaration name="info" type="FetcherInfo" line="221"/>
                <declaration name="me" type="Thread" line="222"/>
                <scope line="223">
                    <scope line="224">
                        <scope line="225">
                            <scope line="229"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="240">
                Returns this image animator thread back to service as an ImageFetcher
                  if possible.  Puts it back into the array of ImageFetchers and sets
                  the thread name back to &quot;Image Fetcher&quot;.  If there are already the
                  maximum number of ImageFetchers, this method simply returns, and
                  fetchloop() will drop out when it sees that this thread isn&apos;t one of
                  the ImageFetchers, and this thread will die.                
            </javadoc>
            <method name="stoppingAnimation" type="void" line="248">
                <params>
                    <param name="me" type="Thread"/>
                </params>
                <declaration name="info" type="FetcherInfo" line="249"/>
                <scope line="250">
                    <declaration name="index" type="int" line="251"/>
                    <scope line="252">
                        <scope line="253"/>
                        <scope line="256"/>
                    </scope>
                    <scope line="260"/>
                </scope>
            </method>
            <javadoc line="269">
                Create and start ImageFetcher threads in the appropriate ThreadGroup.                
            </javadoc>
            <method name="createFetchers" type="void" line="272">
                <params>
                    <param name="info" type="FetcherInfo"/>
                </params>
                <comment line="274">
                    We need to instantiate a new ImageFetcher thread.
                     First, figure out which ThreadGroup we&apos;ll put the
                     new ImageFetcher into                    
                </comment>
                <comment line="282">
                    threadGroup is not the root, so we proceed                    
                </comment>
                <comment line="285">
                    threadGroup is the root (&quot;system&quot;) ThreadGroup.
                     We instead want to use its child: the &quot;main&quot;
                     ThreadGroup.  Thus, we start with the current
                     ThreadGroup, and go up the tree until
                     threadGroup.getParent().getParent() == null.                    
                </comment>
                <comment line="300">
                    Not allowed access to parent ThreadGroup -- just use
                     the AppContext&apos;s ThreadGroup                    
                </comment>
                <declaration name="appContext" type="AppContext" line="276"/>
                <declaration name="threadGroup" type="ThreadGroup" line="277"/>
                <declaration name="fetcherThreadGroup" type="ThreadGroup" line="278"/>
                <scope line="279">
                    <scope line="280"/>
                    <scope line="283">
                        <declaration name="parent" type="ThreadGroup" line="290"/>
                        <scope line="292"/>
                    </scope>
                </scope>
                <scope line="298"/>
                <declaration name="fetcherGroup" type="ThreadGroup" line="303"/>
                <anonymous_class line="306">
                    <method name="run" type="Object" line="307">
                        <scope line="308">
                            <scope line="309">
                                <declaration name="f" type="ImageFetcher" line="310"/>
                                <scope line="312"/>
                                <scope line="317"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
        </class>
        <class name="FetcherInfo" line="329">
            <comment line="50">
                Time in milliseconds to wait for an
                 ImageFetchable to be added to the
                 queue before an ImageFetcher dies                
            </comment>
            <comment line="350">
                                
            </comment>
            <javadoc line="329">
                The FetcherInfo class encapsulates the per-AppContext ImageFetcher
                  information.  This includes the array of ImageFetchers, as well as
                  the queue of ImageFetchable objects.                
            </javadoc>
            <declaration name="MAX_NUM_FETCHERS_PER_APPCONTEXT" type="int" line="335"/>
            <declaration name="fetchers" type="Thread[]" line="337"/>
            <declaration name="numFetchers" type="int" line="338"/>
            <declaration name="numWaiting" type="int" line="339"/>
            <declaration name="waitList" type="Vector" line="340"/>
            <method name="FetcherInfo" type="constructor" line="342"/>
            <declaration name="FETCHER_INFO_KEY" type="Object" line="350"/>
            <method name="getFetcherInfo" type="FetcherInfo" line="353">
                <declaration name="appContext" type="AppContext" line="354"/>
                <scope line="355">
                    <declaration name="info" type="FetcherInfo" line="356"/>
                    <scope line="357"/>
                </scope>
            </method>
        </class>
    </source>