<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.util.Vector"/>
        <import package="sun.awt.AppContext"/>
        <class name="ImageFetcher" line="4">
            <extends class="Thread"/>
            <javadoc line="4">
                An ImageFetcher is a thread used to fetch ImageFetchable objects.
                  Once an ImageFetchable object has been fetched, the ImageFetcher
                  thread may also be used to animate it if necessary, via the
                  startingAnimation() / stoppingAnimation() methods.
                  There can be up to FetcherInfo.MAX_NUM_FETCHERS_PER_APPCONTEXT
                  ImageFetcher threads for each AppContext.  A per-AppContext queue
                  of ImageFetchables is used to track objects to fetch.                
                <author>
                    Jim Graham                    
                </author>
                <author>
                    Fred Ecks                    
                </author>
            </javadoc>
            <declaration name="HIGH_PRIORITY" type="int" line="16"/>
            <declaration name="LOW_PRIORITY" type="int" line="17"/>
            <declaration name="ANIM_PRIORITY" type="int" line="18"/>
            <declaration name="TIMEOUT" type="int" line="19"/>
            <javadoc line="20">
                Constructor for ImageFetcher -- only called by add() below.                
            </javadoc>
            <method name="ImageFetcher" type="constructor" line="23">
                <params>
                    <param name="threadGroup" type="ThreadGroup"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="27">
                Adds an ImageFetchable to the queue of items to fetch.  Instantiates
                  a new ImageFetcher if it&apos;s reasonable to do so.
                  If there is no available fetcher to process an ImageFetchable, then
                  reports failure to caller.                
            </javadoc>
            <method name="add" type="boolean" line="33">
                <params>
                    <param name="src" type="ImageFetchable"/>
                </params>
                <declaration name="info" type="FetcherInfo" line="34"/>
                <scope line="35">
                    <scope line="36">
                        <scope line="38"/>
                        <scope line="41"/>
                        <scope line="44"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="52">
                Removes an ImageFetchable from the queue of items to fetch.                
            </javadoc>
            <method name="remove" type="void" line="55">
                <params>
                    <param name="src" type="ImageFetchable"/>
                </params>
                <declaration name="info" type="FetcherInfo" line="56"/>
                <scope line="57">
                    <scope line="58"/>
                </scope>
            </method>
            <javadoc line="63">
                Checks to see if the given thread is one of the ImageFetchers.                
            </javadoc>
            <method name="isFetcher" type="boolean" line="66">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <declaration name="info" type="FetcherInfo" line="67"/>
                <scope line="68">
                    <scope line="69">
                        <scope line="70"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="77">
                Checks to see if the current thread is one of the ImageFetchers.                
            </javadoc>
            <method name="amFetcher" type="boolean" line="80"/>
            <javadoc line="83">
                Returns the next ImageFetchable to be processed.  If TIMEOUT
                  elapses in the mean time, or if the ImageFetcher is interrupted,
                  null is returned.                
            </javadoc>
            <method name="nextImage" type="ImageFetchable" line="88">
                <declaration name="info" type="FetcherInfo" line="89"/>
                <scope line="90">
                    <declaration name="src" type="ImageFetchable" line="91"/>
                    <declaration name="end" type="long" line="92"/>
                    <scope line="93">
                        <scope line="94">
                            <declaration name="now" type="long" line="95"/>
                            <scope line="96"/>
                            <scope line="99"/>
                            <scope line="103"/>
                            <scope line="106"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="116">
                The main run() method of an ImageFetcher Thread.  Calls fetchloop()
                  to do the work, then removes itself from the array of ImageFetchers.                
            </javadoc>
            <method name="run" type="void" line="120">
                <declaration name="info" type="FetcherInfo" line="121"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="128">
                    <scope line="129">
                        <declaration name="me" type="Thread" line="130"/>
                        <scope line="131">
                            <scope line="132"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="140">
                The main ImageFetcher loop.  Repeatedly calls nextImage(), and
                  fetches the returned ImageFetchable objects until nextImage()
                  returns null.                
            </javadoc>
            <method name="fetchloop" type="void" line="145">
                <declaration name="me" type="Thread" line="146"/>
                <scope line="147">
                    <declaration name="src" type="ImageFetchable" line="150"/>
                    <scope line="151"/>
                    <scope line="154"/>
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="164">
                Recycles this ImageFetcher thread as an image animator thread.
                  Removes this ImageFetcher from the array of ImageFetchers, and
                  resets the thread name to &quot;ImageAnimator&quot;.                
            </javadoc>
            <method name="startingAnimation" type="void" line="169">
                <declaration name="info" type="FetcherInfo" line="170"/>
                <declaration name="me" type="Thread" line="171"/>
                <scope line="172">
                    <scope line="173">
                        <scope line="174">
                            <scope line="178"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="188">
                Returns this image animator thread back to service as an ImageFetcher
                  if possible.  Puts it back into the array of ImageFetchers and sets
                  the thread name back to &quot;Image Fetcher&quot;.  If there are already the
                  maximum number of ImageFetchers, this method simply returns, and
                  fetchloop() will drop out when it sees that this thread isn&apos;t one of
                  the ImageFetchers, and this thread will die.                
            </javadoc>
            <method name="stoppingAnimation" type="void" line="196">
                <params>
                    <param name="me" type="Thread"/>
                </params>
                <declaration name="info" type="FetcherInfo" line="197"/>
                <scope line="198">
                    <declaration name="index" type="int" line="199"/>
                    <scope line="200">
                        <scope line="201"/>
                        <scope line="204"/>
                    </scope>
                    <scope line="208"/>
                </scope>
            </method>
            <javadoc line="216">
                Create and start ImageFetcher threads in the appropriate ThreadGroup.                
            </javadoc>
            <method name="createFetchers" type="void" line="219">
                <params>
                    <param name="info" type="FetcherInfo"/>
                </params>
                <declaration name="appContext" type="AppContext" line="220"/>
                <declaration name="threadGroup" type="ThreadGroup" line="221"/>
                <declaration name="fetcherThreadGroup" type="ThreadGroup" line="222"/>
                <scope line="223">
                    <scope line="224"/>
                    <scope line="227">
                        <declaration name="parent" type="ThreadGroup" line="229"/>
                        <scope line="230"/>
                    </scope>
                </scope>
                <scope line="237"/>
                <declaration name="fetcherGroup" type="ThreadGroup" line="240"/>
                <anonymous_class line="241">
                    <method name="run" type="Object" line="242">
                        <scope line="243">
                            <scope line="244">
                                <declaration name="f" type="ImageFetcher" line="245"/>
                                <scope line="246"/>
                                <scope line="252"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
        </class>
        <class name="FetcherInfo" line="263">
            <javadoc line="263">
                The FetcherInfo class encapsulates the per-AppContext ImageFetcher
                  information.  This includes the array of ImageFetchers, as well as
                  the queue of ImageFetchable objects.                
            </javadoc>
            <declaration name="MAX_NUM_FETCHERS_PER_APPCONTEXT" type="int" line="269"/>
            <declaration name="fetchers" type="Thread[]" line="270"/>
            <declaration name="numFetchers" type="int" line="271"/>
            <declaration name="numWaiting" type="int" line="272"/>
            <declaration name="waitList" type="Vector" line="273"/>
            <method name="FetcherInfo" type="constructor" line="274"/>
            <declaration name="FETCHER_INFO_KEY" type="Object" line="280"/>
            <method name="getFetcherInfo" type="FetcherInfo" line="281">
                <declaration name="appContext" type="AppContext" line="282"/>
                <scope line="283">
                    <declaration name="info" type="FetcherInfo" line="284"/>
                    <scope line="285"/>
                </scope>
            </method>
        </class>
    </source>