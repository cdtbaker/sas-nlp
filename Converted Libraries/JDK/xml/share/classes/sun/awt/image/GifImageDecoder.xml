<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.util.Vector"/>
        <import package="java.util.Hashtable"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.awt.image"/>
        <class name="GifImageDecoder" line="40">
            <extends class="ImageDecoder"/>
            <javadoc line="40">
                Gif Image converter                
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="verbose" type="boolean" line="47"/>
            <declaration name="IMAGESEP" type="int" line="49"/>
            <declaration name="EXBLOCK" type="int" line="50"/>
            <declaration name="EX_GRAPHICS_CONTROL" type="int" line="51"/>
            <declaration name="EX_COMMENT" type="int" line="52"/>
            <declaration name="EX_APPLICATION" type="int" line="53"/>
            <declaration name="TERMINATOR" type="int" line="54"/>
            <declaration name="TRANSPARENCYMASK" type="int" line="55"/>
            <declaration name="INTERLACEMASK" type="int" line="56"/>
            <declaration name="COLORMAPMASK" type="int" line="57"/>
            <declaration name="num_global_colors" type="int" line="59"/>
            <declaration name="global_colormap" type="byte[]" line="60"/>
            <declaration name="trans_pixel" type="int" line="61"/>
            <declaration name="global_model" type="IndexColorModel" line="62"/>
            <declaration name="props" type="Hashtable" line="64"/>
            <declaration name="saved_image" type="byte[]" line="66"/>
            <declaration name="saved_model" type="IndexColorModel" line="67"/>
            <declaration name="global_width" type="int" line="69"/>
            <declaration name="global_height" type="int" line="70"/>
            <declaration name="global_bgpixel" type="int" line="71"/>
            <declaration name="curframe" type="GifFrame" line="73"/>
            <method name="GifImageDecoder" type="constructor" line="75">
                <params>
                    <param name="src" type="InputStreamImageSource"/>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <javadoc line="79">
                An error has occurred. Throw an exception.                
            </javadoc>
            <method name="error" type="void" line="82">
                <params>
                    <param name="s1" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                Read a number of bytes into a buffer.                
                <return>
                    number of bytes that were not read due to EOF or error                    
                </return>
            </javadoc>
            <method name="readBytes" type="int" line="90">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="91">
                    <scope line="92">
                        <declaration name="n" type="int" line="93"/>
                        <scope line="94"/>
                    </scope>
                    <scope line="99"/>
                </scope>
            </method>
            <method name="ExtractByte" type="int" line="106">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="ExtractWord" type="int" line="110">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <javadoc line="114">
                produce an image from the stream.                
            </javadoc>
            <method name="produceImage" type="void" line="117">
                <comment line="138">
                    error(&quot;corrupt GIF file&quot;);                    
                </comment>
                <comment line="141">
                    error(&quot;corrupt GIF file (GCE size)&quot;);                    
                </comment>
                <comment line="143">
                    Get the index of the transparent color                    
                </comment>
                <comment line="170">
                    error(&quot;corrupt GIF file&quot;);                    
                </comment>
                <comment line="203">
                    error(&quot;corrupt GIF file&quot;);                    
                </comment>
                <comment line="209">
                    we don&apos;t need the mark buffer                    
                </comment>
                <comment line="241">
                    NOBREAK                    
                </comment>
                <comment line="256">
                    Unable to reset input buffer                    
                </comment>
                <scope line="118">
                    <declaration name="totalframes" type="int" line="121"/>
                    <declaration name="frameno" type="int" line="122"/>
                    <declaration name="nloops" type="int" line="123"/>
                    <declaration name="disposal_method" type="int" line="124"/>
                    <declaration name="delay" type="int" line="125"/>
                    <declaration name="loopsRead" type="boolean" line="126"/>
                    <declaration name="isAnimation" type="boolean" line="127"/>
                    <scope line="129">
                        <declaration name="code" type="int" line="130"/>
                        <scope line="135">
                            <declaration name="buf" type="byte" line="136"/>
                            <scope line="137"/>
                            <scope line="140"/>
                            <scope line="145"/>
                            <scope line="150"/>
                            <scope line="152"/>
                        </scope>
                        <declaration name="loop_tag" type="boolean" line="161"/>
                        <declaration name="comment" type="String" line="162"/>
                        <scope line="163">
                            <declaration name="n" type="int" line="164"/>
                            <scope line="165"/>
                            <declaration name="buf" type="byte" line="168"/>
                            <scope line="169"/>
                            <scope line="172"/>
                            <scope line="174">
                                <scope line="175">
                                    <scope line="176">
                                        <scope line="177"/>
                                        <scope line="180"/>
                                    </scope>
                                    <scope line="184"/>
                                </scope>
                                <scope line="188"/>
                            </scope>
                        </scope>
                        <scope line="193"/>
                        <scope line="196"/>
                        <scope line="208"/>
                        <scope line="211">
                            <scope line="214"/>
                        </scope>
                        <scope line="217">
                            <scope line="218"/>
                        </scope>
                        <scope line="229">
                            <scope line="230"/>
                            <scope line="233"/>
                        </scope>
                        <scope line="238"/>
                        <scope line="244">
                            <scope line="245">
                                <scope line="246"/>
                            </scope>
                            <scope line="255"/>
                        </scope>
                        <scope line="259"/>
                    </scope>
                </scope>
                <scope line="268"/>
            </method>
            <javadoc line="273">
                Read Image header                
            </javadoc>
            <method name="readHeader" type="void" line="276">
                <comment line="277">
                    Create a buffer                    
                </comment>
                <comment line="280">
                    Read the header                    
                </comment>
                <comment line="285">
                    Check header                    
                </comment>
                <comment line="290">
                    Global width&amp;height                    
                </comment>
                <comment line="294">
                    colormap info                    
                </comment>
                <comment line="297">
                    no global colormap so make up our own                    
                </comment>
                <comment line="298">
                    If there is a local colormap, it will override what we                    
                </comment>
                <comment line="299">
                    have here.  If there is not a local colormap, the rules                    
                </comment>
                <comment line="300">
                    for GIF89 say that we can use whatever colormap we want.                    
                </comment>
                <comment line="301">
                    This means that we should probably put in a full 256 colormap                    
                </comment>
                <comment line="302">
                    at some point.  REMIND!                    
                </comment>
                <comment line="319">
                    Read colors                    
                </comment>
                <comment line="325">
                    set this mark in case this is an animated GIF                    
                </comment>
                <declaration name="buf" type="byte" line="278"/>
                <scope line="281"/>
                <scope line="286"/>
                <declaration name="ch" type="int" line="295"/>
                <scope line="296"/>
                <scope line="310">
                    <scope line="315"/>
                    <scope line="321"/>
                </scope>
            </method>
            <declaration name="normalflags" type="int" line="328"/>
            <javadoc line="328">
                The ImageConsumer hints flag for a non-interlaced GIF image.                
            </javadoc>
            <declaration name="interlaceflags" type="int" line="335"/>
            <javadoc line="335">
                The ImageConsumer hints flag for an interlaced GIF image.                
            </javadoc>
            <declaration name="prefix" type="short" line="342"/>
            <declaration name="suffix" type="byte" line="343"/>
            <declaration name="outCode" type="byte" line="344"/>
            <method name="initIDs" type="void" line="346"/>
            <scope line="348"/>
            <method name="parseImage" type="boolean" line="354"/>
            <method name="sendPixels" type="int" line="360">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="rasline" type="byte"/>
                    <param name="model" type="ColorModel"/>
                </params>
                <comment line="372">
                    rasline[0]     == pixel at coordinate (x,y)                    
                </comment>
                <comment line="373">
                    rasline[width] == pixel at coordinate (x+width, y)                    
                </comment>
                <comment line="376">
                    same as (width -= rasbeg)                    
                </comment>
                <comment line="377">
                    same as (x2     = x + rasbeg)                    
                </comment>
                <comment line="380">
                    width -= 0;      // same as (width -= rasbeg)                    
                </comment>
                <comment line="381">
                    same as (x2     = x + rasbeg)                    
                </comment>
                <comment line="383">
                    rasline[rasbeg]          == pixel at coordinate (x2,y)                    
                </comment>
                <comment line="384">
                    rasline[width]           == pixel at coordinate (x+width, y)                    
                </comment>
                <comment line="385">
                    rasline[rasbeg + width]  == pixel at coordinate (x2+width, y)                    
                </comment>
                <comment line="393">
                    rasline[rasbeg] == pixel at coordinate (x2,y)                    
                </comment>
                <comment line="394">
                    rasline[rasend] == pixel at coordinate (x2+width, y)                    
                </comment>
                <comment line="408">
                    We have to do this the hard way - only transmit                    
                </comment>
                <comment line="409">
                    the non-transparent sections of the line...                    
                </comment>
                <comment line="410">
                    Fix for 6301050: the interlacing is ignored in this case                    
                </comment>
                <comment line="411">
                    in order to avoid artefacts in case of animated images.                    
                </comment>
                <declaration name="rasbeg" type="int" line="361"/>
                <scope line="362"/>
                <scope line="366"/>
                <scope line="369"/>
                <scope line="374"/>
                <scope line="378"/>
                <scope line="386"/>
                <scope line="389"/>
                <declaration name="off" type="int" line="395"/>
                <declaration name="save" type="boolean" line="396"/>
                <scope line="397">
                    <scope line="398">
                        <scope line="399">
                            <declaration name="pixel" type="byte" line="400"/>
                            <scope line="401"/>
                            <scope line="403"/>
                        </scope>
                    </scope>
                    <scope line="407">
                        <declaration name="runstart" type="int" line="412"/>
                        <declaration name="count" type="int" line="413"/>
                        <scope line="414">
                            <declaration name="pixel" type="byte" line="415"/>
                            <scope line="416">
                                <scope line="417">
                                    <scope line="422"/>
                                </scope>
                            </scope>
                            <scope line="427">
                                <scope line="428"/>
                                <scope line="431"/>
                            </scope>
                        </scope>
                        <scope line="436"/>
                    </scope>
                </scope>
                <scope line="444"/>
                <declaration name="count" type="int" line="447"/>
            </method>
            <javadoc line="452">
                Read Image data                
            </javadoc>
            <method name="readImage" type="boolean" line="457">
                <params>
                    <param name="first" type="boolean"/>
                    <param name="disposal_method" type="int"/>
                    <param name="delay" type="int"/>
                </params>
                <comment line="469">
                    Allocate the buffer                    
                </comment>
                <comment line="472">
                    Read the image descriptor                    
                </comment>
                <comment line="481">
                    Majority of gif images have
                     same logical screen and frame dimensions.
                     Also, Photoshop and Mozilla seem to use the logical
                     screen dimension (from the global stream header)
                     if frame dimension is invalid.
                    
                     We use similar heuristic and trying to recover
                     frame width from logical screen dimension and
                     frame offset.                    
                </comment>
                <comment line="504">
                    We read one extra byte above so now when we must                    
                </comment>
                <comment line="505">
                    transfer that byte as the first colormap byte                    
                </comment>
                <comment line="506">
                    and manually read the code size when we are done                    
                </comment>
                <comment line="509">
                    Read local colors                    
                </comment>
                <comment line="516">
                    Now read the &quot;real&quot; code size byte which follows                    
                </comment>
                <comment line="517">
                    the local color table                    
                </comment>
                <comment line="522">
                    Fix for 4233748: extend colormap to contain transparent pixel                    
                </comment>
                <comment line="531">
                    Fix for 4233748: extend colormap to contain transparent pixel                    
                </comment>
                <comment line="540">
                    Notify the consumers                    
                </comment>
                <comment line="553">
                    If height of current image is smaller than the global height,
                     fill the gap with transparent pixels.                    
                </comment>
                <comment line="581">
                    allocate the raster data                    
                </comment>
                <scope line="458"/>
                <declaration name="tm" type="long" line="463"/>
                <scope line="465"/>
                <declaration name="block" type="byte" line="470"/>
                <scope line="473"/>
                <declaration name="x" type="int" line="476"/>
                <declaration name="y" type="int" line="477"/>
                <declaration name="width" type="int" line="478"/>
                <declaration name="height" type="int" line="479"/>
                <scope line="492"/>
                <scope line="495"/>
                <declaration name="interlace" type="boolean" line="499"/>
                <declaration name="model" type="IndexColorModel" line="501"/>
                <scope line="503">
                    <declaration name="num_local_colors" type="int" line="507"/>
                    <declaration name="local_colormap" type="byte[]" line="510"/>
                    <scope line="512"/>
                    <scope line="518"/>
                    <scope line="521"/>
                </scope>
                <scope line="529">
                    <scope line="530"/>
                </scope>
                <scope line="541"/>
                <scope line="551">
                    <scope line="557">
                        <declaration name="tpix" type="byte" line="558"/>
                        <scope line="559">
                            <declaration name="trans_rasline" type="byte" line="560"/>
                            <scope line="561"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="hints" type="int" line="574"/>
                <declaration name="rasline" type="byte" line="582"/>
                <scope line="584"/>
                <declaration name="initCodeSize" type="int" line="588"/>
                <scope line="589">
                    <scope line="590"/>
                </scope>
                <declaration name="ret" type="boolean" line="596"/>
                <scope line="600"/>
                <scope line="604"/>
            </method>
            <method name="grow_colormap" type="byte[]" line="613">
                <params>
                    <param name="colormap" type="byte[]"/>
                    <param name="newlen" type="int"/>
                </params>
                <declaration name="newcm" type="byte[]" line="614"/>
            </method>
        </class>
        <class name="GifFrame" line="620">
            <declaration name="verbose" type="boolean" line="621"/>
            <declaration name="trans_model" type="IndexColorModel" line="622"/>
            <declaration name="DISPOSAL_NONE" type="int" line="624"/>
            <declaration name="DISPOSAL_SAVE" type="int" line="625"/>
            <declaration name="DISPOSAL_BGCOLOR" type="int" line="626"/>
            <declaration name="DISPOSAL_PREVIOUS" type="int" line="627"/>
            <declaration name="decoder" type="GifImageDecoder" line="629"/>
            <declaration name="disposal_method" type="int" line="631"/>
            <declaration name="delay" type="int" line="632"/>
            <declaration name="model" type="IndexColorModel" line="634"/>
            <declaration name="x" type="int" line="636"/>
            <declaration name="y" type="int" line="637"/>
            <declaration name="width" type="int" line="638"/>
            <declaration name="height" type="int" line="639"/>
            <declaration name="initialframe" type="boolean" line="641"/>
            <method name="GifFrame" type="constructor" line="644">
                <params>
                    <param name="id" type="GifImageDecoder"/>
                    <param name="dm" type="int"/>
                    <param name="dl" type="int"/>
                    <param name="init" type="boolean"/>
                    <param name="cm" type="IndexColorModel"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="setPixels" type="void" line="657">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="pix" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                </params>
            </method>
            <method name="dispose" type="boolean" line="661">
                <comment line="737">
                    clear saved_image using transparent pixels                    
                </comment>
                <comment line="738">
                    this will be used as the background in the next display                    
                </comment>
                <scope line="662"/>
                <scope line="664">
                    <scope line="665">
                        <scope line="666">
                            <scope line="667"/>
                        </scope>
                        <scope line="671"/>
                    </scope>
                    <scope line="674"/>
                    <scope line="678"/>
                    <declaration name="global_width" type="int" line="682"/>
                    <declaration name="global_height" type="int" line="683"/>
                    <scope line="685"/>
                    <scope line="689"/>
                    <scope line="692"/>
                    <scope line="694">
                        <scope line="695"/>
                        <scope line="699"/>
                        <scope line="702"/>
                    </scope>
                    <declaration name="saved_image" type="byte[]" line="709"/>
                    <declaration name="saved_model" type="IndexColorModel" line="710"/>
                    <scope line="711"/>
                    <declaration name="tpix" type="byte" line="718"/>
                    <scope line="719">
                        <scope line="721"/>
                    </scope>
                    <scope line="727"/>
                    <declaration name="rasline" type="byte[]" line="730"/>
                    <scope line="731">
                        <scope line="732"/>
                    </scope>
                    <scope line="739"/>
                </scope>
            </method>
        </class>
    </source>