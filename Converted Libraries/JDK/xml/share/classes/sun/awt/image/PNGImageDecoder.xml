<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.util.zip"/>
        <import package="java.awt.image"/>
        <import package="java.awt.Color"/>
        <class name="PNGImageDecoder" line="34">
            <extends class="ImageDecoder"/>
            <comment line="38">
                this is changed
                public class PNGImageDecoder extends FilterInputStream implements Runnable                
            </comment>
            <comment line="73">
                this is not needed
                ImageConsumer target;                
            </comment>
            <comment line="79">
                we need 6 bytes to store 16bpp value                
            </comment>
            <comment line="81">
                this is not needed
                PNGImageDecoder next;                
            </comment>
            <comment line="238">
                this is changed
                public void run() {                
            </comment>
            <comment line="623">
                abstract public class ChunkReader extends FilterInputStream {                
            </comment>
            <comment line="635">
                code changed
                public PNGImageDecoder(InputStream in, ImageConsumer t) throws IOException {                
            </comment>
            <comment line="651">
                code changed to make it work with ImageDecoder architecture
                static int ThreadLimit = 10;
                private synchronized static void waitTurn() {
                try {
                while(ThreadLimit&lt;=0) PNGImageDecoder.class.wait(1000);
                } catch(InterruptedException e){}
                ThreadLimit--;
                }
                private synchronized static void endTurn() {
                if(ThreadLimit&lt;=0) PNGImageDecoder.class.notify();
                ThreadLimit++;
                }                
            </comment>
            <comment line="731">
                abstract protected boolean handleChunk(int key, byte[] buf, int st, int len)
                    throws IOException;                
            </comment>
            <comment line="753">
                                
            </comment>
            <comment line="756">
                                
            </comment>
            <comment line="769">
                Update a running CRC with the bytes buf[0..len-1]--the CRC
                should be initialized to all 1&apos;s, and the transmitted value
                is the 1&apos;s complement of the final running CRC (see the                
            </comment>
            <comment line="781">
                                
            </comment>
            <javadoc line="34">
                PNG - Portable Network Graphics - image file reader.
                  See &lt;a href=http://www.ietf.org/rfc/rfc2083.txt&gt;RFC2083&lt;/a&gt; for details.                
            </javadoc>
            <declaration name="GRAY" type="int" line="43"/>
            <declaration name="PALETTE" type="int" line="44"/>
            <declaration name="COLOR" type="int" line="45"/>
            <declaration name="ALPHA" type="int" line="46"/>
            <declaration name="bKGDChunk" type="int" line="48"/>
            <declaration name="cHRMChunk" type="int" line="49"/>
            <declaration name="gAMAChunk" type="int" line="50"/>
            <declaration name="hISTChunk" type="int" line="51"/>
            <declaration name="IDATChunk" type="int" line="52"/>
            <declaration name="IENDChunk" type="int" line="53"/>
            <declaration name="IHDRChunk" type="int" line="54"/>
            <declaration name="PLTEChunk" type="int" line="55"/>
            <declaration name="pHYsChunk" type="int" line="56"/>
            <declaration name="sBITChunk" type="int" line="57"/>
            <declaration name="tEXtChunk" type="int" line="58"/>
            <declaration name="tIMEChunk" type="int" line="59"/>
            <declaration name="tRNSChunk" type="int" line="60"/>
            <declaration name="zTXtChunk" type="int" line="61"/>
            <declaration name="width" type="int" line="63"/>
            <declaration name="height" type="int" line="64"/>
            <declaration name="bitDepth" type="int" line="65"/>
            <declaration name="colorType" type="int" line="66"/>
            <declaration name="compressionMethod" type="int" line="67"/>
            <declaration name="filterMethod" type="int" line="68"/>
            <declaration name="interlaceMethod" type="int" line="69"/>
            <declaration name="gamma" type="int" line="70"/>
            <declaration name="properties" type="java.util.Hashtable" line="71"/>
            <declaration name="cm" type="ColorModel" line="75"/>
            <declaration name="red_map" type="byte[]" line="76"/>
            <declaration name="transparentPixel" type="int" line="77"/>
            <declaration name="transparentPixel_16" type="byte[]" line="78"/>
            <declaration name="greyModels" type="ColorModel" line="79"/>
            <method name="property" type="void" line="84">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="property" type="void" line="89">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="float"/>
                </params>
            </method>
            <method name="pngassert" type="void" line="92">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="93">
                    <declaration name="e" type="PNGException" line="94"/>
                </scope>
            </method>
            <method name="handleChunk" type="boolean" line="100">
                <params>
                    <param name="key" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="st" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="157">
                    this is not needed
                    if(target!=null) target.setDimensions(width,height);                    
                </comment>
                <comment line="203">
                    doesn&apos;t deal with 16 bit colors properly                    
                </comment>
                <comment line="204">
                    doesn&apos;t deal with 16 bit colors properly                    
                </comment>
                <comment line="218">
                    doesn&apos;t deal with 16 bit colors properly                    
                </comment>
                <comment line="219">
                    doesn&apos;t deal with 16 bit colors properly                    
                </comment>
                <comment line="221">
                    REMIND: Discarding the LSB for 16 bit depth here
                     means that the all pixels which match the MSB
                     will be treated as transparent.                    
                </comment>
                <declaration name="c" type="Color" line="103"/>
                <declaration name="ix" type="int" line="113"/>
                <declaration name="t" type="int" line="120"/>
                <scope line="161">
                    <declaration name="tsize" type="int" line="161"/>
                    <scope line="165"/>
                </scope>
                <declaration name="klen" type="int" line="175"/>
                <scope line="177">
                    <declaration name="tkey" type="String" line="178"/>
                    <declaration name="tvalue" type="String" line="179"/>
                </scope>
                <declaration name="alen" type="int" line="196"/>
                <scope line="205">
                    <scope line="207"/>
                </scope>
                <scope line="210"/>
                <declaration name="t" type="int" line="224"/>
            </method>
            <class name="PNGException" line="234">
                <extends class="IOException"/>
                <method name="PNGException" type="constructor" line="235">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
            </class>
            <method name="produceImage" type="void" line="240">
                <comment line="242">
                    this is not needed
                    ImageConsumer t = target;
                    if(t!=null) try {                    
                </comment>
                <comment line="272">
                    Figure out the color model                    
                </comment>
                <comment line="313">
                    this is going to be set in the pixel store
                    t.setColorModel(cm);
                    t.setHints(interlaceMethod !=0
                    ? ImageConsumer.TOPDOWNLEFTRIGHT | ImageConsumer.COMPLETESCANLINES
                    : ImageConsumer.TOPDOWNLEFTRIGHT | ImageConsumer.COMPLETESCANLINES |
                    ImageConsumer.SINGLEPASS | ImageConsumer.SINGLEFRAME);                    
                </comment>
                <comment line="320">
                    code added to make it work with ImageDecoder architecture                    
                </comment>
                <comment line="329">
                    end of adding                    
                </comment>
                <comment line="338">
                    These loops are far from being tuned.  They&apos;re this way to make them easy to
                     debug.  Tuning comes later.                    
                </comment>
                <comment line="340">
                    code changed. target not needed here
                    while(++pass&lt;=passLimit &amp;&amp; (t=target)!=null) {                    
                </comment>
                <comment line="359">
                    code changed. target not needed here
                    while (row &lt; height &amp;&amp; (t=target)!=null) {                    
                </comment>
                <comment line="460">
                    visit (row, col,
                    min (bHeight, height - row),                    
                </comment>
                <comment line="467">
                    code changed. target not needed here
                    t.setPixels(0,row,width,1,cm,wPixels,0,width);                    
                </comment>
                <comment line="470">
                    code added to make it work with ImageDecoder arch                    
                </comment>
                <comment line="472">
                    end of adding                    
                </comment>
                <comment line="475">
                    code changed. target not needed here
                    t.setPixels(0,row,width,1,cm,bPixels,0,width);                    
                </comment>
                <comment line="478">
                    code added to make it work with ImageDecoder arch                    
                </comment>
                <comment line="480">
                    end of adding                    
                </comment>
                <comment line="491">
                    code changed. target not needed here
                    t.setPixels(0,0,width,height,cm,wPixels,0,width);                    
                </comment>
                <comment line="494">
                    code added to make it work with ImageDecoder arch                    
                </comment>
                <comment line="496">
                    end of adding                    
                </comment>
                <comment line="499">
                    code changed. target not needed here
                    t.setPixels(0,0,width,height,cm,bPixels,0,width);                    
                </comment>
                <comment line="502">
                    code added to make it work with ImageDecoder arch                    
                </comment>
                <comment line="504">
                    end of adding                    
                </comment>
                <comment line="508">
                    Here, the function &quot;visit(row,column,height,width)&quot; obtains the
                    next transmitted pixel and paints a rectangle of the specified
                    height and width, whose upper-left corner is at the specified row
                    and column, using the color indicated by the pixel.  Note that row                    
                </comment>
                <comment line="514">
                    code not needed, don&apos;t deal with target
                    if((t=target)!=null) {
                    if(properties!=null) t.setProperties(properties);
                    t.imageComplete(ImageConsumer.STATICIMAGEDONE);                    
                </comment>
                <comment line="522">
                    code not needed }
                    is.close();                    
                </comment>
                <comment line="527">
                    code not needed
                    if((t=target)!=null) {
                    PNGEncoder.prChunk(e.toString(),inbuf,pos,limit-pos,true);                    
                </comment>
                <comment line="532">
                    code not needed
                    t.setProperties(properties);
                    t.imageComplete(ImageConsumer.IMAGEERROR|ImageConsumer.STATICIMAGEDONE);                    
                </comment>
                <comment line="541">
                    code not needed
                    target = null;
                    endTurn();                    
                </comment>
                <scope line="245">
                    <declaration name="is" type="InputStream" line="250"/>
                    <declaration name="bPixels" type="byte[]" line="254"/>
                    <declaration name="wPixels" type="int[]" line="255"/>
                    <declaration name="pixSize" type="int" line="256"/>
                    <declaration name="rowStride" type="int" line="257"/>
                    <declaration name="logDepth" type="int" line="258"/>
                    <scope line="267"/>
                    <declaration name="combinedType" type="int" line="269"/>
                    <declaration name="bitMask" type="int" line="270"/>
                    <scope line="285">
                        <declaration name="llog" type="int" line="285"/>
                        <scope line="286">
                            <declaration name="size" type="int" line="287"/>
                            <declaration name="ramp" type="byte" line="289"/>
                            <scope line="292"/>
                            <scope line="294"/>
                        </scope>
                    </scope>
                    <declaration name="flags" type="int" line="322"/>
                    <declaration name="samplesPerPixel" type="int" line="330"/>
                    <declaration name="bitsPerPixel" type="int" line="332"/>
                    <declaration name="bytesPerPixel" type="int" line="333"/>
                    <declaration name="pass" type="int" line="334"/>
                    <scope line="335"/>
                    <scope line="336"/>
                    <scope line="342">
                        <declaration name="row" type="int" line="343"/>
                        <declaration name="rowInc" type="int" line="344"/>
                        <declaration name="colInc" type="int" line="345"/>
                        <declaration name="bWidth" type="int" line="346"/>
                        <declaration name="bHeight" type="int" line="347"/>
                        <declaration name="sCol" type="int" line="348"/>
                        <declaration name="rowPixelWidth" type="int" line="349"/>
                        <declaration name="rowByteWidth" type="int" line="350"/>
                        <declaration name="pixelBufferInc" type="int" line="352"/>
                        <declaration name="rowOffset" type="int" line="353"/>
                        <declaration name="firstRow" type="boolean" line="354"/>
                        <declaration name="rowByteBuffer" type="byte[]" line="356"/>
                        <declaration name="prevRowByteBuffer" type="byte[]" line="357"/>
                        <scope line="361">
                            <declaration name="rowFilter" type="int" line="362"/>
                            <scope line="363">
                                <declaration name="n" type="int" line="364"/>
                            </scope>
                            <declaration name="col" type="int" line="371"/>
                            <declaration name="spos" type="int" line="372"/>
                            <declaration name="pixel" type="int" line="373"/>
                            <scope line="374">
                                <scope line="375">
                                    <scope line="398"/>
                                    <declaration name="isTransparent" type="boolean" line="410"/>
                                    <scope line="411"/>
                                    <scope line="415"/>
                                    <scope line="422">
                                        <declaration name="tx" type="int" line="422"/>
                                    </scope>
                                    <scope line="429">
                                        <declaration name="tx" type="int" line="429"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="465"/>
                            <scope line="473"/>
                            <declaration name="T" type="byte[]" line="483"/>
                        </scope>
                        <scope line="489"/>
                        <scope line="497"/>
                    </scope>
                </scope>
                <scope line="524">
                    <scope line="525"/>
                </scope>
                <scope line="538">
                    <scope line="539"/>
                    <scope line="539"/>
                </scope>
            </method>
            <method name="sendPixels" type="boolean" line="548">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixels" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="pixlength" type="int"/>
                </params>
                <declaration name="count" type="int" line="549"/>
                <scope line="551"/>
            </method>
            <method name="sendPixels" type="boolean" line="557">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixels" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="pixlength" type="int"/>
                </params>
                <declaration name="count" type="int" line="558"/>
                <scope line="560"/>
            </method>
            <method name="filterRow" type="void" line="568">
                <params>
                    <param name="rowByteBuffer" type="byte"/>
                    <param name="prevRow" type="byte[]"/>
                    <param name="rowFilter" type="int"/>
                    <param name="rowByteWidth" type="int"/>
                    <param name="bytesPerSample" type="int"/>
                </params>
                <declaration name="x" type="int" line="569"/>
                <scope line="583"/>
                <scope line="593">
                    <scope line="596">
                        <declaration name="a" type="int" line="597"/>
                    </scope>
                </scope>
            </method>
            <declaration name="startingRow" type="byte[]" line="615"/>
            <declaration name="startingCol" type="byte[]" line="616"/>
            <declaration name="rowIncrement" type="byte[]" line="617"/>
            <declaration name="colIncrement" type="byte[]" line="618"/>
            <declaration name="blockHeight" type="byte[]" line="619"/>
            <declaration name="blockWidth" type="byte[]" line="620"/>
            <declaration name="pos" type="int" line="623"/>
            <declaration name="chunkStart" type="int" line="624"/>
            <declaration name="chunkKey" type="int" line="625"/>
            <declaration name="seenEOF" type="boolean" line="626"/>
            <declaration name="signature" type="byte[]" line="628"/>
            <declaration name="inputStream" type="PNGFilterInputStream" line="631"/>
            <declaration name="underlyingInputStream" type="InputStream" line="632"/>
            <method name="PNGImageDecoder" type="constructor" line="637">
                <params>
                    <param name="src" type="InputStreamImageSource"/>
                    <param name="input" type="InputStream"/>
                </params>
                <comment line="639">
                    code added                    
                </comment>
                <comment line="643">
                    end of adding                    
                </comment>
                <comment line="644">
                    code changed
                    super(in);
                    target = t;
                    waitTurn();
                    new Thread(this).start();                    
                </comment>
            </method>
            <declaration name="inbuf" type="byte[]" line="663"/>
            <method name="fill" type="void" line="664">
                <scope line="665">
                    <scope line="666"/>
                    <scope line="670"/>
                    <declaration name="bsize" type="int" line="673"/>
                    <scope line="674">
                        <declaration name="n" type="int" line="675"/>
                        <scope line="676"/>
                    </scope>
                </scope>
            </method>
            <method name="need" type="boolean" line="681">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="nin" type="byte" line="686"/>
            </method>
            <method name="getInt" type="int" line="694">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getShort" type="int" line="700">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getByte" type="int" line="704">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getChunk" type="boolean" line="707">
                <declaration name="calcCRC" type="int" line="716"/>
            </method>
            <method name="readAll" type="void" line="721"/>
            <method name="getData" type="boolean" line="724"/>
            <declaration name="checkCRC" type="boolean" line="732"/>
            <method name="getCheckCRC" type="boolean" line="733"/>
            <method name="setCheckCRC" type="void" line="734">
                <params>
                    <param name="c" type="boolean"/>
                </params>
            </method>
            <method name="wrc" type="void" line="736">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="wrk" type="void" line="741">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="print" type="void" line="747"/>
            <declaration name="crc_table" type="int[]" line="753"/>
            <scope line="756">
                <scope line="757">
                    <declaration name="c" type="int" line="758"/>
                </scope>
            </scope>
            <method name="update_crc" type="int" line="773">
                <params>
                    <param name="crc" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="c" type="int" line="774"/>
            </method>
            <method name="crc" type="int" line="781">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <class name="Chromaticities" line="784">
                <declaration name="whiteX" type="float" line="785"/>
                <method name="Chromaticities" type="constructor" line="786">
                    <params>
                        <param name="wx" type="int"/>
                        <param name="wy" type="int"/>
                        <param name="rx" type="int"/>
                        <param name="ry" type="int"/>
                        <param name="gx" type="int"/>
                        <param name="gy" type="int"/>
                        <param name="bx" type="int"/>
                        <param name="by" type="int"/>
                    </params>
                </method>
                <method name="toString" type="String" line="796"/>
            </class>
        </class>
        <class name="PNGFilterInputStream" line="807">
            <extends class="FilterInputStream"/>
            <comment line="38">
                this is changed
                public class PNGImageDecoder extends FilterInputStream implements Runnable                
            </comment>
            <comment line="73">
                this is not needed
                ImageConsumer target;                
            </comment>
            <comment line="79">
                we need 6 bytes to store 16bpp value                
            </comment>
            <comment line="81">
                this is not needed
                PNGImageDecoder next;                
            </comment>
            <comment line="238">
                this is changed
                public void run() {                
            </comment>
            <comment line="623">
                abstract public class ChunkReader extends FilterInputStream {                
            </comment>
            <comment line="635">
                code changed
                public PNGImageDecoder(InputStream in, ImageConsumer t) throws IOException {                
            </comment>
            <comment line="651">
                code changed to make it work with ImageDecoder architecture
                static int ThreadLimit = 10;
                private synchronized static void waitTurn() {
                try {
                while(ThreadLimit&lt;=0) PNGImageDecoder.class.wait(1000);
                } catch(InterruptedException e){}
                ThreadLimit--;
                }
                private synchronized static void endTurn() {
                if(ThreadLimit&lt;=0) PNGImageDecoder.class.notify();
                ThreadLimit++;
                }                
            </comment>
            <comment line="731">
                abstract protected boolean handleChunk(int key, byte[] buf, int st, int len)
                    throws IOException;                
            </comment>
            <comment line="753">
                                
            </comment>
            <comment line="756">
                                
            </comment>
            <comment line="769">
                Update a running CRC with the bytes buf[0..len-1]--the CRC
                should be initialized to all 1&apos;s, and the transmitted value
                is the 1&apos;s complement of the final running CRC (see the                
            </comment>
            <comment line="781">
                                
            </comment>
            <declaration name="owner" type="PNGImageDecoder" line="808"/>
            <declaration name="underlyingInputStream" type="InputStream" line="809"/>
            <method name="PNGFilterInputStream" type="constructor" line="810">
                <params>
                    <param name="owner" type="PNGImageDecoder"/>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <method name="available" type="int" line="816"/>
            <method name="markSupported" type="boolean" line="818"/>
            <method name="read" type="int" line="819"/>
            <method name="read" type="int" line="824">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <method name="read" type="int" line="825">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="st" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="skip" type="long" line="833">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="i" type="int" line="834"/>
            </method>
        </class>
    </source>