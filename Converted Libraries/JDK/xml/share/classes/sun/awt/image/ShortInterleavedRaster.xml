<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.image">
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.RasterFormatException"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.ComponentSampleModel"/>
        <import package="java.awt.image.PixelInterleavedSampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferUShort"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Point"/>
        <class name="ShortInterleavedRaster" line="13">
            <extends class="ShortComponentRaster"/>
            <javadoc line="13">
                This class defines a Raster with pixels consisting of one or more 16-bit
                  data elements stored in close proximity to each other in a short integer
                  array.  The bit precision per data element is that
                  of the data type (that is, the bit precision for this Raster is 16).
                  There is only one pixel stride and one scanline stride for all
                  bands.  This type of Raster can be used with a
                  ComponentColorModel if there are multiple bands, or a
                  IndexColorModel if there is only one band.
                  &lt;p&gt;
                  For example, 5-6-5 RGB image data can be represented by a
                  ShortInterleavedRaster using a SinglePixelPackedSampleModel and
                  a ComponentColorModel.                
            </javadoc>
            <declaration name="maxX" type="int" line="28"/>
            <javadoc line="28">
                A cached copy of minX + width for use in bounds checks.                
            </javadoc>
            <declaration name="maxY" type="int" line="32"/>
            <javadoc line="32">
                A cached copy of minY + height for use in bounds checks.                
            </javadoc>
            <javadoc line="36">
                Constructs a ShortInterleavedRaster with the given SampleModel.
                  The Raster&apos;s upper left corner is origin and it is the same
                  size as the SampleModel.  A DataBuffer large enough to describe the
                  Raster is automatically created.  SampleModel must be of type
                  PixelInterleavedSampleModel or SinglePixelPackedSampleModel.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    origin          The Point that specified the origin.                    
                </param>
            </javadoc>
            <method name="ShortInterleavedRaster" type="constructor" line="45">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="48">
                Constructs a ShortInterleavedRaster with the given SampleModel
                  and DataBuffer.  The Raster&apos;s upper left corner is origin and
                  it is the same sizes the SampleModel.  The DataBuffer is not
                  initialized and must be a DataBufferUShort compatible with SampleModel.
                  SampleModel must be of type PixelInterleavedSampleModel or
                  SinglePixelPackedSampleModel.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    dataBuffer      The DataBufferUShort that contains the image data.                    
                </param>
                <param>
                    origin          The Point that specifies the origin.                    
                </param>
            </javadoc>
            <method name="ShortInterleavedRaster" type="constructor" line="59">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="62">
                Constructs a ShortInterleavedRaster with the given SampleModel,
                  DataBuffer, and parent.  DataBuffer must be a DataBufferUShort and
                  SampleModel must be of type PixelInterleavedSampleModel or
                  SinglePixelPackedSampleModel.  When translated into the base Raster&apos;s
                  coordinate system, aRegion must be contained by the base Raster.
                  Origin is the coodinate in the new Raster&apos;s coordinate system of
                  the origin of the base Raster.  (The base Raster is the Raster&apos;s
                  ancestor which has no parent.)
                  Note that this constructor should generally be called by other
                  constructors or create methods, it should not be used directly.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    dataBuffer      The DataBufferUShort that contains the image data.                    
                </param>
                <param>
                    aRegion         The Rectangle that specifies the image area.                    
                </param>
                <param>
                    origin          The Point that specifies the origin.                    
                </param>
                <param>
                    parent          The parent (if any) of this raster.                    
                </param>
            </javadoc>
            <method name="ShortInterleavedRaster" type="constructor" line="79">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="aRegion" type="Rectangle"/>
                    <param name="origin" type="Point"/>
                    <param name="parent" type="ShortInterleavedRaster"/>
                </params>
                <scope line="83"/>
                <declaration name="dbus" type="DataBufferUShort" line="86"/>
                <scope line="88">
                    <declaration name="csm" type="ComponentSampleModel" line="89"/>
                    <declaration name="xOffset" type="int" line="93"/>
                    <declaration name="yOffset" type="int" line="94"/>
                    <scope line="95"/>
                </scope>
                <scope line="99">
                    <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="100"/>
                    <declaration name="xOffset" type="int" line="105"/>
                    <declaration name="yOffset" type="int" line="106"/>
                </scope>
                <scope line="109"/>
            </method>
            <javadoc line="115">
                Returns a copy of the data offsets array. For each band the data offset
                  is the index into the band&apos;s data array, of the first sample of the
                  band.                
            </javadoc>
            <method name="getDataOffsets" type="int[]" line="120"/>
            <javadoc line="123">
                Returns the data offset for the specified band.  The data offset
                  is the index into the data array in which the first sample
                  of the first scanline is stored.                
                <param>
                    band  The band whose offset is returned.                    
                </param>
            </javadoc>
            <method name="getDataOffset" type="int" line="129">
                <params>
                    <param name="band" type="int"/>
                </params>
            </method>
            <javadoc line="132">
                Returns the scanline stride -- the number of data array elements between
                  a given sample and the same sample in the same column of the next row.                
            </javadoc>
            <method name="getScanlineStride" type="int" line="136"/>
            <javadoc line="139">
                Returns pixel stride -- the number of data array elements  between two
                  samples for the same band on the same scanline.                
            </javadoc>
            <method name="getPixelStride" type="int" line="143"/>
            <javadoc line="146">
                Returns a reference to the data array.                
            </javadoc>
            <method name="getDataStorage" type="short[]" line="149"/>
            <javadoc line="152">
                Returns the data elements for all bands at the specified
                  location.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinate is out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    outData  An object reference to an array of type defined by
                      getTransferType() and length getNumDataElements().
                      If null an array of appropriate type and size will be
                      allocated.                    
                </param>
                <return>
                    An object reference to an array of type defined by
                      getTransferType() with the request pixel data.                    
                </return>
            </javadoc>
            <method name="getDataElements" type="Object" line="168">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="169"/>
                <declaration name="outData" type="short" line="172"/>
                <scope line="173"/>
                <scope line="176"/>
                <declaration name="off" type="int" line="179"/>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Returns an array  of data elements from the specified rectangular
                  region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.
                  &lt;pre&gt;
                  short[] bandData = (short[])Raster.getDataElements(x, y, w, h, null);
                  int numDataElements = Raster.getBands();
                  short[] pixel = new short[numDataElements];
                  // To find the data element at location (x2, y2)
                  System.arraycopy(bandData, ((y2-y)w + (x2-x))numDataElements,
                  pixel, 0, numDataElements);
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    width    Width of the pixel rectangle.                    
                </param>
                <param>
                    height   Height of the pixel rectangle.                    
                </param>
                <param>
                    outData  An object reference to an array of type defined by
                      getTransferType() and length whgetNumDataElements().
                      If null an array of appropriate type and size will be
                      allocated.                    
                </param>
                <return>
                    An object reference to an array of type defined by
                      getTransferType() with the request pixel data.                    
                </return>
            </javadoc>
            <method name="getDataElements" type="Object" line="211">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="212"/>
                <declaration name="outData" type="short" line="215"/>
                <scope line="216"/>
                <scope line="219"/>
                <declaration name="yoff" type="int" line="222"/>
                <declaration name="xoff" type="int" line="223"/>
                <declaration name="off" type="int" line="224"/>
                <declaration name="xstart" type="int" line="225"/>
                <declaration name="ystart" type="int" line="226"/>
                <scope line="227">
                    <scope line="229">
                        <scope line="230"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="237">
                Returns a short integer array of data elements from the
                  specified rectangular region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  &lt;pre&gt;
                  short[] bandData = Raster.getShortData(x, y, w, h, null);
                  // To find the data element at location (x2, y2)
                  short dataElenent = bandData[((y2-y)w + (x2-x))];
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    width    Width of the sample rectangle.                    
                </param>
                <param>
                    height   Height of the sample rectangle.                    
                </param>
                <param>
                    band     The band to return.                    
                </param>
                <param>
                    outData  If non-null, data elements for all bands
                      at the specified location are returned in this array.                    
                </param>
                <return>
                    Data array with data elements for all bands.                    
                </return>
            </javadoc>
            <method name="getShortData" type="short[]" line="256">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="band" type="int"/>
                    <param name="outData" type="short[]"/>
                </params>
                <scope line="257"/>
                <scope line="260"/>
                <declaration name="yoff" type="int" line="263"/>
                <declaration name="xoff" type="int" line="264"/>
                <declaration name="off" type="int" line="265"/>
                <declaration name="xstart" type="int" line="266"/>
                <declaration name="ystart" type="int" line="267"/>
                <scope line="268">
                    <scope line="269"/>
                    <scope line="272">
                        <scope line="273"/>
                    </scope>
                </scope>
                <scope line="279">
                    <scope line="280">
                        <scope line="282"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="289">
                Returns a short integer array  of data elements from the
                  specified rectangular region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  &lt;pre&gt;
                  short[] bandData = Raster.getShortData(x, y, w, h, null);
                  int numDataElements = Raster.getNumBands();
                  short[] pixel = new short[numDataElements];
                  // To find the data element at location (x2, y2)
                  System.arraycopy(bandData, ((y2-y)w + (x2-x))numDataElements,
                  pixel, 0, numDataElements);
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    width    Width of the pixel rectangle.                    
                </param>
                <param>
                    height   Height of the pixel rectangle.                    
                </param>
                <param>
                    outData  If non-null, data elements for all bands
                      at the specified location are returned in this array.                    
                </param>
                <return>
                    Data array with data elements for all bands.                    
                </return>
            </javadoc>
            <method name="getShortData" type="short[]" line="310">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="outData" type="short[]"/>
                </params>
                <scope line="311"/>
                <scope line="314"/>
                <declaration name="yoff" type="int" line="317"/>
                <declaration name="xoff" type="int" line="318"/>
                <declaration name="off" type="int" line="319"/>
                <declaration name="xstart" type="int" line="320"/>
                <declaration name="ystart" type="int" line="321"/>
                <scope line="322">
                    <scope line="324">
                        <scope line="325"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="332">
                Stores the data elements for all bands at the specified location.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinate is out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    inData   An object reference to an array of type defined by
                      getTransferType() and length getNumDataElements()
                      containing the pixel data to place at x,y.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="344">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="345"/>
                <declaration name="inData" type="short" line="348"/>
                <declaration name="off" type="int" line="349"/>
                <scope line="350"/>
            </method>
            <javadoc line="355">
                Stores the Raster data at the specified location.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.                
                <param>
                    x          The X coordinate of the pixel location.                    
                </param>
                <param>
                    y          The Y coordinate of the pixel location.                    
                </param>
                <param>
                    inRaster   Raster of data to place at x,y location.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="363">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="inRaster" type="Raster"/>
                </params>
                <declaration name="dstOffX" type="int" line="364"/>
                <declaration name="dstOffY" type="int" line="365"/>
                <declaration name="width" type="int" line="366"/>
                <declaration name="height" type="int" line="367"/>
                <scope line="368"/>
            </method>
            <javadoc line="373">
                Stores the Raster data at the specified location.                
                <param>
                    dstX The absolute X coordinate of the destination pixel
                      that will receive a copy of the upper-left pixel of the
                      inRaster                    
                </param>
                <param>
                    dstY The absolute Y coordinate of the destination pixel
                      that will receive a copy of the upper-left pixel of the
                      inRaster                    
                </param>
                <param>
                    width      The number of pixels to store horizontally                    
                </param>
                <param>
                    height     The number of pixels to store vertically                    
                </param>
                <param>
                    inRaster   Raster of data to place at x,y location.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="385">
                <params>
                    <param name="dstX" type="int"/>
                    <param name="dstY" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="inRaster" type="Raster"/>
                </params>
                <scope line="386"/>
                <declaration name="srcOffX" type="int" line="389"/>
                <declaration name="srcOffY" type="int" line="390"/>
                <declaration name="tdata" type="Object" line="391"/>
                <scope line="392"/>
            </method>
            <javadoc line="397">
                Stores an array of data elements into the specified rectangular
                  region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of transferType.
                  The data elements in the
                  data array are assumed to be packed.  That is, a data element
                  for the nth band at location (x2, y2) would be found at:
                  &lt;pre&gt;
                  inData[((y2-y)w + (x2-x))numDataElements + n]
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    inData   An object reference to an array of type defined by
                      getTransferType() and length whgetNumDataElements()
                      containing the pixel data to place between x,y and
                      x+h, y+h.                    
                </param>
            </javadoc>
            <method name="setDataElements" type="void" line="419">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="420"/>
                <declaration name="inData" type="short" line="423"/>
                <declaration name="yoff" type="int" line="424"/>
                <declaration name="xoff" type="int" line="425"/>
                <declaration name="off" type="int" line="426"/>
                <declaration name="xstart" type="int" line="427"/>
                <declaration name="ystart" type="int" line="428"/>
                <scope line="429">
                    <scope line="431">
                        <scope line="432"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="439">
                Stores a short integer array of data elements into the
                  specified rectangular region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  The data elements in the
                  data array are assumed to be packed.  That is, a data element
                  at location (x2, y2) would be found at:
                  &lt;pre&gt;
                  inData[((y2-y)w + (x2-x))]
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    band     The band to set.                    
                </param>
                <param>
                    inData   The data elements to be stored.                    
                </param>
            </javadoc>
            <method name="putShortData" type="void" line="457">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="band" type="int"/>
                    <param name="inData" type="short[]"/>
                </params>
                <scope line="458"/>
                <declaration name="yoff" type="int" line="461"/>
                <declaration name="xoff" type="int" line="462"/>
                <declaration name="off" type="int" line="463"/>
                <declaration name="xstart" type="int" line="464"/>
                <declaration name="ystart" type="int" line="465"/>
                <scope line="466">
                    <scope line="467"/>
                    <scope line="470">
                        <scope line="471"/>
                    </scope>
                </scope>
                <scope line="477">
                    <scope line="478">
                        <scope line="480"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="487">
                Stores a short integer array of data elements into the
                  specified rectangular region.
                  An ArrayIndexOutOfBounds exception will be thrown at runtime
                  if the pixel coordinates are out of bounds.
                  The data elements in the
                  data array are assumed to be packed.  That is, a data element
                  for the nth band at location (x2, y2) would be found at:
                  &lt;pre&gt;
                  inData[((y2-y)w + (x2-x))numDataElements + n]
                  &lt;/pre&gt;                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    inData   The data elements to be stored.                    
                </param>
            </javadoc>
            <method name="putShortData" type="void" line="504">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="inData" type="short[]"/>
                </params>
                <scope line="505"/>
                <declaration name="yoff" type="int" line="508"/>
                <declaration name="xoff" type="int" line="509"/>
                <declaration name="off" type="int" line="510"/>
                <declaration name="xstart" type="int" line="511"/>
                <declaration name="ystart" type="int" line="512"/>
                <scope line="513">
                    <scope line="515">
                        <scope line="516"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="523">
                Creates a subraster given a region of the raster.  The x and y
                  coordinates specify the horizontal and vertical offsets
                  from the upper-left corner of this raster to the upper-left corner
                  of the subraster.  A subset of the bands of the parent Raster may
                  be specified.  If this is null, then all the bands are present in the
                  subRaster. A translation to the subRaster may also be specified.
                  Note that the subraster will reference the same
                  band objects as the parent raster, but using different offsets.                
                <param>
                    x               X offset.                    
                </param>
                <param>
                    y               Y offset.                    
                </param>
                <param>
                    width           Width (in pixels) of the subraster.                    
                </param>
                <param>
                    height          Height (in pixels) of the subraster.                    
                </param>
                <param>
                    x0              Translated X origin of the subraster.                    
                </param>
                <param>
                    y0              Translated Y origin of the subraster.                    
                </param>
                <param>
                    bandList        Array of band indices.                    
                </param>
                <exception>
                    RasterFormatExceptionif the specified bounding box is outside of the parent raster.                    
                </exception>
            </javadoc>
            <method name="createChild" type="Raster" line="541">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="x0" type="int"/>
                    <param name="y0" type="int"/>
                    <param name="bandList" type="int[]"/>
                </params>
                <declaration name="newRaster" type="WritableRaster" line="542"/>
            </method>
            <javadoc line="545">
                Creates a Writable subRaster given a region of the Raster. The x and y
                  coordinates specify the horizontal and vertical offsets
                  from the upper-left corner of this Raster to the upper-left corner
                  of the subRaster.  A subset of the bands of the parent Raster may
                  be specified.  If this is null, then all the bands are present in the
                  subRaster. A translation to the subRaster may also be specified.
                  Note that the subRaster will reference the same
                  DataBuffers as the parent Raster, but using different offsets.                
                <param>
                    x               X offset.                    
                </param>
                <param>
                    y               Y offset.                    
                </param>
                <param>
                    width           Width (in pixels) of the subraster.                    
                </param>
                <param>
                    height          Height (in pixels) of the subraster.                    
                </param>
                <param>
                    x0              Translated X origin of the subraster.                    
                </param>
                <param>
                    y0              Translated Y origin of the subraster.                    
                </param>
                <param>
                    bandList        Array of band indices.                    
                </param>
                <exception>
                    RasterFormatExceptionif the specified bounding box is outside of the parent Raster.                    
                </exception>
            </javadoc>
            <method name="createWritableChild" type="WritableRaster" line="563">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="x0" type="int"/>
                    <param name="y0" type="int"/>
                    <param name="bandList" type="int[]"/>
                </params>
                <scope line="564"/>
                <scope line="567"/>
                <scope line="570"/>
                <scope line="573"/>
                <declaration name="sm" type="SampleModel" line="576"/>
                <declaration name="deltaX" type="int" line="579"/>
                <declaration name="deltaY" type="int" line="580"/>
            </method>
            <javadoc line="583">
                Creates a Raster with the same layout but using a different
                  width and height, and with new zeroed data arrays.                
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="587">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="588"/>
                <declaration name="sm" type="SampleModel" line="591"/>
            </method>
            <javadoc line="594">
                Creates a Raster with the same layout and the same
                  width and height, and with new zeroed data arrays.  If
                  the Raster is a subRaster, this will call
                  createCompatibleRaster(width, height).                
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="600"/>
            <javadoc line="603">
                Verify that the layout parameters are consistent with
                  the data.  If strictCheck
                  is false, this method will check for ArrayIndexOutOfBounds conditions.  If
                  strictCheck is true, this method will check for additional error
                  conditions such as line wraparound (width of a line greater than
                  the scanline stride).                
                <return>
                    String   Error string, if the layout is incompatible with
                      the data.  Otherwise returns null.                    
                </return>
            </javadoc>
            <method name="verify" type="void" line="613">
                <params>
                    <param name="strictCheck" type="boolean"/>
                </params>
                <declaration name="maxSize" type="int" line="614"/>
                <declaration name="size" type="int" line="615"/>
                <scope line="616">
                    <scope line="618"/>
                </scope>
                <scope line="622"/>
            </method>
            <method name="toString" type="String" line="626"/>
        </class>
    </source>