<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt">
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event.PaintEvent"/>
        <class name="RepaintArea" line="6">
            <javadoc line="6">
                The &lt;code&gt;RepaintArea&lt;/code&gt; is a geometric construct created for the
                  purpose of holding the geometry of several coalesced paint events.
                  This geometry is accessed synchronously, although it is written such
                  that painting may still be executed asynchronously.                
                <author>
                    Eric Hawkes                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="MAX_BENEFIT_RATIO" type="int" line="15"/>
            <javadoc line="15">
                Maximum ratio of bounding rectangle to benefit for which
                  both the vertical and horizontal unions are repainted.
                  For smaller ratios the whole bounding rectangle is repainted.                
                <see>
                    #paint                    
                </see>
            </javadoc>
            <declaration name="HORIZONTAL" type="int" line="22"/>
            <declaration name="VERTICAL" type="int" line="23"/>
            <declaration name="UPDATE" type="int" line="24"/>
            <declaration name="RECT_COUNT" type="int" line="25"/>
            <declaration name="paintRects" type="Rectangle" line="26"/>
            <javadoc line="27">
                Constructs a new &lt;code&gt;RepaintArea&lt;/code&gt;                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="RepaintArea" type="constructor" line="31"/>
            <javadoc line="33">
                Constructs a new &lt;code&gt;RepaintArea&lt;/code&gt; initialized to match
                  the values of the specified RepaintArea.                
                <param>
                    ra  the &lt;code&gt;RepaintArea&lt;/code&gt; from which to copy initial
                      values to a newly constructed RepaintArea                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="RepaintArea" type="constructor" line="40">
                <params>
                    <param name="ra" type="RepaintArea"/>
                </params>
                <scope line="41"/>
            </method>
            <javadoc line="45">
                Adds a &lt;code&gt;Rectangle&lt;/code&gt; to this &lt;code&gt;RepaintArea&lt;/code&gt;.
                  PAINT Rectangles are divided into mostly vertical and mostly horizontal.
                  Each group is unioned together.
                  UPDATE Rectangles are unioned.                
                <param>
                    r   the specified &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    id  possible values PaintEvent.UPDATE or PaintEvent.PAINT                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="add" type="void" line="54">
                <params>
                    <param name="r" type="Rectangle"/>
                    <param name="id" type="int"/>
                </params>
                <scope line="55"/>
                <declaration name="addTo" type="int" line="58"/>
                <scope line="59"/>
                <scope line="62"/>
                <scope line="65"/>
            </method>
            <javadoc line="69">
                Creates a new &lt;code&gt;RepaintArea&lt;/code&gt; with the same geometry as this
                  RepaintArea, then removes all of the geometry from this
                  RepaintArea and restores it to an empty RepaintArea.                
                <return>
                    ra a new &lt;code&gt;RepaintArea&lt;/code&gt; having the same geometry as
                      this RepaintArea.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="cloneAndReset" type="RepaintArea" line="77">
                <declaration name="ra" type="RepaintArea" line="78"/>
                <scope line="79"/>
            </method>
            <method name="isEmpty" type="boolean" line="84">
                <scope line="85">
                    <scope line="86"/>
                </scope>
            </method>
            <javadoc line="92">
                Constrains the size of the repaint area to the passed in bounds.                
            </javadoc>
            <method name="constrain" type="void" line="95">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="96">
                    <declaration name="rect" type="Rectangle" line="97"/>
                    <scope line="98">
                        <scope line="99"/>
                        <scope line="103"/>
                        <declaration name="xDelta" type="int" line="107"/>
                        <scope line="108"/>
                        <declaration name="yDelta" type="int" line="111"/>
                        <scope line="112"/>
                        <scope line="115"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="121">
                Marks the passed in region as not needing to be painted. It&apos;s possible
                  this will do nothing.                
            </javadoc>
            <method name="subtract" type="void" line="125">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="subtract" type="Rectangle" line="126"/>
                <scope line="127">
                    <scope line="128">
                        <scope line="129"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="135">
                Invokes paint and update on target Component with optimal
                  rectangular clip region.
                  If PAINT bounding rectangle is less than
                  MAX_BENEFIT_RATIO times the benefit, then the vertical and horizontal unions are
                  painted separately.  Otherwise the entire bounding rectangle is painted.                
                <param>
                    target Component to &lt;code&gt;paint&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt;                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="paint" type="void" line="144">
                <params>
                    <param name="target" type="Object"/>
                    <param name="shouldClearRectBeforePaint" type="boolean"/>
                </params>
                <declaration name="comp" type="Component" line="145"/>
                <scope line="146"/>
                <scope line="149"/>
                <declaration name="ra" type="RepaintArea" line="152"/>
                <scope line="153"/>
                <scope line="156">
                    <declaration name="paintRect" type="Rectangle" line="157"/>
                    <declaration name="square" type="int" line="158"/>
                    <declaration name="benefit" type="int" line="159"/>
                    <scope line="160"/>
                </scope>
                <scope line="165">
                    <scope line="166">
                        <declaration name="g" type="Graphics" line="167"/>
                        <scope line="168">
                            <scope line="169">
                                <scope line="171"/>
                                <scope line="174">
                                    <scope line="175"/>
                                </scope>
                            </scope>
                            <scope line="181"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="188">
                Calls &lt;code&gt;Component.update(Graphics)&lt;/code&gt; with given Graphics.                
            </javadoc>
            <method name="updateComponent" type="void" line="191">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="192"/>
            </method>
            <javadoc line="196">
                Calls &lt;code&gt;Component.paint(Graphics)&lt;/code&gt; with given Graphics.                
            </javadoc>
            <method name="paintComponent" type="void" line="199">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="200"/>
            </method>
            <javadoc line="204">
                Subtracts subtr from rect. If the result is rectangle
                  changes rect and returns true. Otherwise false.                
            </javadoc>
            <method name="subtract" type="boolean" line="208">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="subtr" type="Rectangle"/>
                </params>
                <scope line="209"/>
                <declaration name="common" type="Rectangle" line="212"/>
                <scope line="213"/>
                <scope line="216">
                    <scope line="217"/>
                    <scope line="222"/>
                </scope>
                <scope line="228">
                    <scope line="229"/>
                    <scope line="233"/>
                </scope>
            </method>
            <method name="toString" type="String" line="240"/>
        </class>
    </source>