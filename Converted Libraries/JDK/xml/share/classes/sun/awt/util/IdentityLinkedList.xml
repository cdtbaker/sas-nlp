<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.awt.util">
        <import package="java.util.AbstractSequentialList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.Deque"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="IdentityLinkedList" line="37">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractSequentialList">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <comment line="311">
                Positional Access Operations                
            </comment>
            <comment line="385">
                Search Operations                
            </comment>
            <comment line="431">
                Queue operations.                
            </comment>
            <comment line="487">
                Deque operations                
            </comment>
            <implements interface="List">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Deque">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <javadoc line="37">
                Linked list implementation of the &lt;tt&gt;List&lt;/tt&gt; interface.  Implements all
                  optional list operations, and permits all elements (including
                  &lt;tt&gt;null&lt;/tt&gt;).  In addition to implementing the &lt;tt&gt;List&lt;/tt&gt; interface,
                  the &lt;tt&gt;IdentityLinkedList&lt;/tt&gt; class provides uniformly named methods to
                  &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt; and &lt;tt&gt;insert&lt;/tt&gt; an element at the
                  beginning and end of the list.  These operations allow linked lists to be
                  used as a stack, {@linkplain Queue queue}, or {@linkplain Dequedouble-ended queue}. &lt;p&gt;
                  The class implements the &lt;tt&gt;Deque&lt;/tt&gt; interface, providing
                  first-in-first-out queue operations for &lt;tt&gt;add&lt;/tt&gt;,
                  &lt;tt&gt;poll&lt;/tt&gt;, along with other stack and deque operations.&lt;p&gt;
                  All of the operations perform as could be expected for a doubly-linked
                  list.  Operations that index into the list will traverse the list from
                  the beginning or the end, whichever is closer to the specified index.&lt;p&gt;
                  &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;
                  If multiple threads access a linked list concurrently, and at least
                  one of the threads modifies the list structurally, it &lt;i&gt;must&lt;/i&gt; be
                  synchronized externally.  (A structural modification is any operation
                  that adds or deletes one or more elements; merely setting the value of
                  an element is not a structural modification.)  This is typically
                  accomplished by synchronizing on some object that naturally
                  encapsulates the list.
                  If no such object exists, the list should be &quot;wrapped&quot; using the{@link Collections#synchronizedList Collections.synchronizedList}method.  This is best done at creation time, to prevent accidental
                  unsynchronized access to the list:&lt;pre&gt;
                  List list = Collections.synchronizedList(new IdentityLinkedList(...));&lt;/pre&gt;
                  &lt;p&gt;The iterators returned by this class&apos;s &lt;tt&gt;iterator&lt;/tt&gt; and
                  &lt;tt&gt;listIterator&lt;/tt&gt; methods are &lt;i&gt;fail-fast&lt;/i&gt;: if the list is
                  structurally modified at any time after the iterator is created, in
                  any way except through the Iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; or
                  &lt;tt&gt;add&lt;/tt&gt; methods, the iterator will throw a {@link ConcurrentModificationException}.  Thus, in the face of concurrent
                  modification, the iterator fails quickly and cleanly, rather than
                  risking arbitrary, non-deterministic behavior at an undetermined
                  time in the future.
                  &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed
                  as it is, generally speaking, impossible to make any hard guarantees in the
                  presence of unsynchronized concurrent modification.  Fail-fast iterators
                  throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis.
                  Therefore, it would be wrong to write a program that depended on this
                  exception for its correctness:   &lt;i&gt;the fail-fast behavior of iterators
                  should be used only to detect bugs.&lt;/i&gt;                
            </javadoc>
            <declaration name="header" type="Entry&lt;E&gt;" line="93"/>
            <declaration name="size" type="int" line="94"/>
            <javadoc line="96">
                Constructs an empty list.                
            </javadoc>
            <method name="IdentityLinkedList" type="constructor" line="99"/>
            <javadoc line="103">
                Constructs a list containing the elements of the specified
                  collection, in the order they are returned by the collection&apos;s
                  iterator.                
                <param>
                    c the collection whose elements are to be placed into this list                    
                </param>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="IdentityLinkedList" type="constructor" line="111">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="116">
                Returns the first element in this list.                
                <return>
                    the first element in this list                    
                </return>
                <throws>
                    NoSuchElementException if this list is empty                    
                </throws>
            </javadoc>
            <method name="getFirst" type="E" line="122"/>
            <javadoc line="129">
                Returns the last element in this list.                
                <return>
                    the last element in this list                    
                </return>
                <throws>
                    NoSuchElementException if this list is empty                    
                </throws>
            </javadoc>
            <method name="getLast" type="E" line="135"/>
            <javadoc line="142">
                Removes and returns the first element from this list.                
                <return>
                    the first element from this list                    
                </return>
                <throws>
                    NoSuchElementException if this list is empty                    
                </throws>
            </javadoc>
            <method name="removeFirst" type="E" line="148"/>
            <javadoc line="152">
                Removes and returns the last element from this list.                
                <return>
                    the last element from this list                    
                </return>
                <throws>
                    NoSuchElementException if this list is empty                    
                </throws>
            </javadoc>
            <method name="removeLast" type="E" line="158"/>
            <javadoc line="162">
                Inserts the specified element at the beginning of this list.                
                <param>
                    e the element to add                    
                </param>
            </javadoc>
            <method name="addFirst" type="void" line="167">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="171">
                Appends the specified element to the end of this list.
                  &lt;p&gt;This method is equivalent to {@link #add}.                
                <param>
                    e the element to add                    
                </param>
            </javadoc>
            <method name="addLast" type="void" line="178">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="182">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains
                  at least one element &lt;tt&gt;e&lt;/tt&gt; such that
                  &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o == e)&lt;/tt&gt;.                
                <param>
                    o element whose presence in this list is to be tested                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="191">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="195">
                Returns the number of elements in this list.                
                <return>
                    the number of elements in this list                    
                </return>
            </javadoc>
            <method name="size" type="int" line="200"/>
            <javadoc line="204">
                Appends the specified element to the end of this list.
                  &lt;p&gt;This method is equivalent to {@link #addLast}.                
                <param>
                    e element to be appended to this list                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})                    
                </return>
            </javadoc>
            <method name="add" type="boolean" line="212">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="217">
                Removes the first occurrence of the specified element from this list,
                  if it is present.  If this list does not contain the element, it is
                  unchanged.  More formally, removes the element with the lowest index
                  &lt;tt&gt;i&lt;/tt&gt; such that &lt;tt&gt;get(i)==o&lt;/tt&gt;
                  (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list
                  contained the specified element (or equivalently, if this list
                  changed as a result of the call).                
                <param>
                    o element to be removed from this list, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="229">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="230">
                    <scope line="231"/>
                </scope>
            </method>
            <javadoc line="239">
                Appends all of the elements in the specified collection to the end of
                  this list, in the order that they are returned by the specified
                  collection&apos;s iterator.  The behavior of this operation is undefined if
                  the specified collection is modified while the operation is in
                  progress.  (Note that this will occur if the specified collection is
                  this list, and it&apos;s nonempty.)                
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call                    
                </return>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="251">
                <params>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
            </method>
            <javadoc line="255">
                Inserts all of the elements in the specified collection into this
                  list, starting at the specified position.  Shifts the element
                  currently at that position (if any) and any subsequent elements to
                  the right (increases their indices).  The new elements will appear
                  in the list in the order that they are returned by the
                  specified collection&apos;s iterator.                
                <param>
                    index index at which to insert the first element
                      from the specified collection                    
                </param>
                <param>
                    c collection containing elements to be added to this list                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
                <throws>
                    NullPointerException if the specified collection is null                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="270">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection<? extends E>"/>
                </params>
                <declaration name="a" type="Object[]" line="274"/>
                <declaration name="numNew" type="int" line="275"/>
                <declaration name="successor" type="Entry&lt;E&gt;" line="280"/>
                <declaration name="predecessor" type="Entry&lt;E&gt;" line="281"/>
                <scope line="282">
                    <declaration name="e" type="Entry&lt;E&gt;" line="283"/>
                </scope>
            </method>
            <javadoc line="293">
                Removes all of the elements from this list.                
            </javadoc>
            <method name="clear" type="void" line="296">
                <declaration name="e" type="Entry&lt;E&gt;" line="297"/>
                <scope line="298">
                    <declaration name="next" type="Entry&lt;E&gt;" line="299"/>
                </scope>
            </method>
            <javadoc line="312">
                Returns the element at the specified position in this list.                
                <param>
                    index index of the element to return                    
                </param>
                <return>
                    the element at the specified position in this list                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="get" type="E" line="319">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="323">
                Replaces the element at the specified position in this list with the
                  specified element.                
                <param>
                    index index of the element to replace                    
                </param>
                <param>
                    element element to be stored at the specified position                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="set" type="E" line="332">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <declaration name="e" type="Entry&lt;E&gt;" line="333"/>
                <declaration name="oldVal" type="E" line="334"/>
            </method>
            <javadoc line="339">
                Inserts the specified element at the specified position in this list.
                  Shifts the element currently at that position (if any) and any
                  subsequent elements to the right (adds one to their indices).                
                <param>
                    index index at which the specified element is to be inserted                    
                </param>
                <param>
                    element element to be inserted                    
                </param>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="348">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
            </method>
            <javadoc line="352">
                Removes the element at the specified position in this list.  Shifts any
                  subsequent elements to the left (subtracts one from their indices).
                  Returns the element that was removed from the list.                
                <param>
                    index the index of the element to be removed                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="remove" type="E" line="361">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="365">
                Returns the indexed entry.                
            </javadoc>
            <method name="entry" type="Entry<E>" line="368">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="e" type="Entry&lt;E&gt;" line="372"/>
                <scope line="373"/>
                <scope line="376"/>
            </method>
            <javadoc line="386">
                Returns the index of the first occurrence of the specified element
                  in this list, or -1 if this list does not contain the element.
                  More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;get(i)==o&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <return>
                    the index of the first occurrence of the specified element in
                      this list, or -1 if this list does not contain the element                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="397">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="index" type="int" line="398"/>
                <scope line="399">
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="408">
                Returns the index of the last occurrence of the specified element
                  in this list, or -1 if this list does not contain the element.
                  More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that
                  &lt;tt&gt;get(i)==o&lt;/tt&gt;,
                  or -1 if there is no such index.                
                <param>
                    o element to search for                    
                </param>
                <return>
                    the index of the last occurrence of the specified element in
                      this list, or -1 if this list does not contain the element                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="419">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="index" type="int" line="420"/>
                <scope line="421">
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="432">
                Retrieves, but does not remove, the head (first element) of this list.                
                <return>
                    the head of this list, or &lt;tt&gt;null&lt;/tt&gt; if this list is empty                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="peek" type="E" line="437"/>
            <javadoc line="443">
                Retrieves, but does not remove, the head (first element) of this list.                
                <return>
                    the head of this list                    
                </return>
                <throws>
                    NoSuchElementException if this list is empty                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="element" type="E" line="449"/>
            <javadoc line="453">
                Retrieves and removes the head (first element) of this list                
                <return>
                    the head of this list, or &lt;tt&gt;null&lt;/tt&gt; if this list is empty                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="poll" type="E" line="458"/>
            <javadoc line="464">
                Retrieves and removes the head (first element) of this list.                
                <return>
                    the head of this list                    
                </return>
                <throws>
                    NoSuchElementException if this list is empty                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="remove" type="E" line="471"/>
            <javadoc line="475">
                Adds the specified element as the tail (last element) of this list.                
                <param>
                    e the element to add                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Queue#offer})                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="offer" type="boolean" line="482">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="487">
                Inserts the specified element at the front of this list.                
                <param>
                    e the element to insert                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Deque#offerFirst})                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="offerFirst" type="boolean" line="494">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="499">
                Inserts the specified element at the end of this list.                
                <param>
                    e the element to insert                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Deque#offerLast})                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="offerLast" type="boolean" line="506">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="511">
                Retrieves, but does not remove, the first element of this list,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this list is empty.                
                <return>
                    the first element of this list, or &lt;tt&gt;null&lt;/tt&gt;
                      if this list is empty                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="peekFirst" type="E" line="519"/>
            <javadoc line="525">
                Retrieves, but does not remove, the last element of this list,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this list is empty.                
                <return>
                    the last element of this list, or &lt;tt&gt;null&lt;/tt&gt;
                      if this list is empty                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="peekLast" type="E" line="533"/>
            <javadoc line="539">
                Retrieves and removes the first element of this list,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this list is empty.                
                <return>
                    the first element of this list, or &lt;tt&gt;null&lt;/tt&gt; if
                      this list is empty                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="pollFirst" type="E" line="547"/>
            <javadoc line="553">
                Retrieves and removes the last element of this list,
                  or returns &lt;tt&gt;null&lt;/tt&gt; if this list is empty.                
                <return>
                    the last element of this list, or &lt;tt&gt;null&lt;/tt&gt; if
                      this list is empty                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="pollLast" type="E" line="561"/>
            <javadoc line="567">
                Pushes an element onto the stack represented by this list.  In other
                  words, inserts the element at the front of this list.
                  &lt;p&gt;This method is equivalent to {@link #addFirst}.                
                <param>
                    e the element to push                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="push" type="void" line="576">
                <params>
                    <param name="e" type="E"/>
                </params>
            </method>
            <javadoc line="580">
                Pops an element from the stack represented by this list.  In other
                  words, removes and returns the first element of this list.
                  &lt;p&gt;This method is equivalent to {@link #removeFirst()}.                
                <return>
                    the element at the front of this list (which is the top
                      of the stack represented by this list)                    
                </return>
                <throws>
                    NoSuchElementException if this list is empty                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="pop" type="E" line="591"/>
            <javadoc line="595">
                Removes the first occurrence of the specified element in this
                  list (when traversing the list from head to tail).  If the list
                  does not contain the element, it is unchanged.                
                <param>
                    o element to be removed from this list, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the list contained the specified element                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="removeFirstOccurrence" type="boolean" line="604">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="608">
                Removes the last occurrence of the specified element in this
                  list (when traversing the list from head to tail).  If the list
                  does not contain the element, it is unchanged.                
                <param>
                    o element to be removed from this list, if present                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the list contained the specified element                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="removeLastOccurrence" type="boolean" line="617">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="618">
                    <scope line="619"/>
                </scope>
            </method>
            <javadoc line="627">
                Returns a list-iterator of the elements in this list (in proper
                  sequence), starting at the specified position in the list.
                  Obeys the general contract of &lt;tt&gt;List.listIterator(int)&lt;/tt&gt;.&lt;p&gt;
                  The list-iterator is &lt;i&gt;fail-fast&lt;/i&gt;: if the list is structurally
                  modified at any time after the Iterator is created, in any way except
                  through the list-iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; or &lt;tt&gt;add&lt;/tt&gt;
                  methods, the list-iterator will throw a
                  &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt;.  Thus, in the face of
                  concurrent modification, the iterator fails quickly and cleanly, rather
                  than risking arbitrary, non-deterministic behavior at an undetermined
                  time in the future.                
                <param>
                    index index of the first element to be returned from the
                      list-iterator (by a call to &lt;tt&gt;next&lt;/tt&gt;)                    
                </param>
                <return>
                    a ListIterator of the elements in this list (in proper
                      sequence), starting at the specified position in the list                    
                </return>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
                <see>
                    List#listIterator(int)                    
                </see>
            </javadoc>
            <method name="listIterator" type="ListIterator<E>" line="648">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <class name="ListItr" line="652">
                <implements interface="ListIterator">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </implements>
                <declaration name="lastReturned" type="Entry&lt;E&gt;" line="653"/>
                <declaration name="next" type="Entry&lt;E&gt;" line="654"/>
                <declaration name="nextIndex" type="int" line="655"/>
                <declaration name="expectedModCount" type="int" line="656"/>
                <method name="ListItr" type="constructor" line="658">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="662"/>
                    <scope line="666"/>
                </method>
                <method name="hasNext" type="boolean" line="673"/>
                <method name="next" type="E" line="677"/>
                <method name="hasPrevious" type="boolean" line="688"/>
                <method name="previous" type="E" line="692"/>
                <method name="nextIndex" type="int" line="702"/>
                <method name="previousIndex" type="int" line="706"/>
                <method name="remove" type="void" line="710">
                    <declaration name="lastNext" type="Entry&lt;E&gt;" line="712"/>
                    <scope line="713"/>
                    <scope line="715"/>
                </method>
                <method name="set" type="void" line="726">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="add" type="void" line="733">
                    <params>
                        <param name="e" type="E"/>
                    </params>
                </method>
                <method name="checkForComodification" type="void" line="741"/>
            </class>
            <class name="Entry" line="747">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <declaration name="element" type="E" line="748"/>
                <declaration name="next" type="Entry&lt;E&gt;" line="749"/>
                <declaration name="previous" type="Entry&lt;E&gt;" line="750"/>
                <method name="Entry" type="constructor" line="752">
                    <params>
                        <param name="element" type="E"/>
                        <param name="next" type="Entry<E>"/>
                        <param name="previous" type="Entry<E>"/>
                    </params>
                </method>
            </class>
            <method name="addBefore" type="Entry<E>" line="759">
                <params>
                    <param name="e" type="E"/>
                    <param name="entry" type="Entry<E>"/>
                </params>
                <declaration name="newEntry" type="Entry&lt;E&gt;" line="760"/>
            </method>
            <method name="remove" type="E" line="768">
                <params>
                    <param name="e" type="Entry<E>"/>
                </params>
                <declaration name="result" type="E" line="772"/>
            </method>
            <javadoc line="782">
                @since 1.6                
            </javadoc>
            <method name="descendingIterator" type="Iterator<E>" line="785"/>
            <class name="DescendingIterator" line="789">
                <implements interface="Iterator"/>
                <javadoc line="789">
                    Adapter to provide descending iterators via ListItr.previous                    
                </javadoc>
                <declaration name="itr" type="ListItr" line="791"/>
                <method name="hasNext" type="boolean" line="792"/>
                <method name="next" type="E" line="795"/>
                <method name="remove" type="void" line="798"/>
            </class>
            <javadoc line="803">
                Returns an array containing all of the elements in this list
                  in proper sequence (from first to last element).
                  &lt;p&gt;The returned array will be &quot;safe&quot; in that no references to it are
                  maintained by this list.  (In other words, this method must allocate
                  a new array).  The caller is thus free to modify the returned array.
                  &lt;p&gt;This method acts as bridge between array-based and collection-based
                  APIs.                
                <return>
                    an array containing all of the elements in this list
                      in proper sequence                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="817">
                <declaration name="result" type="Object[]" line="818"/>
                <declaration name="i" type="int" line="819"/>
            </method>
            <javadoc line="825">
                Returns an array containing all of the elements in this list in
                  proper sequence (from first to last element); the runtime type of
                  the returned array is that of the specified array.  If the list fits
                  in the specified array, it is returned therein.  Otherwise, a new
                  array is allocated with the runtime type of the specified array and
                  the size of this list.
                  &lt;p&gt;If the list fits in the specified array with room to spare (i.e.,
                  the array has more elements than the list), the element in the array
                  immediately following the end of the list is set to &lt;tt&gt;null&lt;/tt&gt;.
                  (This is useful in determining the length of the list &lt;i&gt;only&lt;/i&gt; if
                  the caller knows that the list does not contain any null elements.)
                  &lt;p&gt;Like the {@link #toArray()} method, this method acts as bridge between
                  array-based and collection-based APIs.  Further, this method allows
                  precise control over the runtime type of the output array, and may,
                  under certain circumstances, be used to save allocation costs.
                  &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a list known to contain only strings.
                  The following code can be used to dump the list into a newly
                  allocated array of &lt;tt&gt;String&lt;/tt&gt;:
                  &lt;pre&gt;
                  String[] y = x.toArray(new String[0]);&lt;/pre&gt;
                  Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
                  &lt;tt&gt;toArray()&lt;/tt&gt;.                
                <param>
                    a the array into which the elements of the list are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing the elements of the list                    
                </return>
                <throws>
                    ArrayStoreException if the runtime type of the specified array
                      is not a supertype of the runtime type of every element in
                      this list                    
                </throws>
                <throws>
                    NullPointerException if the specified array is null                    
                </throws>
            </javadoc>
            <method name="toArray" type="T[]" line="863">
                <params>
                    <param name="a" type="T[]"/>
                </params>
                <declaration name="i" type="int" line="867"/>
                <declaration name="result" type="Object[]" line="868"/>
            </method>
        </class>
    </source>