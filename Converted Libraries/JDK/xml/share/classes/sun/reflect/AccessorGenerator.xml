<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect"/>
        <import package="sun.misc.Unsafe"/>
        <class name="AccessorGenerator" line="31">
            <comment line="37">
                Constants because there&apos;s no way to say &quot;short integer constant&quot;,                
            </comment>
            <comment line="38">
                i.e., &quot;1S&quot;                
            </comment>
            <comment line="47">
                Instance variables for shared functionality between                
            </comment>
            <comment line="48">
                FieldAccessorGenerator and MethodAccessorGenerator                
            </comment>
            <comment line="54">
                Common constant pool entries to FieldAccessor and MethodAccessor                
            </comment>
            <comment line="72">
                Boxing                
            </comment>
            <comment line="101">
                Requires that superClass has been set up                
            </comment>
            <comment line="370">
                Necessary because of Java&apos;s annoying promotion rules                
            </comment>
            <comment line="437">
                The descriptor&apos;s index in the constant pool must be (1 +                
            </comment>
            <comment line="438">
                nameIdx). &quot;numArgs&quot; must indicate ALL arguments, including the                
            </comment>
            <comment line="439">
                implicit &quot;this&quot; argument; double and long arguments each count                
            </comment>
            <comment line="440">
                as 2 in this count. The code buffer must NOT contain the code                
            </comment>
            <comment line="441">
                length. The exception table may be null, but if non-null must                
            </comment>
            <comment line="442">
                NOT contain the exception table&apos;s length. The checked exception                
            </comment>
            <comment line="443">
                indices may be null.                
            </comment>
            <implements interface="ClassFileConstants"/>
            <javadoc line="31">
                Shared functionality for all accessor generators                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="34"/>
            <declaration name="S0" type="short" line="38"/>
            <declaration name="S1" type="short" line="39"/>
            <declaration name="S2" type="short" line="40"/>
            <declaration name="S3" type="short" line="41"/>
            <declaration name="S4" type="short" line="42"/>
            <declaration name="S5" type="short" line="43"/>
            <declaration name="S6" type="short" line="44"/>
            <declaration name="asm" type="ClassFileAssembler" line="48"/>
            <declaration name="modifiers" type="int" line="49"/>
            <declaration name="thisClass" type="short" line="50"/>
            <declaration name="superClass" type="short" line="51"/>
            <declaration name="targetClass" type="short" line="52"/>
            <declaration name="throwableClass" type="short" line="54"/>
            <declaration name="classCastClass" type="short" line="55"/>
            <declaration name="nullPointerClass" type="short" line="56"/>
            <declaration name="illegalArgumentClass" type="short" line="57"/>
            <declaration name="invocationTargetClass" type="short" line="58"/>
            <declaration name="initIdx" type="short" line="59"/>
            <declaration name="initNameAndTypeIdx" type="short" line="60"/>
            <declaration name="initStringNameAndTypeIdx" type="short" line="61"/>
            <declaration name="nullPointerCtorIdx" type="short" line="62"/>
            <declaration name="illegalArgumentCtorIdx" type="short" line="63"/>
            <declaration name="illegalArgumentStringCtorIdx" type="short" line="64"/>
            <declaration name="invocationTargetCtorIdx" type="short" line="65"/>
            <declaration name="superCtorIdx" type="short" line="66"/>
            <declaration name="objectClass" type="short" line="67"/>
            <declaration name="toStringIdx" type="short" line="68"/>
            <declaration name="codeIdx" type="short" line="69"/>
            <declaration name="exceptionsIdx" type="short" line="70"/>
            <declaration name="booleanIdx" type="short" line="72"/>
            <declaration name="booleanCtorIdx" type="short" line="73"/>
            <declaration name="booleanUnboxIdx" type="short" line="74"/>
            <declaration name="byteIdx" type="short" line="75"/>
            <declaration name="byteCtorIdx" type="short" line="76"/>
            <declaration name="byteUnboxIdx" type="short" line="77"/>
            <declaration name="characterIdx" type="short" line="78"/>
            <declaration name="characterCtorIdx" type="short" line="79"/>
            <declaration name="characterUnboxIdx" type="short" line="80"/>
            <declaration name="doubleIdx" type="short" line="81"/>
            <declaration name="doubleCtorIdx" type="short" line="82"/>
            <declaration name="doubleUnboxIdx" type="short" line="83"/>
            <declaration name="floatIdx" type="short" line="84"/>
            <declaration name="floatCtorIdx" type="short" line="85"/>
            <declaration name="floatUnboxIdx" type="short" line="86"/>
            <declaration name="integerIdx" type="short" line="87"/>
            <declaration name="integerCtorIdx" type="short" line="88"/>
            <declaration name="integerUnboxIdx" type="short" line="89"/>
            <declaration name="longIdx" type="short" line="90"/>
            <declaration name="longCtorIdx" type="short" line="91"/>
            <declaration name="longUnboxIdx" type="short" line="92"/>
            <declaration name="shortIdx" type="short" line="93"/>
            <declaration name="shortCtorIdx" type="short" line="94"/>
            <declaration name="shortUnboxIdx" type="short" line="95"/>
            <declaration name="NUM_COMMON_CPOOL_ENTRIES" type="short" line="97"/>
            <declaration name="NUM_BOXING_CPOOL_ENTRIES" type="short" line="98"/>
            <method name="emitCommonConstantPoolEntries" type="void" line="101">
                <comment line="102">
                    +   [UTF-8] &quot;java/lang/Throwable&quot;                    
                </comment>
                <comment line="103">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="104">
                    +   [UTF-8] &quot;java/lang/ClassCastException&quot;                    
                </comment>
                <comment line="105">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="106">
                    +   [UTF-8] &quot;java/lang/NullPointerException&quot;                    
                </comment>
                <comment line="107">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="108">
                    +   [UTF-8] &quot;java/lang/IllegalArgumentException&quot;                    
                </comment>
                <comment line="109">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="110">
                    +   [UTF-8] &quot;java/lang/InvocationTargetException&quot;                    
                </comment>
                <comment line="111">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="112">
                    +   [UTF-8] &quot;&lt;init&gt;&quot;                    
                </comment>
                <comment line="113">
                    +   [UTF-8] &quot;()V&quot;                    
                </comment>
                <comment line="114">
                    +   [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="115">
                    +   [CONSTANT_Methodref_info] for NullPointerException&apos;s constructor                    
                </comment>
                <comment line="116">
                    +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor                    
                </comment>
                <comment line="117">
                    +   [UTF-8] &quot;(Ljava/lang/String;)V&quot;                    
                </comment>
                <comment line="118">
                    +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/String;)V&quot;                    
                </comment>
                <comment line="119">
                    +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor taking a String                    
                </comment>
                <comment line="120">
                    +   [UTF-8] &quot;(Ljava/lang/Throwable;)V&quot;                    
                </comment>
                <comment line="121">
                    +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/Throwable;)V&quot;                    
                </comment>
                <comment line="122">
                    +   [CONSTANT_Methodref_info] for InvocationTargetException&apos;s constructor                    
                </comment>
                <comment line="123">
                    +   [CONSTANT_Methodref_info] for &quot;super()&quot;                    
                </comment>
                <comment line="124">
                    +   [UTF-8] &quot;java/lang/Object&quot;                    
                </comment>
                <comment line="125">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="126">
                    +   [UTF-8] &quot;toString&quot;                    
                </comment>
                <comment line="127">
                    +   [UTF-8] &quot;()Ljava/lang/String;&quot;                    
                </comment>
                <comment line="128">
                    +   [CONSTANT_NameAndType_info] for &quot;toString()Ljava/lang/String;&quot;                    
                </comment>
                <comment line="129">
                    +   [CONSTANT_Methodref_info] for Object&apos;s toString method                    
                </comment>
                <comment line="130">
                    +   [UTF-8] &quot;Code&quot;                    
                </comment>
                <comment line="131">
                    +   [UTF-8] &quot;Exceptions&quot;                    
                </comment>
            </method>
            <javadoc line="181">
                Constant pool entries required to be able to box/unbox primitive
                  types. Note that we don&apos;t emit these if we don&apos;t need them.                
            </javadoc>
            <method name="emitBoxingContantPoolEntries" type="void" line="183">
                <comment line="184">
                    *  [UTF-8] &quot;java/lang/Boolean&quot;                    
                </comment>
                <comment line="185">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="186">
                    *  [UTF-8] &quot;(Z)V&quot;                    
                </comment>
                <comment line="187">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="188">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="189">
                    *  [UTF-8] &quot;booleanValue&quot;                    
                </comment>
                <comment line="190">
                    *  [UTF-8] &quot;()Z&quot;                    
                </comment>
                <comment line="191">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="192">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="193">
                    *  [UTF-8] &quot;java/lang/Byte&quot;                    
                </comment>
                <comment line="194">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="195">
                    *  [UTF-8] &quot;(B)V&quot;                    
                </comment>
                <comment line="196">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="197">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="198">
                    *  [UTF-8] &quot;byteValue&quot;                    
                </comment>
                <comment line="199">
                    *  [UTF-8] &quot;()B&quot;                    
                </comment>
                <comment line="200">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="201">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="202">
                    *  [UTF-8] &quot;java/lang/Character&quot;                    
                </comment>
                <comment line="203">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="204">
                    *  [UTF-8] &quot;(C)V&quot;                    
                </comment>
                <comment line="205">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="206">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="207">
                    *  [UTF-8] &quot;charValue&quot;                    
                </comment>
                <comment line="208">
                    *  [UTF-8] &quot;()C&quot;                    
                </comment>
                <comment line="209">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="210">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="211">
                    *  [UTF-8] &quot;java/lang/Double&quot;                    
                </comment>
                <comment line="212">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="213">
                    *  [UTF-8] &quot;(D)V&quot;                    
                </comment>
                <comment line="214">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="215">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="216">
                    *  [UTF-8] &quot;doubleValue&quot;                    
                </comment>
                <comment line="217">
                    *  [UTF-8] &quot;()D&quot;                    
                </comment>
                <comment line="218">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="219">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="220">
                    *  [UTF-8] &quot;java/lang/Float&quot;                    
                </comment>
                <comment line="221">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="222">
                    *  [UTF-8] &quot;(F)V&quot;                    
                </comment>
                <comment line="223">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="224">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="225">
                    *  [UTF-8] &quot;floatValue&quot;                    
                </comment>
                <comment line="226">
                    *  [UTF-8] &quot;()F&quot;                    
                </comment>
                <comment line="227">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="228">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="229">
                    *  [UTF-8] &quot;java/lang/Integer&quot;                    
                </comment>
                <comment line="230">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="231">
                    *  [UTF-8] &quot;(I)V&quot;                    
                </comment>
                <comment line="232">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="233">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="234">
                    *  [UTF-8] &quot;intValue&quot;                    
                </comment>
                <comment line="235">
                    *  [UTF-8] &quot;()I&quot;                    
                </comment>
                <comment line="236">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="237">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="238">
                    *  [UTF-8] &quot;java/lang/Long&quot;                    
                </comment>
                <comment line="239">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="240">
                    *  [UTF-8] &quot;(J)V&quot;                    
                </comment>
                <comment line="241">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="242">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="243">
                    *  [UTF-8] &quot;longValue&quot;                    
                </comment>
                <comment line="244">
                    *  [UTF-8] &quot;()J&quot;                    
                </comment>
                <comment line="245">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="246">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="247">
                    *  [UTF-8] &quot;java/lang/Short&quot;                    
                </comment>
                <comment line="248">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="249">
                    *  [UTF-8] &quot;(S)V&quot;                    
                </comment>
                <comment line="250">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="251">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="252">
                    *  [UTF-8] &quot;shortValue&quot;                    
                </comment>
                <comment line="253">
                    *  [UTF-8] &quot;()S&quot;                    
                </comment>
                <comment line="254">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="255">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="256">
                    Boolean                    
                </comment>
                <comment line="270">
                    Byte                    
                </comment>
                <comment line="284">
                    Character                    
                </comment>
                <comment line="298">
                    Double                    
                </comment>
                <comment line="312">
                    Float                    
                </comment>
                <comment line="326">
                    Integer                    
                </comment>
                <comment line="340">
                    Long                    
                </comment>
                <comment line="354">
                    Short                    
                </comment>
            </method>
            <method name="add" type="short" line="370">
                <params>
                    <param name="s1" type="short"/>
                    <param name="s2" type="short"/>
                </params>
            </method>
            <method name="sub" type="short" line="374">
                <params>
                    <param name="s1" type="short"/>
                    <param name="s2" type="short"/>
                </params>
            </method>
            <method name="isStatic" type="boolean" line="378"/>
            <javadoc line="382">
                Returns class name in &quot;internal&quot; form (i.e., &apos;/&apos; separators
                  instead of &apos;.&apos;)                
            </javadoc>
            <method name="getClassName" type="String" line="386">
                <params>
                    <param name="c" type="Class"/>
                    <param name="addPrefixAndSuffixForNonPrimitiveTypes" type="boolean"/>
                </params>
                <scope line="387">
                    <scope line="388"/>
                    <scope line="390"/>
                    <scope line="392"/>
                    <scope line="394"/>
                    <scope line="396"/>
                    <scope line="398"/>
                    <scope line="400"/>
                    <scope line="402"/>
                    <scope line="404"/>
                </scope>
                <scope line="408"/>
                <scope line="410">
                    <scope line="411"/>
                    <scope line="413"/>
                </scope>
            </method>
            <method name="internalize" type="String" line="419">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="emitConstructor" type="void" line="423">
                <comment line="424">
                    Generate code into fresh code buffer                    
                </comment>
                <comment line="426">
                    0 incoming arguments                    
                </comment>
                <comment line="432">
                    Emit method                    
                </comment>
                <declaration name="cb" type="ClassFileAssembler" line="425"/>
            </method>
            <method name="emitMethod" type="void" line="448">
                <params>
                    <param name="nameIdx" type="short"/>
                    <param name="numArgs" type="int"/>
                    <param name="code" type="ClassFileAssembler"/>
                    <param name="exceptionTable" type="ClassFileAssembler"/>
                    <param name="checkedExceptionIndices" type="short[]"/>
                </params>
                <comment line="458">
                    No-op if no exception table                    
                </comment>
                <comment line="464">
                    Code attribute only                    
                </comment>
                <comment line="467">
                    Code and Exceptions attributes                    
                </comment>
                <comment line="470">
                    Code attribute                    
                </comment>
                <comment line="481">
                    No additional attributes for Code attribute                    
                </comment>
                <comment line="483">
                    Exceptions attribute                    
                </comment>
                <declaration name="codeLen" type="int" line="449"/>
                <declaration name="excLen" type="int" line="450"/>
                <scope line="451">
                    <scope line="453"/>
                </scope>
                <declaration name="attrLen" type="int" line="457"/>
                <scope line="463"/>
                <scope line="466"/>
                <scope line="478"/>
                <scope line="482">
                    <scope line="487"/>
                </scope>
            </method>
            <method name="indexForPrimitiveType" type="short" line="493">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="494"/>
                <scope line="496"/>
                <scope line="498"/>
                <scope line="500"/>
                <scope line="502"/>
                <scope line="504"/>
                <scope line="506"/>
                <scope line="508"/>
            </method>
            <method name="ctorIndexForPrimitiveType" type="short" line="514">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="515"/>
                <scope line="517"/>
                <scope line="519"/>
                <scope line="521"/>
                <scope line="523"/>
                <scope line="525"/>
                <scope line="527"/>
                <scope line="529"/>
            </method>
            <javadoc line="535">
                Returns true for widening or identity conversions for primitive
                  types only                
            </javadoc>
            <method name="canWidenTo" type="boolean" line="537">
                <params>
                    <param name="type" type="Class"/>
                    <param name="otherType" type="Class"/>
                </params>
                <comment line="542">
                    Widening conversions (from JVM spec):                    
                </comment>
                <comment line="543">
                    byte to short, int, long, float, or double                    
                </comment>
                <comment line="544">
                    short to int, long, float, or double                    
                </comment>
                <comment line="545">
                    char to int, long, float, or double                    
                </comment>
                <comment line="546">
                    int to long, float, or double                    
                </comment>
                <comment line="547">
                    long to float or double                    
                </comment>
                <comment line="548">
                    float to double                    
                </comment>
                <scope line="538"/>
                <scope line="550">
                    <scope line="551"/>
                </scope>
                <scope line="554">
                    <scope line="560"/>
                </scope>
                <scope line="563">
                    <scope line="568"/>
                </scope>
                <scope line="571">
                    <scope line="576"/>
                </scope>
                <scope line="579">
                    <scope line="583"/>
                </scope>
                <scope line="586">
                    <scope line="589"/>
                </scope>
                <scope line="592">
                    <scope line="594"/>
                </scope>
                <scope line="597">
                    <scope line="598"/>
                </scope>
            </method>
            <javadoc line="606">
                Emits the widening bytecode for the given primitive conversion
                  (or none if the identity conversion). Requires that a primitive
                  conversion exists; i.e., canWidenTo must have already been
                  called and returned true.                
            </javadoc>
            <method name="emitWideningBytecodeForPrimitiveConversion" type="void" line="614">
                <params>
                    <param name="cb" type="ClassFileAssembler"/>
                    <param name="fromType" type="Class"/>
                    <param name="toType" type="Class"/>
                </params>
                <comment line="615">
                    Note that widening conversions for integral types (i.e., &quot;b2s&quot;,                    
                </comment>
                <comment line="616">
                    &quot;s2i&quot;) are no-ops since values on the Java stack are                    
                </comment>
                <comment line="617">
                    sign-extended.                    
                </comment>
                <comment line="619">
                    Widening conversions (from JVM spec):                    
                </comment>
                <comment line="620">
                    byte to short, int, long, float, or double                    
                </comment>
                <comment line="621">
                    short to int, long, float, or double                    
                </comment>
                <comment line="622">
                    char to int, long, float, or double                    
                </comment>
                <comment line="623">
                    int to long, float, or double                    
                </comment>
                <comment line="624">
                    long to float or double                    
                </comment>
                <comment line="625">
                    float to double                    
                </comment>
                <comment line="650">
                    Otherwise, was identity or no-op conversion. Fall through.                    
                </comment>
                <scope line="630">
                    <scope line="631"/>
                    <scope line="633"/>
                    <scope line="635"/>
                </scope>
                <scope line="638">
                    <scope line="639"/>
                    <scope line="641"/>
                </scope>
                <scope line="644">
                    <scope line="645"/>
                </scope>
            </method>
            <method name="unboxingMethodForPrimitiveType" type="short" line="653">
                <params>
                    <param name="primType" type="Class"/>
                </params>
                <scope line="654"/>
                <scope line="656"/>
                <scope line="658"/>
                <scope line="660"/>
                <scope line="662"/>
                <scope line="664"/>
                <scope line="666"/>
                <scope line="668"/>
            </method>
            <declaration name="primitiveTypes" type="Class[]" line="674"/>
            <javadoc line="685">
                We don&apos;t consider &quot;Void&quot; to be a primitive type                
            </javadoc>
            <method name="isPrimitive" type="boolean" line="686">
                <params>
                    <param name="c" type="Class"/>
                </params>
            </method>
            <method name="typeSizeInStackSlots" type="int" line="690">
                <params>
                    <param name="c" type="Class"/>
                </params>
                <scope line="691"/>
                <scope line="694"/>
            </method>
            <declaration name="illegalArgumentCodeBuffer" type="ClassFileAssembler" line="700"/>
            <method name="illegalArgumentCodeBuffer" type="ClassFileAssembler" line="701">
                <scope line="702"/>
            </method>
        </class>
    </source>