<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect"/>
        <import package="sun.misc.Unsafe"/>
        <class name="AccessorGenerator" line="4">
            <implements interface="ClassFileConstants"/>
            <javadoc line="4">
                Shared functionality for all accessor generators                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="8"/>
            <declaration name="S0" type="short" line="9"/>
            <declaration name="S1" type="short" line="10"/>
            <declaration name="S2" type="short" line="11"/>
            <declaration name="S3" type="short" line="12"/>
            <declaration name="S4" type="short" line="13"/>
            <declaration name="S5" type="short" line="14"/>
            <declaration name="S6" type="short" line="15"/>
            <declaration name="asm" type="ClassFileAssembler" line="16"/>
            <declaration name="modifiers" type="int" line="17"/>
            <declaration name="thisClass" type="short" line="18"/>
            <declaration name="superClass" type="short" line="19"/>
            <declaration name="targetClass" type="short" line="20"/>
            <declaration name="throwableClass" type="short" line="21"/>
            <declaration name="classCastClass" type="short" line="22"/>
            <declaration name="nullPointerClass" type="short" line="23"/>
            <declaration name="illegalArgumentClass" type="short" line="24"/>
            <declaration name="invocationTargetClass" type="short" line="25"/>
            <declaration name="initIdx" type="short" line="26"/>
            <declaration name="initNameAndTypeIdx" type="short" line="27"/>
            <declaration name="initStringNameAndTypeIdx" type="short" line="28"/>
            <declaration name="nullPointerCtorIdx" type="short" line="29"/>
            <declaration name="illegalArgumentCtorIdx" type="short" line="30"/>
            <declaration name="illegalArgumentStringCtorIdx" type="short" line="31"/>
            <declaration name="invocationTargetCtorIdx" type="short" line="32"/>
            <declaration name="superCtorIdx" type="short" line="33"/>
            <declaration name="objectClass" type="short" line="34"/>
            <declaration name="toStringIdx" type="short" line="35"/>
            <declaration name="codeIdx" type="short" line="36"/>
            <declaration name="exceptionsIdx" type="short" line="37"/>
            <declaration name="booleanIdx" type="short" line="38"/>
            <declaration name="booleanCtorIdx" type="short" line="39"/>
            <declaration name="booleanUnboxIdx" type="short" line="40"/>
            <declaration name="byteIdx" type="short" line="41"/>
            <declaration name="byteCtorIdx" type="short" line="42"/>
            <declaration name="byteUnboxIdx" type="short" line="43"/>
            <declaration name="characterIdx" type="short" line="44"/>
            <declaration name="characterCtorIdx" type="short" line="45"/>
            <declaration name="characterUnboxIdx" type="short" line="46"/>
            <declaration name="doubleIdx" type="short" line="47"/>
            <declaration name="doubleCtorIdx" type="short" line="48"/>
            <declaration name="doubleUnboxIdx" type="short" line="49"/>
            <declaration name="floatIdx" type="short" line="50"/>
            <declaration name="floatCtorIdx" type="short" line="51"/>
            <declaration name="floatUnboxIdx" type="short" line="52"/>
            <declaration name="integerIdx" type="short" line="53"/>
            <declaration name="integerCtorIdx" type="short" line="54"/>
            <declaration name="integerUnboxIdx" type="short" line="55"/>
            <declaration name="longIdx" type="short" line="56"/>
            <declaration name="longCtorIdx" type="short" line="57"/>
            <declaration name="longUnboxIdx" type="short" line="58"/>
            <declaration name="shortIdx" type="short" line="59"/>
            <declaration name="shortCtorIdx" type="short" line="60"/>
            <declaration name="shortUnboxIdx" type="short" line="61"/>
            <declaration name="NUM_COMMON_CPOOL_ENTRIES" type="short" line="62"/>
            <declaration name="NUM_BOXING_CPOOL_ENTRIES" type="short" line="63"/>
            <method name="emitCommonConstantPoolEntries" type="void" line="64"/>
            <javadoc line="113">
                Constant pool entries required to be able to box/unbox primitive
                  types. Note that we don&apos;t emit these if we don&apos;t need them.                
            </javadoc>
            <method name="emitBoxingContantPoolEntries" type="void" line="117"/>
            <method name="add" type="short" line="215">
                <params>
                    <param name="s1" type="short"/>
                    <param name="s2" type="short"/>
                </params>
            </method>
            <method name="sub" type="short" line="218">
                <params>
                    <param name="s1" type="short"/>
                    <param name="s2" type="short"/>
                </params>
            </method>
            <method name="isStatic" type="boolean" line="221"/>
            <javadoc line="224">
                Returns class name in &quot;internal&quot; form (i.e., &apos;/&apos; separators
                  instead of &apos;.&apos;)                
            </javadoc>
            <method name="getClassName" type="String" line="228">
                <params>
                    <param name="c" type="Class"/>
                    <param name="addPrefixAndSuffixForNonPrimitiveTypes" type="boolean"/>
                </params>
                <scope line="229">
                    <scope line="230"/>
                    <scope line="233"/>
                    <scope line="236"/>
                    <scope line="239"/>
                    <scope line="242"/>
                    <scope line="245"/>
                    <scope line="248"/>
                    <scope line="251"/>
                    <scope line="254"/>
                </scope>
                <scope line="259"/>
                <scope line="262">
                    <scope line="263"/>
                    <scope line="266"/>
                </scope>
            </method>
            <method name="internalize" type="String" line="271">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="emitConstructor" type="void" line="274">
                <declaration name="cb" type="ClassFileAssembler" line="275"/>
            </method>
            <method name="emitMethod" type="void" line="282">
                <params>
                    <param name="nameIdx" type="short"/>
                    <param name="numArgs" type="int"/>
                    <param name="code" type="ClassFileAssembler"/>
                    <param name="exceptionTable" type="ClassFileAssembler"/>
                    <param name="checkedExceptionIndices" type="short[]"/>
                </params>
                <declaration name="codeLen" type="int" line="283"/>
                <declaration name="excLen" type="int" line="284"/>
                <scope line="285">
                    <scope line="287"/>
                </scope>
                <declaration name="attrLen" type="int" line="291"/>
                <scope line="296"/>
                <scope line="299"/>
                <scope line="309"/>
                <scope line="313">
                    <scope line="317"/>
                </scope>
            </method>
            <method name="indexForPrimitiveType" type="short" line="322">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="323"/>
                <scope line="326"/>
                <scope line="329"/>
                <scope line="332"/>
                <scope line="335"/>
                <scope line="338"/>
                <scope line="341"/>
                <scope line="344"/>
            </method>
            <method name="ctorIndexForPrimitiveType" type="short" line="349">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368"/>
                <scope line="371"/>
            </method>
            <javadoc line="376">
                Returns true for widening or identity conversions for primitive
                  types only                
            </javadoc>
            <method name="canWidenTo" type="boolean" line="380">
                <params>
                    <param name="type" type="Class"/>
                    <param name="otherType" type="Class"/>
                </params>
                <scope line="381"/>
                <scope line="384">
                    <scope line="385"/>
                </scope>
                <scope line="389">
                    <scope line="390"/>
                </scope>
                <scope line="394">
                    <scope line="395"/>
                </scope>
                <scope line="399">
                    <scope line="400"/>
                </scope>
                <scope line="404">
                    <scope line="405"/>
                </scope>
                <scope line="409">
                    <scope line="410"/>
                </scope>
                <scope line="414">
                    <scope line="415"/>
                </scope>
                <scope line="419">
                    <scope line="420"/>
                </scope>
            </method>
            <javadoc line="426">
                Emits the widening bytecode for the given primitive conversion
                  (or none if the identity conversion). Requires that a primitive
                  conversion exists; i.e., canWidenTo must have already been
                  called and returned true.                
            </javadoc>
            <method name="emitWideningBytecodeForPrimitiveConversion" type="void" line="432">
                <params>
                    <param name="cb" type="ClassFileAssembler"/>
                    <param name="fromType" type="Class"/>
                    <param name="toType" type="Class"/>
                </params>
                <scope line="433">
                    <scope line="434"/>
                    <scope line="437"/>
                    <scope line="440"/>
                </scope>
                <scope line="444">
                    <scope line="445"/>
                    <scope line="448"/>
                </scope>
                <scope line="452">
                    <scope line="453"/>
                </scope>
            </method>
            <method name="unboxingMethodForPrimitiveType" type="short" line="458">
                <params>
                    <param name="primType" type="Class"/>
                </params>
                <scope line="459"/>
                <scope line="462"/>
                <scope line="465"/>
                <scope line="468"/>
                <scope line="471"/>
                <scope line="474"/>
                <scope line="477"/>
                <scope line="480"/>
            </method>
            <declaration name="primitiveTypes" type="Class[]" line="485"/>
            <javadoc line="486">
                We don&apos;t consider &quot;Void&quot; to be a primitive type                
            </javadoc>
            <method name="isPrimitive" type="boolean" line="489">
                <params>
                    <param name="c" type="Class"/>
                </params>
            </method>
            <method name="typeSizeInStackSlots" type="int" line="492">
                <params>
                    <param name="c" type="Class"/>
                </params>
                <scope line="493"/>
                <scope line="496"/>
            </method>
            <declaration name="illegalArgumentCodeBuffer" type="ClassFileAssembler" line="501"/>
            <method name="illegalArgumentCodeBuffer" type="ClassFileAssembler" line="502">
                <scope line="503"/>
            </method>
        </class>
    </source>