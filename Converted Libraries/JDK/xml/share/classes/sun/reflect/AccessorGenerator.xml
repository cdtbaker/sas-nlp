<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect"/>
        <import package="sun.misc.Unsafe"/>
        <class name="AccessorGenerator" line="31">
            <comment line="37">
                Constants because there&apos;s no way to say &quot;short integer constant&quot;,
                 i.e., &quot;1S&quot;                
            </comment>
            <comment line="47">
                Instance variables for shared functionality between
                 FieldAccessorGenerator and MethodAccessorGenerator                
            </comment>
            <comment line="54">
                Common constant pool entries to FieldAccessor and MethodAccessor                
            </comment>
            <comment line="72">
                Boxing                
            </comment>
            <comment line="101">
                Requires that superClass has been set up                
            </comment>
            <comment line="370">
                Necessary because of Java&apos;s annoying promotion rules                
            </comment>
            <comment line="437">
                The descriptor&apos;s index in the constant pool must be (1 +
                 nameIdx). &quot;numArgs&quot; must indicate ALL arguments, including the
                 implicit &quot;this&quot; argument; double and long arguments each count
                 as 2 in this count. The code buffer must NOT contain the code
                 length. The exception table may be null, but if non-null must
                 NOT contain the exception table&apos;s length. The checked exception
                 indices may be null.                
            </comment>
            <implements interface="ClassFileConstants"/>
            <javadoc line="31">
                Shared functionality for all accessor generators                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="34"/>
            <declaration name="S0" type="short" line="38"/>
            <declaration name="S1" type="short" line="39"/>
            <declaration name="S2" type="short" line="40"/>
            <declaration name="S3" type="short" line="41"/>
            <declaration name="S4" type="short" line="42"/>
            <declaration name="S5" type="short" line="43"/>
            <declaration name="S6" type="short" line="44"/>
            <declaration name="asm" type="ClassFileAssembler" line="48"/>
            <declaration name="modifiers" type="int" line="49"/>
            <declaration name="thisClass" type="short" line="50"/>
            <declaration name="superClass" type="short" line="51"/>
            <declaration name="targetClass" type="short" line="52"/>
            <declaration name="throwableClass" type="short" line="54"/>
            <declaration name="classCastClass" type="short" line="55"/>
            <declaration name="nullPointerClass" type="short" line="56"/>
            <declaration name="illegalArgumentClass" type="short" line="57"/>
            <declaration name="invocationTargetClass" type="short" line="58"/>
            <declaration name="initIdx" type="short" line="59"/>
            <declaration name="initNameAndTypeIdx" type="short" line="60"/>
            <declaration name="initStringNameAndTypeIdx" type="short" line="61"/>
            <declaration name="nullPointerCtorIdx" type="short" line="62"/>
            <declaration name="illegalArgumentCtorIdx" type="short" line="63"/>
            <declaration name="illegalArgumentStringCtorIdx" type="short" line="64"/>
            <declaration name="invocationTargetCtorIdx" type="short" line="65"/>
            <declaration name="superCtorIdx" type="short" line="66"/>
            <declaration name="objectClass" type="short" line="67"/>
            <declaration name="toStringIdx" type="short" line="68"/>
            <declaration name="codeIdx" type="short" line="69"/>
            <declaration name="exceptionsIdx" type="short" line="70"/>
            <declaration name="booleanIdx" type="short" line="72"/>
            <declaration name="booleanCtorIdx" type="short" line="73"/>
            <declaration name="booleanUnboxIdx" type="short" line="74"/>
            <declaration name="byteIdx" type="short" line="75"/>
            <declaration name="byteCtorIdx" type="short" line="76"/>
            <declaration name="byteUnboxIdx" type="short" line="77"/>
            <declaration name="characterIdx" type="short" line="78"/>
            <declaration name="characterCtorIdx" type="short" line="79"/>
            <declaration name="characterUnboxIdx" type="short" line="80"/>
            <declaration name="doubleIdx" type="short" line="81"/>
            <declaration name="doubleCtorIdx" type="short" line="82"/>
            <declaration name="doubleUnboxIdx" type="short" line="83"/>
            <declaration name="floatIdx" type="short" line="84"/>
            <declaration name="floatCtorIdx" type="short" line="85"/>
            <declaration name="floatUnboxIdx" type="short" line="86"/>
            <declaration name="integerIdx" type="short" line="87"/>
            <declaration name="integerCtorIdx" type="short" line="88"/>
            <declaration name="integerUnboxIdx" type="short" line="89"/>
            <declaration name="longIdx" type="short" line="90"/>
            <declaration name="longCtorIdx" type="short" line="91"/>
            <declaration name="longUnboxIdx" type="short" line="92"/>
            <declaration name="shortIdx" type="short" line="93"/>
            <declaration name="shortCtorIdx" type="short" line="94"/>
            <declaration name="shortUnboxIdx" type="short" line="95"/>
            <declaration name="NUM_COMMON_CPOOL_ENTRIES" type="short" line="97"/>
            <declaration name="NUM_BOXING_CPOOL_ENTRIES" type="short" line="98"/>
            <method name="emitCommonConstantPoolEntries" type="void" line="101">
                <comment line="103">
                    +   [UTF-8] &quot;java/lang/Throwable&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/ClassCastException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/NullPointerException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/IllegalArgumentException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/InvocationTargetException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;&lt;init&gt;&quot;
                     +   [UTF-8] &quot;()V&quot;
                     +   [CONSTANT_NameAndType_info] for above
                     +   [CONSTANT_Methodref_info] for NullPointerException&apos;s constructor
                     +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor
                     +   [UTF-8] &quot;(Ljava/lang/String;)V&quot;
                     +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/String;)V&quot;
                     +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor taking a String
                     +   [UTF-8] &quot;(Ljava/lang/Throwable;)V&quot;
                     +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/Throwable;)V&quot;
                     +   [CONSTANT_Methodref_info] for InvocationTargetException&apos;s constructor
                     +   [CONSTANT_Methodref_info] for &quot;super()&quot;
                     +   [UTF-8] &quot;java/lang/Object&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;toString&quot;
                     +   [UTF-8] &quot;()Ljava/lang/String;&quot;
                     +   [CONSTANT_NameAndType_info] for &quot;toString()Ljava/lang/String;&quot;
                     +   [CONSTANT_Methodref_info] for Object&apos;s toString method
                     +   [UTF-8] &quot;Code&quot;
                     +   [UTF-8] &quot;Exceptions&quot;                    
                </comment>
            </method>
            <javadoc line="181">
                Constant pool entries required to be able to box/unbox primitive
                  types. Note that we don&apos;t emit these if we don&apos;t need them.                
            </javadoc>
            <method name="emitBoxingContantPoolEntries" type="void" line="183">
                <comment line="185">
                    *  [UTF-8] &quot;java/lang/Boolean&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(Z)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;booleanValue&quot;
                      *  [UTF-8] &quot;()Z&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Byte&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(B)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;byteValue&quot;
                      *  [UTF-8] &quot;()B&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Character&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(C)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;charValue&quot;
                      *  [UTF-8] &quot;()C&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Double&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(D)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;doubleValue&quot;
                      *  [UTF-8] &quot;()D&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Float&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(F)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;floatValue&quot;
                      *  [UTF-8] &quot;()F&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Integer&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(I)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;intValue&quot;
                      *  [UTF-8] &quot;()I&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Long&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(J)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;longValue&quot;
                      *  [UTF-8] &quot;()J&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Short&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(S)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;shortValue&quot;
                      *  [UTF-8] &quot;()S&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                     Boolean                    
                </comment>
                <comment line="271">
                    Byte                    
                </comment>
                <comment line="285">
                    Character                    
                </comment>
                <comment line="299">
                    Double                    
                </comment>
                <comment line="313">
                    Float                    
                </comment>
                <comment line="327">
                    Integer                    
                </comment>
                <comment line="341">
                    Long                    
                </comment>
                <comment line="355">
                    Short                    
                </comment>
            </method>
            <method name="add" type="short" line="370">
                <params>
                    <param name="s1" type="short"/>
                    <param name="s2" type="short"/>
                </params>
            </method>
            <method name="sub" type="short" line="374">
                <params>
                    <param name="s1" type="short"/>
                    <param name="s2" type="short"/>
                </params>
            </method>
            <method name="isStatic" type="boolean" line="378"/>
            <javadoc line="382">
                Returns class name in &quot;internal&quot; form (i.e., &apos;/&apos; separators
                  instead of &apos;.&apos;)                
            </javadoc>
            <method name="getClassName" type="String" line="386">
                <params>
                    <param name="c" type="Class"/>
                    <param name="addPrefixAndSuffixForNonPrimitiveTypes" type="boolean"/>
                </params>
                <scope line="387">
                    <scope line="388"/>
                    <scope line="390"/>
                    <scope line="392"/>
                    <scope line="394"/>
                    <scope line="396"/>
                    <scope line="398"/>
                    <scope line="400"/>
                    <scope line="402"/>
                    <scope line="404"/>
                </scope>
                <scope line="408"/>
                <scope line="410">
                    <scope line="411"/>
                    <scope line="413"/>
                </scope>
            </method>
            <method name="internalize" type="String" line="419">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="emitConstructor" type="void" line="423">
                <comment line="425">
                    Generate code into fresh code buffer                    
                </comment>
                <comment line="427">
                    0 incoming arguments                    
                </comment>
                <comment line="433">
                    Emit method                    
                </comment>
                <declaration name="cb" type="ClassFileAssembler" line="425"/>
            </method>
            <method name="emitMethod" type="void" line="448">
                <params>
                    <param name="nameIdx" type="short"/>
                    <param name="numArgs" type="int"/>
                    <param name="code" type="ClassFileAssembler"/>
                    <param name="exceptionTable" type="ClassFileAssembler"/>
                    <param name="checkedExceptionIndices" type="short[]"/>
                </params>
                <comment line="459">
                    No-op if no exception table                    
                </comment>
                <comment line="465">
                    Code attribute only                    
                </comment>
                <comment line="468">
                    Code and Exceptions attributes                    
                </comment>
                <comment line="471">
                    Code attribute                    
                </comment>
                <comment line="482">
                    No additional attributes for Code attribute                    
                </comment>
                <comment line="484">
                    Exceptions attribute                    
                </comment>
                <declaration name="codeLen" type="int" line="449"/>
                <declaration name="excLen" type="int" line="450"/>
                <scope line="451">
                    <scope line="453"/>
                </scope>
                <declaration name="attrLen" type="int" line="457"/>
                <scope line="463"/>
                <scope line="466"/>
                <scope line="478"/>
                <scope line="482">
                    <scope line="487"/>
                </scope>
            </method>
            <method name="indexForPrimitiveType" type="short" line="493">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="494"/>
                <scope line="496"/>
                <scope line="498"/>
                <scope line="500"/>
                <scope line="502"/>
                <scope line="504"/>
                <scope line="506"/>
                <scope line="508"/>
            </method>
            <method name="ctorIndexForPrimitiveType" type="short" line="514">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="515"/>
                <scope line="517"/>
                <scope line="519"/>
                <scope line="521"/>
                <scope line="523"/>
                <scope line="525"/>
                <scope line="527"/>
                <scope line="529"/>
            </method>
            <javadoc line="535">
                Returns true for widening or identity conversions for primitive
                  types only                
            </javadoc>
            <method name="canWidenTo" type="boolean" line="537">
                <params>
                    <param name="type" type="Class"/>
                    <param name="otherType" type="Class"/>
                </params>
                <comment line="543">
                    Widening conversions (from JVM spec):
                      byte to short, int, long, float, or double
                      short to int, long, float, or double
                      char to int, long, float, or double
                      int to long, float, or double
                      long to float or double
                      float to double                    
                </comment>
                <scope line="538"/>
                <scope line="550">
                    <scope line="551"/>
                </scope>
                <scope line="554">
                    <scope line="560"/>
                </scope>
                <scope line="563">
                    <scope line="568"/>
                </scope>
                <scope line="571">
                    <scope line="576"/>
                </scope>
                <scope line="579">
                    <scope line="583"/>
                </scope>
                <scope line="586">
                    <scope line="589"/>
                </scope>
                <scope line="592">
                    <scope line="594"/>
                </scope>
                <scope line="597">
                    <scope line="598"/>
                </scope>
            </method>
            <javadoc line="606">
                Emits the widening bytecode for the given primitive conversion
                  (or none if the identity conversion). Requires that a primitive
                  conversion exists; i.e., canWidenTo must have already been
                  called and returned true.                
            </javadoc>
            <method name="emitWideningBytecodeForPrimitiveConversion" type="void" line="614">
                <params>
                    <param name="cb" type="ClassFileAssembler"/>
                    <param name="fromType" type="Class"/>
                    <param name="toType" type="Class"/>
                </params>
                <comment line="616">
                    Note that widening conversions for integral types (i.e., &quot;b2s&quot;,
                     &quot;s2i&quot;) are no-ops since values on the Java stack are
                     sign-extended.                    
                </comment>
                <comment line="620">
                    Widening conversions (from JVM spec):
                      byte to short, int, long, float, or double
                      short to int, long, float, or double
                      char to int, long, float, or double
                      int to long, float, or double
                      long to float or double
                      float to double                    
                </comment>
                <comment line="651">
                    Otherwise, was identity or no-op conversion. Fall through.                    
                </comment>
                <scope line="630">
                    <scope line="631"/>
                    <scope line="633"/>
                    <scope line="635"/>
                </scope>
                <scope line="638">
                    <scope line="639"/>
                    <scope line="641"/>
                </scope>
                <scope line="644">
                    <scope line="645"/>
                </scope>
            </method>
            <method name="unboxingMethodForPrimitiveType" type="short" line="653">
                <params>
                    <param name="primType" type="Class"/>
                </params>
                <scope line="654"/>
                <scope line="656"/>
                <scope line="658"/>
                <scope line="660"/>
                <scope line="662"/>
                <scope line="664"/>
                <scope line="666"/>
                <scope line="668"/>
            </method>
            <declaration name="primitiveTypes" type="Class[]" line="674"/>
            <javadoc line="685">
                We don&apos;t consider &quot;Void&quot; to be a primitive type                
            </javadoc>
            <method name="isPrimitive" type="boolean" line="686">
                <params>
                    <param name="c" type="Class"/>
                </params>
            </method>
            <method name="typeSizeInStackSlots" type="int" line="690">
                <params>
                    <param name="c" type="Class"/>
                </params>
                <scope line="691"/>
                <scope line="694"/>
            </method>
            <declaration name="illegalArgumentCodeBuffer" type="ClassFileAssembler" line="700"/>
            <method name="illegalArgumentCodeBuffer" type="ClassFileAssembler" line="701">
                <scope line="702"/>
            </method>
        </class>
    </source>