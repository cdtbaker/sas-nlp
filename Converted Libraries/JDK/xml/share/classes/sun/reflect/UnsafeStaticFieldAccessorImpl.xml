<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.security.AccessController"/>
        <import package="sun.misc.Unsafe"/>
        <class name="UnsafeStaticFieldAccessorImpl" line="33">
            <extends class="UnsafeFieldAccessorImpl"/>
            <comment line="47">
                base                
            </comment>
            <javadoc line="33">
                Base class for sun.misc.Unsafe-based FieldAccessors for static
                  fields. The observation is that there are only nine types of
                  fields from the standpoint of reflection code: the eight primitive
                  types and Object. Using class Unsafe instead of generated
                  bytecodes saves memory and loading time for the
                  dynamically-generated FieldAccessors.                
            </javadoc>
            <scope line="41"/>
            <declaration name="base" type="Object" line="46"/>
            <method name="UnsafeStaticFieldAccessorImpl" type="constructor" line="48">
                <params>
                    <param name="field" type="Field"/>
                </params>
            </method>
        </class>
    </source>