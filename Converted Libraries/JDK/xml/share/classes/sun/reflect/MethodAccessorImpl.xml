<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect.InvocationTargetException"/>
        <class name="MethodAccessorImpl" line="3">
            <extends class="MagicAccessorImpl"/>
            <implements interface="MethodAccessor"/>
            <javadoc line="3">
                &lt;P&gt; Package-private implementation of the MethodAccessor interface
                  which has access to all classes and all fields, regardless of
                  language restrictions. See MagicAccessor. &lt;/P&gt;
                  &lt;P&gt; This class is known to the VM; do not change its name without
                  also changing the VM&apos;s code. &lt;/P&gt;
                  &lt;P&gt; NOTE: ALL methods of subclasses are skipped during security
                  walks up the stack. The assumption is that the only such methods
                  that will persistently show up on the stack are the implementing
                  methods for java.lang.reflect.Method.invoke(). &lt;/P&gt;                
            </javadoc>
            <method name="invoke" type="Object" line="15"/>
            <javadoc line="15">
                Matches specification in {@link java.lang.reflect.Method}                
            </javadoc>
        </class>
    </source>