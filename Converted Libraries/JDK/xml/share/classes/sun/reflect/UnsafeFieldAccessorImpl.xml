<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="sun.misc.Unsafe"/>
        <class name="UnsafeFieldAccessorImpl" line="32">
            <extends class="FieldAccessorImpl"/>
            <javadoc line="32">
                Base class for sun.misc.Unsafe-based FieldAccessors. The
                  observation is that there are only nine types of fields from the
                  standpoint of reflection code: the eight primitive types and
                  Object. Using class Unsafe instead of generated bytecodes saves
                  memory and loading time for the dynamically-generated
                  FieldAccessors.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="40"/>
            <declaration name="field" type="Field" line="42"/>
            <declaration name="fieldOffset" type="int" line="43"/>
            <declaration name="isFinal" type="boolean" line="44"/>
            <method name="UnsafeFieldAccessorImpl" type="constructor" line="46">
                <params>
                    <param name="field" type="Field"/>
                </params>
            </method>
            <method name="ensureObj" type="void" line="52">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <comment line="54">
                    NOTE: will throw NullPointerException, as specified, if o is null                    
                </comment>
                <scope line="54"/>
            </method>
            <method name="getQualifiedFieldName" type="String" line="59"/>
            <method name="newGetIllegalArgumentException" type="IllegalArgumentException" line="63">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="72">
                <params>
                    <param name="attemptedType" type="String"/>
                    <param name="attemptedValue" type="String"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="76">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="80">
                <params>
                    <param name="z" type="boolean"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="84">
                <params>
                    <param name="b" type="char"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="88">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="92">
                <params>
                    <param name="b" type="short"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="96">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="100">
                <params>
                    <param name="i" type="long"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="104">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="throwFinalFieldIllegalAccessException" type="void" line="108">
                <params>
                    <param name="f" type="double"/>
                </params>
            </method>
            <method name="newGetBooleanIllegalArgumentException" type="IllegalArgumentException" line="112"/>
            <method name="newGetByteIllegalArgumentException" type="IllegalArgumentException" line="116"/>
            <method name="newGetCharIllegalArgumentException" type="IllegalArgumentException" line="120"/>
            <method name="newGetShortIllegalArgumentException" type="IllegalArgumentException" line="124"/>
            <method name="newGetIntIllegalArgumentException" type="IllegalArgumentException" line="128"/>
            <method name="newGetLongIllegalArgumentException" type="IllegalArgumentException" line="132"/>
            <method name="newGetFloatIllegalArgumentException" type="IllegalArgumentException" line="136"/>
            <method name="newGetDoubleIllegalArgumentException" type="IllegalArgumentException" line="140"/>
            <method name="getSetMessage" type="String" line="144">
                <params>
                    <param name="attemptedType" type="String"/>
                    <param name="attemptedValue" type="String"/>
                </params>
                <declaration name="err" type="String" line="145"/>
                <scope line="151"/>
                <scope line="153"/>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="163">
                <params>
                    <param name="attemptedType" type="String"/>
                    <param name="attemptedValue" type="String"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="167">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="171">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="175">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="179">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="183">
                <params>
                    <param name="s" type="short"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="187">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="191">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="195">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="throwSetIllegalArgumentException" type="void" line="199">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
        </class>
    </source>