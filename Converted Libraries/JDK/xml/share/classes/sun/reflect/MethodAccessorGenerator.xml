<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.misc.Unsafe"/>
        <class name="MethodAccessorGenerator" line="33">
            <extends class="AccessorGenerator"/>
            <comment line="45">
                One for invoke() plus one for constructor                
            </comment>
            <comment line="47">
                Only used if forSerialization is true                
            </comment>
            <comment line="63">
                Constant pool index of CONSTANT_Class_info for first
                 non-primitive parameter type. Should be incremented by 2.                
            </comment>
            <javadoc line="33">
                Generator for sun.reflect.MethodAccessor and
                  sun.reflect.ConstructorAccessor objects using bytecodes to
                  implement reflection. A java.lang.reflect.Method or
                  java.lang.reflect.Constructor object can delegate its invoke or
                  newInstance method to an accessor using native code or to one
                  generated by this class. (Methods and Constructors were merged
                  together in this class to ensure maximum code sharing.)                
            </javadoc>
            <declaration name="NUM_BASE_CPOOL_ENTRIES" type="short" line="43"/>
            <declaration name="NUM_METHODS" type="short" line="45"/>
            <declaration name="NUM_SERIALIZATION_CPOOL_ENTRIES" type="short" line="47"/>
            <declaration name="methodSymnum" type="int" line="49"/>
            <declaration name="constructorSymnum" type="int" line="50"/>
            <declaration name="serializationConstructorSymnum" type="int" line="51"/>
            <declaration name="declaringClass" type="Class" line="53"/>
            <declaration name="parameterTypes" type="Class[]" line="54"/>
            <declaration name="returnType" type="Class" line="55"/>
            <declaration name="isConstructor" type="boolean" line="56"/>
            <declaration name="forSerialization" type="boolean" line="57"/>
            <declaration name="targetMethodRef" type="short" line="59"/>
            <declaration name="invokeIdx" type="short" line="60"/>
            <declaration name="invokeDescriptorIdx" type="short" line="61"/>
            <declaration name="nonPrimitiveParametersBaseIdx" type="short" line="64"/>
            <method name="MethodAccessorGenerator" type="constructor" line="66"/>
            <javadoc line="69">
                This routine is not thread-safe                
            </javadoc>
            <method name="generateMethod" type="MethodAccessor" line="76">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="returnType" type="Class"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                This routine is not thread-safe                
            </javadoc>
            <method name="generateConstructor" type="ConstructorAccessor" line="93">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="105">
                This routine is not thread-safe                
            </javadoc>
            <method name="generateSerializationConstructor" type="SerializationConstructorAccessorImpl" line="112">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                    <param name="targetConstructorClass" type="Class"/>
                </params>
            </method>
            <javadoc line="125">
                This routine is not thread-safe                
            </javadoc>
            <method name="generate" type="MagicAccessorImpl" line="135">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="returnType" type="Class"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                    <param name="isConstructor" type="boolean"/>
                    <param name="forSerialization" type="boolean"/>
                    <param name="serializationTargetClass" type="Class"/>
                </params>
                <comment line="148">
                    Constant pool entries:
                     ( * = Boxing information: optional)
                     (+  = Shared entries provided by AccessorGenerator)
                     (^  = Only present if generating SerializationConstructorAccessor)
                         [UTF-8] [This class&apos;s name]
                         [CONSTANT_Class_info] for above
                         [UTF-8] &quot;sun/reflect/{MethodAccessorImpl,ConstructorAccessorImpl,SerializationConstructorAccessorImpl}&quot;
                         [CONSTANT_Class_info] for above
                         [UTF-8] [Target class&apos;s name]
                         [CONSTANT_Class_info] for above
                     ^   [UTF-8] [Serialization: Class&apos;s name in which to invoke constructor]
                     ^   [CONSTANT_Class_info] for above
                         [UTF-8] target method or constructor name
                         [UTF-8] target method or constructor signature
                         [CONSTANT_NameAndType_info] for above
                         [CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info] for target method
                         [UTF-8] &quot;invoke&quot; or &quot;newInstance&quot;
                         [UTF-8] invoke or newInstance descriptor
                         [UTF-8] descriptor for type of non-primitive parameter 1
                         [CONSTANT_Class_info] for type of non-primitive parameter 1
                         ...
                         [UTF-8] descriptor for type of non-primitive parameter n
                         [CONSTANT_Class_info] for type of non-primitive parameter n
                     +   [UTF-8] &quot;java/lang/Exception&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/ClassCastException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/NullPointerException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/IllegalArgumentException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;java/lang/InvocationTargetException&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;&lt;init&gt;&quot;
                     +   [UTF-8] &quot;()V&quot;
                     +   [CONSTANT_NameAndType_info] for above
                     +   [CONSTANT_Methodref_info] for NullPointerException&apos;s constructor
                     +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor
                     +   [UTF-8] &quot;(Ljava/lang/String;)V&quot;
                     +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/String;)V&quot;
                     +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor taking a String
                     +   [UTF-8] &quot;(Ljava/lang/Throwable;)V&quot;
                     +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/Throwable;)V&quot;
                     +   [CONSTANT_Methodref_info] for InvocationTargetException&apos;s constructor
                     +   [CONSTANT_Methodref_info] for &quot;super()&quot;
                     +   [UTF-8] &quot;java/lang/Object&quot;
                     +   [CONSTANT_Class_info] for above
                     +   [UTF-8] &quot;toString&quot;
                     +   [UTF-8] &quot;()Ljava/lang/String;&quot;
                     +   [CONSTANT_NameAndType_info] for &quot;toString()Ljava/lang/String;&quot;
                     +   [CONSTANT_Methodref_info] for Object&apos;s toString method
                     +   [UTF-8] &quot;Code&quot;
                     +   [UTF-8] &quot;Exceptions&quot;
                      *  [UTF-8] &quot;java/lang/Boolean&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(Z)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;booleanValue&quot;
                      *  [UTF-8] &quot;()Z&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Byte&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(B)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;byteValue&quot;
                      *  [UTF-8] &quot;()B&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Character&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(C)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;charValue&quot;
                      *  [UTF-8] &quot;()C&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Double&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(D)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;doubleValue&quot;
                      *  [UTF-8] &quot;()D&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Float&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(F)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;floatValue&quot;
                      *  [UTF-8] &quot;()F&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Integer&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(I)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;intValue&quot;
                      *  [UTF-8] &quot;()I&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Long&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(J)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;longValue&quot;
                      *  [UTF-8] &quot;()J&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;java/lang/Short&quot;
                      *  [CONSTANT_Class_info] for above
                      *  [UTF-8] &quot;(S)V&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above
                      *  [UTF-8] &quot;shortValue&quot;
                      *  [UTF-8] &quot;()S&quot;
                      *  [CONSTANT_NameAndType_info] for above
                      *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="283">
                    Add in variable-length number of entries to be able to describe
                     non-primitive parameter types and checked exceptions.                    
                </comment>
                <comment line="341">
                    Output class information for non-primitive parameter types                    
                </comment>
                <comment line="351">
                    Entries common to FieldAccessor, MethodAccessor and ConstructorAccessor                    
                </comment>
                <comment line="354">
                    Boxing entries                    
                </comment>
                <comment line="364">
                    Access flags                    
                </comment>
                <comment line="367">
                    This class                    
                </comment>
                <comment line="370">
                    Superclass                    
                </comment>
                <comment line="373">
                    Interfaces count and interfaces                    
                </comment>
                <comment line="376">
                    Fields count and fields                    
                </comment>
                <comment line="379">
                    Methods count and methods                    
                </comment>
                <comment line="385">
                    Additional attributes (none)                    
                </comment>
                <comment line="388">
                    Load class                    
                </comment>
                <comment line="391">
                    Note: the class loader is the only thing that really matters
                     here -- it&apos;s important to get the generated code into the
                     same namespace as the target class. Since the generated code
                     is privileged anyway, the protection domain probably doesn&apos;t
                     matter.                    
                </comment>
                <declaration name="vec" type="ByteVector" line="136"/>
                <declaration name="numCPEntries" type="short" line="273"/>
                <declaration name="usesPrimitives" type="boolean" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
                <declaration name="generatedName" type="String" line="288"/>
                <scope line="292">
                    <scope line="293"/>
                    <scope line="296"/>
                </scope>
                <scope line="299"/>
                <declaration name="serializationTargetClassIdx" type="short" line="307"/>
                <scope line="308"/>
                <scope line="316"/>
                <scope line="318">
                    <scope line="319"/>
                    <scope line="321"/>
                </scope>
                <scope line="326"/>
                <scope line="328"/>
                <scope line="332"/>
                <scope line="334"/>
                <scope line="342">
                    <declaration name="c" type="Class" line="343"/>
                    <scope line="344"/>
                </scope>
                <scope line="354"/>
                <scope line="358"/>
                <declaration name="bytes" type="byte[]" line="389"/>
                <anonymous_class line="396">
                    <method name="run" type="MagicAccessorImpl" line="397">
                        <scope line="398"/>
                        <scope line="406"/>
                        <scope line="409"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="417">
                This emits the code for either invoke() or newInstance()                
            </javadoc>
            <method name="emitInvoke" type="void" line="418">
                <comment line="420">
                    NOTE that this code will only handle 65535 parameters since we
                     use the sipush instruction to get the array index on the
                     operand stack.                    
                </comment>
                <comment line="427">
                    Generate code into fresh code buffer                    
                </comment>
                <comment line="430">
                    1 incoming argument                    
                </comment>
                <comment line="433">
                    2 incoming arguments                    
                </comment>
                <comment line="440">
                    Instantiate target class before continuing
                     new &lt;target class type&gt;
                     dup                    
                </comment>
                <comment line="446">
                    Setup before iterating down argument list                    
                </comment>
                <comment line="448">
                    new &lt;boxing type for primitive type&gt;
                     dup
                     ... (see below:)
                     invokespecial &lt;constructor for boxing type for primitive type&gt;
                     areturn                    
                </comment>
                <comment line="457">
                    Get target object on operand stack if necessary.                    
                </comment>
                <comment line="459">
                    We need to do an explicit null check here; we won&apos;t see
                     NullPointerExceptions from the invoke bytecode, since it&apos;s
                     covered by an exception handler.                    
                </comment>
                <comment line="463">
                    aload_1
                     ifnonnull &lt;checkcast label&gt;
                     new &lt;NullPointerException&gt;
                     dup
                     invokespecial &lt;NullPointerException ctor&gt;
                     athrow
                     &lt;checkcast label:&gt;
                     aload_1
                     checkcast &lt;target class&apos;s type&gt;                    
                </comment>
                <comment line="486">
                    Have to check length of incoming array and throw
                     IllegalArgumentException if not correct. A concession to the
                     JCK (isn&apos;t clearly specified in the spec): we allow null in the
                     case where the argument list is zero length.
                     if no-arg:
                       aload_2 | aload_1 (Method | Constructor)
                       ifnull &lt;success label&gt;
                     aload_2 | aload_1
                     arraylength
                     sipush &lt;num parameter types&gt;
                     if_icmpeq &lt;success label&gt;
                     new &lt;IllegalArgumentException&gt;
                     dup
                     invokespecial &lt;IllegalArgumentException ctor&gt;
                     athrow
                     &lt;success label:&gt;                    
                </comment>
                <comment line="525">
                    Iterate through incoming actual parameters, ensuring that each
                     is compatible with the formal parameter type, and pushing the
                     actual on the operand stack (unboxing and widening if necessary).                    
                </comment>
                <comment line="531">
                    both invokeinterface opcode&apos;s &quot;count&quot; as well as                    
                </comment>
                <comment line="532">
                    num args of other invoke bytecodes                    
                </comment>
                <comment line="540">
                    aload_2 | aload_1
                     sipush &lt;index&gt;
                     aaload                    
                </comment>
                <comment line="551">
                    Unboxing code.
                     Put parameter into temporary local variable
                     astore_3 | astore_2                    
                </comment>
                <comment line="560">
                    repeat for all possible widening conversions:
                       aload_3 | aload_2
                       instanceof &lt;primitive boxing type&gt;
                       ifeq &lt;next unboxing label&gt;
                       aload_3 | aload_2
                       checkcast &lt;primitive boxing type&gt;  Note: this is &quot;redundant&quot;,
                                                          but necessary for the verifier
                       invokevirtual &lt;unboxing method&gt;
                       &lt;widening conversion bytecode, if necessary&gt;
                       goto &lt;next parameter label&gt;
                     &lt;next unboxing label:&gt; ...
                     last unboxing label:
                       new &lt;IllegalArgumentException&gt;
                       dup
                       invokespecial &lt;IllegalArgumentException ctor&gt;
                       athrow                    
                </comment>
                <comment line="577">
                    unboxing label                    
                </comment>
                <comment line="586">
                    Emit checking and unboxing code for this type                    
                </comment>
                <comment line="616">
                    Fell through; given object is null or invalid. According to
                     the spec, we can throw IllegalArgumentException for both of
                     these cases.                    
                </comment>
                <comment line="626">
                    Emit appropriate checkcast                    
                </comment>
                <comment line="629">
                    Fall through to next argument                    
                </comment>
                <comment line="632">
                    Bind last goto if present                    
                </comment>
                <comment line="639">
                    OK, ready to perform the invocation.                    
                </comment>
                <comment line="664">
                    Box return value if necessary                    
                </comment>
                <comment line="675">
                    We generate two exception handlers; one which is responsible
                     for catching ClassCastException and NullPointerException and
                     throwing IllegalArgumentException, and the other which catches
                     all java/lang/Throwable objects thrown from the target method
                     and wraps them in InvocationTargetExceptions.                    
                </comment>
                <comment line="683">
                    ClassCast, etc. exception handler                    
                </comment>
                <comment line="694">
                    InvocationTargetException exception handler                    
                </comment>
                <comment line="702">
                    Generate exception table. We cover the entire code sequence
                     with an exception handler which catches ClassCastException and
                     converts it into an IllegalArgumentException.                    
                </comment>
                <comment line="708">
                    start PC                    
                </comment>
                <comment line="709">
                    end PC                    
                </comment>
                <comment line="710">
                    handler PC                    
                </comment>
                <comment line="711">
                    catch type                    
                </comment>
                <comment line="713">
                    start PC                    
                </comment>
                <comment line="714">
                    end PC                    
                </comment>
                <comment line="715">
                    handler PC                    
                </comment>
                <comment line="716">
                    catch type                    
                </comment>
                <comment line="718">
                    start PC                    
                </comment>
                <comment line="719">
                    end PC                    
                </comment>
                <comment line="720">
                    handler PC                    
                </comment>
                <comment line="721">
                    catch type                    
                </comment>
                <scope line="422"/>
                <declaration name="cb" type="ClassFileAssembler" line="427"/>
                <scope line="428"/>
                <scope line="431"/>
                <declaration name="illegalArgStartPC" type="short" line="436"/>
                <scope line="438"/>
                <scope line="444">
                    <scope line="446"/>
                    <scope line="461">
                        <declaration name="l" type="Label" line="472"/>
                    </scope>
                </scope>
                <declaration name="successLabel" type="Label" line="501"/>
                <scope line="502">
                    <scope line="503"/>
                    <scope line="505"/>
                </scope>
                <scope line="510"/>
                <scope line="512"/>
                <declaration name="paramTypeCPIdx" type="short" line="528"/>
                <declaration name="nextParamLabel" type="Label" line="529"/>
                <declaration name="count" type="byte" line="530"/>
                <scope line="532">
                    <declaration name="paramType" type="Class" line="533"/>
                    <scope line="535"/>
                    <scope line="542"/>
                    <scope line="544"/>
                    <scope line="549">
                        <scope line="553"/>
                        <scope line="555"/>
                        <declaration name="l" type="Label" line="576"/>
                        <scope line="579">
                            <declaration name="c" type="Class" line="580"/>
                            <scope line="581">
                                <scope line="582"/>
                                <scope line="586"/>
                                <scope line="588"/>
                                <scope line="594"/>
                                <scope line="596"/>
                            </scope>
                        </scope>
                        <scope line="610"/>
                    </scope>
                    <scope line="624"/>
                </scope>
                <scope line="632"/>
                <declaration name="invokeStartPC" type="short" line="636"/>
                <scope line="639"/>
                <scope line="641">
                    <scope line="642"/>
                    <scope line="646">
                        <scope line="647"/>
                        <scope line="652"/>
                    </scope>
                </scope>
                <declaration name="invokeEndPC" type="short" line="660"/>
                <scope line="662">
                    <scope line="664"/>
                    <scope line="668"/>
                </scope>
                <declaration name="classCastHandler" type="short" line="680"/>
                <declaration name="invocationTargetHandler" type="short" line="691"/>
                <declaration name="exc" type="ClassFileAssembler" line="705"/>
            </method>
            <method name="usesPrimitiveTypes" type="boolean" line="726">
                <comment line="728">
                    We need to emit boxing/unboxing constant pool information if
                     the method takes a primitive type for any of its parameters or
                     returns a primitive value (except void)                    
                </comment>
                <scope line="730"/>
                <scope line="733">
                    <scope line="734"/>
                </scope>
            </method>
            <method name="numNonPrimitiveParameterTypes" type="int" line="741">
                <declaration name="num" type="int" line="742"/>
                <scope line="743">
                    <scope line="744"/>
                </scope>
            </method>
            <method name="isInterface" type="boolean" line="751"/>
            <method name="buildInternalSignature" type="String" line="755">
                <declaration name="buf" type="StringBuffer" line="756"/>
                <scope line="758"/>
            </method>
            <method name="generateName" type="String" line="768">
                <params>
                    <param name="isConstructor" type="boolean"/>
                    <param name="forSerialization" type="boolean"/>
                </params>
                <scope line="769">
                    <scope line="770">
                        <declaration name="num" type="int" line="771"/>
                    </scope>
                    <scope line="773">
                        <declaration name="num" type="int" line="774"/>
                    </scope>
                </scope>
                <scope line="777">
                    <declaration name="num" type="int" line="778"/>
                </scope>
            </method>
        </class>
    </source>