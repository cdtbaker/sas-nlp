<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.misc.Unsafe"/>
        <class name="MethodAccessorGenerator" line="33">
            <extends class="AccessorGenerator"/>
            <comment line="45">
                One for invoke() plus one for constructor                
            </comment>
            <comment line="47">
                Only used if forSerialization is true                
            </comment>
            <comment line="63">
                Constant pool index of CONSTANT_Class_info for first                
            </comment>
            <comment line="64">
                non-primitive parameter type. Should be incremented by 2.                
            </comment>
            <javadoc line="33">
                Generator for sun.reflect.MethodAccessor and
                  sun.reflect.ConstructorAccessor objects using bytecodes to
                  implement reflection. A java.lang.reflect.Method or
                  java.lang.reflect.Constructor object can delegate its invoke or
                  newInstance method to an accessor using native code or to one
                  generated by this class. (Methods and Constructors were merged
                  together in this class to ensure maximum code sharing.)                
            </javadoc>
            <declaration name="NUM_BASE_CPOOL_ENTRIES" type="short" line="43"/>
            <declaration name="NUM_METHODS" type="short" line="45"/>
            <declaration name="NUM_SERIALIZATION_CPOOL_ENTRIES" type="short" line="47"/>
            <declaration name="methodSymnum" type="int" line="49"/>
            <declaration name="constructorSymnum" type="int" line="50"/>
            <declaration name="serializationConstructorSymnum" type="int" line="51"/>
            <declaration name="declaringClass" type="Class" line="53"/>
            <declaration name="parameterTypes" type="Class[]" line="54"/>
            <declaration name="returnType" type="Class" line="55"/>
            <declaration name="isConstructor" type="boolean" line="56"/>
            <declaration name="forSerialization" type="boolean" line="57"/>
            <declaration name="targetMethodRef" type="short" line="59"/>
            <declaration name="invokeIdx" type="short" line="60"/>
            <declaration name="invokeDescriptorIdx" type="short" line="61"/>
            <declaration name="nonPrimitiveParametersBaseIdx" type="short" line="64"/>
            <method name="MethodAccessorGenerator" type="constructor" line="66"/>
            <javadoc line="69">
                This routine is not thread-safe                
            </javadoc>
            <method name="generateMethod" type="MethodAccessor" line="76">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="returnType" type="Class"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                This routine is not thread-safe                
            </javadoc>
            <method name="generateConstructor" type="ConstructorAccessor" line="93">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="105">
                This routine is not thread-safe                
            </javadoc>
            <method name="generateSerializationConstructor" type="SerializationConstructorAccessorImpl" line="112">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                    <param name="targetConstructorClass" type="Class"/>
                </params>
            </method>
            <javadoc line="125">
                This routine is not thread-safe                
            </javadoc>
            <method name="generate" type="MagicAccessorImpl" line="135">
                <params>
                    <param name="declaringClass" type="Class"/>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="returnType" type="Class"/>
                    <param name="checkedExceptions" type="Class[]"/>
                    <param name="modifiers" type="int"/>
                    <param name="isConstructor" type="boolean"/>
                    <param name="forSerialization" type="boolean"/>
                    <param name="serializationTargetClass" type="Class"/>
                </params>
                <comment line="147">
                    Constant pool entries:                    
                </comment>
                <comment line="148">
                    ( * = Boxing information: optional)                    
                </comment>
                <comment line="149">
                    (+  = Shared entries provided by AccessorGenerator)                    
                </comment>
                <comment line="150">
                    (^  = Only present if generating SerializationConstructorAccessor)                    
                </comment>
                <comment line="151">
                    [UTF-8] [This class&apos;s name]                    
                </comment>
                <comment line="152">
                    [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="153">
                    [UTF-8] &quot;sun/reflect/{MethodAccessorImpl,ConstructorAccessorImpl,SerializationConstructorAccessorImpl}&quot;                    
                </comment>
                <comment line="154">
                    [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="155">
                    [UTF-8] [Target class&apos;s name]                    
                </comment>
                <comment line="156">
                    [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="157">
                    ^   [UTF-8] [Serialization: Class&apos;s name in which to invoke constructor]                    
                </comment>
                <comment line="158">
                    ^   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="159">
                    [UTF-8] target method or constructor name                    
                </comment>
                <comment line="160">
                    [UTF-8] target method or constructor signature                    
                </comment>
                <comment line="161">
                    [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="162">
                    [CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info] for target method                    
                </comment>
                <comment line="163">
                    [UTF-8] &quot;invoke&quot; or &quot;newInstance&quot;                    
                </comment>
                <comment line="164">
                    [UTF-8] invoke or newInstance descriptor                    
                </comment>
                <comment line="165">
                    [UTF-8] descriptor for type of non-primitive parameter 1                    
                </comment>
                <comment line="166">
                    [CONSTANT_Class_info] for type of non-primitive parameter 1                    
                </comment>
                <comment line="167">
                    ...                    
                </comment>
                <comment line="168">
                    [UTF-8] descriptor for type of non-primitive parameter n                    
                </comment>
                <comment line="169">
                    [CONSTANT_Class_info] for type of non-primitive parameter n                    
                </comment>
                <comment line="170">
                    +   [UTF-8] &quot;java/lang/Exception&quot;                    
                </comment>
                <comment line="171">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="172">
                    +   [UTF-8] &quot;java/lang/ClassCastException&quot;                    
                </comment>
                <comment line="173">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="174">
                    +   [UTF-8] &quot;java/lang/NullPointerException&quot;                    
                </comment>
                <comment line="175">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="176">
                    +   [UTF-8] &quot;java/lang/IllegalArgumentException&quot;                    
                </comment>
                <comment line="177">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="178">
                    +   [UTF-8] &quot;java/lang/InvocationTargetException&quot;                    
                </comment>
                <comment line="179">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="180">
                    +   [UTF-8] &quot;&lt;init&gt;&quot;                    
                </comment>
                <comment line="181">
                    +   [UTF-8] &quot;()V&quot;                    
                </comment>
                <comment line="182">
                    +   [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="183">
                    +   [CONSTANT_Methodref_info] for NullPointerException&apos;s constructor                    
                </comment>
                <comment line="184">
                    +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor                    
                </comment>
                <comment line="185">
                    +   [UTF-8] &quot;(Ljava/lang/String;)V&quot;                    
                </comment>
                <comment line="186">
                    +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/String;)V&quot;                    
                </comment>
                <comment line="187">
                    +   [CONSTANT_Methodref_info] for IllegalArgumentException&apos;s constructor taking a String                    
                </comment>
                <comment line="188">
                    +   [UTF-8] &quot;(Ljava/lang/Throwable;)V&quot;                    
                </comment>
                <comment line="189">
                    +   [CONSTANT_NameAndType_info] for &quot;&lt;init&gt;(Ljava/lang/Throwable;)V&quot;                    
                </comment>
                <comment line="190">
                    +   [CONSTANT_Methodref_info] for InvocationTargetException&apos;s constructor                    
                </comment>
                <comment line="191">
                    +   [CONSTANT_Methodref_info] for &quot;super()&quot;                    
                </comment>
                <comment line="192">
                    +   [UTF-8] &quot;java/lang/Object&quot;                    
                </comment>
                <comment line="193">
                    +   [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="194">
                    +   [UTF-8] &quot;toString&quot;                    
                </comment>
                <comment line="195">
                    +   [UTF-8] &quot;()Ljava/lang/String;&quot;                    
                </comment>
                <comment line="196">
                    +   [CONSTANT_NameAndType_info] for &quot;toString()Ljava/lang/String;&quot;                    
                </comment>
                <comment line="197">
                    +   [CONSTANT_Methodref_info] for Object&apos;s toString method                    
                </comment>
                <comment line="198">
                    +   [UTF-8] &quot;Code&quot;                    
                </comment>
                <comment line="199">
                    +   [UTF-8] &quot;Exceptions&quot;                    
                </comment>
                <comment line="200">
                    *  [UTF-8] &quot;java/lang/Boolean&quot;                    
                </comment>
                <comment line="201">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="202">
                    *  [UTF-8] &quot;(Z)V&quot;                    
                </comment>
                <comment line="203">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="204">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="205">
                    *  [UTF-8] &quot;booleanValue&quot;                    
                </comment>
                <comment line="206">
                    *  [UTF-8] &quot;()Z&quot;                    
                </comment>
                <comment line="207">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="208">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="209">
                    *  [UTF-8] &quot;java/lang/Byte&quot;                    
                </comment>
                <comment line="210">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="211">
                    *  [UTF-8] &quot;(B)V&quot;                    
                </comment>
                <comment line="212">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="213">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="214">
                    *  [UTF-8] &quot;byteValue&quot;                    
                </comment>
                <comment line="215">
                    *  [UTF-8] &quot;()B&quot;                    
                </comment>
                <comment line="216">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="217">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="218">
                    *  [UTF-8] &quot;java/lang/Character&quot;                    
                </comment>
                <comment line="219">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="220">
                    *  [UTF-8] &quot;(C)V&quot;                    
                </comment>
                <comment line="221">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="222">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="223">
                    *  [UTF-8] &quot;charValue&quot;                    
                </comment>
                <comment line="224">
                    *  [UTF-8] &quot;()C&quot;                    
                </comment>
                <comment line="225">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="226">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="227">
                    *  [UTF-8] &quot;java/lang/Double&quot;                    
                </comment>
                <comment line="228">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="229">
                    *  [UTF-8] &quot;(D)V&quot;                    
                </comment>
                <comment line="230">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="231">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="232">
                    *  [UTF-8] &quot;doubleValue&quot;                    
                </comment>
                <comment line="233">
                    *  [UTF-8] &quot;()D&quot;                    
                </comment>
                <comment line="234">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="235">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="236">
                    *  [UTF-8] &quot;java/lang/Float&quot;                    
                </comment>
                <comment line="237">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="238">
                    *  [UTF-8] &quot;(F)V&quot;                    
                </comment>
                <comment line="239">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="240">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="241">
                    *  [UTF-8] &quot;floatValue&quot;                    
                </comment>
                <comment line="242">
                    *  [UTF-8] &quot;()F&quot;                    
                </comment>
                <comment line="243">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="244">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="245">
                    *  [UTF-8] &quot;java/lang/Integer&quot;                    
                </comment>
                <comment line="246">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="247">
                    *  [UTF-8] &quot;(I)V&quot;                    
                </comment>
                <comment line="248">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="249">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="250">
                    *  [UTF-8] &quot;intValue&quot;                    
                </comment>
                <comment line="251">
                    *  [UTF-8] &quot;()I&quot;                    
                </comment>
                <comment line="252">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="253">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="254">
                    *  [UTF-8] &quot;java/lang/Long&quot;                    
                </comment>
                <comment line="255">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="256">
                    *  [UTF-8] &quot;(J)V&quot;                    
                </comment>
                <comment line="257">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="258">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="259">
                    *  [UTF-8] &quot;longValue&quot;                    
                </comment>
                <comment line="260">
                    *  [UTF-8] &quot;()J&quot;                    
                </comment>
                <comment line="261">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="262">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="263">
                    *  [UTF-8] &quot;java/lang/Short&quot;                    
                </comment>
                <comment line="264">
                    *  [CONSTANT_Class_info] for above                    
                </comment>
                <comment line="265">
                    *  [UTF-8] &quot;(S)V&quot;                    
                </comment>
                <comment line="266">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="267">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="268">
                    *  [UTF-8] &quot;shortValue&quot;                    
                </comment>
                <comment line="269">
                    *  [UTF-8] &quot;()S&quot;                    
                </comment>
                <comment line="270">
                    *  [CONSTANT_NameAndType_info] for above                    
                </comment>
                <comment line="271">
                    *  [CONSTANT_Methodref_info] for above                    
                </comment>
                <comment line="282">
                    Add in variable-length number of entries to be able to describe                    
                </comment>
                <comment line="283">
                    non-primitive parameter types and checked exceptions.                    
                </comment>
                <comment line="340">
                    Output class information for non-primitive parameter types                    
                </comment>
                <comment line="350">
                    Entries common to FieldAccessor, MethodAccessor and ConstructorAccessor                    
                </comment>
                <comment line="353">
                    Boxing entries                    
                </comment>
                <comment line="363">
                    Access flags                    
                </comment>
                <comment line="366">
                    This class                    
                </comment>
                <comment line="369">
                    Superclass                    
                </comment>
                <comment line="372">
                    Interfaces count and interfaces                    
                </comment>
                <comment line="375">
                    Fields count and fields                    
                </comment>
                <comment line="378">
                    Methods count and methods                    
                </comment>
                <comment line="384">
                    Additional attributes (none)                    
                </comment>
                <comment line="387">
                    Load class                    
                </comment>
                <comment line="390">
                    Note: the class loader is the only thing that really matters                    
                </comment>
                <comment line="391">
                    here -- it&apos;s important to get the generated code into the                    
                </comment>
                <comment line="392">
                    same namespace as the target class. Since the generated code                    
                </comment>
                <comment line="393">
                    is privileged anyway, the protection domain probably doesn&apos;t                    
                </comment>
                <comment line="394">
                    matter.                    
                </comment>
                <declaration name="vec" type="ByteVector" line="136"/>
                <declaration name="numCPEntries" type="short" line="273"/>
                <declaration name="usesPrimitives" type="boolean" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
                <declaration name="generatedName" type="String" line="288"/>
                <scope line="292">
                    <scope line="293"/>
                    <scope line="296"/>
                </scope>
                <scope line="299"/>
                <declaration name="serializationTargetClassIdx" type="short" line="307"/>
                <scope line="308"/>
                <scope line="316"/>
                <scope line="318">
                    <scope line="319"/>
                    <scope line="321"/>
                </scope>
                <scope line="326"/>
                <scope line="328"/>
                <scope line="332"/>
                <scope line="334"/>
                <scope line="342">
                    <declaration name="c" type="Class" line="343"/>
                    <scope line="344"/>
                </scope>
                <scope line="354"/>
                <scope line="358"/>
                <declaration name="bytes" type="byte[]" line="389"/>
                <anonymous_class line="396">
                    <method name="run" type="MagicAccessorImpl" line="397">
                        <scope line="398"/>
                        <scope line="406"/>
                        <scope line="409"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="417">
                This emits the code for either invoke() or newInstance()                
            </javadoc>
            <method name="emitInvoke" type="void" line="418">
                <comment line="419">
                    NOTE that this code will only handle 65535 parameters since we                    
                </comment>
                <comment line="420">
                    use the sipush instruction to get the array index on the                    
                </comment>
                <comment line="421">
                    operand stack.                    
                </comment>
                <comment line="426">
                    Generate code into fresh code buffer                    
                </comment>
                <comment line="429">
                    1 incoming argument                    
                </comment>
                <comment line="432">
                    2 incoming arguments                    
                </comment>
                <comment line="439">
                    Instantiate target class before continuing                    
                </comment>
                <comment line="440">
                    new &lt;target class type&gt;                    
                </comment>
                <comment line="441">
                    dup                    
                </comment>
                <comment line="445">
                    Setup before iterating down argument list                    
                </comment>
                <comment line="447">
                    new &lt;boxing type for primitive type&gt;                    
                </comment>
                <comment line="448">
                    dup                    
                </comment>
                <comment line="449">
                    ... (see below:)                    
                </comment>
                <comment line="450">
                    invokespecial &lt;constructor for boxing type for primitive type&gt;                    
                </comment>
                <comment line="451">
                    areturn                    
                </comment>
                <comment line="456">
                    Get target object on operand stack if necessary.                    
                </comment>
                <comment line="458">
                    We need to do an explicit null check here; we won&apos;t see                    
                </comment>
                <comment line="459">
                    NullPointerExceptions from the invoke bytecode, since it&apos;s                    
                </comment>
                <comment line="460">
                    covered by an exception handler.                    
                </comment>
                <comment line="462">
                    aload_1                    
                </comment>
                <comment line="463">
                    ifnonnull &lt;checkcast label&gt;                    
                </comment>
                <comment line="464">
                    new &lt;NullPointerException&gt;                    
                </comment>
                <comment line="465">
                    dup                    
                </comment>
                <comment line="466">
                    invokespecial &lt;NullPointerException ctor&gt;                    
                </comment>
                <comment line="467">
                    athrow                    
                </comment>
                <comment line="468">
                    &lt;checkcast label:&gt;                    
                </comment>
                <comment line="469">
                    aload_1                    
                </comment>
                <comment line="470">
                    checkcast &lt;target class&apos;s type&gt;                    
                </comment>
                <comment line="485">
                    Have to check length of incoming array and throw                    
                </comment>
                <comment line="486">
                    IllegalArgumentException if not correct. A concession to the                    
                </comment>
                <comment line="487">
                    JCK (isn&apos;t clearly specified in the spec): we allow null in the                    
                </comment>
                <comment line="488">
                    case where the argument list is zero length.                    
                </comment>
                <comment line="489">
                    if no-arg:                    
                </comment>
                <comment line="490">
                    aload_2 | aload_1 (Method | Constructor)                    
                </comment>
                <comment line="491">
                    ifnull &lt;success label&gt;                    
                </comment>
                <comment line="492">
                    aload_2 | aload_1                    
                </comment>
                <comment line="493">
                    arraylength                    
                </comment>
                <comment line="494">
                    sipush &lt;num parameter types&gt;                    
                </comment>
                <comment line="495">
                    if_icmpeq &lt;success label&gt;                    
                </comment>
                <comment line="496">
                    new &lt;IllegalArgumentException&gt;                    
                </comment>
                <comment line="497">
                    dup                    
                </comment>
                <comment line="498">
                    invokespecial &lt;IllegalArgumentException ctor&gt;                    
                </comment>
                <comment line="499">
                    athrow                    
                </comment>
                <comment line="500">
                    &lt;success label:&gt;                    
                </comment>
                <comment line="524">
                    Iterate through incoming actual parameters, ensuring that each                    
                </comment>
                <comment line="525">
                    is compatible with the formal parameter type, and pushing the                    
                </comment>
                <comment line="526">
                    actual on the operand stack (unboxing and widening if necessary).                    
                </comment>
                <comment line="530">
                    both invokeinterface opcode&apos;s &quot;count&quot; as well as                    
                </comment>
                <comment line="531">
                    num args of other invoke bytecodes                    
                </comment>
                <comment line="539">
                    aload_2 | aload_1                    
                </comment>
                <comment line="540">
                    sipush &lt;index&gt;                    
                </comment>
                <comment line="541">
                    aaload                    
                </comment>
                <comment line="550">
                    Unboxing code.                    
                </comment>
                <comment line="551">
                    Put parameter into temporary local variable                    
                </comment>
                <comment line="552">
                    astore_3 | astore_2                    
                </comment>
                <comment line="559">
                    repeat for all possible widening conversions:                    
                </comment>
                <comment line="560">
                    aload_3 | aload_2                    
                </comment>
                <comment line="561">
                    instanceof &lt;primitive boxing type&gt;                    
                </comment>
                <comment line="562">
                    ifeq &lt;next unboxing label&gt;                    
                </comment>
                <comment line="563">
                    aload_3 | aload_2                    
                </comment>
                <comment line="564">
                    checkcast &lt;primitive boxing type&gt; // Note: this is &quot;redundant&quot;,                    
                </comment>
                <comment line="565">
                    // but necessary for the verifier                    
                </comment>
                <comment line="566">
                    invokevirtual &lt;unboxing method&gt;                    
                </comment>
                <comment line="567">
                    &lt;widening conversion bytecode, if necessary&gt;                    
                </comment>
                <comment line="568">
                    goto &lt;next parameter label&gt;                    
                </comment>
                <comment line="569">
                    &lt;next unboxing label:&gt; ...                    
                </comment>
                <comment line="570">
                    last unboxing label:                    
                </comment>
                <comment line="571">
                    new &lt;IllegalArgumentException&gt;                    
                </comment>
                <comment line="572">
                    dup                    
                </comment>
                <comment line="573">
                    invokespecial &lt;IllegalArgumentException ctor&gt;                    
                </comment>
                <comment line="574">
                    athrow                    
                </comment>
                <comment line="576">
                    unboxing label                    
                </comment>
                <comment line="585">
                    Emit checking and unboxing code for this type                    
                </comment>
                <comment line="615">
                    Fell through; given object is null or invalid. According to                    
                </comment>
                <comment line="616">
                    the spec, we can throw IllegalArgumentException for both of                    
                </comment>
                <comment line="617">
                    these cases.                    
                </comment>
                <comment line="625">
                    Emit appropriate checkcast                    
                </comment>
                <comment line="628">
                    Fall through to next argument                    
                </comment>
                <comment line="631">
                    Bind last goto if present                    
                </comment>
                <comment line="638">
                    OK, ready to perform the invocation.                    
                </comment>
                <comment line="663">
                    Box return value if necessary                    
                </comment>
                <comment line="674">
                    We generate two exception handlers; one which is responsible                    
                </comment>
                <comment line="675">
                    for catching ClassCastException and NullPointerException and                    
                </comment>
                <comment line="676">
                    throwing IllegalArgumentException, and the other which catches                    
                </comment>
                <comment line="677">
                    all java/lang/Throwable objects thrown from the target method                    
                </comment>
                <comment line="678">
                    and wraps them in InvocationTargetExceptions.                    
                </comment>
                <comment line="682">
                    ClassCast, etc. exception handler                    
                </comment>
                <comment line="693">
                    InvocationTargetException exception handler                    
                </comment>
                <comment line="701">
                    Generate exception table. We cover the entire code sequence                    
                </comment>
                <comment line="702">
                    with an exception handler which catches ClassCastException and                    
                </comment>
                <comment line="703">
                    converts it into an IllegalArgumentException.                    
                </comment>
                <comment line="707">
                    start PC                    
                </comment>
                <comment line="708">
                    end PC                    
                </comment>
                <comment line="709">
                    handler PC                    
                </comment>
                <comment line="710">
                    catch type                    
                </comment>
                <comment line="712">
                    start PC                    
                </comment>
                <comment line="713">
                    end PC                    
                </comment>
                <comment line="714">
                    handler PC                    
                </comment>
                <comment line="715">
                    catch type                    
                </comment>
                <comment line="717">
                    start PC                    
                </comment>
                <comment line="718">
                    end PC                    
                </comment>
                <comment line="719">
                    handler PC                    
                </comment>
                <comment line="720">
                    catch type                    
                </comment>
                <scope line="422"/>
                <declaration name="cb" type="ClassFileAssembler" line="427"/>
                <scope line="428"/>
                <scope line="431"/>
                <declaration name="illegalArgStartPC" type="short" line="436"/>
                <scope line="438"/>
                <scope line="444">
                    <scope line="446"/>
                    <scope line="461">
                        <declaration name="l" type="Label" line="472"/>
                    </scope>
                </scope>
                <declaration name="successLabel" type="Label" line="501"/>
                <scope line="502">
                    <scope line="503"/>
                    <scope line="505"/>
                </scope>
                <scope line="510"/>
                <scope line="512"/>
                <declaration name="paramTypeCPIdx" type="short" line="528"/>
                <declaration name="nextParamLabel" type="Label" line="529"/>
                <declaration name="count" type="byte" line="530"/>
                <scope line="532">
                    <declaration name="paramType" type="Class" line="533"/>
                    <scope line="535"/>
                    <scope line="542"/>
                    <scope line="544"/>
                    <scope line="549">
                        <scope line="553"/>
                        <scope line="555"/>
                        <declaration name="l" type="Label" line="576"/>
                        <scope line="579">
                            <declaration name="c" type="Class" line="580"/>
                            <scope line="581">
                                <scope line="582"/>
                                <scope line="586"/>
                                <scope line="588"/>
                                <scope line="594"/>
                                <scope line="596"/>
                            </scope>
                        </scope>
                        <scope line="610"/>
                    </scope>
                    <scope line="624"/>
                </scope>
                <scope line="632"/>
                <declaration name="invokeStartPC" type="short" line="636"/>
                <scope line="639"/>
                <scope line="641">
                    <scope line="642"/>
                    <scope line="646">
                        <scope line="647"/>
                        <scope line="652"/>
                    </scope>
                </scope>
                <declaration name="invokeEndPC" type="short" line="660"/>
                <scope line="662">
                    <scope line="664"/>
                    <scope line="668"/>
                </scope>
                <declaration name="classCastHandler" type="short" line="680"/>
                <declaration name="invocationTargetHandler" type="short" line="691"/>
                <declaration name="exc" type="ClassFileAssembler" line="705"/>
            </method>
            <method name="usesPrimitiveTypes" type="boolean" line="726">
                <comment line="727">
                    We need to emit boxing/unboxing constant pool information if                    
                </comment>
                <comment line="728">
                    the method takes a primitive type for any of its parameters or                    
                </comment>
                <comment line="729">
                    returns a primitive value (except void)                    
                </comment>
                <scope line="730"/>
                <scope line="733">
                    <scope line="734"/>
                </scope>
            </method>
            <method name="numNonPrimitiveParameterTypes" type="int" line="741">
                <declaration name="num" type="int" line="742"/>
                <scope line="743">
                    <scope line="744"/>
                </scope>
            </method>
            <method name="isInterface" type="boolean" line="751"/>
            <method name="buildInternalSignature" type="String" line="755">
                <declaration name="buf" type="StringBuffer" line="756"/>
                <scope line="758"/>
            </method>
            <method name="generateName" type="String" line="768">
                <params>
                    <param name="isConstructor" type="boolean"/>
                    <param name="forSerialization" type="boolean"/>
                </params>
                <scope line="769">
                    <scope line="770">
                        <declaration name="num" type="int" line="771"/>
                    </scope>
                    <scope line="773">
                        <declaration name="num" type="int" line="774"/>
                    </scope>
                </scope>
                <scope line="777">
                    <declaration name="num" type="int" line="778"/>
                </scope>
            </method>
        </class>
    </source>