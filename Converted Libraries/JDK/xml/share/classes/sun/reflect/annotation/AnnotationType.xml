<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.annotation">
        <import package="java.lang.annotation"/>
        <import package="java.lang.reflect"/>
        <import package="java.util"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="AnnotationType" line="7">
            <javadoc line="7">
                Represents an annotation type at run time.  Used to type-check annotations
                  and apply member defaults.                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="memberTypes" type="Map&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt;" line="14"/>
            <javadoc line="14">
                Member name -&gt; type mapping. Note that primitive types
                  are represented by the class objects for the corresponding wrapper
                  types.  This matches the return value that must be used for a
                  dynamic proxy, allowing for a simple isInstance test.                
            </javadoc>
            <declaration name="memberDefaults" type="Map&amp;lt;String,Object&amp;gt;" line="21"/>
            <javadoc line="21">
                Member name -&gt; default value mapping.                
            </javadoc>
            <declaration name="members" type="Map&amp;lt;String,Method&amp;gt;" line="25"/>
            <javadoc line="25">
                Member name -&gt; Method object mapping. This (and its assoicated
                  accessor) are used only to generate AnnotationTypeMismatchExceptions.                
            </javadoc>
            <declaration name="retention" type="RetentionPolicy" line="30"/>
            <javadoc line="30">
                The retention policy for this annotation type.                
            </javadoc>
            <declaration name="inherited" type="boolean" line="34"/>
            <javadoc line="34">
                Whether this annotation type is inherited.                
            </javadoc>
            <javadoc line="38">
                Returns an AnnotationType instance for the specified annotation type.                
                <throw>
                    IllegalArgumentException if the specified class object for
                      does not represent a valid annotation type                    
                </throw>
            </javadoc>
            <method name="getInstance" type="AnnotationType" line="43">
                <params>
                    <param name="annotationClass" type="Class&lt;? extends Annotation&gt;"/>
                </params>
                <declaration name="result" type="AnnotationType" line="44"/>
            </method>
            <javadoc line="48">
                Sole constructor.                
                <param>
                    annotationClass the class object for the annotation type                    
                </param>
                <throw>
                    IllegalArgumentException if the specified class object for
                      does not represent a valid annotation type                    
                </throw>
            </javadoc>
            <method name="AnnotationType" type="constructor" line="54">
                <params>
                    <param name="annotationClass" type="Class&lt;? extends Annotation&gt;"/>
                </params>
                <anonymous_class line="56">
                    <method name="run" type="Method[]" line="57"/>
                </anonymous_class>
                <declaration name="methods" type="Method[]" line="56"/>
                <scope line="62">
                    <declaration name="name" type="String" line="64"/>
                    <declaration name="type" type="Class&amp;lt;?&amp;gt;" line="65"/>
                    <declaration name="defaultValue" type="Object" line="68"/>
                </scope>
                <scope line="73">
                    <declaration name="ret" type="Retention" line="74"/>
                </scope>
            </method>
            <javadoc line="79">
                Returns the type that must be returned by the invocation handler
                  of a dynamic proxy in order to have the dynamic proxy return
                  the specified type (which is assumed to be a legal member type
                  for an annotation).                
            </javadoc>
            <method name="invocationHandlerReturnType" type="Class&lt;?&gt;" line="85">
                <params>
                    <param name="type" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="96">
                Returns member types for this annotation type
                  (member name -&gt; type mapping).                
            </javadoc>
            <method name="memberTypes" type="Map&lt;String,Class&lt;?&gt;&gt;" line="100"/>
            <javadoc line="103">
                Returns members of this annotation type
                  (member name -&gt; associated Method object mapping).                
            </javadoc>
            <method name="members" type="Map&lt;String,Method&gt;" line="107"/>
            <javadoc line="110">
                Returns the default values for this annotation type
                  (Member name -&gt; default value mapping).                
            </javadoc>
            <method name="memberDefaults" type="Map&lt;String,Object&gt;" line="114"/>
            <javadoc line="117">
                Returns the retention policy for this annotation type.                
            </javadoc>
            <method name="retention" type="RetentionPolicy" line="120"/>
            <javadoc line="123">
                Returns true if this this annotation type is inherited.                
            </javadoc>
            <method name="isInherited" type="boolean" line="126"/>
            <javadoc line="129">
                For debugging.                
            </javadoc>
            <method name="toString" type="String" line="132">
                <declaration name="s" type="StringBuffer" line="133"/>
            </method>
        </class>
    </source>