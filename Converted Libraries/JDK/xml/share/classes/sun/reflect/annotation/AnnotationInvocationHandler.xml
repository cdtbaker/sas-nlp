<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.annotation">
        <import package="java.lang.annotation"/>
        <import package="java.lang.reflect"/>
        <import package="java.io.Serializable"/>
        <import package="java.util"/>
        <import package="java.lang.annotation"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="AnnotationInvocationHandler" line="9">
            <implements interface="InvocationHandler"/>
            <implements interface="Serializable"/>
            <javadoc line="9">
                InvocationHandler for dynamic proxy implementation of Annotation.                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="type" type="Class&amp;lt;? extends Annotation&amp;gt;" line="15"/>
            <declaration name="memberValues" type="Map&amp;lt;String,Object&amp;gt;" line="16"/>
            <method name="AnnotationInvocationHandler" type="constructor" line="17">
                <params>
                    <param name="type" type="Class&lt;? extends Annotation&gt;"/>
                    <param name="memberValues" type="Map&lt;String,Object&gt;"/>
                </params>
            </method>
            <method name="invoke" type="Object" line="21">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
            </method>
            <javadoc line="35">
                This method, which clones its array argument, would not be necessary
                  if Cloneable had a public clone method.                
            </javadoc>
            <method name="cloneArray" type="Object" line="39">
                <params>
                    <param name="array" type="Object"/>
                </params>
                <declaration name="type" type="Class&amp;lt;?&amp;gt;" line="40"/>
                <scope line="41">
                    <declaration name="byteArray" type="byte[]" line="42"/>
                </scope>
                <scope line="45">
                    <declaration name="charArray" type="char[]" line="46"/>
                </scope>
                <scope line="49">
                    <declaration name="doubleArray" type="double[]" line="50"/>
                </scope>
                <scope line="53">
                    <declaration name="floatArray" type="float[]" line="54"/>
                </scope>
                <scope line="57">
                    <declaration name="intArray" type="int[]" line="58"/>
                </scope>
                <scope line="61">
                    <declaration name="longArray" type="long[]" line="62"/>
                </scope>
                <scope line="65">
                    <declaration name="shortArray" type="short[]" line="66"/>
                </scope>
                <scope line="69">
                    <declaration name="booleanArray" type="boolean[]" line="70"/>
                </scope>
                <declaration name="objectArray" type="Object[]" line="73"/>
            </method>
            <javadoc line="76">
                Implementation of dynamicProxy.toString()                
            </javadoc>
            <method name="toStringImpl" type="String" line="79">
                <declaration name="result" type="StringBuffer" line="80"/>
                <declaration name="firstMember" type="boolean" line="84"/>
                <scope line="85"/>
            </method>
            <javadoc line="95">
                Translates a member value (in &quot;dynamic proxy return form&quot;) into a string                
            </javadoc>
            <method name="memberValueToString" type="String" line="98">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="type" type="Class&amp;lt;?&amp;gt;" line="99"/>
            </method>
            <javadoc line="111">
                Implementation of dynamicProxy.equals(Object o)                
            </javadoc>
            <method name="equalsImpl" type="Boolean" line="114">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="117">
                    <declaration name="member" type="String" line="118"/>
                    <declaration name="ourValue" type="Object" line="119"/>
                    <declaration name="hisValue" type="Object" line="120"/>
                    <declaration name="hisHandler" type="AnnotationInvocationHandler" line="121"/>
                    <scope line="122"/>
                    <scope line="125">
                        <scope line="126"/>
                        <scope line="129"/>
                        <scope line="132"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="140">
                Returns an object&apos;s invocation handler if that object is a dynamic
                  proxy with a handler of type AnnotationInvocationHandler.
                  Returns null otherwise.                
            </javadoc>
            <method name="asOneOfUs" type="AnnotationInvocationHandler" line="145">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="146">
                    <declaration name="handler" type="InvocationHandler" line="147"/>
                </scope>
            </method>
            <javadoc line="152">
                Returns true iff the two member values in &quot;dynamic proxy return form&quot;
                  are equal using the appropriate equality function depending on the
                  member type.  The two values will be of the same type unless one of
                  the containing annotations is ill-formed.  If one of the containing
                  annotations is ill-formed, this method will return false unless the
                  two members are identical object references.                
            </javadoc>
            <method name="memberValueEquals" type="boolean" line="160">
                <params>
                    <param name="v1" type="Object"/>
                    <param name="v2" type="Object"/>
                </params>
            </method>
            <javadoc line="175">
                Returns the member methods for our annotation type.  These are
                  obtained lazily and cached, as they&apos;re expensive to obtain
                  and we only need them if our equals method is invoked (which should
                  be rare).                
            </javadoc>
            <method name="getMemberMethods" type="Method[]" line="181">
                <scope line="182">
                    <anonymous_class line="183">
                        <method name="run" type="Method[]" line="184">
                            <declaration name="mm" type="Method[]" line="185"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <declaration name="memberMethods" type="Method[]" line="194"/>
            <javadoc line="195">
                Implementation of dynamicProxy.hashCode()                
            </javadoc>
            <method name="hashCodeImpl" type="int" line="198">
                <declaration name="result" type="int" line="199"/>
                <scope line="200"/>
            </method>
            <javadoc line="205">
                Computes hashCode of a member value (in &quot;dynamic proxy return form&quot;)                
            </javadoc>
            <method name="memberValueHashCode" type="int" line="208">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="type" type="Class&amp;lt;?&amp;gt;" line="209"/>
            </method>
            <method name="readObject" type="void" line="221">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <declaration name="annotationType" type="AnnotationType" line="223"/>
                <scope line="224"/>
                <scope line="227"/>
                <declaration name="memberTypes" type="Map&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt;" line="230"/>
                <scope line="231">
                    <declaration name="name" type="String" line="232"/>
                    <declaration name="memberType" type="Class&amp;lt;?&amp;gt;" line="233"/>
                    <scope line="234">
                        <declaration name="value" type="Object" line="235"/>
                        <scope line="236"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>