<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.annotation">
        <import package="java.lang.annotation"/>
        <import package="java.lang.reflect"/>
        <import package="java.io.Serializable"/>
        <import package="java.util"/>
        <import package="java.lang.annotation"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="AnnotationInvocationHandler" line="36">
            <implements interface="InvocationHandler"/>
            <implements interface="Serializable"/>
            <javadoc line="36">
                InvocationHandler for dynamic proxy implementation of Annotation.                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="type" type="Class&lt;? extends Annotation&gt;" line="43"/>
            <declaration name="memberValues" type="Map&lt;String,Object&gt;" line="44"/>
            <method name="AnnotationInvocationHandler" type="constructor" line="46">
                <params>
                    <param name="type" type="Class<? extends Annotation>"/>
                    <param name="memberValues" type="Map<String,Object>"/>
                </params>
            </method>
            <method name="invoke" type="Object" line="51">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
                <comment line="55">
                    Handle Object and Annotation methods                    
                </comment>
                <comment line="67">
                    Handle annotation member accessors                    
                </comment>
                <declaration name="member" type="String" line="52"/>
                <declaration name="paramTypes" type="Class&lt;?&gt;[]" line="53"/>
                <declaration name="result" type="Object" line="68"/>
            </method>
            <javadoc line="82">
                This method, which clones its array argument, would not be necessary
                  if Cloneable had a public clone method.                
            </javadoc>
            <method name="cloneArray" type="Object" line="86">
                <params>
                    <param name="array" type="Object"/>
                </params>
                <declaration name="type" type="Class&lt;?&gt;" line="87"/>
                <scope line="89">
                    <declaration name="byteArray" type="byte[]" line="90"/>
                </scope>
                <scope line="93">
                    <declaration name="charArray" type="char[]" line="94"/>
                </scope>
                <scope line="97">
                    <declaration name="doubleArray" type="double[]" line="98"/>
                </scope>
                <scope line="101">
                    <declaration name="floatArray" type="float[]" line="102"/>
                </scope>
                <scope line="105">
                    <declaration name="intArray" type="int[]" line="106"/>
                </scope>
                <scope line="109">
                    <declaration name="longArray" type="long[]" line="110"/>
                </scope>
                <scope line="113">
                    <declaration name="shortArray" type="short[]" line="114"/>
                </scope>
                <scope line="117">
                    <declaration name="booleanArray" type="boolean[]" line="118"/>
                </scope>
                <declaration name="objectArray" type="Object[]" line="122"/>
            </method>
            <javadoc line="127">
                Implementation of dynamicProxy.toString()                
            </javadoc>
            <method name="toStringImpl" type="String" line="130">
                <declaration name="result" type="StringBuffer" line="131"/>
                <declaration name="firstMember" type="boolean" line="135"/>
                <scope line="136"/>
            </method>
            <javadoc line="150">
                Translates a member value (in &quot;dynamic proxy return form&quot;) into a string                
            </javadoc>
            <method name="memberValueToString" type="String" line="153">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <comment line="155">
                    primitive, string, class, enum const,                    
                </comment>
                <comment line="156">
                    or annotation                    
                </comment>
                <declaration name="type" type="Class&lt;?&gt;" line="154"/>
            </method>
            <javadoc line="178">
                Implementation of dynamicProxy.equals(Object o)                
            </javadoc>
            <method name="equalsImpl" type="Boolean" line="181">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="187">
                    <declaration name="member" type="String" line="188"/>
                    <declaration name="ourValue" type="Object" line="189"/>
                    <declaration name="hisValue" type="Object" line="190"/>
                    <declaration name="hisHandler" type="AnnotationInvocationHandler" line="191"/>
                    <scope line="192"/>
                    <scope line="194">
                        <scope line="195"/>
                        <scope line="197"/>
                        <scope line="199"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="209">
                Returns an object&apos;s invocation handler if that object is a dynamic
                  proxy with a handler of type AnnotationInvocationHandler.
                  Returns null otherwise.                
            </javadoc>
            <method name="asOneOfUs" type="AnnotationInvocationHandler" line="214">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="215">
                    <declaration name="handler" type="InvocationHandler" line="216"/>
                </scope>
            </method>
            <javadoc line="223">
                Returns true iff the two member values in &quot;dynamic proxy return form&quot;
                  are equal using the appropriate equality function depending on the
                  member type.  The two values will be of the same type unless one of
                  the containing annotations is ill-formed.  If one of the containing
                  annotations is ill-formed, this method will return false unless the
                  two members are identical object references.                
            </javadoc>
            <method name="memberValueEquals" type="boolean" line="231">
                <params>
                    <param name="v1" type="Object"/>
                    <param name="v2" type="Object"/>
                </params>
                <comment line="234">
                    Check for primitive, string, class, enum const, annotation,                    
                </comment>
                <comment line="235">
                    or ExceptionProxy                    
                </comment>
                <comment line="239">
                    Check for array of string, class, enum const, annotation,                    
                </comment>
                <comment line="240">
                    or ExceptionProxy                    
                </comment>
                <comment line="244">
                    Check for ill formed annotation(s)                    
                </comment>
                <comment line="248">
                    Deal with array of primitives                    
                </comment>
                <declaration name="type" type="Class&lt;?&gt;" line="232"/>
            </method>
            <javadoc line="267">
                Returns the member methods for our annotation type.  These are
                  obtained lazily and cached, as they&apos;re expensive to obtain
                  and we only need them if our equals method is invoked (which should
                  be rare).                
            </javadoc>
            <method name="getMemberMethods" type="Method[]" line="273">
                <scope line="274">
                    <anonymous_class line="276">
                        <method name="run" type="Method[]" line="277">
                            <declaration name="mm" type="Method[]" line="278"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <declaration name="memberMethods" type="Method[]" line="286"/>
            <javadoc line="288">
                Implementation of dynamicProxy.hashCode()                
            </javadoc>
            <method name="hashCodeImpl" type="int" line="291">
                <declaration name="result" type="int" line="292"/>
                <scope line="293"/>
            </method>
            <javadoc line="300">
                Computes hashCode of a member value (in &quot;dynamic proxy return form&quot;)                
            </javadoc>
            <method name="memberValueHashCode" type="int" line="303">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <comment line="305">
                    primitive, string, class, enum const,                    
                </comment>
                <comment line="306">
                    or annotation                    
                </comment>
                <declaration name="type" type="Class&lt;?&gt;" line="304"/>
            </method>
            <method name="readObject" type="void" line="329">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="333">
                    Check to make sure that types have not evolved incompatibly                    
                </comment>
                <comment line="339">
                    Class is no longer an annotation type; all bets are off                    
                </comment>
                <comment line="348">
                    i.e. member still exists                    
                </comment>
                <declaration name="annotationType" type="AnnotationType" line="335"/>
                <scope line="336"/>
                <scope line="338"/>
                <declaration name="memberTypes" type="Map&lt;String,Class&lt;?&gt;&gt;" line="343"/>
                <scope line="345">
                    <declaration name="name" type="String" line="346"/>
                    <declaration name="memberType" type="Class&lt;?&gt;" line="347"/>
                    <scope line="348">
                        <declaration name="value" type="Object" line="349"/>
                        <scope line="351"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>