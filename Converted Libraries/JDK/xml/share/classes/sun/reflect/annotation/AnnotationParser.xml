<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.annotation">
        <import package="java.lang.annotation"/>
        <import package="java.util"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.BufferUnderflowException"/>
        <import package="java.lang.reflect"/>
        <import package="sun.reflect.ConstantPool"/>
        <import package="sun.reflect.generics.parser.SignatureParser"/>
        <import package="sun.reflect.generics.tree.TypeSignature"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.factory.CoreReflectionFactory"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <import package="sun.reflect.generics.scope.ClassScope"/>
        <class name="AnnotationParser" line="14">
            <javadoc line="14">
                Parser for Java programming language annotations.  Translates
                  annotation byte streams emitted by compiler into annotation objects.                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="21">
                Parses the annotations described by the specified byte array.
                  resolving constant references in the specified constant pool.
                  The array must contain an array of annotations as described
                  in the RuntimeVisibleAnnotations_attribute:
                  u2 num_annotations;
                  annotation annotations[num_annotations];                
                <throws>
                    AnnotationFormatError if an annotation is found to be
                      malformed.                    
                </throws>
            </javadoc>
            <method name="parseAnnotations" type="Map&lt;Class&lt;? extends Annotation&gt;,Annotation&gt;" line="31">
                <params>
                    <param name="rawAnnotations" type="byte[]"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <scope line="33"/>
                <scope line="36"/>
                <scope line="39"/>
            </method>
            <method name="parseAnnotations2" type="Map&lt;Class&lt;? extends Annotation&gt;,Annotation&gt;" line="43">
                <params>
                    <param name="rawAnnotations" type="byte[]"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="result" type="Map&amp;lt;Class&amp;lt;? extends Annotation&amp;gt;,Annotation&amp;gt;" line="44"/>
                <declaration name="buf" type="ByteBuffer" line="45"/>
                <declaration name="numAnnotations" type="int" line="46"/>
                <scope line="47">
                    <declaration name="a" type="Annotation" line="48"/>
                    <scope line="49">
                        <declaration name="klass" type="Class&amp;lt;? extends Annotation&amp;gt;" line="50"/>
                        <declaration name="type" type="AnnotationType" line="51"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="57">
                Parses the parameter annotations described by the specified byte array.
                  resolving constant references in the specified constant pool.
                  The array must contain an array of annotations as described
                  in the RuntimeVisibleParameterAnnotations_attribute:
                  u1 num_parameters;
                  {
                  u2 num_annotations;
                  annotation annotations[num_annotations];
                  } parameter_annotations[num_parameters];
                  Unlike parseAnnotations, rawAnnotations must not be null!
                  A null value must be handled by the caller.  This is so because
                  we cannot determine the number of parameters if rawAnnotations
                  is null.  Also, the caller should check that the number
                  of parameters indicated by the return value of this method
                  matches the actual number of method parameters.  A mismatch
                  indicates that an AnnotationFormatError should be thrown.                
                <throws>
                    AnnotationFormatError if an annotation is found to be
                      malformed.                    
                </throws>
            </javadoc>
            <method name="parseParameterAnnotations" type="Annotation[][]" line="77">
                <params>
                    <param name="rawAnnotations" type="byte[]"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <scope line="78"/>
                <scope line="81"/>
                <scope line="84"/>
            </method>
            <method name="parseParameterAnnotations2" type="Annotation[][]" line="88">
                <params>
                    <param name="rawAnnotations" type="byte[]"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="buf" type="ByteBuffer" line="89"/>
                <declaration name="numParameters" type="int" line="90"/>
                <declaration name="result" type="Annotation[][]" line="91"/>
                <scope line="92">
                    <declaration name="numAnnotations" type="int" line="93"/>
                    <declaration name="annotations" type="List&amp;lt;Annotation&amp;gt;" line="94"/>
                    <scope line="95">
                        <declaration name="a" type="Annotation" line="96"/>
                        <scope line="97">
                            <declaration name="type" type="AnnotationType" line="98"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="EMPTY_ANNOTATIONS_ARRAY" type="Annotation[]" line="106"/>
            <javadoc line="107">
                Parses the annotation at the current position in the specified
                  byte buffer, resolving constant references in the specified constant
                  pool.  The cursor of the byte buffer must point to an &quot;annotation
                  structure&quot; as described in the RuntimeVisibleAnnotations_attribute:
                  annotation {
                  u2    type_index;
                  u2    num_member_value_pairs;
                  {    u2    member_name_index;
                  member_value value;
                  }    member_value_pairs[num_member_value_pairs];
                  }
                  }
                  Returns the annotation, or null if the annotation&apos;s type cannot
                  be found by the VM, or is not a valid annotation type.                
                <param>
                    exceptionOnMissingAnnotationClass if true, throw
                      TypeNotPresentException if a referenced annotation type is not
                      available at runtime                    
                </param>
            </javadoc>
            <method name="parseAnnotation" type="Annotation" line="126">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                    <param name="exceptionOnMissingAnnotationClass" type="boolean"/>
                </params>
                <declaration name="typeIndex" type="int" line="127"/>
                <declaration name="annotationClass" type="Class&amp;lt;? extends Annotation&amp;gt;" line="128"/>
                <declaration name="sig" type="String" line="129"/>
                <scope line="130">
                    <scope line="131"/>
                    <scope line="135"/>
                </scope>
                <scope line="139"/>
                <scope line="144"/>
                <declaration name="type" type="AnnotationType" line="149"/>
                <scope line="150"/>
                <scope line="153"/>
                <declaration name="memberTypes" type="Map&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt;" line="157"/>
                <declaration name="memberValues" type="Map&amp;lt;String,Object&amp;gt;" line="158"/>
                <declaration name="numMembers" type="int" line="159"/>
                <scope line="160">
                    <declaration name="memberNameIndex" type="int" line="161"/>
                    <declaration name="memberName" type="String" line="162"/>
                    <declaration name="memberType" type="Class&amp;lt;?&amp;gt;" line="163"/>
                    <scope line="164"/>
                    <scope line="167">
                        <declaration name="value" type="Object" line="168"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="175">
                Returns an annotation of the given type backed by the given
                  member -&gt; value map.                
            </javadoc>
            <method name="annotationForMap" type="Annotation" line="179">
                <params>
                    <param name="type" type="Class&lt;? extends Annotation&gt;"/>
                    <param name="memberValues" type="Map&lt;String,Object&gt;"/>
                </params>
            </method>
            <javadoc line="182">
                Parses the annotation member value at the current position in the
                  specified byte buffer, resolving constant references in the specified
                  constant pool.  The cursor of the byte buffer must point to a
                  &quot;member_value structure&quot; as described in the
                  RuntimeVisibleAnnotations_attribute:
                  member_value {
                  u1 tag;
                  union {
                  u2   const_value_index;
                  {
                  u2   type_name_index;
                  u2   const_name_index;
                  } enum_const_value;
                  u2   class_info_index;
                  annotation annotation_value;
                  {
                  u2    num_values;
                  member_value values[num_values];
                  } array_value;
                  } value;
                  }
                  The member must be of the indicated type. If it is not, this
                  method returns an AnnotationTypeMismatchExceptionProxy.                
            </javadoc>
            <method name="parseMemberValue" type="Object" line="207">
                <params>
                    <param name="memberType" type="Class&lt;?&gt;"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="result" type="Object" line="208"/>
                <declaration name="tag" type="int" line="209"/>
            </method>
            <javadoc line="227">
                Parses the primitive or String annotation member value indicated by
                  the specified tag byte at the current position in the specified byte
                  buffer, resolving constant reference in the specified constant pool.
                  The cursor of the byte buffer must point to an annotation member value
                  of the type indicated by the specified tag, as described in the
                  RuntimeVisibleAnnotations_attribute:
                  u2   const_value_index;                
            </javadoc>
            <method name="parseConst" type="Object" line="236">
                <params>
                    <param name="tag" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="constIndex" type="int" line="237"/>
            </method>
            <javadoc line="261">
                Parses the Class member value at the current position in the
                  specified byte buffer, resolving constant references in the specified
                  constant pool.  The cursor of the byte buffer must point to a &quot;class
                  info index&quot; as described in the RuntimeVisibleAnnotations_attribute:
                  u2   class_info_index;                
            </javadoc>
            <method name="parseClassValue" type="Object" line="268">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="classIndex" type="int" line="269"/>
                <scope line="270">
                    <scope line="271">
                        <declaration name="sig" type="String" line="272"/>
                    </scope>
                    <scope line="275"/>
                </scope>
                <scope line="279"/>
                <scope line="282"/>
            </method>
            <method name="parseSig" type="Class&lt;?&gt;" line="286">
                <params>
                    <param name="sig" type="String"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="parser" type="SignatureParser" line="288"/>
                <declaration name="typeSig" type="TypeSignature" line="289"/>
                <declaration name="factory" type="GenericsFactory" line="290"/>
                <declaration name="reify" type="Reifier" line="291"/>
                <declaration name="result" type="Type" line="293"/>
            </method>
            <method name="toClass" type="Class&lt;?&gt;" line="296">
                <params>
                    <param name="o" type="Type"/>
                </params>
            </method>
            <javadoc line="300">
                Parses the enum constant member value at the current position in the
                  specified byte buffer, resolving constant references in the specified
                  constant pool.  The cursor of the byte buffer must point to a
                  &quot;enum_const_value structure&quot; as described in the
                  RuntimeVisibleAnnotations_attribute:
                  {
                  u2   type_name_index;
                  u2   const_name_index;
                  } enum_const_value;                
            </javadoc>
            <method name="parseEnumValue" type="Object" line="311">
                <params>
                    <param name="enumType" type="Class&lt;? extends Enum&gt;"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="typeNameIndex" type="int" line="312"/>
                <declaration name="typeName" type="String" line="313"/>
                <declaration name="constNameIndex" type="int" line="314"/>
                <declaration name="constName" type="String" line="315"/>
                <scope line="316"/>
                <scope line="319"/>
                <scope line="322"/>
                <scope line="325"/>
            </method>
            <javadoc line="329">
                Parses the array value at the current position in the specified byte
                  buffer, resolving constant references in the specified constant pool.
                  The cursor of the byte buffer must point to an array value struct
                  as specified in the RuntimeVisibleAnnotations_attribute:
                  {
                  u2    num_values;
                  member_value values[num_values];
                  } array_value;
                  If the array values do not match arrayType, an
                  AnnotationTypeMismatchExceptionProxy will be returned.                
            </javadoc>
            <method name="parseArray" type="Object" line="341">
                <params>
                    <param name="arrayType" type="Class&lt;?&gt;"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <method name="parseByteArray" type="Object" line="382">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="byte[]" line="383"/>
                <declaration name="typeMismatch" type="boolean" line="384"/>
                <declaration name="tag" type="int" line="385"/>
                <scope line="386">
                    <scope line="388">
                        <declaration name="index" type="int" line="389"/>
                    </scope>
                    <scope line="392"/>
                </scope>
            </method>
            <method name="parseCharArray" type="Object" line="399">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="char[]" line="400"/>
                <declaration name="typeMismatch" type="boolean" line="401"/>
                <declaration name="tag" type="byte" line="402"/>
                <scope line="403">
                    <scope line="405">
                        <declaration name="index" type="int" line="406"/>
                    </scope>
                    <scope line="409"/>
                </scope>
            </method>
            <method name="parseDoubleArray" type="Object" line="416">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="double[]" line="417"/>
                <declaration name="typeMismatch" type="boolean" line="418"/>
                <declaration name="tag" type="int" line="419"/>
                <scope line="420">
                    <scope line="422">
                        <declaration name="index" type="int" line="423"/>
                    </scope>
                    <scope line="426"/>
                </scope>
            </method>
            <method name="parseFloatArray" type="Object" line="433">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="float[]" line="434"/>
                <declaration name="typeMismatch" type="boolean" line="435"/>
                <declaration name="tag" type="int" line="436"/>
                <scope line="437">
                    <scope line="439">
                        <declaration name="index" type="int" line="440"/>
                    </scope>
                    <scope line="443"/>
                </scope>
            </method>
            <method name="parseIntArray" type="Object" line="450">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="int[]" line="451"/>
                <declaration name="typeMismatch" type="boolean" line="452"/>
                <declaration name="tag" type="int" line="453"/>
                <scope line="454">
                    <scope line="456">
                        <declaration name="index" type="int" line="457"/>
                    </scope>
                    <scope line="460"/>
                </scope>
            </method>
            <method name="parseLongArray" type="Object" line="467">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="long[]" line="468"/>
                <declaration name="typeMismatch" type="boolean" line="469"/>
                <declaration name="tag" type="int" line="470"/>
                <scope line="471">
                    <scope line="473">
                        <declaration name="index" type="int" line="474"/>
                    </scope>
                    <scope line="477"/>
                </scope>
            </method>
            <method name="parseShortArray" type="Object" line="484">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="short[]" line="485"/>
                <declaration name="typeMismatch" type="boolean" line="486"/>
                <declaration name="tag" type="int" line="487"/>
                <scope line="488">
                    <scope line="490">
                        <declaration name="index" type="int" line="491"/>
                    </scope>
                    <scope line="494"/>
                </scope>
            </method>
            <method name="parseBooleanArray" type="Object" line="501">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="boolean[]" line="502"/>
                <declaration name="typeMismatch" type="boolean" line="503"/>
                <declaration name="tag" type="int" line="504"/>
                <scope line="505">
                    <scope line="507">
                        <declaration name="index" type="int" line="508"/>
                    </scope>
                    <scope line="511"/>
                </scope>
            </method>
            <method name="parseStringArray" type="Object" line="518">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                </params>
                <declaration name="result" type="String[]" line="519"/>
                <declaration name="typeMismatch" type="boolean" line="520"/>
                <declaration name="tag" type="int" line="521"/>
                <scope line="522">
                    <scope line="524">
                        <declaration name="index" type="int" line="525"/>
                    </scope>
                    <scope line="528"/>
                </scope>
            </method>
            <method name="parseClassArray" type="Object" line="535">
                <params>
                    <param name="length" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="result" type="Object[]" line="536"/>
                <declaration name="typeMismatch" type="boolean" line="537"/>
                <declaration name="tag" type="int" line="538"/>
                <scope line="539">
                    <scope line="541"/>
                    <scope line="544"/>
                </scope>
            </method>
            <method name="parseEnumArray" type="Object" line="551">
                <params>
                    <param name="length" type="int"/>
                    <param name="enumType" type="Class&lt;? extends Enum&gt;"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="result" type="Object[]" line="552"/>
                <declaration name="typeMismatch" type="boolean" line="553"/>
                <declaration name="tag" type="int" line="554"/>
                <scope line="555">
                    <scope line="557"/>
                    <scope line="560"/>
                </scope>
            </method>
            <method name="parseAnnotationArray" type="Object" line="567">
                <params>
                    <param name="length" type="int"/>
                    <param name="annotationType" type="Class&lt;? extends Annotation&gt;"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="constPool" type="ConstantPool"/>
                    <param name="container" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="result" type="Object[]" line="568"/>
                <declaration name="typeMismatch" type="boolean" line="569"/>
                <declaration name="tag" type="int" line="570"/>
                <scope line="571">
                    <scope line="573"/>
                    <scope line="576"/>
                </scope>
            </method>
            <javadoc line="583">
                Return an appropriate exception proxy for a mismatching array
                  annotation where the erroneous array has the specified tag.                
            </javadoc>
            <method name="exceptionProxy" type="ExceptionProxy" line="587">
                <params>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="590">
                Skips the annotation at the current position in the specified
                  byte buffer.  The cursor of the byte buffer must point to
                  an &quot;annotation structure&quot; OR two bytes into an annotation
                  structure (i.e., after the type index).                
                <parameter>
                    complete true if the byte buffer points to the beginning
                      of an annotation structure (rather than two bytes in).                    
                </parameter>
            </javadoc>
            <method name="skipAnnotation" type="void" line="598">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="complete" type="boolean"/>
                </params>
                <declaration name="numMembers" type="int" line="600"/>
                <scope line="601"/>
            </method>
            <javadoc line="606">
                Skips the annotation member value at the current position in the
                  specified byte buffer.  The cursor of the byte buffer must point to a
                  &quot;member_value structure.&quot;                
            </javadoc>
            <method name="skipMemberValue" type="void" line="611">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
                <declaration name="tag" type="int" line="612"/>
            </method>
            <javadoc line="615">
                Skips the annotation member value at the current position in the
                  specified byte buffer.  The cursor of the byte buffer must point
                  immediately after the tag in a &quot;member_value structure.&quot;                
            </javadoc>
            <method name="skipMemberValue" type="void" line="620">
                <params>
                    <param name="tag" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="635">
                Skips the array value at the current position in the specified byte
                  buffer.  The cursor of the byte buffer must point to an array value
                  struct.                
            </javadoc>
            <method name="skipArray" type="void" line="640">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
                <declaration name="length" type="int" line="641"/>
            </method>
            <declaration name="EMPTY_ANNOTATION_ARRAY" type="Annotation[]" line="644"/>
            <method name="toArray" type="Annotation[]" line="645">
                <params>
                    <param name="annotations" type="Map&lt;Class&lt;? extends Annotation&gt;,Annotation&gt;"/>
                </params>
            </method>
        </class>
    </source>