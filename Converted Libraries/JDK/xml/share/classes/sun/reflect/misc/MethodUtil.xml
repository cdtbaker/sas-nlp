<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.misc">
        <import package="java.security.AllPermission"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.SecureClassLoader"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.CodeSource"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLConnection"/>
        <import package="java.net.HttpURLConnection"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.AccessibleObject"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.misc.IOUtils"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="Trampoline" line="52">
            <comment line="83">
                Discover the public methods on public classes
                 and interfaces accessible to any caller by calling
                 Class.getMethods() and walking towards Object until
                 we&apos;re done.                
            </comment>
            <comment line="106">
                Process the immediate interfaces of this class or interface.                
            </comment>
            <comment line="121">
                Process the methods in this class or interface                
            </comment>
            <comment line="254">
                Bounce through the trampoline.                
            </comment>
            <comment line="348">
                Define the proxy classes                
            </comment>
            <comment line="361">
                Returns the contents of the specified URL as an array of bytes.                
            </comment>
            <method name="invoke" type="Object" line="54">
                <params>
                    <param name="m" type="Method"/>
                    <param name="obj" type="Object"/>
                    <param name="params" type="Object[]"/>
                </params>
            </method>
        </class>
        <class name="MethodUtil" line="62">
            <extends class="SecureClassLoader"/>
            <comment line="83">
                Discover the public methods on public classes
                 and interfaces accessible to any caller by calling
                 Class.getMethods() and walking towards Object until
                 we&apos;re done.                
            </comment>
            <comment line="106">
                Process the immediate interfaces of this class or interface.                
            </comment>
            <comment line="121">
                Process the methods in this class or interface                
            </comment>
            <comment line="254">
                Bounce through the trampoline.                
            </comment>
            <comment line="348">
                Define the proxy classes                
            </comment>
            <comment line="361">
                Returns the contents of the specified URL as an array of bytes.                
            </comment>
            <declaration name="MISC_PKG" type="String" line="63"/>
            <declaration name="TRAMPOLINE" type="String" line="64"/>
            <declaration name="bounce" type="Method" line="65"/>
            <method name="MethodUtil" type="constructor" line="67"/>
            <method name="getMethod" type="Method" line="72">
                <params>
                    <param name="cls" type="Class<?>"/>
                    <param name="name" type="String"/>
                    <param name="args" type="Class[]"/>
                </params>
            </method>
            <method name="getMethods" type="Method[]" line="77">
                <params>
                    <param name="cls" type="Class"/>
                </params>
            </method>
            <method name="getPublicMethods" type="Method[]" line="88">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <comment line="90">
                    compatibility for update release                    
                </comment>
                <scope line="90"/>
                <declaration name="sigs" type="Map&lt;Signature,Method&gt;" line="93"/>
                <scope line="94">
                    <declaration name="done" type="boolean" line="95"/>
                    <scope line="96"/>
                </scope>
            </method>
            <method name="getInterfaceMethods" type="void" line="109">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="sigs" type="Map<Signature,Method>"/>
                </params>
                <declaration name="intfs" type="Class[]" line="110"/>
                <scope line="111">
                    <declaration name="intf" type="Class" line="112"/>
                    <declaration name="done" type="boolean" line="113"/>
                    <scope line="114"/>
                </scope>
            </method>
            <method name="getInternalPublicMethods" type="boolean" line="125">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="sigs" type="Map<Signature,Method>"/>
                </params>
                <comment line="129">
                    This class or interface is non-public so we
                     can&apos;t use any of it&apos;s methods. Go back and
                     try again with a superclass or superinterface.                    
                </comment>
                <comment line="146">
                    Check for inherited methods with non-public
                     declaring classes. They might override and hide
                     methods from their superclasses or
                     superinterfaces.                    
                </comment>
                <comment line="162">
                    We&apos;re done. Spray all the methods into
                     the list and then we&apos;re out of here.                    
                </comment>
                <comment line="170">
                    Simulate cls.getDeclaredMethods() by
                     stripping away inherited methods.                    
                </comment>
                <declaration name="methods" type="Method[]" line="126"/>
                <scope line="127">
                    <scope line="133"/>
                    <scope line="136"/>
                </scope>
                <scope line="141"/>
                <declaration name="done" type="boolean" line="151"/>
                <scope line="152">
                    <declaration name="dc" type="Class" line="153"/>
                    <scope line="154"/>
                </scope>
                <scope line="160">
                    <scope line="165"/>
                </scope>
                <scope line="168">
                    <scope line="173">
                        <declaration name="dc" type="Class" line="174"/>
                        <scope line="175"/>
                    </scope>
                </scope>
            </method>
            <method name="addMethod" type="void" line="183">
                <params>
                    <param name="sigs" type="Map<Signature,Method>"/>
                    <param name="method" type="Method"/>
                </params>
                <comment line="189">
                    Superclasses beat interfaces.                    
                </comment>
                <declaration name="signature" type="Signature" line="184"/>
                <scope line="185"/>
                <scope line="187">
                    <declaration name="old" type="Method" line="191"/>
                    <scope line="192"/>
                </scope>
            </method>
            <class name="Signature" line="198">
                <javadoc line="198">
                    A class that represents the unique elements of a method that will be a
                      key in the method cache.                    
                </javadoc>
                <declaration name="methodName" type="String" line="203"/>
                <declaration name="argClasses" type="Class[]" line="204"/>
                <declaration name="hashCode" type="int" line="206"/>
                <method name="Signature" type="constructor" line="208">
                    <params>
                        <param name="m" type="Method"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="213">
                    <params>
                        <param name="o2" type="Object"/>
                    </params>
                    <scope line="214"/>
                    <declaration name="that" type="Signature" line="217"/>
                    <scope line="218"/>
                    <scope line="221"/>
                    <scope line="224">
                        <scope line="225"/>
                    </scope>
                </method>
                <javadoc line="232">
                    Hash code computed using algorithm suggested in
                      Effective Java, Item 8.                    
                </javadoc>
                <method name="hashCode" type="int" line="236">
                    <scope line="237">
                        <declaration name="result" type="int" line="238"/>
                        <scope line="240">
                            <scope line="241"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="invoke" type="Object" line="257">
                <params>
                    <param name="m" type="Method"/>
                    <param name="obj" type="Object"/>
                    <param name="params" type="Object[]"/>
                </params>
                <comment line="280">
                    this can&apos;t happen                    
                </comment>
                <scope line="262"/>
                <scope line="264">
                    <declaration name="t" type="Throwable" line="265"/>
                    <scope line="267"/>
                    <scope line="269"/>
                    <scope line="271"/>
                    <scope line="273"/>
                    <scope line="275"/>
                </scope>
                <scope line="278"/>
            </method>
            <method name="getTrampoline" type="Method" line="284">
                <scope line="285">
                    <anonymous_class line="287">
                        <method name="run" type="Method" line="288">
                            <declaration name="t" type="Class&lt;?&gt;" line="289"/>
                            <declaration name="types" type="Class[]" line="290"/>
                            <declaration name="b" type="Method" line="293"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="298"/>
            </method>
            <method name="loadClass" type="Class" line="306">
                <params>
                    <param name="name" type="String"/>
                    <param name="resolve" type="boolean"/>
                </params>
                <comment line="308">
                    First, check if the class has already been loaded                    
                </comment>
                <comment line="315">
                    Fall through ...                    
                </comment>
                <declaration name="c" type="Class" line="309"/>
                <scope line="310">
                    <scope line="311"/>
                    <scope line="313"/>
                    <scope line="316"/>
                </scope>
                <scope line="320"/>
            </method>
            <method name="findClass" type="Class" line="329">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="330"/>
                <declaration name="path" type="String" line="333"/>
                <declaration name="res" type="URL" line="334"/>
                <scope line="335">
                    <scope line="336"/>
                    <scope line="338"/>
                </scope>
                <scope line="341"/>
            </method>
            <method name="defineClass" type="Class" line="350">
                <params>
                    <param name="name" type="String"/>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="b" type="byte[]" line="351"/>
                <declaration name="cs" type="CodeSource" line="352"/>
                <scope line="353"/>
            </method>
            <method name="getBytes" type="byte[]" line="363">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="uc" type="URLConnection" line="364"/>
                <scope line="365">
                    <declaration name="huc" type="java.net.HttpURLConnection" line="366"/>
                    <declaration name="code" type="int" line="367"/>
                    <scope line="368"/>
                </scope>
                <declaration name="len" type="int" line="372"/>
                <declaration name="in" type="InputStream" line="373"/>
                <declaration name="b" type="byte[]" line="375"/>
                <scope line="376"/>
                <scope line="378"/>
            </method>
            <method name="getPermissions" type="PermissionCollection" line="386">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
                <declaration name="perms" type="PermissionCollection" line="387"/>
            </method>
            <method name="getTrampolineClass" type="Class" line="392">
                <scope line="393"/>
                <scope line="395"/>
            </method>
        </class>
    </source>