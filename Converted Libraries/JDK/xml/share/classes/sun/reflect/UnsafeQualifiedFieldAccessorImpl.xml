<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="sun.misc.Unsafe"/>
        <class name="UnsafeQualifiedFieldAccessorImpl" line="32">
            <extends class="UnsafeFieldAccessorImpl"/>
            <javadoc line="32">
                Base class for sun.misc.Unsafe-based FieldAccessors for fields with
                  final or volatile qualifiers. These differ from unqualified
                  versions in that (1) they check for read-only status (2) they use
                  the volatile forms of Unsafe get/put methods. (When accessed via
                  reflection, finals act as slightly &quot;lighter&quot; forms of volatiles. So
                  the volatile forms are heavier than necessary in terms of
                  underlying reordering rules and memory barriers, but preserve
                  correctness.)                
            </javadoc>
            <declaration name="isReadOnly" type="boolean" line="46"/>
            <method name="UnsafeQualifiedFieldAccessorImpl" type="constructor" line="48">
                <params>
                    <param name="field" type="Field"/>
                    <param name="isReadOnly" type="boolean"/>
                </params>
            </method>
        </class>
    </source>