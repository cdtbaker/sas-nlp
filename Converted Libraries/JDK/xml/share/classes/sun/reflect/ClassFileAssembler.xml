<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <class name="ClassFileAssembler" line="28">
            <comment line="68">
                Support for labels; package-private                
            </comment>
            <comment line="159">
                ----------------------------------------------------------------------
                 Opcodes. Keeps track of maximum stack and locals. Make a new
                 assembler for each piece of assembled code, then append the
                 result to the previous assembler&apos;s class file.                
            </comment>
            <comment line="205">
                /////////////
                 Constants 
                /                
            </comment>
            <comment line="226">
                ///////////////////////////////////
                 Local variable loads and stores 
                /                
            </comment>
            <comment line="387">
                //////////////////////
                 Stack manipulation                
            </comment>
            <comment line="410">
                /////////////////////////////
                 Widening conversions only 
                /                
            </comment>
            <comment line="438">
                ////////////////
                 Control flow                
            </comment>
            <comment line="518">
                ///////////////////////
                 Return instructions 
                /                
            </comment>
            <comment line="552">
                ////////////////////
                 Field operations                
            </comment>
            <comment line="580">
                //////////////////////
                 Method invocations                
            </comment>
            <comment line="631">
                ////////////////
                 Array length                
            </comment>
            <comment line="639">
                ///////
                 New 
                /                
            </comment>
            <comment line="649">
                //////////
                 Athrow                
            </comment>
            <comment line="658">
                ////////////////////////////
                 Checkcast and instanceof                
            </comment>
            <implements interface="ClassFileConstants"/>
            <declaration name="vec" type="ByteVector" line="29"/>
            <declaration name="cpIdx" type="short" line="30"/>
            <method name="ClassFileAssembler" type="constructor" line="32"/>
            <method name="ClassFileAssembler" type="constructor" line="36">
                <params>
                    <param name="vec" type="ByteVector"/>
                </params>
            </method>
            <method name="getData" type="ByteVector" line="40"/>
            <javadoc line="44">
                Length in bytes                
            </javadoc>
            <method name="getLength" type="short" line="45"/>
            <method name="emitMagicAndVersion" type="void" line="49"/>
            <method name="emitInt" type="void" line="55">
                <params>
                    <param name="val" type="int"/>
                </params>
            </method>
            <method name="emitShort" type="void" line="62">
                <params>
                    <param name="val" type="short"/>
                </params>
            </method>
            <method name="emitShort" type="void" line="68">
                <params>
                    <param name="bci" type="short"/>
                    <param name="val" type="short"/>
                </params>
            </method>
            <method name="emitByte" type="void" line="73">
                <params>
                    <param name="val" type="byte"/>
                </params>
            </method>
            <method name="append" type="void" line="77">
                <params>
                    <param name="asm" type="ClassFileAssembler"/>
                </params>
            </method>
            <method name="append" type="void" line="81">
                <params>
                    <param name="vec" type="ByteVector"/>
                </params>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Keeps track of the current (one-based) constant pool index;
                  incremented after emitting one of the following constant pool
                  entries. Can fetch the current constant pool index for use in
                  later entries.  Index points at the last valid constant pool
                  entry; initially invalid. It is illegal to fetch the constant
                  pool index before emitting at least one constant pool entry.                
            </javadoc>
            <method name="cpi" type="short" line="93">
                <scope line="94"/>
            </method>
            <method name="emitConstantPoolUTF8" type="void" line="100">
                <params>
                    <param name="str" type="String"/>
                </params>
                <comment line="102">
                    NOTE: can not use str.getBytes(&quot;UTF-8&quot;) here because of
                     bootstrapping issues with the character set converters.                    
                </comment>
                <declaration name="bytes" type="byte[]" line="103"/>
                <scope line="106"/>
            </method>
            <method name="emitConstantPoolClass" type="void" line="112">
                <params>
                    <param name="index" type="short"/>
                </params>
            </method>
            <method name="emitConstantPoolNameAndType" type="void" line="118">
                <params>
                    <param name="nameIndex" type="short"/>
                    <param name="typeIndex" type="short"/>
                </params>
            </method>
            <method name="emitConstantPoolFieldref" type="void" line="127">
                <params>
                    <param name="classIndex" type="short"/>
                    <param name="nameAndTypeIndex" type="short"/>
                </params>
            </method>
            <method name="emitConstantPoolMethodref" type="void" line="136">
                <params>
                    <param name="classIndex" type="short"/>
                    <param name="nameAndTypeIndex" type="short"/>
                </params>
            </method>
            <method name="emitConstantPoolInterfaceMethodref" type="void" line="145">
                <params>
                    <param name="classIndex" type="short"/>
                    <param name="nameAndTypeIndex" type="short"/>
                </params>
            </method>
            <method name="emitConstantPoolString" type="void" line="152">
                <params>
                    <param name="utf8Index" type="short"/>
                </params>
            </method>
            <declaration name="stack" type="int" line="164"/>
            <declaration name="maxStack" type="int" line="165"/>
            <declaration name="maxLocals" type="int" line="166"/>
            <method name="incStack" type="void" line="168"/>
            <method name="decStack" type="void" line="172"/>
            <method name="getMaxStack" type="short" line="176"/>
            <method name="getMaxLocals" type="short" line="180"/>
            <javadoc line="184">
                It&apos;s necessary to be able to specify the number of arguments at
                  the beginning of the method (which translates to the initial
                  value of max locals)                
            </javadoc>
            <method name="setMaxLocals" type="void" line="187">
                <params>
                    <param name="maxLocals" type="int"/>
                </params>
            </method>
            <javadoc line="191">
                Needed to do flow control. Returns current stack depth.                
            </javadoc>
            <method name="getStack" type="int" line="192"/>
            <javadoc line="196">
                Needed to do flow control.                
            </javadoc>
            <method name="setStack" type="void" line="197">
                <params>
                    <param name="value" type="int"/>
                </params>
                <scope line="199"/>
            </method>
            <method name="opc_aconst_null" type="void" line="208"/>
            <method name="opc_sipush" type="void" line="213">
                <params>
                    <param name="constant" type="short"/>
                </params>
            </method>
            <method name="opc_ldc" type="void" line="219">
                <params>
                    <param name="cpIdx" type="byte"/>
                </params>
            </method>
            <method name="opc_iload_0" type="void" line="229"/>
            <method name="opc_iload_1" type="void" line="235"/>
            <method name="opc_iload_2" type="void" line="241"/>
            <method name="opc_iload_3" type="void" line="247"/>
            <method name="opc_lload_0" type="void" line="253"/>
            <method name="opc_lload_1" type="void" line="260"/>
            <method name="opc_lload_2" type="void" line="267"/>
            <method name="opc_lload_3" type="void" line="274"/>
            <method name="opc_fload_0" type="void" line="281"/>
            <method name="opc_fload_1" type="void" line="287"/>
            <method name="opc_fload_2" type="void" line="293"/>
            <method name="opc_fload_3" type="void" line="299"/>
            <method name="opc_dload_0" type="void" line="305"/>
            <method name="opc_dload_1" type="void" line="312"/>
            <method name="opc_dload_2" type="void" line="319"/>
            <method name="opc_dload_3" type="void" line="326"/>
            <method name="opc_aload_0" type="void" line="333"/>
            <method name="opc_aload_1" type="void" line="339"/>
            <method name="opc_aload_2" type="void" line="345"/>
            <method name="opc_aload_3" type="void" line="351"/>
            <method name="opc_aaload" type="void" line="357"/>
            <method name="opc_astore_0" type="void" line="362"/>
            <method name="opc_astore_1" type="void" line="368"/>
            <method name="opc_astore_2" type="void" line="374"/>
            <method name="opc_astore_3" type="void" line="380"/>
            <method name="opc_pop" type="void" line="390"/>
            <method name="opc_dup" type="void" line="395"/>
            <method name="opc_dup_x1" type="void" line="400"/>
            <method name="opc_swap" type="void" line="405"/>
            <method name="opc_i2l" type="void" line="413"/>
            <method name="opc_i2f" type="void" line="417"/>
            <method name="opc_i2d" type="void" line="421"/>
            <method name="opc_l2f" type="void" line="425"/>
            <method name="opc_l2d" type="void" line="429"/>
            <method name="opc_f2d" type="void" line="433"/>
            <method name="opc_ifeq" type="void" line="441">
                <params>
                    <param name="bciOffset" type="short"/>
                </params>
            </method>
            <javadoc line="447">
                Control flow with forward-reference BCI. Stack assumes
                  straight-through control flow.                
            </javadoc>
            <method name="opc_ifeq" type="void" line="449">
                <params>
                    <param name="l" type="Label"/>
                </params>
                <comment line="454">
                    Must be patched later                    
                </comment>
                <declaration name="instrBCI" type="short" line="450"/>
            </method>
            <method name="opc_if_icmpeq" type="void" line="456">
                <params>
                    <param name="bciOffset" type="short"/>
                </params>
            </method>
            <javadoc line="462">
                Control flow with forward-reference BCI. Stack assumes straight
                  control flow.                
            </javadoc>
            <method name="opc_if_icmpeq" type="void" line="464">
                <params>
                    <param name="l" type="Label"/>
                </params>
                <comment line="469">
                    Must be patched later                    
                </comment>
                <declaration name="instrBCI" type="short" line="465"/>
            </method>
            <method name="opc_goto" type="void" line="471">
                <params>
                    <param name="bciOffset" type="short"/>
                </params>
            </method>
            <javadoc line="476">
                Control flow with forward-reference BCI. Stack assumes straight
                  control flow.                
            </javadoc>
            <method name="opc_goto" type="void" line="478">
                <params>
                    <param name="l" type="Label"/>
                </params>
                <comment line="483">
                    Must be patched later                    
                </comment>
                <declaration name="instrBCI" type="short" line="479"/>
            </method>
            <method name="opc_ifnull" type="void" line="485">
                <params>
                    <param name="bciOffset" type="short"/>
                </params>
            </method>
            <javadoc line="491">
                Control flow with forward-reference BCI. Stack assumes straight
                  control flow.                
            </javadoc>
            <method name="opc_ifnull" type="void" line="493">
                <params>
                    <param name="l" type="Label"/>
                </params>
                <comment line="498">
                    Must be patched later                    
                </comment>
                <declaration name="instrBCI" type="short" line="494"/>
            </method>
            <method name="opc_ifnonnull" type="void" line="501">
                <params>
                    <param name="bciOffset" type="short"/>
                </params>
            </method>
            <javadoc line="507">
                Control flow with forward-reference BCI. Stack assumes straight
                  control flow.                
            </javadoc>
            <method name="opc_ifnonnull" type="void" line="509">
                <params>
                    <param name="l" type="Label"/>
                </params>
                <comment line="514">
                    Must be patched later                    
                </comment>
                <declaration name="instrBCI" type="short" line="510"/>
            </method>
            <method name="opc_ireturn" type="void" line="521"/>
            <method name="opc_lreturn" type="void" line="526"/>
            <method name="opc_freturn" type="void" line="531"/>
            <method name="opc_dreturn" type="void" line="536"/>
            <method name="opc_areturn" type="void" line="541"/>
            <method name="opc_return" type="void" line="546"/>
            <method name="opc_getstatic" type="void" line="555">
                <params>
                    <param name="fieldIndex" type="short"/>
                    <param name="fieldSizeInStackSlots" type="int"/>
                </params>
            </method>
            <method name="opc_putstatic" type="void" line="561">
                <params>
                    <param name="fieldIndex" type="short"/>
                    <param name="fieldSizeInStackSlots" type="int"/>
                </params>
            </method>
            <method name="opc_getfield" type="void" line="567">
                <params>
                    <param name="fieldIndex" type="short"/>
                    <param name="fieldSizeInStackSlots" type="int"/>
                </params>
            </method>
            <method name="opc_putfield" type="void" line="573">
                <params>
                    <param name="fieldIndex" type="short"/>
                    <param name="fieldSizeInStackSlots" type="int"/>
                </params>
            </method>
            <javadoc line="583">
                Long and double arguments and return types count as 2 arguments;
                  other values count as 1.                
            </javadoc>
            <method name="opc_invokevirtual" type="void" line="588">
                <params>
                    <param name="methodIndex" type="short"/>
                    <param name="numArgs" type="int"/>
                    <param name="numReturnValues" type="int"/>
                </params>
            </method>
            <javadoc line="594">
                Long and double arguments and return types count as 2 arguments;
                  other values count as 1.                
            </javadoc>
            <method name="opc_invokespecial" type="void" line="599">
                <params>
                    <param name="methodIndex" type="short"/>
                    <param name="numArgs" type="int"/>
                    <param name="numReturnValues" type="int"/>
                </params>
            </method>
            <javadoc line="605">
                Long and double arguments and return types count as 2 arguments;
                  other values count as 1.                
            </javadoc>
            <method name="opc_invokestatic" type="void" line="610">
                <params>
                    <param name="methodIndex" type="short"/>
                    <param name="numArgs" type="int"/>
                    <param name="numReturnValues" type="int"/>
                </params>
            </method>
            <javadoc line="616">
                Long and double arguments and return types count as 2 arguments;
                  other values count as 1.                
            </javadoc>
            <method name="opc_invokeinterface" type="void" line="622">
                <params>
                    <param name="methodIndex" type="short"/>
                    <param name="numArgs" type="int"/>
                    <param name="count" type="byte"/>
                    <param name="numReturnValues" type="int"/>
                </params>
            </method>
            <method name="opc_arraylength" type="void" line="634"/>
            <method name="opc_new" type="void" line="642">
                <params>
                    <param name="classIndex" type="short"/>
                </params>
            </method>
            <method name="opc_athrow" type="void" line="652"/>
            <javadoc line="661">
                Assumes the checkcast succeeds                
            </javadoc>
            <method name="opc_checkcast" type="void" line="662">
                <params>
                    <param name="classIndex" type="short"/>
                </params>
            </method>
            <method name="opc_instanceof" type="void" line="667">
                <params>
                    <param name="classIndex" type="short"/>
                </params>
            </method>
        </class>
    </source>