<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <class name="Reflection" line="6">
            <javadoc line="6">
                Common utility routines used by both java.lang and
                  java.lang.reflect                
            </javadoc>
            <declaration name="fieldFilterMap" type="Map&lt;Class,String[]&gt;" line="11"/>
            <javadoc line="11">
                Used to filter out fields and methods from certain classes from public
                  view, where they are sensitive or they may contain VM-internal objects.
                  These Maps are updated very rarely. Rather than synchronize on
                  each access, we use copy-on-write                
            </javadoc>
            <declaration name="methodFilterMap" type="Map&lt;Class,String[]&gt;" line="18"/>
            <scope line="19">
                <declaration name="map" type="Map&lt;Class,String[]&gt;" line="20"/>
            </scope>
            <method name="getCallerClass" type="Class" line="26"/>
            <javadoc line="26">
                Returns the class of the method &lt;code&gt;realFramesToSkip&lt;/code&gt;
                  frames up the stack (zero-based), ignoring frames associated
                  with java.lang.reflect.Method.invoke() and its implementation.
                  The first frame is that associated with this method, so
                  &lt;code&gt;getCallerClass(0)&lt;/code&gt; returns the Class object for
                  sun.reflect.Reflection. Frames associated with
                  java.lang.reflect.Method.invoke() and its implementation are
                  completely ignored and do not count toward the number of &quot;real&quot;
                  frames skipped.                
            </javadoc>
            <method name="getClassAccessFlags" type="int" line="38"/>
            <javadoc line="38">
                Retrieves the access flags written to the class file. For
                  inner classes these flags may differ from those returned by
                  Class.getModifiers(), which searches the InnerClasses
                  attribute to find the source-level access flags. This is used
                  instead of Class.getModifiers() for run-time access checks due
                  to compatibility reasons; see 4471811. Only the values of the
                  low 13 bits (i.e., a mask of 0x1FFF) are guaranteed to be
                  valid.                
            </javadoc>
            <javadoc line="49">
                A quick &quot;fast-path&quot; check to try to avoid getCallerClass()
                  calls.                
            </javadoc>
            <method name="quickCheckMemberAccess" type="boolean" line="53">
                <params>
                    <param name="memberClass" type="Class"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <method name="ensureMemberAccess" type="void" line="56">
                <params>
                    <param name="currentClass" type="Class"/>
                    <param name="memberClass" type="Class"/>
                    <param name="target" type="Object"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <method name="verifyMemberAccess" type="boolean" line="64">
                <params>
                    <param name="currentClass" type="Class"/>
                    <param name="memberClass" type="Class"/>
                    <param name="target" type="Object"/>
                    <param name="modifiers" type="int"/>
                </params>
                <declaration name="gotIsSameClassPackage" type="boolean" line="65"/>
                <declaration name="isSameClassPackage" type="boolean" line="66"/>
                <scope line="67"/>
                <scope line="70">
                    <scope line="73"/>
                </scope>
                <scope line="77"/>
                <declaration name="successSoFar" type="boolean" line="80"/>
                <scope line="81">
                    <scope line="82"/>
                </scope>
                <scope line="86">
                    <scope line="87"/>
                    <scope line="91"/>
                </scope>
                <scope line="95"/>
                <scope line="98">
                    <declaration name="targetClass" type="Class" line="99"/>
                    <scope line="100">
                        <scope line="101"/>
                        <scope line="105">
                            <scope line="106"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isSameClassPackage" type="boolean" line="114">
                <params>
                    <param name="c1" type="Class"/>
                    <param name="c2" type="Class"/>
                </params>
            </method>
            <javadoc line="117">
                Returns true if two classes are in the same package; classloader
                  and classname information is enough to determine a class&apos;s package                
            </javadoc>
            <method name="isSameClassPackage" type="boolean" line="121">
                <params>
                    <param name="loader1" type="ClassLoader"/>
                    <param name="name1" type="String"/>
                    <param name="loader2" type="ClassLoader"/>
                    <param name="name2" type="String"/>
                </params>
                <scope line="122"/>
                <scope line="125">
                    <declaration name="lastDot1" type="int" line="126"/>
                    <declaration name="lastDot2" type="int" line="127"/>
                    <scope line="128"/>
                    <scope line="131">
                        <declaration name="idx1" type="int" line="132"/>
                        <declaration name="idx2" type="int" line="133"/>
                        <scope line="134">
                            <scope line="135"/>
                            <scope line="139"/>
                        </scope>
                        <scope line="143">
                            <scope line="144"/>
                            <scope line="148"/>
                        </scope>
                        <declaration name="length1" type="int" line="152"/>
                        <declaration name="length2" type="int" line="153"/>
                        <scope line="154"/>
                    </scope>
                </scope>
            </method>
            <method name="isSubclassOf" type="boolean" line="161">
                <params>
                    <param name="queryClass" type="Class"/>
                    <param name="ofClass" type="Class"/>
                </params>
                <scope line="162">
                    <scope line="163"/>
                </scope>
            </method>
            <method name="registerFieldsToFilter" type="void" line="170">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="fieldNames" type="String"/>
                </params>
            </method>
            <method name="registerMethodsToFilter" type="void" line="173">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="methodNames" type="String"/>
                </params>
            </method>
            <method name="registerFilter" type="Map<Class,String[]>" line="176">
                <params>
                    <param name="map" type="Map<Class,String[]>"/>
                    <param name="containingClass" type="Class"/>
                    <param name="names" type="String"/>
                </params>
                <scope line="177"/>
            </method>
            <method name="filterFields" type="Field[]" line="184">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="fields" type="Field[]"/>
                </params>
                <scope line="185"/>
            </method>
            <method name="filterMethods" type="Method[]" line="190">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="methods" type="Method[]"/>
                </params>
                <scope line="191"/>
            </method>
            <method name="filter" type="Member[]" line="196">
                <params>
                    <param name="members" type="Member[]"/>
                    <param name="filteredNames" type="String[]"/>
                </params>
                <scope line="197"/>
                <declaration name="numNewMembers" type="int" line="200"/>
                <scope line="201">
                    <declaration name="shouldSkip" type="boolean" line="202"/>
                    <scope line="203">
                        <scope line="204"/>
                    </scope>
                    <scope line="209"/>
                </scope>
                <declaration name="newMembers" type="Member[]" line="213"/>
                <declaration name="destIdx" type="int" line="214"/>
                <scope line="215">
                    <declaration name="shouldSkip" type="boolean" line="216"/>
                    <scope line="217">
                        <scope line="218"/>
                    </scope>
                    <scope line="223"/>
                </scope>
            </method>
        </class>
    </source>