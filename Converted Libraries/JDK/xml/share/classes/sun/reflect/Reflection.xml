<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect">
        <import package="java.lang.reflect"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <class name="Reflection" line="33">
            <comment line="250">
                fieldNames must contain only interned Strings                
            </comment>
            <comment line="257">
                methodNames must contain only interned Strings                
            </comment>
            <javadoc line="33">
                Common utility routines used by both java.lang and
                  java.lang.reflect                
            </javadoc>
            <declaration name="fieldFilterMap" type="Map&lt;Class,String[]&gt;" line="38"/>
            <javadoc line="38">
                Used to filter out fields and methods from certain classes from public
                  view, where they are sensitive or they may contain VM-internal objects.
                  These Maps are updated very rarely. Rather than synchronize on
                  each access, we use copy-on-write                
            </javadoc>
            <declaration name="methodFilterMap" type="Map&lt;Class,String[]&gt;" line="43"/>
            <scope line="45">
                <declaration name="map" type="Map&lt;Class,String[]&gt;" line="46"/>
            </scope>
            <method name="getCallerClass" type="Class" line="55"/>
            <javadoc line="55">
                Returns the class of the method &lt;code&gt;realFramesToSkip&lt;/code&gt;
                  frames up the stack (zero-based), ignoring frames associated
                  with java.lang.reflect.Method.invoke() and its implementation.
                  The first frame is that associated with this method, so
                  &lt;code&gt;getCallerClass(0)&lt;/code&gt; returns the Class object for
                  sun.reflect.Reflection. Frames associated with
                  java.lang.reflect.Method.invoke() and its implementation are
                  completely ignored and do not count toward the number of &quot;real&quot;
                  frames skipped.                
            </javadoc>
            <method name="getClassAccessFlags" type="int" line="66"/>
            <javadoc line="66">
                Retrieves the access flags written to the class file. For
                  inner classes these flags may differ from those returned by
                  Class.getModifiers(), which searches the InnerClasses
                  attribute to find the source-level access flags. This is used
                  instead of Class.getModifiers() for run-time access checks due
                  to compatibility reasons; see 4471811. Only the values of the
                  low 13 bits (i.e., a mask of 0x1FFF) are guaranteed to be
                  valid.                
            </javadoc>
            <javadoc line="76">
                A quick &quot;fast-path&quot; check to try to avoid getCallerClass()
                  calls.                
            </javadoc>
            <method name="quickCheckMemberAccess" type="boolean" line="80">
                <params>
                    <param name="memberClass" type="Class"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <method name="ensureMemberAccess" type="void" line="89">
                <params>
                    <param name="currentClass" type="Class"/>
                    <param name="memberClass" type="Class"/>
                    <param name="target" type="Object"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="90"/>
                <scope line="94"/>
            </method>
            <method name="verifyMemberAccess" type="boolean" line="111">
                <params>
                    <param name="currentClass" type="Class"/>
                    <param name="memberClass" type="Class"/>
                    <param name="target" type="Object"/>
                    <param name="modifiers" type="int"/>
                </params>
                <comment line="106">
                    Declaring class of field
                     or method                    
                </comment>
                <comment line="109">
                    May be NULL in case of statics                    
                </comment>
                <comment line="113">
                    Verify that currentClass can access a field, method, or
                     constructor of memberClass, where that member&apos;s access bits are
                     &quot;modifiers&quot;.                    
                </comment>
                <comment line="121">
                    Always succeeds                    
                </comment>
                <comment line="133">
                    At this point we know that currentClass can access memberClass.                    
                </comment>
                <comment line="142">
                    See if currentClass is a subclass of memberClass                    
                </comment>
                <comment line="165">
                    Additional test for protected members: JLS 6.6.2                    
                </comment>
                <declaration name="gotIsSameClassPackage" type="boolean" line="116"/>
                <declaration name="isSameClassPackage" type="boolean" line="117"/>
                <scope line="119"/>
                <scope line="124">
                    <scope line="127"/>
                </scope>
                <scope line="134"/>
                <declaration name="successSoFar" type="boolean" line="138"/>
                <scope line="140">
                    <scope line="142"/>
                </scope>
                <scope line="147">
                    <scope line="148"/>
                    <scope line="154"/>
                </scope>
                <scope line="159"/>
                <scope line="163">
                    <declaration name="targetClass" type="Class" line="165"/>
                    <scope line="166">
                        <scope line="167"/>
                        <scope line="171">
                            <scope line="172"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isSameClassPackage" type="boolean" line="182">
                <params>
                    <param name="c1" type="Class"/>
                    <param name="c2" type="Class"/>
                </params>
            </method>
            <javadoc line="187">
                Returns true if two classes are in the same package; classloader
                  and classname information is enough to determine a class&apos;s package                
            </javadoc>
            <method name="isSameClassPackage" type="boolean" line="191">
                <params>
                    <param name="loader1" type="ClassLoader"/>
                    <param name="name1" type="String"/>
                    <param name="loader2" type="ClassLoader"/>
                    <param name="name2" type="String"/>
                </params>
                <comment line="199">
                    One of the two doesn&apos;t have a package.  Only return true
                     if the other one also doesn&apos;t have a package.                    
                </comment>
                <comment line="206">
                    Skip over &apos;[&apos;s                    
                </comment>
                <comment line="212">
                    Something is terribly wrong.  Shouldn&apos;t be here.                    
                </comment>
                <comment line="221">
                    Something is terribly wrong.  Shouldn&apos;t be here.                    
                </comment>
                <comment line="226">
                    Check that package part is identical                    
                </comment>
                <scope line="192"/>
                <scope line="194">
                    <declaration name="lastDot1" type="int" line="195"/>
                    <declaration name="lastDot2" type="int" line="196"/>
                    <scope line="197"/>
                    <scope line="201">
                        <declaration name="idx1" type="int" line="202"/>
                        <declaration name="idx2" type="int" line="203"/>
                        <scope line="206">
                            <scope line="207"/>
                            <scope line="210"/>
                        </scope>
                        <scope line="215">
                            <scope line="216"/>
                            <scope line="219"/>
                        </scope>
                        <declaration name="length1" type="int" line="226"/>
                        <declaration name="length2" type="int" line="227"/>
                        <scope line="229"/>
                    </scope>
                </scope>
            </method>
            <method name="isSubclassOf" type="boolean" line="239">
                <params>
                    <param name="queryClass" type="Class"/>
                    <param name="ofClass" type="Class"/>
                </params>
                <scope line="240">
                    <scope line="241"/>
                </scope>
            </method>
            <method name="registerFieldsToFilter" type="void" line="251">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="fieldNames" type="String"/>
                </params>
            </method>
            <method name="registerMethodsToFilter" type="void" line="258">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="methodNames" type="String"/>
                </params>
            </method>
            <method name="registerFilter" type="Map<Class,String[]>" line="264">
                <params>
                    <param name="map" type="Map<Class,String[]>"/>
                    <param name="containingClass" type="Class"/>
                    <param name="names" type="String"/>
                </params>
                <scope line="265"/>
            </method>
            <method name="filterFields" type="Field[]" line="275">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="fields" type="Field[]"/>
                </params>
                <comment line="278">
                    Bootstrapping                    
                </comment>
                <scope line="276"/>
            </method>
            <method name="filterMethods" type="Method[]" line="283">
                <params>
                    <param name="containingClass" type="Class"/>
                    <param name="methods" type="Method[]"/>
                </params>
                <comment line="286">
                    Bootstrapping                    
                </comment>
                <scope line="284"/>
            </method>
            <method name="filter" type="Member[]" line="291">
                <params>
                    <param name="members" type="Member[]"/>
                    <param name="filteredNames" type="String[]"/>
                </params>
                <scope line="292"/>
                <declaration name="numNewMembers" type="int" line="295"/>
                <scope line="296">
                    <declaration name="shouldSkip" type="boolean" line="297"/>
                    <scope line="298">
                        <scope line="299"/>
                    </scope>
                    <scope line="304"/>
                </scope>
                <declaration name="newMembers" type="Member[]" line="308"/>
                <declaration name="destIdx" type="int" line="310"/>
                <scope line="311">
                    <declaration name="shouldSkip" type="boolean" line="312"/>
                    <scope line="313">
                        <scope line="314"/>
                    </scope>
                    <scope line="319"/>
                </scope>
            </method>
        </class>
    </source>