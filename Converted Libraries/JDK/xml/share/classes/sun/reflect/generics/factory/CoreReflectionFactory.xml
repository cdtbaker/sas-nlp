<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.factory">
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.GenericDeclaration"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.ParameterizedType"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.TypeVariable"/>
        <import package="java.lang.reflect.WildcardType"/>
        <import package="sun.reflect.generics.reflectiveObjects"/>
        <import package="sun.reflect.generics.scope.Scope"/>
        <import package="sun.reflect.generics.tree.FieldTypeSignature"/>
        <class name="CoreReflectionFactory" line="13">
            <implements interface="GenericsFactory"/>
            <javadoc line="13">
                Factory for reflective generic type objects for use by
                  core reflection (java.lang.reflect).                
            </javadoc>
            <declaration name="decl" type="GenericDeclaration" line="18"/>
            <declaration name="scope" type="Scope" line="19"/>
            <method name="CoreReflectionFactory" type="constructor" line="20">
                <params>
                    <param name="d" type="GenericDeclaration"/>
                    <param name="s" type="Scope"/>
                </params>
            </method>
            <method name="getDecl" type="GenericDeclaration" line="24"/>
            <method name="getScope" type="Scope" line="27"/>
            <method name="getDeclsLoader" type="ClassLoader" line="30"/>
            <javadoc line="40">
                Factory for this class. Returns an instance of
                  &lt;tt&gt;CoreReflectionFactory&lt;/tt&gt; for the declaration and scope
                  provided.
                  This factory will produce reflective objects of the appropriate
                  kind. Classes produced will be those that would be loaded by the
                  defining class loader of the declaration &lt;tt&gt;d&lt;/tt&gt; (if &lt;tt&gt;d&lt;/tt&gt;
                  is a type declaration, or by the defining loader of the declaring
                  class of &lt;tt&gt;d&lt;/tt&gt;  otherwise.
                  &lt;p&gt; Type variables will be created or lookup as necessary in the
                  scope &lt;tt&gt; s&lt;/tt&gt;.                
                <param>
                    d - the generic declaration (class, interface, method or
                      constructor) that thsi factory services                    
                </param>
                <param>
                    s  the scope in which the factory will allocate and search for
                      type variables                    
                </param>
                <return>
                    an instance of <tt>CoreReflectionFactory</tt>                    
                </return>
            </javadoc>
            <method name="make" type="CoreReflectionFactory" line="57">
                <params>
                    <param name="d" type="GenericDeclaration"/>
                    <param name="s" type="Scope"/>
                </params>
            </method>
            <method name="makeTypeVariable" type="TypeVariable<?>" line="60">
                <params>
                    <param name="name" type="String"/>
                    <param name="bounds" type="FieldTypeSignature[]"/>
                </params>
            </method>
            <method name="makeWildcard" type="WildcardType" line="63">
                <params>
                    <param name="ubs" type="FieldTypeSignature[]"/>
                    <param name="lbs" type="FieldTypeSignature[]"/>
                </params>
            </method>
            <method name="makeParameterizedType" type="ParameterizedType" line="66">
                <params>
                    <param name="declaration" type="Type"/>
                    <param name="typeArgs" type="Type[]"/>
                    <param name="owner" type="Type"/>
                </params>
            </method>
            <method name="findTypeVariable" type="TypeVariable<?>" line="69">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="makeNamedType" type="Type" line="72">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <method name="makeArrayType" type="Type" line="80">
                <params>
                    <param name="componentType" type="Type"/>
                </params>
            </method>
            <method name="makeByte" type="Type" line="84"/>
            <method name="makeBool" type="Type" line="87"/>
            <method name="makeShort" type="Type" line="90"/>
            <method name="makeChar" type="Type" line="93"/>
            <method name="makeInt" type="Type" line="96"/>
            <method name="makeLong" type="Type" line="99"/>
            <method name="makeFloat" type="Type" line="102"/>
            <method name="makeDouble" type="Type" line="105"/>
            <method name="makeVoid" type="Type" line="108"/>
        </class>
    </source>