<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.scope">
        <import package="java.lang.reflect.GenericDeclaration"/>
        <import package="java.lang.reflect.TypeVariable"/>
        <class name="AbstractScope" line="4">
            <type_params>
                <type_param name="D"/>
            </type_params>
            <implements interface="Scope"/>
            <javadoc line="4">
                Abstract superclass for lazy scope objects, used when building
                  factories for generic information repositories.
                  The type parameter &lt;tt&gt;D&lt;/tt&gt; represents the type of reflective
                  object whose scope this class is representing.
                  &lt;p&gt; To subclass this, all one needs to do is implement
                  &lt;tt&gt;computeEnclosingScope&lt;/tt&gt; and the subclass&apos; constructor.                
            </javadoc>
            <declaration name="recvr" type="D" line="13"/>
            <declaration name="enclosingScope" type="Scope" line="14"/>
            <javadoc line="15">
                Constructor. Takes a reflective object whose scope the newly
                  constructed instance will represent.                
                <param>
                    D - A generic declaration whose scope the newly
                      constructed instance will represent                    
                </param>
            </javadoc>
            <method name="AbstractScope" type="constructor" line="21">
                <params>
                    <param name="decl" type="D"/>
                </params>
            </method>
            <javadoc line="24">
                Accessor for the receiver - the object whose scope this &lt;tt&gt;Scope&lt;/tt&gt;
                  object represents.                
                <return>
                    The object whose scope this &lt;tt&gt;Scope&lt;/tt&gt; object represents                    
                </return>
            </javadoc>
            <method name="getRecvr" type="D" line="29"/>
            <method name="computeEnclosingScope" type="Scope" line="32"/>
            <javadoc line="32">
                This method must be implemented by any concrete subclass.
                  It must return the enclosing scope of this scope. If this scope
                  is a top-level scope, an instance of  DummyScope must be returned.                
                <return>
                    The enclosing scope of this scope                    
                </return>
            </javadoc>
            <javadoc line="39">
                Accessor for the enclosing scope, which is computed lazily and cached.                
                <return>
                    the enclosing scope                    
                </return>
            </javadoc>
            <method name="getEnclosingScope" type="Scope" line="43">
                <scope line="44"/>
            </method>
            <javadoc line="49">
                Lookup a type variable in the scope, using its name. Returns null if
                  no type variable with this name is declared in this scope or any of its
                  surrounding scopes.                
                <param>
                    name - the name of the type variable being looked up                    
                </param>
                <return>
                    the requested type variable, if found                    
                </return>
            </javadoc>
            <method name="lookup" type="TypeVariable&lt;?&gt;" line="56">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="tas" type="TypeVariable[]" line="57"/>
                <scope line="58">
                    <scope line="59"/>
                </scope>
            </method>
        </class>
    </source>