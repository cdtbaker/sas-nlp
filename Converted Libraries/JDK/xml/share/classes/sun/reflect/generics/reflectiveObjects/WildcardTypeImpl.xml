<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.reflectiveObjects">
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.WildcardType"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.tree.FieldTypeSignature"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <import package="java.util.Arrays"/>
        <class name="WildcardTypeImpl" line="8">
            <extends class="LazyReflectiveObjectGenerator"/>
            <implements interface="WildcardType"/>
            <javadoc line="8">
                Implementation of WildcardType interface for core reflection.                
            </javadoc>
            <declaration name="upperBounds" type="Type[]" line="12"/>
            <declaration name="lowerBounds" type="Type[]" line="13"/>
            <declaration name="upperBoundASTs" type="FieldTypeSignature[]" line="14"/>
            <declaration name="lowerBoundASTs" type="FieldTypeSignature[]" line="15"/>
            <method name="WildcardTypeImpl" type="constructor" line="16">
                <params>
                    <param name="ubs" type="FieldTypeSignature[]"/>
                    <param name="lbs" type="FieldTypeSignature[]"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <javadoc line="21">
                Factory method.                
                <param>
                    ubs - an array of ASTs representing the upper bounds for the type
                      variable to be created                    
                </param>
                <param>
                    lbs - an array of ASTs representing the lower bounds for the type
                      variable to be created                    
                </param>
                <param>
                    f - a factory that can be used to manufacture reflective
                      objects that represent the bounds of this wildcard type                    
                </param>
                <return>
                    a wild card type with the requested bounds and factory                    
                </return>
            </javadoc>
            <method name="make" type="WildcardTypeImpl" line="31">
                <params>
                    <param name="ubs" type="FieldTypeSignature[]"/>
                    <param name="lbs" type="FieldTypeSignature[]"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getUpperBoundASTs" type="FieldTypeSignature[]" line="34"/>
            <method name="getLowerBoundASTs" type="FieldTypeSignature[]" line="38"/>
            <javadoc line="42">
                Returns an array of &lt;tt&gt;Type&lt;/tt&gt; objects representing the  upper
                  bound(s) of this type variable.  Note that if no upper bound is
                  explicitly declared, the upper bound is &lt;tt&gt;Object&lt;/tt&gt;.
                  &lt;p&gt;For each upper bound B :
                  &lt;ul&gt;
                  &lt;li&gt;if B is a parameterized type or a type variable, it is created,
                  (see {@link #ParameterizedType} for the details of the creation
                  process for parameterized types).
                  &lt;li&gt;Otherwise, B is resolved.
                  &lt;/ul&gt;                
                <return>
                    an array of Types representing the upper bound(s) of this
                      type variable                    
                </return>
                <throws>
                    <tt>TypeNotPresentException</tt> if any of the
                      bounds refers to a non-existent type declaration                    
                </throws>
                <throws>
                    <tt>MalformedParameterizedTypeException</tt> if any of the
                      bounds refer to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
            </javadoc>
            <method name="getUpperBounds" type="Type[]" line="61">
                <scope line="62">
                    <declaration name="fts" type="FieldTypeSignature[]" line="63"/>
                    <declaration name="ts" type="Type[]" line="64"/>
                    <scope line="65">
                        <declaration name="r" type="Reifier" line="66"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="74">
                Returns an array of &lt;tt&gt;Type&lt;/tt&gt; objects representing the
                  lower bound(s) of this type variable.  Note that if no lower bound is
                  explicitly declared, the lower bound is the type of &lt;tt&gt;null&lt;/tt&gt;.
                  In this case, a zero length array is returned.
                  &lt;p&gt;For each lower bound B :
                  &lt;ul&gt;
                  &lt;li&gt;if B is a parameterized type or a type variable, it is created,
                  (see {@link #ParameterizedType} for the details of the creation
                  process for parameterized types).
                  &lt;li&gt;Otherwise, B is resolved.
                  &lt;/ul&gt;                
                <return>
                    an array of Types representing the lower bound(s) of this
                      type variable                    
                </return>
                <throws>
                    <tt>TypeNotPresentException</tt> if any of the
                      bounds refers to a non-existent type declaration                    
                </throws>
                <throws>
                    <tt>MalformedParameterizedTypeException</tt> if any of the
                      bounds refer to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
            </javadoc>
            <method name="getLowerBounds" type="Type[]" line="94">
                <scope line="95">
                    <declaration name="fts" type="FieldTypeSignature[]" line="96"/>
                    <declaration name="ts" type="Type[]" line="97"/>
                    <scope line="98">
                        <declaration name="r" type="Reifier" line="99"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="107"/>
            <method name="equals" type="boolean" line="130">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="131">
                    <declaration name="that" type="WildcardType" line="132"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="137">
                <declaration name="lowerBounds" type="Type[]" line="138"/>
                <declaration name="upperBounds" type="Type[]" line="139"/>
            </method>
        </class>
    </source>