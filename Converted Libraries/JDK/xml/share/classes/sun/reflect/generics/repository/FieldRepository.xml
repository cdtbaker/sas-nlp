<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.repository">
        <import package="java.lang.reflect.Type"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.tree.TypeSignature"/>
        <import package="sun.reflect.generics.parser.SignatureParser"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <class name="FieldRepository" line="37">
            <extends class="AbstractRepository">
                <type_params>
                    <type_param name="TypeSignature"/>
                </type_params>
            </extends>
            <comment line="45">
                caches the generic type info                
            </comment>
            <comment line="47">
                protected, to enforce use of static factory yet allow subclassing                
            </comment>
            <comment line="70">
                public API                
            </comment>
            <comment line="72">
                When queried for a particular piece of type information, the
                 general pattern is to consult the corresponding cached value.
                 If the corresponding field is non-null, it is returned.
                 If not, it is created lazily. This is done by selecting the appropriate
                 part of the tree and transforming it into a reflective object
                 using a visitor.
                 a visitor, which is created by feeding it the factory
                 with which the repository was created.                
            </comment>
            <javadoc line="37">
                This class represents the generic type information for a constructor.
                  The code is not dependent on a particular reflective implementation.
                  It is designed to be used unchanged by at least core reflection and JDI.                
            </javadoc>
            <declaration name="genericType" type="Type" line="44"/>
            <method name="FieldRepository" type="constructor" line="47">
                <params>
                    <param name="rawSig" type="String"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="parse" type="TypeSignature" line="51">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="55">
                Static factory method.                
                <param>
                    rawSig - the generic signature of the reflective object
                      that this repository is servicing                    
                </param>
                <param>
                    f - a factory that will provide instances of reflective
                      objects when this repository converts its AST                    
                </param>
                <return>
                    a &lt;tt&gt;FieldRepository&lt;/tt&gt; that manages the generic type
                      information represented in the signature &lt;tt&gt;rawSig&lt;/tt&gt;                    
                </return>
            </javadoc>
            <method name="make" type="FieldRepository" line="65">
                <params>
                    <param name="rawSig" type="String"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getGenericType" type="Type" line="82">
                <comment line="84">
                    lazily initialize generic type                    
                </comment>
                <comment line="85">
                    obtain visitor                    
                </comment>
                <comment line="86">
                    reify subtree                    
                </comment>
                <comment line="87">
                    extract result from visitor and cache it                    
                </comment>
                <comment line="90">
                    return cached result                    
                </comment>
                <scope line="83">
                    <declaration name="r" type="Reifier" line="84"/>
                </scope>
            </method>
        </class>
    </source>