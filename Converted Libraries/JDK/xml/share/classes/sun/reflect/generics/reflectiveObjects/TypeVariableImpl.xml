<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.reflectiveObjects">
        <import package="java.lang.reflect.GenericDeclaration"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.TypeVariable"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.tree.FieldTypeSignature"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <class name="TypeVariableImpl" line="8">
            <type_params>
                <type_param name="D"/>
            </type_params>
            <extends class="LazyReflectiveObjectGenerator"/>
            <implements interface="TypeVariable">
                <type_params>
                    <type_param name="D"/>
                </type_params>
            </implements>
            <javadoc line="8">
                Implementation of &lt;tt&gt;java.lang.reflect.TypeVariable&lt;/tt&gt; interface
                  for core reflection.                
            </javadoc>
            <declaration name="genericDeclaration" type="D" line="13"/>
            <declaration name="name" type="String" line="14"/>
            <declaration name="bounds" type="Type[]" line="15"/>
            <declaration name="boundASTs" type="FieldTypeSignature[]" line="16"/>
            <method name="TypeVariableImpl" type="constructor" line="17">
                <params>
                    <param name="decl" type="D"/>
                    <param name="n" type="String"/>
                    <param name="bs" type="FieldTypeSignature[]"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getBoundASTs" type="FieldTypeSignature[]" line="23"/>
            <javadoc line="27">
                Factory method.                
                <param>
                    decl - the reflective object that declared the type variable
                      that this method should create                    
                </param>
                <param>
                    name - the name of the type variable to be returned                    
                </param>
                <param>
                    bs - an array of ASTs representing the bounds for the type
                      variable to be created                    
                </param>
                <param>
                    f - a factory that can be used to manufacture reflective
                      objects that represent the bounds of this type variable                    
                </param>
                <return>
                    A type variable with name, bounds, declaration and factory
                      specified                    
                </return>
            </javadoc>
            <method name="make" type="TypeVariableImpl<T>" line="39">
                <params>
                    <param name="decl" type="T"/>
                    <param name="name" type="String"/>
                    <param name="bs" type="FieldTypeSignature[]"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <javadoc line="42">
                Returns an array of &lt;tt&gt;Type&lt;/tt&gt; objects representing the
                  upper bound(s) of this type variable.  Note that if no upper bound is
                  explicitly declared, the upper bound is &lt;tt&gt;Object&lt;/tt&gt;.
                  &lt;p&gt;For each upper bound B:
                  &lt;ul&gt;
                  &lt;li&gt;if B is a parameterized type or a type variable, it is created,
                  (see {@link #ParameterizedType} for the details of the creation
                  process for parameterized types).
                  &lt;li&gt;Otherwise, B is resolved.
                  &lt;/ul&gt;                
                <throws>
                    <tt>TypeNotPresentException</tt>  if any of the
                      bounds refers to a non-existent type declaration                    
                </throws>
                <throws>
                    <tt>MalformedParameterizedTypeException</tt> if any of the
                      bounds refer to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
                <return>
                    an array of Types representing the upper bound(s) of this
                      type variable                    
                </return>
            </javadoc>
            <method name="getBounds" type="Type[]" line="61">
                <scope line="62">
                    <declaration name="fts" type="FieldTypeSignature[]" line="63"/>
                    <declaration name="ts" type="Type[]" line="64"/>
                    <scope line="65">
                        <declaration name="r" type="Reifier" line="66"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="74">
                Returns the &lt;tt&gt;GenericDeclaration&lt;/tt&gt;  object representing the
                  generic declaration that declared this type variable.                
                <return>
                    the generic declaration that declared this type variable.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericDeclaration" type="D" line="80"/>
            <javadoc line="83">
                Returns the name of this type variable, as it occurs in the source code.                
                <return>
                    the name of this type variable, as it appears in the source code                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="87"/>
            <method name="toString" type="String" line="90"/>
            <method name="equals" type="boolean" line="93">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="94">
                    <declaration name="that" type="TypeVariable" line="95"/>
                    <declaration name="thatDecl" type="GenericDeclaration" line="96"/>
                    <declaration name="thatName" type="String" line="97"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="102"/>
        </class>
    </source>