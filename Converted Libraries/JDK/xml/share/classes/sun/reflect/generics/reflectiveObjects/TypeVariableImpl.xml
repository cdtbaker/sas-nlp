<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.reflectiveObjects">
        <import package="java.lang.reflect.GenericDeclaration"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.TypeVariable"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.tree.FieldTypeSignature"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <class name="TypeVariableImpl" line="36">
            <type_params>
                <type_param name="D"/>
            </type_params>
            <extends class="LazyReflectiveObjectGenerator"/>
            <comment line="45">
                upper bounds - evaluated lazily                
            </comment>
            <comment line="48">
                The ASTs for the bounds. We are required to evaluate the bounds
                 lazily, so we store these at least until we are first asked
                 for the bounds. This also neatly solves the
                 problem with F-bounds - you can&apos;t reify them before the formal
                 is defined.                
            </comment>
            <comment line="55">
                constructor is private to enforce access through static factory                
            </comment>
            <comment line="64">
                Accessors                
            </comment>
            <comment line="66">
                accessor for ASTs for bounds. Must not be called after
                 bounds have been evaluated, because we might throw the ASTs
                 away (but that is not thread-safe, is it?)                
            </comment>
            <implements interface="TypeVariable">
                <type_params>
                    <type_param name="D"/>
                </type_params>
            </implements>
            <javadoc line="36">
                Implementation of &lt;tt&gt;java.lang.reflect.TypeVariable&lt;/tt&gt; interface
                  for core reflection.                
            </javadoc>
            <declaration name="genericDeclaration" type="D" line="42"/>
            <declaration name="name" type="String" line="43"/>
            <declaration name="bounds" type="Type[]" line="45"/>
            <declaration name="boundASTs" type="FieldTypeSignature[]" line="52"/>
            <method name="TypeVariableImpl" type="constructor" line="56">
                <params>
                    <param name="decl" type="D"/>
                    <param name="n" type="String"/>
                    <param name="bs" type="FieldTypeSignature[]"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getBoundASTs" type="FieldTypeSignature[]" line="68">
                <comment line="70">
                    check that bounds were not evaluated yet                    
                </comment>
            </method>
            <javadoc line="74">
                Factory method.                
                <param>
                    decl - the reflective object that declared the type variable
                      that this method should create                    
                </param>
                <param>
                    name - the name of the type variable to be returned                    
                </param>
                <param>
                    bs - an array of ASTs representing the bounds for the type
                      variable to be created                    
                </param>
                <param>
                    f - a factory that can be used to manufacture reflective
                      objects that represent the bounds of this type variable                    
                </param>
                <return>
                    A type variable with name, bounds, declaration and factory
                      specified                    
                </return>
            </javadoc>
            <method name="make" type="TypeVariableImpl<T>" line="89">
                <params>
                    <param name="decl" type="T"/>
                    <param name="name" type="String"/>
                    <param name="bs" type="FieldTypeSignature[]"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <javadoc line="94">
                Returns an array of &lt;tt&gt;Type&lt;/tt&gt; objects representing the
                  upper bound(s) of this type variable.  Note that if no upper bound is
                  explicitly declared, the upper bound is &lt;tt&gt;Object&lt;/tt&gt;.
                  &lt;p&gt;For each upper bound B:
                  &lt;ul&gt;
                  &lt;li&gt;if B is a parameterized type or a type variable, it is created,
                  (see {@link #ParameterizedType} for the details of the creation
                  process for parameterized types).
                  &lt;li&gt;Otherwise, B is resolved.
                  &lt;/ul&gt;                
                <throws>
                    <tt>TypeNotPresentException</tt>  if any of the
                      bounds refers to a non-existent type declaration                    
                </throws>
                <throws>
                    <tt>MalformedParameterizedTypeException</tt> if any of the
                      bounds refer to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
                <return>
                    an array of Types representing the upper bound(s) of this
                      type variable                    
                </return>
            </javadoc>
            <method name="getBounds" type="Type[]" line="115">
                <comment line="117">
                    lazily initialize bounds if necessary                    
                </comment>
                <comment line="119">
                    get AST                    
                </comment>
                <comment line="120">
                    allocate result array; note that
                     keeping ts and bounds separate helps with threads                    
                </comment>
                <comment line="123">
                    iterate over bound trees, reifying each in turn                    
                </comment>
                <comment line="129">
                    cache result                    
                </comment>
                <comment line="131">
                    could throw away bound ASTs here; thread safety?                    
                </comment>
                <comment line="133">
                    return cached bounds                    
                </comment>
                <scope line="117">
                    <declaration name="fts" type="FieldTypeSignature[]" line="118"/>
                    <declaration name="ts" type="Type[]" line="121"/>
                    <scope line="123">
                        <declaration name="r" type="Reifier" line="124"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="135">
                Returns the &lt;tt&gt;GenericDeclaration&lt;/tt&gt;  object representing the
                  generic declaration that declared this type variable.                
                <return>
                    the generic declaration that declared this type variable.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericDeclaration" type="D" line="143"/>
            <javadoc line="148">
                Returns the name of this type variable, as it occurs in the source code.                
                <return>
                    the name of this type variable, as it appears in the source code                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="153"/>
            <method name="toString" type="String" line="155"/>
            <method name="equals" type="boolean" line="158">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="159">
                    <declaration name="that" type="TypeVariable" line="160"/>
                    <declaration name="thatDecl" type="GenericDeclaration" line="162"/>
                    <declaration name="thatName" type="String" line="163"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="178"/>
        </class>
    </source>