<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.parser">
        <import package="java.lang.reflect.GenericSignatureFormatError"/>
        <import package="java.util"/>
        <import package="sun.reflect.generics.tree"/>
        <class name="SignatureParser" line="5">
            <javadoc line="5">
                Parser for type signatures, as defined in the Java Virtual
                  // Machine Specification (JVMS) chapter 4.
                  Converts the signatures into an abstract syntax tree (AST) representation.
                  // See the package sun.reflect.generics.tree for details of the AST.                
            </javadoc>
            <declaration name="input" type="char[]" line="12"/>
            <declaration name="index" type="int" line="13"/>
            <declaration name="EOI" type="char" line="14"/>
            <declaration name="DEBUG" type="boolean" line="15"/>
            <method name="SignatureParser" type="constructor" line="16"/>
            <method name="getNext" type="char" line="18">
                <scope line="20"/>
                <scope line="23"/>
            </method>
            <method name="current" type="char" line="27">
                <scope line="29"/>
                <scope line="32"/>
            </method>
            <method name="advance" type="void" line="36"/>
            <method name="matches" type="boolean" line="40">
                <params>
                    <param name="c" type="char"/>
                    <param name="set" type="char"/>
                </params>
                <scope line="41"/>
            </method>
            <method name="error" type="Error" line="46">
                <params>
                    <param name="errorMsg" type="String"/>
                </params>
            </method>
            <javadoc line="50">
                Static factory method. Produces a parser instance.                
                <return>
                    an instance of <tt>SignatureParser</tt>                    
                </return>
            </javadoc>
            <method name="make" type="SignatureParser" line="54"/>
            <javadoc line="57">
                Parses a class signature (as defined in the JVMS, chapter 4)
                  and produces an abstract syntax tree representing it.                
                <param>
                    s a string representing the input class signature                    
                </param>
                <return>
                    An abstract syntax tree for a class signature
                      corresponding to the input string                    
                </return>
                <throws>
                    GenericSignatureFormatError if the input is not a valid
                      class signature                    
                </throws>
            </javadoc>
            <method name="parseClassSig" type="ClassSignature" line="66">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="71">
                Parses a method signature (as defined in the JVMS, chapter 4)
                  and produces an abstract syntax tree representing it.                
                <param>
                    s a string representing the input method signature                    
                </param>
                <return>
                    An abstract syntax tree for a method signature
                      corresponding to the input string                    
                </return>
                <throws>
                    GenericSignatureFormatError if the input is not a valid
                      method signature                    
                </throws>
            </javadoc>
            <method name="parseMethodSig" type="MethodTypeSignature" line="80">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="85">
                Parses a type signature
                  and produces an abstract syntax tree representing it.                
                <param>
                    s a string representing the input type signature                    
                </param>
                <return>
                    An abstract syntax tree for a type signature
                      corresponding to the input string                    
                </return>
                <throws>
                    GenericSignatureFormatError if the input is not a valid
                      type signature                    
                </throws>
            </javadoc>
            <method name="parseTypeSig" type="TypeSignature" line="94">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="parseClassSignature" type="ClassSignature" line="99"/>
            <method name="parseZeroOrMoreFormalTypeParameters" type="FormalTypeParameter[]" line="103">
                <scope line="104"/>
                <scope line="107"/>
            </method>
            <method name="parseFormalTypeParameters" type="FormalTypeParameter[]" line="111">
                <declaration name="ftps" type="Collection&lt;FormalTypeParameter&gt;" line="112"/>
                <scope line="114"/>
                <scope line="119"/>
                <declaration name="ftpa" type="FormalTypeParameter[]" line="123"/>
            </method>
            <method name="parseFormalTypeParameter" type="FormalTypeParameter" line="126">
                <declaration name="id" type="String" line="127"/>
                <declaration name="bs" type="FieldTypeSignature[]" line="128"/>
            </method>
            <method name="parseIdentifier" type="String" line="131">
                <declaration name="result" type="StringBuilder" line="132"/>
                <scope line="133">
                    <declaration name="c" type="char" line="134"/>
                    <scope line="145"/>
                </scope>
            </method>
            <method name="parseFieldTypeSignature" type="FieldTypeSignature" line="153"/>
            <method name="parseClassTypeSignature" type="ClassTypeSignature" line="165">
                <scope line="167"/>
                <declaration name="scts" type="List&lt;SimpleClassTypeSignature&gt;" line="171"/>
            </method>
            <method name="parseSimpleClassTypeSignature" type="SimpleClassTypeSignature" line="178">
                <params>
                    <param name="dollar" type="boolean"/>
                </params>
                <declaration name="id" type="String" line="179"/>
                <declaration name="c" type="char" line="180"/>
                <scope line="186"/>
                <scope line="190"/>
            </method>
            <method name="parseClassTypeSignatureSuffix" type="void" line="195">
                <params>
                    <param name="scts" type="List<SimpleClassTypeSignature>"/>
                </params>
                <scope line="196">
                    <declaration name="dollar" type="boolean" line="197"/>
                </scope>
            </method>
            <method name="parseTypeArgumentsOpt" type="TypeArgument[]" line="202">
                <scope line="203"/>
                <scope line="206"/>
            </method>
            <method name="parseTypeArguments" type="TypeArgument[]" line="210">
                <declaration name="tas" type="Collection&lt;TypeArgument&gt;" line="211"/>
                <scope line="213"/>
                <scope line="218"/>
                <declaration name="taa" type="TypeArgument[]" line="222"/>
            </method>
            <method name="parseTypeArgument" type="TypeArgument" line="225">
                <declaration name="ub" type="FieldTypeSignature[]" line="226"/>
                <declaration name="ta" type="TypeArgument[]" line="229"/>
                <declaration name="c" type="char" line="230"/>
                <scope line="233"/>
                <scope line="240"/>
                <scope line="247"/>
            </method>
            <method name="parseTypeVariableSignature" type="TypeVariableSignature" line="257">
                <scope line="259"/>
                <declaration name="ts" type="TypeVariableSignature" line="263"/>
                <scope line="264"/>
            </method>
            <method name="parseArrayTypeSignature" type="ArrayTypeSignature" line="270">
                <scope line="271"/>
            </method>
            <method name="parseTypeSignature" type="TypeSignature" line="277"/>
            <method name="parseBaseType" type="BaseType" line="292">
                <scope line="319"/>
            </method>
            <method name="parseZeroOrMoreBounds" type="FieldTypeSignature[]" line="325">
                <declaration name="fts" type="Collection&lt;FieldTypeSignature&gt;" line="326"/>
                <scope line="327">
                    <scope line="335"/>
                </scope>
                <declaration name="fta" type="FieldTypeSignature[]" line="340"/>
            </method>
            <method name="parseSuperInterfaces" type="ClassTypeSignature[]" line="343">
                <declaration name="cts" type="Collection&lt;ClassTypeSignature&gt;" line="344"/>
                <scope line="345"/>
                <declaration name="cta" type="ClassTypeSignature[]" line="348"/>
            </method>
            <method name="parseMethodTypeSignature" type="MethodTypeSignature" line="351">
                <declaration name="ets" type="FieldTypeSignature[]" line="352"/>
            </method>
            <method name="parseFormalParameters" type="TypeSignature[]" line="356">
                <scope line="357"/>
                <declaration name="pts" type="TypeSignature[]" line="361"/>
                <scope line="362"/>
            </method>
            <method name="parseZeroOrMoreTypeSignatures" type="TypeSignature[]" line="368">
                <declaration name="ts" type="Collection&lt;TypeSignature&gt;" line="369"/>
                <declaration name="stop" type="boolean" line="370"/>
                <scope line="371">
                    <scope line="384"/>
                </scope>
                <declaration name="ta" type="TypeSignature[]" line="392"/>
            </method>
            <method name="parseReturnType" type="ReturnType" line="395">
                <scope line="396"/>
            </method>
            <method name="parseZeroOrMoreThrowsSignatures" type="FieldTypeSignature[]" line="402">
                <declaration name="ets" type="Collection&lt;FieldTypeSignature&gt;" line="403"/>
                <scope line="404"/>
                <declaration name="eta" type="FieldTypeSignature[]" line="407"/>
            </method>
            <method name="parseThrowsSignature" type="FieldTypeSignature" line="410">
                <scope line="412"/>
            </method>
        </class>
    </source>