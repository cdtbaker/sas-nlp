<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.reflectiveObjects">
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <class name="LazyReflectiveObjectGenerator" line="4">
            <javadoc line="4">
                Common infrastructure for things that lazily generate reflective generics
                  objects.
                  &lt;p&gt; In all these cases, one needs produce a visitor that will, on demand,
                  traverse the stored AST(s) and reify them into reflective objects.
                  The visitor needs to be initialized with a factory, which will be
                  provided when the instance is initialized.
                  The factory should be cached.                
            </javadoc>
            <declaration name="factory" type="GenericsFactory" line="14"/>
            <method name="LazyReflectiveObjectGenerator" type="constructor" line="15">
                <params>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getFactory" type="GenericsFactory" line="18"/>
            <method name="getReifier" type="Reifier" line="21"/>
        </class>
    </source>