<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.factory">
        <import package="java.lang.reflect.ParameterizedType"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.TypeVariable"/>
        <import package="java.lang.reflect.WildcardType"/>
        <import package="sun.reflect.generics.tree.FieldTypeSignature"/>
        <interface name="GenericsFactory">
            <javadoc line="7">
                A factory interface for reflective objects representing generic types.
                  Implementors (such as core reflection or JDI, or possibly javadoc
                  will manufacture instances of (potentially) different classes
                  in response to invocations of the methods described here.
                  &lt;p&gt; The intent is that reflective systems use these factories to
                  produce generic type information on demand.
                  Certain components of such reflective systems can be independent
                  of a specific implementation by using this interface. For example,
                  repositories of generic type information are initialized with a
                  factory conforming to this interface, and use it to generate the
                  tpe information they are required to provide. As a result, such
                  repository code can be shared across different reflective systems.                
            </javadoc>
            <method name="makeTypeVariable" type="TypeVariable&lt;?&gt;" line="22"/>
            <javadoc line="22">
                Returns a new type variable declaration. Note that &lt;tt&gt;name&lt;/tt&gt;
                  may be empty (but not &lt;tt&gt;null&lt;/tt&gt;). If &lt;tt&gt;bounds&lt;/tt&gt; is
                  empty, a bound of &lt;tt&gt;java.lang.Object&lt;/tt&gt; is used.                
                <param>
                    name The name of the type variable                    
                </param>
                <param>
                    bounds An array of abstract syntax trees representing
                      the upper bound(s) on the type variable being declared                    
                </param>
                <return>
                    a new type variable declaration                    
                </return>
                <throws>
                    NullPointerException - if any of the actual parameters
                      or any of the elements of &lt;tt&gt;bounds&lt;/tt&gt; are &lt;tt&gt;null&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="makeParameterizedType" type="ParameterizedType" line="34"/>
            <javadoc line="34">
                Return an instance of the &lt;tt&gt;ParameterizedType&lt;/tt&gt; interface
                  that corresponds to a generic type instantiation of the
                  generic declaration &lt;tt&gt;declaration&lt;/tt&gt; with actual type arguments
                  &lt;tt&gt;typeArgs&lt;/tt&gt;.
                  If &lt;tt&gt;owner&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the declaring class of
                  &lt;tt&gt;declaration&lt;/tt&gt; is used as the owner of this parameterized
                  type.
                  &lt;p&gt; This method throws a MalformedParameterizedTypeException
                  under the following circumstances:
                  If the type declaration does not represent a generic declaration
                  (i.e., it is not an instance of &lt;tt&gt;GenericDeclaration&lt;/tt&gt;).
                  If the number of actual type arguments (i.e., the size of the
                  array &lt;tt&gt;typeArgs&lt;/tt&gt;) does not correspond to the number of
                  formal type arguments.
                  If any of the actual type arguments is not an instance of the
                  bounds on the corresponding formal.                
                <param>
                    declaration - the generic type declaration that is to be
                      instantiated                    
                </param>
                <param>
                    typeArgs - the list of actual type arguments                    
                </param>
                <return>
                    - a parameterized type representing the instantiation
                      of the declaration with the actual type arguments                    
                </return>
                <throws>
                    MalformedParameterizedTypeException - if the instantiation
                      is invalid                    
                </throws>
                <throws>
                    NullPointerException - if any of &lt;tt&gt;declaration&lt;/tt&gt;
                      , &lt;tt&gt;typeArgs&lt;/tt&gt;
                      or any of the elements of &lt;tt&gt;typeArgs&lt;/tt&gt; are &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="findTypeVariable" type="TypeVariable&lt;?&gt;" line="63"/>
            <javadoc line="63">
                Returns the type variable with name &lt;tt&gt;name&lt;/tt&gt;, if such
                  a type variable is declared in the
                  scope used to create this factory.
                  Returns &lt;tt&gt;null&lt;/tt&gt; otherwise.                
                <param>
                    name - the name of the type variable to search for                    
                </param>
                <return>
                    - the type variable with name &lt;tt&gt;name&lt;/tt&gt;, or &lt;tt&gt;null&lt;/tt&gt;                    
                </return>
                <throws>
                    NullPointerException - if any of actual parameters are
                      &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="makeWildcard" type="WildcardType" line="74"/>
            <javadoc line="74">
                Returns a new wildcard type variable. If
                  &lt;tt&gt;ubs&lt;/tt&gt; is empty, a bound of &lt;tt&gt;java.lang.Object&lt;/tt&gt; is used.                
                <param>
                    ubs An array of abstract syntax trees representing
                      the upper bound(s) on the type variable being declared                    
                </param>
                <param>
                    lbs An array of abstract syntax trees representing
                      the lower bound(s) on the type variable being declared                    
                </param>
                <return>
                    a new wildcard type variable                    
                </return>
                <throws>
                    NullPointerException - if any of the actual parameters
                      or any of the elements of &lt;tt&gt;ubs&lt;/tt&gt; or &lt;tt&gt;lbs&lt;/tt&gt;are
                      &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="makeNamedType" type="Type" line="87"/>
            <method name="makeArrayType" type="Type" line="88"/>
            <javadoc line="88">
                Returns a (possibly generic) array type.
                  If the component type is a parameterized type, it must
                  only have unbounded wildcard arguemnts, otherwise
                  a MalformedParameterizedTypeException is thrown.                
                <param>
                    componentType - the component type of the array                    
                </param>
                <return>
                    a (possibly generic) array type.                    
                </return>
                <throws>
                    MalformedParameterizedTypeException if &lt;tt&gt;componentType&lt;/tt&gt;
                      is a parameterized type with non-wildcard type arguments                    
                </throws>
                <throws>
                    NullPointerException - if any of the actual parameters
                      are &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="makeByte" type="Type" line="101"/>
            <javadoc line="101">
                Returns the reflective representation of type &lt;tt&gt;byte&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;byte&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeBool" type="Type" line="106"/>
            <javadoc line="106">
                Returns the reflective representation of type &lt;tt&gt;boolean&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;boolean&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeShort" type="Type" line="111"/>
            <javadoc line="111">
                Returns the reflective representation of type &lt;tt&gt;short&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;short&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeChar" type="Type" line="116"/>
            <javadoc line="116">
                Returns the reflective representation of type &lt;tt&gt;char&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;char&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeInt" type="Type" line="121"/>
            <javadoc line="121">
                Returns the reflective representation of type &lt;tt&gt;int&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;int&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeLong" type="Type" line="126"/>
            <javadoc line="126">
                Returns the reflective representation of type &lt;tt&gt;long&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;long&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeFloat" type="Type" line="131"/>
            <javadoc line="131">
                Returns the reflective representation of type &lt;tt&gt;float&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;float&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeDouble" type="Type" line="136"/>
            <javadoc line="136">
                Returns the reflective representation of type &lt;tt&gt;double&lt;/tt&gt;.                
                <return>
                    the reflective representation of type &lt;tt&gt;double&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="makeVoid" type="Type" line="141"/>
            <javadoc line="141">
                Returns the reflective representation of &lt;tt&gt;void&lt;/tt&gt;.                
                <return>
                    the reflective representation of &lt;tt&gt;void&lt;/tt&gt;.                    
                </return>
            </javadoc>
        </interface>
    </source>