<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.repository">
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.tree.ClassSignature"/>
        <import package="sun.reflect.generics.tree.TypeTree"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <import package="sun.reflect.generics.parser.SignatureParser"/>
        <import package="java.lang.reflect.Type"/>
        <class name="ClassRepository" line="36">
            <extends class="GenericDeclRepository">
                <type_params>
                    <type_param name="ClassSignature"/>
                </type_params>
            </extends>
            <comment line="44">
                caches the generic superclass info                
            </comment>
            <comment line="45">
                caches the generic superinterface info                
            </comment>
            <comment line="47">
                private, to enforce use of static factory                
            </comment>
            <comment line="69">
                public API                
            </comment>
            <comment line="70">
                When queried for a particular piece of type information, the
                 general pattern is to consult the corresponding cached value.
                 If the corresponding field is non-null, it is returned.
                 If not, it is created lazily. This is done by selecting the appropriate
                 part of the tree and transforming it into a reflective object
                 using a visitor.
                 a visitor, which is created by feeding it the factory
                 with which the repository was created.                
            </comment>
            <javadoc line="36">
                This class represents the generic type information for a class.
                  The code is not dependent on a particular reflective implementation.
                  It is designed to be used unchanged by at least core reflection and JDI.                
            </javadoc>
            <declaration name="superclass" type="Type" line="43"/>
            <declaration name="superInterfaces" type="Type[]" line="44"/>
            <method name="ClassRepository" type="constructor" line="47">
                <params>
                    <param name="rawSig" type="String"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="parse" type="ClassSignature" line="51">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="55">
                Static factory method.                
                <param>
                    rawSig - the generic signature of the reflective object
                      that this repository is servicing                    
                </param>
                <param>
                    f - a factory that will provide instances of reflective
                      objects when this repository converts its AST                    
                </param>
                <return>
                    a <tt>ClassRepository</tt> that manages the generic type
                      information represented in the signature <tt>rawSig</tt>                    
                </return>
            </javadoc>
            <method name="make" type="ClassRepository" line="64">
                <params>
                    <param name="rawSig" type="String"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getSuperclass" type="Type" line="80">
                <comment line="82">
                    lazily initialize superclass                    
                </comment>
                <comment line="83">
                    obtain visitor                    
                </comment>
                <comment line="84">
                    Extract superclass subtree from AST and reify                    
                </comment>
                <comment line="86">
                    extract result from visitor and cache it                    
                </comment>
                <comment line="89">
                    return cached result                    
                </comment>
                <scope line="81">
                    <declaration name="r" type="Reifier" line="82"/>
                </scope>
            </method>
            <method name="getSuperInterfaces" type="Type[]" line="91">
                <comment line="93">
                    lazily initialize super interfaces                    
                </comment>
                <comment line="94">
                    first, extract super interface subtree(s) from AST                    
                </comment>
                <comment line="96">
                    create array to store reified subtree(s)                    
                </comment>
                <comment line="98">
                    reify all subtrees                    
                </comment>
                <comment line="100">
                    obtain visitor                    
                </comment>
                <comment line="101">
                    reify subtree                    
                </comment>
                <comment line="102">
                    extract result from visitor and store it                    
                </comment>
                <comment line="105">
                    cache overall result                    
                </comment>
                <comment line="107">
                    return cached result                    
                </comment>
                <scope line="92">
                    <declaration name="ts" type="TypeTree[]" line="94"/>
                    <declaration name="sis" type="Type[]" line="96"/>
                    <scope line="98">
                        <declaration name="r" type="Reifier" line="99"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>