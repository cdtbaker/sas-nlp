<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.visitor">
        <import package="java.lang.reflect.Type"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="sun.reflect.generics.tree"/>
        <import package="sun.reflect.generics.factory"/>
        <class name="Reifier" line="7">
            <implements interface="TypeTreeVisitor">
                <type_params>
                    <type_param name="Type"/>
                </type_params>
            </implements>
            <javadoc line="7">
                Visitor that converts AST to reified types.                
            </javadoc>
            <declaration name="resultType" type="Type" line="11"/>
            <declaration name="factory" type="GenericsFactory" line="12"/>
            <method name="Reifier" type="constructor" line="13">
                <params>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getFactory" type="GenericsFactory" line="16"/>
            <javadoc line="19">
                Factory method. The resulting visitor will convert an AST
                  representing generic signatures into corresponding reflective
                  objects, using the provided factory, &lt;tt&gt;f&lt;/tt&gt;.                
                <param>
                    f - a factory that can be used to manufacture reflective
                      objects returned by this visitor                    
                </param>
                <return>
                    A visitor that can be used to reify ASTs representing
                      generic type information into reflective objects                    
                </return>
            </javadoc>
            <method name="make" type="Reifier" line="28">
                <params>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="reifyTypeArguments" type="Type[]" line="31">
                <params>
                    <param name="tas" type="TypeArgument[]"/>
                </params>
                <declaration name="ts" type="Type[]" line="32"/>
                <scope line="33"/>
            </method>
            <javadoc line="39">
                Accessor for the result of the last visit by this visitor,                
                <return>
                    The type computed by this visitor based on its last
                      visit                    
                </return>
            </javadoc>
            <method name="getResult" type="Type" line="44"/>
            <method name="visitFormalTypeParameter" type="void" line="48">
                <params>
                    <param name="ftp" type="FormalTypeParameter"/>
                </params>
            </method>
            <method name="visitClassTypeSignature" type="void" line="51">
                <params>
                    <param name="ct" type="ClassTypeSignature"/>
                </params>
                <declaration name="scts" type="List&lt;SimpleClassTypeSignature&gt;" line="52"/>
                <declaration name="iter" type="Iterator&lt;SimpleClassTypeSignature&gt;" line="54"/>
                <declaration name="sc" type="SimpleClassTypeSignature" line="55"/>
                <declaration name="n" type="StringBuilder" line="56"/>
                <declaration name="dollar" type="boolean" line="57"/>
                <scope line="58"/>
                <declaration name="c" type="Type" line="64"/>
                <scope line="65"/>
                <scope line="69">
                    <declaration name="pts" type="Type[]" line="71"/>
                    <declaration name="owner" type="Type" line="72"/>
                    <scope line="74"/>
                </scope>
            </method>
            <method name="visitArrayTypeSignature" type="void" line="85">
                <params>
                    <param name="a" type="ArrayTypeSignature"/>
                </params>
                <declaration name="ct" type="Type" line="87"/>
            </method>
            <method name="visitTypeVariableSignature" type="void" line="90">
                <params>
                    <param name="tv" type="TypeVariableSignature"/>
                </params>
            </method>
            <method name="visitWildcard" type="void" line="93">
                <params>
                    <param name="w" type="Wildcard"/>
                </params>
            </method>
            <method name="visitSimpleClassTypeSignature" type="void" line="96">
                <params>
                    <param name="sct" type="SimpleClassTypeSignature"/>
                </params>
            </method>
            <method name="visitBottomSignature" type="void" line="99">
                <params>
                    <param name="b" type="BottomSignature"/>
                </params>
            </method>
            <method name="visitByteSignature" type="void" line="101">
                <params>
                    <param name="b" type="ByteSignature"/>
                </params>
            </method>
            <method name="visitBooleanSignature" type="void" line="104">
                <params>
                    <param name="b" type="BooleanSignature"/>
                </params>
            </method>
            <method name="visitShortSignature" type="void" line="107">
                <params>
                    <param name="s" type="ShortSignature"/>
                </params>
            </method>
            <method name="visitCharSignature" type="void" line="110">
                <params>
                    <param name="c" type="CharSignature"/>
                </params>
            </method>
            <method name="visitIntSignature" type="void" line="113">
                <params>
                    <param name="i" type="IntSignature"/>
                </params>
            </method>
            <method name="visitLongSignature" type="void" line="116">
                <params>
                    <param name="l" type="LongSignature"/>
                </params>
            </method>
            <method name="visitFloatSignature" type="void" line="119">
                <params>
                    <param name="f" type="FloatSignature"/>
                </params>
            </method>
            <method name="visitDoubleSignature" type="void" line="122">
                <params>
                    <param name="d" type="DoubleSignature"/>
                </params>
            </method>
            <method name="visitVoidDescriptor" type="void" line="125">
                <params>
                    <param name="v" type="VoidDescriptor"/>
                </params>
            </method>
        </class>
    </source>