<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.repository">
        <import package="java.lang.reflect.Type"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.parser.SignatureParser"/>
        <import package="sun.reflect.generics.tree.FieldTypeSignature"/>
        <import package="sun.reflect.generics.tree.MethodTypeSignature"/>
        <import package="sun.reflect.generics.tree.TypeSignature"/>
        <import package="sun.reflect.generics.visitor.Reifier"/>
        <class name="ConstructorRepository" line="38">
            <extends class="GenericDeclRepository">
                <type_params>
                    <type_param name="MethodTypeSignature"/>
                </type_params>
            </extends>
            <comment line="47">
                caches the generic parameter types info                
            </comment>
            <comment line="48">
                caches the generic exception types info                
            </comment>
            <comment line="50">
                protected, to enforce use of static factory yet allow subclassing                
            </comment>
            <comment line="73">
                public API                
            </comment>
            <comment line="75">
                When queried for a particular piece of type information, the
                 general pattern is to consult the corresponding cached value.
                 If the corresponding field is non-null, it is returned.
                 If not, it is created lazily. This is done by selecting the appropriate
                 part of the tree and transforming it into a reflective object
                 using a visitor.
                 a visitor, which is created by feeding it the factory
                 with which the repository was created.                
            </comment>
            <javadoc line="38">
                This class represents the generic type information for a constructor.
                  The code is not dependent on a particular reflective implementation.
                  It is designed to be used unchanged by at least core reflection and JDI.                
            </javadoc>
            <declaration name="paramTypes" type="Type[]" line="46"/>
            <declaration name="exceptionTypes" type="Type[]" line="47"/>
            <method name="ConstructorRepository" type="constructor" line="50">
                <params>
                    <param name="rawSig" type="String"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="parse" type="MethodTypeSignature" line="54">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="58">
                Static factory method.                
                <param>
                    rawSig - the generic signature of the reflective object
                      that this repository is servicing                    
                </param>
                <param>
                    f - a factory that will provide instances of reflective
                      objects when this repository converts its AST                    
                </param>
                <return>
                    a <tt>ConstructorRepository</tt> that manages the generic type
                      information represented in the signature <tt>rawSig</tt>                    
                </return>
            </javadoc>
            <method name="make" type="ConstructorRepository" line="68">
                <params>
                    <param name="rawSig" type="String"/>
                    <param name="f" type="GenericsFactory"/>
                </params>
            </method>
            <method name="getParameterTypes" type="Type[]" line="85">
                <comment line="86">
                    lazily initialize parameter types                    
                </comment>
                <comment line="87">
                    first, extract parameter type subtree(s) from AST                    
                </comment>
                <comment line="89">
                    create array to store reified subtree(s)                    
                </comment>
                <comment line="91">
                    reify all subtrees                    
                </comment>
                <comment line="93">
                    obtain visitor                    
                </comment>
                <comment line="94">
                    reify subtree                    
                </comment>
                <comment line="95">
                    extract result from visitor and store it                    
                </comment>
                <comment line="98">
                    cache overall result                    
                </comment>
                <comment line="100">
                    return cached result                    
                </comment>
                <scope line="86">
                    <declaration name="pts" type="TypeSignature[]" line="88"/>
                    <declaration name="ps" type="Type[]" line="90"/>
                    <scope line="92">
                        <declaration name="r" type="Reifier" line="93"/>
                    </scope>
                </scope>
            </method>
            <method name="getExceptionTypes" type="Type[]" line="103">
                <comment line="104">
                    lazily initialize exception types                    
                </comment>
                <comment line="105">
                    first, extract exception type subtree(s) from AST                    
                </comment>
                <comment line="107">
                    create array to store reified subtree(s)                    
                </comment>
                <comment line="109">
                    reify all subtrees                    
                </comment>
                <comment line="111">
                    obtain visitor                    
                </comment>
                <comment line="112">
                    reify subtree                    
                </comment>
                <comment line="113">
                    extract result from visitor and store it                    
                </comment>
                <comment line="116">
                    cache overall result                    
                </comment>
                <comment line="118">
                    return cached result                    
                </comment>
                <scope line="104">
                    <declaration name="ets" type="FieldTypeSignature[]" line="106"/>
                    <declaration name="es" type="Type[]" line="108"/>
                    <scope line="110">
                        <declaration name="r" type="Reifier" line="111"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>