<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.scope">
        <import package="java.lang.reflect.TypeVariable"/>
        <class name="DummyScope" line="30">
            <comment line="40">
                Caches the unique instance of this class; instances contain no data
                 so we can use the singleton pattern                
            </comment>
            <comment line="44">
                constructor is private to enforce use of factory method                
            </comment>
            <implements interface="Scope"/>
            <javadoc line="30">
                This class is used to provide enclosing scopes for top level classes.
                  We cannot use &lt;tt&gt;null&lt;/tt&gt; to represent such a scope, since the
                  enclosing scope is computed lazily, and so the field storing it is
                  null until it has been computed. Therefore, &lt;tt&gt;null&lt;/tt&gt; is reserved
                  to represent an as-yet-uncomputed scope, and cannot be used for any
                  other kind of scope.                
            </javadoc>
            <declaration name="singleton" type="DummyScope" line="41"/>
            <method name="DummyScope" type="constructor" line="44"/>
            <javadoc line="46">
                Factory method. Enforces the singleton pattern - only one
                  instance of this class ever exists.                
            </javadoc>
            <method name="make" type="DummyScope" line="50"/>
            <javadoc line="54">
                Lookup a type variable in the scope, using its name. Always returns
                  &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    name - the name of the type variable being looked up                    
                </param>
                <return>
                    null                    
                </return>
            </javadoc>
            <method name="lookup" type="TypeVariable<?>" line="60">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
        </class>
    </source>