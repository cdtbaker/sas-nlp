<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.reflectiveObjects">
        <import package="sun.reflect.generics.tree.FieldTypeSignature"/>
        <import package="java.lang.reflect.MalformedParameterizedTypeException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.ParameterizedType"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.TypeVariable"/>
        <import package="java.util.Arrays"/>
        <class name="ParameterizedTypeImpl" line="9">
            <implements interface="ParameterizedType"/>
            <javadoc line="9">
                Implementing class for ParameterizedType interface.                
            </javadoc>
            <declaration name="actualTypeArguments" type="Type[]" line="13"/>
            <declaration name="rawType" type="Class&lt;?&gt;" line="14"/>
            <declaration name="ownerType" type="Type" line="15"/>
            <method name="ParameterizedTypeImpl" type="constructor" line="16">
                <params>
                    <param name="rawType" type="Class<?>"/>
                    <param name="actualTypeArguments" type="Type[]"/>
                    <param name="ownerType" type="Type"/>
                </params>
                <scope line="19"/>
                <scope line="22"/>
            </method>
            <method name="validateConstructorArguments" type="void" line="27">
                <declaration name="formals" type="TypeVariable[]" line="28"/>
                <scope line="29"/>
                <scope line="32"/>
            </method>
            <javadoc line="35">
                Static factory. Given a (generic) class, actual type arguments
                  and an owner type, creates a parameterized type.
                  This class can be instantiated with a a raw type that does not
                  represent a generic type, provided the list of actual type
                  arguments is empty.
                  If the ownerType argument is null, the declaring class of the
                  raw type is used as the owner type.
                  &lt;p&gt; This method throws a MalformedParameterizedTypeException
                  under the following circumstances:
                  If the number of actual type arguments (i.e., the size of the
                  array &lt;tt&gt;typeArgs&lt;/tt&gt;) does not correspond to the number of
                  formal type arguments.
                  If any of the actual type arguments is not an instance of the
                  bounds on the corresponding formal.                
                <param>
                    rawType the Class representing the generic type declaration being
                      instantiated                    
                </param>
                <param>
                    actualTypeArguments - a (possibly empty) array of types
                      representing the actual type arguments to the parameterized type                    
                </param>
                <param>
                    ownerType - the enclosing type, if known.                    
                </param>
                <return>
                    An instance of <tt>ParameterizedType</tt>                    
                </return>
                <throws>
                    MalformedParameterizedTypeException - if the instantiation
                      is invalid                    
                </throws>
            </javadoc>
            <method name="make" type="ParameterizedTypeImpl" line="59">
                <params>
                    <param name="rawType" type="Class<?>"/>
                    <param name="actualTypeArguments" type="Type[]"/>
                    <param name="ownerType" type="Type"/>
                </params>
            </method>
            <javadoc line="62">
                Returns an array of &lt;tt&gt;Type&lt;/tt&gt; objects representing the actual type
                  arguments to this type.
                  &lt;p&gt;Note that in some cases, the returned array be empty. This can occur
                  if this type represents a non-parameterized type nested within
                  a parameterized type.                
                <return>
                    an array of <tt>Type</tt> objects representing the actual type
                      arguments to this type                    
                </return>
                <throws>
                    <tt>TypeNotPresentException</tt> if any of the
                      actual type arguments refers to a non-existent type declaration                    
                </throws>
                <throws>
                    <tt>MalformedParameterizedTypeException</tt> if any of the
                      actual type parameters refer to a parameterized type that cannot
                      be instantiated for any reason                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getActualTypeArguments" type="Type[]" line="77"/>
            <javadoc line="80">
                Returns the &lt;tt&gt;Type&lt;/tt&gt; object representing the class or interface
                  that declared this type.                
                <return>
                    the <tt>Type</tt> object representing the class or interface
                      that declared this type                    
                </return>
            </javadoc>
            <method name="getRawType" type="Class<?>" line="86"/>
            <javadoc line="89">
                Returns a &lt;tt&gt;Type&lt;/tt&gt; object representing the type that this type
                  is a member of.  For example, if this type is &lt;tt&gt;O&lt;T&gt;.I&lt;S&gt;&lt;/tt&gt;,
                  return a representation of &lt;tt&gt;O&lt;T&gt;&lt;/tt&gt;.
                  &lt;p&gt;If this type is a top-level type, &lt;tt&gt;null&lt;/tt&gt; is returned.                
                <return>
                    a <tt>Type</tt> object representing the type that
                      this type is a member of. If this type is a top-level type,
                      <tt>null</tt> is returned                    
                </return>
                <throws>
                    <tt>TypeNotPresentException</tt> if the owner type
                      refers to a non-existent type declaration                    
                </throws>
                <throws>
                    <tt>MalformedParameterizedTypeException</tt> if the owner type
                      refers to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
            </javadoc>
            <method name="getOwnerType" type="Type" line="103"/>
            <method name="equals" type="boolean" line="106">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="107">
                    <declaration name="that" type="ParameterizedType" line="108"/>
                    <declaration name="thatOwner" type="Type" line="110"/>
                    <declaration name="thatRawType" type="Type" line="111"/>
                    <scope line="112">
                        <declaration name="ownerEquality" type="boolean" line="113"/>
                        <declaration name="rawEquality" type="boolean" line="114"/>
                        <declaration name="typeArgEquality" type="boolean" line="115"/>
                        <scope line="116"/>
                    </scope>
                </scope>
            </method>
            <method name="hashCode" type="int" line="126"/>
            <method name="toString" type="String" line="129">
                <declaration name="sb" type="StringBuilder" line="130"/>
                <scope line="131">
                    <scope line="135"/>
                </scope>
                <scope line="141">
                    <declaration name="first" type="boolean" line="143"/>
                    <scope line="144"/>
                </scope>
            </method>
        </class>
    </source>