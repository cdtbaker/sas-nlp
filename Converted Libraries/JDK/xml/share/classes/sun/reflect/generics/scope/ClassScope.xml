<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.reflect.generics.scope">
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Method"/>
        <class name="ClassScope" line="4">
            <extends class="AbstractScope">
                <type_params>
                    <type_param name="Class<?>"/>
                </type_params>
            </extends>
            <implements interface="Scope"/>
            <javadoc line="4">
                This class represents the scope containing the type variables of
                  a class.                
            </javadoc>
            <method name="ClassScope" type="constructor" line="9">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="12">
                Overrides the abstract method in the superclass.                
                <return>
                    the enclosing scope                    
                </return>
            </javadoc>
            <method name="computeEnclosingScope" type="Scope" line="16">
                <declaration name="receiver" type="Class&lt;?&gt;" line="17"/>
                <declaration name="m" type="Method" line="18"/>
                <declaration name="cnstr" type="Constructor&lt;?&gt;" line="20"/>
                <declaration name="c" type="Class&lt;?&gt;" line="22"/>
            </method>
            <javadoc line="26">
                Factory method. Takes a &lt;tt&gt;Class&lt;/tt&gt; object and creates a
                  scope for it.                
                <param>
                    c - a Class whose scope we want to obtain                    
                </param>
                <return>
                    The type-variable scope for the class c                    
                </return>
            </javadoc>
            <method name="make" type="ClassScope" line="32">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
            </method>
        </class>
    </source>