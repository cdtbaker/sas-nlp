<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.launcher">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.RoundingMode"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Locale.Category"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="java.util.jar.Attributes"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.Manifest"/>
        <declaration name="MAIN_CLASS" type="String" line="68"/>
        <declaration name="outBuf" type="StringBuilder" line="70"/>
        <declaration name="javarb" type="ResourceBundle" line="72"/>
        <declaration name="INDENT" type="String" line="74"/>
        <declaration name="VM_SETTINGS" type="String" line="75"/>
        <declaration name="PROP_SETTINGS" type="String" line="76"/>
        <declaration name="LOCALE_SETTINGS" type="String" line="77"/>
        <declaration name="diagprop" type="String" line="80"/>
        <declaration name="defaultBundleName" type="String" line="82"/>
        <class name="ResourceBundleHolder" line="84">
            <comment line="292">
                scale the incoming values to a human readable form, represented as
                 K, M, G and T, see java.c parse_size for the scaled values and
                 suffixes. The lowest possible scaled value is Kilo.                
            </comment>
            <declaration name="RB" type="ResourceBundle" line="85"/>
        </class>
        <method name="showSettings" type="void" line="113">
            <params>
                <param name="printToStderr" type="boolean"/>
                <param name="optionFlag" type="String"/>
                <param name="initialHeapSize" type="long"/>
                <param name="maxHeapSize" type="long"/>
                <param name="stackSize" type="long"/>
                <param name="isServer" type="boolean"/>
            </params>
            <declaration name="ostream" type="PrintStream" line="115"/>
            <declaration name="opts" type="String" line="116"/>
            <declaration name="optStr" type="String" line="117"/>
        </method>
        <method name="printVmSettings" type="void" line="145">
            <params>
                <param name="ostream" type="PrintStream"/>
                <param name="initialHeapSize" type="long"/>
                <param name="maxHeapSize" type="long"/>
                <param name="stackSize" type="long"/>
                <param name="isServer" type="boolean"/>
            </params>
            <scope line="148"/>
            <scope line="152"/>
            <scope line="156"/>
            <scope line="159"/>
        </method>
        <method name="printProperties" type="void" line="173">
            <params>
                <param name="ostream" type="PrintStream"/>
            </params>
            <declaration name="p" type="Properties" line="174"/>
            <declaration name="sortedPropertyKeys" type="List&lt;String&gt;" line="176"/>
            <scope line="179"/>
        </method>
        <method name="isPath" type="boolean" line="185">
            <params>
                <param name="key" type="String"/>
            </params>
        </method>
        <method name="printPropertyValue" type="void" line="190">
            <params>
                <param name="ostream" type="PrintStream"/>
                <param name="key" type="String"/>
                <param name="value" type="String"/>
            </params>
            <comment line="202">
                print any bizzare line separators in hex, but really                
            </comment>
            <comment line="203">
                shouldn&apos;t happen.                
            </comment>
            <comment line="218">
                first line treated specially                
            </comment>
            <comment line="221">
                following lines prefix with indents                
            </comment>
            <scope line="192">
                <scope line="193"/>
            </scope>
            <scope line="211"/>
            <declaration name="values" type="String[]" line="215"/>
            <declaration name="first" type="boolean" line="216"/>
            <scope line="217">
                <scope line="218"/>
                <scope line="221"/>
            </scope>
        </method>
        <method name="printLocale" type="void" line="230">
            <params>
                <param name="ostream" type="PrintStream"/>
            </params>
            <declaration name="locale" type="Locale" line="231"/>
        </method>
        <method name="printLocales" type="void" line="243">
            <params>
                <param name="ostream" type="PrintStream"/>
            </params>
            <comment line="249">
                Locale does not implement Comparable so we convert it to String                
            </comment>
            <comment line="250">
                and sort it for pretty printing.                
            </comment>
            <comment line="265">
                print columns of 8                
            </comment>
            <declaration name="tlocales" type="Locale[]" line="244"/>
            <declaration name="len" type="int" line="245"/>
            <scope line="246"/>
            <declaration name="sortedSet" type="Set&lt;String&gt;" line="251"/>
            <scope line="252"/>
            <declaration name="iter" type="Iterator&lt;String&gt;" line="257"/>
            <declaration name="last" type="int" line="258"/>
            <scope line="259">
                <declaration name="s" type="String" line="260"/>
                <scope line="262"/>
                <scope line="266"/>
            </scope>
        </method>
        <declaration name="size" type="long" line="279"/>
        <declaration name="abbrev" type="String" line="280"/>
        <method name="SizePrefix" type="constructor" line="282">
            <params>
                <param name="size" type="long"/>
                <param name="abbrev" type="String"/>
            </params>
        </method>
        <method name="scale" type="String" line="287">
            <params>
                <param name="v" type="long"/>
                <param name="prefix" type="SizePrefix"/>
            </params>
        </method>
        <method name="scaleValue" type="String" line="296">
            <params>
                <param name="v" type="long"/>
            </params>
            <scope line="297"/>
            <scope line="299"/>
            <scope line="301"/>
            <scope line="303"/>
        </method>
        <javadoc line="309">
            A private helper method to get a localized message and also
              apply any arguments that we might pass.            
        </javadoc>
        <method name="getLocalizedMessage" type="String" line="313">
            <params>
                <param name="key" type="String"/>
                <param name="args" type="Object"/>
            </params>
            <declaration name="msg" type="String" line="314"/>
        </method>
        <javadoc line="318">
            The java -help message is split into 3 parts, an invariant, followed
              by a set of platform dependent variant messages, finally an invariant
              set of lines.
              This method initializes the help message for the first time, and also
              assembles the invariant header part of the message.            
        </javadoc>
        <method name="initHelpMessage" type="void" line="325">
            <params>
                <param name="progname" type="String"/>
            </params>
        </method>
        <javadoc line="334">
            Appends the vm selection messages to the header, already created.
              initHelpSystem must already be called.            
        </javadoc>
        <method name="appendVmSelectMessage" type="void" line="338">
            <params>
                <param name="vm1" type="String"/>
                <param name="vm2" type="String"/>
            </params>
        </method>
        <javadoc line="343">
            Appends the vm synoym message to the header, already created.
              initHelpSystem must be called before using this method.            
        </javadoc>
        <method name="appendVmSynonymMessage" type="void" line="347">
            <params>
                <param name="vm1" type="String"/>
                <param name="vm2" type="String"/>
            </params>
        </method>
        <javadoc line="352">
            Appends the vm Ergo message to the header, already created.
              initHelpSystem must be called before using this method.            
        </javadoc>
        <method name="appendVmErgoMessage" type="void" line="356">
            <params>
                <param name="isServerClass" type="boolean"/>
                <param name="vm" type="String"/>
            </params>
        </method>
        <javadoc line="365">
            Appends the last invariant part to the previously created messages,
              and finishes up the printing to the desired output stream.
              initHelpSystem must be called before using this method.            
        </javadoc>
        <method name="printHelpMessage" type="void" line="370">
            <params>
                <param name="printToStderr" type="boolean"/>
            </params>
            <declaration name="ostream" type="PrintStream" line="371"/>
        </method>
        <javadoc line="377">
            Prints the Xusage text to the desired output stream.            
        </javadoc>
        <method name="printXUsageMessage" type="void" line="380">
            <params>
                <param name="printToStderr" type="boolean"/>
            </params>
            <declaration name="ostream" type="PrintStream" line="381"/>
        </method>
        <method name="getMainClassFromJar" type="String" line="386">
            <params>
                <param name="ostream" type="PrintStream"/>
                <param name="jarname" type="String"/>
            </params>
            <scope line="387">
                <declaration name="jarFile" type="JarFile" line="388"/>
                <scope line="389">
                    <declaration name="manifest" type="Manifest" line="391"/>
                    <scope line="392"/>
                    <declaration name="mainAttrs" type="Attributes" line="395"/>
                    <scope line="396"/>
                </scope>
                <scope line="400">
                    <scope line="401"/>
                </scope>
            </scope>
            <scope line="405"/>
        </method>
        <declaration name="LM_UNKNOWN" type="int" line="415"/>
        <declaration name="LM_CLASS" type="int" line="416"/>
        <declaration name="LM_JAR" type="int" line="417"/>
        <method name="abort" type="void" line="419">
            <params>
                <param name="ostream" type="PrintStream"/>
                <param name="t" type="Throwable"/>
                <param name="msgKey" type="String"/>
                <param name="args" type="Object"/>
            </params>
            <scope line="420"/>
            <scope line="423">
                <scope line="424"/>
                <scope line="426"/>
            </scope>
        </method>
        <javadoc line="433">
            This method does the following:
              1. gets the classname from a Jar&apos;s manifest, if necessary
              2. loads the class using the System ClassLoader
              3. ensures the availability and accessibility of the main method,
              using signatureDiagnostic method.
              a. does the class exist
              b. is there a main
              c. is the main public
              d. is the main static
              c. does the main take a String array for args
              4. and off we go......            
            <param>
                printToStderr                
            </param>
            <param>
                isJar                
            </param>
            <param>
                name                
            </param>
            <return>
                                
            </return>
        </javadoc>
        <method name="checkAndLoadMain" type="Class<?>" line="453">
            <params>
                <param name="printToStderr" type="boolean"/>
                <param name="mode" type="int"/>
                <param name="what" type="String"/>
            </params>
            <comment line="456">
                get the class name                
            </comment>
            <comment line="466">
                should never happen                
            </comment>
            <declaration name="ostream" type="PrintStream" line="454"/>
            <declaration name="ld" type="ClassLoader" line="455"/>
            <declaration name="cn" type="String" line="457"/>
            <declaration name="c" type="Class&lt;?&gt;" line="470"/>
            <scope line="471"/>
            <scope line="473"/>
        </method>
        <method name="getMainMethod" type="Method" line="480">
            <params>
                <param name="ostream" type="PrintStream"/>
                <param name="clazz" type="Class<?>"/>
            </params>
            <comment line="488">
                getMethod (above) will choose the correct method, based
                 on its name and parameter type, however, we still have to
                 ensure that the method is static and returns a void.                
            </comment>
            <declaration name="classname" type="String" line="481"/>
            <declaration name="method" type="Method" line="482"/>
            <scope line="483"/>
            <scope line="485"/>
            <declaration name="mod" type="int" line="493"/>
            <scope line="494"/>
            <scope line="497"/>
        </method>
        <declaration name="encprop" type="String" line="503"/>
        <declaration name="encoding" type="String" line="504"/>
        <declaration name="isCharsetSupported" type="boolean" line="505"/>
        <method name="makePlatformString" type="String" line="511">
            <params>
                <param name="printToStderr" type="boolean"/>
                <param name="inArray" type="byte[]"/>
            </params>
            <comment line="525">
                keep the compiler happy                
            </comment>
            <declaration name="ostream" type="PrintStream" line="512"/>
            <scope line="513"/>
            <scope line="517">
                <declaration name="out" type="String" line="518"/>
            </scope>
            <scope line="522"/>
        </method>
    </source>