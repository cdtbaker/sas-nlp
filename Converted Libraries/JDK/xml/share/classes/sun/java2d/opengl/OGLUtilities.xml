<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Rectangle"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.Region"/>
        <class name="OGLUtilities" line="35">
            <javadoc line="35">
                This class contains a number of static utility methods that may be
                  called (via reflection) by a third-party library, such as JOGL, in order
                  to interoperate with the OGL-based Java 2D pipeline.
                  WARNING: These methods are being made available as a temporary measure
                  until we offer a more complete, public solution.  Like any sun. class,
                  this class is not an officially supported public API; it may be modified
                  at will or removed completely in a future release.                
            </javadoc>
            <declaration name="UNDEFINED" type="int" line="47"/>
            <javadoc line="47">
                These OGL-specific surface type constants are the same as those
                  defined in the OGLSurfaceData class and are duplicated here so that
                  clients of this API can access them more easily via reflection.                
            </javadoc>
            <declaration name="WINDOW" type="int" line="53"/>
            <declaration name="PBUFFER" type="int" line="54"/>
            <declaration name="TEXTURE" type="int" line="55"/>
            <declaration name="FLIP_BACKBUFFER" type="int" line="56"/>
            <declaration name="FBOBJECT" type="int" line="57"/>
            <method name="OGLUtilities" type="constructor" line="59"/>
            <javadoc line="62">
                Returns true if the current thread is the OGL QueueFlusher thread.                
            </javadoc>
            <method name="isQueueFlusherThread" type="boolean" line="65"/>
            <javadoc line="69">
                Invokes the given Runnable on the OGL QueueFlusher thread with the
                  OpenGL context corresponding to the given Graphics object made
                  current.  It is legal for OpenGL code executed in the given
                  Runnable to change the current OpenGL context; it will be reset
                  once the Runnable completes.  No guarantees are made as to the
                  state of the OpenGL context of the Graphics object; for
                  example, calling code must set the scissor box using the return
                  value from {@link #getOGLScissorBox} to avoid drawing
                  over other Swing components, and must typically set the OpenGL
                  viewport using the return value from {@link #getOGLViewport} to
                  make the client&apos;s OpenGL rendering appear in the correct place
                  relative to the scissor region.
                  In order to avoid deadlock, it is important that the given Runnable
                  does not attempt to acquire the AWT lock, as that will be handled
                  automatically as part of the &lt;code&gt;rq.flushAndInvokeNow()&lt;/code&gt; step.                
                <param>
                    g the Graphics object for the corresponding destination surface;
                      if null, the step making a context current to the destination surface
                      will be skipped                    
                </param>
                <param>
                    r the action to be performed on the QFT; cannot be null                    
                </param>
                <return>
                    true if the operation completed successfully, or false if
                      there was any problem making a context current to the surface
                      associated with the given Graphics object                    
                </return>
            </javadoc>
            <method name="invokeWithOGLContextCurrent" type="boolean" line="95">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="r" type="Runnable"/>
                </params>
                <comment line="108">
                    make a context current to the destination surface                    
                </comment>
                <comment line="112">
                    invoke the given runnable on the QFT                    
                </comment>
                <comment line="115">
                    invalidate the current context so that the next time we render                    
                </comment>
                <comment line="116">
                    with Java 2D, the context state will be completely revalidated                    
                </comment>
                <declaration name="rq" type="OGLRenderQueue" line="96"/>
                <scope line="98">
                    <scope line="99">
                        <scope line="100"/>
                        <declaration name="sData" type="SurfaceData" line="103"/>
                        <scope line="104"/>
                    </scope>
                </scope>
                <scope line="118"/>
            </method>
            <javadoc line="125">
                Invokes the given Runnable on the OGL QueueFlusher thread with the
                  &quot;shared&quot; OpenGL context (corresponding to the given
                  GraphicsConfiguration object) made current.  This method is typically
                  used when the Runnable needs a current context to complete its
                  operation, but does not require that the context be made current to
                  a particular surface.  For example, an application may call this
                  method so that the given Runnable can query the OpenGL capabilities
                  of the given GraphicsConfiguration, without making a context current
                  to a dummy surface (or similar hacky techniques).
                  In order to avoid deadlock, it is important that the given Runnable
                  does not attempt to acquire the AWT lock, as that will be handled
                  automatically as part of the &lt;code&gt;rq.flushAndInvokeNow()&lt;/code&gt; step.                
                <param>
                    config the GraphicsConfiguration object whose "shared"
                      context will be made current during this operation; if this value is
                      null or if OpenGL is not enabled for the GraphicsConfiguration, this
                      method will return false                    
                </param>
                <param>
                    r the action to be performed on the QFT; cannot be null                    
                </param>
                <return>
                    true if the operation completed successfully, or false if
                      there was any problem making the shared context current                    
                </return>
            </javadoc>
            <method name="invokeWithOGLSharedContextCurrent" type="boolean" line="151">
                <params>
                    <param name="config" type="GraphicsConfiguration"/>
                    <param name="r" type="Runnable"/>
                </params>
                <comment line="159">
                    make the &quot;shared&quot; context current for the given GraphicsConfig                    
                </comment>
                <comment line="162">
                    invoke the given runnable on the QFT                    
                </comment>
                <comment line="165">
                    invalidate the current context so that the next time we render                    
                </comment>
                <comment line="166">
                    with Java 2D, the context state will be completely revalidated                    
                </comment>
                <scope line="152"/>
                <declaration name="rq" type="OGLRenderQueue" line="156"/>
                <scope line="158"/>
                <scope line="168"/>
            </method>
            <javadoc line="175">
                Returns the Rectangle describing the OpenGL viewport on the
                  Java 2D surface associated with the given Graphics object and
                  component width and height. When a third-party library is
                  performing OpenGL rendering directly into the visible region of
                  the associated surface, this viewport helps the application
                  position the OpenGL output correctly on that surface.
                  Note that the x/y values in the returned Rectangle object represent
                  the lower-left corner of the viewport region, relative to the
                  lower-left corner of the given surface.                
                <param>
                    g the Graphics object for the corresponding destination surface;
                      cannot be null                    
                </param>
                <param>
                    componentWidth width of the component to be painted                    
                </param>
                <param>
                    componentHeight height of the component to be painted                    
                </param>
                <return>
                    a Rectangle describing the OpenGL viewport for the given
                      destination surface and component dimensions, or null if the given
                      Graphics object is invalid                    
                </return>
            </javadoc>
            <method name="getOGLViewport" type="Rectangle" line="198">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="componentWidth" type="int"/>
                    <param name="componentHeight" type="int"/>
                </params>
                <comment line="206">
                    this is the upper-left origin of the region to be painted,                    
                </comment>
                <comment line="207">
                    relative to the upper-left origin of the surface                    
                </comment>
                <comment line="208">
                    (in Java2D coordinates)                    
                </comment>
                <comment line="212">
                    this is the lower-left origin of the region to be painted,                    
                </comment>
                <comment line="213">
                    relative to the lower-left origin of the surface                    
                </comment>
                <comment line="214">
                    (in OpenGL coordinates)                    
                </comment>
                <scope line="199"/>
                <declaration name="sg2d" type="SunGraphics2D" line="203"/>
                <declaration name="sData" type="SurfaceData" line="204"/>
                <declaration name="x0" type="int" line="209"/>
                <declaration name="y0" type="int" line="210"/>
                <declaration name="surfaceBounds" type="Rectangle" line="215"/>
                <declaration name="x1" type="int" line="216"/>
                <declaration name="y1" type="int" line="217"/>
            </method>
            <javadoc line="222">
                Returns the Rectangle describing the OpenGL scissor box on the
                  Java 2D surface associated with the given Graphics object.  When a
                  third-party library is performing OpenGL rendering directly
                  into the visible region of the associated surface, this scissor box
                  must be set to avoid drawing over existing rendering results.
                  Note that the x/y values in the returned Rectangle object represent
                  the lower-left corner of the scissor region, relative to the
                  lower-left corner of the given surface.                
                <param>
                    g the Graphics object for the corresponding destination surface;
                      cannot be null                    
                </param>
                <return>
                    a Rectangle describing the OpenGL scissor box for the given
                      Graphics object and corresponding destination surface, or null if the
                      given Graphics object is invalid or the clip region is non-rectangular                    
                </return>
            </javadoc>
            <method name="getOGLScissorBox" type="Rectangle" line="239">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="248">
                    caller probably doesn&apos;t know how to handle shape clip                    
                </comment>
                <comment line="249">
                    appropriately, so just return null (Swing currently never                    
                </comment>
                <comment line="250">
                    sets a shape clip, but that could change in the future)                    
                </comment>
                <comment line="254">
                    this is the upper-left origin of the scissor box relative to the                    
                </comment>
                <comment line="255">
                    upper-left origin of the surface (in Java 2D coordinates)                    
                </comment>
                <comment line="259">
                    this is the width and height of the scissor region                    
                </comment>
                <comment line="263">
                    this is the lower-left origin of the scissor box relative to the                    
                </comment>
                <comment line="264">
                    lower-left origin of the surface (in OpenGL coordinates)                    
                </comment>
                <scope line="240"/>
                <declaration name="sg2d" type="SunGraphics2D" line="244"/>
                <declaration name="sData" type="SurfaceData" line="245"/>
                <declaration name="r" type="Region" line="246"/>
                <scope line="247"/>
                <declaration name="x0" type="int" line="256"/>
                <declaration name="y0" type="int" line="257"/>
                <declaration name="w" type="int" line="260"/>
                <declaration name="h" type="int" line="261"/>
                <declaration name="surfaceBounds" type="Rectangle" line="265"/>
                <declaration name="x1" type="int" line="266"/>
                <declaration name="y1" type="int" line="267"/>
            </method>
            <javadoc line="272">
                Returns an Object identifier for the Java 2D surface associated with
                  the given Graphics object.  This identifier may be used to determine
                  whether the surface has changed since the last invocation of this
                  operation, and thereby whether the OpenGL state corresponding to the
                  old surface must be destroyed and recreated.                
                <param>
                    g the Graphics object for the corresponding destination surface;
                      cannot be null                    
                </param>
                <return>
                    an identifier for the surface associated with the given
                      Graphics object, or null if the given Graphics object is invalid                    
                </return>
            </javadoc>
            <method name="getOGLSurfaceIdentifier" type="Object" line="284">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="285"/>
            </method>
            <javadoc line="291">
                Returns one of the OGL-specific surface type constants (defined in
                  this class), which describes the surface associated with the given
                  Graphics object.                
                <param>
                    g the Graphics object for the corresponding destination surface;
                      cannot be null                    
                </param>
                <return>
                    a constant that describes the surface associated with the
                      given Graphics object; if the given Graphics object is invalid (i.e.
                      is not associated with an OpenGL surface) this method will return
                      <code>OGLUtilities.UNDEFINED</code>                    
                </return>
            </javadoc>
            <method name="getOGLSurfaceType" type="int" line="303">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="304"/>
                <declaration name="sData" type="SurfaceData" line="307"/>
                <scope line="308"/>
            </method>
            <javadoc line="314">
                Returns the OpenGL texture target constant (either GL_TEXTURE_2D
                  or GL_TEXTURE_RECTANGLE_ARB) for the surface associated with the
                  given Graphics object.  This method is only useful for those surface
                  types that are backed by an OpenGL texture, namely {@code TEXTURE},{@code FBOBJECT}, and (on Windows only) {@code PBUFFER}.                
                <param>
                    g the Graphics object for the corresponding destination surface;
                      cannot be null                    
                </param>
                <return>
                    the texture target constant for the surface associated with the
                      given Graphics object; if the given Graphics object is invalid (i.e.
                      is not associated with an OpenGL surface), or the associated surface
                      is not backed by an OpenGL texture, this method will return zero.                    
                </return>
            </javadoc>
            <method name="getOGLTextureType" type="int" line="328">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="329"/>
                <declaration name="sData" type="SurfaceData" line="332"/>
                <scope line="333"/>
            </method>
        </class>
    </source>