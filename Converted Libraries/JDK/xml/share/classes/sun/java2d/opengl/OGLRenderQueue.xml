<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="sun.java2d.pipe.RenderBuffer"/>
        <import package="sun.java2d.pipe.RenderQueue"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <class name="OGLRenderQueue" line="5">
            <extends class="RenderQueue"/>
            <javadoc line="5">
                OGL-specific implementation of RenderQueue.  This class provides a
                  single (daemon) thread that is responsible for periodically flushing
                  the queue, thus ensuring that only one thread communicates with the native
                  OpenGL libraries for the entire process.                
            </javadoc>
            <declaration name="theInstance" type="OGLRenderQueue" line="12"/>
            <declaration name="flusher" type="QueueFlusher" line="13"/>
            <method name="OGLRenderQueue" type="constructor" line="14"/>
            <javadoc line="17">
                Returns the single OGLRenderQueue instance.  If it has not yet been
                  initialized, this method will first construct the single instance
                  before returning it.                
            </javadoc>
            <method name="getInstance" type="OGLRenderQueue" line="22">
                <scope line="23"/>
            </method>
            <javadoc line="28">
                Flushes the single OGLRenderQueue instance synchronously.  If an
                  OGLRenderQueue has not yet been instantiated, this method is a no-op.
                  This method is useful in the case of Toolkit.sync(), in which we want
                  to flush the OGL pipeline, but only if the OGL pipeline is currently
                  enabled.  Since this class has few external dependencies, callers need
                  not be concerned that calling this method will trigger initialization
                  of the OGL pipeline and related classes.                
            </javadoc>
            <method name="sync" type="void" line="37">
                <scope line="38">
                    <scope line="40"/>
                    <scope line="45"/>
                </scope>
            </method>
            <javadoc line="50">
                Disposes the native memory associated with the given native
                  graphics config info pointer on the single queue flushing thread.                
            </javadoc>
            <method name="disposeGraphicsConfig" type="void" line="54">
                <params>
                    <param name="pConfigInfo" type="long"/>
                </params>
                <declaration name="rq" type="OGLRenderQueue" line="55"/>
                <scope line="57">
                    <declaration name="buf" type="RenderBuffer" line="59"/>
                </scope>
                <scope line="65"/>
            </method>
            <javadoc line="69">
                Returns true if the current thread is the OGL QueueFlusher thread.                
            </javadoc>
            <method name="isQueueFlusherThread" type="boolean" line="72"/>
            <method name="flushNow" type="void" line="75">
                <scope line="76"/>
                <scope line="79"/>
            </method>
            <method name="flushAndInvokeNow" type="void" line="84">
                <params>
                    <param name="r" type="Runnable"/>
                </params>
                <scope line="85"/>
                <scope line="88"/>
            </method>
            <method name="flushBuffer" type="void" line="93"/>
            <method name="flushBuffer" type="void" line="94">
                <declaration name="limit" type="int" line="95"/>
                <scope line="96"/>
            </method>
            <class name="QueueFlusher" line="102">
                <extends class="Thread"/>
                <declaration name="needsFlush" type="boolean" line="103"/>
                <declaration name="task" type="Runnable" line="104"/>
                <declaration name="error" type="Error" line="105"/>
                <method name="QueueFlusher" type="constructor" line="106"/>
                <method name="flushNow" type="void" line="112">
                    <scope line="115">
                        <scope line="116"/>
                        <scope line="119"/>
                    </scope>
                    <scope line="122"/>
                </method>
                <method name="flushAndInvokeNow" type="void" line="126">
                    <params>
                        <param name="task" type="Runnable"/>
                    </params>
                </method>
                <method name="run" type="void" line="130">
                    <declaration name="timedOut" type="boolean" line="131"/>
                    <scope line="132">
                        <scope line="133">
                            <scope line="134">
                                <scope line="137">
                                    <scope line="138"/>
                                    <scope line="141"/>
                                </scope>
                            </scope>
                            <scope line="146"/>
                        </scope>
                        <scope line="149">
                            <scope line="152"/>
                        </scope>
                        <scope line="156"/>
                        <scope line="159"/>
                        <scope line="163">
                            <scope line="164"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>