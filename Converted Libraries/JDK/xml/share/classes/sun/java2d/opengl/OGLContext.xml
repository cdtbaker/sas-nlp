<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.opengl">
        <import package="sun.java2d.pipe.BufferedContext"/>
        <import package="sun.java2d.pipe.RenderBuffer"/>
        <import package="sun.java2d.pipe.RenderQueue"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <import package="sun.java2d.pipe.hw.ContextCapabilities"/>
        <class name="OGLContext" line="8">
            <extends class="BufferedContext"/>
            <javadoc line="8">
                Note that the RenderQueue lock must be acquired before calling any of
                  the methods in this class.                
            </javadoc>
            <declaration name="config" type="OGLGraphicsConfig" line="13"/>
            <method name="OGLContext" type="constructor" line="14">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="config" type="OGLGraphicsConfig"/>
                </params>
            </method>
            <javadoc line="18">
                Convenience method that delegates to setScratchSurface() below.                
            </javadoc>
            <method name="setScratchSurface" type="void" line="21">
                <params>
                    <param name="gc" type="OGLGraphicsConfig"/>
                </params>
            </method>
            <javadoc line="24">
                Makes the given GraphicsConfig&apos;s context current to its associated
                  &quot;scratch surface&quot;.  Each GraphicsConfig maintains a native context
                  (GLXContext on Unix, HGLRC on Windows) as well as a native pbuffer
                  known as the &quot;scratch surface&quot;.  By making the context current to the
                  scratch surface, we are assured that we have a current context for
                  the relevant GraphicsConfig, and can therefore perform operations
                  depending on the capabilities of that GraphicsConfig.  For example,
                  if the GraphicsConfig supports the GL_ARB_texture_non_power_of_two
                  extension, then we should be able to make a non-pow2 texture for this
                  GraphicsConfig once we make the context current to the scratch surface.
                  This method should be used for operations with an OpenGL texture
                  as the destination surface (e.g. a sw-&gt;texture blit loop), or in those
                  situations where we may not otherwise have a current context (e.g.
                  when disposing a texture-based surface).                
            </javadoc>
            <method name="setScratchSurface" type="void" line="40">
                <params>
                    <param name="pConfigInfo" type="long"/>
                </params>
                <declaration name="rq" type="OGLRenderQueue" line="42"/>
                <declaration name="buf" type="RenderBuffer" line="43"/>
            </method>
            <javadoc line="48">
                Invalidates the currentContext field to ensure that we properly
                  revalidate the OGLContext (make it current, etc.) next time through
                  the validate() method.  This is typically invoked from methods
                  that affect the current context state (e.g. disposing a context or
                  surface).                
            </javadoc>
            <method name="invalidateCurrentContext" type="void" line="55">
                <scope line="56"/>
                <declaration name="rq" type="OGLRenderQueue" line="60"/>
            </method>
            <method name="getRenderQueue" type="RenderQueue" line="65"/>
            <method name="getOGLIdString" type="String" line="68"/>
            <javadoc line="68">
                Returns a string representing adapter id (vendor, renderer, version).
                  Must be called on the rendering thread.                
                <return>
                    an id string for the adapter                    
                </return>
            </javadoc>
            <method name="saveState" type="void" line="74"/>
            <method name="restoreState" type="void" line="82"/>
            <class name="OGLContextCaps" line="90">
                <extends class="ContextCapabilities"/>
                <declaration name="CAPS_EXT_FBOBJECT" type="int" line="91"/>
                <javadoc line="91">
                    Indicates the presence of the GL_EXT_framebuffer_object extension.
                      This cap will only be set if the fbobject system property has been
                      enabled and we are able to create an FBO with depth buffer.                    
                </javadoc>
                <declaration name="CAPS_STORED_ALPHA" type="int" line="97"/>
                <javadoc line="97">
                    Indicates that the context supports a stored alpha channel.                    
                </javadoc>
                <declaration name="CAPS_DOUBLEBUFFERED" type="int" line="101"/>
                <javadoc line="101">
                    Indicates that the context is doublebuffered.                    
                </javadoc>
                <declaration name="CAPS_EXT_LCD_SHADER" type="int" line="105"/>
                <javadoc line="105">
                    Indicates the presence of the GL_ARB_fragment_shader extension.
                      This cap will only be set if the lcdshader system property has been
                      enabled and the hardware supports the minimum number of texture units                    
                </javadoc>
                <declaration name="CAPS_EXT_BIOP_SHADER" type="int" line="111"/>
                <javadoc line="111">
                    Indicates the presence of the GL_ARB_fragment_shader extension.
                      This cap will only be set if the biopshader system property has been
                      enabled and the hardware meets our minimum requirements.                    
                </javadoc>
                <declaration name="CAPS_EXT_GRAD_SHADER" type="int" line="117"/>
                <javadoc line="117">
                    Indicates the presence of the GL_ARB_fragment_shader extension.
                      This cap will only be set if the gradshader system property has been
                      enabled and the hardware meets our minimum requirements.                    
                </javadoc>
                <declaration name="CAPS_EXT_TEXRECT" type="int" line="123"/>
                <javadoc line="123">
                    Indicates the presence of the GL_ARB_texture_rectangle extension.                    
                </javadoc>
                <method name="OGLContextCaps" type="constructor" line="127">
                    <params>
                        <param name="caps" type="int"/>
                        <param name="adapterId" type="String"/>
                    </params>
                </method>
                <method name="toString" type="String" line="130">
                    <declaration name="buf" type="StringBuffer" line="131"/>
                    <scope line="132"/>
                    <scope line="135"/>
                    <scope line="138"/>
                    <scope line="141"/>
                    <scope line="144"/>
                    <scope line="147"/>
                    <scope line="150"/>
                </method>
            </class>
        </class>
    </source>