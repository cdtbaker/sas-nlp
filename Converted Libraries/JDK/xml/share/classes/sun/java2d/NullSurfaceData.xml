<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="sun.java2d.StateTrackable.State"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.pipe.NullPipe"/>
        <class name="NullSurfaceData" line="37">
            <extends class="SurfaceData"/>
            <javadoc line="37">
                This class provides an empty implementation of the SurfaceData
                  abstract superclass.  All operations on it translate into NOP
                  or harmless operations.                
            </javadoc>
            <declaration name="theInstance" type="SurfaceData" line="43"/>
            <method name="NullSurfaceData" type="constructor" line="45"/>
            <javadoc line="49">
                Sets this SurfaceData object to the invalid state.  All Graphics
                  objects must get a new SurfaceData object via the refresh method
                  and revalidate their pipelines before continuing.                
            </javadoc>
            <method name="invalidate" type="void" line="54"/>
            <javadoc line="57">
                Return a new SurfaceData object that represents the current state
                  of the destination that this SurfaceData object describes.
                  This method is typically called when the SurfaceData is invalidated.                
            </javadoc>
            <method name="getReplacement" type="SurfaceData" line="62"/>
            <declaration name="nullpipe" type="NullPipe" line="66"/>
            <method name="validatePipe" type="void" line="68">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
            </method>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="76"/>
            <javadoc line="80">
                Return a readable Raster which contains the pixels for the
                  specified rectangular region of the destination surface.
                  The coordinate origin of the returned Raster is the same as
                  the device space origin of the destination surface.
                  In some cases the returned Raster might also be writeable.
                  In most cases, the returned Raster might contain more pixels
                  than requested.                
                <see>
                    useTightBBoxes                    
                </see>
            </javadoc>
            <method name="getRaster" type="Raster" line="91">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Does the pixel accessibility of the destination surface
                  suggest that rendering algorithms might want to take
                  extra time to calculate a more accurate bounding box for
                  the operation being performed?
                  The typical case when this will be true is when a copy of
                  the pixels has to be made when doing a getRaster.  The
                  fewer pixels copied, the faster the operation will go.                
                <see>
                    getRaster                    
                </see>
            </javadoc>
            <method name="useTightBBoxes" type="boolean" line="106"/>
            <javadoc line="110">
                Returns the pixel data for the specified Argb value packed
                  into an integer for easy storage and conveyance.                
            </javadoc>
            <method name="pixelFor" type="int" line="114">
                <params>
                    <param name="rgb" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Returns the Argb representation for the specified integer value
                  which is packed in the format of the associated ColorModel.                
            </javadoc>
            <method name="rgbFor" type="int" line="122">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the bounds of the destination surface.                
            </javadoc>
            <method name="getBounds" type="Rectangle" line="129"/>
            <javadoc line="133">
                Performs Security Permissions checks to see if a Custom
                  Composite object should be allowed access to the pixels
                  of this surface.                
            </javadoc>
            <method name="checkCustomComposite" type="void" line="138"/>
            <javadoc line="142">
                Performs a copyarea within this surface.  Returns
                  false if there is no algorithm to perform the copyarea
                  given the current settings of the SunGraphics2D.                
            </javadoc>
            <method name="copyArea" type="boolean" line="149">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                Returns destination Image associated with this SurfaceData (null)                
            </javadoc>
            <method name="getDestination" type="Object" line="156"/>
        </class>
    </source>