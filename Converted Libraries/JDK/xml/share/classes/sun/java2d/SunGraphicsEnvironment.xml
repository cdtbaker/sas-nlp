<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FilenameFilter"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.IOException"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Set"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.Vector"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.DisplayChangedListener"/>
        <import package="sun.awt.FontConfiguration"/>
        <import package="sun.awt.SunDisplayChanger"/>
        <import package="sun.font.CompositeFontDescriptor"/>
        <import package="sun.font.Font2D"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontManagerForSGE"/>
        <import package="sun.font.NativeFont"/>
        <class name="SunGraphicsEnvironment" line="42">
            <extends class="GraphicsEnvironment"/>
            <implements interface="DisplayChangedListener"/>
            <javadoc line="42">
                This is an implementation of a GraphicsEnvironment object for the
                  default local GraphicsEnvironment.                
                <see>
                    GraphicsDevice                    
                </see>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <declaration name="isOpenSolaris" type="boolean" line="49"/>
            <declaration name="defaultFont" type="Font" line="50"/>
            <method name="SunGraphicsEnvironment" type="constructor" line="51">
                <anonymous_class line="52">
                    <method name="run" type="Object" line="53">
                        <declaration name="version" type="String" line="54"/>
                        <scope line="55">
                            <declaration name="ver" type="float" line="56"/>
                            <scope line="57">
                                <declaration name="f" type="File" line="58"/>
                                <declaration name="fis" type="FileInputStream" line="59"/>
                                <declaration name="isr" type="InputStreamReader" line="60"/>
                                <declaration name="br" type="BufferedReader" line="61"/>
                                <declaration name="line" type="String" line="62"/>
                                <scope line="63"/>
                                <scope line="66">
                                    <declaration name="courierNew" type="String" line="67"/>
                                    <declaration name="courierFile" type="File" line="68"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="74"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="screens" type="GraphicsDevice[]" line="82"/>
            <javadoc line="83">
                Returns an array of all of the screen devices.                
            </javadoc>
            <method name="getScreenDevices" type="GraphicsDevice[]" line="86">
                <declaration name="ret" type="GraphicsDevice[]" line="87"/>
                <scope line="88">
                    <declaration name="num" type="int" line="89"/>
                    <scope line="91"/>
                </scope>
            </method>
            <method name="getNumScreens" type="int" line="98"/>
            <javadoc line="98">
                Returns the number of screen devices of this graphics environment.                
                <return>
                    the number of screen devices of this graphics environment                    
                </return>
            </javadoc>
            <method name="makeScreenDevice" type="GraphicsDevice" line="103"/>
            <javadoc line="103">
                Create and return the screen device with the specified number. The
                  device with number &lt;code&gt;0&lt;/code&gt; will be the default device (returned
                  by {@link #getDefaultScreenDevice()}.                
                <param>
                    screennum the number of the screen to create                    
                </param>
                <return>
                    the created screen device                    
                </return>
            </javadoc>
            <javadoc line="111">
                Returns the default screen graphics device.                
            </javadoc>
            <method name="getDefaultScreenDevice" type="GraphicsDevice" line="114"/>
            <javadoc line="117">
                Returns a Graphics2D object for rendering into the
                  given BufferedImage.                
                <throws>
                    NullPointerException if BufferedImage argument is null                    
                </throws>
            </javadoc>
            <method name="createGraphics" type="Graphics2D" line="122">
                <params>
                    <param name="img" type="BufferedImage"/>
                </params>
                <scope line="123"/>
                <declaration name="sd" type="SurfaceData" line="126"/>
            </method>
            <method name="getFontManagerForSGE" type="FontManagerForSGE" line="129">
                <declaration name="fm" type="FontManager" line="130"/>
            </method>
            <method name="useAlternateFontforJALocales" type="void" line="133"/>
            <javadoc line="136">
                Returns all fonts available in this environment.                
            </javadoc>
            <method name="getAllFonts" type="Font[]" line="139">
                <declaration name="fm" type="FontManagerForSGE" line="140"/>
                <declaration name="installedFonts" type="Font[]" line="141"/>
                <declaration name="created" type="Font[]" line="142"/>
                <scope line="143"/>
                <scope line="146">
                    <declaration name="newlen" type="int" line="147"/>
                    <declaration name="fonts" type="Font[]" line="148"/>
                </scope>
            </method>
            <method name="getAvailableFontFamilyNames" type="String[]" line="153">
                <params>
                    <param name="requestedLocale" type="Locale"/>
                </params>
                <declaration name="fm" type="FontManagerForSGE" line="154"/>
                <declaration name="installed" type="String[]" line="155"/>
                <declaration name="map" type="TreeMap&amp;lt;String,String&amp;gt;" line="156"/>
                <scope line="157"/>
                <scope line="160">
                    <scope line="161"/>
                    <declaration name="retval" type="String[]" line="164"/>
                    <declaration name="keyNames" type="Object[]" line="165"/>
                    <scope line="166"/>
                </scope>
            </method>
            <method name="getAvailableFontFamilyNames" type="String[]" line="172"/>
            <javadoc line="175">
                Return the bounds of a GraphicsDevice, less its screen insets.
                  See also java.awt.GraphicsEnvironment.getUsableBounds();                
            </javadoc>
            <method name="getUsableBounds" type="Rectangle" line="179">
                <params>
                    <param name="gd" type="GraphicsDevice"/>
                </params>
                <declaration name="gc" type="GraphicsConfiguration" line="180"/>
                <declaration name="insets" type="Insets" line="181"/>
                <declaration name="usableBounds" type="Rectangle" line="182"/>
            </method>
            <javadoc line="189">
                From the DisplayChangedListener interface; called
                  when the display mode has been changed.                
            </javadoc>
            <method name="displayChanged" type="void" line="193">
                <scope line="194">
                    <scope line="195"/>
                </scope>
            </method>
            <javadoc line="201">
                Part of the DisplayChangedListener interface:
                  propagate this event to listeners                
            </javadoc>
            <method name="paletteChanged" type="void" line="205"/>
            <method name="isDisplayLocal" type="boolean" line="208"/>
            <javadoc line="208">
                Returns true when the display is local, false for remote displays.                
                <return>
                    true when the display is local, false for remote displays                    
                </return>
            </javadoc>
            <declaration name="displayChanger" type="SunDisplayChanger" line="213"/>
            <javadoc line="214">
                Add a DisplayChangeListener to be notified when the display settings
                  are changed.                
            </javadoc>
            <method name="addDisplayChangedListener" type="void" line="218">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <javadoc line="221">
                Remove a DisplayChangeListener from Win32GraphicsEnvironment                
            </javadoc>
            <method name="removeDisplayChangedListener" type="void" line="224">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <javadoc line="227">
                Returns true if FlipBufferStrategy with COPIED buffer contents
                  is preferred for this peer&apos;s GraphicsConfiguration over
                  BlitBufferStrategy, false otherwise.
                  The reason FlipBS could be preferred is that in some configurations
                  an accelerated copy to the screen is supported (like Direct3D 9)                
                <return>
                    true if flip strategy should be used, false otherwise                    
                </return>
            </javadoc>
            <method name="isFlipStrategyPreferred" type="boolean" line="235">
                <params>
                    <param name="peer" type="ComponentPeer"/>
                </params>
            </method>
        </class>
    </source>