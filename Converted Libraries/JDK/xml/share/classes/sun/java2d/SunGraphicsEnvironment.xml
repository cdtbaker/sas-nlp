<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FilenameFilter"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.IOException"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Set"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.Vector"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.DisplayChangedListener"/>
        <import package="sun.awt.FontConfiguration"/>
        <import package="sun.awt.SunDisplayChanger"/>
        <import package="sun.font.CompositeFontDescriptor"/>
        <import package="sun.font.Font2D"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontManagerForSGE"/>
        <import package="sun.font.NativeFont"/>
        <class name="SunGraphicsEnvironment" line="69">
            <extends class="GraphicsEnvironment"/>
            <comment line="190">
                Modifies the behaviour of a subsequent call to preferLocaleFonts()
                 to use Mincho instead of Gothic for dialoginput in JA locales
                 on windows. Not needed on other platforms.
                
                 DO NOT MOVE OR RENAME OR OTHERWISE ALTER THIS METHOD.
                 ITS USED BY SOME NON-JRE INTERNAL CODE.                
            </comment>
            <comment line="300">
                ----DISPLAY CHANGE SUPPORT----                
            </comment>
            <comment line="321">
                ----END DISPLAY CHANGE SUPPORT----                
            </comment>
            <implements interface="DisplayChangedListener"/>
            <javadoc line="69">
                This is an implementation of a GraphicsEnvironment object for the
                  default local GraphicsEnvironment.                
                <see>
                    GraphicsDevice                    
                </see>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <declaration name="isOpenSolaris" type="boolean" line="79"/>
            <declaration name="defaultFont" type="Font" line="80"/>
            <method name="SunGraphicsEnvironment" type="constructor" line="82">
                <comment line="99">
                    We are using isOpenSolaris as meaning
                     we know the Solaris commercial fonts aren&apos;t
                     present. &quot;Solaris Next&quot; (0310) did not
                     include these even though its was not
                     OpenSolaris. Need to revisit how this is
                     handled but for now as in 6ux, we&apos;ll use
                     the test for a standard font resource as
                     being an indicator as to whether we need
                     to treat this as OpenSolaris from a font
                     config perspective.                    
                </comment>
                <comment line="120">
                                        
                </comment>
                <anonymous_class line="84">
                    <method name="run" type="Object" line="85">
                        <comment line="99">
                            We are using isOpenSolaris as meaning
                             we know the Solaris commercial fonts aren&apos;t
                             present. &quot;Solaris Next&quot; (0310) did not
                             include these even though its was not
                             OpenSolaris. Need to revisit how this is
                             handled but for now as in 6ux, we&apos;ll use
                             the test for a standard font resource as
                             being an indicator as to whether we need
                             to treat this as OpenSolaris from a font
                             config perspective.                            
                        </comment>
                        <comment line="120">
                                                        
                        </comment>
                        <declaration name="version" type="String" line="86"/>
                        <scope line="87">
                            <declaration name="ver" type="float" line="88"/>
                            <scope line="89">
                                <declaration name="f" type="File" line="90"/>
                                <declaration name="fis" type="FileInputStream" line="91"/>
                                <declaration name="isr" type="InputStreamReader" line="92"/>
                                <declaration name="br" type="BufferedReader" line="94"/>
                                <declaration name="line" type="String" line="95"/>
                                <scope line="96"/>
                                <scope line="98">
                                    <declaration name="courierNew" type="String" line="110"/>
                                    <declaration name="courierFile" type="File" line="112"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="117"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="screens" type="GraphicsDevice[]" line="128"/>
            <javadoc line="130">
                Returns an array of all of the screen devices.                
            </javadoc>
            <method name="getScreenDevices" type="GraphicsDevice[]" line="133">
                <declaration name="ret" type="GraphicsDevice[]" line="134"/>
                <scope line="135">
                    <declaration name="num" type="int" line="136"/>
                    <scope line="138"/>
                </scope>
            </method>
            <method name="getNumScreens" type="int" line="146"/>
            <javadoc line="146">
                Returns the number of screen devices of this graphics environment.                
                <return>
                    the number of screen devices of this graphics environment                    
                </return>
            </javadoc>
            <method name="makeScreenDevice" type="GraphicsDevice" line="153"/>
            <javadoc line="153">
                Create and return the screen device with the specified number. The
                  device with number &lt;code&gt;0&lt;/code&gt; will be the default device (returned
                  by {@link #getDefaultScreenDevice()}.                
                <param>
                    screennum the number of the screen to create                    
                </param>
                <return>
                    the created screen device                    
                </return>
            </javadoc>
            <javadoc line="164">
                Returns the default screen graphics device.                
            </javadoc>
            <method name="getDefaultScreenDevice" type="GraphicsDevice" line="167"/>
            <javadoc line="171">
                Returns a Graphics2D object for rendering into the
                  given BufferedImage.                
                <throws>
                    NullPointerException if BufferedImage argument is null                    
                </throws>
            </javadoc>
            <method name="createGraphics" type="Graphics2D" line="176">
                <params>
                    <param name="img" type="BufferedImage"/>
                </params>
                <scope line="177"/>
                <declaration name="sd" type="SurfaceData" line="180"/>
            </method>
            <method name="getFontManagerForSGE" type="FontManagerForSGE" line="184">
                <declaration name="fm" type="FontManager" line="185"/>
            </method>
            <method name="useAlternateFontforJALocales" type="void" line="196"/>
            <javadoc line="200">
                Returns all fonts available in this environment.                
            </javadoc>
            <method name="getAllFonts" type="Font[]" line="203">
                <declaration name="fm" type="FontManagerForSGE" line="204"/>
                <declaration name="installedFonts" type="Font[]" line="205"/>
                <declaration name="created" type="Font[]" line="206"/>
                <scope line="207"/>
                <scope line="209">
                    <declaration name="newlen" type="int" line="210"/>
                    <declaration name="fonts" type="Font[]" line="211"/>
                </scope>
            </method>
            <method name="getAvailableFontFamilyNames" type="String[]" line="218">
                <params>
                    <param name="requestedLocale" type="Locale"/>
                </params>
                <comment line="221">
                    Use a new TreeMap as used in getInstalledFontFamilyNames
                     and insert all the keys in lower case, so that the sort order
                     is the same as the installed families. This preserves historical
                     behaviour and inserts new families in the right place.
                     It would have been marginally more efficient to directly obtain
                     the tree map and just insert new entries, but not so much as
                     to justify the extra internal interface.                    
                </comment>
                <declaration name="fm" type="FontManagerForSGE" line="219"/>
                <declaration name="installed" type="String[]" line="220"/>
                <declaration name="map" type="TreeMap&lt;String,String&gt;" line="229"/>
                <scope line="230"/>
                <scope line="232">
                    <scope line="233"/>
                    <declaration name="retval" type="String[]" line="237"/>
                    <declaration name="keyNames" type="Object[]" line="238"/>
                    <scope line="239"/>
                </scope>
            </method>
            <method name="getAvailableFontFamilyNames" type="String[]" line="246"/>
            <javadoc line="250">
                Return the bounds of a GraphicsDevice, less its screen insets.
                  See also java.awt.GraphicsEnvironment.getUsableBounds();                
            </javadoc>
            <method name="getUsableBounds" type="Rectangle" line="254">
                <params>
                    <param name="gd" type="GraphicsDevice"/>
                </params>
                <declaration name="gc" type="GraphicsConfiguration" line="255"/>
                <declaration name="insets" type="Insets" line="256"/>
                <declaration name="usableBounds" type="Rectangle" line="257"/>
            </method>
            <javadoc line="267">
                From the DisplayChangedListener interface; called
                  when the display mode has been changed.                
            </javadoc>
            <method name="displayChanged" type="void" line="271">
                <comment line="272">
                    notify screens in device array to do display update stuff                    
                </comment>
                <comment line="279">
                    notify SunDisplayChanger list (e.g. VolatileSurfaceManagers and                    
                </comment>
                <comment line="280">
                    SurfaceDataProxies) about the display change event                    
                </comment>
                <scope line="273">
                    <scope line="274"/>
                </scope>
            </method>
            <javadoc line="284">
                Part of the DisplayChangedListener interface:
                  propagate this event to listeners                
            </javadoc>
            <method name="paletteChanged" type="void" line="288"/>
            <method name="isDisplayLocal" type="boolean" line="292"/>
            <javadoc line="292">
                Returns true when the display is local, false for remote displays.                
                <return>
                    true when the display is local, false for remote displays                    
                </return>
            </javadoc>
            <declaration name="displayChanger" type="SunDisplayChanger" line="303"/>
            <javadoc line="305">
                Add a DisplayChangeListener to be notified when the display settings
                  are changed.                
            </javadoc>
            <method name="addDisplayChangedListener" type="void" line="309">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <javadoc line="313">
                Remove a DisplayChangeListener from Win32GraphicsEnvironment                
            </javadoc>
            <method name="removeDisplayChangedListener" type="void" line="316">
                <params>
                    <param name="client" type="DisplayChangedListener"/>
                </params>
            </method>
            <javadoc line="324">
                Returns true if FlipBufferStrategy with COPIED buffer contents
                  is preferred for this peer&apos;s GraphicsConfiguration over
                  BlitBufferStrategy, false otherwise.
                  The reason FlipBS could be preferred is that in some configurations
                  an accelerated copy to the screen is supported (like Direct3D 9)                
                <return>
                    true if flip strategy should be used, false otherwise                    
                </return>
            </javadoc>
            <method name="isFlipStrategyPreferred" type="boolean" line="334">
                <params>
                    <param name="peer" type="ComponentPeer"/>
                </params>
            </method>
        </class>
    </source>