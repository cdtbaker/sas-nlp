<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d">
        <import package="java.util.Comparator"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Vector"/>
        <class name="Spans" line="7">
            <javadoc line="7">
                Maintains a list of half-open intervals, called Spans.
                  A Span can be tested against the list of Spans
                  for intersection.                
            </javadoc>
            <declaration name="kMaxAddsSinceSort" type="int" line="13"/>
            <javadoc line="13">
                This class will sort and collapse its span
                  entries after this many span additions via
                  the &lt;code&gt;add&lt;/code&gt; method.                
            </javadoc>
            <declaration name="mSpans" type="List" line="19"/>
            <javadoc line="19">
                Holds a list of individual
                  Span instances.                
            </javadoc>
            <declaration name="mAddsSinceSort" type="int" line="24"/>
            <javadoc line="24">
                The number of &lt;code&gt;Span&lt;/code&gt;
                  instances that have been added
                  to this object without a sort
                  and collapse taking place.                
            </javadoc>
            <method name="Spans" type="constructor" line="31"/>
            <javadoc line="33">
                Add a span covering the half open interval
                  including &lt;code&gt;start&lt;/code&gt; up to
                  but not including &lt;code&gt;end&lt;/code&gt;.                
            </javadoc>
            <method name="add" type="void" line="38">
                <params>
                    <param name="start" type="float"/>
                    <param name="end" type="float"/>
                </params>
                <scope line="39">
                    <scope line="41"/>
                </scope>
            </method>
            <javadoc line="46">
                Add a span which covers the entire range.
                  This call is logically equivalent to
                  &lt;code&gt;add(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY)&lt;/code&gt;
                  The result of making this call is that
                  all future &lt;code&gt;add&lt;/code&gt; calls are ignored
                  and the &lt;code&gt;intersects&lt;/code&gt; method always
                  returns true.                
            </javadoc>
            <method name="addInfinite" type="void" line="55"/>
            <javadoc line="58">
                Returns true if the span defined by the half-open
                  interval from &lt;code&gt;start&lt;/code&gt; up to,
                  but not including, &lt;code&gt;end&lt;/code&gt; intersects
                  any of the spans defined by this instance.                
            </javadoc>
            <method name="intersects" type="boolean" line="64">
                <params>
                    <param name="start" type="float"/>
                    <param name="end" type="float"/>
                </params>
                <declaration name="doesIntersect" type="boolean" line="65"/>
                <scope line="66">
                    <scope line="67"/>
                    <declaration name="found" type="int" line="70"/>
                </scope>
                <scope line="73"/>
            </method>
            <javadoc line="78">
                Sort the spans in ascending order by their
                  start position. After the spans are sorted
                  collapse any spans that intersect into a
                  single span. The result is a sorted,
                  non-overlapping list of spans.                
            </javadoc>
            <method name="sortAndCollapse" type="void" line="85">
                <declaration name="iter" type="Iterator" line="88"/>
                <declaration name="span" type="Span" line="89"/>
                <scope line="90"/>
                <scope line="93">
                    <declaration name="nextSpan" type="Span" line="94"/>
                    <scope line="95"/>
                    <scope line="98"/>
                </scope>
            </method>
            <class name="Span" line="103">
                <implements interface="Comparable"/>
                <javadoc line="103">
                    Holds a single half-open interval.                    
                </javadoc>
                <declaration name="mStart" type="float" line="107"/>
                <javadoc line="107">
                    The span includes the starting point.                    
                </javadoc>
                <declaration name="mEnd" type="float" line="111"/>
                <javadoc line="111">
                    The span goes up to but does not include
                      the ending point.                    
                </javadoc>
                <javadoc line="116">
                    Create a half-open interval including
                      &lt;code&gt;start&lt;/code&gt; but not including
                      &lt;code&gt;end&lt;/code&gt;.                    
                </javadoc>
                <method name="Span" type="constructor" line="121">
                    <params>
                        <param name="start" type="float"/>
                        <param name="end" type="float"/>
                    </params>
                </method>
                <javadoc line="125">
                    Return the start of the &lt;code&gt;Span&lt;/code&gt;.
                      The start is considered part of the
                      half-open interval.                    
                </javadoc>
                <method name="getStart" type="float" line="130"/>
                <javadoc line="133">
                    Return the end of the &lt;code&gt;Span&lt;/code&gt;.
                      The end is not considered part of the
                      half-open interval.                    
                </javadoc>
                <method name="getEnd" type="float" line="138"/>
                <javadoc line="141">
                    Change the initial position of the
                      &lt;code&gt;Span&lt;/code&gt;.                    
                </javadoc>
                <method name="setStart" type="void" line="145">
                    <params>
                        <param name="start" type="float"/>
                    </params>
                </method>
                <javadoc line="148">
                    Change the terminal position of the
                      &lt;code&gt;Span&lt;/code&gt;.                    
                </javadoc>
                <method name="setEnd" type="void" line="152">
                    <params>
                        <param name="end" type="float"/>
                    </params>
                </method>
                <javadoc line="155">
                    Attempt to alter this &lt;code&gt;Span&lt;/code&gt;
                      to include &lt;code&gt;otherSpan&lt;/code&gt; without
                      altering this span&apos;s starting position.
                      If &lt;code&gt;otherSpan&lt;/code&gt; can be so consumed
                      by this &lt;code&gt;Span&lt;/code&gt; then &lt;code&gt;true&lt;/code&gt;
                      is returned.                    
                </javadoc>
                <method name="subsume" type="boolean" line="163">
                    <params>
                        <param name="otherSpan" type="Span"/>
                    </params>
                    <declaration name="isSubsumed" type="boolean" line="164"/>
                    <scope line="165"/>
                </method>
                <javadoc line="170">
                    Return true if the passed in position
                      lies in the half-open interval defined
                      by this &lt;code&gt;Span&lt;/code&gt;.                    
                </javadoc>
                <method name="contains" type="boolean" line="175">
                    <params>
                        <param name="pos" type="float"/>
                    </params>
                </method>
                <javadoc line="178">
                    Rank spans according to their starting
                      position. The end position is ignored
                      in this ranking.                    
                </javadoc>
                <method name="compareTo" type="int" line="183">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="otherSpan" type="Span" line="184"/>
                    <declaration name="otherStart" type="float" line="185"/>
                    <declaration name="result" type="int" line="186"/>
                    <scope line="187"/>
                    <scope line="190"/>
                    <scope line="193"/>
                </method>
                <method name="toString" type="String" line="198"/>
            </class>
            <class name="SpanIntersection" line="202">
                <implements interface="Comparator"/>
                <javadoc line="202">
                    This class ranks a pair of &lt;code&gt;Span&lt;/code&gt;
                      instances. If the instances intersect they
                      are deemed equal otherwise they are ranked
                      by their relative position. Use
                      &lt;code&gt;SpanIntersection.instance&lt;/code&gt; to
                      get the single instance of this class.                    
                </javadoc>
                <declaration name="instance" type="SpanIntersection" line="211"/>
                <javadoc line="211">
                    This class is a Singleton and the following
                      is the single instance.                    
                </javadoc>
                <javadoc line="216">
                    Only this class can create instances of itself.                    
                </javadoc>
                <method name="SpanIntersection" type="constructor" line="219"/>
                <method name="compare" type="int" line="221">
                    <params>
                        <param name="o1" type="Object"/>
                        <param name="o2" type="Object"/>
                    </params>
                    <declaration name="result" type="int" line="222"/>
                    <declaration name="span1" type="Span" line="223"/>
                    <declaration name="span2" type="Span" line="224"/>
                    <scope line="225"/>
                    <scope line="228"/>
                    <scope line="231"/>
                </method>
            </class>
        </class>
    </source>