<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d">
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.PhantomReference"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Hashtable"/>
        <class name="Disposer" line="35">
            <comment line="160">
                This is a marker interface that, if implemented, means it
                 doesn&apos;t acquire any special locks, and is safe to
                 be disposed in the poll loop on whatever thread
                 which happens to be the Toolkit thread, is in use.                
            </comment>
            <comment line="187">
                Set to indicate the queue is presently being polled.                
            </comment>
            <comment line="192">
                The pollRemove() method is called back from a dispose method
                 that is running on the toolkit thread and wants to
                 dispose any pending refs that are safe to be disposed
                 on that thread.                
            </comment>
            <comment line="241">
                This was added for use by the 2D font implementation to avoid creation
                 of an additional disposer thread.
                 WARNING: this thread class monitors a specific queue, so a reference
                 added here must have been created with this queue. Failure to do
                 so will clutter the records hashmap and no one will be cleaning up
                 the reference queue.                
            </comment>
            <comment line="257">
                This is intended for use in conjunction with addReference(..)                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="35">
                This class is used for registering and disposing the native
                  data associated with java objects.
                  The object can register itself by calling one of the addRecord
                  methods and providing either the pointer to the native disposal
                  method or a descendant of the DisposerRecord class with overridden
                  dispose() method.
                  When the object becomes unreachable, the dispose() method
                  of the associated DisposerRecord object will be called.                
                <see>
                    DisposerRecord                    
                </see>
            </javadoc>
            <declaration name="queue" type="ReferenceQueue" line="50"/>
            <declaration name="records" type="Hashtable" line="51"/>
            <declaration name="disposerInstance" type="Disposer" line="53"/>
            <declaration name="WEAK" type="int" line="54"/>
            <declaration name="PHANTOM" type="int" line="55"/>
            <declaration name="refType" type="int" line="56"/>
            <scope line="58">
                <declaration name="type" type="String" line="62"/>
                <scope line="64">
                    <scope line="65"/>
                    <scope line="68"/>
                </scope>
                <anonymous_class line="75">
                    <method name="run" type="Object" line="76">
                        <comment line="78">
                            The thread must be a member of a thread group
                             which will not get GCed before VM exit.
                             Make its parent the top-level thread group.                            
                        </comment>
                        <declaration name="tg" type="ThreadGroup" line="81"/>
                        <declaration name="t" type="Thread" line="85"/>
                    </method>
                </anonymous_class>
            </scope>
            <javadoc line="97">
                Registers the object and the native data for later disposal.                
                <param>
                    target Object to be registered                    
                </param>
                <param>
                    disposeMethod pointer to the native disposal method                    
                </param>
                <param>
                    pData pointer to the data to be passed to the
                      native disposal method                    
                </param>
            </javadoc>
            <method name="addRecord" type="void" line="106">
                <params>
                    <param name="target" type="Object"/>
                    <param name="disposeMethod" type="long"/>
                    <param name="pData" type="long"/>
                </params>
            </method>
            <javadoc line="111">
                Registers the object and the native data for later disposal.                
                <param>
                    target Object to be registered                    
                </param>
                <param>
                    rec the associated DisposerRecord object                    
                </param>
                <see>
                    DisposerRecord                    
                </see>
            </javadoc>
            <method name="addRecord" type="void" line="117">
                <params>
                    <param name="target" type="Object"/>
                    <param name="rec" type="DisposerRecord"/>
                </params>
            </method>
            <javadoc line="121">
                Performs the actual registration of the target object to be disposed.                
                <param>
                    target Object to be registered, or if target is an instance
                      of DisposerTarget, its associated disposer referent
                      will be the Object that is registered                    
                </param>
                <param>
                    rec the associated DisposerRecord object                    
                </param>
                <see>
                    DisposerRecord                    
                </see>
            </javadoc>
            <method name="add" type="void" line="129">
                <params>
                    <param name="target" type="Object"/>
                    <param name="rec" type="DisposerRecord"/>
                </params>
                <scope line="130"/>
                <declaration name="ref" type="java.lang.ref.Reference" line="133"/>
                <scope line="134"/>
                <scope line="136"/>
            </method>
            <method name="run" type="void" line="142">
                <scope line="143">
                    <scope line="144">
                        <declaration name="obj" type="Object" line="145"/>
                        <declaration name="rec" type="DisposerRecord" line="147"/>
                    </scope>
                    <scope line="152"/>
                </scope>
            </method>
            <interface name="PollDisposable"/>
            <declaration name="deferredRecords" type="ArrayList&lt;DisposerRecord&gt;" line="168"/>
            <method name="clearDeferredRecords" type="void" line="170">
                <scope line="171"/>
                <scope line="174">
                    <scope line="175">
                        <declaration name="rec" type="DisposerRecord" line="176"/>
                    </scope>
                    <scope line="178"/>
                </scope>
            </method>
            <declaration name="pollingQueue" type="boolean" line="189"/>
            <method name="pollRemove" type="void" line="197">
                <comment line="200">
                    This should never be called recursively, so this check
                     is just a safeguard against the unexpected.                    
                </comment>
                <comment line="221">
                    shouldn&apos;t happen, but just in case.                    
                </comment>
                <scope line="202"/>
                <declaration name="obj" type="Object" line="205"/>
                <declaration name="freed" type="int" line="207"/>
                <declaration name="deferred" type="int" line="208"/>
                <scope line="209">
                    <scope line="211">
                        <declaration name="rec" type="DisposerRecord" line="214"/>
                        <scope line="215"/>
                        <scope line="219">
                            <scope line="220"/>
                            <scope line="224"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="230"/>
                <scope line="233"/>
            </method>
            <method name="initIDs" type="void" line="238"/>
            <method name="addReference" type="void" line="248">
                <params>
                    <param name="ref" type="Reference"/>
                    <param name="rec" type="DisposerRecord"/>
                </params>
            </method>
            <method name="addObjectRecord" type="void" line="252">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="rec" type="DisposerRecord"/>
                </params>
            </method>
            <method name="getQueue" type="ReferenceQueue" line="258"/>
        </class>
    </source>