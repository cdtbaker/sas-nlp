<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.RenderingHints.Key"/>
        <import package="java.awt.geom.Area"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.BufferedImageOp"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.renderable.RenderableImage"/>
        <import package="java.awt.image.renderable.RenderContext"/>
        <import package="java.awt.image.AffineTransformOp"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.GradientPaint"/>
        <import package="java.awt.LinearGradientPaint"/>
        <import package="java.awt.RadialGradientPaint"/>
        <import package="java.awt.TexturePaint"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="sun.font.FontDesignMetrics"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.java2d.pipe.PixelDrawPipe"/>
        <import package="sun.java2d.pipe.PixelFillPipe"/>
        <import package="sun.java2d.pipe.ShapeDrawPipe"/>
        <import package="sun.java2d.pipe.ValidatePipe"/>
        <import package="sun.java2d.pipe.ShapeSpanIterator"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.java2d.pipe.TextPipe"/>
        <import package="sun.java2d.pipe.DrawImagePipe"/>
        <import package="sun.java2d.pipe.LoopPipe"/>
        <import package="sun.java2d.loops.FontInfo"/>
        <import package="sun.java2d.loops.RenderLoops"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.loops.Blit"/>
        <import package="sun.java2d.loops.MaskFill"/>
        <import package="sun.font.FontManager"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="sun.java2d.loops.XORComposite"/>
        <import package="sun.awt.ConstrainableGraphics"/>
        <import package="sun.awt.SunHints"/>
        <import package="java.util.Map"/>
        <import package="java.util.Iterator"/>
        <import package="sun.java2d.DestSurfaceProvider"/>
        <import package="sun.misc.PerformanceLogger"/>
        <class name="SunGraphics2D" line="68">
            <extends class="Graphics2D"/>
            <implements interface="ConstrainableGraphics"/>
            <implements interface="Cloneable"/>
            <implements interface="DestSurfaceProvider"/>
            <javadoc line="68">
                This is a the master Graphics2D superclass for all of the Sun
                  Graphics implementations.  This class relies on subclasses to
                  manage the various device information, but provides an overall
                  general framework for performing all of the requests in the
                  Graphics and Graphics2D APIs.                
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="PAINT_CUSTOM" type="int" line="77"/>
            <declaration name="PAINT_TEXTURE" type="int" line="78"/>
            <declaration name="PAINT_RAD_GRADIENT" type="int" line="79"/>
            <declaration name="PAINT_LIN_GRADIENT" type="int" line="80"/>
            <declaration name="PAINT_GRADIENT" type="int" line="81"/>
            <declaration name="PAINT_ALPHACOLOR" type="int" line="82"/>
            <declaration name="PAINT_OPAQUECOLOR" type="int" line="83"/>
            <declaration name="COMP_CUSTOM" type="int" line="84"/>
            <declaration name="COMP_XOR" type="int" line="85"/>
            <declaration name="COMP_ALPHA" type="int" line="86"/>
            <declaration name="COMP_ISCOPY" type="int" line="87"/>
            <declaration name="STROKE_CUSTOM" type="int" line="88"/>
            <declaration name="STROKE_WIDE" type="int" line="89"/>
            <declaration name="STROKE_THINDASHED" type="int" line="90"/>
            <declaration name="STROKE_THIN" type="int" line="91"/>
            <declaration name="TRANSFORM_GENERIC" type="int" line="92"/>
            <declaration name="TRANSFORM_TRANSLATESCALE" type="int" line="93"/>
            <declaration name="TRANSFORM_ANY_TRANSLATE" type="int" line="94"/>
            <declaration name="TRANSFORM_INT_TRANSLATE" type="int" line="95"/>
            <declaration name="TRANSFORM_ISIDENT" type="int" line="96"/>
            <declaration name="CLIP_SHAPE" type="int" line="97"/>
            <declaration name="CLIP_RECTANGULAR" type="int" line="98"/>
            <declaration name="CLIP_DEVICE" type="int" line="99"/>
            <declaration name="eargb" type="int" line="100"/>
            <declaration name="pixel" type="int" line="101"/>
            <declaration name="surfaceData" type="SurfaceData" line="102"/>
            <declaration name="drawpipe" type="PixelDrawPipe" line="103"/>
            <declaration name="fillpipe" type="PixelFillPipe" line="104"/>
            <declaration name="imagepipe" type="DrawImagePipe" line="105"/>
            <declaration name="shapepipe" type="ShapeDrawPipe" line="106"/>
            <declaration name="textpipe" type="TextPipe" line="107"/>
            <declaration name="alphafill" type="MaskFill" line="108"/>
            <declaration name="loops" type="RenderLoops" line="109"/>
            <declaration name="imageComp" type="CompositeType" line="110"/>
            <declaration name="paintState" type="int" line="111"/>
            <declaration name="compositeState" type="int" line="112"/>
            <declaration name="strokeState" type="int" line="113"/>
            <declaration name="transformState" type="int" line="114"/>
            <declaration name="clipState" type="int" line="115"/>
            <declaration name="foregroundColor" type="Color" line="116"/>
            <declaration name="backgroundColor" type="Color" line="117"/>
            <declaration name="transform" type="AffineTransform" line="118"/>
            <declaration name="transX" type="int" line="119"/>
            <declaration name="transY" type="int" line="120"/>
            <declaration name="defaultStroke" type="Stroke" line="121"/>
            <declaration name="defaultComposite" type="Composite" line="122"/>
            <declaration name="defaultFont" type="Font" line="123"/>
            <declaration name="paint" type="Paint" line="124"/>
            <declaration name="stroke" type="Stroke" line="125"/>
            <declaration name="composite" type="Composite" line="126"/>
            <declaration name="font" type="Font" line="127"/>
            <declaration name="fontMetrics" type="FontMetrics" line="128"/>
            <declaration name="renderHint" type="int" line="129"/>
            <declaration name="antialiasHint" type="int" line="130"/>
            <declaration name="textAntialiasHint" type="int" line="131"/>
            <declaration name="fractionalMetricsHint" type="int" line="132"/>
            <declaration name="lcdTextContrast" type="int" line="133"/>
            <declaration name="lcdTextContrastDefaultValue" type="int" line="134"/>
            <declaration name="interpolationHint" type="int" line="135"/>
            <declaration name="strokeHint" type="int" line="136"/>
            <declaration name="interpolationType" type="int" line="137"/>
            <declaration name="hints" type="RenderingHints" line="138"/>
            <declaration name="constrainClip" type="Region" line="139"/>
            <declaration name="constrainX" type="int" line="140"/>
            <declaration name="constrainY" type="int" line="141"/>
            <declaration name="clipRegion" type="Region" line="142"/>
            <declaration name="usrClip" type="Shape" line="143"/>
            <declaration name="devClip" type="Region" line="144"/>
            <declaration name="validFontInfo" type="boolean" line="145"/>
            <declaration name="fontInfo" type="FontInfo" line="146"/>
            <declaration name="glyphVectorFontInfo" type="FontInfo" line="147"/>
            <declaration name="glyphVectorFRC" type="FontRenderContext" line="148"/>
            <declaration name="slowTextTransformMask" type="int" line="149"/>
            <scope line="150">
                <scope line="151"/>
            </scope>
            <method name="SunGraphics2D" type="constructor" line="155">
                <params>
                    <param name="sd" type="SurfaceData"/>
                    <param name="fg" type="Color"/>
                    <param name="bg" type="Color"/>
                    <param name="f" type="Font"/>
                </params>
                <scope line="174"/>
            </method>
            <method name="clone" type="Object" line="180">
                <scope line="181">
                    <declaration name="g" type="SunGraphics2D" line="182"/>
                    <scope line="184"/>
                    <scope line="187">
                        <scope line="188"/>
                        <scope line="191"/>
                    </scope>
                    <scope line="195"/>
                </scope>
                <scope line="201"/>
            </method>
            <javadoc line="205">
                Create a new SunGraphics2D based on this one.                
            </javadoc>
            <method name="create" type="Graphics" line="208"/>
            <method name="setDevClip" type="void" line="211">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="c" type="Region" line="212"/>
                <scope line="213"/>
                <scope line="216"/>
            </method>
            <method name="setDevClip" type="void" line="221">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="224">
                Constrain rendering for lightweight objects.
                  REMIND: This method will back off to the &quot;workaround&quot;
                  of using translate and clipRect if the Graphics
                  to be constrained has a complex transform.  The
                  drawback of the workaround is that the resulting
                  clip and device origin cannot be &quot;enforced&quot;.                
                <exception>
                    IllegalStateException If the Graphics
                      to be constrained has a complex transform.                    
                </exception>
            </javadoc>
            <method name="constrain" type="void" line="234">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="235"/>
                <scope line="238"/>
                <declaration name="c" type="Region" line="246"/>
                <scope line="247"/>
                <scope line="250">
                    <scope line="252"/>
                </scope>
                <scope line="257"/>
            </method>
            <declaration name="invalidpipe" type="ValidatePipe" line="262"/>
            <method name="invalidatePipe" type="void" line="263"/>
            <method name="validatePipe" type="void" line="271"/>
            <method name="intersectShapes" type="Shape" line="274">
                <params>
                    <param name="s1" type="Shape"/>
                    <param name="s2" type="Shape"/>
                    <param name="keep1" type="boolean"/>
                    <param name="keep2" type="boolean"/>
                </params>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <method name="intersectRectShape" type="Shape" line="286">
                <params>
                    <param name="r" type="Rectangle2D"/>
                    <param name="s" type="Shape"/>
                    <param name="keep1" type="boolean"/>
                    <param name="keep2" type="boolean"/>
                </params>
                <scope line="287">
                    <declaration name="r2" type="Rectangle2D" line="288"/>
                    <declaration name="outrect" type="Rectangle2D" line="289"/>
                    <scope line="290"/>
                    <scope line="293"/>
                    <scope line="296"/>
                    <declaration name="x1" type="double" line="299"/>
                    <declaration name="x2" type="double" line="300"/>
                    <declaration name="y1" type="double" line="301"/>
                    <declaration name="y2" type="double" line="302"/>
                </scope>
                <scope line="307">
                    <scope line="308"/>
                </scope>
            </method>
            <method name="cloneShape" type="Shape" line="315">
                <params>
                    <param name="s" type="Shape"/>
                </params>
            </method>
            <method name="intersectByArea" type="Shape" line="318">
                <params>
                    <param name="s1" type="Shape"/>
                    <param name="s2" type="Shape"/>
                    <param name="keep1" type="boolean"/>
                    <param name="keep2" type="boolean"/>
                </params>
                <declaration name="a1" type="Area" line="319"/>
                <scope line="320"/>
                <scope line="323"/>
                <scope line="327"/>
                <scope line="330"/>
                <scope line="333"/>
                <scope line="337"/>
            </method>
            <method name="getCompClip" type="Region" line="342">
                <scope line="343"/>
            </method>
            <method name="getFont" type="Font" line="348">
                <scope line="349"/>
            </method>
            <declaration name="IDENT_MATRIX" type="double[]" line="354"/>
            <declaration name="IDENT_ATX" type="AffineTransform" line="355"/>
            <declaration name="MINALLOCATED" type="int" line="356"/>
            <declaration name="TEXTARRSIZE" type="int" line="357"/>
            <declaration name="textTxArr" type="double[][]" line="358"/>
            <declaration name="textAtArr" type="AffineTransform[]" line="359"/>
            <scope line="360">
                <scope line="361"/>
            </scope>
            <method name="checkFontInfo" type="FontInfo" line="366">
                <params>
                    <param name="info" type="FontInfo"/>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <scope line="367"/>
                <declaration name="ptSize" type="float" line="370"/>
                <declaration name="txFontType" type="int" line="371"/>
                <declaration name="devAt" type="AffineTransform" line="372"/>
                <scope line="373">
                    <scope line="380"/>
                    <scope line="385"/>
                    <declaration name="shearx" type="double" line="390"/>
                    <declaration name="scaley" type="double" line="391"/>
                    <scope line="392"/>
                </scope>
                <scope line="397">
                    <scope line="400">
                        <scope line="404"/>
                        <declaration name="shearx" type="double" line="408"/>
                        <declaration name="scaley" type="double" line="409"/>
                        <scope line="410"/>
                    </scope>
                    <scope line="415">
                        <declaration name="pszInt" type="int" line="416"/>
                        <scope line="417"/>
                        <scope line="422"/>
                        <scope line="425"/>
                    </scope>
                </scope>
                <declaration name="fmhint" type="int" line="434"/>
                <scope line="435"/>
                <declaration name="aahint" type="int" line="439"/>
                <scope line="440"/>
                <scope line="443"/>
                <scope line="446">
                    <scope line="447"/>
                    <scope line="450"/>
                </scope>
                <scope line="454">
                    <scope line="455">
                        <scope line="456"/>
                        <scope line="459"/>
                    </scope>
                    <scope line="463">
                        <scope line="464"/>
                        <scope line="467">
                            <scope line="469"/>
                            <scope line="473"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isRotated" type="boolean" line="485">
                <params>
                    <param name="mtx" type="double[]"/>
                </params>
                <scope line="486"/>
            </method>
            <method name="setFont" type="void" line="491">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <scope line="492">
                    <scope line="493"/>
                </scope>
            </method>
            <method name="getFontInfo" type="FontInfo" line="501">
                <scope line="502"/>
            </method>
            <method name="getGVFontInfo" type="FontInfo" line="508">
                <params>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                </params>
                <scope line="509"/>
                <scope line="512"/>
            </method>
            <method name="getFontMetrics" type="FontMetrics" line="517">
                <scope line="518"/>
            </method>
            <method name="getFontMetrics" type="FontMetrics" line="523">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <scope line="524"/>
                <declaration name="fm" type="FontMetrics" line="527"/>
                <scope line="528"/>
            </method>
            <javadoc line="533">
                Checks to see if a Path intersects the specified Rectangle in device
                  space.  The rendering attributes taken into account include the
                  clip, transform, and stroke attributes.                
                <param>
                    rect The area in device space to check for a hit.                    
                </param>
                <param>
                    p The path to check for a hit.                    
                </param>
                <param>
                    onStroke Flag to choose between testing the stroked or
                      the filled path.                    
                </param>
                <return>
                    True if there is a hit, false otherwise.                    
                </return>
                <see>
                    #setStroke                    
                </see>
                <see>
                    #fillPath                    
                </see>
                <see>
                    #drawPath                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="hit" type="boolean" line="550">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="s" type="Shape"/>
                    <param name="onStroke" type="boolean"/>
                </params>
                <scope line="551"/>
                <scope line="555"/>
            </method>
            <javadoc line="561">
                Return the ColorModel associated with this Graphics2D.                
            </javadoc>
            <method name="getDeviceColorModel" type="ColorModel" line="564"/>
            <javadoc line="567">
                Return the device configuration associated with this Graphics2D.                
            </javadoc>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="570"/>
            <javadoc line="573">
                Return the SurfaceData object assigned to manage the destination
                  drawable surface of this Graphics2D.                
            </javadoc>
            <method name="getSurfaceData" type="SurfaceData" line="577"/>
            <javadoc line="580">
                Sets the Composite in the current graphics state. Composite is used
                  in all drawing methods such as drawImage, drawString, drawPath,
                  and fillPath.  It specifies how new pixels are to be combined with
                  the existing pixels on the graphics device in the rendering process.                
                <param>
                    comp The Composite object to be used for drawing.                    
                </param>
                <see>
                    java.awt.Graphics#setXORMode                    
                </see>
                <see>
                    java.awt.Graphics#setPaintMode                    
                </see>
                <see>
                    AlphaComposite                    
                </see>
            </javadoc>
            <method name="setComposite" type="void" line="590">
                <params>
                    <param name="comp" type="Composite"/>
                </params>
                <scope line="591"/>
                <declaration name="newCompState" type="int" line="594"/>
                <declaration name="newCompType" type="CompositeType" line="595"/>
                <scope line="596">
                    <declaration name="alphacomp" type="AlphaComposite" line="597"/>
                    <scope line="599">
                        <scope line="600"/>
                        <scope line="603"/>
                    </scope>
                    <scope line="607"/>
                    <scope line="610"/>
                    <scope line="613"/>
                </scope>
                <scope line="617"/>
                <scope line="621"/>
                <scope line="624"/>
                <scope line="629"/>
                <scope line="636"/>
            </method>
            <javadoc line="640">
                Sets the Paint in the current graphics state.                
                <param>
                    paint The Paint object to be used to generate color in
                      the rendering process.                    
                </param>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    GradientPaint                    
                </see>
                <see>
                    TexturePaint                    
                </see>
            </javadoc>
            <method name="setPaint" type="void" line="648">
                <params>
                    <param name="paint" type="Paint"/>
                </params>
                <scope line="649"/>
                <scope line="653"/>
                <scope line="657">
                    <scope line="658">
                        <scope line="659"/>
                    </scope>
                    <scope line="663">
                        <scope line="664"/>
                    </scope>
                </scope>
                <declaration name="paintClass" type="Class" line="669"/>
                <scope line="670"/>
                <scope line="673"/>
                <scope line="676"/>
                <scope line="679"/>
                <scope line="682"/>
            </method>
            <declaration name="NON_UNIFORM_SCALE_MASK" type="int" line="688"/>
            <declaration name="MinPenSizeAA" type="double" line="689"/>
            <declaration name="MinPenSizeAASquared" type="double" line="690"/>
            <declaration name="MinPenSizeSquared" type="double" line="691"/>
            <method name="validateBasicStroke" type="void" line="692">
                <params>
                    <param name="bs" type="BasicStroke"/>
                </params>
                <declaration name="aa" type="boolean" line="693"/>
                <scope line="694">
                    <scope line="695">
                        <scope line="696">
                            <scope line="697"/>
                            <scope line="700"/>
                        </scope>
                        <scope line="704"/>
                    </scope>
                    <scope line="708">
                        <scope line="709"/>
                        <scope line="712">
                            <scope line="713"/>
                            <scope line="716"/>
                        </scope>
                        <scope line="720"/>
                    </scope>
                </scope>
                <scope line="725">
                    <declaration name="widthsquared" type="double" line="726"/>
                    <scope line="727"/>
                    <scope line="730">
                        <declaration name="A" type="double" line="731"/>
                        <declaration name="C" type="double" line="732"/>
                        <declaration name="B" type="double" line="733"/>
                        <declaration name="D" type="double" line="734"/>
                        <declaration name="EA" type="double" line="735"/>
                        <declaration name="EB" type="double" line="736"/>
                        <declaration name="EC" type="double" line="737"/>
                        <declaration name="hypot" type="double" line="738"/>
                    </scope>
                    <scope line="741"/>
                    <scope line="744">
                        <scope line="745"/>
                        <scope line="748"/>
                    </scope>
                    <scope line="752"/>
                </scope>
            </method>
            <method name="setStroke" type="void" line="757">
                <params>
                    <param name="s" type="Stroke"/>
                </params>
                <scope line="758"/>
                <declaration name="saveStrokeState" type="int" line="761"/>
                <scope line="763"/>
                <scope line="766"/>
                <scope line="769"/>
            </method>
            <javadoc line="773">
                Sets the preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <param>
                    hintKey The key of hint to be set. The strings are
                      defined in the RenderingHints class.                    
                </param>
                <param>
                    hintValue The value indicating preferences for the specified
                      hint category. These strings are defined in the RenderingHints
                      class.                    
                </param>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="setRenderingHint" type="void" line="784">
                <params>
                    <param name="hintKey" type="Key"/>
                    <param name="hintValue" type="Object"/>
                </params>
                <scope line="785"/>
                <scope line="788">
                    <declaration name="stateChanged" type="boolean" line="789"/>
                    <declaration name="textStateChanged" type="boolean" line="790"/>
                    <declaration name="recognized" type="boolean" line="791"/>
                    <declaration name="sunKey" type="SunHints.Key" line="792"/>
                    <declaration name="newHint" type="int" line="793"/>
                    <scope line="794"/>
                    <scope line="797"/>
                    <scope line="803">
                        <scope line="805"/>
                    </scope>
                    <scope line="813">
                        <scope line="815"/>
                    </scope>
                    <scope line="860">
                        <scope line="861">
                            <scope line="863"/>
                        </scope>
                        <scope line="870"/>
                    </scope>
                </scope>
                <scope line="876"/>
            </method>
            <javadoc line="881">
                Returns the preferences for the rendering algorithms.                
                <param>
                    hintCategory The category of hint to be set. The strings
                      are defined in the RenderingHints class.                    
                </param>
                <return>
                    The preferences for rendering algorithms. The strings
                      are defined in the RenderingHints class.                    
                </return>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="getRenderingHint" type="Object" line="889">
                <params>
                    <param name="hintKey" type="Key"/>
                </params>
                <scope line="890"/>
                <scope line="893"/>
                <declaration name="keyindex" type="int" line="896"/>
            </method>
            <javadoc line="923">
                Sets the preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <param>
                    hints The rendering hints to be set                    
                </param>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="setRenderingHints" type="void" line="930">
                <params>
                    <param name="hints" type="Map<?,?>"/>
                </params>
                <declaration name="customHintPresent" type="boolean" line="939"/>
                <declaration name="iter" type="Iterator" line="940"/>
                <scope line="941">
                    <declaration name="key" type="Object" line="942"/>
                    <scope line="943"/>
                    <scope line="946"/>
                </scope>
                <scope line="950"/>
            </method>
            <javadoc line="955">
                Adds a number of preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <param>
                    hints The rendering hints to be set                    
                </param>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="addRenderingHints" type="void" line="962">
                <params>
                    <param name="hints" type="Map<?,?>"/>
                </params>
                <declaration name="customHintPresent" type="boolean" line="963"/>
                <declaration name="iter" type="Iterator" line="964"/>
                <scope line="965">
                    <declaration name="key" type="Object" line="966"/>
                    <scope line="967"/>
                    <scope line="970"/>
                </scope>
                <scope line="974">
                    <scope line="975"/>
                    <scope line="978"/>
                </scope>
            </method>
            <javadoc line="983">
                Gets the preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="989">
                <scope line="990"/>
                <scope line="993"/>
            </method>
            <method name="makeHints" type="RenderingHints" line="997">
                <params>
                    <param name="hints" type="Map"/>
                </params>
                <declaration name="model" type="RenderingHints" line="998"/>
                <declaration name="value" type="Object" line="1004"/>
                <scope line="1019"/>
            </method>
            <javadoc line="1025">
                Concatenates the current transform of this Graphics2D with a
                  translation transformation.
                  This is equivalent to calling transform(T), where T is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   1    0    tx  ]
                  [   0    1    ty  ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
            </javadoc>
            <method name="translate" type="void" line="1036">
                <params>
                    <param name="tx" type="double"/>
                    <param name="ty" type="double"/>
                </params>
            </method>
            <javadoc line="1040">
                Concatenates the current transform of this Graphics2D with a
                  rotation transformation.
                  This is equivalent to calling transform(R), where R is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    0   ]
                  [   sin(theta)     cos(theta)    0   ]
                  [       0              0         1   ]
                  &lt;/pre&gt;
                  Rotating with a positive angle theta rotates points on the positive
                  x axis toward the positive y axis.                
                <param>
                    theta The angle of rotation in radians.                    
                </param>
            </javadoc>
            <method name="rotate" type="void" line="1054">
                <params>
                    <param name="theta" type="double"/>
                </params>
            </method>
            <javadoc line="1058">
                Concatenates the current transform of this Graphics2D with a
                  translated rotation transformation.
                  This is equivalent to the following sequence of calls:
                  &lt;pre&gt;
                  translate(x, y);
                  rotate(theta);
                  translate(-x, -y);
                  &lt;/pre&gt;
                  Rotating with a positive angle theta rotates points on the positive
                  x axis toward the positive y axis.                
                <param>
                    theta The angle of rotation in radians.                    
                </param>
                <param>
                    x The x coordinate of the origin of the rotation                    
                </param>
                <param>
                    y The x coordinate of the origin of the rotation                    
                </param>
            </javadoc>
            <method name="rotate" type="void" line="1073">
                <params>
                    <param name="theta" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="1077">
                Concatenates the current transform of this Graphics2D with a
                  scaling transformation.
                  This is equivalent to calling transform(S), where S is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   sx   0    0   ]
                  [   0    sy   0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
            </javadoc>
            <method name="scale" type="void" line="1088">
                <params>
                    <param name="sx" type="double"/>
                    <param name="sy" type="double"/>
                </params>
            </method>
            <javadoc line="1092">
                Concatenates the current transform of this Graphics2D with a
                  shearing transformation.
                  This is equivalent to calling transform(SH), where SH is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   1   shx   0   ]
                  [  shy   1    0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    shx The factor by which coordinates are shifted towards the
                      positive X axis direction according to their Y coordinate                    
                </param>
                <param>
                    shy The factor by which coordinates are shifted towards the
                      positive Y axis direction according to their X coordinate                    
                </param>
            </javadoc>
            <method name="shear" type="void" line="1107">
                <params>
                    <param name="shx" type="double"/>
                    <param name="shy" type="double"/>
                </params>
            </method>
            <javadoc line="1111">
                Composes a Transform object with the transform in this
                  Graphics2D according to the rule last-specified-first-applied.
                  If the currrent transform is Cx, the result of composition
                  with Tx is a new transform Cx&apos;.  Cx&apos; becomes the current
                  transform for this Graphics2D.
                  Transforming a point p by the updated transform Cx&apos; is
                  equivalent to first transforming p by Tx and then transforming
                  the result by the original transform Cx.  In other words,
                  Cx&apos;(p) = Cx(Tx(p)).
                  A copy of the Tx is made, if necessary, so further
                  modifications to Tx do not affect rendering.                
                <param>
                    Tx The Transform object to be composed with the current
                      transform.                    
                </param>
                <see>
                    #setTransform                    
                </see>
                <see>
                    AffineTransform                    
                </see>
            </javadoc>
            <method name="transform" type="void" line="1128">
                <params>
                    <param name="xform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="1132">
                Translate                
            </javadoc>
            <method name="translate" type="void" line="1135">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="1137"/>
                <scope line="1142"/>
            </method>
            <javadoc line="1146">
                Sets the Transform in the current graphics state.                
                <param>
                    Tx The Transform object to be used in the rendering process.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    TransformChain                    
                </see>
                <see>
                    AffineTransform                    
                </see>
            </javadoc>
            <method name="setTransform" type="void" line="1153">
                <params>
                    <param name="Tx" type="AffineTransform"/>
                </params>
                <scope line="1154"/>
                <scope line="1157"/>
            </method>
            <method name="invalidateTransform" type="void" line="1163">
                <declaration name="type" type="int" line="1164"/>
                <declaration name="origTransformState" type="int" line="1165"/>
                <scope line="1166"/>
                <scope line="1170">
                    <declaration name="dtx" type="double" line="1171"/>
                    <declaration name="dty" type="double" line="1172"/>
                    <scope line="1175"/>
                    <scope line="1178"/>
                </scope>
                <scope line="1182"/>
                <scope line="1186"/>
                <scope line="1190">
                    <scope line="1195"/>
                </scope>
                <scope line="1199"/>
            </method>
            <javadoc line="1203">
                Returns the current Transform in the Graphics2D state.                
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="1208">
                <scope line="1209"/>
                <declaration name="tx" type="AffineTransform" line="1212"/>
            </method>
            <javadoc line="1216">
                Returns the current Transform ignoring the &quot;constrain&quot;
                  rectangle.                
            </javadoc>
            <method name="cloneTransform" type="AffineTransform" line="1220"/>
            <javadoc line="1223">
                Returns the current Paint in the Graphics2D state.                
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
            </javadoc>
            <method name="getPaint" type="Paint" line="1228"/>
            <javadoc line="1231">
                Returns the current Composite in the Graphics2D state.                
                <see>
                    #setComposite                    
                </see>
            </javadoc>
            <method name="getComposite" type="Composite" line="1235"/>
            <method name="getColor" type="Color" line="1238"/>
            <method name="validateColor" type="void" line="1241">
                <declaration name="eargb" type="int" line="1242"/>
                <scope line="1243"/>
                <scope line="1246">
                    <scope line="1248">
                        <declaration name="alphacomp" type="AlphaComposite" line="1249"/>
                        <declaration name="a" type="int" line="1250"/>
                    </scope>
                </scope>
            </method>
            <method name="setColor" type="void" line="1257">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <scope line="1258"/>
                <scope line="1263">
                    <scope line="1264"/>
                    <scope line="1268"/>
                </scope>
                <scope line="1272">
                    <scope line="1273"/>
                    <scope line="1277"/>
                </scope>
            </method>
            <javadoc line="1284">
                Sets the background color in this context used for clearing a region.
                  When Graphics2D is constructed for a component, the backgroung color is
                  inherited from the component. Setting the background color in the
                  Graphics2D context only affects the subsequent clearRect() calls and
                  not the background color of the component. To change the background
                  of the component, use appropriate methods of the component.                
                <param>
                    color The background color that should be used in
                      subsequent calls to clearRect().                    
                </param>
                <see>
                    getBackground                    
                </see>
                <see>
                    Graphics.clearRect()                    
                </see>
            </javadoc>
            <method name="setBackground" type="void" line="1296">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="1299">
                Returns the background color used for clearing a region.                
                <see>
                    setBackground                    
                </see>
            </javadoc>
            <method name="getBackground" type="Color" line="1303"/>
            <javadoc line="1306">
                Returns the current Stroke in the Graphics2D state.                
                <see>
                    setStroke                    
                </see>
            </javadoc>
            <method name="getStroke" type="Stroke" line="1310"/>
            <method name="getClipBounds" type="Rectangle" line="1313">
                <declaration name="r" type="Rectangle" line="1314"/>
                <scope line="1315"/>
                <scope line="1318">
                    <scope line="1319"/>
                    <scope line="1322"/>
                </scope>
                <scope line="1327"/>
            </method>
            <method name="getClipBounds" type="Rectangle" line="1332">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <scope line="1333">
                    <scope line="1334">
                        <scope line="1335"/>
                        <scope line="1338"/>
                    </scope>
                    <scope line="1343"/>
                </scope>
                <scope line="1347"/>
            </method>
            <method name="hitClip" type="boolean" line="1352">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="1353"/>
                <scope line="1356">
                    <declaration name="d" type="double" line="1357"/>
                </scope>
                <scope line="1364"/>
                <scope line="1370"/>
            </method>
            <method name="validateCompClip" type="void" line="1375">
                <declaration name="origClipState" type="int" line="1376"/>
                <scope line="1377"/>
                <scope line="1381">
                    <scope line="1383"/>
                    <scope line="1386"/>
                </scope>
                <scope line="1390">
                    <declaration name="cpi" type="PathIterator" line="1391"/>
                    <declaration name="box" type="int" line="1392"/>
                    <declaration name="sr" type="ShapeSpanIterator" line="1393"/>
                    <scope line="1394">
                        <declaration name="r" type="Region" line="1398"/>
                    </scope>
                    <scope line="1403"/>
                </scope>
                <scope line="1407"/>
            </method>
            <declaration name="NON_RECTILINEAR_TRANSFORM_MASK" type="int" line="1412"/>
            <method name="transformShape" type="Shape" line="1413">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="1414"/>
                <scope line="1417"/>
                <scope line="1420"/>
            </method>
            <method name="untransformShape" type="Shape" line="1424">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="1425"/>
                <scope line="1428">
                    <scope line="1429"/>
                    <scope line="1432"/>
                </scope>
                <scope line="1436"/>
            </method>
            <method name="transformShape" type="Shape" line="1440">
                <params>
                    <param name="tx" type="int"/>
                    <param name="ty" type="int"/>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="1441"/>
                <scope line="1444">
                    <declaration name="r" type="Rectangle" line="1445"/>
                </scope>
                <scope line="1449">
                    <declaration name="rect" type="Rectangle2D" line="1450"/>
                </scope>
                <scope line="1453"/>
                <declaration name="mat" type="AffineTransform" line="1456"/>
            </method>
            <method name="transformShape" type="Shape" line="1459">
                <params>
                    <param name="tx" type="AffineTransform"/>
                    <param name="clip" type="Shape"/>
                </params>
                <scope line="1460"/>
                <scope line="1463">
                    <declaration name="rect" type="Rectangle2D" line="1464"/>
                    <declaration name="matrix" type="double" line="1465"/>
                </scope>
                <scope line="1475"/>
            </method>
            <method name="clipRect" type="void" line="1480">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="setClip" type="void" line="1483">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="getClip" type="Shape" line="1486"/>
            <method name="setClip" type="void" line="1489">
                <params>
                    <param name="sh" type="Shape"/>
                </params>
            </method>
            <javadoc line="1493">
                Intersects the current clip with the specified Path and sets the
                  current clip to the resulting intersection. The clip is transformed
                  with the current transform in the Graphics2D state before being
                  intersected with the current clip. This method is used to make the
                  current clip smaller. To make the clip larger, use any setClip method.                
                <param>
                    p The Path to be intersected with the current clip.                    
                </param>
            </javadoc>
            <method name="clip" type="void" line="1501">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="1503"/>
            </method>
            <method name="setPaintMode" type="void" line="1509"/>
            <method name="setXORMode" type="void" line="1512">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <scope line="1513"/>
            </method>
            <declaration name="lastCAblit" type="Blit" line="1518"/>
            <declaration name="lastCAcomp" type="Composite" line="1519"/>
            <method name="copyArea" type="void" line="1520">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <scope line="1521"/>
                <scope line="1524">
                    <scope line="1526"/>
                    <scope line="1529"/>
                </scope>
                <scope line="1532"/>
            </method>
            <method name="doCopyArea" type="void" line="1536">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <scope line="1537"/>
                <declaration name="theData" type="SurfaceData" line="1540"/>
                <scope line="1541"/>
                <scope line="1544"/>
                <declaration name="clip" type="Region" line="1547"/>
                <declaration name="comp" type="Composite" line="1548"/>
                <scope line="1549">
                    <declaration name="dsttype" type="SurfaceType" line="1550"/>
                    <declaration name="comptype" type="CompositeType" line="1551"/>
                    <scope line="1552"/>
                </scope>
                <declaration name="ob" type="Blit" line="1560"/>
                <scope line="1561">
                    <scope line="1562">
                        <declaration name="partW" type="int" line="1563"/>
                        <declaration name="sx" type="int" line="1565"/>
                    </scope>
                </scope>
                <scope line="1570">
                    <scope line="1571">
                        <declaration name="partH" type="int" line="1572"/>
                        <declaration name="sy" type="int" line="1574"/>
                    </scope>
                </scope>
            </method>
            <method name="drawLine" type="void" line="1581">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <scope line="1582"/>
                <scope line="1585">
                    <scope line="1587"/>
                    <scope line="1590"/>
                </scope>
                <scope line="1593"/>
            </method>
            <method name="drawRoundRect" type="void" line="1597">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="arcW" type="int"/>
                    <param name="arcH" type="int"/>
                </params>
                <scope line="1598"/>
                <scope line="1601">
                    <scope line="1603"/>
                    <scope line="1606"/>
                </scope>
                <scope line="1609"/>
            </method>
            <method name="fillRoundRect" type="void" line="1613">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="arcW" type="int"/>
                    <param name="arcH" type="int"/>
                </params>
                <scope line="1614"/>
                <scope line="1617">
                    <scope line="1619"/>
                    <scope line="1622"/>
                </scope>
                <scope line="1625"/>
            </method>
            <method name="drawOval" type="void" line="1629">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="1630"/>
                <scope line="1633">
                    <scope line="1635"/>
                    <scope line="1638"/>
                </scope>
                <scope line="1641"/>
            </method>
            <method name="fillOval" type="void" line="1645">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="1646"/>
                <scope line="1649">
                    <scope line="1651"/>
                    <scope line="1654"/>
                </scope>
                <scope line="1657"/>
            </method>
            <method name="drawArc" type="void" line="1661">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="startAngl" type="int"/>
                    <param name="arcAngl" type="int"/>
                </params>
                <scope line="1662"/>
                <scope line="1665">
                    <scope line="1667"/>
                    <scope line="1670"/>
                </scope>
                <scope line="1673"/>
            </method>
            <method name="fillArc" type="void" line="1677">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="startAngl" type="int"/>
                    <param name="arcAngl" type="int"/>
                </params>
                <scope line="1678"/>
                <scope line="1681">
                    <scope line="1683"/>
                    <scope line="1686"/>
                </scope>
                <scope line="1689"/>
            </method>
            <method name="drawPolyline" type="void" line="1693">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
                <scope line="1694"/>
                <scope line="1697">
                    <scope line="1699"/>
                    <scope line="1702"/>
                </scope>
                <scope line="1705"/>
            </method>
            <method name="drawPolygon" type="void" line="1709">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
                <scope line="1710"/>
                <scope line="1713">
                    <scope line="1715"/>
                    <scope line="1718"/>
                </scope>
                <scope line="1721"/>
            </method>
            <method name="fillPolygon" type="void" line="1725">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
                <scope line="1726"/>
                <scope line="1729">
                    <scope line="1731"/>
                    <scope line="1734"/>
                </scope>
                <scope line="1737"/>
            </method>
            <method name="drawRect" type="void" line="1741">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="1742"/>
                <scope line="1745">
                    <scope line="1747"/>
                    <scope line="1750"/>
                </scope>
                <scope line="1753"/>
            </method>
            <method name="fillRect" type="void" line="1757">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="1758"/>
                <scope line="1761">
                    <scope line="1763"/>
                    <scope line="1766"/>
                </scope>
                <scope line="1769"/>
            </method>
            <method name="revalidateAll" type="void" line="1773">
                <scope line="1774">
                    <scope line="1776"/>
                    <scope line="1780"/>
                    <scope line="1783">
                        <declaration name="c" type="Color" line="1784"/>
                    </scope>
                </scope>
                <scope line="1789"/>
            </method>
            <method name="clearRect" type="void" line="1792">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="c" type="Composite" line="1793"/>
                <declaration name="p" type="Paint" line="1794"/>
            </method>
            <javadoc line="1802">
                Strokes the outline of a Path using the settings of the current
                  graphics state.  The rendering attributes applied include the
                  clip, transform, paint or color, composite and stroke attributes.                
                <param>
                    p The path to be drawn.                    
                </param>
                <see>
                    #setStroke                    
                </see>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
                <see>
                    #setComposite                    
                </see>
            </javadoc>
            <method name="draw" type="void" line="1816">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="1817"/>
                <scope line="1820">
                    <scope line="1822"/>
                    <scope line="1825"/>
                </scope>
                <scope line="1828"/>
            </method>
            <javadoc line="1832">
                Fills the interior of a Path using the settings of the current
                  graphics state. The rendering attributes applied include the
                  clip, transform, paint or color, and composite.                
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="fill" type="void" line="1844">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="1845"/>
                <scope line="1848">
                    <scope line="1850"/>
                    <scope line="1853"/>
                </scope>
                <scope line="1856"/>
            </method>
            <javadoc line="1860">
                Returns true if the given AffineTransform is an integer
                  translation.                
            </javadoc>
            <method name="isIntegerTranslation" type="boolean" line="1864">
                <params>
                    <param name="xform" type="AffineTransform"/>
                </params>
                <scope line="1865"/>
                <scope line="1868">
                    <declaration name="tx" type="double" line="1869"/>
                    <declaration name="ty" type="double" line="1870"/>
                </scope>
            </method>
            <javadoc line="1875">
                Returns the index of the tile corresponding to the supplied position
                  given the tile grid offset and size along the same axis.                
            </javadoc>
            <method name="getTileIndex" type="int" line="1879">
                <params>
                    <param name="p" type="int"/>
                    <param name="tileGridOffset" type="int"/>
                    <param name="tileSize" type="int"/>
                </params>
                <scope line="1881"/>
            </method>
            <javadoc line="1886">
                Returns a rectangle in image coordinates that may be required
                  in order to draw the given image into the given clipping region
                  through a pair of AffineTransforms.  In addition, horizontal and
                  vertical padding factors for antialising and interpolation may
                  be used.                
            </javadoc>
            <method name="getImageRegion" type="Rectangle" line="1893">
                <params>
                    <param name="img" type="RenderedImage"/>
                    <param name="compClip" type="Region"/>
                    <param name="transform" type="AffineTransform"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="padX" type="int"/>
                    <param name="padY" type="int"/>
                </params>
                <declaration name="imageRect" type="Rectangle" line="1894"/>
                <declaration name="result" type="Rectangle" line="1895"/>
                <scope line="1896">
                    <declaration name="p" type="double" line="1897"/>
                    <declaration name="x0" type="double" line="1904"/>
                    <scope line="1907">
                        <declaration name="pt" type="double" line="1908"/>
                        <scope line="1909"/>
                        <scope line="1912"/>
                        <scope line="1916"/>
                        <scope line="1919"/>
                    </scope>
                    <declaration name="x" type="int" line="1923"/>
                    <declaration name="w" type="int" line="1924"/>
                    <declaration name="y" type="int" line="1925"/>
                    <declaration name="h" type="int" line="1926"/>
                    <declaration name="clipRect" type="Rectangle" line="1927"/>
                </scope>
                <scope line="1930"/>
            </method>
            <javadoc line="1935">
                Draws an image, applying a transform from image space into user space
                  before drawing.
                  The transformation from user space into device space is done with
                  the current transform in the Graphics2D.
                  The given transformation is applied to the image before the
                  transform attribute in the Graphics2D state is applied.
                  The rendering attributes applied include the clip, transform,
                  and composite attributes. Note that the result is
                  undefined, if the given transform is noninvertible.                
                <param>
                    img The image to be drawn. Does nothing if img is null.                    
                </param>
                <param>
                    xform The transformation from image space into user space.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawRenderedImage" type="void" line="1953">
                <params>
                    <param name="img" type="RenderedImage"/>
                    <param name="xform" type="AffineTransform"/>
                </params>
                <scope line="1954"/>
                <scope line="1957">
                    <declaration name="bufImg" type="BufferedImage" line="1958"/>
                </scope>
                <declaration name="isIntegerTranslate" type="boolean" line="1962"/>
                <declaration name="pad" type="int" line="1963"/>
                <declaration name="region" type="Rectangle" line="1964"/>
                <scope line="1965"/>
                <scope line="1968"/>
                <declaration name="raster" type="Raster" line="1972"/>
                <declaration name="wRaster" type="WritableRaster" line="1973"/>
                <declaration name="minX" type="int" line="1974"/>
                <declaration name="minY" type="int" line="1975"/>
                <declaration name="width" type="int" line="1976"/>
                <declaration name="height" type="int" line="1977"/>
                <declaration name="px" type="int" line="1978"/>
                <declaration name="py" type="int" line="1979"/>
                <scope line="1980"/>
                <declaration name="transXform" type="AffineTransform" line="1983"/>
                <declaration name="cm" type="ColorModel" line="1985"/>
                <declaration name="bufImg" type="BufferedImage" line="1986"/>
            </method>
            <javadoc line="1989">
                Intersects &lt;code&gt;destRect&lt;/code&gt; with &lt;code&gt;clip&lt;/code&gt; and
                  overwrites &lt;code&gt;destRect&lt;/code&gt; with the result.
                  Returns false if the intersection was empty, true otherwise.                
            </javadoc>
            <method name="clipTo" type="boolean" line="1994">
                <params>
                    <param name="destRect" type="Rectangle"/>
                    <param name="clip" type="Rectangle"/>
                </params>
                <declaration name="x1" type="int" line="1995"/>
                <declaration name="x2" type="int" line="1996"/>
                <declaration name="y1" type="int" line="1997"/>
                <declaration name="y2" type="int" line="1998"/>
                <scope line="1999"/>
                <scope line="2004"/>
            </method>
            <javadoc line="2012">
                Draw a portion of a RenderedImage tile-by-tile with a given
                  integer image to user space translation.  The user to
                  device transform must also be an integer translation.                
            </javadoc>
            <method name="drawTranslatedRenderedImage" type="void" line="2017">
                <params>
                    <param name="img" type="RenderedImage"/>
                    <param name="region" type="Rectangle"/>
                    <param name="i2uTransX" type="int"/>
                    <param name="i2uTransY" type="int"/>
                </params>
                <declaration name="tileGridXOffset" type="int" line="2018"/>
                <declaration name="tileGridYOffset" type="int" line="2019"/>
                <declaration name="tileWidth" type="int" line="2020"/>
                <declaration name="tileHeight" type="int" line="2021"/>
                <declaration name="minTileX" type="int" line="2022"/>
                <declaration name="minTileY" type="int" line="2023"/>
                <declaration name="maxTileX" type="int" line="2024"/>
                <declaration name="maxTileY" type="int" line="2025"/>
                <declaration name="colorModel" type="ColorModel" line="2026"/>
                <declaration name="tileRect" type="Rectangle" line="2027"/>
                <scope line="2028">
                    <scope line="2029">
                        <declaration name="raster" type="Raster" line="2030"/>
                        <declaration name="wRaster" type="WritableRaster" line="2036"/>
                        <scope line="2037"/>
                        <scope line="2040"/>
                        <declaration name="bufImg" type="BufferedImage" line="2044"/>
                    </scope>
                </scope>
            </method>
            <method name="drawRenderableImage" type="void" line="2049">
                <params>
                    <param name="img" type="RenderableImage"/>
                    <param name="xform" type="AffineTransform"/>
                </params>
                <scope line="2050"/>
                <declaration name="pipeTransform" type="AffineTransform" line="2053"/>
                <declaration name="concatTransform" type="AffineTransform" line="2054"/>
                <declaration name="reverseTransform" type="AffineTransform" line="2056"/>
                <declaration name="rc" type="RenderContext" line="2057"/>
                <scope line="2058"/>
                <scope line="2061"/>
                <declaration name="rendering" type="RenderedImage" line="2065"/>
            </method>
            <method name="transformBounds" type="Rectangle" line="2068">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="tx" type="AffineTransform"/>
                </params>
                <scope line="2069"/>
                <declaration name="s" type="Shape" line="2072"/>
            </method>
            <method name="drawString" type="void" line="2075">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="2076"/>
                <scope line="2079">
                    <scope line="2080"/>
                </scope>
                <scope line="2086"/>
                <scope line="2089">
                    <scope line="2091"/>
                    <scope line="2094"/>
                </scope>
                <scope line="2097"/>
            </method>
            <method name="drawString" type="void" line="2101">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="2102"/>
                <scope line="2105">
                    <scope line="2106"/>
                </scope>
                <scope line="2112"/>
                <scope line="2115">
                    <scope line="2117"/>
                    <scope line="2120"/>
                </scope>
                <scope line="2123"/>
            </method>
            <method name="drawString" type="void" line="2127">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="2128"/>
                <scope line="2131"/>
                <declaration name="tl" type="TextLayout" line="2134"/>
            </method>
            <method name="drawString" type="void" line="2137">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="2138"/>
                <scope line="2141"/>
                <declaration name="tl" type="TextLayout" line="2144"/>
            </method>
            <method name="drawGlyphVector" type="void" line="2147">
                <params>
                    <param name="gv" type="GlyphVector"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="2148"/>
                <scope line="2151"/>
                <scope line="2154">
                    <scope line="2156"/>
                    <scope line="2159"/>
                </scope>
                <scope line="2162"/>
            </method>
            <method name="drawChars" type="void" line="2166">
                <params>
                    <param name="data" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="2167"/>
                <scope line="2170"/>
                <scope line="2173">
                    <scope line="2174"/>
                </scope>
                <scope line="2180"/>
                <scope line="2183">
                    <scope line="2185"/>
                    <scope line="2188"/>
                </scope>
                <scope line="2191"/>
            </method>
            <method name="drawBytes" type="void" line="2195">
                <params>
                    <param name="data" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="2196"/>
                <scope line="2199"/>
                <declaration name="chData" type="char" line="2202"/>
                <scope line="2203"/>
                <scope line="2206">
                    <scope line="2207"/>
                </scope>
                <scope line="2213"/>
                <scope line="2216">
                    <scope line="2218"/>
                    <scope line="2221"/>
                </scope>
                <scope line="2224"/>
            </method>
            <javadoc line="2228">
                Draws an image scaled to x,y,w,h in nonblocking mode with a
                  callback object.                
            </javadoc>
            <method name="drawImage" type="boolean" line="2232">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="2235">
                Not part of the advertised API but a useful utility method
                  to call internally.  This is for the case where we are
                  drawing to/from given coordinates using a given width/height,
                  but we guarantee that the weidth/height of the src and dest
                  areas are equal (no scale needed).                
            </javadoc>
            <method name="copyImage" type="boolean" line="2242">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="sx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="2243"/>
                <scope line="2246">
                    <scope line="2248"/>
                    <scope line="2251"/>
                </scope>
                <scope line="2255"/>
            </method>
            <javadoc line="2259">
                Draws an image scaled to x,y,w,h in nonblocking mode with a
                  solid background color and a callback object.                
            </javadoc>
            <method name="drawImage" type="boolean" line="2263">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="bg" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="2264"/>
                <scope line="2267"/>
                <scope line="2270"/>
                <scope line="2273"/>
                <scope line="2276">
                    <scope line="2278"/>
                    <scope line="2281"/>
                </scope>
                <scope line="2285"/>
            </method>
            <javadoc line="2289">
                Draws an image at x,y in nonblocking mode.                
            </javadoc>
            <method name="drawImage" type="boolean" line="2292">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="2295">
                Draws an image at x,y in nonblocking mode with a solid background
                  color and a callback object.                
            </javadoc>
            <method name="drawImage" type="boolean" line="2299">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="bg" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="2300"/>
                <scope line="2303"/>
                <scope line="2306">
                    <scope line="2308"/>
                    <scope line="2311"/>
                </scope>
                <scope line="2315"/>
            </method>
            <javadoc line="2319">
                Draws a subrectangle of an image scaled to a destination rectangle
                  in nonblocking mode with a callback object.                
            </javadoc>
            <method name="drawImage" type="boolean" line="2323">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="2326">
                Draws a subrectangle of an image scaled to a destination rectangle in
                  nonblocking mode with a solid background color and a callback object.                
            </javadoc>
            <method name="drawImage" type="boolean" line="2330">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="2331"/>
                <scope line="2334"/>
                <scope line="2337">
                    <declaration name="srcX" type="int" line="2338"/>
                    <scope line="2339"/>
                    <scope line="2344"/>
                    <scope line="2349"/>
                    <scope line="2354"/>
                </scope>
                <scope line="2361"/>
                <scope line="2364">
                    <scope line="2366"/>
                    <scope line="2369"/>
                </scope>
                <scope line="2373"/>
            </method>
            <javadoc line="2377">
                Draw an image, applying a transform from image space into user space
                  before drawing.
                  The transformation from user space into device space is done with
                  the current transform in the Graphics2D.
                  The given transformation is applied to the image before the
                  transform attribute in the Graphics2D state is applied.
                  The rendering attributes applied include the clip, transform,
                  paint or color and composite attributes. Note that the result is
                  undefined, if the given transform is non-invertible.                
                <param>
                    img The image to be drawn.                    
                </param>
                <param>
                    xform The transformation from image space into user space.                    
                </param>
                <param>
                    observer The image observer to be notified on the image producing
                      progress.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="2395">
                <params>
                    <param name="img" type="Image"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="2396"/>
                <scope line="2399"/>
                <scope line="2402"/>
                <scope line="2405">
                    <scope line="2407"/>
                    <scope line="2410"/>
                </scope>
                <scope line="2414"/>
            </method>
            <method name="drawImage" type="void" line="2418">
                <params>
                    <param name="bImg" type="BufferedImage"/>
                    <param name="op" type="BufferedImageOp"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="2419"/>
                <scope line="2422"/>
                <scope line="2425">
                    <scope line="2427"/>
                    <scope line="2430"/>
                </scope>
                <scope line="2433"/>
            </method>
            <javadoc line="2437">
                Get the rendering context of the font
                  within this Graphics2D context.                
            </javadoc>
            <method name="getFontRenderContext" type="FontRenderContext" line="2441">
                <scope line="2442">
                    <declaration name="aahint" type="int" line="2443"/>
                    <scope line="2444"/>
                    <declaration name="tx" type="AffineTransform" line="2447"/>
                    <scope line="2448">
                        <scope line="2449"/>
                        <scope line="2452"/>
                    </scope>
                </scope>
            </method>
            <declaration name="cachedFRC" type="FontRenderContext" line="2460"/>
            <javadoc line="2461">
                This object has no resources to dispose of per se, but the
                  doc comments for the base method in java.awt.Graphics imply
                  that this object will not be useable after it is disposed.
                  So, we sabotage the object to prevent further use to prevent
                  developers from relying on behavior that may not work on
                  other, less forgiving, VMs that really need to dispose of
                  resources.                
            </javadoc>
            <method name="dispose" type="void" line="2470"/>
            <javadoc line="2474">
                Graphics has a finalize method that automatically calls dispose()
                  for subclasses.  For SunGraphics2D we do not need to be finalized
                  so that method simply causes us to be enqueued on the Finalizer
                  queues for no good reason.  Unfortunately, that method and
                  implementation are now considered part of the public contract
                  of that base class so we can not remove or gut the method.
                  We override it here with an empty method and the VM is smart
                  enough to know that if our override is empty then it should not
                  mark us as finalizeable.                
            </javadoc>
            <method name="finalize" type="void" line="2485"/>
            <javadoc line="2487">
                Returns destination that this Graphics renders to.  This could be
                  either an Image or a Component; subclasses of SurfaceData are
                  responsible for returning the appropriate object.                
            </javadoc>
            <method name="getDestination" type="Object" line="2492"/>
            <javadoc line="2495">
                {@inheritDoc}                
                <see>
                    sun.java2d.DestSurfaceProvider#getDestSurface                    
                </see>
            </javadoc>
            <method name="getDestSurface" type="Surface" line="2499"/>
        </class>
    </source>