<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d">
        <interface name="StateTracker">
            <javadoc line="2">
                This interface is used to track changes to the complex data of an
                  object that implements the StateTrackable interface.
                  &lt;p&gt;
                  The usage pattern for code accessing the trackable data is as follows:
                  &lt;pre&gt;
                  StateTrackable trackedobject;
                  MyInfo cacheddata;
                  StateTracker cachetracker;
                  public synchronized MyInfo getInfoAbout(StateTrackable obj) {
                  if (trackedobject != obj || !cachetracker.isCurrent()) {
                  // Note: Always call getStateTracker() before
                  // caching any data about the objct...
                  cachetracker = obj.getStateTracker();
                  cacheddata = calculateInfoFrom(obj);
                  trackedobject = obj;
                  }
                  return cacheddata;
                  }
                  &lt;/pre&gt;
                  Note that the sample code above works correctly regardless of the{@link StateTrackable.State State} of the complex data of the object,
                  but it may be inefficient to store precalculated information about
                  an object whose current {@link StateTrackable.State State} is{@link StateTrackable.State#UNTRACKABLE UNTRACKABLE}and it is unnecessary to perform the {@link #isCurrent} test for
                  data whose current {@link StateTrackable.State State} is{@link StateTrackable.State#IMMUTABLE IMMUTABLE}.
                  Optimizations to the sample code for either or both of those terminal
                  States may be of benefit for some use cases, but is left out of the
                  example to reduce its complexity.                
                <see>
                    StateTrackable.State                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="ALWAYS_CURRENT" type="StateTracker" line="33"/>
            <javadoc line="33">
                An implementation of the StateTracker interface which
                  always returns true.
                  This implementation is useful for objects whose current{@link StateTrackable.State State} is{@link StateTrackable.State#IMMUTABLE IMMUTABLE}.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <anonymous_class line="39">
                <method name="isCurrent" type="boolean" line="40"/>
            </anonymous_class>
            <declaration name="NEVER_CURRENT" type="StateTracker" line="45"/>
            <javadoc line="45">
                An implementation of the StateTracker interface which
                  always returns false.
                  This implementation is useful for objects whose current{@link StateTrackable.State State} is{@link StateTrackable.State#UNTRACKABLE UNTRACKABLE}.
                  This implementation may also be useful for some objects
                  whose current {@link StateTrackable.State State} is{@link StateTrackable.State#DYNAMIC DYNAMIC}.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <anonymous_class line="53">
                <method name="isCurrent" type="boolean" line="54"/>
            </anonymous_class>
            <method name="isCurrent" type="boolean" line="59"/>
            <javadoc line="59">
                Returns true iff the contents of the complex data of the
                  associated StateTrackable object have not changed since
                  the time that this StateTracker was returned from its
                  getStateTracker() method.                
                <see>
                    StateTrackable                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>