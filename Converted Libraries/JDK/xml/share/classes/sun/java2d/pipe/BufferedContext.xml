<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="sun.java2d.pipe.hw.AccelSurface"/>
        <import package="sun.java2d.InvalidPipeException"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.loops.XORComposite"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <import package="sun.java2d.pipe.BufferedRenderPipe.BYTES_PER_SPAN"/>
        <class name="BufferedContext" line="40">
            <comment line="53">
                The following flags help the internals of validate() determine
                 the appropriate (meaning correct, or optimal) code path when
                 setting up the current context.  The flags can be bitwise OR&apos;d
                 together as needed.                
            </comment>
            <comment line="94">
                renamed from isValidatedPaintAColor as part of a work around for 6764257                
            </comment>
            <javadoc line="40">
                Base context class for managing state in a single-threaded rendering
                  environment.  Each state-setting operation (e.g. SET_COLOR) is added to
                  the provided RenderQueue, which will be processed at a later time by a
                  single thread.  Note that the RenderQueue lock must be acquired before
                  calling the validate() method (or any other method in this class).  See
                  the RenderQueue class comments for a sample usage scenario.                
                <see>
                    RenderQueue                    
                </see>
            </javadoc>
            <declaration name="NO_CONTEXT_FLAGS" type="int" line="59"/>
            <javadoc line="59">
                Indicates that no flags are needed; take all default code paths.                
            </javadoc>
            <declaration name="SRC_IS_OPAQUE" type="int" line="63"/>
            <javadoc line="63">
                Indicates that the source surface (or color value, if it is a simple
                  rendering operation) is opaque (has an alpha value of 1.0).  If this
                  flag is present, it allows us to disable blending in certain
                  situations in order to improve performance.                
            </javadoc>
            <declaration name="USE_MASK" type="int" line="70"/>
            <javadoc line="70">
                Indicates that the operation uses an alpha mask, which may determine
                  the code path that is used when setting up the current paint state.                
            </javadoc>
            <declaration name="rq" type="RenderQueue" line="76"/>
            <declaration name="buf" type="RenderBuffer" line="77"/>
            <declaration name="currentContext" type="BufferedContext" line="79"/>
            <javadoc line="79">
                This is a reference to the most recently validated BufferedContext.  If
                  this value is null, it means that there is no current context.  It is
                  provided here so that validate() only needs to do a quick reference
                  check to see if the BufferedContext passed to that method is the same
                  as the one we&apos;ve cached here.                
            </javadoc>
            <declaration name="validatedSrcData" type="AccelSurface" line="88"/>
            <declaration name="validatedDstData" type="AccelSurface" line="89"/>
            <declaration name="validatedClip" type="Region" line="90"/>
            <declaration name="validatedComp" type="Composite" line="91"/>
            <declaration name="validatedPaint" type="Paint" line="92"/>
            <declaration name="isValidatedPaintJustAColor" type="boolean" line="94"/>
            <declaration name="validatedRGB" type="int" line="95"/>
            <declaration name="validatedFlags" type="int" line="96"/>
            <declaration name="xformInUse" type="boolean" line="97"/>
            <declaration name="transX" type="int" line="98"/>
            <declaration name="transY" type="int" line="99"/>
            <method name="BufferedContext" type="constructor" line="101">
                <params>
                    <param name="rq" type="RenderQueue"/>
                </params>
            </method>
            <javadoc line="106">
                Fetches the BufferedContextContext associated with the dst. surface
                  and validates the context using the given parameters.  Most rendering
                  operations will call this method first in order to set the necessary
                  state before issuing rendering commands.
                  Note: must be called while the RenderQueue lock is held.                
                <throws>
                    InvalidPipeException if either src or dest surface is not valid
                      or lost                    
                </throws>
                <see>
                    RenderQueue#lock                    
                </see>
                <see>
                    RenderQueue#unlock                    
                </see>
            </javadoc>
            <method name="validateContext" type="void" line="125">
                <params>
                    <param name="srcData" type="AccelSurface"/>
                    <param name="dstData" type="AccelSurface"/>
                    <param name="clip" type="Region"/>
                    <param name="comp" type="Composite"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="paint" type="Paint"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="flags" type="int"/>
                </params>
                <comment line="126">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <declaration name="d3dc" type="BufferedContext" line="127"/>
            </method>
            <javadoc line="132">
                Fetches the BufferedContextassociated with the surface
                  and disables all context state settings.
                  Note: must be called while the RenderQueue lock is held.                
                <throws>
                    InvalidPipeException if the surface is not valid
                      or lost                    
                </throws>
                <see>
                    RenderQueue#lock                    
                </see>
                <see>
                    RenderQueue#unlock                    
                </see>
            </javadoc>
            <method name="validateContext" type="void" line="143">
                <params>
                    <param name="surface" type="AccelSurface"/>
                </params>
                <comment line="144">
                    assert rt.lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <javadoc line="149">
                Validates the given parameters against the current state for this
                  context.  If this context is not current, it will be made current
                  for the given source and destination surfaces, and the viewport will
                  be updated.  Then each part of the context state (clip, composite,
                  etc.) is checked against the previous value.  If the value has changed
                  since the last call to validate(), it will be updated accordingly.
                  Note that the SunGraphics2D parameter is only used for the purposes
                  of validating a (non-null) Paint parameter.  In all other cases it
                  is safe to pass a null SunGraphics2D and it will be ignored.
                  Note: must be called while the RenderQueue lock is held.                
                <throws>
                    InvalidPipeException if either src or dest surface is not valid
                      or lost                    
                </throws>
            </javadoc>
            <method name="validate" type="void" line="170">
                <params>
                    <param name="srcData" type="AccelSurface"/>
                    <param name="dstData" type="AccelSurface"/>
                    <param name="clip" type="Region"/>
                    <param name="comp" type="Composite"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="paint" type="Paint"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="flags" type="int"/>
                </params>
                <comment line="171">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="184">
                    REMIND: not 30-bit friendly                    
                </comment>
                <comment line="198">
                    this should be set when we are switching from paint to color                    
                </comment>
                <comment line="199">
                    in which case this condition will be true                    
                </comment>
                <comment line="208">
                    the clip is dependent on the destination surface, so we                    
                </comment>
                <comment line="209">
                    need to update it if we have a new destination surface                    
                </comment>
                <comment line="214">
                    make sure we update the color state (otherwise, it might                    
                </comment>
                <comment line="215">
                    not be updated if this is the first time the context                    
                </comment>
                <comment line="216">
                    is being validated)                    
                </comment>
                <comment line="220">
                    update the current source and destination surfaces                    
                </comment>
                <comment line="228">
                    validate clip                    
                </comment>
                <comment line="247">
                    validate composite (note that a change in the context flags                    
                </comment>
                <comment line="248">
                    may require us to update the composite state, even if the                    
                </comment>
                <comment line="249">
                    composite has not changed)                    
                </comment>
                <comment line="256">
                    the paint state is dependent on the composite state, so make                    
                </comment>
                <comment line="257">
                    sure we update the color below                    
                </comment>
                <comment line="263">
                    validate transform                    
                </comment>
                <comment line="284">
                    non-Color paints may require paint revalidation                    
                </comment>
                <comment line="289">
                    validate paint                    
                </comment>
                <comment line="299">
                    mark dstData dirty                    
                </comment>
                <comment line="300">
                    REMIND: is this really needed now? we do it in SunGraphics2D..                    
                </comment>
                <declaration name="updateClip" type="boolean" line="173"/>
                <declaration name="updatePaint" type="boolean" line="174"/>
                <scope line="178"/>
                <scope line="183">
                    <declaration name="newRGB" type="int" line="185"/>
                    <scope line="186">
                        <scope line="187"/>
                    </scope>
                    <scope line="191"/>
                </scope>
                <scope line="196"/>
                <scope line="206">
                    <scope line="207"/>
                    <scope line="213"/>
                </scope>
                <scope line="229">
                    <scope line="230">
                        <scope line="238"/>
                    </scope>
                    <scope line="241"/>
                </scope>
                <scope line="250">
                    <scope line="251"/>
                    <scope line="253"/>
                </scope>
                <declaration name="txChanged" type="boolean" line="264"/>
                <scope line="265">
                    <scope line="266"/>
                    <scope line="270">
                        <scope line="271"/>
                    </scope>
                    <scope line="275"/>
                </scope>
                <scope line="279"/>
                <scope line="285"/>
                <scope line="290">
                    <scope line="291"/>
                    <scope line="293"/>
                </scope>
            </method>
            <javadoc line="304">
                Invalidates the surfaces associated with this context.  This is
                  useful when the context is no longer needed, and we want to break
                  the chain caused by these surface references.
                  Note: must be called while the RenderQueue lock is held.                
                <see>
                    RenderQueue#lock                    
                </see>
                <see>
                    RenderQueue#unlock                    
                </see>
            </javadoc>
            <method name="invalidateSurfaces" type="void" line="314"/>
            <method name="setSurfaces" type="void" line="321">
                <params>
                    <param name="srcData" type="AccelSurface"/>
                    <param name="dstData" type="AccelSurface"/>
                </params>
                <comment line="322">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <method name="resetClip" type="void" line="329">
                <comment line="330">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <method name="setClip" type="void" line="335">
                <params>
                    <param name="clip" type="Region"/>
                </params>
                <comment line="336">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="343">
                    so that we have room for at least a span                    
                </comment>
                <comment line="346">
                    include a placeholder for the span count                    
                </comment>
                <comment line="363">
                    x1                    
                </comment>
                <comment line="364">
                    y1                    
                </comment>
                <comment line="365">
                    x2                    
                </comment>
                <comment line="366">
                    y2                    
                </comment>
                <scope line="337"/>
                <scope line="342">
                    <declaration name="countIndex" type="int" line="347"/>
                    <declaration name="spanCount" type="int" line="349"/>
                    <declaration name="remainingSpans" type="int" line="350"/>
                    <declaration name="span" type="int" line="351"/>
                    <declaration name="si" type="SpanIterator" line="352"/>
                    <scope line="353">
                        <scope line="354"/>
                    </scope>
                </scope>
            </method>
            <method name="resetComposite" type="void" line="376">
                <comment line="377">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <method name="setComposite" type="void" line="382">
                <params>
                    <param name="comp" type="Composite"/>
                    <param name="flags" type="int"/>
                </params>
                <comment line="383">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <scope line="384">
                    <declaration name="ac" type="AlphaComposite" line="385"/>
                </scope>
                <scope line="391">
                    <declaration name="xorPixel" type="int" line="392"/>
                </scope>
                <scope line="396"/>
            </method>
            <method name="resetTransform" type="void" line="401">
                <comment line="402">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <method name="setTransform" type="void" line="407">
                <params>
                    <param name="xform" type="AffineTransform"/>
                </params>
                <comment line="408">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
            </method>
            <javadoc line="419">
                Resets this context&apos;s surfaces and all attributes.
                  Note: must be called while the RenderQueue lock is held.                
                <see>
                    RenderQueue#lock                    
                </see>
                <see>
                    RenderQueue#unlock                    
                </see>
            </javadoc>
            <method name="invalidateContext" type="void" line="427"/>
            <method name="getRenderQueue" type="RenderQueue" line="440"/>
            <javadoc line="440">
                Returns a singleton {@code RenderQueue} object used by the rendering
                  pipeline.                
                <return>
                    a render queue                    
                </return>
                <see>
                    RenderQueue                    
                </see>
            </javadoc>
            <method name="saveState" type="void" line="449"/>
            <javadoc line="449">
                Saves the the state of this context.
                  It may reset the current context.
                  Note: must be called while the RenderQueue lock is held.                
                <see>
                    RenderQueue#lock                    
                </see>
                <see>
                    RenderQueue#unlock                    
                </see>
            </javadoc>
            <method name="restoreState" type="void" line="460"/>
            <javadoc line="460">
                Restores the native state of this context.
                  It may reset the current context.
                  Note: must be called while the RenderQueue lock is held.                
                <see>
                    RenderQueue#lock                    
                </see>
                <see>
                    RenderQueue#unlock                    
                </see>
            </javadoc>
        </class>
    </source>