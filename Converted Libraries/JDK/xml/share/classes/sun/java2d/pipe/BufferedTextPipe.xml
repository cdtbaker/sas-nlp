<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Composite"/>
        <import package="sun.font.GlyphList"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <class name="BufferedTextPipe" line="35">
            <extends class="GlyphListPipe"/>
            <declaration name="BYTES_PER_GLYPH_IMAGE" type="int" line="37"/>
            <declaration name="BYTES_PER_GLYPH_POSITION" type="int" line="38"/>
            <declaration name="OFFSET_CONTRAST" type="int" line="40"/>
            <javadoc line="40">
                The following offsets are used to pack the parameters in
                  createPackedParams().  (They are also used at the native level when
                  unpacking the params.)                
            </javadoc>
            <declaration name="OFFSET_RGBORDER" type="int" line="46"/>
            <declaration name="OFFSET_SUBPIXPOS" type="int" line="47"/>
            <declaration name="OFFSET_POSITIONS" type="int" line="48"/>
            <javadoc line="50">
                Packs the given parameters into a single int value in order to save
                  space on the rendering queue.  Note that most of these parameters
                  are only used for rendering LCD-optimized text, but conditionalizing
                  this work wouldn&apos;t make any impact on performance, so we will pack
                  those parameters even in the non-LCD case.                
            </javadoc>
            <method name="createPackedParams" type="int" line="57">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="gl" type="GlyphList"/>
                </params>
            </method>
            <declaration name="rq" type="RenderQueue" line="65"/>
            <method name="BufferedTextPipe" type="constructor" line="67">
                <params>
                    <param name="rq" type="RenderQueue"/>
                </params>
            </method>
            <method name="drawGlyphList" type="void" line="72">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="gl" type="GlyphList"/>
                </params>
                <comment line="74">
                    The native drawGlyphList() only works with two composite types:
                        - CompositeType.SrcOver (with any extra alpha), or
                        - CompositeType.Xor                    
                </comment>
                <comment line="81">
                    In addition to the composite types listed above, the logic
                     in OGLD3DSurfaceData.validatePipe() allows for
                     CompositeType.SrcNoEa, but only in the presence of an opaque
                     color.  If we reach this case, we know the color is opaque,
                     and therefore SrcNoEa is the same as SrcOverNoEa, so we
                     override the composite here.                    
                </comment>
                <declaration name="comp" type="Composite" line="78"/>
                <scope line="79"/>
                <scope line="92"/>
                <scope line="95"/>
            </method>
            <method name="enqueueGlyphList" type="void" line="102">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="gl" type="GlyphList"/>
                </params>
                <comment line="104">
                    assert rq.lock.isHeldByCurrentThread();                    
                </comment>
                <comment line="116">
                    make sure the RenderQueue keeps a hard reference to the FontStrike
                     so that the associated glyph images are not disposed while enqueued                    
                </comment>
                <comment line="122">
                    process the queue first and then enqueue the glyphs                    
                </comment>
                <comment line="127">
                    enqueue parameters                    
                </comment>
                <comment line="132">
                    now enqueue glyph information                    
                </comment>
                <comment line="139">
                    queue is too small to accomodate glyphs; perform
                     the operation directly on the queue flushing thread                    
                </comment>
                <declaration name="buf" type="RenderBuffer" line="104"/>
                <declaration name="totalGlyphs" type="int" line="105"/>
                <declaration name="glyphBytesRequired" type="int" line="106"/>
                <declaration name="posBytesRequired" type="int" line="107"/>
                <declaration name="totalBytesRequired" type="int" line="109"/>
                <declaration name="images" type="long[]" line="111"/>
                <declaration name="glyphListOrigX" type="float" line="112"/>
                <declaration name="glyphListOrigY" type="float" line="113"/>
                <scope line="119">
                    <scope line="120"/>
                    <scope line="133">
                        <declaration name="positions" type="float[]" line="134"/>
                    </scope>
                </scope>
                <scope line="137">
                    <anonymous_class line="140">
                        <method name="run" type="void" line="141"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="drawGlyphList" type="void" line="152"/>
            <javadoc line="152">
                Called as a separate Runnable when the operation is too large to fit
                  on the RenderQueue.  The OGL/D3D pipelines each have their own (small)
                  native implementation of this method.                
            </javadoc>
            <method name="validateContext" type="void" line="163"/>
            <javadoc line="163">
                Validates the state in the provided SunGraphics2D object.                
            </javadoc>
        </class>
    </source>