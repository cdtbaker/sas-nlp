<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="sun.java2d.SunGraphics2D"/>
        <interface name="ParallelogramPipe">
            <javadoc line="30">
                This interface defines the set of calls that pipeline objects
                  can use to pass on responsibility for drawing arbitrary
                  parallelogram shapes.
                  Six floating point numbers are provided and the parallelogram
                  is defined as the quadrilateral with the following vertices:
                  &lt;pre&gt;
                  origin: (x, y)
                  =&gt; (x+dx1, y+dy1)
                  =&gt; (x+dx1+dx2, y+dy1+dy2)
                  =&gt; (x+dx2, y+dy2)
                  =&gt; origin
                  &lt;/pre&gt;
                  The four u[xy][12] parameters are the unsorted extreme coordinates
                  of the primitive in user space.  They may have been generated by a
                  line or a rectangle so they could have u[xy]2 &lt; u[xy]1 in some cases.
                  They should be sorted before calculating the bounds of the original
                  primitive (such as for calculating the user space bounds for the
                  Paint.createContext() method).                
            </javadoc>
            <method name="fillParallelogram" type="void" line="51"/>
            <method name="drawParallelogram" type="void" line="58"/>
            <javadoc line="58">
                Draw a Parallelogram with the indicated line widths
                  assuming a standard BasicStroke with MITER joins.
                  lw1 specifies the width of the stroke along the dx1,dy1
                  vector and lw2 specifies the width of the stroke along
                  the dx2,dy2 vector.
                  This is equivalent to outsetting the indicated
                  parallelogram by lw/2 pixels, then insetting the
                  same parallelogram by lw/2 pixels and filling the
                  difference between the outer and inner parallelograms.                
            </javadoc>
        </interface>
    </source>