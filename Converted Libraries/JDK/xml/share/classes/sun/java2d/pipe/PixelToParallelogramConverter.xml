<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.Shape"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.awt.SunHints"/>
        <class name="PixelToParallelogramConverter" line="36">
            <extends class="PixelToShapeConverter"/>
            <implements interface="ShapeDrawPipe"/>
            <javadoc line="36">
                This class converts calls to the basic pixel rendering methods
                  into calls to the methods on a ParallelogramPipe.
                  Most calls are transformed into calls to the fill(Shape) method
                  by the parent PixelToShapeConverter class, but some calls are
                  transformed into calls to fill/drawParallelogram().                
            </javadoc>
            <declaration name="outrenderer" type="ParallelogramPipe" line="46"/>
            <declaration name="minPenSize" type="double" line="47"/>
            <declaration name="normPosition" type="double" line="48"/>
            <declaration name="normRoundingBias" type="double" line="49"/>
            <declaration name="adjustfill" type="boolean" line="50"/>
            <javadoc line="52">
                @param shapepipe pipeline to forward shape calls to                
                <param>
                    pgrampipe pipeline to forward parallelogram calls to
                      (and drawLine calls if possible)                    
                </param>
                <param>
                    minPenSize minimum pen size for dropout control                    
                </param>
                <param>
                    normPosition sub-pixel location to normalize endpoints
                      for STROKE_NORMALIZE cases                    
                </param>
                <param>
                    adjustFill boolean to control whethere normalization
                      constants are also applied to fill operations
                      (normally true for non-AA, false for AA)                    
                </param>
            </javadoc>
            <method name="PixelToParallelogramConverter" type="constructor" line="68">
                <params>
                    <param name="shapepipe" type="ShapeDrawPipe"/>
                    <param name="pgrampipe" type="ParallelogramPipe"/>
                    <param name="minPenSize" type="double"/>
                    <param name="normPosition" type="double"/>
                    <param name="adjustfill" type="boolean"/>
                </params>
            </method>
            <method name="drawLine" type="void" line="79">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <scope line="80"/>
            </method>
            <method name="drawRect" type="void" line="87">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="100">
                    Note: This calls the integer version which                    
                </comment>
                <comment line="101">
                    will verify that the local drawLine optimizations                    
                </comment>
                <comment line="102">
                    work and call super.drawLine(), if not.                    
                </comment>
                <scope line="88">
                    <scope line="89">
                        <declaration name="bs" type="BasicStroke" line="90"/>
                        <scope line="91">
                            <scope line="94">
                                <declaration name="lw" type="double" line="95"/>
                            </scope>
                        </scope>
                        <scope line="99"/>
                    </scope>
                </scope>
            </method>
            <method name="fillRect" type="void" line="113">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="114"/>
            </method>
            <method name="draw" type="void" line="119">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="120">
                    <declaration name="bs" type="BasicStroke" line="121"/>
                    <scope line="122">
                        <scope line="125">
                            <declaration name="r2d" type="Rectangle2D" line="126"/>
                            <declaration name="w" type="double" line="127"/>
                            <declaration name="h" type="double" line="128"/>
                            <declaration name="x" type="double" line="129"/>
                            <declaration name="y" type="double" line="130"/>
                            <scope line="131">
                                <declaration name="lw" type="double" line="132"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="137">
                        <declaration name="l2d" type="Line2D" line="138"/>
                        <scope line="142"/>
                    </scope>
                </scope>
            </method>
            <method name="fill" type="void" line="151">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="152">
                    <declaration name="r2d" type="Rectangle2D" line="153"/>
                    <declaration name="w" type="double" line="154"/>
                    <declaration name="h" type="double" line="155"/>
                    <scope line="156">
                        <declaration name="x" type="double" line="157"/>
                        <declaration name="y" type="double" line="158"/>
                    </scope>
                </scope>
            </method>
            <method name="len" type="double" line="167">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <method name="normalize" type="double" line="173">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <method name="drawGeneralLine" type="boolean" line="180">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="ux1" type="double"/>
                    <param name="uy1" type="double"/>
                    <param name="ux2" type="double"/>
                    <param name="uy2" type="double"/>
                </params>
                <comment line="189">
                    TODO: we could construct the GeneralPath directly                    
                </comment>
                <comment line="190">
                    for CAP_ROUND and save a lot of processing in that case...                    
                </comment>
                <comment line="191">
                    And again, we would need to deal with dropout control...                    
                </comment>
                <comment line="195">
                    Save the original dx, dy in case we need it to transform                    
                </comment>
                <comment line="196">
                    the linewidth as a perpendicular vector below                    
                </comment>
                <comment line="236">
                    PixelDrawPipes will add sg2d.transXY so we need to factor                    
                </comment>
                <comment line="237">
                    that out...                    
                </comment>
                <comment line="251">
                    Transform the linewidth...                    
                </comment>
                <comment line="252">
                    calculate the scaling factor for a unit vector                    
                </comment>
                <comment line="253">
                    perpendicular to the original user space line.                    
                </comment>
                <comment line="257">
                    dy = 0; already                    
                </comment>
                <comment line="259">
                    delta transform the transposed (90 degree rotated) unit vector                    
                </comment>
                <scope line="183"/>
                <declaration name="bs" type="BasicStroke" line="186"/>
                <declaration name="cap" type="int" line="187"/>
                <scope line="188"/>
                <declaration name="lw" type="double" line="194"/>
                <declaration name="dx" type="double" line="197"/>
                <declaration name="dy" type="double" line="198"/>
                <declaration name="x1" type="double" line="199"/>
                <scope line="203">
                    <declaration name="coords" type="double" line="204"/>
                </scope>
                <scope line="214">
                    <declaration name="tx" type="double" line="215"/>
                    <declaration name="ty" type="double" line="216"/>
                </scope>
                <scope line="232">
                    <scope line="235">
                        <declaration name="ix1" type="int" line="238"/>
                        <declaration name="iy1" type="int" line="239"/>
                        <declaration name="ix2" type="int" line="240"/>
                        <declaration name="iy2" type="int" line="241"/>
                    </scope>
                </scope>
                <scope line="250">
                    <declaration name="len" type="double" line="254"/>
                    <scope line="255"/>
                    <declaration name="unitvector" type="double" line="260"/>
                </scope>
                <declaration name="len" type="double" line="267"/>
                <declaration name="udx" type="double" line="268"/>
                <scope line="269">
                    <scope line="270"/>
                </scope>
                <scope line="275"/>
                <declaration name="px" type="double" line="279"/>
                <declaration name="py" type="double" line="280"/>
                <scope line="281"/>
            </method>
            <method name="fillRectangle" type="void" line="295">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="rx" type="double"/>
                    <param name="ry" type="double"/>
                    <param name="rw" type="double"/>
                    <param name="rh" type="double"/>
                </params>
                <declaration name="px" type="double" line="296"/>
                <declaration name="dx1" type="double" line="297"/>
                <declaration name="txform" type="AffineTransform" line="298"/>
                <scope line="312">
                    <declaration name="newx" type="double" line="313"/>
                    <declaration name="newy" type="double" line="314"/>
                </scope>
            </method>
            <method name="drawRectangle" type="void" line="330">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="rx" type="double"/>
                    <param name="ry" type="double"/>
                    <param name="rw" type="double"/>
                    <param name="rh" type="double"/>
                    <param name="lw" type="double"/>
                </params>
                <comment line="341">
                    lw along dx1,dy1 scale by transformed length of dx2,dy2 vectors                    
                </comment>
                <comment line="342">
                    and vice versa                    
                </comment>
                <comment line="366">
                    The line widths are large enough to consume the                    
                </comment>
                <comment line="367">
                    entire hole in the middle of the parallelogram                    
                </comment>
                <comment line="368">
                    so we can just fill the outer parallelogram.                    
                </comment>
                <declaration name="px" type="double" line="331"/>
                <declaration name="dx1" type="double" line="332"/>
                <declaration name="lw1" type="double" line="333"/>
                <declaration name="txform" type="AffineTransform" line="334"/>
                <scope line="351">
                    <declaration name="newx" type="double" line="352"/>
                    <declaration name="newy" type="double" line="353"/>
                </scope>
                <declaration name="len1" type="double" line="363"/>
                <declaration name="len2" type="double" line="364"/>
                <scope line="365"/>
                <scope line="373"/>
            </method>
            <javadoc line="381">
                This utility function handles the case where a drawRectangle
                  operation discovered that the interior hole in the rectangle
                  or parallelogram has been completely filled in by the stroke
                  width.  It calculates the outer parallelogram of the stroke
                  and issues a single fillParallelogram request to fill it.                
            </javadoc>
            <method name="fillOuterParallelogram" type="void" line="396">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="ux1" type="double"/>
                    <param name="uy1" type="double"/>
                    <param name="ux2" type="double"/>
                    <param name="uy2" type="double"/>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                    <param name="len1" type="double"/>
                    <param name="len2" type="double"/>
                    <param name="lw1" type="double"/>
                    <param name="lw2" type="double"/>
                </params>
                <comment line="402">
                    len1 is 0, replace udxy1 with perpendicular of udxy2                    
                </comment>
                <comment line="404">
                    both are 0, use a unit Y vector for udxy2                    
                </comment>
                <comment line="411">
                    len2 is 0, replace udxy2 with perpendicular of udxy1                    
                </comment>
                <declaration name="udx1" type="double" line="397"/>
                <declaration name="udy1" type="double" line="398"/>
                <declaration name="udx2" type="double" line="399"/>
                <declaration name="udy2" type="double" line="400"/>
                <scope line="401">
                    <scope line="403"/>
                </scope>
                <scope line="410"/>
            </method>
        </class>
    </source>