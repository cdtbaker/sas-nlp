<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.Color"/>
        <import package="java.awt.GradientPaint"/>
        <import package="java.awt.LinearGradientPaint"/>
        <import package="java.awt.MultipleGradientPaint"/>
        <import package="java.awt.MultipleGradientPaint.ColorSpaceType"/>
        <import package="java.awt.MultipleGradientPaint.CycleMethod"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.RadialGradientPaint"/>
        <import package="java.awt.TexturePaint"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.AffineTransformOp"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="sun.awt.image.PixelConverter"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <class name="BufferedPaints" line="22">
            <method name="setPaint" type="void" line="23">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="paint" type="Paint"/>
                    <param name="ctxflags" type="int"/>
                </params>
                <scope line="24"/>
                <scope line="27">
                    <declaration name="useMask" type="boolean" line="28"/>
                </scope>
            </method>
            <method name="resetPaint" type="void" line="47">
                <params>
                    <param name="rq" type="RenderQueue"/>
                </params>
                <declaration name="buf" type="RenderBuffer" line="49"/>
            </method>
            <javadoc line="52">
                Color support                
            </javadoc>
            <method name="setColor" type="void" line="55">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="pixel" type="int"/>
                </params>
                <declaration name="buf" type="RenderBuffer" line="57"/>
            </method>
            <javadoc line="61">
                Note: This code is factored out into a separate static method
                  so that it can be shared by both the Gradient and LinearGradient
                  implementations.  LinearGradient uses this code (for the
                  two-color sRGB case only) because it can be much faster than the
                  equivalent implementation that uses fragment shaders.
                  We use OpenGL&apos;s texture coordinate generator to automatically
                  apply a smooth gradient (either cyclic or acyclic) to the geometry
                  being rendered.  This technique is almost identical to the one
                  described in the comments for BufferedPaints.setTexturePaint(),
                  except the calculations take place in one dimension instead of two.
                  Instead of an anchor rectangle in the TexturePaint case, we use
                  the vector between the two GradientPaint end points in our
                  calculations.  The generator uses a single plane equation that
                  takes the (x,y) location (in device space) of the fragment being
                  rendered to calculate a (u) texture coordinate for that fragment:
                  u = Ax + By + Cz + Dw
                  The gradient renderer uses a two-pixel 1D texture where the first
                  pixel contains the first GradientPaint color, and the second pixel
                  contains the second GradientPaint color.  (Note that we use the
                  GL_CLAMP_TO_EDGE wrapping mode for acyclic gradients so that we
                  clamp the colors properly at the extremes.)  The following diagram
                  attempts to show the layout of the texture containing the two
                  GradientPaint colors (C1 and C2):
                  +-----------------+
                  |   C1   |   C2   |
                  |        |        |
                  +-----------------+
                  u=0  .25  .5   .75  1
                  We calculate our plane equation constants (A,B,D) such that u=0.25
                  corresponds to the first GradientPaint end point in user space and
                  u=0.75 corresponds to the second end point.  This is somewhat
                  non-obvious, but since the gradient colors are generated by
                  interpolating between C1 and C2, we want the pure color at the
                  end points, and we will get the pure color only when u correlates
                  to the center of a texel.  The following chart shows the expected
                  color for some sample values of u (where C&apos; is the color halfway
                  between C1 and C2):
                  u value      acyclic (GL_CLAMP)      cyclic (GL_REPEAT)
                  -------      ------------------      ------------------
                  -0.25              C1                       C2
                  0.0               C1                       C&apos;
                  0.25              C1                       C1
                  0.5               C&apos;                       C&apos;
                  0.75              C2                       C2
                  1.0               C2                       C&apos;
                  1.25              C2                       C1
                  Original inspiration for this technique came from UMD&apos;s Agile2D
                  project (GradientManager.java).                
            </javadoc>
            <method name="setGradientPaint" type="void" line="111">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="c1" type="Color"/>
                    <param name="c2" type="Color"/>
                    <param name="pt1" type="Point2D"/>
                    <param name="pt2" type="Point2D"/>
                    <param name="isCyclic" type="boolean"/>
                    <param name="useMask" type="boolean"/>
                </params>
                <declaration name="pc" type="PixelConverter" line="112"/>
                <declaration name="pixel1" type="int" line="113"/>
                <declaration name="pixel2" type="int" line="114"/>
                <declaration name="x" type="double" line="115"/>
                <declaration name="y" type="double" line="116"/>
                <declaration name="len" type="double" line="120"/>
                <declaration name="p0" type="double" line="124"/>
                <scope line="125"/>
                <scope line="131"/>
                <declaration name="buf" type="RenderBuffer" line="135"/>
            </method>
            <method name="setGradientPaint" type="void" line="142">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="paint" type="GradientPaint"/>
                    <param name="useMask" type="boolean"/>
                </params>
            </method>
            <javadoc line="145">
                We use OpenGL&apos;s texture coordinate generator to automatically
                  map the TexturePaint image to the geometry being rendered.  The
                  generator uses two separate plane equations that take the (x,y)
                  location (in device space) of the fragment being rendered to
                  calculate (u,v) texture coordinates for that fragment:
                  u = Ax + By + Cz + Dw
                  v = Ex + Fy + Gz + Hw
                  Since we use a 2D orthographic projection, we can assume that z=0
                  and w=1 for any fragment.  So we need to calculate appropriate
                  values for the plane equation constants (A,B,D) and (E,F,H) such
                  that {u,v}=0 for the top-left of the TexturePaint&apos;s anchor
                  rectangle and {u,v}=1 for the bottom-right of the anchor rectangle.
                  We can easily make the texture image repeat for {u,v} values
                  outside the range [0,1] by specifying the GL_REPEAT texture wrap
                  mode.
                  Calculating the plane equation constants is surprisingly simple.
                  We can think of it as an inverse matrix operation that takes
                  device space coordinates and transforms them into user space
                  coordinates that correspond to a location relative to the anchor
                  rectangle.  First, we translate and scale the current user space
                  transform by applying the anchor rectangle bounds.  We then take
                  the inverse of this affine transform.  The rows of the resulting
                  inverse matrix correlate nicely to the plane equation constants
                  we were seeking.                
            </javadoc>
            <method name="setTexturePaint" type="void" line="171">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="paint" type="TexturePaint"/>
                    <param name="useMask" type="boolean"/>
                </params>
                <declaration name="bi" type="BufferedImage" line="172"/>
                <declaration name="dstData" type="SurfaceData" line="173"/>
                <declaration name="srcData" type="SurfaceData" line="174"/>
                <declaration name="filter" type="boolean" line="175"/>
                <declaration name="at" type="AffineTransform" line="176"/>
                <declaration name="anchor" type="Rectangle2D" line="177"/>
                <declaration name="xp0" type="double" line="180"/>
                <scope line="181"/>
                <scope line="190"/>
                <declaration name="buf" type="RenderBuffer" line="194"/>
            </method>
            <declaration name="MULTI_MAX_FRACTIONS" type="int" line="202"/>
            <javadoc line="202">
                The maximum number of gradient &quot;stops&quot; supported by our native
                  fragment shader implementations.
                  This value has been empirically determined and capped to allow
                  our native shaders to run on all shader-level graphics hardware,
                  even on the older, more limited GPUs.  Even the oldest Nvidia
                  hardware could handle 16, or even 32 fractions without any problem.
                  But the first-generation boards from ATI would fall back into
                  software mode (which is unusably slow) for values larger than 12;
                  it appears that those boards do not have enough native registers
                  to support the number of array accesses required by our gradient
                  shaders.  So for now we will cap this value at 12, but we can
                  re-evaluate this in the future as hardware becomes more capable.                
            </javadoc>
            <javadoc line="217">
                Helper function to convert a color component in sRGB space to
                  linear RGB space.  Copied directly from the
                  MultipleGradientPaintContext class.                
            </javadoc>
            <method name="convertSRGBtoLinearRGB" type="int" line="222">
                <params>
                    <param name="color" type="int"/>
                </params>
                <declaration name="input" type="float" line="223"/>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <javadoc line="233">
                Helper function to convert a (non-premultiplied) Color in sRGB
                  space to an IntArgbPre pixel value, optionally in linear RGB space.
                  Based on the PixelConverter.ArgbPre.rgbToPixel() method.                
            </javadoc>
            <method name="colorToIntArgbPrePixel" type="int" line="238">
                <params>
                    <param name="c" type="Color"/>
                    <param name="linear" type="boolean"/>
                </params>
                <declaration name="rgb" type="int" line="239"/>
                <scope line="240"/>
                <declaration name="a" type="int" line="243"/>
                <declaration name="r" type="int" line="244"/>
                <declaration name="g" type="int" line="245"/>
                <declaration name="b" type="int" line="246"/>
                <scope line="247"/>
                <declaration name="a2" type="int" line="252"/>
            </method>
            <javadoc line="258">
                Converts the given array of Color objects into an int array
                  containing IntArgbPre pixel values.  If the linear parameter
                  is true, the Color values will be converted into a linear RGB
                  color space before being returned.                
            </javadoc>
            <method name="convertToIntArgbPrePixels" type="int[]" line="264">
                <params>
                    <param name="colors" type="Color[]"/>
                    <param name="linear" type="boolean"/>
                </params>
                <declaration name="pixels" type="int[]" line="265"/>
                <scope line="266"/>
            </method>
            <javadoc line="271">
                This method uses techniques that are nearly identical to those
                  employed in setGradientPaint() above.  The primary difference
                  is that at the native level we use a fragment shader to manually
                  apply the plane equation constants to the current fragment position
                  to calculate the gradient position in the range [0,1] (the native
                  code for GradientPaint does the same, except that it uses OpenGL&apos;s
                  automatic texture coordinate generation facilities).
                  One other minor difference worth mentioning is that
                  setGradientPaint() calculates the plane equation constants
                  such that the gradient end points are positioned at 0.25 and 0.75
                  (for reasons discussed in the comments for that method).  In
                  contrast, for LinearGradientPaint we setup the equation constants
                  such that the gradient end points fall at 0.0 and 1.0.  The
                  reason for this difference is that in the fragment shader we
                  have more control over how the gradient values are interpreted
                  (depending on the paint&apos;s CycleMethod).                
            </javadoc>
            <method name="setLinearGradientPaint" type="void" line="289">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="paint" type="LinearGradientPaint"/>
                    <param name="useMask" type="boolean"/>
                </params>
                <declaration name="linear" type="boolean" line="290"/>
                <declaration name="colors" type="Color[]" line="291"/>
                <declaration name="numStops" type="int" line="292"/>
                <declaration name="pt1" type="Point2D" line="293"/>
                <declaration name="pt2" type="Point2D" line="294"/>
                <declaration name="at" type="AffineTransform" line="295"/>
                <scope line="297">
                    <declaration name="isCyclic" type="boolean" line="298"/>
                </scope>
                <declaration name="cycleMethod" type="int" line="302"/>
                <declaration name="fractions" type="float[]" line="303"/>
                <declaration name="pixels" type="int[]" line="304"/>
                <declaration name="x" type="double" line="305"/>
                <declaration name="y" type="double" line="306"/>
                <declaration name="len" type="double" line="310"/>
                <declaration name="p0" type="float" line="313"/>
                <scope line="314"/>
                <scope line="320"/>
                <declaration name="buf" type="RenderBuffer" line="324"/>
            </method>
            <javadoc line="336">
                This method calculates six m values and a focusX value that
                  are used by the native fragment shader.  These techniques are
                  based on a whitepaper by Daniel Rice on radial gradient performance
                  (attached to the bug report for 6521533).  One can refer to that
                  document for the complete set of formulas and calculations, but
                  the basic goal is to compose a transform that will convert an
                  (x,y) position in device space into a &quot;u&quot; value that represents
                  the relative distance to the gradient focus point.  The resulting
                  value can be used to look up the appropriate color by linearly
                  interpolating between the two nearest colors in the gradient.                
            </javadoc>
            <method name="setRadialGradientPaint" type="void" line="348">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="paint" type="RadialGradientPaint"/>
                    <param name="useMask" type="boolean"/>
                </params>
                <declaration name="linear" type="boolean" line="349"/>
                <declaration name="cycleMethod" type="int" line="350"/>
                <declaration name="fractions" type="float[]" line="351"/>
                <declaration name="colors" type="Color[]" line="352"/>
                <declaration name="numStops" type="int" line="353"/>
                <declaration name="pixels" type="int[]" line="354"/>
                <declaration name="center" type="Point2D" line="355"/>
                <declaration name="focus" type="Point2D" line="356"/>
                <declaration name="radius" type="float" line="357"/>
                <declaration name="cx" type="double" line="358"/>
                <declaration name="cy" type="double" line="359"/>
                <declaration name="fx" type="double" line="360"/>
                <declaration name="fy" type="double" line="361"/>
                <declaration name="at" type="AffineTransform" line="362"/>
                <scope line="368"/>
                <scope line="371"/>
                <declaration name="buf" type="RenderBuffer" line="377"/>
            </method>
        </class>
    </source>