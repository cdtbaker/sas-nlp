<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Composite"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.Blit"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.MaskBlit"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <class name="BufferedMaskBlit" line="37">
            <extends class="MaskBlit"/>
            <javadoc line="37">
                The MaskBlit operation is expressed as:
                  dst = ((src &lt;MODE&gt; dst)  pathA) + (dst  (1 - pathA))
                  The OGL/D3D implementation of the MaskBlit operation differs from the above
                  equation because it is not possible to perform such a complex operation in
                  OpenGL/Direct3D (without the use of advanced techniques like fragment
                  shaders and multitexturing).  Therefore, the BufferedMaskBlit operation
                  is expressed as:
                  dst = (src  pathA) &lt;SrcOver&gt; dst
                  This simplified formula is only equivalent to the &quot;true&quot; MaskBlit equation
                  in the following situations:
                  - &lt;MODE&gt; is SrcOver
                  - &lt;MODE&gt; is Src, extra alpha == 1.0, and the source surface is opaque
                  Therefore, we register BufferedMaskBlit primitives for only the SurfaceType
                  and CompositeType restrictions mentioned above.  In addition for the Src
                  case, we must override the composite with a SrcOver (no extra alpha)
                  instance, so that we set up the OpenGL/Direct3D blending mode to match the
                  BufferedMaskBlit equation.                
            </javadoc>
            <declaration name="ST_INT_ARGB" type="int" line="61"/>
            <declaration name="ST_INT_ARGB_PRE" type="int" line="62"/>
            <declaration name="ST_INT_RGB" type="int" line="63"/>
            <declaration name="ST_INT_BGR" type="int" line="64"/>
            <declaration name="rq" type="RenderQueue" line="66"/>
            <declaration name="srcTypeVal" type="int" line="67"/>
            <declaration name="blitop" type="Blit" line="68"/>
            <method name="BufferedMaskBlit" type="constructor" line="74">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="compType" type="CompositeType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
                <scope line="77"/>
                <scope line="79"/>
                <scope line="81"/>
                <scope line="83"/>
                <scope line="85"/>
            </method>
            <method name="MaskBlit" type="void" line="97">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="srcx" type="int"/>
                    <param name="srcy" type="int"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="mask" type="byte[]"/>
                    <param name="maskoff" type="int"/>
                    <param name="maskscan" type="int"/>
                </params>
                <comment line="103">
                    no mask involved; delegate to regular blit loop                    
                </comment>
                <comment line="128">
                    REMIND: we should fix this so that it works with tiles that
                             are larger than the entire buffer, but the native
                             OGLD3DMaskBlit isn&apos;t even prepared for tiles larger
                             than 32x32 pixels, so there&apos;s no urgency here...                    
                </comment>
                <comment line="136">
                    enqueue parameters and tile pixels                    
                </comment>
                <scope line="98"/>
                <scope line="102">
                    <scope line="104"/>
                </scope>
                <declaration name="acomp" type="AlphaComposite" line="116"/>
                <scope line="117"/>
                <scope line="122">
                    <declaration name="buf" type="RenderBuffer" line="125"/>
                    <declaration name="totalBytesRequired" type="int" line="126"/>
                    <declaration name="newpos" type="int" line="137"/>
                </scope>
                <scope line="144"/>
            </method>
            <method name="enqueueTile" type="int" line="149"/>
            <method name="validateContext" type="void" line="157"/>
            <javadoc line="157">
                Validates the context state using the given destination surface
                  and composite/clip values.                
            </javadoc>
        </class>
    </source>