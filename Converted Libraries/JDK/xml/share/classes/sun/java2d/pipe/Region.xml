<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.RectangularShape"/>
        <class name="Region" line="6">
            <javadoc line="6">
                This class encapsulates a definition of a two dimensional region which
                  consists of a number of Y ranges each containing multiple X bands.
                  &lt;p&gt;
                  A rectangular Region is allowed to have a null band list in which
                  case the rectangular shape is defined by the bounding box parameters
                  (lox, loy, hix, hiy).
                  &lt;p&gt;
                  The band list, if present, consists of a list of rows in ascending Y
                  order, ending at endIndex which is the index beyond the end of the
                  last row.  Each row consists of at least 3 + 2n entries (n &gt;= 1)
                  where the first 3 entries specify the Y range as start, end, and
                  the number of X ranges in that Y range.  These 3 entries are
                  followed by pairs of X coordinates in ascending order:
                  &lt;pre&gt;
                  bands[rowstart+0] = Y0;        // starting Y coordinate
                  bands[rowstart+1] = Y1;        // ending Y coordinate - endY &gt; startY
                  bands[rowstart+2] = N;         // number of X bands - N &gt;= 1
                  bands[rowstart+3] = X10;       // starting X coordinate of first band
                  bands[rowstart+4] = X11;       // ending X coordinate of first band
                  bands[rowstart+5] = X20;       // starting X coordinate of second band
                  bands[rowstart+6] = X21;       // ending X coordinate of second band
                  ...
                  bands[rowstart+3+N2-2] = XN0; // starting X coord of last band
                  bands[rowstart+3+N2-1] = XN1; // ending X coord of last band
                  bands[rowstart+3+N2] = ...    // start of next Y row
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="INIT_SIZE" type="int" line="35"/>
            <declaration name="GROW_SIZE" type="int" line="36"/>
            <class name="ImmutableRegion" line="37">
                <extends class="Region"/>
                <javadoc line="37">
                    Immutable Region.                    
                </javadoc>
                <method name="ImmutableRegion" type="constructor" line="41">
                    <params>
                        <param name="lox" type="int"/>
                        <param name="loy" type="int"/>
                        <param name="hix" type="int"/>
                        <param name="hiy" type="int"/>
                    </params>
                </method>
                <method name="appendSpans" type="void" line="44">
                    <params>
                        <param name="si" type="sun.java2d.pipe.SpanIterator"/>
                    </params>
                </method>
                <method name="setOutputArea" type="void" line="46">
                    <params>
                        <param name="r" type="java.awt.Rectangle"/>
                    </params>
                </method>
                <method name="setOutputAreaXYWH" type="void" line="48">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="setOutputArea" type="void" line="50">
                    <params>
                        <param name="box" type="int[]"/>
                    </params>
                </method>
                <method name="setOutputAreaXYXY" type="void" line="52">
                    <params>
                        <param name="lox" type="int"/>
                        <param name="loy" type="int"/>
                        <param name="hix" type="int"/>
                        <param name="hiy" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="EMPTY_REGION" type="Region" line="55"/>
            <declaration name="WHOLE_REGION" type="Region" line="56"/>
            <declaration name="lox" type="int" line="57"/>
            <declaration name="loy" type="int" line="58"/>
            <declaration name="hix" type="int" line="59"/>
            <declaration name="hiy" type="int" line="60"/>
            <declaration name="endIndex" type="int" line="61"/>
            <declaration name="bands" type="int[]" line="62"/>
            <method name="initIDs" type="void" line="63"/>
            <scope line="64"/>
            <javadoc line="67">
                Adds the dimension &lt;code&gt;dim&lt;/code&gt; to the coordinate
                  &lt;code&gt;start&lt;/code&gt; with appropriate clipping.  If
                  &lt;code&gt;dim&lt;/code&gt; is non-positive then the method returns
                  the start coordinate.  If the sum overflows an integer
                  data type then the method returns &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.                
            </javadoc>
            <method name="dimAdd" type="int" line="74">
                <params>
                    <param name="start" type="int"/>
                    <param name="dim" type="int"/>
                </params>
            </method>
            <javadoc line="79">
                Adds the delta {@code dv} to the value {@code v} with
                  appropriate clipping to the bounds of Integer resolution.
                  If the answer would be greater than {@code Integer.MAX_VALUE}then {@code Integer.MAX_VALUE} is returned.
                  If the answer would be less than {@code Integer.MIN_VALUE}then {@code Integer.MIN_VALUE} is returned.
                  Otherwise the sum is returned.                
            </javadoc>
            <method name="clipAdd" type="int" line="86">
                <params>
                    <param name="v" type="int"/>
                    <param name="dv" type="int"/>
                </params>
                <declaration name="newv" type="int" line="87"/>
                <scope line="88"/>
            </method>
            <method name="Region" type="constructor" line="93">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Returns a Region object covering the pixels which would be
                  touched by a fill or clip operation on a Graphics implementation
                  on the specified Shape object under the optionally specified
                  AffineTransform object.                
                <param>
                    s a non-null Shape object specifying the geometry enclosing
                      the pixels of interest                    
                </param>
                <param>
                    at an optional &lt;code&gt;AffineTransform&lt;/code&gt; to be applied to the
                      coordinates as they are returned in the iteration, or
                      &lt;code&gt;null&lt;/code&gt; if untransformed coordinates are desired                    
                </param>
            </javadoc>
            <method name="getInstance" type="Region" line="110">
                <params>
                    <param name="s" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="113">
                Returns a Region object covering the pixels which would be
                  touched by a fill or clip operation on a Graphics implementation
                  on the specified Shape object under the optionally specified
                  AffineTransform object further restricted by the specified
                  device bounds.
                  &lt;p&gt;
                  Note that only the bounds of the specified Region are used to
                  restrict the resulting Region.
                  If devBounds is non-rectangular and clipping to the specific
                  bands of devBounds is needed, then an intersection of the
                  resulting Region with devBounds must be performed in a
                  subsequent step.                
                <param>
                    devBounds a non-null Region specifying some bounds to
                      clip the geometry to                    
                </param>
                <param>
                    s a non-null Shape object specifying the geometry enclosing
                      the pixels of interest                    
                </param>
                <param>
                    at an optional &lt;code&gt;AffineTransform&lt;/code&gt; to be applied to the
                      coordinates as they are returned in the iteration, or
                      &lt;code&gt;null&lt;/code&gt; if untransformed coordinates are desired                    
                </param>
            </javadoc>
            <method name="getInstance" type="Region" line="134">
                <params>
                    <param name="devBounds" type="Region"/>
                    <param name="s" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="137">
                Returns a Region object covering the pixels which would be
                  touched by a fill or clip operation on a Graphics implementation
                  on the specified Shape object under the optionally specified
                  AffineTransform object further restricted by the specified
                  device bounds.
                  If the normalize parameter is true then coordinate normalization
                  is performed as per the 2D Graphics non-antialiasing implementation
                  of the VALUE_STROKE_NORMALIZE hint.
                  &lt;p&gt;
                  Note that only the bounds of the specified Region are used to
                  restrict the resulting Region.
                  If devBounds is non-rectangular and clipping to the specific
                  bands of devBounds is needed, then an intersection of the
                  resulting Region with devBounds must be performed in a
                  subsequent step.                
                <param>
                    devBounds a non-null Region specifying some bounds to
                      clip the geometry to                    
                </param>
                <param>
                    normalize a boolean indicating whether or not to apply
                      normalization                    
                </param>
                <param>
                    s a non-null Shape object specifying the geometry enclosing
                      the pixels of interest                    
                </param>
                <param>
                    at an optional &lt;code&gt;AffineTransform&lt;/code&gt; to be applied to the
                      coordinates as they are returned in the iteration, or
                      &lt;code&gt;null&lt;/code&gt; if untransformed coordinates are desired                    
                </param>
            </javadoc>
            <method name="getInstance" type="Region" line="163">
                <params>
                    <param name="devBounds" type="Region"/>
                    <param name="normalize" type="boolean"/>
                    <param name="s" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <scope line="164"/>
                <declaration name="box" type="int" line="167"/>
                <declaration name="sr" type="ShapeSpanIterator" line="168"/>
                <scope line="169">
                    <declaration name="r" type="Region" line="173"/>
                </scope>
                <scope line="177"/>
            </method>
            <javadoc line="181">
                Returns a Region object with a rectangle of interest specified
                  by the indicated Rectangle object.
                  &lt;p&gt;
                  This method can also be used to create a simple rectangular
                  region.                
            </javadoc>
            <method name="getInstance" type="Region" line="188">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="191">
                Returns a Region object with a rectangle of interest specified
                  by the indicated rectangular area in x, y, width, height format.
                  &lt;p&gt;
                  This method can also be used to create a simple rectangular
                  region.                
            </javadoc>
            <method name="getInstanceXYWH" type="Region" line="198">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="201">
                Returns a Region object with a rectangle of interest specified
                  by the indicated span array.
                  &lt;p&gt;
                  This method can also be used to create a simple rectangular
                  region.                
            </javadoc>
            <method name="getInstance" type="Region" line="208">
                <params>
                    <param name="box" type="int"/>
                </params>
            </method>
            <javadoc line="211">
                Returns a Region object with a rectangle of interest specified
                  by the indicated rectangular area in lox, loy, hix, hiy format.
                  &lt;p&gt;
                  This method can also be used to create a simple rectangular
                  region.                
            </javadoc>
            <method name="getInstanceXYXY" type="Region" line="218">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <javadoc line="221">
                Sets the rectangle of interest for storing and returning
                  region bands.
                  &lt;p&gt;
                  This method can also be used to initialize a simple rectangular
                  region.                
            </javadoc>
            <method name="setOutputArea" type="void" line="228">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="231">
                Sets the rectangle of interest for storing and returning
                  region bands.  The rectangle is specified in x, y, width, height
                  format and appropriate clipping is performed as per the method
                  &lt;code&gt;dimAdd&lt;/code&gt;.
                  &lt;p&gt;
                  This method can also be used to initialize a simple rectangular
                  region.                
            </javadoc>
            <method name="setOutputAreaXYWH" type="void" line="240">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="243">
                Sets the rectangle of interest for storing and returning
                  region bands.  The rectangle is specified as a span array.
                  &lt;p&gt;
                  This method can also be used to initialize a simple rectangular
                  region.                
            </javadoc>
            <method name="setOutputArea" type="void" line="250">
                <params>
                    <param name="box" type="int"/>
                </params>
            </method>
            <javadoc line="256">
                Sets the rectangle of interest for storing and returning
                  region bands.  The rectangle is specified in lox, loy,
                  hix, hiy format.
                  &lt;p&gt;
                  This method can also be used to initialize a simple rectangular
                  region.                
            </javadoc>
            <method name="setOutputAreaXYXY" type="void" line="264">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <javadoc line="270">
                Appends the list of spans returned from the indicated
                  SpanIterator.  Each span must be at a higher starting
                  Y coordinate than the previous data or it must have a
                  Y range equal to the highest Y band in the region and a
                  higher X coordinate than any of the spans in that band.                
            </javadoc>
            <method name="appendSpans" type="void" line="277">
                <params>
                    <param name="si" type="SpanIterator"/>
                </params>
                <declaration name="box" type="int[]" line="278"/>
                <scope line="279"/>
            </method>
            <javadoc line="285">
                Returns a Region object that represents the same list of
                  rectangles as the current Region object, translated by
                  the specified dx, dy translation factors.                
            </javadoc>
            <method name="getTranslatedRegion" type="Region" line="290">
                <params>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <scope line="291"/>
                <declaration name="tlox" type="int" line="294"/>
                <declaration name="tloy" type="int" line="295"/>
                <declaration name="thix" type="int" line="296"/>
                <declaration name="thiy" type="int" line="297"/>
                <scope line="298"/>
                <declaration name="ret" type="Region" line="301"/>
                <declaration name="bands" type="int" line="302"/>
                <scope line="303">
                    <declaration name="end" type="int" line="304"/>
                    <declaration name="newbands" type="int" line="306"/>
                    <declaration name="i" type="int" line="308"/>
                    <declaration name="ncol" type="int" line="309"/>
                    <scope line="310">
                        <scope line="317"/>
                    </scope>
                </scope>
            </method>
            <method name="getSafeTranslatedRegion" type="Region" line="327">
                <params>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <declaration name="tlox" type="int" line="328"/>
                <declaration name="tloy" type="int" line="329"/>
                <declaration name="thix" type="int" line="330"/>
                <declaration name="thiy" type="int" line="331"/>
                <declaration name="ret" type="Region" line="332"/>
                <declaration name="bands" type="int" line="333"/>
                <scope line="334">
                    <declaration name="end" type="int" line="335"/>
                    <declaration name="newbands" type="int" line="336"/>
                    <declaration name="i" type="int" line="337"/>
                    <declaration name="j" type="int" line="338"/>
                    <declaration name="ncol" type="int" line="339"/>
                    <scope line="340">
                        <declaration name="y1" type="int" line="341"/>
                        <declaration name="savej" type="int" line="345"/>
                        <scope line="346">
                            <scope line="347">
                                <declaration name="x1" type="int" line="348"/>
                                <declaration name="x2" type="int" line="349"/>
                                <scope line="350"/>
                            </scope>
                        </scope>
                        <scope line="356"/>
                        <scope line="359"/>
                        <scope line="362"/>
                    </scope>
                    <scope line="366">
                        <scope line="367"/>
                        <scope line="370"/>
                    </scope>
                    <scope line="377"/>
                </scope>
            </method>
            <javadoc line="384">
                Returns a Region object that represents the intersection of
                  this object with the specified Rectangle.  The return value
                  may be this same object if no clipping occurs.                
            </javadoc>
            <method name="getIntersection" type="Region" line="389">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="392">
                Returns a Region object that represents the intersection of
                  this object with the specified rectangular area.  The return
                  value may be this same object if no clipping occurs.                
            </javadoc>
            <method name="getIntersectionXYWH" type="Region" line="397">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="400">
                Returns a Region object that represents the intersection of
                  this object with the specified rectangular area.  The return
                  value may be this same object if no clipping occurs.                
            </javadoc>
            <method name="getIntersectionXYXY" type="Region" line="405">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
                <scope line="406"/>
                <declaration name="ret" type="Region" line="409"/>
                <scope line="410"/>
            </method>
            <javadoc line="415">
                Returns a Region object that represents the intersection of this
                  object with the specified Region object.
                  &lt;p&gt;
                  If {@code A} and {@code B} are both Region Objects and
                  &lt;code&gt;C = A.getIntersection(B);&lt;/code&gt; then a point will
                  be contained in {@code C} iff it is contained in both{@code A} and {@code B}.
                  &lt;p&gt;
                  The return value may be this same object or the argument
                  Region object if no clipping occurs.                
            </javadoc>
            <method name="getIntersection" type="Region" line="426">
                <params>
                    <param name="r" type="Region"/>
                </params>
                <scope line="427"/>
                <scope line="430"/>
                <declaration name="ret" type="Region" line="433"/>
                <scope line="434"/>
            </method>
            <javadoc line="439">
                Returns a Region object that represents the union of this
                  object with the specified Region object.
                  &lt;p&gt;
                  If {@code A} and {@code B} are both Region Objects and
                  &lt;code&gt;C = A.getUnion(B);&lt;/code&gt; then a point will
                  be contained in {@code C} iff it is contained in either{@code A} or {@code B}.
                  &lt;p&gt;
                  The return value may be this same object or the argument
                  Region object if no augmentation occurs.                
            </javadoc>
            <method name="getUnion" type="Region" line="450">
                <params>
                    <param name="r" type="Region"/>
                </params>
                <scope line="451"/>
                <scope line="454"/>
                <declaration name="ret" type="Region" line="457"/>
            </method>
            <javadoc line="461">
                Returns a Region object that represents the difference of the
                  specified Region object subtracted from this object.
                  &lt;p&gt;
                  If {@code A} and {@code B} are both Region Objects and
                  &lt;code&gt;C = A.getDifference(B);&lt;/code&gt; then a point will
                  be contained in {@code C} iff it is contained in{@code A} but not contained in {@code B}.
                  &lt;p&gt;
                  The return value may be this same object or the argument
                  Region object if no clipping occurs.                
            </javadoc>
            <method name="getDifference" type="Region" line="472">
                <params>
                    <param name="r" type="Region"/>
                </params>
                <scope line="473"/>
                <scope line="476"/>
                <declaration name="ret" type="Region" line="479"/>
            </method>
            <javadoc line="483">
                Returns a Region object that represents the exclusive or of this
                  object with the specified Region object.
                  &lt;p&gt;
                  If {@code A} and {@code B} are both Region Objects and
                  &lt;code&gt;C = A.getExclusiveOr(B);&lt;/code&gt; then a point will
                  be contained in {@code C} iff it is contained in either{@code A} or {@code B}, but not if it is contained in both.
                  &lt;p&gt;
                  The return value may be this same object or the argument
                  Region object if either is empty.                
            </javadoc>
            <method name="getExclusiveOr" type="Region" line="494">
                <params>
                    <param name="r" type="Region"/>
                </params>
                <scope line="495"/>
                <scope line="498"/>
                <declaration name="ret" type="Region" line="501"/>
            </method>
            <declaration name="INCLUDE_A" type="int" line="505"/>
            <declaration name="INCLUDE_B" type="int" line="506"/>
            <declaration name="INCLUDE_COMMON" type="int" line="507"/>
            <method name="filterSpans" type="void" line="508">
                <params>
                    <param name="ra" type="Region"/>
                    <param name="rb" type="Region"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="abands" type="int" line="509"/>
                <declaration name="bbands" type="int" line="510"/>
                <scope line="511"/>
                <scope line="514"/>
                <declaration name="box" type="int" line="517"/>
                <declaration name="acolstart" type="int" line="518"/>
                <declaration name="ay1" type="int" line="519"/>
                <declaration name="ay2" type="int" line="520"/>
                <declaration name="acolend" type="int" line="521"/>
                <declaration name="bcolstart" type="int" line="523"/>
                <declaration name="by1" type="int" line="524"/>
                <declaration name="by2" type="int" line="525"/>
                <declaration name="bcolend" type="int" line="526"/>
                <declaration name="y" type="int" line="528"/>
                <scope line="529">
                    <scope line="530">
                        <scope line="531"/>
                        <scope line="538"/>
                    </scope>
                    <scope line="544">
                        <scope line="545"/>
                        <scope line="552"/>
                    </scope>
                    <declaration name="yend" type="int" line="558"/>
                    <scope line="559">
                        <scope line="560"/>
                        <scope line="565">
                            <declaration name="acol" type="int" line="568"/>
                            <scope line="569"/>
                        </scope>
                    </scope>
                    <scope line="576">
                        <scope line="578">
                            <declaration name="bcol" type="int" line="581"/>
                            <scope line="582"/>
                        </scope>
                    </scope>
                    <scope line="589">
                        <declaration name="acol" type="int" line="593"/>
                        <declaration name="bcol" type="int" line="594"/>
                        <declaration name="ax1" type="int" line="595"/>
                        <declaration name="ax2" type="int" line="596"/>
                        <declaration name="bx1" type="int" line="597"/>
                        <declaration name="bx2" type="int" line="598"/>
                        <declaration name="x" type="int" line="599"/>
                        <scope line="601">
                            <scope line="602">
                                <scope line="603"/>
                                <scope line="607"/>
                            </scope>
                            <scope line="613">
                                <scope line="614"/>
                                <scope line="618"/>
                            </scope>
                            <declaration name="xend" type="int" line="624"/>
                            <declaration name="appendit" type="boolean" line="625"/>
                            <scope line="626">
                                <scope line="627"/>
                                <scope line="631"/>
                            </scope>
                            <scope line="636"/>
                            <scope line="640"/>
                            <scope line="644"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="657">
                Returns a Region object that represents the bounds of the
                  intersection of this object with the bounds of the specified
                  Region object.
                  &lt;p&gt;
                  The return value may be this same object if no clipping occurs
                  and this Region is rectangular.                
            </javadoc>
            <method name="getBoundsIntersection" type="Region" line="665">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="668">
                Returns a Region object that represents the bounds of the
                  intersection of this object with the bounds of the specified
                  rectangular area in x, y, width, height format.
                  &lt;p&gt;
                  The return value may be this same object if no clipping occurs
                  and this Region is rectangular.                
            </javadoc>
            <method name="getBoundsIntersectionXYWH" type="Region" line="676">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="679">
                Returns a Region object that represents the bounds of the
                  intersection of this object with the bounds of the specified
                  rectangular area in lox, loy, hix, hiy format.
                  &lt;p&gt;
                  The return value may be this same object if no clipping occurs
                  and this Region is rectangular.                
            </javadoc>
            <method name="getBoundsIntersectionXYXY" type="Region" line="687">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
                <scope line="688"/>
            </method>
            <javadoc line="693">
                Returns a Region object that represents the intersection of
                  this object with the bounds of the specified Region object.
                  &lt;p&gt;
                  The return value may be this same object or the argument
                  Region object if no clipping occurs and the Regions are
                  rectangular.                
            </javadoc>
            <method name="getBoundsIntersection" type="Region" line="701">
                <params>
                    <param name="r" type="Region"/>
                </params>
                <scope line="702"/>
                <scope line="705"/>
            </method>
            <javadoc line="710">
                Appends a single span defined by the 4 parameters
                  spanlox, spanloy, spanhix, spanhiy.
                  This span must be at a higher starting Y coordinate than
                  the previous data or it must have a Y range equal to the
                  highest Y band in the region and a higher X coordinate
                  than any of the spans in that band.                
            </javadoc>
            <method name="appendSpan" type="void" line="718">
                <params>
                    <param name="box" type="int"/>
                </params>
                <declaration name="spanlox" type="int" line="719"/>
                <scope line="724"/>
                <declaration name="curYrow" type="int" line="727"/>
                <scope line="728">
                    <scope line="729"/>
                    <scope line="732"/>
                </scope>
                <scope line="741">
                    <scope line="742"/>
                </scope>
                <scope line="748"/>
            </method>
            <method name="needSpace" type="void" line="755">
                <params>
                    <param name="num" type="int"/>
                </params>
                <scope line="756">
                    <declaration name="newbands" type="int[]" line="757"/>
                </scope>
            </method>
            <method name="endRow" type="void" line="762">
                <params>
                    <param name="box" type="int"/>
                </params>
                <declaration name="cur" type="int" line="763"/>
                <declaration name="prev" type="int" line="764"/>
                <scope line="765">
                    <declaration name="bands" type="int[]" line="766"/>
                    <scope line="767">
                        <declaration name="num" type="int" line="768"/>
                        <scope line="771">
                            <scope line="772"/>
                        </scope>
                        <scope line="777"/>
                    </scope>
                </scope>
            </method>
            <method name="calcBBox" type="void" line="787">
                <declaration name="bands" type="int[]" line="788"/>
                <scope line="789">
                    <scope line="790"/>
                    <scope line="793"/>
                </scope>
                <declaration name="lox" type="int" line="803"/>
                <declaration name="hix" type="int" line="804"/>
                <declaration name="hiyindex" type="int" line="805"/>
                <declaration name="i" type="int" line="806"/>
                <scope line="807">
                    <declaration name="numbands" type="int" line="809"/>
                    <scope line="811"/>
                    <scope line="815"/>
                </scope>
            </method>
            <javadoc line="824">
                Returns the lowest X coordinate in the Region.                
            </javadoc>
            <method name="getLoX" type="int" line="827"/>
            <javadoc line="830">
                Returns the lowest Y coordinate in the Region.                
            </javadoc>
            <method name="getLoY" type="int" line="833"/>
            <javadoc line="836">
                Returns the highest X coordinate in the Region.                
            </javadoc>
            <method name="getHiX" type="int" line="839"/>
            <javadoc line="842">
                Returns the highest Y coordinate in the Region.                
            </javadoc>
            <method name="getHiY" type="int" line="845"/>
            <javadoc line="848">
                Returns the width of this Region clipped to the range (0 - MAX_INT).                
            </javadoc>
            <method name="getWidth" type="int" line="851">
                <declaration name="w" type="int" line="853"/>
                <scope line="854"/>
            </method>
            <javadoc line="859">
                Returns the height of this Region clipped to the range (0 - MAX_INT).                
            </javadoc>
            <method name="getHeight" type="int" line="862">
                <declaration name="h" type="int" line="864"/>
                <scope line="865"/>
            </method>
            <javadoc line="870">
                Returns true iff this Region encloses no area.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="873"/>
            <javadoc line="876">
                Returns true iff this Region represents a single simple
                  rectangular area.                
            </javadoc>
            <method name="isRectangular" type="boolean" line="880"/>
            <javadoc line="883">
                Returns true iff this Region contains the specified coordinate.                
            </javadoc>
            <method name="contains" type="boolean" line="886">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="i" type="int" line="889"/>
                <scope line="890">
                    <scope line="891"/>
                    <scope line="894">
                        <declaration name="numspans" type="int" line="895"/>
                    </scope>
                    <scope line="898">
                        <declaration name="end" type="int" line="899"/>
                        <scope line="901"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="910">
                Returns true iff this Region lies inside the indicated
                  rectangular area specified in x, y, width, height format
                  with appropriate clipping performed as per the dimAdd method.                
            </javadoc>
            <method name="isInsideXYWH" type="boolean" line="915">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="918">
                Returns true iff this Region lies inside the indicated
                  rectangular area specified in lox, loy, hix, hiy format.                
            </javadoc>
            <method name="isInsideXYXY" type="boolean" line="922">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <javadoc line="925">
                Quickly checks if this Region lies inside the specified
                  Region object.
                  &lt;p&gt;
                  This method will return false if the specified Region
                  object is not a simple rectangle.                
            </javadoc>
            <method name="isInsideQuickCheck" type="boolean" line="932">
                <params>
                    <param name="r" type="Region"/>
                </params>
            </method>
            <javadoc line="935">
                Quickly checks if this Region intersects the specified
                  rectangular area specified in lox, loy, hix, hiy format.
                  &lt;p&gt;
                  This method tests only against the bounds of this region
                  and does not bother to test if the rectangular region
                  actually intersects any bands.                
            </javadoc>
            <method name="intersectsQuickCheckXYXY" type="boolean" line="943">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <javadoc line="946">
                Quickly checks if this Region intersects the specified
                  Region object.
                  &lt;p&gt;
                  This method tests only against the bounds of this region
                  and does not bother to test if the rectangular region
                  actually intersects any bands.                
            </javadoc>
            <method name="intersectsQuickCheck" type="boolean" line="954">
                <params>
                    <param name="r" type="Region"/>
                </params>
            </method>
            <javadoc line="957">
                Quickly checks if this Region surrounds the specified
                  Region object.
                  &lt;p&gt;
                  This method will return false if this Region object is
                  not a simple rectangle.                
            </javadoc>
            <method name="encompasses" type="boolean" line="964">
                <params>
                    <param name="r" type="Region"/>
                </params>
            </method>
            <javadoc line="967">
                Quickly checks if this Region surrounds the specified
                  rectangular area specified in x, y, width, height format.
                  &lt;p&gt;
                  This method will return false if this Region object is
                  not a simple rectangle.                
            </javadoc>
            <method name="encompassesXYWH" type="boolean" line="974">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="977">
                Quickly checks if this Region surrounds the specified
                  rectangular area specified in lox, loy, hix, hiy format.
                  &lt;p&gt;
                  This method will return false if this Region object is
                  not a simple rectangle.                
            </javadoc>
            <method name="encompassesXYXY" type="boolean" line="984">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <javadoc line="987">
                Gets the bbox of the available spans, clipped to the OutputArea.                
            </javadoc>
            <method name="getBounds" type="void" line="990">
                <params>
                    <param name="pathbox" type="int"/>
                </params>
            </method>
            <javadoc line="996">
                Clips the indicated bbox array to the bounds of this Region.                
            </javadoc>
            <method name="clipBoxToBounds" type="void" line="999">
                <params>
                    <param name="bbox" type="int"/>
                </params>
            </method>
            <javadoc line="1005">
                Gets an iterator object to iterate over the spans in this region.                
            </javadoc>
            <method name="getIterator" type="RegionIterator" line="1008"/>
            <javadoc line="1011">
                Gets a span iterator object that iterates over the spans in this region                
            </javadoc>
            <method name="getSpanIterator" type="SpanIterator" line="1014"/>
            <javadoc line="1017">
                Gets a span iterator object that iterates over the spans in this region
                  but clipped to the bounds given in the argument (xlo, ylo, xhi, yhi).                
            </javadoc>
            <method name="getSpanIterator" type="SpanIterator" line="1021">
                <params>
                    <param name="bbox" type="int"/>
                </params>
                <declaration name="result" type="SpanIterator" line="1022"/>
            </method>
            <javadoc line="1026">
                Returns a SpanIterator that is the argument iterator filtered by
                  this region.                
            </javadoc>
            <method name="filter" type="SpanIterator" line="1030">
                <params>
                    <param name="si" type="SpanIterator"/>
                </params>
                <scope line="1031"/>
                <scope line="1034"/>
            </method>
            <method name="toString" type="String" line="1039">
                <declaration name="sb" type="StringBuffer" line="1040"/>
                <scope line="1050">
                    <declaration name="col" type="int" line="1051"/>
                    <scope line="1052">
                        <declaration name="end" type="int" line="1058"/>
                        <scope line="1060"/>
                    </scope>
                </scope>
            </method>
            <method name="hashCode" type="int" line="1073"/>
            <method name="equals" type="boolean" line="1076">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="1077"/>
                <declaration name="r" type="Region" line="1080"/>
                <scope line="1081"/>
                <scope line="1084"/>
                <scope line="1087"/>
                <scope line="1090"/>
                <scope line="1093"/>
                <scope line="1096"/>
                <declaration name="abands" type="int" line="1099"/>
                <declaration name="bbands" type="int" line="1100"/>
                <scope line="1101">
                    <scope line="1102"/>
                </scope>
            </method>
        </class>
    </source>