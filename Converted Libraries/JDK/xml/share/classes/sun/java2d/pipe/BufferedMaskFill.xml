<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Composite"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.CompositeType"/>
        <import package="sun.java2d.loops.MaskFill"/>
        <import package="sun.java2d.loops.SurfaceType"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <class name="BufferedMaskFill" line="10">
            <extends class="MaskFill"/>
            <javadoc line="10">
                The MaskFill operation is expressed as:
                  dst = ((src &lt;MODE&gt; dst)  pathA) + (dst  (1 - pathA))
                  The OGL/D3D implementation of the MaskFill operation differs from the above
                  equation because it is not possible to perform such a complex operation in
                  OpenGL/Direct3D (without the use of advanced techniques like fragment
                  shaders and multitexturing).  Therefore, the BufferedMaskFill operation
                  is expressed as:
                  dst = (src  pathA) &lt;SrcOver&gt; dst
                  This simplified formula is only equivalent to the &quot;true&quot; MaskFill equation
                  in the following situations:
                  - &lt;MODE&gt; is SrcOver
                  - &lt;MODE&gt; is Src, extra alpha == 1.0, and the source paint is opaque
                  Therefore, we register BufferedMaskFill primitives for only the SurfaceType
                  and CompositeType restrictions mentioned above.  In addition, for the
                  SrcNoEa case we must override the incoming composite with a SrcOver (no
                  extra alpha) instance, so that we set up the OpenGL/Direct3D blending
                  mode to match the BufferedMaskFill equation.                
            </javadoc>
            <declaration name="rq" type="RenderQueue" line="30"/>
            <method name="BufferedMaskFill" type="constructor" line="31">
                <params>
                    <param name="rq" type="RenderQueue"/>
                    <param name="srcType" type="SurfaceType"/>
                    <param name="compType" type="CompositeType"/>
                    <param name="dstType" type="SurfaceType"/>
                </params>
            </method>
            <method name="MaskFill" type="void" line="35">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="mask" type="byte[]"/>
                    <param name="maskoff" type="int"/>
                    <param name="maskscan" type="int"/>
                </params>
                <declaration name="acomp" type="AlphaComposite" line="36"/>
                <scope line="37"/>
                <scope line="41">
                    <declaration name="maskBytesRequired" type="int" line="43"/>
                    <scope line="44"/>
                    <scope line="47"/>
                    <declaration name="totalBytesRequired" type="int" line="50"/>
                    <declaration name="buf" type="RenderBuffer" line="51"/>
                    <scope line="52">
                        <scope line="53"/>
                        <scope line="61">
                            <declaration name="padding" type="int" line="62"/>
                            <scope line="64"/>
                        </scope>
                    </scope>
                    <scope line="69">
                        <anonymous_class line="70">
                            <method name="run" type="void" line="71"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="78"/>
            </method>
            <method name="maskFill" type="void" line="82"/>
            <javadoc line="82">
                Called as a separate Runnable when the operation is too large to fit
                  on the RenderQueue.  The OGL/D3D pipelines each have their own (small)
                  native implementation of this method.                
            </javadoc>
            <method name="validateContext" type="void" line="88"/>
            <javadoc line="88">
                Validates the state in the provided SunGraphics2D object and sets up
                  any special resources for this operation (e.g. enabling gradient
                  shading).                
            </javadoc>
        </class>
    </source>