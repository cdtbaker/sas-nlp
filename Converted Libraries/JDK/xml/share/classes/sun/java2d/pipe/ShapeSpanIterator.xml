<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.Rectangle"/>
        <import package="sun.awt.geom.PathConsumer2D"/>
        <class name="ShapeSpanIterator" line="32">
            <comment line="81">
                Appends the geometry and winding rule from the indicated
                 path iterator.                
            </comment>
            <comment line="96">
                Appends the geometry from the indicated set of polygon points.                
            </comment>
            <comment line="102">
                Sets the normalization flag so that incoming data is
                 adjusted to nearest (0.25, 0.25) subpixel position.                
            </comment>
            <comment line="108">
                Sets the rectangle of interest for storing and returning
                 span segments.                
            </comment>
            <comment line="116">
                Sets the rectangle of interest for storing and returning
                 span segments.                
            </comment>
            <comment line="122">
                Sets the rectangle of interest for storing and returning
                 span segments to the specified Rectangle.                
            </comment>
            <comment line="130">
                Sets the rectangle of interest for storing and returning
                 span segments to the bounds of the specified Region.                
            </comment>
            <comment line="138">
                Sets the winding rule in the native data structures.                
            </comment>
            <comment line="143">
                Adds a single PathIterator segment to the internal list of
                 path element structures.                
            </comment>
            <comment line="149">
                Gets the bbox of the available path segments, clipped to the
                 OutputArea.                
            </comment>
            <comment line="155">
                Intersects the path box with the given bbox.
                 Returned spans are clipped to this region, or discarded
                 altogether if they lie outside it.                
            </comment>
            <comment line="162">
                Fetches the next span that needs to be operated on.
                 If the return value is false then there are no more spans.                
            </comment>
            <comment line="187">
                Cleans out all internal data structures.                
            </comment>
            <implements interface="SpanIterator"/>
            <implements interface="PathConsumer2D"/>
            <javadoc line="32">
                This class can iterate individual span elements generated by scan
                  converting a Shape.
                  This particular implementation flattens the incoming path and then
                  performs simple polygon tracing to calculate the spans.
                  Note that this class holds pointers to native data which must be
                  disposed.  It is not marked as finalizable since it is intended
                  to be very lightweight and finalization is a comparitively expensive
                  procedure.  The caller must specifically use try{} finally{} to
                  manually ensure that the object is disposed after use, otherwise
                  native data structures might be leaked.
                  Here is a code sample for using this class:
                  public void fillShape(Shape s, Rectangle clipRect) {
                  ShapeSpanIterator ssi = new ShapeSpanIterator(false);
                  try {
                  ssi.setOutputArea(clipRect);
                  ssi.appendPath(s.getPathIterator(null));
                  int spanbox[] = new int[4];
                  while (ssi.nextSpan(spanbox)) {
                  int x = spanbox[0];
                  int y = spanbox[1];
                  int w = spanbox[2] - x;
                  int h = spanbox[3] - y;
                  fillRect(x, y, w, h);
                  }
                  } finally {
                  ssi.dispose();
                  }
                  }                
            </javadoc>
            <declaration name="pData" type="long" line="68"/>
            <scope line="70"/>
            <method name="initIDs" type="void" line="74"/>
            <method name="ShapeSpanIterator" type="constructor" line="76">
                <params>
                    <param name="adjust" type="boolean"/>
                </params>
            </method>
            <method name="appendPath" type="void" line="84">
                <params>
                    <param name="pi" type="PathIterator"/>
                </params>
                <declaration name="coords" type="float" line="85"/>
                <scope line="88"/>
            </method>
            <method name="appendPoly" type="void" line="98"/>
            <method name="setNormalize" type="void" line="105"/>
            <method name="setOutputAreaXYWH" type="void" line="111">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="setOutputAreaXYXY" type="void" line="119"/>
            <method name="setOutputArea" type="void" line="125">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <method name="setOutputArea" type="void" line="133">
                <params>
                    <param name="r" type="Region"/>
                </params>
            </method>
            <method name="setRule" type="void" line="140"/>
            <method name="addSegment" type="void" line="146"/>
            <method name="getPathBox" type="void" line="152"/>
            <method name="intersectClipBox" type="void" line="159"/>
            <method name="nextSpan" type="boolean" line="165"/>
            <method name="skipDownTo" type="void" line="167"/>
            <javadoc line="167">
                This method tells the iterator that it may skip all spans
                  whose Y range is completely above the indicated Y coordinate.                
            </javadoc>
            <method name="getNativeIterator" type="long" line="173"/>
            <javadoc line="173">
                This method returns a native pointer to a function block that
                  can be used by a native method to perform the same iteration
                  cycle that the above methods provide while avoiding upcalls to
                  the Java object.
                  The definition of the structure whose pointer is returned by
                  this method is defined in:
                  &lt;pre&gt;
                  src/share/native/sun/java2d/pipe/SpanIterator.h
                  &lt;/pre&gt;                
            </javadoc>
            <method name="dispose" type="void" line="189"/>
            <method name="moveTo" type="void" line="191"/>
            <method name="lineTo" type="void" line="192"/>
            <method name="quadTo" type="void" line="193"/>
            <method name="curveTo" type="void" line="195"/>
            <method name="closePath" type="void" line="198"/>
            <method name="pathDone" type="void" line="199"/>
            <method name="getNativeConsumer" type="long" line="200"/>
        </class>
    </source>