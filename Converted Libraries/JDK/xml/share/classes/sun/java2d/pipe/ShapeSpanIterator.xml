<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.Rectangle"/>
        <import package="sun.awt.geom.PathConsumer2D"/>
        <class name="ShapeSpanIterator" line="5">
            <implements interface="SpanIterator"/>
            <implements interface="PathConsumer2D"/>
            <javadoc line="5">
                This class can iterate individual span elements generated by scan
                  converting a Shape.
                  This particular implementation flattens the incoming path and then
                  performs simple polygon tracing to calculate the spans.
                  Note that this class holds pointers to native data which must be
                  disposed.  It is not marked as finalizable since it is intended
                  to be very lightweight and finalization is a comparitively expensive
                  procedure.  The caller must specifically use try{} finally{} to
                  manually ensure that the object is disposed after use, otherwise
                  native data structures might be leaked.
                  Here is a code sample for using this class:
                  public void fillShape(Shape s, Rectangle clipRect) {
                  ShapeSpanIterator ssi = new ShapeSpanIterator(false);
                  try {
                  ssi.setOutputArea(clipRect);
                  ssi.appendPath(s.getPathIterator(null));
                  int spanbox[] = new int[4];
                  while (ssi.nextSpan(spanbox)) {
                  int x = spanbox[0];
                  int y = spanbox[1];
                  int w = spanbox[2] - x;
                  int h = spanbox[3] - y;
                  fillRect(x, y, w, h);
                  }
                  } finally {
                  ssi.dispose();
                  }
                  }                
            </javadoc>
            <declaration name="pData" type="long" line="36"/>
            <scope line="37"/>
            <method name="initIDs" type="void" line="40"/>
            <method name="ShapeSpanIterator" type="constructor" line="41">
                <params>
                    <param name="adjust" type="boolean"/>
                </params>
            </method>
            <method name="appendPath" type="void" line="44">
                <params>
                    <param name="pi" type="PathIterator"/>
                </params>
                <declaration name="coords" type="float" line="45"/>
                <scope line="47"/>
            </method>
            <method name="appendPoly" type="void" line="53"/>
            <method name="setNormalize" type="void" line="54"/>
            <method name="setOutputAreaXYWH" type="void" line="55">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="setOutputAreaXYXY" type="void" line="58"/>
            <method name="setOutputArea" type="void" line="59">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <method name="setOutputArea" type="void" line="62">
                <params>
                    <param name="r" type="Region"/>
                </params>
            </method>
            <method name="setRule" type="void" line="65"/>
            <method name="addSegment" type="void" line="66"/>
            <method name="getPathBox" type="void" line="67"/>
            <method name="intersectClipBox" type="void" line="68"/>
            <method name="nextSpan" type="boolean" line="69"/>
            <method name="skipDownTo" type="void" line="70"/>
            <javadoc line="70">
                This method tells the iterator that it may skip all spans
                  whose Y range is completely above the indicated Y coordinate.                
            </javadoc>
            <method name="getNativeIterator" type="long" line="75"/>
            <javadoc line="75">
                This method returns a native pointer to a function block that
                  can be used by a native method to perform the same iteration
                  cycle that the above methods provide while avoiding upcalls to
                  the Java object.
                  The definition of the structure whose pointer is returned by
                  this method is defined in:
                  &lt;pre&gt;
                  src/share/native/sun/java2d/pipe/SpanIterator.h
                  &lt;/pre&gt;                
            </javadoc>
            <method name="dispose" type="void" line="87"/>
            <method name="moveTo" type="void" line="88"/>
            <method name="lineTo" type="void" line="89"/>
            <method name="quadTo" type="void" line="90"/>
            <method name="curveTo" type="void" line="91"/>
            <method name="closePath" type="void" line="92"/>
            <method name="pathDone" type="void" line="93"/>
            <method name="getNativeConsumer" type="long" line="94"/>
        </class>
    </source>