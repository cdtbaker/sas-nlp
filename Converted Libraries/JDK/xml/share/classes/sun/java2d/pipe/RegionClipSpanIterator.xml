<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.Rectangle"/>
        <class name="RegionClipSpanIterator" line="4">
            <implements interface="SpanIterator"/>
            <javadoc line="4">
                This class clips a SpanIterator to a Region and outputs the
                  resulting spans as another SpanIterator.
                  Spans are output in the usual y/x order, unless the input span
                  iterator doesn&apos;t conform to this order, or the iterator&apos;s span
                  straddle more than one band of the Region used for clipping.
                  Principle of operation:
                  The iterator maintains a several cursors onto the RegionIterator
                  in order to avoid having to buffer spans from the SpanIterator.
                  They are:
                  resetState    The initial state of the RegionIterator
                  lwm             Low Water Mark, a running start point for
                  processing each band. Usually goes down, but
                  can be reset to resetState if a span has a lower
                  start coordinate than the previous one.
                  row             The start of the current band of the RegionIterator
                  box             The current span of the current row
                  The main nextSpan() loop implements a coroutine like structure, with
                  three producers to get the next span, row and box calling each other
                  to iterate through the span iterator and region.
                  REMIND: Needs a native implementation!                
            </javadoc>
            <declaration name="rgn" type="Region" line="27"/>
            <declaration name="spanIter" type="SpanIterator" line="28"/>
            <declaration name="resetState" type="RegionIterator" line="29"/>
            <declaration name="lwm" type="RegionIterator" line="30"/>
            <declaration name="row" type="RegionIterator" line="31"/>
            <declaration name="box" type="RegionIterator" line="32"/>
            <declaration name="spanlox" type="int" line="33"/>
            <declaration name="lwmloy" type="int" line="34"/>
            <declaration name="rgnlox" type="int" line="35"/>
            <declaration name="rgnbndslox" type="int" line="36"/>
            <declaration name="rgnbox" type="int" line="37"/>
            <declaration name="spanbox" type="int" line="38"/>
            <declaration name="doNextSpan" type="boolean" line="39"/>
            <declaration name="doNextBox" type="boolean" line="40"/>
            <declaration name="done" type="boolean" line="41"/>
            <method name="RegionClipSpanIterator" type="constructor" line="42">
                <params>
                    <param name="rgn" type="Region"/>
                    <param name="spanIter" type="SpanIterator"/>
                </params>
                <scope line="46"/>
                <scope line="57"/>
            </method>
            <method name="getPathBox" type="void" line="67">
                <params>
                    <param name="pathbox" type="int"/>
                </params>
                <declaration name="rgnbox" type="int[]" line="68"/>
                <scope line="71"/>
                <scope line="74"/>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <method name="intersectClipBox" type="void" line="84">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <method name="nextSpan" type="boolean" line="87">
                <params>
                    <param name="resultbox" type="int"/>
                </params>
                <scope line="88"/>
                <declaration name="resultlox" type="int" line="91"/>
                <declaration name="doNextRow" type="boolean" line="92"/>
                <scope line="93">
                    <scope line="94">
                        <scope line="95"/>
                        <scope line="99">
                            <scope line="101"/>
                            <scope line="105"/>
                            <scope line="109"/>
                            <scope line="113"/>
                        </scope>
                        <scope line="117"/>
                        <scope line="123"/>
                        <scope line="128">
                            <scope line="129"/>
                        </scope>
                    </scope>
                    <scope line="140">
                        <declaration name="ok" type="boolean" line="142"/>
                        <scope line="143"/>
                        <scope line="147"/>
                        <scope line="150"/>
                    </scope>
                    <scope line="156">
                        <declaration name="ok" type="boolean" line="157"/>
                        <scope line="158"/>
                        <scope line="162">
                            <scope line="164"/>
                            <scope line="167"/>
                        </scope>
                        <scope line="171"/>
                    </scope>
                    <scope line="177"/>
                    <scope line="180"/>
                    <scope line="183"/>
                    <scope line="186"/>
                    <scope line="189"/>
                    <scope line="192"/>
                    <scope line="195"/>
                    <scope line="198"/>
                    <scope line="201"/>
                    <scope line="204"/>
                </scope>
            </method>
            <javadoc line="214">
                This method tells the iterator that it may skip all spans
                  whose Y range is completely above the indicated Y coordinate.                
            </javadoc>
            <method name="skipDownTo" type="void" line="218">
                <params>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="221">
                This method returns a native pointer to a function block that
                  can be used by a native method to perform the same iteration
                  cycle that the above methods provide while avoiding upcalls to
                  the Java object.
                  The definition of the structure whose pointer is returned by
                  this method is defined in:
                  &lt;pre&gt;
                  src/share/native/sun/java2d/pipe/SpanIterator.h
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getNativeIterator" type="long" line="232"/>
            <method name="finalize" type="void" line="235"/>
        </class>
    </source>