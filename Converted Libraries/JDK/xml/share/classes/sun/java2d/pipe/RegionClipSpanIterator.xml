<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.Rectangle"/>
        <class name="RegionClipSpanIterator" line="31">
            <comment line="61">
                The inputs to the filter                
            </comment>
            <comment line="65">
                The cursors that track the progress through the region                
            </comment>
            <comment line="71">
                The bounds of the current span iterator span                
            </comment>
            <comment line="74">
                The extent of the region band marking the low water mark                
            </comment>
            <comment line="77">
                The bounds of the current region box                
            </comment>
            <comment line="80">
                The bounding box of the input Region. Used for click                
            </comment>
            <comment line="81">
                rejection of iterator spans                
            </comment>
            <comment line="84">
                The array used to hold coordinates from the region iterator                
            </comment>
            <comment line="87">
                The array used to hold coordinates from the span iterator                
            </comment>
            <comment line="90">
                True if the next iterator span should be read on the next                
            </comment>
            <comment line="91">
                iteration of the main nextSpan() loop                
            </comment>
            <comment line="94">
                True if the next region box should be read on the next                
            </comment>
            <comment line="95">
                iteration of the main nextSpan() loop                
            </comment>
            <comment line="98">
                True if there are no more spans or the Region is empty                
            </comment>
            <comment line="101">
                Creates an instance that filters the spans generated by
                 spanIter through the region described by rgn.                
            </comment>
            <comment line="140">
                Gets the bbox of the available path segments, clipped to the
                 Region.                
            </comment>
            <comment line="166">
                Intersects the path box with the given bbox.
                 Returned spans are clipped to this region, or discarded
                 altogether if they lie outside it.                
            </comment>
            <comment line="176">
                Fetches the next span that needs to be operated on.
                 If the return value is false then there are no more spans.                
            </comment>
            <comment line="384">
                Cleans out all internal data structures.                
            </comment>
            <comment line="387">
                public native void dispose();                
            </comment>
            <implements interface="SpanIterator"/>
            <javadoc line="31">
                This class clips a SpanIterator to a Region and outputs the
                  resulting spans as another SpanIterator.
                  Spans are output in the usual y/x order, unless the input span
                  iterator doesn&apos;t conform to this order, or the iterator&apos;s span
                  straddle more than one band of the Region used for clipping.
                  Principle of operation:
                  The iterator maintains a several cursors onto the RegionIterator
                  in order to avoid having to buffer spans from the SpanIterator.
                  They are:
                  resetState    The initial state of the RegionIterator
                  lwm             Low Water Mark, a running start point for
                  processing each band. Usually goes down, but
                  can be reset to resetState if a span has a lower
                  start coordinate than the previous one.
                  row             The start of the current band of the RegionIterator
                  box             The current span of the current row
                  The main nextSpan() loop implements a coroutine like structure, with
                  three producers to get the next span, row and box calling each other
                  to iterate through the span iterator and region.
                  REMIND: Needs a native implementation!                
            </javadoc>
            <declaration name="rgn" type="Region" line="61"/>
            <declaration name="spanIter" type="SpanIterator" line="62"/>
            <declaration name="resetState" type="RegionIterator" line="65"/>
            <declaration name="lwm" type="RegionIterator" line="66"/>
            <declaration name="row" type="RegionIterator" line="67"/>
            <declaration name="box" type="RegionIterator" line="68"/>
            <declaration name="spanlox" type="int" line="71"/>
            <declaration name="lwmloy" type="int" line="74"/>
            <declaration name="rgnlox" type="int" line="77"/>
            <declaration name="rgnbndslox" type="int" line="81"/>
            <declaration name="rgnbox" type="int" line="84"/>
            <declaration name="spanbox" type="int" line="87"/>
            <declaration name="doNextSpan" type="boolean" line="91"/>
            <declaration name="doNextBox" type="boolean" line="95"/>
            <declaration name="done" type="boolean" line="98"/>
            <method name="RegionClipSpanIterator" type="constructor" line="104">
                <params>
                    <param name="rgn" type="Region"/>
                    <param name="spanIter" type="SpanIterator"/>
                </params>
                <scope line="111"/>
                <scope line="125"/>
            </method>
            <method name="getPathBox" type="void" line="143">
                <params>
                    <param name="pathbox" type="int"/>
                </params>
                <declaration name="rgnbox" type="int[]" line="144"/>
                <scope line="148"/>
                <scope line="152"/>
                <scope line="156"/>
                <scope line="160"/>
            </method>
            <method name="intersectClipBox" type="void" line="170">
                <params>
                    <param name="lox" type="int"/>
                    <param name="loy" type="int"/>
                    <param name="hix" type="int"/>
                    <param name="hiy" type="int"/>
                </params>
            </method>
            <method name="nextSpan" type="boolean" line="179">
                <params>
                    <param name="resultbox" type="int"/>
                </params>
                <comment line="187">
                    REMIND: Cache the coordinate inst vars used in this loop                    
                </comment>
                <comment line="188">
                    in locals vars.                    
                </comment>
                <comment line="190">
                    We&apos;ve exhausted the current span so get the next one                    
                </comment>
                <comment line="197">
                    Clip out spans that lie outside of the rgn&apos;s bounds                    
                </comment>
                <comment line="217">
                    If the span starts higher up than the low-water mark,                    
                </comment>
                <comment line="218">
                    reset the lwm. This can only happen if spans aren&apos;t                    
                </comment>
                <comment line="219">
                    returned in strict y/x order, or the first time through.                    
                </comment>
                <comment line="226">
                    Skip to the first rgn row whose bottom edge is                    
                </comment>
                <comment line="227">
                    below the top of the current span. This will only                    
                </comment>
                <comment line="228">
                    execute &gt;0 times when the current span starts in a                    
                </comment>
                <comment line="229">
                    lower region row than the previous one, or possibly the                    
                </comment>
                <comment line="230">
                    first time through.                    
                </comment>
                <comment line="237">
                    If the row overlaps the span, process it, otherwise                    
                </comment>
                <comment line="238">
                    fetch another span                    
                </comment>
                <comment line="240">
                    Update the current row if it&apos;s different from the                    
                </comment>
                <comment line="241">
                    new lwm                    
                </comment>
                <comment line="254">
                    The current row&apos;s spans are exhausted, do the next one                    
                </comment>
                <comment line="256">
                    Next time we either do the next span or the next box                    
                </comment>
                <comment line="258">
                    Get the next row                    
                </comment>
                <comment line="260">
                    If there was one, update the bounds                    
                </comment>
                <comment line="266">
                    If we&apos;ve exhausted the rows or this one is below the span,                    
                </comment>
                <comment line="267">
                    go onto the next span                    
                </comment>
                <comment line="271">
                    Otherwise get the first box on this row                    
                </comment>
                <comment line="278">
                    Process the next box in the current row                    
                </comment>
                <comment line="286">
                    If there was no next rgn span or it&apos;s beyond the                    
                </comment>
                <comment line="287">
                    source span, go onto the next row or span                    
                </comment>
                <comment line="290">
                    If the current row totally overlaps the span,                    
                </comment>
                <comment line="291">
                    go onto the next span                    
                </comment>
                <comment line="294">
                    otherwise go onto the next rgn row                    
                </comment>
                <comment line="298">
                    Otherwise, if the new rgn span overlaps the                    
                </comment>
                <comment line="299">
                    spanbox, no need to get another box                    
                </comment>
                <comment line="305">
                    Prepare to do the next box either on this call or                    
                </comment>
                <comment line="306">
                    or the subsequent one                    
                </comment>
                <comment line="309">
                    Clip the current span against the current box                    
                </comment>
                <comment line="338">
                    If the result is empty, try then next box                    
                </comment>
                <comment line="339">
                    otherwise return the box.                    
                </comment>
                <comment line="340">
                    REMIND: I think by definition it&apos;s non-empty                    
                </comment>
                <comment line="341">
                    if we&apos;re here. Need to think about this some more.                    
                </comment>
                <scope line="180"/>
                <declaration name="resultlox" type="int" line="184"/>
                <declaration name="doNextRow" type="boolean" line="185"/>
                <scope line="189">
                    <scope line="191">
                        <scope line="192"/>
                        <scope line="195">
                            <scope line="198"/>
                            <scope line="203"/>
                            <scope line="208"/>
                            <scope line="213"/>
                        </scope>
                        <scope line="220"/>
                        <scope line="231"/>
                        <scope line="239">
                            <scope line="242"/>
                        </scope>
                    </scope>
                    <scope line="255">
                        <declaration name="ok" type="boolean" line="259"/>
                        <scope line="261"/>
                        <scope line="265"/>
                        <scope line="270"/>
                    </scope>
                    <scope line="279">
                        <declaration name="ok" type="boolean" line="280"/>
                        <scope line="281"/>
                        <scope line="285">
                            <scope line="289"/>
                            <scope line="293"/>
                        </scope>
                        <scope line="297"/>
                    </scope>
                    <scope line="310"/>
                    <scope line="313"/>
                    <scope line="317"/>
                    <scope line="320"/>
                    <scope line="324"/>
                    <scope line="327"/>
                    <scope line="331"/>
                    <scope line="334"/>
                    <scope line="343"/>
                    <scope line="346"/>
                </scope>
            </method>
            <javadoc line="360">
                This method tells the iterator that it may skip all spans
                  whose Y range is completely above the indicated Y coordinate.                
            </javadoc>
            <method name="skipDownTo" type="void" line="364">
                <params>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="368">
                This method returns a native pointer to a function block that
                  can be used by a native method to perform the same iteration
                  cycle that the above methods provide while avoiding upcalls to
                  the Java object.
                  The definition of the structure whose pointer is returned by
                  this method is defined in:
                  &lt;pre&gt;
                  src/share/native/sun/java2d/pipe/SpanIterator.h
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getNativeIterator" type="long" line="379"/>
            <method name="finalize" type="void" line="388">
                <comment line="389">
                    dispose();                    
                </comment>
            </method>
        </class>
    </source>