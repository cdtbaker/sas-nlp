<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <class name="RegionSpanIterator" line="28">
            <comment line="36">
                The RegionIterator that we use to do the work                
            </comment>
            <comment line="39">
                Clipping bounds                
            </comment>
            <comment line="42">
                Current Y band limits                
            </comment>
            <comment line="45">
                Are we done?                
            </comment>
            <comment line="48">
                Is the associated Region rectangular?                
            </comment>
            <comment line="51">
                REMIND: For native implementation
                long pData;      Private storage of rect info
                
                static {
                initIDs();
                }
                
                public static native void initIDs();                
            </comment>
            <comment line="202">
                Cleans out all internal data structures.
                 REMIND: Native implementation
                public native void dispose();
                
                protected void finalize() {
                dispose();
                }                
            </comment>
            <implements interface="SpanIterator"/>
            <javadoc line="28">
                This class implements the ShapeIterator interface for a Region.
                  This is useful as the source iterator of a device clip region
                  (in its native guise), and also as the result of clipping a
                  Region to a rectangle.                
            </javadoc>
            <declaration name="ri" type="RegionIterator" line="36"/>
            <declaration name="lox" type="int" line="39"/>
            <declaration name="curloy" type="int" line="42"/>
            <declaration name="done" type="boolean" line="45"/>
            <declaration name="isrect" type="boolean" line="48"/>
            <javadoc line="61">
                Constructs an instance based on the given Region                
            </javadoc>
            <method name="RegionSpanIterator" type="constructor" line="64">
                <params>
                    <param name="r" type="Region"/>
                </params>
                <declaration name="bounds" type="int[]" line="65"/>
            </method>
            <javadoc line="77">
                Gets the bbox of the available region spans.                
            </javadoc>
            <method name="getPathBox" type="void" line="80">
                <params>
                    <param name="pathbox" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Intersect the box used for clipping the output spans with the
                  given box.                
            </javadoc>
            <method name="intersectClipBox" type="void" line="91">
                <params>
                    <param name="clox" type="int"/>
                    <param name="cloy" type="int"/>
                    <param name="chix" type="int"/>
                    <param name="chiy" type="int"/>
                </params>
                <scope line="92"/>
                <scope line="95"/>
                <scope line="98"/>
                <scope line="101"/>
            </method>
            <javadoc line="107">
                Fetches the next span that needs to be operated on.
                  If the return value is false then there are no more spans.                
            </javadoc>
            <method name="nextSpan" type="boolean" line="111">
                <params>
                    <param name="spanbox" type="int"/>
                </params>
                <comment line="114">
                    Quick test for end conditions                    
                </comment>
                <comment line="119">
                    If the Region is rectangular, we store our bounds (possibly
                     clipped via intersectClipBox()) in spanbox and return true
                     so that the caller will process the single span.  We set done
                     to true to ensure that this will be the last span processed.                    
                </comment>
                <comment line="129">
                    Local cache of current span&apos;s bounds                    
                </comment>
                <comment line="140">
                    Update the current y band and clip it                    
                </comment>
                <comment line="149">
                    Check for moving below the clip rect                    
                </comment>
                <comment line="156">
                    Clip the x box                    
                </comment>
                <comment line="165">
                    If it&apos;s non- box, we&apos;re done                    
                </comment>
                <comment line="171">
                    Update the result and the store y range                    
                </comment>
                <scope line="114"/>
                <scope line="122"/>
                <declaration name="curlox" type="int" line="129"/>
                <declaration name="curloy" type="int" line="130"/>
                <declaration name="curhiy" type="int" line="131"/>
                <scope line="133">
                    <scope line="134">
                        <scope line="135"/>
                        <scope line="142"/>
                        <scope line="145"/>
                        <scope line="149"/>
                    </scope>
                    <scope line="158"/>
                    <scope line="161"/>
                    <scope line="165"/>
                </scope>
            </method>
            <javadoc line="178">
                This method tells the iterator that it may skip all spans
                  whose Y range is completely above the indicated Y coordinate.                
            </javadoc>
            <method name="skipDownTo" type="void" line="182">
                <params>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="186">
                This method returns a native pointer to a function block that
                  can be used by a native method to perform the same iteration
                  cycle that the above methods provide while avoiding upcalls to
                  the Java object.
                  The definition of the structure whose pointer is returned by
                  this method is defined in:
                  &lt;pre&gt;
                  src/share/native/sun/java2d/pipe/SpanIterator.h
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getNativeIterator" type="long" line="197"/>
        </class>
    </source>