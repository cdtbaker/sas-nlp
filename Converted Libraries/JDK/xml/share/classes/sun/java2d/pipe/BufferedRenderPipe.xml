<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Polygon"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Arc2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.Path2D"/>
        <import package="java.awt.geom.IllegalPathStateException"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.RoundRectangle2D"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.loops.ProcessPath"/>
        <import package="sun.java2d.pipe.BufferedOpCodes"/>
        <class name="BufferedRenderPipe" line="43">
            <implements interface="PixelDrawPipe"/>
            <implements interface="PixelFillPipe"/>
            <implements interface="ShapeDrawPipe"/>
            <implements interface="ParallelogramPipe"/>
            <javadoc line="43">
                Base class for enqueuing rendering operations in a single-threaded
                  rendering environment.  Instead of each operation being rendered
                  immediately by the underlying graphics library, the operation will be
                  added to the provided RenderQueue, which will be processed at a later
                  time by a single thread.
                  This class provides implementations of drawLine(), drawRect(), drawPoly(),
                  fillRect(), draw(Shape), and fill(Shape), which are useful for a
                  hardware-accelerated renderer.  The other draw() and fill() methods
                  simply delegate to draw(Shape) and fill(Shape), respectively.                
            </javadoc>
            <declaration name="aapgrampipe" type="ParallelogramPipe" line="58"/>
            <declaration name="BYTES_PER_POLY_POINT" type="int" line="60"/>
            <declaration name="BYTES_PER_SCANLINE" type="int" line="61"/>
            <declaration name="BYTES_PER_SPAN" type="int" line="62"/>
            <declaration name="rq" type="RenderQueue" line="64"/>
            <declaration name="buf" type="RenderBuffer" line="65"/>
            <declaration name="drawHandler" type="BufferedDrawHandler" line="66"/>
            <method name="BufferedRenderPipe" type="constructor" line="68">
                <params>
                    <param name="rq" type="RenderQueue"/>
                </params>
            </method>
            <method name="getAAParallelogramPipe" type="ParallelogramPipe" line="74"/>
            <method name="validateContext" type="void" line="78"/>
            <javadoc line="78">
                Validates the state in the provided SunGraphics2D object and sets up
                  any special resources for this operation (e.g. enabling gradient
                  shading).                
            </javadoc>
            <method name="validateContextAA" type="void" line="84"/>
            <method name="drawLine" type="void" line="88">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <declaration name="transx" type="int" line="89"/>
                <declaration name="transy" type="int" line="90"/>
                <scope line="92"/>
                <scope line="100"/>
            </method>
            <method name="drawRect" type="void" line="107">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="109"/>
                <scope line="117"/>
            </method>
            <method name="fillRect" type="void" line="124">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="126"/>
                <scope line="134"/>
            </method>
            <method name="drawRoundRect" type="void" line="142">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <method name="fillRoundRect" type="void" line="150">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <method name="drawOval" type="void" line="157">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="fillOval" type="void" line="163">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="drawArc" type="void" line="170">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <method name="fillArc" type="void" line="179">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <method name="drawPoly" type="void" line="188">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="xPoints" type="int[]"/>
                    <param name="yPoints" type="int[]"/>
                    <param name="nPoints" type="int"/>
                    <param name="isClosed" type="boolean"/>
                </params>
                <comment line="197">
                    render nothing                    
                </comment>
                <comment line="200">
                    render a simple line                    
                </comment>
                <comment line="214">
                    process the queue first and then enqueue the points                    
                </comment>
                <comment line="218">
                    enqueue parameters                    
                </comment>
                <comment line="223">
                    enqueue the points                    
                </comment>
                <comment line="227">
                    queue is too small to accomodate all points; perform the                    
                </comment>
                <comment line="228">
                    operation directly on the queue flushing thread                    
                </comment>
                <scope line="189"/>
                <scope line="192"/>
                <scope line="196"/>
                <scope line="199"/>
                <scope line="206">
                    <declaration name="pointBytesRequired" type="int" line="209"/>
                    <declaration name="totalBytesRequired" type="int" line="210"/>
                    <scope line="212">
                        <scope line="213"/>
                    </scope>
                    <scope line="226">
                        <anonymous_class line="229">
                            <method name="run" type="void" line="230"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="237"/>
            </method>
            <method name="drawPoly" type="void" line="242"/>
            <method name="drawPolyline" type="void" line="249">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="xPoints" type="int[]"/>
                    <param name="yPoints" type="int[]"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <method name="drawPolygon" type="void" line="256">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="xPoints" type="int[]"/>
                    <param name="yPoints" type="int[]"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <method name="fillPolygon" type="void" line="263">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="xPoints" type="int[]"/>
                    <param name="yPoints" type="int[]"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <class name="BufferedDrawHandler" line="267">
                <extends class="ProcessPath.DrawHandler"/>
                <method name="BufferedDrawHandler" type="constructor" line="270">
                    <comment line="271">
                        these are bogus values; the caller will use validate()                        
                    </comment>
                    <comment line="272">
                        to ensure that they are set properly prior to each usage                        
                    </comment>
                </method>
                <javadoc line="276">
                    This method needs to be called prior to each draw/fillPath()
                      operation to ensure the clip bounds are up to date.                    
                </javadoc>
                <method name="validate" type="void" line="280">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                    </params>
                    <declaration name="clip" type="Region" line="281"/>
                </method>
                <javadoc line="287">
                    drawPath() support...                    
                </javadoc>
                <method name="drawLine" type="void" line="291">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                    </params>
                    <comment line="292">
                        assert rq.lock.isHeldByCurrentThread();                        
                    </comment>
                </method>
                <method name="drawPixel" type="void" line="301">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <comment line="302">
                        assert rq.lock.isHeldByCurrentThread();                        
                    </comment>
                </method>
                <declaration name="scanlineCount" type="int" line="309"/>
                <javadoc line="309">
                    fillPath() support...                    
                </javadoc>
                <declaration name="scanlineCountIndex" type="int" line="314"/>
                <declaration name="remainingScanlines" type="int" line="315"/>
                <method name="resetFillPath" type="void" line="317"/>
                <method name="updateScanlineCount" type="void" line="325"/>
                <javadoc line="329">
                    Called from fillPath() to indicate that we are about to
                      start issuing drawScanline() calls.                    
                </javadoc>
                <method name="startFillPath" type="void" line="333">
                    <comment line="334">
                        to ensure room for at least a scanline                        
                    </comment>
                </method>
                <method name="drawScanline" type="void" line="338">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <scope line="339"/>
                </method>
                <javadoc line="351">
                    Called from fillPath() to indicate that we are done
                      issuing drawScanline() calls.                    
                </javadoc>
                <method name="endFillPath" type="void" line="355"/>
            </class>
            <method name="drawPath" type="void" line="362">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="p2df" type="Path2D.Float"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                </params>
                <scope line="364"/>
                <scope line="368"/>
            </method>
            <method name="fillPath" type="void" line="375">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="p2df" type="Path2D.Float"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                </params>
                <scope line="377"/>
                <scope line="383"/>
            </method>
            <method name="fillSpans" type="int" line="388"/>
            <method name="fillSpans" type="void" line="395">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="si" type="SpanIterator"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                </params>
                <comment line="399">
                    so that we have room for at least a span                    
                </comment>
                <scope line="397">
                    <declaration name="newpos" type="int" line="400"/>
                </scope>
                <scope line="405"/>
            </method>
            <method name="fillParallelogram" type="void" line="416">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="ux1" type="double"/>
                    <param name="uy1" type="double"/>
                    <param name="ux2" type="double"/>
                    <param name="uy2" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
                <scope line="418"/>
                <scope line="428"/>
            </method>
            <method name="drawParallelogram" type="void" line="440">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="ux1" type="double"/>
                    <param name="uy1" type="double"/>
                    <param name="ux2" type="double"/>
                    <param name="uy2" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                    <param name="lw1" type="double"/>
                    <param name="lw2" type="double"/>
                </params>
                <scope line="442"/>
                <scope line="454"/>
            </method>
            <class name="AAParallelogramPipe" line="459">
                <implements interface="ParallelogramPipe"/>
                <method name="fillParallelogram" type="void" line="466">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="ux1" type="double"/>
                        <param name="uy1" type="double"/>
                        <param name="ux2" type="double"/>
                        <param name="uy2" type="double"/>
                        <param name="x" type="double"/>
                        <param name="y" type="double"/>
                        <param name="dx1" type="double"/>
                        <param name="dy1" type="double"/>
                        <param name="dx2" type="double"/>
                        <param name="dy2" type="double"/>
                    </params>
                    <scope line="468"/>
                    <scope line="478"/>
                </method>
                <method name="drawParallelogram" type="void" line="490">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="ux1" type="double"/>
                        <param name="uy1" type="double"/>
                        <param name="ux2" type="double"/>
                        <param name="uy2" type="double"/>
                        <param name="x" type="double"/>
                        <param name="y" type="double"/>
                        <param name="dx1" type="double"/>
                        <param name="dy1" type="double"/>
                        <param name="dx2" type="double"/>
                        <param name="dy2" type="double"/>
                        <param name="lw1" type="double"/>
                        <param name="lw2" type="double"/>
                    </params>
                    <scope line="492"/>
                    <scope line="504"/>
                </method>
            </class>
            <method name="draw" type="void" line="510">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="511">
                    <scope line="512">
                        <scope line="513">
                            <declaration name="p" type="Polygon" line="514"/>
                        </scope>
                    </scope>
                    <declaration name="p2df" type="Path2D.Float" line="519"/>
                    <declaration name="transx" type="int" line="520"/>
                    <scope line="521">
                        <scope line="522"/>
                        <scope line="524"/>
                    </scope>
                    <scope line="529"/>
                </scope>
                <scope line="535">
                    <declaration name="si" type="ShapeSpanIterator" line="536"/>
                    <scope line="537"/>
                    <scope line="539"/>
                </scope>
                <scope line="542"/>
            </method>
            <method name="fill" type="void" line="547">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="s" type="Shape"/>
                </params>
                <comment line="551">
                    Here we are able to use fillPath() for                    
                </comment>
                <comment line="552">
                    high-quality fills.                    
                </comment>
                <comment line="573">
                    Transform (translation) will be done by FillSpans (we could                    
                </comment>
                <comment line="574">
                    delegate to fillPolygon() here, but most hardware accelerated                    
                </comment>
                <comment line="575">
                    libraries cannot handle non-convex polygons, so we will use                    
                </comment>
                <comment line="576">
                    the FillSpans approach by default)                    
                </comment>
                <comment line="581">
                    Transform will be done by the PathIterator                    
                </comment>
                <comment line="588">
                    Subtract transx/y from the SSI clip to match the                    
                </comment>
                <comment line="589">
                    (potentially untranslated) geometry fed to it                    
                </comment>
                <declaration name="transx" type="int" line="548"/>
                <scope line="550">
                    <declaration name="p2df" type="Path2D.Float" line="553"/>
                    <scope line="554">
                        <scope line="555"/>
                        <scope line="557"/>
                    </scope>
                    <scope line="562"/>
                </scope>
                <declaration name="at" type="AffineTransform" line="571"/>
                <scope line="572"/>
                <scope line="580"/>
                <declaration name="ssi" type="ShapeSpanIterator" line="586"/>
                <scope line="587">
                    <declaration name="clip" type="Region" line="590"/>
                </scope>
                <scope line="597"/>
            </method>
        </class>
    </source>