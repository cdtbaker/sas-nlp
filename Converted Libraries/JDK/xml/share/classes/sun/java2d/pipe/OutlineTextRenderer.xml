<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.font.GlyphList"/>
        <import package="sun.awt.SunHints"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.font.TextLayout"/>
        <class name="OutlineTextRenderer" line="11">
            <implements interface="TextPipe"/>
            <javadoc line="11">
                A delegate pipe of SG2D for drawing &quot;large&quot; text with
                  a solid source colour to an opaque destination.
                  The text is drawn as a filled outline.
                  Since the developer is not explicitly requesting this way of
                  rendering, this should not be used if the current paint is not
                  a solid colour.
                  If text anti-aliasing is requested by the application, and
                  filling path, an anti-aliasing fill pipe needs to
                  be invoked.
                  This involves making some of the same decisions as in the
                  validatePipe call, which may be in a SurfaceData subclass, so
                  its awkward to always ensure that the correct pipe is used.
                  The easiest thing, rather than reproducing much of that logic
                  is to call validatePipe() which works but is expensive, although
                  probably not compared to the cost of filling the path.
                  Note if AA hint is ON but text-AA hint is OFF this logic will
                  produce AA text which perhaps isn&apos;t what the user expected.
                  Note that the glyphvector obeys its FRC, not the G2D.                
            </javadoc>
            <declaration name="THRESHHOLD" type="int" line="32"/>
            <method name="drawChars" type="void" line="33">
                <params>
                    <param name="g2d" type="SunGraphics2D"/>
                    <param name="data" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="s" type="String" line="34"/>
            </method>
            <method name="drawString" type="void" line="37">
                <params>
                    <param name="g2d" type="SunGraphics2D"/>
                    <param name="str" type="String"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="38"/>
                <declaration name="tl" type="TextLayout" line="41"/>
                <declaration name="s" type="Shape" line="42"/>
                <declaration name="textAAHint" type="int" line="43"/>
                <declaration name="prevaaHint" type="int" line="44"/>
                <scope line="45"/>
                <scope line="50"/>
                <scope line="56"/>
            </method>
            <method name="drawGlyphVector" type="void" line="61">
                <params>
                    <param name="g2d" type="SunGraphics2D"/>
                    <param name="gv" type="GlyphVector"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="s" type="Shape" line="62"/>
                <declaration name="prevaaHint" type="int" line="63"/>
                <declaration name="frc" type="FontRenderContext" line="64"/>
                <declaration name="aa" type="boolean" line="65"/>
                <scope line="66">
                    <scope line="67"/>
                </scope>
                <scope line="71"/>
                <scope line="76"/>
                <scope line="82"/>
            </method>
        </class>
    </source>