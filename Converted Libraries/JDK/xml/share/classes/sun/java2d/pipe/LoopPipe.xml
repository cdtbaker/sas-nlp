<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.Font"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Polygon"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.RoundRectangle2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.Arc2D"/>
        <import package="java.awt.geom.IllegalPathStateException"/>
        <import package="java.awt.geom.Path2D"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.FontInfo"/>
        <import package="sun.java2d.loops.DrawPolygons"/>
        <import package="sun.java2d.loops.FillParallelogram"/>
        <import package="sun.java2d.loops.DrawParallelogram"/>
        <import package="sun.awt.SunHints"/>
        <class name="LoopPipe" line="48">
            <comment line="238">
                Return a ShapeSpanIterator ready to iterate the spans of the wide
                 outline of Shape s using the attributes of the SunGraphics2D
                 object.
                
                 The ShapeSpanIterator returned will be fully constructed
                 and filled with the geometry from the Shape widened by the
                 appropriate BasicStroke and normalization parameters taken
                 from the SunGraphics2D object and be ready to start returning
                 spans.
                
                 Note that the caller is responsible for calling dispose()
                 on the returned ShapeSpanIterator inside a tryfinally block.
                 &lt;pre&gt;
                     ShapeSpanIterator ssi = LoopPipe.getStrokeSpans(sg2d, s);
                     try {
                          iterate the spans from ssi and operate on them
                     } finally {
                         ssi.dispose();
                     }
                 &lt;pre&gt;
                
                 REMIND: This should return a SpanIterator interface object
                 but the caller needs to dispose() the object and that method
                 is only on ShapeSpanIterator.
                 TODO: Add a dispose() method to the SpanIterator interface.                
            </comment>
            <implements interface="PixelDrawPipe"/>
            <implements interface="PixelFillPipe"/>
            <implements interface="ParallelogramPipe"/>
            <implements interface="ShapeDrawPipe"/>
            <implements interface="LoopBasedPipe"/>
            <declaration name="RenderEngine" type="RenderingEngine" line="55"/>
            <method name="drawLine" type="void" line="59">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <declaration name="tX" type="int" line="60"/>
                <declaration name="tY" type="int" line="61"/>
            </method>
            <method name="drawRect" type="void" line="69">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="drawRoundRect" type="void" line="79">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <method name="drawOval" type="void" line="87">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="drawArc" type="void" line="94">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <method name="drawPolyline" type="void" line="103">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
                <declaration name="nPointsArray" type="int" line="104"/>
            </method>
            <method name="drawPolygon" type="void" line="115">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
                <declaration name="nPointsArray" type="int" line="116"/>
            </method>
            <method name="fillRect" type="void" line="126">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="fillRoundRect" type="void" line="136">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <method name="fillOval" type="void" line="144">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="fillArc" type="void" line="151">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <method name="fillPolygon" type="void" line="160">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
                <declaration name="sr" type="ShapeSpanIterator" line="161"/>
                <scope line="163"/>
                <scope line="167"/>
            </method>
            <method name="draw" type="void" line="173">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="174">
                    <declaration name="p2df" type="Path2D.Float" line="175"/>
                    <declaration name="transX" type="int" line="176"/>
                    <declaration name="transY" type="int" line="177"/>
                    <scope line="178">
                        <scope line="179"/>
                        <scope line="181"/>
                    </scope>
                    <scope line="186"/>
                </scope>
                <scope line="196"/>
                <declaration name="sr" type="ShapeSpanIterator" line="201"/>
                <scope line="203"/>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Return a ShapeSpanIterator instance that normalizes as
                  appropriate for a fill operation as per the settings in
                  the specified SunGraphics2D object.
                  The ShapeSpanIterator will be newly constructed and ready
                  to start taking in geometry.
                  Note that the caller is responsible for calling dispose()
                  on the returned ShapeSpanIterator inside a try/finally block:
                  &lt;pre&gt;
                  ShapeSpanIterator ssi = LoopPipe.getFillSSI(sg2d);
                  try {
                  ssi.setOutputArea(clip);
                  ssi.appendPath(...); // or appendPoly
                  // iterate the spans from ssi and operate on them
                  } finally {
                  ssi.dispose();
                  }
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getFillSSI" type="ShapeSpanIterator" line="231">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                </params>
                <declaration name="adjust" type="boolean" line="232"/>
            </method>
            <method name="getStrokeSpans" type="ShapeSpanIterator" line="266">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="s" type="Shape"/>
                </params>
                <declaration name="sr" type="ShapeSpanIterator" line="267"/>
                <scope line="269">
                    <declaration name="bs" type="BasicStroke" line="273"/>
                    <declaration name="thin" type="boolean" line="274"/>
                    <declaration name="normalize" type="boolean" line="275"/>
                </scope>
                <scope line="281"/>
            </method>
            <method name="fill" type="void" line="291">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="292">
                    <declaration name="p2df" type="Path2D.Float" line="293"/>
                    <declaration name="transX" type="int" line="294"/>
                    <declaration name="transY" type="int" line="295"/>
                    <scope line="296">
                        <scope line="297"/>
                        <scope line="299"/>
                    </scope>
                    <scope line="304"/>
                </scope>
                <declaration name="sr" type="ShapeSpanIterator" line="314"/>
                <scope line="315">
                    <declaration name="at" type="AffineTransform" line="317"/>
                </scope>
                <scope line="323"/>
            </method>
            <method name="fillSpans" type="void" line="328">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="si" type="SpanIterator"/>
                </params>
                <comment line="330">
                    REMIND: Eventually, the plan is that it will not be possible for
                     fs to be null since the FillSpans loop will be the fundamental
                     loop implemented for any destination type...                    
                </comment>
                <comment line="335">
                    REMIND: Region.filter produces a Java-only iterator
                     with no native counterpart...                    
                </comment>
                <scope line="332"/>
                <scope line="336">
                    <declaration name="fs" type="sun.java2d.loops.FillSpans" line="337"/>
                    <scope line="338"/>
                </scope>
                <declaration name="spanbox" type="int" line="343"/>
                <declaration name="sd" type="SurfaceData" line="344"/>
                <scope line="345">
                    <declaration name="x" type="int" line="346"/>
                    <declaration name="y" type="int" line="347"/>
                    <declaration name="w" type="int" line="348"/>
                    <declaration name="h" type="int" line="349"/>
                </scope>
            </method>
            <method name="fillParallelogram" type="void" line="360">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="ux1" type="double"/>
                    <param name="uy1" type="double"/>
                    <param name="ux2" type="double"/>
                    <param name="uy2" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                </params>
                <declaration name="fp" type="FillParallelogram" line="361"/>
            </method>
            <method name="drawParallelogram" type="void" line="373">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="ux1" type="double"/>
                    <param name="uy1" type="double"/>
                    <param name="ux2" type="double"/>
                    <param name="uy2" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                    <param name="lw1" type="double"/>
                    <param name="lw2" type="double"/>
                </params>
                <declaration name="dp" type="DrawParallelogram" line="374"/>
            </method>
        </class>
    </source>