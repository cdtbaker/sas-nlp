<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="sun.misc.Unsafe"/>
        <class name="RenderBuffer" line="30">
            <javadoc line="30">
                The RenderBuffer class is a simplified, high-performance, Unsafe wrapper
                  used for buffering rendering operations in a single-threaded rendering
                  environment.  It&apos;s functionality is similar to the ByteBuffer and related
                  NIO classes.  However, the methods in this class perform little to no
                  alignment or bounds checks for performance reasons.  Therefore, it is
                  the caller&apos;s responsibility to ensure that all put() calls are properly
                  aligned and within bounds:
                  - int and float values must be aligned on 4-byte boundaries
                  - long and double values must be aligned on 8-byte boundaries
                  This class only includes the bare minimum of methods to support
                  single-threaded rendering.  For example, there is no put(double[]) method
                  because we currently have no need for such a method in the STR classes.                
            </javadoc>
            <declaration name="SIZEOF_BYTE" type="long" line="47"/>
            <javadoc line="47">
                These constants represent the size of various data types (in bytes).                
            </javadoc>
            <declaration name="SIZEOF_SHORT" type="long" line="51"/>
            <declaration name="SIZEOF_INT" type="long" line="52"/>
            <declaration name="SIZEOF_FLOAT" type="long" line="53"/>
            <declaration name="SIZEOF_LONG" type="long" line="54"/>
            <declaration name="SIZEOF_DOUBLE" type="long" line="55"/>
            <declaration name="COPY_FROM_ARRAY_THRESHOLD" type="int" line="57"/>
            <javadoc line="57">
                Represents the number of elements at which we have empirically
                  determined that the average cost of a JNI call exceeds the expense
                  of an element by element copy.  In other words, if the number of
                  elements in an array to be copied exceeds this value, then we should
                  use the copyFromArray() method to complete the bulk put operation.
                  (This value can be adjusted if the cost of JNI downcalls is reduced
                  in a future release.)                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="68"/>
            <declaration name="baseAddress" type="long" line="69"/>
            <declaration name="endAddress" type="long" line="70"/>
            <declaration name="curAddress" type="long" line="71"/>
            <declaration name="capacity" type="int" line="72"/>
            <method name="RenderBuffer" type="constructor" line="74">
                <params>
                    <param name="numBytes" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Allocates a fresh buffer using the machine endianness.                
            </javadoc>
            <method name="allocate" type="RenderBuffer" line="84">
                <params>
                    <param name="numBytes" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Returns the base address of the underlying memory buffer.                
            </javadoc>
            <method name="getAddress" type="long" line="91"/>
            <javadoc line="95">
                The behavior (and names) of the following methods are nearly
                  identical to their counterparts in the various NIO Buffer classes.                
            </javadoc>
            <method name="capacity" type="int" line="100"/>
            <method name="remaining" type="int" line="104"/>
            <method name="position" type="int" line="108"/>
            <method name="position" type="void" line="112">
                <params>
                    <param name="numBytes" type="long"/>
                </params>
            </method>
            <method name="clear" type="void" line="116"/>
            <method name="skip" type="RenderBuffer" line="120">
                <params>
                    <param name="numBytes" type="long"/>
                </params>
            </method>
            <javadoc line="125">
                putByte() methods...                
            </javadoc>
            <method name="putByte" type="RenderBuffer" line="129">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <method name="put" type="RenderBuffer" line="135">
                <params>
                    <param name="x" type="byte[]"/>
                </params>
            </method>
            <method name="put" type="RenderBuffer" line="139">
                <params>
                    <param name="x" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="140">
                    <declaration name="offsetInBytes" type="long" line="141"/>
                    <declaration name="lengthInBytes" type="long" line="142"/>
                </scope>
                <scope line="145">
                    <declaration name="end" type="int" line="146"/>
                    <scope line="147"/>
                </scope>
            </method>
            <javadoc line="154">
                putShort() methods...                
            </javadoc>
            <method name="putShort" type="RenderBuffer" line="158">
                <params>
                    <param name="x" type="short"/>
                </params>
                <comment line="159">
                    assert (position() % SIZEOF_SHORT == 0);                    
                </comment>
            </method>
            <method name="put" type="RenderBuffer" line="165">
                <params>
                    <param name="x" type="short[]"/>
                </params>
            </method>
            <method name="put" type="RenderBuffer" line="169">
                <params>
                    <param name="x" type="short[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="170">
                    assert (position() % SIZEOF_SHORT == 0);                    
                </comment>
                <scope line="171">
                    <declaration name="offsetInBytes" type="long" line="172"/>
                    <declaration name="lengthInBytes" type="long" line="173"/>
                </scope>
                <scope line="176">
                    <declaration name="end" type="int" line="177"/>
                    <scope line="178"/>
                </scope>
            </method>
            <javadoc line="185">
                putInt() methods...                
            </javadoc>
            <method name="putInt" type="RenderBuffer" line="189">
                <params>
                    <param name="pos" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <comment line="190">
                    assert (baseAddress + pos % SIZEOF_INT == 0);                    
                </comment>
            </method>
            <method name="putInt" type="RenderBuffer" line="195">
                <params>
                    <param name="x" type="int"/>
                </params>
                <comment line="196">
                    assert (position() % SIZEOF_INT == 0);                    
                </comment>
            </method>
            <method name="put" type="RenderBuffer" line="202">
                <params>
                    <param name="x" type="int[]"/>
                </params>
            </method>
            <method name="put" type="RenderBuffer" line="206">
                <params>
                    <param name="x" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="207">
                    assert (position() % SIZEOF_INT == 0);                    
                </comment>
                <scope line="208">
                    <declaration name="offsetInBytes" type="long" line="209"/>
                    <declaration name="lengthInBytes" type="long" line="210"/>
                </scope>
                <scope line="213">
                    <declaration name="end" type="int" line="214"/>
                    <scope line="215"/>
                </scope>
            </method>
            <javadoc line="222">
                putFloat() methods...                
            </javadoc>
            <method name="putFloat" type="RenderBuffer" line="226">
                <params>
                    <param name="x" type="float"/>
                </params>
                <comment line="227">
                    assert (position() % SIZEOF_FLOAT == 0);                    
                </comment>
            </method>
            <method name="put" type="RenderBuffer" line="233">
                <params>
                    <param name="x" type="float[]"/>
                </params>
            </method>
            <method name="put" type="RenderBuffer" line="237">
                <params>
                    <param name="x" type="float[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="238">
                    assert (position() % SIZEOF_FLOAT == 0);                    
                </comment>
                <scope line="239">
                    <declaration name="offsetInBytes" type="long" line="240"/>
                    <declaration name="lengthInBytes" type="long" line="241"/>
                </scope>
                <scope line="244">
                    <declaration name="end" type="int" line="245"/>
                    <scope line="246"/>
                </scope>
            </method>
            <javadoc line="253">
                putLong() methods...                
            </javadoc>
            <method name="putLong" type="RenderBuffer" line="257">
                <params>
                    <param name="x" type="long"/>
                </params>
                <comment line="258">
                    assert (position() % SIZEOF_LONG == 0);                    
                </comment>
            </method>
            <method name="put" type="RenderBuffer" line="264">
                <params>
                    <param name="x" type="long[]"/>
                </params>
            </method>
            <method name="put" type="RenderBuffer" line="268">
                <params>
                    <param name="x" type="long[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="269">
                    assert (position() % SIZEOF_LONG == 0);                    
                </comment>
                <scope line="270">
                    <declaration name="offsetInBytes" type="long" line="271"/>
                    <declaration name="lengthInBytes" type="long" line="272"/>
                </scope>
                <scope line="275">
                    <declaration name="end" type="int" line="276"/>
                    <scope line="277"/>
                </scope>
            </method>
            <javadoc line="284">
                putDouble() method(s)...                
            </javadoc>
            <method name="putDouble" type="RenderBuffer" line="288">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="289">
                    assert (position() % SIZEOF_DOUBLE == 0);                    
                </comment>
            </method>
        </class>
    </source>