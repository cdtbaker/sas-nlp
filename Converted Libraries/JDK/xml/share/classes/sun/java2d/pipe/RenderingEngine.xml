<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pipe">
        <import package="java.awt.Shape"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ServiceLoader"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.awt.geom.PathConsumer2D"/>
        <class name="RenderingEngine" line="40">
            <javadoc line="40">
                This class abstracts a number of features for which the Java 2D
                  implementation relies on proprietary licensed software libraries.
                  Access to those features is now achieved by retrieving the singleton
                  instance of this class and calling the appropriate methods on it.
                  The 3 primary features abstracted here include:
                  &lt;dl&gt;
                  &lt;dt&gt;Shape createStrokedShape(Shape, [BasicStroke attributes]);
                  &lt;dd&gt;This method implements the functionality of the method of the
                  same name on the {@link BasicStroke} class.
                  &lt;dt&gt;void strokeTo(Shape, [rendering parameters], PathConsumer2D);
                  &lt;dd&gt;This method performs widening of the source path on the fly
                  and sends the results to the given {@link PathConsumer2D} object.
                  This procedure avoids having to create an intermediate Shape
                  object to hold the results of the {@code createStrokedShape} method.
                  The main user of this method is the Java 2D non-antialiasing renderer.
                  &lt;dt&gt;AATileGenerator getAATileGenerator(Shape, [rendering parameters]);
                  &lt;dd&gt;This method returns an object which can iterate over the
                  specified bounding box and produce tiles of coverage values for
                  antialiased rendering.  The details of the operation of the{@link AATileGenerator} object are explained in its class comments.
                  &lt;/dl&gt;
                  Additionally, the following informational method supplies important
                  data about the implementation.
                  &lt;dl&gt;
                  &lt;dt&gt;float getMinimumAAPenSize()
                  &lt;dd&gt;This method provides information on how small the BasicStroke
                  line width can get before dropouts occur.  Rendering with a BasicStroke
                  is defined to never allow the line to have breaks, gaps, or dropouts
                  even if the width is set to 0.0f, so this information allows the{@link SunGraphics2D} class to detect the &quot;thin line&quot; case and set
                  the rendering attributes accordingly.
                  &lt;/dl&gt;
                  At startup the runtime will load a single instance of this class.
                  It searches the classpath for a registered provider of this API
                  and returns either the last one it finds, or the instance whose
                  class name matches the value supplied in the System property{@code sun.java2d.renderer}.
                  Additionally, a runtime System property flag can be set to trace
                  all calls to methods on the {@code RenderingEngine} in use by
                  setting the sun.java2d.renderer.trace property to any non-null value.
                  &lt;p&gt;
                  Parts of the system that need to use any of the above features should
                  call {@code RenderingEngine.getInstance()} to obtain the properly
                  registered (and possibly trace-enabled) version of the RenderingEngine.                
            </javadoc>
            <declaration name="reImpl" type="RenderingEngine" line="87"/>
            <javadoc line="89">
                Returns an instance of {@code RenderingEngine} as determined
                  by the installation environment and runtime flags.
                  &lt;p&gt;
                  A specific instance of the {@code RenderingEngine} can be
                  chosen by specifying the runtime flag:
                  &lt;pre&gt;
                  java -Dsun.java2d.renderer=&amp;lt;classname&amp;gt;
                  &lt;/pre&gt;
                  If no specific {@code RenderingEngine} is specified on the command
                  or Ductus renderer is specified, it will attempt loading the
                  sun.dc.DuctusRenderingEngine class using Class.forName as a fastpath;
                  if not found, use the ServiceLoader.
                  If no specific {@code RenderingEngine} is specified on the command
                  line then the last one returned by enumerating all subclasses of{@code RenderingEngine} known to the ServiceLoader is used.
                  &lt;p&gt;
                  Runtime tracing of the actions of the {@code RenderingEngine}can be enabled by specifying the runtime flag:
                  &lt;pre&gt;
                  java -Dsun.java2d.renderer.trace=&amp;lt;any string&amp;gt;
                  &lt;/pre&gt;                
                <return>
                    an instance of {@code RenderingEngine}                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getInstance" type="RenderingEngine" line="115">
                <comment line="131">
                    not found                    
                </comment>
                <comment line="133">
                    should not reach here                    
                </comment>
                <comment line="135">
                    should not reach here                    
                </comment>
                <scope line="116"/>
                <anonymous_class line="121">
                    <method name="run" type="Object" line="122">
                        <comment line="131">
                            not found                            
                        </comment>
                        <comment line="133">
                            should not reach here                            
                        </comment>
                        <comment line="135">
                            should not reach here                            
                        </comment>
                        <declaration name="ductusREClass" type="String" line="123"/>
                        <declaration name="reClass" type="String" line="124"/>
                        <scope line="126">
                            <scope line="127">
                                <declaration name="cls" type="Class" line="128"/>
                            </scope>
                            <scope line="130"/>
                            <scope line="132"/>
                            <scope line="134"/>
                        </scope>
                        <declaration name="reLoader" type="ServiceLoader&lt;RenderingEngine&gt;" line="139"/>
                        <declaration name="service" type="RenderingEngine" line="142"/>
                        <scope line="144">
                            <scope line="146"/>
                        </scope>
                    </method>
                </anonymous_class>
                <scope line="154"/>
                <declaration name="gpa" type="GetPropertyAction" line="158"/>
                <declaration name="reTrace" type="String" line="160"/>
                <scope line="161"/>
            </method>
            <method name="createStrokedShape" type="Shape" line="168"/>
            <javadoc line="168">
                Create a widened path as specified by the parameters.
                  &lt;p&gt;
                  The specified {@code src} {@link Shape} is widened according
                  to the specified attribute parameters as per the{@link BasicStroke} specification.                
                <param>
                    src the source path to be widened                    
                </param>
                <param>
                    width the width of the widened path as per {@code BasicStroke}                    
                </param>
                <param>
                    caps the end cap decorations as per {@code BasicStroke}                    
                </param>
                <param>
                    join the segment join decorations as per {@code BasicStroke}                    
                </param>
                <param>
                    miterlimit the miter limit as per {@code BasicStroke}                    
                </param>
                <param>
                    dashes the dash length array as per {@code BasicStroke}                    
                </param>
                <param>
                    dashphase the initial dash phase as per {@code BasicStroke}                    
                </param>
                <return>
                    the widened path stored in a new {@code Shape} object                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="strokeTo" type="void" line="193"/>
            <javadoc line="193">
                Sends the geometry for a widened path as specified by the parameters
                  to the specified consumer.
                  &lt;p&gt;
                  The specified {@code src} {@link Shape} is widened according
                  to the parameters specified by the {@link BasicStroke} object.
                  Adjustments are made to the path as appropriate for the{@link VALUE_STROKE_NORMALIZE} hint if the {@code normalize}boolean parameter is true.
                  Adjustments are made to the path as appropriate for the{@link VALUE_ANTIALIAS_ON} hint if the {@code antialias}boolean parameter is true.
                  &lt;p&gt;
                  The geometry of the widened path is forwarded to the indicated{@link PathConsumer2D} object as it is calculated.                
                <param>
                    src the source path to be widened                    
                </param>
                <param>
                    bs the {@code BasicSroke} object specifying the
                      decorations to be applied to the widened path                    
                </param>
                <param>
                    normalize indicates whether stroke normalization should
                      be applied                    
                </param>
                <param>
                    antialias indicates whether or not adjustments appropriate
                      to antialiased rendering should be applied                    
                </param>
                <param>
                    consumer the {@code PathConsumer2D} instance to forward
                      the widened geometry to                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getAATileGenerator" type="AATileGenerator" line="228"/>
            <javadoc line="228">
                Construct an antialiased tile generator for the given shape with
                  the given rendering attributes and store the bounds of the tile
                  iteration in the bbox parameter.
                  The {@code at} parameter specifies a transform that should affect
                  both the shape and the {@code BasicStroke} attributes.
                  The {@code clip} parameter specifies the current clip in effect
                  in device coordinates and can be used to prune the data for the
                  operation, but the renderer is not required to perform any
                  clipping.
                  If the {@code BasicStroke} parameter is null then the shape
                  should be filled as is, otherwise the attributes of the{@code BasicStroke} should be used to specify a draw operation.
                  The {@code thin} parameter indicates whether or not the
                  transformed {@code BasicStroke} represents coordinates smaller
                  than the minimum resolution of the antialiasing rasterizer as
                  specified by the {@code getMinimumAAPenWidth()} method.
                  &lt;p&gt;
                  Upon returning, this method will fill the {@code bbox} parameter
                  with 4 values indicating the bounds of the iteration of the
                  tile generator.
                  The iteration order of the tiles will be as specified by the
                  pseudo-code:
                  &lt;pre&gt;
                  for (y = bbox[1]; y &lt; bbox[3]; y += tileheight) {
                  for (x = bbox[0]; x &lt; bbox[2]; x += tilewidth) {
                  }
                  }
                  &lt;/pre&gt;
                  If there is no output to be rendered, this method may return
                  null.                
                <param>
                    s the shape to be rendered (fill or draw)                    
                </param>
                <param>
                    at the transform to be applied to the shape and the
                      stroke attributes                    
                </param>
                <param>
                    clip the current clip in effect in device coordinates                    
                </param>
                <param>
                    bs if non-null, a {@code BasicStroke} whose attributes
                      should be applied to this operation                    
                </param>
                <param>
                    thin true if the transformed stroke attributes are smaller
                      than the minimum dropout pen width                    
                </param>
                <param>
                    normalize true if the {@code VALUE_STROKE_NORMALIZE}{@code RenderingHint} is in effect                    
                </param>
                <param>
                    bbox returns the bounds of the iteration                    
                </param>
                <return>
                    the {@code AATileGenerator} instance to be consulted
                      for tile coverages, or null if there is no output to render                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getAATileGenerator" type="AATileGenerator" line="283"/>
            <javadoc line="283">
                Construct an antialiased tile generator for the given parallelogram
                  store the bounds of the tile iteration in the bbox parameter.
                  The parallelogram is specified as a starting point and 2 delta
                  vectors that indicate the slopes of the 2 pairs of sides of the
                  parallelogram.
                  The 4 corners of the parallelogram are defined by the 4 points:
                  &lt;ul&gt;
                  &lt;li&gt; {@code x}, {@code y}&lt;li&gt; {@code x+dx1}, {@code y+dy1}&lt;li&gt; {@code x+dx1+dx2}, {@code y+dy1+dy2}&lt;li&gt; {@code x+dx2}, {@code y+dy2}&lt;/ul&gt;
                  The {@code lw1} and {@code lw2} parameters provide a specification
                  for an optionally stroked parallelogram if they are positive numbers.
                  The {@code lw1} parameter is the ratio of the length of the {@code dx1},{@code dx2} delta vector to half of the line width in that same
                  direction.
                  The {@code lw2} parameter provides the same ratio for the other delta
                  vector.
                  If {@code lw1} and {@code lw2} are both greater than zero, then
                  the parallelogram figure is doubled by both expanding and contracting
                  each delta vector by its corresponding {@code lw} value.
                  If either (@code lw1) or {@code lw2} are also greater than 1, then
                  the inner (contracted) parallelogram disappears and the figure is
                  simply a single expanded parallelogram.
                  The {@code clip} parameter specifies the current clip in effect
                  in device coordinates and can be used to prune the data for the
                  operation, but the renderer is not required to perform any
                  clipping.
                  &lt;p&gt;
                  Upon returning, this method will fill the {@code bbox} parameter
                  with 4 values indicating the bounds of the iteration of the
                  tile generator.
                  The iteration order of the tiles will be as specified by the
                  pseudo-code:
                  &lt;pre&gt;
                  for (y = bbox[1]; y &lt; bbox[3]; y += tileheight) {
                  for (x = bbox[0]; x &lt; bbox[2]; x += tilewidth) {
                  }
                  }
                  &lt;/pre&gt;
                  If there is no output to be rendered, this method may return
                  null.                
                <param>
                    x the X coordinate of the first corner of the parallelogram                    
                </param>
                <param>
                    y the Y coordinate of the first corner of the parallelogram                    
                </param>
                <param>
                    dx1 the X coordinate delta of the first leg of the parallelogram                    
                </param>
                <param>
                    dy1 the Y coordinate delta of the first leg of the parallelogram                    
                </param>
                <param>
                    dx2 the X coordinate delta of the second leg of the parallelogram                    
                </param>
                <param>
                    dy2 the Y coordinate delta of the second leg of the parallelogram                    
                </param>
                <param>
                    lw1 the line width ratio for the first leg of the parallelogram                    
                </param>
                <param>
                    lw2 the line width ratio for the second leg of the parallelogram                    
                </param>
                <param>
                    clip the current clip in effect in device coordinates                    
                </param>
                <param>
                    bbox returns the bounds of the iteration                    
                </param>
                <return>
                    the {@code AATileGenerator} instance to be consulted
                      for tile coverages, or null if there is no output to render                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getMinimumAAPenSize" type="float" line="349"/>
            <javadoc line="349">
                Returns the minimum pen width that the antialiasing rasterizer
                  can represent without dropouts occuring.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="356">
                Utility method to feed a {@link PathConsumer2D} object from a
                  given {@link PathIterator}.
                  This method deals with the details of running the iterator and
                  feeding the consumer a segment at a time.                
            </javadoc>
            <method name="feedConsumer" type="void" line="362">
                <params>
                    <param name="pi" type="PathIterator"/>
                    <param name="consumer" type="PathConsumer2D"/>
                </params>
                <declaration name="coords" type="float" line="363"/>
                <scope line="364"/>
            </method>
            <class name="Tracer" line="389">
                <extends class="RenderingEngine"/>
                <declaration name="target" type="RenderingEngine" line="390"/>
                <declaration name="name" type="String" line="391"/>
                <method name="Tracer" type="constructor" line="393">
                    <params>
                        <param name="target" type="RenderingEngine"/>
                    </params>
                </method>
                <method name="createStrokedShape" type="Shape" line="405">
                    <params>
                        <param name="src" type="Shape"/>
                        <param name="width" type="float"/>
                        <param name="caps" type="int"/>
                        <param name="join" type="int"/>
                        <param name="miterlimit" type="float"/>
                        <param name="dashes" type="float"/>
                        <param name="dashphase" type="float"/>
                    </params>
                </method>
                <method name="strokeTo" type="void" line="426">
                    <params>
                        <param name="src" type="Shape"/>
                        <param name="at" type="AffineTransform"/>
                        <param name="bs" type="BasicStroke"/>
                        <param name="thin" type="boolean"/>
                        <param name="normalize" type="boolean"/>
                        <param name="antialias" type="boolean"/>
                        <param name="consumer" type="PathConsumer2D"/>
                    </params>
                </method>
                <method name="getMinimumAAPenSize" type="float" line="438"/>
                <method name="getAATileGenerator" type="AATileGenerator" line="450">
                    <params>
                        <param name="s" type="Shape"/>
                        <param name="at" type="AffineTransform"/>
                        <param name="clip" type="Region"/>
                        <param name="bs" type="BasicStroke"/>
                        <param name="thin" type="boolean"/>
                        <param name="normalize" type="boolean"/>
                        <param name="bbox" type="int"/>
                    </params>
                </method>
                <method name="getAATileGenerator" type="AATileGenerator" line="468">
                    <params>
                        <param name="x" type="double"/>
                        <param name="y" type="double"/>
                        <param name="dx1" type="double"/>
                        <param name="dy1" type="double"/>
                        <param name="dx2" type="double"/>
                        <param name="dy2" type="double"/>
                        <param name="lw1" type="double"/>
                        <param name="lw2" type="double"/>
                        <param name="clip" type="Region"/>
                        <param name="bbox" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>