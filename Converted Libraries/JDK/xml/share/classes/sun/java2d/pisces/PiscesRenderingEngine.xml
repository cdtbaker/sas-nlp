<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pisces">
        <import package="java.awt.Shape"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.geom.Path2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="sun.awt.geom.PathConsumer2D"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.java2d.pipe.RenderingEngine"/>
        <import package="sun.java2d.pipe.AATileGenerator"/>
        <class name="PiscesRenderingEngine" line="11">
            <extends class="RenderingEngine"/>
            <declaration name="NormMode" type="enum" line="12"/>
            <scope line="12"/>
            <javadoc line="13">
                Create a widened path as specified by the parameters.
                  &lt;p&gt;
                  The specified {@code src} {@link Shape} is widened according
                  to the specified attribute parameters as per the{@link BasicStroke} specification.                
                <param>
                    src the source path to be widened                    
                </param>
                <param>
                    width the width of the widened path as per {@code BasicStroke}                    
                </param>
                <param>
                    caps the end cap decorations as per {@code BasicStroke}                    
                </param>
                <param>
                    join the segment join decorations as per {@code BasicStroke}                    
                </param>
                <param>
                    miterlimit the miter limit as per {@code BasicStroke}                    
                </param>
                <param>
                    dashes the dash length array as per {@code BasicStroke}                    
                </param>
                <param>
                    dashphase the initial dash phase as per {@code BasicStroke}                    
                </param>
                <return>
                    the widened path stored in a new {@code Shape} object                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createStrokedShape" type="Shape" line="28">
                <params>
                    <param name="src" type="Shape"/>
                    <param name="width" type="float"/>
                    <param name="caps" type="int"/>
                    <param name="join" type="int"/>
                    <param name="miterlimit" type="float"/>
                    <param name="dashes" type="float"/>
                    <param name="dashphase" type="float"/>
                </params>
                <declaration name="p2d" type="Path2D" line="29"/>
                <anonymous_class line="30">
                    <method name="moveTo" type="void" line="31">
                        <params>
                            <param name="x0" type="float"/>
                            <param name="y0" type="float"/>
                        </params>
                    </method>
                    <method name="lineTo" type="void" line="34">
                        <params>
                            <param name="x1" type="float"/>
                            <param name="y1" type="float"/>
                        </params>
                    </method>
                    <method name="closePath" type="void" line="37"/>
                    <method name="pathDone" type="void" line="40"/>
                    <method name="curveTo" type="void" line="42">
                        <params>
                            <param name="x1" type="float"/>
                            <param name="y1" type="float"/>
                            <param name="x2" type="float"/>
                            <param name="y2" type="float"/>
                            <param name="x3" type="float"/>
                            <param name="y3" type="float"/>
                        </params>
                    </method>
                    <method name="quadTo" type="void" line="45">
                        <params>
                            <param name="x1" type="float"/>
                            <param name="y1" type="float"/>
                            <param name="x2" type="float"/>
                            <param name="y2" type="float"/>
                        </params>
                    </method>
                    <method name="getNativeConsumer" type="long" line="48"/>
                </anonymous_class>
            </method>
            <javadoc line="55">
                Sends the geometry for a widened path as specified by the parameters
                  to the specified consumer.
                  &lt;p&gt;
                  The specified {@code src} {@link Shape} is widened according
                  to the parameters specified by the {@link BasicStroke} object.
                  Adjustments are made to the path as appropriate for the{@link VALUE_STROKE_NORMALIZE} hint if the {@code normalize}boolean parameter is true.
                  Adjustments are made to the path as appropriate for the{@link VALUE_ANTIALIAS_ON} hint if the {@code antialias}boolean parameter is true.
                  &lt;p&gt;
                  The geometry of the widened path is forwarded to the indicated{@link PathConsumer2D} object as it is calculated.                
                <param>
                    src the source path to be widened                    
                </param>
                <param>
                    bs the {@code BasicSroke} object specifying the
                      decorations to be applied to the widened path                    
                </param>
                <param>
                    normalize indicates whether stroke normalization should
                      be applied                    
                </param>
                <param>
                    antialias indicates whether or not adjustments appropriate
                      to antialiased rendering should be applied                    
                </param>
                <param>
                    consumer the {@code PathConsumer2D} instance to forward
                      the widened geometry to                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="strokeTo" type="void" line="76">
                <params>
                    <param name="src" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="bs" type="BasicStroke"/>
                    <param name="thin" type="boolean"/>
                    <param name="normalize" type="boolean"/>
                    <param name="antialias" type="boolean"/>
                    <param name="consumer" type="PathConsumer2D"/>
                </params>
                <declaration name="norm" type="NormMode" line="77"/>
            </method>
            <method name="strokeTo" type="void" line="80">
                <params>
                    <param name="src" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="bs" type="BasicStroke"/>
                    <param name="thin" type="boolean"/>
                    <param name="normalize" type="NormMode"/>
                    <param name="antialias" type="boolean"/>
                    <param name="pc2d" type="PathConsumer2D"/>
                </params>
                <declaration name="lw" type="float" line="81"/>
                <scope line="82">
                    <scope line="83"/>
                    <scope line="86"/>
                </scope>
                <scope line="90"/>
            </method>
            <method name="userSpaceLineWidth" type="float" line="95">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="lw" type="float"/>
                </params>
                <declaration name="widthScale" type="double" line="96"/>
                <scope line="97"/>
                <scope line="100">
                    <declaration name="A" type="double" line="101"/>
                    <declaration name="C" type="double" line="102"/>
                    <declaration name="B" type="double" line="103"/>
                    <declaration name="D" type="double" line="104"/>
                    <declaration name="EA" type="double" line="105"/>
                    <declaration name="EB" type="double" line="106"/>
                    <declaration name="EC" type="double" line="107"/>
                    <declaration name="hypot" type="double" line="108"/>
                    <declaration name="widthsquared" type="double" line="109"/>
                </scope>
            </method>
            <method name="strokeTo" type="void" line="114">
                <params>
                    <param name="src" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="width" type="float"/>
                    <param name="normalize" type="NormMode"/>
                    <param name="caps" type="int"/>
                    <param name="join" type="int"/>
                    <param name="miterlimit" type="float"/>
                    <param name="dashes" type="float"/>
                    <param name="dashphase" type="float"/>
                    <param name="pc2d" type="PathConsumer2D"/>
                </params>
                <declaration name="strokerat" type="AffineTransform" line="115"/>
                <declaration name="outat" type="AffineTransform" line="116"/>
                <declaration name="pi" type="PathIterator" line="117"/>
                <scope line="118">
                    <declaration name="a" type="double" line="119"/>
                    <declaration name="b" type="double" line="120"/>
                    <declaration name="c" type="double" line="121"/>
                    <declaration name="d" type="double" line="122"/>
                    <declaration name="det" type="double" line="123"/>
                    <scope line="124"/>
                    <scope line="129">
                        <declaration name="scale" type="double" line="130"/>
                        <scope line="131">
                            <scope line="133"/>
                        </scope>
                        <scope line="140"/>
                    </scope>
                    <scope line="144">
                        <scope line="145"/>
                        <scope line="150"/>
                    </scope>
                </scope>
                <scope line="156">
                    <scope line="158"/>
                </scope>
                <scope line="165"/>
            </method>
            <method name="nearZero" type="boolean" line="171">
                <params>
                    <param name="num" type="double"/>
                    <param name="nulps" type="int"/>
                </params>
            </method>
            <class name="NormalizingPathIterator" line="174">
                <implements interface="PathIterator"/>
                <declaration name="src" type="PathIterator" line="175"/>
                <declaration name="curx_adjust" type="float" line="176"/>
                <declaration name="movx_adjust" type="float" line="177"/>
                <declaration name="lval" type="float" line="178"/>
                <method name="NormalizingPathIterator" type="constructor" line="179">
                    <params>
                        <param name="src" type="PathIterator"/>
                        <param name="mode" type="NormMode"/>
                    </params>
                </method>
                <method name="currentSegment" type="int" line="195">
                    <params>
                        <param name="coords" type="float[]"/>
                    </params>
                    <declaration name="type" type="int" line="196"/>
                    <declaration name="lastCoord" type="int" line="197"/>
                    <declaration name="x_adjust" type="float" line="216"/>
                    <declaration name="y_adjust" type="float" line="217"/>
                </method>
                <method name="currentSegment" type="int" line="244">
                    <params>
                        <param name="coords" type="double[]"/>
                    </params>
                    <declaration name="tmp" type="float[]" line="245"/>
                    <declaration name="type" type="int" line="246"/>
                    <scope line="247"/>
                </method>
                <method name="getWindingRule" type="int" line="252"/>
                <method name="isDone" type="boolean" line="255"/>
                <method name="next" type="void" line="258"/>
            </class>
            <method name="pathTo" type="void" line="262">
                <params>
                    <param name="pi" type="PathIterator"/>
                    <param name="pc2d" type="PathConsumer2D"/>
                </params>
            </method>
            <javadoc line="266">
                Construct an antialiased tile generator for the given shape with
                  the given rendering attributes and store the bounds of the tile
                  iteration in the bbox parameter.
                  The {@code at} parameter specifies a transform that should affect
                  both the shape and the {@code BasicStroke} attributes.
                  The {@code clip} parameter specifies the current clip in effect
                  in device coordinates and can be used to prune the data for the
                  operation, but the renderer is not required to perform any
                  clipping.
                  If the {@code BasicStroke} parameter is null then the shape
                  should be filled as is, otherwise the attributes of the{@code BasicStroke} should be used to specify a draw operation.
                  The {@code thin} parameter indicates whether or not the
                  transformed {@code BasicStroke} represents coordinates smaller
                  than the minimum resolution of the antialiasing rasterizer as
                  specified by the {@code getMinimumAAPenWidth()} method.
                  &lt;p&gt;
                  Upon returning, this method will fill the {@code bbox} parameter
                  with 4 values indicating the bounds of the iteration of the
                  tile generator.
                  The iteration order of the tiles will be as specified by the
                  pseudo-code:
                  &lt;pre&gt;
                  for (y = bbox[1]; y &lt; bbox[3]; y += tileheight) {
                  for (x = bbox[0]; x &lt; bbox[2]; x += tilewidth) {
                  }
                  }
                  &lt;/pre&gt;
                  If there is no output to be rendered, this method may return
                  null.                
                <param>
                    s the shape to be rendered (fill or draw)                    
                </param>
                <param>
                    at the transform to be applied to the shape and the
                      stroke attributes                    
                </param>
                <param>
                    clip the current clip in effect in device coordinates                    
                </param>
                <param>
                    bs if non-null, a {@code BasicStroke} whose attributes
                      should be applied to this operation                    
                </param>
                <param>
                    thin true if the transformed stroke attributes are smaller
                      than the minimum dropout pen width                    
                </param>
                <param>
                    normalize true if the {@code VALUE_STROKE_NORMALIZE}{@code RenderingHint} is in effect                    
                </param>
                <param>
                    bbox returns the bounds of the iteration                    
                </param>
                <return>
                    the {@code AATileGenerator} instance to be consulted
                      for tile coverages, or null if there is no output to render                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getAATileGenerator" type="AATileGenerator" line="310">
                <params>
                    <param name="s" type="Shape"/>
                    <param name="at" type="AffineTransform"/>
                    <param name="clip" type="Region"/>
                    <param name="bs" type="BasicStroke"/>
                    <param name="thin" type="boolean"/>
                    <param name="normalize" type="boolean"/>
                    <param name="bbox" type="int"/>
                </params>
                <declaration name="r" type="Renderer" line="311"/>
                <declaration name="norm" type="NormMode" line="312"/>
                <scope line="313">
                    <declaration name="pi" type="PathIterator" line="314"/>
                    <scope line="315"/>
                    <scope line="318"/>
                </scope>
                <scope line="324"/>
                <declaration name="ptg" type="PiscesTileGenerator" line="329"/>
            </method>
            <method name="getAATileGenerator" type="AATileGenerator" line="333">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="dx1" type="double"/>
                    <param name="dy1" type="double"/>
                    <param name="dx2" type="double"/>
                    <param name="dy2" type="double"/>
                    <param name="lw1" type="double"/>
                    <param name="lw2" type="double"/>
                    <param name="clip" type="Region"/>
                    <param name="bbox" type="int"/>
                </params>
                <declaration name="ldx1" type="double" line="334"/>
                <declaration name="innerpgram" type="boolean" line="335"/>
                <scope line="336">
                    <scope line="347"/>
                </scope>
                <scope line="351"/>
                <declaration name="r" type="Renderer" line="354"/>
                <scope line="360"/>
                <declaration name="ptg" type="PiscesTileGenerator" line="375"/>
            </method>
            <javadoc line="379">
                Returns the minimum pen width that the antialiasing rasterizer
                  can represent without dropouts occuring.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getMinimumAAPenSize" type="float" line="384"/>
            <scope line="387">
                <scope line="388"/>
            </scope>
        </class>
    </source>