<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pisces">
        <import package="sun.awt.geom.PathConsumer2D"/>
        <class name="Renderer" line="30">
            <comment line="127">
                ////////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="128">
                EDGE LIST                
            </comment>
            <comment line="129">
                ////////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="130">
                TODO(maybe): very tempting to use fixed point here. A lot of opportunities                
            </comment>
            <comment line="131">
                for shifts and just removing certain operations altogether.                
            </comment>
            <comment line="133">
                common to all types of input path segments.                
            </comment>
            <comment line="136">
                NEXT and OR are meant to be indices into &quot;int&quot; fields, but arrays must                
            </comment>
            <comment line="137">
                be homogenous, so every field is a float. However floats can represent                
            </comment>
            <comment line="138">
                exactly up to 26 bit ints, so we&apos;re ok.                
            </comment>
            <comment line="149">
                don&apos;t just set NULL to -1, because we want NULL+NEXT to be negative.                
            </comment>
            <comment line="154">
                2*newedges + (1 if pruning needed)                
            </comment>
            <comment line="160">
                each bucket is a linked list. this method adds eptr to the                
            </comment>
            <comment line="161">
                start of the &quot;bucket&quot;th linked list.                
            </comment>
            <comment line="168">
                Flattens using adaptive forward differencing. This only carries out                
            </comment>
            <comment line="169">
                one iteration of the AFD loop. All it does is update AFD variables (i.e.                
            </comment>
            <comment line="170">
                X0, Y0, D*[X|Y], COUNT; not variables used for computing scanline crossings).                
            </comment>
            <comment line="203">
                x0, y0 and x3,y3 are the endpoints of the curve. We could compute these                
            </comment>
            <comment line="204">
                using c.xat(0),c.yat(0) and c.xat(1),c.yat(1), but this might introduce                
            </comment>
            <comment line="205">
                numerical errors, and our callers already have the exact values.                
            </comment>
            <comment line="206">
                Another alternative would be to pass all the control points, and call c.set                
            </comment>
            <comment line="207">
                here, but then too many numbers are passed around.                
            </comment>
            <comment line="307">
                END EDGE LIST                
            </comment>
            <comment line="308">
                ////////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="314">
                Antialiasing                
            </comment>
            <comment line="323">
                Cache to store RLE-encoded coverage mask of the current primitive                
            </comment>
            <comment line="326">
                Bounds of the drawing region, at subpixel precision.                
            </comment>
            <comment line="329">
                Current winding rule                
            </comment>
            <comment line="332">
                Current drawing position, i.e., final point of last segment                
            </comment>
            <comment line="335">
                Position of most recent &apos;moveTo&apos; command                
            </comment>
            <implements interface="PathConsumer2D"/>
            <class name="ScanlineIterator" line="32">
                <comment line="37">
                    crossing bounds. The bounds are not necessarily tight (the scan line                    
                </comment>
                <comment line="38">
                    at minY, for example, might have no crossings). The x bounds will                    
                </comment>
                <comment line="39">
                    be accumulated as crossings are computed.                    
                </comment>
                <comment line="43">
                    indices into the segment pointer lists. They indicate the &quot;active&quot;                    
                </comment>
                <comment line="44">
                    sublist in the segment lists (the portion of the list that contains                    
                </comment>
                <comment line="45">
                    all the segments that cross the next scan line).                    
                </comment>
                <comment line="51">
                    Preconditions: Only subpixel scanlines in the range                    
                </comment>
                <comment line="52">
                    (start &lt;= subpixel_y &lt;= end) will be evaluated. No                    
                </comment>
                <comment line="53">
                    edge may have a valid (i.e. inside the supplied clip)                    
                </comment>
                <comment line="54">
                    crossing that would be generated outside that range.                    
                </comment>
                <declaration name="crossings" type="int[]" line="34"/>
                <declaration name="maxY" type="int" line="39"/>
                <declaration name="nextY" type="int" line="40"/>
                <declaration name="edgeCount" type="int" line="45"/>
                <declaration name="edgePtrs" type="int[]" line="46"/>
                <declaration name="INIT_CROSSINGS_SIZE" type="int" line="48"/>
                <method name="ScanlineIterator" type="constructor" line="54">
                    <params>
                        <param name="start" type="int"/>
                        <param name="end" type="int"/>
                    </params>
                </method>
                <method name="next" type="int" line="63">
                    <comment line="82">
                        REMIND: Adjust start Y if necessary                        
                    </comment>
                    <comment line="86">
                        if ((count &amp; 0x1) != 0) {                        
                    </comment>
                    <comment line="87">
                        System.out.println(&quot;ODD NUMBER OF EDGES!!!!&quot;);                        
                    </comment>
                    <comment line="88">
                        }                        
                    </comment>
                    <declaration name="cury" type="int" line="64"/>
                    <declaration name="bucket" type="int" line="65"/>
                    <declaration name="count" type="int" line="66"/>
                    <declaration name="ptrs" type="int" line="67"/>
                    <declaration name="bucketcount" type="int" line="68"/>
                    <scope line="69">
                        <declaration name="newCount" type="int" line="70"/>
                        <scope line="71">
                            <declaration name="ecur" type="int" line="72"/>
                            <scope line="73"/>
                        </scope>
                    </scope>
                    <scope line="80"/>
                    <declaration name="xings" type="int" line="89"/>
                    <scope line="90"/>
                    <scope line="93">
                        <declaration name="ecur" type="int" line="94"/>
                        <declaration name="curx" type="float" line="95"/>
                        <declaration name="cross" type="int" line="96"/>
                        <scope line="98"/>
                        <declaration name="j" type="int" line="101"/>
                        <scope line="102">
                            <declaration name="jcross" type="int" line="103"/>
                            <scope line="104"/>
                        </scope>
                    </scope>
                </method>
                <method name="hasNext" type="boolean" line="116"/>
                <method name="curY" type="int" line="120"/>
            </class>
            <declaration name="YMAX" type="int" line="133"/>
            <declaration name="CURX" type="int" line="134"/>
            <declaration name="OR" type="int" line="138"/>
            <declaration name="SLOPE" type="int" line="139"/>
            <declaration name="NEXT" type="int" line="140"/>
            <declaration name="edgeMinY" type="float" line="142"/>
            <declaration name="edgeMaxY" type="float" line="143"/>
            <declaration name="edgeMinX" type="float" line="144"/>
            <declaration name="edgeMaxX" type="float" line="145"/>
            <declaration name="SIZEOF_EDGE" type="int" line="147"/>
            <declaration name="NULL" type="int" line="149"/>
            <declaration name="edges" type="float[]" line="150"/>
            <declaration name="INIT_NUM_EDGES" type="int" line="151"/>
            <declaration name="edgeBuckets" type="int[]" line="152"/>
            <declaration name="edgeBucketCounts" type="int[]" line="153"/>
            <declaration name="numEdges" type="int" line="154"/>
            <declaration name="DEC_BND" type="float" line="156"/>
            <declaration name="INC_BND" type="float" line="157"/>
            <method name="addEdgeToBucket" type="void" line="161">
                <params>
                    <param name="eptr" type="int"/>
                    <param name="bucket" type="int"/>
                </params>
            </method>
            <method name="quadBreakIntoLinesAndAdd" type="void" line="173">
                <params>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                    <param name="c" type="Curve"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                </params>
                <declaration name="QUAD_DEC_BND" type="float" line="174"/>
                <declaration name="countlg" type="int" line="175"/>
                <declaration name="count" type="int" line="176"/>
                <declaration name="countsq" type="int" line="177"/>
                <declaration name="maxDD" type="float" line="178"/>
                <scope line="179"/>
                <declaration name="ddx" type="float" line="185"/>
                <declaration name="ddy" type="float" line="186"/>
                <declaration name="dx" type="float" line="187"/>
                <declaration name="dy" type="float" line="188"/>
                <scope line="190">
                    <declaration name="x1" type="float" line="191"/>
                    <declaration name="y1" type="float" line="193"/>
                </scope>
            </method>
            <method name="curveBreakIntoLinesAndAdd" type="void" line="210">
                <params>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                    <param name="c" type="Curve"/>
                    <param name="x3" type="float"/>
                    <param name="y3" type="float"/>
                </params>
                <comment line="214">
                    the dx and dy refer to forward differencing variables, not the last                    
                </comment>
                <comment line="215">
                    coefficients of the &quot;points&quot; polynomial                    
                </comment>
                <comment line="225">
                    we use x0, y0 to walk the line                    
                </comment>
                <comment line="237">
                    can only do this on even &quot;count&quot; values, because we must divide count by 2                    
                </comment>
                <declaration name="countlg" type="int" line="211"/>
                <declaration name="count" type="int" line="212"/>
                <declaration name="dddx" type="float" line="216"/>
                <declaration name="x1" type="float" line="226"/>
                <scope line="227">
                    <scope line="228"/>
                    <scope line="238"/>
                    <scope line="248"/>
                    <scope line="255"/>
                </scope>
            </method>
            <method name="addLine" type="void" line="265">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                </params>
                <comment line="266">
                    orientation of the line. 1 if y increases, 0 otherwise.                    
                </comment>
                <comment line="268">
                    no need to declare a temp variable. We have or.                    
                </comment>
                <comment line="286">
                    &lt;==&gt; x1 &lt; x2                    
                </comment>
                <declaration name="or" type="float" line="266"/>
                <scope line="267"/>
                <declaration name="firstCrossing" type="int" line="276"/>
                <declaration name="lastCrossing" type="int" line="277"/>
                <scope line="278"/>
                <scope line="281"/>
                <scope line="282"/>
                <declaration name="slope" type="float" line="284"/>
                <scope line="286">
                    <scope line="287"/>
                    <scope line="288"/>
                </scope>
                <scope line="289">
                    <scope line="290"/>
                    <scope line="291"/>
                </scope>
                <declaration name="ptr" type="int" line="294"/>
                <declaration name="bucketIdx" type="int" line="301"/>
            </method>
            <declaration name="WIND_EVEN_ODD" type="int" line="310"/>
            <declaration name="WIND_NON_ZERO" type="int" line="311"/>
            <declaration name="SUBPIXEL_LG_POSITIONS_X" type="int" line="314"/>
            <declaration name="SUBPIXEL_LG_POSITIONS_Y" type="int" line="315"/>
            <declaration name="SUBPIXEL_POSITIONS_X" type="int" line="316"/>
            <declaration name="SUBPIXEL_POSITIONS_Y" type="int" line="317"/>
            <declaration name="SUBPIXEL_MASK_X" type="int" line="318"/>
            <declaration name="SUBPIXEL_MASK_Y" type="int" line="319"/>
            <declaration name="MAX_AA_ALPHA" type="int" line="320"/>
            <declaration name="cache" type="PiscesCache" line="323"/>
            <declaration name="boundsMinX" type="int" line="326"/>
            <declaration name="windingRule" type="int" line="329"/>
            <declaration name="x0" type="float" line="332"/>
            <declaration name="pix_sx0" type="float" line="335"/>
            <method name="Renderer" type="constructor" line="341">
                <params>
                    <param name="subpixelLgPositionsX" type="int"/>
                    <param name="subpixelLgPositionsY" type="int"/>
                    <param name="pix_boundsX" type="int"/>
                    <param name="pix_boundsY" type="int"/>
                    <param name="pix_boundsWidth" type="int"/>
                    <param name="pix_boundsHeight" type="int"/>
                    <param name="windingRule" type="int"/>
                </params>
            </method>
            <method name="tosubpixx" type="float" line="364">
                <params>
                    <param name="pix_x" type="float"/>
                </params>
            </method>
            <method name="tosubpixy" type="float" line="367">
                <params>
                    <param name="pix_y" type="float"/>
                </params>
            </method>
            <method name="moveTo" type="void" line="371">
                <params>
                    <param name="pix_x0" type="float"/>
                    <param name="pix_y0" type="float"/>
                </params>
            </method>
            <method name="lineTo" type="void" line="379">
                <params>
                    <param name="pix_x1" type="float"/>
                    <param name="pix_y1" type="float"/>
                </params>
                <declaration name="x1" type="float" line="380"/>
                <declaration name="y1" type="float" line="381"/>
            </method>
            <declaration name="c" type="Curve" line="387"/>
            <method name="curveTo" type="void" line="391">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="x3" type="float"/>
                    <param name="y3" type="float"/>
                </params>
                <declaration name="xe" type="float" line="392"/>
                <declaration name="ye" type="float" line="393"/>
            </method>
            <method name="quadTo" type="void" line="400">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                </params>
                <declaration name="xe" type="float" line="401"/>
                <declaration name="ye" type="float" line="402"/>
            </method>
            <method name="closePath" type="void" line="409">
                <comment line="410">
                    lineTo expects its input in pixel coordinates.                    
                </comment>
            </method>
            <method name="pathDone" type="void" line="414"/>
            <method name="getNativeConsumer" type="long" line="420"/>
            <method name="_endRendering" type="void" line="426">
                <params>
                    <param name="pix_bboxx0" type="int"/>
                    <param name="pix_bboxx1" type="int"/>
                    <param name="ymin" type="int"/>
                    <param name="ymax" type="int"/>
                </params>
                <comment line="427">
                    Mask to determine the relevant bit of the crossing sum                    
                </comment>
                <comment line="428">
                    0x1 if EVEN_ODD, all bits if NON_ZERO                    
                </comment>
                <comment line="431">
                    add 2 to better deal with the last pixel in a pixel row.                    
                </comment>
                <comment line="438">
                    Now we iterate through the scanlines. We must tell emitRow the coord                    
                </comment>
                <comment line="439">
                    of the first non-transparent pixel, so we must keep accumulators for                    
                </comment>
                <comment line="440">
                    the first and last pixels of the section of the current pixel row                    
                </comment>
                <comment line="441">
                    that we will emit.                    
                </comment>
                <comment line="442">
                    We also need to accumulate pix_bbox*, but the iterator does it                    
                </comment>
                <comment line="443">
                    for us. We will just get the values from it once this loop is done                    
                </comment>
                <comment line="447">
                    needs to be declared here so we emit the last row properly.                    
                </comment>
                <comment line="469">
                    to turn {0, 1} into {-1, 1}, multiply by 2 and subtract 1.                    
                </comment>
                <comment line="475">
                    turn x0, x1 from coords to indeces                    
                </comment>
                <comment line="476">
                    in the alpha array.                    
                </comment>
                <comment line="482">
                    Start and end in same pixel                    
                </comment>
                <comment line="498">
                    even if this last row had no crossings, alpha will be zeroed                    
                </comment>
                <comment line="499">
                    from the last emitRow call. But this doesn&apos;t matter because                    
                </comment>
                <comment line="500">
                    maxX &lt; minX, so no row will be emitted to the cache.                    
                </comment>
                <comment line="508">
                    Emit final row                    
                </comment>
                <declaration name="mask" type="int" line="429"/>
                <declaration name="width" type="int" line="432"/>
                <declaration name="alpha" type="int[]" line="433"/>
                <declaration name="bboxx0" type="int" line="435"/>
                <declaration name="bboxx1" type="int" line="436"/>
                <declaration name="pix_maxX" type="int" line="444"/>
                <declaration name="pix_minX" type="int" line="445"/>
                <declaration name="y" type="int" line="447"/>
                <declaration name="it" type="ScanlineIterator" line="448"/>
                <scope line="449">
                    <declaration name="numCrossings" type="int" line="450"/>
                    <declaration name="crossings" type="int[]" line="451"/>
                    <scope line="454">
                        <declaration name="lowx" type="int" line="455"/>
                        <declaration name="highx" type="int" line="456"/>
                        <declaration name="x0" type="int" line="457"/>
                        <declaration name="x1" type="int" line="458"/>
                    </scope>
                    <declaration name="sum" type="int" line="464"/>
                    <declaration name="prev" type="int" line="465"/>
                    <scope line="466">
                        <declaration name="curxo" type="int" line="467"/>
                        <declaration name="curx" type="int" line="468"/>
                        <declaration name="crorientation" type="int" line="470"/>
                        <scope line="471">
                            <declaration name="x0" type="int" line="472"/>
                            <declaration name="x1" type="int" line="473"/>
                            <scope line="474">
                                <declaration name="pix_x" type="int" line="478"/>
                                <declaration name="pix_xmaxm1" type="int" line="479"/>
                                <scope line="481"/>
                                <scope line="485">
                                    <declaration name="pix_xmax" type="int" line="486"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="501"/>
                </scope>
                <scope line="509"/>
            </method>
            <method name="endRendering" type="void" line="514">
                <declaration name="spminX" type="int" line="515"/>
                <declaration name="spmaxX" type="int" line="516"/>
                <declaration name="spminY" type="int" line="517"/>
                <declaration name="spmaxY" type="int" line="518"/>
                <declaration name="pminX" type="int" line="520"/>
                <declaration name="pmaxX" type="int" line="521"/>
                <declaration name="pminY" type="int" line="522"/>
                <declaration name="pmaxY" type="int" line="523"/>
                <scope line="525"/>
            </method>
            <method name="getCache" type="PiscesCache" line="537">
                <scope line="538"/>
            </method>
            <method name="emitRow" type="void" line="544">
                <params>
                    <param name="alphaRow" type="int[]"/>
                    <param name="pix_y" type="int"/>
                    <param name="pix_from" type="int"/>
                    <param name="pix_to" type="int"/>
                </params>
                <comment line="545">
                    Copy rowAA data into the cache if one is present                    
                </comment>
                <comment line="550">
                    Perform run-length encoding and store results in the cache                    
                </comment>
                <scope line="546">
                    <scope line="547">
                        <declaration name="from" type="int" line="551"/>
                        <declaration name="to" type="int" line="552"/>
                        <declaration name="runLen" type="int" line="554"/>
                        <declaration name="startVal" type="int" line="555"/>
                        <scope line="556">
                            <declaration name="nextVal" type="int" line="557"/>
                            <scope line="558"/>
                            <scope line="560"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>