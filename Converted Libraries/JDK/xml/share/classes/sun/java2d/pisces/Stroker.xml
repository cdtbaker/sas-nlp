<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.pisces">
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.lang.Math.ulp"/>
        <import package="java.lang.Math.sqrt"/>
        <import package="sun.awt.geom.PathConsumer2D"/>
        <class name="Stroker" line="7">
            <implements interface="PathConsumer2D"/>
            <declaration name="MOVE_TO" type="int" line="8"/>
            <declaration name="DRAWING_OP_TO" type="int" line="9"/>
            <declaration name="CLOSE" type="int" line="10"/>
            <declaration name="JOIN_MITER" type="int" line="11"/>
            <javadoc line="11">
                Constant value for join style.                
            </javadoc>
            <declaration name="JOIN_ROUND" type="int" line="15"/>
            <javadoc line="15">
                Constant value for join style.                
            </javadoc>
            <declaration name="JOIN_BEVEL" type="int" line="19"/>
            <javadoc line="19">
                Constant value for join style.                
            </javadoc>
            <declaration name="CAP_BUTT" type="int" line="23"/>
            <javadoc line="23">
                Constant value for end cap style.                
            </javadoc>
            <declaration name="CAP_ROUND" type="int" line="27"/>
            <javadoc line="27">
                Constant value for end cap style.                
            </javadoc>
            <declaration name="CAP_SQUARE" type="int" line="31"/>
            <javadoc line="31">
                Constant value for end cap style.                
            </javadoc>
            <declaration name="out" type="PathConsumer2D" line="35"/>
            <declaration name="capStyle" type="int" line="36"/>
            <declaration name="joinStyle" type="int" line="37"/>
            <declaration name="lineWidth2" type="float" line="38"/>
            <declaration name="offset" type="float[][]" line="39"/>
            <declaration name="miter" type="float[]" line="40"/>
            <declaration name="miterLimitSq" type="float" line="41"/>
            <declaration name="prev" type="int" line="42"/>
            <declaration name="sx0" type="float" line="43"/>
            <declaration name="cx0" type="float" line="44"/>
            <declaration name="smx" type="float" line="45"/>
            <declaration name="reverse" type="PolyStack" line="46"/>
            <javadoc line="47">
                Constructs a &lt;code&gt;Stroker&lt;/code&gt;.                
                <param>
                    pc2d an output &lt;code&gt;PathConsumer2D&lt;/code&gt;.                    
                </param>
                <param>
                    lineWidth the desired line width in pixels                    
                </param>
                <param>
                    capStyle the desired end cap style, one of
                      &lt;code&gt;CAP_BUTT&lt;/code&gt;, &lt;code&gt;CAP_ROUND&lt;/code&gt; or
                      &lt;code&gt;CAP_SQUARE&lt;/code&gt;.                    
                </param>
                <param>
                    joinStyle the desired line join style, one of
                      &lt;code&gt;JOIN_MITER&lt;/code&gt;, &lt;code&gt;JOIN_ROUND&lt;/code&gt; or
                      &lt;code&gt;JOIN_BEVEL&lt;/code&gt;.                    
                </param>
                <param>
                    miterLimit the desired miter limit                    
                </param>
            </javadoc>
            <method name="Stroker" type="constructor" line="59">
                <params>
                    <param name="pc2d" type="PathConsumer2D"/>
                    <param name="lineWidth" type="float"/>
                    <param name="capStyle" type="int"/>
                    <param name="joinStyle" type="int"/>
                    <param name="miterLimit" type="float"/>
                </params>
                <declaration name="limit" type="float" line="64"/>
            </method>
            <method name="computeOffset" type="void" line="68">
                <params>
                    <param name="lx" type="float"/>
                    <param name="ly" type="float"/>
                    <param name="w" type="float"/>
                    <param name="m" type="float[]"/>
                </params>
                <declaration name="len" type="float" line="69"/>
                <scope line="70"/>
                <scope line="73"/>
            </method>
            <method name="isCW" type="boolean" line="78">
                <params>
                    <param name="dx1" type="float"/>
                    <param name="dy1" type="float"/>
                    <param name="dx2" type="float"/>
                    <param name="dy2" type="float"/>
                </params>
            </method>
            <declaration name="ROUND_JOIN_THRESHOLD" type="float" line="81"/>
            <method name="drawRoundJoin" type="void" line="82">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="omx" type="float"/>
                    <param name="omy" type="float"/>
                    <param name="mx" type="float"/>
                    <param name="my" type="float"/>
                    <param name="rev" type="boolean"/>
                    <param name="threshold" type="float"/>
                </params>
                <scope line="83"/>
                <declaration name="domx" type="float" line="86"/>
                <declaration name="domy" type="float" line="87"/>
                <declaration name="len" type="float" line="88"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <method name="drawRoundJoin" type="void" line="100">
                <params>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="omx" type="float"/>
                    <param name="omy" type="float"/>
                    <param name="mx" type="float"/>
                    <param name="my" type="float"/>
                    <param name="rev" type="boolean"/>
                </params>
                <declaration name="cosext" type="double" line="101"/>
                <declaration name="numCurves" type="int" line="102"/>
                <declaration name="nx" type="float" line="108"/>
                <declaration name="nlen" type="float" line="109"/>
                <declaration name="scale" type="float" line="110"/>
                <declaration name="mmx" type="float" line="111"/>
                <scope line="112"/>
            </method>
            <method name="drawBezApproxForArc" type="void" line="121">
                <params>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="omx" type="float"/>
                    <param name="omy" type="float"/>
                    <param name="mx" type="float"/>
                    <param name="my" type="float"/>
                    <param name="rev" type="boolean"/>
                </params>
                <declaration name="cosext2" type="float" line="122"/>
                <declaration name="cv" type="float" line="123"/>
                <scope line="124"/>
                <declaration name="x1" type="float" line="127"/>
                <declaration name="y1" type="float" line="128"/>
                <declaration name="x2" type="float" line="129"/>
                <declaration name="y2" type="float" line="130"/>
                <declaration name="x4" type="float" line="131"/>
                <declaration name="y4" type="float" line="132"/>
                <declaration name="x3" type="float" line="133"/>
                <declaration name="y3" type="float" line="134"/>
            </method>
            <method name="drawRoundCap" type="void" line="137">
                <params>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="mx" type="float"/>
                    <param name="my" type="float"/>
                </params>
                <declaration name="C" type="float" line="138"/>
            </method>
            <method name="computeIntersection" type="void" line="142">
                <params>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x0p" type="float"/>
                    <param name="y0p" type="float"/>
                    <param name="x1p" type="float"/>
                    <param name="y1p" type="float"/>
                    <param name="m" type="float[]"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="x10" type="float" line="143"/>
                <declaration name="y10" type="float" line="144"/>
                <declaration name="x10p" type="float" line="145"/>
                <declaration name="y10p" type="float" line="146"/>
                <declaration name="den" type="float" line="147"/>
                <declaration name="t" type="float" line="148"/>
            </method>
            <method name="drawMiter" type="void" line="153">
                <params>
                    <param name="pdx" type="float"/>
                    <param name="pdy" type="float"/>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                    <param name="dx" type="float"/>
                    <param name="dy" type="float"/>
                    <param name="omx" type="float"/>
                    <param name="omy" type="float"/>
                    <param name="mx" type="float"/>
                    <param name="my" type="float"/>
                    <param name="rev" type="boolean"/>
                </params>
                <scope line="154"/>
                <scope line="157"/>
                <declaration name="lenSq" type="float" line="164"/>
                <scope line="165"/>
            </method>
            <method name="moveTo" type="void" line="169">
                <params>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                </params>
                <scope line="170"/>
            </method>
            <method name="lineTo" type="void" line="179">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                </params>
                <declaration name="dx" type="float" line="180"/>
                <declaration name="dy" type="float" line="181"/>
                <scope line="182"/>
                <declaration name="mx" type="float" line="186"/>
                <declaration name="my" type="float" line="187"/>
            </method>
            <method name="closePath" type="void" line="201">
                <scope line="202">
                    <scope line="203"/>
                </scope>
                <scope line="214"/>
            </method>
            <method name="emitReverse" type="void" line="224">
                <scope line="225"/>
            </method>
            <method name="pathDone" type="void" line="229">
                <scope line="230"/>
            </method>
            <method name="finish" type="void" line="236">
                <scope line="237"/>
                <scope line="240"/>
                <scope line="245"/>
                <scope line="248"/>
            </method>
            <method name="emitMoveTo" type="void" line="254">
                <params>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                </params>
            </method>
            <method name="emitLineTo" type="void" line="257">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                </params>
            </method>
            <method name="emitLineTo" type="void" line="260">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="rev" type="boolean"/>
                </params>
                <scope line="261"/>
                <scope line="264"/>
            </method>
            <method name="emitQuadTo" type="void" line="268">
                <params>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="rev" type="boolean"/>
                </params>
                <scope line="269"/>
                <scope line="272"/>
            </method>
            <method name="emitCurveTo" type="void" line="276">
                <params>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="x3" type="float"/>
                    <param name="y3" type="float"/>
                    <param name="rev" type="boolean"/>
                </params>
                <scope line="277"/>
                <scope line="280"/>
            </method>
            <method name="emitClose" type="void" line="284"/>
            <method name="drawJoin" type="void" line="287">
                <params>
                    <param name="pdx" type="float"/>
                    <param name="pdy" type="float"/>
                    <param name="x0" type="float"/>
                    <param name="y0" type="float"/>
                    <param name="dx" type="float"/>
                    <param name="dy" type="float"/>
                    <param name="omx" type="float"/>
                    <param name="omy" type="float"/>
                    <param name="mx" type="float"/>
                    <param name="my" type="float"/>
                </params>
                <scope line="288"/>
                <scope line="295">
                    <declaration name="cw" type="boolean" line="296"/>
                    <scope line="297"/>
                    <scope line="300"/>
                </scope>
            </method>
            <method name="within" type="boolean" line="307">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="ERR" type="float"/>
                </params>
            </method>
            <method name="getLineOffsets" type="void" line="311">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="left" type="float[]"/>
                    <param name="right" type="float[]"/>
                </params>
            </method>
            <method name="computeOffsetCubic" type="int" line="322">
                <params>
                    <param name="pts" type="float[]"/>
                    <param name="off" type="int"/>
                    <param name="leftOff" type="float[]"/>
                    <param name="rightOff" type="float[]"/>
                </params>
                <declaration name="x1" type="float" line="323"/>
                <declaration name="x2" type="float" line="324"/>
                <declaration name="x3" type="float" line="325"/>
                <declaration name="x4" type="float" line="326"/>
                <declaration name="dx4" type="float" line="327"/>
                <declaration name="dy4" type="float" line="328"/>
                <declaration name="dx1" type="float" line="329"/>
                <declaration name="dy1" type="float" line="330"/>
                <declaration name="p1eqp2" type="boolean" line="331"/>
                <declaration name="p3eqp4" type="boolean" line="332"/>
                <scope line="333"/>
                <scope line="337"/>
                <scope line="341"/>
                <declaration name="dotsq" type="float" line="345"/>
                <declaration name="l1sq" type="float" line="347"/>
                <scope line="348"/>
                <declaration name="x" type="float" line="352"/>
                <declaration name="y" type="float" line="353"/>
                <declaration name="dxm" type="float" line="354"/>
                <declaration name="x1p" type="float" line="358"/>
                <declaration name="y1p" type="float" line="359"/>
                <declaration name="xi" type="float" line="360"/>
                <declaration name="yi" type="float" line="361"/>
                <declaration name="x4p" type="float" line="362"/>
                <declaration name="y4p" type="float" line="363"/>
                <declaration name="invdet43" type="float" line="364"/>
                <declaration name="two_pi_m_p1_m_p4x" type="float" line="365"/>
                <declaration name="two_pi_m_p1_m_p4y" type="float" line="366"/>
                <declaration name="c1" type="float" line="367"/>
                <declaration name="c2" type="float" line="368"/>
                <declaration name="x2p" type="float" line="369"/>
            </method>
            <method name="computeOffsetQuad" type="int" line="406">
                <params>
                    <param name="pts" type="float[]"/>
                    <param name="off" type="int"/>
                    <param name="leftOff" type="float[]"/>
                    <param name="rightOff" type="float[]"/>
                </params>
                <declaration name="x1" type="float" line="407"/>
                <declaration name="x2" type="float" line="408"/>
                <declaration name="x3" type="float" line="409"/>
                <declaration name="dx3" type="float" line="410"/>
                <declaration name="dy3" type="float" line="411"/>
                <declaration name="dx1" type="float" line="412"/>
                <declaration name="dy1" type="float" line="413"/>
                <declaration name="x1p" type="float" line="424"/>
                <declaration name="y1p" type="float" line="425"/>
                <declaration name="x3p" type="float" line="426"/>
                <declaration name="y3p" type="float" line="427"/>
                <declaration name="cx" type="float" line="429"/>
                <declaration name="cy" type="float" line="430"/>
                <scope line="431">
                    <scope line="439"/>
                </scope>
            </method>
            <method name="isFinite" type="boolean" line="451">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <declaration name="middle" type="float[]" line="454"/>
            <declaration name="lp" type="float[]" line="455"/>
            <declaration name="rp" type="float[]" line="456"/>
            <declaration name="MAX_N_CURVES" type="int" line="457"/>
            <declaration name="subdivTs" type="float[]" line="458"/>
            <declaration name="c" type="Curve" line="459"/>
            <javadoc line="459">
                WORKAROUND 
                  private void somethingTo(final int type) {
                  // need these so we can update the state at the end of this method
                  final float xf = middle[type-2], yf = middle[type-1];
                  float dxs = middle[2] - middle[0];
                  float dys = middle[3] - middle[1];
                  float dxf = middle[type - 2] - middle[type - 4];
                  float dyf = middle[type - 1] - middle[type - 3];
                  switch(type) {
                  case 6:
                  if ((dxs == 0f &amp;&amp; dys == 0f) ||
                  (dxf == 0f &amp;&amp; dyf == 0f)) {
                  dxs = dxf = middle[4] - middle[0];
                  dys = dyf = middle[5] - middle[1];
                  }
                  break;
                  case 8:
                  boolean p1eqp2 = (dxs == 0f &amp;&amp; dys == 0f);
                  boolean p3eqp4 = (dxf == 0f &amp;&amp; dyf == 0f);
                  if (p1eqp2) {
                  dxs = middle[4] - middle[0];
                  dys = middle[5] - middle[1];
                  if (dxs == 0f &amp;&amp; dys == 0f) {
                  dxs = middle[6] - middle[0];
                  dys = middle[7] - middle[1];
                  }
                  }
                  if (p3eqp4) {
                  dxf = middle[6] - middle[2];
                  dyf = middle[7] - middle[3];
                  if (dxf == 0f &amp;&amp; dyf == 0f) {
                  dxf = middle[6] - middle[0];
                  dyf = middle[7] - middle[1];
                  }
                  }
                  }
                  if (dxs == 0f &amp;&amp; dys == 0f) {
                  // this happens iff the &quot;curve&quot; is just a point
                  lineTo(middle[0], middle[1]);
                  return;
                  }
                  // if these vectors are too small, normalize them, to avoid future
                  // precision problems.
                  if (Math.abs(dxs) &lt; 0.1f &amp;&amp; Math.abs(dys) &lt; 0.1f) {
                  float len = (float) sqrt(dxsdxs + dysdys);
                  dxs /= len;
                  dys /= len;
                  }
                  if (Math.abs(dxf) &lt; 0.1f &amp;&amp; Math.abs(dyf) &lt; 0.1f) {
                  float len = (float) sqrt(dxfdxf + dyfdyf);
                  dxf /= len;
                  dyf /= len;
                  }
                  computeOffset(dxs, dys, lineWidth2, offset[0]);
                  final float mx = offset[0][0];
                  final float my = offset[0][1];
                  drawJoin(cdx, cdy, cx0, cy0, dxs, dys, cmx, cmy, mx, my);
                  int nSplits = findSubdivPoints(middle, subdivTs, type, lineWidth2);
                  int kind = 0;
                  Iterator&lt;Integer&gt; it = Curve.breakPtsAtTs(middle, type, subdivTs, nSplits);
                  while(it.hasNext()) {
                  int curCurveOff = it.next();
                  switch (type) {
                  case 8:
                  kind = computeOffsetCubic(middle, curCurveOff, lp, rp);
                  break;
                  case 6:
                  kind = computeOffsetQuad(middle, curCurveOff, lp, rp);
                  break;
                  }
                  emitLineTo(lp[0], lp[1]);
                  switch(kind) {
                  case 8:
                  emitCurveTo(lp[0], lp[1], lp[2], lp[3], lp[4], lp[5], lp[6], lp[7], false);
                  emitCurveTo(rp[0], rp[1], rp[2], rp[3], rp[4], rp[5], rp[6], rp[7], true);
                  break;
                  case 6:
                  emitQuadTo(lp[0], lp[1], lp[2], lp[3], lp[4], lp[5], false);
                  emitQuadTo(rp[0], rp[1], rp[2], rp[3], rp[4], rp[5], true);
                  break;
                  case 4:
                  emitLineTo(lp[2], lp[3]);
                  emitLineTo(rp[0], rp[1], true);
                  break;
                  }
                  emitLineTo(rp[kind - 2], rp[kind - 1], true);
                  }
                  this.cmx = (lp[kind - 2] - rp[kind - 2]) / 2;
                  this.cmy = (lp[kind - 1] - rp[kind - 1]) / 2;
                  this.cdx = dxf;
                  this.cdy = dyf;
                  this.cx0 = xf;
                  this.cy0 = yf;
                  this.prev = DRAWING_OP_TO;
                  }
                  END WORKAROUND                
            </javadoc>
            <method name="findSubdivPoints" type="int" line="558">
                <params>
                    <param name="pts" type="float[]"/>
                    <param name="ts" type="float[]"/>
                    <param name="type" type="int"/>
                    <param name="w" type="float"/>
                </params>
                <declaration name="x12" type="float" line="559"/>
                <declaration name="y12" type="float" line="560"/>
                <scope line="561">
                    <declaration name="hypot" type="float" line="562"/>
                    <declaration name="cos" type="float" line="563"/>
                    <declaration name="sin" type="float" line="564"/>
                    <declaration name="x1" type="float" line="565"/>
                    <declaration name="y1" type="float" line="566"/>
                    <declaration name="x2" type="float" line="567"/>
                    <declaration name="y2" type="float" line="568"/>
                    <declaration name="x3" type="float" line="569"/>
                    <declaration name="y3" type="float" line="570"/>
                    <declaration name="x4" type="float" line="573"/>
                    <declaration name="y4" type="float" line="574"/>
                </scope>
                <scope line="582"/>
                <declaration name="ret" type="int" line="585"/>
                <scope line="588"/>
            </method>
            <method name="curveTo" type="void" line="596">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="x3" type="float"/>
                    <param name="y3" type="float"/>
                </params>
                <declaration name="xf" type="float" line="605"/>
                <declaration name="dxs" type="float" line="606"/>
                <declaration name="dys" type="float" line="607"/>
                <declaration name="dxf" type="float" line="608"/>
                <declaration name="dyf" type="float" line="609"/>
                <declaration name="p1eqp2" type="boolean" line="610"/>
                <declaration name="p3eqp4" type="boolean" line="611"/>
                <scope line="612">
                    <scope line="615"/>
                </scope>
                <scope line="620">
                    <scope line="623"/>
                </scope>
                <scope line="628"/>
                <scope line="632">
                    <declaration name="len" type="float" line="633"/>
                </scope>
                <scope line="637">
                    <declaration name="len" type="float" line="638"/>
                </scope>
                <declaration name="mx" type="float" line="643"/>
                <declaration name="my" type="float" line="644"/>
                <declaration name="nSplits" type="int" line="646"/>
                <declaration name="kind" type="int" line="647"/>
                <declaration name="it" type="Iterator&amp;lt;Integer&amp;gt;" line="648"/>
                <scope line="649">
                    <declaration name="curCurveOff" type="int" line="650"/>
                </scope>
            </method>
            <method name="quadTo" type="void" line="673">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                </params>
                <declaration name="xf" type="float" line="680"/>
                <declaration name="dxs" type="float" line="681"/>
                <declaration name="dys" type="float" line="682"/>
                <declaration name="dxf" type="float" line="683"/>
                <declaration name="dyf" type="float" line="684"/>
                <scope line="685"/>
                <scope line="689"/>
                <scope line="693">
                    <declaration name="len" type="float" line="694"/>
                </scope>
                <scope line="698">
                    <declaration name="len" type="float" line="699"/>
                </scope>
                <declaration name="mx" type="float" line="704"/>
                <declaration name="my" type="float" line="705"/>
                <declaration name="nSplits" type="int" line="707"/>
                <declaration name="kind" type="int" line="708"/>
                <declaration name="it" type="Iterator&amp;lt;Integer&amp;gt;" line="709"/>
                <scope line="710">
                    <declaration name="curCurveOff" type="int" line="711"/>
                </scope>
            </method>
            <method name="getNativeConsumer" type="long" line="734"/>
            <class name="PolyStack" line="737">
                <declaration name="curves" type="float[]" line="738"/>
                <declaration name="end" type="int" line="739"/>
                <declaration name="curveTypes" type="int[]" line="740"/>
                <declaration name="numCurves" type="int" line="741"/>
                <declaration name="INIT_SIZE" type="int" line="742"/>
                <method name="PolyStack" type="constructor" line="743"/>
                <method name="isEmpty" type="boolean" line="749"/>
                <method name="ensureSpace" type="void" line="752">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                    <scope line="753">
                        <declaration name="newSize" type="int" line="754"/>
                    </scope>
                    <scope line="757">
                        <declaration name="newSize" type="int" line="758"/>
                    </scope>
                </method>
                <method name="pushCubic" type="void" line="762">
                    <params>
                        <param name="x0" type="float"/>
                        <param name="y0" type="float"/>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                    </params>
                </method>
                <method name="pushQuad" type="void" line="772">
                    <params>
                        <param name="x0" type="float"/>
                        <param name="y0" type="float"/>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                    </params>
                </method>
                <method name="pushLine" type="void" line="780">
                    <params>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                    </params>
                </method>
                <method name="pop" type="int" line="786">
                    <params>
                        <param name="pts" type="float[]"/>
                    </params>
                    <declaration name="ret" type="int" line="787"/>
                </method>
                <method name="pop" type="void" line="793">
                    <params>
                        <param name="io" type="PathConsumer2D"/>
                    </params>
                    <declaration name="type" type="int" line="795"/>
                </method>
                <method name="toString" type="String" line="808">
                    <declaration name="ret" type="String" line="809"/>
                    <declaration name="nc" type="int" line="810"/>
                    <declaration name="end" type="int" line="811"/>
                    <scope line="812">
                        <declaration name="type" type="int" line="814"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>