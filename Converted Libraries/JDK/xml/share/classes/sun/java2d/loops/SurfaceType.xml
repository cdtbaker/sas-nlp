<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.loops">
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="sun.awt.image.PixelConverter"/>
        <import package="java.util.HashMap"/>
        <class name="SurfaceType" line="6">
            <javadoc line="6">
                A SurfaceType object provides a chained description of a type of
                  drawing surface.  The object will provide a single String constant
                  descriptor which is one way of viewing or accessing a particular
                  drawing surface as well as a pointer to another SurfaceType which
                  describes the same drawing surface in a different (typically more
                  generalized) way.
                  &lt;p&gt;
                  A more specific description of a surface is considered a &quot;subtype&quot;
                  and a more general description is considered a &quot;supertype&quot;.  Thus,
                  the deriveSubType method provides a way to create a new SurfaceType
                  that is related to but more specific than an existing SurfaceType and
                  the getSuperType method provides a way to ask a given SurfaceType
                  for a more general way to describe the same surface.
                  &lt;p&gt;
                  Note that you cannot construct a brand new root for a chain since
                  the constructor is private.  Every chain of types must at some point
                  derive from the Any node provided here using the deriveSubType()
                  method.  The presence of this common Any node on every chain
                  ensures that all chains end with the DESC_ANY descriptor so that
                  a suitable General GraphicsPrimitive object can be obtained for
                  the indicated surface if all of the more specific searches fail.                
            </javadoc>
            <declaration name="unusedUID" type="int" line="30"/>
            <declaration name="surfaceUIDMap" type="HashMap" line="31"/>
            <declaration name="DESC_ANY" type="String" line="32"/>
            <javadoc line="32">
                surface is unknown color model or sample model.                
            </javadoc>
            <declaration name="DESC_INT_RGB" type="String" line="36"/>
            <javadoc line="36">
                common surface formats defined in BufferedImage                
            </javadoc>
            <declaration name="DESC_INT_ARGB" type="String" line="40"/>
            <declaration name="DESC_INT_ARGB_PRE" type="String" line="41"/>
            <declaration name="DESC_INT_BGR" type="String" line="42"/>
            <declaration name="DESC_3BYTE_BGR" type="String" line="43"/>
            <declaration name="DESC_4BYTE_ABGR" type="String" line="44"/>
            <declaration name="DESC_4BYTE_ABGR_PRE" type="String" line="45"/>
            <declaration name="DESC_USHORT_565_RGB" type="String" line="46"/>
            <declaration name="DESC_USHORT_555_RGB" type="String" line="47"/>
            <declaration name="DESC_USHORT_555_RGBx" type="String" line="48"/>
            <declaration name="DESC_USHORT_4444_ARGB" type="String" line="49"/>
            <declaration name="DESC_BYTE_GRAY" type="String" line="50"/>
            <declaration name="DESC_USHORT_INDEXED" type="String" line="51"/>
            <declaration name="DESC_USHORT_GRAY" type="String" line="52"/>
            <declaration name="DESC_BYTE_BINARY" type="String" line="53"/>
            <declaration name="DESC_BYTE_INDEXED" type="String" line="54"/>
            <declaration name="DESC_ANY_INT" type="String" line="55"/>
            <javadoc line="55">
                wildcard format which indicates that the GraphicsPrimitive
                  is independent of the color model on an IntegerComponent
                  sample model surface                
            </javadoc>
            <declaration name="DESC_ANY_SHORT" type="String" line="61"/>
            <javadoc line="61">
                wildcard format which indicates that the GraphicsPrimitive
                  is independent of the color model on a ShortComponent
                  sample model surface                
            </javadoc>
            <declaration name="DESC_ANY_BYTE" type="String" line="67"/>
            <javadoc line="67">
                wildcard format which indicates that the GraphicsPrimitive
                  is independent of the color model on a ByteComponent
                  sample model surface                
            </javadoc>
            <declaration name="DESC_ANY_3BYTE" type="String" line="73"/>
            <javadoc line="73">
                wildcard format which indicates that the GraphicsPrimitive
                  operates on a surface with 3 component interleaved Raster and
                  sample model and a ComponentColorModel with an arbitrary ordering
                  of the RGB channels                
            </javadoc>
            <declaration name="DESC_ANY_4BYTE" type="String" line="80"/>
            <javadoc line="80">
                wildcard format which indicates that the GraphicsPrimitive
                  operates on a surface with 4 component interleaved Raster and
                  sample model and a ComponentColorModel with an arbitrary ordering
                  of the ARGB channels                
            </javadoc>
            <declaration name="DESC_ANY_INT_DCM" type="String" line="87"/>
            <javadoc line="87">
                wildcard format which indicates that the GraphicsPrimitive
                  operates on a surface with a single component IntegerComponent
                  sample model and a DirectColorModel with an arbitrary ordering
                  of the RGB channels                
            </javadoc>
            <declaration name="DESC_INT_RGBx" type="String" line="94"/>
            <javadoc line="94">
                additional IntegerComponent types common on Windows                
            </javadoc>
            <declaration name="DESC_INT_BGRx" type="String" line="98"/>
            <declaration name="DESC_3BYTE_RGB" type="String" line="99"/>
            <javadoc line="99">
                additional 3 byte format common on Windows                
            </javadoc>
            <declaration name="DESC_INT_ARGB_BM" type="String" line="103"/>
            <javadoc line="103">
                common formats for BITMASK transparency.                
            </javadoc>
            <declaration name="DESC_BYTE_INDEXED_BM" type="String" line="107"/>
            <declaration name="DESC_BYTE_INDEXED_OPAQUE" type="String" line="108"/>
            <javadoc line="108">
                Opaque 8-bit indexed images                
            </javadoc>
            <declaration name="DESC_INDEX8_GRAY" type="String" line="112"/>
            <javadoc line="112">
                Special Gray Scale types for rendering loops.  Really indexed
                  types, but colormap has all gray values.                
            </javadoc>
            <declaration name="DESC_INDEX12_GRAY" type="String" line="117"/>
            <declaration name="DESC_BYTE_BINARY_1BIT" type="String" line="118"/>
            <declaration name="DESC_BYTE_BINARY_2BIT" type="String" line="119"/>
            <declaration name="DESC_BYTE_BINARY_4BIT" type="String" line="120"/>
            <declaration name="DESC_ANY_PAINT" type="String" line="121"/>
            <javadoc line="121">
                Special type for describing the sources of loops that render the
                  current foreground color or paint instead of copying colors from
                  a source surface.                
            </javadoc>
            <declaration name="DESC_ANY_COLOR" type="String" line="127"/>
            <declaration name="DESC_OPAQUE_COLOR" type="String" line="128"/>
            <declaration name="DESC_GRADIENT_PAINT" type="String" line="129"/>
            <declaration name="DESC_OPAQUE_GRADIENT_PAINT" type="String" line="130"/>
            <declaration name="DESC_TEXTURE_PAINT" type="String" line="131"/>
            <declaration name="DESC_OPAQUE_TEXTURE_PAINT" type="String" line="132"/>
            <declaration name="DESC_LINEAR_GRADIENT_PAINT" type="String" line="133"/>
            <declaration name="DESC_OPAQUE_LINEAR_GRADIENT_PAINT" type="String" line="134"/>
            <declaration name="DESC_RADIAL_GRADIENT_PAINT" type="String" line="135"/>
            <declaration name="DESC_OPAQUE_RADIAL_GRADIENT_PAINT" type="String" line="136"/>
            <declaration name="Any" type="SurfaceType" line="137"/>
            <javadoc line="137">
                The root SurfaceType object for all chains of surface descriptions.
                  The root uses the default PixelConverter object, which uses a given
                  ColorModel object to calculate its pixelFor() values when asked.
                  Any SurfaceType objects that are not created with a specific
                  PixelConverter object will inherit this behavior from the root.                
            </javadoc>
            <declaration name="AnyInt" type="SurfaceType" line="145"/>
            <declaration name="AnyShort" type="SurfaceType" line="146"/>
            <declaration name="AnyByte" type="SurfaceType" line="147"/>
            <declaration name="AnyByteBinary" type="SurfaceType" line="148"/>
            <declaration name="Any3Byte" type="SurfaceType" line="149"/>
            <declaration name="Any4Byte" type="SurfaceType" line="150"/>
            <declaration name="AnyDcm" type="SurfaceType" line="151"/>
            <declaration name="Custom" type="SurfaceType" line="152"/>
            <declaration name="IntRgb" type="SurfaceType" line="153"/>
            <declaration name="IntArgb" type="SurfaceType" line="154"/>
            <declaration name="IntArgbPre" type="SurfaceType" line="155"/>
            <declaration name="IntBgr" type="SurfaceType" line="156"/>
            <declaration name="ThreeByteBgr" type="SurfaceType" line="157"/>
            <declaration name="FourByteAbgr" type="SurfaceType" line="158"/>
            <declaration name="FourByteAbgrPre" type="SurfaceType" line="159"/>
            <declaration name="Ushort565Rgb" type="SurfaceType" line="160"/>
            <declaration name="Ushort555Rgb" type="SurfaceType" line="161"/>
            <declaration name="Ushort555Rgbx" type="SurfaceType" line="162"/>
            <declaration name="Ushort4444Argb" type="SurfaceType" line="163"/>
            <declaration name="UshortIndexed" type="SurfaceType" line="164"/>
            <declaration name="ByteGray" type="SurfaceType" line="165"/>
            <declaration name="UshortGray" type="SurfaceType" line="166"/>
            <declaration name="ByteBinary1Bit" type="SurfaceType" line="167"/>
            <declaration name="ByteBinary2Bit" type="SurfaceType" line="168"/>
            <declaration name="ByteBinary4Bit" type="SurfaceType" line="169"/>
            <declaration name="ByteIndexed" type="SurfaceType" line="170"/>
            <declaration name="IntRgbx" type="SurfaceType" line="171"/>
            <declaration name="IntBgrx" type="SurfaceType" line="172"/>
            <declaration name="ThreeByteRgb" type="SurfaceType" line="173"/>
            <declaration name="IntArgbBm" type="SurfaceType" line="174"/>
            <declaration name="ByteIndexedBm" type="SurfaceType" line="175"/>
            <declaration name="ByteIndexedOpaque" type="SurfaceType" line="176"/>
            <declaration name="Index8Gray" type="SurfaceType" line="177"/>
            <declaration name="Index12Gray" type="SurfaceType" line="178"/>
            <declaration name="AnyPaint" type="SurfaceType" line="179"/>
            <declaration name="AnyColor" type="SurfaceType" line="180"/>
            <declaration name="OpaqueColor" type="SurfaceType" line="181"/>
            <declaration name="GradientPaint" type="SurfaceType" line="182"/>
            <declaration name="OpaqueGradientPaint" type="SurfaceType" line="183"/>
            <declaration name="LinearGradientPaint" type="SurfaceType" line="184"/>
            <declaration name="OpaqueLinearGradientPaint" type="SurfaceType" line="185"/>
            <declaration name="RadialGradientPaint" type="SurfaceType" line="186"/>
            <declaration name="OpaqueRadialGradientPaint" type="SurfaceType" line="187"/>
            <declaration name="TexturePaint" type="SurfaceType" line="188"/>
            <declaration name="OpaqueTexturePaint" type="SurfaceType" line="189"/>
            <javadoc line="190">
                Return a new SurfaceType object which uses this object as its
                  more general &quot;supertype&quot; descriptor.  If no operation can be
                  found that manipulates the type of surface described more exactly
                  by desc, then this object will define the more relaxed specification
                  of the surface that can be used to find a more general operator.                
            </javadoc>
            <method name="deriveSubType" type="SurfaceType" line="197">
                <params>
                    <param name="desc" type="String"/>
                </params>
            </method>
            <method name="deriveSubType" type="SurfaceType" line="200">
                <params>
                    <param name="desc" type="String"/>
                    <param name="pixelConverter" type="PixelConverter"/>
                </params>
            </method>
            <declaration name="uniqueID" type="int" line="203"/>
            <declaration name="desc" type="String" line="204"/>
            <declaration name="next" type="SurfaceType" line="205"/>
            <declaration name="pixelConverter" type="PixelConverter" line="206"/>
            <method name="SurfaceType" type="constructor" line="207">
                <params>
                    <param name="parent" type="SurfaceType"/>
                    <param name="desc" type="String"/>
                    <param name="pixelConverter" type="PixelConverter"/>
                </params>
            </method>
            <method name="SurfaceType" type="constructor" line="213">
                <params>
                    <param name="parent" type="SurfaceType"/>
                    <param name="desc" type="String"/>
                </params>
            </method>
            <method name="makeUniqueID" type="int" line="219">
                <params>
                    <param name="desc" type="String"/>
                </params>
                <declaration name="i" type="Integer" line="220"/>
                <scope line="221">
                    <scope line="222"/>
                </scope>
            </method>
            <method name="getUniqueID" type="int" line="230"/>
            <method name="getDescriptor" type="String" line="233"/>
            <method name="getSuperType" type="SurfaceType" line="236"/>
            <method name="getPixelConverter" type="PixelConverter" line="239"/>
            <method name="pixelFor" type="int" line="242">
                <params>
                    <param name="rgb" type="int"/>
                    <param name="cm" type="ColorModel"/>
                </params>
            </method>
            <method name="rgbFor" type="int" line="245">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="cm" type="ColorModel"/>
                </params>
            </method>
            <method name="getAlphaMask" type="int" line="248"/>
            <method name="hashCode" type="int" line="251"/>
            <method name="equals" type="boolean" line="254">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="255"/>
            </method>
            <method name="toString" type="String" line="260"/>
        </class>
    </source>