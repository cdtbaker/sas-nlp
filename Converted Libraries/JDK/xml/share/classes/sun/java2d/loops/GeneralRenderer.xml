<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.loops">
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.geom.Path2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.java2d.pipe.SpanIterator"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.loops.ProcessPath"/>
        <import package="sun.font.GlyphList"/>
        <class name="GeneralRenderer" line="45">
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <javadoc line="45">
                GeneralRenderer collection
                  Basically, a collection of components which permit basic
                  rendering to occur on rasters of any format                
            </javadoc>
            <method name="register" type="void" line="52">
                <declaration name="owner" type="Class" line="53"/>
                <declaration name="primitives" type="GraphicsPrimitive[]" line="54"/>
            </method>
            <method name="doDrawPoly" type="void" line="159">
                <params>
                    <param name="sData" type="SurfaceData"/>
                    <param name="pw" type="PixelWriter"/>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="off" type="int"/>
                    <param name="nPoints" type="int"/>
                    <param name="clip" type="Region"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                    <param name="close" type="boolean"/>
                </params>
                <declaration name="mx" type="int" line="160"/>
                <declaration name="tmp" type="int[]" line="161"/>
                <scope line="163"/>
                <scope line="168">
                    <declaration name="x2" type="int" line="170"/>
                    <declaration name="y2" type="int" line="171"/>
                </scope>
                <scope line="177"/>
            </method>
            <method name="doSetRect" type="void" line="184">
                <params>
                    <param name="sData" type="SurfaceData"/>
                    <param name="pw" type="PixelWriter"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <declaration name="dstRast" type="WritableRaster" line="185"/>
                <scope line="189">
                    <scope line="190"/>
                </scope>
            </method>
            <method name="doDrawLine" type="int[]" line="200">
                <params>
                    <param name="sData" type="SurfaceData"/>
                    <param name="pw" type="PixelWriter"/>
                    <param name="boundPts" type="int[]"/>
                    <param name="clip" type="Region"/>
                    <param name="origx1" type="int"/>
                    <param name="origy1" type="int"/>
                    <param name="origx2" type="int"/>
                    <param name="origy2" type="int"/>
                </params>
                <comment line="225">
                                        
                </comment>
                <comment line="264">
                                        
                </comment>
                <comment line="270">
                                        
                </comment>
                <comment line="273">
                                        
                </comment>
                <comment line="279">
                                        
                </comment>
                <scope line="201"/>
                <scope line="211"/>
                <declaration name="x1" type="int" line="214"/>
                <declaration name="y1" type="int" line="215"/>
                <declaration name="x2" type="int" line="216"/>
                <declaration name="y2" type="int" line="217"/>
                <declaration name="dstRast" type="WritableRaster" line="219"/>
                <scope line="225">
                    <scope line="226">
                        <scope line="227"/>
                    </scope>
                    <scope line="231">
                        <scope line="232"/>
                    </scope>
                </scope>
                <scope line="237">
                    <scope line="238">
                        <scope line="239"/>
                    </scope>
                    <scope line="243">
                        <scope line="244"/>
                    </scope>
                </scope>
                <scope line="249">
                    <declaration name="dx" type="int" line="250"/>
                    <declaration name="dy" type="int" line="251"/>
                    <declaration name="ax" type="int" line="252"/>
                    <declaration name="ay" type="int" line="253"/>
                    <declaration name="steps" type="int" line="254"/>
                    <declaration name="bumpmajor" type="int" line="255"/>
                    <declaration name="bumpminor" type="int" line="256"/>
                    <declaration name="errminor" type="int" line="257"/>
                    <declaration name="errmajor" type="int" line="258"/>
                    <declaration name="error" type="int" line="259"/>
                    <declaration name="xmajor" type="boolean" line="260"/>
                    <scope line="262"/>
                    <scope line="271"/>
                    <scope line="282">
                        <declaration name="ysteps" type="int" line="283"/>
                        <scope line="284"/>
                    </scope>
                    <scope line="289">
                        <declaration name="xsteps" type="int" line="290"/>
                        <scope line="291"/>
                    </scope>
                    <scope line="296"/>
                    <scope line="299">
                        <scope line="300">
                            <scope line="304"/>
                        </scope>
                    </scope>
                    <scope line="309">
                        <scope line="310">
                            <scope line="314"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="doDrawRect" type="void" line="327">
                <params>
                    <param name="pw" type="PixelWriter"/>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="328"/>
                <declaration name="x2" type="int" line="331"/>
                <declaration name="y2" type="int" line="332"/>
                <declaration name="r" type="Region" line="333"/>
                <scope line="334"/>
                <declaration name="cx1" type="int" line="337"/>
                <declaration name="cy1" type="int" line="338"/>
                <declaration name="cx2" type="int" line="339"/>
                <declaration name="cy2" type="int" line="340"/>
                <scope line="342"/>
                <scope line="348"/>
                <scope line="351"/>
                <scope line="354"/>
                <scope line="357"/>
            </method>
            <method name="doDrawGlyphList" type="void" line="371">
                <params>
                    <param name="sData" type="SurfaceData"/>
                    <param name="pw" type="PixelWriter"/>
                    <param name="gl" type="GlyphList"/>
                    <param name="clip" type="Region"/>
                </params>
                <declaration name="bounds" type="int[]" line="372"/>
                <declaration name="cx1" type="int" line="374"/>
                <declaration name="cy1" type="int" line="375"/>
                <declaration name="cx2" type="int" line="376"/>
                <declaration name="cy2" type="int" line="377"/>
                <declaration name="dstRast" type="WritableRaster" line="379"/>
                <declaration name="num" type="int" line="383"/>
                <scope line="384">
                    <declaration name="metrics" type="int" line="386"/>
                    <declaration name="gx1" type="int" line="387"/>
                    <declaration name="gy1" type="int" line="388"/>
                    <declaration name="w" type="int" line="389"/>
                    <declaration name="gx2" type="int" line="390"/>
                    <declaration name="gy2" type="int" line="391"/>
                    <declaration name="off" type="int" line="392"/>
                    <scope line="393"/>
                    <scope line="397"/>
                    <scope line="403">
                        <declaration name="alpha" type="byte" line="404"/>
                        <scope line="406">
                            <scope line="407">
                                <scope line="408"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="OUTCODE_TOP" type="int" line="418"/>
            <declaration name="OUTCODE_BOTTOM" type="int" line="419"/>
            <declaration name="OUTCODE_LEFT" type="int" line="420"/>
            <declaration name="OUTCODE_RIGHT" type="int" line="421"/>
            <method name="outcode" type="int" line="423">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="xmin" type="int"/>
                    <param name="ymin" type="int"/>
                    <param name="xmax" type="int"/>
                    <param name="ymax" type="int"/>
                </params>
                <declaration name="code" type="int" line="424"/>
                <scope line="425"/>
                <scope line="427"/>
                <scope line="429"/>
                <scope line="432"/>
                <scope line="434"/>
            </method>
            <method name="adjustLine" type="boolean" line="442">
                <params>
                    <param name="boundPts" type="int[]"/>
                    <param name="cxmin" type="int"/>
                    <param name="cymin" type="int"/>
                    <param name="cx2" type="int"/>
                    <param name="cy2" type="int"/>
                </params>
                <comment line="496">
                                        
                </comment>
                <declaration name="cxmax" type="int" line="443"/>
                <declaration name="cymax" type="int" line="444"/>
                <declaration name="x1" type="int" line="445"/>
                <declaration name="y1" type="int" line="446"/>
                <declaration name="x2" type="int" line="447"/>
                <declaration name="y2" type="int" line="448"/>
                <scope line="450"/>
                <scope line="454">
                    <scope line="455"/>
                    <scope line="458">
                        <declaration name="t" type="int" line="459"/>
                    </scope>
                    <scope line="463"/>
                    <scope line="466"/>
                    <scope line="469"/>
                </scope>
                <scope line="474">
                    <scope line="475"/>
                    <scope line="478">
                        <declaration name="t" type="int" line="479"/>
                    </scope>
                    <scope line="483"/>
                    <scope line="486"/>
                    <scope line="489"/>
                </scope>
                <scope line="494">
                    <declaration name="outcode1" type="int" line="496"/>
                    <declaration name="dx" type="int" line="497"/>
                    <declaration name="dy" type="int" line="498"/>
                    <declaration name="ax" type="int" line="499"/>
                    <declaration name="ay" type="int" line="500"/>
                    <declaration name="xmajor" type="boolean" line="501"/>
                    <scope line="505">
                        <declaration name="xsteps" type="int" line="506"/>
                        <scope line="507"/>
                        <scope line="510">
                            <scope line="511">
                                <scope line="512"/>
                                <scope line="514"/>
                                <scope line="518"/>
                                <scope line="522"/>
                                <scope line="526"/>
                            </scope>
                            <scope line="531">
                                <scope line="532"/>
                                <scope line="534"/>
                                <scope line="538"/>
                                <scope line="542"/>
                                <scope line="546"/>
                            </scope>
                        </scope>
                        <scope line="552">
                            <scope line="553">
                                <scope line="554"/>
                                <scope line="556"/>
                                <scope line="560"/>
                                <scope line="564"/>
                                <scope line="566"/>
                                <scope line="570"/>
                            </scope>
                            <scope line="575">
                                <scope line="576"/>
                                <scope line="578"/>
                                <scope line="582"/>
                                <scope line="586"/>
                                <scope line="588"/>
                                <scope line="592"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="createSolidPixelWriter" type="PixelWriter" line="614">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                </params>
                <declaration name="dstCM" type="ColorModel" line="615"/>
                <declaration name="srcPixel" type="Object" line="616"/>
            </method>
            <method name="createXorPixelWriter" type="PixelWriter" line="623">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                </params>
                <declaration name="dstCM" type="ColorModel" line="624"/>
                <declaration name="srcPixel" type="Object" line="626"/>
                <declaration name="comp" type="XORComposite" line="628"/>
                <declaration name="xorrgb" type="int" line="629"/>
                <declaration name="xorPixel" type="Object" line="630"/>
            </method>
        </class>
        <class name="SetFillRectANY" line="650">
            <extends class="FillRect"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="SetFillRectANY" type="constructor" line="651"/>
            <method name="FillRect" type="void" line="659">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="660"/>
                <declaration name="r" type="Region" line="662"/>
            </method>
        </class>
        <class name="PixelWriterDrawHandler" line="670">
            <extends class="ProcessPath.DrawHandler"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <declaration name="pw" type="PixelWriter" line="671"/>
            <declaration name="sData" type="SurfaceData" line="672"/>
            <declaration name="clip" type="Region" line="673"/>
            <method name="PixelWriterDrawHandler" type="constructor" line="676">
                <params>
                    <param name="sData" type="SurfaceData"/>
                    <param name="pw" type="PixelWriter"/>
                    <param name="clip" type="Region"/>
                    <param name="strokeHint" type="int"/>
                </params>
            </method>
            <method name="drawLine" type="void" line="685">
                <params>
                    <param name="x0" type="int"/>
                    <param name="y0" type="int"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                </params>
            </method>
            <method name="drawPixel" type="void" line="690">
                <params>
                    <param name="x0" type="int"/>
                    <param name="y0" type="int"/>
                </params>
            </method>
            <method name="drawScanline" type="void" line="694">
                <params>
                    <param name="x0" type="int"/>
                    <param name="x1" type="int"/>
                    <param name="y0" type="int"/>
                </params>
            </method>
        </class>
        <class name="SetFillPathANY" line="699">
            <extends class="FillPath"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="SetFillPathANY" type="constructor" line="700"/>
            <method name="FillPath" type="void" line="708">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                    <param name="p2df" type="Path2D.Float"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="709"/>
            </method>
        </class>
        <class name="SetFillSpansANY" line="717">
            <extends class="FillSpans"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="SetFillSpansANY" type="constructor" line="718"/>
            <method name="FillSpans" type="void" line="726">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="si" type="SpanIterator"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="727"/>
                <declaration name="span" type="int" line="729"/>
                <scope line="730"/>
            </method>
        </class>
        <class name="SetDrawLineANY" line="737">
            <extends class="DrawLine"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="SetDrawLineANY" type="constructor" line="738"/>
            <method name="DrawLine" type="void" line="746">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="747"/>
                <scope line="749"/>
                <scope line="753"/>
            </method>
        </class>
        <class name="SetDrawPolygonsANY" line="761">
            <extends class="DrawPolygons"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="SetDrawPolygonsANY" type="constructor" line="762"/>
            <method name="DrawPolygons" type="void" line="773">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                    <param name="numPolys" type="int"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                    <param name="close" type="boolean"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="774"/>
                <declaration name="off" type="int" line="776"/>
                <declaration name="clip" type="Region" line="777"/>
                <scope line="778">
                    <declaration name="numpts" type="int" line="779"/>
                </scope>
            </method>
        </class>
        <class name="SetDrawPathANY" line="788">
            <extends class="DrawPath"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="SetDrawPathANY" type="constructor" line="789"/>
            <method name="DrawPath" type="void" line="798">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                    <param name="p2df" type="Path2D.Float"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="799"/>
            </method>
        </class>
        <class name="SetDrawRectANY" line="808">
            <extends class="DrawRect"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="SetDrawRectANY" type="constructor" line="809"/>
            <method name="DrawRect" type="void" line="817">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="818"/>
            </method>
        </class>
        <class name="XorFillRectANY" line="824">
            <extends class="FillRect"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorFillRectANY" type="constructor" line="825"/>
            <method name="FillRect" type="void" line="833">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="834"/>
                <declaration name="r" type="Region" line="836"/>
            </method>
        </class>
        <class name="XorFillPathANY" line="844">
            <extends class="FillPath"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorFillPathANY" type="constructor" line="845"/>
            <method name="FillPath" type="void" line="853">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                    <param name="p2df" type="Path2D.Float"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="854"/>
            </method>
        </class>
        <class name="XorFillSpansANY" line="862">
            <extends class="FillSpans"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorFillSpansANY" type="constructor" line="863"/>
            <method name="FillSpans" type="void" line="871">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="si" type="SpanIterator"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="872"/>
                <declaration name="span" type="int" line="874"/>
                <scope line="875"/>
            </method>
        </class>
        <class name="XorDrawLineANY" line="882">
            <extends class="DrawLine"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorDrawLineANY" type="constructor" line="883"/>
            <method name="DrawLine" type="void" line="891">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="892"/>
                <scope line="894"/>
                <scope line="898"/>
            </method>
        </class>
        <class name="XorDrawPolygonsANY" line="906">
            <extends class="DrawPolygons"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorDrawPolygonsANY" type="constructor" line="907"/>
            <method name="DrawPolygons" type="void" line="918">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                    <param name="numPolys" type="int"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                    <param name="close" type="boolean"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="919"/>
                <declaration name="off" type="int" line="921"/>
                <declaration name="clip" type="Region" line="922"/>
                <scope line="923">
                    <declaration name="numpts" type="int" line="924"/>
                </scope>
            </method>
        </class>
        <class name="XorDrawPathANY" line="933">
            <extends class="DrawPath"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorDrawPathANY" type="constructor" line="934"/>
            <method name="DrawPath" type="void" line="942">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="transx" type="int"/>
                    <param name="transy" type="int"/>
                    <param name="p2df" type="Path2D.Float"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="943"/>
            </method>
        </class>
        <class name="XorDrawRectANY" line="952">
            <extends class="DrawRect"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorDrawRectANY" type="constructor" line="953"/>
            <method name="DrawRect" type="void" line="961">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="962"/>
            </method>
        </class>
        <class name="XorDrawGlyphListANY" line="968">
            <extends class="DrawGlyphList"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorDrawGlyphListANY" type="constructor" line="969"/>
            <method name="DrawGlyphList" type="void" line="977">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="gl" type="GlyphList"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="978"/>
            </method>
        </class>
        <class name="XorDrawGlyphListAAANY" line="983">
            <extends class="DrawGlyphListAA"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <method name="XorDrawGlyphListAAANY" type="constructor" line="984"/>
            <method name="DrawGlyphListAA" type="void" line="992">
                <params>
                    <param name="sg2d" type="SunGraphics2D"/>
                    <param name="sData" type="SurfaceData"/>
                    <param name="gl" type="GlyphList"/>
                </params>
                <declaration name="pw" type="PixelWriter" line="993"/>
            </method>
        </class>
        <class name="PixelWriter" line="998">
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <declaration name="dstRast" type="WritableRaster" line="999"/>
            <method name="setRaster" type="void" line="1001">
                <params>
                    <param name="dstRast" type="WritableRaster"/>
                </params>
            </method>
            <method name="writePixel" type="void" line="1005"/>
        </class>
        <class name="SolidPixelWriter" line="1008">
            <extends class="PixelWriter"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <declaration name="srcData" type="Object" line="1009"/>
            <method name="SolidPixelWriter" type="constructor" line="1011">
                <params>
                    <param name="srcPixel" type="Object"/>
                </params>
            </method>
            <method name="writePixel" type="void" line="1015">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
        </class>
        <class name="XorPixelWriter" line="1020">
            <extends class="PixelWriter"/>
            <comment line="363">
                REMIND: For now this will field both AA and non-AA requests and
                 use a simple threshold to choose pixels if the supplied grey
                 bits are antialiased.  We should really find a way to disable
                 AA text at a higher level or to have the GlyphList be able to
                 reset the glyphs to non-AA after construction.                
            </comment>
            <declaration name="dstCM" type="ColorModel" line="1021"/>
            <method name="writePixel" type="void" line="1023">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="dstPixel" type="Object" line="1024"/>
            </method>
            <method name="xorPixel" type="void" line="1029"/>
            <class name="ByteData" line="1031">
                <extends class="XorPixelWriter"/>
                <declaration name="xorData" type="byte[]" line="1032"/>
                <method name="ByteData" type="constructor" line="1034">
                    <params>
                        <param name="srcPixel" type="Object"/>
                        <param name="xorPixel" type="Object"/>
                    </params>
                </method>
                <method name="xorPixel" type="void" line="1040">
                    <params>
                        <param name="pixData" type="Object"/>
                    </params>
                    <declaration name="dstData" type="byte[]" line="1041"/>
                    <scope line="1042"/>
                </method>
            </class>
            <class name="ShortData" line="1048">
                <extends class="XorPixelWriter"/>
                <declaration name="xorData" type="short[]" line="1049"/>
                <method name="ShortData" type="constructor" line="1051">
                    <params>
                        <param name="srcPixel" type="Object"/>
                        <param name="xorPixel" type="Object"/>
                    </params>
                </method>
                <method name="xorPixel" type="void" line="1057">
                    <params>
                        <param name="pixData" type="Object"/>
                    </params>
                    <declaration name="dstData" type="short[]" line="1058"/>
                    <scope line="1059"/>
                </method>
            </class>
            <class name="IntData" line="1065">
                <extends class="XorPixelWriter"/>
                <declaration name="xorData" type="int[]" line="1066"/>
                <method name="IntData" type="constructor" line="1068">
                    <params>
                        <param name="srcPixel" type="Object"/>
                        <param name="xorPixel" type="Object"/>
                    </params>
                </method>
                <method name="xorPixel" type="void" line="1074">
                    <params>
                        <param name="pixData" type="Object"/>
                    </params>
                    <declaration name="dstData" type="int[]" line="1075"/>
                    <scope line="1076"/>
                </method>
            </class>
            <class name="FloatData" line="1082">
                <extends class="XorPixelWriter"/>
                <declaration name="xorData" type="int[]" line="1083"/>
                <method name="FloatData" type="constructor" line="1085">
                    <params>
                        <param name="srcPixel" type="Object"/>
                        <param name="xorPixel" type="Object"/>
                    </params>
                    <declaration name="srcData" type="float[]" line="1086"/>
                    <declaration name="xorData" type="float[]" line="1087"/>
                    <scope line="1089"/>
                </method>
                <method name="xorPixel" type="void" line="1095">
                    <params>
                        <param name="pixData" type="Object"/>
                    </params>
                    <declaration name="dstData" type="float[]" line="1096"/>
                    <scope line="1097">
                        <declaration name="v" type="int" line="1098"/>
                    </scope>
                </method>
            </class>
            <class name="DoubleData" line="1104">
                <extends class="XorPixelWriter"/>
                <declaration name="xorData" type="long[]" line="1105"/>
                <method name="DoubleData" type="constructor" line="1107">
                    <params>
                        <param name="srcPixel" type="Object"/>
                        <param name="xorPixel" type="Object"/>
                    </params>
                    <declaration name="srcData" type="double[]" line="1108"/>
                    <declaration name="xorData" type="double[]" line="1109"/>
                    <scope line="1111"/>
                </method>
                <method name="xorPixel" type="void" line="1117">
                    <params>
                        <param name="pixData" type="Object"/>
                    </params>
                    <declaration name="dstData" type="double[]" line="1118"/>
                    <scope line="1119">
                        <declaration name="v" type="long" line="1120"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>