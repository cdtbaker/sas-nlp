<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.loops">
        <import package="java.awt.geom.Path2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.QuadCurve2D"/>
        <import package="sun.awt.SunHints"/>
        <import package="java.util"/>
        <class name="ProcessPath" line="44">
            <comment line="47">
                                
            </comment>
            <comment line="175">
                                
            </comment>
            <comment line="177">
                                
            </comment>
            <comment line="181">
                                
            </comment>
            <comment line="184">
                                
            </comment>
            <comment line="190">
                Boundaries used for clipping large path segments (those are inside
                 [UPPERLOWER]_BND boundaries)                
            </comment>
            <comment line="197">
                Calculation boundaries. They are used for switching to the more slow but
                 allowing larger input values method of calculation of the initial values
                 of the scan converted line segments inside the FillPolygon                
            </comment>
            <comment line="205">
                Following constants are used for providing open boundaries of the
                 intervals                
            </comment>
            <comment line="211">
                Bit mask used to separate whole part from the fraction part of the
                 number                
            </comment>
            <comment line="216">
                Bit mask used to separate fractional part from the whole part of the
                 number                
            </comment>
            <comment line="221">
                Constants for the forward differencing
                                      of the cubic and quad curves                
            </comment>
            <comment line="226">
                Maximum size of the cubic curve (calculated as the size of the bounding
                 box of the control points) which could be rendered without splitting                
            </comment>
            <comment line="231">
                Maximum size of the quad curve (calculated as the size of the bounding
                 box of the control points) which could be rendered without splitting                
            </comment>
            <comment line="236">
                Default power of 2 steps used in the forward differencing. Here DF prefix
                 stands for DeFault. Constants below are used as initial values for the
                 adaptive forward differencing algorithm.                
            </comment>
            <comment line="243">
                Shift of the current point of the curve for preparing to the midpoint
                 rounding                
            </comment>
            <comment line="251">
                                
            </comment>
            <comment line="255">
                Default boundary constants used to check the necessity of the restepping                
            </comment>
            <comment line="264">
                Multipliers for the coefficients of the polynomial form of the cubic and
                 quad curves representation                
            </comment>
            <comment line="281">
                                
            </comment>
            <comment line="301">
                This is java implementation of the macro from ProcessGeneralPath.c.
                 To keep the logic of the java code similar to the native one
                 array and set of indexes are used to point out the data.                
            </comment>
            <comment line="329">
                                
            </comment>
            <comment line="356">
                Following method is used for clipping and clumping filled shapes.
                 An example of this process is shown on the picture below:
                                      ----+          ----+
                                    |    |        |    |
                                    +     |        +     |
                                   |     |        I     |
                                   |     |        I     |
                                  | |     |  ===&gt;  I     |
                                  \ |     |        I     |
                                   \|     |        I     |
                                    +     |        +     |
                                    |\    |        |\    |
                                    | ----+        | ----+
                                 boundary       boundary
                
                 We can only perform clipping in case of right side of the output area
                 because all segments passed out the right boundary don&apos;t influence on the
                 result of scan conversion algorithm (it correctly handles half open
                 contours).
                
                 This is java implementation of the macro from ProcessGeneralPath.c.
                 To keep the logic of the java code similar to the native one
                 array and set of indexes are used to point out the data.                
            </comment>
            <comment line="404">
                                
            </comment>
            <comment line="664">
                Performing drawing of the monotonic in X and Y quadratic curves with
                 sizes less than MAX_QUAD_SIZE by using forward differencing method of
                 calculation. See comments to the DrawMonotonicQuad in the
                 ProcessGeneralPath.c                
            </comment>
            <comment line="774">
                Checking size of the quad curves and split them if necessary.
                 Calling DrawMonotonicQuad for the curves of the appropriate size.
                 Note: coords array could be changed                
            </comment>
            <comment line="854">
                Split quadratic curve into monotonic in X and Y parts. Calling
                 ProcessMonotonicQuad for each monotonic piece of the curve.
                 Note: coords array could be changed                
            </comment>
            <comment line="960">
                Bite the piece of the quadratic curve from start point till the point
                 corresponding to the specified parameter then call ProcessQuad for the
                 bitten part.
                 Note: coords array will be changed                
            </comment>
            <comment line="984">
                Performing drawing of the monotonic in X and Y cubic curves with sizes
                 less than MAX_CUB_SIZE by using forward differencing method of
                 calculation.  See comments to the DrawMonotonicCubic in the
                 ProcessGeneralPath.c                
            </comment>
            <comment line="1132">
                Checking size of the cubic curves and split them if necessary.
                 Calling DrawMonotonicCubic for the curves of the appropriate size.
                 Note: coords array could be changed                
            </comment>
            <comment line="1220">
                Split cubic curve into monotonic in X and Y parts. Calling
                 ProcessMonotonicCubic for each monotonic piece of the curve.
                
                 Note: coords array could be changed                
            </comment>
            <comment line="1323">
                Bite the piece of the cubic curve from start point till the point
                 corresponding to the specified parameter then call ProcessCubic for the
                 bitten part.
                 Note: coords array will be changed                
            </comment>
            <comment line="1355">
                Note:
                 For more easy reading of the code below each java version of the macros
                 from the ProcessPath.c preceded by the commented origin call
                 containing verbose names of the parameters                
            </comment>
            <comment line="1732">
                Size of the default buffer in the FillData structure. This buffer is
                 replaced with heap allocated in case of large paths.                
            </comment>
            <comment line="1737">
                Following class accumulates points of the non-continuous flattened
                 general path during iteration through the origin path&apos;s segments . The
                 end of the each subpath is marked as lastPoint flag set at the last
                 point                
            </comment>
            <class name="DrawHandler" line="48">
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <declaration name="xMin" type="int" line="49"/>
                <declaration name="yMin" type="int" line="50"/>
                <declaration name="xMax" type="int" line="51"/>
                <declaration name="yMax" type="int" line="52"/>
                <declaration name="xMinf" type="float" line="53"/>
                <declaration name="yMinf" type="float" line="54"/>
                <declaration name="xMaxf" type="float" line="55"/>
                <declaration name="yMaxf" type="float" line="56"/>
                <declaration name="strokeControl" type="int" line="58"/>
                <method name="DrawHandler" type="constructor" line="62">
                    <params>
                        <param name="xMin" type="int"/>
                        <param name="yMin" type="int"/>
                        <param name="xMax" type="int"/>
                        <param name="yMax" type="int"/>
                        <param name="strokeControl" type="int"/>
                    </params>
                </method>
                <method name="setBounds" type="void" line="67">
                    <params>
                        <param name="xMin" type="int"/>
                        <param name="yMin" type="int"/>
                        <param name="xMax" type="int"/>
                        <param name="yMax" type="int"/>
                    </params>
                    <comment line="73">
                        Setting up fractional clipping box
                        
                         We are using following float -&gt; int mapping:
                        
                              xi = floor(xf + 0.5)
                        
                         So, fractional values that hit the [xmin, xmax) integer interval
                         will be situated inside the [xmin-0.5, xmax - 0.5) fractional
                         interval. We are using EPSF constant to provide that upper
                         boundary is not included.                        
                    </comment>
                </method>
                <method name="setBounds" type="void" line="92">
                    <params>
                        <param name="xMin" type="int"/>
                        <param name="yMin" type="int"/>
                        <param name="xMax" type="int"/>
                        <param name="yMax" type="int"/>
                        <param name="strokeControl" type="int"/>
                    </params>
                </method>
                <method name="adjustBounds" type="void" line="98">
                    <params>
                        <param name="bxMin" type="int"/>
                        <param name="byMin" type="int"/>
                        <param name="bxMax" type="int"/>
                        <param name="byMax" type="int"/>
                    </params>
                </method>
                <method name="DrawHandler" type="constructor" line="106">
                    <params>
                        <param name="xMin" type="int"/>
                        <param name="yMin" type="int"/>
                        <param name="xMax" type="int"/>
                        <param name="yMax" type="int"/>
                    </params>
                </method>
                <method name="drawLine" type="void" line="110"/>
                <method name="drawPixel" type="void" line="112"/>
                <method name="drawScanline" type="void" line="114"/>
            </class>
            <interface name="EndSubPathHandler">
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <method name="processEndSubPath" type="void" line="118"/>
            </interface>
            <declaration name="PH_MODE_DRAW_CLIP" type="int" line="121"/>
            <declaration name="PH_MODE_FILL_CLIP" type="int" line="122"/>
            <class name="ProcessHandler" line="124">
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <implements interface="EndSubPathHandler"/>
                <declaration name="dhnd" type="DrawHandler" line="125"/>
                <declaration name="clipMode" type="int" line="126"/>
                <method name="ProcessHandler" type="constructor" line="129">
                    <params>
                        <param name="dhnd" type="DrawHandler"/>
                        <param name="clipMode" type="int"/>
                    </params>
                </method>
                <method name="processFixedLine" type="void" line="134"/>
            </class>
            <declaration name="noopEndSubPathHandler" type="EndSubPathHandler" line="140"/>
            <anonymous_class line="141">
                <method name="processEndSubPath" type="void" line="142"/>
            </anonymous_class>
            <method name="fillPath" type="boolean" line="147">
                <params>
                    <param name="dhnd" type="DrawHandler"/>
                    <param name="p2df" type="Path2D.Float"/>
                    <param name="transX" type="int"/>
                    <param name="transY" type="int"/>
                </params>
                <declaration name="fhnd" type="FillProcessHandler" line="148"/>
                <scope line="149"/>
            </method>
            <method name="drawPath" type="boolean" line="160">
                <params>
                    <param name="dhnd" type="DrawHandler"/>
                    <param name="endSubPath" type="EndSubPathHandler"/>
                    <param name="p2df" type="Path2D.Float"/>
                    <param name="transX" type="int"/>
                    <param name="transY" type="int"/>
                </params>
            </method>
            <method name="drawPath" type="boolean" line="168">
                <params>
                    <param name="dhnd" type="DrawHandler"/>
                    <param name="p2df" type="Path2D.Float"/>
                    <param name="transX" type="int"/>
                    <param name="transY" type="int"/>
                </params>
            </method>
            <declaration name="UPPER_BND" type="float" line="177"/>
            <declaration name="LOWER_BND" type="float" line="178"/>
            <declaration name="FWD_PREC" type="int" line="181"/>
            <declaration name="MDP_PREC" type="int" line="184"/>
            <declaration name="MDP_MULT" type="int" line="186"/>
            <declaration name="MDP_HALF_MULT" type="int" line="187"/>
            <declaration name="UPPER_OUT_BND" type="int" line="192"/>
            <declaration name="LOWER_OUT_BND" type="int" line="193"/>
            <declaration name="CALC_UBND" type="float" line="200"/>
            <declaration name="CALC_LBND" type="float" line="201"/>
            <declaration name="EPSFX" type="int" line="207"/>
            <declaration name="EPSF" type="float" line="208"/>
            <declaration name="MDP_W_MASK" type="int" line="213"/>
            <declaration name="MDP_F_MASK" type="int" line="218"/>
            <declaration name="MAX_CUB_SIZE" type="int" line="228"/>
            <declaration name="MAX_QUAD_SIZE" type="int" line="233"/>
            <declaration name="DF_CUB_STEPS" type="int" line="239"/>
            <declaration name="DF_QUAD_STEPS" type="int" line="240"/>
            <declaration name="DF_CUB_SHIFT" type="int" line="245"/>
            <declaration name="DF_QUAD_SHIFT" type="int" line="247"/>
            <declaration name="DF_CUB_COUNT" type="int" line="251"/>
            <declaration name="DF_QUAD_COUNT" type="int" line="252"/>
            <declaration name="DF_CUB_DEC_BND" type="int" line="256"/>
            <declaration name="DF_CUB_INC_BND" type="int" line="257"/>
            <declaration name="DF_QUAD_DEC_BND" type="int" line="258"/>
            <declaration name="DF_QUAD_INC_BND" type="int" line="260"/>
            <declaration name="CUB_A_SHIFT" type="int" line="266"/>
            <declaration name="CUB_B_SHIFT" type="int" line="267"/>
            <declaration name="CUB_C_SHIFT" type="int" line="268"/>
            <declaration name="CUB_A_MDP_MULT" type="int" line="270"/>
            <declaration name="CUB_B_MDP_MULT" type="int" line="271"/>
            <declaration name="CUB_C_MDP_MULT" type="int" line="272"/>
            <declaration name="QUAD_A_SHIFT" type="int" line="274"/>
            <declaration name="QUAD_B_SHIFT" type="int" line="275"/>
            <declaration name="QUAD_A_MDP_MULT" type="int" line="277"/>
            <declaration name="QUAD_B_MDP_MULT" type="int" line="278"/>
            <method name="CLIP" type="float" line="282">
                <params>
                    <param name="a1" type="float"/>
                    <param name="b1" type="float"/>
                    <param name="a2" type="float"/>
                    <param name="b2" type="float"/>
                    <param name="t" type="double"/>
                </params>
            </method>
            <method name="CLIP" type="int" line="286">
                <params>
                    <param name="a1" type="int"/>
                    <param name="b1" type="int"/>
                    <param name="a2" type="int"/>
                    <param name="b2" type="int"/>
                    <param name="t" type="double"/>
                </params>
            </method>
            <declaration name="CRES_MIN_CLIPPED" type="int" line="291"/>
            <declaration name="CRES_MAX_CLIPPED" type="int" line="292"/>
            <declaration name="CRES_NOT_CLIPPED" type="int" line="293"/>
            <declaration name="CRES_INVISIBLE" type="int" line="294"/>
            <method name="IS_CLIPPED" type="boolean" line="296">
                <params>
                    <param name="res" type="int"/>
                </params>
            </method>
            <method name="TESTANDCLIP" type="int" line="305">
                <params>
                    <param name="LINE_MIN" type="float"/>
                    <param name="LINE_MAX" type="float"/>
                    <param name="c" type="float[]"/>
                    <param name="a1" type="int"/>
                    <param name="b1" type="int"/>
                    <param name="a2" type="int"/>
                    <param name="b2" type="int"/>
                </params>
                <declaration name="t" type="double" line="306"/>
                <declaration name="res" type="int" line="307"/>
                <scope line="308">
                    <scope line="309">
                        <scope line="310"/>
                    </scope>
                    <scope line="315">
                        <scope line="316"/>
                    </scope>
                </scope>
            </method>
            <method name="TESTANDCLIP" type="int" line="330">
                <params>
                    <param name="LINE_MIN" type="int"/>
                    <param name="LINE_MAX" type="int"/>
                    <param name="c" type="int[]"/>
                    <param name="a1" type="int"/>
                    <param name="b1" type="int"/>
                    <param name="a2" type="int"/>
                    <param name="b2" type="int"/>
                </params>
                <declaration name="t" type="double" line="331"/>
                <declaration name="res" type="int" line="332"/>
                <scope line="333">
                    <scope line="334">
                        <scope line="335"/>
                    </scope>
                    <scope line="340">
                        <scope line="341"/>
                    </scope>
                </scope>
            </method>
            <method name="CLIPCLAMP" type="int" line="382">
                <params>
                    <param name="LINE_MIN" type="float"/>
                    <param name="LINE_MAX" type="float"/>
                    <param name="c" type="float[]"/>
                    <param name="a1" type="int"/>
                    <param name="b1" type="int"/>
                    <param name="a2" type="int"/>
                    <param name="b2" type="int"/>
                    <param name="a3" type="int"/>
                    <param name="b3" type="int"/>
                </params>
                <declaration name="res" type="int" line="385"/>
                <scope line="386"/>
                <scope line="388"/>
                <scope line="391">
                    <scope line="392"/>
                    <scope line="394"/>
                </scope>
            </method>
            <method name="CLIPCLAMP" type="int" line="406">
                <params>
                    <param name="LINE_MIN" type="int"/>
                    <param name="LINE_MAX" type="int"/>
                    <param name="c" type="int[]"/>
                    <param name="a1" type="int"/>
                    <param name="b1" type="int"/>
                    <param name="a2" type="int"/>
                    <param name="b2" type="int"/>
                    <param name="a3" type="int"/>
                    <param name="b3" type="int"/>
                </params>
                <declaration name="res" type="int" line="409"/>
                <scope line="410"/>
                <scope line="412"/>
                <scope line="415">
                    <scope line="416"/>
                    <scope line="418"/>
                </scope>
            </method>
            <class name="DrawProcessHandler" line="427">
                <extends class="ProcessHandler"/>
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <declaration name="processESP" type="EndSubPathHandler" line="429"/>
                <method name="DrawProcessHandler" type="constructor" line="432">
                    <params>
                        <param name="dhnd" type="DrawHandler"/>
                        <param name="processESP" type="EndSubPathHandler"/>
                    </params>
                </method>
                <method name="processEndSubPath" type="void" line="438"/>
                <method name="PROCESS_LINE" type="void" line="443">
                    <params>
                        <param name="fX0" type="int"/>
                        <param name="fY0" type="int"/>
                        <param name="fX1" type="int"/>
                        <param name="fY1" type="int"/>
                        <param name="checkBounds" type="boolean"/>
                        <param name="pixelInfo" type="int[]"/>
                    </params>
                    <comment line="449">
                                                
                    </comment>
                    <comment line="479">
                                                
                    </comment>
                    <comment line="498">
                        Switch on last pixel of the line if it was already
                         drawn during rendering of the previous segments                        
                    </comment>
                    <declaration name="X0" type="int" line="444"/>
                    <declaration name="Y0" type="int" line="445"/>
                    <declaration name="X1" type="int" line="446"/>
                    <declaration name="Y1" type="int" line="447"/>
                    <scope line="450">
                        <scope line="457"/>
                        <scope line="465"/>
                    </scope>
                    <scope line="478">
                        <scope line="483"/>
                    </scope>
                    <scope line="490"/>
                    <scope line="503">
                        <scope line="508"/>
                    </scope>
                </method>
                <method name="PROCESS_POINT" type="void" line="519">
                    <params>
                        <param name="fX" type="int"/>
                        <param name="fY" type="int"/>
                        <param name="checkBounds" type="boolean"/>
                        <param name="pixelInfo" type="int[]"/>
                    </params>
                    <comment line="527">
                        (_X,_Y) should be inside boundaries
                        
                          assert(dhnd.yMin &lt;= _Y &amp;&amp;
                                 dhnd.yMax &gt;  _Y &amp;&amp;
                                 dhnd.xMin &lt;= _X &amp;&amp;
                                 dhnd.xMax &gt;  _X);                        
                    </comment>
                    <declaration name="_X" type="int" line="520"/>
                    <declaration name="_Y" type="int" line="521"/>
                    <scope line="536"/>
                    <scope line="544"/>
                </method>
                <method name="processFixedLine" type="void" line="577">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                        <param name="pixelInfo" type="int[]"/>
                        <param name="checkBounds" type="boolean"/>
                        <param name="endSubPath" type="boolean"/>
                    </params>
                    <comment line="579">
                                                
                    </comment>
                    <comment line="583">
                        Checking for the segments with integer coordinates having
                         the same start and end points                        
                    </comment>
                    <comment line="599">
                                                
                    </comment>
                    <comment line="603">
                                                
                    </comment>
                    <comment line="609">
                                                
                    </comment>
                    <comment line="611">
                        Adding MDP_HALF_MULT to the [xy]1 if f[xy]1 == [xy]1
                         will not affect the result                        
                    </comment>
                    <comment line="617">
                                                
                    </comment>
                    <comment line="621">
                                                
                    </comment>
                    <comment line="627">
                                                
                    </comment>
                    <comment line="634">
                                                
                    </comment>
                    <comment line="636">
                        Adding MDP_HALF_MULT to the [xy]2 if f[xy]2 == [xy]2
                         will not affect the result                        
                    </comment>
                    <comment line="642">
                                                
                    </comment>
                    <comment line="646">
                                                
                    </comment>
                    <comment line="652">
                                                
                    </comment>
                    <declaration name="c" type="int" line="580"/>
                    <declaration name="rx1" type="int" line="581"/>
                    <scope line="582">
                        <scope line="586"/>
                    </scope>
                    <scope line="593"/>
                    <scope line="598">
                        <declaration name="dx" type="int" line="600"/>
                        <declaration name="dy" type="int" line="601"/>
                        <declaration name="fx1" type="int" line="604"/>
                        <declaration name="fy1" type="int" line="605"/>
                        <declaration name="fx2" type="int" line="606"/>
                        <declaration name="fy2" type="int" line="607"/>
                        <scope line="610"/>
                        <scope line="616">
                            <declaration name="bx1" type="int" line="618"/>
                            <declaration name="by1" type="int" line="619"/>
                            <declaration name="cross" type="int" line="622"/>
                            <scope line="623"/>
                            <scope line="626"/>
                        </scope>
                        <scope line="635"/>
                        <scope line="641">
                            <declaration name="bx2" type="int" line="643"/>
                            <declaration name="by2" type="int" line="644"/>
                            <declaration name="cross" type="int" line="647"/>
                            <scope line="648"/>
                            <scope line="651"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="DrawMonotonicQuad" type="void" line="671">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="checkBounds" type="boolean"/>
                    <param name="pixelInfo" type="int[]"/>
                </params>
                <comment line="679">
                                        
                </comment>
                <comment line="683">
                                        
                </comment>
                <comment line="686">
                                        
                </comment>
                <comment line="716">
                    Perform decreasing step in 2 times if slope of the first forward
                     difference changes too quickly (more than a pixel per step in X or Y
                     direction).  We can perform adjusting of the step size before the
                     rendering loop because the curvature of the quad curve remains the
                     same along all the curve                    
                </comment>
                <comment line="745">
                    Checking that we are not running out of the endpoint and bounding
                     violating coordinate.  The check is pretty simple because the
                     curve passed to the DrawCubic already splitted into the
                     monotonic in X and Y pieces                    
                </comment>
                <comment line="751">
                                        
                </comment>
                <comment line="756">
                                        
                </comment>
                <comment line="764">
                    We are performing one step less than necessary and use actual
                     (xe,ye) endpoint of the curve instead of calculated. This prevent us
                     from running above the curve endpoint due to the accumulated errors
                     during the iterations.                    
                </comment>
                <declaration name="x0" type="int" line="673"/>
                <declaration name="y0" type="int" line="674"/>
                <declaration name="xe" type="int" line="676"/>
                <declaration name="ye" type="int" line="677"/>
                <declaration name="px" type="int" line="680"/>
                <declaration name="py" type="int" line="681"/>
                <declaration name="count" type="int" line="684"/>
                <declaration name="shift" type="int" line="687"/>
                <declaration name="ax" type="int" line="689"/>
                <declaration name="ay" type="int" line="691"/>
                <declaration name="bx" type="int" line="694"/>
                <declaration name="by" type="int" line="695"/>
                <declaration name="ddpx" type="int" line="697"/>
                <declaration name="ddpy" type="int" line="698"/>
                <declaration name="dpx" type="int" line="700"/>
                <declaration name="dpy" type="int" line="701"/>
                <declaration name="x1" type="int" line="703"/>
                <declaration name="x2" type="int" line="705"/>
                <declaration name="y2" type="int" line="706"/>
                <declaration name="maxDD" type="int" line="708"/>
                <declaration name="dx" type="int" line="710"/>
                <declaration name="dy" type="int" line="711"/>
                <declaration name="x0w" type="int" line="713"/>
                <declaration name="y0w" type="int" line="714"/>
                <scope line="722"/>
                <scope line="732">
                    <scope line="752"/>
                    <scope line="757"/>
                </scope>
            </method>
            <method name="ProcessMonotonicQuad" type="void" line="780">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="pixelInfo" type="int[]"/>
                </params>
                <comment line="797">
                    In case of drawing we could just skip curves which are
                     completely out of bounds                    
                </comment>
                <comment line="806">
                    In case of filling we could skip curves which are above,
                     below and behind the right boundary of the visible area                    
                </comment>
                <comment line="816">
                    We could clamp x coordinates to the corresponding boundary
                     if the curve is completely behind the left one                    
                </comment>
                <comment line="840">
                    Set checkBounds parameter if curve intersects
                     boundary of the visible area. We know that the
                     curve is visible, so the check is pretty
                     simple                    
                </comment>
                <declaration name="coords1" type="float[]" line="782"/>
                <declaration name="tx" type="float" line="783"/>
                <declaration name="xMin" type="float" line="784"/>
                <scope line="788"/>
                <scope line="795">
                    <scope line="801"/>
                </scope>
                <scope line="804">
                    <scope line="812"/>
                    <scope line="820"/>
                </scope>
                <scope line="825"/>
                <scope line="838"/>
            </method>
            <method name="ProcessQuad" type="void" line="859">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="pixelInfo" type="int[]"/>
                </params>
                <comment line="860">
                    Temporary array for holding parameters corresponding to the extreme
                     in X and Y points                    
                </comment>
                <comment line="867">
                    Simple check for monotonicity in X before searching for the extreme
                     points of the X(t) function. We first check if the curve is
                     monotonic in X by seeing if all of the X coordinates are strongly
                     ordered.                    
                </comment>
                <comment line="875">
                    Searching for extreme points of the X(t) function  by solving
                     dX(t)
                     ----  = 0 equation
                      dt                    
                </comment>
                <comment line="882">
                    Calculating root of the following equation
                     axt + bx = 0                    
                </comment>
                <comment line="894">
                    Simple check for monotonicity in Y before searching for the extreme
                     points of the Y(t) function. We first check if the curve is
                     monotonic in Y by seeing if all of the Y coordinates are strongly
                     ordered.                    
                </comment>
                <comment line="902">
                    Searching for extreme points of the Y(t) function by solving
                     dY(t)
                     ----- = 0 equation
                      dt                    
                </comment>
                <comment line="910">
                    Calculating root of the following equation
                     ayt + by = 0                    
                </comment>
                <comment line="918">
                    Inserting parameter only if it differs from
                     already stored                    
                </comment>
                <comment line="934">
                                        
                </comment>
                <comment line="948">
                    Scale parameter to match with
                     rest of the curve                    
                </comment>
                <declaration name="params" type="double" line="863"/>
                <declaration name="cnt" type="int" line="864"/>
                <declaration name="param" type="double" line="865"/>
                <scope line="874">
                    <declaration name="ax" type="double" line="880"/>
                    <scope line="881">
                        <declaration name="bx" type="double" line="885"/>
                        <scope line="888"/>
                    </scope>
                </scope>
                <scope line="901">
                    <declaration name="ay" type="double" line="907"/>
                    <scope line="909">
                        <declaration name="by" type="double" line="913"/>
                        <scope line="916">
                            <scope line="917">
                                <scope line="921"/>
                                <scope line="924"/>
                            </scope>
                            <scope line="927"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="946"/>
            </method>
            <method name="ProcessFirstMonotonicPartOfQuad" type="void" line="968">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="pixelInfo" type="int[]"/>
                    <param name="t" type="float"/>
                </params>
                <declaration name="coords1" type="float[]" line="969"/>
            </method>
            <method name="DrawMonotonicCubic" type="void" line="991">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="checkBounds" type="boolean"/>
                    <param name="pixelInfo" type="int[]"/>
                </params>
                <comment line="998">
                                        
                </comment>
                <comment line="1002">
                    Setting default boundary values for checking first and second forward
                     difference for the necessity of the restepping. See comments to the
                     boundary values in ProcessQuad for more info.                    
                </comment>
                <comment line="1009">
                                        
                </comment>
                <comment line="1012">
                                        
                </comment>
                <comment line="1042">
                                        
                </comment>
                <comment line="1050">
                                        
                </comment>
                <comment line="1065">
                    Perform increasing step in 2 times if necessary.
                     Note: we could do it only in even steps                    
                </comment>
                <comment line="1086">
                    Performing one step less than necessary and use actual (xe,ye)
                     curve&apos;s endpoint instead of calculated. This prevent us from
                     running above the curve endpoint due to the accumulated errors
                     during the iterations.                    
                </comment>
                <comment line="1106">
                    Checking that we are not running out of the endpoint and
                     bounding violating coordinate.  The check is pretty simple
                     because the curve passed to the DrawCubic already splitted
                     into the monotonic in X and Y pieces                    
                </comment>
                <comment line="1112">
                                        
                </comment>
                <comment line="1117">
                                        
                </comment>
                <declaration name="x0" type="int" line="992"/>
                <declaration name="y0" type="int" line="993"/>
                <declaration name="xe" type="int" line="995"/>
                <declaration name="ye" type="int" line="996"/>
                <declaration name="px" type="int" line="999"/>
                <declaration name="py" type="int" line="1000"/>
                <declaration name="incStepBnd" type="int" line="1006"/>
                <declaration name="decStepBnd" type="int" line="1007"/>
                <declaration name="count" type="int" line="1010"/>
                <declaration name="shift" type="int" line="1013"/>
                <declaration name="ax" type="int" line="1015"/>
                <declaration name="ay" type="int" line="1017"/>
                <declaration name="bx" type="int" line="1020"/>
                <declaration name="by" type="int" line="1022"/>
                <declaration name="cx" type="int" line="1025"/>
                <declaration name="cy" type="int" line="1026"/>
                <declaration name="dddpx" type="int" line="1028"/>
                <declaration name="dddpy" type="int" line="1029"/>
                <declaration name="ddpx" type="int" line="1031"/>
                <declaration name="ddpy" type="int" line="1032"/>
                <declaration name="dpx" type="int" line="1034"/>
                <declaration name="dpy" type="int" line="1035"/>
                <declaration name="x1" type="int" line="1037"/>
                <declaration name="x2" type="int" line="1039"/>
                <declaration name="y2" type="int" line="1040"/>
                <declaration name="x0w" type="int" line="1043"/>
                <declaration name="y0w" type="int" line="1044"/>
                <declaration name="dx" type="int" line="1046"/>
                <declaration name="dy" type="int" line="1047"/>
                <scope line="1049">
                    <scope line="1052"/>
                    <scope line="1071"/>
                    <scope line="1091">
                        <scope line="1113"/>
                        <scope line="1118"/>
                    </scope>
                    <scope line="1124"/>
                </scope>
            </method>
            <method name="ProcessMonotonicCubic" type="void" line="1138">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="pixelInfo" type="int[]"/>
                </params>
                <comment line="1156">
                    In case of drawing we could just skip curves which are
                     completely out of bounds                    
                </comment>
                <comment line="1165">
                    In case of filling we could skip curves which are above,
                     below and behind the right boundary of the visible area                    
                </comment>
                <comment line="1175">
                    We could clamp x coordinates to the corresponding boundary
                     if the curve is completely behind the left one                    
                </comment>
                <comment line="1206">
                    Set checkBounds parameter if curve intersects
                     boundary of the visible area. We know that
                     the curve is visible, so the check is pretty
                     simple                    
                </comment>
                <declaration name="coords1" type="float[]" line="1140"/>
                <declaration name="tx" type="float" line="1141"/>
                <declaration name="xMin" type="float" line="1142"/>
                <declaration name="yMin" type="float" line="1143"/>
                <scope line="1148"/>
                <scope line="1155">
                    <scope line="1160"/>
                </scope>
                <scope line="1163">
                    <scope line="1171"/>
                    <scope line="1179"/>
                </scope>
                <scope line="1185"/>
                <scope line="1204"/>
            </method>
            <method name="ProcessCubic" type="void" line="1227">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="pixelInfo" type="int[]"/>
                </params>
                <comment line="1228">
                    Temporary array for holding parameters corresponding to the extreme
                     in X and Y points                    
                </comment>
                <comment line="1236">
                    Simple check for monotonicity in X before searching for the extreme
                     points of the X(t) function. We first check if the curve is
                     monotonic in X by seeing if all of the X coordinates are strongly
                     ordered.                    
                </comment>
                <comment line="1246">
                    Searching for extreme points of the X(t) function  by solving
                     dX(t)
                     ----  = 0 equation
                      dt                    
                </comment>
                <comment line="1257">
                    Following code also correctly works in degenerate case of
                     the quadratic equation (nr = -1) because we do not need
                     splitting in this case.                    
                </comment>
                <comment line="1268">
                    Simple check for monotonicity in Y before searching for the extreme
                     points of the Y(t) function. We first check if the curve is
                     monotonic in Y by seeing if all of the Y coordinates are strongly
                     ordered.                    
                </comment>
                <comment line="1278">
                    Searching for extreme points of the Y(t) function by solving
                     dY(t)
                     ----- = 0 equation
                      dt                    
                </comment>
                <comment line="1289">
                    Following code also correctly works in degenerate case of
                     the quadratic equation (nr = -1) because we do not need
                     splitting in this case.                    
                </comment>
                <comment line="1301">
                    Sorting parameter values corresponding to the extreme points
                     of the curve                    
                </comment>
                <comment line="1306">
                                        
                </comment>
                <comment line="1313">
                                        
                </comment>
                <declaration name="params" type="double" line="1231"/>
                <declaration name="eqn" type="double" line="1232"/>
                <declaration name="res" type="double" line="1233"/>
                <declaration name="cnt" type="int" line="1234"/>
                <scope line="1245">
                    <declaration name="nr" type="int" line="1255"/>
                    <scope line="1261">
                        <scope line="1262"/>
                    </scope>
                </scope>
                <scope line="1277">
                    <declaration name="nr" type="int" line="1287"/>
                    <scope line="1293">
                        <scope line="1294"/>
                    </scope>
                </scope>
                <scope line="1300">
                    <scope line="1309">
                        <declaration name="param" type="double" line="1310"/>
                        <scope line="1311"/>
                    </scope>
                </scope>
            </method>
            <method name="ProcessFirstMonotonicPartOfCubic" type="void" line="1332">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="coords" type="float[]"/>
                    <param name="pixelInfo" type="int[]"/>
                    <param name="t" type="float"/>
                </params>
                <declaration name="coords1" type="float[]" line="1333"/>
                <declaration name="tx" type="float" line="1334"/>
            </method>
            <method name="ProcessLine" type="void" line="1360">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="pixelInfo" type="int[]"/>
                </params>
                <comment line="1374">
                                        
                </comment>
                <comment line="1375">
                    TESTANDCLIP(yMin, yMax, y1, x1, y2, x2, res);                    
                </comment>
                <comment line="1376">
                                        
                </comment>
                <comment line="1380">
                                        
                </comment>
                <comment line="1381">
                    TESTANDCLIP(yMin, yMax, y2, x2, y1, x1, res);                    
                </comment>
                <comment line="1382">
                                        
                </comment>
                <comment line="1389">
                                        
                </comment>
                <comment line="1390">
                    TESTANDCLIP(xMin, xMax, x1, y1, x2, y2, res);                    
                </comment>
                <comment line="1391">
                                        
                </comment>
                <comment line="1395">
                                        
                </comment>
                <comment line="1396">
                    TESTANDCLIP(xMin, xMax, x2, y2, x1, y1, res);                    
                </comment>
                <comment line="1397">
                                        
                </comment>
                <comment line="1408">
                    clipped,  enable boundary checking in
                    case of clipping to avoid
                    entering out of bounds which
                    could happens during rounding                    
                </comment>
                <comment line="1413">
                    lastClipped  Notify pProcessFixedLine
                    that
                    this is the end of the
                    subpath (because of exiting
                    out of boundaries)                    
                </comment>
                <comment line="1421">
                    Clamping starting from first vertex of the the processed
                     segment
                    
                     CLIPCLAMP(xMin, xMax, x1, y1, x2, y2, x3, y3, res);                    
                </comment>
                <comment line="1430">
                                        
                </comment>
                <comment line="1441">
                    Clamping starting from last vertex of the the processed
                     segment
                    
                     CLIPCLAMP(xMin, xMax, x2, y2, x1, y1, x3, y3, res);                    
                </comment>
                <comment line="1448">
                                        
                </comment>
                <comment line="1456">
                                        
                </comment>
                <declaration name="xMin" type="float" line="1361"/>
                <declaration name="X1" type="int" line="1362"/>
                <declaration name="clipped" type="boolean" line="1363"/>
                <declaration name="x3" type="float" line="1364"/>
                <declaration name="c" type="float" line="1365"/>
                <declaration name="lastClipped" type="boolean" line="1367"/>
                <scope line="1388"/>
                <scope line="1420">
                    <scope line="1431"/>
                    <scope line="1437"/>
                    <scope line="1457"/>
                </scope>
            </method>
            <method name="doProcessPath" type="boolean" line="1468">
                <params>
                    <param name="hnd" type="ProcessHandler"/>
                    <param name="p2df" type="Path2D.Float"/>
                    <param name="transXf" type="float"/>
                    <param name="transYf" type="float"/>
                </params>
                <comment line="1479">
                    Adjusting boundaries to the capabilities of the
                     ProcessPath code                    
                </comment>
                <comment line="1485">
                    Adding support of the KEY_STROKE_CONTROL rendering hint.
                     Now we are supporting two modes: &quot;pixels at centers&quot; and
                     &quot;pixels at corners&quot;.
                     First one is disabled by default but could be enabled by setting
                     VALUE_STROKE_PURE to the rendering hint. It means that pixel at the
                     screen (x,y) has (x + 0.5, y + 0.5) float coordinates.
                    
                     Second one is enabled by default and means straightforward mapping
                     (x,y) --&gt; (x,y)                    
                </comment>
                <comment line="1507">
                                        
                </comment>
                <comment line="1524">
                    Checking SEG_MOVETO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range.  This check also handles
                     NaN and Infinity values. Skipping next path segment in
                     case of invalid data.                    
                </comment>
                <comment line="1548">
                    Checking SEG_LINETO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range.  This check also handles
                     NaN and Infinity values. Ignoring current path segment
                     in case  of invalid data. If segment is skipped its
                     endpoint (if valid) is used to begin new subpath.                    
                </comment>
                <comment line="1579">
                    Checking SEG_QUADTO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range.  This check also handles
                     NaN and Infinity values. Ignoring current path segment
                     in case  of invalid endpoints&apos;s data.  Equivalent to
                     the SEG_LINETO if endpoint coordinates are valid but
                     there are invalid data among other coordinates                    
                </comment>
                <comment line="1622">
                    Checking SEG_CUBICTO coordinates if they are out of the
                     [LOWER_BND, UPPER_BND] range.  This check also handles
                     NaN and Infinity values. Ignoring current path segment
                     in case  of invalid endpoints&apos;s data.  Equivalent to
                     the SEG_LINETO if endpoint coordinates are valid but
                     there are invalid data among other coordinates                    
                </comment>
                <comment line="1671">
                    Storing last path&apos;s point for using in following
                     segments without initial moveTo                    
                </comment>
                <comment line="1684">
                                        
                </comment>
                <declaration name="coords" type="float" line="1469"/>
                <declaration name="tCoords" type="float" line="1470"/>
                <declaration name="closeCoord" type="float" line="1471"/>
                <declaration name="firstCoord" type="float" line="1472"/>
                <declaration name="pixelInfo" type="int" line="1473"/>
                <declaration name="subpathStarted" type="boolean" line="1474"/>
                <declaration name="skip" type="boolean" line="1475"/>
                <declaration name="lastX" type="float" line="1476"/>
                <scope line="1495"/>
                <declaration name="pi" type="PathIterator" line="1502"/>
                <scope line="1504">
                    <scope line="1508">
                        <scope line="1509">
                            <scope line="1512"/>
                        </scope>
                    </scope>
                    <scope line="1534"/>
                    <scope line="1539"/>
                    <scope line="1559">
                        <scope line="1560"/>
                        <scope line="1565"/>
                    </scope>
                    <scope line="1591">
                        <scope line="1592"/>
                        <scope line="1597">
                            <scope line="1602"/>
                            <scope line="1604"/>
                        </scope>
                    </scope>
                    <scope line="1634">
                        <scope line="1635"/>
                        <scope line="1640">
                            <scope line="1649"/>
                            <scope line="1651"/>
                        </scope>
                    </scope>
                    <scope line="1662">
                        <scope line="1666"/>
                    </scope>
                </scope>
                <scope line="1685">
                    <scope line="1686">
                        <scope line="1689"/>
                    </scope>
                </scope>
            </method>
            <class name="Point" line="1700">
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <declaration name="x" type="int" line="1701"/>
                <declaration name="y" type="int" line="1702"/>
                <declaration name="lastPoint" type="boolean" line="1703"/>
                <declaration name="prev" type="Point" line="1704"/>
                <declaration name="next" type="Point" line="1705"/>
                <declaration name="nextByY" type="Point" line="1706"/>
                <declaration name="edge" type="Edge" line="1707"/>
                <method name="Point" type="constructor" line="1708">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="lastPoint" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="Edge" line="1715">
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <declaration name="x" type="int" line="1716"/>
                <declaration name="dx" type="int" line="1717"/>
                <declaration name="p" type="Point" line="1718"/>
                <declaration name="dir" type="int" line="1719"/>
                <declaration name="prev" type="Edge" line="1720"/>
                <declaration name="next" type="Edge" line="1721"/>
                <method name="Edge" type="constructor" line="1723">
                    <params>
                        <param name="p" type="Point"/>
                        <param name="x" type="int"/>
                        <param name="dx" type="int"/>
                        <param name="dir" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="DF_MAX_POINT" type="int" line="1734"/>
            <class name="FillData" line="1741">
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <declaration name="plgPnts" type="List&lt;Point&gt;" line="1742"/>
                <declaration name="plgYMin" type="int" line="1743"/>
                <declaration name="plgYMax" type="int" line="1744"/>
                <method name="FillData" type="constructor" line="1746"/>
                <method name="addPoint" type="void" line="1750">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="lastPoint" type="boolean"/>
                    </params>
                    <scope line="1751"/>
                    <scope line="1753"/>
                </method>
                <method name="isEmpty" type="boolean" line="1761"/>
                <method name="isEnded" type="boolean" line="1765"/>
                <method name="setEnded" type="boolean" line="1769"/>
            </class>
            <class name="ActiveEdgeList" line="1774">
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <declaration name="head" type="Edge" line="1775"/>
                <method name="isEmpty" type="boolean" line="1777"/>
                <method name="insert" type="void" line="1781">
                    <params>
                        <param name="pnt" type="Point"/>
                        <param name="cy" type="int"/>
                    </params>
                    <comment line="1787">
                                                
                    </comment>
                    <comment line="1798">
                        (Y1 &gt; Y2)                        
                    </comment>
                    <comment line="1804">
                        We need to worry only about dX because dY is in denominator
                         and abs(dy) &lt; MDP_MULT (cy is a first scanline of the scan
                         converted segment and we subtract y coordinate of the
                         nearest segment&apos;s end from it to obtain dy)                        
                    </comment>
                    <declaration name="np" type="Point" line="1782"/>
                    <declaration name="X1" type="int" line="1783"/>
                    <declaration name="X2" type="int" line="1784"/>
                    <declaration name="ne" type="Edge" line="1785"/>
                    <scope line="1786"/>
                    <scope line="1789">
                        <declaration name="dX" type="int" line="1790"/>
                        <declaration name="dY" type="int" line="1791"/>
                        <declaration name="stepx" type="int" line="1792"/>
                        <scope line="1794"/>
                        <scope line="1798"/>
                        <scope line="1809"/>
                        <scope line="1812"/>
                    </scope>
                    <scope line="1822"/>
                </method>
                <method name="delete" type="void" line="1828">
                    <params>
                        <param name="e" type="Edge"/>
                    </params>
                    <declaration name="prevp" type="Edge" line="1829"/>
                    <declaration name="nextp" type="Edge" line="1830"/>
                    <scope line="1831"/>
                    <scope line="1833"/>
                    <scope line="1836"/>
                </method>
                <javadoc line="1841">
                    Bubble sorting in the ascending order of the linked list.  This
                      implementation stops processing the list if there were no changes
                      during the previous pass.
                      We could not use O(N) Radix sort here because in most cases list of
                      edges almost sorted.  So, bubble sort (O(N^2)) is working much
                      better.  Note, in case of array of edges Shell sort is more
                      efficient.                    
                </javadoc>
                <method name="sort" type="void" line="1851">
                    <comment line="1855">
                        r precedes p and s points to the node up to which                        
                    </comment>
                    <comment line="1856">
                        comparisons are to be made                        
                    </comment>
                    <comment line="1886">
                        correction of the back links in the double linked edge list                        
                    </comment>
                    <declaration name="p" type="Edge" line="1852"/>
                    <declaration name="wasSwap" type="boolean" line="1853"/>
                    <scope line="1857">
                        <scope line="1861">
                            <scope line="1862">
                                <scope line="1864"/>
                                <scope line="1870"/>
                            </scope>
                            <scope line="1877"/>
                        </scope>
                    </scope>
                    <scope line="1889"/>
                </method>
            </class>
            <method name="FillPolygon" type="void" line="1898">
                <params>
                    <param name="hnd" type="FillProcessHandler"/>
                    <param name="fillRule" type="int"/>
                </params>
                <comment line="1908">
                    Because of support of the KEY_STROKE_CONTROL hint we are performing
                     shift of the coordinates at the higher level                    
                </comment>
                <comment line="1913">
                                        
                </comment>
                <comment line="1916">
                                        
                </comment>
                <comment line="1928">
                    Creating double linked list (prev, next links) describing path order
                     and hash table with points which fall between scanlines. nextByY
                     link is used for the points which are between same scanlines.
                     Scanlines are passed through the centers of the pixels.                    
                </comment>
                <comment line="1956">
                    pt.y should be inside hashed interval
                     assert(y-MDP_MULT &lt;= pt.y &amp;&amp; pt.y &lt; y);                    
                </comment>
                <comment line="2006">
                    Performing drawing till the right boundary (for correct
                     rendering shapes clipped at the right side)                    
                </comment>
                <comment line="2011">
                    Support of the strokeHint was added into the
                     draw and fill methods of the sun.java2d.pipe.LoopPipe                    
                </comment>
                <declaration name="k" type="int" line="1899"/>
                <declaration name="drawing" type="boolean" line="1900"/>
                <declaration name="active" type="Edge" line="1901"/>
                <declaration name="rightBnd" type="int" line="1902"/>
                <declaration name="fd" type="FillData" line="1903"/>
                <declaration name="yMin" type="int" line="1904"/>
                <declaration name="yMax" type="int" line="1905"/>
                <declaration name="hashSize" type="int" line="1906"/>
                <declaration name="hashOffset" type="int" line="1911"/>
                <declaration name="counter" type="int" line="1914"/>
                <declaration name="counterMask" type="int" line="1917"/>
                <declaration name="pntOffset" type="int" line="1920"/>
                <declaration name="pnts" type="List&lt;Point&gt;" line="1921"/>
                <declaration name="yHash" type="Point[]" line="1926"/>
                <declaration name="curpt" type="Point" line="1933"/>
                <scope line="1935">
                    <declaration name="nextpt" type="Point" line="1937"/>
                    <declaration name="curHashInd" type="int" line="1938"/>
                </scope>
                <declaration name="ept" type="Point" line="1945"/>
                <declaration name="curHashInd" type="int" line="1946"/>
                <declaration name="activeList" type="ActiveEdgeList" line="1950"/>
                <scope line="1954">
                    <scope line="1955">
                        <scope line="1959">
                            <scope line="1960"/>
                            <scope line="1963"/>
                        </scope>
                        <scope line="1968">
                            <scope line="1969"/>
                            <scope line="1972"/>
                        </scope>
                    </scope>
                    <declaration name="xl" type="int" line="1984"/>
                    <declaration name="curEdge" type="Edge" line="1986"/>
                    <scope line="1987">
                        <scope line="1989"/>
                        <scope line="1994">
                            <scope line="1996"/>
                        </scope>
                    </scope>
                    <scope line="2009"/>
                </scope>
            </method>
            <class name="FillProcessHandler" line="2019">
                <extends class="ProcessHandler"/>
                <comment line="552">
                    Drawing line with subpixel endpoints
                    
                     (x1, y1), (x2, y2) -  fixed point coordinates of the endpoints
                                           with MDP_PREC bits for the fractional part
                    
                     pixelInfo          -  structure which keeps drawing info for avoiding
                                           multiple drawing at the same position on the
                                           screen (required for the XOR mode of drawing)
                    
                                              pixelInfo[0]   - state of the drawing
                                                               0 - no pixel drawn between
                                                               moveToclose of the path
                                                               1 - there are drawn pixels
                    
                                              pixelInfo[1,2] - first pixel of the path
                                                               between moveToclose of the
                                                               path
                    
                                              pixelInfo[3,4] - last drawn pixel between
                                                               moveToclose of the path
                    
                     checkBounds        - flag showing necessity of checking the clip                    
                </comment>
                <comment line="2024">
                    Note: For more easy reading of the code below each java version of
                     the macros from the ProcessPath.c preceded by the commented
                     origin call containing verbose names of the parameters                    
                </comment>
                <declaration name="fd" type="FillData" line="2021"/>
                <method name="processFixedLine" type="void" line="2030">
                    <params>
                        <param name="x1" type="int"/>
                        <param name="y1" type="int"/>
                        <param name="x2" type="int"/>
                        <param name="y2" type="int"/>
                        <param name="pixelInfo" type="int[]"/>
                        <param name="checkBounds" type="boolean"/>
                        <param name="endSubPath" type="boolean"/>
                    </params>
                    <comment line="2034">
                        There is no need to round line coordinates to the forward
                         differencing precision anymore. Such a rounding was used for
                         preventing the curve go out the endpoint (this sometimes does
                         not help). The problem was fixed in the forward differencing
                         loops.                        
                    </comment>
                    <comment line="2043">
                        This function is used only for filling shapes, so there is no
                         check for the type of clipping                        
                    </comment>
                    <comment line="2052">
                        TESTANDCLIP(outYMin, outYMax, y1, x1, y2, x2, res);                        
                    </comment>
                    <comment line="2058">
                        TESTANDCLIP(outYMin, outYMax, y2, x2, y1, x1, res);                        
                    </comment>
                    <comment line="2065">
                        Clamping starting from first vertex of the the processed
                         segment
                        
                         CLIPCLAMP(outXMin, outXMax, x1, y1, x2, y2, x3, y3, res);                        
                    </comment>
                    <comment line="2072">
                                                
                    </comment>
                    <comment line="2081">
                        Clamping starting from last vertex of the the processed
                         segment
                        
                         CLIPCLAMP(outXMin, outXMax, x2, y2, x1, y1, x3, y3, res);                        
                    </comment>
                    <comment line="2088">
                                                
                    </comment>
                    <comment line="2094">
                                                
                    </comment>
                    <comment line="2103">
                        Adding first point of the line only in case of empty or just
                         finished path                        
                    </comment>
                    <declaration name="outXMin" type="int" line="2031"/>
                    <declaration name="res" type="int" line="2032"/>
                    <scope line="2040">
                        <declaration name="lastClipped" type="boolean" line="2041"/>
                        <declaration name="c" type="int" line="2046"/>
                        <scope line="2073"/>
                        <scope line="2077"/>
                        <scope line="2095"/>
                    </scope>
                    <scope line="2106"/>
                    <scope line="2112"/>
                </method>
                <method name="FillProcessHandler" type="constructor" line="2117">
                    <params>
                        <param name="dhnd" type="DrawHandler"/>
                    </params>
                </method>
                <method name="processEndSubPath" type="void" line="2122">
                    <scope line="2123"/>
                </method>
            </class>
        </class>
    </source>