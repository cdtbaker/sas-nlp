<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.loops">
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.AlphaComposite"/>
        <import package="java.util.HashMap"/>
        <class name="CompositeType" line="32">
            <comment line="61">
                CONSTANTS USED BY ALL PRIMITIVES TO DESCRIBE THE COMPOSITING
                 ALGORITHMS THEY CAN PERFORM                
            </comment>
            <comment line="110">
                END OF COMPOSITE ALGORITHM TYPE CONSTANTS                
            </comment>
            <comment line="120">
                START OF CompositeeType OBJECTS FOR THE VARIOUS CONSTANTS                
            </comment>
            <comment line="162">
                A special CompositeType for the case where we are filling in
                 SrcOverNoEa mode with an opaque color.  In that case then the
                 best loop for us to use would be a SrcNoEa loop, but what if
                 there is no such loop?  In that case then we would end up
                 backing off to a Src loop (which should still be fine) or an
                 AnyAlpha loop which would be slower than a SrcOver loop in
                 most cases.
                 The fix is to use the following chain which looks for loops
                 in the following order:
                    SrcNoEa, Src, SrcOverNoEa, SrcOver, AnyAlpha                
            </comment>
            <comment line="178">
                END OF CompositeType OBJECTS FOR THE VARIOUS CONSTANTS                
            </comment>
            <javadoc line="32">
                A CompositeType object provides a chained description of a type of
                  algorithm for color compositing.  The object will provide a single
                  String constant descriptor which is one way of describing a particular
                  compositing algorithm as well as a pointer to another CompositeType
                  which describes a more general algorithm for achieving the same result.
                  &lt;p&gt;
                  A description of a more specific algorithm is considered a &quot;subtype&quot;
                  and a description of a more general algorithm is considered a &quot;supertype&quot;.
                  Thus, the deriveSubType method provides a way to create a new CompositeType
                  that is related to but more specific than an existing CompositeType and
                  the getSuperType method provides a way to ask a given CompositeType
                  for a more general algorithm to achieve the same result.
                  &lt;p&gt;
                  Note that you cannot construct a brand new root for a chain since
                  the constructor is private.  Every chain of types must at some point
                  derive from the Any node provided here using the deriveSubType()
                  method.  The presence of this common Any node on every chain
                  ensures that all chains end with the DESC_ANY descriptor so that
                  a suitable General GraphicsPrimitive object can be obtained for
                  the indicated algorithm if all of the more specific searches fail.                
            </javadoc>
            <declaration name="unusedUID" type="int" line="56"/>
            <declaration name="compositeUIDMap" type="HashMap&lt;String,Integer&gt;" line="57"/>
            <declaration name="DESC_ANY" type="String" line="65"/>
            <javadoc line="65">
                algorithm is a general algorithm that uses a CompositeContext
                  to do the rendering.                
            </javadoc>
            <declaration name="DESC_XOR" type="String" line="71"/>
            <javadoc line="71">
                constant used to describe the Graphics.setXORMode() algorithm                
            </javadoc>
            <declaration name="DESC_CLEAR" type="String" line="76"/>
            <javadoc line="76">
                constants used to describe the various AlphaComposite
                  algorithms.                
            </javadoc>
            <declaration name="DESC_SRC" type="String" line="81"/>
            <declaration name="DESC_DST" type="String" line="82"/>
            <declaration name="DESC_SRC_OVER" type="String" line="83"/>
            <declaration name="DESC_DST_OVER" type="String" line="84"/>
            <declaration name="DESC_SRC_IN" type="String" line="85"/>
            <declaration name="DESC_DST_IN" type="String" line="86"/>
            <declaration name="DESC_SRC_OUT" type="String" line="87"/>
            <declaration name="DESC_DST_OUT" type="String" line="88"/>
            <declaration name="DESC_SRC_ATOP" type="String" line="89"/>
            <declaration name="DESC_DST_ATOP" type="String" line="90"/>
            <declaration name="DESC_ALPHA_XOR" type="String" line="91"/>
            <declaration name="DESC_SRC_NO_EA" type="String" line="93"/>
            <javadoc line="93">
                constants used to describe the two common cases of
                  AlphaComposite algorithms that are simpler if there
                  is not extraAlpha.                
            </javadoc>
            <declaration name="DESC_SRC_OVER_NO_EA" type="String" line="100"/>
            <declaration name="DESC_ANY_ALPHA" type="String" line="103"/>
            <javadoc line="103">
                constant used to describe an algorithm that implements all 8 of
                  the Porter-Duff rules in one Primitive.                
            </javadoc>
            <declaration name="Any" type="CompositeType" line="113"/>
            <javadoc line="113">
                The root CompositeType object for all chains of algorithm descriptions.                
            </javadoc>
            <declaration name="General" type="CompositeType" line="123"/>
            <declaration name="AnyAlpha" type="CompositeType" line="126"/>
            <declaration name="Xor" type="CompositeType" line="128"/>
            <declaration name="Clear" type="CompositeType" line="131"/>
            <declaration name="Src" type="CompositeType" line="133"/>
            <declaration name="Dst" type="CompositeType" line="135"/>
            <declaration name="SrcOver" type="CompositeType" line="137"/>
            <declaration name="DstOver" type="CompositeType" line="139"/>
            <declaration name="SrcIn" type="CompositeType" line="141"/>
            <declaration name="DstIn" type="CompositeType" line="143"/>
            <declaration name="SrcOut" type="CompositeType" line="145"/>
            <declaration name="DstOut" type="CompositeType" line="147"/>
            <declaration name="SrcAtop" type="CompositeType" line="149"/>
            <declaration name="DstAtop" type="CompositeType" line="151"/>
            <declaration name="AlphaXor" type="CompositeType" line="153"/>
            <declaration name="SrcNoEa" type="CompositeType" line="156"/>
            <declaration name="SrcOverNoEa" type="CompositeType" line="158"/>
            <declaration name="OpaqueSrcOverNoEa" type="CompositeType" line="173"/>
            <javadoc line="181">
                Return a new CompositeType object which uses this object as its
                  more general &quot;supertype&quot; descriptor.  If no operation can be
                  found that implements the algorithm described more exactly
                  by desc, then this object will define the more general
                  compositing algorithm that can be used instead.                
            </javadoc>
            <method name="deriveSubType" type="CompositeType" line="188">
                <params>
                    <param name="desc" type="String"/>
                </params>
            </method>
            <javadoc line="192">
                Return a CompositeType object for the specified AlphaComposite
                  rule.                
            </javadoc>
            <method name="forAlphaComposite" type="CompositeType" line="196">
                <params>
                    <param name="ac" type="AlphaComposite"/>
                </params>
                <scope line="201"/>
                <scope line="203"/>
                <scope line="209"/>
                <scope line="211"/>
            </method>
            <declaration name="uniqueID" type="int" line="235"/>
            <declaration name="desc" type="String" line="236"/>
            <declaration name="next" type="CompositeType" line="237"/>
            <method name="CompositeType" type="constructor" line="239">
                <params>
                    <param name="parent" type="CompositeType"/>
                    <param name="desc" type="String"/>
                </params>
            </method>
            <method name="makeUniqueID" type="int" line="245">
                <params>
                    <param name="desc" type="String"/>
                </params>
                <declaration name="i" type="Integer" line="246"/>
                <scope line="248">
                    <scope line="249"/>
                </scope>
            </method>
            <method name="getUniqueID" type="int" line="258"/>
            <method name="getDescriptor" type="String" line="262"/>
            <method name="getSuperType" type="CompositeType" line="266"/>
            <method name="hashCode" type="int" line="270"/>
            <method name="isDerivedFrom" type="boolean" line="274">
                <params>
                    <param name="other" type="CompositeType"/>
                </params>
                <declaration name="comptype" type="CompositeType" line="275"/>
                <scope line="276">
                    <scope line="277"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="285">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="286"/>
            </method>
            <method name="toString" type="String" line="292"/>
        </class>
    </source>