<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.loops">
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Rectangle"/>
        <import package="sun.awt.image.BufImgSurfaceData"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="GraphicsPrimitive" line="51">
            <comment line="118">
                Native blit loop info                
            </comment>
            <comment line="190">
                METHODS TO DESCRIBE THE SURFACES PRIMITIVES
                   CAN OPERATE ON AND THE FUNCTIONALITY THEY IMPLEMENT                
            </comment>
            <comment line="304">
                                
            </comment>
            <comment line="305">
                A version of satisfies used for regression testing                
            </comment>
            <comment line="306">
                                
            </comment>
            <javadoc line="51">
                defines interface for primitives which can be placed into
                  the graphic component manager framework                
            </javadoc>
            <interface name="GeneralBinaryOp">
                <comment line="106">
                    Making these be instance data members (instead of virtual methods                    
                </comment>
                <comment line="107">
                    overridden by subclasses) is actually cheaper, since each class                    
                </comment>
                <comment line="108">
                    is a singleton.  As instance data members with final accessors,                    
                </comment>
                <comment line="109">
                    accesses can be inlined.                    
                </comment>
                <method name="setPrimitives" type="void" line="58"/>
                <javadoc line="58">
                    This method allows the setupGeneralBinaryOp method to set
                      the converters into the General version of the Primitive.                    
                </javadoc>
                <method name="getSourceType" type="SurfaceType" line="67"/>
                <javadoc line="67">
                    These 4 methods are implemented automatically for any
                      GraphicsPrimitive.  They are used by setupGeneralBinaryOp
                      to retrieve the information needed to find the right
                      converter primitives.                    
                </javadoc>
                <method name="getCompositeType" type="CompositeType" line="74"/>
                <method name="getDestType" type="SurfaceType" line="75"/>
                <method name="getSignature" type="String" line="76"/>
                <method name="getPrimTypeID" type="int" line="77"/>
            </interface>
            <interface name="GeneralUnaryOp">
                <comment line="106">
                    Making these be instance data members (instead of virtual methods                    
                </comment>
                <comment line="107">
                    overridden by subclasses) is actually cheaper, since each class                    
                </comment>
                <comment line="108">
                    is a singleton.  As instance data members with final accessors,                    
                </comment>
                <comment line="109">
                    accesses can be inlined.                    
                </comment>
                <method name="setPrimitives" type="void" line="81"/>
                <javadoc line="81">
                    This method allows the setupGeneralUnaryOp method to set
                      the converters into the General version of the Primitive.                    
                </javadoc>
                <method name="getCompositeType" type="CompositeType" line="89"/>
                <javadoc line="89">
                    These 3 methods are implemented automatically for any
                      GraphicsPrimitive.  They are used by setupGeneralUnaryOp
                      to retrieve the information needed to find the right
                      converter primitives.                    
                </javadoc>
                <method name="getDestType" type="SurfaceType" line="96"/>
                <method name="getSignature" type="String" line="97"/>
                <method name="getPrimTypeID" type="int" line="98"/>
            </interface>
            <declaration name="methodSignature" type="String" line="101"/>
            <javadoc line="101">
                INSTANCE DATA MEMBERS DESCRIBING CHARACTERISTICS OF THIS PRIMITIVE                
            </javadoc>
            <declaration name="uniqueID" type="int" line="110"/>
            <declaration name="unusedPrimID" type="int" line="111"/>
            <declaration name="sourceType" type="SurfaceType" line="113"/>
            <declaration name="compositeType" type="CompositeType" line="114"/>
            <declaration name="destType" type="SurfaceType" line="115"/>
            <declaration name="pNativePrim" type="long" line="117"/>
            <method name="makePrimTypeID" type="int" line="119">
                <scope line="120"/>
            </method>
            <method name="makeUniqueID" type="int" line="130">
                <params>
                    <param name="primTypeID" type="int"/>
                    <param name="src" type="SurfaceType"/>
                    <param name="cmp" type="CompositeType"/>
                    <param name="dst" type="SurfaceType"/>
                </params>
            </method>
            <javadoc line="137">
                Create a new GraphicsPrimitive with all of the required
                  descriptive information.                
            </javadoc>
            <method name="GraphicsPrimitive" type="constructor" line="146">
                <params>
                    <param name="methodSignature" type="String"/>
                    <param name="primTypeID" type="int"/>
                    <param name="sourceType" type="SurfaceType"/>
                    <param name="compositeType" type="CompositeType"/>
                    <param name="destType" type="SurfaceType"/>
                </params>
                <scope line="152"/>
                <scope line="154"/>
            </method>
            <javadoc line="162">
                Create a new GraphicsPrimitive for native invocation
                  with all of the required descriptive information.                
            </javadoc>
            <method name="GraphicsPrimitive" type="constructor" line="172">
                <params>
                    <param name="pNativePrim" type="long"/>
                    <param name="methodSignature" type="String"/>
                    <param name="primTypeID" type="int"/>
                    <param name="sourceType" type="SurfaceType"/>
                    <param name="compositeType" type="CompositeType"/>
                    <param name="destType" type="SurfaceType"/>
                </params>
                <scope line="179"/>
                <scope line="181"/>
            </method>
            <javadoc line="194">
                Gets instance ID of this graphics primitive.
                  Instance ID is comprised of four distinct ids (ORed together)
                  that uniquely identify each instance of a GraphicsPrimitive
                  object. The four ids making up instance ID are:
                  1. primitive id - identifier shared by all primitives of the
                  same type (eg. all Blits have the same primitive id)
                  2. sourcetype id - identifies source surface type
                  3. desttype id - identifies destination surface type
                  4. compositetype id - identifies composite used                
                <return>
                    instance ID                    
                </return>
            </javadoc>
            <method name="getUniqueID" type="int" line="208"/>
            <javadoc line="212">
                                
            </javadoc>
            <method name="getSignature" type="String" line="214"/>
            <javadoc line="218">
                Gets unique id for this GraphicsPrimitive type.
                  This id is used to identify the TYPE of primitive (Blit vs. BlitBg)
                  as opposed to INSTANCE of primitive.                
                <return>
                    primitive ID                    
                </return>
            </javadoc>
            <method name="getPrimTypeID" type="int" line="226"/>
            <javadoc line="230">
                                
            </javadoc>
            <method name="getNativePrim" type="long" line="232"/>
            <javadoc line="236">
                                
            </javadoc>
            <method name="getSourceType" type="SurfaceType" line="238"/>
            <javadoc line="242">
                                
            </javadoc>
            <method name="getCompositeType" type="CompositeType" line="244"/>
            <javadoc line="248">
                                
            </javadoc>
            <method name="getDestType" type="SurfaceType" line="250"/>
            <javadoc line="254">
                Return true if this primitive can be used for the given signature
                  surfaces, and composite.                
                <param>
                    signature The signature of the given operation.  Must be
                      == (not just .equals) the signature string given by the
                      abstract class that declares the operation.                    
                </param>
                <param>
                    srctype The surface type for the source of the operation                    
                </param>
                <param>
                    comptype The composite type for the operation                    
                </param>
                <param>
                    dsttype The surface type for the destination of the operation                    
                </param>
            </javadoc>
            <method name="satisfies" type="boolean" line="269">
                <params>
                    <param name="signature" type="String"/>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="comptype" type="CompositeType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
                <scope line="270"/>
                <scope line="273">
                    <scope line="274"/>
                    <scope line="277"/>
                </scope>
                <scope line="282">
                    <scope line="283"/>
                    <scope line="286"/>
                </scope>
                <scope line="291">
                    <scope line="292"/>
                    <scope line="295"/>
                </scope>
            </method>
            <method name="satisfiesSameAs" type="boolean" line="306">
                <params>
                    <param name="other" type="GraphicsPrimitive"/>
                </params>
            </method>
            <method name="makePrimitive" type="GraphicsPrimitive" line="313"/>
            <method name="traceWrap" type="GraphicsPrimitive" line="317"/>
            <declaration name="traceMap" type="HashMap" line="319"/>
            <declaration name="traceflags" type="int" line="321"/>
            <declaration name="tracefile" type="String" line="322"/>
            <declaration name="traceout" type="PrintStream" line="323"/>
            <declaration name="TRACELOG" type="int" line="325"/>
            <declaration name="TRACETIMESTAMP" type="int" line="326"/>
            <declaration name="TRACECOUNTS" type="int" line="327"/>
            <scope line="329">
                <declaration name="gpa" type="GetPropertyAction" line="330"/>
                <declaration name="trace" type="String" line="331"/>
                <scope line="332">
                    <declaration name="verbose" type="boolean" line="333"/>
                    <declaration name="traceflags" type="int" line="334"/>
                    <declaration name="st" type="StringTokenizer" line="335"/>
                    <scope line="336">
                        <declaration name="tok" type="String" line="337"/>
                        <scope line="338"/>
                        <scope line="340"/>
                        <scope line="342"/>
                        <scope line="344"/>
                        <scope line="346"/>
                        <scope line="348">
                            <scope line="349"/>
                        </scope>
                    </scope>
                    <scope line="357">
                        <scope line="359">
                            <scope line="362"/>
                            <scope line="364"/>
                        </scope>
                        <scope line="367"/>
                        <scope line="371"/>
                        <scope line="373"/>
                        <scope line="377"/>
                        <scope line="379"/>
                    </scope>
                </scope>
            </scope>
            <method name="tracingEnabled" type="boolean" line="387"/>
            <method name="getTraceOutputFile" type="PrintStream" line="391">
                <scope line="392">
                    <scope line="393">
                        <anonymous_class line="395">
                            <method name="run" type="Object" line="396">
                                <scope line="397"/>
                                <scope line="399"/>
                            </method>
                        </anonymous_class>
                        <declaration name="o" type="Object" line="394"/>
                        <scope line="404"/>
                        <scope line="406"/>
                    </scope>
                    <scope line="409"/>
                </scope>
            </method>
            <class name="TraceReporter" line="416">
                <extends class="Thread"/>
                <comment line="106">
                    Making these be instance data members (instead of virtual methods                    
                </comment>
                <comment line="107">
                    overridden by subclasses) is actually cheaper, since each class                    
                </comment>
                <comment line="108">
                    is a singleton.  As instance data members with final accessors,                    
                </comment>
                <comment line="109">
                    accesses can be inlined.                    
                </comment>
                <method name="setShutdownHook" type="void" line="417">
                    <anonymous_class line="418">
                        <method name="run" type="Object" line="419">
                            <declaration name="t" type="TraceReporter" line="420"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="run" type="void" line="428">
                    <declaration name="ps" type="PrintStream" line="429"/>
                    <declaration name="iterator" type="Iterator" line="430"/>
                    <declaration name="total" type="long" line="431"/>
                    <declaration name="numprims" type="int" line="432"/>
                    <scope line="433">
                        <declaration name="me" type="Map.Entry" line="434"/>
                        <declaration name="prim" type="Object" line="435"/>
                        <declaration name="count" type="int[]" line="436"/>
                        <scope line="437"/>
                        <scope line="439"/>
                    </scope>
                    <scope line="446"/>
                    <scope line="448"/>
                </method>
            </class>
            <method name="tracePrimitive" type="void" line="455">
                <params>
                    <param name="prim" type="Object"/>
                </params>
                <scope line="456">
                    <scope line="457"/>
                    <declaration name="o" type="Object" line="461"/>
                    <scope line="462"/>
                </scope>
                <scope line="468">
                    <declaration name="ps" type="PrintStream" line="469"/>
                    <scope line="470"/>
                </scope>
            </method>
            <method name="setupGeneralBinaryOp" type="void" line="477">
                <params>
                    <param name="gbo" type="GeneralBinaryOp"/>
                </params>
                <declaration name="primID" type="int" line="478"/>
                <declaration name="methodSignature" type="String" line="479"/>
                <declaration name="srctype" type="SurfaceType" line="480"/>
                <declaration name="comptype" type="CompositeType" line="481"/>
                <declaration name="dsttype" type="SurfaceType" line="482"/>
                <declaration name="convertsrc" type="Blit" line="483"/>
                <declaration name="performop" type="GraphicsPrimitive" line="484"/>
                <scope line="490"/>
                <scope line="493">
                    <scope line="495"/>
                </scope>
            </method>
            <method name="setupGeneralUnaryOp" type="void" line="506">
                <params>
                    <param name="guo" type="GeneralUnaryOp"/>
                </params>
                <declaration name="primID" type="int" line="507"/>
                <declaration name="methodSignature" type="String" line="508"/>
                <declaration name="comptype" type="CompositeType" line="509"/>
                <declaration name="dsttype" type="SurfaceType" line="510"/>
                <declaration name="convertdst" type="Blit" line="512"/>
                <declaration name="performop" type="GraphicsPrimitive" line="513"/>
                <declaration name="convertres" type="Blit" line="514"/>
                <scope line="515"/>
            </method>
            <method name="createConverter" type="Blit" line="525">
                <params>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
                <scope line="526"/>
                <declaration name="cv" type="Blit" line="529"/>
                <scope line="530"/>
            </method>
            <method name="convertFrom" type="SurfaceData" line="540">
                <params>
                    <param name="ob" type="Blit"/>
                    <param name="srcData" type="SurfaceData"/>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dstData" type="SurfaceData"/>
                </params>
            </method>
            <method name="convertFrom" type="SurfaceData" line="549">
                <params>
                    <param name="ob" type="Blit"/>
                    <param name="srcData" type="SurfaceData"/>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dstData" type="SurfaceData"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="550">
                    <declaration name="r" type="Rectangle" line="551"/>
                    <scope line="552"/>
                </scope>
                <scope line="556">
                    <declaration name="dstBI" type="BufferedImage" line="557"/>
                </scope>
            </method>
            <method name="convertTo" type="void" line="569">
                <params>
                    <param name="ob" type="Blit"/>
                    <param name="srcImg" type="SurfaceData"/>
                    <param name="dstImg" type="SurfaceData"/>
                    <param name="clip" type="Region"/>
                    <param name="dstX" type="int"/>
                    <param name="dstY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="570"/>
            </method>
            <method name="getGeneralOp" type="GraphicsPrimitive" line="578">
                <params>
                    <param name="primID" type="int"/>
                    <param name="comptype" type="CompositeType"/>
                </params>
            </method>
            <method name="simplename" type="String" line="585">
                <params>
                    <param name="fields" type="Field[]"/>
                    <param name="o" type="Object"/>
                </params>
                <scope line="586">
                    <declaration name="f" type="Field" line="587"/>
                    <scope line="588">
                        <scope line="589"/>
                    </scope>
                    <scope line="592"/>
                </scope>
            </method>
            <method name="simplename" type="String" line="598">
                <params>
                    <param name="st" type="SurfaceType"/>
                </params>
            </method>
            <method name="simplename" type="String" line="602">
                <params>
                    <param name="ct" type="CompositeType"/>
                </params>
            </method>
            <declaration name="cachedname" type="String" line="606"/>
            <method name="toString" type="String" line="608">
                <scope line="609">
                    <declaration name="sig" type="String" line="610"/>
                    <declaration name="index" type="int" line="611"/>
                    <scope line="612"/>
                </scope>
            </method>
        </class>
    </source>