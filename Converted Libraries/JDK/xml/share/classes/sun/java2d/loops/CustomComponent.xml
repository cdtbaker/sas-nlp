<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.loops">
        <import package="java.awt.Composite"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="sun.awt.image.IntegerComponentRaster"/>
        <import package="sun.java2d.SurfaceData"/>
        <import package="sun.java2d.pipe.Region"/>
        <import package="sun.java2d.pipe.SpanIterator"/>
        <class name="CustomComponent" line="44">
            <javadoc line="44">
                CustomComponent, collection of GraphicsPrimitive
                  Basically, this collection of components performs conversion from
                  ANY to ANY via opaque copy                
            </javadoc>
            <method name="register" type="void" line="50">
                <comment line="51">
                    REMIND: This does not work for all destinations yet since                    
                </comment>
                <comment line="52">
                    the screen SurfaceData objects do not implement getRaster                    
                </comment>
                <declaration name="owner" type="Class" line="53"/>
                <declaration name="primitives" type="GraphicsPrimitive[]" line="54"/>
            </method>
            <method name="getRegionOfInterest" type="Region" line="82">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="clip" type="Region"/>
                    <param name="srcx" type="int"/>
                    <param name="srcy" type="int"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="83">
                    Intersect all of:
                       - operation area (dstx, dsty, w, h)
                       - destination bounds
                       - (translated) src bounds
                       - supplied clip (may be non-rectangular)
                     Intersect the rectangular regions first since those are
                     simpler operations.                    
                </comment>
                <comment line="95">
                    srcxy in src space maps to dstxy in dst space                    
                </comment>
                <comment line="99">
                    Intersect with clip last since it may be non-rectangular                    
                </comment>
                <declaration name="ret" type="Region" line="92"/>
                <declaration name="r" type="Rectangle" line="94"/>
                <scope line="98"/>
            </method>
        </class>
        <class name="OpaqueCopyAnyToArgb" line="106">
            <extends class="Blit"/>
            <javadoc line="106">
                ANY format to ARGB format Blit                
            </javadoc>
            <method name="OpaqueCopyAnyToArgb" type="constructor" line="110"/>
            <method name="Blit" type="void" line="119">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="srcx" type="int"/>
                    <param name="srcy" type="int"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="135">
                    assert(icr.getPixelStride() == 1);                    
                </comment>
                <comment line="150">
                    Pixels in the dest were modified directly, we must                    
                </comment>
                <comment line="151">
                    manually notify the raster that it was modified                    
                </comment>
                <comment line="153">
                    REMIND: We need to do something to make sure that dstRast                    
                </comment>
                <comment line="154">
                    is put back to the destination (as in the native Release                    
                </comment>
                <comment line="155">
                    function)                    
                </comment>
                <comment line="156">
                    src.releaseRaster(srcRast);  // NOP?                    
                </comment>
                <comment line="157">
                    dst.releaseRaster(dstRast);                    
                </comment>
                <declaration name="srcRast" type="Raster" line="120"/>
                <declaration name="srcCM" type="ColorModel" line="121"/>
                <declaration name="dstRast" type="Raster" line="123"/>
                <declaration name="icr" type="IntegerComponentRaster" line="124"/>
                <declaration name="dstPix" type="int[]" line="125"/>
                <declaration name="roi" type="Region" line="127"/>
                <declaration name="si" type="SpanIterator" line="130"/>
                <declaration name="srcPix" type="Object" line="132"/>
                <declaration name="dstScan" type="int" line="134"/>
                <declaration name="span" type="int" line="138"/>
                <scope line="139">
                    <declaration name="rowoff" type="int" line="140"/>
                    <scope line="141">
                        <declaration name="off" type="int" line="142"/>
                        <scope line="143"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="OpaqueCopyArgbToAny" line="161">
            <extends class="Blit"/>
            <javadoc line="161">
                ARGB format to ANY format Blit                
            </javadoc>
            <method name="OpaqueCopyArgbToAny" type="constructor" line="165"/>
            <method name="Blit" type="void" line="174">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="srcx" type="int"/>
                    <param name="srcy" type="int"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="191">
                    assert(icr.getPixelStride() == 1);                    
                </comment>
                <comment line="208">
                    REMIND: We need to do something to make sure that dstRast                    
                </comment>
                <comment line="209">
                    is put back to the destination (as in the native Release                    
                </comment>
                <comment line="210">
                    function)                    
                </comment>
                <comment line="211">
                    src.releaseRaster(srcRast);  // NOP?                    
                </comment>
                <comment line="212">
                    dst.releaseRaster(dstRast);                    
                </comment>
                <declaration name="srcRast" type="Raster" line="175"/>
                <declaration name="icr" type="IntegerComponentRaster" line="176"/>
                <declaration name="srcPix" type="int[]" line="177"/>
                <declaration name="dstRast" type="WritableRaster" line="179"/>
                <declaration name="dstCM" type="ColorModel" line="181"/>
                <declaration name="roi" type="Region" line="183"/>
                <declaration name="si" type="SpanIterator" line="186"/>
                <declaration name="dstPix" type="Object" line="188"/>
                <declaration name="srcScan" type="int" line="190"/>
                <declaration name="span" type="int" line="194"/>
                <scope line="195">
                    <declaration name="rowoff" type="int" line="196"/>
                    <scope line="199">
                        <declaration name="off" type="int" line="200"/>
                        <scope line="201"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="XorCopyArgbToAny" line="216">
            <extends class="Blit"/>
            <javadoc line="216">
                ARGB format to ANY format Blit (pixels are XORed together with XOR pixel)                
            </javadoc>
            <method name="XorCopyArgbToAny" type="constructor" line="220"/>
            <method name="Blit" type="void" line="229">
                <params>
                    <param name="src" type="SurfaceData"/>
                    <param name="dst" type="SurfaceData"/>
                    <param name="comp" type="Composite"/>
                    <param name="clip" type="Region"/>
                    <param name="srcx" type="int"/>
                    <param name="srcy" type="int"/>
                    <param name="dstx" type="int"/>
                    <param name="dsty" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="250">
                    assert(icr.getPixelStride() == 1);                    
                </comment>
                <comment line="261">
                    REMIND: alpha bits of the destination pixel are                    
                </comment>
                <comment line="262">
                    currently altered by the XOR operation, but                    
                </comment>
                <comment line="263">
                    should be left untouched                    
                </comment>
                <comment line="323">
                    REMIND: We need to do something to make sure that dstRast                    
                </comment>
                <comment line="324">
                    is put back to the destination (as in the native Release                    
                </comment>
                <comment line="325">
                    function)                    
                </comment>
                <comment line="326">
                    src.releaseRaster(srcRast);  // NOP?                    
                </comment>
                <comment line="327">
                    dst.releaseRaster(dstRast);                    
                </comment>
                <declaration name="srcRast" type="Raster" line="230"/>
                <declaration name="icr" type="IntegerComponentRaster" line="231"/>
                <declaration name="srcPix" type="int[]" line="232"/>
                <declaration name="dstRast" type="WritableRaster" line="234"/>
                <declaration name="dstCM" type="ColorModel" line="236"/>
                <declaration name="roi" type="Region" line="238"/>
                <declaration name="si" type="SpanIterator" line="241"/>
                <declaration name="xorrgb" type="int" line="243"/>
                <declaration name="xorPixel" type="Object" line="244"/>
                <declaration name="srcPixel" type="Object" line="246"/>
                <declaration name="dstPixel" type="Object" line="247"/>
                <declaration name="srcScan" type="int" line="249"/>
                <declaration name="span" type="int" line="253"/>
                <scope line="254">
                    <declaration name="rowoff" type="int" line="255"/>
                    <scope line="258">
                        <declaration name="off" type="int" line="259"/>
                        <scope line="260">
                            <declaration name="bytesrcarr" type="byte[]" line="269"/>
                            <declaration name="bytedstarr" type="byte[]" line="270"/>
                            <declaration name="bytexorarr" type="byte[]" line="271"/>
                            <scope line="272"/>
                            <declaration name="shortsrcarr" type="short[]" line="278"/>
                            <declaration name="shortdstarr" type="short[]" line="279"/>
                            <declaration name="shortxorarr" type="short[]" line="280"/>
                            <scope line="281"/>
                            <declaration name="intsrcarr" type="int[]" line="286"/>
                            <declaration name="intdstarr" type="int[]" line="287"/>
                            <declaration name="intxorarr" type="int[]" line="288"/>
                            <scope line="289"/>
                            <declaration name="floatsrcarr" type="float[]" line="294"/>
                            <declaration name="floatdstarr" type="float[]" line="295"/>
                            <declaration name="floatxorarr" type="float[]" line="296"/>
                            <scope line="297">
                                <declaration name="v" type="int" line="298"/>
                            </scope>
                            <declaration name="doublesrcarr" type="double[]" line="305"/>
                            <declaration name="doubledstarr" type="double[]" line="306"/>
                            <declaration name="doublexorarr" type="double[]" line="307"/>
                            <scope line="308">
                                <declaration name="v" type="long" line="309"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>