<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.java2d.loops">
        <import package="java.awt.Paint"/>
        <import package="java.awt.PaintContext"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="sun.awt.image.BufImgSurfaceData"/>
        <import package="sun.java2d.loops.GraphicsPrimitive"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.java2d.SurfaceData"/>
        <class name="MaskFill" line="40">
            <extends class="GraphicsPrimitive"/>
            <comment line="81">
                Note that this uses locatePrim, not locate, so it can return
                 null if there is no specific loop to handle this op...                
            </comment>
            <javadoc line="40">
                MaskFill
                  1) fills rectangles of pixels on a surface
                  2) performs compositing of colors based upon a Composite
                  parameter
                  3) blends result of composite with destination using an
                  alpha coverage mask
                  4) the mask may be null in which case it should be treated
                  as if it were an array of all opaque values (0xff)                
            </javadoc>
            <declaration name="methodSignature" type="String" line="52"/>
            <declaration name="fillPgramSignature" type="String" line="53"/>
            <declaration name="drawPgramSignature" type="String" line="55"/>
            <declaration name="primTypeID" type="int" line="58"/>
            <declaration name="fillcache" type="RenderCache" line="60"/>
            <method name="locate" type="MaskFill" line="65">
                <params>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="comptype" type="CompositeType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
            </method>
            <method name="locatePrim" type="MaskFill" line="74">
                <params>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="comptype" type="CompositeType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
            </method>
            <method name="getFromCache" type="MaskFill" line="87">
                <params>
                    <param name="src" type="SurfaceType"/>
                    <param name="comp" type="CompositeType"/>
                    <param name="dst" type="SurfaceType"/>
                </params>
                <declaration name="o" type="Object" line="88"/>
                <scope line="89"/>
                <declaration name="fill" type="MaskFill" line="92"/>
                <scope line="93"/>
            </method>
            <method name="MaskFill" type="constructor" line="103">
                <params>
                    <param name="alternateSignature" type="String"/>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="comptype" type="CompositeType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
            </method>
            <method name="MaskFill" type="constructor" line="110">
                <params>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="comptype" type="CompositeType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
            </method>
            <method name="MaskFill" type="constructor" line="118">
                <params>
                    <param name="pNativePrim" type="long"/>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="comptype" type="CompositeType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
            </method>
            <method name="MaskFill" type="void" line="122"/>
            <javadoc line="122">
                All MaskFill implementors must have this invoker method                
            </javadoc>
            <method name="FillAAPgram" type="void" line="130"/>
            <method name="DrawAAPgram" type="void" line="136"/>
            <method name="canDoParallelograms" type="boolean" line="143"/>
            <scope line="147"/>
            <method name="makePrimitive" type="GraphicsPrimitive" line="154">
                <params>
                    <param name="srctype" type="SurfaceType"/>
                    <param name="comptype" type="CompositeType"/>
                    <param name="dsttype" type="SurfaceType"/>
                </params>
                <scope line="157">
                    <scope line="158"/>
                    <scope line="161"/>
                </scope>
                <scope line="164"/>
            </method>
            <class name="General" line="169">
                <extends class="MaskFill"/>
                <declaration name="fillop" type="FillRect" line="170"/>
                <declaration name="maskop" type="MaskBlit" line="171"/>
                <method name="General" type="constructor" line="176">
                    <params>
                        <param name="srctype" type="SurfaceType"/>
                        <param name="comptype" type="CompositeType"/>
                        <param name="dsttype" type="SurfaceType"/>
                    </params>
                </method>
                <method name="MaskFill" type="void" line="189">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="sData" type="SurfaceData"/>
                        <param name="comp" type="Composite"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="mask" type="byte"/>
                        <param name="offset" type="int"/>
                        <param name="scan" type="int"/>
                    </params>
                    <comment line="194">
                        REMIND: This is not pretty.  It would be nicer if we                        
                    </comment>
                    <comment line="195">
                        passed a &quot;FillData&quot; object to the Pixel loops, instead                        
                    </comment>
                    <comment line="196">
                        of a SunGraphics2D parameter...                        
                    </comment>
                    <declaration name="dstBI" type="BufferedImage" line="190"/>
                    <declaration name="tmpData" type="SurfaceData" line="192"/>
                    <declaration name="pixel" type="int" line="197"/>
                </method>
            </class>
            <method name="traceWrap" type="GraphicsPrimitive" line="208"/>
            <class name="TraceMaskFill" line="212">
                <extends class="MaskFill"/>
                <declaration name="target" type="MaskFill" line="213"/>
                <declaration name="fillPgramTarget" type="MaskFill" line="214"/>
                <declaration name="drawPgramTarget" type="MaskFill" line="215"/>
                <method name="TraceMaskFill" type="constructor" line="217">
                    <params>
                        <param name="target" type="MaskFill"/>
                    </params>
                </method>
                <method name="traceWrap" type="GraphicsPrimitive" line="232"/>
                <method name="MaskFill" type="void" line="240">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="sData" type="SurfaceData"/>
                        <param name="comp" type="Composite"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="mask" type="byte[]"/>
                        <param name="maskoff" type="int"/>
                        <param name="maskscan" type="int"/>
                    </params>
                </method>
                <method name="FillAAPgram" type="void" line="251">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="sData" type="SurfaceData"/>
                        <param name="comp" type="Composite"/>
                        <param name="x" type="double"/>
                        <param name="y" type="double"/>
                        <param name="dx1" type="double"/>
                        <param name="dy1" type="double"/>
                        <param name="dx2" type="double"/>
                        <param name="dy2" type="double"/>
                    </params>
                </method>
                <method name="DrawAAPgram" type="void" line="263">
                    <params>
                        <param name="sg2d" type="SunGraphics2D"/>
                        <param name="sData" type="SurfaceData"/>
                        <param name="comp" type="Composite"/>
                        <param name="x" type="double"/>
                        <param name="y" type="double"/>
                        <param name="dx1" type="double"/>
                        <param name="dy1" type="double"/>
                        <param name="dx2" type="double"/>
                        <param name="dy2" type="double"/>
                        <param name="lw1" type="double"/>
                        <param name="lw2" type="double"/>
                    </params>
                </method>
                <method name="canDoParallelograms" type="boolean" line="269"/>
            </class>
        </class>
    </source>