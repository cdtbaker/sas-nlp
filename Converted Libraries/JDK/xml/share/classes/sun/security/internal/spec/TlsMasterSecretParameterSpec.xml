<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.internal.spec">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto.SecretKey"/>
        <class name="TlsMasterSecretParameterSpec" line="32">
            <implements interface="AlgorithmParameterSpec"/>
            <javadoc line="32">
                Parameters for SSL/TLS master secret generation.
                  This class encapsulates the information necessary to calculate a SSL/TLS
                  master secret from the premaster secret and other parameters.
                  It is used to initialize KeyGenerators of the type &quot;TlsMasterSecret&quot;.
                  &lt;p&gt;Instances of this class are immutable.                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <deprecated>
                    Sun JDK internal use only --- WILL BE REMOVED in a future
                      release.                    
                </deprecated>
            </javadoc>
            <declaration name="premasterSecret" type="SecretKey" line="48"/>
            <declaration name="majorVersion" type="int" line="49"/>
            <declaration name="clientRandom" type="byte[]" line="50"/>
            <declaration name="prfHashAlg" type="String" line="51"/>
            <declaration name="prfHashLength" type="int" line="52"/>
            <declaration name="prfBlockSize" type="int" line="53"/>
            <javadoc line="55">
                Constructs a new TlsMasterSecretParameterSpec.
                  &lt;p&gt;The &lt;code&gt;getAlgorithm()&lt;/code&gt; method of &lt;code&gt;premasterSecret&lt;/code&gt;
                  should return &lt;code&gt;&quot;TlsRsaPremasterSecret&quot;&lt;/code&gt; if the key exchange
                  algorithm was RSA and &lt;code&gt;&quot;TlsPremasterSecret&quot;&lt;/code&gt; otherwise.                
                <param>
                    premasterSecret the premaster secret                    
                </param>
                <param>
                    majorVersion the major number of the protocol version                    
                </param>
                <param>
                    minorVersion the minor number of the protocol version                    
                </param>
                <param>
                    clientRandom the client's random value                    
                </param>
                <param>
                    serverRandom the server's random value                    
                </param>
                <param>
                    prfHashAlg the name of the TLS PRF hash algorithm to use.
                      Used only for TLS 1.2+.  TLS1.1 and earlier use a fixed PRF.                    
                </param>
                <param>
                    prfHashLength the output length of the TLS PRF hash algorithm.
                      Used only for TLS 1.2+.                    
                </param>
                <param>
                    prfBlockSize the input block size of the TLS PRF hash algorithm.
                      Used only for TLS 1.2+.                    
                </param>
                <throws>
                    NullPointerException if premasterSecret, clientRandom,
                      or serverRandom are null                    
                </throws>
                <throws>
                    IllegalArgumentException if minorVersion or majorVersion are
                      negative or larger than 255                    
                </throws>
            </javadoc>
            <method name="TlsMasterSecretParameterSpec" type="constructor" line="82">
                <params>
                    <param name="premasterSecret" type="SecretKey"/>
                    <param name="majorVersion" type="int"/>
                    <param name="minorVersion" type="int"/>
                    <param name="clientRandom" type="byte[]"/>
                    <param name="serverRandom" type="byte[]"/>
                    <param name="prfHashAlg" type="String"/>
                    <param name="prfHashLength" type="int"/>
                    <param name="prfBlockSize" type="int"/>
                </params>
                <scope line="83"/>
            </method>
            <method name="checkVersion" type="int" line="96">
                <params>
                    <param name="version" type="int"/>
                </params>
                <scope line="97"/>
            </method>
            <javadoc line="104">
                Returns the premaster secret.                
                <return>
                    the premaster secret.                    
                </return>
            </javadoc>
            <method name="getPremasterSecret" type="SecretKey" line="109"/>
            <javadoc line="113">
                Returns the major version number.                
                <return>
                    the major version number.                    
                </return>
            </javadoc>
            <method name="getMajorVersion" type="int" line="118"/>
            <javadoc line="122">
                Returns the minor version number.                
                <return>
                    the minor version number.                    
                </return>
            </javadoc>
            <method name="getMinorVersion" type="int" line="127"/>
            <javadoc line="131">
                Returns a copy of the client&apos;s random value.                
                <return>
                    a copy of the client's random value.                    
                </return>
            </javadoc>
            <method name="getClientRandom" type="byte[]" line="136"/>
            <javadoc line="140">
                Returns a copy of the server&apos;s random value.                
                <return>
                    a copy of the server's random value.                    
                </return>
            </javadoc>
            <method name="getServerRandom" type="byte[]" line="145"/>
            <javadoc line="149">
                Obtains the PRF hash algorithm to use in the PRF calculation.                
                <return>
                    the hash algorithm.                    
                </return>
            </javadoc>
            <method name="getPRFHashAlg" type="String" line="154"/>
            <javadoc line="158">
                Obtains the length of the PRF hash algorithm.                
                <return>
                    the hash algorithm length.                    
                </return>
            </javadoc>
            <method name="getPRFHashLength" type="int" line="163"/>
            <javadoc line="167">
                Obtains the block size of the PRF hash algorithm.                
                <return>
                    the hash algorithm block size.                    
                </return>
            </javadoc>
            <method name="getPRFBlockSize" type="int" line="172"/>
        </class>
    </source>