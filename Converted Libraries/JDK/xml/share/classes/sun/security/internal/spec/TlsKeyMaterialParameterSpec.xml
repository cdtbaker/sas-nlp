<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.internal.spec">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto.SecretKey"/>
        <class name="TlsKeyMaterialParameterSpec" line="4">
            <implements interface="AlgorithmParameterSpec"/>
            <javadoc line="4">
                Parameters for SSL/TLS key material generation.
                  This class is used to initialize KeyGenerator of the type
                  &quot;TlsKeyMaterial&quot;. The keys returned by such KeyGenerators will be
                  instances of {@link TlsKeyMaterialSpec}.
                  &lt;p&gt;Instances of this class are immutable.                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <deprecated>
                    Sun JDK internal use only --- WILL BE REMOVED in a future
                      release.                    
                </deprecated>
            </javadoc>
            <declaration name="masterSecret" type="SecretKey" line="16"/>
            <declaration name="majorVersion" type="int" line="17"/>
            <declaration name="clientRandom" type="byte[]" line="18"/>
            <declaration name="cipherAlgorithm" type="String" line="19"/>
            <declaration name="cipherKeyLength" type="int" line="20"/>
            <declaration name="expandedCipherKeyLength" type="int" line="21"/>
            <declaration name="prfHashAlg" type="String" line="22"/>
            <declaration name="prfHashLength" type="int" line="23"/>
            <declaration name="prfBlockSize" type="int" line="24"/>
            <javadoc line="25">
                Constructs a new TlsKeyMaterialParameterSpec.                
                <param>
                    masterSecret the master secret                    
                </param>
                <param>
                    majorVersion the major number of the protocol version                    
                </param>
                <param>
                    minorVersion the minor number of the protocol version                    
                </param>
                <param>
                    clientRandom the client's random value                    
                </param>
                <param>
                    serverRandom the server's random value                    
                </param>
                <param>
                    cipherAlgorithm the algorithm name of the cipher keys to
                      be generated                    
                </param>
                <param>
                    cipherKeyLength if 0, no cipher keys will be generated;
                      otherwise, the length in bytes of cipher keys to be
                      generated for domestic cipher suites; for cipher suites defined as
                      exportable, the number of key material bytes to be generated;                    
                </param>
                <param>
                    expandedCipherKeyLength 0 for domestic cipher suites; for
                      exportable cipher suites the length in bytes of the key to be
                      generated.                    
                </param>
                <param>
                    ivLength the length in bytes of the initialization vector
                      to be generated, or 0 if no initialization vector is required                    
                </param>
                <param>
                    macKeyLength the length in bytes of the MAC key to be generated                    
                </param>
                <param>
                    prfHashAlg the name of the TLS PRF hash algorithm to use.
                      Used only for TLS 1.2+.  TLS1.1 and earlier use a fixed PRF.                    
                </param>
                <param>
                    prfHashLength the output length of the TLS PRF hash algorithm.
                      Used only for TLS 1.2+.                    
                </param>
                <param>
                    prfBlockSize the input block size of the TLS PRF hash algorithm.
                      Used only for TLS 1.2+.                    
                </param>
                <throws>
                    NullPointerException if masterSecret, clientRandom,
                      serverRandom, or cipherAlgorithm are null                    
                </throws>
                <throws>
                    IllegalArgumentException if the algorithm of masterSecret is
                      not TlsMasterSecret, or if majorVersion or minorVersion are
                      negative or larger than 255; or if cipherKeyLength, expandedKeyLength,
                      ivLength, or macKeyLength are negative                    
                </throws>
            </javadoc>
            <method name="TlsKeyMaterialParameterSpec" type="constructor" line="57">
                <params>
                    <param name="masterSecret" type="SecretKey"/>
                    <param name="majorVersion" type="int"/>
                    <param name="minorVersion" type="int"/>
                    <param name="clientRandom" type="byte[]"/>
                    <param name="serverRandom" type="byte[]"/>
                    <param name="cipherAlgorithm" type="String"/>
                    <param name="cipherKeyLength" type="int"/>
                    <param name="expandedCipherKeyLength" type="int"/>
                    <param name="ivLength" type="int"/>
                    <param name="macKeyLength" type="int"/>
                    <param name="prfHashAlg" type="String"/>
                    <param name="prfHashLength" type="int"/>
                    <param name="prfBlockSize" type="int"/>
                </params>
                <scope line="58"/>
                <scope line="61"/>
            </method>
            <method name="checkSign" type="int" line="78">
                <params>
                    <param name="k" type="int"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="84">
                Returns the master secret.                
                <return>
                    the master secret.                    
                </return>
            </javadoc>
            <method name="getMasterSecret" type="SecretKey" line="88"/>
            <javadoc line="91">
                Returns the major version number.                
                <return>
                    the major version number.                    
                </return>
            </javadoc>
            <method name="getMajorVersion" type="int" line="95"/>
            <javadoc line="98">
                Returns the minor version number.                
                <return>
                    the minor version number.                    
                </return>
            </javadoc>
            <method name="getMinorVersion" type="int" line="102"/>
            <javadoc line="105">
                Returns a copy of the client&apos;s random value.                
                <return>
                    a copy of the client's random value.                    
                </return>
            </javadoc>
            <method name="getClientRandom" type="byte[]" line="109"/>
            <javadoc line="112">
                Returns a copy of the server&apos;s random value.                
                <return>
                    a copy of the server's random value.                    
                </return>
            </javadoc>
            <method name="getServerRandom" type="byte[]" line="116"/>
            <javadoc line="119">
                Returns the cipher algorithm.                
                <return>
                    the cipher algorithm.                    
                </return>
            </javadoc>
            <method name="getCipherAlgorithm" type="String" line="123"/>
            <javadoc line="126">
                Returns the length in bytes of the encryption key to be generated.                
                <return>
                    the length in bytes of the encryption key to be generated.                    
                </return>
            </javadoc>
            <method name="getCipherKeyLength" type="int" line="130"/>
            <javadoc line="133">
                Returns the length in bytes of the expanded encryption key to be
                  generated. Returns zero if the expanded encryption key is not
                  supposed to be generated.                
                <return>
                    the length in bytes of the expanded encryption key to be
                      generated.                    
                </return>
            </javadoc>
            <method name="getExpandedCipherKeyLength" type="int" line="140">
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Returns the length in bytes of the initialization vector to be
                  generated. Returns zero if the initialization vector is not
                  supposed to be generated.                
                <return>
                    the length in bytes of the initialization vector to be
                      generated.                    
                </return>
            </javadoc>
            <method name="getIvLength" type="int" line="153">
                <scope line="154"/>
            </method>
            <javadoc line="159">
                Returns the length in bytes of the MAC key to be generated.                
                <return>
                    the length in bytes of the MAC key to be generated.                    
                </return>
            </javadoc>
            <method name="getMacKeyLength" type="int" line="163"/>
            <javadoc line="166">
                Obtains the PRF hash algorithm to use in the PRF calculation.                
                <return>
                    the hash algorithm.                    
                </return>
            </javadoc>
            <method name="getPRFHashAlg" type="String" line="170"/>
            <javadoc line="173">
                Obtains the length of the PRF hash algorithm.                
                <return>
                    the hash algorithm length.                    
                </return>
            </javadoc>
            <method name="getPRFHashLength" type="int" line="177"/>
            <javadoc line="180">
                Obtains the block size of the PRF hash algorithm.                
                <return>
                    the hash algorithm block size                    
                </return>
            </javadoc>
            <method name="getPRFBlockSize" type="int" line="184"/>
        </class>
    </source>