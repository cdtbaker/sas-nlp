<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.tools">
        <import package="java.io"/>
        <import package="java.security.CodeSigner"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.Key"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.Security"/>
        <import package="java.security.Signature"/>
        <import package="java.security.Timestamp"/>
        <import package="java.security.UnrecoverableEntryException"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.Principal"/>
        <import package="java.security.Provider"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.CRL"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.text.Collator"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util"/>
        <import package="java.util.jar.JarEntry"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.math.BigInteger"/>
        <import package="java.net.URI"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.security.cert.CertStore"/>
        <import package="java.security.cert.X509CRL"/>
        <import package="java.security.cert.X509CRLEntry"/>
        <import package="java.security.cert.X509CRLSelector"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.misc.BASE64Encoder"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.pkcs.PKCS10"/>
        <import package="sun.security.provider.X509Factory"/>
        <import package="sun.security.util.Password"/>
        <import package="sun.security.util.PathList"/>
        <import package="javax.crypto.KeyGenerator"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.net.ssl.HostnameVerifier"/>
        <import package="javax.net.ssl.HttpsURLConnection"/>
        <import package="javax.net.ssl.SSLContext"/>
        <import package="javax.net.ssl.SSLSession"/>
        <import package="javax.net.ssl.TrustManager"/>
        <import package="javax.net.ssl.X509TrustManager"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.security.pkcs.PKCS10Attribute"/>
        <import package="sun.security.pkcs.PKCS9Attribute"/>
        <import package="sun.security.provider.certpath.ldap.LDAPCertStoreHelper"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.x509"/>
        <import package="java.security.KeyStore"/>
        <import package="sun.security.tools.KeyTool.Command"/>
        <import package="sun.security.tools.KeyTool.Option"/>
        <class name="KeyTool" line="90">
            <comment line="121">
                User-specified providers are added before any command is called.
                 However, they are not removed before the end of the main() method.
                 If you&apos;re calling KeyTool.main() directly in your own Java program,
                 please programtically add any providers you need and do not specify
                 them through the command line.                
            </comment>
            <comment line="141">
                keystore stream                
            </comment>
            <comment line="153">
                &quot;cacerts&quot; keystore                
            </comment>
            <comment line="159">
                used in GENCRL                
            </comment>
            <comment line="319">
                for i18n                
            </comment>
            <comment line="4132">
                This method also used by JarSigner                
            </comment>
            <javadoc line="90">
                This tool manages keystores.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.KeyStore                    
                </see>
                <see>
                    sun.security.provider.KeyProtector                    
                </see>
                <see>
                    sun.security.provider.JavaKeyStore                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="debug" type="boolean" line="104"/>
            <declaration name="command" type="Command" line="105"/>
            <declaration name="sigAlgName" type="String" line="106"/>
            <declaration name="keyAlgName" type="String" line="107"/>
            <declaration name="verbose" type="boolean" line="108"/>
            <declaration name="keysize" type="int" line="109"/>
            <declaration name="rfc" type="boolean" line="110"/>
            <declaration name="validity" type="long" line="111"/>
            <declaration name="alias" type="String" line="112"/>
            <declaration name="dname" type="String" line="113"/>
            <declaration name="dest" type="String" line="114"/>
            <declaration name="filename" type="String" line="115"/>
            <declaration name="infilename" type="String" line="116"/>
            <declaration name="outfilename" type="String" line="117"/>
            <declaration name="srcksfname" type="String" line="118"/>
            <declaration name="providers" type="Set&lt;Pair&lt;String,String&gt;&gt;" line="126"/>
            <declaration name="storetype" type="String" line="127"/>
            <declaration name="srcProviderName" type="String" line="128"/>
            <declaration name="providerName" type="String" line="129"/>
            <declaration name="pathlist" type="String" line="130"/>
            <declaration name="storePass" type="char[]" line="131"/>
            <declaration name="storePassNew" type="char[]" line="132"/>
            <declaration name="keyPass" type="char[]" line="133"/>
            <declaration name="keyPassNew" type="char[]" line="134"/>
            <declaration name="newPass" type="char[]" line="135"/>
            <declaration name="destKeyPass" type="char[]" line="136"/>
            <declaration name="srckeyPass" type="char[]" line="137"/>
            <declaration name="ksfname" type="String" line="138"/>
            <declaration name="ksfile" type="File" line="139"/>
            <declaration name="ksStream" type="InputStream" line="140"/>
            <declaration name="sslserver" type="String" line="141"/>
            <declaration name="jarfile" type="String" line="142"/>
            <declaration name="keyStore" type="KeyStore" line="143"/>
            <declaration name="token" type="boolean" line="144"/>
            <declaration name="nullStream" type="boolean" line="145"/>
            <declaration name="kssave" type="boolean" line="146"/>
            <declaration name="noprompt" type="boolean" line="147"/>
            <declaration name="trustcacerts" type="boolean" line="148"/>
            <declaration name="protectedPath" type="boolean" line="149"/>
            <declaration name="srcprotectedPath" type="boolean" line="150"/>
            <declaration name="cf" type="CertificateFactory" line="151"/>
            <declaration name="caks" type="KeyStore" line="152"/>
            <declaration name="srcstorePass" type="char[]" line="153"/>
            <declaration name="srcstoretype" type="String" line="154"/>
            <declaration name="passwords" type="Set&lt;char[]&gt;" line="155"/>
            <declaration name="startDate" type="String" line="156"/>
            <declaration name="ids" type="List&lt;String&gt;" line="158"/>
            <declaration name="v3ext" type="List&lt;String&gt;" line="159"/>
            <declaration name="description" type="String" line="241"/>
            <declaration name="options" type="Option[]" line="242"/>
            <method name="Command" type="constructor" line="243">
                <params>
                    <param name="d" type="String"/>
                    <param name="o" type="Option"/>
                </params>
            </method>
            <method name="toString" type="String" line="248"/>
            <declaration name="name" type="String" line="298"/>
            <method name="Option" type="constructor" line="299">
                <params>
                    <param name="name" type="String"/>
                    <param name="arg" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="toString" type="String" line="305"/>
            <declaration name="PARAM_STRING" type="Class[]" line="310"/>
            <declaration name="JKS" type="String" line="312"/>
            <declaration name="NONE" type="String" line="313"/>
            <declaration name="P11KEYSTORE" type="String" line="314"/>
            <declaration name="P12KEYSTORE" type="String" line="315"/>
            <declaration name="keyAlias" type="String" line="316"/>
            <declaration name="rb" type="java.util.ResourceBundle" line="319"/>
            <declaration name="collator" type="Collator" line="321"/>
            <scope line="322"/>
            <method name="KeyTool" type="constructor" line="327"/>
            <method name="main" type="void" line="329">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="kt" type="KeyTool" line="330"/>
            </method>
            <method name="run" type="void" line="334">
                <params>
                    <param name="args" type="String[]"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="335">
                    <scope line="337"/>
                </scope>
                <scope line="340">
                    <scope line="342"/>
                    <scope line="345"/>
                    <scope line="347"/>
                </scope>
                <scope line="350">
                    <scope line="351">
                        <scope line="352"/>
                    </scope>
                    <scope line="358"/>
                </scope>
            </method>
            <javadoc line="364">
                Parse command line arguments.                
            </javadoc>
            <method name="parseArgs" type="void" line="367">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="377">
                    Check if the last option needs an arg                    
                </comment>
                <comment line="380">
                    Only options with an arg need to be checked                    
                </comment>
                <comment line="388">
                    Check modifiers                    
                </comment>
                <comment line="397">
                    command modes                    
                </comment>
                <comment line="410">
                    already recognized as a command                    
                </comment>
                <comment line="418">
                    Help                    
                </comment>
                <comment line="425">
                    specifiers                    
                </comment>
                <comment line="516">
                    options                    
                </comment>
                <declaration name="i" type="int" line="369"/>
                <declaration name="help" type="boolean" line="370"/>
                <scope line="372">
                    <declaration name="flags" type="String" line="374"/>
                    <scope line="377">
                        <scope line="378">
                            <scope line="380"/>
                        </scope>
                    </scope>
                    <declaration name="modifier" type="String" line="390"/>
                    <declaration name="pos" type="int" line="391"/>
                    <scope line="392"/>
                    <declaration name="isCommand" type="boolean" line="399"/>
                    <scope line="400">
                        <scope line="401"/>
                    </scope>
                    <scope line="408"/>
                    <scope line="410"/>
                    <scope line="412"/>
                    <scope line="414"/>
                    <scope line="420"/>
                    <scope line="428"/>
                    <scope line="431"/>
                    <scope line="435"/>
                    <scope line="437"/>
                    <scope line="440"/>
                    <scope line="442"/>
                    <scope line="445"/>
                    <scope line="448"/>
                    <scope line="450"/>
                    <scope line="452"/>
                    <scope line="455"/>
                    <scope line="458"/>
                    <scope line="462"/>
                    <scope line="465"/>
                    <scope line="467"/>
                    <scope line="469"/>
                    <scope line="471"/>
                    <scope line="473"/>
                    <scope line="475"/>
                    <scope line="477"/>
                    <scope line="479"/>
                    <scope line="481"/>
                    <scope line="483"/>
                    <scope line="485"/>
                    <scope line="487"/>
                    <scope line="489"/>
                    <scope line="491"/>
                    <scope line="493"/>
                    <scope line="496">
                        <scope line="497"/>
                        <declaration name="providerClass" type="String" line="500"/>
                        <declaration name="providerArg" type="String" line="501"/>
                        <scope line="503">
                            <scope line="505"/>
                        </scope>
                    </scope>
                    <scope line="518"/>
                    <scope line="520"/>
                    <scope line="522"/>
                    <scope line="524"/>
                    <scope line="526"/>
                    <scope line="529"/>
                    <scope line="531"/>
                    <scope line="533"/>
                </scope>
                <scope line="539"/>
                <scope line="544">
                    <scope line="545"/>
                    <scope line="547"/>
                </scope>
                <scope line="551"/>
            </method>
            <method name="isKeyStoreRelated" type="boolean" line="557">
                <params>
                    <param name="cmd" type="Command"/>
                </params>
            </method>
            <javadoc line="561">
                Execute the commands.                
            </javadoc>
            <method name="doCommands" type="void" line="564">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <comment line="646">
                    Try to load and install specified provider                    
                </comment>
                <comment line="696">
                    Make sure provided passwords are at least 6 characters long                    
                </comment>
                <comment line="710">
                    Check if keystore exists.
                     If no keystore has been specified at the command line, try to use
                     the default, which is located in $HOME/.keystore.
                     If the command is &quot;genkey&quot;, &quot;identitydb&quot;, &quot;import&quot;, or &quot;printcert&quot;,
                     it is OK not to have a keystore.                    
                </comment>
                <comment line="724">
                    Check if keystore file is empty                    
                </comment>
                <comment line="760">
                    Create new keystore                    
                </comment>
                <comment line="767">
                    Load the keystore data.
                    
                     At this point, it&apos;s OK if no keystore password has been provided.
                     We want to make sure that we can load the keystore data, i.e.,
                     the keystore data has the right format. If we cannot load the
                     keystore, why bother asking the user for his or her password?
                     Only if we were able to load the keystore, and no keystore
                     password has been provided, will we prompt the user for the
                     keystore password to verify the keystore integrity.
                     This means that the keystore is loaded twice: first load operation
                     checks the keystore format, second load operation verifies the
                     keystore integrity.
                    
                     If the keystore password has already been provided (at the
                     command line), however, the keystore is loaded only once, and the
                     keystore format and integrity are checked &quot;at the same time&quot;.
                    
                     Null stream keystores are loaded later.                    
                </comment>
                <comment line="794">
                    All commands that create or modify the keystore require a keystore
                     password.                    
                </comment>
                <comment line="800">
                    If we are creating a new non nullStream-based keystore,
                     insist that the password be at least 6 characters                    
                </comment>
                <comment line="808">
                    only prompt if (protectedPath == false)                    
                </comment>
                <comment line="836">
                    If we are creating a new non nullStream-based keystore,
                     insist that the password be at least 6 characters                    
                </comment>
                <comment line="844">
                    If the keystore file does not exist and needs to be
                     created, the storepass should be prompted twice.                    
                </comment>
                <comment line="869">
                    here we have EXPORTCERT and LIST (info valid until STOREPASSWD)                    
                </comment>
                <comment line="878">
                    Now load a nullStream-based keystore,
                     or verify the integrity of an input stream-based keystore                    
                </comment>
                <comment line="909">
                    Create a certificate factory                    
                </comment>
                <comment line="919">
                    Perform the specified command                    
                </comment>
                <comment line="1028">
                    added to make sure only key can go thru                    
                </comment>
                <comment line="1045">
                    Now everything can be cloned                    
                </comment>
                <comment line="1052">
                    in PKCS11, clone a PrivateKeyEntry will delete the old one                    
                </comment>
                <comment line="1133">
                    If we need to save the keystore, do so.                    
                </comment>
                <scope line="566"/>
                <scope line="571"/>
                <scope line="577">
                    <scope line="579"/>
                </scope>
                <scope line="583"/>
                <scope line="587"/>
                <scope line="595"/>
                <scope line="600"/>
                <scope line="605"/>
                <scope line="610">
                    <scope line="612"/>
                </scope>
                <scope line="618">
                    <scope line="619"/>
                </scope>
                <scope line="625">
                    <scope line="627"/>
                </scope>
                <scope line="633">
                    <scope line="634"/>
                </scope>
                <scope line="640"/>
                <scope line="646">
                    <declaration name="cl" type="ClassLoader" line="647"/>
                    <scope line="648">
                        <declaration name="path" type="String" line="649"/>
                        <declaration name="urls" type="URL[]" line="656"/>
                    </scope>
                    <scope line="658"/>
                    <scope line="662">
                        <declaration name="provName" type="String" line="663"/>
                        <declaration name="provClass" type="Class&lt;?&gt;" line="664"/>
                        <scope line="665"/>
                        <scope line="667"/>
                        <declaration name="provArg" type="String" line="671"/>
                        <declaration name="obj" type="Object" line="672"/>
                        <scope line="673"/>
                        <scope line="675">
                            <declaration name="c" type="Constructor&lt;?&gt;" line="676"/>
                        </scope>
                        <scope line="679">
                            <declaration name="form" type="MessageFormat" line="680"/>
                            <declaration name="source" type="Object[]" line="682"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="689"/>
                <scope line="696"/>
                <scope line="700"/>
                <scope line="704"/>
                <scope line="714">
                    <scope line="715"/>
                    <scope line="720">
                        <scope line="721">
                            <scope line="724"/>
                        </scope>
                        <scope line="729">
                            <scope line="735"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="744">
                    <scope line="746"/>
                </scope>
                <scope line="752">
                    <scope line="754"/>
                </scope>
                <scope line="760"/>
                <scope line="762"/>
                <scope line="786">
                    <scope line="788"/>
                </scope>
                <scope line="796"/>
                <scope line="798">
                    <scope line="801"/>
                </scope>
                <scope line="805">
                    <scope line="821">
                        <declaration name="count" type="int" line="822"/>
                        <scope line="823">
                            <scope line="824"/>
                            <scope line="827"/>
                            <scope line="837"/>
                            <scope line="845">
                                <declaration name="storePassAgain" type="char[]" line="847"/>
                                <scope line="849"/>
                            </scope>
                        </scope>
                        <scope line="860"/>
                    </scope>
                    <scope line="867">
                        <scope line="869"/>
                    </scope>
                    <scope line="879"/>
                    <scope line="881"/>
                </scope>
                <scope line="888">
                    <declaration name="form" type="MessageFormat" line="889"/>
                    <scope line="891">
                        <declaration name="source" type="Object[]" line="892"/>
                    </scope>
                    <scope line="896">
                        <declaration name="source" type="Object[]" line="897"/>
                    </scope>
                    <scope line="901">
                        <declaration name="source" type="Object[]" line="902"/>
                    </scope>
                </scope>
                <scope line="910"/>
                <scope line="914"/>
                <scope line="919">
                    <declaration name="ps" type="PrintStream" line="920"/>
                    <scope line="921"/>
                    <scope line="926"/>
                    <scope line="928">
                        <scope line="929"/>
                    </scope>
                    <scope line="933">
                        <declaration name="form" type="MessageFormat" line="934"/>
                        <declaration name="source" type="Object[]" line="936"/>
                    </scope>
                </scope>
                <scope line="940"/>
                <scope line="943">
                    <declaration name="ps" type="PrintStream" line="944"/>
                    <scope line="945"/>
                    <scope line="950"/>
                    <scope line="952">
                        <scope line="953"/>
                    </scope>
                    <scope line="957">
                        <declaration name="form" type="MessageFormat" line="958"/>
                        <declaration name="source" type="Object[]" line="960"/>
                    </scope>
                </scope>
                <scope line="963">
                    <scope line="964"/>
                </scope>
                <scope line="969">
                    <scope line="970"/>
                </scope>
                <scope line="975">
                    <declaration name="inStream" type="InputStream" line="976"/>
                    <scope line="977"/>
                    <scope line="980"/>
                    <scope line="982">
                        <scope line="983"/>
                    </scope>
                </scope>
                <scope line="987">
                    <declaration name="inStream" type="InputStream" line="988"/>
                    <scope line="989"/>
                    <declaration name="importAlias" type="String" line="992"/>
                    <scope line="993">
                        <scope line="995">
                            <scope line="997"/>
                            <scope line="1000"/>
                        </scope>
                        <scope line="1006">
                            <scope line="1008"/>
                            <scope line="1011"/>
                        </scope>
                    </scope>
                    <scope line="1016">
                        <scope line="1017"/>
                    </scope>
                </scope>
                <scope line="1021"/>
                <scope line="1024">
                    <scope line="1028"/>
                    <scope line="1031">
                        <declaration name="form" type="MessageFormat" line="1032"/>
                        <declaration name="source" type="Object[]" line="1034"/>
                    </scope>
                    <scope line="1037">
                        <declaration name="form" type="MessageFormat" line="1038"/>
                        <declaration name="source" type="Object[]" line="1040"/>
                    </scope>
                </scope>
                <scope line="1046">
                    <scope line="1047"/>
                    <scope line="1052"/>
                </scope>
                <scope line="1056"/>
                <scope line="1060">
                    <scope line="1061"/>
                    <scope line="1063"/>
                </scope>
                <scope line="1066"/>
                <scope line="1068"/>
                <scope line="1071">
                    <scope line="1073"/>
                </scope>
                <scope line="1077">
                    <scope line="1078"/>
                    <declaration name="inStream" type="InputStream" line="1081"/>
                    <scope line="1082"/>
                    <declaration name="ps" type="PrintStream" line="1085"/>
                    <scope line="1086"/>
                    <scope line="1090"/>
                    <scope line="1092">
                        <scope line="1093"/>
                        <scope line="1096"/>
                    </scope>
                </scope>
                <scope line="1100">
                    <scope line="1101"/>
                    <declaration name="ps" type="PrintStream" line="1104"/>
                    <scope line="1105"/>
                    <scope line="1109"/>
                    <scope line="1111">
                        <scope line="1112"/>
                    </scope>
                </scope>
                <scope line="1116">
                    <declaration name="inStream" type="InputStream" line="1117"/>
                    <scope line="1118"/>
                    <scope line="1121"/>
                    <scope line="1123">
                        <scope line="1124"/>
                    </scope>
                </scope>
                <scope line="1128"/>
                <scope line="1133">
                    <scope line="1134">
                        <declaration name="form" type="MessageFormat" line="1135"/>
                        <declaration name="source" type="Object[]" line="1137"/>
                    </scope>
                    <scope line="1141"/>
                    <scope line="1143">
                        <declaration name="fout" type="FileOutputStream" line="1144"/>
                        <scope line="1145"/>
                        <scope line="1152">
                            <scope line="1153"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1161">
                Generate a certificate: Read PKCS10 request from in, and print
                  certificate to out. Use alias as CA, sigAlgName as the signature
                  type.                
            </javadoc>
            <method name="doGenCert" type="void" line="1167">
                <params>
                    <param name="alias" type="String"/>
                    <param name="sigAlgName" type="String"/>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <comment line="1210">
                    OpenSSL does not use NEW
                    if (s.startsWith(&quot;-----BEGIN NEW CERTIFICATE REQUEST-----&quot;)) {                    
                </comment>
                <comment line="1214">
                    } else if (s.startsWith(&quot;-----END NEW CERTIFICATE REQUEST-----&quot;)) {                    
                </comment>
                <declaration name="signerCert" type="Certificate" line="1170"/>
                <declaration name="encoded" type="byte[]" line="1171"/>
                <declaration name="signerCertImpl" type="X509CertImpl" line="1172"/>
                <declaration name="signerCertInfo" type="X509CertInfo" line="1173"/>
                <declaration name="issuer" type="X500Name" line="1175"/>
                <declaration name="firstDate" type="Date" line="1178"/>
                <declaration name="lastDate" type="Date" line="1179"/>
                <declaration name="interval" type="CertificateValidity" line="1181"/>
                <declaration name="privateKey" type="PrivateKey" line="1184"/>
                <scope line="1186"/>
                <declaration name="signature" type="Signature" line="1189"/>
                <declaration name="info" type="X509CertInfo" line="1192"/>
                <declaration name="reader" type="BufferedReader" line="1203"/>
                <declaration name="canRead" type="boolean" line="1204"/>
                <declaration name="sb" type="StringBuffer" line="1205"/>
                <scope line="1206">
                    <declaration name="s" type="String" line="1207"/>
                    <scope line="1211"/>
                    <scope line="1214"/>
                    <scope line="1216"/>
                </scope>
                <declaration name="rawReq" type="byte[]" line="1220"/>
                <declaration name="req" type="PKCS10" line="1221"/>
                <declaration name="reqex" type="CertificateExtensions" line="1226"/>
                <declaration name="attrs" type="Iterator&lt;PKCS10Attribute&gt;" line="1227"/>
                <scope line="1228">
                    <declaration name="attr" type="PKCS10Attribute" line="1229"/>
                    <scope line="1230"/>
                </scope>
                <declaration name="ext" type="CertificateExtensions" line="1234"/>
                <declaration name="cert" type="X509CertImpl" line="1241"/>
                <scope line="1244">
                    <scope line="1245">
                        <declaration name="xca" type="X509Certificate" line="1246"/>
                        <scope line="1247"/>
                    </scope>
                </scope>
            </method>
            <method name="doGenCRL" type="void" line="1255">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="1256"/>
                <declaration name="signerCert" type="Certificate" line="1259"/>
                <declaration name="encoded" type="byte[]" line="1260"/>
                <declaration name="signerCertImpl" type="X509CertImpl" line="1261"/>
                <declaration name="signerCertInfo" type="X509CertInfo" line="1262"/>
                <declaration name="owner" type="X500Name" line="1264"/>
                <declaration name="firstDate" type="Date" line="1267"/>
                <declaration name="lastDate" type="Date" line="1268"/>
                <declaration name="interval" type="CertificateValidity" line="1270"/>
                <declaration name="privateKey" type="PrivateKey" line="1274"/>
                <scope line="1276"/>
                <declaration name="badCerts" type="X509CRLEntry[]" line="1280"/>
                <scope line="1281">
                    <declaration name="id" type="String" line="1282"/>
                    <declaration name="d" type="int" line="1283"/>
                    <scope line="1284">
                        <declaration name="ext" type="CRLExtensions" line="1285"/>
                    </scope>
                    <scope line="1289"/>
                </scope>
                <declaration name="crl" type="X509CRLImpl" line="1293"/>
                <scope line="1295"/>
                <scope line="1299"/>
            </method>
            <javadoc line="1304">
                Creates a PKCS#10 cert signing request, corresponding to the
                  keys (and name) associated with a given alias.                
            </javadoc>
            <method name="doCertReq" type="void" line="1310">
                <params>
                    <param name="alias" type="String"/>
                    <param name="sigAlgName" type="String"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <comment line="1331">
                    Attribute name is not significant                    
                </comment>
                <comment line="1335">
                    Construct a Signature object, so that we can sign the request                    
                </comment>
                <comment line="1346">
                    Sign the request and base-64 encode it                    
                </comment>
                <scope line="1311"/>
                <declaration name="objs" type="Pair&lt;Key,char[]&gt;" line="1315"/>
                <declaration name="privKey" type="PrivateKey" line="1316"/>
                <scope line="1317"/>
                <declaration name="cert" type="Certificate" line="1321"/>
                <scope line="1322">
                    <declaration name="form" type="MessageFormat" line="1323"/>
                    <declaration name="source" type="Object[]" line="1325"/>
                </scope>
                <declaration name="request" type="PKCS10" line="1328"/>
                <declaration name="ext" type="CertificateExtensions" line="1329"/>
                <scope line="1335"/>
                <declaration name="signature" type="Signature" line="1339"/>
                <declaration name="subject" type="X500Name" line="1341"/>
            </method>
            <javadoc line="1350">
                Deletes an entry from the keystore.                
            </javadoc>
            <method name="doDeleteEntry" type="void" line="1353">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="1354">
                    <declaration name="form" type="MessageFormat" line="1355"/>
                    <declaration name="source" type="Object[]" line="1357"/>
                </scope>
            </method>
            <javadoc line="1363">
                Exports a certificate from the keystore.                
            </javadoc>
            <method name="doExportCert" type="void" line="1368">
                <params>
                    <param name="alias" type="String"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="1370"/>
                <scope line="1373"/>
                <scope line="1376">
                    <declaration name="form" type="MessageFormat" line="1377"/>
                    <declaration name="source" type="Object[]" line="1379"/>
                </scope>
                <declaration name="cert" type="X509Certificate" line="1383"/>
                <scope line="1384">
                    <declaration name="form" type="MessageFormat" line="1385"/>
                    <declaration name="source" type="Object[]" line="1387"/>
                </scope>
            </method>
            <javadoc line="1393">
                Prompt the user for a keypass when generating a key entry.                
                <param>
                    alias the entry we will set password for                    
                </param>
                <param>
                    orig the original entry of doing a dup, null if generate new                    
                </param>
                <param>
                    origPass the password to copy from if user press ENTER                    
                </param>
            </javadoc>
            <method name="promptForKeyPass" type="char[]" line="1399">
                <params>
                    <param name="alias" type="String"/>
                    <param name="orig" type="String"/>
                    <param name="origPass" type="char[]"/>
                </params>
                <comment line="1404">
                    Prompt for key password                    
                </comment>
                <comment line="1450">
                    PKCS11                    
                </comment>
                <scope line="1400"/>
                <scope line="1402">
                    <declaration name="count" type="int" line="1404"/>
                    <scope line="1405">
                        <declaration name="form" type="MessageFormat" line="1406"/>
                        <declaration name="source" type="Object[]" line="1408"/>
                        <scope line="1410"/>
                        <scope line="1413">
                            <declaration name="src" type="Object[]" line="1416"/>
                        </scope>
                        <declaration name="entered" type="char[]" line="1420"/>
                        <scope line="1422"/>
                        <scope line="1424">
                            <declaration name="passAgain" type="char[]" line="1426"/>
                            <scope line="1428"/>
                        </scope>
                        <scope line="1434"/>
                    </scope>
                    <scope line="1439">
                        <scope line="1440"/>
                        <scope line="1443"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1451">
                Creates a new secret key.                
            </javadoc>
            <method name="doGenSecretKey" type="void" line="1457">
                <params>
                    <param name="alias" type="String"/>
                    <param name="keyAlgName" type="String"/>
                    <param name="keysize" type="int"/>
                </params>
                <scope line="1458"/>
                <scope line="1461">
                    <declaration name="form" type="MessageFormat" line="1462"/>
                    <declaration name="source" type="Object[]" line="1464"/>
                </scope>
                <declaration name="secKey" type="SecretKey" line="1468"/>
                <declaration name="keygen" type="KeyGenerator" line="1469"/>
                <scope line="1470"/>
                <scope line="1472"/>
                <scope line="1474"/>
                <scope line="1476"/>
                <scope line="1482"/>
            </method>
            <javadoc line="1488">
                If no signature algorithm was specified at the command line,
                  we choose one that is compatible with the selected private key                
            </javadoc>
            <method name="getCompatibleSigAlgName" type="String" line="1493">
                <params>
                    <param name="keyAlgName" type="String"/>
                </params>
                <scope line="1494"/>
                <scope line="1496"/>
                <scope line="1498"/>
                <scope line="1500"/>
            </method>
            <javadoc line="1505">
                Creates a new key pair and self-signed certificate.                
            </javadoc>
            <method name="doGenKeyPair" type="void" line="1511">
                <params>
                    <param name="alias" type="String"/>
                    <param name="dname" type="String"/>
                    <param name="keyAlgName" type="String"/>
                    <param name="keysize" type="int"/>
                    <param name="sigAlgName" type="String"/>
                </params>
                <comment line="1541">
                    If DN is provided, parse it. Otherwise, prompt the user for it.                    
                </comment>
                <comment line="1572">
                    resign so that -ext are applied.                    
                </comment>
                <scope line="1512">
                    <scope line="1513"/>
                    <scope line="1515"/>
                    <scope line="1517"/>
                </scope>
                <scope line="1522"/>
                <scope line="1526">
                    <declaration name="form" type="MessageFormat" line="1527"/>
                    <declaration name="source" type="Object[]" line="1529"/>
                </scope>
                <scope line="1533"/>
                <declaration name="keypair" type="CertAndKeyGen" line="1536"/>
                <declaration name="x500Name" type="X500Name" line="1541"/>
                <scope line="1542"/>
                <scope line="1544"/>
                <declaration name="privKey" type="PrivateKey" line="1549"/>
                <declaration name="chain" type="X509Certificate[]" line="1551"/>
                <scope line="1555">
                    <declaration name="form" type="MessageFormat" line="1556"/>
                    <declaration name="source" type="Object[]" line="1558"/>
                </scope>
                <scope line="1566"/>
            </method>
            <javadoc line="1575">
                Clones an entry                
                <param>
                    orig original alias                    
                </param>
                <param>
                    dest destination alias                    
                </param>
                <changePassword>
                    if the password can be changed                    
                </changePassword>
            </javadoc>
            <method name="doCloneEntry" type="void" line="1583">
                <params>
                    <param name="orig" type="String"/>
                    <param name="dest" type="String"/>
                    <param name="changePassword" type="boolean"/>
                </params>
                <comment line="1602">
                    protected                    
                </comment>
                <scope line="1584"/>
                <scope line="1588">
                    <declaration name="form" type="MessageFormat" line="1589"/>
                    <declaration name="source" type="Object[]" line="1591"/>
                </scope>
                <declaration name="objs" type="Pair&lt;Entry,char[]&gt;" line="1595"/>
                <declaration name="entry" type="Entry" line="1596"/>
                <declaration name="pp" type="PasswordProtection" line="1599"/>
                <scope line="1601">
                    <scope line="1602"/>
                    <scope line="1604">
                        <scope line="1605"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1614">
                Changes a key password.                
            </javadoc>
            <method name="doChangeKeyPasswd" type="void" line="1618">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="1620"/>
                <declaration name="objs" type="Pair&lt;Key,char[]&gt;" line="1623"/>
                <declaration name="privKey" type="Key" line="1624"/>
                <scope line="1625"/>
                <scope line="1629">
                    <declaration name="form" type="MessageFormat" line="1630"/>
                    <declaration name="source" type="Object[]" line="1632"/>
                </scope>
            </method>
            <javadoc line="1639">
                Imports a JDK 1.1-style identity database. We can only store one
                  certificate per identity, because we use the identity&apos;s name as the
                  alias (which references a keystore entry), and aliases must be unique.                
            </javadoc>
            <method name="doImportIdentityDatabase" type="void" line="1646">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="1651">
                Prints a single keystore entry.                
            </javadoc>
            <method name="doPrintEntry" type="void" line="1657">
                <params>
                    <param name="alias" type="String"/>
                    <param name="out" type="PrintStream"/>
                    <param name="printWarning" type="boolean"/>
                </params>
                <comment line="1714">
                    Get the chain                    
                </comment>
                <comment line="1734">
                    Print the digest of the user cert only                    
                </comment>
                <comment line="1742">
                    We have a trusted certificate entry                    
                </comment>
                <scope line="1659"/>
                <scope line="1663">
                    <declaration name="form" type="MessageFormat" line="1664"/>
                    <declaration name="source" type="Object[]" line="1666"/>
                </scope>
                <scope line="1670">
                    <declaration name="form" type="MessageFormat" line="1671"/>
                    <declaration name="source" type="Object[]" line="1673"/>
                    <scope line="1676">
                        <declaration name="src" type="Object[]" line="1679"/>
                    </scope>
                </scope>
                <scope line="1682">
                    <scope line="1683">
                        <declaration name="form" type="MessageFormat" line="1684"/>
                        <declaration name="source" type="Object[]" line="1686"/>
                    </scope>
                    <scope line="1688">
                        <declaration name="form" type="MessageFormat" line="1689"/>
                        <declaration name="source" type="Object[]" line="1691"/>
                    </scope>
                </scope>
                <scope line="1696">
                    <scope line="1697">
                        <declaration name="source" type="Object[]" line="1698"/>
                    </scope>
                    <scope line="1701"/>
                </scope>
                <scope line="1704">
                    <scope line="1705">
                        <declaration name="source" type="Object[]" line="1706"/>
                    </scope>
                    <scope line="1709"/>
                    <declaration name="chain" type="Certificate[]" line="1714"/>
                    <scope line="1715">
                        <scope line="1716">
                            <scope line="1719">
                                <declaration name="form" type="MessageFormat" line="1720"/>
                                <declaration name="source" type="Object[]" line="1722"/>
                                <scope line="1724"/>
                                <scope line="1726"/>
                                <scope line="1728"/>
                            </scope>
                        </scope>
                        <scope line="1732"/>
                    </scope>
                </scope>
                <scope line="1740">
                    <declaration name="cert" type="Certificate" line="1742"/>
                    <declaration name="source" type="Object[]" line="1743"/>
                    <declaration name="mf" type="String" line="1744"/>
                    <scope line="1746"/>
                    <scope line="1749"/>
                    <scope line="1752"/>
                    <scope line="1754"/>
                </scope>
                <scope line="1759"/>
            </method>
            <javadoc line="1764">
                Load the srckeystore from a stream, used in -importkeystore                
                <returns>
                    the src KeyStore                    
                </returns>
            </javadoc>
            <method name="loadSourceKeyStore" type="KeyStore" line="1768">
                <comment line="1815">
                    always let keypass be storepass when using pkcs12                    
                </comment>
                <comment line="1827">
                    &quot;is&quot; already null in PKCS11                    
                </comment>
                <comment line="1836">
                    anti refactoring, copied from printWarning(),
                     but change 2 lines                    
                </comment>
                <declaration name="isPkcs11" type="boolean" line="1769"/>
                <declaration name="is" type="InputStream" line="1771"/>
                <scope line="1774">
                    <scope line="1775"/>
                </scope>
                <scope line="1782">
                    <scope line="1783">
                        <declaration name="srcksfile" type="File" line="1784"/>
                        <scope line="1785"/>
                    </scope>
                    <scope line="1791"/>
                </scope>
                <declaration name="store" type="KeyStore" line="1797"/>
                <scope line="1798">
                    <scope line="1799"/>
                    <scope line="1801"/>
                    <scope line="1807"/>
                    <scope line="1815">
                        <scope line="1817">
                            <declaration name="form" type="MessageFormat" line="1818"/>
                            <declaration name="source" type="Object[]" line="1820"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1827">
                    <scope line="1828"/>
                </scope>
                <scope line="1834"/>
            </method>
            <javadoc line="1850">
                import all keys and certs from importkeystore.
                  keep alias unchanged if no name conflict, otherwise, prompt.
                  keep keypass unchanged for keys                
            </javadoc>
            <method name="doImportKeyStore" type="void" line="1855">
                <comment line="1867">
                    Information display rule of -importkeystore
                     1. inside single, shows failure
                     2. inside all, shows sucess
                     3. inside all where there is a failure, prompt for continue
                     4. at the final of all, shows summary                    
                </comment>
                <scope line="1857"/>
                <scope line="1859">
                    <scope line="1860"/>
                </scope>
            </method>
            <javadoc line="1875">
                Import a single entry named alias from srckeystore                
                <returns>
                    1 if the import action succeed
                      0 if user choose to ignore an alias-dumplicated entry
                      2 if setEntry throws Exception                    
                </returns>
            </javadoc>
            <method name="doImportKeyStoreSingle" type="int" line="1882">
                <params>
                    <param name="srckeystore" type="KeyStore"/>
                    <param name="alias" type="String"/>
                </params>
                <comment line="1913">
                    According to keytool.html, &quot;The destination entry will be protected
                     using destkeypass. If destkeypass is not provided, the destination
                     entry will be protected with the source entry password.&quot;
                     so always try to protect with destKeyPass.                    
                </comment>
                <declaration name="newAlias" type="String" line="1884"/>
                <scope line="1886">
                    <declaration name="source" type="Object[]" line="1887"/>
                    <scope line="1888"/>
                    <scope line="1891">
                        <declaration name="reply" type="String" line="1892"/>
                        <scope line="1894">
                            <scope line="1897"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="objs" type="Pair&lt;Entry,char[]&gt;" line="1907"/>
                <declaration name="entry" type="Entry" line="1908"/>
                <declaration name="pp" type="PasswordProtection" line="1910"/>
                <scope line="1916"/>
                <scope line="1918"/>
                <scope line="1922"/>
                <scope line="1925">
                    <declaration name="source2" type="Object[]" line="1926"/>
                    <declaration name="form" type="MessageFormat" line="1927"/>
                </scope>
            </method>
            <method name="doImportKeyStoreAll" type="void" line="1934">
                <params>
                    <param name="srckeystore" type="KeyStore"/>
                </params>
                <declaration name="ok" type="int" line="1936"/>
                <declaration name="count" type="int" line="1937"/>
                <scope line="1939">
                    <declaration name="alias" type="String" line="1940"/>
                    <declaration name="result" type="int" line="1941"/>
                    <scope line="1942">
                        <declaration name="source" type="Object[]" line="1944"/>
                        <declaration name="form" type="MessageFormat" line="1945"/>
                    </scope>
                    <scope line="1947">
                        <scope line="1948">
                            <declaration name="reply" type="String" line="1949"/>
                            <scope line="1950"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="source" type="Object[]" line="1956"/>
                <declaration name="form" type="MessageFormat" line="1957"/>
            </method>
            <javadoc line="1962">
                Prints all keystore entries.                
            </javadoc>
            <method name="doPrintEntries" type="void" line="1967">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="1969"/>
                <scope line="1971"/>
                <declaration name="form" type="MessageFormat" line="1980"/>
                <declaration name="source" type="Object[]" line="1986"/>
                <scope line="1991">
                    <declaration name="alias" type="String" line="1992"/>
                    <scope line="1994"/>
                </scope>
            </method>
            <method name="e2i" type="Iterable<T>" line="2004">
                <params>
                    <param name="e" type="Enumeration<T>"/>
                </params>
                <anonymous_class line="2005">
                    <method name="iterator" type="Iterator<T>" line="2007">
                        <anonymous_class line="2008">
                            <method name="hasNext" type="boolean" line="2010"/>
                            <method name="next" type="T" line="2014"/>
                            <method name="remove" type="void" line="2017"/>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="2025">
                Loads CRLs from a source. This method is also called in JarSigner.                
                <param>
                    src the source, which means System.in if null, or a URI,
                      or a bare file path name                    
                </param>
            </javadoc>
            <method name="loadCRLs" type="Collection<? extends CRL>" line="2030">
                <params>
                    <param name="src" type="String"/>
                </params>
                <comment line="2040">
                    No input stream for LDAP                    
                </comment>
                <comment line="2049">
                    More likely a bare file path                    
                </comment>
                <comment line="2051">
                    More likely a protocol or network problem                    
                </comment>
                <comment line="2058">
                    Read the full stream before feeding to X509Factory,
                     otherwise, keytool -gencrl | keytool -printcrl
                     might not work properly, since -gencrl is slow
                     and there&apos;s no data in the pipe at the beginning.                    
                </comment>
                <comment line="2076">
                    must be LDAP, and uri is not null                    
                </comment>
                <declaration name="in" type="InputStream" line="2031"/>
                <declaration name="uri" type="URI" line="2032"/>
                <scope line="2033"/>
                <scope line="2035">
                    <scope line="2036">
                        <scope line="2038"/>
                        <scope line="2040"/>
                    </scope>
                    <scope line="2043">
                        <scope line="2044"/>
                        <scope line="2046">
                            <scope line="2047"/>
                            <scope line="2049"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="2055">
                    <scope line="2056">
                        <declaration name="bout" type="ByteArrayOutputStream" line="2061"/>
                        <declaration name="b" type="byte[]" line="2062"/>
                        <scope line="2063">
                            <declaration name="len" type="int" line="2064"/>
                        </scope>
                    </scope>
                    <scope line="2070">
                        <scope line="2071"/>
                    </scope>
                </scope>
                <scope line="2075">
                    <declaration name="path" type="String" line="2076"/>
                    <declaration name="h" type="LDAPCertStoreHelper" line="2078"/>
                    <declaration name="s" type="CertStore" line="2079"/>
                    <declaration name="sel" type="X509CRLSelector" line="2080"/>
                </scope>
            </method>
            <javadoc line="2086">
                Returns CRLs described in a X509Certificate&apos;s CRLDistributionPoints
                  Extension. Only those containing a general name of type URI are read.                
            </javadoc>
            <method name="readCRLsFromCert" type="List<CRL>" line="2091">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="2109">
                    Different name should point to same CRL                    
                </comment>
                <declaration name="crls" type="List&lt;CRL&gt;" line="2092"/>
                <declaration name="ext" type="CRLDistributionPointsExtension" line="2093"/>
                <scope line="2097">
                    <declaration name="names" type="GeneralNames" line="2098"/>
                    <scope line="2099">
                        <scope line="2100">
                            <scope line="2101">
                                <declaration name="uriName" type="URIName" line="2102"/>
                                <scope line="2103">
                                    <scope line="2104"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="verifyCRL" type="String" line="2117">
                <params>
                    <param name="ks" type="KeyStore"/>
                    <param name="crl" type="CRL"/>
                </params>
                <declaration name="xcrl" type="X509CRLImpl" line="2118"/>
                <declaration name="issuer" type="X500Principal" line="2119"/>
                <scope line="2120">
                    <declaration name="cert" type="Certificate" line="2121"/>
                    <scope line="2122">
                        <declaration name="xcert" type="X509Certificate" line="2123"/>
                        <scope line="2124">
                            <scope line="2125"/>
                            <scope line="2128"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="doPrintCRL" type="void" line="2137">
                <params>
                    <param name="src" type="String"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="2138">
                    <declaration name="issuer" type="String" line="2140"/>
                    <scope line="2141">
                        <scope line="2143"/>
                    </scope>
                    <scope line="2147">
                        <scope line="2149"/>
                    </scope>
                    <scope line="2153"/>
                </scope>
            </method>
            <method name="printCRL" type="void" line="2164">
                <params>
                    <param name="crl" type="CRL"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="2165">
                    <declaration name="xcrl" type="X509CRL" line="2166"/>
                </scope>
                <scope line="2170"/>
            </method>
            <method name="doPrintCertReq" type="void" line="2176">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <comment line="2214">
                    Just to see more, say, public key length...                    
                </comment>
                <declaration name="reader" type="BufferedReader" line="2178"/>
                <declaration name="sb" type="StringBuffer" line="2179"/>
                <declaration name="started" type="boolean" line="2180"/>
                <scope line="2181">
                    <declaration name="s" type="String" line="2182"/>
                    <scope line="2184">
                        <scope line="2185"/>
                    </scope>
                    <scope line="2188">
                        <scope line="2189"/>
                    </scope>
                </scope>
                <declaration name="req" type="PKCS10" line="2195"/>
                <declaration name="pkey" type="PublicKey" line="2197"/>
                <scope line="2200">
                    <declaration name="oid" type="ObjectIdentifier" line="2201"/>
                    <scope line="2202">
                        <declaration name="exts" type="CertificateExtensions" line="2203"/>
                        <scope line="2204"/>
                    </scope>
                    <scope line="2207"/>
                </scope>
                <scope line="2212"/>
            </method>
            <javadoc line="2217">
                Reads a certificate (or certificate chain) and prints its contents in
                  a human readable format.                
            </javadoc>
            <method name="printCertFromStream" type="void" line="2223">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="c" type="Collection&lt;? extends Certificate&gt;" line="2224"/>
                <scope line="2225"/>
                <scope line="2227"/>
                <scope line="2230"/>
                <declaration name="certs" type="Certificate[]" line="2233"/>
                <scope line="2234">
                    <declaration name="x509Cert" type="X509Certificate" line="2235"/>
                    <scope line="2236"/>
                    <scope line="2238"/>
                    <scope line="2241">
                        <declaration name="form" type="MessageFormat" line="2242"/>
                        <declaration name="source" type="Object[]" line="2244"/>
                    </scope>
                    <scope line="2249"/>
                </scope>
            </method>
            <method name="doPrintCert" type="void" line="2255">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <comment line="2269">
                    we just read. this will throw a SecurityException
                     if a signature/digest check fails. This also
                     populate the signers                    
                </comment>
                <comment line="2355">
                    Set to true where there&apos;s something to print                    
                </comment>
                <comment line="2369">
                    HTTPS instead of raw SSL, so that -Dhttps.proxyHost and
                     -Dhttps.proxyPort can be used. Since we only go through
                     the handshake process, an HTTPS server is not needed.
                     This program should be able to deal with any SSL-based
                     network service.                    
                </comment>
                <comment line="2380">
                    If the certs are not printed out, we consider it an error even
                     if the URL connection is successful.                    
                </comment>
                <scope line="2256">
                    <declaration name="jf" type="JarFile" line="2257"/>
                    <declaration name="entries" type="Enumeration&lt;JarEntry&gt;" line="2258"/>
                    <declaration name="ss" type="Set&lt;CodeSigner&gt;" line="2259"/>
                    <declaration name="buffer" type="byte[]" line="2260"/>
                    <declaration name="pos" type="int" line="2261"/>
                    <scope line="2262">
                        <declaration name="je" type="JarEntry" line="2263"/>
                        <declaration name="is" type="InputStream" line="2264"/>
                        <scope line="2265">
                            <scope line="2267"/>
                        </scope>
                        <scope line="2272">
                            <scope line="2273"/>
                        </scope>
                        <declaration name="signers" type="CodeSigner[]" line="2277"/>
                        <scope line="2278">
                            <scope line="2279">
                                <scope line="2280">
                                    <scope line="2287">
                                        <declaration name="x" type="X509Certificate" line="2288"/>
                                        <scope line="2289"/>
                                        <scope line="2292"/>
                                    </scope>
                                    <declaration name="ts" type="Timestamp" line="2297"/>
                                    <scope line="2298">
                                        <scope line="2301">
                                            <declaration name="x" type="X509Certificate" line="2302"/>
                                            <scope line="2303"/>
                                            <scope line="2306"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2317"/>
                </scope>
                <scope line="2320">
                    <declaration name="sc" type="SSLContext" line="2321"/>
                    <declaration name="certPrinted" type="boolean[]" line="2322"/>
                    <anonymous_class line="2324">
                        <method name="getAcceptedIssuers" type="java.security.cert.X509Certificate[]" line="2326"/>
                        <method name="checkClientTrusted" type="void" line="2331">
                            <params>
                                <param name="certs" type="java.security.cert.X509Certificate[]"/>
                                <param name="authType" type="String"/>
                            </params>
                        </method>
                        <method name="checkServerTrusted" type="void" line="2335">
                            <params>
                                <param name="certs" type="java.security.cert.X509Certificate[]"/>
                                <param name="authType" type="String"/>
                            </params>
                            <comment line="2355">
                                Set to true where there&apos;s something to print                                
                            </comment>
                            <scope line="2336">
                                <declaration name="cert" type="X509Certificate" line="2337"/>
                                <scope line="2338">
                                    <scope line="2339"/>
                                    <scope line="2341"/>
                                </scope>
                                <scope line="2347">
                                    <scope line="2348"/>
                                </scope>
                            </scope>
                            <scope line="2355"/>
                        </method>
                    </anonymous_class>
                    <anonymous_class line="2363">
                        <method name="verify" type="boolean" line="2364">
                            <params>
                                <param name="hostname" type="String"/>
                                <param name="session" type="SSLSession"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="ex" type="Exception" line="2373"/>
                    <scope line="2374"/>
                    <scope line="2376"/>
                    <scope line="2381">
                        <declaration name="e" type="Exception" line="2382"/>
                        <scope line="2384"/>
                    </scope>
                </scope>
                <scope line="2389">
                    <declaration name="inStream" type="InputStream" line="2390"/>
                    <scope line="2391"/>
                    <scope line="2394"/>
                    <scope line="2396">
                        <scope line="2397"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2403">
                Creates a self-signed certificate, and stores it as a single-element
                  certificate chain.                
            </javadoc>
            <method name="doSelfCert" type="void" line="2409">
                <params>
                    <param name="alias" type="String"/>
                    <param name="dname" type="String"/>
                    <param name="sigAlgName" type="String"/>
                </params>
                <comment line="2420">
                    Determine the signature algorithm                    
                </comment>
                <comment line="2425">
                    Get the old certificate                    
                </comment>
                <comment line="2440">
                    convert to X509CertImpl, so that we can modify selected fields
                     (no public APIs available yet)                    
                </comment>
                <comment line="2448">
                    Extend its validity                    
                </comment>
                <comment line="2456">
                    Make new serial number                    
                </comment>
                <comment line="2460">
                    Set owner and issuer fields                    
                </comment>
                <comment line="2463">
                    Get the owner name from the certificate                    
                </comment>
                <comment line="2467">
                    Use the owner name specified at the command line                    
                </comment>
                <comment line="2472">
                    Make issuer same as owner (self-signed!)                    
                </comment>
                <comment line="2476">
                    The inner and outer signature algorithms have to match.
                     The way we achieve that is really ugly, but there seems to be no
                     other solution: We first sign the cert, then retrieve the
                     outer sigalg and use it to set the inner sigalg                    
                </comment>
                <comment line="2496">
                    Sign the new certificate                    
                </comment>
                <comment line="2500">
                    Store the new certificate as a single-element certificate chain                    
                </comment>
                <scope line="2410"/>
                <declaration name="objs" type="Pair&lt;Key,char[]&gt;" line="2414"/>
                <declaration name="privKey" type="PrivateKey" line="2415"/>
                <scope line="2420"/>
                <declaration name="oldCert" type="Certificate" line="2425"/>
                <scope line="2426">
                    <declaration name="form" type="MessageFormat" line="2427"/>
                    <declaration name="source" type="Object[]" line="2429"/>
                </scope>
                <scope line="2432">
                    <declaration name="form" type="MessageFormat" line="2433"/>
                    <declaration name="source" type="Object[]" line="2435"/>
                </scope>
                <declaration name="encoded" type="byte[]" line="2441"/>
                <declaration name="certImpl" type="X509CertImpl" line="2442"/>
                <declaration name="certInfo" type="X509CertInfo" line="2443"/>
                <declaration name="firstDate" type="Date" line="2448"/>
                <declaration name="lastDate" type="Date" line="2449"/>
                <declaration name="interval" type="CertificateValidity" line="2451"/>
                <declaration name="owner" type="X500Name" line="2460"/>
                <scope line="2461"/>
                <scope line="2465"/>
                <declaration name="newCert" type="X509CertImpl" line="2479"/>
                <declaration name="sigAlgid" type="AlgorithmId" line="2481"/>
                <declaration name="ext" type="CertificateExtensions" line="2488"/>
                <scope line="2504"/>
            </method>
            <javadoc line="2511">
                Processes a certificate reply from a certificate authority.
                  &lt;p&gt;Builds a certificate chain on top of the certificate reply,
                  using trusted certificates from the keystore. The chain is complete
                  after a self-signed certificate has been encountered. The self-signed
                  certificate is considered a root certificate authority, and is stored
                  at the end of the chain.
                  &lt;p&gt;The newly generated chain replaces the old chain associated with the
                  key entry.                
                <return>
                    true if the certificate reply was installed, otherwise false.                    
                </return>
            </javadoc>
            <method name="installReply" type="boolean" line="2527">
                <params>
                    <param name="alias" type="String"/>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="2547">
                    Read the certificates in the reply                    
                </comment>
                <comment line="2555">
                    single-cert reply                    
                </comment>
                <comment line="2558">
                    cert-chain reply (e.g., PKCS#7)                    
                </comment>
                <comment line="2562">
                    Now store the newly established chain in the keystore. The new
                     chain replaces the old one.                    
                </comment>
                <scope line="2528"/>
                <declaration name="objs" type="Pair&lt;Key,char[]&gt;" line="2532"/>
                <declaration name="privKey" type="PrivateKey" line="2533"/>
                <scope line="2534"/>
                <declaration name="userCert" type="Certificate" line="2538"/>
                <scope line="2539">
                    <declaration name="form" type="MessageFormat" line="2540"/>
                    <declaration name="source" type="Object[]" line="2542"/>
                </scope>
                <declaration name="c" type="Collection&lt;? extends Certificate&gt;" line="2547"/>
                <scope line="2548"/>
                <declaration name="replyCerts" type="Certificate[]" line="2551"/>
                <declaration name="newChain" type="Certificate[]" line="2552"/>
                <scope line="2553"/>
                <scope line="2556"/>
                <scope line="2563"/>
                <scope line="2568"/>
            </method>
            <javadoc line="2573">
                Imports a certificate and adds it to the list of trusted certificates.                
                <return>
                    true if the certificate was added, otherwise false.                    
                </return>
            </javadoc>
            <method name="addTrustedCert" type="boolean" line="2580">
                <params>
                    <param name="alias" type="String"/>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="2592">
                    Read the certificate                    
                </comment>
                <comment line="2602">
                    if certificate is self-signed, make sure it verifies                    
                </comment>
                <comment line="2614">
                    check if cert already exists in keystore                    
                </comment>
                <comment line="2635">
                    Print the cert and ask user if they really want to add
                     it to their keystore                    
                </comment>
                <comment line="2651">
                    Try to establish trust chain                    
                </comment>
                <comment line="2659">
                    Print the cert and ask user if they really want to add it to
                     their keystore                    
                </comment>
                <scope line="2581"/>
                <scope line="2584">
                    <declaration name="form" type="MessageFormat" line="2585"/>
                    <declaration name="source" type="Object[]" line="2587"/>
                </scope>
                <declaration name="cert" type="X509Certificate" line="2592"/>
                <scope line="2593"/>
                <scope line="2595"/>
                <scope line="2597"/>
                <declaration name="selfSigned" type="boolean" line="2602"/>
                <scope line="2603"/>
                <scope line="2608"/>
                <declaration name="reply" type="String" line="2614"/>
                <declaration name="trustalias" type="String" line="2615"/>
                <scope line="2616">
                    <declaration name="form" type="MessageFormat" line="2617"/>
                    <declaration name="source" type="Object[]" line="2619"/>
                </scope>
                <scope line="2623">
                    <scope line="2625">
                        <declaration name="form" type="MessageFormat" line="2626"/>
                        <declaration name="source" type="Object[]" line="2628"/>
                    </scope>
                    <scope line="2633"/>
                </scope>
                <scope line="2641">
                    <scope line="2642"/>
                    <scope line="2645"/>
                </scope>
                <scope line="2651">
                    <declaration name="chain" type="Certificate[]" line="2652"/>
                    <scope line="2653"/>
                </scope>
                <scope line="2657">
                    <scope line="2663"/>
                    <scope line="2666"/>
                </scope>
            </method>
            <javadoc line="2674">
                Prompts user for new password. New password must be different from
                  old one.                
                <param>
                    prompt the message that gets prompted on the screen                    
                </param>
                <param>
                    oldPasswd the current (i.e., old) password                    
                </param>
            </javadoc>
            <method name="getNewPasswd" type="char[]" line="2683">
                <params>
                    <param name="prompt" type="String"/>
                    <param name="oldPasswd" type="char[]"/>
                </params>
                <declaration name="entered" type="char[]" line="2684"/>
                <declaration name="reentered" type="char[]" line="2685"/>
                <scope line="2687">
                    <declaration name="form" type="MessageFormat" line="2688"/>
                    <declaration name="source" type="Object[]" line="2690"/>
                    <scope line="2694"/>
                    <scope line="2697"/>
                    <scope line="2699">
                        <declaration name="src" type="Object[]" line="2702"/>
                        <scope line="2706"/>
                        <scope line="2709"/>
                    </scope>
                    <scope line="2714"/>
                    <scope line="2718"/>
                </scope>
            </method>
            <javadoc line="2726">
                Prompts user for alias name.                
                <param>
                    prompt the {0} of "Enter {0} alias name:  " in prompt line                    
                </param>
                <returns>
                    the string entered by the user, without the \n at the end                    
                </returns>
            </javadoc>
            <method name="getAlias" type="String" line="2731">
                <params>
                    <param name="prompt" type="String"/>
                </params>
                <scope line="2732">
                    <declaration name="form" type="MessageFormat" line="2733"/>
                    <declaration name="source" type="Object[]" line="2735"/>
                </scope>
                <scope line="2737"/>
            </method>
            <javadoc line="2744">
                Prompts user for an input string from the command line (System.in)                
                <prompt>
                    the prompt string printed                    
                </prompt>
                <returns>
                    the string entered by the user, without the \n at the end                    
                </returns>
            </javadoc>
            <method name="inputStringFromStdin" type="String" line="2749">
                <params>
                    <param name="prompt" type="String"/>
                </params>
            </method>
            <javadoc line="2755">
                Prompts user for key password. User may select to choose the same
                  password (&lt;code&gt;otherKeyPass&lt;/code&gt;) as for &lt;code&gt;otherAlias&lt;/code&gt;.                
            </javadoc>
            <method name="getKeyPasswd" type="char[]" line="2762">
                <params>
                    <param name="alias" type="String"/>
                    <param name="otherAlias" type="String"/>
                    <param name="otherKeyPass" type="char[]"/>
                </params>
                <declaration name="count" type="int" line="2763"/>
                <declaration name="keyPass" type="char[]" line="2764"/>
                <scope line="2766">
                    <scope line="2767">
                        <declaration name="form" type="MessageFormat" line="2768"/>
                        <declaration name="source" type="Object[]" line="2770"/>
                        <declaration name="src" type="Object[]" line="2775"/>
                    </scope>
                    <scope line="2777">
                        <declaration name="form" type="MessageFormat" line="2778"/>
                        <declaration name="source" type="Object[]" line="2780"/>
                    </scope>
                    <scope line="2786"/>
                </scope>
                <scope line="2792"/>
            </method>
            <javadoc line="2799">
                Prints a certificate in a human readable format.                
            </javadoc>
            <method name="printX509Cert" type="void" line="2804">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <comment line="2806">
                    out.println(&quot;Owner: &quot;
                    + cert.getSubjectDN().toString()
                    + &quot;\n&quot;
                    + &quot;Issuer: &quot;
                    + cert.getIssuerDN().toString()
                    + &quot;\n&quot;
                    + &quot;Serial number: &quot; + cert.getSerialNumber().toString(16)
                    + &quot;\n&quot;
                    + &quot;Valid from: &quot; + cert.getNotBefore().toString()
                    + &quot; until: &quot; + cert.getNotAfter().toString()
                    + &quot;\n&quot;
                    + &quot;Certificate fingerprints:\n&quot;
                    + &quot;\t MD5:  &quot; + getCertFingerPrint(&quot;MD5&quot;, cert)
                    + &quot;\n&quot;
                    + &quot;\t SHA1: &quot; + getCertFingerPrint(&quot;SHA1&quot;, cert));                    
                </comment>
                <declaration name="form" type="MessageFormat" line="2823"/>
                <declaration name="source" type="Object[]" line="2825"/>
                <scope line="2838">
                    <declaration name="impl" type="X509CertImpl" line="2839"/>
                    <declaration name="certInfo" type="X509CertInfo" line="2840"/>
                    <declaration name="exts" type="CertificateExtensions" line="2843"/>
                    <scope line="2845"/>
                </scope>
            </method>
            <method name="printExtensions" type="void" line="2852">
                <params>
                    <param name="title" type="String"/>
                    <param name="exts" type="CertificateExtensions"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="extnum" type="int" line="2853"/>
                <declaration name="i1" type="Iterator&lt;Extension&gt;" line="2854"/>
                <declaration name="i2" type="Iterator&lt;Extension&gt;" line="2855"/>
                <scope line="2856">
                    <declaration name="ext" type="Extension" line="2857"/>
                    <scope line="2858"/>
                    <scope line="2864">
                        <declaration name="v" type="byte[]" line="2865"/>
                        <scope line="2866"/>
                        <scope line="2868"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2877">
                Returns true if the certificate is self-signed, false otherwise.                
            </javadoc>
            <method name="isSelfSigned" type="boolean" line="2880">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
            </method>
            <method name="signedBy" type="boolean" line="2884">
                <params>
                    <param name="end" type="X509Certificate"/>
                    <param name="ca" type="X509Certificate"/>
                </params>
                <scope line="2885"/>
                <scope line="2888"/>
                <scope line="2891"/>
            </method>
            <javadoc line="2896">
                Locates a signer for a given certificate from a given keystore and
                  returns the signer&apos;s certificate.                
                <param>
                    cert the certificate whose signer is searched, not null                    
                </param>
                <param>
                    ks the keystore to search with, not null                    
                </param>
                <return>
                    <code>cert</code> itself if it's already inside <code>ks</code>,
                      or a certificate inside <code>ks</code> who signs <code>cert</code>,
                      or null otherwise.                    
                </return>
            </javadoc>
            <method name="getTrustedSigner" type="Certificate" line="2906">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="ks" type="KeyStore"/>
                </params>
                <comment line="2920">
                    Not verified, skip to the next one                    
                </comment>
                <scope line="2907"/>
                <scope line="2911">
                    <declaration name="name" type="String" line="2912"/>
                    <declaration name="trustedCert" type="Certificate" line="2913"/>
                    <scope line="2914">
                        <scope line="2915"/>
                        <scope line="2918"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2926">
                Gets an X.500 name suitable for inclusion in a certification request.                
            </javadoc>
            <method name="getX500Name" type="X500Name" line="2929">
                <declaration name="in" type="BufferedReader" line="2930"/>
                <declaration name="commonName" type="String" line="2932"/>
                <declaration name="organizationalUnit" type="String" line="2933"/>
                <declaration name="organization" type="String" line="2934"/>
                <declaration name="city" type="String" line="2935"/>
                <declaration name="state" type="String" line="2936"/>
                <declaration name="country" type="String" line="2937"/>
                <declaration name="name" type="X500Name" line="2938"/>
                <declaration name="userInput" type="String" line="2939"/>
                <declaration name="maxRetry" type="int" line="2941"/>
                <scope line="2942">
                    <scope line="2943"/>
                    <declaration name="form" type="MessageFormat" line="2969"/>
                    <declaration name="source" type="Object[]" line="2971"/>
                </scope>
            </method>
            <method name="inputString" type="String" line="2984">
                <params>
                    <param name="in" type="BufferedReader"/>
                    <param name="prompt" type="String"/>
                    <param name="defaultValue" type="String"/>
                </params>
                <declaration name="form" type="MessageFormat" line="2986"/>
                <declaration name="source" type="Object[]" line="2988"/>
                <declaration name="value" type="String" line="2992"/>
                <scope line="2993"/>
            </method>
            <javadoc line="2999">
                Writes an X.509 certificate in base64 or binary encoding to an output
                  stream.                
            </javadoc>
            <method name="dumpCert" type="void" line="3005">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <comment line="3013">
                    binary                    
                </comment>
                <scope line="3006">
                    <declaration name="encoder" type="BASE64Encoder" line="3007"/>
                </scope>
                <scope line="3011"/>
            </method>
            <javadoc line="3016">
                Converts a byte to hex digit and writes to the supplied buffer                
            </javadoc>
            <method name="byte2hex" type="void" line="3019">
                <params>
                    <param name="b" type="byte"/>
                    <param name="buf" type="StringBuffer"/>
                </params>
                <declaration name="hexChars" type="char[]" line="3020"/>
                <declaration name="high" type="int" line="3022"/>
                <declaration name="low" type="int" line="3023"/>
            </method>
            <javadoc line="3028">
                Converts a byte array to hex string                
            </javadoc>
            <method name="toHexString" type="String" line="3031">
                <params>
                    <param name="block" type="byte[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="3032"/>
                <declaration name="len" type="int" line="3033"/>
                <scope line="3034">
                    <scope line="3036"/>
                </scope>
            </method>
            <javadoc line="3043">
                Recovers (private) key associated with given alias.                
                <return>
                    an array of objects, where the 1st element in the array is the
                      recovered private key, and the 2nd element is the password used to
                      recover it.                    
                </return>
            </javadoc>
            <method name="recoverKey" type="Pair<Key,char[]>" line="3053">
                <params>
                    <param name="alias" type="String"/>
                    <param name="storePass" type="char[]"/>
                    <param name="keyPass" type="char[]"/>
                </params>
                <comment line="3072">
                    Try to recover the key using the keystore password                    
                </comment>
                <comment line="3079">
                    Did not work out, so prompt user for key password                    
                </comment>
                <declaration name="key" type="Key" line="3054"/>
                <scope line="3056">
                    <declaration name="form" type="MessageFormat" line="3057"/>
                    <declaration name="source" type="Object[]" line="3059"/>
                </scope>
                <scope line="3063">
                    <declaration name="form" type="MessageFormat" line="3064"/>
                    <declaration name="source" type="Object[]" line="3066"/>
                </scope>
                <scope line="3070">
                    <scope line="3072"/>
                    <scope line="3077">
                        <scope line="3079"/>
                        <scope line="3082"/>
                    </scope>
                </scope>
                <scope line="3086"/>
            </method>
            <javadoc line="3093">
                Recovers entry associated with given alias.                
                <return>
                    an array of objects, where the 1st element in the array is the
                      recovered entry, and the 2nd element is the password used to
                      recover it (null if no password).                    
                </return>
            </javadoc>
            <method name="recoverEntry" type="Pair<Entry,char[]>" line="3103">
                <params>
                    <param name="ks" type="KeyStore"/>
                    <param name="alias" type="String"/>
                    <param name="pstore" type="char[]"/>
                    <param name="pkey" type="char[]"/>
                </params>
                <comment line="3117">
                    First attempt to access entry without key password
                     (PKCS11 entry or trusted certificate entry, for example)                    
                </comment>
                <comment line="3126">
                    should not happen, but a possibility                    
                </comment>
                <comment line="3130">
                    entry is protected                    
                </comment>
                <comment line="3134">
                    try provided key password                    
                </comment>
                <comment line="3141">
                    try store pass                    
                </comment>
                <comment line="3150">
                    P12 keystore currently does not support separate
                     store and entry passwords                    
                </comment>
                <comment line="3156">
                    prompt for entry password                    
                </comment>
                <scope line="3105">
                    <declaration name="form" type="MessageFormat" line="3106"/>
                    <declaration name="source" type="Object[]" line="3108"/>
                </scope>
                <declaration name="pp" type="PasswordProtection" line="3112"/>
                <declaration name="entry" type="Entry" line="3113"/>
                <scope line="3115"/>
                <scope line="3121">
                    <scope line="3124"/>
                    <scope line="3131"/>
                    <scope line="3138">
                        <scope line="3142"/>
                        <scope line="3146">
                            <scope line="3147"/>
                            <scope line="3153"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="3167">
                Gets the requested finger print of the certificate.                
            </javadoc>
            <method name="getCertFingerPrint" type="String" line="3172">
                <params>
                    <param name="mdAlg" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="encCertInfo" type="byte[]" line="3173"/>
                <declaration name="md" type="MessageDigest" line="3174"/>
                <declaration name="digest" type="byte[]" line="3175"/>
            </method>
            <javadoc line="3179">
                Prints warning about missing integrity check.                
            </javadoc>
            <method name="printWarning" type="void" line="3182"/>
            <javadoc line="3193">
                Validates chain in certification reply, and returns the ordered
                  elements of the chain (with user certificate first, and root
                  certificate last in the array).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    userCert the user certificate of the alias                    
                </param>
                <param>
                    replyCerts the chain provided in the reply                    
                </param>
            </javadoc>
            <method name="validateReply" type="Certificate[]" line="3206">
                <params>
                    <param name="alias" type="String"/>
                    <param name="userCert" type="Certificate"/>
                    <param name="replyCerts" type="Certificate[]"/>
                </params>
                <comment line="3208">
                    order the certs in the reply (bottom-up).
                     we know that all certs in the reply are of type X.509, because
                     we parsed them using an X.509 certificate factory                    
                </comment>
                <comment line="3232">
                    find a cert in the reply who signs thisCert                    
                </comment>
                <comment line="3253">
                    do we trust the cert at the top?                    
                </comment>
                <comment line="3273">
                    append the root CA cert to the chain                    
                </comment>
                <declaration name="i" type="int" line="3210"/>
                <declaration name="userPubKey" type="PublicKey" line="3211"/>
                <scope line="3212">
                    <scope line="3213"/>
                </scope>
                <scope line="3217">
                    <declaration name="form" type="MessageFormat" line="3218"/>
                    <declaration name="source" type="Object[]" line="3220"/>
                </scope>
                <declaration name="tmpCert" type="Certificate" line="3224"/>
                <declaration name="thisCert" type="X509Certificate" line="3228"/>
                <scope line="3230">
                    <declaration name="j" type="int" line="3232"/>
                    <scope line="3233">
                        <scope line="3234"/>
                    </scope>
                    <scope line="3242"/>
                </scope>
                <scope line="3248"/>
                <declaration name="topCert" type="Certificate" line="3253"/>
                <declaration name="root" type="Certificate" line="3254"/>
                <scope line="3255"/>
                <scope line="3258">
                    <declaration name="reply" type="String" line="3265"/>
                    <scope line="3267"/>
                </scope>
                <scope line="3270">
                    <scope line="3271">
                        <declaration name="tmpCerts" type="Certificate[]" line="3273"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3285">
                Establishes a certificate chain (using trusted certificates in the
                  keystore), starting with the user certificate
                  and ending at a self-signed certificate found in the keystore.                
                <param>
                    userCert the user certificate of the alias                    
                </param>
                <param>
                    certToVerify the single certificate provided in the reply                    
                </param>
            </javadoc>
            <method name="establishCertChain" type="Certificate[]" line="3296">
                <params>
                    <param name="userCert" type="Certificate"/>
                    <param name="certToVerify" type="Certificate"/>
                </params>
                <comment line="3299">
                    Make sure that the public key of the certificate reply matches
                     the original public key in the keystore                    
                </comment>
                <comment line="3308">
                    If the two certs are identical, we&apos;re done: no need to import
                     anything                    
                </comment>
                <comment line="3316">
                    Build a hash table of all certificates in the keystore.
                     Use the subject distinguished name as the key into the hash table.
                     All certificates associated with the same subject distinguished
                     name are stored in the same hash table entry as a vector.                    
                </comment>
                <comment line="3334">
                    start building chain                    
                </comment>
                <comment line="3338">
                    buildChain() returns chain with self-signed root-cert first and
                     user-cert last, so we need to invert the chain before we store
                     it                    
                </comment>
                <scope line="3297">
                    <declaration name="origPubKey" type="PublicKey" line="3300"/>
                    <declaration name="replyPubKey" type="PublicKey" line="3301"/>
                    <scope line="3302"/>
                    <scope line="3309"/>
                </scope>
                <declaration name="certs" type="Hashtable&lt;Principal,Vector&lt;Certificate&gt;&gt;" line="3319"/>
                <scope line="3320"/>
                <scope line="3324">
                    <scope line="3325">
                        <scope line="3326"/>
                    </scope>
                </scope>
                <declaration name="chain" type="Vector&lt;Certificate&gt;" line="3334"/>
                <scope line="3335">
                    <declaration name="newChain" type="Certificate[]" line="3336"/>
                    <declaration name="j" type="int" line="3340"/>
                    <scope line="3341"/>
                </scope>
                <scope line="3346"/>
            </method>
            <javadoc line="3352">
                Recursively tries to establish chain from pool of trusted certs.                
                <param>
                    certToVerify the cert that needs to be verified.                    
                </param>
                <param>
                    chain the chain that's being built.                    
                </param>
                <param>
                    certs the pool of trusted certs                    
                </param>
                <return>
                    true if successful, false otherwise.                    
                </return>
            </javadoc>
            <method name="buildChain" type="boolean" line="3363">
                <params>
                    <param name="certToVerify" type="X509Certificate"/>
                    <param name="chain" type="Vector<Certificate>"/>
                    <param name="certs" type="Hashtable<Principal,Vector<Certificate>>"/>
                </params>
                <comment line="3367">
                    reached self-signed root cert;
                     no verification needed because it&apos;s trusted.                    
                </comment>
                <comment line="3373">
                    Get the issuer&apos;s certificate(s)                    
                </comment>
                <comment line="3379">
                    Try out each certificate in the vector, until we find one
                     whose public key verifies the signature of the certificate
                     in question.                    
                </comment>
                <declaration name="issuer" type="Principal" line="3364"/>
                <scope line="3365"/>
                <declaration name="vec" type="Vector&lt;Certificate&gt;" line="3373"/>
                <scope line="3374"/>
                <scope line="3382">
                    <declaration name="issuerCert" type="X509Certificate" line="3383"/>
                    <declaration name="issuerPubKey" type="PublicKey" line="3385"/>
                    <scope line="3386"/>
                    <scope line="3388"/>
                    <scope line="3391"/>
                </scope>
            </method>
            <javadoc line="3399">
                Prompts user for yes/no decision.                
                <return>
                    the user's decision, can only be "YES" or "NO"                    
                </return>
            </javadoc>
            <method name="getYesNoReply" type="String" line="3406">
                <params>
                    <param name="prompt" type="String"/>
                </params>
                <declaration name="reply" type="String" line="3407"/>
                <declaration name="maxRetry" type="int" line="3408"/>
                <scope line="3409">
                    <scope line="3410"/>
                    <scope line="3420"/>
                    <scope line="3423"/>
                    <scope line="3425"/>
                </scope>
            </method>
            <javadoc line="3433">
                Returns the keystore with the configured CA certificates.                
            </javadoc>
            <method name="getCacertsKeyStore" type="KeyStore" line="3438">
                <declaration name="sep" type="String" line="3439"/>
                <declaration name="file" type="File" line="3440"/>
                <scope line="3443"/>
                <declaration name="fis" type="FileInputStream" line="3446"/>
                <declaration name="caks" type="KeyStore" line="3447"/>
                <scope line="3448"/>
                <scope line="3452">
                    <scope line="3453"/>
                </scope>
            </method>
            <javadoc line="3460">
                Stores the (leaf) certificates of a keystore in a hashtable.
                  All certs belonging to the same CA are stored in a vector that
                  in turn is stored in the hashtable, keyed by the CA&apos;s subject DN                
            </javadoc>
            <method name="keystorecerts2Hashtable" type="void" line="3467">
                <params>
                    <param name="ks" type="KeyStore"/>
                    <param name="hash" type="Hashtable<Principal,Vector<Certificate>>"/>
                </params>
                <scope line="3470">
                    <declaration name="alias" type="String" line="3471"/>
                    <declaration name="cert" type="Certificate" line="3472"/>
                    <scope line="3473">
                        <declaration name="subjectDN" type="Principal" line="3474"/>
                        <declaration name="vec" type="Vector&lt;Certificate&gt;" line="3475"/>
                        <scope line="3476"/>
                        <scope line="3479">
                            <scope line="3480"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="3489">
                Returns the issue time that&apos;s specified the -startdate option                
                <param>
                    s the value of -startdate option                    
                </param>
            </javadoc>
            <method name="getStartDate" type="Date" line="3493">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="3504">
                    Form 1: ([+-]nnn[ymdHMS])+                    
                </comment>
                <comment line="3535">
                    Form 2: [yyyy/mm/dd] [HH:MM:SS]                    
                </comment>
                <declaration name="c" type="Calendar" line="3494"/>
                <scope line="3495">
                    <declaration name="ioe" type="IOException" line="3496"/>
                    <declaration name="len" type="int" line="3498"/>
                    <scope line="3499"/>
                    <scope line="3502">
                        <declaration name="start" type="int" line="3504"/>
                        <scope line="3505">
                            <declaration name="sign" type="int" line="3506"/>
                            <declaration name="i" type="int" line="3512"/>
                            <scope line="3513">
                                <declaration name="ch" type="char" line="3514"/>
                            </scope>
                            <declaration name="number" type="int" line="3518"/>
                            <declaration name="unit" type="int" line="3520"/>
                        </scope>
                    </scope>
                    <scope line="3533">
                        <declaration name="date" type="String" line="3535"/>
                        <scope line="3536"/>
                        <scope line="3541"/>
                        <scope line="3543"/>
                        <scope line="3545"/>
                        <scope line="3548">
                            <scope line="3549"/>
                            <scope line="3553"/>
                        </scope>
                        <scope line="3557">
                            <scope line="3558"/>
                            <scope line="3563"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="3572">
                Match a command (may be abbreviated) with a command set.                
                <param>
                    s the command provided                    
                </param>
                <param>
                    list the legal command set. If there is a null, commands after it
                      are regarded experimental, which means they are supported but their
                      existence should not be revealed to user.                    
                </param>
                <return>
                    the position of a single match, or -1 if none matched                    
                </return>
                <throws>
                    Exception if s is ambiguous                    
                </throws>
            </javadoc>
            <method name="oneOf" type="int" line="3581">
                <params>
                    <param name="s" type="String"/>
                    <param name="list" type="String"/>
                </params>
                <comment line="3618">
                    If multiple matches is in experimental commands, ignore them                    
                </comment>
                <declaration name="match" type="int[]" line="3582"/>
                <declaration name="nmatch" type="int" line="3583"/>
                <declaration name="experiment" type="int" line="3584"/>
                <scope line="3585">
                    <declaration name="one" type="String" line="3586"/>
                    <scope line="3587"/>
                    <scope line="3592"/>
                    <scope line="3594">
                        <declaration name="sb" type="StringBuffer" line="3595"/>
                        <declaration name="first" type="boolean" line="3596"/>
                        <scope line="3597">
                            <scope line="3598"/>
                            <scope line="3601">
                                <scope line="3602"/>
                            </scope>
                        </scope>
                        <scope line="3607"/>
                    </scope>
                </scope>
                <scope line="3612"/>
                <scope line="3614"/>
                <scope line="3616">
                    <scope line="3618"/>
                    <declaration name="sb" type="StringBuffer" line="3621"/>
                    <declaration name="form" type="MessageFormat" line="3622"/>
                    <declaration name="source" type="Object[]" line="3624"/>
                    <scope line="3627"/>
                </scope>
            </method>
            <javadoc line="3635">
                Create a GeneralName object from known types                
                <param>
                    t one of 5 known types                    
                </param>
                <param>
                    v value                    
                </param>
                <return>
                    which one                    
                </return>
            </javadoc>
            <method name="createGeneralName" type="GeneralName" line="3642">
                <params>
                    <param name="t" type="String"/>
                    <param name="v" type="String"/>
                </params>
                <comment line="3655">
                    4                    
                </comment>
                <declaration name="gn" type="GeneralNameInterface" line="3643"/>
                <declaration name="p" type="int" line="3644"/>
                <scope line="3645"/>
            </method>
            <declaration name="extSupported" type="String[]" line="3659"/>
            <method name="findOidForExtName" type="ObjectIdentifier" line="3672">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="3686">
                Create X509v3 extensions from a string representation. Note that the
                  SubjectKeyIdentifierExtension will always be created non-critical besides
                  the extension requested in the &lt;code&gt;extstr&lt;/code&gt; argument.                
                <param>
                    reqex the requested extensions, can be null, used for -gencert                    
                </param>
                <param>
                    ext the original extensions, can be null, used for -selfcert                    
                </param>
                <param>
                    extstrs -ext values, Read keytool doc                    
                </param>
                <param>
                    pkey the public key for the certificate                    
                </param>
                <param>
                    akey the public key for the authority (issuer)                    
                </param>
                <return>
                    the created CertificateExtensions                    
                </return>
            </javadoc>
            <method name="createV3Extensions" type="CertificateExtensions" line="3703">
                <params>
                    <param name="reqex" type="CertificateExtensions"/>
                    <param name="ext" type="CertificateExtensions"/>
                    <param name="extstrs" type="List<String>"/>
                    <param name="pkey" type="PublicKey"/>
                    <param name="akey" type="PublicKey"/>
                </params>
                <comment line="3707">
                    This should not happen                    
                </comment>
                <comment line="3712">
                    name{:critical}{=value}
                     Honoring requested extensions                    
                </comment>
                <comment line="3719">
                    First check existence of &quot;all&quot;                    
                </comment>
                <comment line="3721">
                    we know ext was null                    
                </comment>
                <comment line="3723">
                    one by one for others                    
                </comment>
                <comment line="3727">
                    add or remove                    
                </comment>
                <comment line="3729">
                    -1, unchanged, 0 crtical, 1 non-critical                    
                </comment>
                <comment line="3792">
                    BC                    
                </comment>
                <comment line="3798">
                    the abbr format                    
                </comment>
                <comment line="3802">
                    ca:true,pathlen:1                    
                </comment>
                <comment line="3825">
                    KU                    
                </comment>
                <comment line="3830">
                    (0),                    
                </comment>
                <comment line="3831">
                    (1)                    
                </comment>
                <comment line="3832">
                    (2),                    
                </comment>
                <comment line="3833">
                    (3),                    
                </comment>
                <comment line="3834">
                    (4),                    
                </comment>
                <comment line="3835">
                    (5),                    
                </comment>
                <comment line="3836">
                    (6),                    
                </comment>
                <comment line="3837">
                    (7),                    
                </comment>
                <comment line="3838">
                    (8)                    
                </comment>
                <comment line="3839">
                    also (1)                    
                </comment>
                <comment line="3848">
                    The above KeyUsageExtension constructor does not
                     allow isCritical value, so...                    
                </comment>
                <comment line="3859">
                    EKU                    
                </comment>
                <comment line="3865">
                    1                    
                </comment>
                <comment line="3866">
                    2                    
                </comment>
                <comment line="3867">
                    3                    
                </comment>
                <comment line="3868">
                    4                    
                </comment>
                <comment line="3869">
                    5                    
                </comment>
                <comment line="3870">
                    6                    
                </comment>
                <comment line="3871">
                    7                    
                </comment>
                <comment line="3872">
                    8                    
                </comment>
                <comment line="3873">
                    9                    
                </comment>
                <comment line="3895">
                    SAN                    
                </comment>
                <comment line="3896">
                    IAN                    
                </comment>
                <comment line="3923">
                    SIA, always non-critical                    
                </comment>
                <comment line="3924">
                    AIA, always non-critical                    
                </comment>
                <comment line="3945">
                    1                    
                </comment>
                <comment line="3946">
                    2                    
                </comment>
                <comment line="3947">
                    3                    
                </comment>
                <comment line="3949">
                    5                    
                </comment>
                <comment line="3977">
                    CRL, experimental, only support 1 distributionpoint                    
                </comment>
                <comment line="4040">
                    always non-critical                    
                </comment>
                <scope line="3705"/>
                <scope line="3710">
                    <scope line="3713">
                        <scope line="3714">
                            <scope line="3715">
                                <declaration name="list" type="List&lt;String&gt;" line="3716"/>
                                <scope line="3719"/>
                                <scope line="3723">
                                    <declaration name="add" type="boolean" line="3727"/>
                                    <declaration name="action" type="int" line="3729"/>
                                    <declaration name="type" type="String" line="3730"/>
                                    <scope line="3731"/>
                                    <scope line="3734">
                                        <declaration name="colonpos" type="int" line="3735"/>
                                        <scope line="3736">
                                            <scope line="3740"/>
                                        </scope>
                                    </scope>
                                    <declaration name="n" type="String" line="3746"/>
                                    <scope line="3747">
                                        <declaration name="e" type="Extension" line="3748"/>
                                        <scope line="3750"/>
                                    </scope>
                                    <scope line="3757"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="3765">
                        <declaration name="name" type="String" line="3766"/>
                        <declaration name="isCritical" type="boolean" line="3767"/>
                        <declaration name="eqpos" type="int" line="3769"/>
                        <scope line="3770"/>
                        <scope line="3773"/>
                        <declaration name="colonpos" type="int" line="3778"/>
                        <scope line="3779">
                            <scope line="3780"/>
                        </scope>
                        <scope line="3786"/>
                        <declaration name="exttype" type="int" line="3789"/>
                        <declaration name="pathLen" type="int" line="3792"/>
                        <declaration name="isCA" type="boolean" line="3793"/>
                        <scope line="3794"/>
                        <scope line="3796">
                            <scope line="3797"/>
                            <scope line="3800">
                                <scope line="3802">
                                    <declaration name="nv" type="String[]" line="3803"/>
                                    <scope line="3804"/>
                                    <scope line="3807">
                                        <scope line="3808"/>
                                        <scope line="3810"/>
                                        <scope line="3812"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="3825">
                            <declaration name="ok" type="boolean[]" line="3826"/>
                            <scope line="3827">
                                <declaration name="p" type="int" line="3828"/>
                                <scope line="3840"/>
                            </scope>
                            <declaration name="kue" type="KeyUsageExtension" line="3846"/>
                        </scope>
                        <scope line="3853"/>
                        <scope line="3859">
                            <declaration name="v" type="Vector&lt;ObjectIdentifier&gt;" line="3860"/>
                            <scope line="3861">
                                <declaration name="p" type="int" line="3862"/>
                                <scope line="3874">
                                    <scope line="3875"/>
                                    <scope line="3877"/>
                                </scope>
                                <scope line="3881"/>
                                <scope line="3883"/>
                            </scope>
                        </scope>
                        <scope line="3889"/>
                        <scope line="3896">
                            <declaration name="ps" type="String[]" line="3897"/>
                            <declaration name="gnames" type="GeneralNames" line="3898"/>
                            <scope line="3899">
                                <scope line="3901"/>
                                <declaration name="t" type="String" line="3904"/>
                                <declaration name="v" type="String" line="3905"/>
                            </scope>
                            <scope line="3908"/>
                            <scope line="3912"/>
                        </scope>
                        <scope line="3917"/>
                        <scope line="3924"/>
                        <scope line="3928">
                            <declaration name="accessDescriptions" type="List&lt;AccessDescription&gt;" line="3929"/>
                            <declaration name="ps" type="String[]" line="3931"/>
                            <scope line="3932">
                                <declaration name="colonpos2" type="int" line="3934"/>
                                <scope line="3935"/>
                                <declaration name="m" type="String" line="3939"/>
                                <declaration name="t" type="String" line="3940"/>
                                <declaration name="v" type="String" line="3941"/>
                                <declaration name="p" type="int" line="3942"/>
                                <declaration name="oid" type="ObjectIdentifier" line="3950"/>
                                <scope line="3951">
                                    <scope line="3952"/>
                                    <scope line="3954"/>
                                </scope>
                                <scope line="3958"/>
                            </scope>
                            <scope line="3964"/>
                            <scope line="3967"/>
                        </scope>
                        <scope line="3971"/>
                        <scope line="3977">
                            <declaration name="ps" type="String[]" line="3978"/>
                            <declaration name="gnames" type="GeneralNames" line="3979"/>
                            <scope line="3980">
                                <scope line="3982"/>
                                <declaration name="t" type="String" line="3985"/>
                                <declaration name="v" type="String" line="3986"/>
                            </scope>
                        </scope>
                        <scope line="3993"/>
                        <declaration name="oid" type="ObjectIdentifier" line="3999"/>
                        <declaration name="data" type="byte[]" line="4000"/>
                        <scope line="4001">
                            <declaration name="pos" type="int" line="4003"/>
                            <scope line="4004">
                                <declaration name="hex" type="int" line="4005"/>
                                <scope line="4006"/>
                                <scope line="4008"/>
                                <scope line="4010"/>
                                <scope line="4012"/>
                                <scope line="4015"/>
                                <scope line="4017"/>
                            </scope>
                            <scope line="4022"/>
                        </scope>
                        <scope line="4027"/>
                    </scope>
                    <scope line="4043"/>
                </scope>
                <scope line="4048"/>
            </method>
            <javadoc line="4054">
                Prints the usage of this tool.                
            </javadoc>
            <method name="usage" type="void" line="4057">
                <comment line="4068">
                    Left and right sides of the options list                    
                </comment>
                <comment line="4072">
                    Check if there&apos;s an unknown option                    
                </comment>
                <comment line="4075">
                    Length of left side of options list                    
                </comment>
                <scope line="4058">
                    <declaration name="left" type="String[]" line="4068"/>
                    <declaration name="right" type="String[]" line="4069"/>
                    <declaration name="found" type="boolean" line="4072"/>
                    <declaration name="lenLeft" type="int" line="4075"/>
                    <scope line="4076">
                        <declaration name="opt" type="Option" line="4077"/>
                        <scope line="4080"/>
                    </scope>
                    <scope line="4085"/>
                </scope>
                <scope line="4092">
                    <scope line="4098"/>
                </scope>
            </method>
            <method name="tinyHelp" type="void" line="4108">
                <scope line="4110"/>
                <scope line="4112"/>
            </method>
            <method name="errorNeedArgument" type="void" line="4117">
                <params>
                    <param name="flag" type="String"/>
                </params>
                <declaration name="source" type="Object[]" line="4118"/>
            </method>
            <method name="getPass" type="char[]" line="4124">
                <params>
                    <param name="modifier" type="String"/>
                    <param name="arg" type="String"/>
                </params>
                <comment line="4129">
                    Useless, tinyHelp() already exits.                    
                </comment>
                <declaration name="output" type="char[]" line="4125"/>
            </method>
            <method name="getPassWithModifier" type="char[]" line="4132">
                <params>
                    <param name="modifier" type="String"/>
                    <param name="arg" type="String"/>
                </params>
                <scope line="4133"/>
                <scope line="4135">
                    <declaration name="value" type="String" line="4136"/>
                    <scope line="4137"/>
                    <scope line="4141"/>
                </scope>
                <scope line="4144">
                    <scope line="4145">
                        <declaration name="url" type="URL" line="4146"/>
                        <scope line="4147"/>
                        <scope line="4149">
                            <declaration name="f" type="File" line="4150"/>
                            <scope line="4151"/>
                            <scope line="4153"/>
                        </scope>
                        <declaration name="br" type="BufferedReader" line="4159"/>
                        <declaration name="value" type="String" line="4161"/>
                        <scope line="4163"/>
                        <scope line="4165"/>
                    </scope>
                    <scope line="4168"/>
                </scope>
                <scope line="4172"/>
            </method>
        </class>
        <class name="Pair" line="4182">
            <type_params>
                <type_param name="A"/>
                <type_param name="B"/>
            </type_params>
            <comment line="121">
                User-specified providers are added before any command is called.
                 However, they are not removed before the end of the main() method.
                 If you&apos;re calling KeyTool.main() directly in your own Java program,
                 please programtically add any providers you need and do not specify
                 them through the command line.                
            </comment>
            <comment line="141">
                keystore stream                
            </comment>
            <comment line="153">
                &quot;cacerts&quot; keystore                
            </comment>
            <comment line="159">
                used in GENCRL                
            </comment>
            <comment line="319">
                for i18n                
            </comment>
            <comment line="4132">
                This method also used by JarSigner                
            </comment>
            <declaration name="fst" type="A" line="4184"/>
            <declaration name="snd" type="B" line="4185"/>
            <method name="Pair" type="constructor" line="4187">
                <params>
                    <param name="fst" type="A"/>
                    <param name="snd" type="B"/>
                </params>
            </method>
            <method name="toString" type="String" line="4192"/>
            <method name="equals" type="boolean" line="4196">
                <params>
                    <param name="x" type="Object"/>
                    <param name="y" type="Object"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="4200">
                <params>
                    <param name="other" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="4207"/>
            <method name="of" type="Pair<A,B>" line="4213">
                <params>
                    <param name="a" type="A"/>
                    <param name="b" type="B"/>
                </params>
            </method>
        </class>
    </source>