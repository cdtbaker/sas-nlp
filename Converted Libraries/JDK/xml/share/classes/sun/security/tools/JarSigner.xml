<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.tools">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.util.zip"/>
        <import package="java.util.jar"/>
        <import package="java.math.BigInteger"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="java.text.Collator"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="com.sun.jarsigner.ContentSigner"/>
        <import package="com.sun.jarsigner.ContentSignerParameters"/>
        <import package="java.net.SocketTimeoutException"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.security.cert.CertPath"/>
        <import package="java.security.cert.CertPathValidator"/>
        <import package="java.security.cert.CertificateExpiredException"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.CertificateNotYetValidException"/>
        <import package="java.security.cert.PKIXParameters"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.util.Map.Entry"/>
        <import package="sun.security.x509"/>
        <import package="sun.security.util"/>
        <import package="sun.misc.BASE64Encoder"/>
        <class name="JarSigner" line="61">
            <comment line="80">
                for i18n                
            </comment>
            <comment line="92">
                prefix for new signature-related files in META-INF directory                
            </comment>
            <comment line="100">
                milliseconds                
            </comment>
            <comment line="102">
                Attention:
                 This is the entry that get launched by the security tool jarsigner.                
            </comment>
            <comment line="111">
                signer is in keystore                
            </comment>
            <comment line="113">
                alias list is NOT empty and
                 signer is not in alias list                
            </comment>
            <comment line="115">
                signer is in alias list                
            </comment>
            <comment line="117">
                signer&apos;s cert chain (when composing)                
            </comment>
            <comment line="118">
                private key                
            </comment>
            <comment line="119">
                the keystore specified by -keystore
                 or the default keystore, never null                
            </comment>
            <comment line="122">
                key store file                
            </comment>
            <comment line="123">
                null keystore input stream (NONE)                
            </comment>
            <comment line="124">
                token-based keystore                
            </comment>
            <comment line="125">
                jar files to sign or verify                
            </comment>
            <comment line="126">
                alias to sign jar with                
            </comment>
            <comment line="127">
                aliases in -verify                
            </comment>
            <comment line="128">
                keystore password                
            </comment>
            <comment line="129">
                protected authentication path                
            </comment>
            <comment line="130">
                keystore type                
            </comment>
            <comment line="131">
                provider name                
            </comment>
            <comment line="132">
                list of providers                
            </comment>
            <comment line="133">
                arguments for provider constructors                
            </comment>
            <comment line="135">
                private key password                
            </comment>
            <comment line="136">
                name of .SF file                
            </comment>
            <comment line="137">
                name of signature algorithm                
            </comment>
            <comment line="138">
                name of digest algorithm                
            </comment>
            <comment line="139">
                output filename                
            </comment>
            <comment line="140">
                location of the Timestamping Authority                
            </comment>
            <comment line="141">
                alias for the Timestamping Authority&apos;s certificate                
            </comment>
            <comment line="142">
                file to read alternative cert chain from                
            </comment>
            <comment line="143">
                verify the jar                
            </comment>
            <comment line="144">
                verbose output when signing/verifying                
            </comment>
            <comment line="145">
                show certs when verifying                
            </comment>
            <comment line="146">
                debug                
            </comment>
            <comment line="147">
                &quot;sign&quot; the whole manifest                
            </comment>
            <comment line="148">
                leave the .SF out of the PKCS7 block                
            </comment>
            <comment line="149">
                treat warnings as error                
            </comment>
            <comment line="151">
                read zip entry raw bytes                
            </comment>
            <comment line="281">
                Parse command line arguments.                
            </comment>
            <comment line="832">
                Display some details about a certificate:
                
                 [&lt;tab&gt;] &lt;cert-type&gt; [&quot;, &quot; &lt;subject-DN&gt;] [&quot; (&quot; &lt;keystore-entry-alias&gt; &quot;)&quot;]
                 [&lt;validity-period&gt; | &lt;expiry-warning&gt;]
                
                 Note: no newline character at the end                
            </comment>
            <comment line="1882">
                Reads all the bytes for a given zip entry.                
            </comment>
            <comment line="1908">
                Returns manifest entry from given jar file, or null if given jar file
                 does not have a manifest entry.                
            </comment>
            <comment line="1928">
                Computes the digests of a zip entry, and returns them as an array
                 of base64-encoded strings.                
            </comment>
            <comment line="1963">
                Computes the digests of a zip entry, and returns them as a list of
                 attributes                
            </comment>
            <comment line="1982">
                Updates the digest attributes of a manifest entry, by adding or
                 replacing digest values.
                 A digest value is added if the manifest entry does not contain a digest
                 for that particular algorithm.
                 A digest value is replaced if it is obsolete.
                
                 Returns true if the manifest entry has been changed, and false
                 otherwise.                
            </comment>
            <comment line="2040">
                Try to load the specified signing mechanism.
                 The URL class loader is used.                
            </comment>
            <comment line="2183">
                Generate a signed data block.
                 If a URL or a certificate (containing a URL) for a Timestamping
                 Authority is supplied then a signature timestamp is generated and
                 inserted into the signed data block.
                
                 @param sigalg signature algorithm to use, or null to use default
                 @param tsaUrl The location of the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param tsaCert The certificate for the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param signingMechanism The signing mechanism to use.
                 @param args The command-line arguments to jarsigner.
                 @param zipFile The original source Zip file.                
            </comment>
            <javadoc line="61">
                &lt;p&gt;The jarsigner utility.
                  The exit codes for the main method are:
                  0: success
                  1: any error that the jar cannot be signed or verified, including:
                  keystore loading error
                  TSP communciation error
                  jarsigner command line error...
                  otherwise: error codes from -strict                
                <author>
                    Roland Schemers                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
            </javadoc>
            <declaration name="rb" type="java.util.ResourceBundle" line="80"/>
            <declaration name="collator" type="Collator" line="83"/>
            <scope line="84"/>
            <declaration name="META_INF" type="String" line="89"/>
            <declaration name="SIG_PREFIX" type="String" line="92"/>
            <declaration name="PARAM_STRING" type="Class[]" line="94"/>
            <declaration name="NONE" type="String" line="96"/>
            <declaration name="P11KEYSTORE" type="String" line="97"/>
            <declaration name="SIX_MONTHS" type="long" line="99"/>
            <method name="main" type="void" line="103">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="js" type="JarSigner" line="104"/>
            </method>
            <declaration name="VERSION" type="String" line="108"/>
            <declaration name="IN_KEYSTORE" type="int" line="110"/>
            <declaration name="IN_SCOPE" type="int" line="111"/>
            <declaration name="NOT_ALIAS" type="int" line="112"/>
            <declaration name="SIGNED_BY_ALIAS" type="int" line="114"/>
            <declaration name="certChain" type="X509Certificate[]" line="116"/>
            <declaration name="privateKey" type="PrivateKey" line="117"/>
            <declaration name="store" type="KeyStore" line="118"/>
            <declaration name="keystore" type="String" line="121"/>
            <declaration name="nullStream" type="boolean" line="122"/>
            <declaration name="token" type="boolean" line="123"/>
            <declaration name="jarfile" type="String" line="124"/>
            <declaration name="alias" type="String" line="125"/>
            <declaration name="ckaliases" type="List&lt;String&gt;" line="126"/>
            <declaration name="storepass" type="char[]" line="127"/>
            <declaration name="protectedPath" type="boolean" line="128"/>
            <declaration name="storetype" type="String" line="129"/>
            <declaration name="providerName" type="String" line="130"/>
            <declaration name="providers" type="Vector&lt;String&gt;" line="131"/>
            <declaration name="providerArgs" type="HashMap&lt;String,String&gt;" line="133"/>
            <declaration name="keypass" type="char[]" line="134"/>
            <declaration name="sigfile" type="String" line="135"/>
            <declaration name="sigalg" type="String" line="136"/>
            <declaration name="digestalg" type="String" line="137"/>
            <declaration name="signedjar" type="String" line="138"/>
            <declaration name="tsaUrl" type="String" line="139"/>
            <declaration name="tsaAlias" type="String" line="140"/>
            <declaration name="altCertChain" type="String" line="141"/>
            <declaration name="verify" type="boolean" line="142"/>
            <declaration name="verbose" type="String" line="143"/>
            <declaration name="showcerts" type="boolean" line="144"/>
            <declaration name="debug" type="boolean" line="145"/>
            <declaration name="signManifest" type="boolean" line="146"/>
            <declaration name="externalSF" type="boolean" line="147"/>
            <declaration name="strict" type="boolean" line="148"/>
            <declaration name="baos" type="ByteArrayOutputStream" line="151"/>
            <declaration name="buffer" type="byte[]" line="152"/>
            <declaration name="signingMechanism" type="ContentSigner" line="153"/>
            <declaration name="altSignerClass" type="String" line="154"/>
            <declaration name="altSignerClasspath" type="String" line="155"/>
            <declaration name="zipFile" type="ZipFile" line="156"/>
            <declaration name="hasExpiredCert" type="boolean" line="158"/>
            <declaration name="hasExpiringCert" type="boolean" line="159"/>
            <declaration name="notYetValidCert" type="boolean" line="160"/>
            <declaration name="chainNotValidated" type="boolean" line="161"/>
            <declaration name="notSignedByAlias" type="boolean" line="162"/>
            <declaration name="aliasNotInStore" type="boolean" line="163"/>
            <declaration name="hasUnsignedEntry" type="boolean" line="164"/>
            <declaration name="badKeyUsage" type="boolean" line="165"/>
            <declaration name="badExtendedKeyUsage" type="boolean" line="166"/>
            <declaration name="badNetscapeCertType" type="boolean" line="167"/>
            <declaration name="certificateFactory" type="CertificateFactory" line="169"/>
            <declaration name="validator" type="CertPathValidator" line="170"/>
            <declaration name="pkixParameters" type="PKIXParameters" line="171"/>
            <method name="run" type="void" line="173">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="178">
                    Try to load and install the specified providers                    
                </comment>
                <comment line="221">
                    if (debug) {
                    SignatureFileVerifier.setDebug(true);
                    ManifestEntryVerifier.setDebug(true);
                    }                    
                </comment>
                <comment line="231">
                    load the alternative signing mechanism                    
                </comment>
                <comment line="245">
                    zero-out private key password                    
                </comment>
                <comment line="250">
                    zero-out keystore password                    
                </comment>
                <comment line="263">
                    hasExpiredCert and notYetValidCert included in this case                    
                </comment>
                <scope line="174">
                    <scope line="178">
                        <declaration name="cl" type="ClassLoader" line="179"/>
                        <declaration name="e" type="Enumeration&lt;String&gt;" line="180"/>
                        <scope line="181">
                            <declaration name="provName" type="String" line="182"/>
                            <declaration name="provClass" type="Class&lt;?&gt;" line="183"/>
                            <scope line="184"/>
                            <scope line="186"/>
                            <declaration name="provArg" type="String" line="190"/>
                            <declaration name="obj" type="Object" line="191"/>
                            <scope line="192"/>
                            <scope line="194">
                                <declaration name="c" type="Constructor&lt;?&gt;" line="195"/>
                            </scope>
                            <scope line="200">
                                <declaration name="form" type="MessageFormat" line="201"/>
                                <declaration name="source" type="Object[]" line="203"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="210">
                        <scope line="211"/>
                        <scope line="213">
                            <scope line="214"/>
                        </scope>
                    </scope>
                    <scope line="226">
                        <scope line="231"/>
                    </scope>
                </scope>
                <scope line="237">
                    <scope line="239"/>
                </scope>
                <scope line="243">
                    <scope line="245"/>
                    <scope line="250"/>
                </scope>
                <scope line="256">
                    <declaration name="exitCode" type="int" line="257"/>
                    <scope line="258"/>
                    <scope line="261"/>
                    <scope line="265"/>
                    <scope line="268"/>
                    <scope line="271"/>
                    <scope line="274"/>
                </scope>
            </method>
            <method name="parseArgs" type="void" line="283">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="285">
                                        
                </comment>
                <comment line="394">
                    -certs must always be specified with -verbose                    
                </comment>
                <comment line="421">
                    File system error?
                     Just ignore it.                    
                </comment>
                <declaration name="n" type="int" line="285"/>
                <scope line="288">
                    <declaration name="flags" type="String" line="290"/>
                    <declaration name="modifier" type="String" line="291"/>
                    <scope line="292">
                        <declaration name="pos" type="int" line="293"/>
                        <scope line="294"/>
                    </scope>
                    <scope line="300"/>
                    <scope line="303"/>
                    <scope line="306"/>
                    <scope line="309"/>
                    <scope line="313">
                        <scope line="315"/>
                        <scope line="320">
                            <scope line="322"/>
                        </scope>
                    </scope>
                    <scope line="328"/>
                    <scope line="330"/>
                    <scope line="333"/>
                    <scope line="335"/>
                    <scope line="338"/>
                    <scope line="341"/>
                    <scope line="344"/>
                    <scope line="347"/>
                    <scope line="350"/>
                    <scope line="353"/>
                    <scope line="356"/>
                    <scope line="358"/>
                    <scope line="360"/>
                    <scope line="362"/>
                    <scope line="364"/>
                    <scope line="367"/>
                    <scope line="370"/>
                    <scope line="372"/>
                    <scope line="375"/>
                    <scope line="377">
                        <scope line="378">
                            <scope line="379"/>
                            <scope line="381"/>
                        </scope>
                        <scope line="385"/>
                    </scope>
                </scope>
                <scope line="396"/>
                <scope line="400"/>
                <scope line="404"/>
                <scope line="409"/>
                <scope line="414">
                    <scope line="416"/>
                </scope>
                <scope line="419"/>
                <scope line="425">
                    <scope line="427"/>
                </scope>
                <scope line="432"/>
                <scope line="436"/>
                <scope line="442"/>
                <scope line="448">
                    <scope line="449"/>
                </scope>
                <scope line="455">
                    <scope line="456"/>
                </scope>
            </method>
            <method name="getPass" type="char[]" line="464">
                <params>
                    <param name="modifier" type="String"/>
                    <param name="arg" type="String"/>
                </params>
                <comment line="469">
                    Useless, usage() already exit                    
                </comment>
                <declaration name="output" type="char[]" line="465"/>
            </method>
            <method name="usageNoArg" type="void" line="471"/>
            <method name="usage" type="void" line="476"/>
            <method name="fullusage" type="void" line="482"/>
            <method name="verifyJar" type="void" line="564">
                <params>
                    <param name="jarName" type="String"/>
                </params>
                <comment line="566">
                    if there exists entry inside jar signed                    
                </comment>
                <comment line="583">
                    we just read. this will throw a SecurityException
                     if  a signature/digest check fails.                    
                </comment>
                <comment line="595">
                    The map to record display info, only used when -verbose provided
                          key: signer info string
                          value: the list of files with common key                    
                </comment>
                <comment line="626">
                    Only used when -verbose provided                    
                </comment>
                <comment line="644">
                    When -certs provided, display info has extra empty
                     lines at the beginning and end.                    
                </comment>
                <comment line="649">
                    signerInfo() must be called even if -verbose
                     not provided. The method updates various
                     warning flags.                    
                </comment>
                <comment line="659">
                    Print no info for unsigned entries when -verbose:all,
                     to be consistent with old behavior.                    
                </comment>
                <comment line="673">
                    Entries inside META-INF and other unsigned
                     entries are grouped separately.                    
                </comment>
                <comment line="678">
                    The label finally contains 2 parts separated by &apos;|&apos;:
                     The legend displayed before the entry names, and
                     the cert info (if -certs specfied).                    
                </comment>
                <comment line="703">
                    the signature-related group                    
                </comment>
                <comment line="818">
                    close the resource                    
                </comment>
                <declaration name="anySigned" type="boolean" line="565"/>
                <declaration name="jf" type="JarFile" line="566"/>
                <scope line="568">
                    <declaration name="entriesVec" type="Vector&lt;JarEntry&gt;" line="570"/>
                    <declaration name="buffer" type="byte[]" line="571"/>
                    <declaration name="entries" type="Enumeration&lt;JarEntry&gt;" line="573"/>
                    <scope line="574">
                        <declaration name="je" type="JarEntry" line="575"/>
                        <declaration name="is" type="InputStream" line="577"/>
                        <scope line="578">
                            <declaration name="n" type="int" line="580"/>
                            <scope line="581"/>
                        </scope>
                        <scope line="585">
                            <scope line="586"/>
                        </scope>
                    </scope>
                    <declaration name="man" type="Manifest" line="592"/>
                    <declaration name="output" type="Map&lt;String,List&lt;String&gt;&gt;" line="597"/>
                    <scope line="599">
                        <declaration name="e" type="Enumeration&lt;JarEntry&gt;" line="601"/>
                        <declaration name="now" type="long" line="603"/>
                        <declaration name="tab" type="String" line="604"/>
                        <scope line="606">
                            <declaration name="je" type="JarEntry" line="607"/>
                            <declaration name="name" type="String" line="608"/>
                            <declaration name="signers" type="CodeSigner[]" line="609"/>
                            <declaration name="isSigned" type="boolean" line="610"/>
                            <declaration name="inStoreOrScope" type="int" line="615"/>
                            <declaration name="inStore" type="boolean" line="617"/>
                            <declaration name="inScope" type="boolean" line="618"/>
                            <scope line="621"/>
                            <declaration name="sb" type="StringBuffer" line="626"/>
                            <scope line="627">
                                <declaration name="inManifest" type="boolean" line="629"/>
                            </scope>
                            <scope line="645">
                                <scope line="647">
                                    <declaration name="si" type="String" line="651"/>
                                    <scope line="652"/>
                                </scope>
                            </scope>
                            <scope line="657">
                                <scope line="660"/>
                                <scope line="663"/>
                            </scope>
                            <scope line="669">
                                <declaration name="label" type="String" line="670"/>
                                <scope line="671"/>
                                <scope line="681"/>
                                <declaration name="fb" type="StringBuffer" line="685"/>
                                <declaration name="s" type="String" line="686"/>
                                <scope line="687"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="698">
                        <scope line="699">
                            <declaration name="files" type="List&lt;String&gt;" line="700"/>
                            <declaration name="key" type="String" line="701"/>
                            <scope line="702"/>
                            <declaration name="pipe" type="int" line="705"/>
                            <scope line="706">
                                <scope line="707"/>
                            </scope>
                            <scope line="711">
                                <scope line="712">
                                    <scope line="713"/>
                                </scope>
                                <scope line="716">
                                    <scope line="718"/>
                                    <scope line="722"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="738"/>
                    </scope>
                    <scope line="747"/>
                    <scope line="750">
                        <scope line="755">
                            <scope line="759"/>
                            <scope line="764"/>
                            <scope line="769"/>
                            <scope line="774"/>
                            <scope line="778"/>
                            <scope line="782"/>
                            <scope line="786"/>
                            <scope line="791"/>
                            <scope line="796"/>
                            <scope line="801"/>
                            <scope line="804"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="812">
                    <scope line="814"/>
                </scope>
                <scope line="817">
                    <scope line="818"/>
                </scope>
            </method>
            <declaration name="validityTimeForm" type="MessageFormat" line="826"/>
            <declaration name="notYetTimeForm" type="MessageFormat" line="827"/>
            <declaration name="expiredTimeForm" type="MessageFormat" line="828"/>
            <declaration name="expiringTimeForm" type="MessageFormat" line="829"/>
            <method name="printCert" type="String" line="840">
                <params>
                    <param name="tab" type="String"/>
                    <param name="c" type="Certificate"/>
                    <param name="checkValidityPeriod" type="boolean"/>
                    <param name="now" type="long"/>
                    <param name="checkUsage" type="boolean"/>
                </params>
                <comment line="867">
                    test if cert will expire within six months                    
                </comment>
                <declaration name="certStr" type="StringBuilder" line="842"/>
                <declaration name="space" type="String" line="843"/>
                <declaration name="x509Cert" type="X509Certificate" line="844"/>
                <scope line="846"/>
                <scope line="851"/>
                <declaration name="alias" type="String" line="855"/>
                <scope line="856"/>
                <scope line="860">
                    <declaration name="notAfter" type="Date" line="863"/>
                    <scope line="864">
                        <scope line="867"/>
                        <scope line="870">
                            <scope line="873"/>
                            <declaration name="source" type="Object[]" line="877"/>
                        </scope>
                        <scope line="880">
                            <scope line="881"/>
                            <declaration name="source" type="Object[]" line="885"/>
                        </scope>
                    </scope>
                    <scope line="888">
                        <scope line="891"/>
                        <declaration name="source" type="Object[]" line="895"/>
                    </scope>
                    <scope line="898">
                        <scope line="901"/>
                        <declaration name="source" type="Object[]" line="905"/>
                    </scope>
                    <scope line="910">
                        <declaration name="bad" type="boolean[]" line="911"/>
                        <scope line="913">
                            <declaration name="x" type="String" line="914"/>
                            <scope line="915"/>
                            <scope line="918"/>
                            <scope line="922"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="signTimeForm" type="MessageFormat" line="935"/>
            <method name="printTimestamp" type="String" line="937">
                <params>
                    <param name="tab" type="String"/>
                    <param name="timestamp" type="Timestamp"/>
                </params>
                <scope line="939"/>
                <declaration name="source" type="Object[]" line="943"/>
            </method>
            <declaration name="cacheForInKS" type="Map&lt;CodeSigner,Integer&gt;" line="949"/>
            <method name="inKeyStoreForOneSigner" type="int" line="951">
                <params>
                    <param name="signer" type="CodeSigner"/>
                </params>
                <comment line="976">
                    never happens, because keystore has been loaded                    
                </comment>
                <scope line="952"/>
                <declaration name="found" type="boolean" line="956"/>
                <declaration name="result" type="int" line="957"/>
                <declaration name="certs" type="List&lt;? extends Certificate&gt;" line="958"/>
                <scope line="959">
                    <declaration name="alias" type="String" line="960"/>
                    <scope line="961">
                        <scope line="962"/>
                        <scope line="964"/>
                        <scope line="967"/>
                    </scope>
                    <scope line="970">
                        <scope line="971">
                            <scope line="972"/>
                            <scope line="974"/>
                            <scope line="977"/>
                        </scope>
                        <scope line="983"/>
                    </scope>
                </scope>
            </method>
            <declaration name="storeHash" type="Hashtable&lt;Certificate,String&gt;" line="992"/>
            <method name="inKeyStore" type="int" line="994">
                <params>
                    <param name="signers" type="CodeSigner[]"/>
                </params>
                <declaration name="output" type="int" line="999"/>
                <scope line="1001">
                    <declaration name="result" type="int" line="1002"/>
                </scope>
                <scope line="1005"/>
            </method>
            <method name="signJar" type="void" line="1012">
                <params>
                    <param name="jarName" type="String"/>
                    <param name="alias" type="String"/>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="1037">
                    convert illegal characters from the alias to be _&apos;s                    
                </comment>
                <comment line="1057">
                    Open the jar (zip) file                    
                </comment>
                <comment line="1074">
                                        
                </comment>
                <comment line="1081">
                    The Attributes of manifest before updating                    
                </comment>
                <comment line="1091">
                    Check if manifest exists                    
                </comment>
                <comment line="1094">
                    Manifest exists. Read its raw bytes.                    
                </comment>
                <comment line="1099">
                    Create new manifest                    
                </comment>
                <comment line="1111">
                    For each entry in jar
                     (except for signature-related META-INF entries),
                     do the following:
                    
                     - if entry is not contained in manifest, add it to manifest;
                     - if entry is contained in manifest, calculate its hash and
                       compare it with the one in the manifest; if they are
                       different, replace the hash in the manifest with the newly
                       generated one. (This may invalidate existing signatures!)                    
                </comment>
                <comment line="1132">
                    Store META-INF files in vector, so they can be written
                     out first                    
                </comment>
                <comment line="1142">
                    ignore signature-related and manifest files                    
                </comment>
                <comment line="1148">
                    jar entry is contained in manifest, check and
                     possibly update its digest attributes                    
                </comment>
                <comment line="1155">
                    Add entry to manifest                    
                </comment>
                <comment line="1164">
                    Recalculate the manifest raw bytes if necessary                    
                </comment>
                <comment line="1173">
                    Note:
                    
                     The Attributes object is based on HashMap and can handle
                     continuation columns. Therefore, even if the contents are
                     not changed (in a Map view), the bytes that it write()
                     may be different from the original bytes that it read()
                     from. Since the signature on the main attributes is based
                     on raw bytes, we must retain the exact bytes.                    
                </comment>
                <comment line="1190">
                    cat oldHead newTail &gt; newBytes                    
                </comment>
                <comment line="1205">
                    Write out the manifest                    
                </comment>
                <comment line="1207">
                    manifest file has new length                    
                </comment>
                <comment line="1222">
                    Calculate SignatureFile (&quot;.SF&quot;) and SignatureBlockFile                    
                </comment>
                <comment line="1239">
                    Provide a helpful message when TSA is beyond a firewall                    
                </comment>
                <comment line="1259">
                    signature file                    
                </comment>
                <comment line="1296">
                    signature block file                    
                </comment>
                <comment line="1309">
                    Write out all other META-INF files that we stored in the
                     vector                    
                </comment>
                <comment line="1320">
                    Write out all other files                    
                </comment>
                <comment line="1340">
                    close the resouces                    
                </comment>
                <comment line="1351">
                    no IOException thrown in the follow try clause, so disable
                     the try clause.
                     try {                    
                </comment>
                <comment line="1355">
                    attempt an atomic rename. If that fails,
                     rename the original jar file, then the signed
                     one, then delete the original.                    
                </comment>
                <comment line="1417">
                    no IOException thrown in the above try clause, so disable
                     the catch clause.
                     } catch(IOException ioe) {
                         error(rb.getString(&quot;unable.to.sign.jar.&quot;)+ioe, ioe);
                     }                    
                </comment>
                <declaration name="aliasUsed" type="boolean" line="1013"/>
                <declaration name="tsaCert" type="X509Certificate" line="1014"/>
                <scope line="1016"/>
                <scope line="1021"/>
                <scope line="1023"/>
                <declaration name="tmpSigFile" type="StringBuilder" line="1027"/>
                <scope line="1028">
                    <declaration name="c" type="char" line="1029"/>
                    <scope line="1034">
                        <scope line="1035"/>
                        <scope line="1038"/>
                    </scope>
                </scope>
                <declaration name="tmpJarName" type="String" line="1049"/>
                <declaration name="jarFile" type="File" line="1053"/>
                <declaration name="signedJarFile" type="File" line="1054"/>
                <scope line="1057"/>
                <scope line="1059"/>
                <declaration name="fos" type="FileOutputStream" line="1063"/>
                <scope line="1064"/>
                <scope line="1066"/>
                <declaration name="ps" type="PrintStream" line="1070"/>
                <declaration name="zos" type="ZipOutputStream" line="1071"/>
                <declaration name="sfFilename" type="String" line="1074"/>
                <declaration name="bkFilename" type="String" line="1075"/>
                <declaration name="manifest" type="Manifest" line="1077"/>
                <declaration name="mfEntries" type="Map&lt;String,Attributes&gt;" line="1078"/>
                <declaration name="oldAttr" type="Attributes" line="1081"/>
                <declaration name="mfModified" type="boolean" line="1083"/>
                <declaration name="mfCreated" type="boolean" line="1084"/>
                <declaration name="mfRawBytes" type="byte[]" line="1085"/>
                <scope line="1087">
                    <declaration name="digests" type="MessageDigest" line="1088"/>
                    <declaration name="mfFile" type="ZipEntry" line="1091"/>
                    <scope line="1092"/>
                    <scope line="1097">
                        <declaration name="mattr" type="Attributes" line="1099"/>
                        <declaration name="javaVendor" type="String" line="1102"/>
                        <declaration name="jdkVersion" type="String" line="1103"/>
                    </scope>
                    <declaration name="encoder" type="BASE64Encoder" line="1121"/>
                    <declaration name="mfFiles" type="Vector&lt;ZipEntry&gt;" line="1122"/>
                    <declaration name="wasSigned" type="boolean" line="1124"/>
                    <scope line="1127">
                        <declaration name="ze" type="ZipEntry" line="1128"/>
                        <scope line="1130">
                            <scope line="1136"/>
                            <scope line="1140"/>
                        </scope>
                        <scope line="1146">
                            <scope line="1150"/>
                        </scope>
                        <scope line="1153">
                            <declaration name="attrs" type="Attributes" line="1155"/>
                        </scope>
                    </scope>
                    <scope line="1164">
                        <declaration name="baos" type="ByteArrayOutputStream" line="1165"/>
                        <scope line="1167">
                            <declaration name="newBytes" type="byte[]" line="1168"/>
                            <scope line="1170">
                                <declaration name="newPos" type="int" line="1183"/>
                                <declaration name="oldPos" type="int" line="1184"/>
                                <scope line="1186"/>
                                <scope line="1188">
                                    <declaration name="lastBytes" type="byte[]" line="1190"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1199"/>
                    </scope>
                    <scope line="1205"/>
                    <scope line="1209">
                        <scope line="1210"/>
                        <scope line="1213"/>
                    </scope>
                    <declaration name="manDig" type="ManifestDigester" line="1222"/>
                    <declaration name="sf" type="SignatureFile" line="1223"/>
                    <scope line="1226"/>
                    <declaration name="block" type="SignatureFile.Block" line="1230"/>
                    <scope line="1232"/>
                    <scope line="1237"/>
                    <declaration name="sfFile" type="ZipEntry" line="1251"/>
                    <declaration name="bkFile" type="ZipEntry" line="1252"/>
                    <declaration name="time" type="long" line="1254"/>
                    <scope line="1261">
                        <scope line="1262"/>
                        <scope line="1265"/>
                    </scope>
                    <scope line="1271">
                        <scope line="1272"/>
                        <scope line="1276"/>
                        <scope line="1279">
                            <declaration name="certUrl" type="String" line="1280"/>
                            <scope line="1282"/>
                        </scope>
                        <scope line="1289"/>
                    </scope>
                    <scope line="1298">
                        <scope line="1299"/>
                        <scope line="1302"/>
                    </scope>
                    <scope line="1310">
                        <declaration name="ze" type="ZipEntry" line="1311"/>
                        <scope line="1314"/>
                    </scope>
                    <scope line="1321">
                        <declaration name="ze" type="ZipEntry" line="1322"/>
                        <scope line="1324">
                            <scope line="1325"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1336"/>
                <scope line="1338">
                    <scope line="1340"/>
                    <scope line="1345"/>
                </scope>
                <scope line="1353">
                    <scope line="1357">
                        <declaration name="origJar" type="File" line="1358"/>
                        <scope line="1360">
                            <scope line="1361"/>
                            <scope line="1363">
                                <declaration name="form" type="MessageFormat" line="1364"/>
                                <declaration name="source" type="Object[]" line="1366"/>
                            </scope>
                        </scope>
                        <scope line="1369">
                            <declaration name="form" type="MessageFormat" line="1370"/>
                            <declaration name="source" type="Object[]" line="1372"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1380">
                    <scope line="1384"/>
                    <scope line="1389"/>
                    <scope line="1394"/>
                    <scope line="1399"/>
                    <scope line="1402"/>
                    <scope line="1405"/>
                    <scope line="1410"/>
                </scope>
            </method>
            <javadoc line="1423">
                Find the length of header inside bs. The header is a multiple (&gt;=0)
                  lines of attributes plus an empty line. The empty line is included
                  in the header.                
            </javadoc>
            <method name="findHeaderEnd" type="int" line="1428">
                <params>
                    <param name="bs" type="byte[]"/>
                </params>
                <comment line="1430">
                    Initial state true to deal with empty header                    
                </comment>
                <comment line="1431">
                    just met a newline                    
                </comment>
                <comment line="1437">
                    fallthrough                    
                </comment>
                <comment line="1439">
                    +1 to get length                    
                </comment>
                <comment line="1446">
                    If header end is not found, it means the MANIFEST.MF has only
                     the main attributes section and it does not end with 2 newlines.
                     Returns the whole length so that it can be completely replaced.                    
                </comment>
                <declaration name="newline" type="boolean" line="1430"/>
                <declaration name="len" type="int" line="1431"/>
                <scope line="1432"/>
            </method>
            <javadoc line="1451">
                signature-related files include:
                  . META-INF/MANIFEST.MF
                  . META-INF/SIG-
                  . META-INF/.SF
                  . META-INF/.DSA
                  . META-INF/.RSA
                  . META-INF/.EC                
            </javadoc>
            <method name="signatureRelated" type="boolean" line="1460">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="1472">
                    .SF/.DSA/.RSA/.EC files in META-INF subdirs
                     are not considered signature-related                    
                </comment>
                <declaration name="ucName" type="String" line="1461"/>
                <scope line="1465"/>
                <scope line="1470"/>
            </method>
            <declaration name="cacheForSignerInfo" type="Map&lt;CodeSigner,String&gt;" line="1479"/>
            <javadoc line="1481">
                Returns a string of singer info, with a newline at the end                
            </javadoc>
            <method name="signerInfo" type="String" line="1484">
                <params>
                    <param name="signer" type="CodeSigner"/>
                    <param name="tab" type="String"/>
                    <param name="now" type="long"/>
                </params>
                <comment line="1491">
                    display the signature timestamp, if present                    
                </comment>
                <comment line="1497">
                    display the certificate(s). The first one is end-enity cert and
                     its KeyUsage should be checked.                    
                </comment>
                <comment line="1511">
                    TODO                    
                </comment>
                <scope line="1485"/>
                <declaration name="s" type="StringBuffer" line="1488"/>
                <declaration name="certs" type="List&lt;? extends Certificate&gt;" line="1489"/>
                <declaration name="timestamp" type="Timestamp" line="1491"/>
                <scope line="1492"/>
                <declaration name="first" type="boolean" line="1498"/>
                <scope line="1499"/>
                <scope line="1504">
                    <declaration name="cp" type="CertPath" line="1505"/>
                </scope>
                <scope line="1507"/>
                <declaration name="result" type="String" line="1512"/>
            </method>
            <method name="writeEntry" type="void" line="1519">
                <params>
                    <param name="zf" type="ZipFile"/>
                    <param name="os" type="ZipOutputStream"/>
                    <param name="ze" type="ZipEntry"/>
                </params>
                <declaration name="ze2" type="ZipEntry" line="1520"/>
                <scope line="1525"/>
            </method>
            <javadoc line="1533">
                Writes all the bytes for a given entry to the specified output stream.                
            </javadoc>
            <method name="writeBytes" type="void" line="1537">
                <params>
                    <param name="zf" type="ZipFile"/>
                    <param name="ze" type="ZipEntry"/>
                    <param name="os" type="ZipOutputStream"/>
                </params>
                <declaration name="n" type="int" line="1538"/>
                <declaration name="is" type="InputStream" line="1540"/>
                <scope line="1541">
                    <declaration name="left" type="long" line="1543"/>
                    <scope line="1545"/>
                </scope>
                <scope line="1549">
                    <scope line="1550"/>
                </scope>
            </method>
            <method name="loadKeyStore" type="void" line="1556">
                <params>
                    <param name="keyStoreName" type="String"/>
                    <param name="prompt" type="boolean"/>
                </params>
                <comment line="1571">
                    Get pass phrase
                     XXX need to disable echo; on UNIX, call getpass(char *prompt)Z
                     and on NT call ??                    
                </comment>
                <comment line="1591">
                    try as file                    
                </comment>
                <comment line="1614">
                    ignore, when a SecretkeyEntry does not include a cert                    
                </comment>
                <comment line="1619">
                    Ignore, if cacerts cannot be loaded                    
                </comment>
                <comment line="1627">
                    Only add TrustedCertificateEntry and self-signed
                     PrivateKeyEntry                    
                </comment>
                <comment line="1634">
                    ignore, when a SecretkeyEntry does not include a cert                    
                </comment>
                <comment line="1644">
                    Only if tas is empty                    
                </comment>
                <scope line="1558"/>
                <scope line="1563">
                    <scope line="1564"/>
                    <scope line="1566"/>
                    <scope line="1574"/>
                    <scope line="1577"/>
                    <scope line="1582"/>
                    <scope line="1584">
                        <declaration name="url" type="URL" line="1586"/>
                        <scope line="1587"/>
                        <scope line="1589"/>
                        <declaration name="is" type="InputStream" line="1593"/>
                        <scope line="1594"/>
                        <scope line="1597">
                            <scope line="1598"/>
                        </scope>
                    </scope>
                    <declaration name="tas" type="Set&lt;TrustAnchor&gt;" line="1603"/>
                    <scope line="1604">
                        <declaration name="caks" type="KeyStore" line="1605"/>
                        <scope line="1606">
                            <declaration name="aliases" type="Enumeration&lt;String&gt;" line="1607"/>
                            <scope line="1608">
                                <declaration name="a" type="String" line="1609"/>
                                <scope line="1610"/>
                                <scope line="1612"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1617"/>
                    <scope line="1620">
                        <declaration name="aliases" type="Enumeration&lt;String&gt;" line="1621"/>
                        <scope line="1622">
                            <declaration name="a" type="String" line="1623"/>
                            <scope line="1624">
                                <declaration name="c" type="X509Certificate" line="1625"/>
                                <scope line="1629"/>
                            </scope>
                            <scope line="1632"/>
                        </scope>
                    </scope>
                    <scope line="1639"/>
                    <scope line="1642"/>
                </scope>
                <scope line="1645"/>
                <scope line="1648"/>
                <scope line="1651"/>
                <scope line="1654"/>
                <scope line="1657"/>
            </method>
            <method name="getTsaCert" type="X509Certificate" line="1664">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="1672">
                    this never happens, because keystore has been loaded                    
                </comment>
                <declaration name="cs" type="java.security.cert.Certificate" line="1666"/>
                <scope line="1668"/>
                <scope line="1670"/>
                <scope line="1673">
                    <declaration name="form" type="MessageFormat" line="1674"/>
                    <declaration name="source" type="Object[]" line="1676"/>
                </scope>
            </method>
            <javadoc line="1682">
                Check if userCert is designed to be a code signer                
                <param>
                    userCert the certificate to be examined                    
                </param>
                <param>
                    bad 3 booleans to show if the KeyUsage, ExtendedKeyUsage,
                      NetscapeCertType has codeSigning flag turned on.
                      If null, the class field badKeyUsage, badExtendedKeyUsage,
                      badNetscapeCertType will be set.                    
                </param>
            </javadoc>
            <method name="checkCertUsage" type="void" line="1690">
                <params>
                    <param name="userCert" type="X509Certificate"/>
                    <param name="bad" type="boolean[]"/>
                </params>
                <comment line="1693">
                    Can act as a signer?
                     1. if KeyUsage, then [0:digitalSignature] or
                        [1:nonRepudiation] should be true
                     2. if ExtendedKeyUsage, then should contains ANY or CODE_SIGNING
                     3. if NetscapeCertType, then should contains OBJECT_SIGNING
                     1,2,3 must be true                    
                </comment>
                <comment line="1718">
                    anyExtendedKeyUsage                    
                </comment>
                <comment line="1719">
                    codeSigning                    
                </comment>
                <comment line="1727">
                    shouldn&apos;t happen                    
                </comment>
                <comment line="1731">
                    OID_NETSCAPE_CERT_TYPE                    
                </comment>
                <comment line="1753">
                                        
                </comment>
                <scope line="1699"/>
                <declaration name="keyUsage" type="boolean[]" line="1703"/>
                <scope line="1704">
                    <scope line="1706">
                        <scope line="1707"/>
                    </scope>
                </scope>
                <scope line="1714">
                    <declaration name="xKeyUsage" type="List&lt;String&gt;" line="1715"/>
                    <scope line="1716">
                        <scope line="1718">
                            <scope line="1719"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1725"/>
                <scope line="1729">
                    <declaration name="netscapeEx" type="byte[]" line="1731"/>
                    <scope line="1733">
                        <declaration name="in" type="DerInputStream" line="1734"/>
                        <declaration name="encoded" type="byte[]" line="1735"/>
                        <declaration name="extn" type="NetscapeCertTypeExtension" line="1739"/>
                        <declaration name="val" type="Boolean" line="1742"/>
                        <scope line="1744">
                            <scope line="1745"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1751"/>
            </method>
            <method name="getAliasInfo" type="void" line="1756">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="1777">
                    this never happens, because keystore has been loaded                    
                </comment>
                <comment line="1801">
                    We don&apos;t meant to print anything, the next call
                     checks validity and keyUsage etc                    
                </comment>
                <comment line="1821">
                    Did not work out, so prompt user for key password                    
                </comment>
                <comment line="1834">
                    this never happens, because keystore has been loaded                    
                </comment>
                <declaration name="key" type="Key" line="1758"/>
                <scope line="1760">
                    <declaration name="cs" type="java.security.cert.Certificate[]" line="1761"/>
                    <scope line="1762">
                        <scope line="1763"/>
                        <scope line="1767"/>
                        <scope line="1769"/>
                    </scope>
                    <scope line="1772">
                        <scope line="1773"/>
                        <scope line="1775"/>
                    </scope>
                    <scope line="1779">
                        <scope line="1780"/>
                        <scope line="1783">
                            <declaration name="form" type="MessageFormat" line="1784"/>
                            <declaration name="source" type="Object[]" line="1786"/>
                        </scope>
                    </scope>
                    <scope line="1792">
                        <scope line="1793"/>
                    </scope>
                    <scope line="1804">
                        <declaration name="cp" type="CertPath" line="1805"/>
                    </scope>
                    <scope line="1807"/>
                    <scope line="1811"/>
                    <scope line="1816">
                        <scope line="1817"/>
                        <scope line="1819">
                            <declaration name="form" type="MessageFormat" line="1821"/>
                            <declaration name="source" type="Object[]" line="1823"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1828"/>
                <scope line="1830"/>
                <scope line="1832"/>
                <scope line="1836">
                    <declaration name="form" type="MessageFormat" line="1837"/>
                    <declaration name="source" type="Object[]" line="1839"/>
                </scope>
                <scope line="1841"/>
            </method>
            <method name="error" type="void" line="1847">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="1854">
                <params>
                    <param name="message" type="String"/>
                    <param name="e" type="Exception"/>
                </params>
                <scope line="1856"/>
            </method>
            <method name="getPass" type="char[]" line="1863">
                <params>
                    <param name="prompt" type="String"/>
                </params>
                <comment line="1878">
                    this shouldn&apos;t happen                    
                </comment>
                <scope line="1866">
                    <declaration name="pass" type="char[]" line="1867"/>
                    <scope line="1869"/>
                    <scope line="1871"/>
                </scope>
                <scope line="1874"/>
            </method>
            <method name="getBytes" type="byte[]" line="1885">
                <params>
                    <param name="zf" type="ZipFile"/>
                    <param name="ze" type="ZipEntry"/>
                </params>
                <declaration name="n" type="int" line="1886"/>
                <declaration name="is" type="InputStream" line="1888"/>
                <scope line="1889">
                    <declaration name="left" type="long" line="1892"/>
                    <scope line="1894"/>
                </scope>
                <scope line="1898">
                    <scope line="1899"/>
                </scope>
            </method>
            <method name="getManifestFile" type="ZipEntry" line="1911">
                <params>
                    <param name="zf" type="ZipFile"/>
                </params>
                <comment line="1915">
                    Check all entries for matching name                    
                </comment>
                <declaration name="ze" type="ZipEntry" line="1912"/>
                <scope line="1913">
                    <declaration name="enum_" type="Enumeration&lt;? extends ZipEntry&gt;" line="1915"/>
                    <scope line="1916">
                        <scope line="1919"/>
                    </scope>
                </scope>
            </method>
            <method name="getDigests" type="String[]" line="1934">
                <params>
                    <param name="ze" type="ZipEntry"/>
                    <param name="zf" type="ZipFile"/>
                    <param name="digests" type="MessageDigest[]"/>
                    <param name="encoder" type="BASE64Encoder"/>
                </params>
                <comment line="1955">
                    complete the digests                    
                </comment>
                <declaration name="n" type="int" line="1936"/>
                <declaration name="is" type="InputStream" line="1937"/>
                <scope line="1938">
                    <declaration name="left" type="long" line="1940"/>
                    <scope line="1942">
                        <scope line="1943"/>
                    </scope>
                </scope>
                <scope line="1948">
                    <scope line="1949"/>
                </scope>
                <declaration name="base64Digests" type="String[]" line="1955"/>
                <scope line="1956"/>
            </method>
            <method name="getDigestAttributes" type="Attributes" line="1969">
                <params>
                    <param name="ze" type="ZipEntry"/>
                    <param name="zf" type="ZipFile"/>
                    <param name="digests" type="MessageDigest[]"/>
                    <param name="encoder" type="BASE64Encoder"/>
                </params>
                <declaration name="base64Digests" type="String[]" line="1971"/>
                <declaration name="attrs" type="Attributes" line="1972"/>
                <scope line="1974"/>
            </method>
            <method name="updateDigests" type="boolean" line="1994">
                <params>
                    <param name="ze" type="ZipEntry"/>
                    <param name="zf" type="ZipFile"/>
                    <param name="digests" type="MessageDigest[]"/>
                    <param name="encoder" type="BASE64Encoder"/>
                    <param name="mf" type="Manifest"/>
                </params>
                <comment line="2002">
                    The entry name to be written into attrs                    
                </comment>
                <comment line="2005">
                    Find if the digest already exists                    
                </comment>
                <comment line="2020">
                    Ignored. Writing new digest entry.                    
                </comment>
                <comment line="2028">
                    compare digests, and replace the one in the manifest
                     if they are different                    
                </comment>
                <declaration name="update" type="boolean" line="1995"/>
                <declaration name="attrs" type="Attributes" line="1997"/>
                <declaration name="base64Digests" type="String[]" line="1998"/>
                <scope line="2000">
                    <declaration name="name" type="String" line="2002"/>
                    <scope line="2003">
                        <declaration name="aid" type="AlgorithmId" line="2005"/>
                        <scope line="2006">
                            <scope line="2007">
                                <declaration name="n" type="String" line="2008"/>
                                <scope line="2009">
                                    <declaration name="tmp" type="String" line="2010"/>
                                    <scope line="2011"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2018"/>
                    <scope line="2022"/>
                    <scope line="2026">
                        <declaration name="mfDigest" type="String" line="2029"/>
                        <scope line="2030"/>
                    </scope>
                </scope>
            </method>
            <method name="loadSigningMechanism" type="ContentSigner" line="2044">
                <params>
                    <param name="signerClassName" type="String"/>
                    <param name="signerClassPath" type="String"/>
                </params>
                <comment line="2047">
                    construct class loader                    
                </comment>
                <comment line="2048">
                    make sure env.class.path defaults to dot                    
                </comment>
                <comment line="2050">
                    do prepends to get correct ordering                    
                </comment>
                <comment line="2057">
                    attempt to find signer                    
                </comment>
                <comment line="2060">
                    Check that it implements ContentSigner                    
                </comment>
                <declaration name="cpString" type="String" line="2047"/>
                <declaration name="urls" type="URL[]" line="2053"/>
                <declaration name="appClassLoader" type="ClassLoader" line="2054"/>
                <declaration name="signerClass" type="Class" line="2057"/>
                <declaration name="signer" type="Object" line="2060"/>
                <scope line="2061">
                    <declaration name="form" type="MessageFormat" line="2062"/>
                    <declaration name="source" type="Object[]" line="2064"/>
                </scope>
            </method>
        </class>
        <class name="JarBASE64Encoder" line="2071">
            <extends class="BASE64Encoder"/>
            <comment line="80">
                for i18n                
            </comment>
            <comment line="92">
                prefix for new signature-related files in META-INF directory                
            </comment>
            <comment line="100">
                milliseconds                
            </comment>
            <comment line="102">
                Attention:
                 This is the entry that get launched by the security tool jarsigner.                
            </comment>
            <comment line="111">
                signer is in keystore                
            </comment>
            <comment line="113">
                alias list is NOT empty and
                 signer is not in alias list                
            </comment>
            <comment line="115">
                signer is in alias list                
            </comment>
            <comment line="117">
                signer&apos;s cert chain (when composing)                
            </comment>
            <comment line="118">
                private key                
            </comment>
            <comment line="119">
                the keystore specified by -keystore
                 or the default keystore, never null                
            </comment>
            <comment line="122">
                key store file                
            </comment>
            <comment line="123">
                null keystore input stream (NONE)                
            </comment>
            <comment line="124">
                token-based keystore                
            </comment>
            <comment line="125">
                jar files to sign or verify                
            </comment>
            <comment line="126">
                alias to sign jar with                
            </comment>
            <comment line="127">
                aliases in -verify                
            </comment>
            <comment line="128">
                keystore password                
            </comment>
            <comment line="129">
                protected authentication path                
            </comment>
            <comment line="130">
                keystore type                
            </comment>
            <comment line="131">
                provider name                
            </comment>
            <comment line="132">
                list of providers                
            </comment>
            <comment line="133">
                arguments for provider constructors                
            </comment>
            <comment line="135">
                private key password                
            </comment>
            <comment line="136">
                name of .SF file                
            </comment>
            <comment line="137">
                name of signature algorithm                
            </comment>
            <comment line="138">
                name of digest algorithm                
            </comment>
            <comment line="139">
                output filename                
            </comment>
            <comment line="140">
                location of the Timestamping Authority                
            </comment>
            <comment line="141">
                alias for the Timestamping Authority&apos;s certificate                
            </comment>
            <comment line="142">
                file to read alternative cert chain from                
            </comment>
            <comment line="143">
                verify the jar                
            </comment>
            <comment line="144">
                verbose output when signing/verifying                
            </comment>
            <comment line="145">
                show certs when verifying                
            </comment>
            <comment line="146">
                debug                
            </comment>
            <comment line="147">
                &quot;sign&quot; the whole manifest                
            </comment>
            <comment line="148">
                leave the .SF out of the PKCS7 block                
            </comment>
            <comment line="149">
                treat warnings as error                
            </comment>
            <comment line="151">
                read zip entry raw bytes                
            </comment>
            <comment line="281">
                Parse command line arguments.                
            </comment>
            <comment line="832">
                Display some details about a certificate:
                
                 [&lt;tab&gt;] &lt;cert-type&gt; [&quot;, &quot; &lt;subject-DN&gt;] [&quot; (&quot; &lt;keystore-entry-alias&gt; &quot;)&quot;]
                 [&lt;validity-period&gt; | &lt;expiry-warning&gt;]
                
                 Note: no newline character at the end                
            </comment>
            <comment line="1882">
                Reads all the bytes for a given zip entry.                
            </comment>
            <comment line="1908">
                Returns manifest entry from given jar file, or null if given jar file
                 does not have a manifest entry.                
            </comment>
            <comment line="1928">
                Computes the digests of a zip entry, and returns them as an array
                 of base64-encoded strings.                
            </comment>
            <comment line="1963">
                Computes the digests of a zip entry, and returns them as a list of
                 attributes                
            </comment>
            <comment line="1982">
                Updates the digest attributes of a manifest entry, by adding or
                 replacing digest values.
                 A digest value is added if the manifest entry does not contain a digest
                 for that particular algorithm.
                 A digest value is replaced if it is obsolete.
                
                 Returns true if the manifest entry has been changed, and false
                 otherwise.                
            </comment>
            <comment line="2040">
                Try to load the specified signing mechanism.
                 The URL class loader is used.                
            </comment>
            <comment line="2183">
                Generate a signed data block.
                 If a URL or a certificate (containing a URL) for a Timestamping
                 Authority is supplied then a signature timestamp is generated and
                 inserted into the signed data block.
                
                 @param sigalg signature algorithm to use, or null to use default
                 @param tsaUrl The location of the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param tsaCert The certificate for the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param signingMechanism The signing mechanism to use.
                 @param args The command-line arguments to jarsigner.
                 @param zipFile The original source Zip file.                
            </comment>
            <javadoc line="2071">
                This is a BASE64Encoder that does not insert a default newline at the end of
                  every output line. This is necessary because java.util.jar does its own
                  line management (see Manifest.make72Safe()). Inserting additional new lines
                  can cause line-wrapping problems (see CR 6219522).                
            </javadoc>
            <javadoc line="2078">
                Encode the suffix that ends every output line.                
            </javadoc>
            <method name="encodeLineSuffix" type="void" line="2081">
                <params>
                    <param name="aStream" type="OutputStream"/>
                </params>
            </method>
        </class>
        <class name="SignatureFile" line="2084">
            <comment line="80">
                for i18n                
            </comment>
            <comment line="92">
                prefix for new signature-related files in META-INF directory                
            </comment>
            <comment line="100">
                milliseconds                
            </comment>
            <comment line="102">
                Attention:
                 This is the entry that get launched by the security tool jarsigner.                
            </comment>
            <comment line="111">
                signer is in keystore                
            </comment>
            <comment line="113">
                alias list is NOT empty and
                 signer is not in alias list                
            </comment>
            <comment line="115">
                signer is in alias list                
            </comment>
            <comment line="117">
                signer&apos;s cert chain (when composing)                
            </comment>
            <comment line="118">
                private key                
            </comment>
            <comment line="119">
                the keystore specified by -keystore
                 or the default keystore, never null                
            </comment>
            <comment line="122">
                key store file                
            </comment>
            <comment line="123">
                null keystore input stream (NONE)                
            </comment>
            <comment line="124">
                token-based keystore                
            </comment>
            <comment line="125">
                jar files to sign or verify                
            </comment>
            <comment line="126">
                alias to sign jar with                
            </comment>
            <comment line="127">
                aliases in -verify                
            </comment>
            <comment line="128">
                keystore password                
            </comment>
            <comment line="129">
                protected authentication path                
            </comment>
            <comment line="130">
                keystore type                
            </comment>
            <comment line="131">
                provider name                
            </comment>
            <comment line="132">
                list of providers                
            </comment>
            <comment line="133">
                arguments for provider constructors                
            </comment>
            <comment line="135">
                private key password                
            </comment>
            <comment line="136">
                name of .SF file                
            </comment>
            <comment line="137">
                name of signature algorithm                
            </comment>
            <comment line="138">
                name of digest algorithm                
            </comment>
            <comment line="139">
                output filename                
            </comment>
            <comment line="140">
                location of the Timestamping Authority                
            </comment>
            <comment line="141">
                alias for the Timestamping Authority&apos;s certificate                
            </comment>
            <comment line="142">
                file to read alternative cert chain from                
            </comment>
            <comment line="143">
                verify the jar                
            </comment>
            <comment line="144">
                verbose output when signing/verifying                
            </comment>
            <comment line="145">
                show certs when verifying                
            </comment>
            <comment line="146">
                debug                
            </comment>
            <comment line="147">
                &quot;sign&quot; the whole manifest                
            </comment>
            <comment line="148">
                leave the .SF out of the PKCS7 block                
            </comment>
            <comment line="149">
                treat warnings as error                
            </comment>
            <comment line="151">
                read zip entry raw bytes                
            </comment>
            <comment line="281">
                Parse command line arguments.                
            </comment>
            <comment line="832">
                Display some details about a certificate:
                
                 [&lt;tab&gt;] &lt;cert-type&gt; [&quot;, &quot; &lt;subject-DN&gt;] [&quot; (&quot; &lt;keystore-entry-alias&gt; &quot;)&quot;]
                 [&lt;validity-period&gt; | &lt;expiry-warning&gt;]
                
                 Note: no newline character at the end                
            </comment>
            <comment line="1882">
                Reads all the bytes for a given zip entry.                
            </comment>
            <comment line="1908">
                Returns manifest entry from given jar file, or null if given jar file
                 does not have a manifest entry.                
            </comment>
            <comment line="1928">
                Computes the digests of a zip entry, and returns them as an array
                 of base64-encoded strings.                
            </comment>
            <comment line="1963">
                Computes the digests of a zip entry, and returns them as a list of
                 attributes                
            </comment>
            <comment line="1982">
                Updates the digest attributes of a manifest entry, by adding or
                 replacing digest values.
                 A digest value is added if the manifest entry does not contain a digest
                 for that particular algorithm.
                 A digest value is replaced if it is obsolete.
                
                 Returns true if the manifest entry has been changed, and false
                 otherwise.                
            </comment>
            <comment line="2040">
                Try to load the specified signing mechanism.
                 The URL class loader is used.                
            </comment>
            <comment line="2183">
                Generate a signed data block.
                 If a URL or a certificate (containing a URL) for a Timestamping
                 Authority is supplied then a signature timestamp is generated and
                 inserted into the signed data block.
                
                 @param sigalg signature algorithm to use, or null to use default
                 @param tsaUrl The location of the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param tsaCert The certificate for the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param signingMechanism The signing mechanism to use.
                 @param args The command-line arguments to jarsigner.
                 @param zipFile The original source Zip file.                
            </comment>
            <declaration name="sf" type="Manifest" line="2086"/>
            <javadoc line="2086">
                SignatureFile                
            </javadoc>
            <declaration name="baseName" type="String" line="2089"/>
            <javadoc line="2089">
                .SF base name                
            </javadoc>
            <method name="SignatureFile" type="constructor" line="2098">
                <params>
                    <param name="digests" type="MessageDigest"/>
                    <param name="mf" type="Manifest"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="baseName" type="String"/>
                    <param name="signManifest" type="boolean"/>
                </params>
                <comment line="2113">
                    sign the whole manifest                    
                </comment>
                <comment line="2120">
                    create digest of the manifest main attributes                    
                </comment>
                <comment line="2135">
                                        
                </comment>
                <declaration name="version" type="String" line="2101"/>
                <declaration name="javaVendor" type="String" line="2102"/>
                <declaration name="mattr" type="Attributes" line="2105"/>
                <declaration name="encoder" type="BASE64Encoder" line="2106"/>
                <scope line="2111">
                    <scope line="2113"/>
                </scope>
                <declaration name="mde" type="ManifestDigester.Entry" line="2120"/>
                <scope line="2122">
                    <scope line="2123"/>
                </scope>
                <scope line="2128"/>
                <declaration name="entries" type="Map&lt;String,Attributes&gt;" line="2136"/>
                <declaration name="mit" type="Iterator&lt;Map.Entry&lt;String,Attributes&gt;&gt;" line="2137"/>
                <scope line="2139">
                    <declaration name="e" type="Map.Entry&lt;String,Attributes&gt;" line="2140"/>
                    <declaration name="name" type="String" line="2141"/>
                    <scope line="2143">
                        <declaration name="attr" type="Attributes" line="2144"/>
                        <scope line="2145"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2154">
                Writes the SignatureFile to the specified OutputStream.                
                <param>
                    out the output stream                    
                </param>
                <exception>
                    IOException if an I/O error has occurred                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="2162">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="2166">
                get .SF file name                
            </javadoc>
            <method name="getMetaName" type="String" line="2170"/>
            <javadoc line="2174">
                get base file name                
            </javadoc>
            <method name="getBaseName" type="String" line="2178"/>
            <method name="generateBlock" type="Block" line="2206">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="sigalg" type="String"/>
                    <param name="certChain" type="X509Certificate[]"/>
                    <param name="externalSF" type="boolean"/>
                    <param name="tsaUrl" type="String"/>
                    <param name="tsaCert" type="X509Certificate"/>
                    <param name="signingMechanism" type="ContentSigner"/>
                    <param name="args" type="String[]"/>
                    <param name="zipFile" type="ZipFile"/>
                </params>
            </method>
            <class name="Block" line="2212">
                <comment line="2218">
                    Construct a new signature block.                    
                </comment>
                <comment line="2316">
                    get block file name.                    
                </comment>
                <declaration name="block" type="byte[]" line="2214"/>
                <declaration name="blockFileName" type="String" line="2215"/>
                <method name="Block" type="constructor" line="2225">
                    <params>
                        <param name="sfg" type="SignatureFile"/>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="sigalg" type="String"/>
                        <param name="certChain" type="X509Certificate[]"/>
                        <param name="externalSF" type="boolean"/>
                        <param name="tsaUrl" type="String"/>
                        <param name="tsaCert" type="X509Certificate"/>
                        <param name="signingMechanism" type="ContentSigner"/>
                        <param name="args" type="String[]"/>
                        <param name="zipFile" type="ZipFile"/>
                    </params>
                    <comment line="2230">
                        must extract the original encoded form of DN for subsequent
                         name comparison checks (converting to a String and back to
                         an encoded DN could cause the types of String attribute
                         values to be changed)                        
                    </comment>
                    <comment line="2244">
                        If no signature algorithm was specified, we choose a
                         default that is compatible with the private key algorithm.                        
                    </comment>
                    <comment line="2263">
                        check common invalid key/signature algorithm combinations                        
                    </comment>
                    <comment line="2291">
                        Timestamp the signature and generate the signature block file                        
                    </comment>
                    <comment line="2306">
                        Assemble parameters for the signing mechanism                        
                    </comment>
                    <comment line="2311">
                        Generate the signature block                        
                    </comment>
                    <declaration name="issuerName" type="Principal" line="2227"/>
                    <scope line="2228">
                        <declaration name="tbsCert" type="X509CertInfo" line="2233"/>
                    </scope>
                    <declaration name="serial" type="BigInteger" line="2239"/>
                    <declaration name="signatureAlgorithm" type="String" line="2241"/>
                    <declaration name="keyAlgorithm" type="String" line="2242"/>
                    <scope line="2247"/>
                    <scope line="2258"/>
                    <declaration name="sigAlgUpperCase" type="String" line="2263"/>
                    <scope line="2269"/>
                    <declaration name="sigAlg" type="AlgorithmId" line="2276"/>
                    <declaration name="digEncrAlg" type="AlgorithmId" line="2277"/>
                    <declaration name="sig" type="Signature" line="2279"/>
                    <declaration name="baos" type="ByteArrayOutputStream" line="2282"/>
                    <declaration name="content" type="byte[]" line="2285"/>
                    <declaration name="signature" type="byte[]" line="2288"/>
                    <scope line="2291"/>
                    <declaration name="tsaUri" type="URI" line="2294"/>
                    <scope line="2295">
                        <scope line="2296"/>
                    </scope>
                    <scope line="2299">
                        <declaration name="ioe" type="IOException" line="2300"/>
                    </scope>
                    <declaration name="params" type="ContentSignerParameters" line="2306"/>
                </method>
                <method name="getMetaName" type="String" line="2319"/>
                <javadoc line="2323">
                    Writes the block file to the specified OutputStream.                    
                    <param>
                        out the output stream                        
                    </param>
                    <exception>
                        IOException if an I/O error has occurred                        
                    </exception>
                </javadoc>
                <method name="write" type="void" line="2331">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                </method>
            </class>
        </class>
        <class name="JarSignerParameters" line="2341">
            <comment line="80">
                for i18n                
            </comment>
            <comment line="92">
                prefix for new signature-related files in META-INF directory                
            </comment>
            <comment line="100">
                milliseconds                
            </comment>
            <comment line="102">
                Attention:
                 This is the entry that get launched by the security tool jarsigner.                
            </comment>
            <comment line="111">
                signer is in keystore                
            </comment>
            <comment line="113">
                alias list is NOT empty and
                 signer is not in alias list                
            </comment>
            <comment line="115">
                signer is in alias list                
            </comment>
            <comment line="117">
                signer&apos;s cert chain (when composing)                
            </comment>
            <comment line="118">
                private key                
            </comment>
            <comment line="119">
                the keystore specified by -keystore
                 or the default keystore, never null                
            </comment>
            <comment line="122">
                key store file                
            </comment>
            <comment line="123">
                null keystore input stream (NONE)                
            </comment>
            <comment line="124">
                token-based keystore                
            </comment>
            <comment line="125">
                jar files to sign or verify                
            </comment>
            <comment line="126">
                alias to sign jar with                
            </comment>
            <comment line="127">
                aliases in -verify                
            </comment>
            <comment line="128">
                keystore password                
            </comment>
            <comment line="129">
                protected authentication path                
            </comment>
            <comment line="130">
                keystore type                
            </comment>
            <comment line="131">
                provider name                
            </comment>
            <comment line="132">
                list of providers                
            </comment>
            <comment line="133">
                arguments for provider constructors                
            </comment>
            <comment line="135">
                private key password                
            </comment>
            <comment line="136">
                name of .SF file                
            </comment>
            <comment line="137">
                name of signature algorithm                
            </comment>
            <comment line="138">
                name of digest algorithm                
            </comment>
            <comment line="139">
                output filename                
            </comment>
            <comment line="140">
                location of the Timestamping Authority                
            </comment>
            <comment line="141">
                alias for the Timestamping Authority&apos;s certificate                
            </comment>
            <comment line="142">
                file to read alternative cert chain from                
            </comment>
            <comment line="143">
                verify the jar                
            </comment>
            <comment line="144">
                verbose output when signing/verifying                
            </comment>
            <comment line="145">
                show certs when verifying                
            </comment>
            <comment line="146">
                debug                
            </comment>
            <comment line="147">
                &quot;sign&quot; the whole manifest                
            </comment>
            <comment line="148">
                leave the .SF out of the PKCS7 block                
            </comment>
            <comment line="149">
                treat warnings as error                
            </comment>
            <comment line="151">
                read zip entry raw bytes                
            </comment>
            <comment line="281">
                Parse command line arguments.                
            </comment>
            <comment line="832">
                Display some details about a certificate:
                
                 [&lt;tab&gt;] &lt;cert-type&gt; [&quot;, &quot; &lt;subject-DN&gt;] [&quot; (&quot; &lt;keystore-entry-alias&gt; &quot;)&quot;]
                 [&lt;validity-period&gt; | &lt;expiry-warning&gt;]
                
                 Note: no newline character at the end                
            </comment>
            <comment line="1882">
                Reads all the bytes for a given zip entry.                
            </comment>
            <comment line="1908">
                Returns manifest entry from given jar file, or null if given jar file
                 does not have a manifest entry.                
            </comment>
            <comment line="1928">
                Computes the digests of a zip entry, and returns them as an array
                 of base64-encoded strings.                
            </comment>
            <comment line="1963">
                Computes the digests of a zip entry, and returns them as a list of
                 attributes                
            </comment>
            <comment line="1982">
                Updates the digest attributes of a manifest entry, by adding or
                 replacing digest values.
                 A digest value is added if the manifest entry does not contain a digest
                 for that particular algorithm.
                 A digest value is replaced if it is obsolete.
                
                 Returns true if the manifest entry has been changed, and false
                 otherwise.                
            </comment>
            <comment line="2040">
                Try to load the specified signing mechanism.
                 The URL class loader is used.                
            </comment>
            <comment line="2183">
                Generate a signed data block.
                 If a URL or a certificate (containing a URL) for a Timestamping
                 Authority is supplied then a signature timestamp is generated and
                 inserted into the signed data block.
                
                 @param sigalg signature algorithm to use, or null to use default
                 @param tsaUrl The location of the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param tsaCert The certificate for the Timestamping Authority. If null
                               then no timestamp is requested.
                 @param signingMechanism The signing mechanism to use.
                 @param args The command-line arguments to jarsigner.
                 @param zipFile The original source Zip file.                
            </comment>
            <implements interface="ContentSignerParameters"/>
            <declaration name="args" type="String[]" line="2343"/>
            <declaration name="tsa" type="URI" line="2344"/>
            <declaration name="tsaCertificate" type="X509Certificate" line="2345"/>
            <declaration name="signature" type="byte[]" line="2346"/>
            <declaration name="signatureAlgorithm" type="String" line="2347"/>
            <declaration name="signerCertificateChain" type="X509Certificate[]" line="2348"/>
            <declaration name="content" type="byte[]" line="2349"/>
            <declaration name="source" type="ZipFile" line="2350"/>
            <javadoc line="2352">
                Create a new object.                
            </javadoc>
            <method name="JarSignerParameters" type="constructor" line="2358">
                <params>
                    <param name="args" type="String[]"/>
                    <param name="tsa" type="URI"/>
                    <param name="tsaCertificate" type="X509Certificate"/>
                    <param name="signature" type="byte[]"/>
                    <param name="signatureAlgorithm" type="String"/>
                    <param name="signerCertificateChain" type="X509Certificate[]"/>
                    <param name="content" type="byte[]"/>
                    <param name="source" type="ZipFile"/>
                </params>
                <scope line="2361"/>
            </method>
            <javadoc line="2374">
                Retrieves the command-line arguments.                
                <return>
                    The command-line arguments. May be null.                    
                </return>
            </javadoc>
            <method name="getCommandLine" type="String[]" line="2379"/>
            <javadoc line="2383">
                Retrieves the identifier for a Timestamping Authority (TSA).                
                <return>
                    The TSA identifier. May be null.                    
                </return>
            </javadoc>
            <method name="getTimestampingAuthority" type="URI" line="2388"/>
            <javadoc line="2392">
                Retrieves the certificate for a Timestamping Authority (TSA).                
                <return>
                    The TSA certificate. May be null.                    
                </return>
            </javadoc>
            <method name="getTimestampingAuthorityCertificate" type="X509Certificate" line="2397"/>
            <javadoc line="2401">
                Retrieves the signature.                
                <return>
                    The non-null signature bytes.                    
                </return>
            </javadoc>
            <method name="getSignature" type="byte[]" line="2406"/>
            <javadoc line="2410">
                Retrieves the name of the signature algorithm.                
                <return>
                    The non-null string name of the signature algorithm.                    
                </return>
            </javadoc>
            <method name="getSignatureAlgorithm" type="String" line="2415"/>
            <javadoc line="2419">
                Retrieves the signer&apos;s X.509 certificate chain.                
                <return>
                    The non-null array of X.509 public-key certificates.                    
                </return>
            </javadoc>
            <method name="getSignerCertificateChain" type="X509Certificate[]" line="2424"/>
            <javadoc line="2428">
                Retrieves the content that was signed.                
                <return>
                    The content bytes. May be null.                    
                </return>
            </javadoc>
            <method name="getContent" type="byte[]" line="2433"/>
            <javadoc line="2437">
                Retrieves the original source ZIP file before it was signed.                
                <return>
                    The original ZIP file. May be null.                    
                </return>
            </javadoc>
            <method name="getSource" type="ZipFile" line="2442"/>
        </class>
    </source>