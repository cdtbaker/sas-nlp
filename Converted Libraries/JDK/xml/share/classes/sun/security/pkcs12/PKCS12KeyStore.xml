<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs12">
        <import package="java.io"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.Key"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.KeyStoreSpi"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="java.util"/>
        <import package="java.math"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto.spec.PBEParameterSpec"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.pkcs.ContentInfo"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.pkcs.EncryptedPrivateKeyInfo"/>
        <class name="PKCS12KeyStore" line="66">
            <extends class="KeyStoreSpi"/>
            <comment line="151">
                private key count
                 Note: This is a workaround to allow null localKeyID attribute
                 in pkcs12 with one private key entry and associated cert-chain                
            </comment>
            <comment line="156">
                the source of randomness                
            </comment>
            <comment line="175">
                Private keys and their supporting certificate chains                
            </comment>
            <comment line="184">
                A certificate with its PKCS #9 attributes                
            </comment>
            <comment line="488">
                Generate random salt                
            </comment>
            <comment line="502">
                Generate PBE Algorithm Parameters                
            </comment>
            <comment line="526">
                parse Algorithm Parameters                
            </comment>
            <comment line="557">
                Generate PBE key                
            </comment>
            <comment line="577">
                Encrypt private key using Password-based encryption (PBE)
                 as defined in PKCS#5.
                
                 NOTE: Currently pbeWithSHAAnd3-KeyTripleDES-CBC algorithmID is
                       used to derive the key and IV.
                
                 @return encrypted private key encoded as EncryptedPrivateKeyInfo                
            </comment>
            <comment line="818">
                Generate Hash.                
            </comment>
            <comment line="838">
                Calculate MAC using HMAC algorithm (required for password integrity)
                
                 Hash-based MAC algorithm combines secret key with message digest to
                 create a message authentication code (MAC)                
            </comment>
            <comment line="878">
                Validate Certificate Chain                
            </comment>
            <comment line="895">
                Create PKCS#12 Attributes, friendlyName and localKeyId.
                
                 Although attributes are optional, they could be required.
                 For e.g. localKeyId attribute is required to match the
                 private key with the associated end-entity certificate.
                
                 PKCS8ShroudedKeyBags include unique localKeyID and friendlyName.
                 CertBags may or may not include attributes depending on the type
                 of Certificate. In end-entity certificates, localKeyID should be
                 unique, and the corresponding private key should have the same
                 localKeyID. For trusted CA certs in the cert-chain, localKeyID
                 attribute is not required, hence most vendors don&apos;t include it.
                 NSSNetscape require it to be unique or null, where as IEOpenSSL
                 ignore it.
                
                 Here is a list of pkcs12 attribute values in CertBags.
                
                 PKCS12 Attribute       NSSNetscape    IE     OpenSSL    J2SE
                 --------------------------------------------------------------
                 LocalKeyId
                 (In EE cert only,
                  NULL in CA certs)      true          true     true      true
                
                 friendlyName            unique        same    same     unique
                                                       unique   unique
                                                                null
                
                 Note: OpenSSL adds friendlyName for end-entity cert only, and
                 removes the localKeyID and friendlyName for CA certs.
                 If the CertBag did not have a friendlyName, most vendors will
                 add it, and assign it to the DN of the cert.                
            </comment>
            <comment line="978">
                Create EncryptedData content type, that contains EncryptedContentInfo.
                 Includes certificates in individual SafeBags of type CertBag.
                 Each CertBag may include pkcs12 attributes
                 (see comments in getBagAttributes)                
            </comment>
            <comment line="1072">
                Create SafeContent Data content type.
                 Includes encrypted private key in a SafeBag of type PKCS8ShroudedKeyBag.
                 Each PKCS8ShroudedKeyBag includes pkcs12 attributes
                 (see comments in getBagAttributes)                
            </comment>
            <comment line="1122">
                Encrypt the contents using Password-based (PBE) encryption
                 as defined in PKCS #5.
                
                 NOTE: Currently pbeWithSHAAnd40BiteRC2-CBC algorithmID is used
                       to derive the key and IV.
                
                 @return encrypted contents encoded as EncryptedContentInfo                
            </comment>
            <javadoc line="66">
                This class provides the keystore implementation referred to as &quot;PKCS12&quot;.
                  Implements the PKCS#12 PFX protected using the Password privacy mode.
                  The contents are protected using Password integrity mode.
                  Currently we support following PBE algorithms:
                  - pbeWithSHAAnd3KeyTripleDESCBC to encrypt private keys
                  - pbeWithSHAAnd40BitRC2CBC to encrypt certificates
                  Supported encryption of various implementations :
                  Software and mode.     Certificate encryption  Private key encryption
                  ---------------------------------------------------------------------
                  MSIE4 (domestic            40 bit RC2.            40 bit RC2
                  and xport versions)
                  PKCS#12 export.
                  MSIE4, 5 (domestic         40 bit RC2,            40 bit RC2,
                  and export versions)       3 key triple DES       3 key triple DES
                  PKCS#12 import.
                  MSIE5                      40 bit RC2             3 key triple DES,
                  PKCS#12 export.                                   with SHA1 (168 bits)
                  Netscape Communicator      40 bit RC2             3 key triple DES,
                  (domestic and export                              with SHA1 (168 bits)
                  versions) PKCS#12 export
                  Netscape Communicator      40 bit ciphers only    All.
                  (export version)
                  PKCS#12 import.
                  Netscape Communicator      All.                   All.
                  (domestic or fortified
                  version) PKCS#12 import.
                  OpenSSL PKCS#12 code.      All.                   All.
                  ---------------------------------------------------------------------
                  NOTE: Currently PKCS12 KeyStore does not support TrustedCertEntries.
                  PKCS#12 is mainly used to deliver private keys with their associated
                  certificate chain and aliases. In a PKCS12 keystore, entries are
                  identified by the alias, and a localKeyId is required to match the
                  private key with the certificate.                
                <author>
                    Seema Malkani                    
                </author>
                <author>
                    Jeff Nisewanger                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    KeyProtector                    
                </see>
                <see>
                    java.security.KeyStoreSpi                    
                </see>
                <see>
                    KeyTool                    
                </see>
            </javadoc>
            <declaration name="VERSION_3" type="int" line="123"/>
            <declaration name="keyBag" type="int" line="125"/>
            <declaration name="certBag" type="int" line="126"/>
            <declaration name="pkcs9Name" type="int" line="128"/>
            <declaration name="pkcs9KeyId" type="int" line="129"/>
            <declaration name="pkcs9certType" type="int" line="131"/>
            <declaration name="pbeWithSHAAnd40BitRC2CBC" type="int" line="133"/>
            <declaration name="pbeWithSHAAnd3KeyTripleDESCBC" type="int" line="135"/>
            <declaration name="PKCS8ShroudedKeyBag_OID" type="ObjectIdentifier" line="138"/>
            <declaration name="CertBag_OID" type="ObjectIdentifier" line="139"/>
            <declaration name="PKCS9FriendlyName_OID" type="ObjectIdentifier" line="140"/>
            <declaration name="PKCS9LocalKeyId_OID" type="ObjectIdentifier" line="141"/>
            <declaration name="PKCS9CertType_OID" type="ObjectIdentifier" line="142"/>
            <declaration name="pbeWithSHAAnd40BitRC2CBC_OID" type="ObjectIdentifier" line="143"/>
            <declaration name="pbeWithSHAAnd3KeyTripleDESCBC_OID" type="ObjectIdentifier" line="144"/>
            <declaration name="counter" type="int" line="146"/>
            <declaration name="iterationCount" type="int" line="147"/>
            <declaration name="SALT_LEN" type="int" line="148"/>
            <declaration name="privateKeyCount" type="int" line="153"/>
            <declaration name="random" type="SecureRandom" line="156"/>
            <scope line="158">
                <scope line="159"/>
                <scope line="169"/>
            </scope>
            <class name="KeyEntry" line="175">
                <comment line="177">
                    the creation date of this entry                    
                </comment>
                <declaration name="date" type="Date" line="176"/>
                <declaration name="protectedPrivKey" type="byte[]" line="177"/>
                <declaration name="chain" type="Certificate" line="178"/>
                <declaration name="keyId" type="byte[]" line="179"/>
                <declaration name="alias" type="String" line="180"/>
            </class>
            <class name="CertEntry" line="184">
                <comment line="177">
                    the creation date of this entry                    
                </comment>
                <declaration name="cert" type="X509Certificate" line="185"/>
                <declaration name="keyId" type="byte[]" line="186"/>
                <declaration name="alias" type="String" line="187"/>
                <method name="CertEntry" type="constructor" line="188">
                    <params>
                        <param name="cert" type="X509Certificate"/>
                        <param name="keyId" type="byte[]"/>
                        <param name="alias" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="entries" type="Hashtable&lt;String,KeyEntry&gt;" line="195"/>
            <javadoc line="195">
                Private keys and certificates are stored in a hashtable.
                  Hash entries are keyed by alias names.                
            </javadoc>
            <declaration name="keyList" type="ArrayList&lt;KeyEntry&gt;" line="202"/>
            <declaration name="certsMap" type="LinkedHashMap&lt;X500Principal,X509Certificate&gt;" line="203"/>
            <declaration name="certEntries" type="ArrayList&lt;CertEntry&gt;" line="205"/>
            <javadoc line="207">
                Returns the key associated with the given alias, using the given
                  password to recover it.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a &lt;i&gt;key entry&lt;/i&gt;.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="224">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="233">
                    get the encoded private key                    
                </comment>
                <comment line="240">
                    get the encrypted private key                    
                </comment>
                <comment line="245">
                    parse Algorithm parameters                    
                </comment>
                <comment line="260">
                    Use JCE                    
                </comment>
                <comment line="268">
                    Parse the key algorithm and then use a JCA key factory
                     to create the private key.                    
                </comment>
                <declaration name="entry" type="KeyEntry" line="225"/>
                <declaration name="key" type="Key" line="226"/>
                <scope line="228"/>
                <declaration name="encrBytes" type="byte[]" line="233"/>
                <declaration name="encryptedKey" type="byte[]" line="235"/>
                <declaration name="algParams" type="AlgorithmParameters" line="236"/>
                <declaration name="algOid" type="ObjectIdentifier" line="237"/>
                <scope line="238">
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="240"/>
                    <declaration name="val" type="DerValue" line="245"/>
                    <declaration name="in" type="DerInputStream" line="246"/>
                </scope>
                <scope line="250">
                    <declaration name="uke" type="UnrecoverableKeyException" line="251"/>
                </scope>
                <scope line="258">
                    <declaration name="skey" type="SecretKey" line="260"/>
                    <declaration name="cipher" type="Cipher" line="261"/>
                    <declaration name="privateKeyInfo" type="byte[]" line="263"/>
                    <declaration name="kspec" type="PKCS8EncodedKeySpec" line="265"/>
                    <declaration name="val" type="DerValue" line="271"/>
                    <declaration name="in" type="DerInputStream" line="272"/>
                    <declaration name="i" type="int" line="273"/>
                    <declaration name="value" type="DerValue[]" line="274"/>
                    <declaration name="algId" type="AlgorithmId" line="275"/>
                    <declaration name="algName" type="String" line="276"/>
                    <declaration name="kfac" type="KeyFactory" line="278"/>
                </scope>
                <scope line="280">
                    <declaration name="uke" type="UnrecoverableKeyException" line="281"/>
                </scope>
            </method>
            <javadoc line="290">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user&apos;s certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a &lt;i&gt;trusted certificate entry&lt;/i&gt; or a
                      &lt;i&gt;key entry&lt;/i&gt; without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="301">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="302"/>
                <scope line="303">
                    <scope line="304"/>
                    <scope line="306"/>
                </scope>
                <scope line="309"/>
            </method>
            <javadoc line="314">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="329">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="330"/>
                <scope line="331">
                    <scope line="332"/>
                    <scope line="334"/>
                </scope>
                <scope line="337"/>
            </method>
            <javadoc line="342">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="350">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="351"/>
                <scope line="352"/>
                <scope line="354"/>
            </method>
            <javadoc line="359">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if the given key cannot be protected, or
                      this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="384">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="393">
                    Encrypt the private key                    
                </comment>
                <comment line="404">
                    clone the chain                    
                </comment>
                <comment line="406">
                    validate cert-chain                    
                </comment>
                <comment line="413">
                    set the keyId to current date                    
                </comment>
                <comment line="415">
                    set the alias                    
                </comment>
                <comment line="418">
                    add the entry                    
                </comment>
                <scope line="385">
                    <declaration name="entry" type="KeyEntry" line="386"/>
                    <scope line="389">
                        <scope line="391"/>
                        <scope line="395"/>
                    </scope>
                    <scope line="399"/>
                    <scope line="404"/>
                </scope>
                <scope line="419">
                    <declaration name="ke" type="KeyStoreException" line="420"/>
                </scope>
            </method>
            <javadoc line="427">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a
                  certificate chain certifying the corresponding public key. If the
                  underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;,
                  &lt;code&gt;key&lt;/code&gt; must be encoded as an
                  &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="453">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="455">
                    key must be encoded as EncryptedPrivateKeyInfo
                     as defined in PKCS#8                    
                </comment>
                <comment line="470">
                    set the keyId to current date                    
                </comment>
                <comment line="473">
                    Won&apos;t happen                    
                </comment>
                <comment line="475">
                    set the alias                    
                </comment>
                <comment line="483">
                    add the entry                    
                </comment>
                <scope line="456"/>
                <scope line="458">
                    <declaration name="ke" type="KeyStoreException" line="459"/>
                </scope>
                <declaration name="entry" type="KeyEntry" line="465"/>
                <scope line="468"/>
                <scope line="471"/>
                <scope line="478"/>
            </method>
            <method name="getSalt" type="byte[]" line="491">
                <comment line="493">
                    Generate a random salt.                    
                </comment>
                <declaration name="salt" type="byte[]" line="493"/>
                <scope line="494"/>
            </method>
            <method name="getAlgorithmParameters" type="AlgorithmParameters" line="506">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="510">
                    create PBE parameters from salt and iteration count                    
                </comment>
                <declaration name="algParams" type="AlgorithmParameters" line="507"/>
                <declaration name="paramSpec" type="PBEParameterSpec" line="510"/>
                <scope line="512"/>
                <scope line="515">
                    <declaration name="ioe" type="IOException" line="516"/>
                </scope>
            </method>
            <method name="parseAlgParameters" type="AlgorithmParameters" line="530">
                <params>
                    <param name="in" type="DerInputStream"/>
                </params>
                <declaration name="algParams" type="AlgorithmParameters" line="531"/>
                <scope line="532">
                    <declaration name="params" type="DerValue" line="533"/>
                    <scope line="534"/>
                    <scope line="536">
                        <scope line="538"/>
                    </scope>
                    <scope line="542"/>
                </scope>
                <scope line="546">
                    <declaration name="ioe" type="IOException" line="547"/>
                </scope>
            </method>
            <method name="getPBEKey" type="SecretKey" line="560">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="skey" type="SecretKey" line="561"/>
                <scope line="563">
                    <declaration name="keySpec" type="PBEKeySpec" line="564"/>
                    <declaration name="skFac" type="SecretKeyFactory" line="565"/>
                </scope>
                <scope line="567">
                    <declaration name="ioe" type="IOException" line="568"/>
                </scope>
            </method>
            <method name="encryptPrivateKey" type="byte[]" line="587">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="592">
                    create AlgorithmParameters                    
                </comment>
                <comment line="596">
                    Use JCE                    
                </comment>
                <comment line="602">
                    wrap encrypted private key in EncryptedPrivateKeyInfo
                     as defined in PKCS#8                    
                </comment>
                <declaration name="key" type="byte[]" line="588"/>
                <scope line="590">
                    <declaration name="algParams" type="AlgorithmParameters" line="592"/>
                    <declaration name="skey" type="SecretKey" line="596"/>
                    <declaration name="cipher" type="Cipher" line="597"/>
                    <declaration name="encryptedKey" type="byte[]" line="599"/>
                    <declaration name="algid" type="AlgorithmId" line="603"/>
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="605"/>
                </scope>
                <scope line="608">
                    <declaration name="uke" type="UnrecoverableKeyException" line="609"/>
                </scope>
            </method>
            <javadoc line="619">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      identify a &lt;i&gt;key entry&lt;/i&gt;, or on an attempt to create a
                      &lt;i&gt;trusted cert entry&lt;/i&gt; which is currently not supported.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="635">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="636"/>
                <scope line="637"/>
            </method>
            <javadoc line="643">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="652">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="656">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration<String>" line="661"/>
            <javadoc line="665">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="672">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="676">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="681"/>
            <javadoc line="685">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;key entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="692">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="693"/>
                <scope line="694"/>
                <scope line="696"/>
            </method>
            <javadoc line="701">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;trusted certificate entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="708">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="710">
                    TrustedCertEntry is not supported                    
                </comment>
            </method>
            <javadoc line="713">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="729">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="certElem" type="Certificate" line="730"/>
                <scope line="732">
                    <declaration name="alias" type="String" line="733"/>
                    <declaration name="entry" type="KeyEntry" line="734"/>
                    <scope line="735"/>
                    <scope line="738"/>
                </scope>
            </method>
            <javadoc line="745">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="760">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="762">
                    password is mandatory when storing                    
                </comment>
                <comment line="767">
                    -- Create PFX                    
                </comment>
                <comment line="770">
                    PFX version (always write the latest version)                    
                </comment>
                <comment line="776">
                    -- Create AuthSafe                    
                </comment>
                <comment line="779">
                    -- Create ContentInfos                    
                </comment>
                <comment line="782">
                    -- create safeContent Data ContentInfo                    
                </comment>
                <comment line="787">
                    -- create EncryptedContentInfo                    
                </comment>
                <comment line="794">
                    wrap as SequenceOf ContentInfos                    
                </comment>
                <comment line="799">
                    Create Encapsulated ContentInfo                    
                </comment>
                <comment line="805">
                    -- MAC                    
                </comment>
                <comment line="809">
                    write PFX to output stream                    
                </comment>
                <scope line="762"/>
                <declaration name="pfx" type="DerOutputStream" line="767"/>
                <declaration name="version" type="DerOutputStream" line="770"/>
                <declaration name="pfxVersion" type="byte[]" line="772"/>
                <declaration name="authSafe" type="DerOutputStream" line="776"/>
                <declaration name="authSafeContentInfo" type="DerOutputStream" line="779"/>
                <declaration name="safeContentData" type="byte[]" line="782"/>
                <declaration name="dataContentInfo" type="ContentInfo" line="783"/>
                <declaration name="encrData" type="byte[]" line="787"/>
                <declaration name="encrContentInfo" type="ContentInfo" line="788"/>
                <declaration name="cInfo" type="DerOutputStream" line="794"/>
                <declaration name="authenticatedSafe" type="byte[]" line="796"/>
                <declaration name="contentInfo" type="ContentInfo" line="799"/>
                <declaration name="authSafeData" type="byte[]" line="801"/>
                <declaration name="macData" type="byte[]" line="805"/>
                <declaration name="pfxout" type="DerOutputStream" line="809"/>
                <declaration name="pfxData" type="byte[]" line="811"/>
            </method>
            <method name="generateHash" type="byte[]" line="821">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="digest" type="byte[]" line="822"/>
                <scope line="824">
                    <declaration name="md" type="MessageDigest" line="825"/>
                </scope>
                <scope line="828">
                    <declaration name="ioe" type="IOException" line="829"/>
                </scope>
            </method>
            <method name="calculateMac" type="byte[]" line="845">
                <params>
                    <param name="passwd" type="char[]"/>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="851">
                    Generate a random salt.                    
                </comment>
                <comment line="854">
                    generate MAC (MAC key is generated within JCE)                    
                </comment>
                <comment line="863">
                    encode as MacData                    
                </comment>
                <declaration name="mData" type="byte[]" line="846"/>
                <declaration name="algName" type="String" line="847"/>
                <scope line="849">
                    <declaration name="salt" type="byte[]" line="851"/>
                    <declaration name="m" type="Mac" line="854"/>
                    <declaration name="params" type="PBEParameterSpec" line="855"/>
                    <declaration name="key" type="SecretKey" line="857"/>
                    <declaration name="macResult" type="byte[]" line="860"/>
                    <declaration name="macData" type="MacData" line="863"/>
                    <declaration name="bytes" type="DerOutputStream" line="865"/>
                </scope>
                <scope line="868">
                    <declaration name="ioe" type="IOException" line="869"/>
                </scope>
            </method>
            <method name="validateChain" type="boolean" line="881">
                <params>
                    <param name="certChain" type="Certificate[]"/>
                </params>
                <scope line="882">
                    <declaration name="issuerDN" type="X500Principal" line="883"/>
                    <declaration name="subjectDN" type="X500Principal" line="885"/>
                </scope>
            </method>
            <method name="getBagAttributes" type="byte[]" line="928">
                <params>
                    <param name="alias" type="String"/>
                    <param name="keyId" type="byte[]"/>
                </params>
                <comment line="934">
                    return null if both attributes are null                    
                </comment>
                <comment line="939">
                    SafeBag Attributes                    
                </comment>
                <comment line="942">
                    Encode the friendlyname oid.                    
                </comment>
                <comment line="954">
                    Encode the localkeyId oid.                    
                </comment>
                <declaration name="localKeyID" type="byte[]" line="930"/>
                <declaration name="friendlyName" type="byte[]" line="931"/>
                <scope line="934"/>
                <declaration name="bagAttrs" type="DerOutputStream" line="939"/>
                <scope line="942">
                    <declaration name="bagAttr1" type="DerOutputStream" line="943"/>
                    <declaration name="bagAttrContent1" type="DerOutputStream" line="945"/>
                    <declaration name="bagAttrValue1" type="DerOutputStream" line="946"/>
                </scope>
                <scope line="954">
                    <declaration name="bagAttr2" type="DerOutputStream" line="955"/>
                    <declaration name="bagAttrContent2" type="DerOutputStream" line="957"/>
                    <declaration name="bagAttrValue2" type="DerOutputStream" line="958"/>
                </scope>
                <declaration name="attrs" type="DerOutputStream" line="965"/>
                <scope line="966"/>
                <scope line="969"/>
            </method>
            <method name="createEncryptedData" type="byte[]" line="985">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="993">
                    certificate chain                    
                </comment>
                <comment line="1002">
                    create SafeBag of Type CertBag                    
                </comment>
                <comment line="1006">
                    create a CertBag                    
                </comment>
                <comment line="1010">
                    write encoded certs in a context-specific tag                    
                </comment>
                <comment line="1017">
                    wrap CertBag in a Sequence                    
                </comment>
                <comment line="1022">
                    Wrap the CertBag encoding in a context-specific tag.                    
                </comment>
                <comment line="1025">
                    write SafeBag Value                    
                </comment>
                <comment line="1029">
                    write SafeBag Attributes
                     All Certs should have a unique friendlyName.
                     This change is made to meet NSS requirements.                    
                </comment>
                <comment line="1034">
                    Only End-Entity Cert should have a localKeyId.                    
                </comment>
                <comment line="1037">
                    Trusted root CA certs and Intermediate CA certs do not
                     need to have a localKeyId, and hence localKeyId is null
                     This change is made to meet NSS/Netscape requirements.
                     NSS pkcs12 library requires trusted CA certs in the
                     certificate chain to have unique or null localKeyID.
                     However, IE/OpenSSL do not impose this restriction.                    
                </comment>
                <comment line="1050">
                    wrap as Sequence                    
                </comment>
                <comment line="1052">
                    for cert-chain                    
                </comment>
                <comment line="1055">
                    wrap as SequenceOf SafeBag                    
                </comment>
                <comment line="1060">
                    encrypt the content (EncryptedContentInfo)                    
                </comment>
                <comment line="1063">
                    -- SEQUENCE of EncryptedData                    
                </comment>
                <declaration name="out" type="DerOutputStream" line="986"/>
                <scope line="987">
                    <declaration name="alias" type="String" line="989"/>
                    <declaration name="entry" type="KeyEntry" line="990"/>
                    <declaration name="chainLen" type="int" line="993"/>
                    <scope line="994"/>
                    <scope line="996"/>
                    <scope line="1000">
                        <declaration name="safeBag" type="DerOutputStream" line="1002"/>
                        <declaration name="certBag" type="DerOutputStream" line="1006"/>
                        <declaration name="certValue" type="DerOutputStream" line="1010"/>
                        <declaration name="cert" type="X509Certificate" line="1011"/>
                        <declaration name="certout" type="DerOutputStream" line="1017"/>
                        <declaration name="certBagValue" type="byte[]" line="1019"/>
                        <declaration name="bagValue" type="DerOutputStream" line="1022"/>
                        <declaration name="bagAttrs" type="byte[]" line="1031"/>
                        <scope line="1032"/>
                        <scope line="1035"/>
                        <scope line="1045"/>
                    </scope>
                </scope>
                <declaration name="safeBagValue" type="DerOutputStream" line="1055"/>
                <declaration name="safeBagData" type="byte[]" line="1057"/>
                <declaration name="encrContentInfo" type="byte[]" line="1060"/>
                <declaration name="encrData" type="DerOutputStream" line="1063"/>
                <declaration name="encrDataContent" type="DerOutputStream" line="1064"/>
            </method>
            <method name="createSafeContent" type="byte[]" line="1078">
                <comment line="1087">
                    Create SafeBag of type pkcs8ShroudedKeyBag                    
                </comment>
                <comment line="1091">
                    get the encrypted private key                    
                </comment>
                <comment line="1101">
                    Wrap the EncryptedPrivateKeyInfo in a context-specific tag.                    
                </comment>
                <comment line="1107">
                    write SafeBag Attributes                    
                </comment>
                <comment line="1111">
                    wrap as Sequence                    
                </comment>
                <comment line="1115">
                    wrap as Sequence                    
                </comment>
                <declaration name="out" type="DerOutputStream" line="1080"/>
                <scope line="1081">
                    <declaration name="alias" type="String" line="1083"/>
                    <declaration name="entry" type="KeyEntry" line="1084"/>
                    <declaration name="safeBag" type="DerOutputStream" line="1087"/>
                    <declaration name="encrBytes" type="byte[]" line="1091"/>
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="1092"/>
                    <scope line="1093"/>
                    <scope line="1095"/>
                    <declaration name="bagValue" type="DerOutputStream" line="1101"/>
                    <declaration name="bagAttrs" type="byte[]" line="1107"/>
                </scope>
                <declaration name="safeBagValue" type="DerOutputStream" line="1115"/>
            </method>
            <method name="encryptContent" type="byte[]" line="1131">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="1136">
                    create AlgorithmParameters                    
                </comment>
                <comment line="1146">
                    Use JCE                    
                </comment>
                <comment line="1159">
                    create EncryptedContentInfo                    
                </comment>
                <comment line="1164">
                    Wrap encrypted data in a context-specific tag.                    
                </comment>
                <comment line="1170">
                    wrap EncryptedContentInfo in a Sequence                    
                </comment>
                <declaration name="encryptedData" type="byte[]" line="1133"/>
                <declaration name="algParams" type="AlgorithmParameters" line="1136"/>
                <declaration name="bytes" type="DerOutputStream" line="1138"/>
                <declaration name="algId" type="AlgorithmId" line="1139"/>
                <declaration name="encodedAlgId" type="byte[]" line="1142"/>
                <scope line="1144">
                    <declaration name="skey" type="SecretKey" line="1146"/>
                    <declaration name="cipher" type="Cipher" line="1147"/>
                </scope>
                <scope line="1151">
                    <declaration name="ioe" type="IOException" line="1152"/>
                </scope>
                <declaration name="bytes2" type="DerOutputStream" line="1159"/>
                <declaration name="tmpout2" type="DerOutputStream" line="1164"/>
                <declaration name="out" type="DerOutputStream" line="1170"/>
            </method>
            <javadoc line="1175">
                Loads the keystore from the given input stream.
                  &lt;p&gt;If a password is given, it is used to check the integrity of the
                  keystore data. Otherwise, the integrity of the keystore is not checked.                
                <param>
                    stream the input stream from which the keystore is loaded                    
                </param>
                <param>
                    password the (optional) password used to check the integrity of
                      the keystore.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="1194">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="1204">
                    reset the counter                    
                </comment>
                <comment line="1217">
                    Read the authSafe.                    
                </comment>
                <comment line="1226">
                                        
                </comment>
                <comment line="1234">
                    reset the count at the start                    
                </comment>
                <comment line="1237">
                    Spin over the ContentInfos.                    
                </comment>
                <comment line="1271">
                    parse Algorithm parameters                    
                </comment>
                <comment line="1277">
                    Use JCE                    
                </comment>
                <comment line="1297">
                    The MacData is optional.                    
                </comment>
                <comment line="1308">
                    generate MAC (MAC key is created within JCE)                    
                </comment>
                <comment line="1330">
                    Match up private keys with certificate chains.                    
                </comment>
                <comment line="1348">
                                        
                </comment>
                <declaration name="dis" type="DataInputStream" line="1195"/>
                <declaration name="cf" type="CertificateFactory" line="1196"/>
                <declaration name="bais" type="ByteArrayInputStream" line="1197"/>
                <declaration name="encoded" type="byte[]" line="1198"/>
                <declaration name="val" type="DerValue" line="1206"/>
                <declaration name="s" type="DerInputStream" line="1207"/>
                <declaration name="version" type="int" line="1208"/>
                <scope line="1210"/>
                <declaration name="authSafeData" type="byte[]" line="1219"/>
                <declaration name="authSafe" type="ContentInfo" line="1220"/>
                <declaration name="contentType" type="ObjectIdentifier" line="1221"/>
                <scope line="1223"/>
                <scope line="1225"/>
                <declaration name="as" type="DerInputStream" line="1229"/>
                <declaration name="safeContentsArray" type="DerValue[]" line="1230"/>
                <declaration name="count" type="int" line="1231"/>
                <scope line="1239">
                    <declaration name="safeContentsData" type="byte[]" line="1240"/>
                    <declaration name="safeContents" type="ContentInfo" line="1241"/>
                    <declaration name="sci" type="DerInputStream" line="1242"/>
                    <declaration name="eAlgId" type="byte[]" line="1243"/>
                    <scope line="1249"/>
                    <scope line="1251">
                        <scope line="1252"/>
                        <declaration name="edi" type="DerInputStream" line="1255"/>
                        <declaration name="edVersion" type="int" line="1257"/>
                        <declaration name="seq" type="DerValue[]" line="1258"/>
                        <declaration name="edContentType" type="ObjectIdentifier" line="1259"/>
                        <scope line="1261"/>
                        <declaration name="newTag" type="byte" line="1264"/>
                        <declaration name="in" type="DerInputStream" line="1271"/>
                        <declaration name="algOid" type="ObjectIdentifier" line="1272"/>
                        <declaration name="algParams" type="AlgorithmParameters" line="1273"/>
                        <scope line="1275">
                            <declaration name="skey" type="SecretKey" line="1277"/>
                            <declaration name="cipher" type="Cipher" line="1278"/>
                        </scope>
                        <scope line="1282">
                            <declaration name="ioe" type="IOException" line="1283"/>
                        </scope>
                    </scope>
                    <scope line="1288"/>
                    <declaration name="sc" type="DerInputStream" line="1292"/>
                </scope>
                <scope line="1297">
                    <declaration name="macData" type="MacData" line="1298"/>
                    <scope line="1299">
                        <declaration name="algName" type="String" line="1300"/>
                        <scope line="1303"/>
                        <declaration name="m" type="Mac" line="1308"/>
                        <declaration name="params" type="PBEParameterSpec" line="1309"/>
                        <declaration name="key" type="SecretKey" line="1312"/>
                        <declaration name="macResult" type="byte[]" line="1315"/>
                        <scope line="1317"/>
                    </scope>
                    <scope line="1321">
                        <declaration name="ioe" type="IOException" line="1322"/>
                    </scope>
                </scope>
                <declaration name="list" type="KeyEntry[]" line="1332"/>
                <scope line="1333">
                    <declaration name="entry" type="KeyEntry" line="1334"/>
                    <scope line="1335">
                        <declaration name="chain" type="ArrayList&lt;X509Certificate&gt;" line="1336"/>
                        <declaration name="cert" type="X509Certificate" line="1338"/>
                        <scope line="1339">
                            <declaration name="issuerDN" type="X500Principal" line="1341"/>
                            <scope line="1342"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1357">
                Locates a matched CertEntry from certEntries, and returns its cert.                
                <param>
                    entry the KeyEntry to match                    
                </param>
                <return>
                    a certificate, null if not found                    
                </return>
            </javadoc>
            <method name="findMatchedCertificate" type="X509Certificate" line="1362">
                <params>
                    <param name="entry" type="KeyEntry"/>
                </params>
                <comment line="1370">
                    Full match!                    
                </comment>
                <comment line="1377">
                    keyId match first, for compatibility                    
                </comment>
                <declaration name="keyIdMatch" type="CertEntry" line="1363"/>
                <declaration name="aliasMatch" type="CertEntry" line="1364"/>
                <scope line="1365">
                    <scope line="1366">
                        <scope line="1368"/>
                    </scope>
                    <scope line="1372"/>
                </scope>
            </method>
            <method name="loadSafeContents" type="void" line="1384">
                <params>
                    <param name="stream" type="DerInputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="1389">
                    Spin over the SafeBags.                    
                </comment>
                <comment line="1426">
                    log error message for &quot;unsupported PKCS12 bag type&quot;                    
                </comment>
                <comment line="1433">
                    entry does not have attributes
                     Note: CA certs can have no attributes
                     OpenSSL generates pkcs12 with no attr for CA certs.                    
                </comment>
                <comment line="1462">
                    log error message for &quot;unknown attr&quot;                    
                </comment>
                <comment line="1467">
                    As per PKCS12 v1.0 friendlyname (alias) and localKeyId (keyId)
                     are optional PKCS12 bagAttributes. But entries in the keyStore
                     are identified by their alias. Hence we need to have an
                     Unfriendlyname in the alias, if alias is null. The keyId
                     attribute is required to match the private key with the
                     certificate. If we get a bagItem of type KeyEntry with a
                     null keyId, we should skip it entirely.                    
                </comment>
                <comment line="1479">
                    Insert a localKeyID for the privateKey
                     Note: This is a workaround to allow null localKeyID
                     attribute in pkcs12 with one private key entry and
                     associated cert-chain                    
                </comment>
                <comment line="1490">
                    restore date if it exists                    
                </comment>
                <comment line="1512">
                    Insert a localKeyID for the corresponding cert
                     Note: This is a workaround to allow null localKeyID
                     attribute in pkcs12 with one private key entry and
                     associated cert-chain                    
                </comment>
                <comment line="1517">
                    insert localKeyID only for EE cert or self-signed cert                    
                </comment>
                <declaration name="safeBags" type="DerValue[]" line="1385"/>
                <declaration name="count" type="int" line="1386"/>
                <scope line="1391">
                    <declaration name="bagId" type="ObjectIdentifier" line="1392"/>
                    <declaration name="sbi" type="DerInputStream" line="1393"/>
                    <declaration name="bagValue" type="DerValue" line="1394"/>
                    <declaration name="bagItem" type="Object" line="1395"/>
                    <scope line="1400"/>
                    <scope line="1405">
                        <declaration name="kEntry" type="KeyEntry" line="1406"/>
                    </scope>
                    <scope line="1410">
                        <declaration name="cs" type="DerInputStream" line="1411"/>
                        <declaration name="certValues" type="DerValue[]" line="1412"/>
                        <declaration name="certId" type="ObjectIdentifier" line="1413"/>
                        <scope line="1414"/>
                        <declaration name="certValue" type="DerValue" line="1418"/>
                        <declaration name="cf" type="CertificateFactory" line="1419"/>
                        <declaration name="cert" type="X509Certificate" line="1420"/>
                    </scope>
                    <scope line="1424"/>
                    <declaration name="attrSet" type="DerValue[]" line="1428"/>
                    <scope line="1429"/>
                    <scope line="1431"/>
                    <declaration name="alias" type="String" line="1438"/>
                    <declaration name="keyId" type="byte[]" line="1439"/>
                    <scope line="1441">
                        <scope line="1442">
                            <declaration name="as" type="DerInputStream" line="1443"/>
                            <declaration name="attrSeq" type="DerValue[]" line="1445"/>
                            <declaration name="attrId" type="ObjectIdentifier" line="1446"/>
                            <declaration name="vs" type="DerInputStream" line="1447"/>
                            <declaration name="valSet" type="DerValue[]" line="1449"/>
                            <scope line="1450"/>
                            <scope line="1452"/>
                            <scope line="1456"/>
                            <scope line="1458"/>
                            <scope line="1460"/>
                        </scope>
                    </scope>
                    <scope line="1475">
                        <declaration name="entry" type="KeyEntry" line="1476"/>
                        <scope line="1477">
                            <scope line="1482"/>
                            <scope line="1484"/>
                        </scope>
                        <declaration name="keyIdStr" type="String" line="1490"/>
                        <declaration name="date" type="Date" line="1491"/>
                        <scope line="1492">
                            <scope line="1493"/>
                            <scope line="1496"/>
                        </scope>
                        <scope line="1500"/>
                    </scope>
                    <scope line="1509">
                        <declaration name="cert" type="X509Certificate" line="1510"/>
                        <scope line="1515">
                            <scope line="1517"/>
                        </scope>
                        <declaration name="subjectDN" type="X500Principal" line="1522"/>
                        <scope line="1523">
                            <scope line="1524"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getUnfriendlyName" type="String" line="1532"/>
        </class>
    </source>