<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs12">
        <import package="java.io"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.Key"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.KeyStoreSpi"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="java.util"/>
        <import package="java.math"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto.spec.PBEParameterSpec"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.pkcs.ContentInfo"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.pkcs.EncryptedPrivateKeyInfo"/>
        <class name="PKCS12KeyStore" line="36">
            <extends class="KeyStoreSpi"/>
            <javadoc line="36">
                This class provides the keystore implementation referred to as &quot;PKCS12&quot;.
                  Implements the PKCS#12 PFX protected using the Password privacy mode.
                  The contents are protected using Password integrity mode.
                  Currently we support following PBE algorithms:
                  - pbeWithSHAAnd3KeyTripleDESCBC to encrypt private keys
                  - pbeWithSHAAnd40BitRC2CBC to encrypt certificates
                  Supported encryption of various implementations :
                  Software and mode.     Certificate encryption  Private key encryption
                  ---------------------------------------------------------------------
                  MSIE4 (domestic            40 bit RC2.            40 bit RC2
                  and xport versions)
                  PKCS#12 export.
                  MSIE4, 5 (domestic         40 bit RC2,            40 bit RC2,
                  and export versions)       3 key triple DES       3 key triple DES
                  PKCS#12 import.
                  MSIE5                      40 bit RC2             3 key triple DES,
                  PKCS#12 export.                                   with SHA1 (168 bits)
                  Netscape Communicator      40 bit RC2             3 key triple DES,
                  (domestic and export                              with SHA1 (168 bits)
                  versions) PKCS#12 export
                  Netscape Communicator      40 bit ciphers only    All.
                  (export version)
                  PKCS#12 import.
                  Netscape Communicator      All.                   All.
                  (domestic or fortified
                  version) PKCS#12 import.
                  OpenSSL PKCS#12 code.      All.                   All.
                  ---------------------------------------------------------------------
                  NOTE: Currently PKCS12 KeyStore does not support TrustedCertEntries.
                  PKCS#12 is mainly used to deliver private keys with their associated
                  certificate chain and aliases. In a PKCS12 keystore, entries are
                  identified by the alias, and a localKeyId is required to match the
                  private key with the certificate.                
                <author>
                    Seema Malkani                    
                </author>
                <author>
                    Jeff Nisewanger                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    KeyProtector                    
                </see>
                <see>
                    java.security.KeyStoreSpi                    
                </see>
                <see>
                    KeyTool                    
                </see>
            </javadoc>
            <declaration name="VERSION_3" type="int" line="78"/>
            <declaration name="keyBag" type="int" line="79"/>
            <declaration name="certBag" type="int" line="80"/>
            <declaration name="pkcs9Name" type="int" line="81"/>
            <declaration name="pkcs9KeyId" type="int" line="82"/>
            <declaration name="pkcs9certType" type="int" line="83"/>
            <declaration name="pbeWithSHAAnd40BitRC2CBC" type="int" line="84"/>
            <declaration name="pbeWithSHAAnd3KeyTripleDESCBC" type="int" line="85"/>
            <declaration name="PKCS8ShroudedKeyBag_OID" type="ObjectIdentifier" line="86"/>
            <declaration name="CertBag_OID" type="ObjectIdentifier" line="87"/>
            <declaration name="PKCS9FriendlyName_OID" type="ObjectIdentifier" line="88"/>
            <declaration name="PKCS9LocalKeyId_OID" type="ObjectIdentifier" line="89"/>
            <declaration name="PKCS9CertType_OID" type="ObjectIdentifier" line="90"/>
            <declaration name="pbeWithSHAAnd40BitRC2CBC_OID" type="ObjectIdentifier" line="91"/>
            <declaration name="pbeWithSHAAnd3KeyTripleDESCBC_OID" type="ObjectIdentifier" line="92"/>
            <declaration name="counter" type="int" line="93"/>
            <declaration name="iterationCount" type="int" line="94"/>
            <declaration name="SALT_LEN" type="int" line="95"/>
            <declaration name="privateKeyCount" type="int" line="96"/>
            <declaration name="random" type="SecureRandom" line="97"/>
            <scope line="98">
                <scope line="99"/>
                <scope line="108"/>
            </scope>
            <class name="KeyEntry" line="111">
                <declaration name="date" type="Date" line="112"/>
                <declaration name="protectedPrivKey" type="byte[]" line="113"/>
                <declaration name="chain" type="Certificate" line="114"/>
                <declaration name="keyId" type="byte[]" line="115"/>
                <declaration name="alias" type="String" line="116"/>
            </class>
            <class name="CertEntry" line="118">
                <declaration name="cert" type="X509Certificate" line="119"/>
                <declaration name="keyId" type="byte[]" line="120"/>
                <declaration name="alias" type="String" line="121"/>
                <method name="CertEntry" type="constructor" line="122">
                    <params>
                        <param name="cert" type="X509Certificate"/>
                        <param name="keyId" type="byte[]"/>
                        <param name="alias" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="entries" type="Hashtable&amp;lt;String,KeyEntry&amp;gt;" line="128"/>
            <javadoc line="128">
                Private keys and certificates are stored in a hashtable.
                  Hash entries are keyed by alias names.                
            </javadoc>
            <declaration name="keyList" type="ArrayList&amp;lt;KeyEntry&amp;gt;" line="133"/>
            <declaration name="certsMap" type="LinkedHashMap&amp;lt;X500Principal,X509Certificate&amp;gt;" line="134"/>
            <declaration name="certEntries" type="ArrayList&amp;lt;CertEntry&amp;gt;" line="135"/>
            <javadoc line="136">
                Returns the key associated with the given alias, using the given
                  password to recover it.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a &lt;i&gt;key entry&lt;/i&gt;.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="148">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="149"/>
                <declaration name="key" type="Key" line="150"/>
                <scope line="151"/>
                <declaration name="encrBytes" type="byte[]" line="154"/>
                <declaration name="encryptedKey" type="byte[]" line="155"/>
                <declaration name="algParams" type="AlgorithmParameters" line="156"/>
                <declaration name="algOid" type="ObjectIdentifier" line="157"/>
                <scope line="158">
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="159"/>
                    <declaration name="val" type="DerValue" line="161"/>
                    <declaration name="in" type="DerInputStream" line="162"/>
                </scope>
                <scope line="166">
                    <declaration name="uke" type="UnrecoverableKeyException" line="167"/>
                </scope>
                <scope line="171">
                    <declaration name="skey" type="SecretKey" line="172"/>
                    <declaration name="cipher" type="Cipher" line="173"/>
                    <declaration name="privateKeyInfo" type="byte[]" line="175"/>
                    <declaration name="kspec" type="PKCS8EncodedKeySpec" line="176"/>
                    <declaration name="val" type="DerValue" line="177"/>
                    <declaration name="in" type="DerInputStream" line="178"/>
                    <declaration name="i" type="int" line="179"/>
                    <declaration name="value" type="DerValue[]" line="180"/>
                    <declaration name="algId" type="AlgorithmId" line="181"/>
                    <declaration name="algName" type="String" line="182"/>
                    <declaration name="kfac" type="KeyFactory" line="183"/>
                </scope>
                <scope line="186">
                    <declaration name="uke" type="UnrecoverableKeyException" line="187"/>
                </scope>
            </method>
            <javadoc line="193">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user&apos;s certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a &lt;i&gt;trusted certificate entry&lt;/i&gt; or a
                      &lt;i&gt;key entry&lt;/i&gt; without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="202">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="203"/>
                <scope line="204">
                    <scope line="205"/>
                    <scope line="208"/>
                </scope>
                <scope line="212"/>
            </method>
            <javadoc line="216">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="228">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="229"/>
                <scope line="230">
                    <scope line="231"/>
                    <scope line="234"/>
                </scope>
                <scope line="238"/>
            </method>
            <javadoc line="242">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="248">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="249"/>
                <scope line="250"/>
                <scope line="253"/>
            </method>
            <javadoc line="257">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if the given key cannot be protected, or
                      this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="275">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="276">
                    <declaration name="entry" type="KeyEntry" line="277"/>
                    <scope line="279">
                        <scope line="280"/>
                        <scope line="283"/>
                    </scope>
                    <scope line="287"/>
                    <scope line="290"/>
                </scope>
                <scope line="298">
                    <declaration name="ke" type="KeyStoreException" line="299"/>
                </scope>
            </method>
            <javadoc line="304">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a
                  certificate chain certifying the corresponding public key. If the
                  underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;,
                  &lt;code&gt;key&lt;/code&gt; must be encoded as an
                  &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="323">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="324"/>
                <scope line="327">
                    <declaration name="ke" type="KeyStoreException" line="328"/>
                </scope>
                <declaration name="entry" type="KeyEntry" line="332"/>
                <scope line="334"/>
                <scope line="337"/>
                <scope line="341"/>
            </method>
            <method name="getSalt" type="byte[]" line="346">
                <declaration name="salt" type="byte[]" line="347"/>
                <scope line="348"/>
            </method>
            <method name="getAlgorithmParameters" type="AlgorithmParameters" line="354">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="algParams" type="AlgorithmParameters" line="355"/>
                <declaration name="paramSpec" type="PBEParameterSpec" line="356"/>
                <scope line="357"/>
                <scope line="361">
                    <declaration name="ioe" type="IOException" line="362"/>
                </scope>
            </method>
            <method name="parseAlgParameters" type="AlgorithmParameters" line="368">
                <params>
                    <param name="in" type="DerInputStream"/>
                </params>
                <declaration name="algParams" type="AlgorithmParameters" line="369"/>
                <scope line="370">
                    <declaration name="params" type="DerValue" line="371"/>
                    <scope line="372"/>
                    <scope line="375">
                        <scope line="377"/>
                    </scope>
                    <scope line="381"/>
                </scope>
                <scope line="386">
                    <declaration name="ioe" type="IOException" line="387"/>
                </scope>
            </method>
            <method name="getPBEKey" type="SecretKey" line="393">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="skey" type="SecretKey" line="394"/>
                <scope line="395">
                    <declaration name="keySpec" type="PBEKeySpec" line="396"/>
                    <declaration name="skFac" type="SecretKeyFactory" line="397"/>
                </scope>
                <scope line="400">
                    <declaration name="ioe" type="IOException" line="401"/>
                </scope>
            </method>
            <method name="encryptPrivateKey" type="byte[]" line="407">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="key" type="byte[]" line="408"/>
                <scope line="409">
                    <declaration name="algParams" type="AlgorithmParameters" line="410"/>
                    <declaration name="skey" type="SecretKey" line="411"/>
                    <declaration name="cipher" type="Cipher" line="412"/>
                    <declaration name="encryptedKey" type="byte[]" line="414"/>
                    <declaration name="algid" type="AlgorithmId" line="415"/>
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="416"/>
                </scope>
                <scope line="419">
                    <declaration name="uke" type="UnrecoverableKeyException" line="420"/>
                </scope>
            </method>
            <javadoc line="426">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      identify a &lt;i&gt;key entry&lt;/i&gt;, or on an attempt to create a
                      &lt;i&gt;trusted cert entry&lt;/i&gt; which is currently not supported.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="437">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="438"/>
                <scope line="439"/>
            </method>
            <javadoc line="444">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="449">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="452">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration&lt;String&gt;" line="456"/>
            <javadoc line="459">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="464">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="467">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="471"/>
            <javadoc line="474">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;key entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="480">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="KeyEntry" line="481"/>
                <scope line="482"/>
                <scope line="485"/>
            </method>
            <javadoc line="489">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;trusted certificate entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="495">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="498">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="511">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="certElem" type="Certificate" line="512"/>
                <scope line="513">
                    <declaration name="alias" type="String" line="514"/>
                    <declaration name="entry" type="KeyEntry" line="515"/>
                    <scope line="516"/>
                    <scope line="519"/>
                </scope>
            </method>
            <javadoc line="525">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="536">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="537"/>
                <declaration name="pfx" type="DerOutputStream" line="540"/>
                <declaration name="version" type="DerOutputStream" line="541"/>
                <declaration name="pfxVersion" type="byte[]" line="543"/>
                <declaration name="authSafe" type="DerOutputStream" line="545"/>
                <declaration name="authSafeContentInfo" type="DerOutputStream" line="546"/>
                <declaration name="safeContentData" type="byte[]" line="547"/>
                <declaration name="dataContentInfo" type="ContentInfo" line="548"/>
                <declaration name="encrData" type="byte[]" line="550"/>
                <declaration name="encrContentInfo" type="ContentInfo" line="551"/>
                <declaration name="cInfo" type="DerOutputStream" line="553"/>
                <declaration name="authenticatedSafe" type="byte[]" line="555"/>
                <declaration name="contentInfo" type="ContentInfo" line="556"/>
                <declaration name="authSafeData" type="byte[]" line="558"/>
                <declaration name="macData" type="byte[]" line="560"/>
                <declaration name="pfxout" type="DerOutputStream" line="562"/>
                <declaration name="pfxData" type="byte[]" line="564"/>
            </method>
            <method name="generateHash" type="byte[]" line="568">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="digest" type="byte[]" line="569"/>
                <scope line="570">
                    <declaration name="md" type="MessageDigest" line="571"/>
                </scope>
                <scope line="575">
                    <declaration name="ioe" type="IOException" line="576"/>
                </scope>
            </method>
            <method name="calculateMac" type="byte[]" line="582">
                <params>
                    <param name="passwd" type="char[]"/>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="mData" type="byte[]" line="583"/>
                <declaration name="algName" type="String" line="584"/>
                <scope line="585">
                    <declaration name="salt" type="byte[]" line="586"/>
                    <declaration name="m" type="Mac" line="587"/>
                    <declaration name="params" type="PBEParameterSpec" line="588"/>
                    <declaration name="key" type="SecretKey" line="589"/>
                    <declaration name="macResult" type="byte[]" line="592"/>
                    <declaration name="macData" type="MacData" line="593"/>
                    <declaration name="bytes" type="DerOutputStream" line="594"/>
                </scope>
                <scope line="598">
                    <declaration name="ioe" type="IOException" line="599"/>
                </scope>
            </method>
            <method name="validateChain" type="boolean" line="605">
                <params>
                    <param name="certChain" type="Certificate[]"/>
                </params>
                <scope line="606">
                    <declaration name="issuerDN" type="X500Principal" line="607"/>
                    <declaration name="subjectDN" type="X500Principal" line="608"/>
                </scope>
            </method>
            <method name="getBagAttributes" type="byte[]" line="613">
                <params>
                    <param name="alias" type="String"/>
                    <param name="keyId" type="byte[]"/>
                </params>
                <declaration name="localKeyID" type="byte[]" line="614"/>
                <declaration name="friendlyName" type="byte[]" line="615"/>
                <scope line="616"/>
                <declaration name="bagAttrs" type="DerOutputStream" line="619"/>
                <scope line="620">
                    <declaration name="bagAttr1" type="DerOutputStream" line="621"/>
                    <declaration name="bagAttrContent1" type="DerOutputStream" line="623"/>
                    <declaration name="bagAttrValue1" type="DerOutputStream" line="624"/>
                </scope>
                <scope line="630">
                    <declaration name="bagAttr2" type="DerOutputStream" line="631"/>
                    <declaration name="bagAttrContent2" type="DerOutputStream" line="633"/>
                    <declaration name="bagAttrValue2" type="DerOutputStream" line="634"/>
                </scope>
                <declaration name="attrs" type="DerOutputStream" line="640"/>
                <scope line="641"/>
                <scope line="644"/>
            </method>
            <method name="createEncryptedData" type="byte[]" line="650">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="out" type="DerOutputStream" line="651"/>
                <scope line="652">
                    <declaration name="alias" type="String" line="653"/>
                    <declaration name="entry" type="KeyEntry" line="654"/>
                    <declaration name="chainLen" type="int" line="655"/>
                    <scope line="656"/>
                    <scope line="659"/>
                    <scope line="662">
                        <declaration name="safeBag" type="DerOutputStream" line="663"/>
                        <declaration name="certBag" type="DerOutputStream" line="665"/>
                        <declaration name="certValue" type="DerOutputStream" line="667"/>
                        <declaration name="cert" type="X509Certificate" line="668"/>
                        <declaration name="certout" type="DerOutputStream" line="671"/>
                        <declaration name="certBagValue" type="byte[]" line="673"/>
                        <declaration name="bagValue" type="DerOutputStream" line="674"/>
                        <declaration name="bagAttrs" type="byte[]" line="677"/>
                        <scope line="678"/>
                        <scope line="681"/>
                        <scope line="684"/>
                    </scope>
                </scope>
                <declaration name="safeBagValue" type="DerOutputStream" line="690"/>
                <declaration name="safeBagData" type="byte[]" line="692"/>
                <declaration name="encrContentInfo" type="byte[]" line="693"/>
                <declaration name="encrData" type="DerOutputStream" line="694"/>
                <declaration name="encrDataContent" type="DerOutputStream" line="695"/>
            </method>
            <method name="createSafeContent" type="byte[]" line="701">
                <declaration name="out" type="DerOutputStream" line="702"/>
                <scope line="703">
                    <declaration name="alias" type="String" line="704"/>
                    <declaration name="entry" type="KeyEntry" line="705"/>
                    <declaration name="safeBag" type="DerOutputStream" line="706"/>
                    <declaration name="encrBytes" type="byte[]" line="708"/>
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="709"/>
                    <scope line="710"/>
                    <scope line="713"/>
                    <declaration name="bagValue" type="DerOutputStream" line="716"/>
                    <declaration name="bagAttrs" type="byte[]" line="719"/>
                </scope>
                <declaration name="safeBagValue" type="DerOutputStream" line="723"/>
            </method>
            <method name="encryptContent" type="byte[]" line="727">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="encryptedData" type="byte[]" line="728"/>
                <declaration name="algParams" type="AlgorithmParameters" line="729"/>
                <declaration name="bytes" type="DerOutputStream" line="730"/>
                <declaration name="algId" type="AlgorithmId" line="731"/>
                <declaration name="encodedAlgId" type="byte[]" line="733"/>
                <scope line="734">
                    <declaration name="skey" type="SecretKey" line="735"/>
                    <declaration name="cipher" type="Cipher" line="736"/>
                </scope>
                <scope line="740">
                    <declaration name="ioe" type="IOException" line="741"/>
                </scope>
                <declaration name="bytes2" type="DerOutputStream" line="745"/>
                <declaration name="tmpout2" type="DerOutputStream" line="748"/>
                <declaration name="out" type="DerOutputStream" line="751"/>
            </method>
            <javadoc line="755">
                Loads the keystore from the given input stream.
                  &lt;p&gt;If a password is given, it is used to check the integrity of the
                  keystore data. Otherwise, the integrity of the keystore is not checked.                
                <param>
                    stream the input stream from which the keystore is loaded                    
                </param>
                <param>
                    password the (optional) password used to check the integrity of
                      the keystore.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="769">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="dis" type="DataInputStream" line="770"/>
                <declaration name="cf" type="CertificateFactory" line="771"/>
                <declaration name="bais" type="ByteArrayInputStream" line="772"/>
                <declaration name="encoded" type="byte[]" line="773"/>
                <declaration name="val" type="DerValue" line="776"/>
                <declaration name="s" type="DerInputStream" line="777"/>
                <declaration name="version" type="int" line="778"/>
                <scope line="779"/>
                <declaration name="authSafeData" type="byte[]" line="783"/>
                <declaration name="authSafe" type="ContentInfo" line="784"/>
                <declaration name="contentType" type="ObjectIdentifier" line="785"/>
                <scope line="786"/>
                <scope line="789"/>
                <declaration name="as" type="DerInputStream" line="792"/>
                <declaration name="safeContentsArray" type="DerValue[]" line="793"/>
                <declaration name="count" type="int" line="794"/>
                <scope line="796">
                    <declaration name="safeContentsData" type="byte[]" line="797"/>
                    <declaration name="safeContents" type="ContentInfo" line="798"/>
                    <declaration name="sci" type="DerInputStream" line="799"/>
                    <declaration name="eAlgId" type="byte[]" line="800"/>
                    <scope line="805"/>
                    <scope line="808">
                        <scope line="809"/>
                        <declaration name="edi" type="DerInputStream" line="812"/>
                        <declaration name="edVersion" type="int" line="813"/>
                        <declaration name="seq" type="DerValue[]" line="814"/>
                        <declaration name="edContentType" type="ObjectIdentifier" line="815"/>
                        <scope line="817"/>
                        <declaration name="newTag" type="byte" line="820"/>
                        <declaration name="in" type="DerInputStream" line="824"/>
                        <declaration name="algOid" type="ObjectIdentifier" line="825"/>
                        <declaration name="algParams" type="AlgorithmParameters" line="826"/>
                        <scope line="827">
                            <declaration name="skey" type="SecretKey" line="828"/>
                            <declaration name="cipher" type="Cipher" line="829"/>
                        </scope>
                        <scope line="833">
                            <declaration name="ioe" type="IOException" line="834"/>
                        </scope>
                    </scope>
                    <scope line="839"/>
                    <declaration name="sc" type="DerInputStream" line="842"/>
                </scope>
                <scope line="845">
                    <declaration name="macData" type="MacData" line="846"/>
                    <scope line="847">
                        <declaration name="algName" type="String" line="848"/>
                        <scope line="849"/>
                        <declaration name="m" type="Mac" line="852"/>
                        <declaration name="params" type="PBEParameterSpec" line="853"/>
                        <declaration name="key" type="SecretKey" line="854"/>
                        <declaration name="macResult" type="byte[]" line="857"/>
                        <scope line="858"/>
                    </scope>
                    <scope line="862">
                        <declaration name="ioe" type="IOException" line="863"/>
                    </scope>
                </scope>
                <declaration name="list" type="KeyEntry[]" line="868"/>
                <scope line="869">
                    <declaration name="entry" type="KeyEntry" line="870"/>
                    <scope line="871">
                        <declaration name="chain" type="ArrayList&amp;lt;X509Certificate&amp;gt;" line="872"/>
                        <declaration name="cert" type="X509Certificate" line="873"/>
                        <scope line="874">
                            <declaration name="issuerDN" type="X500Principal" line="876"/>
                            <scope line="877"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="889">
                Locates a matched CertEntry from certEntries, and returns its cert.                
                <param>
                    entry the KeyEntry to match                    
                </param>
                <return>
                    a certificate, null if not found                    
                </return>
            </javadoc>
            <method name="findMatchedCertificate" type="X509Certificate" line="894">
                <params>
                    <param name="entry" type="KeyEntry"/>
                </params>
                <declaration name="keyIdMatch" type="CertEntry" line="895"/>
                <declaration name="aliasMatch" type="CertEntry" line="896"/>
                <scope line="897">
                    <scope line="898">
                        <scope line="900"/>
                    </scope>
                    <scope line="904"/>
                </scope>
            </method>
            <method name="loadSafeContents" type="void" line="912">
                <params>
                    <param name="stream" type="DerInputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="safeBags" type="DerValue[]" line="913"/>
                <declaration name="count" type="int" line="914"/>
                <scope line="915">
                    <declaration name="bagId" type="ObjectIdentifier" line="916"/>
                    <declaration name="sbi" type="DerInputStream" line="917"/>
                    <declaration name="bagValue" type="DerValue" line="918"/>
                    <declaration name="bagItem" type="Object" line="919"/>
                    <scope line="923"/>
                    <scope line="927">
                        <declaration name="kEntry" type="KeyEntry" line="928"/>
                    </scope>
                    <scope line="933">
                        <declaration name="cs" type="DerInputStream" line="934"/>
                        <declaration name="certValues" type="DerValue[]" line="935"/>
                        <declaration name="certId" type="ObjectIdentifier" line="936"/>
                        <scope line="937"/>
                        <declaration name="certValue" type="DerValue" line="940"/>
                        <declaration name="cf" type="CertificateFactory" line="941"/>
                        <declaration name="cert" type="X509Certificate" line="942"/>
                    </scope>
                    <scope line="946"/>
                    <declaration name="attrSet" type="DerValue[]" line="948"/>
                    <scope line="949"/>
                    <scope line="952"/>
                    <declaration name="alias" type="String" line="955"/>
                    <declaration name="keyId" type="byte[]" line="956"/>
                    <scope line="957">
                        <scope line="958">
                            <declaration name="as" type="DerInputStream" line="959"/>
                            <declaration name="attrSeq" type="DerValue[]" line="960"/>
                            <declaration name="attrId" type="ObjectIdentifier" line="961"/>
                            <declaration name="vs" type="DerInputStream" line="962"/>
                            <declaration name="valSet" type="DerValue[]" line="963"/>
                            <scope line="964"/>
                            <scope line="967"/>
                            <scope line="970"/>
                            <scope line="973"/>
                            <scope line="976"/>
                        </scope>
                    </scope>
                    <scope line="980">
                        <declaration name="entry" type="KeyEntry" line="981"/>
                        <scope line="982">
                            <scope line="983"/>
                            <scope line="986"/>
                        </scope>
                        <declaration name="keyIdStr" type="String" line="991"/>
                        <declaration name="date" type="Date" line="992"/>
                        <scope line="993">
                            <scope line="994"/>
                            <scope line="997"/>
                        </scope>
                        <scope line="1001"/>
                    </scope>
                    <scope line="1010">
                        <declaration name="cert" type="X509Certificate" line="1011"/>
                        <scope line="1012">
                            <scope line="1013"/>
                        </scope>
                        <declaration name="subjectDN" type="X500Principal" line="1018"/>
                        <scope line="1019">
                            <scope line="1020"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getUnfriendlyName" type="String" line="1027"/>
        </class>
    </source>