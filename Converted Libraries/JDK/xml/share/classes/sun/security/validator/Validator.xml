<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.validator">
        <import package="java.util"/>
        <import package="java.security.AlgorithmConstraints"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.cert"/>
        <class name="Validator" line="6">
            <javadoc line="6">
                Validator abstract base class. Concrete classes are instantiated by calling
                  one of the getInstance() methods. All methods defined in this class
                  must be safe for concurrent use by multiple threads.&lt;p&gt;
                  The model is that a Validator instance is created specifying validation
                  settings, such as trust anchors or PKIX parameters. Then one or more
                  paths are validated using those parameters. In some cases, additional
                  information can be provided per path validation. This is independent of
                  the validation parameters and currently only used for TLS server validation.
                  &lt;p&gt;
                  Path validation is performed by calling one of the validate() methods. It
                  specifies a suggested path to be used for validation if available, or only
                  the end entity certificate otherwise. Optionally additional certificates can
                  be specified that the caller believes could be helpful. Implementations are
                  free to make use of this information or validate the path using other means.
                  validate() also checks that the end entity certificate is suitable for the
                  intended purpose as described below.
                  &lt;p&gt;There are two orthogonal parameters to select the Validator
                  implementation: type and variant. Type selects the validation algorithm.
                  Currently supported are TYPE_SIMPLE and TYPE_PKIX. See SimpleValidator and
                  PKIXValidator for details.
                  &lt;p&gt;
                  Variant controls additional extension checks. Currently supported are
                  five variants:
                  &lt;ul&gt;
                  &lt;li&gt;VAR_GENERIC (no additional checks),
                  &lt;li&gt;VAR_TLS_CLIENT (TLS client specific checks)
                  &lt;li&gt;VAR_TLS_SERVER (TLS server specific checks), and
                  &lt;li&gt;VAR_CODE_SIGNING (code signing specific checks).
                  &lt;li&gt;VAR_JCE_SIGNING (JCE code signing specific checks).
                  &lt;li&gt;VAR_TSA_SERVER (TSA server specific checks).
                  &lt;li&gt;VAR_PLUGIN_CODE_SIGNING (Plugin/WebStart code signing specific checks).
                  &lt;/ul&gt;
                  See EndEntityChecker for more information.
                  &lt;p&gt;
                  Examples:
                  &lt;pre&gt;
                  // instantiate validator specifying type, variant, and trust anchors
                  Validator validator = Validator.getInstance(Validator.TYPE_PKIX,
                  Validator.VAR_TLS_CLIENT,
                  trustedCerts);
                  // validate one or more chains using the validator
                  validator.validate(chain); // throws CertificateException if failed
                  &lt;/pre&gt;                
                <see>
                    SimpleValidator                    
                </see>
                <see>
                    PKIXValidator                    
                </see>
                <see>
                    EndEntityChecker                    
                </see>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="CHAIN0" type="X509Certificate[]" line="56"/>
            <declaration name="TYPE_SIMPLE" type="String" line="57"/>
            <javadoc line="57">
                Constant for a validator of type Simple.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="TYPE_PKIX" type="String" line="62"/>
            <javadoc line="62">
                Constant for a validator of type PKIX.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="VAR_GENERIC" type="String" line="67"/>
            <javadoc line="67">
                Constant for a Generic variant of a validator.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="VAR_CODE_SIGNING" type="String" line="72"/>
            <javadoc line="72">
                Constant for a Code Signing variant of a validator.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="VAR_JCE_SIGNING" type="String" line="77"/>
            <javadoc line="77">
                Constant for a JCE Code Signing variant of a validator.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="VAR_TLS_CLIENT" type="String" line="82"/>
            <javadoc line="82">
                Constant for a TLS Client variant of a validator.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="VAR_TLS_SERVER" type="String" line="87"/>
            <javadoc line="87">
                Constant for a TLS Server variant of a validator.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="VAR_TSA_SERVER" type="String" line="92"/>
            <javadoc line="92">
                Constant for a TSA Server variant of a validator.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="VAR_PLUGIN_CODE_SIGNING" type="String" line="97"/>
            <javadoc line="97">
                Constant for a Code Signing variant of a validator for use by
                  the J2SE Plugin/WebStart code.                
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <declaration name="endEntityChecker" type="EndEntityChecker" line="103"/>
            <declaration name="variant" type="String" line="104"/>
            <declaration name="validationDate" type="Date" line="105"/>
            <javadoc line="105">
                @deprecated                
                <see>
                    #setValidationDate                    
                </see>
            </javadoc>
            <method name="Validator" type="constructor" line="110">
                <params>
                    <param name="type" type="String"/>
                    <param name="variant" type="String"/>
                </params>
            </method>
            <javadoc line="114">
                Get a new Validator instance using the trusted certificates from the
                  specified KeyStore as trust anchors.                
            </javadoc>
            <method name="getInstance" type="Validator" line="118">
                <params>
                    <param name="type" type="String"/>
                    <param name="variant" type="String"/>
                    <param name="ks" type="KeyStore"/>
                </params>
            </method>
            <javadoc line="121">
                Get a new Validator instance using the Set of X509Certificates as trust
                  anchors.                
            </javadoc>
            <method name="getInstance" type="Validator" line="125">
                <params>
                    <param name="type" type="String"/>
                    <param name="variant" type="String"/>
                    <param name="trustedCerts" type="Collection<X509Certificate>"/>
                </params>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="136">
                Get a new Validator instance using the provided PKIXBuilderParameters.
                  This method can only be used with the PKIX validator.                
            </javadoc>
            <method name="getInstance" type="Validator" line="140">
                <params>
                    <param name="type" type="String"/>
                    <param name="variant" type="String"/>
                    <param name="params" type="PKIXBuilderParameters"/>
                </params>
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Validate the given certificate chain.                
            </javadoc>
            <method name="validate" type="X509Certificate[]" line="149">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                </params>
            </method>
            <javadoc line="152">
                Validate the given certificate chain. If otherCerts is non-null, it is
                  a Collection of additional X509Certificates that could be helpful for
                  path building.                
            </javadoc>
            <method name="validate" type="X509Certificate[]" line="157">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="otherCerts" type="Collection<X509Certificate>"/>
                </params>
            </method>
            <javadoc line="160">
                Validate the given certificate chain. If otherCerts is non-null, it is
                  a Collection of additional X509Certificates that could be helpful for
                  path building.
                  &lt;p&gt;
                  Parameter is an additional parameter with variant specific meaning.
                  Currently, it is only defined for TLS_SERVER variant validators, where
                  it must be non null and the name of the TLS key exchange algorithm being
                  used (see JSSE X509TrustManager specification). In the future, it
                  could be used to pass in a PKCS#7 object for code signing to check time
                  stamps.
                  &lt;p&gt;                
                <return>
                    a non-empty chain that was used to validate the path. The
                      end entity cert is at index 0, the trust anchor at index n-1.                    
                </return>
            </javadoc>
            <method name="validate" type="X509Certificate[]" line="175">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="otherCerts" type="Collection<X509Certificate>"/>
                    <param name="parameter" type="Object"/>
                </params>
            </method>
            <javadoc line="178">
                Validate the given certificate chain.                
                <param>
                    chain the target certificate chain                    
                </param>
                <param>
                    otherCerts a Collection of additional X509Certificates that
                      could be helpful for path building (or null)                    
                </param>
                <param>
                    constraints algorithm constraints for certification path
                      processing                    
                </param>
                <param>
                    parameter an additional parameter with variant specific meaning.
                      Currently, it is only defined for TLS_SERVER variant validators,
                      where it must be non null and the name of the TLS key exchange
                      algorithm being used (see JSSE X509TrustManager specification).
                      In the future, it could be used to pass in a PKCS#7 object for
                      code signing to check time stamps.                    
                </param>
                <return>
                    a non-empty chain that was used to validate the path. The
                      end entity cert is at index 0, the trust anchor at index n-1.                    
                </return>
            </javadoc>
            <method name="validate" type="X509Certificate[]" line="194">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="otherCerts" type="Collection<X509Certificate>"/>
                    <param name="constraints" type="AlgorithmConstraints"/>
                    <param name="parameter" type="Object"/>
                </params>
                <scope line="196"/>
            </method>
            <method name="engineValidate" type="X509Certificate[]" line="201"/>
            <method name="getTrustedCertificates" type="Collection<X509Certificate>" line="202"/>
            <javadoc line="202">
                Returns an immutable Collection of the X509Certificates this instance
                  uses as trust anchors.                
            </javadoc>
            <javadoc line="207">
                Set the date to be used for subsequent validations. NOTE that
                  this is not a supported API, it is provided to simplify
                  writing tests only.                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="setValidationDate" type="void" line="213">
                <params>
                    <param name="validationDate" type="Date"/>
                </params>
            </method>
        </class>
    </source>