<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.validator">
        <import package="java.util"/>
        <import package="java.security.cert"/>
        <import package="sun.security.x509.NetscapeCertTypeExtension"/>
        <class name="EndEntityChecker" line="34">
            <comment line="69">
                extended key usage OIDs for TLS server, TLS client, code signing                
            </comment>
            <comment line="70">
                and any usage                
            </comment>
            <comment line="85">
                the Netscape Server-Gated-Cryptography EKU extension OID                
            </comment>
            <comment line="88">
                the Microsoft Server-Gated-Cryptography EKU extension OID                
            </comment>
            <comment line="91">
                the recognized extension OIDs                
            </comment>
            <comment line="103">
                bit numbers in the key usage extension                
            </comment>
            <comment line="108">
                TLS key exchange algorithms requiring digitalSignature key usage                
            </comment>
            <comment line="113">
                TLS key exchange algorithms requiring keyEncipherment key usage                
            </comment>
            <comment line="117">
                TLS key exchange algorithms requiring keyAgreement key usage                
            </comment>
            <comment line="121">
                variant of this end entity cert checker                
            </comment>
            <comment line="124">
                type of the validator this checker belongs to                
            </comment>
            <javadoc line="34">
                Class to check if an end entity cert is suitable for use in some
                  context.&lt;p&gt;
                  This class is used internally by the validator. Currently, seven variants
                  are supported defined as VAR_XXX constants in the Validator class:
                  &lt;ul&gt;
                  &lt;li&gt;Generic. No additional requirements, all certificates are ok.
                  &lt;li&gt;TLS server. Requires that a String parameter is passed to
                  validate that specifies the name of the TLS key exchange algorithm
                  in use. See the JSSE X509TrustManager spec for details.
                  &lt;li&gt;TLS client.
                  &lt;li&gt;Code signing.
                  &lt;li&gt;JCE code signing. Some early JCE code signing certs issued to
                  providers had incorrect extensions. In this mode the checks
                  are relaxed compared to standard code signing checks in order to
                  allow these certificates to pass.
                  &lt;li&gt;Plugin code signing. WebStart and Plugin require their own variant
                  which is equivalent to VAR_CODE_SIGNING with additional checks for
                  compatibility/special cases. See also PKIXValidator.
                  &lt;li&gt;TSA Server (see RFC 3161, section 2.3).
                  &lt;/ul&gt;                
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="OID_EXTENDED_KEY_USAGE" type="String" line="71"/>
            <declaration name="OID_EKU_TLS_SERVER" type="String" line="74"/>
            <declaration name="OID_EKU_TLS_CLIENT" type="String" line="76"/>
            <declaration name="OID_EKU_CODE_SIGNING" type="String" line="78"/>
            <declaration name="OID_EKU_TIME_STAMPING" type="String" line="80"/>
            <declaration name="OID_EKU_ANY_USAGE" type="String" line="82"/>
            <declaration name="OID_EKU_NS_SGC" type="String" line="85"/>
            <declaration name="OID_EKU_MS_SGC" type="String" line="88"/>
            <declaration name="OID_SUBJECT_ALT_NAME" type="String" line="91"/>
            <declaration name="NSCT_SSL_CLIENT" type="String" line="93"/>
            <declaration name="NSCT_SSL_SERVER" type="String" line="96"/>
            <declaration name="NSCT_CODE_SIGNING" type="String" line="99"/>
            <declaration name="KU_SIGNATURE" type="int" line="103"/>
            <declaration name="KU_KEY_ENCIPHERMENT" type="int" line="104"/>
            <declaration name="KU_KEY_AGREEMENT" type="int" line="105"/>
            <declaration name="KU_SERVER_SIGNATURE" type="Collection&lt;String&gt;" line="108"/>
            <declaration name="KU_SERVER_ENCRYPTION" type="Collection&lt;String&gt;" line="113"/>
            <declaration name="KU_SERVER_KEY_AGREEMENT" type="Collection&lt;String&gt;" line="117"/>
            <declaration name="variant" type="String" line="121"/>
            <declaration name="type" type="String" line="124"/>
            <method name="EndEntityChecker" type="constructor" line="126">
                <params>
                    <param name="type" type="String"/>
                    <param name="variant" type="String"/>
                </params>
            </method>
            <method name="getInstance" type="EndEntityChecker" line="131">
                <params>
                    <param name="type" type="String"/>
                    <param name="variant" type="String"/>
                </params>
            </method>
            <method name="check" type="void" line="136">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="parameter" type="Object"/>
                </params>
                <comment line="138">
                    no checks                    
                </comment>
                <scope line="137"/>
                <scope line="140"/>
                <scope line="142"/>
                <scope line="144"/>
                <scope line="146"/>
                <scope line="148"/>
                <scope line="150"/>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Utility method returning the Set of critical extensions for
                  certificate cert (never null).                
            </javadoc>
            <method name="getCriticalExtensions" type="Set<String>" line="161">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <declaration name="exts" type="Set&lt;String&gt;" line="162"/>
                <scope line="163"/>
            </method>
            <javadoc line="169">
                Utility method checking if there are any unresolved critical extensions.                
                <throws>
                    CertificateException if so.                    
                </throws>
            </javadoc>
            <method name="checkRemainingExtensions" type="void" line="174">
                <params>
                    <param name="exts" type="Set<String>"/>
                </params>
                <comment line="175">
                    basic constraints irrelevant in EE certs                    
                </comment>
                <comment line="178">
                    If the subject field contains an empty sequence, the subjectAltName                    
                </comment>
                <comment line="179">
                    extension MUST be marked critical.                    
                </comment>
                <comment line="180">
                    We do not check the validity of the critical extension, just mark                    
                </comment>
                <comment line="181">
                    it recognizable here.                    
                </comment>
                <scope line="184"/>
            </method>
            <javadoc line="190">
                Utility method checking if the extended key usage extension in
                  certificate cert allows use for expectedEKU.                
            </javadoc>
            <method name="checkEKU" type="boolean" line="195">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="exts" type="Set<String>"/>
                    <param name="expectedEKU" type="String"/>
                </params>
                <declaration name="eku" type="List&lt;String&gt;" line="196"/>
                <scope line="197"/>
            </method>
            <javadoc line="203">
                Utility method checking if bit &apos;bit&apos; is set in this certificates
                  key usage extension.                
                <throws>
                    CertificateException if not                    
                </throws>
            </javadoc>
            <method name="checkKeyUsage" type="boolean" line="209">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="bit" type="int"/>
                </params>
                <declaration name="keyUsage" type="boolean[]" line="210"/>
                <scope line="211"/>
            </method>
            <javadoc line="217">
                Check whether this certificate can be used for TLS client
                  authentication.                
                <throws>
                    CertificateException if not.                    
                </throws>
            </javadoc>
            <method name="checkTLSClient" type="void" line="223">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="244">
                    remove extensions we checked                    
                </comment>
                <declaration name="exts" type="Set&lt;String&gt;" line="224"/>
                <scope line="226"/>
                <scope line="232"/>
                <scope line="238"/>
            </method>
            <javadoc line="252">
                Check whether this certificate can be used for TLS server authentication
                  using the specified authentication type parameter. See X509TrustManager
                  specification for details.                
                <throws>
                    CertificateException if not.                    
                </throws>
            </javadoc>
            <method name="checkTLSServer" type="void" line="259">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="parameter" type="String"/>
                </params>
                <comment line="285">
                    check for equivalent but now obsolete Server-Gated-Cryptography                    
                </comment>
                <comment line="286">
                    (aka Step-Up, 128 bit) EKU OIDs                    
                </comment>
                <comment line="302">
                    remove extensions we checked                    
                </comment>
                <declaration name="exts" type="Set&lt;String&gt;" line="260"/>
                <scope line="262">
                    <scope line="263"/>
                </scope>
                <scope line="268">
                    <scope line="269"/>
                </scope>
                <scope line="274">
                    <scope line="275"/>
                </scope>
                <scope line="280"/>
                <scope line="284">
                    <scope line="288"/>
                </scope>
                <scope line="296"/>
            </method>
            <javadoc line="310">
                Check whether this certificate can be used for code signing.                
                <throws>
                    CertificateException if not.                    
                </throws>
            </javadoc>
            <method name="checkCodeSigning" type="void" line="315">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="330">
                    do not check Netscape cert type for JCE code signing checks                    
                </comment>
                <comment line="331">
                    (some certs were issued with incorrect extensions)                    
                </comment>
                <comment line="341">
                    remove extensions we checked                    
                </comment>
                <declaration name="exts" type="Set&lt;String&gt;" line="316"/>
                <scope line="318"/>
                <scope line="324"/>
                <scope line="332">
                    <scope line="333"/>
                </scope>
            </method>
            <javadoc line="348">
                Check whether this certificate can be used by a time stamping authority
                  server (see RFC 3161, section 2.3).                
                <throws>
                    CertificateException if not.                    
                </throws>
            </javadoc>
            <method name="checkTSAServer" type="void" line="354">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="376">
                    remove extensions we checked                    
                </comment>
                <declaration name="exts" type="Set&lt;String&gt;" line="355"/>
                <scope line="357"/>
                <scope line="363"/>
                <scope line="370"/>
            </method>
        </class>
    </source>