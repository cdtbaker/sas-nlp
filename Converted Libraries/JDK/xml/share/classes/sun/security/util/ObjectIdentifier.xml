<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <class name="ObjectIdentifier" line="5">
            <implements interface="Serializable"/>
            <javadoc line="5">
                Represent an ISO Object Identifier.
                  &lt;P&gt;Object Identifiers are arbitrary length hierarchical identifiers.
                  The individual components are numbers, and they define paths from the
                  root of an ISO-managed identifier space.  You will sometimes see a
                  string name used instead of (or in addition to) the numerical id.
                  These are synonyms for the numerical IDs, but are not widely used
                  since most sites do not know all the requisite strings, while all
                  sites can parse the numeric forms.
                  &lt;P&gt;So for example, JavaSoft has the sole authority to assign the
                  meaning to identifiers below the 1.3.6.1.4.1.42.2.17 node in the
                  hierarchy, and other organizations can easily acquire the ability
                  to assign such unique identifiers.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="encoding" type="byte[]" line="23"/>
            <javadoc line="23">
                We use the DER value (no tag, no length) as the internal format                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="stringForm" type="String" line="28"/>
            <declaration name="serialVersionUID" type="long" line="29"/>
            <declaration name="components" type="Object" line="30"/>
            <javadoc line="30">
                Changed to Object                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="componentLen" type="int" line="35"/>
            <javadoc line="35">
                @serial                
            </javadoc>
            <declaration name="componentsCalculated" type="boolean" line="39"/>
            <method name="readObject" type="void" line="40">
                <params>
                    <param name="is" type="ObjectInputStream"/>
                </params>
                <scope line="42"/>
            </method>
            <method name="writeObject" type="void" line="46">
                <params>
                    <param name="os" type="ObjectOutputStream"/>
                </params>
                <scope line="47">
                    <declaration name="comps" type="int[]" line="48"/>
                    <scope line="49"/>
                    <scope line="53"/>
                </scope>
            </method>
            <class name="HugeOidNotSupportedByOldJDK" line="60">
                <implements interface="Serializable"/>
                <declaration name="serialVersionUID" type="long" line="61"/>
                <declaration name="theOne" type="HugeOidNotSupportedByOldJDK" line="62"/>
            </class>
            <javadoc line="64">
                Constructs, from a string.  This string should be of the form 1.23.56.
                  Validity check included.                
            </javadoc>
            <method name="ObjectIdentifier" type="constructor" line="68">
                <params>
                    <param name="oid" type="String"/>
                </params>
                <declaration name="ch" type="int" line="69"/>
                <declaration name="start" type="int" line="70"/>
                <declaration name="end" type="int" line="71"/>
                <declaration name="pos" type="int" line="72"/>
                <declaration name="tmp" type="byte[]" line="73"/>
                <declaration name="first" type="int" line="74"/>
                <declaration name="count" type="int" line="75"/>
                <scope line="76">
                    <declaration name="comp" type="String" line="77"/>
                    <scope line="78">
                        <declaration name="length" type="int" line="79"/>
                        <scope line="81"/>
                        <scope line="85"/>
                        <scope line="89">
                            <declaration name="bignum" type="BigInteger" line="90"/>
                            <scope line="91"/>
                            <scope line="95">
                                <scope line="96"/>
                                <scope line="100"/>
                            </scope>
                        </scope>
                        <scope line="106">
                            <declaration name="num" type="int" line="107"/>
                            <scope line="108"/>
                            <scope line="112">
                                <scope line="113"/>
                                <scope line="117"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <javadoc line="139">
                Constructor, from an array of integers.
                  Validity check included.                
            </javadoc>
            <method name="ObjectIdentifier" type="constructor" line="143">
                <params>
                    <param name="values" type="int"/>
                </params>
            </method>
            <javadoc line="150">
                Constructor, from an ASN.1 encoded input stream.
                  Validity check NOT included.
                  The encoding of the ID in the stream uses &quot;DER&quot;, a BER/1 subset.
                  In this case, that means a triple { typeId, length, data }.
                  &lt;P&gt;&lt;STRONG&gt;NOTE:&lt;/STRONG&gt;  When an exception is thrown, the
                  input stream has not been returned to its &quot;initial&quot; state.                
                <param>
                    in DER-encoded data holding an object ID                    
                </param>
                <exception>
                    IOException indicates a decoding error                    
                </exception>
            </javadoc>
            <method name="ObjectIdentifier" type="constructor" line="160">
                <params>
                    <param name="in" type="DerInputStream"/>
                </params>
                <declaration name="type_id" type="byte" line="161"/>
                <declaration name="bufferEnd" type="int" line="162"/>
            </method>
            <method name="ObjectIdentifier" type="constructor" line="169">
                <params>
                    <param name="buf" type="DerInputBuffer"/>
                </params>
                <declaration name="in" type="DerInputStream" line="170"/>
            </method>
            <method name="init" type="void" line="175">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="pos" type="int" line="176"/>
                <declaration name="tmp" type="byte[]" line="177"/>
                <scope line="179">
                    <declaration name="big" type="BigInteger" line="180"/>
                </scope>
                <scope line="184"/>
            </method>
            <javadoc line="190">
                This method is kept for compatibility reasons. The new implementation
                  does the check and conversion. All around the JDK, the method is called
                  in static blocks to initialize pre-defined ObjectIdentifieies. No
                  obvious performance hurt will be made after this change.
                  Old doc: Create a new ObjectIdentifier for internal use. The values are
                  neither checked nor cloned.                
            </javadoc>
            <method name="newInternal" type="ObjectIdentifier" line="198">
                <params>
                    <param name="values" type="int[]"/>
                </params>
                <scope line="199"/>
                <scope line="202"/>
            </method>
            <method name="encode" type="void" line="206">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="209">
                @deprecated Use equals((Object)oid)                
            </javadoc>
            <method name="equals" type="boolean" line="212">
                <params>
                    <param name="other" type="ObjectIdentifier"/>
                </params>
            </method>
            <javadoc line="215">
                Compares this identifier with another, for equality.                
                <return>
                    true iff the names are identical.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="219">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="220"/>
                <scope line="223"/>
                <declaration name="other" type="ObjectIdentifier" line="226"/>
            </method>
            <method name="hashCode" type="int" line="229"/>
            <javadoc line="232">
                Private helper method for serialization. To be compatible with old
                  versions of JDK.                
                <return>
                    components in an int array, if all the components are less than
                      Integer.MAX_VALUE. Otherwise, null.                    
                </return>
            </javadoc>
            <method name="toIntArray" type="int[]" line="238">
                <declaration name="length" type="int" line="239"/>
                <declaration name="result" type="int[]" line="240"/>
                <declaration name="which" type="int" line="241"/>
                <declaration name="fromPos" type="int" line="242"/>
                <scope line="243">
                    <scope line="244">
                        <scope line="245">
                            <declaration name="big" type="BigInteger" line="246"/>
                            <scope line="247">
                                <declaration name="second" type="BigInteger" line="249"/>
                                <scope line="250"/>
                                <scope line="253"/>
                            </scope>
                            <scope line="257">
                                <scope line="258"/>
                                <scope line="261"/>
                            </scope>
                        </scope>
                        <scope line="266">
                            <declaration name="retval" type="int" line="267"/>
                            <scope line="268">
                                <declaration name="tmp" type="byte" line="270"/>
                            </scope>
                            <scope line="273">
                                <scope line="274"/>
                                <scope line="278"/>
                            </scope>
                            <scope line="283"/>
                        </scope>
                    </scope>
                    <scope line="289"/>
                </scope>
            </method>
            <javadoc line="295">
                Returns a string form of the object ID.  The format is the
                  conventional &quot;dot&quot; notation for such IDs, without any
                  user-friendly descriptive strings, since those strings
                  will not be understood everywhere.                
            </javadoc>
            <method name="toString" type="String" line="301">
                <declaration name="s" type="String" line="302"/>
                <scope line="303">
                    <declaration name="length" type="int" line="304"/>
                    <declaration name="sb" type="StringBuffer" line="305"/>
                    <declaration name="fromPos" type="int" line="306"/>
                    <scope line="307">
                        <scope line="308">
                            <scope line="309"/>
                            <scope line="312">
                                <declaration name="big" type="BigInteger" line="313"/>
                                <scope line="314"/>
                                <scope line="318"/>
                            </scope>
                            <scope line="322">
                                <declaration name="retval" type="int" line="323"/>
                                <scope line="324">
                                    <declaration name="tmp" type="byte" line="326"/>
                                </scope>
                                <scope line="329">
                                    <scope line="330"/>
                                    <scope line="335"/>
                                </scope>
                                <scope line="340"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="352">
                Repack all bits from input to output. On the both sides, only a portion
                  (from the least significant bit) of the 8 bits in a byte is used. This
                  number is defined as the number of useful bits (NUB) for the array. All the
                  used bits from the input byte array and repacked into the output in the
                  exactly same order. The output bits are aligned so that the final bit of
                  the input (the least significant bit in the last byte), when repacked as
                  the final bit of the output, is still at the least significant position.
                  Zeroes will be padded on the left side of the first output byte if
                  necessary. All unused bits in the output are also zeroed.
                  For example: if the input is 01001100 with NUB 8, the output which
                  has a NUB 6 will look like:
                  00000001 00001100
                  The first 2 bits of the output bytes are unused bits. The other bits
                  turn out to be 000001 001100. While the 8 bits on the right are from
                  the input, the left 4 zeroes are padded to fill the 6 bits space.                
                <param>
                    in        the input byte array                    
                </param>
                <param>
                    ioffset   start point inside &lt;code&gt;in&lt;/code&gt;                    
                </param>
                <param>
                    ilength   number of bytes to repack                    
                </param>
                <param>
                    iw        NUB for input                    
                </param>
                <param>
                    ow        NUB for output                    
                </param>
                <return>
                    the repacked bytes                    
                </return>
            </javadoc>
            <method name="pack" type="byte[]" line="375">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="ioffset" type="int"/>
                    <param name="ilength" type="int"/>
                    <param name="iw" type="int"/>
                    <param name="ow" type="int"/>
                </params>
            </method>
            <javadoc line="396">
                Repack from NUB 8 to a NUB 7 OID sub-identifier, remove all
                  unnecessary 0 headings, set the first bit of all non-tail
                  output bytes to 1 (as ITU-T Rec. X.690 8.19.2 says), and
                  paste it into an existing byte array.                
                <param>
                    out the existing array to be pasted into                    
                </param>
                <param>
                    ooffset the starting position to paste                    
                </param>
                <return>
                    the number of bytes pasted                    
                </return>
            </javadoc>
            <method name="pack7Oid" type="int" line="405">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="ioffset" type="int"/>
                    <param name="ilength" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="ooffset" type="int"/>
                </params>
                <declaration name="pack" type="byte[]" line="406"/>
                <declaration name="firstNonZero" type="int" line="407"/>
                <scope line="408">
                    <scope line="409"/>
                </scope>
            </method>
            <javadoc line="417">
                Repack from NUB 7 to NUB 8, remove all unnecessary 0
                  headings, and paste it into an existing byte array.                
                <param>
                    out the existing array to be pasted into                    
                </param>
                <param>
                    ooffset the starting position to paste                    
                </param>
                <return>
                    the number of bytes pasted                    
                </return>
            </javadoc>
            <method name="pack8" type="int" line="424">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="ioffset" type="int"/>
                    <param name="ilength" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="ooffset" type="int"/>
                </params>
                <declaration name="pack" type="byte[]" line="425"/>
                <declaration name="firstNonZero" type="int" line="426"/>
                <scope line="427">
                    <scope line="428"/>
                </scope>
            </method>
            <javadoc line="435">
                Pack the int into a OID sub-identifier DER encoding                
            </javadoc>
            <method name="pack7Oid" type="int" line="438">
                <params>
                    <param name="input" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="ooffset" type="int"/>
                </params>
                <declaration name="b" type="byte[]" line="439"/>
            </method>
            <javadoc line="446">
                Pack the BigInteger into a OID subidentifier DER encoding                
            </javadoc>
            <method name="pack7Oid" type="int" line="449">
                <params>
                    <param name="input" type="BigInteger"/>
                    <param name="out" type="byte[]"/>
                    <param name="ooffset" type="int"/>
                </params>
                <declaration name="b" type="byte[]" line="450"/>
            </method>
            <javadoc line="453">
                Check the DER encoding. Since DER encoding defines that the integer bits
                  are unsigned, so there&apos;s no need to check the MSB.                
            </javadoc>
            <method name="check" type="void" line="457">
                <params>
                    <param name="encoding" type="byte[]"/>
                </params>
                <declaration name="length" type="int" line="458"/>
                <scope line="459"/>
                <scope line="462">
                    <scope line="463"/>
                </scope>
            </method>
            <method name="checkCount" type="void" line="468">
                <params>
                    <param name="count" type="int"/>
                </params>
                <scope line="469"/>
            </method>
            <method name="checkFirstComponent" type="void" line="473">
                <params>
                    <param name="first" type="int"/>
                </params>
                <scope line="474"/>
            </method>
            <method name="checkFirstComponent" type="void" line="478">
                <params>
                    <param name="first" type="BigInteger"/>
                </params>
                <scope line="479"/>
            </method>
            <method name="checkSecondComponent" type="void" line="483">
                <params>
                    <param name="first" type="int"/>
                    <param name="second" type="int"/>
                </params>
                <scope line="484"/>
            </method>
            <method name="checkSecondComponent" type="void" line="488">
                <params>
                    <param name="first" type="int"/>
                    <param name="second" type="BigInteger"/>
                </params>
                <scope line="489"/>
            </method>
            <method name="checkOtherComponent" type="void" line="493">
                <params>
                    <param name="i" type="int"/>
                    <param name="num" type="int"/>
                </params>
                <scope line="494"/>
            </method>
            <method name="checkOtherComponent" type="void" line="498">
                <params>
                    <param name="i" type="int"/>
                    <param name="num" type="BigInteger"/>
                </params>
                <scope line="499"/>
            </method>
        </class>
    </source>