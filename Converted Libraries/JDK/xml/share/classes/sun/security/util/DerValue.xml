<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Date"/>
        <import package="sun.misc.IOUtils"/>
        <class name="DerValue" line="6">
            <javadoc line="6">
                Represents a single DER-encoded value.  DER encoding rules are a subset
                  of the &quot;Basic&quot; Encoding Rules (BER), but they only support a single way
                  (&quot;Definite&quot; encoding) to encode any given value.
                  &lt;P&gt;All DER-encoded data are triples &lt;em&gt;{type, length, data}&lt;/em&gt;.  This
                  class represents such tagged values as they have been read (or constructed),
                  and provides structured access to the encoded data.
                  &lt;P&gt;At this time, this class supports only a subset of the types of DER
                  data encodings which are defined.  That subset is sufficient for parsing
                  most X.509 certificates, and working with selected additional formats
                  (such as PKCS #10 certificate requests, and some kinds of PKCS #7 data).
                  A note with respect to T61/Teletex strings: From RFC 1617, section 4.1.3
                  and RFC 3280, section 4.1.2.4., we assume that this kind of string will
                  contain ISO-8859-1 characters only.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="TAG_UNIVERSAL" type="byte" line="25"/>
            <javadoc line="25">
                The tag class types                
            </javadoc>
            <declaration name="TAG_APPLICATION" type="byte" line="29"/>
            <declaration name="TAG_CONTEXT" type="byte" line="30"/>
            <declaration name="TAG_PRIVATE" type="byte" line="31"/>
            <declaration name="tag" type="byte" line="32"/>
            <javadoc line="32">
                The DER tag of the value; one of the tag_ constants.                
            </javadoc>
            <declaration name="buffer" type="DerInputBuffer" line="36"/>
            <declaration name="data" type="DerInputStream" line="37"/>
            <javadoc line="37">
                The DER-encoded data of the value, never null                
            </javadoc>
            <declaration name="length" type="int" line="41"/>
            <declaration name="tag_Boolean" type="byte" line="42"/>
            <javadoc line="42">
                Tag value indicating an ASN.1 &quot;BOOLEAN&quot; value.                
            </javadoc>
            <declaration name="tag_Integer" type="byte" line="46"/>
            <javadoc line="46">
                Tag value indicating an ASN.1 &quot;INTEGER&quot; value.                
            </javadoc>
            <declaration name="tag_BitString" type="byte" line="50"/>
            <javadoc line="50">
                Tag value indicating an ASN.1 &quot;BIT STRING&quot; value.                
            </javadoc>
            <declaration name="tag_OctetString" type="byte" line="54"/>
            <javadoc line="54">
                Tag value indicating an ASN.1 &quot;OCTET STRING&quot; value.                
            </javadoc>
            <declaration name="tag_Null" type="byte" line="58"/>
            <javadoc line="58">
                Tag value indicating an ASN.1 &quot;NULL&quot; value.                
            </javadoc>
            <declaration name="tag_ObjectId" type="byte" line="62"/>
            <javadoc line="62">
                Tag value indicating an ASN.1 &quot;OBJECT IDENTIFIER&quot; value.                
            </javadoc>
            <declaration name="tag_Enumerated" type="byte" line="66"/>
            <javadoc line="66">
                Tag value including an ASN.1 &quot;ENUMERATED&quot; value                
            </javadoc>
            <declaration name="tag_UTF8String" type="byte" line="70"/>
            <javadoc line="70">
                Tag value indicating an ASN.1 &quot;UTF8String&quot; value.                
            </javadoc>
            <declaration name="tag_PrintableString" type="byte" line="74"/>
            <javadoc line="74">
                Tag value including a &quot;printable&quot; string                
            </javadoc>
            <declaration name="tag_T61String" type="byte" line="78"/>
            <javadoc line="78">
                Tag value including a &quot;teletype&quot; string                
            </javadoc>
            <declaration name="tag_IA5String" type="byte" line="82"/>
            <javadoc line="82">
                Tag value including an ASCII string                
            </javadoc>
            <declaration name="tag_UtcTime" type="byte" line="86"/>
            <javadoc line="86">
                Tag value indicating an ASN.1 &quot;UTCTime&quot; value.                
            </javadoc>
            <declaration name="tag_GeneralizedTime" type="byte" line="90"/>
            <javadoc line="90">
                Tag value indicating an ASN.1 &quot;GeneralizedTime&quot; value.                
            </javadoc>
            <declaration name="tag_GeneralString" type="byte" line="94"/>
            <javadoc line="94">
                Tag value indicating an ASN.1 &quot;GenerallString&quot; value.                
            </javadoc>
            <declaration name="tag_UniversalString" type="byte" line="98"/>
            <javadoc line="98">
                Tag value indicating an ASN.1 &quot;UniversalString&quot; value.                
            </javadoc>
            <declaration name="tag_BMPString" type="byte" line="102"/>
            <javadoc line="102">
                Tag value indicating an ASN.1 &quot;BMPString&quot; value.                
            </javadoc>
            <declaration name="tag_Sequence" type="byte" line="106"/>
            <javadoc line="106">
                Tag value indicating an ASN.1
                  &quot;SEQUENCE&quot; (zero to N elements, order is significant).                
            </javadoc>
            <declaration name="tag_SequenceOf" type="byte" line="111"/>
            <javadoc line="111">
                Tag value indicating an ASN.1
                  &quot;SEQUENCE OF&quot; (one to N elements, order is significant).                
            </javadoc>
            <declaration name="tag_Set" type="byte" line="116"/>
            <javadoc line="116">
                Tag value indicating an ASN.1
                  &quot;SET&quot; (zero to N members, order does not matter).                
            </javadoc>
            <declaration name="tag_SetOf" type="byte" line="121"/>
            <javadoc line="121">
                Tag value indicating an ASN.1
                  &quot;SET OF&quot; (one to N members, order does not matter).                
            </javadoc>
            <javadoc line="126">
                Returns true if the tag class is UNIVERSAL.                
            </javadoc>
            <method name="isUniversal" type="boolean" line="129"/>
            <javadoc line="132">
                Returns true if the tag class is APPLICATION.                
            </javadoc>
            <method name="isApplication" type="boolean" line="135"/>
            <javadoc line="138">
                Returns true iff the CONTEXT SPECIFIC bit is set in the type tag.
                  This is associated with the ASN.1 &quot;DEFINED BY&quot; syntax.                
            </javadoc>
            <method name="isContextSpecific" type="boolean" line="142"/>
            <javadoc line="145">
                Returns true iff the CONTEXT SPECIFIC TAG matches the passed tag.                
            </javadoc>
            <method name="isContextSpecific" type="boolean" line="148">
                <params>
                    <param name="cntxtTag" type="byte"/>
                </params>
                <scope line="149"/>
            </method>
            <method name="isPrivate" type="boolean" line="154"/>
            <javadoc line="157">
                Returns true iff the CONSTRUCTED bit is set in the type tag.                
            </javadoc>
            <method name="isConstructed" type="boolean" line="160"/>
            <javadoc line="163">
                Returns true iff the CONSTRUCTED TAG matches the passed tag.                
            </javadoc>
            <method name="isConstructed" type="boolean" line="166">
                <params>
                    <param name="constructedTag" type="byte"/>
                </params>
                <scope line="167"/>
            </method>
            <javadoc line="172">
                Creates a PrintableString or UTF8string DER value from a string                
            </javadoc>
            <method name="DerValue" type="constructor" line="175">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="isPrintableString" type="boolean" line="176"/>
                <scope line="177">
                    <scope line="178"/>
                </scope>
            </method>
            <javadoc line="185">
                Creates a string type DER value from a String object                
                <param>
                    stringTag the tag for the DER value to create                    
                </param>
                <param>
                    value the String object to use for the DER value                    
                </param>
            </javadoc>
            <method name="DerValue" type="constructor" line="190">
                <params>
                    <param name="stringTag" type="byte"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="193">
                Creates a DerValue from a tag and some DER-encoded data.                
                <param>
                    tag the DER type tag                    
                </param>
                <param>
                    data the DER-encoded data                    
                </param>
            </javadoc>
            <method name="DerValue" type="constructor" line="198">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="DerValue" type="constructor" line="205">
                <params>
                    <param name="in" type="DerInputBuffer"/>
                </params>
                <declaration name="lenByte" type="byte" line="207"/>
                <scope line="209">
                    <declaration name="inbuf" type="DerInputBuffer" line="210"/>
                    <declaration name="readLen" type="int" line="211"/>
                    <declaration name="offset" type="int" line="212"/>
                    <declaration name="indefData" type="byte[]" line="213"/>
                    <declaration name="dis" type="DataInputStream" line="216"/>
                    <declaration name="derIn" type="DerIndefLenConverter" line="219"/>
                </scope>
                <scope line="228"/>
            </method>
            <javadoc line="235">
                Get an ASN.1/DER encoded datum from a buffer.  The
                  entire buffer must hold exactly one datum, including
                  its tag and length.                
                <param>
                    buf buffer holding a single DER-encoded datum.                    
                </param>
            </javadoc>
            <method name="DerValue" type="constructor" line="241">
                <params>
                    <param name="buf" type="byte[]"/>
                </params>
            </method>
            <javadoc line="244">
                Get an ASN.1/DER encoded datum from part of a buffer.
                  That part of the buffer must hold exactly one datum, including
                  its tag and length.                
                <param>
                    buf the buffer                    
                </param>
                <param>
                    offset start point of the single DER-encoded dataum                    
                </param>
                <param>
                    length how many bytes are in the encoded datum                    
                </param>
            </javadoc>
            <method name="DerValue" type="constructor" line="252">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="255">
                Get an ASN1/DER encoded datum from an input stream.  The
                  stream may have additional data following the encoded datum.
                  In case of indefinite length encoded datum, the input stream
                  must hold only one datum.                
                <param>
                    in the input stream holding a single DER datum,
                      which may be followed by additional data                    
                </param>
            </javadoc>
            <method name="DerValue" type="constructor" line="263">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <method name="init" type="DerInputStream" line="266">
                <params>
                    <param name="stringTag" type="byte"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="enc" type="String" line="267"/>
                <declaration name="buf" type="byte[]" line="287"/>
                <declaration name="result" type="DerInputStream" line="290"/>
            </method>
            <method name="init" type="DerInputStream" line="294">
                <params>
                    <param name="fullyBuffered" type="boolean"/>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="lenByte" type="byte" line="296"/>
                <scope line="298">
                    <declaration name="readLen" type="int" line="299"/>
                    <declaration name="offset" type="int" line="300"/>
                    <declaration name="indefData" type="byte[]" line="301"/>
                    <declaration name="dis" type="DataInputStream" line="304"/>
                    <declaration name="derIn" type="DerIndefLenConverter" line="307"/>
                </scope>
                <declaration name="bytes" type="byte[]" line="313"/>
            </method>
            <javadoc line="317">
                Encode an ASN1/DER encoded datum onto a DER output stream.                
            </javadoc>
            <method name="encode" type="void" line="320">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
                <scope line="323">
                    <declaration name="value" type="byte[]" line="324"/>
                    <scope line="325">
                        <scope line="327"/>
                    </scope>
                </scope>
            </method>
            <method name="getData" type="DerInputStream" line="334"/>
            <method name="getTag" type="byte" line="337"/>
            <javadoc line="340">
                Returns an ASN.1 BOOLEAN                
                <return>
                    the boolean held in this DER value                    
                </return>
            </javadoc>
            <method name="getBoolean" type="boolean" line="344">
                <scope line="345"/>
                <scope line="348"/>
                <scope line="351"/>
            </method>
            <javadoc line="356">
                Returns an ASN.1 OBJECT IDENTIFIER.                
                <return>
                    the OID held in this DER value                    
                </return>
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="360"/>
            <method name="append" type="byte[]" line="364">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="ret" type="byte[]" line="366"/>
            </method>
            <javadoc line="371">
                Returns an ASN.1 OCTET STRING                
                <return>
                    the octet string held in this DER value                    
                </return>
            </javadoc>
            <method name="getOctetString" type="byte[]" line="375">
                <declaration name="bytes" type="byte[]" line="376"/>
                <scope line="377"/>
                <scope line="381"/>
                <scope line="385">
                    <declaration name="in" type="DerInputStream" line="386"/>
                    <scope line="388"/>
                </scope>
            </method>
            <javadoc line="394">
                Returns an ASN.1 INTEGER value as an integer.                
                <return>
                    the integer held in this DER value.                    
                </return>
            </javadoc>
            <method name="getInteger" type="int" line="398">
                <scope line="399"/>
            </method>
            <javadoc line="404">
                Returns an ASN.1 INTEGER value as a BigInteger.                
                <return>
                    the integer held in this DER value as a BigInteger.                    
                </return>
            </javadoc>
            <method name="getBigInteger" type="BigInteger" line="408"/>
            <javadoc line="412">
                Returns an ASN.1 INTEGER value as a positive BigInteger.
                  This is just to deal with implementations that incorrectly encode
                  some values as negative.                
                <return>
                    the integer held in this DER value as a BigInteger.                    
                </return>
            </javadoc>
            <method name="getPositiveBigInteger" type="BigInteger" line="418"/>
            <javadoc line="422">
                Returns an ASN.1 ENUMERATED value.                
                <return>
                    the integer held in this DER value.                    
                </return>
            </javadoc>
            <method name="getEnumerated" type="int" line="426">
                <scope line="427"/>
            </method>
            <javadoc line="432">
                Returns an ASN.1 BIT STRING value.  The bit string must be byte-aligned.                
                <return>
                    the bit string held in this value                    
                </return>
            </javadoc>
            <method name="getBitString" type="byte[]" line="436"/>
            <javadoc line="440">
                Returns an ASN.1 BIT STRING value that need not be byte-aligned.                
                <return>
                    a BitArray representing the bit string held in this value                    
                </return>
            </javadoc>
            <method name="getUnalignedBitString" type="BitArray" line="444"/>
            <javadoc line="448">
                Returns the name component as a Java string, regardless of its
                  encoding restrictions (ASCII, T61, Printable, IA5, BMP, UTF8).                
            </javadoc>
            <method name="getAsString" type="String" line="452"/>
            <javadoc line="461">
                Returns an ASN.1 BIT STRING value, with the tag assumed implicit
                  based on the parameter.  The bit string must be byte-aligned.                
                <params>
                    tagImplicit if true, the tag is assumed implicit.                    
                </params>
                <return>
                    the bit string held in this value                    
                </return>
            </javadoc>
            <method name="getBitString" type="byte[]" line="467">
                <params>
                    <param name="tagImplicit" type="boolean"/>
                </params>
                <scope line="468"/>
            </method>
            <javadoc line="473">
                Returns an ASN.1 BIT STRING value, with the tag assumed implicit
                  based on the parameter.  The bit string need not be byte-aligned.                
                <params>
                    tagImplicit if true, the tag is assumed implicit.                    
                </params>
                <return>
                    the bit string held in this value                    
                </return>
            </javadoc>
            <method name="getUnalignedBitString" type="BitArray" line="479">
                <params>
                    <param name="tagImplicit" type="boolean"/>
                </params>
                <scope line="480"/>
            </method>
            <javadoc line="485">
                Helper routine to return all the bytes contained in the
                  DerInputStream associated with this object.                
            </javadoc>
            <method name="getDataBytes" type="byte[]" line="489">
                <declaration name="retVal" type="byte[]" line="490"/>
                <scope line="491"/>
            </method>
            <javadoc line="497">
                Returns an ASN.1 STRING value                
                <return>
                    the printable string held in this value                    
                </return>
            </javadoc>
            <method name="getPrintableString" type="String" line="501"/>
            <javadoc line="505">
                Returns an ASN.1 T61 (Teletype) STRING value                
                <return>
                    the teletype string held in this value                    
                </return>
            </javadoc>
            <method name="getT61String" type="String" line="509"/>
            <javadoc line="513">
                Returns an ASN.1 IA5 (ASCII) STRING value                
                <return>
                    the ASCII string held in this value                    
                </return>
            </javadoc>
            <method name="getIA5String" type="String" line="517"/>
            <javadoc line="521">
                Returns the ASN.1 BMP (Unicode) STRING value as a Java string.                
                <return>
                    a string corresponding to the encoded BMPString held in
                      this value                    
                </return>
            </javadoc>
            <method name="getBMPString" type="String" line="526"/>
            <javadoc line="530">
                Returns the ASN.1 UTF-8 STRING value as a Java String.                
                <return>
                    a string corresponding to the encoded UTF8String held in
                      this value                    
                </return>
            </javadoc>
            <method name="getUTF8String" type="String" line="535"/>
            <javadoc line="539">
                Returns the ASN.1 GENERAL STRING value as a Java String.                
                <return>
                    a string corresponding to the encoded GeneralString held in
                      this value                    
                </return>
            </javadoc>
            <method name="getGeneralString" type="String" line="544"/>
            <javadoc line="548">
                Returns a Date if the DerValue is UtcTime.                
                <return>
                    the Date held in this DER value                    
                </return>
            </javadoc>
            <method name="getUTCTime" type="Date" line="552">
                <scope line="553"/>
            </method>
            <javadoc line="558">
                Returns a Date if the DerValue is GeneralizedTime.                
                <return>
                    the Date held in this DER value                    
                </return>
            </javadoc>
            <method name="getGeneralizedTime" type="Date" line="562">
                <scope line="563"/>
            </method>
            <javadoc line="568">
                Returns true iff the other object is a DER value which
                  is bitwise equal to this one.                
                <param>
                    other the object being compared with this one                    
                </param>
            </javadoc>
            <method name="equals" type="boolean" line="573">
                <params>
                    <param name="other" type="Object"/>
                </params>
            </method>
            <javadoc line="577">
                Bitwise equality comparison.  DER encoded values have a single
                  encoding, so that bitwise equality of the encoded values is an
                  efficient way to establish equivalence of the unencoded values.                
                <param>
                    other the object being compared with this one                    
                </param>
            </javadoc>
            <method name="equals" type="boolean" line="583">
                <params>
                    <param name="other" type="DerValue"/>
                </params>
                <scope line="584"/>
                <scope line="587"/>
                <scope line="590"/>
            </method>
            <javadoc line="595">
                Helper for public method equals()                
            </javadoc>
            <method name="doEquals" type="boolean" line="598">
                <params>
                    <param name="d1" type="DerValue"/>
                    <param name="d2" type="DerValue"/>
                </params>
                <scope line="599">
                    <scope line="600"/>
                </scope>
            </method>
            <javadoc line="607">
                Returns a printable representation of the value.                
                <return>
                    printable representation of the value                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="611">
                <scope line="612">
                    <declaration name="str" type="String" line="613"/>
                </scope>
                <scope line="619"/>
            </method>
            <javadoc line="623">
                Returns a DER-encoded value, such that if it&apos;s passed to the
                  DerValue constructor, a value equivalent to &quot;this&quot; is returned.                
                <return>
                    DER-encoded value, including tag and length.                    
                </return>
            </javadoc>
            <method name="toByteArray" type="byte[]" line="628">
                <declaration name="out" type="DerOutputStream" line="629"/>
            </method>
            <javadoc line="634">
                For &quot;set&quot; and &quot;sequence&quot; types, this function may be used
                  to return a DER stream of the members of the set or sequence.
                  This operation is not supported for primitive types such as
                  integers or bit strings.                
            </javadoc>
            <method name="toDerInputStream" type="DerInputStream" line="640"/>
            <javadoc line="644">
                Get the length of the encoded value.                
            </javadoc>
            <method name="length" type="int" line="647"/>
            <javadoc line="650">
                Determine if a character is one of the permissible characters for
                  PrintableString:
                  A-Z, a-z, 0-9, space, apostrophe (39), left and right parentheses,
                  plus sign, comma, hyphen, period, slash, colon, equals sign,
                  and question mark.
                  Characters that are not allowed in PrintableString include
                  exclamation point, quotation mark, number sign, dollar sign,
                  percent sign, ampersand, asterisk, semicolon, less than sign,
                  greater than sign, at sign, left and right square brackets,
                  backslash, circumflex (94), underscore, back quote (96),
                  left and right curly brackets, vertical line, tilde,
                  and the control codes (0-31 and 127).
                  This list is based on X.680 (the ASN.1 spec).                
            </javadoc>
            <method name="isPrintableStringChar" type="boolean" line="665">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <scope line="666"/>
                <scope line="669"/>
            </method>
            <javadoc line="689">
                Create the tag of the attribute.                
                <params>
                    class the tag class type, one of UNIVERSAL, CONTEXT,
                      APPLICATION or PRIVATE                    
                </params>
                <params>
                    form if true, the value is constructed, otherwise it
                      is primitive.                    
                </params>
                <params>
                    val the tag value                    
                </params>
            </javadoc>
            <method name="createTag" type="byte" line="697">
                <params>
                    <param name="tagClass" type="byte"/>
                    <param name="form" type="boolean"/>
                    <param name="val" type="byte"/>
                </params>
                <declaration name="tag" type="byte" line="698"/>
                <scope line="699"/>
            </method>
            <javadoc line="704">
                Set the tag of the attribute. Commonly used to reset the
                  tag value used for IMPLICIT encodings.                
                <params>
                    tag the tag value                    
                </params>
            </javadoc>
            <method name="resetTag" type="void" line="709">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <javadoc line="712">
                Returns a hashcode for this DerValue.                
                <return>
                    a hashcode for this DerValue.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="716"/>
        </class>
    </source>