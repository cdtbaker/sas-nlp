<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.security"/>
        <import package="java.io"/>
        <import package="java.security.CodeSigner"/>
        <import package="java.util"/>
        <import package="java.util.jar"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.security.jca.Providers"/>
        <class name="ManifestEntryVerifier" line="38">
            <comment line="233">
                for the toHex function                
            </comment>
            <javadoc line="38">
                This class is used to verify each entry in a jar file with its
                  manifest value.                
            </javadoc>
            <declaration name="debug" type="Debug" line="45"/>
            <class name="SunProviderHolder" line="47">
                <javadoc line="47">
                    Holder class to lazily load Sun provider. NOTE: if
                      Providers.getSunProvider returned a cached provider, we could avoid the
                      need for caching the provider with this holder class; we should try to
                      revisit this in JDK 8.                    
                </javadoc>
                <declaration name="instance" type="Provider" line="54"/>
            </class>
            <declaration name="createdDigests" type="HashMap&lt;String,MessageDigest&gt;" line="57"/>
            <javadoc line="57">
                the created digest objects                
            </javadoc>
            <declaration name="digests" type="ArrayList&lt;MessageDigest&gt;" line="60"/>
            <javadoc line="60">
                the digests in use for a given entry                
            </javadoc>
            <declaration name="manifestHashes" type="ArrayList&lt;byte[]&gt;" line="63"/>
            <javadoc line="63">
                the manifest hashes for the digests in use                
            </javadoc>
            <declaration name="decoder" type="BASE64Decoder" line="66"/>
            <declaration name="name" type="String" line="67"/>
            <declaration name="man" type="Manifest" line="68"/>
            <declaration name="skip" type="boolean" line="70"/>
            <declaration name="entry" type="JarEntry" line="72"/>
            <declaration name="signers" type="CodeSigner[]" line="74"/>
            <javadoc line="76">
                Create a new ManifestEntryVerifier object.                
            </javadoc>
            <method name="ManifestEntryVerifier" type="constructor" line="80">
                <params>
                    <param name="man" type="Manifest"/>
                </params>
            </method>
            <javadoc line="88">
                Find the hashes in the
                  manifest for this entry, save them, and set the MessageDigest
                  objects to calculate the hashes on the fly. If name is
                  null it signifies that update/verify should ignore this entry.                
            </javadoc>
            <method name="setEntry" type="void" line="96">
                <params>
                    <param name="name" type="String"/>
                    <param name="entry" type="JarEntry"/>
                </params>
                <comment line="110">
                                        
                </comment>
                <comment line="111">
                                        
                </comment>
                <comment line="115">
                    ugh. we should be able to remove this at some point.
                     there are broken jars floating around with ./name and /name
                     in the manifest, and &quot;name&quot; in the zip/jar file.                    
                </comment>
                <comment line="130">
                    7 is length of &quot;-Digest&quot;                    
                </comment>
                <comment line="142">
                    ignore                    
                </comment>
                <scope line="105"/>
                <declaration name="attr" type="Attributes" line="112"/>
                <scope line="113">
                    <scope line="118"/>
                </scope>
                <scope line="125">
                    <declaration name="key" type="String" line="126"/>
                    <scope line="128">
                        <declaration name="algorithm" type="String" line="130"/>
                        <declaration name="digest" type="MessageDigest" line="132"/>
                        <scope line="134">
                            <scope line="135"/>
                            <scope line="140"/>
                        </scope>
                        <scope line="145"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="156">
                update the digests for the digests we are interested in                
            </javadoc>
            <method name="update" type="void" line="159">
                <params>
                    <param name="buffer" type="byte"/>
                </params>
                <scope line="162"/>
            </method>
            <javadoc line="167">
                update the digests for the digests we are interested in                
            </javadoc>
            <method name="update" type="void" line="170">
                <params>
                    <param name="buffer" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="173"/>
            </method>
            <javadoc line="178">
                get the JarEntry for this object                
            </javadoc>
            <method name="getEntry" type="JarEntry" line="182"/>
            <javadoc line="186">
                go through all the digests, calculating the final digest
                  and comparing it to the one in the manifest. If this is
                  the first time we have verified this object, remove its
                  code signers from sigFileSigners and place in verifiedSigners.                
            </javadoc>
            <method name="verify" type="CodeSigner[]" line="197">
                <params>
                    <param name="verifiedSigners" type="Hashtable<String,CodeSigner[]>"/>
                    <param name="sigFileSigners" type="Hashtable<String,CodeSigner[]>"/>
                </params>
                <comment line="225">
                    take it out of sigFileSigners and put it in verifiedSigners...                    
                </comment>
                <scope line="198"/>
                <scope line="205">
                    <declaration name="digest" type="MessageDigest" line="207"/>
                    <declaration name="manHash" type="byte[]" line="208"/>
                    <declaration name="theHash" type="byte[]" line="209"/>
                    <scope line="211"/>
                </scope>
                <scope line="226"/>
            </method>
            <declaration name="hexc" type="char[]" line="233"/>
            <javadoc line="235">
                convert a byte array to a hex string for debugging purposes                
                <param>
                    data the binary data to be converted to a hex string                    
                </param>
                <return>
                    an ASCII hex string                    
                </return>
            </javadoc>
            <method name="toHex" type="String" line="241">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="243"/>
                <scope line="245"/>
            </method>
        </class>
    </source>