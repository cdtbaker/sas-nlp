<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.util.Date"/>
        <import package="java.util.Vector"/>
        <import package="java.math.BigInteger"/>
        <import package="java.io.DataInputStream"/>
        <class name="DerInputStream" line="36">
            <comment line="62">
                This version only supports fully buffered DER.  This is easy to
                 work with, though if large objects are manipulated DER becomes
                 awkward to deal with.  That&apos;s where BER is useful, since BER
                 handles streaming data relatively well.                
            </comment>
            <comment line="99">
                private helper routine                
            </comment>
            <comment line="152">
                PRIMITIVES -- these are &quot;universal&quot; ASN.1 simple types.
                
                  INTEGER, ENUMERATED, BIT STRING, OCTET STRING, NULL
                  OBJECT IDENTIFIER, SEQUENCE (OF), SET (OF)
                  UTF8String, PrintableString, T61String, IA5String, UTCTime,
                  GeneralizedTime, BMPString.
                 Note: UniversalString not supported till encoder is available.                
            </comment>
            <comment line="341">
                Read a &quot;vector&quot; of values ... set or sequence have the
                 same encoding, except for the initial tag, so both use
                 this same helper routine.                
            </comment>
            <comment line="511">
                Get a byte from the input stream.                
            </comment>
            <comment line="514">
                package private                
            </comment>
            <comment line="523">
                package private                
            </comment>
            <comment line="528">
                Get a length from the input stream, allowing for at most 32 bits of
                 encoding to be used.  (Not the same as getting a tagged integer!)
                
                 @return the length or -1 if indefinite length found.
                 @exception IOException on parsing error or unsupported lengths.                
            </comment>
            <comment line="539">
                Get a length from the input stream, allowing for at most 32 bits of
                 encoding to be used.  (Not the same as getting a tagged integer!)
                
                 @return the length or -1 if indefinite length found.
                 @exception IOException on parsing error or unsupported lengths.                
            </comment>
            <javadoc line="36">
                A DER input stream, used for parsing ASN.1 DER-encoded data such as
                  that found in X.509 certificates.  DER is a subset of BER/1, which has
                  the advantage that it allows only a single encoding of primitive data.
                  (High level data such as dates still support many encodings.)  That is,
                  it uses the &quot;Definite&quot; Encoding Rules (DER) not the &quot;Basic&quot; ones (BER).
                  &lt;P&gt;Note that, like BER/1, DER streams are streams of explicitly
                  tagged data values.  Accordingly, this programming interface does
                  not expose any variant of the java.io.InputStream interface, since
                  that kind of input stream holds untagged data values and using that
                  I/O model could prevent correct parsing of the DER data.
                  &lt;P&gt;At this time, this class supports only a subset of the types of DER
                  data encodings which are defined.  That subset is sufficient for parsing
                  most X.509 certificates.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="buffer" type="DerInputBuffer" line="67"/>
            <declaration name="tag" type="byte" line="69"/>
            <javadoc line="69">
                The DER tag of the value; one of the tag_ constants.                
            </javadoc>
            <javadoc line="72">
                Create a DER input stream from a data buffer.  The buffer is not
                  copied, it is shared.  Accordingly, the buffer should be treated
                  as read-only.                
                <param>
                    data the buffer from which to create the string (CONSUMED)                    
                </param>
            </javadoc>
            <method name="DerInputStream" type="constructor" line="79">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="83">
                Create a DER input stream from part of a data buffer.
                  The buffer is not copied, it is shared.  Accordingly, the
                  buffer should be treated as read-only.                
                <param>
                    data the buffer from which to create the string (CONSUMED)                    
                </param>
                <param>
                    offset the first index of <em>data</em> which will
                      be read as DER input in the new stream                    
                </param>
                <param>
                    len how long a chunk of the buffer to use,
                      starting at "offset"                    
                </param>
            </javadoc>
            <method name="DerInputStream" type="constructor" line="94">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="101">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="105">
                    check for indefinite length encoding                    
                </comment>
                <scope line="102"/>
                <scope line="106">
                    <declaration name="inData" type="byte[]" line="107"/>
                    <declaration name="derIn" type="DerIndefLenConverter" line="110"/>
                </scope>
            </method>
            <method name="DerInputStream" type="constructor" line="117">
                <params>
                    <param name="buf" type="DerInputBuffer"/>
                </params>
            </method>
            <javadoc line="122">
                Creates a new DER input stream from part of this input stream.                
                <param>
                    len how long a chunk of the current input stream to use,
                      starting at the current position.                    
                </param>
                <param>
                    do_skip true if the existing data in the input stream should
                      be skipped.  If this value is false, the next data read
                      on this stream and the newly created stream will be the
                      same.                    
                </param>
            </javadoc>
            <method name="subStream" type="DerInputStream" line="133">
                <params>
                    <param name="len" type="int"/>
                    <param name="do_skip" type="boolean"/>
                </params>
                <declaration name="newbuf" type="DerInputBuffer" line="134"/>
                <scope line="137"/>
            </method>
            <javadoc line="143">
                Return what has been written to this DerInputStream
                  as a byte array. Useful for debugging.                
            </javadoc>
            <method name="toByteArray" type="byte[]" line="147"/>
            <javadoc line="161">
                Get an integer from the input stream as an integer.                
                <return>
                    the integer held in this DER input stream.                    
                </return>
            </javadoc>
            <method name="getInteger" type="int" line="166">
                <scope line="167"/>
            </method>
            <javadoc line="173">
                Get a integer from the input stream as a BigInteger object.                
                <return>
                    the integer held in this DER input stream.                    
                </return>
            </javadoc>
            <method name="getBigInteger" type="BigInteger" line="178">
                <scope line="179"/>
            </method>
            <javadoc line="185">
                Returns an ASN.1 INTEGER value as a positive BigInteger.
                  This is just to deal with implementations that incorrectly encode
                  some values as negative.                
                <return>
                    the integer held in this DER value as a BigInteger.                    
                </return>
            </javadoc>
            <method name="getPositiveBigInteger" type="BigInteger" line="192">
                <scope line="193"/>
            </method>
            <javadoc line="199">
                Get an enumerated from the input stream.                
                <return>
                    the integer held in this DER input stream.                    
                </return>
            </javadoc>
            <method name="getEnumerated" type="int" line="204">
                <scope line="205"/>
            </method>
            <javadoc line="211">
                Get a bit string from the input stream. Padded bits (if any)
                  will be stripped off before the bit string is returned.                
            </javadoc>
            <method name="getBitString" type="byte[]" line="215"/>
            <javadoc line="222">
                Get a bit string from the input stream.  The bit string need
                  not be byte-aligned.                
            </javadoc>
            <method name="getUnalignedBitString" type="BitArray" line="226">
                <comment line="232">
                    First byte = number of excess bits in the last octet of the
                     representation.                    
                </comment>
                <declaration name="length" type="int" line="230"/>
                <declaration name="validBits" type="int" line="236"/>
                <declaration name="repn" type="byte[]" line="238"/>
            </method>
            <javadoc line="245">
                Returns an ASN.1 OCTET STRING from the input stream.                
            </javadoc>
            <method name="getOctetString" type="byte[]" line="248">
                <declaration name="length" type="int" line="252"/>
                <declaration name="retval" type="byte[]" line="253"/>
            </method>
            <javadoc line="260">
                Returns the asked number of bytes from the input stream.                
            </javadoc>
            <method name="getBytes" type="void" line="263">
                <params>
                    <param name="val" type="byte[]"/>
                </params>
                <scope line="264"/>
            </method>
            <javadoc line="269">
                Reads an encoded null value from the input stream.                
            </javadoc>
            <method name="getNull" type="void" line="272"/>
            <javadoc line="277">
                Reads an X.200 style Object Identifier from the stream.                
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="280"/>
            <javadoc line="284">
                Return a sequence of encoded entities.  ASN.1 sequences are
                  ordered, and they are often used, like a &quot;struct&quot; in C or C++,
                  to group data values.  They may have optional or context
                  specific values.                
                <param>
                    startLen guess about how long the sequence will be
                      (used to initialize an auto-growing data structure)                    
                </param>
                <return>
                    array of the values in the sequence                    
                </return>
            </javadoc>
            <method name="getSequence" type="DerValue[]" line="294">
                <params>
                    <param name="startLen" type="int"/>
                </params>
            </method>
            <javadoc line="301">
                Return a set of encoded entities.  ASN.1 sets are unordered,
                  though DER may specify an order for some kinds of sets (such
                  as the attributes in an X.500 relative distinguished name)
                  to facilitate binary comparisons of encoded values.                
                <param>
                    startLen guess about how large the set will be
                      (used to initialize an auto-growing data structure)                    
                </param>
                <return>
                    array of the values in the sequence                    
                </return>
            </javadoc>
            <method name="getSet" type="DerValue[]" line="311">
                <params>
                    <param name="startLen" type="int"/>
                </params>
            </method>
            <javadoc line="318">
                Return a set of encoded entities.  ASN.1 sets are unordered,
                  though DER may specify an order for some kinds of sets (such
                  as the attributes in an X.500 relative distinguished name)
                  to facilitate binary comparisons of encoded values.                
                <param>
                    startLen guess about how large the set will be
                      (used to initialize an auto-growing data structure)                    
                </param>
                <param>
                    implicit if true tag is assumed implicit.                    
                </param>
                <return>
                    array of the values in the sequence                    
                </return>
            </javadoc>
            <method name="getSet" type="DerValue[]" line="330">
                <params>
                    <param name="startLen" type="int"/>
                    <param name="implicit" type="boolean"/>
                </params>
                <scope line="332">
                    <scope line="333"/>
                </scope>
            </method>
            <method name="readVector" type="DerValue[]" line="345">
                <params>
                    <param name="startLen" type="int"/>
                </params>
                <comment line="352">
                    indefinite length encoding found                    
                </comment>
                <comment line="354">
                    for tag and length bytes                    
                </comment>
                <comment line="370">
                    return empty array instead of null, which should be                    
                </comment>
                <comment line="371">
                    used only for missing optionals                    
                </comment>
                <comment line="374">
                    Create a temporary stream from which to read the data,
                     unless it&apos;s not really needed.                    
                </comment>
                <comment line="383">
                    Pull values out of the stream.                    
                </comment>
                <comment line="397">
                    Now stick them into the array we&apos;re returning.                    
                </comment>
                <declaration name="newstr" type="DerInputStream" line="346"/>
                <declaration name="lenByte" type="byte" line="348"/>
                <declaration name="len" type="int" line="349"/>
                <scope line="351">
                    <declaration name="readLen" type="int" line="353"/>
                    <declaration name="offset" type="int" line="354"/>
                    <declaration name="indefData" type="byte[]" line="355"/>
                    <declaration name="dis" type="DataInputStream" line="358"/>
                    <declaration name="derIn" type="DerIndefLenConverter" line="361"/>
                </scope>
                <declaration name="vec" type="Vector&lt;DerValue&gt;" line="386"/>
                <declaration name="value" type="DerValue" line="387"/>
                <scope line="389"/>
                <declaration name="i" type="int" line="400"/>
                <declaration name="retval" type="DerValue[]" line="401"/>
            </method>
            <javadoc line="409">
                Get a single DER-encoded value from the input stream.
                  It can often be useful to pull a value from the stream
                  and defer parsing it.  For example, you can pull a nested
                  sequence out with one call, and only examine its elements
                  later when you really need to.                
            </javadoc>
            <method name="getDerValue" type="DerValue" line="416"/>
            <javadoc line="420">
                Read a string that was encoded as a UTF8String DER value.                
            </javadoc>
            <method name="getUTF8String" type="String" line="423"/>
            <javadoc line="427">
                Read a string that was encoded as a PrintableString DER value.                
            </javadoc>
            <method name="getPrintableString" type="String" line="430"/>
            <javadoc line="435">
                Read a string that was encoded as a T61String DER value.                
            </javadoc>
            <method name="getT61String" type="String" line="438">
                <comment line="439">
                    Works for common characters between T61 and ASCII.                    
                </comment>
            </method>
            <javadoc line="445">
                Read a string that was encoded as a IA5tring DER value.                
            </javadoc>
            <method name="getIA5String" type="String" line="448"/>
            <javadoc line="452">
                Read a string that was encoded as a BMPString DER value.                
            </javadoc>
            <method name="getBMPString" type="String" line="455"/>
            <javadoc line="460">
                Read a string that was encoded as a GeneralString DER value.                
            </javadoc>
            <method name="getGeneralString" type="String" line="463"/>
            <javadoc line="468">
                Private helper routine to read an encoded string from the input
                  stream.                
                <param>
                    stringTag the tag for the type of string to read                    
                </param>
                <param>
                    stringName a name to display in error messages                    
                </param>
                <param>
                    enc the encoder to use to interpret the data. Should
                      correspond to the stringTag above.                    
                </param>
            </javadoc>
            <method name="readString" type="String" line="477">
                <params>
                    <param name="stringTag" type="byte"/>
                    <param name="stringName" type="String"/>
                    <param name="enc" type="String"/>
                </params>
                <declaration name="length" type="int" line="483"/>
                <declaration name="retval" type="byte[]" line="484"/>
            </method>
            <javadoc line="492">
                Get a UTC encoded time value from the input stream.                
            </javadoc>
            <method name="getUTCTime" type="Date" line="495"/>
            <javadoc line="501">
                Get a Generalized encoded time value from the input stream.                
            </javadoc>
            <method name="getGeneralizedTime" type="Date" line="504"/>
            <method name="getByte" type="int" line="514"/>
            <method name="peekByte" type="int" line="518"/>
            <method name="getLength" type="int" line="523"/>
            <method name="getLength" type="int" line="534">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <method name="getLength" type="int" line="545">
                <params>
                    <param name="lenByte" type="int"/>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="549">
                    short form, 1 byte datum                    
                </comment>
                <comment line="551">
                    long form or indefinite                    
                </comment>
                <comment line="554">
                    NOTE:  tmp == 0 indicates indefinite length encoded data.
                     tmp &gt; 4 indicates more than 4Gb of data.                    
                </comment>
                <declaration name="value" type="int" line="546"/>
                <scope line="549"/>
                <scope line="551">
                    <scope line="565"/>
                </scope>
            </method>
            <javadoc line="573">
                Mark the current position in the buffer, so that
                  a later call to &lt;code&gt;reset&lt;/code&gt; will return here.                
            </javadoc>
            <method name="mark" type="void" line="577">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="580">
                Return to the position of the last &lt;code&gt;mark&lt;/code&gt;
                  call.  A mark is implicitly set at the beginning of
                  the stream when it is created.                
            </javadoc>
            <method name="reset" type="void" line="585"/>
            <javadoc line="588">
                Returns the number of bytes available for reading.
                  This is most useful for testing whether the stream is
                  empty.                
            </javadoc>
            <method name="available" type="int" line="593"/>
        </class>
    </source>