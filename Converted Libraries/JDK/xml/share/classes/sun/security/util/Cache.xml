<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.util"/>
        <import package="java.lang.ref"/>
        <class name="Cache" line="4">
            <javadoc line="4">
                Abstract base class and factory for caches. A cache is a key-value mapping.
                  It has properties that make it more suitable for caching than a Map.
                  The factory methods can be used to obtain two different implementations.
                  They have the following properties:
                  . keys and values reside in memory
                  . keys and values must be non-null
                  . maximum size. Replacements are made in LRU order.
                  . optional lifetime, specified in seconds.
                  . save for concurrent use by multiple threads
                  . values are held by either standard references or via SoftReferences.
                  SoftReferences have the advantage that they are automatically cleared
                  by the garbage collector in response to memory demand. This makes it
                  possible to simple set the maximum size to a very large value and let
                  the GC automatically size the cache dynamically depending on the
                  amount of available memory.
                  However, note that because of the way SoftReferences are implemented in
                  HotSpot at the moment, this may not work perfectly as it clears them fairly
                  eagerly. Performance may be improved if the Java heap size is set to larger
                  value using e.g. java -ms64M -mx128M foo.Test
                  Cache sizing: the memory cache is implemented on top of a LinkedHashMap.
                  In its current implementation, the number of buckets (NOT entries) in
                  (Linked)HashMaps is always a power of two. It is recommended to set the
                  maximum cache size to value that uses those buckets fully. For example,
                  if a cache with somewhere between 500 and 1000 entries is desired, a
                  maximum size of 750 would be a good choice: try 1024 buckets, with a
                  load factor of 0.75f, the number of entries can be calculated as
                  buckets / 4  3. As mentioned above, with a SoftReference cache, it is
                  generally reasonable to set the size to a fairly large value.                
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <method name="Cache" type="constructor" line="36"/>
            <method name="size" type="int" line="38"/>
            <javadoc line="38">
                Return the number of currently valid entries in the cache.                
            </javadoc>
            <method name="clear" type="void" line="42"/>
            <javadoc line="42">
                Remove all entries from the cache.                
            </javadoc>
            <method name="put" type="void" line="46"/>
            <javadoc line="46">
                Add an entry to the cache.                
            </javadoc>
            <method name="get" type="Object" line="50"/>
            <javadoc line="50">
                Get a value from the cache.                
            </javadoc>
            <method name="remove" type="void" line="54"/>
            <javadoc line="54">
                Remove an entry from the cache.                
            </javadoc>
            <method name="setCapacity" type="void" line="58"/>
            <javadoc line="58">
                Set the maximum size.                
            </javadoc>
            <method name="setTimeout" type="void" line="62"/>
            <javadoc line="62">
                Set the timeout(in seconds).                
            </javadoc>
            <method name="accept" type="void" line="66"/>
            <javadoc line="66">
                accept a visitor                
            </javadoc>
            <javadoc line="70">
                Return a new memory cache with the specified maximum size, unlimited
                  lifetime for entries, with the values held by SoftReferences.                
            </javadoc>
            <method name="newSoftMemoryCache" type="Cache" line="74">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="77">
                Return a new memory cache with the specified maximum size, the
                  specified maximum lifetime (in seconds), with the values held
                  by SoftReferences.                
            </javadoc>
            <method name="newSoftMemoryCache" type="Cache" line="82">
                <params>
                    <param name="size" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Return a new memory cache with the specified maximum size, unlimited
                  lifetime for entries, with the values held by standard references.                
            </javadoc>
            <method name="newHardMemoryCache" type="Cache" line="89">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="92">
                Return a dummy cache that does nothing.                
            </javadoc>
            <method name="newNullCache" type="Cache" line="95"/>
            <javadoc line="98">
                Return a new memory cache with the specified maximum size, the
                  specified maximum lifetime (in seconds), with the values held
                  by standard references.                
            </javadoc>
            <method name="newHardMemoryCache" type="Cache" line="103">
                <params>
                    <param name="size" type="int"/>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <class name="EqualByteArray" line="106">
                <javadoc line="106">
                    Utility class that wraps a byte array and implements the equals()
                      and hashCode() contract in a way suitable for Maps and caches.                    
                </javadoc>
                <declaration name="b" type="byte[]" line="111"/>
                <declaration name="hash" type="int" line="112"/>
                <method name="EqualByteArray" type="constructor" line="113">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="116">
                    <declaration name="h" type="int" line="117"/>
                    <scope line="118">
                        <scope line="120"/>
                    </scope>
                </method>
                <method name="equals" type="boolean" line="127">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="128"/>
                    <scope line="131"/>
                    <declaration name="other" type="EqualByteArray" line="134"/>
                </method>
            </class>
            <interface name="CacheVisitor">
                <method name="visit" type="void" line="139"/>
            </interface>
        </class>
        <class name="NullCache" line="142">
            <extends class="Cache"/>
            <declaration name="INSTANCE" type="Cache" line="143"/>
            <method name="NullCache" type="constructor" line="144"/>
            <method name="size" type="int" line="146"/>
            <method name="clear" type="void" line="149"/>
            <method name="put" type="void" line="151">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="get" type="Object" line="153">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="remove" type="void" line="156">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="setCapacity" type="void" line="158">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="setTimeout" type="void" line="160">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="accept" type="void" line="162">
                <params>
                    <param name="visitor" type="CacheVisitor"/>
                </params>
            </method>
        </class>
        <class name="MemoryCache" line="165">
            <extends class="Cache"/>
            <declaration name="LOAD_FACTOR" type="float" line="166"/>
            <declaration name="DEBUG" type="boolean" line="167"/>
            <declaration name="cacheMap" type="Map&lt;Object,CacheEntry&gt;" line="168"/>
            <declaration name="maxSize" type="int" line="169"/>
            <declaration name="lifetime" type="long" line="170"/>
            <declaration name="queue" type="ReferenceQueue" line="171"/>
            <method name="MemoryCache" type="constructor" line="172">
                <params>
                    <param name="soft" type="boolean"/>
                    <param name="maxSize" type="int"/>
                </params>
            </method>
            <method name="MemoryCache" type="constructor" line="175">
                <params>
                    <param name="soft" type="boolean"/>
                    <param name="maxSize" type="int"/>
                    <param name="lifetime" type="int"/>
                </params>
                <declaration name="buckets" type="int" line="179"/>
            </method>
            <javadoc line="182">
                Empty the reference queue and remove all corresponding entries
                  from the cache.
                  This method should be called at the beginning of each public
                  method.                
            </javadoc>
            <method name="emptyQueue" type="void" line="188">
                <scope line="189"/>
                <declaration name="startSize" type="int" line="192"/>
                <scope line="193">
                    <declaration name="entry" type="CacheEntry" line="194"/>
                    <scope line="195"/>
                    <declaration name="key" type="Object" line="198"/>
                    <scope line="199"/>
                    <declaration name="currentEntry" type="CacheEntry" line="202"/>
                    <scope line="203"/>
                </scope>
                <scope line="207">
                    <declaration name="endSize" type="int" line="208"/>
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="214">
                Scan all entries and remove all expired ones.                
            </javadoc>
            <method name="expungeExpiredEntries" type="void" line="217">
                <scope line="219"/>
                <declaration name="cnt" type="int" line="222"/>
                <declaration name="time" type="long" line="223"/>
                <scope line="224">
                    <declaration name="entry" type="CacheEntry" line="225"/>
                    <scope line="226"/>
                </scope>
                <scope line="231">
                    <scope line="232"/>
                </scope>
            </method>
            <method name="size" type="int" line="237"/>
            <method name="clear" type="void" line="241">
                <scope line="242">
                    <scope line="243"/>
                    <scope line="246"/>
                </scope>
            </method>
            <method name="put" type="void" line="251">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="expirationTime" type="long" line="253"/>
                <declaration name="newEntry" type="CacheEntry" line="254"/>
                <declaration name="oldEntry" type="CacheEntry" line="255"/>
                <scope line="256"/>
                <scope line="260">
                    <scope line="262">
                        <declaration name="t" type="Iterator&lt;CacheEntry&gt;" line="263"/>
                        <declaration name="lruEntry" type="CacheEntry" line="264"/>
                        <scope line="265"/>
                    </scope>
                </scope>
            </method>
            <method name="get" type="Object" line="273">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="entry" type="CacheEntry" line="275"/>
                <scope line="276"/>
                <declaration name="time" type="long" line="279"/>
                <scope line="280">
                    <scope line="281"/>
                </scope>
            </method>
            <method name="remove" type="void" line="289">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="entry" type="CacheEntry" line="291"/>
                <scope line="292"/>
            </method>
            <method name="setCapacity" type="void" line="296">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="298">
                    <declaration name="t" type="Iterator&lt;CacheEntry&gt;" line="299"/>
                    <scope line="300">
                        <declaration name="lruEntry" type="CacheEntry" line="301"/>
                        <scope line="302"/>
                    </scope>
                </scope>
                <scope line="310"/>
            </method>
            <method name="setTimeout" type="void" line="314">
                <params>
                    <param name="timeout" type="int"/>
                </params>
                <scope line="317"/>
            </method>
            <method name="accept" type="void" line="321">
                <params>
                    <param name="visitor" type="CacheVisitor"/>
                </params>
                <declaration name="cached" type="Map&lt;Object,Object&gt;" line="323"/>
            </method>
            <method name="getCachedEntries" type="Map<Object,Object>" line="326">
                <declaration name="kvmap" type="Map&lt;Object,Object&gt;" line="327"/>
                <scope line="328"/>
            </method>
            <method name="newEntry" type="CacheEntry" line="333">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                    <param name="expirationTime" type="long"/>
                    <param name="queue" type="ReferenceQueue"/>
                </params>
                <scope line="334"/>
                <scope line="337"/>
            </method>
            <interface name="CacheEntry">
                <method name="isValid" type="boolean" line="342"/>
                <method name="invalidate" type="void" line="343"/>
                <method name="getKey" type="Object" line="344"/>
                <method name="getValue" type="Object" line="345"/>
            </interface>
            <class name="HardCacheEntry" line="347">
                <implements interface="CacheEntry"/>
                <declaration name="key" type="Object" line="348"/>
                <declaration name="expirationTime" type="long" line="349"/>
                <method name="HardCacheEntry" type="constructor" line="350">
                    <params>
                        <param name="key" type="Object"/>
                        <param name="value" type="Object"/>
                        <param name="expirationTime" type="long"/>
                    </params>
                </method>
                <method name="getKey" type="Object" line="355"/>
                <method name="getValue" type="Object" line="358"/>
                <method name="isValid" type="boolean" line="361">
                    <params>
                        <param name="currentTime" type="long"/>
                    </params>
                    <declaration name="valid" type="boolean" line="362"/>
                    <scope line="363"/>
                </method>
                <method name="invalidate" type="void" line="368"/>
            </class>
            <class name="SoftCacheEntry" line="374">
                <extends class="SoftReference"/>
                <implements interface="CacheEntry"/>
                <declaration name="key" type="Object" line="375"/>
                <declaration name="expirationTime" type="long" line="376"/>
                <method name="SoftCacheEntry" type="constructor" line="377">
                    <params>
                        <param name="key" type="Object"/>
                        <param name="value" type="Object"/>
                        <param name="expirationTime" type="long"/>
                        <param name="queue" type="ReferenceQueue"/>
                    </params>
                </method>
                <method name="getKey" type="Object" line="382"/>
                <method name="getValue" type="Object" line="385"/>
                <method name="isValid" type="boolean" line="388">
                    <params>
                        <param name="currentTime" type="long"/>
                    </params>
                    <declaration name="valid" type="boolean" line="389"/>
                    <scope line="390"/>
                </method>
                <method name="invalidate" type="void" line="395"/>
            </class>
        </class>
    </source>