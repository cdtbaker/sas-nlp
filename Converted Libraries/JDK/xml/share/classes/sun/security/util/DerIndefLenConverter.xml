<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <class name="DerIndefLenConverter" line="31">
            <comment line="44">
                bits 5-1                
            </comment>
            <comment line="45">
                bits 6                
            </comment>
            <comment line="46">
                bits 8 and 7                
            </comment>
            <comment line="48">
                bit 8 set                
            </comment>
            <comment line="49">
                bits 7 - 1                
            </comment>
            <comment line="66">
                if bit 8 is set then it implies either indefinite length or long form                
            </comment>
            <comment line="71">
                Default package private constructor                
            </comment>
            <comment line="266">
                Returns the number of bytes needed to represent the given length                
            </comment>
            <comment line="267">
                in ASN.1 notation                
            </comment>
            <javadoc line="31">
                A package private utility class to convert indefinite length DER
                  encoded byte arrays to definite length DER encoded byte arrays.
                  This assumes that the basic data structure is &quot;tag, length, value&quot;
                  triplet. In the case where the length is &quot;indefinite&quot;, terminating
                  end-of-contents bytes are expected.                
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="TAG_MASK" type="int" line="43"/>
            <declaration name="FORM_MASK" type="int" line="44"/>
            <declaration name="CLASS_MASK" type="int" line="45"/>
            <declaration name="LEN_LONG" type="int" line="47"/>
            <declaration name="LEN_MASK" type="int" line="48"/>
            <declaration name="SKIP_EOC_BYTES" type="int" line="49"/>
            <declaration name="data" type="byte[]" line="51"/>
            <declaration name="newDataPos" type="int" line="52"/>
            <declaration name="unresolved" type="int" line="53"/>
            <declaration name="ndefsList" type="ArrayList&lt;Object&gt;" line="55"/>
            <declaration name="numOfTotalLenBytes" type="int" line="57"/>
            <method name="isEOC" type="boolean" line="59">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <comment line="60">
                    EOC                    
                </comment>
                <comment line="61">
                    primitive                    
                </comment>
                <comment line="62">
                    universal                    
                </comment>
            </method>
            <method name="isLongForm" type="boolean" line="66">
                <params>
                    <param name="lengthByte" type="int"/>
                </params>
            </method>
            <method name="DerIndefLenConverter" type="constructor" line="73"/>
            <javadoc line="75">
                Checks whether the given length byte is of the form
                  &lt;em&gt;Indefinite&lt;/em&gt;.                
                <param>
                    lengthByte the length byte from a DER encoded
                      object.                    
                </param>
                <return>
                    true if the byte is of Indefinite form otherwise
                      returns false.                    
                </return>
            </javadoc>
            <method name="isIndefinite" type="boolean" line="84">
                <params>
                    <param name="lengthByte" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Parse the tag and if it is an end-of-contents tag then
                  add the current position to the &lt;code&gt;eocList&lt;/code&gt; vector.                
            </javadoc>
            <method name="parseTag" type="void" line="92">
                <comment line="100">
                    Determine the first element in the vector that does not                    
                </comment>
                <comment line="101">
                    have a matching EOC                    
                </comment>
                <comment line="119">
                    Add the number of bytes required to represent this section                    
                </comment>
                <comment line="120">
                    to the total number of length bytes,                    
                </comment>
                <comment line="121">
                    and subtract the indefinite-length tag (1 byte) and                    
                </comment>
                <comment line="122">
                    EOC bytes (2 bytes) for this section                    
                </comment>
                <scope line="95">
                    <declaration name="numOfEncapsulatedLenBytes" type="int" line="96"/>
                    <declaration name="elem" type="Object" line="97"/>
                    <declaration name="index" type="int" line="98"/>
                    <scope line="99">
                        <scope line="103"/>
                        <scope line="105"/>
                    </scope>
                    <scope line="109"/>
                    <declaration name="sectionLen" type="int" line="113"/>
                    <declaration name="sectionLenBytes" type="byte[]" line="115"/>
                </scope>
            </method>
            <javadoc line="128">
                Write the tag and if it is an end-of-contents tag
                  then skip the tag and its 1 byte length of zero.                
            </javadoc>
            <method name="writeTag" type="void" line="132">
                <comment line="137">
                    skip length                    
                </comment>
                <declaration name="tag" type="int" line="135"/>
                <scope line="136"/>
            </method>
            <javadoc line="143">
                Parse the length and if it is an indefinite length then add
                  the current position to the &lt;code&gt;ndefsList&lt;/code&gt; vector.                
            </javadoc>
            <method name="parseLength" type="int" line="147">
                <declaration name="curLen" type="int" line="148"/>
                <declaration name="lenByte" type="int" line="151"/>
                <scope line="152"/>
                <scope line="157"/>
                <scope line="165"/>
            </method>
            <javadoc line="171">
                Write the length and if it is an indefinite length
                  then calculate the definite length from the positions
                  of the indefinite length and its matching EOC terminator.
                  Then, write the value.                
            </javadoc>
            <method name="writeLengthAndValue" type="void" line="177">
                <declaration name="curLen" type="int" line="180"/>
                <declaration name="lenByte" type="int" line="181"/>
                <scope line="182">
                    <declaration name="lenBytes" type="byte[]" line="183"/>
                </scope>
                <scope line="189"/>
            </method>
            <method name="writeLength" type="void" line="199">
                <params>
                    <param name="curLen" type="int"/>
                </params>
                <scope line="200"/>
                <scope line="203"/>
                <scope line="207"/>
                <scope line="212"/>
                <scope line="218"/>
            </method>
            <method name="getLengthBytes" type="byte[]" line="227">
                <params>
                    <param name="curLen" type="int"/>
                </params>
                <declaration name="lenBytes" type="byte[]" line="228"/>
                <declaration name="index" type="int" line="229"/>
                <scope line="231"/>
                <scope line="235"/>
                <scope line="240"/>
                <scope line="246"/>
                <scope line="253"/>
            </method>
            <method name="getNumOfLenBytes" type="int" line="267">
                <params>
                    <param name="len" type="int"/>
                </params>
                <declaration name="numOfLenBytes" type="int" line="268"/>
                <scope line="270"/>
                <scope line="272"/>
                <scope line="274"/>
                <scope line="276"/>
                <scope line="278"/>
            </method>
            <javadoc line="284">
                Parse the value;                
            </javadoc>
            <method name="parseValue" type="void" line="287">
                <params>
                    <param name="curLen" type="int"/>
                </params>
            </method>
            <javadoc line="291">
                Write the value;                
            </javadoc>
            <method name="writeValue" type="void" line="294">
                <params>
                    <param name="curLen" type="int"/>
                </params>
            </method>
            <javadoc line="299">
                Converts a indefinite length DER encoded byte array to
                  a definte length DER encoding.                
                <param>
                    indefData the byte array holding the indefinite
                      length encoding.                    
                </param>
                <return>
                    the byte array containing the definite length
                      DER encoding.                    
                </return>
                <exception>
                    IOException on parsing or re-writing errors.                    
                </exception>
            </javadoc>
            <method name="convert" type="byte[]" line="309">
                <params>
                    <param name="indefData" type="byte[]"/>
                </params>
                <comment line="316">
                    parse and set up the vectors of all the indefinite-lengths                    
                </comment>
                <comment line="331">
                    write out the new byte array replacing all the indefinite-lengths                    
                </comment>
                <comment line="332">
                    and EOCs                    
                </comment>
                <declaration name="len" type="int" line="313"/>
                <declaration name="unused" type="int" line="314"/>
                <scope line="317">
                    <scope line="321"/>
                </scope>
                <scope line="333"/>
            </method>
        </class>
    </source>