<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.math.BigInteger"/>
        <class name="BigInt" line="3">
            <javadoc line="3">
                A low-overhead arbitrary-precision &lt;em&gt;unsigned&lt;/em&gt; integer.
                  This is intended for use with ASN.1 parsing, and printing of
                  such parsed values.  Convert to &quot;BigInteger&quot; if you need to do
                  arbitrary precision arithmetic, rather than just represent
                  the number as a wrapped array of bytes.
                  &lt;P&gt;&lt;em&gt;&lt;b&gt;NOTE:&lt;/b&gt;  This class may eventually disappear, to
                  be supplanted by big-endian byte arrays which hold both signed
                  and unsigned arbitrary-precision integers.&lt;/em&gt;                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="places" type="byte[]" line="15"/>
            <javadoc line="16">
                Constructs a &quot;Big&quot; integer from a set of (big-endian) bytes.
                  Leading zeroes should be stripped off.                
                <param>
                    data a sequence of bytes, most significant bytes/digits
                      first.  CONSUMED.                    
                </param>
            </javadoc>
            <method name="BigInt" type="constructor" line="22">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="25">
                Constructs a &quot;Big&quot; integer from a &quot;BigInteger&quot;, which must be
                  positive (or zero) in value.                
            </javadoc>
            <method name="BigInt" type="constructor" line="29">
                <params>
                    <param name="i" type="BigInteger"/>
                </params>
                <declaration name="temp" type="byte[]" line="30"/>
                <scope line="33"/>
            </method>
            <javadoc line="38">
                Constructs a &quot;Big&quot; integer from a normal Java integer.                
                <param>
                    i the java primitive integer                    
                </param>
            </javadoc>
            <method name="BigInt" type="constructor" line="42">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="43"/>
                <scope line="47"/>
                <scope line="52"/>
                <scope line="58"/>
            </method>
            <javadoc line="66">
                Converts the &quot;big&quot; integer to a java primitive integer.                
                <excpet>
                    NumberFormatException if 32 bits is insufficient.                    
                </excpet>
            </javadoc>
            <method name="toInt" type="int" line="70">
                <declaration name="retval" type="int" line="72"/>
            </method>
            <javadoc line="76">
                Returns a hexadecimal printed representation.  The value is
                  formatted to fit on lines of at least 75 characters, with
                  embedded newlines.  Words are separated for readability,
                  with eight words (32 bytes) per line.                
            </javadoc>
            <method name="toString" type="String" line="82"/>
            <javadoc line="85">
                Returns a BigInteger value which supports many arithmetic
                  operations. Assumes negative values will never occur.                
            </javadoc>
            <method name="toBigInteger" type="BigInteger" line="89"/>
            <javadoc line="92">
                Returns the data as a byte array.  The most significant bit
                  of the array is bit zero (as in &lt;code&gt;java.math.BigInteger&lt;/code&gt;).                
            </javadoc>
            <method name="toByteArray" type="byte[]" line="96"/>
            <declaration name="digits" type="String" line="99"/>
            <method name="hexify" type="String" line="100">
                <declaration name="buf" type="StringBuffer" line="102"/>
                <scope line="104">
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="114">
                Returns true iff the parameter is a numerically equivalent
                  BigInt.                
                <param>
                    other the object being compared with this one.                    
                </param>
            </javadoc>
            <method name="equals" type="boolean" line="119">
                <params>
                    <param name="other" type="Object"/>
                </params>
            </method>
            <javadoc line="123">
                Returns true iff the parameter is numerically equivalent.                
                <param>
                    other the BigInt being compared with this one.                    
                </param>
            </javadoc>
            <method name="equals" type="boolean" line="127">
                <params>
                    <param name="other" type="BigInt"/>
                </params>
                <declaration name="otherPlaces" type="byte[]" line="129"/>
            </method>
            <javadoc line="134">
                Returns a hashcode for this BigInt.                
                <return>
                    a hashcode for this BigInt.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="138"/>
        </class>
    </source>