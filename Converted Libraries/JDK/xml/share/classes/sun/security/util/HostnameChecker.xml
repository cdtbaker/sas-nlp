<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.ssl.Krb5Helper"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.net.util.IPAddressUtil"/>
        <class name="HostnameChecker" line="10">
            <javadoc line="10">
                Class to check hostnames against the names specified in a certificate as
                  required for TLS and LDAP.                
            </javadoc>
            <declaration name="TYPE_TLS" type="byte" line="15"/>
            <declaration name="INSTANCE_TLS" type="HostnameChecker" line="16"/>
            <declaration name="TYPE_LDAP" type="byte" line="17"/>
            <declaration name="INSTANCE_LDAP" type="HostnameChecker" line="18"/>
            <declaration name="ALTNAME_DNS" type="int" line="19"/>
            <declaration name="ALTNAME_IP" type="int" line="20"/>
            <declaration name="checkType" type="byte" line="21"/>
            <method name="HostnameChecker" type="constructor" line="22">
                <params>
                    <param name="checkType" type="byte"/>
                </params>
            </method>
            <javadoc line="25">
                Get a HostnameChecker instance. checkType should be one of the
                  TYPE_ constants defined in this class.                
            </javadoc>
            <method name="getInstance" type="HostnameChecker" line="29">
                <params>
                    <param name="checkType" type="byte"/>
                </params>
                <scope line="30"/>
                <scope line="33"/>
            </method>
            <javadoc line="38">
                Perform the check.                
                <exception>
                    CertificateException if the name does not match any of
                      the names specified in the certificate                    
                </exception>
            </javadoc>
            <method name="match" type="void" line="43">
                <params>
                    <param name="expectedName" type="String"/>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="44"/>
                <scope line="47"/>
            </method>
            <javadoc line="51">
                Perform the check for Kerberos.                
            </javadoc>
            <method name="match" type="boolean" line="54">
                <params>
                    <param name="expectedName" type="String"/>
                    <param name="principal" type="Principal"/>
                </params>
                <declaration name="hostName" type="String" line="55"/>
            </method>
            <javadoc line="58">
                Return the Server name from Kerberos principal.                
            </javadoc>
            <method name="getServerName" type="String" line="61">
                <params>
                    <param name="principal" type="Principal"/>
                </params>
            </method>
            <javadoc line="64">
                Test whether the given hostname looks like a literal IPv4 or IPv6
                  address. The hostname does not need to be a fully qualified name.
                  This is not a strict check that performs full input validation.
                  That means if the method returns true, name need not be a correct
                  IP address, rather that it does not represent a valid DNS hostname.
                  Likewise for IP addresses when it returns false.                
            </javadoc>
            <method name="isIpAddress" type="boolean" line="72">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <javadoc line="80">
                Check if the certificate allows use of the given IP address.
                  From RFC2818:
                  In some cases, the URI is specified as an IP address rather than a
                  hostname. In this case, the iPAddress subjectAltName must be present
                  in the certificate and must exactly match the IP in the URI.                
            </javadoc>
            <method name="matchIP" type="void" line="87">
                <params>
                    <param name="expectedIP" type="String"/>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <declaration name="subjAltNames" type="Collection&lt;List&lt;?&gt;&gt;" line="88"/>
                <scope line="89"/>
                <scope line="92">
                    <scope line="93">
                        <declaration name="ipAddress" type="String" line="94"/>
                        <scope line="95"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="102">
                Check if the certificate allows use of the given DNS name.
                  From RFC2818:
                  If a subjectAltName extension of type dNSName is present, that MUST
                  be used as the identity. Otherwise, the (most specific) Common Name
                  field in the Subject field of the certificate MUST be used. Although
                  the use of the Common Name is existing practice, it is deprecated and
                  Certification Authorities are encouraged to use the dNSName instead.
                  Matching is performed using the matching rules specified by
                  [RFC2459].  If more than one identity of a given type is present in
                  the certificate (e.g., more than one dNSName name, a match in any one
                  of the set is considered acceptable.)                
            </javadoc>
            <method name="matchDNS" type="void" line="115">
                <params>
                    <param name="expectedName" type="String"/>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <declaration name="subjAltNames" type="Collection&lt;List&lt;?&gt;&gt;" line="116"/>
                <scope line="117">
                    <declaration name="foundDNS" type="boolean" line="118"/>
                    <scope line="119">
                        <scope line="120">
                            <declaration name="dnsName" type="String" line="122"/>
                            <scope line="123"/>
                        </scope>
                    </scope>
                    <scope line="128"/>
                </scope>
                <declaration name="subjectName" type="X500Name" line="132"/>
                <declaration name="derValue" type="DerValue" line="133"/>
                <scope line="134">
                    <scope line="135">
                        <scope line="136"/>
                    </scope>
                    <scope line="140"/>
                </scope>
                <declaration name="msg" type="String" line="143"/>
            </method>
            <javadoc line="146">
                Return the subject of a certificate as X500Name, by reparsing if
                  necessary. X500Name should only be used if access to name components
                  is required, in other cases X500Principal is to be prefered.
                  This method is currently used from within JSSE, do not remove.                
            </javadoc>
            <method name="getSubjectX500Name" type="X500Name" line="152">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="153">
                    <declaration name="subjectDN" type="Principal" line="154"/>
                    <scope line="155"/>
                    <scope line="158">
                        <declaration name="subjectX500" type="X500Principal" line="159"/>
                    </scope>
                </scope>
                <scope line="163"/>
            </method>
            <javadoc line="167">
                Returns true if name matches against template.&lt;p&gt;
                  The matching is performed as per RFC 2818 rules for TLS and
                  RFC 2830 rules for LDAP.&lt;p&gt;
                  The &lt;code&gt;name&lt;/code&gt; parameter should represent a DNS name.
                  The &lt;code&gt;template&lt;/code&gt; parameter
                  may contain the wildcard character                
            </javadoc>
            <method name="isMatched" type="boolean" line="175">
                <params>
                    <param name="name" type="String"/>
                    <param name="template" type="String"/>
                </params>
                <scope line="176"/>
                <scope line="179"/>
                <scope line="182"/>
            </method>
            <javadoc line="186">
                Returns true if name matches against template.&lt;p&gt;
                  According to RFC 2818, section 3.1 -
                  Names may contain the wildcard character  which is
                  considered to match any single domain name component
                  or component fragment.
                  E.g., .a.com matches foo.a.com but not
                  bar.foo.a.com. f.com matches foo.com but not bar.com.                
            </javadoc>
            <method name="matchAllWildcards" type="boolean" line="195">
                <params>
                    <param name="name" type="String"/>
                    <param name="template" type="String"/>
                </params>
                <declaration name="nameSt" type="StringTokenizer" line="198"/>
                <declaration name="templateSt" type="StringTokenizer" line="199"/>
                <scope line="200"/>
                <scope line="203">
                    <scope line="204"/>
                </scope>
            </method>
            <javadoc line="210">
                Returns true if name matches against template.&lt;p&gt;
                  As per RFC 2830, section 3.6 -
                  The &quot;&quot; wildcard character is allowed.  If present, it applies only
                  to the left-most name component.
                  E.g. .bar.com would match a.bar.com, b.bar.com, etc. but not
                  bar.com.                
            </javadoc>
            <method name="matchLeftmostWildcard" type="boolean" line="218">
                <params>
                    <param name="name" type="String"/>
                    <param name="template" type="String"/>
                </params>
                <declaration name="templateIdx" type="int" line="221"/>
                <declaration name="nameIdx" type="int" line="222"/>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <javadoc line="232">
                Returns true if the name matches against the template that may
                  contain wildcard char  &lt;p&gt;                
            </javadoc>
            <method name="matchWildCards" type="boolean" line="236">
                <params>
                    <param name="name" type="String"/>
                    <param name="template" type="String"/>
                </params>
                <declaration name="wildcardIdx" type="int" line="237"/>
                <declaration name="isBeginning" type="boolean" line="239"/>
                <declaration name="beforeWildcard" type="String" line="240"/>
                <declaration name="afterWildcard" type="String" line="241"/>
                <scope line="242">
                    <declaration name="beforeStartIdx" type="int" line="245"/>
                    <scope line="246"/>
                </scope>
            </method>
        </class>
    </source>