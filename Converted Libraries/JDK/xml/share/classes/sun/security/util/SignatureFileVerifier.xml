<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.security.cert.CertPath"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.util.jar"/>
        <import package="sun.security.pkcs"/>
        <import package="sun.security.timestamp.TimestampToken"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.security.jca.Providers"/>
        <class name="SignatureFileVerifier" line="43">
            <comment line="46">
                                
            </comment>
            <comment line="49">
                                
            </comment>
            <comment line="73">
                                
            </comment>
            <comment line="76">
                                
            </comment>
            <comment line="504">
                Examines a signature timestamp token to generate a timestamp object.
                
                 Examines the signer&apos;s unsigned attributes for a
                 &lt;tt&gt;signatureTimestampToken&lt;tt&gt; attribute. If present,
                 then it is parsed to extract the date and time at which the
                 timestamp was generated.
                
                 @param info A signer information element of a PKCS 7 block.
                
                 @return A timestamp token or null if none is present.
                 @throws IOException if an error is encountered while parsing the
                         PKCS7 data.
                 @throws NoSuchAlgorithmException if an error is encountered while
                         verifying the PKCS7 object.
                 @throws SignatureException if an error is encountered while
                         verifying the PKCS7 object.
                 @throws CertificateException if an error is encountered while generating
                         the TSA&apos;s certpath.                
            </comment>
            <comment line="560">
                for the toHex function                
            </comment>
            <comment line="580">
                returns true if set contains signer                
            </comment>
            <comment line="590">
                returns true if subset is a subset of set                
            </comment>
            <declaration name="debug" type="Debug" line="46"/>
            <declaration name="signerCache" type="ArrayList&lt;CodeSigner[]&gt;" line="49"/>
            <declaration name="ATTR_DIGEST" type="String" line="51"/>
            <declaration name="block" type="PKCS7" line="55"/>
            <javadoc line="55">
                the PKCS7 block for this .DSA/.RSA/.EC file                
            </javadoc>
            <declaration name="sfBytes" type="byte" line="58"/>
            <javadoc line="58">
                the raw bytes of the .SF file                
            </javadoc>
            <declaration name="name" type="String" line="61"/>
            <javadoc line="61">
                the name of the signature block file, uppercased and without
                  the extension (.DSA/.RSA/.EC)                
            </javadoc>
            <declaration name="md" type="ManifestDigester" line="66"/>
            <javadoc line="66">
                the ManifestDigester                
            </javadoc>
            <declaration name="createdDigests" type="HashMap&lt;String,MessageDigest&gt;" line="69"/>
            <javadoc line="69">
                cache of created MessageDigest objects                
            </javadoc>
            <declaration name="workaround" type="boolean" line="73"/>
            <declaration name="certificateFactory" type="CertificateFactory" line="76"/>
            <javadoc line="78">
                Create the named SignatureFileVerifier.                
                <param>
                    name the name of the signature block file (.DSA/.RSA/.EC)                    
                </param>
                <param>
                    rawBytes the raw bytes of the signature block file                    
                </param>
            </javadoc>
            <method name="SignatureFileVerifier" type="constructor" line="90">
                <params>
                    <param name="signerCache" type="ArrayList<CodeSigner[]>"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="name" type="String"/>
                    <param name="rawBytes" type="byte"/>
                </params>
                <comment line="91">
                    new PKCS7() calls CertificateFactory.getInstance()                    
                </comment>
                <comment line="92">
                    need to use local providers here, see Providers class                    
                </comment>
                <declaration name="obj" type="Object" line="93"/>
                <scope line="94"/>
                <scope line="99"/>
            </method>
            <javadoc line="108">
                returns true if we need the .SF file                
            </javadoc>
            <method name="needSignatureFileBytes" type="boolean" line="112"/>
            <javadoc line="118">
                returns true if we need this .SF file.                
                <param>
                    name the name of the .SF file without the extension                    
                </param>
            </javadoc>
            <method name="needSignatureFile" type="boolean" line="125">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="129">
                used to set the raw bytes of the .SF file when it
                  is external to the signature block file.                
            </javadoc>
            <method name="setSignatureFile" type="void" line="134">
                <params>
                    <param name="sfBytes" type="byte"/>
                </params>
            </method>
            <javadoc line="138">
                Utility method used by JarVerifier and JarSigner
                  to determine the signature file names and PKCS7 block
                  files names that are supported                
                <param>
                    s file name                    
                </param>
                <return>
                    true if the input file name is a supported
                      Signature File or PKCS7 block file name                    
                </return>
            </javadoc>
            <method name="isBlockOrSF" type="boolean" line="147">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="148">
                    we currently only support DSA and RSA PKCS7 blocks                    
                </comment>
                <scope line="150"/>
            </method>
            <javadoc line="156">
                get digest from cache                
            </javadoc>
            <method name="getDigest" type="MessageDigest" line="159">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="170">
                    ignore                    
                </comment>
                <declaration name="digest" type="MessageDigest" line="163"/>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="176">
                process the signature block file. Goes through the .SF file
                  and adds code signers for each section where the .SF section
                  hash was verified against the Manifest section.                
            </javadoc>
            <method name="process" type="void" line="187">
                <params>
                    <param name="signers" type="Hashtable<String,CodeSigner[]>"/>
                    <param name="manifestDigests" type="List"/>
                </params>
                <comment line="188">
                    calls Signature.getInstance() and MessageDigest.getInstance()                    
                </comment>
                <comment line="189">
                    need to use local providers here, see Providers class                    
                </comment>
                <declaration name="obj" type="Object" line="190"/>
                <scope line="191"/>
                <scope line="194"/>
            </method>
            <method name="processImpl" type="void" line="204">
                <params>
                    <param name="signers" type="Hashtable<String,CodeSigner[]>"/>
                    <param name="manifestDigests" type="List"/>
                </params>
                <comment line="212">
                    XXX: should this be an exception?                    
                </comment>
                <comment line="213">
                    for now we just ignore this signature file                    
                </comment>
                <comment line="228">
                    make sure we have something to do all this work for...                    
                </comment>
                <comment line="235">
                    see if we can verify the whole manifest first                    
                </comment>
                <comment line="238">
                    verify manifest main attributes                    
                </comment>
                <comment line="244">
                    go through each section in the signature file                    
                </comment>
                <comment line="270">
                    MANIFEST.MF is always regarded as signed                    
                </comment>
                <declaration name="sf" type="Manifest" line="205"/>
                <declaration name="version" type="String" line="208"/>
                <scope line="211"/>
                <declaration name="infos" type="SignerInfo[]" line="217"/>
                <scope line="219"/>
                <declaration name="decoder" type="BASE64Decoder" line="224"/>
                <declaration name="newSigners" type="CodeSigner[]" line="226"/>
                <declaration name="entries" type="Iterator&lt;Map.Entry&lt;String,Attributes&gt;&gt;" line="232"/>
                <declaration name="manifestSigned" type="boolean" line="236"/>
                <scope line="239"/>
                <scope line="245">
                    <declaration name="e" type="Map.Entry&lt;String,Attributes&gt;" line="247"/>
                    <declaration name="name" type="String" line="248"/>
                    <scope line="251">
                        <scope line="261"/>
                    </scope>
                    <scope line="265"/>
                </scope>
            </method>
            <javadoc line="274">
                See if the whole manifest was signed.                
            </javadoc>
            <method name="verifyManifestHash" type="boolean" line="282">
                <params>
                    <param name="sf" type="Manifest"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="decoder" type="BASE64Decoder"/>
                    <param name="manifestDigests" type="List"/>
                </params>
                <comment line="286">
                    go through all the attributes and process *-Digest-Manifest entries                    
                </comment>
                <comment line="292">
                    16 is length of &quot;-Digest-Manifest&quot;                    
                </comment>
                <comment line="315">
                    XXX: we will continue and verify each section                    
                </comment>
                <declaration name="mattr" type="Attributes" line="283"/>
                <declaration name="manifestSigned" type="boolean" line="284"/>
                <scope line="287">
                    <declaration name="key" type="String" line="289"/>
                    <scope line="291">
                        <declaration name="algorithm" type="String" line="293"/>
                        <declaration name="digest" type="MessageDigest" line="297"/>
                        <scope line="298">
                            <declaration name="computedHash" type="byte[]" line="299"/>
                            <declaration name="expectedHash" type="byte[]" line="300"/>
                            <scope line="303"/>
                            <scope line="312"/>
                            <scope line="314"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="verifyManifestMainAttrs" type="boolean" line="327">
                <params>
                    <param name="sf" type="Manifest"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="decoder" type="BASE64Decoder"/>
                </params>
                <comment line="331">
                    go through all the attributes and process                    
                </comment>
                <comment line="332">
                    digest entries for the manifest main attributes                    
                </comment>
                <comment line="359">
                    good                    
                </comment>
                <comment line="361">
                    we will *not* continue and verify each section                    
                </comment>
                <comment line="374">
                    this method returns &apos;true&apos; if either:                    
                </comment>
                <comment line="375">
                    . manifest main attributes were not signed, or                    
                </comment>
                <comment line="376">
                    . manifest main attributes were signed and verified                    
                </comment>
                <declaration name="mattr" type="Attributes" line="328"/>
                <declaration name="attrsVerified" type="boolean" line="329"/>
                <scope line="333">
                    <declaration name="key" type="String" line="334"/>
                    <scope line="336">
                        <declaration name="algorithm" type="String" line="337"/>
                        <declaration name="digest" type="MessageDigest" line="340"/>
                        <scope line="341">
                            <declaration name="mde" type="ManifestDigester.Entry" line="342"/>
                            <declaration name="computedHash" type="byte[]" line="344"/>
                            <declaration name="expectedHash" type="byte[]" line="345"/>
                            <scope line="348"/>
                            <scope line="358"/>
                            <scope line="360">
                                <scope line="363"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="380">
                given the .SF digest header, and the data from the
                  section in the manifest, see if the hashes match.
                  if not, throw a SecurityException.                
                <return>
                    true if all the -Digest headers verified                    
                </return>
                <exception>
                    SecurityException if the hash was not equal                    
                </exception>
            </javadoc>
            <method name="verifySection" type="boolean" line="394">
                <params>
                    <param name="sfAttr" type="Attributes"/>
                    <param name="name" type="String"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="decoder" type="BASE64Decoder"/>
                </params>
                <comment line="405">
                    sun.misc.HexDumpEncoder hex = new sun.misc.HexDumpEncoder();                    
                </comment>
                <comment line="406">
                    hex.encodeBuffer(data, System.out);                    
                </comment>
                <comment line="408">
                    go through all the attributes and process *-Digest entries                    
                </comment>
                <comment line="413">
                    7 is length of &quot;-Digest&quot;                    
                </comment>
                <comment line="442">
                    attempt to fallback to the workaround                    
                </comment>
                <declaration name="oneDigestVerified" type="boolean" line="395"/>
                <declaration name="mde" type="ManifestDigester.Entry" line="396"/>
                <scope line="398"/>
                <scope line="403">
                    <scope line="409">
                        <declaration name="key" type="String" line="410"/>
                        <scope line="412">
                            <declaration name="algorithm" type="String" line="414"/>
                            <declaration name="digest" type="MessageDigest" line="416"/>
                            <scope line="418">
                                <declaration name="ok" type="boolean" line="419"/>
                                <declaration name="expected" type="byte[]" line="421"/>
                                <declaration name="computed" type="byte[]" line="423"/>
                                <scope line="424"/>
                                <scope line="426"/>
                                <scope line="430"/>
                                <scope line="438"/>
                                <scope line="441">
                                    <scope line="443">
                                        <scope line="445">
                                            <scope line="446"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="456"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="468">
                Given the PKCS7 block and SignerInfo[], create an array of
                  CodeSigner objects. We do this only once for a given
                  signature block file.                
            </javadoc>
            <method name="getSigners" type="CodeSigner[]" line="475">
                <params>
                    <param name="infos" type="SignerInfo"/>
                    <param name="block" type="PKCS7"/>
                </params>
                <comment line="487">
                    Append the new code signer                    
                </comment>
                <declaration name="signers" type="ArrayList&lt;CodeSigner&gt;" line="477"/>
                <scope line="479">
                    <declaration name="info" type="SignerInfo" line="481"/>
                    <declaration name="chain" type="ArrayList&lt;X509Certificate&gt;" line="482"/>
                    <declaration name="certChain" type="CertPath" line="483"/>
                    <scope line="484"/>
                    <scope line="490"/>
                </scope>
                <scope line="496"/>
                <scope line="498"/>
            </method>
            <method name="getTimestamp" type="Timestamp" line="525">
                <params>
                    <param name="info" type="SignerInfo"/>
                </params>
                <comment line="529">
                    Extract the signer&apos;s unsigned attributes                    
                </comment>
                <comment line="537">
                    Extract the content (an encoded timestamp token info)                    
                </comment>
                <comment line="540">
                    Extract the signer (the Timestamping Authority)                    
                </comment>
                <comment line="541">
                    while verifying the content                    
                </comment>
                <comment line="544">
                    Expect only one signer                    
                </comment>
                <comment line="548">
                    Create a timestamp token info object                    
                </comment>
                <comment line="551">
                    Create a timestamp object                    
                </comment>
                <declaration name="timestamp" type="Timestamp" line="527"/>
                <declaration name="unsignedAttrs" type="PKCS9Attributes" line="530"/>
                <scope line="531">
                    <declaration name="timestampTokenAttr" type="PKCS9Attribute" line="532"/>
                    <scope line="534">
                        <declaration name="timestampToken" type="PKCS7" line="535"/>
                        <declaration name="encodedTimestampTokenInfo" type="byte[]" line="538"/>
                        <declaration name="tsa" type="SignerInfo[]" line="542"/>
                        <declaration name="chain" type="ArrayList&lt;X509Certificate&gt;" line="545"/>
                        <declaration name="tsaChain" type="CertPath" line="547"/>
                        <declaration name="timestampTokenInfo" type="TimestampToken" line="549"/>
                    </scope>
                </scope>
            </method>
            <declaration name="hexc" type="char[]" line="560"/>
            <javadoc line="562">
                convert a byte array to a hex string for debugging purposes                
                <param>
                    data the binary data to be converted to a hex string                    
                </param>
                <return>
                    an ASCII hex string                    
                </return>
            </javadoc>
            <method name="toHex" type="String" line="568">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="570"/>
                <scope line="572"/>
            </method>
            <method name="contains" type="boolean" line="581">
                <params>
                    <param name="set" type="CodeSigner[]"/>
                    <param name="signer" type="CodeSigner"/>
                </params>
                <scope line="582"/>
            </method>
            <method name="isSubSet" type="boolean" line="591">
                <params>
                    <param name="subset" type="CodeSigner[]"/>
                    <param name="set" type="CodeSigner[]"/>
                </params>
                <comment line="592">
                    check for the same object                    
                </comment>
                <declaration name="match" type="boolean" line="596"/>
                <scope line="597"/>
            </method>
            <javadoc line="604">
                returns true if signer contains exactly the same code signers as
                  oldSigner and newSigner, false otherwise. oldSigner
                  is allowed to be null.                
            </javadoc>
            <method name="matches" type="boolean" line="610">
                <params>
                    <param name="signers" type="CodeSigner[]"/>
                    <param name="oldSigners" type="CodeSigner[]"/>
                    <param name="newSigners" type="CodeSigner[]"/>
                </params>
                <comment line="612">
                    special case                    
                </comment>
                <comment line="618">
                    make sure all oldSigners are in signers                    
                </comment>
                <comment line="622">
                    make sure all newSigners are in signers                    
                </comment>
                <comment line="627">
                    now make sure all the code signers in signers are                    
                </comment>
                <comment line="628">
                    also in oldSigners or newSigners                    
                </comment>
                <declaration name="match" type="boolean" line="616"/>
                <scope line="623"/>
                <scope line="630">
                    <declaration name="found" type="boolean" line="631"/>
                </scope>
            </method>
            <method name="updateSigners" type="void" line="641">
                <params>
                    <param name="newSigners" type="CodeSigner[]"/>
                    <param name="signers" type="Hashtable<String,CodeSigner[]>"/>
                    <param name="name" type="String"/>
                </params>
                <comment line="645">
                    search through the cache for a match, go in reverse order                    
                </comment>
                <comment line="646">
                    as we are more likely to find a match with the last one                    
                </comment>
                <comment line="647">
                    added to the cache                    
                </comment>
                <declaration name="oldSigners" type="CodeSigner[]" line="643"/>
                <declaration name="cachedSigners" type="CodeSigner[]" line="649"/>
                <scope line="650">
                    <scope line="652"/>
                </scope>
                <scope line="658"/>
                <scope line="660"/>
            </method>
        </class>
    </source>