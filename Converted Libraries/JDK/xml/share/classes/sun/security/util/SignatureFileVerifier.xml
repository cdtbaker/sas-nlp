<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.security.cert.CertPath"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.util.jar"/>
        <import package="sun.security.pkcs"/>
        <import package="sun.security.timestamp.TimestampToken"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.security.jca.Providers"/>
        <class name="SignatureFileVerifier" line="14">
            <declaration name="debug" type="Debug" line="15"/>
            <declaration name="signerCache" type="ArrayList&lt;CodeSigner[]&gt;" line="16"/>
            <declaration name="ATTR_DIGEST" type="String" line="17"/>
            <declaration name="block" type="PKCS7" line="18"/>
            <javadoc line="18">
                the PKCS7 block for this .DSA/.RSA/.EC file                
            </javadoc>
            <declaration name="sfBytes" type="byte" line="22"/>
            <javadoc line="22">
                the raw bytes of the .SF file                
            </javadoc>
            <declaration name="name" type="String" line="26"/>
            <javadoc line="26">
                the name of the signature block file, uppercased and without
                  the extension (.DSA/.RSA/.EC)                
            </javadoc>
            <declaration name="md" type="ManifestDigester" line="31"/>
            <javadoc line="31">
                the ManifestDigester                
            </javadoc>
            <declaration name="createdDigests" type="HashMap&lt;String,MessageDigest&gt;" line="35"/>
            <javadoc line="35">
                cache of created MessageDigest objects                
            </javadoc>
            <declaration name="workaround" type="boolean" line="39"/>
            <declaration name="certificateFactory" type="CertificateFactory" line="40"/>
            <javadoc line="41">
                Create the named SignatureFileVerifier.                
                <param>
                    name the name of the signature block file (.DSA/.RSA/.EC)                    
                </param>
                <param>
                    rawBytes the raw bytes of the signature block file                    
                </param>
            </javadoc>
            <method name="SignatureFileVerifier" type="constructor" line="46">
                <params>
                    <param name="signerCache" type="ArrayList<CodeSigner[]>"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="name" type="String"/>
                    <param name="rawBytes" type="byte"/>
                </params>
                <declaration name="obj" type="Object" line="47"/>
                <scope line="48"/>
                <scope line="54"/>
            </method>
            <javadoc line="61">
                returns true if we need the .SF file                
            </javadoc>
            <method name="needSignatureFileBytes" type="boolean" line="64"/>
            <javadoc line="67">
                returns true if we need this .SF file.                
                <param>
                    name the name of the .SF file without the extension                    
                </param>
            </javadoc>
            <method name="needSignatureFile" type="boolean" line="71">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="74">
                used to set the raw bytes of the .SF file when it
                  is external to the signature block file.                
            </javadoc>
            <method name="setSignatureFile" type="void" line="78">
                <params>
                    <param name="sfBytes" type="byte"/>
                </params>
            </method>
            <javadoc line="81">
                Utility method used by JarVerifier and JarSigner
                  to determine the signature file names and PKCS7 block
                  files names that are supported                
                <param>
                    s file name                    
                </param>
                <return>
                    true if the input file name is a supported
                      Signature File or PKCS7 block file name                    
                </return>
            </javadoc>
            <method name="isBlockOrSF" type="boolean" line="89">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="95">
                get digest from cache                
            </javadoc>
            <method name="getDigest" type="MessageDigest" line="98">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="digest" type="MessageDigest" line="100"/>
                <scope line="101">
                    <scope line="102"/>
                    <scope line="106"/>
                </scope>
            </method>
            <javadoc line="111">
                process the signature block file. Goes through the .SF file
                  and adds code signers for each section where the .SF section
                  hash was verified against the Manifest section.                
            </javadoc>
            <method name="process" type="void" line="116">
                <params>
                    <param name="signers" type="Hashtable<String,CodeSigner[]>"/>
                    <param name="manifestDigests" type="List"/>
                </params>
                <declaration name="obj" type="Object" line="117"/>
                <scope line="118"/>
                <scope line="122"/>
            </method>
            <method name="processImpl" type="void" line="126">
                <params>
                    <param name="signers" type="Hashtable<String,CodeSigner[]>"/>
                    <param name="manifestDigests" type="List"/>
                </params>
                <declaration name="sf" type="Manifest" line="127"/>
                <declaration name="version" type="String" line="129"/>
                <scope line="130"/>
                <declaration name="infos" type="SignerInfo[]" line="133"/>
                <scope line="134"/>
                <declaration name="decoder" type="BASE64Decoder" line="137"/>
                <declaration name="newSigners" type="CodeSigner[]" line="138"/>
                <declaration name="entries" type="Iterator&lt;Map.Entry&lt;String,Attributes&gt;&gt;" line="140"/>
                <declaration name="manifestSigned" type="boolean" line="141"/>
                <scope line="142"/>
                <scope line="145">
                    <declaration name="e" type="Map.Entry&lt;String,Attributes&gt;" line="146"/>
                    <declaration name="name" type="String" line="147"/>
                    <scope line="148">
                        <scope line="152"/>
                    </scope>
                    <scope line="156"/>
                </scope>
            </method>
            <javadoc line="162">
                See if the whole manifest was signed.                
            </javadoc>
            <method name="verifyManifestHash" type="boolean" line="165">
                <params>
                    <param name="sf" type="Manifest"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="decoder" type="BASE64Decoder"/>
                    <param name="manifestDigests" type="List"/>
                </params>
                <declaration name="mattr" type="Attributes" line="166"/>
                <declaration name="manifestSigned" type="boolean" line="167"/>
                <scope line="168">
                    <declaration name="key" type="String" line="169"/>
                    <scope line="170">
                        <declaration name="algorithm" type="String" line="171"/>
                        <declaration name="digest" type="MessageDigest" line="174"/>
                        <scope line="175">
                            <declaration name="computedHash" type="byte[]" line="176"/>
                            <declaration name="expectedHash" type="byte[]" line="177"/>
                            <scope line="178"/>
                            <scope line="184"/>
                            <scope line="187"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="verifyManifestMainAttrs" type="boolean" line="194">
                <params>
                    <param name="sf" type="Manifest"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="decoder" type="BASE64Decoder"/>
                </params>
                <declaration name="mattr" type="Attributes" line="195"/>
                <declaration name="attrsVerified" type="boolean" line="196"/>
                <scope line="197">
                    <declaration name="key" type="String" line="198"/>
                    <scope line="199">
                        <declaration name="algorithm" type="String" line="200"/>
                        <declaration name="digest" type="MessageDigest" line="201"/>
                        <scope line="202">
                            <declaration name="mde" type="ManifestDigester.Entry" line="203"/>
                            <declaration name="computedHash" type="byte[]" line="204"/>
                            <declaration name="expectedHash" type="byte[]" line="205"/>
                            <scope line="206"/>
                            <scope line="212"/>
                            <scope line="214">
                                <scope line="216"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="227">
                given the .SF digest header, and the data from the
                  section in the manifest, see if the hashes match.
                  if not, throw a SecurityException.                
                <return>
                    true if all the -Digest headers verified                    
                </return>
                <exception>
                    SecurityException if the hash was not equal                    
                </exception>
            </javadoc>
            <method name="verifySection" type="boolean" line="234">
                <params>
                    <param name="sfAttr" type="Attributes"/>
                    <param name="name" type="String"/>
                    <param name="md" type="ManifestDigester"/>
                    <param name="decoder" type="BASE64Decoder"/>
                </params>
                <declaration name="oneDigestVerified" type="boolean" line="235"/>
                <declaration name="mde" type="ManifestDigester.Entry" line="236"/>
                <scope line="237"/>
                <scope line="240">
                    <scope line="241">
                        <declaration name="key" type="String" line="242"/>
                        <scope line="243">
                            <declaration name="algorithm" type="String" line="244"/>
                            <declaration name="digest" type="MessageDigest" line="245"/>
                            <scope line="246">
                                <declaration name="ok" type="boolean" line="247"/>
                                <declaration name="expected" type="byte[]" line="248"/>
                                <declaration name="computed" type="byte[]" line="249"/>
                                <scope line="250"/>
                                <scope line="253"/>
                                <scope line="256"/>
                                <scope line="262"/>
                                <scope line="266">
                                    <scope line="267">
                                        <scope line="269">
                                            <scope line="270"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="280"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="289">
                Given the PKCS7 block and SignerInfo[], create an array of
                  CodeSigner objects. We do this only once for a given
                  signature block file.                
            </javadoc>
            <method name="getSigners" type="CodeSigner[]" line="294">
                <params>
                    <param name="infos" type="SignerInfo"/>
                    <param name="block" type="PKCS7"/>
                </params>
                <declaration name="signers" type="ArrayList&lt;CodeSigner&gt;" line="295"/>
                <scope line="296">
                    <declaration name="info" type="SignerInfo" line="297"/>
                    <declaration name="chain" type="ArrayList&lt;X509Certificate&gt;" line="298"/>
                    <declaration name="certChain" type="CertPath" line="299"/>
                    <scope line="300"/>
                    <scope line="304"/>
                </scope>
                <scope line="308"/>
                <scope line="311"/>
            </method>
            <method name="getTimestamp" type="Timestamp" line="315">
                <params>
                    <param name="info" type="SignerInfo"/>
                </params>
                <declaration name="timestamp" type="Timestamp" line="316"/>
                <declaration name="unsignedAttrs" type="PKCS9Attributes" line="317"/>
                <scope line="318">
                    <declaration name="timestampTokenAttr" type="PKCS9Attribute" line="319"/>
                    <scope line="320">
                        <declaration name="timestampToken" type="PKCS7" line="321"/>
                        <declaration name="encodedTimestampTokenInfo" type="byte[]" line="322"/>
                        <declaration name="tsa" type="SignerInfo[]" line="323"/>
                        <declaration name="chain" type="ArrayList&lt;X509Certificate&gt;" line="324"/>
                        <declaration name="tsaChain" type="CertPath" line="325"/>
                        <declaration name="timestampTokenInfo" type="TimestampToken" line="326"/>
                    </scope>
                </scope>
            </method>
            <declaration name="hexc" type="char[]" line="332"/>
            <javadoc line="333">
                convert a byte array to a hex string for debugging purposes                
                <param>
                    data the binary data to be converted to a hex string                    
                </param>
                <return>
                    an ASCII hex string                    
                </return>
            </javadoc>
            <method name="toHex" type="String" line="338">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="339"/>
                <scope line="340"/>
            </method>
            <method name="contains" type="boolean" line="346">
                <params>
                    <param name="set" type="CodeSigner[]"/>
                    <param name="signer" type="CodeSigner"/>
                </params>
                <scope line="347"/>
            </method>
            <method name="isSubSet" type="boolean" line="352">
                <params>
                    <param name="subset" type="CodeSigner[]"/>
                    <param name="set" type="CodeSigner[]"/>
                </params>
                <declaration name="match" type="boolean" line="354"/>
                <scope line="355"/>
            </method>
            <javadoc line="360">
                returns true if signer contains exactly the same code signers as
                  oldSigner and newSigner, false otherwise. oldSigner
                  is allowed to be null.                
            </javadoc>
            <method name="matches" type="boolean" line="365">
                <params>
                    <param name="signers" type="CodeSigner[]"/>
                    <param name="oldSigners" type="CodeSigner[]"/>
                    <param name="newSigners" type="CodeSigner[]"/>
                </params>
                <declaration name="match" type="boolean" line="367"/>
                <scope line="369"/>
                <scope line="372">
                    <declaration name="found" type="boolean" line="373"/>
                </scope>
            </method>
            <method name="updateSigners" type="void" line="378">
                <params>
                    <param name="newSigners" type="CodeSigner[]"/>
                    <param name="signers" type="Hashtable<String,CodeSigner[]>"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="oldSigners" type="CodeSigner[]" line="379"/>
                <declaration name="cachedSigners" type="CodeSigner[]" line="380"/>
                <scope line="381">
                    <scope line="383"/>
                </scope>
                <scope line="388"/>
                <scope line="391"/>
            </method>
        </class>
    </source>