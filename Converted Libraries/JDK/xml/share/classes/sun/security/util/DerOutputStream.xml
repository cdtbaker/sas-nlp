<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.util">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.text.SimpleDateFormat"/>
        <import package="java.util.Date"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Arrays"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Locale"/>
        <class name="DerOutputStream" line="40">
            <extends class="ByteArrayOutputStream"/>
            <comment line="129">
                PRIMITIVES -- these are &quot;universal&quot; ASN.1 simple types.
                
                  BOOLEAN, INTEGER, BIT STRING, OCTET STRING, NULL
                  OBJECT IDENTIFIER, SEQUENCE(OF), SET(OF)
                  PrintableString, T61String, IA5String, UTCTime                
            </comment>
            <implements interface="DerEncoder"/>
            <javadoc line="40">
                Output stream marshaling DER-encoded data.  This is eventually provided
                  in the form of a byte array; there is no advance limit on the size of
                  that byte array.
                  &lt;P&gt;At this time, this class supports only a subset of the types of
                  DER data encodings which are defined.  That subset is sufficient for
                  generating most X.509 certificates.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <javadoc line="56">
                Construct an DER output stream.                
                <param>
                    size how large a buffer to preallocate.                    
                </param>
            </javadoc>
            <method name="DerOutputStream" type="constructor" line="61">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="63">
                Construct an DER output stream.                
            </javadoc>
            <method name="DerOutputStream" type="constructor" line="66"/>
            <javadoc line="68">
                Writes tagged, pre-marshaled data.  This calcuates and encodes
                  the length, so that the output data is the standard triple of
                  { tag, length, data } used by all DER values.                
                <param>
                    tag the DER value tag for the data, such as
                      &lt;em&gt;DerValue.tag_Sequence&lt;/em&gt;                    
                </param>
                <param>
                    buf buffered data, which must be DER-encoded                    
                </param>
            </javadoc>
            <method name="write" type="void" line="77">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="buf" type="byte[]"/>
                </params>
            </method>
            <javadoc line="83">
                Writes tagged data using buffer-to-buffer copy.  As above,
                  this writes a standard DER record.  This is often used when
                  efficiently encapsulating values in sequences.                
                <param>
                    tag the DER value tag for the data, such as
                      &lt;em&gt;DerValue.tag_Sequence&lt;/em&gt;                    
                </param>
                <param>
                    out buffered data                    
                </param>
            </javadoc>
            <method name="write" type="void" line="92">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="98">
                Writes implicitly tagged data using buffer-to-buffer copy.  As above,
                  this writes a standard DER record.  This is often used when
                  efficiently encapsulating implicitly tagged values.                
                <param>
                    tag the DER value of the context-specific tag that replaces
                      original tag of the value in the output, such as in
                      &lt;pre&gt;
                      &lt;em&gt; &lt;field&gt; [N] IMPLICIT &lt;type&gt;&lt;/em&gt;
                      &lt;/pre&gt;
                      For example, &lt;em&gt;FooLength [1] IMPLICIT INTEGER&lt;/em&gt;, with value=4;
                      would be encoded as &quot;81 01 04&quot;  whereas in explicit
                      tagging it would be encoded as &quot;A1 03 02 01 04&quot;.
                      Notice that the tag is A1 and not 81, this is because with
                      explicit tagging the form is always constructed.                    
                </param>
                <param>
                    value original value being implicitly tagged                    
                </param>
            </javadoc>
            <method name="writeImplicit" type="void" line="116">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="value" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="121">
                Marshals pre-encoded DER value onto the output stream.                
            </javadoc>
            <method name="putDerValue" type="void" line="124">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
            </method>
            <javadoc line="136">
                Marshals a DER boolean on the output stream.                
            </javadoc>
            <method name="putBoolean" type="void" line="139">
                <params>
                    <param name="val" type="boolean"/>
                </params>
                <scope line="142"/>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                Marshals a DER enumerated on the output stream.                
                <param>
                    i the enumerated value.                    
                </param>
            </javadoc>
            <method name="putEnumerated" type="void" line="153">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="158">
                Marshals a DER integer on the output stream.                
                <param>
                    i the integer in the form of a BigInteger.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="163">
                <params>
                    <param name="i" type="BigInteger"/>
                </params>
                <comment line="166">
                    least number  of bytes                    
                </comment>
                <declaration name="buf" type="byte[]" line="165"/>
            </method>
            <javadoc line="170">
                Marshals a DER integer on the output stream.                
                <param>
                    i the integer in the form of an Integer.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="174">
                <params>
                    <param name="i" type="Integer"/>
                </params>
            </method>
            <javadoc line="178">
                Marshals a DER integer on the output stream.                
                <param>
                    i the integer.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="182">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="putIntegerContents" type="void" line="187">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="193">
                    Obtain the four bytes of the int                    
                </comment>
                <comment line="200">
                    Reduce them to the least number of bytes needed to
                     represent this int                    
                </comment>
                <comment line="205">
                    Eliminate redundant 0xff                    
                </comment>
                <comment line="216">
                    Eliminate redundant 0x00                    
                </comment>
                <declaration name="bytes" type="byte[]" line="189"/>
                <declaration name="start" type="int" line="190"/>
                <scope line="202">
                    <scope line="206"/>
                </scope>
                <scope line="213">
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="231">
                Marshals a DER bit string on the output stream. The bit
                  string must be byte-aligned.                
                <param>
                    bits the bit string, MSB first                    
                </param>
            </javadoc>
            <method name="putBitString" type="void" line="237">
                <params>
                    <param name="bits" type="byte[]"/>
                </params>
                <comment line="241">
                    all of last octet is used                    
                </comment>
            </method>
            <javadoc line="244">
                Marshals a DER bit string on the output stream.
                  The bit strings need not be byte-aligned.                
                <param>
                    bits the bit string, MSB first                    
                </param>
            </javadoc>
            <method name="putUnalignedBitString" type="void" line="250">
                <params>
                    <param name="ba" type="BitArray"/>
                </params>
                <comment line="256">
                    excess bits in last octet                    
                </comment>
                <declaration name="bits" type="byte[]" line="251"/>
            </method>
            <javadoc line="259">
                Marshals a truncated DER bit string on the output stream.
                  The bit strings need not be byte-aligned.                
                <param>
                    bits the bit string, MSB first                    
                </param>
            </javadoc>
            <method name="putTruncatedUnalignedBitString" type="void" line="265">
                <params>
                    <param name="ba" type="BitArray"/>
                </params>
            </method>
            <javadoc line="269">
                DER-encodes an ASN.1 OCTET STRING value on the output stream.                
                <param>
                    octets the octet string                    
                </param>
            </javadoc>
            <method name="putOctetString" type="void" line="274">
                <params>
                    <param name="octets" type="byte[]"/>
                </params>
            </method>
            <javadoc line="278">
                Marshals a DER &quot;null&quot; value on the output stream.  These are
                  often used to indicate optional values which have been omitted.                
            </javadoc>
            <method name="putNull" type="void" line="282"/>
            <javadoc line="287">
                Marshals an object identifier (OID) on the output stream.
                  Corresponds to the ASN.1 &quot;OBJECT IDENTIFIER&quot; construct.                
            </javadoc>
            <method name="putOID" type="void" line="291">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
            </method>
            <javadoc line="295">
                Marshals a sequence on the output stream.  This supports both
                  the ASN.1 &quot;SEQUENCE&quot; (zero to N values) and &quot;SEQUENCE OF&quot;
                  (one to N values) constructs.                
            </javadoc>
            <method name="putSequence" type="void" line="300">
                <params>
                    <param name="seq" type="DerValue[]"/>
                </params>
                <declaration name="bytes" type="DerOutputStream" line="301"/>
                <declaration name="i" type="int" line="302"/>
            </method>
            <javadoc line="310">
                Marshals the contents of a set on the output stream without
                  ordering the elements.  Ok for BER encoding, but not for DER
                  encoding.
                  For DER encoding, use orderedPutSet() or orderedPutSetOf().                
            </javadoc>
            <method name="putSet" type="void" line="317">
                <params>
                    <param name="set" type="DerValue[]"/>
                </params>
                <declaration name="bytes" type="DerOutputStream" line="318"/>
                <declaration name="i" type="int" line="319"/>
            </method>
            <javadoc line="327">
                Marshals the contents of a set on the output stream.  Sets
                  are semantically unordered, but DER requires that encodings of
                  set elements be sorted into ascending lexicographical order
                  before being output.  Hence sets with the same tags and
                  elements have the same DER encoding.
                  This method supports the ASN.1 &quot;SET OF&quot; construct, but not
                  &quot;SET&quot;, which uses a different order.                
            </javadoc>
            <method name="putOrderedSetOf" type="void" line="337">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="set" type="DerEncoder[]"/>
                </params>
            </method>
            <javadoc line="341">
                Marshals the contents of a set on the output stream.  Sets
                  are semantically unordered, but DER requires that encodings of
                  set elements be sorted into ascending tag order
                  before being output.  Hence sets with the same tags and
                  elements have the same DER encoding.
                  This method supports the ASN.1 &quot;SET&quot; construct, but not
                  &quot;SET OF&quot;, which uses a different order.                
            </javadoc>
            <method name="putOrderedSet" type="void" line="351">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="set" type="DerEncoder[]"/>
                </params>
            </method>
            <declaration name="lexOrder" type="ByteArrayLexOrder" line="355"/>
            <javadoc line="355">
                Lexicographical order comparison on byte arrays, for ordering
                  elements of a SET OF objects in DER encoding.                
            </javadoc>
            <declaration name="tagOrder" type="ByteArrayTagOrder" line="361"/>
            <javadoc line="361">
                Tag order comparison on byte arrays, for ordering elements of
                  SET objects in DER encoding.                
            </javadoc>
            <javadoc line="367">
                Marshals a the contents of a set on the output stream with the
                  encodings of its sorted in increasing order.                
                <param>
                    order the order to use when sorting encodings of components.                    
                </param>
            </javadoc>
            <method name="putOrderedSet" type="void" line="374">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="set" type="DerEncoder[]"/>
                    <param name="order" type="Comparator<byte[]>"/>
                </params>
                <comment line="383">
                    order the element encodings                    
                </comment>
                <declaration name="streams" type="DerOutputStream[]" line="375"/>
                <scope line="377"/>
                <declaration name="bufs" type="byte[][]" line="383"/>
                <scope line="384"/>
                <declaration name="bytes" type="DerOutputStream" line="389"/>
                <scope line="390"/>
            </method>
            <javadoc line="397">
                Marshals a string as a DER encoded UTF8String.                
            </javadoc>
            <method name="putUTF8String" type="void" line="400">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="404">
                Marshals a string as a DER encoded PrintableString.                
            </javadoc>
            <method name="putPrintableString" type="void" line="407">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="411">
                Marshals a string as a DER encoded T61String.                
            </javadoc>
            <method name="putT61String" type="void" line="414">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="416">
                    Works for characters that are defined in both ASCII and
                     T61.                    
                </comment>
            </method>
            <javadoc line="422">
                Marshals a string as a DER encoded IA5String.                
            </javadoc>
            <method name="putIA5String" type="void" line="425">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="429">
                Marshals a string as a DER encoded BMPString.                
            </javadoc>
            <method name="putBMPString" type="void" line="432">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="436">
                Marshals a string as a DER encoded GeneralString.                
            </javadoc>
            <method name="putGeneralString" type="void" line="439">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="443">
                Private helper routine for writing DER encoded string values.                
                <param>
                    s the string to write                    
                </param>
                <param>
                    stringTag one of the DER string tags that indicate which
                      encoding should be used to write the string out.                    
                </param>
                <param>
                    enc the name of the encoder that should be used corresponding
                      to the above tag.                    
                </param>
            </javadoc>
            <method name="writeString" type="void" line="452">
                <params>
                    <param name="s" type="String"/>
                    <param name="stringTag" type="byte"/>
                    <param name="enc" type="String"/>
                </params>
                <declaration name="data" type="byte[]" line="454"/>
            </method>
            <javadoc line="460">
                Marshals a DER UTC time/date value.
                  &lt;P&gt;YYMMDDhhmmss{Z|+hhmm|-hhmm} ... emits only using Zulu time
                  and with seconds (even if seconds=0) as per RFC 3280.                
            </javadoc>
            <method name="putUTCTime" type="void" line="466">
                <params>
                    <param name="d" type="Date"/>
                </params>
            </method>
            <javadoc line="470">
                Marshals a DER Generalized Time/date value.
                  &lt;P&gt;YYYYMMDDhhmmss{Z|+hhmm|-hhmm} ... emits only using Zulu time
                  and with seconds (even if seconds=0) as per RFC 3280.                
            </javadoc>
            <method name="putGeneralizedTime" type="void" line="476">
                <params>
                    <param name="d" type="Date"/>
                </params>
            </method>
            <javadoc line="480">
                Private helper routine for marshalling a DER UTC/Generalized
                  time/date value. If the tag specified is not that for UTC Time
                  then it defaults to Generalized Time.                
                <param>
                    d the date to be marshalled                    
                </param>
                <param>
                    tag the tag for UTC Time or Generalized Time                    
                </param>
            </javadoc>
            <method name="putTime" type="void" line="487">
                <params>
                    <param name="d" type="Date"/>
                    <param name="tag" type="byte"/>
                </params>
                <comment line="490">
                    Format the date.                    
                </comment>
                <comment line="508">
                    Write the formatted date.                    
                </comment>
                <declaration name="tz" type="TimeZone" line="493"/>
                <declaration name="pattern" type="String" line="494"/>
                <scope line="496"/>
                <scope line="498"/>
                <declaration name="sdf" type="SimpleDateFormat" line="503"/>
                <declaration name="time" type="byte[]" line="505"/>
            </method>
            <javadoc line="516">
                Put the encoding of the length in the stream.                
                <params>
                    len the length of the attribute.                    
                </params>
                <exception>
                    IOException on writing errors.                    
                </exception>
            </javadoc>
            <method name="putLength" type="void" line="522">
                <params>
                    <param name="len" type="int"/>
                </params>
                <scope line="523"/>
                <scope line="526"/>
                <scope line="530"/>
                <scope line="535"/>
                <scope line="541"/>
            </method>
            <javadoc line="550">
                Put the tag of the attribute in the stream.                
                <params>
                    class the tag class type, one of UNIVERSAL, CONTEXT,
                      APPLICATION or PRIVATE                    
                </params>
                <params>
                    form if true, the value is constructed, otherwise it is
                      primitive.                    
                </params>
                <params>
                    val the tag value                    
                </params>
            </javadoc>
            <method name="putTag" type="void" line="559">
                <params>
                    <param name="tagClass" type="byte"/>
                    <param name="form" type="boolean"/>
                    <param name="val" type="byte"/>
                </params>
                <declaration name="tag" type="byte" line="560"/>
                <scope line="561"/>
            </method>
            <javadoc line="567">
                Write the current contents of this &lt;code&gt;DerOutputStream&lt;/code&gt;
                  to an &lt;code&gt;OutputStream&lt;/code&gt;.                
                <exception>
                    IOException on output error.                    
                </exception>
            </javadoc>
            <method name="derEncode" type="void" line="573">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
        </class>
    </source>