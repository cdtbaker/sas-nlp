<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <class name="RSASignature" line="10">
            <extends class="SignatureSpi"/>
            <javadoc line="10">
                PKCS#1 RSA signatures with the various message digest algorithms.
                  This file contains an abstract base class with all the logic plus
                  a nested static class for each of the message digest algorithms
                  (see end of the file). We support MD2, MD5, SHA-1, SHA-256, SHA-384,
                  and SHA-512.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="baseLength" type="int" line="20"/>
            <declaration name="digestOID" type="ObjectIdentifier" line="21"/>
            <declaration name="encodedLength" type="int" line="22"/>
            <declaration name="md" type="MessageDigest" line="23"/>
            <declaration name="digestReset" type="boolean" line="24"/>
            <declaration name="privateKey" type="RSAPrivateKey" line="25"/>
            <declaration name="publicKey" type="RSAPublicKey" line="26"/>
            <declaration name="padding" type="RSAPadding" line="27"/>
            <javadoc line="28">
                Construct a new RSASignature. Used by subclasses.                
            </javadoc>
            <method name="RSASignature" type="constructor" line="31">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="digestOID" type="ObjectIdentifier"/>
                    <param name="oidLength" type="int"/>
                </params>
                <scope line="33"/>
                <scope line="36"/>
            </method>
            <method name="engineInitVerify" type="void" line="42">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
                <declaration name="rsaKey" type="RSAPublicKey" line="43"/>
            </method>
            <method name="engineInitSign" type="void" line="48">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
            </method>
            <method name="engineInitSign" type="void" line="51">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="rsaKey" type="RSAPrivateKey" line="52"/>
            </method>
            <javadoc line="57">
                Init code common to sign and verify.                
            </javadoc>
            <method name="initCommon" type="void" line="60">
                <params>
                    <param name="rsaKey" type="RSAKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="keySize" type="int" line="62"/>
                <scope line="63"/>
                <scope line="66"/>
                <declaration name="maxDataSize" type="int" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="74">
                Reset the message digest if it is not already reset.                
            </javadoc>
            <method name="resetDigest" type="void" line="77">
                <scope line="78"/>
            </method>
            <javadoc line="83">
                Return the message digest value.                
            </javadoc>
            <method name="getDigestValue" type="byte[]" line="86"/>
            <method name="engineUpdate" type="void" line="90">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="94">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="98">
                <params>
                    <param name="b" type="ByteBuffer"/>
                </params>
            </method>
            <method name="engineSign" type="byte[]" line="102">
                <declaration name="digest" type="byte[]" line="103"/>
                <scope line="104">
                    <declaration name="encoded" type="byte[]" line="105"/>
                    <declaration name="padded" type="byte[]" line="106"/>
                    <declaration name="encrypted" type="byte[]" line="107"/>
                </scope>
                <scope line="110"/>
                <scope line="113"/>
            </method>
            <method name="engineVerify" type="boolean" line="117">
                <params>
                    <param name="sigBytes" type="byte[]"/>
                </params>
                <scope line="118"/>
                <declaration name="digest" type="byte[]" line="121"/>
                <scope line="122">
                    <declaration name="decrypted" type="byte[]" line="123"/>
                    <declaration name="unpadded" type="byte[]" line="124"/>
                    <declaration name="decodedDigest" type="byte[]" line="125"/>
                </scope>
                <scope line="128"/>
                <scope line="131"/>
                <scope line="134"/>
            </method>
            <javadoc line="138">
                Encode the digest, return the to-be-signed data.
                  Also used by the PKCS#11 provider.                
            </javadoc>
            <method name="encodeSignature" type="byte[]" line="142">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="digest" type="byte[]"/>
                </params>
                <declaration name="out" type="DerOutputStream" line="143"/>
                <declaration name="result" type="DerValue" line="146"/>
            </method>
            <javadoc line="149">
                Decode the signature data. Verify that the object identifier matches
                  and return the message digest.                
            </javadoc>
            <method name="decodeSignature" type="byte[]" line="153">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="signature" type="byte[]"/>
                </params>
                <declaration name="in" type="DerInputStream" line="154"/>
                <declaration name="values" type="DerValue[]" line="155"/>
                <scope line="156"/>
                <declaration name="algId" type="AlgorithmId" line="159"/>
                <scope line="160"/>
                <scope line="163"/>
                <declaration name="digest" type="byte[]" line="166"/>
            </method>
            <method name="engineSetParameter" type="void" line="169">
                <params>
                    <param name="param" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="engineGetParameter" type="Object" line="172">
                <params>
                    <param name="param" type="String"/>
                </params>
            </method>
            <class name="MD2withRSA" line="175">
                <extends class="RSASignature"/>
                <method name="MD2withRSA" type="constructor" line="176"/>
            </class>
            <class name="MD5withRSA" line="180">
                <extends class="RSASignature"/>
                <method name="MD5withRSA" type="constructor" line="181"/>
            </class>
            <class name="SHA1withRSA" line="185">
                <extends class="RSASignature"/>
                <method name="SHA1withRSA" type="constructor" line="186"/>
            </class>
            <class name="SHA256withRSA" line="190">
                <extends class="RSASignature"/>
                <method name="SHA256withRSA" type="constructor" line="191"/>
            </class>
            <class name="SHA384withRSA" line="195">
                <extends class="RSASignature"/>
                <method name="SHA384withRSA" type="constructor" line="196"/>
            </class>
            <class name="SHA512withRSA" line="200">
                <extends class="RSASignature"/>
                <method name="SHA512withRSA" type="constructor" line="201"/>
            </class>
        </class>
    </source>