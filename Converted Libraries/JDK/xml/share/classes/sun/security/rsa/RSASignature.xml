<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <class name="RSASignature" line="39">
            <extends class="SignatureSpi"/>
            <comment line="52">
                we sign an ASN.1 SEQUENCE of AlgorithmId and digest                
            </comment>
            <comment line="53">
                it has the form 30:xx:30:xx:[digestOID]:05:00:04:xx:[digest]                
            </comment>
            <comment line="54">
                this means the encoded length is (8 + digestOID.length + digest.length)                
            </comment>
            <comment line="57">
                object identifier for the message digest algorithm used                
            </comment>
            <comment line="60">
                length of the encoded signature blob                
            </comment>
            <comment line="63">
                message digest implementation we use                
            </comment>
            <comment line="65">
                flag indicating whether the digest is reset                
            </comment>
            <comment line="68">
                private key, if initialized for signing                
            </comment>
            <comment line="70">
                public key, if initialized for verifying                
            </comment>
            <comment line="73">
                padding to use, set when the initSign/initVerify is called                
            </comment>
            <comment line="90">
                initialize for verification. See JCA doc                
            </comment>
            <comment line="99">
                initialize for signing. See JCA doc                
            </comment>
            <comment line="105">
                initialize for signing. See JCA doc                
            </comment>
            <comment line="153">
                update the signature with the plaintext data. See JCA doc                
            </comment>
            <comment line="159">
                update the signature with the plaintext data. See JCA doc                
            </comment>
            <comment line="166">
                update the signature with the plaintext data. See JCA doc                
            </comment>
            <comment line="172">
                sign the data and return the signature. See JCA doc                
            </comment>
            <comment line="187">
                verify the data and return the result. See JCA doc                
            </comment>
            <comment line="250">
                set parameter, not supported. See JCA doc                
            </comment>
            <comment line="256">
                get parameter, not supported. See JCA doc                
            </comment>
            <comment line="262">
                Nested class for MD2withRSA signatures                
            </comment>
            <comment line="269">
                Nested class for MD5withRSA signatures                
            </comment>
            <comment line="276">
                Nested class for SHA1withRSA signatures                
            </comment>
            <comment line="283">
                Nested class for SHA256withRSA signatures                
            </comment>
            <comment line="290">
                Nested class for SHA384withRSA signatures                
            </comment>
            <comment line="297">
                Nested class for SHA512withRSA signatures                
            </comment>
            <javadoc line="39">
                PKCS#1 RSA signatures with the various message digest algorithms.
                  This file contains an abstract base class with all the logic plus
                  a nested static class for each of the message digest algorithms
                  (see end of the file). We support MD2, MD5, SHA-1, SHA-256, SHA-384,
                  and SHA-512.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="baseLength" type="int" line="54"/>
            <declaration name="digestOID" type="ObjectIdentifier" line="57"/>
            <declaration name="encodedLength" type="int" line="60"/>
            <declaration name="md" type="MessageDigest" line="63"/>
            <declaration name="digestReset" type="boolean" line="65"/>
            <declaration name="privateKey" type="RSAPrivateKey" line="68"/>
            <declaration name="publicKey" type="RSAPublicKey" line="70"/>
            <declaration name="padding" type="RSAPadding" line="73"/>
            <javadoc line="75">
                Construct a new RSASignature. Used by subclasses.                
            </javadoc>
            <method name="RSASignature" type="constructor" line="78">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="digestOID" type="ObjectIdentifier"/>
                    <param name="oidLength" type="int"/>
                </params>
                <scope line="80"/>
                <scope line="82"/>
            </method>
            <method name="engineInitVerify" type="void" line="91">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
                <declaration name="rsaKey" type="RSAPublicKey" line="92"/>
            </method>
            <method name="engineInitSign" type="void" line="100">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
            </method>
            <method name="engineInitSign" type="void" line="106">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="rsaKey" type="RSAPrivateKey" line="107"/>
            </method>
            <javadoc line="114">
                Init code common to sign and verify.                
            </javadoc>
            <method name="initCommon" type="void" line="118">
                <params>
                    <param name="rsaKey" type="RSAKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="keySize" type="int" line="120"/>
                <scope line="121"/>
                <scope line="124"/>
                <declaration name="maxDataSize" type="int" line="127"/>
                <scope line="128"/>
            </method>
            <javadoc line="134">
                Reset the message digest if it is not already reset.                
            </javadoc>
            <method name="resetDigest" type="void" line="137">
                <scope line="138"/>
            </method>
            <javadoc line="144">
                Return the message digest value.                
            </javadoc>
            <method name="getDigestValue" type="byte[]" line="147"/>
            <method name="engineUpdate" type="void" line="153">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="160">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="166">
                <params>
                    <param name="b" type="ByteBuffer"/>
                </params>
            </method>
            <method name="engineSign" type="byte[]" line="172">
                <declaration name="digest" type="byte[]" line="173"/>
                <scope line="174">
                    <declaration name="encoded" type="byte[]" line="175"/>
                    <declaration name="padded" type="byte[]" line="176"/>
                    <declaration name="encrypted" type="byte[]" line="177"/>
                </scope>
                <scope line="179"/>
                <scope line="181"/>
            </method>
            <method name="engineVerify" type="boolean" line="187">
                <params>
                    <param name="sigBytes" type="byte[]"/>
                </params>
                <comment line="200">
                    occurs if the app has used the wrong RSA public key                    
                </comment>
                <comment line="201">
                    or if sigBytes is invalid                    
                </comment>
                <comment line="202">
                    return false rather than propagating the exception for                    
                </comment>
                <comment line="203">
                    compatibility/ease of use                    
                </comment>
                <scope line="188"/>
                <declaration name="digest" type="byte[]" line="193"/>
                <scope line="194">
                    <declaration name="decrypted" type="byte[]" line="195"/>
                    <declaration name="unpadded" type="byte[]" line="196"/>
                    <declaration name="decodedDigest" type="byte[]" line="197"/>
                </scope>
                <scope line="199"/>
                <scope line="205"/>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Encode the digest, return the to-be-signed data.
                  Also used by the PKCS#11 provider.                
            </javadoc>
            <method name="encodeSignature" type="byte[]" line="217">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="digest" type="byte[]"/>
                </params>
                <declaration name="out" type="DerOutputStream" line="218"/>
                <declaration name="result" type="DerValue" line="221"/>
            </method>
            <javadoc line="226">
                Decode the signature data. Verify that the object identifier matches
                  and return the message digest.                
            </javadoc>
            <method name="decodeSignature" type="byte[]" line="231">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="signature" type="byte[]"/>
                </params>
                <declaration name="in" type="DerInputStream" line="232"/>
                <declaration name="values" type="DerValue[]" line="233"/>
                <scope line="234"/>
                <declaration name="algId" type="AlgorithmId" line="237"/>
                <scope line="238"/>
                <scope line="242"/>
                <declaration name="digest" type="byte[]" line="245"/>
            </method>
            <method name="engineSetParameter" type="void" line="251">
                <params>
                    <param name="param" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="engineGetParameter" type="Object" line="257">
                <params>
                    <param name="param" type="String"/>
                </params>
            </method>
            <class name="MD2withRSA" line="262">
                <extends class="RSASignature"/>
                <method name="MD2withRSA" type="constructor" line="263"/>
            </class>
            <class name="MD5withRSA" line="269">
                <extends class="RSASignature"/>
                <method name="MD5withRSA" type="constructor" line="270"/>
            </class>
            <class name="SHA1withRSA" line="276">
                <extends class="RSASignature"/>
                <method name="SHA1withRSA" type="constructor" line="277"/>
            </class>
            <class name="SHA256withRSA" line="283">
                <extends class="RSASignature"/>
                <method name="SHA256withRSA" type="constructor" line="284"/>
            </class>
            <class name="SHA384withRSA" line="290">
                <extends class="RSASignature"/>
                <method name="SHA384withRSA" type="constructor" line="291"/>
            </class>
            <class name="SHA512withRSA" line="297">
                <extends class="RSASignature"/>
                <method name="SHA512withRSA" type="constructor" line="298"/>
            </class>
        </class>
    </source>