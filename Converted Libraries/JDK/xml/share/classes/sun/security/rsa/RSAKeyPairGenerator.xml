<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.RSAKeyGenParameterSpec"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="RSAKeyPairGenerator" line="36">
            <extends class="KeyPairGeneratorSpi"/>
            <comment line="48">
                public exponent to use                
            </comment>
            <comment line="51">
                size of the key to generate, &gt;= RSAKeyFactory.MIN_MODLEN                
            </comment>
            <comment line="54">
                PRNG to use                
            </comment>
            <comment line="62">
                initialize the generator. See JCA doc                
            </comment>
            <comment line="79">
                second initialize method. See JCA doc.                
            </comment>
            <comment line="119">
                generate the keypair. See JCA doc                
            </comment>
            <javadoc line="36">
                RSA keypair generation. Standard algorithm, minimum key length 512 bit.
                  We generate two random primes until we find two where phi is relative
                  prime to the public exponent. Default exponent is 65537. It has only bit 0
                  and bit 4 set, which makes it particularly efficient.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="publicExponent" type="BigInteger" line="48"/>
            <declaration name="keySize" type="int" line="51"/>
            <declaration name="random" type="SecureRandom" line="54"/>
            <method name="RSAKeyPairGenerator" type="constructor" line="56">
                <comment line="57">
                    initialize to default in case the app does not call initialize()                    
                </comment>
            </method>
            <method name="initialize" type="void" line="62">
                <params>
                    <param name="keySize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="64">
                    do not allow unreasonably small or large key sizes,                    
                </comment>
                <comment line="65">
                    probably user error                    
                </comment>
                <scope line="66"/>
                <scope line="69"/>
            </method>
            <method name="initialize" type="void" line="80">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="104">
                    do not allow unreasonably large key sizes, probably user error                    
                </comment>
                <scope line="82"/>
                <declaration name="rsaSpec" type="RSAKeyGenParameterSpec" line="87"/>
                <declaration name="tmpKeySize" type="int" line="88"/>
                <declaration name="tmpPublicExponent" type="BigInteger" line="89"/>
                <scope line="91"/>
                <scope line="93">
                    <scope line="94"/>
                    <scope line="98"/>
                </scope>
                <scope line="105"/>
                <scope line="108"/>
            </method>
            <method name="generateKeyPair" type="KeyPair" line="119">
                <comment line="120">
                    accomodate odd key sizes in case anybody wants to use them                    
                </comment>
                <comment line="128">
                    generate two random primes of size lp/lq                    
                </comment>
                <comment line="133">
                    convention is for p &gt; q                    
                </comment>
                <comment line="139">
                    modulus n = p * q                    
                </comment>
                <comment line="141">
                    even with correctly sized p and q, there is a chance that                    
                </comment>
                <comment line="142">
                    n will be one bit short. re-generate the smaller prime if so                    
                </comment>
                <comment line="145">
                    phi = (p - 1) * (q - 1) must be relative prime to e                    
                </comment>
                <comment line="146">
                    otherwise RSA just won&apos;t work ;-)                    
                </comment>
                <comment line="150">
                    generate new p and q until they work. typically                    
                </comment>
                <comment line="151">
                    the first try will succeed when using F4                    
                </comment>
                <comment line="156">
                    private exponent d is the inverse of e mod phi                    
                </comment>
                <comment line="159">
                    1st prime exponent pe = d mod (p - 1)                    
                </comment>
                <comment line="161">
                    2nd prime exponent qe = d mod (q - 1)                    
                </comment>
                <comment line="164">
                    crt coefficient coeff is the inverse of q mod p                    
                </comment>
                <comment line="173">
                    invalid key exception only thrown for keys &lt; 512 bit,                    
                </comment>
                <comment line="174">
                    will not happen here                    
                </comment>
                <declaration name="lp" type="int" line="121"/>
                <declaration name="lq" type="int" line="122"/>
                <scope line="123"/>
                <declaration name="e" type="BigInteger" line="126"/>
                <scope line="127">
                    <declaration name="p" type="BigInteger" line="129"/>
                    <declaration name="q" type="BigInteger" line="130"/>
                    <scope line="131">
                        <scope line="134">
                            <declaration name="tmp" type="BigInteger" line="135"/>
                        </scope>
                    </scope>
                    <declaration name="p1" type="BigInteger" line="147"/>
                    <declaration name="q1" type="BigInteger" line="148"/>
                    <declaration name="phi" type="BigInteger" line="149"/>
                    <scope line="152"/>
                    <declaration name="d" type="BigInteger" line="157"/>
                    <declaration name="pe" type="BigInteger" line="160"/>
                    <declaration name="qe" type="BigInteger" line="162"/>
                    <declaration name="coeff" type="BigInteger" line="165"/>
                    <scope line="167">
                        <declaration name="publicKey" type="PublicKey" line="168"/>
                        <declaration name="privateKey" type="PrivateKey" line="169"/>
                    </scope>
                    <scope line="172"/>
                </scope>
            </method>
        </class>
    </source>