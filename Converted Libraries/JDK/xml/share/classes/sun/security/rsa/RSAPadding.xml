<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.math.BigInteger"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.spec.PSource"/>
        <import package="javax.crypto.spec.OAEPParameterSpec"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="RSAPadding" line="11">
            <javadoc line="11">
                RSA padding and unpadding.
                  Format of PKCS#1 v1.5 padding is:
                  0x00 | BT | PS...PS | 0x00 | data...data
                  where BT is the blocktype (1 or 2). The length of the entire string
                  must be the same as the size of the modulus (i.e. 128 byte for a 1024 bit
                  key). Per spec, the padding string must be at least 8 bytes long. That
                  leaves up to (length of key in bytes) - 11 bytes for the data.
                  OAEP padding is a bit more complicated and has a number of options.
                  We support:
                  . arbitrary hash functions (&apos;Hash&apos; in the specification), MessageDigest
                  implementation must be available
                  . MGF1 as the mask generation function
                  . the empty string as the default value for label L and whatever
                  specified in javax.crypto.spec.OAEPParameterSpec
                  Note: RSA keys should be at least 512 bits long                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="PAD_BLOCKTYPE_1" type="int" line="31"/>
            <declaration name="PAD_BLOCKTYPE_2" type="int" line="32"/>
            <declaration name="PAD_NONE" type="int" line="33"/>
            <declaration name="PAD_OAEP_MGF1" type="int" line="34"/>
            <declaration name="type" type="int" line="35"/>
            <declaration name="paddedSize" type="int" line="36"/>
            <declaration name="random" type="SecureRandom" line="37"/>
            <declaration name="maxDataSize" type="int" line="38"/>
            <declaration name="md" type="MessageDigest" line="39"/>
            <declaration name="mgfMd" type="MessageDigest" line="40"/>
            <declaration name="lHash" type="byte[]" line="41"/>
            <javadoc line="42">
                Get a RSAPadding instance of the specified type.
                  Keys used with this padding must be paddedSize bytes long.                
            </javadoc>
            <method name="getInstance" type="RSAPadding" line="46">
                <params>
                    <param name="type" type="int"/>
                    <param name="paddedSize" type="int"/>
                </params>
            </method>
            <javadoc line="49">
                Get a RSAPadding instance of the specified type.
                  Keys used with this padding must be paddedSize bytes long.                
            </javadoc>
            <method name="getInstance" type="RSAPadding" line="53">
                <params>
                    <param name="type" type="int"/>
                    <param name="paddedSize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="56">
                Get a RSAPadding instance of the specified type, which must be
                  OAEP. Keys used with this padding must be paddedSize bytes long.                
            </javadoc>
            <method name="getInstance" type="RSAPadding" line="60">
                <params>
                    <param name="type" type="int"/>
                    <param name="paddedSize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="spec" type="OAEPParameterSpec"/>
                </params>
            </method>
            <method name="RSAPadding" type="constructor" line="63">
                <params>
                    <param name="type" type="int"/>
                    <param name="paddedSize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="spec" type="OAEPParameterSpec"/>
                </params>
                <scope line="67"/>
                <declaration name="mdName" type="String" line="79"/>
                <declaration name="mgfMdName" type="String" line="80"/>
                <declaration name="digestInput" type="byte[]" line="81"/>
                <scope line="82">
                    <scope line="83">
                        <declaration name="mgfName" type="String" line="85"/>
                        <scope line="86"/>
                        <declaration name="pSrc" type="PSource" line="90"/>
                        <declaration name="pSrcAlgo" type="String" line="91"/>
                        <scope line="92"/>
                    </scope>
                </scope>
                <scope line="100"/>
                <declaration name="digestLen" type="int" line="104"/>
                <scope line="106"/>
            </method>
            <declaration name="emptyHashes" type="Map&lt;String,byte[]&gt;" line="114"/>
            <javadoc line="115">
                Return the value of the digest using the specified message digest
                  &lt;code&gt;md&lt;/code&gt; and the digest input &lt;code&gt;digestInput&lt;/code&gt;.
                  if &lt;code&gt;digestInput&lt;/code&gt; is null or 0-length, zero length
                  is used to generate the initial digest.
                  Note: the md object must be in reset state                
            </javadoc>
            <method name="getInitialHash" type="byte[]" line="122">
                <params>
                    <param name="md" type="MessageDigest"/>
                    <param name="digestInput" type="byte[]"/>
                </params>
                <declaration name="result" type="byte[]" line="123"/>
                <scope line="124">
                    <declaration name="digestName" type="String" line="125"/>
                    <scope line="127"/>
                </scope>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Return the maximum size of the plaintext data that can be processed using
                  this object.                
            </javadoc>
            <method name="getMaxDataSize" type="int" line="141"/>
            <javadoc line="144">
                Pad the data and return the padded block.                
            </javadoc>
            <method name="pad" type="byte[]" line="147">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="ofs" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="150">
                Pad the data and return the padded block.                
            </javadoc>
            <method name="pad" type="byte[]" line="153">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="154"/>
            </method>
            <javadoc line="169">
                Unpad the padded block and return the data.                
            </javadoc>
            <method name="unpad" type="byte[]" line="172">
                <params>
                    <param name="padded" type="byte[]"/>
                    <param name="ofs" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="175">
                Unpad the padded block and return the data.                
            </javadoc>
            <method name="unpad" type="byte[]" line="178">
                <params>
                    <param name="padded" type="byte[]"/>
                </params>
                <scope line="179"/>
            </method>
            <javadoc line="194">
                PKCS#1 v1.5 padding (blocktype 1 and 2).                
            </javadoc>
            <method name="padV15" type="byte[]" line="197">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="padded" type="byte[]" line="198"/>
                <declaration name="psSize" type="int" line="200"/>
                <declaration name="k" type="int" line="201"/>
                <scope line="204">
                    <scope line="205"/>
                </scope>
                <scope line="209">
                    <scope line="210"/>
                    <declaration name="r" type="byte[]" line="213"/>
                    <declaration name="i" type="int" line="214"/>
                    <scope line="215">
                        <declaration name="b" type="int" line="216"/>
                        <scope line="217">
                            <scope line="218"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="230">
                PKCS#1 v1.5 unpadding (blocktype 1 and 2).                
            </javadoc>
            <method name="unpadV15" type="byte[]" line="233">
                <params>
                    <param name="padded" type="byte[]"/>
                </params>
                <declaration name="k" type="int" line="234"/>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="241">
                    <declaration name="b" type="int" line="242"/>
                    <scope line="243"/>
                    <scope line="246"/>
                    <scope line="249"/>
                </scope>
                <declaration name="n" type="int" line="253"/>
                <scope line="254"/>
                <declaration name="data" type="byte[]" line="257"/>
            </method>
            <javadoc line="261">
                PKCS#1 v2.0 OAEP padding (MGF1).
                  Paragraph references refer to PKCS#1 v2.1 (June 14, 2002)                
            </javadoc>
            <method name="padOAEP" type="byte[]" line="265">
                <params>
                    <param name="M" type="byte[]"/>
                </params>
                <scope line="266"/>
                <declaration name="hLen" type="int" line="269"/>
                <declaration name="seed" type="byte[]" line="270"/>
                <declaration name="EM" type="byte[]" line="272"/>
                <declaration name="seedStart" type="int" line="273"/>
                <declaration name="seedLen" type="int" line="274"/>
                <declaration name="dbStart" type="int" line="276"/>
                <declaration name="dbLen" type="int" line="277"/>
                <declaration name="mStart" type="int" line="278"/>
            </method>
            <javadoc line="286">
                PKCS#1 v2.1 OAEP unpadding (MGF1).                
            </javadoc>
            <method name="unpadOAEP" type="byte[]" line="289">
                <params>
                    <param name="padded" type="byte[]"/>
                </params>
                <declaration name="EM" type="byte[]" line="290"/>
                <declaration name="hLen" type="int" line="291"/>
                <scope line="292"/>
                <declaration name="seedStart" type="int" line="295"/>
                <declaration name="seedLen" type="int" line="296"/>
                <declaration name="dbStart" type="int" line="297"/>
                <declaration name="dbLen" type="int" line="298"/>
                <scope line="301">
                    <scope line="302"/>
                </scope>
                <declaration name="i" type="int" line="306"/>
                <scope line="307">
                    <scope line="309"/>
                </scope>
                <scope line="313"/>
                <declaration name="mLen" type="int" line="316"/>
                <declaration name="m" type="byte[]" line="317"/>
            </method>
            <javadoc line="321">
                Compute MGF1 using mgfMD as the message digest.
                  Note that we combine MGF1 with the XOR operation to reduce data
                  copying.
                  We generate maskLen bytes of MGF1 from the seed and XOR it into
                  out[] starting at outOfs;                
            </javadoc>
            <method name="mgf1" type="void" line="328">
                <params>
                    <param name="seed" type="byte[]"/>
                    <param name="seedOfs" type="int"/>
                    <param name="seedLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                    <param name="maskLen" type="int"/>
                </params>
                <declaration name="C" type="byte[]" line="329"/>
                <declaration name="digest" type="byte[]" line="330"/>
                <scope line="331">
                    <scope line="334"/>
                    <scope line="337"/>
                    <scope line="340"/>
                    <scope line="343">
                        <scope line="344"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>