<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.pkcs.PKCS8Key"/>
        <class name="RSAPrivateCrtKeyImpl" line="9">
            <extends class="PKCS8Key"/>
            <implements interface="RSAPrivateCrtKey"/>
            <javadoc line="9">
                Key implementation for RSA private keys, CRT form. For non-CRT private
                  keys, see RSAPrivateKeyImpl. We need separate classes to ensure
                  correct behavior in instanceof checks, etc.
                  Note: RSA keys must be at least 512 bits long                
                <see>
                    RSAPrivateKeyImpl                    
                </see>
                <see>
                    RSAKeyFactory                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="20"/>
            <declaration name="n" type="BigInteger" line="21"/>
            <declaration name="e" type="BigInteger" line="22"/>
            <declaration name="d" type="BigInteger" line="23"/>
            <declaration name="p" type="BigInteger" line="24"/>
            <declaration name="q" type="BigInteger" line="25"/>
            <declaration name="pe" type="BigInteger" line="26"/>
            <declaration name="qe" type="BigInteger" line="27"/>
            <declaration name="coeff" type="BigInteger" line="28"/>
            <declaration name="rsaId" type="AlgorithmId" line="29"/>
            <javadoc line="30">
                Generate a new key from its encoding. Returns a CRT key if possible
                  and a non-CRT key otherwise. Used by RSAKeyFactory.                
            </javadoc>
            <method name="newKey" type="RSAPrivateKey" line="34">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
                <declaration name="key" type="RSAPrivateCrtKeyImpl" line="35"/>
                <scope line="36"/>
                <scope line="39"/>
            </method>
            <javadoc line="43">
                Construct a key from its encoding. Called from newKey above.                
            </javadoc>
            <method name="RSAPrivateCrtKeyImpl" type="constructor" line="46">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
            </method>
            <javadoc line="50">
                Construct a key from its components. Used by the
                  RSAKeyFactory and the RSAKeyPairGenerator.                
            </javadoc>
            <method name="RSAPrivateCrtKeyImpl" type="constructor" line="54">
                <params>
                    <param name="n" type="BigInteger"/>
                    <param name="e" type="BigInteger"/>
                    <param name="d" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="pe" type="BigInteger"/>
                    <param name="qe" type="BigInteger"/>
                    <param name="coeff" type="BigInteger"/>
                </params>
                <scope line="65">
                    <declaration name="out" type="DerOutputStream" line="66"/>
                    <declaration name="val" type="DerValue" line="76"/>
                </scope>
                <scope line="79"/>
            </method>
            <method name="getAlgorithm" type="String" line="83"/>
            <method name="getModulus" type="BigInteger" line="86"/>
            <method name="getPublicExponent" type="BigInteger" line="89"/>
            <method name="getPrivateExponent" type="BigInteger" line="92"/>
            <method name="getPrimeP" type="BigInteger" line="95"/>
            <method name="getPrimeQ" type="BigInteger" line="98"/>
            <method name="getPrimeExponentP" type="BigInteger" line="101"/>
            <method name="getPrimeExponentQ" type="BigInteger" line="104"/>
            <method name="getCrtCoefficient" type="BigInteger" line="107"/>
            <javadoc line="110">
                Parse the key. Called by PKCS8Key.                
            </javadoc>
            <method name="parseKeyBits" type="void" line="113">
                <scope line="114">
                    <declaration name="in" type="DerInputStream" line="115"/>
                    <declaration name="derValue" type="DerValue" line="116"/>
                    <scope line="117"/>
                    <declaration name="data" type="DerInputStream" line="120"/>
                    <declaration name="version" type="int" line="121"/>
                    <scope line="122"/>
                    <scope line="133"/>
                </scope>
                <scope line="137"/>
            </method>
            <javadoc line="141">
                Read a BigInteger from the DerInputStream.                
            </javadoc>
            <method name="getBigInteger" type="BigInteger" line="144">
                <params>
                    <param name="data" type="DerInputStream"/>
                </params>
                <declaration name="b" type="BigInteger" line="145"/>
                <scope line="146"/>
            </method>
            <method name="toString" type="String" line="151">
                <declaration name="sb" type="StringBuffer" line="152"/>
            </method>
        </class>
    </source>