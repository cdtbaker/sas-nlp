<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.pkcs.PKCS8Key"/>
        <class name="RSAPrivateCrtKeyImpl" line="38">
            <extends class="PKCS8Key"/>
            <comment line="57">
                modulus                
            </comment>
            <comment line="58">
                public exponent                
            </comment>
            <comment line="59">
                private exponent                
            </comment>
            <comment line="60">
                prime p                
            </comment>
            <comment line="61">
                prime q                
            </comment>
            <comment line="62">
                prime exponent p                
            </comment>
            <comment line="63">
                prime exponent q                
            </comment>
            <comment line="64">
                CRT coeffcient                
            </comment>
            <comment line="66">
                algorithmId used to identify RSA keys                
            </comment>
            <comment line="135">
                see JCA doc                
            </comment>
            <comment line="140">
                see JCA doc                
            </comment>
            <comment line="145">
                see JCA doc                
            </comment>
            <comment line="150">
                see JCA doc                
            </comment>
            <comment line="155">
                see JCA doc                
            </comment>
            <comment line="160">
                see JCA doc                
            </comment>
            <comment line="165">
                see JCA doc                
            </comment>
            <comment line="170">
                see JCA doc                
            </comment>
            <comment line="175">
                see JCA doc                
            </comment>
            <comment line="230">
                return a string representation of this key for debugging                
            </comment>
            <implements interface="RSAPrivateCrtKey"/>
            <javadoc line="38">
                Key implementation for RSA private keys, CRT form. For non-CRT private
                  keys, see RSAPrivateKeyImpl. We need separate classes to ensure
                  correct behavior in instanceof checks, etc.
                  Note: RSA keys must be at least 512 bits long                
                <see>
                    RSAPrivateKeyImpl                    
                </see>
                <see>
                    RSAKeyFactory                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <declaration name="n" type="BigInteger" line="56"/>
            <declaration name="e" type="BigInteger" line="57"/>
            <declaration name="d" type="BigInteger" line="58"/>
            <declaration name="p" type="BigInteger" line="59"/>
            <declaration name="q" type="BigInteger" line="60"/>
            <declaration name="pe" type="BigInteger" line="61"/>
            <declaration name="qe" type="BigInteger" line="62"/>
            <declaration name="coeff" type="BigInteger" line="63"/>
            <declaration name="rsaId" type="AlgorithmId" line="66"/>
            <javadoc line="69">
                Generate a new key from its encoding. Returns a CRT key if possible
                  and a non-CRT key otherwise. Used by RSAKeyFactory.                
            </javadoc>
            <method name="newKey" type="RSAPrivateKey" line="74">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
                <comment line="77">
                    public exponent is missing, return a non-CRT key                    
                </comment>
                <declaration name="key" type="RSAPrivateCrtKeyImpl" line="75"/>
                <scope line="76"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Construct a key from its encoding. Called from newKey above.                
            </javadoc>
            <method name="RSAPrivateCrtKeyImpl" type="constructor" line="90">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
            </method>
            <javadoc line="95">
                Construct a key from its components. Used by the
                  RSAKeyFactory and the RSAKeyPairGenerator.                
            </javadoc>
            <method name="RSAPrivateCrtKeyImpl" type="constructor" line="101">
                <params>
                    <param name="n" type="BigInteger"/>
                    <param name="e" type="BigInteger"/>
                    <param name="d" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="pe" type="BigInteger"/>
                    <param name="qe" type="BigInteger"/>
                    <param name="coeff" type="BigInteger"/>
                </params>
                <comment line="112">
                    generate the encoding                    
                </comment>
                <comment line="116">
                    version must be 0                    
                </comment>
                <comment line="129">
                    should never occur                    
                </comment>
                <scope line="114">
                    <declaration name="out" type="DerOutputStream" line="115"/>
                    <declaration name="val" type="DerValue" line="125"/>
                </scope>
                <scope line="128"/>
            </method>
            <method name="getAlgorithm" type="String" line="135"/>
            <method name="getModulus" type="BigInteger" line="140"/>
            <method name="getPublicExponent" type="BigInteger" line="145"/>
            <method name="getPrivateExponent" type="BigInteger" line="150"/>
            <method name="getPrimeP" type="BigInteger" line="155"/>
            <method name="getPrimeQ" type="BigInteger" line="160"/>
            <method name="getPrimeExponentP" type="BigInteger" line="165"/>
            <method name="getPrimeExponentQ" type="BigInteger" line="170"/>
            <method name="getCrtCoefficient" type="BigInteger" line="175"/>
            <javadoc line="179">
                Parse the key. Called by PKCS8Key.                
            </javadoc>
            <method name="parseKeyBits" type="void" line="182">
                <scope line="183">
                    <declaration name="in" type="DerInputStream" line="184"/>
                    <declaration name="derValue" type="DerValue" line="185"/>
                    <scope line="186"/>
                    <declaration name="data" type="DerInputStream" line="189"/>
                    <declaration name="version" type="int" line="190"/>
                    <scope line="191"/>
                    <scope line="202"/>
                </scope>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Read a BigInteger from the DerInputStream.                
            </javadoc>
            <method name="getBigInteger" type="BigInteger" line="213">
                <params>
                    <param name="data" type="DerInputStream"/>
                </params>
                <comment line="216">
                    Some implementations do not correctly encode ASN.1 INTEGER values
                     in 2&apos;s complement format, resulting in a negative integer when
                     decoded. Correct the error by converting it to a positive integer.
                    
                     See CR 6255949                    
                </comment>
                <declaration name="b" type="BigInteger" line="214"/>
                <scope line="223"/>
            </method>
            <method name="toString" type="String" line="230">
                <declaration name="sb" type="StringBuffer" line="231"/>
            </method>
        </class>
    </source>