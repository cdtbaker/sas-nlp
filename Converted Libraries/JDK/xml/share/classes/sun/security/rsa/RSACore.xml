<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.math.BigInteger"/>
        <import package="java.util"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.interfaces"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="RSACore" line="8">
            <javadoc line="8">
                Core of the RSA implementation. Has code to perform public and private key
                  RSA operations (with and without CRT for private key ops). Private CRT ops
                  also support blinding to twart timing attacks.
                  The code in this class only does the core RSA operation. Padding and
                  unpadding must be done externally.
                  Note: RSA keys should be at least 512 bits long                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <method name="RSACore" type="constructor" line="19"/>
            <javadoc line="21">
                Return the number of bytes required to store the magnitude byte[] of
                  this BigInteger. Do not count a 0x00 byte toByteArray() would
                  prefix for 2&apos;s complement form.                
            </javadoc>
            <method name="getByteLength" type="int" line="26">
                <params>
                    <param name="b" type="BigInteger"/>
                </params>
                <declaration name="n" type="int" line="27"/>
            </method>
            <javadoc line="30">
                Return the number of bytes required to store the modulus of this
                  RSA key.                
            </javadoc>
            <method name="getByteLength" type="int" line="34">
                <params>
                    <param name="key" type="RSAKey"/>
                </params>
            </method>
            <method name="convert" type="byte[]" line="37">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="ofs" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="38"/>
                <scope line="41">
                    <declaration name="t" type="byte[]" line="42"/>
                </scope>
            </method>
            <javadoc line="47">
                Perform an RSA public key operation.                
            </javadoc>
            <method name="rsa" type="byte[]" line="50">
                <params>
                    <param name="msg" type="byte[]"/>
                    <param name="key" type="RSAPublicKey"/>
                </params>
            </method>
            <javadoc line="53">
                Perform an RSA private key operation. Uses CRT if the key is a
                  CRT key.                
            </javadoc>
            <method name="rsa" type="byte[]" line="57">
                <params>
                    <param name="msg" type="byte[]"/>
                    <param name="key" type="RSAPrivateKey"/>
                </params>
                <scope line="58"/>
                <scope line="61"/>
            </method>
            <javadoc line="65">
                RSA public key ops and non-CRT private key ops. Simple modPow().                
            </javadoc>
            <method name="crypt" type="byte[]" line="68">
                <params>
                    <param name="msg" type="byte[]"/>
                    <param name="n" type="BigInteger"/>
                    <param name="exp" type="BigInteger"/>
                </params>
                <declaration name="m" type="BigInteger" line="69"/>
                <declaration name="c" type="BigInteger" line="70"/>
            </method>
            <javadoc line="73">
                RSA private key operations with CRT. Algorithm and variable naming
                  are taken from PKCS#1 v2.1, section 5.1.2.
                  The only difference is the addition of blinding to twart timing attacks.
                  This is described in the RSA Bulletin#2 (Jan 96) among other places.
                  This means instead of implementing RSA as
                  m = c ^ d mod n (or RSA in CRT variant)
                  we do
                  r  = random(0, n-1)
                  c&apos; = c   r^e  mod n
                  m&apos; = c&apos; ^ d    mod n (or RSA in CRT variant)
                  m  = m&apos;  r^-1 mod n (where r^-1 is the modular inverse of r mod n)
                  This works because r^(ed)  r^-1 = r  r^-1 = 1 (all mod n)
                  We do not generate new blinding parameters for each operation but reuse
                  them BLINDING_MAX_REUSE times (see definition below).                
            </javadoc>
            <method name="crtCrypt" type="byte[]" line="89">
                <params>
                    <param name="msg" type="byte[]"/>
                    <param name="key" type="RSAPrivateCrtKey"/>
                </params>
                <declaration name="n" type="BigInteger" line="90"/>
                <declaration name="c" type="BigInteger" line="91"/>
                <declaration name="p" type="BigInteger" line="92"/>
                <declaration name="q" type="BigInteger" line="93"/>
                <declaration name="dP" type="BigInteger" line="94"/>
                <declaration name="dQ" type="BigInteger" line="95"/>
                <declaration name="qInv" type="BigInteger" line="96"/>
                <declaration name="params" type="BlindingParameters" line="97"/>
                <scope line="98"/>
                <scope line="102"/>
                <declaration name="m1" type="BigInteger" line="105"/>
                <declaration name="m2" type="BigInteger" line="106"/>
                <declaration name="mtmp" type="BigInteger" line="107"/>
                <scope line="108"/>
                <declaration name="h" type="BigInteger" line="111"/>
                <declaration name="m" type="BigInteger" line="112"/>
                <scope line="113"/>
            </method>
            <javadoc line="118">
                Parse the msg into a BigInteger and check against the modulus n.                
            </javadoc>
            <method name="parseMsg" type="BigInteger" line="121">
                <params>
                    <param name="msg" type="byte[]"/>
                    <param name="n" type="BigInteger"/>
                </params>
                <declaration name="m" type="BigInteger" line="122"/>
                <scope line="123"/>
            </method>
            <javadoc line="128">
                Return the encoding of this BigInteger that is exactly len bytes long.
                  Prefix/strip off leading 0x00 bytes if necessary.
                  Precondition: bi must fit into len bytes                
            </javadoc>
            <method name="toByteArray" type="byte[]" line="133">
                <params>
                    <param name="bi" type="BigInteger"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="b" type="byte[]" line="134"/>
                <declaration name="n" type="int" line="135"/>
                <scope line="136"/>
                <scope line="139">
                    <declaration name="t" type="byte[]" line="140"/>
                </scope>
                <declaration name="t" type="byte[]" line="145"/>
            </method>
            <declaration name="ENABLE_BLINDING" type="boolean" line="149"/>
            <declaration name="BLINDING_MAX_REUSE" type="int" line="150"/>
            <declaration name="blindingCache" type="Map&lt;BigInteger,BlindingParameters&gt;" line="151"/>
            <class name="BlindingParameters" line="152">
                <javadoc line="152">
                    Set of blinding parameters for a given RSA key.
                      The RSA modulus is usually unique, so we index by modulus in
                      blindingCache. However, to protect against the unlikely case of two
                      keys sharing the same modulus, we also store the public exponent.
                      This means we cannot cache blinding parameters for multiple keys that
                      share the same modulus, but since sharing moduli is fundamentally broken
                      an insecure, this does not matter.                    
                </javadoc>
                <declaration name="e" type="BigInteger" line="162"/>
                <declaration name="re" type="BigInteger" line="163"/>
                <declaration name="rInv" type="BigInteger" line="164"/>
                <declaration name="remainingUses" type="int" line="165"/>
                <method name="BlindingParameters" type="constructor" line="166">
                    <params>
                        <param name="e" type="BigInteger"/>
                        <param name="re" type="BigInteger"/>
                        <param name="rInv" type="BigInteger"/>
                    </params>
                </method>
                <method name="valid" type="boolean" line="172">
                    <params>
                        <param name="e" type="BigInteger"/>
                    </params>
                    <declaration name="k" type="int" line="173"/>
                </method>
            </class>
            <javadoc line="177">
                Return valid RSA blinding parameters for the given private key.
                  Use cached parameters if available. If not, generate new parameters
                  and cache.                
            </javadoc>
            <method name="getBlindingParameters" type="BlindingParameters" line="182">
                <params>
                    <param name="key" type="RSAPrivateCrtKey"/>
                </params>
                <declaration name="modulus" type="BigInteger" line="183"/>
                <declaration name="e" type="BigInteger" line="184"/>
                <declaration name="params" type="BlindingParameters" line="185"/>
                <scope line="186"/>
                <scope line="189"/>
                <declaration name="len" type="int" line="192"/>
                <declaration name="random" type="SecureRandom" line="193"/>
                <declaration name="r" type="BigInteger" line="194"/>
                <declaration name="re" type="BigInteger" line="195"/>
                <declaration name="rInv" type="BigInteger" line="196"/>
                <scope line="198"/>
            </method>
        </class>
    </source>