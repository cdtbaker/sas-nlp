<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.rsa">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="RSAKeyFactory" line="7">
            <extends class="KeyFactorySpi"/>
            <javadoc line="7">
                KeyFactory for RSA keys. Keys must be instances of PublicKey or PrivateKey
                  and getAlgorithm() must return &quot;RSA&quot;. For such keys, it supports conversion
                  between the following:
                  For public keys:
                  . PublicKey with an X.509 encoding
                  . RSAPublicKey
                  . RSAPublicKeySpec
                  . X509EncodedKeySpec
                  For private keys:
                  . PrivateKey with a PKCS#8 encoding
                  . RSAPrivateKey
                  . RSAPrivateCrtKey
                  . RSAPrivateKeySpec
                  . RSAPrivateCrtKeySpec
                  . PKCS8EncodedKeySpec
                  (of course, CRT variants only for CRT keys)
                  Note: as always, RSA keys should be at least 512 bits long                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="rsaPublicKeySpecClass" type="Class&lt;?&gt;" line="29"/>
            <declaration name="rsaPrivateKeySpecClass" type="Class&lt;?&gt;" line="30"/>
            <declaration name="rsaPrivateCrtKeySpecClass" type="Class&lt;?&gt;" line="31"/>
            <declaration name="x509KeySpecClass" type="Class&lt;?&gt;" line="32"/>
            <declaration name="pkcs8KeySpecClass" type="Class&lt;?&gt;" line="33"/>
            <declaration name="MIN_MODLEN" type="int" line="34"/>
            <declaration name="MAX_MODLEN" type="int" line="35"/>
            <declaration name="MAX_MODLEN_RESTRICT_EXP" type="int" line="36"/>
            <declaration name="MAX_RESTRICTED_EXPLEN" type="int" line="37"/>
            <declaration name="restrictExpLen" type="boolean" line="38"/>
            <declaration name="INSTANCE" type="RSAKeyFactory" line="39"/>
            <method name="RSAKeyFactory" type="constructor" line="40"/>
            <javadoc line="42">
                Static method to convert Key into an instance of RSAPublicKeyImpl
                  or RSAPrivate(Crt)KeyImpl. If the key is not an RSA key or cannot be
                  used, throw an InvalidKeyException.
                  Used by RSASignature and RSACipher.                
            </javadoc>
            <method name="toRSAKey" type="RSAKey" line="48">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="49"/>
                <scope line="52"/>
            </method>
            <method name="checkRSAProviderKeyLengths" type="void" line="56">
                <params>
                    <param name="modulusLen" type="int"/>
                    <param name="exponent" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="59">
                Check the length of an RSA key modulus/exponent to make sure it
                  is not too short or long.  Some impls have their own min and
                  max key sizes that may or may not match with a system defined value.                
                <param>
                    modulusLen the bit length of the RSA modulus.                    
                </param>
                <param>
                    exponent the RSA exponent                    
                </param>
                <param>
                    minModulusLen if > 0, check to see if modulusLen is at
                      least this long, otherwise unused.                    
                </param>
                <param>
                    maxModulusLen caller will allow this max number of bits.
                      Allow the smaller of the system-defined maximum and this param.                    
                </param>
                <throws>
                    InvalidKeyException if any of the values are unacceptable.                    
                </throws>
            </javadoc>
            <method name="checkKeyLengths" type="void" line="71">
                <params>
                    <param name="modulusLen" type="int"/>
                    <param name="exponent" type="BigInteger"/>
                    <param name="minModulusLen" type="int"/>
                    <param name="maxModulusLen" type="int"/>
                </params>
                <scope line="72"/>
                <declaration name="maxLen" type="int" line="75"/>
                <scope line="76"/>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Translate an RSA key into a SunRsaSign RSA key. If conversion is
                  not possible, throw an InvalidKeyException.
                  See also JCA doc.                
            </javadoc>
            <method name="engineTranslateKey" type="Key" line="88">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="89"/>
                <declaration name="keyAlg" type="String" line="92"/>
                <scope line="93"/>
                <scope line="96"/>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <method name="engineGeneratePublic" type="PublicKey" line="106">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="107"/>
                <scope line="110"/>
                <scope line="113"/>
            </method>
            <method name="engineGeneratePrivate" type="PrivateKey" line="117">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124"/>
            </method>
            <method name="translatePublicKey" type="PublicKey" line="128">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <scope line="129">
                    <scope line="130"/>
                    <declaration name="rsaKey" type="RSAPublicKey" line="133"/>
                    <scope line="134"/>
                    <scope line="137"/>
                </scope>
                <scope line="141">
                    <declaration name="encoded" type="byte[]" line="142"/>
                </scope>
                <scope line="145"/>
            </method>
            <method name="translatePrivateKey" type="PrivateKey" line="149">
                <params>
                    <param name="key" type="PrivateKey"/>
                </params>
                <scope line="150">
                    <scope line="151"/>
                    <declaration name="rsaKey" type="RSAPrivateCrtKey" line="154"/>
                    <scope line="155"/>
                    <scope line="158"/>
                </scope>
                <scope line="162">
                    <scope line="163"/>
                    <declaration name="rsaKey" type="RSAPrivateKey" line="166"/>
                    <scope line="167"/>
                    <scope line="170"/>
                </scope>
                <scope line="174">
                    <declaration name="encoded" type="byte[]" line="175"/>
                </scope>
                <scope line="178"/>
            </method>
            <method name="generatePublic" type="PublicKey" line="182">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="183">
                    <declaration name="x509Spec" type="X509EncodedKeySpec" line="184"/>
                </scope>
                <scope line="187">
                    <declaration name="rsaSpec" type="RSAPublicKeySpec" line="188"/>
                </scope>
                <scope line="191"/>
            </method>
            <method name="generatePrivate" type="PrivateKey" line="195">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="196">
                    <declaration name="pkcsSpec" type="PKCS8EncodedKeySpec" line="197"/>
                </scope>
                <scope line="200">
                    <declaration name="rsaSpec" type="RSAPrivateCrtKeySpec" line="201"/>
                </scope>
                <scope line="204">
                    <declaration name="rsaSpec" type="RSAPrivateKeySpec" line="205"/>
                </scope>
                <scope line="208"/>
            </method>
            <method name="engineGetKeySpec" type="T" line="212">
                <params>
                    <param name="key" type="Key"/>
                    <param name="keySpec" type="Class<T>"/>
                </params>
                <scope line="213"/>
                <scope line="216"/>
                <scope line="219">
                    <declaration name="rsaKey" type="RSAPublicKey" line="220"/>
                    <scope line="221"/>
                    <scope line="224"/>
                    <scope line="227"/>
                </scope>
                <scope line="231">
                    <scope line="232"/>
                    <scope line="235">
                        <scope line="236">
                            <declaration name="crtKey" type="RSAPrivateCrtKey" line="237"/>
                        </scope>
                        <scope line="240"/>
                    </scope>
                    <scope line="244">
                        <declaration name="rsaKey" type="RSAPrivateKey" line="245"/>
                    </scope>
                    <scope line="248"/>
                </scope>
                <scope line="252"/>
            </method>
        </class>
    </source>