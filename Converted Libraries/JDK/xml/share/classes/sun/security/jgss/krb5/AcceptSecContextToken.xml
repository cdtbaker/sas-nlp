<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="org.ietf.jgss"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="sun.security.krb5"/>
        <class name="AcceptSecContextToken" line="35">
            <extends class="InitialToken"/>
            <declaration name="apRep" type="KrbApRep" line="37"/>
            <javadoc line="39">
                Creates an AcceptSecContextToken for the context acceptor to send to
                  the context initiator.                
            </javadoc>
            <method name="AcceptSecContextToken" type="constructor" line="45">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="apReq" type="KrbApReq"/>
                </params>
                <comment line="48">
                    RFC 1964, section 1.2 states:
                      (1) context key: uses Kerberos session key (or subkey, if
                      present in authenticator emitted by context initiator) directly
                    
                     This does not mention context acceptor. Hence we will not
                     generate a subkey on the acceptor side. Note: Our initiator will
                     still allow another acceptor to generate a subkey, even though
                     our acceptor does not do so.                    
                </comment>
                <comment line="66">
                    Note: The acceptor side context key was set when the
                     InitSecContextToken was received.                    
                </comment>
                <declaration name="useSubkey" type="boolean" line="57"/>
                <declaration name="useSequenceNumber" type="boolean" line="59"/>
            </method>
            <javadoc line="71">
                Creates an AcceptSecContextToken at the context initiator&apos;s side
                  using the bytes received from  the acceptor.                
            </javadoc>
            <method name="AcceptSecContextToken" type="constructor" line="78">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="serviceCreds" type="Credentials"/>
                    <param name="apReq" type="KrbApReq"/>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="92">
                    Allow the context acceptor to set a subkey if desired, even
                     though our context acceptor will not do so.                    
                </comment>
                <comment line="99">
                    System.out.println(&quot;\n\nSub-Session key from AP-REP is: &quot; +
                    getHexBytes(subKey.getBytes()) + &quot;\n&quot;);                    
                </comment>
                <declaration name="tokenId" type="int" line="80"/>
                <declaration name="apRepBytes" type="byte[]" line="86"/>
                <declaration name="apRep" type="KrbApRep" line="89"/>
                <declaration name="subKey" type="EncryptionKey" line="95"/>
                <scope line="96"/>
                <declaration name="apRepSeqNumber" type="Integer" line="104"/>
                <declaration name="peerSeqNumber" type="int" line="105"/>
            </method>
            <method name="encode" type="byte[]" line="111">
                <declaration name="apRepBytes" type="byte[]" line="112"/>
                <declaration name="retVal" type="byte[]" line="113"/>
            </method>
        </class>
    </source>