<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss">
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="sun.security.util"/>
        <class name="GSSToken" line="34">
            <javadoc line="34">
                Utilities for processing GSS Tokens.                
            </javadoc>
            <javadoc line="41">
                Copies an integer value to a byte array in little endian form.                
                <param>
                    value the integer value to write                    
                </param>
                <param>
                    array the byte array into which the integer must be copied. It
                      is assumed that the array will be large enough to hold the 4 bytes of
                      the integer.                    
                </param>
            </javadoc>
            <method name="writeLittleEndian" type="void" line="48">
                <params>
                    <param name="value" type="int"/>
                    <param name="array" type="byte[]"/>
                </params>
            </method>
            <javadoc line="52">
                Copies an integer value to a byte array in little endian form.                
                <param>
                    value the integer value to write                    
                </param>
                <param>
                    array the byte array into which the integer must be copied. It
                      is assumed that the array will be large enough to hold the 4 bytes of
                      the integer.                    
                </param>
                <param>
                    pos the position at which to start writing                    
                </param>
            </javadoc>
            <method name="writeLittleEndian" type="void" line="61">
                <params>
                    <param name="value" type="int"/>
                    <param name="array" type="byte[]"/>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="writeBigEndian" type="void" line="68">
                <params>
                    <param name="value" type="int"/>
                    <param name="array" type="byte[]"/>
                </params>
            </method>
            <method name="writeBigEndian" type="void" line="73">
                <params>
                    <param name="value" type="int"/>
                    <param name="array" type="byte[]"/>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Reads an integer value from a byte array in little endian form. This
                  method allows the reading of two byte values as well as four bytes
                  values both of which are needed in the Kerberos v5 GSS-API mechanism.                
                <param>
                    data the array containing the bytes of the integer value                    
                </param>
                <param>
                    pos the offset in the array                    
                </param>
                <size>
                    the number of bytes to read from the array.                    
                </size>
                <return>
                    the integer value                    
                </return>
            </javadoc>
            <method name="readLittleEndian" type="int" line="90">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="91"/>
                <declaration name="shifter" type="int" line="92"/>
                <scope line="93"/>
            </method>
            <method name="readBigEndian" type="int" line="102">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="103"/>
                <declaration name="shifter" type="int" line="104"/>
                <scope line="105"/>
            </method>
            <javadoc line="114">
                Writes a two byte integer value to a OutputStream.                
                <param>
                    val the integer value. It will lose the high-order two bytes.                    
                </param>
                <param>
                    os the OutputStream to write to                    
                </param>
                <throws>
                    IOException if an error occurs while writing to the OutputStream                    
                </throws>
            </javadoc>
            <method name="writeInt" type="void" line="122">
                <params>
                    <param name="val" type="int"/>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="127">
                Writes a two byte integer value to a byte array.                
                <param>
                    val the integer value. It will lose the high-order two bytes.                    
                </param>
                <param>
                    dest the byte array to write to                    
                </param>
                <param>
                    pos the offset to start writing to                    
                </param>
            </javadoc>
            <method name="writeInt" type="int" line="134">
                <params>
                    <param name="val" type="int"/>
                    <param name="dest" type="byte[]"/>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Reads a two byte integer value from an InputStream.                
                <param>
                    is the InputStream to read from                    
                </param>
                <returns>
                    the integer value                    
                </returns>
                <throws>
                    IOException if some errors occurs while reading the integer
                      bytes.                    
                </throws>
            </javadoc>
            <method name="readInt" type="int" line="148">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <javadoc line="153">
                Reads a two byte integer value from a byte array.                
                <param>
                    src the byte arra to read from                    
                </param>
                <param>
                    pos the offset to start reading from                    
                </param>
                <returns>
                    the integer value                    
                </returns>
            </javadoc>
            <method name="readInt" type="int" line="160">
                <params>
                    <param name="src" type="byte[]"/>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <javadoc line="164">
                Blocks till the required number of bytes have been read from the
                  input stream.                
                <param>
                    is the InputStream to read from                    
                </param>
                <param>
                    buffer the buffer to store the bytes into                    
                </param>
                <param>
                    throws EOFException if EOF is reached before all bytes are
                      read.                    
                </param>
                <throws>
                    IOException is an error occurs while reading                    
                </throws>
            </javadoc>
            <method name="readFully" type="void" line="175">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="buffer" type="byte[]"/>
                </params>
            </method>
            <javadoc line="179">
                Blocks till the required number of bytes have been read from the
                  input stream.                
                <param>
                    is the InputStream to read from                    
                </param>
                <param>
                    buffer the buffer to store the bytes into                    
                </param>
                <param>
                    offset the offset to start storing at                    
                </param>
                <param>
                    len the number of bytes to read                    
                </param>
                <param>
                    throws EOFException if EOF is reached before all bytes are
                      read.                    
                </param>
                <throws>
                    IOException is an error occurs while reading                    
                </throws>
            </javadoc>
            <method name="readFully" type="void" line="193">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="buffer" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="temp" type="int" line="194"/>
                <scope line="195"/>
            </method>
            <method name="debug" type="void" line="206">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <method name="getHexBytes" type="String" line="210">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <method name="getHexBytes" type="String" line="214">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="getHexBytes" type="String" line="218">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="219"/>
                <scope line="220">
                    <declaration name="b1" type="int" line="221"/>
                    <declaration name="b2" type="int" line="222"/>
                </scope>
            </method>
        </class>
    </source>