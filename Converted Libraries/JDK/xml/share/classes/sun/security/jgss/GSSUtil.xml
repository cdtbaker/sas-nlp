<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss">
        <import package="com.sun.security.auth.callback.TextCallbackHandler"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.kerberos.KerberosPrincipal"/>
        <import package="javax.security.auth.kerberos.KerberosTicket"/>
        <import package="javax.security.auth.kerberos.KerberosKey"/>
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss.spi.GSSNameSpi"/>
        <import package="sun.security.jgss.spi.GSSCredentialSpi"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.security.jgss.krb5.Krb5NameElement"/>
        <import package="sun.security.jgss.spnego.SpNegoCredElement"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Iterator"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.login.LoginContext"/>
        <import package="javax.security.auth.login.LoginException"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="GSSUtil" line="52">
            <comment line="87">
                NOTE: this method is only for creating Oid objects with                
            </comment>
            <comment line="88">
                known to be valid &lt;code&gt;oidStr&lt;/code&gt; given it ignores                
            </comment>
            <comment line="89">
                the GSSException                
            </comment>
            <javadoc line="52">
                The GSSUtilImplementation that knows how to work with the internals of
                  the GSS-API.                
            </javadoc>
            <declaration name="GSS_KRB5_MECH_OID" type="Oid" line="58"/>
            <declaration name="GSS_KRB5_MECH_OID2" type="Oid" line="60"/>
            <declaration name="GSS_SPNEGO_MECH_OID" type="Oid" line="63"/>
            <declaration name="NT_GSS_KRB5_PRINCIPAL" type="Oid" line="66"/>
            <declaration name="DEFAULT_HANDLER" type="String" line="69"/>
            <declaration name="DEBUG" type="boolean" line="72"/>
            <scope line="73"/>
            <method name="debug" type="void" line="79">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="80"/>
            </method>
            <method name="createOid" type="Oid" line="89">
                <params>
                    <param name="oidStr" type="String"/>
                </params>
                <scope line="90"/>
                <scope line="92"/>
            </method>
            <method name="isSpNegoMech" type="boolean" line="98">
                <params>
                    <param name="oid" type="Oid"/>
                </params>
            </method>
            <method name="isKerberosMech" type="boolean" line="102">
                <params>
                    <param name="oid" type="Oid"/>
                </params>
            </method>
            <method name="getMechStr" type="String" line="108">
                <params>
                    <param name="oid" type="Oid"/>
                </params>
                <scope line="109"/>
                <scope line="111"/>
                <scope line="113"/>
            </method>
            <javadoc line="118">
                Note: The current impl only works with Sun&apos;s impl of
                  GSSName and GSSCredential since it depends on package
                  private APIs.                
            </javadoc>
            <method name="getSubject" type="Subject" line="124">
                <params>
                    <param name="name" type="GSSName"/>
                    <param name="creds" type="GSSCredential"/>
                </params>
                <comment line="127">
                    empty Set                    
                </comment>
                <comment line="155">
                    empty Set                    
                </comment>
                <declaration name="privCredentials" type="HashSet&lt;Object&gt;" line="126"/>
                <declaration name="pubCredentials" type="HashSet&lt;Object&gt;" line="127"/>
                <declaration name="gssCredentials" type="Set&lt;GSSCredentialSpi&gt;" line="129"/>
                <declaration name="krb5Principals" type="Set&lt;KerberosPrincipal&gt;" line="131"/>
                <scope line="134">
                    <scope line="135">
                        <declaration name="ne" type="GSSNameSpi" line="136"/>
                        <declaration name="krbName" type="String" line="138"/>
                        <scope line="139"/>
                        <declaration name="krbPrinc" type="KerberosPrincipal" line="143"/>
                    </scope>
                    <scope line="145"/>
                </scope>
                <scope line="150"/>
                <scope line="154"/>
            </method>
            <javadoc line="167">
                Populates the set credentials with elements from gssCredentials. At
                  the same time, it converts any subclasses of KerberosTicket
                  into KerberosTicket instances and any subclasses of KerberosKey into
                  KerberosKey instances. (It is not desirable to expose the customer
                  to sun.security.jgss.krb5.Krb5InitCredential which extends
                  KerberosTicket and sun.security.jgss.krb5.Kbr5AcceptCredential which
                  extends KerberosKey.)                
            </javadoc>
            <method name="populateCredentials" type="void" line="177">
                <params>
                    <param name="credentials" type="Set<Object>"/>
                    <param name="gssCredentials" type="Set<?>"/>
                </params>
                <comment line="186">
                    Retrieve the internal cred out of SpNegoCredElement                    
                </comment>
                <comment line="219">
                    Ignore non-KerberosTicket and non-KerberosKey elements                    
                </comment>
                <declaration name="cred" type="Object" line="179"/>
                <declaration name="elements" type="Iterator&lt;?&gt;" line="181"/>
                <scope line="182">
                    <scope line="187"/>
                    <scope line="191">
                        <scope line="193">
                            <declaration name="tempTkt" type="KerberosTicket" line="194"/>
                        </scope>
                    </scope>
                    <scope line="208">
                        <scope line="210">
                            <declaration name="tempKey" type="KerberosKey" line="211"/>
                        </scope>
                    </scope>
                    <scope line="218"/>
                </scope>
            </method>
            <javadoc line="225">
                Authenticate using the login module from the specified
                  configuration entry.                
                <param>
                    caller the caller of JAAS Login                    
                </param>
                <param>
                    mech the mech to be used                    
                </param>
                <return>
                    the authenticated subject                    
                </return>
            </javadoc>
            <method name="login" type="Subject" line="233">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="mech" type="Oid"/>
                </params>
                <comment line="242">
                    get the default callback handler                    
                </comment>
                <comment line="250">
                    New instance of LoginConfigImpl must be created for each login,                    
                </comment>
                <comment line="251">
                    since the entry name is not passed as the first argument, but                    
                </comment>
                <comment line="252">
                    generated with caller and mech inside LoginConfigImpl                    
                </comment>
                <declaration name="cb" type="CallbackHandler" line="235"/>
                <scope line="236"/>
                <scope line="239">
                    <declaration name="defaultHandler" type="String" line="240"/>
                    <scope line="243"/>
                    <scope line="245"/>
                </scope>
                <declaration name="lc" type="LoginContext" line="253"/>
            </method>
            <javadoc line="259">
                Determines if the application doesn&apos;t mind if the mechanism obtains
                  the required credentials from outside of the current Subject. Our
                  Kerberos v5 mechanism would do a JAAS login on behalf of the
                  application if this were the case.
                  The application indicates this by explicitly setting the system
                  property javax.security.auth.useSubjectCredsOnly to false.                
            </javadoc>
            <method name="useSubjectCredsOnly" type="boolean" line="268">
                <params>
                    <param name="caller" type="GSSCaller"/>
                </params>
                <comment line="270">
                    HTTP/SPNEGO doesn&apos;t use the standard JAAS framework. Instead, it                    
                </comment>
                <comment line="271">
                    uses the java.net.Authenticator style, therefore always return                    
                </comment>
                <comment line="272">
                    false here.                    
                </comment>
                <comment line="276">
                    Don&apos;t use GetBooleanAction because the default value in the JRE
                     (when this is unset) has to treated as true.                    
                </comment>
                <comment line="283">
                    This property has to be explicitly set to &quot;false&quot;. Invalid
                     values should be ignored and the default &quot;true&quot; assumed.                    
                </comment>
                <scope line="273"/>
                <declaration name="propValue" type="String" line="280"/>
            </method>
            <javadoc line="290">
                Determines the SPNEGO interoperability mode with Microsoft;
                  by default it is set to true.
                  To disable it, the application indicates this by explicitly setting
                  the system property sun.security.spnego.interop to false.                
            </javadoc>
            <method name="useMSInterop" type="boolean" line="297">
                <comment line="298">
                    Don&apos;t use GetBooleanAction because the default value in the JRE
                     (when this is unset) has to treated as true.                    
                </comment>
                <comment line="305">
                    This property has to be explicitly set to &quot;false&quot;. Invalid
                     values should be ignored and the default &quot;true&quot; assumed.                    
                </comment>
                <declaration name="propValue" type="String" line="302"/>
            </method>
            <javadoc line="312">
                Searches the private credentials of current Subject with the
                  specified criteria and returns the matching GSSCredentialSpi
                  object out of Sun&apos;s impl of GSSCredential. Returns null if
                  no Subject present or a Vector which contains 0 or more
                  matching GSSCredentialSpi objects.                
            </javadoc>
            <method name="searchSubject" type="Vector" line="322">
                <params>
                    <param name="name" type="GSSNameSpi"/>
                    <param name="mech" type="Oid"/>
                    <param name="initiate" type="boolean"/>
                    <param name="credCls" type="Class"/>
                </params>
                <declaration name="acc" type="AccessControlContext" line="327"/>
                <scope line="328">
                    <anonymous_class line="331">
                        <method name="run" type="Vector" line="332">
                            <declaration name="accSubj" type="Subject" line="333"/>
                            <declaration name="result" type="Vector&lt;GSSCredentialSpi&gt;" line="334"/>
                            <scope line="335">
                                <declaration name="iterator" type="Iterator&lt;GSSCredentialImpl&gt;" line="337"/>
                                <scope line="340">
                                    <declaration name="cred" type="GSSCredentialImpl" line="341"/>
                                    <scope line="343">
                                        <declaration name="ce" type="GSSCredentialSpi" line="344"/>
                                        <scope line="349"/>
                                        <scope line="351"/>
                                    </scope>
                                    <scope line="354"/>
                                </scope>
                            </scope>
                        </method>
                    </anonymous_class>
                    <declaration name="creds" type="Vector" line="329"/>
                </scope>
                <scope line="363"/>
            </method>
        </class>
    </source>