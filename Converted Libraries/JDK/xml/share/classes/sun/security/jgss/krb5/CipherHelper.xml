<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.CipherInputStream"/>
        <import package="javax.crypto.CipherOutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="org.ietf.jgss"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="sun.security.krb5"/>
        <import package="sun.security.krb5.internal.crypto.Des3"/>
        <import package="sun.security.krb5.internal.crypto.Aes128"/>
        <import package="sun.security.krb5.internal.crypto.Aes256"/>
        <import package="sun.security.krb5.internal.crypto.ArcFourHmac"/>
        <class name="CipherHelper" line="48">
            <comment line="51">
                From draft-raeburn-cat-gssapi-krb5-3des-00
                 Key usage values when deriving keys                
            </comment>
            <comment line="61">
                ARCFOUR-HMAC
                 Save first 8 octets of HMAC Sgn_Cksum                
            </comment>
            <comment line="64">
                key usage for MIC tokens used by MS                
            </comment>
            <comment line="67">
                debug flag                
            </comment>
            <comment line="81">
                new token format from draft-ietf-krb-wg-gssapi-cfx-07
                 proto is used to determine new GSS token format for &quot;newer&quot; etypes                
            </comment>
            <comment line="319">
                calculate Checksum for the new GSS tokens                
            </comment>
            <comment line="560">
                decrypt data in the new GSS tokens                
            </comment>
            <comment line="705">
                Encrypt data in the new GSS tokens
                
                 Wrap Tokens (with confidentiality)
                 { Encrypt(16-byte confounder | plaintext | 16-byte token_header) |
                           12-byte HMAC }
                 where HMAC is on {16-byte confounder | plaintext | 16-byte token_header}
                 HMAC is not encrypted; it is appended at the end.                
            </comment>
            <comment line="778">
                Encrypt data in the new GSS tokens
                
                 Wrap Tokens (with confidentiality)
                 { Encrypt(16-byte confounder | plaintext | 16-byte token_header) |
                           12-byte HMAC }
                 where HMAC is on {16-byte confounder | plaintext | 16-byte token_header}
                 HMAC is not encrypted; it is appended at the end.                
            </comment>
            <comment line="809">
                --------------------- DES methods                
            </comment>
            <comment line="1130">
                ---- DES3-KD methods                
            </comment>
            <comment line="1202">
                ---- RC4-HMAC methods                
            </comment>
            <comment line="1289">
                ---- AES methods                
            </comment>
            <declaration name="KG_USAGE_SEAL" type="int" line="52"/>
            <declaration name="KG_USAGE_SIGN" type="int" line="53"/>
            <declaration name="KG_USAGE_SEQ" type="int" line="54"/>
            <declaration name="DES_CHECKSUM_SIZE" type="int" line="56"/>
            <declaration name="DES_IV_SIZE" type="int" line="57"/>
            <declaration name="AES_IV_SIZE" type="int" line="58"/>
            <declaration name="HMAC_CHECKSUM_SIZE" type="int" line="62"/>
            <declaration name="KG_USAGE_SIGN_MS" type="int" line="64"/>
            <declaration name="DEBUG" type="boolean" line="67"/>
            <declaration name="ZERO_IV" type="byte[]" line="69"/>
            <javadoc line="69">
                A zero initial vector to be used for checksum calculation and for
                  DesCbc application data encryption/decryption.                
            </javadoc>
            <declaration name="ZERO_IV_AES" type="byte[]" line="74"/>
            <declaration name="etype" type="int" line="76"/>
            <declaration name="sgnAlg" type="int" line="77"/>
            <declaration name="keybytes" type="byte[]" line="78"/>
            <declaration name="proto" type="int" line="82"/>
            <method name="CipherHelper" type="constructor" line="84">
                <params>
                    <param name="key" type="EncryptionKey"/>
                </params>
            </method>
            <method name="getSgnAlg" type="int" line="118"/>
            <method name="getSealAlg" type="int" line="122"/>
            <method name="getProto" type="int" line="126"/>
            <method name="getEType" type="int" line="130"/>
            <method name="isArcFour" type="boolean" line="134">
                <declaration name="flag" type="boolean" line="135"/>
                <scope line="136"/>
            </method>
            <method name="calculateChecksum" type="byte[]" line="143">
                <params>
                    <param name="alg" type="int"/>
                    <param name="header" type="byte[]"/>
                    <param name="trailer" type="byte[]"/>
                    <param name="data" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="tokenId" type="int"/>
                </params>
                <comment line="148">
                    With this sign algorithm, first an MD5 hash is computed on the
                     application data. The 16 byte hash is then DesCbc encrypted.                    
                </comment>
                <comment line="155">
                    debug(&quot;\t\tdata=[&quot;);                    
                </comment>
                <comment line="157">
                    debug(getHexBytes(checksumDataHeader,
                                          checksumDataHeader.length) + &quot; &quot;);                    
                </comment>
                <comment line="161">
                    debug(getHexBytes(data, start, len));                    
                </comment>
                <comment line="165">
                    debug(&quot; &quot; +
                           getHexBytes(trailer,
                                         optionalTrailer.length));                    
                </comment>
                <comment line="170">
                    debug(&quot;]\n&quot;);                    
                </comment>
                <comment line="175">
                    System.out.println(&quot;\tMD5 Checksum is [&quot; +
                                                 getHexBytes(data) + &quot;]\n&quot;);                    
                </comment>
                <comment line="185">
                    fall through to encrypt checksum                    
                </comment>
                <comment line="218">
                    Krb5Token.debug(&quot;\nkeybytes: &quot; +
                    Krb5Token.getHexBytes(keybytes));
                    Krb5Token.debug(&quot;\nheader: &quot; + (header == null ? &quot;NONE&quot; :
                    Krb5Token.getHexBytes(header)));
                    Krb5Token.debug(&quot;\ntrailer: &quot; + (trailer == null ? &quot;NONE&quot; :
                    Krb5Token.getHexBytes(trailer)));
                    Krb5Token.debug(&quot;\ndata: &quot; +
                    Krb5Token.getHexBytes(data, start, len));
                    Krb5Token.debug(&quot;\nbuf: &quot; + Krb5Token.getHexBytes(buf, offset,
                    total));                    
                </comment>
                <comment line="233">
                    Krb5Token.debug(&quot;\nanswer: &quot; +
                                  Krb5Token.getHexBytes(answer));                    
                </comment>
                <comment line="273">
                    Krb5Token.debug(&quot;\nkeybytes: &quot; +
                    Krb5Token.getHexBytes(keybytes));
                    Krb5Token.debug(&quot;\nheader: &quot; + (header == null ? &quot;NONE&quot; :
                    Krb5Token.getHexBytes(header)));
                    Krb5Token.debug(&quot;\ntrailer: &quot; + (trailer == null ? &quot;NONE&quot; :
                    Krb5Token.getHexBytes(trailer)));
                    Krb5Token.debug(&quot;\ndata: &quot; +
                    Krb5Token.getHexBytes(data, start, len));
                    Krb5Token.debug(&quot;\nbuffer: &quot; +
                    Krb5Token.getHexBytes(buffer, off, tot));                    
                </comment>
                <comment line="286">
                    for MIC tokens, key derivation salt is 15
                     NOTE: Required for interoperability. The RC4-HMAC spec
                     defines key_usage of 23, however all Kerberos impl.
                     MS/Solaris/MIT all use key_usage of 15 for MIC tokens                    
                </comment>
                <comment line="296">
                    Krb5Token.debug(&quot;\nanswer: &quot; +
                          Krb5Token.getHexBytes(answer));                    
                </comment>
                <comment line="299">
                    Save first 8 octets of HMAC Sgn_Cksum                    
                </comment>
                <comment line="302">
                    Krb5Token.debug(&quot;\nanswer (trimmed): &quot; +
                                  Krb5Token.getHexBytes(output));                    
                </comment>
                <scope line="151">
                    <declaration name="md5" type="MessageDigest" line="152"/>
                    <scope line="163"/>
                </scope>
                <scope line="178">
                    <declaration name="ge" type="GSSException" line="179"/>
                </scope>
                <declaration name="buf" type="byte[]" line="190"/>
                <declaration name="offset" type="int" line="191"/>
                <scope line="192"/>
                <scope line="196">
                    <declaration name="pos" type="int" line="201"/>
                    <scope line="202"/>
                    <scope line="208"/>
                </scope>
                <scope line="215">
                    <declaration name="answer" type="byte[]" line="230"/>
                </scope>
                <scope line="235">
                    <declaration name="ge" type="GSSException" line="236"/>
                </scope>
                <declaration name="buffer" type="byte[]" line="244"/>
                <declaration name="off" type="int" line="245"/>
                <scope line="246"/>
                <scope line="250">
                    <declaration name="pos" type="int" line="255"/>
                    <scope line="257"/>
                    <scope line="263"/>
                </scope>
                <scope line="270">
                    <declaration name="key_usage" type="int" line="289"/>
                    <scope line="290"/>
                    <declaration name="answer" type="byte[]" line="293"/>
                    <declaration name="output" type="byte[]" line="299"/>
                </scope>
                <scope line="304">
                    <declaration name="ge" type="GSSException" line="305"/>
                </scope>
            </method>
            <method name="calculateChecksum" type="byte[]" line="320">
                <params>
                    <param name="header" type="byte[]"/>
                    <param name="data" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <comment line="323">
                    total length                    
                </comment>
                <comment line="326">
                    get_mic(&quot;plaintext-data&quot; | &quot;header&quot;)                    
                </comment>
                <comment line="329">
                    data                    
                </comment>
                <comment line="332">
                    token header                    
                </comment>
                <comment line="337">
                    Krb5Token.debug(&quot;\nAES calculate checksum on: &quot; +
                                  Krb5Token.getHexBytes(buf));                    
                </comment>
                <comment line="344">
                    Krb5Token.debug(&quot;\nAES128 checksum: &quot; +
                                          Krb5Token.getHexBytes(answer));                    
                </comment>
                <comment line="359">
                    Krb5Token.debug(&quot;\nAES256 checksum: &quot; +
                                  Krb5Token.getHexBytes(answer));                    
                </comment>
                <declaration name="total" type="int" line="323"/>
                <declaration name="buf" type="byte[]" line="326"/>
                <scope line="332"/>
                <scope line="340">
                    <declaration name="answer" type="byte[]" line="341"/>
                </scope>
                <scope line="346">
                    <declaration name="ge" type="GSSException" line="347"/>
                </scope>
                <scope line="355">
                    <declaration name="answer" type="byte[]" line="356"/>
                </scope>
                <scope line="361">
                    <declaration name="ge" type="GSSException" line="362"/>
                </scope>
            </method>
            <method name="encryptSeq" type="byte[]" line="376">
                <params>
                    <param name="ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="406">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <comment line="415">
                    ivec passed is the checksum                    
                </comment>
                <comment line="428">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <scope line="381">
                    <declaration name="des" type="Cipher" line="382"/>
                </scope>
                <scope line="385">
                    <declaration name="ge" type="GSSException" line="386"/>
                </scope>
                <declaration name="iv" type="byte[]" line="394"/>
                <scope line="395"/>
                <scope line="397"/>
                <scope line="401"/>
                <scope line="404">
                    <declaration name="ge" type="GSSException" line="406"/>
                </scope>
                <declaration name="checksum" type="byte[]" line="415"/>
                <scope line="416"/>
                <scope line="418"/>
                <scope line="423"/>
                <scope line="426">
                    <declaration name="ge" type="GSSException" line="428"/>
                </scope>
            </method>
            <method name="decryptSeq" type="byte[]" line="442">
                <params>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="472">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <comment line="481">
                    ivec passed is the checksum                    
                </comment>
                <comment line="494">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <scope line="447">
                    <declaration name="des" type="Cipher" line="448"/>
                </scope>
                <scope line="450">
                    <declaration name="ge" type="GSSException" line="451"/>
                </scope>
                <declaration name="iv" type="byte[]" line="459"/>
                <scope line="460"/>
                <scope line="462"/>
                <scope line="467"/>
                <scope line="470">
                    <declaration name="ge" type="GSSException" line="472"/>
                </scope>
                <declaration name="checksum" type="byte[]" line="481"/>
                <scope line="482"/>
                <scope line="484"/>
                <scope line="489"/>
                <scope line="492">
                    <declaration name="ge" type="GSSException" line="494"/>
                </scope>
            </method>
            <method name="getChecksumLength" type="int" line="507">
                <comment line="523">
                    only first 8 octets of HMAC Sgn_Cksum are used                    
                </comment>
            </method>
            <method name="decryptData" type="void" line="532">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                </params>
                <comment line="535">
                    Krb5Token.debug(&quot;decryptData : ciphertext =  &quot; +
                    Krb5Token.getHexBytes(ciphertext));                    
                </comment>
            </method>
            <method name="decryptData" type="void" line="562">
                <params>
                    <param name="token" type="WrapToken_v2"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <comment line="565">
                    Krb5Token.debug(&quot;decryptData : ciphertext =  &quot; +
                    Krb5Token.getHexBytes(ciphertext));                    
                </comment>
            </method>
            <method name="decryptData" type="void" line="586">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="cipherStream" type="InputStream"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                </params>
                <comment line="597">
                    Read encrypted data from stream                    
                </comment>
                <comment line="614">
                    Read encrypted data from stream                    
                </comment>
                <declaration name="ciphertext" type="byte[]" line="597"/>
                <scope line="598"/>
                <scope line="600">
                    <declaration name="ge" type="GSSException" line="601"/>
                </scope>
                <declaration name="ctext" type="byte[]" line="614"/>
                <scope line="615"/>
                <scope line="617">
                    <declaration name="ge" type="GSSException" line="618"/>
                </scope>
            </method>
            <method name="decryptData" type="void" line="636">
                <params>
                    <param name="token" type="WrapToken_v2"/>
                    <param name="cipherStream" type="InputStream"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <comment line="639">
                    Read encrypted data from stream                    
                </comment>
                <declaration name="ciphertext" type="byte[]" line="639"/>
                <scope line="640"/>
                <scope line="642">
                    <declaration name="ge" type="GSSException" line="643"/>
                </scope>
            </method>
            <method name="encryptData" type="void" line="666">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="confounder" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="padding" type="byte[]"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <comment line="671">
                    Encrypt on the fly and write                    
                </comment>
                <comment line="675">
                    debug(getHexBytes(confounder, confounder.length));                    
                </comment>
                <comment line="677">
                    debug(&quot; &quot; + getHexBytes(plaintext, start, len));                    
                </comment>
                <comment line="679">
                    debug(&quot; &quot; + getHexBytes(padding, padding.length));                    
                </comment>
                <comment line="687">
                    Write to stream                    
                </comment>
                <comment line="695">
                    Write to stream                    
                </comment>
                <declaration name="des" type="Cipher" line="671"/>
                <declaration name="cos" type="CipherOutputStream" line="673"/>
                <declaration name="ctext" type="byte[]" line="683"/>
                <declaration name="ciphertext" type="byte[]" line="691"/>
            </method>
            <method name="encryptData" type="byte[]" line="715">
                <params>
                    <param name="token" type="WrapToken_v2"/>
                    <param name="confounder" type="byte[]"/>
                    <param name="tokenHeader" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
            </method>
            <method name="encryptData" type="void" line="732">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="confounder" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                    <param name="pLen" type="int"/>
                    <param name="padding" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                </params>
                <comment line="738">
                    Encrypt and write                    
                </comment>
                <comment line="742">
                    debug(getHexBytes(confounder, confounder.length));                    
                </comment>
                <comment line="745">
                    debug(&quot; &quot; + getHexBytes(dataBytes, dataOffset, dataLen));                    
                </comment>
                <comment line="748">
                    debug(&quot; &quot; + getHexBytes(padding, padding.length));                    
                </comment>
                <declaration name="pos" type="int" line="736"/>
                <declaration name="des" type="Cipher" line="738"/>
                <scope line="740"/>
                <scope line="751">
                    <declaration name="ge" type="GSSException" line="752"/>
                </scope>
                <declaration name="ctext" type="byte[]" line="760"/>
                <declaration name="ctext2" type="byte[]" line="766"/>
            </method>
            <method name="encryptData" type="int" line="788">
                <params>
                    <param name="token" type="WrapToken_v2"/>
                    <param name="confounder" type="byte[]"/>
                    <param name="tokenHeader" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                    <param name="pLen" type="int"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <declaration name="ctext" type="byte[]" line="790"/>
            </method>
            <javadoc line="810">
                Computes the DesCbc checksum based on the algorithm published in FIPS
                  Publication 113. This involves applying padding to the data passed
                  in, then performing DesCbc encryption on the data with a zero initial
                  vector, and finally returning the last 8 bytes of the encryption
                  result.                
                <param>
                    key the bytes for the DES key                    
                </param>
                <param>
                    header a header to process first before the data is.                    
                </param>
                <param>
                    data the data to checksum                    
                </param>
                <param>
                    offset the offset where the data begins                    
                </param>
                <param>
                    len the length of the data                    
                </param>
                <throws>
                    GSSException when an error occuse in the encryption                    
                </throws>
            </javadoc>
            <method name="getDesCbcChecksum" type="byte[]" line="827">
                <params>
                    <param name="key" type="byte"/>
                    <param name="header" type="byte[]"/>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="834">
                    Here the data need not be a multiple of the blocksize
                     (8). Encrypt and throw away results for all blocks except for
                     the very last block.                    
                </comment>
                <comment line="845">
                    No need for padding. Save last block from application data                    
                </comment>
                <comment line="852">
                    Zero padding automatically done                    
                </comment>
                <comment line="860">
                    header will be null when doing DES-MD5 Checksum                    
                </comment>
                <comment line="864">
                    Iterate over all but the last block                    
                </comment>
                <comment line="871">
                    Now process the final block                    
                </comment>
                <declaration name="des" type="Cipher" line="829"/>
                <declaration name="blockSize" type="int" line="831"/>
                <declaration name="finalBlock" type="byte[]" line="839"/>
                <declaration name="numBlocks" type="int" line="841"/>
                <declaration name="lastBytes" type="int" line="842"/>
                <scope line="843"/>
                <scope line="848"/>
                <scope line="854">
                    <declaration name="temp" type="byte[]" line="855"/>
                    <scope line="858"/>
                    <scope line="864"/>
                    <declaration name="retVal" type="byte[]" line="871"/>
                </scope>
                <scope line="876">
                    <declaration name="ge" type="GSSException" line="877"/>
                </scope>
            </method>
            <javadoc line="884">
                Obtains an initialized DES cipher.                
                <param>
                    encryptMode true if encryption is desired, false is decryption
                      is desired.                    
                </param>
                <param>
                    key the bytes for the DES key                    
                </param>
                <param>
                    ivBytes the initial vector bytes                    
                </param>
            </javadoc>
            <method name="getInitializedDes" type="Cipher" line="894">
                <params>
                    <param name="encryptMode" type="boolean"/>
                    <param name="key" type="byte[]"/>
                    <param name="ivBytes" type="byte[]"/>
                </params>
                <scope line="897">
                    <declaration name="iv" type="IvParameterSpec" line="898"/>
                    <declaration name="jceKey" type="SecretKey" line="899"/>
                    <declaration name="desCipher" type="Cipher" line="901"/>
                </scope>
                <scope line="906">
                    <declaration name="ge" type="GSSException" line="907"/>
                </scope>
            </method>
            <javadoc line="914">
                Helper routine to decrypt fromm a byte array and write the
                  application data straight to an output array with minimal
                  buffer copies. The confounder and the padding are stored
                  separately and not copied into this output array.                
                <param>
                    key the DES key to use                    
                </param>
                <param>
                    cipherText the encrypted data                    
                </param>
                <param>
                    offset the offset for the encrypted data                    
                </param>
                <param>
                    len the length of the encrypted data                    
                </param>
                <param>
                    dataOutBuf the output buffer where the application data
                      should be writte                    
                </param>
                <param>
                    dataOffset the offser where the application data should
                      be written.                    
                </param>
                <throws>
                    GSSException is an error occurs while decrypting the
                      data                    
                </throws>
            </javadoc>
            <method name="desCbcDecrypt" type="void" line="932">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="key" type="byte[]"/>
                    <param name="cipherText" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="dataOutBuf" type="byte[]"/>
                    <param name="dataOffset" type="int"/>
                </params>
                <comment line="941">
                    Remove the counfounder first.
                     CONFOUNDER_SIZE is one DES block ie 8 bytes.                    
                </comment>
                <comment line="947">
                    temp should be CONFOUNDER_SIZE
                     debug(&quot;\n\ttemp is &quot; + temp + &quot; and CONFOUNDER_SIZE is &quot;
                      + CONFOUNDER_SIZE);                    
                </comment>
                <comment line="954">
                    len is a multiple of 8 due to padding.
                     Decrypt all blocks directly into the output buffer except for
                     the very last block. Remove the trailing padding bytes from the
                     very last block and copy that into the output buffer.                    
                </comment>
                <comment line="964">
                    Iterate over all but the last block                    
                </comment>
                <comment line="968">
                    temp should be blockSize
                     debug(&quot;\n\ttemp is &quot; + temp + &quot; and blockSize is &quot;
                        + blockSize);                    
                </comment>
                <comment line="976">
                    Now process the last block                    
                </comment>
                <comment line="982">
                    There is always at least one padding byte. The padding bytes
                     are all the value of the number of padding bytes.                    
                </comment>
                <comment line="994">
                    Copy this last block into the output buffer                    
                </comment>
                <scope line="934">
                    <declaration name="temp" type="int" line="936"/>
                    <declaration name="des" type="Cipher" line="938"/>
                    <declaration name="blockSize" type="int" line="960"/>
                    <declaration name="numBlocks" type="int" line="961"/>
                    <scope line="964"/>
                    <declaration name="finalBlock" type="byte[]" line="976"/>
                    <declaration name="padSize" type="int" line="986"/>
                </scope>
                <scope line="997">
                    <declaration name="ge" type="GSSException" line="998"/>
                </scope>
            </method>
            <javadoc line="1005">
                Helper routine to decrypt from an InputStream and write the
                  application data straight to an output array with minimal
                  buffer copies. The confounder and the padding are stored
                  separately and not copied into this output array.                
                <param>
                    key the DES key to use                    
                </param>
                <param>
                    is the InputStream from which the cipher text should be
                      read                    
                </param>
                <param>
                    len the length of the ciphertext data                    
                </param>
                <param>
                    dataOutBuf the output buffer where the application data
                      should be writte                    
                </param>
                <param>
                    dataOffset the offser where the application data should
                      be written.                    
                </param>
                <throws>
                    GSSException is an error occurs while decrypting the
                      data                    
                </throws>
            </javadoc>
            <method name="desCbcDecrypt" type="void" line="1023">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="key" type="byte[]"/>
                    <param name="is" type="InputStream"/>
                    <param name="len" type="int"/>
                    <param name="dataOutBuf" type="byte[]"/>
                    <param name="dataOffset" type="int"/>
                </params>
                <comment line="1034">
                    Remove the counfounder first.
                     CONFOUNDER_SIZE is one DES block ie 8 bytes.                    
                </comment>
                <comment line="1041">
                    temp should be CONFOUNDER_SIZE
                     debug(&quot;Got &quot; + temp + &quot; bytes; CONFOUNDER_SIZE is &quot;
                         + CONFOUNDER_SIZE + &quot;\n&quot;);
                     debug(&quot;Confounder is &quot; + getHexBytes(confounder) + &quot;\n&quot;);                    
                </comment>
                <comment line="1047">
                    len is a multiple of 8 due to padding.
                     Decrypt all blocks directly into the output buffer except for
                     the very last block. Remove the trailing padding bytes from the
                     very last block and copy that into the output buffer.                    
                </comment>
                <comment line="1057">
                    Iterate over all but the last block                    
                </comment>
                <comment line="1059">
                    debug(&quot;dataOffset is &quot; + dataOffset + &quot;\n&quot;);                    
                </comment>
                <comment line="1062">
                    temp should be blockSize
                     debug(&quot;Got &quot; + temp + &quot; bytes and blockSize is &quot;
                        + blockSize + &quot;\n&quot;);
                     debug(&quot;Bytes are: &quot;
                        + getHexBytes(dataOutBuf, dataOffset, temp) + &quot;\n&quot;);                    
                </comment>
                <comment line="1070">
                    Now process the last block                    
                </comment>
                <comment line="1072">
                    debug(&quot;Will call read on finalBlock&quot; + &quot;\n&quot;);                    
                </comment>
                <comment line="1074">
                    temp should be blockSize                    
                </comment>
                <comment line="1075">
                    debug(&quot;Got &quot; + temp + &quot; bytes and blockSize is &quot;
                    + blockSize + &quot;\n&quot;);
                    debug(&quot;Bytes are: &quot;
                    + getHexBytes(finalBlock, 0, temp) + &quot;\n&quot;);
                    debug(&quot;Will call doFinal&quot; + &quot;\n&quot;);                    
                </comment>
                <comment line="1091">
                    There is always at least one padding byte. The padding bytes
                     are all the value of the number of padding bytes.                    
                </comment>
                <comment line="1103">
                    Copy this last block into the output buffer                    
                </comment>
                <declaration name="temp" type="int" line="1025"/>
                <declaration name="des" type="Cipher" line="1027"/>
                <declaration name="truncatedInputStream" type="WrapTokenInputStream" line="1029"/>
                <declaration name="cis" type="CipherInputStream" line="1031"/>
                <declaration name="blockSize" type="int" line="1053"/>
                <declaration name="numBlocks" type="int" line="1054"/>
                <scope line="1057"/>
                <declaration name="finalBlock" type="byte[]" line="1070"/>
                <scope line="1081"/>
                <scope line="1083">
                    <declaration name="ge" type="GSSException" line="1084"/>
                </scope>
                <declaration name="padSize" type="int" line="1095"/>
            </method>
            <method name="getDesEncryptionKey" type="byte[]" line="1108">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
                <comment line="1111">
                    To meet export control requirements, double check that the
                     key being used is no longer than 64 bits.
                    
                     Note that from a protocol point of view, an
                     algorithm that is not DES will be rejected before this
                     point. Also, a DES key that is not 64 bits will be
                     rejected by a good JCE provider.                    
                </comment>
                <comment line="1126">
                    RFC 1964, Section 1.2.2                    
                </comment>
                <declaration name="retVal" type="byte[]" line="1123"/>
            </method>
            <method name="des3KdDecrypt" type="void" line="1132">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                </params>
                <comment line="1145">
                    Krb5Token.debug(&quot;\ndes3KdDecrypt in: &quot; +
                    Krb5Token.getHexBytes(ciphertext, cStart, cLen));
                    Krb5Token.debug(&quot;\ndes3KdDecrypt plain: &quot; +
                    Krb5Token.getHexBytes(ptext));                    
                </comment>
                <comment line="1152">
                    Strip out confounder and padding                    
                </comment>
                <comment line="1153">
                    There is always at least one padding byte. The padding bytes
                     are all the value of the number of padding bytes.                    
                </comment>
                <comment line="1168">
                    Needed to calculate checksum                    
                </comment>
                <declaration name="ptext" type="byte[]" line="1133"/>
                <scope line="1134"/>
                <scope line="1137">
                    <declaration name="ge" type="GSSException" line="1138"/>
                </scope>
                <declaration name="padSize" type="int" line="1156"/>
                <declaration name="len" type="int" line="1162"/>
            </method>
            <method name="des3KdEncrypt" type="byte[]" line="1173">
                <params>
                    <param name="confounder" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="padding" type="byte[]"/>
                </params>
                <comment line="1177">
                    [confounder | plaintext | padding]                    
                </comment>
                <comment line="1184">
                    Krb5Token.debug(&quot;\ndes3KdEncrypt:&quot; + Krb5Token.getHexBytes(all));                    
                </comment>
                <comment line="1186">
                    Encrypt                    
                </comment>
                <comment line="1190">
                    Krb5Token.debug(&quot;\ndes3KdEncrypt encrypted:&quot; +
                      Krb5Token.getHexBytes(answer));                    
                </comment>
                <comment line="1194">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <declaration name="all" type="byte[]" line="1177"/>
                <scope line="1186">
                    <declaration name="answer" type="byte[]" line="1187"/>
                </scope>
                <scope line="1192">
                    <declaration name="ge" type="GSSException" line="1194"/>
                </scope>
            </method>
            <method name="arcFourDecrypt" type="void" line="1204">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                </params>
                <comment line="1207">
                    obtain Sequence number needed for decryption
                     first decrypt the Sequence Number using checksum                    
                </comment>
                <comment line="1223">
                    Krb5Token.debug(&quot;\narcFourDecrypt in: &quot; +
                    Krb5Token.getHexBytes(ciphertext, cStart, cLen));
                    Krb5Token.debug(&quot;\narcFourDecrypt plain: &quot; +
                    Krb5Token.getHexBytes(ptext));                    
                </comment>
                <comment line="1230">
                    Strip out confounder and padding                    
                </comment>
                <comment line="1231">
                    There is always at least one padding byte. The padding bytes
                     are all the value of the number of padding bytes.                    
                </comment>
                <comment line="1246">
                    Krb5Token.debug(&quot;\narcFourDecrypt plaintext: &quot; +
                        Krb5Token.getHexBytes(plaintext));                    
                </comment>
                <comment line="1249">
                    Needed to calculate checksum                    
                </comment>
                <declaration name="seqNum" type="byte[]" line="1208"/>
                <declaration name="ptext" type="byte[]" line="1211"/>
                <scope line="1212"/>
                <scope line="1215">
                    <declaration name="ge" type="GSSException" line="1216"/>
                </scope>
                <declaration name="padSize" type="int" line="1234"/>
                <declaration name="len" type="int" line="1240"/>
            </method>
            <method name="arcFourEncrypt" type="byte[]" line="1255">
                <params>
                    <param name="token" type="WrapToken"/>
                    <param name="confounder" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="padding" type="byte[]"/>
                </params>
                <comment line="1258">
                    [confounder | plaintext | padding]                    
                </comment>
                <comment line="1265">
                    get the token Sequence Number required for encryption
                     Note: When using this RC4 based encryption type, the sequence number
                     is always sent in big-endian rather than little-endian order.                    
                </comment>
                <comment line="1271">
                    Krb5Token.debug(&quot;\narcFourEncrypt:&quot; + Krb5Token.getHexBytes(all));                    
                </comment>
                <comment line="1273">
                    Encrypt                    
                </comment>
                <comment line="1277">
                    Krb5Token.debug(&quot;\narcFourEncrypt encrypted:&quot; +
                      Krb5Token.getHexBytes(answer));                    
                </comment>
                <comment line="1281">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <declaration name="all" type="byte[]" line="1258"/>
                <declaration name="seqNum" type="byte[]" line="1267"/>
                <scope line="1273">
                    <declaration name="answer" type="byte[]" line="1274"/>
                </scope>
                <scope line="1279">
                    <declaration name="ge" type="GSSException" line="1281"/>
                </scope>
            </method>
            <method name="aes128Encrypt" type="byte[]" line="1291">
                <params>
                    <param name="confounder" type="byte[]"/>
                    <param name="tokenHeader" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <comment line="1294">
                    encrypt { AES-plaintext-data | filler | header }
                     AES-plaintext-data { confounder | plaintext }
                     WrapToken = { tokenHeader |
                          Encrypt (confounder | plaintext | tokenHeader ) | HMAC }                    
                </comment>
                <comment line="1305">
                    Krb5Token.debug(&quot;\naes128Encrypt:&quot; + Krb5Token.getHexBytes(all));                    
                </comment>
                <comment line="1310">
                    Krb5Token.debug(&quot;\naes128Encrypt encrypted:&quot; +
                                      Krb5Token.getHexBytes(answer));                    
                </comment>
                <comment line="1314">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <declaration name="all" type="byte[]" line="1298"/>
                <scope line="1305">
                    <declaration name="answer" type="byte[]" line="1306"/>
                </scope>
                <scope line="1312">
                    <declaration name="ge" type="GSSException" line="1314"/>
                </scope>
            </method>
            <method name="aes128Decrypt" type="void" line="1323">
                <params>
                    <param name="token" type="WrapToken_v2"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <comment line="1338">
                    Krb5Token.debug(&quot;\naes128Decrypt in: &quot; +
                    Krb5Token.getHexBytes(ciphertext, cStart, cLen));
                    Krb5Token.debug(&quot;\naes128Decrypt plain: &quot; +
                    Krb5Token.getHexBytes(ptext));
                    Krb5Token.debug(&quot;\naes128Decrypt ptext: &quot; +
                    Krb5Token.getHexBytes(ptext));                    
                </comment>
                <comment line="1347">
                    Strip out confounder and token header                    
                </comment>
                <comment line="1353">
                    Krb5Token.debug(&quot;\naes128Decrypt plaintext: &quot; +
                    Krb5Token.getHexBytes(plaintext, pStart, len));                    
                </comment>
                <declaration name="ptext" type="byte[]" line="1325"/>
                <scope line="1327"/>
                <scope line="1330">
                    <declaration name="ge" type="GSSException" line="1331"/>
                </scope>
                <declaration name="len" type="int" line="1347"/>
            </method>
            <method name="aes256Encrypt" type="byte[]" line="1360">
                <params>
                    <param name="confounder" type="byte[]"/>
                    <param name="tokenHeader" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <comment line="1363">
                    encrypt { AES-plaintext-data | filler | header }
                     AES-plaintext-data { confounder | plaintext }
                     WrapToken = { tokenHeader |
                           Encrypt (confounder | plaintext | tokenHeader ) | HMAC }                    
                </comment>
                <comment line="1374">
                    Krb5Token.debug(&quot;\naes256Encrypt:&quot; + Krb5Token.getHexBytes(all));                    
                </comment>
                <comment line="1379">
                    Krb5Token.debug(&quot;\naes256Encrypt encrypted:&quot; +
                      Krb5Token.getHexBytes(answer));                    
                </comment>
                <comment line="1383">
                    GeneralSecurityException, KrbCryptoException                    
                </comment>
                <declaration name="all" type="byte[]" line="1367"/>
                <scope line="1375">
                    <declaration name="answer" type="byte[]" line="1376"/>
                </scope>
                <scope line="1381">
                    <declaration name="ge" type="GSSException" line="1383"/>
                </scope>
            </method>
            <method name="aes256Decrypt" type="void" line="1392">
                <params>
                    <param name="token" type="WrapToken_v2"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="cStart" type="int"/>
                    <param name="cLen" type="int"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="pStart" type="int"/>
                    <param name="key_usage" type="int"/>
                </params>
                <comment line="1406">
                    Krb5Token.debug(&quot;\naes256Decrypt in: &quot; +
                    Krb5Token.getHexBytes(ciphertext, cStart, cLen));
                    Krb5Token.debug(&quot;\naes256Decrypt plain: &quot; +
                    Krb5Token.getHexBytes(ptext));
                    Krb5Token.debug(&quot;\naes256Decrypt ptext: &quot; +
                    Krb5Token.getHexBytes(ptext));                    
                </comment>
                <comment line="1415">
                    Strip out confounder and token header                    
                </comment>
                <comment line="1421">
                    Krb5Token.debug(&quot;\naes128Decrypt plaintext: &quot; +
                    Krb5Token.getHexBytes(plaintext, pStart, len));                    
                </comment>
                <declaration name="ptext" type="byte[]" line="1394"/>
                <scope line="1395"/>
                <scope line="1398">
                    <declaration name="ge" type="GSSException" line="1399"/>
                </scope>
                <declaration name="len" type="int" line="1415"/>
            </method>
            <class name="WrapTokenInputStream" line="1427">
                <extends class="InputStream"/>
                <javadoc line="1427">
                    This class provides a truncated inputstream needed by WrapToken. The
                      truncated inputstream is passed to CipherInputStream. It prevents
                      the CipherInputStream from treating the bytes of the following token
                      as part fo the ciphertext for this token.                    
                </javadoc>
                <declaration name="is" type="InputStream" line="1435"/>
                <declaration name="length" type="int" line="1436"/>
                <declaration name="remaining" type="int" line="1437"/>
                <declaration name="temp" type="int" line="1439"/>
                <method name="WrapTokenInputStream" type="constructor" line="1441">
                    <params>
                        <param name="is" type="InputStream"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="read" type="int" line="1447">
                    <scope line="1450"/>
                </method>
                <method name="read" type="int" line="1458">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                    <scope line="1461"/>
                </method>
                <method name="read" type="int" line="1472">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="1475"/>
                </method>
                <method name="skip" type="long" line="1484">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <scope line="1487"/>
                </method>
                <method name="available" type="int" line="1495"/>
                <method name="close" type="void" line="1499"/>
            </class>
        </class>
    </source>