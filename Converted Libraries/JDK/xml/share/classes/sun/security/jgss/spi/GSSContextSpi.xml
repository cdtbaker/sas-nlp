<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.spi">
        <import package="org.ietf.jgss"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.Provider"/>
        <import package="com.sun.security.jgss"/>
        <interface name="GSSContextSpi">
            <comment line="96">
                The specification for the following methods mirrors the
                 specification of the same methods in the GSSContext interface, as
                 defined in RFC 2853.                
            </comment>
            <comment line="273">
                For apps that care about buffer copies but either cannot use streams
                 or want to avoid them for whatever reason. (Say, they are using
                 block ciphers.)
                
                 NOTE: This method is not defined in public class org.ietf.jgss.GSSContext
                
                public int wrap(byte inBuf[], int inOffset, int len,
                byte[] outBuf, int outOffset,
                MessageProp msgProp) throws GSSException;                
            </comment>
            <comment line="286">
                For apps that want to read from a specific application provided
                 buffer but want to write directly to the network stream.                
            </comment>
            <comment line="290">
                Can be achieved by converting the input buffer to a
                 ByteInputStream. Provided to keep the API consistent
                 with unwrap.
                
                 NOTE: This method is not defined in public class org.ietf.jgss.GSSContext
                
                public void wrap(byte inBuf[], int offset, int len,
                OutputStream os, MessageProp msgProp)
                throws GSSException;                
            </comment>
            <comment line="322">
                For apps that care about buffer copies but either cannot use streams
                 or want to avoid them for whatever reason. (Say, they are using
                 block ciphers.)
                
                 NOTE: This method is not defined in public class org.ietf.jgss.GSSContext
                
                public int unwrap(byte inBuf[], int inOffset, int len,
                byte[] outBuf, int outOffset,
                MessageProp msgProp) throws GSSException;                
            </comment>
            <comment line="335">
                For apps that care about buffer copies and want to read
                 straight from the network, but also want the output in a specific
                 application provided buffer, say to reduce buffer allocation or
                 subsequent copy.
                
                 NOTE: This method is not defined in public class org.ietf.jgss.GSSContext
                
                public int unwrap(InputStream is,
                byte[] outBuf, int outOffset,
                MessageProp msgProp) throws GSSException;                
            </comment>
            <javadoc line="39">
                This interface is implemented by a mechanism specific instance of a GSS
                  security context.
                  A GSSContextSpi object can be thought of having 3 states:
                  -before initialization
                  -during initialization with its peer
                  -after it is established
                  &lt;p&gt;
                  The context options can only be requested in state 1. In state 3,
                  the per message operations are available to the callers. The get
                  methods for the context options will return the requested options
                  while in state 1 and 2, and the established values in state 3.
                  Some mechanisms may allow the access to the per-message operations
                  and the context flags before the context is fully established. The
                  isProtReady method is used to indicate that these services are
                  available.
                  &lt;p&gt;
                  &lt;strong&gt;
                  Context establishment tokens are defined in a mechanism independent
                  format in section 3.1 of RFC 2743. The GSS-Framework will add
                  and remove the mechanism independent header portion of this token format
                  depending on whether a token is received or is being sent. The mechanism
                  should only generate or expect to read the inner-context token portion..
                  &lt;p&gt;
                  On the other hands, tokens used for per-message calls are generated
                  entirely by the mechanism. It is possible that the mechanism chooses to
                  encase inner-level per-message tokens in a header similar to that used
                  for initial tokens, however, this is upto the mechanism to do. The token
                  to/from the per-message calls are opaque to the GSS-Framework.
                  &lt;/strong&gt;
                  &lt;p&gt;
                  An attempt has been made to allow for reading the peer&apos;s tokens from an
                  InputStream and writing tokens for the peer to an OutputStream. This
                  allows applications to pass in streams that are obtained from their network
                  connections and thus minimize the buffer copies that will happen. This
                  is especially important for tokens generated by wrap() which are
                  proportional in size to the length of the application data being
                  wrapped, and are probably also the most frequently used type of tokens.
                  &lt;p&gt;
                  It is anticipated that most applications will want to use wrap() in a
                  fashion where they obtain the application bytes to wrap from a byte[]
                  but want to output the wrap token straight to an
                  OutputStream. Similarly, they will want to use unwrap() where they read
                  the token directly form an InputStream but output it to some byte[] for
                  the application to process. Unfortunately the high level GSS bindings
                  do not contain overloaded forms of wrap() and unwrap() that do just
                  this, however we have accomodated those cases here with the expectation
                  that this will be rolled into the high level bindings sooner or later.                
                <author>
                    Mayank Upadhyay                    
                </author>
            </javadoc>
            <method name="getProvider" type="Provider" line="93"/>
            <method name="requestLifetime" type="void" line="99"/>
            <method name="requestMutualAuth" type="void" line="101"/>
            <method name="requestReplayDet" type="void" line="103"/>
            <method name="requestSequenceDet" type="void" line="105"/>
            <method name="requestCredDeleg" type="void" line="107"/>
            <method name="requestAnonymity" type="void" line="109"/>
            <method name="requestConf" type="void" line="111"/>
            <method name="requestInteg" type="void" line="113"/>
            <method name="requestDelegPolicy" type="void" line="115"/>
            <method name="setChannelBinding" type="void" line="117"/>
            <method name="getCredDelegState" type="boolean" line="119"/>
            <method name="getMutualAuthState" type="boolean" line="121"/>
            <method name="getReplayDetState" type="boolean" line="123"/>
            <method name="getSequenceDetState" type="boolean" line="125"/>
            <method name="getAnonymityState" type="boolean" line="127"/>
            <method name="getDelegPolicyState" type="boolean" line="129"/>
            <method name="isTransferable" type="boolean" line="131"/>
            <method name="isProtReady" type="boolean" line="133"/>
            <method name="isInitiator" type="boolean" line="135"/>
            <method name="getConfState" type="boolean" line="137"/>
            <method name="getIntegState" type="boolean" line="139"/>
            <method name="getLifetime" type="int" line="141"/>
            <method name="isEstablished" type="boolean" line="143"/>
            <method name="getSrcName" type="GSSNameSpi" line="145"/>
            <method name="getTargName" type="GSSNameSpi" line="147"/>
            <method name="getMech" type="Oid" line="149"/>
            <method name="getDelegCred" type="GSSCredentialSpi" line="151"/>
            <method name="initSecContext" type="byte[]" line="153"/>
            <javadoc line="153">
                Initiator context establishment call. This method may be
                  required to be called several times. A CONTINUE_NEEDED return
                  call indicates that more calls are needed after the next token
                  is received from the peer.
                  &lt;p&gt;
                  This method is called by the GSS-Framework when the application
                  calls the initSecContext method on the GSSContext implementation
                  that it has a reference to.
                  &lt;p&gt;
                  All overloaded forms of GSSContext.initSecContext() can be handled
                  with this mechanism level initSecContext. Since the output token
                  from this method is a fixed size, not exeedingly large, and a one
                  time deal, an overloaded form that takes an OutputStream has not
                  been defined. The GSS-Framwork can write the returned byte[] to any
                  application provided OutputStream. Similarly, any application input
                  int he form of byte arrays will be wrapped in an input stream by the
                  GSS-Framework and then passed here.
                  &lt;p&gt;
                  &lt;strong&gt;
                  The GSS-Framework will strip off the leading mechanism independent
                  GSS-API header. In other words, only the mechanism specific
                  inner-context token of RFC 2743 section 3.1 will be available on the
                  InputStream.
                  &lt;/strong&gt;                
                <param>
                    is contains the inner context token portion of the GSS token
                      received from the peer. On the first call to initSecContext, there
                      will be no token hence it will be ignored.                    
                </param>
                <param>
                    mechTokenSize the size of the inner context token as read by
                      the GSS-Framework from the mechanism independent GSS-API level
                      header.                    
                </param>
                <return>
                    any inner-context token required to be sent to the peer as
                      part of a GSS token. The mechanism should not add the mechanism
                      independent part of the token. The GSS-Framework will add that on
                      the way out.                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="acceptSecContext" type="byte[]" line="194"/>
            <javadoc line="194">
                Acceptor&apos;s context establishment call. This method may be
                  required to be called several times. A CONTINUE_NEEDED return
                  call indicates that more calls are needed after the next token
                  is received from the peer.
                  &lt;p&gt;
                  This method is called by the GSS-Framework when the application
                  calls the acceptSecContext method on the GSSContext implementation
                  that it has a reference to.
                  &lt;p&gt;
                  All overloaded forms of GSSContext.acceptSecContext() can be handled
                  with this mechanism level acceptSecContext. Since the output token
                  from this method is a fixed size, not exeedingly large, and a one
                  time deal, an overloaded form that takes an OutputStream has not
                  been defined. The GSS-Framwork can write the returned byte[] to any
                  application provided OutputStream. Similarly, any application input
                  int he form of byte arrays will be wrapped in an input stream by the
                  GSS-Framework and then passed here.
                  &lt;p&gt;
                  &lt;strong&gt;
                  The GSS-Framework will strip off the leading mechanism independent
                  GSS-API header. In other words, only the mechanism specific
                  inner-context token of RFC 2743 section 3.1 will be available on the
                  InputStream.
                  &lt;/strong&gt;                
                <param>
                    is contains the inner context token portion of the GSS token
                      received from the peer.                    
                </param>
                <param>
                    mechTokenSize the size of the inner context token as read by
                      the GSS-Framework from the mechanism independent GSS-API level
                      header.                    
                </param>
                <return>
                    any inner-context token required to be sent to the peer as
                      part of a GSS token. The mechanism should not add the mechanism
                      independent part of the token. The GSS-Framework will add that on
                      the way out.                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="getWrapSizeLimit" type="int" line="234"/>
            <javadoc line="234">
                Queries the context for largest data size to accomodate
                  the specified protection and for the token to remain less then
                  maxTokSize.                
                <param>
                    qop the quality of protection that the context will be
                      asked to provide.                    
                </param>
                <param>
                    confReq a flag indicating whether confidentiality will be
                      requested or not                    
                </param>
                <param>
                    outputSize the maximum size of the output token                    
                </param>
                <return>
                    the maximum size for the input message that can be
                      provided to the wrap() method in order to guarantee that these
                      requirements are met.                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="wrap" type="void" line="252"/>
            <javadoc line="252">
                Provides per-message token encapsulation.                
                <param>
                    is the user-provided message to be protected                    
                </param>
                <param>
                    os the token to be sent to the peer. It includes
                      the message from <i>is</i> with the requested protection.                    
                </param>
                <param>
                    msgPro on input it contains the requested qop and
                      confidentiality state, on output, the applied values                    
                </param>
                <exception>
                    GSSException may be thrown                    
                </exception>
                <see>
                    unwrap                    
                </see>
            </javadoc>
            <method name="wrap" type="byte[]" line="266"/>
            <javadoc line="266">
                For apps that want simplicity and don&apos;t care about buffer copies.                
            </javadoc>
            <method name="unwrap" type="void" line="301"/>
            <javadoc line="301">
                Retrieves the message token previously encapsulated in the wrap
                  call.                
                <param>
                    is the token from the peer                    
                </param>
                <param>
                    os unprotected message data                    
                </param>
                <param>
                    msgProp will contain the applied qop and confidentiality
                      of the input token and any informatory status values                    
                </param>
                <exception>
                    GSSException may be thrown                    
                </exception>
                <see>
                    wrap                    
                </see>
            </javadoc>
            <method name="unwrap" type="byte[]" line="315"/>
            <javadoc line="315">
                For apps that want simplicity and dont care about buffer copies.                
            </javadoc>
            <method name="getMIC" type="void" line="347"/>
            <javadoc line="347">
                Applies per-message integrity services.                
                <param>
                    is the user-provided message                    
                </param>
                <param>
                    os the token to be sent to the peer along with the
                      message token. The message token <b>is not</b> encapsulated.                    
                </param>
                <param>
                    msgProp on input the desired QOP and output the applied QOP                    
                </param>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="getMIC" type="byte[]" line="360"/>
            <method name="verifyMIC" type="void" line="363"/>
            <javadoc line="363">
                Checks the integrity of the supplied tokens.
                  This token was previously generated by getMIC.                
                <param>
                    is token generated by getMIC                    
                </param>
                <param>
                    msgStr the message to check integrity for                    
                </param>
                <param>
                    msgProp will contain the applied QOP and confidentiality
                      states of the token as well as any informatory status codes                    
                </param>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="verifyMIC" type="void" line="376"/>
            <method name="export" type="byte[]" line="380"/>
            <javadoc line="380">
                Produces a token representing this context. After this call
                  the context will no longer be usable until an import is
                  performed on the returned token.                
                <return>
                    exported context token                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="dispose" type="void" line="390"/>
            <javadoc line="390">
                Releases context resources and terminates the
                  context between 2 peer.                
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="inquireSecContext" type="Object" line="398"/>
            <javadoc line="398">
                Return the mechanism-specific attribute associated with (@code type}.                
                <param>
                    type the type of the attribute requested                    
                </param>
                <return>
                    the attribute                    
                </return>
                <throws>
                    GSSException see {@link ExtendedGSSContext#inquireSecContext}for details                    
                </throws>
            </javadoc>
        </interface>
    </source>