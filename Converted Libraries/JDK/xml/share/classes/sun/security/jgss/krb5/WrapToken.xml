<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="sun.security.krb5.Confounder"/>
        <class name="WrapToken" line="9">
            <extends class="MessageToken"/>
            <javadoc line="9">
                This class represents a token emitted by the GSSContext.wrap()
                  call. It is a MessageToken except that it also contains plaintext
                  or encrypted data at the end. A wrapToken has certain other rules
                  that are peculiar to it and different from a MICToken, which is
                  another type of MessageToken. All data in a WrapToken is prepended
                  by a random counfounder of 8 bytes. All data in a WrapToken is
                  also padded with one to eight bytes where all bytes are equal in
                  value to the number of bytes being padded. Thus, all application
                  data is replaced by (confounder || data || padding).                
                <author>
                    Mayank Upadhyay                    
                </author>
            </javadoc>
            <declaration name="CONFOUNDER_SIZE" type="int" line="22"/>
            <javadoc line="22">
                The size of the random confounder used in a WrapToken.                
            </javadoc>
            <declaration name="pads" type="byte[][]" line="26"/>
            <declaration name="readTokenFromInputStream" type="boolean" line="27"/>
            <declaration name="is" type="InputStream" line="28"/>
            <declaration name="tokenBytes" type="byte[]" line="29"/>
            <declaration name="tokenOffset" type="int" line="30"/>
            <declaration name="tokenLen" type="int" line="31"/>
            <declaration name="dataBytes" type="byte[]" line="32"/>
            <declaration name="dataOffset" type="int" line="33"/>
            <declaration name="dataLen" type="int" line="34"/>
            <declaration name="dataSize" type="int" line="35"/>
            <declaration name="confounder" type="byte[]" line="36"/>
            <declaration name="padding" type="byte[]" line="37"/>
            <declaration name="privacy" type="boolean" line="38"/>
            <javadoc line="39">
                Constructs a WrapToken from token bytes obtained from the
                  peer.                
                <param>
                    context the mechanism context associated with this
                      token                    
                </param>
                <param>
                    tokenBytes the bytes of the token                    
                </param>
                <param>
                    tokenOffset the offset of the token                    
                </param>
                <param>
                    tokenLen the length of the token                    
                </param>
                <param>
                    prop the MessageProp into which characteristics of the
                      parsed token will be stored.                    
                </param>
                <throws>
                    GSSException if the token is defective                    
                </throws>
            </javadoc>
            <method name="WrapToken" type="constructor" line="51">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="tokenBytes" type="byte[]"/>
                    <param name="tokenOffset" type="int"/>
                    <param name="tokenLen" type="int"/>
                    <param name="prop" type="MessageProp"/>
                </params>
            </method>
            <javadoc line="60">
                Constructs a WrapToken from token bytes read on the fly from
                  an InputStream.                
                <param>
                    context the mechanism context associated with this
                      token                    
                </param>
                <param>
                    is the InputStream containing the token bytes                    
                </param>
                <param>
                    prop the MessageProp into which characteristics of the
                      parsed token will be stored.                    
                </param>
                <throws>
                    GSSException if the token is defective or if there is
                      a problem reading from the InputStream                    
                </throws>
            </javadoc>
            <method name="WrapToken" type="constructor" line="71">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="is" type="InputStream"/>
                    <param name="prop" type="MessageProp"/>
                </params>
            </method>
            <javadoc line="77">
                Obtains the application data that was transmitted in this
                  WrapToken.                
                <return>
                    a byte array containing the application data                    
                </return>
                <throws>
                    GSSException if an error occurs while decrypting any
                      cipher text and checking for validity                    
                </throws>
            </javadoc>
            <method name="getData" type="byte[]" line="84">
                <declaration name="temp" type="byte[]" line="85"/>
                <declaration name="retVal" type="byte[]" line="87"/>
            </method>
            <javadoc line="91">
                Obtains the application data that was transmitted in this
                  WrapToken, writing it into an application provided output
                  array.                
                <param>
                    dataBuf the output buffer into which the data must be
                      written                    
                </param>
                <param>
                    dataBufOffset the offset at which to write the data                    
                </param>
                <return>
                    the size of the data written                    
                </return>
                <throws>
                    GSSException if an error occurs while decrypting any
                      cipher text and checking for validity                    
                </throws>
            </javadoc>
            <method name="getData" type="int" line="102">
                <params>
                    <param name="dataBuf" type="byte[]"/>
                    <param name="dataBufOffset" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Helper routine to obtain the application data transmitted in
                  this WrapToken. It is called if the WrapToken was constructed
                  with a byte array as input.                
                <param>
                    dataBuf the output buffer into which the data must be
                      written                    
                </param>
                <param>
                    dataBufOffset the offset at which to write the data                    
                </param>
                <throws>
                    GSSException if an error occurs while decrypting any
                      cipher text and checking for validity                    
                </throws>
            </javadoc>
            <method name="getDataFromBuffer" type="void" line="117">
                <params>
                    <param name="dataBuf" type="byte[]"/>
                    <param name="dataBufOffset" type="int"/>
                </params>
                <declaration name="gssHeader" type="GSSHeader" line="118"/>
                <declaration name="dataPos" type="int" line="119"/>
                <scope line="122"/>
                <scope line="125">
                    <declaration name="padSize" type="int" line="127"/>
                </scope>
            </method>
            <javadoc line="135">
                Helper routine to obtain the application data transmitted in
                  this WrapToken. It is called if the WrapToken was constructed
                  with an Inputstream.                
                <param>
                    dataBuf the output buffer into which the data must be
                      written                    
                </param>
                <param>
                    dataBufOffset the offset at which to write the data                    
                </param>
                <throws>
                    GSSException if an error occurs while decrypting any
                      cipher text and checking for validity                    
                </throws>
            </javadoc>
            <method name="getDataFromStream" type="void" line="145">
                <params>
                    <param name="dataBuf" type="byte[]"/>
                    <param name="dataBufOffset" type="int"/>
                </params>
                <declaration name="gssHeader" type="GSSHeader" line="146"/>
                <scope line="148">
                    <scope line="149"/>
                    <scope line="152">
                        <scope line="154"/>
                        <scope line="158">
                            <declaration name="numBlocks" type="int" line="159"/>
                            <declaration name="offset" type="int" line="160"/>
                            <scope line="161"/>
                            <declaration name="finalBlock" type="byte[]" line="165"/>
                            <declaration name="padSize" type="int" line="167"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="173"/>
            </method>
            <javadoc line="178">
                Helper routine to pick the right padding for a certain length
                  of application data. Every application message has some
                  padding between 1 and 8 bytes.                
                <param>
                    len the length of the application data                    
                </param>
                <return>
                    the padding to be applied                    
                </return>
            </javadoc>
            <method name="getPadding" type="byte[]" line="185">
                <params>
                    <param name="len" type="int"/>
                </params>
                <declaration name="padSize" type="int" line="186"/>
                <scope line="187"/>
                <scope line="190"/>
            </method>
            <method name="WrapToken" type="constructor" line="196">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="prop" type="MessageProp"/>
                    <param name="dataBytes" type="byte[]"/>
                    <param name="dataOffset" type="int"/>
                    <param name="dataLen" type="int"/>
                </params>
            </method>
            <method name="encode" type="void" line="208">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
                <scope line="210"/>
                <scope line="215"/>
            </method>
            <method name="encode" type="byte[]" line="219">
                <declaration name="bos" type="ByteArrayOutputStream" line="220"/>
            </method>
            <method name="encode" type="int" line="224">
                <params>
                    <param name="outToken" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="bos" type="ByteArrayOutputStream" line="225"/>
                <declaration name="header" type="byte[]" line="227"/>
                <scope line="230"/>
                <scope line="237"/>
            </method>
            <method name="getKrb5TokenSize" type="int" line="242"/>
            <method name="getSealAlg" type="int" line="245">
                <params>
                    <param name="conf" type="boolean"/>
                    <param name="qop" type="int"/>
                </params>
                <scope line="246"/>
            </method>
            <method name="getSizeLimit" type="int" line="251">
                <params>
                    <param name="qop" type="int"/>
                    <param name="confReq" type="boolean"/>
                    <param name="maxTokenSize" type="int"/>
                    <param name="ch" type="CipherHelper"/>
                </params>
            </method>
        </class>
    </source>