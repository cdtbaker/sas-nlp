<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="com.sun.security.jgss.InquireType"/>
        <import package="org.ietf.jgss"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.jgss.GSSUtil"/>
        <import package="sun.security.jgss.GSSCaller"/>
        <import package="sun.security.jgss.spi"/>
        <import package="sun.security.jgss.TokenTracker"/>
        <import package="sun.security.krb5"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.security.Provider"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.Key"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.kerberos"/>
        <class name="Krb5Context" line="22">
            <implements interface="GSSContextSpi"/>
            <javadoc line="22">
                Implements the mechanism specific context class for the Kerberos v5
                  GSS-API mechanism.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <author>
                    Ram Marti                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="STATE_NEW" type="int" line="30"/>
            <declaration name="STATE_IN_PROCESS" type="int" line="31"/>
            <declaration name="STATE_DONE" type="int" line="32"/>
            <declaration name="STATE_DELETED" type="int" line="33"/>
            <declaration name="state" type="int" line="34"/>
            <declaration name="credDelegState" type="boolean" line="35"/>
            <declaration name="mutualAuthState" type="boolean" line="36"/>
            <declaration name="replayDetState" type="boolean" line="37"/>
            <declaration name="sequenceDetState" type="boolean" line="38"/>
            <declaration name="confState" type="boolean" line="39"/>
            <declaration name="integState" type="boolean" line="40"/>
            <declaration name="delegPolicyState" type="boolean" line="41"/>
            <declaration name="mySeqNumber" type="int" line="42"/>
            <declaration name="peerSeqNumber" type="int" line="43"/>
            <declaration name="peerTokenTracker" type="TokenTracker" line="44"/>
            <declaration name="cipherHelper" type="CipherHelper" line="45"/>
            <declaration name="mySeqNumberLock" type="Object" line="46"/>
            <declaration name="peerSeqNumberLock" type="Object" line="47"/>
            <declaration name="key" type="EncryptionKey" line="48"/>
            <declaration name="myName" type="Krb5NameElement" line="49"/>
            <declaration name="peerName" type="Krb5NameElement" line="50"/>
            <declaration name="lifetime" type="int" line="51"/>
            <declaration name="initiator" type="boolean" line="52"/>
            <declaration name="channelBinding" type="ChannelBinding" line="53"/>
            <declaration name="myCred" type="Krb5CredElement" line="54"/>
            <declaration name="delegatedCred" type="Krb5CredElement" line="55"/>
            <declaration name="desCipher" type="Cipher" line="56"/>
            <declaration name="serviceCreds" type="Credentials" line="57"/>
            <declaration name="apReq" type="KrbApReq" line="58"/>
            <declaration name="caller" type="GSSCaller" line="59"/>
            <declaration name="DEBUG" type="boolean" line="60"/>
            <javadoc line="61">
                Constructor for Krb5Context to be called on the context initiator&apos;s
                  side.                
            </javadoc>
            <method name="Krb5Context" type="constructor" line="65">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="peerName" type="Krb5NameElement"/>
                    <param name="myCred" type="Krb5CredElement"/>
                    <param name="lifetime" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Constructor for Krb5Context to be called on the context acceptor&apos;s
                  side.                
            </javadoc>
            <method name="Krb5Context" type="constructor" line="77">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="myCred" type="Krb5CredElement"/>
                </params>
            </method>
            <javadoc line="82">
                Constructor for Krb5Context to import a previously exported context.                
            </javadoc>
            <method name="Krb5Context" type="constructor" line="85">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="interProcessToken" type="byte[]"/>
                </params>
            </method>
            <javadoc line="88">
                Method to determine if the context can be exported and then
                  re-imported.                
            </javadoc>
            <method name="isTransferable" type="boolean" line="92"/>
            <javadoc line="95">
                The lifetime remaining for this context.                
            </javadoc>
            <method name="getLifetime" type="int" line="98"/>
            <javadoc line="101">
                Requests the desired lifetime. Can only be used on the context
                  initiator&apos;s side.                
            </javadoc>
            <method name="requestLifetime" type="void" line="105">
                <params>
                    <param name="lifetime" type="int"/>
                </params>
            </method>
            <javadoc line="108">
                Requests that confidentiality be available.                
            </javadoc>
            <method name="requestConf" type="void" line="111">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="114">
                Is confidentiality available?                
            </javadoc>
            <method name="getConfState" type="boolean" line="117"/>
            <javadoc line="120">
                Requests that integrity be available.                
            </javadoc>
            <method name="requestInteg" type="void" line="123">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="126">
                Is integrity available?                
            </javadoc>
            <method name="getIntegState" type="boolean" line="129"/>
            <javadoc line="132">
                Requests that credential delegation be done during context
                  establishment.                
            </javadoc>
            <method name="requestCredDeleg" type="void" line="136">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="139">
                Is credential delegation enabled?                
            </javadoc>
            <method name="getCredDelegState" type="boolean" line="142"/>
            <javadoc line="145">
                Requests that mutual authentication be done during context
                  establishment. Since this is fromm the client&apos;s perspective, it
                  essentially requests that the server be authenticated.                
            </javadoc>
            <method name="requestMutualAuth" type="void" line="150">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="151"/>
            </method>
            <javadoc line="155">
                Is mutual authentication enabled? Since this is from the client&apos;s
                  perspective, it essentially meas that the server is being
                  authenticated.                
            </javadoc>
            <method name="getMutualAuthState" type="boolean" line="160"/>
            <javadoc line="163">
                Requests that replay detection be done on the GSS wrap and MIC
                  tokens.                
            </javadoc>
            <method name="requestReplayDet" type="void" line="167">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="170">
                Is replay detection enabled on the GSS wrap and MIC tokens?
                  We enable replay detection if sequence checking is enabled.                
            </javadoc>
            <method name="getReplayDetState" type="boolean" line="174"/>
            <javadoc line="177">
                Requests that sequence checking be done on the GSS wrap and MIC
                  tokens.                
            </javadoc>
            <method name="requestSequenceDet" type="void" line="181">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="184">
                Is sequence checking enabled on the GSS Wrap and MIC tokens?
                  We enable sequence checking if replay detection is enabled.                
            </javadoc>
            <method name="getSequenceDetState" type="boolean" line="188"/>
            <javadoc line="191">
                Requests that the deleg policy be respected.                
            </javadoc>
            <method name="requestDelegPolicy" type="void" line="194">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="197">
                Is deleg policy respected?                
            </javadoc>
            <method name="getDelegPolicyState" type="boolean" line="200"/>
            <method name="requestAnonymity" type="void" line="203">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <method name="getAnonymityState" type="boolean" line="205"/>
            <javadoc line="208">
                Get the context specific DESCipher instance, invoked in
                  MessageToken.init()                
            </javadoc>
            <method name="getCipherHelper" type="CipherHelper" line="212">
                <params>
                    <param name="ckey" type="EncryptionKey"/>
                </params>
                <declaration name="cipherKey" type="EncryptionKey" line="213"/>
                <scope line="214"/>
            </method>
            <method name="incrementMySequenceNumber" type="int" line="220">
                <declaration name="retVal" type="int" line="221"/>
                <scope line="222"/>
            </method>
            <method name="resetMySequenceNumber" type="void" line="228">
                <params>
                    <param name="seqNumber" type="int"/>
                </params>
                <scope line="229"/>
                <scope line="232"/>
            </method>
            <method name="resetPeerSequenceNumber" type="void" line="236">
                <params>
                    <param name="seqNumber" type="int"/>
                </params>
                <scope line="237"/>
                <scope line="240"/>
            </method>
            <method name="setKey" type="void" line="245">
                <params>
                    <param name="key" type="EncryptionKey"/>
                </params>
            </method>
            <method name="getKey" type="EncryptionKey" line="249"/>
            <javadoc line="252">
                Called on the acceptor side to store the delegated credentials
                  received in the AcceptSecContextToken.                
            </javadoc>
            <method name="setDelegCred" type="void" line="256">
                <params>
                    <param name="delegatedCred" type="Krb5CredElement"/>
                </params>
            </method>
            <method name="setCredDelegState" type="void" line="259">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="setMutualAuthState" type="void" line="262">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="setReplayDetState" type="void" line="265">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="setSequenceDetState" type="void" line="268">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="setConfState" type="void" line="271">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="setIntegState" type="void" line="274">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="setDelegPolicyState" type="void" line="277">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <javadoc line="280">
                Sets the channel bindings to be used during context
                  establishment.                
            </javadoc>
            <method name="setChannelBinding" type="void" line="284">
                <params>
                    <param name="channelBinding" type="ChannelBinding"/>
                </params>
            </method>
            <method name="getChannelBinding" type="ChannelBinding" line="287"/>
            <javadoc line="290">
                Returns the mechanism oid.                
                <return>
                    the Oid of this context                    
                </return>
            </javadoc>
            <method name="getMech" type="Oid" line="294"/>
            <javadoc line="297">
                Returns the context initiator name.                
                <return>
                    initiator name                    
                </return>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="getSrcName" type="GSSNameSpi" line="302"/>
            <javadoc line="305">
                Returns the context acceptor.                
                <return>
                    context acceptor(target) name                    
                </return>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="getTargName" type="GSSNameSpi" line="310"/>
            <javadoc line="313">
                Returns the delegated credential for the context. This
                  is an optional feature of contexts which not all
                  mechanisms will support. A context can be requested to
                  support credential delegation by using the &lt;b&gt;CRED_DELEG&lt;/b&gt;.
                  This is only valid on the acceptor side of the context.                
                <return>
                    GSSCredentialSpi object for the delegated credential                    
                </return>
                <exception>
                    GSSException                    
                </exception>
                <see>
                    GSSContext#getDelegCredState                    
                </see>
            </javadoc>
            <method name="getDelegCred" type="GSSCredentialSpi" line="323"/>
            <javadoc line="328">
                Tests if this is the initiator side of the context.                
                <return>
                    boolean indicating if this is initiator (true)
                      or target (false)                    
                </return>
            </javadoc>
            <method name="isInitiator" type="boolean" line="333"/>
            <javadoc line="336">
                Tests if the context can be used for per-message service.
                  Context may allow the calls to the per-message service
                  functions before being fully established.                
                <return>
                    boolean indicating if per-message methods can
                      be called.                    
                </return>
            </javadoc>
            <method name="isProtReady" type="boolean" line="343"/>
            <javadoc line="346">
                Initiator context establishment call. This method may be
                  required to be called several times. A CONTINUE_NEEDED return
                  call indicates that more calls are needed after the next token
                  is received from the peer.                
                <param>
                    is contains the token received from the peer. On the
                      first call it will be ignored.                    
                </param>
                <return>
                    any token required to be sent to the peer
                      It is responsibility of the caller
                      to send the token to its peer for processing.                    
                </return>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="initSecContext" type="byte[]" line="358">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenSize" type="int"/>
                </params>
                <declaration name="retVal" type="byte[]" line="359"/>
                <declaration name="token" type="InitialToken" line="360"/>
                <declaration name="errorCode" type="int" line="361"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368">
                    <scope line="369">
                        <scope line="372"/>
                        <scope line="375"/>
                        <declaration name="tgt" type="Credentials" line="379"/>
                        <declaration name="acc" type="AccessControlContext" line="381"/>
                        <scope line="382">
                            <declaration name="kerbTicket" type="KerberosTicket" line="383"/>
                            <scope line="384">
                                <anonymous_class line="385">
                                    <method name="run" type="KerberosTicket" line="386"/>
                                </anonymous_class>
                            </scope>
                            <scope line="392">
                                <scope line="393"/>
                            </scope>
                            <scope line="397">
                                <scope line="398"/>
                            </scope>
                        </scope>
                        <scope line="404">
                            <scope line="405"/>
                            <scope line="409">
                                <anonymous_class line="410">
                                    <method name="run" type="Subject" line="411"/>
                                </anonymous_class>
                                <declaration name="subject" type="Subject" line="410"/>
                                <scope line="416">
                                    <declaration name="kt" type="KerberosTicket" line="417"/>
                                    <anonymous_class line="418">
                                        <method name="run" type="Void" line="419"/>
                                    </anonymous_class>
                                </scope>
                                <scope line="426">
                                    <scope line="427"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="438"/>
                        <scope line="441"/>
                    </scope>
                    <scope line="445"/>
                    <scope line="451">
                        <scope line="452"/>
                    </scope>
                </scope>
                <scope line="457">
                    <scope line="458"/>
                    <declaration name="gssException" type="GSSException" line="461"/>
                </scope>
                <scope line="465">
                    <declaration name="gssException" type="GSSException" line="466"/>
                </scope>
            </method>
            <method name="isEstablished" type="boolean" line="472"/>
            <javadoc line="475">
                Acceptor&apos;s context establishment call. This method may be
                  required to be called several times. A CONTINUE_NEEDED return
                  call indicates that more calls are needed after the next token
                  is received from the peer.                
                <param>
                    is contains the token received from the peer.                    
                </param>
                <return>
                    any token required to be sent to the peer
                      It is responsibility of the caller
                      to send the token to its peer for processing.                    
                </return>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="acceptSecContext" type="byte[]" line="486">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenSize" type="int"/>
                </params>
                <declaration name="retVal" type="byte[]" line="487"/>
                <scope line="488"/>
                <scope line="491"/>
                <scope line="494">
                    <scope line="495">
                        <scope line="497"/>
                        <scope line="500"/>
                        <declaration name="secretKeys" type="EncryptionKey[]" line="505"/>
                        <declaration name="token" type="InitSecContextToken" line="506"/>
                        <declaration name="clientName" type="PrincipalName" line="507"/>
                        <scope line="509"/>
                    </scope>
                    <scope line="515">
                        <scope line="516"/>
                    </scope>
                </scope>
                <scope line="521">
                    <declaration name="gssException" type="GSSException" line="522"/>
                </scope>
                <scope line="526">
                    <scope line="527"/>
                    <declaration name="gssException" type="GSSException" line="530"/>
                </scope>
            </method>
            <javadoc line="536">
                Queries the context for largest data size to accomodate
                  the specified protection and be &lt;= maxTokSize.                
                <param>
                    qop the quality of protection that the context will be
                      asked to provide.                    
                </param>
                <param>
                    confReq a flag indicating whether confidentiality will be
                      requested or not                    
                </param>
                <param>
                    outputSize the maximum size of the output token                    
                </param>
                <return>
                    the maximum size for the input message that can be
                      provided to the wrap() method in order to guarantee that these
                      requirements are met.                    
                </return>
                <throws>
                    GSSException                    
                </throws>
            </javadoc>
            <method name="getWrapSizeLimit" type="int" line="549">
                <params>
                    <param name="qop" type="int"/>
                    <param name="confReq" type="boolean"/>
                    <param name="maxTokSize" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="550"/>
                <scope line="551"/>
                <scope line="554"/>
            </method>
            <method name="wrap" type="byte[]" line="559">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="560"/>
                <declaration name="encToken" type="byte[]" line="564"/>
                <scope line="565">
                    <scope line="566">
                        <declaration name="token" type="WrapToken" line="567"/>
                    </scope>
                    <scope line="570">
                        <declaration name="token" type="WrapToken_v2" line="571"/>
                    </scope>
                    <scope line="574"/>
                </scope>
                <scope line="579">
                    <declaration name="gssException" type="GSSException" line="581"/>
                </scope>
            </method>
            <method name="wrap" type="int" line="586">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="inOffset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="retVal" type="int" line="588"/>
                <scope line="589">
                    <scope line="590">
                        <declaration name="token" type="WrapToken" line="591"/>
                    </scope>
                    <scope line="594">
                        <declaration name="token" type="WrapToken_v2" line="595"/>
                    </scope>
                    <scope line="598"/>
                </scope>
                <scope line="603">
                    <declaration name="gssException" type="GSSException" line="605"/>
                </scope>
            </method>
            <method name="wrap" type="void" line="610">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="encToken" type="byte[]" line="612"/>
                <scope line="613">
                    <scope line="614">
                        <declaration name="token" type="WrapToken" line="615"/>
                        <scope line="617"/>
                    </scope>
                    <scope line="621">
                        <declaration name="token" type="WrapToken_v2" line="622"/>
                        <scope line="624"/>
                    </scope>
                </scope>
                <scope line="629">
                    <declaration name="gssException" type="GSSException" line="630"/>
                </scope>
                <scope line="634"/>
            </method>
            <method name="wrap" type="void" line="638">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="data" type="byte[]" line="639"/>
                <scope line="640"/>
                <scope line="644">
                    <declaration name="gssException" type="GSSException" line="645"/>
                </scope>
            </method>
            <method name="unwrap" type="byte[]" line="651">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="652"/>
                <scope line="655"/>
                <declaration name="data" type="byte[]" line="658"/>
                <scope line="659">
                    <declaration name="token" type="WrapToken" line="660"/>
                </scope>
                <scope line="664">
                    <declaration name="token" type="WrapToken_v2" line="665"/>
                </scope>
                <scope line="669"/>
            </method>
            <method name="unwrap" type="int" line="674">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="inOffset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="676">
                    <declaration name="token" type="WrapToken" line="677"/>
                </scope>
                <scope line="681">
                    <declaration name="token" type="WrapToken_v2" line="682"/>
                </scope>
            </method>
            <method name="unwrap" type="int" line="688">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="len" type="int" line="690"/>
                <scope line="691">
                    <declaration name="token" type="WrapToken" line="692"/>
                </scope>
                <scope line="696">
                    <declaration name="token" type="WrapToken_v2" line="697"/>
                </scope>
            </method>
            <method name="unwrap" type="void" line="703">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="data" type="byte[]" line="705"/>
                <scope line="706">
                    <declaration name="token" type="WrapToken" line="707"/>
                </scope>
                <scope line="711">
                    <declaration name="token" type="WrapToken_v2" line="712"/>
                </scope>
                <scope line="716"/>
                <scope line="719">
                    <declaration name="gssException" type="GSSException" line="720"/>
                </scope>
            </method>
            <method name="getMIC" type="byte[]" line="725">
                <params>
                    <param name="inMsg" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="micToken" type="byte[]" line="726"/>
                <scope line="727">
                    <scope line="728">
                        <declaration name="token" type="MicToken" line="729"/>
                    </scope>
                    <scope line="732">
                        <declaration name="token" type="MicToken_v2" line="733"/>
                    </scope>
                </scope>
                <scope line="738">
                    <declaration name="gssException" type="GSSException" line="740"/>
                </scope>
            </method>
            <method name="getMIC" type="int" line="745">
                <params>
                    <param name="inMsg" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="retVal" type="int" line="746"/>
                <scope line="747">
                    <scope line="748">
                        <declaration name="token" type="MicToken" line="749"/>
                    </scope>
                    <scope line="752">
                        <declaration name="token" type="MicToken_v2" line="753"/>
                    </scope>
                </scope>
                <scope line="758">
                    <declaration name="gssException" type="GSSException" line="760"/>
                </scope>
            </method>
            <method name="getMIC" type="void" line="765">
                <params>
                    <param name="inMsg" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="766">
                    <scope line="767">
                        <declaration name="token" type="MicToken" line="768"/>
                    </scope>
                    <scope line="771">
                        <declaration name="token" type="MicToken_v2" line="772"/>
                    </scope>
                </scope>
                <scope line="776">
                    <declaration name="gssException" type="GSSException" line="777"/>
                </scope>
            </method>
            <method name="getMIC" type="void" line="782">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="data" type="byte[]" line="783"/>
                <scope line="784"/>
                <scope line="788">
                    <declaration name="gssException" type="GSSException" line="789"/>
                </scope>
            </method>
            <method name="verifyMIC" type="void" line="795">
                <params>
                    <param name="inTok" type="byte[]"/>
                    <param name="tokOffset" type="int"/>
                    <param name="tokLen" type="int"/>
                    <param name="inMsg" type="byte[]"/>
                    <param name="msgOffset" type="int"/>
                    <param name="msgLen" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="796">
                    <declaration name="token" type="MicToken" line="797"/>
                </scope>
                <scope line="801">
                    <declaration name="token" type="MicToken_v2" line="802"/>
                </scope>
            </method>
            <method name="verifyMIC" type="void" line="807">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="inMsg" type="byte[]"/>
                    <param name="msgOffset" type="int"/>
                    <param name="msgLen" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="808">
                    <declaration name="token" type="MicToken" line="809"/>
                </scope>
                <scope line="813">
                    <declaration name="token" type="MicToken_v2" line="814"/>
                </scope>
            </method>
            <method name="verifyMIC" type="void" line="819">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="msgStr" type="InputStream"/>
                    <param name="mProp" type="MessageProp"/>
                </params>
                <declaration name="msg" type="byte[]" line="820"/>
                <scope line="821"/>
                <scope line="825">
                    <declaration name="gssException" type="GSSException" line="826"/>
                </scope>
            </method>
            <javadoc line="832">
                Produces a token representing this context. After this call
                  the context will no longer be usable until an import is
                  performed on the returned token.                
                <param>
                    os the output token will be written to this stream                    
                </param>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="export" type="byte[]" line="839"/>
            <javadoc line="842">
                Releases context resources and terminates the
                  context between 2 peer.                
                <exception>
                    GSSException with major codes NO_CONTEXT, FAILURE.                    
                </exception>
            </javadoc>
            <method name="dispose" type="void" line="847"/>
            <method name="getProvider" type="Provider" line="851"/>
            <javadoc line="854">
                Sets replay and sequencing information for a message token received
                  form the peer.                
            </javadoc>
            <method name="setSequencingAndReplayProps" type="void" line="858">
                <params>
                    <param name="token" type="MessageToken"/>
                    <param name="prop" type="MessageProp"/>
                </params>
                <scope line="859">
                    <declaration name="seqNum" type="int" line="860"/>
                </scope>
            </method>
            <javadoc line="864">
                Sets replay and sequencing information for a message token received
                  form the peer.                
            </javadoc>
            <method name="setSequencingAndReplayProps" type="void" line="868">
                <params>
                    <param name="token" type="MessageToken_v2"/>
                    <param name="prop" type="MessageProp"/>
                </params>
                <scope line="869">
                    <declaration name="seqNum" type="int" line="870"/>
                </scope>
            </method>
            <method name="checkPermission" type="void" line="874">
                <params>
                    <param name="principal" type="String"/>
                    <param name="action" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="875"/>
                <scope line="876">
                    <declaration name="perm" type="ServicePermission" line="877"/>
                </scope>
            </method>
            <method name="getHexBytes" type="String" line="881">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="882"/>
                <scope line="883">
                    <declaration name="b1" type="int" line="884"/>
                    <declaration name="b2" type="int" line="885"/>
                </scope>
            </method>
            <method name="printState" type="String" line="892">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getCaller" type="GSSCaller" line="906"/>
            <class name="KerberosSessionKey" line="909">
                <implements interface="Key"/>
                <javadoc line="909">
                    The session key returned by inquireSecContext(KRB5_INQ_SSPI_SESSION_KEY)                    
                </javadoc>
                <declaration name="key" type="EncryptionKey" line="913"/>
                <method name="KerberosSessionKey" type="constructor" line="914">
                    <params>
                        <param name="key" type="EncryptionKey"/>
                    </params>
                </method>
                <method name="getAlgorithm" type="String" line="917"/>
                <method name="getFormat" type="String" line="920"/>
                <method name="getEncoded" type="byte[]" line="923"/>
                <method name="toString" type="String" line="926"/>
            </class>
            <javadoc line="930">
                Return the mechanism-specific attribute associated with {@code type}.                
            </javadoc>
            <method name="inquireSecContext" type="Object" line="933">
                <params>
                    <param name="type" type="InquireType"/>
                </params>
                <scope line="934"/>
                <scope line="943"/>
                <scope line="946"/>
            </method>
            <declaration name="tktFlags" type="boolean[]" line="954"/>
            <declaration name="authTime" type="String" line="955"/>
            <declaration name="authzData" type="com.sun.security.jgss.AuthorizationDataEntry[]" line="956"/>
            <method name="setTktFlags" type="void" line="957">
                <params>
                    <param name="tktFlags" type="boolean[]"/>
                </params>
            </method>
            <method name="setAuthTime" type="void" line="960">
                <params>
                    <param name="authTime" type="String"/>
                </params>
            </method>
            <method name="setAuthzData" type="void" line="963">
                <params>
                    <param name="authzData" type="com.sun.security.jgss.AuthorizationDataEntry[]"/>
                </params>
            </method>
        </class>
    </source>