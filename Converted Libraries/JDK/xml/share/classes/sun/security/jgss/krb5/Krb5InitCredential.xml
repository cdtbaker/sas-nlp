<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss.GSSCaller"/>
        <import package="sun.security.jgss.spi"/>
        <import package="sun.security.krb5"/>
        <import package="sun.security.krb5.Config"/>
        <import package="javax.security.auth.kerberos"/>
        <import package="java.net.InetAddress"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Date"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <class name="Krb5InitCredential" line="42">
            <extends class="KerberosTicket"/>
            <comment line="287">
                XXX Call to this.refresh() should refresh the locally cached copy
                 of krb5Credentials also.                
            </comment>
            <comment line="306">
                XXX call to this.destroy() should destroy the locally cached copy                
            </comment>
            <comment line="307">
                of krb5Credentials and then call super.destroy().                
            </comment>
            <implements interface="Krb5CredElement"/>
            <javadoc line="42">
                Implements the krb5 initiator credential element.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <author>
                    Ram Marti                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <declaration name="name" type="Krb5NameElement" line="56"/>
            <declaration name="krb5Credentials" type="Credentials" line="57"/>
            <method name="Krb5InitCredential" type="constructor" line="71">
                <params>
                    <param name="name" type="Krb5NameElement"/>
                    <param name="asn1Encoding" type="byte[]"/>
                    <param name="client" type="KerberosPrincipal"/>
                    <param name="server" type="KerberosPrincipal"/>
                    <param name="sessionKey" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="flags" type="boolean[]"/>
                    <param name="authTime" type="Date"/>
                    <param name="startTime" type="Date"/>
                    <param name="endTime" type="Date"/>
                    <param name="renewTill" type="Date"/>
                    <param name="clientAddresses" type="InetAddress[]"/>
                </params>
                <comment line="87">
                    Cache this for later use by the sun.security.krb5 package.                    
                </comment>
                <scope line="86"/>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <method name="Krb5InitCredential" type="constructor" line="122">
                <params>
                    <param name="name" type="Krb5NameElement"/>
                    <param name="delegatedCred" type="Credentials"/>
                    <param name="asn1Encoding" type="byte[]"/>
                    <param name="client" type="KerberosPrincipal"/>
                    <param name="server" type="KerberosPrincipal"/>
                    <param name="sessionKey" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="flags" type="boolean[]"/>
                    <param name="authTime" type="Date"/>
                    <param name="startTime" type="Date"/>
                    <param name="endTime" type="Date"/>
                    <param name="renewTill" type="Date"/>
                    <param name="clientAddresses" type="InetAddress[]"/>
                </params>
                <comment line="136">
                    A delegated cred does not have all fields set. So do not try to                    
                </comment>
                <comment line="137">
                    creat new Credentials out of the delegatedCred.                    
                </comment>
            </method>
            <method name="getInstance" type="Krb5InitCredential" line="143">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="name" type="Krb5NameElement"/>
                    <param name="initLifetime" type="int"/>
                </params>
                <declaration name="tgt" type="KerberosTicket" line="145"/>
                <scope line="150">
                    <declaration name="fullName" type="String" line="151"/>
                </scope>
            </method>
            <method name="getInstance" type="Krb5InitCredential" line="172">
                <params>
                    <param name="name" type="Krb5NameElement"/>
                    <param name="delegatedCred" type="Credentials"/>
                </params>
                <comment line="176">
                    all of the following data is optional in a KRB-CRED
                     messages. This check for each field.                    
                </comment>
                <comment line="196">
                    XXX Compare name to credName                    
                </comment>
                <declaration name="sessionKey" type="EncryptionKey" line="174"/>
                <declaration name="cPrinc" type="PrincipalName" line="181"/>
                <declaration name="sPrinc" type="PrincipalName" line="182"/>
                <declaration name="client" type="KerberosPrincipal" line="184"/>
                <declaration name="server" type="KerberosPrincipal" line="185"/>
                <declaration name="credName" type="Krb5NameElement" line="187"/>
                <scope line="189">
                    <declaration name="fullName" type="String" line="190"/>
                </scope>
                <scope line="198"/>
            </method>
            <javadoc line="219">
                Returns the principal name for this credential. The name
                  is in mechanism specific format.                
                <return>
                    GSSNameSpi representing principal name of this credential                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="getName" type="GSSNameSpi" line="226"/>
            <javadoc line="230">
                Returns the init lifetime remaining.                
                <return>
                    the init lifetime remaining in seconds                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="getInitLifetime" type="int" line="236">
                <declaration name="retVal" type="int" line="237"/>
            </method>
            <javadoc line="244">
                Returns the accept lifetime remaining.                
                <return>
                    the accept lifetime remaining in seconds                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="getAcceptLifetime" type="int" line="250"/>
            <method name="isInitiatorCredential" type="boolean" line="254"/>
            <method name="isAcceptorCredential" type="boolean" line="258"/>
            <javadoc line="262">
                Returns the oid representing the underlying credential
                  mechanism oid.                
                <return>
                    the Oid for this credential mechanism                    
                </return>
                <exception>
                    GSSException may be thrown                    
                </exception>
            </javadoc>
            <method name="getMechanism" type="Oid" line="269"/>
            <method name="getProvider" type="java.security.Provider" line="273"/>
            <javadoc line="278">
                Returns a sun.security.krb5.Credentials instance so that it maybe
                  used in that package for th Kerberos protocol.                
            </javadoc>
            <method name="getKrb5Credentials" type="Credentials" line="282"/>
            <javadoc line="291">
                Called to invalidate this credential element.                
            </javadoc>
            <method name="dispose" type="void" line="294">
                <scope line="295"/>
                <scope line="297">
                    <declaration name="gssException" type="GSSException" line="298"/>
                </scope>
            </method>
            <method name="getTgt" type="KerberosTicket" line="310">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="name" type="Krb5NameElement"/>
                    <param name="initLifetime" type="int"/>
                </params>
                <comment line="315">
                    Find the TGT for the realm that the client is in. If the client
                     name is not available, then use the default realm.                    
                </comment>
                <declaration name="realm" type="String" line="312"/>
                <declaration name="clientPrincipal" type="String" line="313"/>
                <scope line="319"/>
                <scope line="322">
                    <scope line="324">
                        <declaration name="config" type="Config" line="325"/>
                    </scope>
                    <scope line="327">
                        <declaration name="ge" type="GSSException" line="328"/>
                    </scope>
                </scope>
                <declaration name="acc" type="AccessControlContext" line="337"/>
                <scope line="339">
                    <declaration name="realCaller" type="GSSCaller" line="340"/>
                    <anonymous_class line="344">
                        <method name="run" type="KerberosTicket" line="345"/>
                    </anonymous_class>
                </scope>
                <scope line="350">
                    <declaration name="ge" type="GSSException" line="351"/>
                </scope>
            </method>
        </class>
    </source>