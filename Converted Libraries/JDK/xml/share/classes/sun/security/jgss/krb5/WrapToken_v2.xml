<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.util.Arrays"/>
        <import package="sun.security.krb5.Confounder"/>
        <class name="WrapToken_v2" line="37">
            <extends class="MessageToken_v2"/>
            <comment line="51">
                Accessed by CipherHelper                
            </comment>
            <comment line="224">
                This implementation is way to conservative. And it certainly                
            </comment>
            <comment line="225">
                doesn&apos;t return the maximum limit.                
            </comment>
            <javadoc line="37">
                This class represents the new format of GSS tokens, as specified in RFC
                  4121, emitted by the GSSContext.wrap() call. It is a MessageToken except
                  that it also contains plaintext or encrypted data at the end. A WrapToken
                  has certain other rules that are peculiar to it and different from a
                  MICToken, which is another type of MessageToken. All data in a WrapToken is
                  prepended by a random confounder of 16 bytes. Thus, all application data
                  is replaced by (confounder || data || tokenHeader || checksum).                
                <author>
                    Seema Malkani                    
                </author>
            </javadoc>
            <declaration name="confounder" type="byte[]" line="51"/>
            <declaration name="privacy" type="boolean" line="53"/>
            <javadoc line="55">
                Constructs a WrapToken from token bytes obtained from the
                  peer.                
                <param>
                    context the mechanism context associated with this
                      token                    
                </param>
                <param>
                    tokenBytes the bytes of the token                    
                </param>
                <param>
                    tokenOffset the offset of the token                    
                </param>
                <param>
                    tokenLen the length of the token                    
                </param>
                <param>
                    prop the MessageProp into which characteristics of the
                      parsed token will be stored.                    
                </param>
                <throws>
                    GSSException if the token is defective                    
                </throws>
            </javadoc>
            <method name="WrapToken_v2" type="constructor" line="69">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="tokenBytes" type="byte[]"/>
                    <param name="tokenOffset" type="int"/>
                    <param name="tokenLen" type="int"/>
                    <param name="prop" type="MessageProp"/>
                </params>
            </method>
            <javadoc line="76">
                Constructs a WrapToken from token bytes read on the fly from
                  an InputStream.                
                <param>
                    context the mechanism context associated with this
                      token                    
                </param>
                <param>
                    is the InputStream containing the token bytes                    
                </param>
                <param>
                    prop the MessageProp into which characteristics of the
                      parsed token will be stored.                    
                </param>
                <throws>
                    GSSException if the token is defective or if there is
                      a problem reading from the InputStream                    
                </throws>
            </javadoc>
            <method name="WrapToken_v2" type="constructor" line="89">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="is" type="InputStream"/>
                    <param name="prop" type="MessageProp"/>
                </params>
            </method>
            <javadoc line="95">
                Obtains the application data that was transmitted in this
                  WrapToken.                
                <return>
                    a byte array containing the application data                    
                </return>
                <throws>
                    GSSException if an error occurs while decrypting any
                      cipher text and checking for validity                    
                </throws>
            </javadoc>
            <method name="getData" type="byte[]" line="102">
                <declaration name="temp" type="byte[]" line="104"/>
                <declaration name="len" type="int" line="105"/>
            </method>
            <javadoc line="109">
                Obtains the application data that was transmitted in this
                  WrapToken, writing it into an application provided output
                  array.                
                <param>
                    dataBuf the output buffer into which the data must be
                      written                    
                </param>
                <param>
                    dataBufOffset the offset at which to write the data                    
                </param>
                <return>
                    the size of the data written                    
                </return>
                <throws>
                    GSSException if an error occurs while decrypting any
                      cipher text and checking for validity                    
                </throws>
            </javadoc>
            <method name="getData" type="int" line="121">
                <params>
                    <param name="dataBuf" type="byte[]"/>
                    <param name="dataBufOffset" type="int"/>
                </params>
                <comment line="123">
                    debug(&quot;WrapToken cons: data is token is [&quot; +                    
                </comment>
                <comment line="124">
                    getHexBytes(tokenBytes, tokenOffset, tokenLen) + &quot;]\n&quot;);                    
                </comment>
                <comment line="126">
                    Do decryption if this token was privacy protected.                    
                </comment>
                <comment line="129">
                    decrypt data                    
                </comment>
                <comment line="137">
                    Token data is in cleartext                    
                </comment>
                <comment line="138">
                    debug(&quot;\t\tNo encryption was performed by peer.\n&quot;);                    
                </comment>
                <comment line="140">
                    data                    
                </comment>
                <comment line="145">
                    debug(&quot;\t\tData is: &quot; + getHexBytes(dataBuf, data_length));                    
                </comment>
                <comment line="147">
                    Make sure checksum is not corrupt                    
                </comment>
                <scope line="127"/>
                <scope line="135">
                    <declaration name="data_length" type="int" line="141"/>
                    <scope line="150"/>
                </scope>
            </method>
            <javadoc line="158">
                Writes a WrapToken_v2 object                
            </javadoc>
            <method name="WrapToken_v2" type="constructor" line="163">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="prop" type="MessageProp"/>
                    <param name="dataBytes" type="byte[]"/>
                    <param name="dataOffset" type="int"/>
                    <param name="dataLen" type="int"/>
                </params>
                <comment line="169">
                    debug(&quot;\nWrapToken cons: data to wrap is [&quot; +                    
                </comment>
                <comment line="170">
                    getHexBytes(confounder) + &quot; &quot; +                    
                </comment>
                <comment line="171">
                    getHexBytes(dataBytes, dataOffset, dataLen) + &quot;]\n&quot;);                    
                </comment>
                <comment line="175">
                    If the application decides to ask for privacy when the context
                     did not negotiate for it, do not provide it. The peer might not
                     have support for it. The app will realize this with a call to
                     pop.getPrivacy() after wrap().                    
                </comment>
                <comment line="187">
                    Wrap Tokens (without confidentiality) =                    
                </comment>
                <comment line="188">
                    { 16 byte token_header | plaintext | 12-byte HMAC }                    
                </comment>
                <comment line="189">
                    where HMAC is on { plaintext | token_header }                    
                </comment>
                <comment line="195">
                    Wrap Tokens (with confidentiality) =                    
                </comment>
                <comment line="196">
                    { 16 byte token_header |                    
                </comment>
                <comment line="197">
                    Encrypt(16-byte confounder | plaintext | token_header) |                    
                </comment>
                <comment line="198">
                    12-byte HMAC }                    
                </comment>
                <scope line="186"/>
                <scope line="194"/>
            </method>
            <method name="encode" type="void" line="205">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="encode" type="byte[]" line="210">
                <declaration name="bos" type="ByteArrayOutputStream" line="211"/>
            </method>
            <method name="encode" type="int" line="217">
                <params>
                    <param name="outToken" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="token" type="byte[]" line="218"/>
            </method>
            <method name="getSizeLimit" type="int" line="226">
                <params>
                    <param name="qop" type="int"/>
                    <param name="confReq" type="boolean"/>
                    <param name="maxTokenSize" type="int"/>
                    <param name="ch" type="CipherHelper"/>
                </params>
                <comment line="229">
                                        
                </comment>
            </method>
        </class>
    </source>