<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss.spi"/>
        <import package="javax.security.auth.kerberos"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.ServiceName"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.security.Provider"/>
        <class name="Krb5NameElement" line="39">
            <comment line="53">
                XXX Move this concept into PrincipalName&apos;s asn1Encode() sometime                
            </comment>
            <implements interface="GSSNameSpi"/>
            <javadoc line="39">
                Implements the GSSNameSpi for the krb5 mechanism.                
                <author>
                    Mayank Upadhyay                    
                </author>
            </javadoc>
            <declaration name="krb5PrincipalName" type="PrincipalName" line="47"/>
            <declaration name="gssNameStr" type="String" line="49"/>
            <declaration name="gssNameType" type="Oid" line="50"/>
            <declaration name="CHAR_ENCODING" type="String" line="53"/>
            <method name="Krb5NameElement" type="constructor" line="57">
                <params>
                    <param name="principalName" type="PrincipalName"/>
                    <param name="gssNameStr" type="String"/>
                    <param name="gssNameType" type="Oid"/>
                </params>
            </method>
            <javadoc line="63">
                Instantiates a new Krb5NameElement object. Internally it stores the
                  information provided by the input parameters so that they may later
                  be used for output when a printable representaion of this name is
                  needed in GSS-API format rather than in Kerberos format.                
            </javadoc>
            <method name="getInstance" type="Krb5NameElement" line="71">
                <params>
                    <param name="gssNameStr" type="String"/>
                    <param name="gssNameType" type="Oid"/>
                </params>
                <comment line="73">
                    A null gssNameType implies that the mechanism default
                     Krb5MechFactory.NT_GSS_KRB5_PRINCIPAL be used.                    
                </comment>
                <comment line="99">
                    We have forms of GSS name strings that can come in:
                    
                     1. names of the form &quot;foo&quot; with just one
                     component. (This might include a &quot;@&quot; but only in escaped
                     form like &quot;\@&quot;)
                     2. names of the form &quot;foo@bar&quot; with two components
                    
                     The nametypes that are accepted are NT_USER_NAME, and
                     NT_HOSTBASED_SERVICE.                    
                </comment>
                <declaration name="principalName" type="PrincipalName" line="88"/>
                <scope line="89">
                    <scope line="92"/>
                    <scope line="95">
                        <declaration name="components" type="String[]" line="97"/>
                        <scope line="114">
                            <declaration name="hostName" type="String" line="115"/>
                            <declaration name="service" type="String" line="116"/>
                            <declaration name="principal" type="String" line="120"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="126"/>
            </method>
            <method name="getInstance" type="Krb5NameElement" line="133">
                <params>
                    <param name="principalName" type="PrincipalName"/>
                </params>
            </method>
            <method name="getComponents" type="String[]" line="140">
                <params>
                    <param name="gssNameStr" type="String"/>
                </params>
                <comment line="144">
                    XXX Perhaps provide this parsing code in PrincipalName                    
                </comment>
                <comment line="146">
                    Look for @ as in service@host                    
                </comment>
                <comment line="147">
                    Assumes host name will not have an escaped &apos;@&apos;                    
                </comment>
                <comment line="150">
                    Not really a separator if it is escaped. Then this is just part                    
                </comment>
                <comment line="151">
                    of the principal name or service name                    
                </comment>
                <comment line="154">
                    Is the `\` character escaped itself?                    
                </comment>
                <declaration name="retVal" type="String[]" line="142"/>
                <declaration name="separatorPos" type="int" line="148"/>
                <scope line="153"/>
                <scope line="160">
                    <declaration name="serviceName" type="String" line="161"/>
                    <declaration name="hostName" type="String" line="162"/>
                </scope>
                <scope line="164"/>
            </method>
            <method name="getHostBasedInstance" type="String" line="174">
                <params>
                    <param name="serviceName" type="String"/>
                    <param name="hostName" type="String"/>
                </params>
                <comment line="178">
                    A lack of &quot;@&quot; defaults to the service being on the local                    
                </comment>
                <comment line="179">
                    host as per RFC 2743                    
                </comment>
                <comment line="180">
                    XXX Move this part into JGSS framework                    
                </comment>
                <comment line="185">
                    use hostname as it is                    
                </comment>
                <declaration name="temp" type="StringBuffer" line="175"/>
                <scope line="177"/>
                <scope line="184"/>
            </method>
            <method name="getKrb5PrincipalName" type="PrincipalName" line="193"/>
            <javadoc line="197">
                Equal method for the GSSNameSpi objects.
                  If either name denotes an anonymous principal, the call should
                  return false.                
                <param>
                    name to be compared with                    
                </param>
                <returns>
                    true if they both refer to the same entity, else false                    
                </returns>
                <exception>
                    GSSException with major codes of BAD_NAMETYPE,
                      BAD_NAME, FAILURE                    
                </exception>
            </javadoc>
            <method name="equals" type="boolean" line="207">
                <params>
                    <param name="other" type="GSSNameSpi"/>
                </params>
                <scope line="212">
                    <declaration name="that" type="Krb5NameElement" line="213"/>
                </scope>
            </method>
            <javadoc line="220">
                Compares this &lt;code&gt;GSSNameSpi&lt;/code&gt; object to another Object
                  that might be a &lt;code&gt;GSSNameSpi&lt;/code&gt;. The behaviour is exactly
                  the same as in {@link #equals(GSSNameSpi) equals} except that
                  no GSSException is thrown; instead, false will be returned in the
                  situation where an error occurs.                
                <param>
                    another the object to be compared to                    
                </param>
                <returns>
                    true if they both refer to the same entity, else false                    
                </returns>
                <see>
                    #equals(GSSNameSpi)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="231">
                <params>
                    <param name="another" type="Object"/>
                </params>
                <comment line="240">
                    ignore exception                    
                </comment>
                <scope line="232"/>
                <scope line="236"/>
                <scope line="239"/>
            </method>
            <javadoc line="245">
                Returns a hashcode value for this GSSNameSpi.                
                <return>
                    a hashCode value                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="250"/>
            <javadoc line="255">
                Returns the principal name in the form user@REALM or
                  host/service@REALM but with the following contraints that are
                  imposed by RFC 1964:
                  &lt;pre&gt;
                  (1) all occurrences of the characters `@`,  `/`, and `\` within
                  principal components or realm names shall be quoted with an
                  immediately-preceding `\`.
                  (2) all occurrences of the null, backspace, tab, or newline
                  characters within principal components or realm names will be
                  represented, respectively, with `\0`, `\b`, `\t`, or `\n`.
                  (3) the `\` quoting character shall not be emitted within an
                  exported name except to accomodate cases (1) and (2).
                  &lt;/pre&gt;                
            </javadoc>
            <method name="export" type="byte[]" line="272">
                <comment line="273">
                    XXX Apply the above constraints.                    
                </comment>
                <comment line="278">
                    Can&apos;t happen                    
                </comment>
                <declaration name="retVal" type="byte[]" line="274"/>
                <scope line="275"/>
                <scope line="277"/>
            </method>
            <javadoc line="283">
                Get the mechanism type that this NameElement corresponds to.                
                <return>
                    the Oid of the mechanism type                    
                </return>
            </javadoc>
            <method name="getMechanism" type="Oid" line="288"/>
            <javadoc line="292">
                Returns a string representation for this name. The printed
                  name type can be obtained by calling getStringNameType().                
                <return>
                    string form of this name                    
                </return>
                <see>
                    #getStringNameType()                    
                </see>
                <overrides>
                    Object#toString                    
                </overrides>
            </javadoc>
            <method name="toString" type="String" line="300">
                <comment line="302">
                    For testing: return (super.toString());                    
                </comment>
            </method>
            <javadoc line="305">
                Returns the name type oid.                
            </javadoc>
            <method name="getGSSNameType" type="Oid" line="308"/>
            <javadoc line="312">
                Returns the oid describing the format of the printable name.                
                <return>
                    the Oid for the format of the printed name                    
                </return>
            </javadoc>
            <method name="getStringNameType" type="Oid" line="317">
                <comment line="318">
                    XXX For NT_EXPORT_NAME return a different name type. Infact,                    
                </comment>
                <comment line="319">
                    don&apos;t even store NT_EXPORT_NAME in the cons.                    
                </comment>
            </method>
            <javadoc line="323">
                Indicates if this name object represents an Anonymous name.                
            </javadoc>
            <method name="isAnonymousName" type="boolean" line="326"/>
            <method name="getProvider" type="Provider" line="330"/>
        </class>
    </source>