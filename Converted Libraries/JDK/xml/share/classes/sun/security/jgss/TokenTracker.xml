<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss">
        <import package="org.ietf.jgss.MessageProp"/>
        <import package="java.util.LinkedList"/>
        <class name="TokenTracker" line="4">
            <javadoc line="4">
                A utility class that implements a number list that keeps track of which
                  tokens have arrived by storing their token numbers in the list. It helps
                  detect old tokens, out of sequence tokens, and duplicate tokens.
                  Each element of the list is an interval [a, b]. Its existence in the
                  list implies that all token numbers in the range a, a+1, ..., b-1, b
                  have arrived. Gaps in arrived token numbers are represented by the
                  numbers that fall in between two elements of the list. eg. {[a,b],
                  [c,d]} indicates that the token numbers b+1, ..., c-1 have not arrived
                  yet.
                  The maximum number of intervals that we keep track of is
                  MAX_INTERVALS. Thus if there are too many gaps, then some of the older
                  sequence numbers are deleted from the list. The earliest sequence number
                  that exists in the list is the windowStart. The next expected sequence
                  number, or expectedNumber, is one greater than the latest sequence
                  number in the list.
                  The list keeps track the first token number that should have arrived
                  (initNumber) so that it is able to detect if certain numbers occur after
                  the first valid token number but before windowStart. That would happen
                  if the number of elements (intervals) exceeds MAX_INTERVALS and some
                  initial elements had  to be deleted.
                  The working of the list is optimized for the normal case where the
                  tokens arrive in sequence.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="MAX_INTERVALS" type="int" line="31"/>
            <declaration name="initNumber" type="int" line="32"/>
            <declaration name="windowStart" type="int" line="33"/>
            <declaration name="expectedNumber" type="int" line="34"/>
            <declaration name="windowStartIndex" type="int" line="35"/>
            <declaration name="list" type="LinkedList&lt;Entry&gt;" line="36"/>
            <method name="TokenTracker" type="constructor" line="37">
                <params>
                    <param name="initNumber" type="int"/>
                </params>
                <declaration name="entry" type="Entry" line="41"/>
            </method>
            <javadoc line="44">
                Returns the index for the entry into which this number will fit. If
                  there is none, it returns the index of the last interval
                  which precedes this number. It returns -1 if the number needs to be
                  a in a new interval ahead of the whole list.                
            </javadoc>
            <method name="getIntervalIndex" type="int" line="50">
                <params>
                    <param name="number" type="int"/>
                </params>
                <declaration name="entry" type="Entry" line="51"/>
                <declaration name="i" type="int" line="52"/>
                <scope line="53"/>
            </method>
            <javadoc line="59">
                Sets the sequencing and replay information for the given token
                  number.
                  The following represents the number line with positions of
                  initNumber, windowStart, expectedNumber marked on it. Regions in
                  between them show the different sequencing and replay state
                  possibilites for tokens that fall in there.
                  (1)      windowStart
                  initNumber               expectedNumber
                  |                           |
                  ---|---------------------------|---
                  GAP |    DUP/UNSEQ              | GAP
                  (2)       initNumber   windowStart   expectedNumber
                  |               |              |
                  ---|---------------|--------------|---
                  GAP |      OLD      |  DUP/UNSEQ   | GAP
                  (3)                                windowStart
                  expectedNumber            initNumber
                  |                           |
                  ---|---------------------------|---
                  DUP/UNSEQ |           GAP             | DUP/UNSEQ
                  (4)      expectedNumber    initNumber   windowStart
                  |               |              |
                  ---|---------------|--------------|---
                  DUP/UNSEQ |        GAP    |    OLD       | DUP/UNSEQ
                  (5)      windowStart   expectedNumber    initNumber
                  |               |              |
                  ---|---------------|--------------|---
                  OLD |    DUP/UNSEQ  |     GAP      | OLD
                  (This analysis leaves out the possibility that expectedNumber passes
                  initNumber after wrapping around. That may be added later.)                
            </javadoc>
            <method name="getProps" type="void" line="91">
                <params>
                    <param name="number" type="int"/>
                    <param name="prop" type="MessageProp"/>
                </params>
                <declaration name="gap" type="boolean" line="92"/>
                <declaration name="old" type="boolean" line="93"/>
                <declaration name="unsequenced" type="boolean" line="94"/>
                <declaration name="duplicate" type="boolean" line="95"/>
                <declaration name="pos" type="int" line="96"/>
                <declaration name="entry" type="Entry" line="97"/>
                <scope line="99"/>
                <scope line="102">
                    <scope line="104">
                        <scope line="105">
                            <scope line="106"/>
                            <scope line="109"/>
                            <scope line="112"/>
                            <scope line="115"/>
                        </scope>
                        <scope line="119">
                            <scope line="120">
                                <scope line="121"/>
                                <scope line="124">
                                    <scope line="125"/>
                                </scope>
                                <scope line="130"/>
                            </scope>
                            <scope line="134"/>
                            <scope line="137"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="148">
                Adds the number to the list just after the entry that is currently
                  at position prevEntryPos. If prevEntryPos is -1, then the number
                  will begin a new interval at the front of the list.                
            </javadoc>
            <method name="add" type="void" line="153">
                <params>
                    <param name="number" type="int"/>
                    <param name="prevEntryPos" type="int"/>
                </params>
                <declaration name="entry" type="Entry" line="154"/>
                <declaration name="entryBefore" type="Entry" line="155"/>
                <declaration name="entryAfter" type="Entry" line="156"/>
                <declaration name="appended" type="boolean" line="157"/>
                <declaration name="prepended" type="boolean" line="158"/>
                <scope line="159">
                    <scope line="161"/>
                </scope>
                <declaration name="nextEntryPos" type="int" line="166"/>
                <scope line="167">
                    <scope line="169">
                        <scope line="170"/>
                        <scope line="173"/>
                    </scope>
                </scope>
                <scope line="182"/>
                <scope line="186">
                    <declaration name="oldWindowStartIndex" type="int" line="187"/>
                    <scope line="193"/>
                    <scope line="196">
                        <scope line="197"/>
                        <scope line="200"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="207">
                <declaration name="buf" type="StringBuffer" line="208"/>
                <scope line="214"/>
            </method>
            <class name="Entry" line="221">
                <javadoc line="221">
                    An entry in the list that represents the sequence of received
                      tokens. Each entry is actaully an interval of numbers, all of which
                      have been received.                    
                </javadoc>
                <declaration name="start" type="int" line="227"/>
                <declaration name="end" type="int" line="228"/>
                <method name="Entry" type="constructor" line="229">
                    <params>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <javadoc line="233">
                    Returns -1 if this interval represented by this entry precedes
                      the number, 0 if the the number is contained in the interval,
                      and -1 if the interval occurs after the number.                    
                </javadoc>
                <method name="compareTo" type="int" line="238">
                    <params>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="243">
                    <params>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <method name="append" type="void" line="246">
                    <params>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <method name="setInterval" type="void" line="249">
                    <params>
                        <param name="start" type="int"/>
                        <param name="end" type="int"/>
                    </params>
                </method>
                <method name="setEnd" type="void" line="253">
                    <params>
                        <param name="end" type="int"/>
                    </params>
                </method>
                <method name="setStart" type="void" line="256">
                    <params>
                        <param name="start" type="int"/>
                    </params>
                </method>
                <method name="getStart" type="int" line="259"/>
                <method name="getEnd" type="int" line="262"/>
                <method name="toString" type="String" line="265"/>
            </class>
        </class>
    </source>