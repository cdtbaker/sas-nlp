<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.spnego">
        <import package="com.sun.security.jgss.ExtendedGSSContext"/>
        <import package="com.sun.security.jgss.InquireType"/>
        <import package="java.io"/>
        <import package="java.security.Provider"/>
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss"/>
        <import package="sun.security.jgss.spi"/>
        <import package="sun.security.util"/>
        <class name="SpNegoContext" line="37">
            <comment line="47">
                The different states that this context can be in.                
            </comment>
            <comment line="57">
                Optional features that the application can set and their default
                 values.                
            </comment>
            <comment line="80">
                the underlying negotiated mechanism                
            </comment>
            <comment line="83">
                the SpNegoMechFactory that creates this context                
            </comment>
            <comment line="86">
                debug property                
            </comment>
            <comment line="698">
                Only called on acceptor side. On the initiator side, most flags                
            </comment>
            <comment line="699">
                are already set at request. For those that might get chanegd,                
            </comment>
            <comment line="700">
                state from mech below is used.                
            </comment>
            <comment line="727">
                generate MIC on mechList. Not used at the moment.                
            </comment>
            <comment line="730">
                private byte[] generateMechListMIC(byte[] mechTypes)
                throws GSSException {
                
                 sanity check the required input
                if (mechTypes == null) {
                if (DEBUG) {
                System.out.println(&quot;SpNegoContext: no MIC token included&quot;);
                }
                return null;
                }
                
                 check if mechansim supports integrity
                if (!mechContext.getIntegState()) {
                if (DEBUG) {
                System.out.println(&quot;SpNegoContext: no MIC token included&quot; +
                &quot; - mechanism does not support integrity&quot;);
                }
                return null;
                }
                
                 compute MIC on DER encoded mechanism list
                byte[] mic = null;
                try {
                MessageProp prop = new MessageProp(0, true);
                mic = getMIC(mechTypes, 0, mechTypes.length, prop);
                if (DEBUG) {
                System.out.println(&quot;SpNegoContext: getMIC = &quot; +
                SpNegoToken.getHexBytes(mic));
                }
                } catch (GSSException e) {
                mic = null;
                if (DEBUG) {
                System.out.println(&quot;SpNegoContext: no MIC token included&quot; +
                &quot; - getMIC failed : &quot; + e.getMessage());
                }
                }
                return mic;                
            </comment>
            <comment line="936">
                Anonymity is a little different in that after an application
                 requests anonymity it will want to know whether the mechanism
                 can support it or not, prior to sending any tokens across for
                 context establishment. Since this is from the initiator&apos;s
                 perspective, it essentially requests that the initiator be
                 anonymous.                
            </comment>
            <comment line="949">
                RFC 2853 actually calls for this to be called after context                
            </comment>
            <comment line="950">
                establishment to get the right answer, but that is                
            </comment>
            <comment line="951">
                incorrect. The application may not want to send over any                
            </comment>
            <comment line="952">
                tokens if anonymity is not available.                
            </comment>
            <implements interface="GSSContextSpi"/>
            <javadoc line="37">
                Implements the mechanism specific context class for SPNEGO
                  GSS-API mechanism                
                <author>
                    Seema Malkani                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="STATE_NEW" type="int" line="49"/>
            <declaration name="STATE_IN_PROCESS" type="int" line="50"/>
            <declaration name="STATE_DONE" type="int" line="51"/>
            <declaration name="STATE_DELETED" type="int" line="52"/>
            <declaration name="state" type="int" line="54"/>
            <declaration name="credDelegState" type="boolean" line="60"/>
            <declaration name="mutualAuthState" type="boolean" line="61"/>
            <declaration name="replayDetState" type="boolean" line="62"/>
            <declaration name="sequenceDetState" type="boolean" line="63"/>
            <declaration name="confState" type="boolean" line="64"/>
            <declaration name="integState" type="boolean" line="65"/>
            <declaration name="delegPolicyState" type="boolean" line="66"/>
            <declaration name="peerName" type="GSSNameSpi" line="68"/>
            <declaration name="myName" type="GSSNameSpi" line="69"/>
            <declaration name="myCred" type="SpNegoCredElement" line="70"/>
            <declaration name="mechContext" type="GSSContext" line="72"/>
            <declaration name="DER_mechTypes" type="byte[]" line="73"/>
            <declaration name="lifetime" type="int" line="75"/>
            <declaration name="channelBinding" type="ChannelBinding" line="76"/>
            <declaration name="initiator" type="boolean" line="77"/>
            <declaration name="internal_mech" type="Oid" line="80"/>
            <declaration name="factory" type="SpNegoMechFactory" line="83"/>
            <declaration name="DEBUG" type="boolean" line="86"/>
            <javadoc line="91">
                Constructor for SpNegoContext to be called on the context initiator&apos;s
                  side.                
            </javadoc>
            <method name="SpNegoContext" type="constructor" line="97">
                <params>
                    <param name="factory" type="SpNegoMechFactory"/>
                    <param name="peerName" type="GSSNameSpi"/>
                    <param name="myCred" type="GSSCredentialSpi"/>
                    <param name="lifetime" type="int"/>
                </params>
                <scope line="101"/>
            </method>
            <javadoc line="111">
                Constructor for SpNegoContext to be called on the context acceptor&apos;s
                  side.                
            </javadoc>
            <method name="SpNegoContext" type="constructor" line="116">
                <params>
                    <param name="factory" type="SpNegoMechFactory"/>
                    <param name="myCred" type="GSSCredentialSpi"/>
                </params>
                <scope line="117"/>
            </method>
            <javadoc line="125">
                Constructor for SpNegoContext to import a previously exported context.                
            </javadoc>
            <method name="SpNegoContext" type="constructor" line="129">
                <params>
                    <param name="factory" type="SpNegoMechFactory"/>
                    <param name="interProcessToken" type="byte[]"/>
                </params>
            </method>
            <javadoc line="134">
                Requests that confidentiality be available.                
            </javadoc>
            <method name="requestConf" type="void" line="137">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="142">
                Is confidentiality available?                
            </javadoc>
            <method name="getConfState" type="boolean" line="145"/>
            <javadoc line="149">
                Requests that integrity be available.                
            </javadoc>
            <method name="requestInteg" type="void" line="152">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="157">
                Requests that deleg policy be respected.                
            </javadoc>
            <method name="requestDelegPolicy" type="void" line="160">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="165">
                Is integrity available?                
            </javadoc>
            <method name="getIntegState" type="boolean" line="168"/>
            <javadoc line="172">
                Is deleg policy respected?                
            </javadoc>
            <method name="getDelegPolicyState" type="boolean" line="175">
                <scope line="178"/>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Requests that credential delegation be done during context
                  establishment.                
            </javadoc>
            <method name="requestCredDeleg" type="void" line="189">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="194">
                Is credential delegation enabled?                
            </javadoc>
            <method name="getCredDelegState" type="boolean" line="197">
                <scope line="199"/>
                <scope line="201"/>
            </method>
            <javadoc line="206">
                Requests that mutual authentication be done during context
                  establishment. Since this is fromm the client&apos;s perspective, it
                  essentially requests that the server be authenticated.                
            </javadoc>
            <method name="requestMutualAuth" type="void" line="211">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="212"/>
            </method>
            <javadoc line="217">
                Is mutual authentication enabled? Since this is from the client&apos;s
                  perspective, it essentially meas that the server is being
                  authenticated.                
            </javadoc>
            <method name="getMutualAuthState" type="boolean" line="222"/>
            <javadoc line="226">
                Returns the mechanism oid.                
                <return>
                    the Oid of this context                    
                </return>
            </javadoc>
            <method name="getMech" type="Oid" line="231">
                <scope line="232"/>
            </method>
            <method name="getNegotiatedMech" type="Oid" line="238"/>
            <method name="getProvider" type="Provider" line="242"/>
            <method name="dispose" type="void" line="246"/>
            <javadoc line="251">
                Tests if this is the initiator side of the context.                
                <return>
                    boolean indicating if this is initiator (true)
                      or target (false)                    
                </return>
            </javadoc>
            <method name="isInitiator" type="boolean" line="257"/>
            <javadoc line="261">
                Tests if the context can be used for per-message service.
                  Context may allow the calls to the per-message service
                  functions before being fully established.                
                <return>
                    boolean indicating if per-message methods can
                      be called.                    
                </return>
            </javadoc>
            <method name="isProtReady" type="boolean" line="269"/>
            <javadoc line="273">
                Initiator context establishment call. This method may be
                  required to be called several times. A CONTINUE_NEEDED return
                  call indicates that more calls are needed after the next token
                  is received from the peer.                
                <param>
                    is contains the token received from the peer. On the
                      first call it will be ignored.                    
                </param>
                <return>
                    any token required to be sent to the peer
                      It is responsibility of the caller to send the token
                      to its peer for processing.                    
                </return>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="initSecContext" type="byte[]" line="287">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenSize" type="int"/>
                </params>
                <comment line="309">
                    determine available mech set                    
                </comment>
                <comment line="313">
                    pull out first mechanism                    
                </comment>
                <comment line="316">
                    get the token for first mechanism                    
                </comment>
                <comment line="320">
                    generate SPNEGO token                    
                </comment>
                <comment line="328">
                    get the encoded token                    
                </comment>
                <comment line="348">
                    read the SPNEGO token                    
                </comment>
                <comment line="349">
                    token will be validated when parsing                    
                </comment>
                <comment line="358">
                    pull out mechanism                    
                </comment>
                <comment line="361">
                    return wth failure                    
                </comment>
                <comment line="366">
                    get the negotiated result                    
                </comment>
                <comment line="399">
                    pull out the mechanism token                    
                </comment>
                <comment line="403">
                    return with failure                    
                </comment>
                <comment line="410">
                    verify MIC                    
                </comment>
                <comment line="427">
                    generate SPNEGO token                    
                </comment>
                <comment line="435">
                    get the encoded token                    
                </comment>
                <comment line="441">
                    XXX Use logging API                    
                </comment>
                <declaration name="retVal" type="byte[]" line="289"/>
                <declaration name="initToken" type="NegTokenInit" line="290"/>
                <declaration name="mechToken" type="byte[]" line="291"/>
                <declaration name="errorCode" type="int" line="292"/>
                <scope line="294"/>
                <scope line="298"/>
                <scope line="303">
                    <scope line="304">
                        <declaration name="mechList" type="Oid[]" line="310"/>
                        <scope line="323"/>
                    </scope>
                    <scope line="331">
                        <scope line="334"/>
                        <declaration name="server_token" type="byte[]" line="340"/>
                        <scope line="342"/>
                        <declaration name="targToken" type="NegTokenTarg" line="350"/>
                        <scope line="352"/>
                        <scope line="360"/>
                        <declaration name="negoResult" type="SpNegoToken.NegoResult" line="367"/>
                        <declaration name="result" type="int" line="368"/>
                        <scope line="389"/>
                        <scope line="397">
                            <declaration name="accept_token" type="byte[]" line="400"/>
                            <scope line="401">
                                <scope line="402"/>
                            </scope>
                            <scope line="407"/>
                            <scope line="411">
                                <declaration name="micToken" type="byte[]" line="412"/>
                                <scope line="413"/>
                            </scope>
                            <scope line="418">
                                <scope line="421"/>
                            </scope>
                            <scope line="426">
                                <scope line="430"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="440">
                        <scope line="442"/>
                    </scope>
                    <scope line="446">
                        <scope line="447"/>
                    </scope>
                </scope>
                <scope line="452">
                    <declaration name="gssException" type="GSSException" line="453"/>
                </scope>
                <scope line="457">
                    <declaration name="gssException" type="GSSException" line="458"/>
                </scope>
            </method>
            <javadoc line="468">
                Acceptor&apos;s context establishment call. This method may be
                  required to be called several times. A CONTINUE_NEEDED return
                  call indicates that more calls are needed after the next token
                  is received from the peer.                
                <param>
                    is contains the token received from the peer.                    
                </param>
                <return>
                    any token required to be sent to the peer
                      It is responsibility of the caller to send the token
                      to its peer for processing.                    
                </return>
                <exception>
                    GSSException                    
                </exception>
            </javadoc>
            <method name="acceptSecContext" type="byte[]" line="481">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenSize" type="int"/>
                </params>
                <comment line="501">
                    read data                    
                </comment>
                <comment line="510">
                    read the SPNEGO token                    
                </comment>
                <comment line="511">
                    token will be validated when parsing                    
                </comment>
                <comment line="526">
                    get the mechanism token                    
                </comment>
                <comment line="529">
                    Select the best match between the list of mechs
                     that the initiator requested and the list that
                     the acceptor will support.                    
                </comment>
                <comment line="540">
                    save the desired mechansim                    
                </comment>
                <comment line="543">
                    get the token for mechanism                    
                </comment>
                <comment line="546">
                    verify MIC                    
                </comment>
                <comment line="552">
                    determine negotiated result status                    
                </comment>
                <comment line="557">
                    now set the context flags for acceptor                    
                </comment>
                <comment line="559">
                    print the negotiated mech info                    
                </comment>
                <comment line="581">
                    generate SPNEGO token                    
                </comment>
                <comment line="589">
                    get the encoded token                    
                </comment>
                <comment line="593">
                    read the token                    
                </comment>
                <comment line="601">
                    determine negotiated result status                    
                </comment>
                <comment line="615">
                    generate SPNEGO token                    
                </comment>
                <comment line="623">
                    get the encoded token                    
                </comment>
                <comment line="627">
                    XXX Use logging API                    
                </comment>
                <comment line="644">
                    now set the context flags for acceptor                    
                </comment>
                <declaration name="retVal" type="byte[]" line="483"/>
                <declaration name="negoResult" type="SpNegoToken.NegoResult" line="484"/>
                <declaration name="valid" type="boolean" line="485"/>
                <scope line="487"/>
                <scope line="492"/>
                <scope line="497">
                    <scope line="498">
                        <declaration name="token" type="byte[]" line="502"/>
                        <scope line="504"/>
                        <declaration name="initToken" type="NegTokenInit" line="512"/>
                        <scope line="514"/>
                        <declaration name="mechList" type="Oid[]" line="520"/>
                        <scope line="522"/>
                        <declaration name="mechToken" type="byte[]" line="527"/>
                        <declaration name="supported_mechSet" type="Oid[]" line="534"/>
                        <declaration name="mech_wanted" type="Oid" line="535"/>
                        <scope line="537"/>
                        <declaration name="accept_token" type="byte[]" line="544"/>
                        <scope line="547"/>
                        <scope line="553">
                            <scope line="554">
                                <scope line="560"/>
                            </scope>
                            <scope line="565"/>
                        </scope>
                        <scope line="569"/>
                        <scope line="574"/>
                        <declaration name="targToken" type="NegTokenTarg" line="582"/>
                        <scope line="584"/>
                    </scope>
                    <scope line="592">
                        <declaration name="client_token" type="byte[]" line="594"/>
                        <declaration name="accept_token" type="byte[]" line="596"/>
                        <scope line="597"/>
                        <scope line="602">
                            <scope line="603"/>
                            <scope line="606"/>
                        </scope>
                        <scope line="610"/>
                        <declaration name="targToken" type="NegTokenTarg" line="616"/>
                        <scope line="618"/>
                    </scope>
                    <scope line="626">
                        <scope line="628"/>
                    </scope>
                    <scope line="632"/>
                </scope>
                <scope line="636">
                    <declaration name="gssException" type="GSSException" line="637"/>
                </scope>
                <scope line="643"/>
            </method>
            <javadoc line="650">
                obtain the available mechanisms                
            </javadoc>
            <method name="getAvailableMechs" type="Oid[]" line="653">
                <scope line="654">
                    <declaration name="mechs" type="Oid[]" line="655"/>
                </scope>
                <scope line="658"/>
            </method>
            <javadoc line="663">
                get ther DER encoded MechList                
            </javadoc>
            <method name="getEncodedMechs" type="byte[]" line="667">
                <params>
                    <param name="mechSet" type="Oid[]"/>
                </params>
                <comment line="674">
                    insert in SEQUENCE                    
                </comment>
                <declaration name="mech" type="DerOutputStream" line="669"/>
                <scope line="670">
                    <declaration name="mechType" type="byte[]" line="671"/>
                </scope>
                <declaration name="mechTypeList" type="DerOutputStream" line="675"/>
                <declaration name="encoded" type="byte[]" line="677"/>
            </method>
            <javadoc line="681">
                get the context flags                
            </javadoc>
            <method name="getContextFlags" type="BitArray" line="684">
                <declaration name="out" type="BitArray" line="685"/>
            </method>
            <method name="setContextFlags" type="void" line="700">
                <comment line="703">
                    default for cred delegation is false                    
                </comment>
                <comment line="707">
                    default for the following are true                    
                </comment>
                <scope line="702">
                    <scope line="704"/>
                    <scope line="708"/>
                    <scope line="711"/>
                    <scope line="714"/>
                    <scope line="717"/>
                    <scope line="720"/>
                </scope>
            </method>
            <javadoc line="768">
                verify MIC on MechList                
            </javadoc>
            <method name="verifyMechListMIC" type="boolean" line="772">
                <params>
                    <param name="mechTypes" type="byte[]"/>
                    <param name="token" type="byte[]"/>
                </params>
                <comment line="774">
                    sanity check the input                    
                </comment>
                <comment line="782">
                    check if mechansim supports integrity                    
                </comment>
                <comment line="791">
                    now verify the token                    
                </comment>
                <scope line="775">
                    <scope line="776"/>
                </scope>
                <scope line="783">
                    <scope line="784"/>
                </scope>
                <declaration name="valid" type="boolean" line="792"/>
                <scope line="793">
                    <declaration name="prop" type="MessageProp" line="794"/>
                </scope>
                <scope line="798">
                    <scope line="800"/>
                </scope>
            </method>
            <javadoc line="808">
                call gss_init_sec_context for the corresponding underlying mechanism                
            </javadoc>
            <method name="GSS_initSecContext" type="byte[]" line="811">
                <params>
                    <param name="token" type="byte[]"/>
                </params>
                <comment line="815">
                    initialize mech context                    
                </comment>
                <comment line="821">
                    create context with provided credential                    
                </comment>
                <comment line="840">
                    pass token                    
                </comment>
                <comment line="847">
                    pass token to mechanism initSecContext                    
                </comment>
                <declaration name="tok" type="byte[]" line="812"/>
                <scope line="814">
                    <declaration name="serverName" type="GSSName" line="816"/>
                    <declaration name="cred" type="GSSCredential" line="819"/>
                    <scope line="820"/>
                    <scope line="834"/>
                </scope>
                <scope line="841"/>
                <scope line="843"/>
                <declaration name="init_token" type="byte[]" line="848"/>
            </method>
            <javadoc line="853">
                call gss_accept_sec_context for the corresponding underlying mechanism                
            </javadoc>
            <method name="GSS_acceptSecContext" type="byte[]" line="856">
                <params>
                    <param name="token" type="byte[]"/>
                </params>
                <comment line="859">
                    initialize mech context                    
                </comment>
                <comment line="862">
                    create context with provided credential                    
                </comment>
                <comment line="870">
                    pass token to mechanism acceptSecContext                    
                </comment>
                <scope line="858">
                    <declaration name="cred" type="GSSCredential" line="860"/>
                    <scope line="861"/>
                </scope>
                <declaration name="accept_token" type="byte[]" line="871"/>
            </method>
            <javadoc line="877">
                This routine compares the recieved mechset to the mechset that
                  this server can support. It looks sequentially through the mechset
                  and the first one that matches what the server can support is
                  chosen as the negotiated mechanism. If one is found, negResult
                  is set to ACCEPT_COMPLETE, otherwise we return NULL and negResult
                  is set to REJECT.                
            </javadoc>
            <method name="negotiate_mech_type" type="Oid" line="886">
                <params>
                    <param name="supported_mechSet" type="Oid[]"/>
                    <param name="mechSet" type="Oid[]"/>
                </params>
                <scope line="887">
                    <scope line="888">
                        <scope line="889">
                            <scope line="890"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isEstablished" type="boolean" line="901"/>
            <method name="isMechContextEstablished" type="boolean" line="905">
                <scope line="906"/>
                <scope line="908">
                    <scope line="909"/>
                </scope>
            </method>
            <method name="export" type="byte[]" line="917"/>
            <javadoc line="922">
                Sets the channel bindings to be used during context
                  establishment.                
            </javadoc>
            <method name="setChannelBinding" type="void" line="927">
                <params>
                    <param name="channelBinding" type="ChannelBinding"/>
                </params>
            </method>
            <method name="getChannelBinding" type="ChannelBinding" line="931"/>
            <method name="requestAnonymity" type="void" line="943">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <comment line="944">
                    Ignore silently. Application will check back with                    
                </comment>
                <comment line="945">
                    getAnonymityState.                    
                </comment>
            </method>
            <method name="getAnonymityState" type="boolean" line="952"/>
            <javadoc line="956">
                Requests the desired lifetime. Can only be used on the context
                  initiator&apos;s side.                
            </javadoc>
            <method name="requestLifetime" type="void" line="960">
                <params>
                    <param name="lifetime" type="int"/>
                </params>
            </method>
            <javadoc line="965">
                The lifetime remaining for this context.                
            </javadoc>
            <method name="getLifetime" type="int" line="968">
                <scope line="969"/>
                <scope line="971"/>
            </method>
            <method name="isTransferable" type="boolean" line="976"/>
            <javadoc line="980">
                Requests that sequence checking be done on the GSS wrap and MIC
                  tokens.                
            </javadoc>
            <method name="requestSequenceDet" type="void" line="984">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="989">
                Is sequence checking enabled on the GSS Wrap and MIC tokens?
                  We enable sequence checking if replay detection is enabled.                
            </javadoc>
            <method name="getSequenceDetState" type="boolean" line="993"/>
            <javadoc line="997">
                Requests that replay detection be done on the GSS wrap and MIC
                  tokens.                
            </javadoc>
            <method name="requestReplayDet" type="void" line="1001">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="1006">
                Is replay detection enabled on the GSS wrap and MIC tokens?
                  We enable replay detection if sequence checking is enabled.                
            </javadoc>
            <method name="getReplayDetState" type="boolean" line="1010"/>
            <method name="getTargName" type="GSSNameSpi" line="1014">
                <comment line="1015">
                    fill-in the GSSName                    
                </comment>
                <comment line="1016">
                    get the peer name for the mechanism                    
                </comment>
                <scope line="1017">
                    <declaration name="targName" type="GSSNameImpl" line="1018"/>
                </scope>
                <scope line="1021">
                    <scope line="1022"/>
                </scope>
            </method>
            <method name="getSrcName" type="GSSNameSpi" line="1030">
                <comment line="1031">
                    fill-in the GSSName                    
                </comment>
                <comment line="1032">
                    get the src name for the mechanism                    
                </comment>
                <scope line="1033">
                    <declaration name="srcName" type="GSSNameImpl" line="1034"/>
                </scope>
                <scope line="1037">
                    <scope line="1038"/>
                </scope>
            </method>
            <javadoc line="1046">
                Returns the delegated credential for the context. This
                  is an optional feature of contexts which not all
                  mechanisms will support. A context can be requested to
                  support credential delegation by using the &lt;b&gt;CRED_DELEG&lt;/b&gt;.
                  This is only valid on the acceptor side of the context.                
                <return>
                    GSSCredentialSpi object for the delegated credential                    
                </return>
                <exception>
                    GSSException                    
                </exception>
                <see>
                    GSSContext#getDelegCredState                    
                </see>
            </javadoc>
            <method name="getDelegCred" type="GSSCredentialSpi" line="1056">
                <comment line="1062">
                    determine delegated cred element usage                    
                </comment>
                <scope line="1059">
                    <declaration name="delegCred" type="GSSCredentialImpl" line="1060"/>
                    <declaration name="initiate" type="boolean" line="1063"/>
                    <scope line="1064"/>
                    <declaration name="mechCred" type="GSSCredentialSpi" line="1067"/>
                    <declaration name="cred" type="SpNegoCredElement" line="1069"/>
                </scope>
                <scope line="1071"/>
            </method>
            <method name="getWrapSizeLimit" type="int" line="1078">
                <params>
                    <param name="qop" type="int"/>
                    <param name="confReq" type="boolean"/>
                    <param name="maxTokSize" type="int"/>
                </params>
                <scope line="1079"/>
                <scope line="1081"/>
            </method>
            <method name="wrap" type="byte[]" line="1088">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1089"/>
                <scope line="1091"/>
            </method>
            <method name="wrap" type="void" line="1098">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1099"/>
                <scope line="1101"/>
            </method>
            <method name="unwrap" type="byte[]" line="1109">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1110"/>
                <scope line="1112"/>
            </method>
            <method name="unwrap" type="void" line="1119">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1120"/>
                <scope line="1122"/>
            </method>
            <method name="getMIC" type="byte[]" line="1130">
                <params>
                    <param name="inMsg" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1131"/>
                <scope line="1133"/>
            </method>
            <method name="getMIC" type="void" line="1140">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1141"/>
                <scope line="1143"/>
            </method>
            <method name="verifyMIC" type="void" line="1152">
                <params>
                    <param name="inTok" type="byte[]"/>
                    <param name="tokOffset" type="int"/>
                    <param name="tokLen" type="int"/>
                    <param name="inMsg" type="byte[]"/>
                    <param name="msgOffset" type="int"/>
                    <param name="msgLen" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1153"/>
                <scope line="1156"/>
            </method>
            <method name="verifyMIC" type="void" line="1163">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="msgStr" type="InputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="1164"/>
                <scope line="1166"/>
            </method>
            <method name="printState" type="String" line="1172">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="1187">
                Retrieve attribute of the context for {@code type}.                
            </javadoc>
            <method name="inquireSecContext" type="Object" line="1191">
                <params>
                    <param name="type" type="InquireType"/>
                </params>
                <scope line="1192"/>
                <scope line="1196"/>
                <scope line="1198"/>
            </method>
        </class>
    </source>