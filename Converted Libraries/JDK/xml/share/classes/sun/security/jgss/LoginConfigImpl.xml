<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss">
        <import package="java.util.HashMap"/>
        <import package="javax.security.auth.login.AppConfigurationEntry"/>
        <import package="javax.security.auth.login.Configuration"/>
        <import package="org.ietf.jgss.Oid"/>
        <class name="LoginConfigImpl" line="33">
            <extends class="Configuration"/>
            <javadoc line="33">
                A Configuration implementation especially designed for JGSS.                
                <author>
                    weijun.wang                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="config" type="Configuration" line="41"/>
            <declaration name="caller" type="GSSCaller" line="42"/>
            <declaration name="mechName" type="String" line="43"/>
            <declaration name="debug" type="sun.security.util.Debug" line="44"/>
            <javadoc line="47">
                A new instance of LoginConfigImpl must be created for each login request
                  since it&apos;s only used by a single (caller, mech) pair                
                <param>
                    caller defined in GSSUtil as CALLER_XXX final fields                    
                </param>
                <param>
                    oid defined in GSSUtil as XXX_MECH_OID final fields                    
                </param>
            </javadoc>
            <method name="LoginConfigImpl" type="constructor" line="53">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="mech" type="Oid"/>
                </params>
                <scope line="57"/>
                <scope line="59"/>
                <anonymous_class line="63">
                    <method name="run" type="Configuration" line="64"/>
                </anonymous_class>
            </method>
            <javadoc line="70">
                @param name Almost useless, since the (caller, mech) is already passed
                  into constructor. The only use will be detecting OTHER which
                  is called in LoginContext                
            </javadoc>
            <method name="getAppConfigurationEntry" type="AppConfigurationEntry[]" line="75">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="80">
                    This is the second call from LoginContext, which we will just ignore                    
                </comment>
                <comment line="87">
                    Compatibility:
                     For the 4 old callers, old entry names will be used if the new
                     entry name is not provided.                    
                </comment>
                <comment line="121">
                    No other mech at the moment, maybe --                    
                </comment>
                <comment line="122">
                    switch (caller) {
                    case GSSUtil.CALLER_INITIATE:
                    case GSSUtil.CALLER_SSL_CLIENT:
                    case GSSUtil.CALLER_HTTP_NEGOTIATE:
                    alts = new String[] {
                    &quot;com.sun.security.jgss.&quot; + mechName + &quot;.initiate&quot;,
                    };
                    break;
                    case GSSUtil.CALLER_ACCEPT:
                    case GSSUtil.CALLER_SSL_SERVER:
                    alts = new String[] {
                    &quot;com.sun.security.jgss.&quot; + mechName + &quot;.accept&quot;,
                    };
                    break;
                    case GSSUtil.CALLER_UNKNOWN:
                     should never use
                    throw new AssertionError(&quot;caller cannot be unknown&quot;);
                    default:
                    throw new AssertionError(&quot;caller not defined&quot;);
                    }                    
                </comment>
                <declaration name="entries" type="AppConfigurationEntry[]" line="77"/>
                <scope line="80"/>
                <declaration name="alts" type="String[]" line="84"/>
                <scope line="90">
                    <scope line="91"/>
                    <scope line="96"/>
                    <scope line="101"/>
                    <scope line="106"/>
                    <scope line="111"/>
                    <scope line="115"/>
                </scope>
                <scope line="118"/>
                <scope line="144">
                    <scope line="146"/>
                    <scope line="150"/>
                </scope>
                <scope line="155">
                    <scope line="156"/>
                </scope>
            </method>
            <javadoc line="164">
                Default value for a caller-mech pair when no entry is defined in
                  the system-wide Configuration object.                
            </javadoc>
            <method name="getDefaultConfigurationEntry" type="AppConfigurationEntry[]" line="168">
                <comment line="174">
                    Assuming the keytab file can be found through
                     krb5 config file or under user home directory                    
                </comment>
                <declaration name="options" type="HashMap&lt;String,String&gt;" line="169"/>
                <scope line="171">
                    <scope line="172"/>
                    <scope line="179"/>
                </scope>
            </method>
            <method name="isServerSide" type="boolean" line="193">
                <params>
                    <param name="caller" type="GSSCaller"/>
                </params>
            </method>
        </class>
    </source>