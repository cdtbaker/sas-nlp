<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="javax.security.auth.kerberos.KerberosTicket"/>
        <import package="javax.security.auth.kerberos.KerberosKey"/>
        <import package="javax.security.auth.kerberos.KerberosPrincipal"/>
        <import package="javax.security.auth.kerberos.KeyTab"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.login.LoginException"/>
        <import package="java.security.AccessControlContext"/>
        <import package="sun.security.jgss.GSSUtil"/>
        <import package="sun.security.jgss.GSSCaller"/>
        <import package="sun.security.krb5.Credentials"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Objects"/>
        <import package="java.util.Set"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <class name="Krb5Util" line="49">
            <comment line="193">
                A special KerberosKey, used as keys read from a KeyTab object.
                 Each time new keys are read from KeyTab objects in the private
                 credentials set, old ones are removed and new ones added.                
            </comment>
            <javadoc line="49">
                Utilities for obtaining and converting Kerberos tickets.                
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="55"/>
            <javadoc line="60">
                Default constructor                
            </javadoc>
            <method name="Krb5Util" type="constructor" line="63">
                <comment line="64">
                    Cannot create one of these                    
                </comment>
            </method>
            <javadoc line="66">
                Retrieve the service ticket for serverPrincipal from caller&apos;s Subject
                  or from Subject obtained by logging in, or if not found, via the
                  Ticket Granting Service using the TGT obtained from the Subject.
                  Caller must have permission to:
                  - access and update Subject&apos;s private credentials
                  - create LoginContext
                  - read the auth.login.defaultCallbackHandler security property
                  NOTE: This method is used by JSSE Kerberos Cipher Suites                
            </javadoc>
            <method name="getTicketFromSubjectAndTgs" type="KerberosTicket" line="81">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="clientPrincipal" type="String"/>
                    <param name="serverPrincipal" type="String"/>
                    <param name="tgsPrincipal" type="String"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <comment line="84">
                    1. Try to find service ticket in acc subject                    
                </comment>
                <comment line="90">
                    found it                    
                </comment>
                <comment line="95">
                    2. Try to get ticket from login                    
                </comment>
                <comment line="101">
                    found it                    
                </comment>
                <comment line="104">
                    No login entry to use
                     ignore and continue                    
                </comment>
                <comment line="109">
                    Service ticket not found in subject or login
                     Try to get TGT to acquire service ticket                    
                </comment>
                <comment line="112">
                    3. Try to get TGT from acc subject                    
                </comment>
                <comment line="118">
                    4. Try to get TGT from login subject                    
                </comment>
                <comment line="126">
                    5. Try to get service ticket using TGT                    
                </comment>
                <comment line="134">
                    Store service ticket in acc&apos;s Subject                    
                </comment>
                <declaration name="accSubj" type="Subject" line="84"/>
                <declaration name="ticket" type="KerberosTicket" line="85"/>
                <scope line="88"/>
                <declaration name="loginSubj" type="Subject" line="92"/>
                <scope line="93">
                    <scope line="95">
                        <scope line="99"/>
                    </scope>
                    <scope line="102"/>
                </scope>
                <declaration name="tgt" type="KerberosTicket" line="112"/>
                <declaration name="fromAcc" type="boolean" line="115"/>
                <scope line="116"/>
                <scope line="121"/>
                <scope line="126">
                    <declaration name="tgtCreds" type="Credentials" line="127"/>
                    <declaration name="serviceCreds" type="Credentials" line="128"/>
                    <scope line="130">
                        <scope line="134"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="142">
                Retrieves the ticket corresponding to the client/server principal
                  pair from the Subject in the specified AccessControlContext.
                  If the ticket can not be found in the Subject, and if
                  useSubjectCredsOnly is false, then obtain ticket from
                  a LoginContext.                
            </javadoc>
            <method name="getTicket" type="KerberosTicket" line="151">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="clientPrincipal" type="String"/>
                    <param name="serverPrincipal" type="String"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <comment line="154">
                    Try to get ticket from acc&apos;s Subject                    
                </comment>
                <comment line="160">
                    Try to get ticket from Subject obtained from GSSUtil                    
                </comment>
                <declaration name="accSubj" type="Subject" line="154"/>
                <declaration name="ticket" type="KerberosTicket" line="155"/>
                <scope line="160">
                    <declaration name="subject" type="Subject" line="161"/>
                </scope>
            </method>
            <javadoc line="168">
                Retrieves the caller&apos;s Subject, or Subject obtained by logging in
                  via the specified caller.
                  Caller must have permission to:
                  - access the Subject
                  - create LoginContext
                  - read the auth.login.defaultCallbackHandler security property
                  NOTE: This method is used by JSSE Kerberos Cipher Suites                
            </javadoc>
            <method name="getSubject" type="Subject" line="180">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <comment line="183">
                    Try to get the Subject from acc                    
                </comment>
                <comment line="186">
                    Try to get Subject obtained from GSSUtil                    
                </comment>
                <declaration name="subject" type="Subject" line="183"/>
                <scope line="186"/>
            </method>
            <class name="KeysFromKeyTab" line="195">
                <extends class="KerberosKey"/>
                <comment line="221">
                    private KerberosTicket tgt;   // user2user, not supported yet                    
                </comment>
                <method name="KeysFromKeyTab" type="constructor" line="196">
                    <params>
                        <param name="key" type="KerberosKey"/>
                    </params>
                </method>
            </class>
            <class name="ServiceCreds" line="202">
                <comment line="221">
                    private KerberosTicket tgt;   // user2user, not supported yet                    
                </comment>
                <javadoc line="202">
                    Credentials of a service, the private secret to authenticate its
                      identity, which can be:
                      1. Some KerberosKeys (generated from password)
                      2. A KeyTab (for a typical service)
                      3. A TGT (for a user2user service. Not supported yet)
                      Note that some creds can coexist. For example, a user2user service
                      can use its keytab (or keys) if the client can successfully obtain a
                      normal service ticket, otherwise, it can uses the TGT (actually, the
                      session key of the TGT) if the client can only acquire a service ticket
                      of ENC-TKT-IN-SKEY style.                    
                </javadoc>
                <declaration name="kp" type="KerberosPrincipal" line="216"/>
                <declaration name="ktabs" type="List&lt;KeyTab&gt;" line="217"/>
                <declaration name="kk" type="List&lt;KerberosKey&gt;" line="218"/>
                <declaration name="subj" type="Subject" line="219"/>
                <method name="getInstance" type="ServiceCreds" line="223">
                    <params>
                        <param name="subj" type="Subject"/>
                        <param name="serverPrincipal" type="String"/>
                    </params>
                    <comment line="238">
                        Compatibility with old behavior: even when there is no
                         KerberosPrincipal, we can find one from KerberosKeys                        
                    </comment>
                    <declaration name="sc" type="ServiceCreds" line="225"/>
                    <scope line="228">
                        <scope line="230"/>
                    </scope>
                    <scope line="236">
                        <declaration name="keys" type="List&lt;KerberosKey&gt;" line="239"/>
                        <scope line="241">
                            <scope line="244"/>
                        </scope>
                        <scope line="248"/>
                    </scope>
                    <scope line="256"/>
                </method>
                <method name="getName" type="String" line="262"/>
                <method name="getKKeys" type="KerberosKey[]" line="266">
                    <comment line="277">
                        Compatibility: also add keys to privCredSet. Remove old
                         ones first, only remove those from keytab.                        
                    </comment>
                    <scope line="267"/>
                    <scope line="269">
                        <declaration name="keys" type="List&lt;KerberosKey&gt;" line="270"/>
                        <scope line="271">
                            <scope line="272"/>
                        </scope>
                        <scope line="278">
                            <declaration name="pcs" type="Set&lt;Object&gt;" line="279"/>
                            <scope line="280">
                                <declaration name="iterator" type="Iterator&lt;Object&gt;" line="281"/>
                                <scope line="282">
                                    <declaration name="obj" type="Object" line="283"/>
                                    <scope line="284">
                                        <declaration name="key" type="KerberosKey" line="285"/>
                                        <scope line="286"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="292"/>
                        </scope>
                    </scope>
                </method>
                <method name="getEKeys" type="EncryptionKey[]" line="300">
                    <declaration name="kkeys" type="KerberosKey[]" line="301"/>
                    <declaration name="ekeys" type="EncryptionKey[]" line="302"/>
                    <scope line="303"/>
                </method>
                <method name="destroy" type="void" line="311"/>
            </class>
            <javadoc line="317">
                Retrieves the ServiceCreds for the specified server principal from
                  the Subject in the specified AccessControlContext. If not found, and if
                  useSubjectCredsOnly is false, then obtain from a LoginContext.
                  NOTE: This method is also used by JSSE Kerberos Cipher Suites                
            </javadoc>
            <method name="getServiceCreds" type="ServiceCreds" line="326">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="serverPrincipal" type="String"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="accSubj" type="Subject" line="328"/>
                <declaration name="sc" type="ServiceCreds" line="329"/>
                <scope line="330"/>
                <scope line="333">
                    <declaration name="subject" type="Subject" line="334"/>
                </scope>
            </method>
            <method name="credsToTicket" type="KerberosTicket" line="340">
                <params>
                    <param name="serviceCreds" type="Credentials"/>
                </params>
                <declaration name="sessionKey" type="EncryptionKey" line="341"/>
            </method>
            <method name="ticketToCreds" type="Credentials" line="358">
                <params>
                    <param name="kerbTicket" type="KerberosTicket"/>
                </params>
            </method>
            <javadoc line="373">
                A helper method to get EncryptionKeys from a javax..KeyTab                
                <param>
                    ktab the javax..KeyTab class                    
                </param>
                <param>
                    cname the PrincipalName                    
                </param>
                <return>
                    the EKeys, never null, might be empty                    
                </return>
            </javadoc>
            <method name="keysFromJavaxKeyTab" type="EncryptionKey[]" line="380">
                <params>
                    <param name="ktab" type="KeyTab"/>
                    <param name="cname" type="PrincipalName"/>
                </params>
            </method>
        </class>
    </source>