<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="javax.security.auth.kerberos.KerberosTicket"/>
        <import package="javax.security.auth.kerberos.KerberosKey"/>
        <import package="javax.security.auth.kerberos.KerberosPrincipal"/>
        <import package="javax.security.auth.kerberos.KeyTab"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.login.LoginException"/>
        <import package="java.security.AccessControlContext"/>
        <import package="sun.security.jgss.GSSUtil"/>
        <import package="sun.security.jgss.GSSCaller"/>
        <import package="sun.security.krb5.Credentials"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Objects"/>
        <import package="java.util.Set"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <class name="Krb5Util" line="22">
            <javadoc line="22">
                Utilities for obtaining and converting Kerberos tickets.                
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="26"/>
            <javadoc line="27">
                Default constructor                
            </javadoc>
            <method name="Krb5Util" type="constructor" line="30"/>
            <javadoc line="32">
                Retrieve the service ticket for serverPrincipal from caller&apos;s Subject
                  or from Subject obtained by logging in, or if not found, via the
                  Ticket Granting Service using the TGT obtained from the Subject.
                  Caller must have permission to:
                  - access and update Subject&apos;s private credentials
                  - create LoginContext
                  - read the auth.login.defaultCallbackHandler security property
                  NOTE: This method is used by JSSE Kerberos Cipher Suites                
            </javadoc>
            <method name="getTicketFromSubjectAndTgs" type="KerberosTicket" line="42">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="clientPrincipal" type="String"/>
                    <param name="serverPrincipal" type="String"/>
                    <param name="tgsPrincipal" type="String"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="accSubj" type="Subject" line="43"/>
                <declaration name="ticket" type="KerberosTicket" line="44"/>
                <scope line="45"/>
                <declaration name="loginSubj" type="Subject" line="48"/>
                <scope line="49">
                    <scope line="50">
                        <scope line="53"/>
                    </scope>
                    <scope line="57"/>
                </scope>
                <declaration name="tgt" type="KerberosTicket" line="60"/>
                <declaration name="fromAcc" type="boolean" line="61"/>
                <scope line="62"/>
                <scope line="66"/>
                <scope line="69">
                    <declaration name="tgtCreds" type="Credentials" line="70"/>
                    <declaration name="serviceCreds" type="Credentials" line="71"/>
                    <scope line="72">
                        <scope line="74"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="81">
                Retrieves the ticket corresponding to the client/server principal
                  pair from the Subject in the specified AccessControlContext.
                  If the ticket can not be found in the Subject, and if
                  useSubjectCredsOnly is false, then obtain ticket from
                  a LoginContext.                
            </javadoc>
            <method name="getTicket" type="KerberosTicket" line="88">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="clientPrincipal" type="String"/>
                    <param name="serverPrincipal" type="String"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="accSubj" type="Subject" line="89"/>
                <declaration name="ticket" type="KerberosTicket" line="90"/>
                <scope line="91">
                    <declaration name="subject" type="Subject" line="92"/>
                </scope>
            </method>
            <javadoc line="97">
                Retrieves the caller&apos;s Subject, or Subject obtained by logging in
                  via the specified caller.
                  Caller must have permission to:
                  - access the Subject
                  - create LoginContext
                  - read the auth.login.defaultCallbackHandler security property
                  NOTE: This method is used by JSSE Kerberos Cipher Suites                
            </javadoc>
            <method name="getSubject" type="Subject" line="106">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="subject" type="Subject" line="107"/>
                <scope line="108"/>
            </method>
            <class name="KeysFromKeyTab" line="113">
                <extends class="KerberosKey"/>
                <method name="KeysFromKeyTab" type="constructor" line="114">
                    <params>
                        <param name="key" type="KerberosKey"/>
                    </params>
                </method>
            </class>
            <class name="ServiceCreds" line="118">
                <javadoc line="118">
                    Credentials of a service, the private secret to authenticate its
                      identity, which can be:
                      1. Some KerberosKeys (generated from password)
                      2. A KeyTab (for a typical service)
                      3. A TGT (for a user2user service. Not supported yet)
                      Note that some creds can coexist. For example, a user2user service
                      can use its keytab (or keys) if the client can successfully obtain a
                      normal service ticket, otherwise, it can uses the TGT (actually, the
                      session key of the TGT) if the client can only acquire a service ticket
                      of ENC-TKT-IN-SKEY style.                    
                </javadoc>
                <declaration name="kp" type="KerberosPrincipal" line="131"/>
                <declaration name="ktabs" type="List&lt;KeyTab&gt;" line="132"/>
                <declaration name="kk" type="List&lt;KerberosKey&gt;" line="133"/>
                <declaration name="subj" type="Subject" line="134"/>
                <method name="getInstance" type="ServiceCreds" line="135">
                    <params>
                        <param name="subj" type="Subject"/>
                        <param name="serverPrincipal" type="String"/>
                    </params>
                    <declaration name="sc" type="ServiceCreds" line="136"/>
                    <scope line="138">
                        <scope line="139"/>
                    </scope>
                    <scope line="145">
                        <declaration name="keys" type="List&lt;KerberosKey&gt;" line="146"/>
                        <scope line="147">
                            <scope line="150"/>
                        </scope>
                        <scope line="154"/>
                    </scope>
                    <scope line="160"/>
                </method>
                <method name="getName" type="String" line="165"/>
                <method name="getKKeys" type="KerberosKey[]" line="168">
                    <scope line="169"/>
                    <scope line="172">
                        <declaration name="keys" type="List&lt;KerberosKey&gt;" line="173"/>
                        <scope line="174">
                            <scope line="175"/>
                        </scope>
                        <scope line="179">
                            <declaration name="pcs" type="Set&lt;Object&gt;" line="180"/>
                            <scope line="181">
                                <declaration name="iterator" type="Iterator&lt;Object&gt;" line="182"/>
                                <scope line="183">
                                    <declaration name="obj" type="Object" line="184"/>
                                    <scope line="185">
                                        <declaration name="key" type="KerberosKey" line="186"/>
                                        <scope line="187"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="193"/>
                        </scope>
                    </scope>
                </method>
                <method name="getEKeys" type="EncryptionKey[]" line="200">
                    <declaration name="kkeys" type="KerberosKey[]" line="201"/>
                    <declaration name="ekeys" type="EncryptionKey[]" line="202"/>
                    <scope line="203"/>
                </method>
                <method name="destroy" type="void" line="208"/>
            </class>
            <javadoc line="214">
                Retrieves the ServiceCreds for the specified server principal from
                  the Subject in the specified AccessControlContext. If not found, and if
                  useSubjectCredsOnly is false, then obtain from a LoginContext.
                  NOTE: This method is also used by JSSE Kerberos Cipher Suites                
            </javadoc>
            <method name="getServiceCreds" type="ServiceCreds" line="220">
                <params>
                    <param name="caller" type="GSSCaller"/>
                    <param name="serverPrincipal" type="String"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="accSubj" type="Subject" line="221"/>
                <declaration name="sc" type="ServiceCreds" line="222"/>
                <scope line="223"/>
                <scope line="226">
                    <declaration name="subject" type="Subject" line="227"/>
                </scope>
            </method>
            <method name="credsToTicket" type="KerberosTicket" line="232">
                <params>
                    <param name="serviceCreds" type="Credentials"/>
                </params>
                <declaration name="sessionKey" type="EncryptionKey" line="233"/>
            </method>
            <method name="ticketToCreds" type="Credentials" line="236">
                <params>
                    <param name="kerbTicket" type="KerberosTicket"/>
                </params>
            </method>
            <javadoc line="239">
                A helper method to get EncryptionKeys from a javax..KeyTab                
                <param>
                    ktab the javax..KeyTab class                    
                </param>
                <param>
                    cname the PrincipalName                    
                </param>
                <return>
                    the EKeys, never null, might be empty                    
                </return>
            </javadoc>
            <method name="keysFromJavaxKeyTab" type="EncryptionKey[]" line="245">
                <params>
                    <param name="ktab" type="KeyTab"/>
                    <param name="cname" type="PrincipalName"/>
                </params>
            </method>
        </class>
    </source>