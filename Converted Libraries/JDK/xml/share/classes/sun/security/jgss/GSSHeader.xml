<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss">
        <import package="org.ietf.jgss.GSSException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.util"/>
        <class name="GSSHeader" line="34">
            <comment line="47">
                The RFC states that implementations should explicitly follow the
                 encoding scheme descibed in this section rather than use ASN.1
                 compilers. However, we should consider removing duplicate ASN.1
                 like code from here and depend on sun.security.util if possible.                
            </comment>
            <comment line="323">
                XXX Call these two in some central class                
            </comment>
            <javadoc line="34">
                This class represents the mechanism independent part of a GSS-API
                  context establishment token. Some mechanisms may choose to encode
                  all subsequent tokens as well such that they start with an encoding
                  of an instance of this class. e.g., The Kerberos v5 GSS-API Mechanism
                  uses this header for all GSS-API tokens.
                  &lt;p&gt;
                  The format is specified in RFC 2743 section 3.1.                
                <author>
                    Mayank Upadhyay                    
                </author>
            </javadoc>
            <declaration name="mechOid" type="ObjectIdentifier" line="55"/>
            <declaration name="mechOidBytes" type="byte[]" line="56"/>
            <declaration name="mechTokenLength" type="int" line="57"/>
            <declaration name="TOKEN_ID" type="int" line="59"/>
            <javadoc line="59">
                The tag defined in the GSS-API mechanism independent token
                  format.                
            </javadoc>
            <javadoc line="65">
                Creates a GSSHeader instance whose encoding can be used as the
                  prefix for a particular mechanism token.                
                <param>
                    mechOid the Oid of the mechanism which generated the token                    
                </param>
                <param>
                    mechTokenLength the length of the subsequent portion that
                      the mechanism will be adding.                    
                </param>
            </javadoc>
            <method name="GSSHeader" type="constructor" line="73">
                <params>
                    <param name="mechOid" type="ObjectIdentifier"/>
                    <param name="mechTokenLength" type="int"/>
                </params>
                <declaration name="temp" type="DerOutputStream" line="76"/>
            </method>
            <javadoc line="82">
                Reads in a GSSHeader from an InputStream. Typically this would be
                  used as part of reading the complete token from an InputStream
                  that is obtained from a socket.                
            </javadoc>
            <method name="GSSHeader" type="constructor" line="88">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="90">
                    debug(&quot;Parsing GSS token: &quot;);                    
                </comment>
                <comment line="94">
                    debug(&quot;tag=&quot; + tag);                    
                </comment>
                <comment line="105">
                    debug (&quot; oid=&quot; + mechOid);                    
                </comment>
                <comment line="107">
                    debug (&quot; len starting with oid=&quot; + length);                    
                </comment>
                <comment line="110">
                    debug(&quot;  mechToken length=&quot; + mechTokenLength);                    
                </comment>
                <declaration name="tag" type="int" line="92"/>
                <declaration name="length" type="int" line="100"/>
                <declaration name="temp" type="DerValue" line="102"/>
            </method>
            <javadoc line="114">
                Used to obtain the Oid stored in this GSSHeader instance.                
                <return>
                    the Oid of the mechanism.                    
                </return>
            </javadoc>
            <method name="getOid" type="ObjectIdentifier" line="118"/>
            <javadoc line="122">
                Used to obtain the length of the mechanism specific token that
                  will follow the encoding of this GSSHeader instance.                
                <return>
                    the length of the mechanism specific token portion that
                      will follow this GSSHeader.                    
                </return>
            </javadoc>
            <method name="getMechTokenLength" type="int" line="128"/>
            <javadoc line="132">
                Used to obtain the length of the encoding of this GSSHeader.                
                <return>
                    the lenght of the encoding of this GSSHeader instance.                    
                </return>
            </javadoc>
            <method name="getLength" type="int" line="136">
                <declaration name="lenField" type="int" line="137"/>
            </method>
            <javadoc line="141">
                Used to determine what the maximum possible mechanism token
                  size is if the complete GSSToken returned to the application
                  (including a GSSHeader) is not to exceed some pre-determined
                  value in size.                
                <param>
                    mechOid the Oid of the mechanism that will generate
                      this GSS-API token                    
                </param>
                <param>
                    maxTotalSize the pre-determined value that serves as a
                      maximum size for the complete GSS-API token (including a
                      GSSHeader)                    
                </param>
                <return>
                    the maximum size of mechanism token that can be used
                      so as to not exceed maxTotalSize with the GSS-API token                    
                </return>
            </javadoc>
            <method name="getMaxMechTokenSize" type="int" line="155">
                <params>
                    <param name="mechOid" type="ObjectIdentifier"/>
                    <param name="maxTotalSize" type="int"/>
                </params>
                <comment line="165">
                    Subtract bytes needed for 0x60 tag and mechOidBytes                    
                </comment>
                <comment line="168">
                    Subtract maximum len bytes                    
                </comment>
                <comment line="173">
                    Len field and mechanism token must fit in remaining
                     space. The range of the len field that we allow is
                     1 through 5.
                    
                    
                    int mechTokenSize = 0;
                    for (int lenFieldSize = 1; lenFieldSize &lt;= 5;
                    lenFieldSize++) {
                    mechTokenSize = maxTotalSize - lenFieldSize;
                    if (getLenFieldSize(mechTokenSize + mechOidBytesSize +
                    lenFieldSize) &lt;= lenFieldSize)
                    break;
                    }
                    
                    return mechTokenSize;                    
                </comment>
                <declaration name="mechOidBytesSize" type="int" line="157"/>
                <scope line="158">
                    <declaration name="temp" type="DerOutputStream" line="159"/>
                </scope>
                <scope line="162"/>
            </method>
            <javadoc line="194">
                Used to determine the number of bytes that will be need to encode
                  the length field of the GSSHeader.                
            </javadoc>
            <method name="getLenFieldSize" type="int" line="198">
                <params>
                    <param name="len" type="int"/>
                </params>
                <comment line="209">
                    See getMaxMechTokenSize                    
                </comment>
                <declaration name="retVal" type="int" line="199"/>
                <scope line="200"/>
                <scope line="202"/>
                <scope line="204"/>
                <scope line="206"/>
                <scope line="208"/>
            </method>
            <javadoc line="214">
                Encodes this GSSHeader instance onto the provided OutputStream.                
                <param>
                    os the OutputStream to which the token should be written.                    
                </param>
                <return>
                    the number of bytes that are output as a result of this
                      encoding                    
                </return>
            </javadoc>
            <method name="encode" type="int" line="220">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
                <declaration name="retVal" type="int" line="221"/>
                <declaration name="length" type="int" line="223"/>
            </method>
            <javadoc line="229">
                Get a length from the input stream, allowing for at most 32 bits of
                  encoding to be used. (Not the same as getting a tagged integer!)                
                <return>
                    the length or -1 if indefinite length found.                    
                </return>
                <exception>
                    IOException on parsing error or unsupported lengths.                    
                </exception>
            </javadoc>
            <method name="getLength" type="int" line="237">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="236">
                    shameless lifted from sun.security.util.DerInputStream.                    
                </comment>
            </method>
            <javadoc line="241">
                Get a length from the input stream, allowing for at most 32 bits of
                  encoding to be used. (Not the same as getting a tagged integer!)                
                <return>
                    the length or -1 if indefinite length found.                    
                </return>
                <exception>
                    IOException on parsing error or unsupported lengths.                    
                </exception>
            </javadoc>
            <method name="getLength" type="int" line="249">
                <params>
                    <param name="lenByte" type="int"/>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="248">
                    shameless lifted from sun.security.util.DerInputStream.                    
                </comment>
                <comment line="253">
                    short form, 1 byte datum                    
                </comment>
                <comment line="255">
                    long form or indefinite                    
                </comment>
                <comment line="258">
                    NOTE:  tmp == 0 indicates indefinite length encoded data.
                     tmp &gt; 4 indicates more than 4Gb of data.                    
                </comment>
                <declaration name="value" type="int" line="250"/>
                <scope line="253"/>
                <scope line="255">
                    <scope line="269"/>
                </scope>
            </method>
            <javadoc line="277">
                Put the encoding of the length in the specified stream.                
                <params>
                    len the length of the attribute.                    
                </params>
                <param>
                    out the outputstream to write the length to                    
                </param>
                <return>
                    the number of bytes written                    
                </return>
                <exception>
                    IOException on writing errors.                    
                </exception>
            </javadoc>
            <method name="putLength" type="int" line="286">
                <params>
                    <param name="len" type="int"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="285">
                    Shameless lifted from sun.security.util.DerOutputStream.                    
                </comment>
                <declaration name="retVal" type="int" line="287"/>
                <scope line="288"/>
                <scope line="292"/>
                <scope line="297"/>
                <scope line="303"/>
                <scope line="310"/>
            </method>
            <method name="debug" type="void" line="323">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <method name="getHexBytes" type="String" line="328">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="330"/>
                <scope line="331">
                    <declaration name="b1" type="int" line="333"/>
                    <declaration name="b2" type="int" line="334"/>
                </scope>
            </method>
        </class>
    </source>