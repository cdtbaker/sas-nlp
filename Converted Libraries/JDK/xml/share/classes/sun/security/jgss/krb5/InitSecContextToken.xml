<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="com.sun.security.jgss.AuthorizationDataEntry"/>
        <import package="org.ietf.jgss"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.krb5"/>
        <import package="java.net.InetAddress"/>
        <import package="sun.security.krb5.internal.AuthorizationData"/>
        <import package="sun.security.krb5.internal.KerberosTime"/>
        <class name="InitSecContextToken" line="37">
            <extends class="InitialToken"/>
            <declaration name="apReq" type="KrbApReq" line="39"/>
            <javadoc line="41">
                For the context initiator to call. It constructs a new
                  InitSecContextToken to send over to the peer containing the desired
                  flags and the AP-REQ. It also updates the context with the local
                  sequence number and shared context key.
                  (When mutual auth is enabled the peer has an opportunity to
                  renegotiate the session key in the followup AcceptSecContextToken
                  that it sends.)                
            </javadoc>
            <method name="InitSecContextToken" type="constructor" line="53">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="tgt" type="Credentials"/>
                    <param name="serviceTicket" type="Credentials"/>
                </params>
                <comment line="57">
                    MIT Impl will crash if this is not set!                    
                </comment>
                <declaration name="mutualRequired" type="boolean" line="55"/>
                <declaration name="useSubkey" type="boolean" line="56"/>
                <declaration name="useSequenceNumber" type="boolean" line="57"/>
                <declaration name="gssChecksum" type="OverloadedChecksum" line="59"/>
                <declaration name="checksum" type="Checksum" line="62"/>
                <declaration name="subKey" type="EncryptionKey" line="75"/>
            </method>
            <javadoc line="85">
                For the context acceptor to call. It reads the bytes out of an
                  InputStream and constructs an InitSecContextToken with them.                
            </javadoc>
            <method name="InitSecContextToken" type="constructor" line="91">
                <params>
                    <param name="context" type="Krb5Context"/>
                    <param name="keys" type="EncryptionKey[]"/>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="100">
                    XXX Modify KrbApReq cons to take an InputStream                    
                </comment>
                <comment line="103">
                    debug(&quot;=====ApReqBytes: [&quot; + getHexBytes(apReqBytes) + &quot;]\n&quot;);                    
                </comment>
                <comment line="110">
                    debug(&quot;\nReceived AP-REQ and authenticated it.\n&quot;);                    
                </comment>
                <comment line="114">
                    System.out.println(&quot;\n\nSession key from service ticket is: &quot; +
                    getHexBytes(sessionKey.getBytes()));                    
                </comment>
                <comment line="122">
                    System.out.println(&quot;Sub-Session key from authenticator is: &quot; +
                    getHexBytes(subKey.getBytes()) + &quot;\n&quot;);                    
                </comment>
                <comment line="128">
                    System.out.println(&quot;Sub-Session Key Missing in Authenticator.\n&quot;);                    
                </comment>
                <comment line="149">
                    Use the same sequence number as the peer
                     (Behaviour exhibited by the Windows SSPI server)                    
                </comment>
                <declaration name="tokenId" type="int" line="93"/>
                <declaration name="apReqBytes" type="byte[]" line="100"/>
                <declaration name="addr" type="InetAddress" line="104"/>
                <scope line="105"/>
                <declaration name="sessionKey" type="EncryptionKey" line="111"/>
                <declaration name="subKey" type="EncryptionKey" line="118"/>
                <scope line="119"/>
                <scope line="125"/>
                <declaration name="gssChecksum" type="OverloadedChecksum" line="130"/>
                <declaration name="delegCred" type="Credentials" line="133"/>
                <scope line="134">
                    <declaration name="credElement" type="Krb5CredElement" line="135"/>
                </scope>
                <declaration name="apReqSeqNumber" type="Integer" line="142"/>
                <declaration name="peerSeqNumber" type="int" line="143"/>
                <declaration name="ad" type="AuthorizationData" line="154"/>
                <scope line="155"/>
                <scope line="157">
                    <declaration name="authzData" type="AuthorizationDataEntry[]" line="158"/>
                    <scope line="160"/>
                </scope>
            </method>
            <method name="getKrbApReq" type="KrbApReq" line="168"/>
            <method name="encode" type="byte[]" line="172">
                <comment line="178">
                    System.out.println(&quot;GSS-Token with AP_REQ is:&quot;);
                          System.out.println(getHexBytes(retVal));                    
                </comment>
                <declaration name="apReqBytes" type="byte[]" line="173"/>
                <declaration name="retVal" type="byte[]" line="174"/>
            </method>
        </class>
    </source>