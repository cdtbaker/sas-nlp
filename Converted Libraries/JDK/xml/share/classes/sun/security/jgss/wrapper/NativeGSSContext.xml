<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.wrapper">
        <import package="org.ietf.jgss"/>
        <import package="java.security.Provider"/>
        <import package="sun.security.jgss.GSSHeader"/>
        <import package="sun.security.jgss.GSSUtil"/>
        <import package="sun.security.jgss.GSSExceptionImpl"/>
        <import package="sun.security.jgss.spi"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.jgss.spnego.NegTokenInit"/>
        <import package="sun.security.jgss.spnego.NegTokenTarg"/>
        <import package="javax.security.auth.kerberos.DelegationPermission"/>
        <import package="com.sun.security.jgss.InquireType"/>
        <import package="java.io"/>
        <class name="NativeGSSContext" line="43">
            <comment line="64">
                Pointer to the gss_ctx_id_t structure                
            </comment>
            <comment line="70">
                Assigned during context establishment                
            </comment>
            <comment line="81">
                Retrieve the (preferred) mech out of SPNEGO tokens, i.e.                
            </comment>
            <comment line="82">
                NegTokenInit &amp; NegTokenTarg                
            </comment>
            <comment line="111">
                Perform the Service permission check                
            </comment>
            <comment line="137">
                Perform the Delegation permission check                
            </comment>
            <comment line="189">
                Constructor for context initiator                
            </comment>
            <comment line="211">
                Constructor for context acceptor                
            </comment>
            <comment line="230">
                Constructor for imported context                
            </comment>
            <implements interface="GSSContextSpi"/>
            <javadoc line="43">
                This class is essentially a wrapper class for the gss_ctx_id_t
                  structure of the native GSS library.                
                <author>
                    Valerie Peng                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="GSS_C_DELEG_FLAG" type="int" line="51"/>
            <declaration name="GSS_C_MUTUAL_FLAG" type="int" line="52"/>
            <declaration name="GSS_C_REPLAY_FLAG" type="int" line="53"/>
            <declaration name="GSS_C_SEQUENCE_FLAG" type="int" line="54"/>
            <declaration name="GSS_C_CONF_FLAG" type="int" line="55"/>
            <declaration name="GSS_C_INTEG_FLAG" type="int" line="56"/>
            <declaration name="GSS_C_ANON_FLAG" type="int" line="57"/>
            <declaration name="GSS_C_PROT_READY_FLAG" type="int" line="58"/>
            <declaration name="GSS_C_TRANS_FLAG" type="int" line="59"/>
            <declaration name="NUM_OF_INQUIRE_VALUES" type="int" line="61"/>
            <declaration name="pContext" type="long" line="63"/>
            <declaration name="srcName" type="GSSNameElement" line="64"/>
            <declaration name="targetName" type="GSSNameElement" line="65"/>
            <declaration name="cred" type="GSSCredElement" line="66"/>
            <declaration name="isInitiator" type="boolean" line="67"/>
            <declaration name="isEstablished" type="boolean" line="68"/>
            <declaration name="actualMech" type="Oid" line="69"/>
            <declaration name="cb" type="ChannelBinding" line="71"/>
            <declaration name="delegatedCred" type="GSSCredElement" line="72"/>
            <declaration name="flags" type="int" line="73"/>
            <declaration name="lifetime" type="int" line="74"/>
            <declaration name="cStub" type="GSSLibStub" line="75"/>
            <declaration name="skipDelegPermCheck" type="boolean" line="77"/>
            <declaration name="skipServicePermCheck" type="boolean" line="78"/>
            <method name="getMechFromSpNegoToken" type="Oid" line="84">
                <params>
                    <param name="token" type="byte[]"/>
                    <param name="isInitiator" type="boolean"/>
                </params>
                <declaration name="mech" type="Oid" line="85"/>
                <scope line="86">
                    <declaration name="header" type="GSSHeader" line="87"/>
                    <scope line="88"/>
                    <scope line="90"/>
                    <declaration name="negTokenLen" type="int" line="93"/>
                    <declaration name="negToken" type="byte[]" line="94"/>
                    <declaration name="ntok" type="NegTokenInit" line="98"/>
                    <scope line="99">
                        <declaration name="mechList" type="Oid[]" line="100"/>
                    </scope>
                </scope>
                <scope line="103">
                    <declaration name="ntok" type="NegTokenTarg" line="104"/>
                </scope>
            </method>
            <method name="doServicePermCheck" type="void" line="111">
                <comment line="114">
                    Need to check Service permission for accessing                    
                </comment>
                <comment line="115">
                    initiator cred for SPNEGO during context establishment                    
                </comment>
                <comment line="119">
                    Check by creating default initiator KRB5 cred                    
                </comment>
                <scope line="112">
                    <declaration name="action" type="String" line="113"/>
                    <scope line="117">
                        <scope line="118">
                            <declaration name="tempCred" type="GSSCredElement" line="120"/>
                        </scope>
                        <scope line="125">
                            <declaration name="tgsName" type="String" line="126"/>
                        </scope>
                    </scope>
                    <declaration name="targetStr" type="String" line="130"/>
                </scope>
            </method>
            <method name="doDelegPermCheck" type="void" line="137">
                <declaration name="sm" type="SecurityManager" line="138"/>
                <scope line="139">
                    <declaration name="targetStr" type="String" line="140"/>
                    <declaration name="tgsStr" type="String" line="141"/>
                    <declaration name="buf" type="StringBuffer" line="142"/>
                    <declaration name="krbPrincPair" type="String" line="145"/>
                    <declaration name="perm" type="DelegationPermission" line="148"/>
                </scope>
            </method>
            <method name="retrieveToken" type="byte[]" line="156">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenLen" type="int"/>
                </params>
                <comment line="160">
                    Need to add back the GSS header for a complete GSS token                    
                </comment>
                <comment line="175">
                    Must be unparsed GSS token or SPNEGO&apos;s NegTokenTarg token                    
                </comment>
                <scope line="157">
                    <declaration name="result" type="byte[]" line="158"/>
                    <scope line="159">
                        <declaration name="gssHeader" type="GSSHeader" line="163"/>
                        <declaration name="baos" type="ByteArrayOutputStream" line="166"/>
                        <declaration name="mechToken" type="byte[]" line="168"/>
                        <declaration name="len" type="int" line="169"/>
                    </scope>
                    <scope line="174">
                        <declaration name="dv" type="DerValue" line="177"/>
                    </scope>
                </scope>
                <scope line="183"/>
            </method>
            <method name="NativeGSSContext" type="constructor" line="190">
                <params>
                    <param name="peer" type="GSSNameElement"/>
                    <param name="myCred" type="GSSCredElement"/>
                    <param name="time" type="int"/>
                    <param name="stub" type="GSSLibStub"/>
                </params>
                <scope line="191"/>
                <scope line="200">
                    <scope line="202"/>
                </scope>
            </method>
            <method name="NativeGSSContext" type="constructor" line="212">
                <params>
                    <param name="myCred" type="GSSCredElement"/>
                    <param name="stub" type="GSSLibStub"/>
                </params>
                <comment line="219">
                    Defer Service permission check for default acceptor cred                    
                </comment>
                <comment line="220">
                    to acceptSecContext()                    
                </comment>
                <comment line="225">
                    srcName and potentially targetName (when myCred is null)                    
                </comment>
                <comment line="226">
                    will be set in GSSLibStub.acceptContext(...)                    
                </comment>
                <scope line="221"/>
            </method>
            <method name="NativeGSSContext" type="constructor" line="230">
                <params>
                    <param name="pCtxt" type="long"/>
                    <param name="stub" type="GSSLibStub"/>
                </params>
                <comment line="235">
                    Set everything except cred, cb, delegatedCred                    
                </comment>
                <comment line="247">
                    Do Service Permission check when importing SPNEGO context                    
                </comment>
                <comment line="248">
                    just to be safe                    
                </comment>
                <declaration name="info" type="long[]" line="236"/>
                <scope line="237"/>
                <declaration name="mech" type="Oid" line="249"/>
                <scope line="250"/>
            </method>
            <method name="getProvider" type="Provider" line="255"/>
            <method name="initSecContext" type="byte[]" line="260">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenLen" type="int"/>
                </params>
                <comment line="264">
                    Ignore the specified input stream on the first call                    
                </comment>
                <comment line="283">
                    Only inspect the token when the permission check                    
                </comment>
                <comment line="284">
                    has not been performed                    
                </comment>
                <comment line="286">
                    WORKAROUND for SEAM bug#6287358                    
                </comment>
                <declaration name="outToken" type="byte[]" line="261"/>
                <scope line="262">
                    <declaration name="inToken" type="byte[]" line="263"/>
                    <scope line="265"/>
                    <scope line="273"/>
                    <declaration name="pCred" type="long" line="277"/>
                    <scope line="285">
                        <scope line="289"/>
                    </scope>
                    <scope line="295">
                        <scope line="296"/>
                        <scope line="300"/>
                    </scope>
                </scope>
            </method>
            <method name="acceptSecContext" type="byte[]" line="311">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenLen" type="int"/>
                </params>
                <comment line="325">
                    Replace the current default acceptor cred now that                    
                </comment>
                <comment line="326">
                    the context acceptor name is available                    
                </comment>
                <comment line="332">
                    Only inspect token when the permission check has not                    
                </comment>
                <comment line="333">
                    been performed                    
                </comment>
                <declaration name="outToken" type="byte[]" line="312"/>
                <scope line="313">
                    <declaration name="inToken" type="byte[]" line="314"/>
                    <declaration name="pCred" type="long" line="317"/>
                    <scope line="322"/>
                    <scope line="335">
                        <scope line="337"/>
                    </scope>
                </scope>
            </method>
            <method name="isEstablished" type="boolean" line="345"/>
            <method name="dispose" type="void" line="349">
                <scope line="354"/>
            </method>
            <method name="getWrapSizeLimit" type="int" line="362">
                <params>
                    <param name="qop" type="int"/>
                    <param name="confReq" type="boolean"/>
                    <param name="maxTokenSize" type="int"/>
                </params>
            </method>
            <method name="wrap" type="byte[]" line="368">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="data" type="byte[]" line="369"/>
                <scope line="370"/>
            </method>
            <method name="wrap" type="void" line="378">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="379">
                    <declaration name="result" type="byte[]" line="380"/>
                </scope>
                <scope line="382"/>
            </method>
            <method name="wrap" type="int" line="388">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="result" type="byte[]" line="389"/>
            </method>
            <method name="wrap" type="void" line="394">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="395">
                    <declaration name="data" type="byte[]" line="396"/>
                    <declaration name="length" type="int" line="397"/>
                    <declaration name="token" type="byte[]" line="398"/>
                </scope>
                <scope line="400"/>
            </method>
            <method name="unwrap" type="byte[]" line="407">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="408">
                    <declaration name="temp" type="byte[]" line="409"/>
                </scope>
                <scope line="412"/>
            </method>
            <method name="unwrap" type="int" line="418">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="result" type="byte[]" line="419"/>
                <scope line="420">
                    <declaration name="temp" type="byte[]" line="421"/>
                </scope>
                <scope line="424"/>
            </method>
            <method name="unwrap" type="void" line="431">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="432">
                    <declaration name="wrapped" type="byte[]" line="433"/>
                    <declaration name="wLength" type="int" line="434"/>
                    <declaration name="data" type="byte[]" line="435"/>
                </scope>
                <scope line="438"/>
            </method>
            <method name="unwrap" type="int" line="445">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="wrapped" type="byte[]" line="446"/>
                <declaration name="wLength" type="int" line="447"/>
                <scope line="448">
                    <declaration name="result" type="byte[]" line="451"/>
                </scope>
                <scope line="452"/>
                <declaration name="result" type="byte[]" line="455"/>
            </method>
            <method name="getMIC" type="byte[]" line="461">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="qop" type="int" line="462"/>
                <declaration name="inMsg" type="byte[]" line="463"/>
                <scope line="464"/>
            </method>
            <method name="getMIC" type="void" line="472">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="473">
                    <declaration name="length" type="int" line="474"/>
                    <declaration name="msg" type="byte[]" line="475"/>
                    <declaration name="msgToken" type="byte[]" line="478"/>
                    <scope line="479"/>
                </scope>
                <scope line="482"/>
            </method>
            <method name="verifyMIC" type="void" line="489">
                <params>
                    <param name="inToken" type="byte[]"/>
                    <param name="tOffset" type="int"/>
                    <param name="tLen" type="int"/>
                    <param name="inMsg" type="byte[]"/>
                    <param name="mOffset" type="int"/>
                    <param name="mLen" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="token" type="byte[]" line="490"/>
                <declaration name="msg" type="byte[]" line="491"/>
                <scope line="492"/>
                <scope line="496"/>
            </method>
            <method name="verifyMIC" type="void" line="504">
                <params>
                    <param name="tokStream" type="InputStream"/>
                    <param name="msgStream" type="InputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="505">
                    <declaration name="msg" type="byte[]" line="506"/>
                    <declaration name="mLength" type="int" line="507"/>
                    <declaration name="tok" type="byte[]" line="508"/>
                    <declaration name="tLength" type="int" line="509"/>
                </scope>
                <scope line="511"/>
            </method>
            <method name="export" type="byte[]" line="516">
                <declaration name="result" type="byte[]" line="517"/>
            </method>
            <method name="changeFlags" type="void" line="522">
                <params>
                    <param name="flagMask" type="int"/>
                    <param name="isEnable" type="boolean"/>
                </params>
                <scope line="523">
                    <scope line="524"/>
                    <scope line="526"/>
                </scope>
            </method>
            <method name="requestMutualAuth" type="void" line="531">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestReplayDet" type="void" line="534">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestSequenceDet" type="void" line="537">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestCredDeleg" type="void" line="540">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestAnonymity" type="void" line="543">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestConf" type="void" line="546">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestInteg" type="void" line="549">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestDelegPolicy" type="void" line="552">
                <params>
                    <param name="state" type="boolean"/>
                </params>
                <comment line="553">
                    Not supported, ignore                    
                </comment>
            </method>
            <method name="requestLifetime" type="void" line="555">
                <params>
                    <param name="lifetime" type="int"/>
                </params>
                <scope line="556"/>
            </method>
            <method name="setChannelBinding" type="void" line="560">
                <params>
                    <param name="cb" type="ChannelBinding"/>
                </params>
                <scope line="561"/>
            </method>
            <method name="checkFlags" type="boolean" line="566">
                <params>
                    <param name="flagMask" type="int"/>
                </params>
            </method>
            <method name="getCredDelegState" type="boolean" line="569"/>
            <method name="getMutualAuthState" type="boolean" line="572"/>
            <method name="getReplayDetState" type="boolean" line="575"/>
            <method name="getSequenceDetState" type="boolean" line="578"/>
            <method name="getAnonymityState" type="boolean" line="581"/>
            <method name="isTransferable" type="boolean" line="584"/>
            <method name="isProtReady" type="boolean" line="587"/>
            <method name="getConfState" type="boolean" line="590"/>
            <method name="getIntegState" type="boolean" line="593"/>
            <method name="getDelegPolicyState" type="boolean" line="596"/>
            <method name="getLifetime" type="int" line="599"/>
            <method name="getSrcName" type="GSSNameSpi" line="602"/>
            <method name="getTargName" type="GSSNameSpi" line="605"/>
            <method name="getMech" type="Oid" line="608">
                <scope line="609"/>
                <scope line="611"/>
            </method>
            <method name="getDelegCred" type="GSSCredentialSpi" line="615"/>
            <method name="isInitiator" type="boolean" line="618"/>
            <method name="finalize" type="void" line="622"/>
            <method name="inquireSecContext" type="Object" line="627">
                <params>
                    <param name="type" type="InquireType"/>
                </params>
            </method>
        </class>
    </source>