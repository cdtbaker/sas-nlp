<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.wrapper">
        <import package="org.ietf.jgss"/>
        <import package="java.security.Provider"/>
        <import package="sun.security.jgss.GSSHeader"/>
        <import package="sun.security.jgss.GSSUtil"/>
        <import package="sun.security.jgss.GSSExceptionImpl"/>
        <import package="sun.security.jgss.spi"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.jgss.spnego.NegTokenInit"/>
        <import package="sun.security.jgss.spnego.NegTokenTarg"/>
        <import package="javax.security.auth.kerberos.DelegationPermission"/>
        <import package="com.sun.security.jgss.InquireType"/>
        <import package="java.io"/>
        <class name="NativeGSSContext" line="15">
            <implements interface="GSSContextSpi"/>
            <javadoc line="15">
                This class is essentially a wrapper class for the gss_ctx_id_t
                  structure of the native GSS library.                
                <author>
                    Valerie Peng                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="GSS_C_DELEG_FLAG" type="int" line="22"/>
            <declaration name="GSS_C_MUTUAL_FLAG" type="int" line="23"/>
            <declaration name="GSS_C_REPLAY_FLAG" type="int" line="24"/>
            <declaration name="GSS_C_SEQUENCE_FLAG" type="int" line="25"/>
            <declaration name="GSS_C_CONF_FLAG" type="int" line="26"/>
            <declaration name="GSS_C_INTEG_FLAG" type="int" line="27"/>
            <declaration name="GSS_C_ANON_FLAG" type="int" line="28"/>
            <declaration name="GSS_C_PROT_READY_FLAG" type="int" line="29"/>
            <declaration name="GSS_C_TRANS_FLAG" type="int" line="30"/>
            <declaration name="NUM_OF_INQUIRE_VALUES" type="int" line="31"/>
            <declaration name="pContext" type="long" line="32"/>
            <declaration name="srcName" type="GSSNameElement" line="33"/>
            <declaration name="targetName" type="GSSNameElement" line="34"/>
            <declaration name="cred" type="GSSCredElement" line="35"/>
            <declaration name="isInitiator" type="boolean" line="36"/>
            <declaration name="isEstablished" type="boolean" line="37"/>
            <declaration name="actualMech" type="Oid" line="38"/>
            <declaration name="cb" type="ChannelBinding" line="39"/>
            <declaration name="delegatedCred" type="GSSCredElement" line="40"/>
            <declaration name="flags" type="int" line="41"/>
            <declaration name="lifetime" type="int" line="42"/>
            <declaration name="cStub" type="GSSLibStub" line="43"/>
            <declaration name="skipDelegPermCheck" type="boolean" line="44"/>
            <declaration name="skipServicePermCheck" type="boolean" line="45"/>
            <method name="getMechFromSpNegoToken" type="Oid" line="46">
                <params>
                    <param name="token" type="byte[]"/>
                    <param name="isInitiator" type="boolean"/>
                </params>
                <declaration name="mech" type="Oid" line="47"/>
                <scope line="48">
                    <declaration name="header" type="GSSHeader" line="49"/>
                    <scope line="50"/>
                    <scope line="53"/>
                    <declaration name="negTokenLen" type="int" line="56"/>
                    <declaration name="negToken" type="byte[]" line="57"/>
                    <declaration name="ntok" type="NegTokenInit" line="59"/>
                    <scope line="60">
                        <declaration name="mechList" type="Oid[]" line="61"/>
                    </scope>
                </scope>
                <scope line="65">
                    <declaration name="ntok" type="NegTokenTarg" line="66"/>
                </scope>
            </method>
            <method name="doServicePermCheck" type="void" line="71">
                <scope line="72">
                    <declaration name="action" type="String" line="73"/>
                    <scope line="74">
                        <scope line="75">
                            <declaration name="tempCred" type="GSSCredElement" line="76"/>
                        </scope>
                        <scope line="79">
                            <declaration name="tgsName" type="String" line="80"/>
                        </scope>
                    </scope>
                    <declaration name="targetStr" type="String" line="84"/>
                </scope>
            </method>
            <method name="doDelegPermCheck" type="void" line="89">
                <declaration name="sm" type="SecurityManager" line="90"/>
                <scope line="91">
                    <declaration name="targetStr" type="String" line="92"/>
                    <declaration name="tgsStr" type="String" line="93"/>
                    <declaration name="buf" type="StringBuffer" line="94"/>
                    <declaration name="krbPrincPair" type="String" line="97"/>
                    <declaration name="perm" type="DelegationPermission" line="99"/>
                </scope>
            </method>
            <method name="retrieveToken" type="byte[]" line="104">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenLen" type="int"/>
                </params>
                <scope line="105">
                    <declaration name="result" type="byte[]" line="106"/>
                    <scope line="107">
                        <declaration name="gssHeader" type="GSSHeader" line="109"/>
                        <declaration name="baos" type="ByteArrayOutputStream" line="110"/>
                        <declaration name="mechToken" type="byte[]" line="111"/>
                        <declaration name="len" type="int" line="112"/>
                    </scope>
                    <scope line="118">
                        <declaration name="dv" type="DerValue" line="120"/>
                    </scope>
                </scope>
                <scope line="126"/>
            </method>
            <method name="NativeGSSContext" type="constructor" line="130">
                <params>
                    <param name="peer" type="GSSNameElement"/>
                    <param name="myCred" type="GSSCredElement"/>
                    <param name="time" type="int"/>
                    <param name="stub" type="GSSLibStub"/>
                </params>
                <scope line="131"/>
                <scope line="139">
                    <scope line="141"/>
                </scope>
            </method>
            <method name="NativeGSSContext" type="constructor" line="147">
                <params>
                    <param name="myCred" type="GSSCredElement"/>
                    <param name="stub" type="GSSLibStub"/>
                </params>
                <scope line="152"/>
            </method>
            <method name="NativeGSSContext" type="constructor" line="156">
                <params>
                    <param name="pCtxt" type="long"/>
                    <param name="stub" type="GSSLibStub"/>
                </params>
                <declaration name="info" type="long[]" line="160"/>
                <scope line="161"/>
                <declaration name="mech" type="Oid" line="170"/>
                <scope line="171"/>
            </method>
            <method name="getProvider" type="Provider" line="175"/>
            <method name="initSecContext" type="byte[]" line="178">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenLen" type="int"/>
                </params>
                <declaration name="outToken" type="byte[]" line="179"/>
                <scope line="180">
                    <declaration name="inToken" type="byte[]" line="181"/>
                    <scope line="182"/>
                    <scope line="187"/>
                    <declaration name="pCred" type="long" line="190"/>
                    <scope line="193">
                        <scope line="195"/>
                    </scope>
                    <scope line="200">
                        <scope line="201"/>
                        <scope line="204"/>
                    </scope>
                </scope>
            </method>
            <method name="acceptSecContext" type="byte[]" line="211">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="mechTokenLen" type="int"/>
                </params>
                <declaration name="outToken" type="byte[]" line="212"/>
                <scope line="213">
                    <declaration name="inToken" type="byte[]" line="214"/>
                    <declaration name="pCred" type="long" line="216"/>
                    <scope line="219"/>
                    <scope line="224">
                        <scope line="225"/>
                    </scope>
                </scope>
            </method>
            <method name="isEstablished" type="boolean" line="232"/>
            <method name="dispose" type="void" line="235">
                <scope line="240"/>
            </method>
            <method name="getWrapSizeLimit" type="int" line="245">
                <params>
                    <param name="qop" type="int"/>
                    <param name="confReq" type="boolean"/>
                    <param name="maxTokenSize" type="int"/>
                </params>
            </method>
            <method name="wrap" type="byte[]" line="248">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="data" type="byte[]" line="249"/>
                <scope line="250"/>
            </method>
            <method name="wrap" type="void" line="256">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="os" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="257">
                    <declaration name="result" type="byte[]" line="258"/>
                </scope>
                <scope line="261"/>
            </method>
            <method name="wrap" type="int" line="265">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="result" type="byte[]" line="266"/>
            </method>
            <method name="wrap" type="void" line="270">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="271">
                    <declaration name="data" type="byte[]" line="272"/>
                    <declaration name="length" type="int" line="273"/>
                    <declaration name="token" type="byte[]" line="274"/>
                </scope>
                <scope line="277"/>
            </method>
            <method name="unwrap" type="byte[]" line="281">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="282">
                    <declaration name="temp" type="byte[]" line="283"/>
                </scope>
                <scope line="287"/>
            </method>
            <method name="unwrap" type="int" line="291">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="result" type="byte[]" line="292"/>
                <scope line="293">
                    <declaration name="temp" type="byte[]" line="294"/>
                </scope>
                <scope line="298"/>
            </method>
            <method name="unwrap" type="void" line="304">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="305">
                    <declaration name="wrapped" type="byte[]" line="306"/>
                    <declaration name="wLength" type="int" line="307"/>
                    <declaration name="data" type="byte[]" line="308"/>
                </scope>
                <scope line="312"/>
            </method>
            <method name="unwrap" type="int" line="316">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outBuf" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="wrapped" type="byte[]" line="317"/>
                <declaration name="wLength" type="int" line="318"/>
                <scope line="319">
                    <declaration name="result" type="byte[]" line="322"/>
                </scope>
                <scope line="324"/>
                <declaration name="result" type="byte[]" line="327"/>
            </method>
            <method name="getMIC" type="byte[]" line="331">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="qop" type="int" line="332"/>
                <declaration name="inMsg" type="byte[]" line="333"/>
                <scope line="334"/>
            </method>
            <method name="getMIC" type="void" line="340">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="341">
                    <declaration name="length" type="int" line="342"/>
                    <declaration name="msg" type="byte[]" line="343"/>
                    <declaration name="msgToken" type="byte[]" line="345"/>
                    <scope line="346"/>
                </scope>
                <scope line="350"/>
            </method>
            <method name="verifyMIC" type="void" line="354">
                <params>
                    <param name="inToken" type="byte[]"/>
                    <param name="tOffset" type="int"/>
                    <param name="tLen" type="int"/>
                    <param name="inMsg" type="byte[]"/>
                    <param name="mOffset" type="int"/>
                    <param name="mLen" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <declaration name="token" type="byte[]" line="355"/>
                <declaration name="msg" type="byte[]" line="356"/>
                <scope line="357"/>
                <scope line="361"/>
            </method>
            <method name="verifyMIC" type="void" line="367">
                <params>
                    <param name="tokStream" type="InputStream"/>
                    <param name="msgStream" type="InputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
                <scope line="368">
                    <declaration name="msg" type="byte[]" line="369"/>
                    <declaration name="mLength" type="int" line="370"/>
                    <declaration name="tok" type="byte[]" line="371"/>
                    <declaration name="tLength" type="int" line="372"/>
                </scope>
                <scope line="375"/>
            </method>
            <method name="export" type="byte[]" line="379">
                <declaration name="result" type="byte[]" line="380"/>
            </method>
            <method name="changeFlags" type="void" line="384">
                <params>
                    <param name="flagMask" type="int"/>
                    <param name="isEnable" type="boolean"/>
                </params>
                <scope line="385">
                    <scope line="386"/>
                    <scope line="389"/>
                </scope>
            </method>
            <method name="requestMutualAuth" type="void" line="394">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestReplayDet" type="void" line="397">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestSequenceDet" type="void" line="400">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestCredDeleg" type="void" line="403">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestAnonymity" type="void" line="406">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestConf" type="void" line="409">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestInteg" type="void" line="412">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestDelegPolicy" type="void" line="415">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestLifetime" type="void" line="417">
                <params>
                    <param name="lifetime" type="int"/>
                </params>
                <scope line="418"/>
            </method>
            <method name="setChannelBinding" type="void" line="422">
                <params>
                    <param name="cb" type="ChannelBinding"/>
                </params>
                <scope line="423"/>
            </method>
            <method name="checkFlags" type="boolean" line="427">
                <params>
                    <param name="flagMask" type="int"/>
                </params>
            </method>
            <method name="getCredDelegState" type="boolean" line="430"/>
            <method name="getMutualAuthState" type="boolean" line="433"/>
            <method name="getReplayDetState" type="boolean" line="436"/>
            <method name="getSequenceDetState" type="boolean" line="439"/>
            <method name="getAnonymityState" type="boolean" line="442"/>
            <method name="isTransferable" type="boolean" line="445"/>
            <method name="isProtReady" type="boolean" line="448"/>
            <method name="getConfState" type="boolean" line="451"/>
            <method name="getIntegState" type="boolean" line="454"/>
            <method name="getDelegPolicyState" type="boolean" line="457"/>
            <method name="getLifetime" type="int" line="460"/>
            <method name="getSrcName" type="GSSNameSpi" line="463"/>
            <method name="getTargName" type="GSSNameSpi" line="466"/>
            <method name="getMech" type="Oid" line="469">
                <scope line="470"/>
                <scope line="473"/>
            </method>
            <method name="getDelegCred" type="GSSCredentialSpi" line="477"/>
            <method name="isInitiator" type="boolean" line="480"/>
            <method name="finalize" type="void" line="483"/>
            <method name="inquireSecContext" type="Object" line="486">
                <params>
                    <param name="type" type="InquireType"/>
                </params>
            </method>
        </class>
    </source>