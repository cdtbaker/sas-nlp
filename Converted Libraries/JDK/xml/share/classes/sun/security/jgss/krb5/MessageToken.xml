<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.krb5">
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss"/>
        <import package="sun.security.krb5"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.MessageDigest"/>
        <class name="MessageToken" line="11">
            <extends class="Krb5Token"/>
            <javadoc line="11">
                This class is a base class for other token definitions that pertain to
                  per-message GSS-API calls. Conceptually GSS-API has two types of
                  per-message tokens: WrapToken and MicToken. They differ in the respect
                  that a WrapToken carries additional plaintext or ciphertext application
                  data besides just the sequence number and checksum. This class
                  encapsulates the commonality in the structure of the WrapToken and the
                  MicToken. This structure can be represented as:
                  &lt;p&gt;
                  &lt;pre&gt;
                  0..1           TOK_ID          Identification field.
                  01 01 - Mic token
                  02 01 - Wrap token
                  2..3           SGN_ALG         Checksum algorithm indicator.
                  00 00 - DES MAC MD5
                  01 00 - MD2.5
                  02 00 - DES MAC
                  04 00 - HMAC SHA1 DES3-KD
                  11 00 - RC4-HMAC
                  4..5           SEAL_ALG        ff ff - none
                  00 00 - DES
                  02 00 - DES3-KD
                  10 00 - RC4-HMAC
                  6..7           Filler          Contains ff ff
                  8..15          SND_SEQ         Encrypted sequence number field.
                  16..s+15       SGN_CKSUM       Checksum of plaintext padded data,
                  calculated according to algorithm
                  specified in SGN_ALG field.
                  s+16..last     Data            encrypted or plaintext padded data
                  &lt;/pre&gt;
                  Where &quot;s&quot; indicates the size of the checksum.
                  &lt;p&gt;
                  As always, this is preceeded by a GSSHeader.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <author>
                    Ram Marti                    
                </author>
                <see>
                    sun.security.jgss.GSSHeader                    
                </see>
            </javadoc>
            <declaration name="TOKEN_NO_CKSUM_SIZE" type="int" line="49"/>
            <declaration name="FILLER" type="int" line="50"/>
            <javadoc line="50">
                Filler data as defined in the specification of the Kerberos v5 GSS-API
                  Mechanism.                
            </javadoc>
            <declaration name="SGN_ALG_DES_MAC_MD5" type="int" line="55"/>
            <declaration name="SGN_ALG_DES_MAC" type="int" line="56"/>
            <declaration name="SGN_ALG_HMAC_SHA1_DES3_KD" type="int" line="57"/>
            <declaration name="SEAL_ALG_NONE" type="int" line="58"/>
            <javadoc line="58">
                A value for the SEAL_ALG field that indicates that no encryption was
                  used.                
            </javadoc>
            <declaration name="SEAL_ALG_DES" type="int" line="63"/>
            <declaration name="SEAL_ALG_DES3_KD" type="int" line="64"/>
            <javadoc line="64">
                Use DES3-KD sealing algorithm. (draft-raeburn-cat-gssapi-krb5-3des-00)
                  This algorithm uses triple-DES with key derivation, with a usage
                  value KG_USAGE_SEAL.  Padding is still to 8-byte multiples, and the
                  IV for encrypting application data is zero.                
            </javadoc>
            <declaration name="SEAL_ALG_ARCFOUR_HMAC" type="int" line="71"/>
            <declaration name="SGN_ALG_HMAC_MD5_ARCFOUR" type="int" line="72"/>
            <declaration name="TOKEN_ID_POS" type="int" line="73"/>
            <declaration name="SIGN_ALG_POS" type="int" line="74"/>
            <declaration name="SEAL_ALG_POS" type="int" line="75"/>
            <declaration name="seqNumber" type="int" line="76"/>
            <declaration name="confState" type="boolean" line="77"/>
            <declaration name="initiator" type="boolean" line="78"/>
            <declaration name="tokenId" type="int" line="79"/>
            <declaration name="gssHeader" type="GSSHeader" line="80"/>
            <declaration name="tokenHeader" type="MessageTokenHeader" line="81"/>
            <declaration name="checksum" type="byte[]" line="82"/>
            <declaration name="encSeqNumber" type="byte[]" line="83"/>
            <declaration name="seqNumberData" type="byte[]" line="84"/>
            <declaration name="cipherHelper" type="CipherHelper" line="85"/>
            <javadoc line="86">
                Constructs a MessageToken from a byte array. If there are more bytes
                  in the array than needed, the extra bytes are simply ignroed.                
                <param>
                    tokenId the token id that should be contained in this token as
                      it is read.                    
                </param>
                <param>
                    context the Kerberos context associated with this token                    
                </param>
                <param>
                    tokenBytes the byte array containing the token                    
                </param>
                <param>
                    tokenOffset the offset where the token begins                    
                </param>
                <param>
                    tokenLen the length of the token                    
                </param>
                <param>
                    prop the MessageProp structure in which the properties of the
                      token should be stored.                    
                </param>
                <throws>
                    GSSException if there is a problem parsing the token                    
                </throws>
            </javadoc>
            <method name="MessageToken" type="constructor" line="99">
                <params>
                    <param name="tokenId" type="int"/>
                    <param name="context" type="Krb5Context"/>
                    <param name="tokenBytes" type="byte[]"/>
                    <param name="tokenOffset" type="int"/>
                    <param name="tokenLen" type="int"/>
                    <param name="prop" type="MessageProp"/>
                </params>
            </method>
            <javadoc line="102">
                Constructs a MessageToken from an InputStream. Bytes will be read on
                  demand and the thread might block if there are not enough bytes to
                  complete the token.                
                <param>
                    tokenId the token id that should be contained in this token as
                      it is read.                    
                </param>
                <param>
                    context the Kerberos context associated with this token                    
                </param>
                <param>
                    is the InputStream from which to read                    
                </param>
                <param>
                    prop the MessageProp structure in which the properties of the
                      token should be stored.                    
                </param>
                <throws>
                    GSSException if there is a problem reading from the
                      InputStream or parsing the token                    
                </throws>
            </javadoc>
            <method name="MessageToken" type="constructor" line="115">
                <params>
                    <param name="tokenId" type="int"/>
                    <param name="context" type="Krb5Context"/>
                    <param name="is" type="InputStream"/>
                    <param name="prop" type="MessageProp"/>
                </params>
                <scope line="117">
                    <scope line="119"/>
                    <scope line="122"/>
                </scope>
                <scope line="131"/>
            </method>
            <javadoc line="135">
                Used to obtain the GSSHeader that was at the start of this
                  token.                
            </javadoc>
            <method name="getGSSHeader" type="GSSHeader" line="139"/>
            <javadoc line="142">
                Used to obtain the token id that was contained in this token.                
                <return>
                    the token id in the token                    
                </return>
            </javadoc>
            <method name="getTokenId" type="int" line="146"/>
            <javadoc line="149">
                Used to obtain the encrypted sequence number in this token.                
                <return>
                    the encrypted sequence number in the token                    
                </return>
            </javadoc>
            <method name="getEncSeqNumber" type="byte[]" line="153"/>
            <javadoc line="156">
                Used to obtain the checksum that was contained in this token.                
                <return>
                    the checksum in the token                    
                </return>
            </javadoc>
            <method name="getChecksum" type="byte[]" line="160"/>
            <javadoc line="163">
                Used to determine if this token contains any encrypted data.                
                <return>
                    true if it contains any encrypted data, false if there is only
                      plaintext data or if there is no data.                    
                </return>
            </javadoc>
            <method name="getConfState" type="boolean" line="168"/>
            <javadoc line="171">
                Generates the checksum field and the encrypted sequence number
                  field. The encrypted sequence number uses the 8 bytes of the checksum
                  as an initial vector in a fixed DesCbc algorithm.                
                <param>
                    prop the MessageProp structure that determines what sort of
                      checksum and sealing algorithm should be used. The lower byte
                      of qop determines the checksum algorithm while the upper byte
                      determines the signing algorithm.
                      Checksum values are:
                      0 - default (DES_MAC)
                      1 - MD5
                      2 - DES_MD5
                      3 - DES_MAC
                      4 - HMAC_SHA1
                      Sealing values are:
                      0 - default (DES)
                      1 - DES
                      2 - DES3-KD                    
                </param>
                <param>
                    optionalHeader an optional header that will be processed first
                      during  checksum calculation                    
                </param>
                <param>
                    data the application data to checksum                    
                </param>
                <param>
                    offset the offset where the data starts                    
                </param>
                <param>
                    len the length of the data                    
                </param>
                <param>
                    optionalTrailer an optional trailer that will be processed
                      last during checksum calculation. e.g., padding that should be
                      appended to the application data                    
                </param>
                <throws>
                    GSSException if an error occurs in the checksum calculation or
                      encryption sequence number calculation.                    
                </throws>
            </javadoc>
            <method name="genSignAndSeqNumber" type="void" line="200">
                <params>
                    <param name="prop" type="MessageProp"/>
                    <param name="optionalHeader" type="byte[]"/>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="optionalTrailer" type="byte[]"/>
                </params>
                <declaration name="qop" type="int" line="201"/>
                <scope line="202"/>
                <scope line="206"/>
                <scope line="212"/>
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <javadoc line="226">
                Verifies that the checksum field and sequence number direction bytes
                  are valid and consistent with the application data.                
                <param>
                    optionalHeader an optional header that will be processed first
                      during checksum calculation.                    
                </param>
                <param>
                    data the application data                    
                </param>
                <param>
                    offset the offset where the data begins                    
                </param>
                <param>
                    len the length of the application data                    
                </param>
                <param>
                    optionalTrailer an optional trailer that will be processed last
                      during checksum calculation. e.g., padding that should be appended to
                      the application data                    
                </param>
                <throws>
                    GSSException if an error occurs in the checksum calculation or
                      encryption sequence number calculation.                    
                </throws>
            </javadoc>
            <method name="verifySignAndSeqNumber" type="boolean" line="240">
                <params>
                    <param name="optionalHeader" type="byte[]"/>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="optionalTrailer" type="byte[]"/>
                </params>
                <declaration name="myChecksum" type="byte[]" line="241"/>
                <scope line="242">
                    <declaration name="directionByte" type="byte" line="244"/>
                </scope>
            </method>
            <method name="getSequenceNumber" type="int" line="250">
                <declaration name="sequenceNum" type="int" line="251"/>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <javadoc line="260">
                Computes the checksum based on the algorithm stored in the
                  tokenHeader.                
                <param>
                    optionalHeader an optional header that will be processed first
                      during checksum calculation.                    
                </param>
                <param>
                    data the application data                    
                </param>
                <param>
                    offset the offset where the data begins                    
                </param>
                <param>
                    len the length of the application data                    
                </param>
                <param>
                    optionalTrailer an optional trailer that will be processed last
                      during checksum calculation. e.g., padding that should be appended to
                      the application data                    
                </param>
                <throws>
                    GSSException if an error occurs in the checksum calculation.                    
                </throws>
            </javadoc>
            <method name="getChecksum" type="byte[]" line="273">
                <params>
                    <param name="optionalHeader" type="byte[]"/>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="optionalTrailer" type="byte[]"/>
                </params>
                <declaration name="tokenHeaderBytes" type="byte[]" line="274"/>
                <declaration name="existingHeader" type="byte[]" line="275"/>
                <declaration name="checksumDataHeader" type="byte[]" line="276"/>
                <scope line="277"/>
            </method>
            <javadoc line="284">
                Constructs an empty MessageToken for the local context to send to
                  the peer. It also increments the local sequence number in the
                  Krb5Context instance it uses after obtaining the object lock for
                  it.                
                <param>
                    tokenId the token id that should be contained in this token                    
                </param>
                <param>
                    context the Kerberos context associated with this token                    
                </param>
            </javadoc>
            <method name="MessageToken" type="constructor" line="292">
                <params>
                    <param name="tokenId" type="int"/>
                    <param name="context" type="Krb5Context"/>
                </params>
            </method>
            <method name="init" type="void" line="296">
                <params>
                    <param name="tokenId" type="int"/>
                    <param name="context" type="Krb5Context"/>
                </params>
            </method>
            <javadoc line="302">
                Encodes a GSSHeader and this token onto an OutputStream.                
                <param>
                    os the OutputStream to which this should be written                    
                </param>
                <throws>
                    GSSException if an error occurs while writing to the OutputStream                    
                </throws>
            </javadoc>
            <method name="encode" type="void" line="307">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="314">
                Obtains the size of this token. Note that this excludes the size of
                  the GSSHeader.                
                <return>
                    token size                    
                </return>
            </javadoc>
            <method name="getKrb5TokenSize" type="int" line="319"/>
            <method name="getTokenSize" type="int" line="322"/>
            <method name="getTokenSize" type="int" line="325">
                <params>
                    <param name="ch" type="CipherHelper"/>
                </params>
            </method>
            <method name="getSealAlg" type="int" line="328"/>
            <javadoc line="328">
                Obtains the encryption algorithm that should be used in this token
                  given the state of confidentiality the application requested.
                  Requested qop must be consistent with negotiated session key.                
                <param>
                    confRequested true if the application desired confidentiality
                      on this token, false otherwise                    
                </param>
                <param>
                    qop the qop requested by the application                    
                </param>
                <throws>
                    GSSException if qop is incompatible with the negotiated
                      session key                    
                </throws>
            </javadoc>
            <class name="MessageTokenHeader" line="339">
                <javadoc line="339">
                    This inner class represents the initial portion of the message token
                      and contains information about the checksum and encryption algorithms
                      that are in use. It constitutes the first 8 bytes of the
                      message token:
                      &lt;pre&gt;
                      0..1           TOK_ID          Identification field.
                      01 01 - Mic token
                      02 01 - Wrap token
                      2..3           SGN_ALG         Checksum algorithm indicator.
                      00 00 - DES MAC MD5
                      01 00 - MD2.5
                      02 00 - DES MAC
                      04 00 - HMAC SHA1 DES3-KD
                      11 00 - RC4-HMAC
                      4..5           SEAL_ALG        ff ff - none
                      00 00 - DES
                      02 00 - DES3-KD
                      10 00 - RC4-HMAC
                      6..7           Filler          Contains ff ff
                      &lt;/pre&gt;                    
                </javadoc>
                <declaration name="tokenId" type="int" line="362"/>
                <declaration name="signAlg" type="int" line="363"/>
                <declaration name="sealAlg" type="int" line="364"/>
                <declaration name="bytes" type="byte[]" line="365"/>
                <javadoc line="366">
                    Constructs a MessageTokenHeader for the specified token type with
                      appropriate checksum and encryption algorithms fields.                    
                    <param>
                        tokenId the token id for this mesage token                        
                    </param>
                    <param>
                        conf true if confidentiality will be resuested with this
                          message token, false otherwise.                        
                    </param>
                    <param>
                        qop the value of the quality of protection that will be
                          desired.                        
                    </param>
                </javadoc>
                <method name="MessageTokenHeader" type="constructor" line="375">
                    <params>
                        <param name="tokenId" type="int"/>
                        <param name="conf" type="boolean"/>
                        <param name="qop" type="int"/>
                    </params>
                </method>
                <javadoc line="388">
                    Constructs a MessageTokenHeader by reading it from an InputStream
                      and sets the appropriate confidentiality and quality of protection
                      values in a MessageProp structure.                    
                    <param>
                        is the InputStream to read from                        
                    </param>
                    <param>
                        prop the MessageProp to populate                        
                    </param>
                    <throws>
                        IOException is an error occurs while reading from the
                          InputStream                        
                    </throws>
                </javadoc>
                <method name="MessageTokenHeader" type="constructor" line="397">
                    <params>
                        <param name="is" type="InputStream"/>
                        <param name="prop" type="MessageProp"/>
                    </params>
                    <declaration name="temp" type="int" line="402"/>
                </method>
                <javadoc line="414">
                    Encodes this MessageTokenHeader onto an OutputStream                    
                    <param>
                        os the OutputStream to write to                        
                    </param>
                    <throws>
                        IOException is an error occurs while writing                        
                    </throws>
                </javadoc>
                <method name="encode" type="void" line="419">
                    <params>
                        <param name="os" type="OutputStream"/>
                    </params>
                </method>
                <javadoc line="422">
                    Returns the token id for the message token.                    
                    <return>
                        the token id                        
                    </return>
                    <see>
                        sun.security.jgss.krb5.Krb5Token#MIC_ID                        
                    </see>
                    <see>
                        sun.security.jgss.krb5.Krb5Token#WRAP_ID                        
                    </see>
                </javadoc>
                <method name="getTokenId" type="int" line="428"/>
                <javadoc line="431">
                    Returns the sign algorithm for the message token.                    
                    <return>
                        the sign algorithm                        
                    </return>
                    <see>
                        sun.security.jgss.krb5.MessageToken#SIGN_DES_MAC                        
                    </see>
                    <see>
                        sun.security.jgss.krb5.MessageToken#SIGN_DES_MAC_MD5                        
                    </see>
                </javadoc>
                <method name="getSignAlg" type="int" line="437"/>
                <javadoc line="440">
                    Returns the seal algorithm for the message token.                    
                    <return>
                        the seal algorithm                        
                    </return>
                    <see>
                        sun.security.jgss.krb5.MessageToken#SEAL_ALG_DES                        
                    </see>
                    <see>
                        sun.security.jgss.krb5.MessageToken#SEAL_ALG_NONE                        
                    </see>
                </javadoc>
                <method name="getSealAlg" type="int" line="446"/>
                <javadoc line="449">
                    Returns the bytes of this header.                    
                    <return>
                        8 bytes that form this header                        
                    </return>
                </javadoc>
                <method name="getBytes" type="byte[]" line="453"/>
            </class>
            <javadoc line="457">
                Determine signing algorithm based on QOP.                
            </javadoc>
            <method name="getSgnAlg" type="int" line="460">
                <params>
                    <param name="qop" type="int"/>
                </params>
            </method>
        </class>
    </source>