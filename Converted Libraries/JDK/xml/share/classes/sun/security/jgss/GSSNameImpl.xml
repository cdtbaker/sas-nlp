<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss">
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss.spi"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Arrays"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <class name="GSSNameImpl" line="13">
            <implements interface="GSSName"/>
            <javadoc line="13">
                This is the implementation class for GSSName. Conceptually the
                  GSSName is a container with mechanism specific name elements. Each
                  name element is a representation of how that particular mechanism
                  would canonicalize this principal.
                  Generally a GSSName is created by an application when it supplies
                  a sequence of bytes and a nametype that helps each mechanism
                  decide how to interpret those bytes.
                  It is not necessary to create name elements for each available
                  mechanism at the time the application creates the GSSName. This
                  implementation does this lazily, as and when name elements for
                  mechanisms are required to be handed out. (Generally, other GSS
                  classes like GSSContext and GSSCredential request specific
                  elements depending on the mechanisms that they are dealing with.)
                  Assume that getting a mechanism to parse the applciation specified
                  bytes is an expensive call.
                  When a GSSName is canonicalized wrt some mechanism, it is supposed
                  to discard all elements of other mechanisms and retain only the
                  element for this mechanism. In GSS terminology this is called a
                  Mechanism Name or MN. This implementation tries to retain the
                  application provided bytes and name type just in case the MN is
                  asked to produce an element for a mechanism that is different.
                  When a GSSName is to be exported, the name element for the desired
                  mechanism is converted to a byte representation and written
                  out. It might happen that a name element for that mechanism cannot
                  be obtained. This happens when the mechanism is just not supported
                  in this GSS-API or when the mechanism is supported but bytes
                  corresponding to the nametypes that it understands are not
                  available in this GSSName.
                  This class is safe for sharing. Each retrieval of a name element
                  from getElement() might potentially add a new element to the
                  hashmap of elements, but getElement() is synchronized.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="oldHostbasedServiceName" type="Oid" line="49"/>
            <javadoc line="49">
                The old Oid used in RFC 2853. Now supported as
                  input parameters in:
                  1. The four overloaded GSSManager.createName() methods
                  2. GSSManager.getMechsForName(Oid)
                  Note that even if a GSSName is created with this old Oid,
                  its internal name type and getStringNameType() output are
                  always the new value.                
            </javadoc>
            <scope line="59">
                <declaration name="tmp" type="Oid" line="60"/>
                <scope line="61"/>
                <scope line="64"/>
            </scope>
            <declaration name="gssManager" type="GSSManagerImpl" line="68"/>
            <declaration name="appNameStr" type="String" line="69"/>
            <declaration name="appNameBytes" type="byte[]" line="70"/>
            <declaration name="appNameType" type="Oid" line="71"/>
            <declaration name="printableName" type="String" line="72"/>
            <declaration name="printableNameType" type="Oid" line="73"/>
            <declaration name="elements" type="HashMap&lt;Oid,GSSNameSpi&gt;" line="74"/>
            <declaration name="mechElement" type="GSSNameSpi" line="75"/>
            <method name="wrapElement" type="GSSNameImpl" line="76">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="mechElement" type="GSSNameSpi"/>
                </params>
            </method>
            <method name="GSSNameImpl" type="constructor" line="79">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="mechElement" type="GSSNameSpi"/>
                </params>
            </method>
            <method name="GSSNameImpl" type="constructor" line="87">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="appName" type="Object"/>
                    <param name="appNameType" type="Oid"/>
                </params>
            </method>
            <method name="GSSNameImpl" type="constructor" line="90">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="appName" type="Object"/>
                    <param name="appNameType" type="Oid"/>
                    <param name="mech" type="Oid"/>
                </params>
                <scope line="91"/>
                <scope line="96"/>
                <scope line="99"/>
            </method>
            <method name="init" type="void" line="103">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="appName" type="Object"/>
                    <param name="appNameType" type="Oid"/>
                    <param name="mech" type="Oid"/>
                </params>
                <scope line="106">
                    <scope line="108"/>
                </scope>
                <scope line="113"/>
                <scope line="118"/>
            </method>
            <method name="importName" type="void" line="123">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="appName" type="Object"/>
                </params>
                <declaration name="pos" type="int" line="124"/>
                <declaration name="bytes" type="byte[]" line="125"/>
                <scope line="126">
                    <scope line="127"/>
                    <scope line="130"/>
                </scope>
                <declaration name="oidLen" type="int" line="135"/>
                <declaration name="temp" type="ObjectIdentifier" line="136"/>
                <scope line="137">
                    <declaration name="din" type="DerInputStream" line="138"/>
                </scope>
                <scope line="141"/>
                <declaration name="oid" type="Oid" line="144"/>
                <declaration name="mechPortionLen" type="int" line="146"/>
                <declaration name="mechPortion" type="byte[]" line="147"/>
            </method>
            <method name="canonicalize" type="GSSName" line="151">
                <params>
                    <param name="mech" type="Oid"/>
                </params>
            </method>
            <javadoc line="155">
                This method may return false negatives. But if it says two
                  names are equals, then there is some mechanism that
                  authenticates them as the same principal.                
            </javadoc>
            <method name="equals" type="boolean" line="160">
                <params>
                    <param name="other" type="GSSName"/>
                </params>
                <declaration name="that" type="GSSNameImpl" line="164"/>
                <declaration name="myElement" type="GSSNameSpi" line="165"/>
                <declaration name="element" type="GSSNameSpi" line="166"/>
                <scope line="167"/>
                <scope line="170"/>
                <scope line="173"/>
                <scope line="176">
                    <scope line="177"/>
                    <declaration name="myBytes" type="byte[]" line="180"/>
                    <declaration name="bytes" type="byte[]" line="181"/>
                    <scope line="182"/>
                    <scope line="186"/>
                </scope>
            </method>
            <javadoc line="192">
                Returns a hashcode value for this GSSName.                
                <return>
                    a hashCode value                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="196"/>
            <method name="equals" type="boolean" line="199">
                <params>
                    <param name="another" type="Object"/>
                </params>
                <scope line="200"/>
                <scope line="203"/>
            </method>
            <javadoc line="207">
                Returns a flat name representation for this object. The name
                  format is defined in RFC 2743:
                  &lt;pre&gt;
                  Length           Name          Description
                  2               TOK_ID          Token Identifier
                  For exported name objects, this
                  must be hex 04 01.
                  2               MECH_OID_LEN    Length of the Mechanism OID
                  MECH_OID_LEN    MECH_OID        Mechanism OID, in DER
                  4               NAME_LEN        Length of name
                  NAME_LEN        NAME            Exported name; format defined in
                  applicable mechanism draft.
                  &lt;/pre&gt;
                  Note that it is not required to canonicalize a name before
                  calling export(). i.e., the name need not be an MN. If it is
                  not an MN, an implementation defined algorithm can be used for
                  choosing the mechanism which should export this name.                
                <return>
                    the flat name representation for this object                    
                </return>
                <exception>
                    GSSException with major codes NAME_NOT_MN, BAD_NAME,
                      BAD_NAME, FAILURE.                    
                </exception>
            </javadoc>
            <method name="export" type="byte[]" line="229">
                <scope line="230"/>
                <declaration name="mechPortion" type="byte[]" line="233"/>
                <declaration name="oidBytes" type="byte[]" line="234"/>
                <declaration name="oid" type="ObjectIdentifier" line="235"/>
                <scope line="236"/>
                <scope line="239"/>
                <declaration name="dout" type="DerOutputStream" line="242"/>
                <scope line="243"/>
                <scope line="246"/>
                <declaration name="retVal" type="byte[]" line="250"/>
                <declaration name="pos" type="int" line="251"/>
            </method>
            <method name="toString" type="String" line="265"/>
            <method name="getStringNameType" type="Oid" line="268"/>
            <method name="isAnonymous" type="boolean" line="271">
                <scope line="272"/>
                <scope line="275"/>
            </method>
            <method name="isMN" type="boolean" line="279"/>
            <method name="getElement" type="GSSNameSpi" line="282">
                <params>
                    <param name="mechOid" type="Oid"/>
                </params>
                <declaration name="retVal" type="GSSNameSpi" line="283"/>
                <scope line="284">
                    <scope line="285"/>
                    <scope line="288"/>
                </scope>
            </method>
            <method name="getElements" type="Set<GSSNameSpi>" line="295"/>
            <method name="getNameTypeStr" type="String" line="298">
                <params>
                    <param name="nameTypeOid" type="Oid"/>
                </params>
            </method>
        </class>
    </source>