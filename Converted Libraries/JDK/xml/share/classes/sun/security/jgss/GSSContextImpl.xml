<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss">
        <import package="org.ietf.jgss"/>
        <import package="sun.security.jgss.spi"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="com.sun.security.jgss"/>
        <class name="GSSContextImpl" line="11">
            <implements interface="ExtendedGSSContext"/>
            <javadoc line="11">
                This class represents the JGSS security context and its associated
                  operations.  JGSS security contexts are established between
                  peers using locally established credentials.  Multiple contexts
                  may exist simultaneously between a pair of peers, using the same
                  or different set of credentials.  The JGSS is independent of
                  the underlying transport protocols and depends on its callers to
                  transport the tokens between peers.
                  &lt;p&gt;
                  The context object can be thought of as having 3 implicit states:
                  before it is established, during its context establishment, and
                  after a fully established context exists.
                  &lt;p&gt;
                  Before the context establishment phase is initiated, the context
                  initiator may request specific characteristics desired of the
                  established context. These can be set using the set methods. After the
                  context is established, the caller can check the actual characteristic
                  and services offered by the context using the query methods.
                  &lt;p&gt;
                  The context establishment phase begins with the first call to the
                  initSecContext method by the context initiator. During this phase the
                  initSecContext and acceptSecContext methods will produce GSS-API
                  authentication tokens which the calling application needs to send to its
                  peer. The initSecContext and acceptSecContext methods may
                  return a CONTINUE_NEEDED code which indicates that a token is needed
                  from its peer in order to continue the context establishment phase. A
                  return code of COMPLETE signals that the local end of the context is
                  established. This may still require that a token be sent to the peer,
                  depending if one is produced by GSS-API. The isEstablished method can
                  also be used to determine if the local end of the context has been
                  fully established. During the context establishment phase, the
                  isProtReady method may be called to determine if the context can be
                  used for the per-message operations. This allows implementation to
                  use per-message operations on contexts which aren&apos;t fully established.
                  &lt;p&gt;
                  After the context has been established or the isProtReady method
                  returns &quot;true&quot;, the query routines can be invoked to determine the actual
                  characteristics and services of the established context. The
                  application can also start using the per-message methods of wrap and
                  getMIC to obtain cryptographic operations on application supplied data.
                  &lt;p&gt;
                  When the context is no longer needed, the application should call
                  dispose to release any system resources the context may be using.
                  &lt;DL&gt;&lt;DT&gt;&lt;B&gt;RFC 2078&lt;/b&gt;
                  &lt;DD&gt;This class corresponds to the context level calls together with
                  the per message calls of RFC 2078. The gss_init_sec_context and
                  gss_accept_sec_context calls have been made simpler by only taking
                  required parameters.  The context can have its properties set before
                  the first call to initSecContext. The supplementary status codes for the
                  per-message operations are returned in an instance of the MessageProp
                  class, which is used as an argument in these calls.&lt;/dl&gt;                
            </javadoc>
            <declaration name="gssManager" type="GSSManagerImpl" line="64"/>
            <declaration name="initiator" type="boolean" line="65"/>
            <declaration name="PRE_INIT" type="int" line="66"/>
            <declaration name="IN_PROGRESS" type="int" line="67"/>
            <declaration name="READY" type="int" line="68"/>
            <declaration name="DELETED" type="int" line="69"/>
            <declaration name="currentState" type="int" line="70"/>
            <declaration name="mechCtxt" type="GSSContextSpi" line="71"/>
            <declaration name="mechOid" type="Oid" line="72"/>
            <declaration name="objId" type="ObjectIdentifier" line="73"/>
            <declaration name="myCred" type="GSSCredentialImpl" line="74"/>
            <declaration name="srcName" type="GSSNameImpl" line="75"/>
            <declaration name="targName" type="GSSNameImpl" line="76"/>
            <declaration name="reqLifetime" type="int" line="77"/>
            <declaration name="channelBindings" type="ChannelBinding" line="78"/>
            <declaration name="reqConfState" type="boolean" line="79"/>
            <declaration name="reqIntegState" type="boolean" line="80"/>
            <declaration name="reqMutualAuthState" type="boolean" line="81"/>
            <declaration name="reqReplayDetState" type="boolean" line="82"/>
            <declaration name="reqSequenceDetState" type="boolean" line="83"/>
            <declaration name="reqCredDelegState" type="boolean" line="84"/>
            <declaration name="reqAnonState" type="boolean" line="85"/>
            <declaration name="reqDelegPolicyState" type="boolean" line="86"/>
            <javadoc line="87">
                Creates a GSSContextImp on the context initiator&apos;s side.                
            </javadoc>
            <method name="GSSContextImpl" type="constructor" line="90">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="peer" type="GSSName"/>
                    <param name="mech" type="Oid"/>
                    <param name="myCred" type="GSSCredential"/>
                    <param name="lifetime" type="int"/>
                </params>
                <scope line="91"/>
            </method>
            <javadoc line="102">
                Creates a GSSContextImpl on the context acceptor&apos;s side.                
            </javadoc>
            <method name="GSSContextImpl" type="constructor" line="105">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="myCred" type="GSSCredential"/>
                </params>
            </method>
            <javadoc line="110">
                Creates a GSSContextImpl out of a previously exported
                  GSSContext.                
                <see>
                    #isTransferable                    
                </see>
            </javadoc>
            <method name="GSSContextImpl" type="constructor" line="115">
                <params>
                    <param name="gssManager" type="GSSManagerImpl"/>
                    <param name="interProcessToken" type="byte[]"/>
                </params>
            </method>
            <method name="initSecContext" type="byte[]" line="121">
                <params>
                    <param name="inputBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="bos" type="ByteArrayOutputStream" line="122"/>
                <declaration name="bin" type="ByteArrayInputStream" line="123"/>
                <declaration name="size" type="int" line="124"/>
            </method>
            <method name="initSecContext" type="int" line="127">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                </params>
                <scope line="128"/>
                <declaration name="gssHeader" type="GSSHeader" line="131"/>
                <declaration name="inTokenLen" type="int" line="132"/>
                <declaration name="credElement" type="GSSCredentialSpi" line="133"/>
                <declaration name="firstToken" type="boolean" line="134"/>
                <scope line="135">
                    <scope line="136">
                        <scope line="137">
                            <scope line="138"/>
                            <scope line="141">
                                <scope line="142"/>
                                <scope line="145"/>
                            </scope>
                        </scope>
                        <declaration name="nameElement" type="GSSNameSpi" line="150"/>
                    </scope>
                    <scope line="165">
                        <scope line="166"/>
                        <scope line="168"/>
                    </scope>
                    <declaration name="obuf" type="byte[]" line="174"/>
                    <declaration name="retVal" type="int" line="175"/>
                    <scope line="176">
                        <scope line="178"/>
                        <scope line="180"/>
                    </scope>
                </scope>
                <scope line="189"/>
            </method>
            <method name="acceptSecContext" type="byte[]" line="193">
                <params>
                    <param name="inTok" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="bos" type="ByteArrayOutputStream" line="194"/>
                <declaration name="out" type="byte[]" line="196"/>
            </method>
            <method name="acceptSecContext" type="void" line="199">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                </params>
                <scope line="200"/>
                <declaration name="gssHeader" type="GSSHeader" line="203"/>
                <declaration name="inTokenLen" type="int" line="204"/>
                <declaration name="credElement" type="GSSCredentialSpi" line="205"/>
                <scope line="206">
                    <scope line="207">
                        <scope line="212"/>
                    </scope>
                    <scope line="219">
                        <scope line="220"/>
                        <scope line="222"/>
                    </scope>
                    <declaration name="obuf" type="byte[]" line="228"/>
                    <scope line="229">
                        <declaration name="retVal" type="int" line="230"/>
                        <scope line="231"/>
                        <scope line="233"/>
                    </scope>
                    <scope line="239"/>
                </scope>
                <scope line="243"/>
            </method>
            <method name="isEstablished" type="boolean" line="247"/>
            <method name="getWrapSizeLimit" type="int" line="251">
                <params>
                    <param name="qop" type="int"/>
                    <param name="confReq" type="boolean"/>
                    <param name="maxTokenSize" type="int"/>
                </params>
            </method>
            <method name="wrap" type="byte[]" line="255">
                <params>
                    <param name="inBuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="wrap" type="void" line="259">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="unwrap" type="byte[]" line="263">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="unwrap" type="void" line="267">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="getMIC" type="byte[]" line="271">
                <params>
                    <param name="inMsg" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="getMIC" type="void" line="275">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="verifyMIC" type="void" line="279">
                <params>
                    <param name="inTok" type="byte[]"/>
                    <param name="tokOffset" type="int"/>
                    <param name="tokLen" type="int"/>
                    <param name="inMsg" type="byte[]"/>
                    <param name="msgOffset" type="int"/>
                    <param name="msgLen" type="int"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="verifyMIC" type="void" line="283">
                <params>
                    <param name="tokStream" type="InputStream"/>
                    <param name="msgStream" type="InputStream"/>
                    <param name="msgProp" type="MessageProp"/>
                </params>
            </method>
            <method name="export" type="byte[]" line="287">
                <declaration name="result" type="byte[]" line="288"/>
                <scope line="289"/>
            </method>
            <method name="requestMutualAuth" type="void" line="294">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestReplayDet" type="void" line="297">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestSequenceDet" type="void" line="300">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestCredDeleg" type="void" line="303">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestAnonymity" type="void" line="306">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestConf" type="void" line="309">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestInteg" type="void" line="312">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="requestLifetime" type="void" line="315">
                <params>
                    <param name="lifetime" type="int"/>
                </params>
            </method>
            <method name="setChannelBinding" type="void" line="318">
                <params>
                    <param name="channelBindings" type="ChannelBinding"/>
                </params>
            </method>
            <method name="getCredDelegState" type="boolean" line="321"/>
            <method name="getMutualAuthState" type="boolean" line="325"/>
            <method name="getReplayDetState" type="boolean" line="329"/>
            <method name="getSequenceDetState" type="boolean" line="333"/>
            <method name="getAnonymityState" type="boolean" line="337"/>
            <method name="isTransferable" type="boolean" line="341"/>
            <method name="isProtReady" type="boolean" line="345"/>
            <method name="getConfState" type="boolean" line="349"/>
            <method name="getIntegState" type="boolean" line="353"/>
            <method name="getLifetime" type="int" line="357"/>
            <method name="getSrcName" type="GSSName" line="361">
                <scope line="362"/>
            </method>
            <method name="getTargName" type="GSSName" line="367">
                <scope line="368"/>
            </method>
            <method name="getMech" type="Oid" line="373">
                <scope line="374"/>
            </method>
            <method name="getDelegCred" type="GSSCredential" line="379">
                <declaration name="delCredElement" type="GSSCredentialSpi" line="381"/>
            </method>
            <method name="isInitiator" type="boolean" line="384"/>
            <method name="dispose" type="void" line="387">
                <scope line="389"/>
            </method>
            <method name="inquireSecContext" type="Object" line="397">
                <params>
                    <param name="type" type="InquireType"/>
                </params>
                <declaration name="security" type="SecurityManager" line="398"/>
                <scope line="399"/>
                <scope line="402"/>
            </method>
            <method name="requestDelegPolicy" type="void" line="407">
                <params>
                    <param name="state" type="boolean"/>
                </params>
            </method>
            <method name="getDelegPolicyState" type="boolean" line="410"/>
        </class>
    </source>