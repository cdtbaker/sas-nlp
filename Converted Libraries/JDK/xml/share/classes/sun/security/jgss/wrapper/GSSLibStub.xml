<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jgss.wrapper">
        <import package="java.util.Hashtable"/>
        <import package="org.ietf.jgss.Oid"/>
        <import package="org.ietf.jgss.GSSName"/>
        <import package="org.ietf.jgss.ChannelBinding"/>
        <import package="org.ietf.jgss.MessageProp"/>
        <import package="org.ietf.jgss.GSSException"/>
        <import package="sun.security.jgss.GSSUtil"/>
        <class name="GSSLibStub" line="36">
            <comment line="58">
                Miscellaneous routines                
            </comment>
            <comment line="62">
                Name related routines                
            </comment>
            <comment line="70">
                Credential related routines                
            </comment>
            <comment line="78">
                Context related routines                
            </comment>
            <javadoc line="36">
                This class is essentially a JNI calling stub for all wrapper classes.                
                <author>
                    Valerie Peng                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="mech" type="Oid" line="45"/>
            <declaration name="pMech" type="long" line="46"/>
            <method name="init" type="boolean" line="48"/>
            <javadoc line="48">
                Initialization routine to dynamically load function pointers.                
                <param>
                    library name to dlopen                    
                </param>
                <return>
                    true if succeeded, false otherwise.                    
                </return>
            </javadoc>
            <method name="getMechPtr" type="long" line="55"/>
            <method name="indicateMechs" type="Oid[]" line="58"/>
            <method name="inquireNamesForMech" type="Oid[]" line="59"/>
            <method name="releaseName" type="void" line="62"/>
            <method name="importName" type="long" line="63"/>
            <method name="compareName" type="boolean" line="64"/>
            <method name="canonicalizeName" type="long" line="65"/>
            <method name="exportName" type="byte[]" line="66"/>
            <method name="displayName" type="Object[]" line="67"/>
            <method name="acquireCred" type="long" line="70"/>
            <method name="releaseCred" type="long" line="72"/>
            <method name="getCredName" type="long" line="73"/>
            <method name="getCredTime" type="int" line="74"/>
            <method name="getCredUsage" type="int" line="75"/>
            <method name="importContext" type="NativeGSSContext" line="78"/>
            <method name="initContext" type="byte[]" line="79"/>
            <method name="acceptContext" type="byte[]" line="81"/>
            <method name="inquireContext" type="long[]" line="83"/>
            <method name="getContextMech" type="Oid" line="84"/>
            <method name="getContextName" type="long" line="85"/>
            <method name="getContextTime" type="int" line="86"/>
            <method name="deleteContext" type="long" line="87"/>
            <method name="wrapSizeLimit" type="int" line="88"/>
            <method name="exportContext" type="byte[]" line="89"/>
            <method name="getMic" type="byte[]" line="90"/>
            <method name="verifyMic" type="void" line="91"/>
            <method name="wrap" type="byte[]" line="93"/>
            <method name="unwrap" type="byte[]" line="94"/>
            <declaration name="table" type="Hashtable&lt;Oid,GSSLibStub&gt;" line="96"/>
            <method name="getInstance" type="GSSLibStub" line="99">
                <params>
                    <param name="mech" type="Oid"/>
                </params>
                <declaration name="s" type="GSSLibStub" line="100"/>
                <scope line="101"/>
            </method>
            <method name="GSSLibStub" type="constructor" line="107">
                <params>
                    <param name="mech" type="Oid"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="112">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="114"/>
            </method>
            <method name="hashCode" type="int" line="119"/>
            <method name="getMech" type="Oid" line="122"/>
        </class>
    </source>