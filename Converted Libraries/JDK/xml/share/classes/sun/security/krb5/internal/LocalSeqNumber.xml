<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5.Confounder"/>
        <class name="LocalSeqNumber" line="36">
            <implements interface="SeqNumber"/>
            <declaration name="lastSeqNumber" type="int" line="37"/>
            <method name="LocalSeqNumber" type="constructor" line="39"/>
            <method name="LocalSeqNumber" type="constructor" line="43">
                <params>
                    <param name="start" type="int"/>
                </params>
            </method>
            <method name="LocalSeqNumber" type="constructor" line="47">
                <params>
                    <param name="start" type="Integer"/>
                </params>
            </method>
            <method name="randInit" type="void" line="51">
                <comment line="52">
                    Sequence numbers fall in the range 0 through 2^32 - 1 and wrap
                     to zero following the value 2^32 - 1.
                     Previous implementations used signed sequence numbers.
                     Workaround implementation incompatibilities by not generating
                     initial sequence numbers greater than 2^30, as done
                     in MIT distribution.                    
                </comment>
                <comment line="60">
                    get the random confounder                    
                </comment>
                <declaration name="data" type="byte[]" line="61"/>
                <declaration name="result" type="int" line="63"/>
                <scope line="67"/>
            </method>
            <method name="init" type="void" line="73">
                <params>
                    <param name="start" type="int"/>
                </params>
            </method>
            <method name="current" type="int" line="77"/>
            <method name="next" type="int" line="81"/>
            <method name="step" type="int" line="85"/>
        </class>
    </source>