<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="java.util.TimeZone"/>
        <import package="sun.security.util"/>
        <import package="sun.security.krb5.Config"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="java.util.Date"/>
        <import package="java.util.GregorianCalendar"/>
        <import package="java.util.Calendar"/>
        <import package="java.io.IOException"/>
        <class name="KerberosTime" line="11">
            <implements interface="Cloneable"/>
            <javadoc line="11">
                Implements the ASN.1 KerberosTime type.
                  &lt;xmp&gt;
                  KerberosTime    ::= GeneralizedTime -- with no fractional seconds
                  &lt;/xmp&gt;
                  The timestamps used in Kerberos are encoded as GeneralizedTimes. A
                  KerberosTime value shall not include any fractional portions of the
                  seconds.  As required by the DER, it further shall not include any
                  separators, and it shall specify the UTC time zone (Z).
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.
                  The implementation also includes the microseconds info so that the
                  same class can be used as a precise timestamp in Authenticator etc.                
            </javadoc>
            <declaration name="kerberosTime" type="long" line="29"/>
            <declaration name="microSeconds" type="int" line="30"/>
            <declaration name="initMilli" type="long" line="31"/>
            <declaration name="initMicro" type="long" line="32"/>
            <declaration name="syncTime" type="long" line="33"/>
            <declaration name="DEBUG" type="boolean" line="34"/>
            <declaration name="NOW" type="boolean" line="35"/>
            <declaration name="UNADJUSTED_NOW" type="boolean" line="36"/>
            <method name="KerberosTime" type="constructor" line="37">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <method name="KerberosTime" type="constructor" line="40">
                <params>
                    <param name="time" type="long"/>
                    <param name="micro" type="int"/>
                </params>
            </method>
            <method name="clone" type="Object" line="44"/>
            <method name="KerberosTime" type="constructor" line="47">
                <params>
                    <param name="time" type="String"/>
                </params>
            </method>
            <javadoc line="50">
                Constructs a KerberosTime object.                
                <param>
                    encoding a DER-encoded data.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="KerberosTime" type="constructor" line="56">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="calendar" type="GregorianCalendar" line="57"/>
                <declaration name="temp" type="Date" line="58"/>
            </method>
            <method name="toKerberosTime" type="long" line="61">
                <params>
                    <param name="time" type="String"/>
                </params>
                <declaration name="year" type="int" line="64"/>
                <declaration name="calendar" type="Calendar" line="65"/>
            </method>
            <method name="zeroPad" type="String" line="70">
                <params>
                    <param name="s" type="String"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="temp" type="StringBuffer" line="71"/>
            </method>
            <method name="KerberosTime" type="constructor" line="75">
                <params>
                    <param name="time" type="Date"/>
                </params>
            </method>
            <method name="KerberosTime" type="constructor" line="78">
                <params>
                    <param name="initToNow" type="boolean"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Returns a string representation of KerberosTime object.                
                <return>
                    a string representation of this object.                    
                </return>
            </javadoc>
            <method name="toGeneralizedTimeString" type="String" line="87">
                <declaration name="calendar" type="Calendar" line="88"/>
            </method>
            <javadoc line="93">
                Encodes this object to a byte array.                
                <return>
                    a byte array of encoded data.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="99">
                <declaration name="out" type="DerOutputStream" line="100"/>
            </method>
            <method name="getTime" type="long" line="104"/>
            <method name="setTime" type="void" line="107">
                <params>
                    <param name="time" type="Date"/>
                </params>
            </method>
            <method name="setTime" type="void" line="111">
                <params>
                    <param name="time" type="long"/>
                </params>
            </method>
            <method name="toDate" type="Date" line="115">
                <declaration name="temp" type="Date" line="116"/>
            </method>
            <method name="setNow" type="void" line="120">
                <declaration name="microElapsed" type="long" line="121"/>
            </method>
            <method name="getMicroSeconds" type="int" line="125">
                <declaration name="temp_long" type="Long" line="126"/>
            </method>
            <method name="setMicroSeconds" type="void" line="129">
                <params>
                    <param name="usec" type="int"/>
                </params>
                <declaration name="temp_int" type="Integer" line="131"/>
                <declaration name="temp_long" type="long" line="132"/>
            </method>
            <method name="setMicroSeconds" type="void" line="135">
                <params>
                    <param name="usec" type="Integer"/>
                </params>
                <scope line="136">
                    <declaration name="temp_long" type="long" line="138"/>
                </scope>
            </method>
            <method name="inClockSkew" type="boolean" line="142">
                <params>
                    <param name="clockSkew" type="int"/>
                </params>
                <declaration name="now" type="KerberosTime" line="143"/>
            </method>
            <method name="inClockSkew" type="boolean" line="147"/>
            <method name="inClockSkew" type="boolean" line="150">
                <params>
                    <param name="clockSkew" type="int"/>
                    <param name="now" type="KerberosTime"/>
                </params>
            </method>
            <method name="inClockSkew" type="boolean" line="154">
                <params>
                    <param name="time" type="KerberosTime"/>
                </params>
            </method>
            <method name="greaterThanWRTClockSkew" type="boolean" line="157">
                <params>
                    <param name="time" type="KerberosTime"/>
                    <param name="clockSkew" type="int"/>
                </params>
            </method>
            <method name="greaterThanWRTClockSkew" type="boolean" line="161">
                <params>
                    <param name="time" type="KerberosTime"/>
                </params>
            </method>
            <method name="greaterThan" type="boolean" line="164">
                <params>
                    <param name="time" type="KerberosTime"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="167">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="168"/>
                <scope line="171"/>
            </method>
            <method name="hashCode" type="int" line="176">
                <declaration name="result" type="int" line="177"/>
            </method>
            <method name="isZero" type="boolean" line="180"/>
            <method name="getSeconds" type="int" line="183">
                <declaration name="temp_long" type="Long" line="184"/>
            </method>
            <method name="setSeconds" type="void" line="187">
                <params>
                    <param name="sec" type="int"/>
                </params>
                <declaration name="temp_int" type="Integer" line="188"/>
            </method>
            <javadoc line="191">
                Parse (unmarshal) a kerberostime from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicates if this data field is optional                    
                </param>
                <return>
                    an instance of KerberosTime.                    
                </return>
            </javadoc>
            <method name="parse" type="KerberosTime" line="201">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="203"/>
                <scope line="204"/>
                <scope line="207">
                    <declaration name="subDer" type="DerValue" line="208"/>
                </scope>
            </method>
            <method name="getDefaultSkew" type="int" line="212">
                <declaration name="tdiff" type="int" line="213"/>
                <scope line="214">
                    <declaration name="c" type="Config" line="215"/>
                    <scope line="216"/>
                </scope>
                <scope line="220">
                    <scope line="221"/>
                </scope>
            </method>
            <method name="toString" type="String" line="227"/>
        </class>
    </source>