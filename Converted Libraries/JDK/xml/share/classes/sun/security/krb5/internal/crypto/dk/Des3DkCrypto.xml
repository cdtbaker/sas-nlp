<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.crypto.dk">
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.spec.DESKeySpec"/>
        <import package="javax.crypto.spec.DESedeKeySpec"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="java.security.spec.KeySpec"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.util.Arrays"/>
        <class name="Des3DkCrypto" line="41">
            <extends class="DkCrypto"/>
            <comment line="84">
                From RFC 3961.
                
                 The 168 bits of random key data are converted to a protocol key value
                 as follows.  First, the 168 bits are divided into three groups of 56
                 bits, which are expanded individually into 64 bits as in des3Expand().
                 Result is a 24 byte (192-bit) key.                
            </comment>
            <declaration name="ZERO_IV" type="byte[]" line="43"/>
            <method name="Des3DkCrypto" type="constructor" line="45"/>
            <method name="getKeySeedLength" type="int" line="48">
                <comment line="50">
                    bits; 3DES key material has 21 bytes                    
                </comment>
            </method>
            <method name="stringToKey" type="byte[]" line="52">
                <params>
                    <param name="salt" type="char[]"/>
                </params>
                <comment line="62">
                    Caller responsible for clearing its own salt                    
                </comment>
                <declaration name="saltUtf8" type="byte[]" line="53"/>
                <scope line="54"/>
                <scope line="57">
                    <scope line="58"/>
                </scope>
            </method>
            <method name="stringToKey" type="byte[]" line="66">
                <params>
                    <param name="secretAndSalt" type="byte[]"/>
                    <param name="opaque" type="byte[]"/>
                </params>
                <scope line="68"/>
                <declaration name="tmpKey" type="byte[]" line="72"/>
            </method>
            <method name="parityFix" type="byte[]" line="77">
                <params>
                    <param name="value" type="byte[]"/>
                </params>
                <comment line="79">
                    fix key parity                    
                </comment>
            </method>
            <method name="randomToKey" type="byte[]" line="91">
                <params>
                    <param name="in" type="byte[]"/>
                </params>
                <scope line="92"/>
                <declaration name="one" type="byte[]" line="96"/>
                <declaration name="two" type="byte[]" line="97"/>
                <declaration name="three" type="byte[]" line="98"/>
                <declaration name="key" type="byte[]" line="100"/>
            </method>
            <method name="keyCorrection" type="byte[]" line="108">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
                <comment line="110">
                    check for weak key                    
                </comment>
                <comment line="116">
                    swallow, since it should never happen                    
                </comment>
                <scope line="110">
                    <scope line="111"/>
                </scope>
                <scope line="114"/>
            </method>
            <javadoc line="120">
                From RFC 3961.
                  Expands a 7-byte array into an 8-byte array that contains parity bits.
                  The 56 bits are expanded into 64 bits as follows:
                  1  2  3  4  5  6  7  p
                  9 10 11 12 13 14 15  p
                  17 18 19 20 21 22 23  p
                  25 26 27 28 29 30 31  p
                  33 34 35 36 37 38 39  p
                  41 42 43 44 45 46 47  p
                  49 50 51 52 53 54 55  p
                  56 48 40 32 24 16  8  p
                  (PI,P2,...,P8) are reserved for parity bits computed on the preceding
                  seven independent bits and set so that the parity of the octet is odd,
                  i.e., there is an odd number of &quot;1&quot; bits in the octet.                
                <param>
                    start index of starting byte (inclusive)                    
                </param>
                <param>
                    end index of ending byte (exclusive)                    
                </param>
            </javadoc>
            <method name="des3Expand" type="byte[]" line="141">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="152">
                    Fill in last row                    
                </comment>
                <declaration name="result" type="byte[]" line="146"/>
                <declaration name="last" type="byte" line="147"/>
                <declaration name="posn" type="byte" line="149"/>
                <scope line="152">
                    <declaration name="bit" type="byte" line="153"/>
                    <scope line="154"/>
                    <scope line="159"/>
                </scope>
                <scope line="164"/>
            </method>
            <javadoc line="172">
                Sets the parity bit (0th bit) in each byte so that each byte
                  contains an odd number of 1&apos;s.                
            </javadoc>
            <method name="setParityBit" type="void" line="176">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
                <scope line="177">
                    <declaration name="b" type="int" line="178"/>
                </scope>
            </method>
            <method name="getCipher" type="Cipher" line="185">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="mode" type="int"/>
                </params>
                <comment line="187">
                    NoSuchAlgorithException                    
                </comment>
                <comment line="190">
                    InvalidKeyException                    
                </comment>
                <comment line="193">
                    InvalidKeySpecException                    
                </comment>
                <comment line="196">
                    IV                    
                </comment>
                <comment line="201">
                    NoSuchAlgorithmException, NoSuchPaddingException
                     NoSuchProviderException                    
                </comment>
                <comment line="206">
                    InvalidKeyException, InvalidAlgorithParameterException                    
                </comment>
                <declaration name="factory" type="SecretKeyFactory" line="187"/>
                <declaration name="spec" type="KeySpec" line="190"/>
                <declaration name="secretKey" type="SecretKey" line="193"/>
                <scope line="196"/>
                <declaration name="cipher" type="Cipher" line="202"/>
                <declaration name="encIv" type="IvParameterSpec" line="203"/>
            </method>
            <method name="getChecksumLength" type="int" line="211">
                <comment line="213">
                    bytes                    
                </comment>
            </method>
            <method name="getHmac" type="byte[]" line="216">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="msg" type="byte[]"/>
                </params>
                <declaration name="keyKi" type="SecretKey" line="218"/>
                <declaration name="m" type="Mac" line="219"/>
            </method>
        </class>
    </source>