<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto.KeyUsage"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.util.DerValue"/>
        <class name="KrbCred" line="39">
            <comment line="58">
                Used in InitialToken with null key                
            </comment>
            <comment line="124">
                Used in InitialToken, key always NULL_KEY                
            </comment>
            <javadoc line="39">
                This class encapsulates the KRB-CRED message that a client uses to
                  send its delegated credentials to a server.
                  Supports delegation of one ticket only.                
                <author>
                    Mayank Upadhyay                    
                </author>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="48"/>
            <declaration name="obuf" type="byte[]" line="50"/>
            <declaration name="credMessg" type="KRBCred" line="51"/>
            <declaration name="ticket" type="Ticket" line="52"/>
            <declaration name="encPart" type="EncKrbCredPart" line="53"/>
            <declaration name="creds" type="Credentials" line="54"/>
            <declaration name="timeStamp" type="KerberosTime" line="55"/>
            <method name="KrbCred" type="constructor" line="61">
                <params>
                    <param name="tgt" type="Credentials"/>
                    <param name="serviceTicket" type="Credentials"/>
                    <param name="key" type="EncryptionKey"/>
                </params>
                <comment line="70">
                    XXX Check Windows flag OK-TO-FORWARD-TO                    
                </comment>
                <comment line="72">
                    Invoke TGS-REQ to get a forwarded TGT for the peer                    
                </comment>
                <comment line="79">
                    XXX Also NT_GSS_KRB5_PRINCIPAL can be a host based principal                    
                </comment>
                <comment line="80">
                    GSSName.NT_HOSTBASED_SERVICE should display with KRB_NT_SRV_HST                    
                </comment>
                <declaration name="client" type="PrincipalName" line="63"/>
                <declaration name="tgService" type="PrincipalName" line="64"/>
                <declaration name="server" type="PrincipalName" line="65"/>
                <declaration name="options" type="KDCOptions" line="74"/>
                <declaration name="sAddrs" type="HostAddresses" line="78"/>
                <declaration name="tgsReq" type="KrbTgsReq" line="84"/>
            </method>
            <method name="createMessage" type="KRBCred" line="92">
                <params>
                    <param name="delegatedCreds" type="Credentials"/>
                    <param name="key" type="EncryptionKey"/>
                </params>
                <declaration name="sessionKey" type="EncryptionKey" line="94"/>
                <declaration name="princ" type="PrincipalName" line="96"/>
                <declaration name="realm" type="Realm" line="97"/>
                <declaration name="tgService" type="PrincipalName" line="98"/>
                <declaration name="tgsRealm" type="Realm" line="99"/>
                <declaration name="credInfo" type="KrbCredInfo" line="101"/>
                <declaration name="credInfos" type="KrbCredInfo[]" line="108"/>
                <declaration name="encPart" type="EncKrbCredPart" line="109"/>
                <declaration name="encEncPart" type="EncryptedData" line="113"/>
                <declaration name="tickets" type="Ticket[]" line="116"/>
            </method>
            <method name="KrbCred" type="constructor" line="125">
                <params>
                    <param name="asn1Message" type="byte[]"/>
                    <param name="key" type="EncryptionKey"/>
                </params>
                <comment line="142">
                    XXX PrincipalName can store realm + principalname or                    
                </comment>
                <comment line="143">
                    just principal name.                    
                </comment>
                <declaration name="temp" type="byte[]" line="131"/>
                <declaration name="plainText" type="byte[]" line="133"/>
                <declaration name="encoding" type="DerValue" line="134"/>
                <declaration name="encPart" type="EncKrbCredPart" line="135"/>
                <declaration name="credInfo" type="KrbCredInfo" line="139"/>
                <declaration name="credInfoKey" type="EncryptionKey" line="140"/>
                <declaration name="prealm" type="Realm" line="141"/>
                <declaration name="pname" type="PrincipalName" line="144"/>
                <declaration name="flags" type="TicketFlags" line="146"/>
                <declaration name="authtime" type="KerberosTime" line="147"/>
                <declaration name="starttime" type="KerberosTime" line="148"/>
                <declaration name="endtime" type="KerberosTime" line="149"/>
                <declaration name="renewTill" type="KerberosTime" line="150"/>
                <declaration name="srealm" type="Realm" line="151"/>
                <declaration name="sname" type="PrincipalName" line="152"/>
                <declaration name="caddr" type="HostAddresses" line="154"/>
                <scope line="156"/>
            </method>
            <javadoc line="168">
                Returns the delegated credentials from the peer.                
            </javadoc>
            <method name="getDelegatedCreds" type="Credentials[]" line="171">
                <declaration name="allCreds" type="Credentials[]" line="173"/>
            </method>
            <javadoc line="177">
                Returns the ASN.1 encoding that should be sent to the peer.                
            </javadoc>
            <method name="getMessage" type="byte[]" line="180"/>
        </class>
    </source>