<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.crypto.dk">
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.spec.DESedeKeySpec"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <import package="java.security.spec.KeySpec"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="sun.security.krb5.KrbCryptoException"/>
        <import package="sun.security.krb5.Confounder"/>
        <import package="sun.security.krb5.internal.crypto.KeyUsage"/>
        <import package="java.util.Arrays"/>
        <class name="AesDkCrypto" line="16">
            <extends class="DkCrypto"/>
            <javadoc line="16">
                This class provides the implementation of AES Encryption for Kerberos
                  as defined RFC 3962.
                  http://www.ietf.org/rfc/rfc3962.txt
                  Algorithm profile described in [KCRYPTO]:
                  +--------------------------------------------------------------------+
                  |               protocol key format          128- or 256-bit string  |
                  |                                                                    |
                  |            string-to-key function          PBKDF2+DK with variable |
                  |                                          iteration count (see      |
                  |                                          above)                    |
                  |                                                                    |
                  |  default string-to-key parameters          00 00 10 00             |
                  |                                                                    |
                  |        key-generation seed length          key size                |
                  |                                                                    |
                  |            random-to-key function          identity function       |
                  |                                                                    |
                  |                    hash function, H                SHA-1           |
                  |                                                                    |
                  |               HMAC output size, h          12 octets (96 bits)     |
                  |                                                                    |
                  |             message block size, m          1 octet                 |
                  |                                                                    |
                  |  encryption/decryption functions,          AES in CBC-CTS mode     |
                  |  E and D                                 (cipher block size 16     |
                  |                                          octets), with next to     |
                  |                                          last block as CBC-style   |
                  |                                          ivec                      |
                  +--------------------------------------------------------------------+
                  Supports AES128 and AES256                
                <author>
                    Seema Malkani                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="50"/>
            <declaration name="BLOCK_SIZE" type="int" line="51"/>
            <declaration name="DEFAULT_ITERATION_COUNT" type="int" line="52"/>
            <declaration name="ZERO_IV" type="byte[]" line="53"/>
            <declaration name="hashSize" type="int" line="54"/>
            <declaration name="keyLength" type="int" line="55"/>
            <method name="AesDkCrypto" type="constructor" line="56">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="getKeySeedLength" type="int" line="59"/>
            <method name="stringToKey" type="byte[]" line="62">
                <params>
                    <param name="password" type="char[]"/>
                    <param name="salt" type="String"/>
                    <param name="s2kparams" type="byte[]"/>
                </params>
                <declaration name="saltUtf8" type="byte[]" line="63"/>
                <scope line="64"/>
                <scope line="68"/>
                <scope line="71">
                    <scope line="72"/>
                </scope>
            </method>
            <method name="stringToKey" type="byte[]" line="77">
                <params>
                    <param name="secret" type="char[]"/>
                    <param name="salt" type="byte[]"/>
                    <param name="params" type="byte[]"/>
                </params>
                <declaration name="iter_count" type="int" line="78"/>
                <scope line="79">
                    <scope line="80"/>
                </scope>
                <declaration name="tmpKey" type="byte[]" line="85"/>
                <declaration name="result" type="byte[]" line="86"/>
            </method>
            <method name="randomToKey" type="byte[]" line="89">
                <params>
                    <param name="in" type="byte[]"/>
                </params>
            </method>
            <method name="getCipher" type="Cipher" line="92">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="mode" type="int"/>
                </params>
                <scope line="93"/>
                <declaration name="secretKey" type="SecretKeySpec" line="96"/>
                <declaration name="cipher" type="Cipher" line="97"/>
                <declaration name="encIv" type="IvParameterSpec" line="98"/>
            </method>
            <method name="getChecksumLength" type="int" line="102"/>
            <javadoc line="105">
                Get the truncated HMAC                
            </javadoc>
            <method name="getHmac" type="byte[]" line="108">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="msg" type="byte[]"/>
                </params>
                <declaration name="keyKi" type="SecretKey" line="109"/>
                <declaration name="m" type="Mac" line="110"/>
                <declaration name="hash" type="byte[]" line="112"/>
                <declaration name="output" type="byte[]" line="113"/>
            </method>
            <javadoc line="117">
                Calculate the checksum                
            </javadoc>
            <method name="calculateChecksum" type="byte[]" line="120">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="input" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="121"/>
                <declaration name="constant" type="byte[]" line="124"/>
                <declaration name="Kc" type="byte[]" line="130"/>
                <scope line="131"/>
                <scope line="138">
                    <declaration name="hmac" type="byte[]" line="139"/>
                    <scope line="140"/>
                    <scope line="143"/>
                    <scope line="146">
                        <declaration name="buf" type="byte[]" line="147"/>
                    </scope>
                    <scope line="151"/>
                </scope>
                <scope line="155"/>
            </method>
            <javadoc line="159">
                Performs encryption using derived key; adds confounder.                
            </javadoc>
            <method name="encrypt" type="byte[]" line="162">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="new_ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="163"/>
                <declaration name="output" type="byte[]" line="166"/>
            </method>
            <javadoc line="169">
                Performs encryption using derived key; does not add confounder.                
            </javadoc>
            <method name="encryptRaw" type="byte[]" line="172">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="173"/>
                <declaration name="output" type="byte[]" line="176"/>
            </method>
            <javadoc line="179">
                @param baseKey key from which keys are to be derived using usage                
                <param>
                    ciphertext  E(Ke, conf | plaintext | padding, ivec) | H1[1..h]                    
                </param>
            </javadoc>
            <method name="decrypt" type="byte[]" line="183">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="184"/>
                <declaration name="output" type="byte[]" line="187"/>
            </method>
            <javadoc line="190">
                Decrypts data using specified key and initial vector.                
                <param>
                    baseKey encryption key to use                    
                </param>
                <param>
                    ciphertext  encrypted data to be decrypted                    
                </param>
                <param>
                    usage ignored                    
                </param>
            </javadoc>
            <method name="decryptRaw" type="byte[]" line="196">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="197"/>
                <declaration name="output" type="byte[]" line="200"/>
            </method>
            <javadoc line="203">
                Encrypt AES in CBC-CTS mode using derived keys.                
            </javadoc>
            <method name="encryptCTS" type="byte[]" line="206">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="new_ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="confounder_exists" type="boolean"/>
                </params>
                <declaration name="Ke" type="byte[]" line="207"/>
                <declaration name="Ki" type="byte[]" line="208"/>
                <scope line="209">
                    <scope line="211"/>
                </scope>
                <scope line="217">
                    <declaration name="constant" type="byte[]" line="218"/>
                    <declaration name="toBeEncrypted" type="byte[]" line="225"/>
                    <scope line="226">
                        <declaration name="confounder" type="byte[]" line="227"/>
                    </scope>
                    <scope line="232"/>
                    <declaration name="output" type="byte[]" line="236"/>
                    <declaration name="cipher" type="Cipher" line="237"/>
                    <declaration name="secretKey" type="SecretKeySpec" line="238"/>
                    <declaration name="encIv" type="IvParameterSpec" line="239"/>
                    <scope line="244"/>
                    <declaration name="hmac" type="byte[]" line="248"/>
                </scope>
                <scope line="252">
                    <scope line="253"/>
                    <scope line="256"/>
                </scope>
            </method>
            <javadoc line="261">
                Decrypt AES in CBC-CTS mode using derived keys.                
            </javadoc>
            <method name="decryptCTS" type="byte[]" line="264">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="confounder_exists" type="boolean"/>
                </params>
                <declaration name="Ke" type="byte[]" line="265"/>
                <declaration name="Ki" type="byte[]" line="266"/>
                <scope line="267">
                    <declaration name="constant" type="byte[]" line="268"/>
                    <scope line="275">
                        <scope line="277"/>
                    </scope>
                    <declaration name="cipher" type="Cipher" line="285"/>
                    <declaration name="secretKey" type="SecretKeySpec" line="286"/>
                    <declaration name="encIv" type="IvParameterSpec" line="287"/>
                    <declaration name="plaintext" type="byte[]" line="289"/>
                    <scope line="290"/>
                    <scope line="295"/>
                    <declaration name="calculatedHmac" type="byte[]" line="299"/>
                    <declaration name="hmacOffset" type="int" line="300"/>
                    <scope line="301"/>
                    <declaration name="cksumFailed" type="boolean" line="305"/>
                    <scope line="306">
                        <scope line="307">
                            <scope line="308">
                                <scope line="310"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="317"/>
                    <scope line="320">
                        <declaration name="output" type="byte[]" line="321"/>
                    </scope>
                    <scope line="325"/>
                </scope>
                <scope line="329">
                    <scope line="330"/>
                    <scope line="333"/>
                </scope>
            </method>
            <method name="PBKDF2" type="byte[]" line="338">
                <params>
                    <param name="secret" type="char[]"/>
                    <param name="salt" type="byte[]"/>
                    <param name="count" type="int"/>
                    <param name="keyLength" type="int"/>
                </params>
                <declaration name="keySpec" type="PBEKeySpec" line="339"/>
                <declaration name="skf" type="SecretKeyFactory" line="340"/>
                <declaration name="key" type="SecretKey" line="341"/>
                <declaration name="result" type="byte[]" line="342"/>
            </method>
            <method name="readBigEndian" type="int" line="345">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="346"/>
                <declaration name="shifter" type="int" line="347"/>
                <scope line="348"/>
            </method>
        </class>
    </source>