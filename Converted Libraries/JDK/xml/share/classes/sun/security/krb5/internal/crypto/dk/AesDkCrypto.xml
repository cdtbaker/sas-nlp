<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.crypto.dk">
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.spec.DESedeKeySpec"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <import package="java.security.spec.KeySpec"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="sun.security.krb5.KrbCryptoException"/>
        <import package="sun.security.krb5.Confounder"/>
        <import package="sun.security.krb5.internal.crypto.KeyUsage"/>
        <import package="java.util.Arrays"/>
        <class name="AesDkCrypto" line="46">
            <extends class="DkCrypto"/>
            <comment line="155">
                get an instance of the AES Cipher in CTS mode                
            </comment>
            <comment line="475">
                Invoke the PKCS#5 PBKDF2 algorithm                
            </comment>
            <javadoc line="46">
                This class provides the implementation of AES Encryption for Kerberos
                  as defined RFC 3962.
                  http://www.ietf.org/rfc/rfc3962.txt
                  Algorithm profile described in [KCRYPTO]:
                  +--------------------------------------------------------------------+
                  |               protocol key format          128- or 256-bit string  |
                  |                                                                    |
                  |            string-to-key function          PBKDF2+DK with variable |
                  |                                          iteration count (see      |
                  |                                          above)                    |
                  |                                                                    |
                  |  default string-to-key parameters          00 00 10 00             |
                  |                                                                    |
                  |        key-generation seed length          key size                |
                  |                                                                    |
                  |            random-to-key function          identity function       |
                  |                                                                    |
                  |                    hash function, H                SHA-1           |
                  |                                                                    |
                  |               HMAC output size, h          12 octets (96 bits)     |
                  |                                                                    |
                  |             message block size, m          1 octet                 |
                  |                                                                    |
                  |  encryption/decryption functions,          AES in CBC-CTS mode     |
                  |  E and D                                 (cipher block size 16     |
                  |                                          octets), with next to     |
                  |                                          last block as CBC-style   |
                  |                                          ivec                      |
                  +--------------------------------------------------------------------+
                  Supports AES128 and AES256                
                <author>
                    Seema Malkani                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="85"/>
            <declaration name="BLOCK_SIZE" type="int" line="87"/>
            <declaration name="DEFAULT_ITERATION_COUNT" type="int" line="88"/>
            <declaration name="ZERO_IV" type="byte[]" line="89"/>
            <declaration name="hashSize" type="int" line="91"/>
            <declaration name="keyLength" type="int" line="92"/>
            <method name="AesDkCrypto" type="constructor" line="94">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="getKeySeedLength" type="int" line="98">
                <comment line="100">
                    bits; AES key material                    
                </comment>
            </method>
            <method name="stringToKey" type="byte[]" line="103">
                <params>
                    <param name="password" type="char[]"/>
                    <param name="salt" type="String"/>
                    <param name="s2kparams" type="byte[]"/>
                </params>
                <declaration name="saltUtf8" type="byte[]" line="105"/>
                <scope line="106"/>
                <scope line="109"/>
                <scope line="111">
                    <scope line="112"/>
                </scope>
            </method>
            <method name="stringToKey" type="byte[]" line="119">
                <params>
                    <param name="secret" type="char[]"/>
                    <param name="salt" type="byte[]"/>
                    <param name="params" type="byte[]"/>
                </params>
                <declaration name="iter_count" type="int" line="121"/>
                <scope line="122">
                    <scope line="123"/>
                </scope>
                <declaration name="tmpKey" type="byte[]" line="129"/>
                <declaration name="result" type="byte[]" line="131"/>
            </method>
            <method name="randomToKey" type="byte[]" line="135">
                <params>
                    <param name="in" type="byte[]"/>
                </params>
                <comment line="137">
                    simple identity operation                    
                </comment>
            </method>
            <method name="getCipher" type="Cipher" line="141">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="mode" type="int"/>
                </params>
                <comment line="144">
                    IV                    
                </comment>
                <scope line="144"/>
                <declaration name="secretKey" type="SecretKeySpec" line="147"/>
                <declaration name="cipher" type="Cipher" line="148"/>
                <declaration name="encIv" type="IvParameterSpec" line="149"/>
            </method>
            <method name="getChecksumLength" type="int" line="155">
                <comment line="157">
                    bytes                    
                </comment>
            </method>
            <javadoc line="159">
                Get the truncated HMAC                
            </javadoc>
            <method name="getHmac" type="byte[]" line="163">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="msg" type="byte[]"/>
                </params>
                <comment line="170">
                    generate hash                    
                </comment>
                <comment line="173">
                    truncate hash                    
                </comment>
                <declaration name="keyKi" type="SecretKey" line="165"/>
                <declaration name="m" type="Mac" line="166"/>
                <declaration name="hash" type="byte[]" line="170"/>
                <declaration name="output" type="byte[]" line="173"/>
            </method>
            <javadoc line="178">
                Calculate the checksum                
            </javadoc>
            <method name="calculateChecksum" type="byte[]" line="182">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="input" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="190">
                    Derive keys                    
                </comment>
                <comment line="199">
                    Checksum key                    
                </comment>
                <comment line="209">
                    Generate checksum
                     H1 = HMAC(Kc, input)                    
                </comment>
                <scope line="184"/>
                <declaration name="constant" type="byte[]" line="190"/>
                <declaration name="Kc" type="byte[]" line="198"/>
                <scope line="199"/>
                <scope line="207">
                    <declaration name="hmac" type="byte[]" line="210"/>
                    <scope line="211"/>
                    <scope line="214"/>
                    <scope line="216">
                        <declaration name="buf" type="byte[]" line="217"/>
                    </scope>
                    <scope line="220"/>
                </scope>
                <scope line="224"/>
            </method>
            <javadoc line="229">
                Performs encryption using derived key; adds confounder.                
            </javadoc>
            <method name="encrypt" type="byte[]" line="234">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="new_ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="236"/>
                <declaration name="output" type="byte[]" line="240"/>
            </method>
            <javadoc line="245">
                Performs encryption using derived key; does not add confounder.                
            </javadoc>
            <method name="encryptRaw" type="byte[]" line="250">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="252"/>
                <declaration name="output" type="byte[]" line="256"/>
            </method>
            <javadoc line="261">
                @param baseKey key from which keys are to be derived using usage                
                <param>
                    ciphertext  E(Ke, conf | plaintext | padding, ivec) | H1[1..h]                    
                </param>
            </javadoc>
            <method name="decrypt" type="byte[]" line="266">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="268"/>
                <declaration name="output" type="byte[]" line="272"/>
            </method>
            <javadoc line="277">
                Decrypts data using specified key and initial vector.                
                <param>
                    baseKey encryption key to use                    
                </param>
                <param>
                    ciphertext  encrypted data to be decrypted                    
                </param>
                <param>
                    usage ignored                    
                </param>
            </javadoc>
            <method name="decryptRaw" type="byte[]" line="285">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="287"/>
                <declaration name="output" type="byte[]" line="291"/>
            </method>
            <javadoc line="296">
                Encrypt AES in CBC-CTS mode using derived keys.                
            </javadoc>
            <method name="encryptCTS" type="byte[]" line="302">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="new_ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="confounder_exists" type="boolean"/>
                </params>
                <comment line="318">
                    derive Encryption key                    
                </comment>
                <comment line="325">
                    Encryption key                    
                </comment>
                <comment line="340">
                    encryptedData + HMAC                    
                </comment>
                <comment line="343">
                    AES in JCE                    
                </comment>
                <comment line="350">
                    Derive integrity key                    
                </comment>
                <comment line="358">
                    Generate checksum
                     H1 = HMAC(Ki, conf | plaintext | pad)                    
                </comment>
                <comment line="362">
                    encryptedData + HMAC                    
                </comment>
                <declaration name="Ke" type="byte[]" line="304"/>
                <declaration name="Ki" type="byte[]" line="305"/>
                <scope line="307">
                    <scope line="309"/>
                </scope>
                <scope line="316">
                    <declaration name="constant" type="byte[]" line="318"/>
                    <declaration name="toBeEncrypted" type="byte[]" line="326"/>
                    <scope line="327">
                        <declaration name="confounder" type="byte[]" line="328"/>
                    </scope>
                    <scope line="334"/>
                    <declaration name="output" type="byte[]" line="340"/>
                    <declaration name="cipher" type="Cipher" line="343"/>
                    <declaration name="secretKey" type="SecretKeySpec" line="344"/>
                    <declaration name="encIv" type="IvParameterSpec" line="345"/>
                    <scope line="352"/>
                    <declaration name="hmac" type="byte[]" line="359"/>
                </scope>
                <scope line="365">
                    <scope line="366"/>
                    <scope line="369"/>
                </scope>
            </method>
            <javadoc line="375">
                Decrypt AES in CBC-CTS mode using derived keys.                
            </javadoc>
            <method name="decryptCTS" type="byte[]" line="380">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="confounder_exists" type="boolean"/>
                </params>
                <comment line="387">
                    Derive encryption key                    
                </comment>
                <comment line="395">
                    Encryption key                    
                </comment>
                <comment line="408">
                    Decrypt [confounder | plaintext ] (without checksum)                    
                </comment>
                <comment line="410">
                    AES in JCE                    
                </comment>
                <comment line="422">
                    Derive integrity key                    
                </comment>
                <comment line="424">
                    Integrity key                    
                </comment>
                <comment line="430">
                    Verify checksum
                     H1 = HMAC(Ki, conf | plaintext | pad)                    
                </comment>
                <comment line="456">
                    Get rid of confounder
                     [ confounder | plaintext ]                    
                </comment>
                <declaration name="Ke" type="byte[]" line="382"/>
                <declaration name="Ki" type="byte[]" line="383"/>
                <scope line="385">
                    <declaration name="constant" type="byte[]" line="387"/>
                    <scope line="396">
                        <scope line="398"/>
                    </scope>
                    <declaration name="cipher" type="Cipher" line="410"/>
                    <declaration name="secretKey" type="SecretKeySpec" line="411"/>
                    <declaration name="encIv" type="IvParameterSpec" line="412"/>
                    <declaration name="plaintext" type="byte[]" line="414"/>
                    <scope line="416"/>
                    <scope line="424"/>
                    <declaration name="calculatedHmac" type="byte[]" line="431"/>
                    <declaration name="hmacOffset" type="int" line="432"/>
                    <scope line="433"/>
                    <declaration name="cksumFailed" type="boolean" line="438"/>
                    <scope line="439">
                        <scope line="440">
                            <scope line="441">
                                <scope line="443"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="450"/>
                    <scope line="454">
                        <declaration name="output" type="byte[]" line="457"/>
                    </scope>
                    <scope line="461"/>
                </scope>
                <scope line="464">
                    <scope line="465"/>
                    <scope line="468"/>
                </scope>
            </method>
            <method name="PBKDF2" type="byte[]" line="478">
                <params>
                    <param name="secret" type="char[]"/>
                    <param name="salt" type="byte[]"/>
                    <param name="count" type="int"/>
                    <param name="keyLength" type="int"/>
                </params>
                <declaration name="keySpec" type="PBEKeySpec" line="480"/>
                <declaration name="skf" type="SecretKeyFactory" line="481"/>
                <declaration name="key" type="SecretKey" line="483"/>
                <declaration name="result" type="byte[]" line="484"/>
            </method>
            <method name="readBigEndian" type="int" line="489">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="retVal" type="int" line="490"/>
                <declaration name="shifter" type="int" line="491"/>
                <scope line="492"/>
            </method>
        </class>
    </source>