<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <class name="APReq" line="6">
            <javadoc line="6">
                Implements the ASN.1 AP-REQ type.
                  &lt;xmp&gt;
                  AP-REQ               ::= [APPLICATION 14] SEQUENCE {
                  pvno            [0] INTEGER (5),
                  msg-type        [1] INTEGER (14),
                  ap-options      [2] APOptions,
                  ticket          [3] Ticket,
                  authenticator   [4] EncryptedData -- Authenticator
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
            </javadoc>
            <declaration name="pvno" type="int" line="24"/>
            <declaration name="msgType" type="int" line="25"/>
            <declaration name="apOptions" type="APOptions" line="26"/>
            <declaration name="ticket" type="Ticket" line="27"/>
            <declaration name="authenticator" type="EncryptedData" line="28"/>
            <method name="APReq" type="constructor" line="29">
                <params>
                    <param name="new_apOptions" type="APOptions"/>
                    <param name="new_ticket" type="Ticket"/>
                    <param name="new_authenticator" type="EncryptedData"/>
                </params>
            </method>
            <method name="APReq" type="constructor" line="36">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="APReq" type="constructor" line="39">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <javadoc line="42">
                Initializes an APReq object.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <exception>
                    KrbApErrException if the value read from the DER-encoded data stream does not match the pre-defined value.                    
                </exception>
                <exception>
                    RealmException if an error occurs while parsing a Realm object.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="50">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="51"/>
                <scope line="52"/>
                <scope line="56"/>
                <scope line="60"/>
                <scope line="64"/>
                <scope line="68"/>
                <scope line="72"/>
                <scope line="78"/>
            </method>
            <javadoc line="82">
                Encodes an APReq object.                
                <return>
                    byte array of encoded APReq object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="88">
                <declaration name="bytes" type="DerOutputStream" line="89"/>
                <declaration name="temp" type="DerOutputStream" line="90"/>
                <declaration name="apreq" type="DerOutputStream" line="101"/>
            </method>
        </class>
    </source>