<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.ccache">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.security.krb5"/>
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.util.KrbDataInputStream"/>
        <class name="CCacheInputStream" line="42">
            <extends class="KrbDataInputStream"/>
            <comment line="52">
                FCC version 2 contains type information for principals.  FCC
                 version 1 does not.
                
                 FCC version 3 contains keyblock encryption type information, and is
                 architecture independent.  Previous versions are not.
                
                 The code will accept version 1, 2, and 3 ccaches, and depending
                 what KRB5_FCC_DEFAULT_FVNO is set to, it will create version 1, 2,
                 or 3 FCC caches.
                
                 The default credentials cache should be type 3 for now (see
                 init_ctx.c).                
            </comment>
            <comment line="66">
                                
            </comment>
            <comment line="74">
                                
            </comment>
            <comment line="75">
                this needs to be public for Kinit.                
            </comment>
            <comment line="111">
                In file-based credential cache, the realm name is stored as part of
                 principal name at the first place.                
            </comment>
            <comment line="115">
                made public for KinitOptions to call directly                
            </comment>
            <comment line="155">
                In practice, a realm is named by uppercasing the DNS domain name. we currently
                 rely on this to determine if the string within the principal identifier is realm
                 name.                
            </comment>
            <implements interface="FileCCacheConstants"/>
            <javadoc line="42">
                This class extends KrbDataInputStream. It is used for parsing FCC-format
                  data from file to memory.                
                <author>
                    Yanni Zhang                    
                </author>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="67"/>
            <method name="CCacheInputStream" type="constructor" line="69">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
            </method>
            <method name="readTag" type="Tag" line="75">
                <declaration name="buf" type="char[]" line="76"/>
                <declaration name="bytes" type="byte[]" line="77"/>
                <declaration name="len" type="int" line="78"/>
                <declaration name="tag" type="int" line="79"/>
                <declaration name="taglen" type="int" line="80"/>
                <declaration name="time_offset" type="Integer" line="81"/>
                <declaration name="usec_offset" type="Integer" line="82"/>
                <scope line="85"/>
                <scope line="89"/>
                <scope line="92"/>
                <declaration name="result" type="Tag" line="104"/>
                <scope line="105"/>
            </method>
            <method name="readPrincipal" type="PrincipalName" line="115">
                <params>
                    <param name="version" type="int"/>
                </params>
                <comment line="120">
                                        
                </comment>
                <comment line="128">
                    DCE includes the principal&apos;s realm in the count; the new format
                     does not.                    
                </comment>
                <declaration name="type" type="int" line="116"/>
                <declaration name="p" type="PrincipalName" line="117"/>
                <declaration name="pname" type="String[]" line="118"/>
                <declaration name="realm" type="String" line="119"/>
                <scope line="121"/>
                <scope line="123"/>
                <declaration name="result" type="String[]" line="127"/>
                <scope line="134">
                    <scope line="136"/>
                    <declaration name="bytes" type="byte[]" line="139"/>
                </scope>
                <scope line="143"/>
            </method>
            <method name="isRealm" type="boolean" line="160">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="161">
                    <declaration name="r" type="Realm" line="162"/>
                </scope>
                <scope line="164"/>
                <declaration name="st" type="StringTokenizer" line="167"/>
                <declaration name="s" type="String" line="168"/>
                <scope line="169">
                    <scope line="171">
                        <scope line="172"/>
                    </scope>
                </scope>
            </method>
            <method name="readKey" type="EncryptionKey" line="180">
                <params>
                    <param name="version" type="int"/>
                </params>
                <comment line="184">
                                        
                </comment>
                <declaration name="keyType" type="int" line="181"/>
                <declaration name="bytes" type="byte[]" line="186"/>
                <scope line="187"/>
            </method>
            <method name="readTimes" type="long[]" line="193">
                <declaration name="times" type="long[]" line="194"/>
            </method>
            <method name="readskey" type="boolean" line="202">
                <scope line="203"/>
            </method>
            <method name="readAddr" type="HostAddress[]" line="209">
                <declaration name="numAddrs" type="int" line="210"/>
                <scope line="212">
                    <declaration name="addrs" type="HostAddress[]" line="213"/>
                    <scope line="214">
                        <scope line="217">
                            <scope line="218"/>
                        </scope>
                        <declaration name="result" type="byte[]" line="223"/>
                    </scope>
                </scope>
            </method>
            <method name="readAuth" type="AuthorizationDataEntry[]" line="233">
                <declaration name="num" type="int" line="234"/>
                <scope line="236">
                    <declaration name="auData" type="AuthorizationDataEntry[]" line="237"/>
                    <declaration name="data" type="byte[]" line="238"/>
                    <scope line="239">
                        <scope line="243"/>
                    </scope>
                </scope>
            </method>
            <method name="readData" type="byte[]" line="253">
                <declaration name="length" type="int" line="254"/>
                <scope line="256"/>
                <scope line="258">
                    <declaration name="bytes" type="byte[]" line="259"/>
                </scope>
            </method>
            <method name="readFlags" type="boolean[]" line="265">
                <declaration name="flags" type="boolean[]" line="266"/>
                <declaration name="ticketFlags" type="int" line="267"/>
                <scope line="291">
                    <declaration name="msg" type="String" line="292"/>
                    <scope line="293"/>
                    <scope line="296"/>
                    <scope line="299"/>
                    <scope line="302"/>
                    <scope line="305"/>
                    <scope line="308"/>
                    <scope line="311"/>
                    <scope line="314"/>
                    <scope line="318"/>
                    <scope line="321"/>
                    <scope line="324"/>
                </scope>
            </method>
            <javadoc line="332">
                Reads the next cred in stream.                
                <return>
                    the next cred, null if ticket or second_ticket unparseable.
                      Note: MIT krb5 1.8.1 might generate a config entry with server principal
                      X-CACHECONF:/krb5_ccache_conf_data/fast_avail/krbtgt/REALM@REALM. The
                      entry is used by KDC to inform the client that it support certain
                      features. Its ticket is not a valid krb5 ticket and thus this method
                      returns null.                    
                </return>
            </javadoc>
            <method name="readCred" type="Credentials" line="342">
                <params>
                    <param name="version" type="int"/>
                </params>
                <comment line="390">
                    If any of new Ticket(*) fails.                    
                </comment>
                <declaration name="cpname" type="PrincipalName" line="343"/>
                <declaration name="spname" type="PrincipalName" line="346"/>
                <declaration name="key" type="EncryptionKey" line="349"/>
                <declaration name="times" type="long" line="352"/>
                <declaration name="authtime" type="KerberosTime" line="353"/>
                <declaration name="starttime" type="KerberosTime" line="354"/>
                <declaration name="endtime" type="KerberosTime" line="356"/>
                <declaration name="renewTill" type="KerberosTime" line="357"/>
                <scope line="360"/>
                <declaration name="skey" type="boolean" line="368"/>
                <declaration name="flags" type="boolean" line="369"/>
                <declaration name="tFlags" type="TicketFlags" line="370"/>
                <declaration name="addr" type="HostAddress" line="371"/>
                <declaration name="addrs" type="HostAddresses" line="372"/>
                <scope line="373"/>
                <declaration name="auDataEntry" type="AuthorizationDataEntry[]" line="376"/>
                <declaration name="auData" type="AuthorizationData" line="377"/>
                <scope line="378"/>
                <declaration name="ticketData" type="byte[]" line="381"/>
                <declaration name="ticketData2" type="byte[]" line="382"/>
                <scope line="384"/>
                <scope line="390"/>
            </method>
        </class>
    </source>