<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5"/>
        <import package="sun.security.util"/>
        <import package="java.util.Vector"/>
        <import package="java.io.IOException"/>
        <import package="java.io"/>
        <class name="EncTicketPart" line="39">
            <comment line="73">
                optional                
            </comment>
            <comment line="75">
                optional                
            </comment>
            <comment line="76">
                optional                
            </comment>
            <comment line="77">
                optional                
            </comment>
            <javadoc line="39">
                Implements the ASN.1 EncTicketPart type.
                  &lt;xmp&gt;
                  EncTicketPart   ::= [APPLICATION 3] SEQUENCE {
                  flags                   [0] TicketFlags,
                  key                     [1] EncryptionKey,
                  crealm                  [2] Realm,
                  cname                   [3] PrincipalName,
                  transited               [4] TransitedEncoding,
                  authtime                [5] KerberosTime,
                  starttime               [6] KerberosTime OPTIONAL,
                  endtime                 [7] KerberosTime,
                  renew-till              [8] KerberosTime OPTIONAL,
                  caddr                   [9] HostAddresses OPTIONAL,
                  authorization-data      [10] AuthorizationData OPTIONAL
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
            </javadoc>
            <declaration name="flags" type="TicketFlags" line="66"/>
            <declaration name="key" type="EncryptionKey" line="67"/>
            <declaration name="crealm" type="Realm" line="68"/>
            <declaration name="cname" type="PrincipalName" line="69"/>
            <declaration name="transited" type="TransitedEncoding" line="70"/>
            <declaration name="authtime" type="KerberosTime" line="71"/>
            <declaration name="starttime" type="KerberosTime" line="72"/>
            <declaration name="endtime" type="KerberosTime" line="73"/>
            <declaration name="renewTill" type="KerberosTime" line="74"/>
            <declaration name="caddr" type="HostAddresses" line="75"/>
            <declaration name="authorizationData" type="AuthorizationData" line="76"/>
            <method name="EncTicketPart" type="constructor" line="89">
                <params>
                    <param name="new_flags" type="TicketFlags"/>
                    <param name="new_key" type="EncryptionKey"/>
                    <param name="new_crealm" type="Realm"/>
                    <param name="new_cname" type="PrincipalName"/>
                    <param name="new_transited" type="TransitedEncoding"/>
                    <param name="new_authtime" type="KerberosTime"/>
                    <param name="new_starttime" type="KerberosTime"/>
                    <param name="new_endtime" type="KerberosTime"/>
                    <param name="new_renewTill" type="KerberosTime"/>
                    <param name="new_caddr" type="HostAddresses"/>
                    <param name="new_authorizationData" type="AuthorizationData"/>
                </params>
            </method>
            <method name="EncTicketPart" type="constructor" line="104">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="EncTicketPart" type="constructor" line="109">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <javadoc line="113">
                Initializes an EncTicketPart object.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <exception>
                    RealmException if an error occurs while parsing a Realm object.                    
                </exception>
            </javadoc>
            <method name="getHexBytes" type="String" line="121">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="123"/>
                <scope line="124">
                    <declaration name="b1" type="int" line="126"/>
                    <declaration name="b2" type="int" line="127"/>
                </scope>
            </method>
            <method name="init" type="void" line="137">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="138"/>
                <scope line="145"/>
                <scope line="149"/>
                <scope line="160"/>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="169"/>
            </method>
            <javadoc line="175">
                Encodes an EncTicketPart object.                
                <return>
                    byte array of encoded EncTicketPart object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="181">
                <declaration name="bytes" type="DerOutputStream" line="182"/>
                <declaration name="temp" type="DerOutputStream" line="183"/>
                <scope line="196"/>
                <scope line="203"/>
                <scope line="208"/>
                <scope line="213"/>
            </method>
        </class>
    </source>