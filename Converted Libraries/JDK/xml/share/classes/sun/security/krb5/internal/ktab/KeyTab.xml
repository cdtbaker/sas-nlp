<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.ktab">
        <import package="sun.security.krb5"/>
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <class name="KeyTab" line="17">
            <implements interface="KeyTabConstants"/>
            <javadoc line="17">
                This class represents key table. The key table functions deal with storing
                  and retrieving service keys for use in authentication exchanges.
                  A KeyTab object is always constructed, if the file specified does not
                  exist, it&apos;s still valid but empty. If there is an I/O error or file format
                  error, it&apos;s invalid.
                  The class is immutable on the read side (the write side is only used by
                  the ktab tool).                
                <author>
                    Yanni Zhang                    
                </author>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="28"/>
            <declaration name="defaultTabName" type="String" line="29"/>
            <declaration name="map" type="Map&amp;lt;String,KeyTab&amp;gt;" line="30"/>
            <declaration name="isMissing" type="boolean" line="31"/>
            <declaration name="isValid" type="boolean" line="32"/>
            <declaration name="tabName" type="String" line="33"/>
            <declaration name="lastModified" type="long" line="34"/>
            <declaration name="kt_vno" type="int" line="35"/>
            <declaration name="entries" type="Vector&amp;lt;KeyTabEntry&amp;gt;" line="36"/>
            <javadoc line="37">
                Constructs a KeyTab object.
                  If there is any I/O error or format errot during the loading, the
                  isValid flag is set to false, and all half-read entries are dismissed.                
                <param>
                    filename path name for the keytab file, must not be null                    
                </param>
            </javadoc>
            <method name="KeyTab" type="constructor" line="43">
                <params>
                    <param name="filename" type="String"/>
                </params>
            </method>
            <javadoc line="60">
                Read a keytab file. Returns a new object and save it into cache when
                  new content (modified since last read) is available. If keytab file is
                  invalid, the old object will be returned. This is a safeguard for
                  partial-written keytab files or non-stable network. Please note that
                  a missing keytab is valid, which is equivalent to an empty keytab.                
                <param>
                    s file name of keytab, must not be null                    
                </param>
                <return>
                    the keytab object, can be invalid, but never null.                    
                </return>
            </javadoc>
            <method name="getInstance0" type="KeyTab" line="69">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="lm" type="long" line="70"/>
                <declaration name="old" type="KeyTab" line="71"/>
                <scope line="72"/>
                <declaration name="ktab" type="KeyTab" line="75"/>
                <scope line="76"/>
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <javadoc line="87">
                Gets a KeyTab object.                
                <param>
                    s the key tab file name.                    
                </param>
                <return>
                    the KeyTab object, never null.                    
                </return>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="92">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <javadoc line="100">
                Gets a KeyTab object.                
                <param>
                    file the key tab file.                    
                </param>
                <return>
                    the KeyTab object, never null.                    
                </return>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="105">
                <params>
                    <param name="file" type="File"/>
                </params>
                <scope line="106"/>
                <scope line="109"/>
            </method>
            <javadoc line="113">
                Gets the default KeyTab object.                
                <return>
                    the KeyTab object, never null.                    
                </return>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="117"/>
            <method name="isMissing" type="boolean" line="120"/>
            <method name="isValid" type="boolean" line="123"/>
            <javadoc line="126">
                The location of keytab file will be read from the configuration file
                  If it is not specified, consider user.home as the keytab file&apos;s
                  default location.                
                <return>
                    never null                    
                </return>
            </javadoc>
            <method name="getDefaultTabName" type="String" line="132">
                <scope line="133"/>
                <scope line="136">
                    <declaration name="kname" type="String" line="137"/>
                    <scope line="138">
                        <declaration name="keytab_names" type="String" line="139"/>
                        <scope line="140">
                            <declaration name="st" type="StringTokenizer" line="141"/>
                            <scope line="142">
                                <scope line="144"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="150"/>
                    <scope line="153">
                        <declaration name="user_home" type="String" line="154"/>
                        <scope line="155"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="164">
                Parses some common keytab name formats                
                <param>
                    name never null                    
                </param>
                <return>
                    never null                    
                </return>
            </javadoc>
            <method name="parse" type="String" line="169">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="kname" type="String" line="170"/>
                <scope line="171"/>
                <scope line="174"/>
                <scope line="177"/>
            </method>
            <method name="load" type="void" line="183">
                <params>
                    <param name="kis" type="KeyTabInputStream"/>
                </params>
                <scope line="186"/>
                <declaration name="entryLength" type="int" line="189"/>
                <declaration name="entry" type="KeyTabEntry" line="190"/>
                <scope line="191">
                    <scope line="194"/>
                </scope>
            </method>
            <javadoc line="200">
                Reads all keys for a service from the keytab file that have
                  etypes that have been configured for use. If there are multiple
                  keys with same etype, the one with the highest kvno is returned.                
                <param>
                    service the PrincipalName of the requested service                    
                </param>
                <return>
                    an array containing all the service keys, never null                    
                </return>
            </javadoc>
            <method name="readServiceKeys" type="EncryptionKey[]" line="207">
                <params>
                    <param name="service" type="PrincipalName"/>
                </params>
                <declaration name="entry" type="KeyTabEntry" line="208"/>
                <declaration name="key" type="EncryptionKey" line="209"/>
                <declaration name="size" type="int" line="210"/>
                <declaration name="keys" type="ArrayList&amp;lt;EncryptionKey&amp;gt;" line="211"/>
                <scope line="212">
                    <scope line="214">
                        <scope line="215">
                            <scope line="218"/>
                        </scope>
                        <scope line="222"/>
                    </scope>
                </scope>
                <declaration name="retVal" type="EncryptionKey[]" line="228"/>
                <scope line="229"/>
                <declaration name="etypes" type="int[]" line="232"/>
                <anonymous_class line="233">
                    <method name="compare" type="int" line="234">
                        <params>
                            <param name="o1" type="EncryptionKey"/>
                            <param name="o2" type="EncryptionKey"/>
                        </params>
                        <scope line="235">
                            <declaration name="o1EType" type="int" line="236"/>
                            <declaration name="o2EType" type="int" line="237"/>
                            <scope line="238">
                                <scope line="239">
                                    <scope line="240"/>
                                    <scope line="243"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="255">
                Searches for the service entry in the keytab file.
                  The etype of the key must be one that has been configured
                  to be used.                
                <param>
                    service the PrincipalName of the requested service.                    
                </param>
                <return>
                    true if the entry is found, otherwise, return false.                    
                </return>
            </javadoc>
            <method name="findServiceEntry" type="boolean" line="262">
                <params>
                    <param name="service" type="PrincipalName"/>
                </params>
                <declaration name="entry" type="KeyTabEntry" line="263"/>
                <scope line="264">
                    <scope line="266">
                        <scope line="267"/>
                        <scope line="270"/>
                    </scope>
                </scope>
            </method>
            <method name="tabName" type="String" line="277"/>
            <javadoc line="280">
                Adds a new entry in the key table.                
                <param>
                    service the service which will have a new entry in the key table.                    
                </param>
                <param>
                    psswd the password which generates the key.                    
                </param>
                <param>
                    kvno the kvno to use, -1 means automatic increasing                    
                </param>
                <param>
                    append false if entries with old kvno would be removed.
                      Note: if kvno is not -1, entries with the same kvno are always removed                    
                </param>
            </javadoc>
            <method name="addEntry" type="void" line="288">
                <params>
                    <param name="service" type="PrincipalName"/>
                    <param name="psswd" type="char[]"/>
                    <param name="kvno" type="int"/>
                    <param name="append" type="boolean"/>
                </params>
                <declaration name="encKeys" type="EncryptionKey[]" line="289"/>
                <declaration name="maxKvno" type="int" line="290"/>
                <scope line="291">
                    <declaration name="e" type="KeyTabEntry" line="292"/>
                    <scope line="293">
                        <scope line="294"/>
                        <scope line="297"/>
                    </scope>
                </scope>
                <scope line="302"/>
                <scope line="305">
                    <declaration name="keyType" type="int" line="306"/>
                    <declaration name="keyValue" type="byte[]" line="307"/>
                    <declaration name="newEntry" type="KeyTabEntry" line="308"/>
                </scope>
            </method>
            <javadoc line="312">
                Gets the list of service entries in key table.                
                <return>
                    array of &lt;code&gt;KeyTabEntry&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getEntries" type="KeyTabEntry[]" line="316">
                <declaration name="kentries" type="KeyTabEntry[]" line="317"/>
                <scope line="318"/>
            </method>
            <javadoc line="323">
                Creates a new default key table.                
            </javadoc>
            <method name="create" type="KeyTab" line="326">
                <declaration name="dname" type="String" line="327"/>
            </method>
            <javadoc line="330">
                Creates a new default key table.                
            </javadoc>
            <method name="create" type="KeyTab" line="333">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="339">
                Saves the file at the directory.                
            </javadoc>
            <method name="save" type="void" line="342"/>
            <javadoc line="350">
                Removes entries from the key table.                
                <param>
                    service the service &lt;code&gt;PrincipalName&lt;/code&gt;.                    
                </param>
                <param>
                    etype the etype to match, remove all if -1                    
                </param>
                <param>
                    kvno what kvno to remove, -1 for all, -2 for old                    
                </param>
                <return>
                    the number of entries deleted                    
                </return>
            </javadoc>
            <method name="deleteEntries" type="int" line="357">
                <params>
                    <param name="service" type="PrincipalName"/>
                    <param name="etype" type="int"/>
                    <param name="kvno" type="int"/>
                </params>
                <declaration name="count" type="int" line="358"/>
                <declaration name="highest" type="Map&amp;lt;Integer,Integer&amp;gt;" line="359"/>
                <scope line="360">
                    <declaration name="e" type="KeyTabEntry" line="361"/>
                    <scope line="362">
                        <scope line="363">
                            <scope line="364">
                                <scope line="365">
                                    <declaration name="n" type="int" line="366"/>
                                    <scope line="367"/>
                                </scope>
                                <scope line="371"/>
                            </scope>
                            <scope line="375"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="382">
                    <scope line="383">
                        <declaration name="e" type="KeyTabEntry" line="384"/>
                        <scope line="385">
                            <scope line="386">
                                <declaration name="n" type="int" line="387"/>
                                <scope line="388"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="398">
                Creates key table file version.                
                <param>
                    file the key table file.                    
                </param>
                <exception>
                    IOException.                    
                </exception>
            </javadoc>
            <method name="createVersion" type="void" line="403">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
        </class>
    </source>