<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.ktab">
        <import package="sun.security.krb5"/>
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <class name="KeyTab" line="50">
            <comment line="69">
                Attention: Currently there is no way to remove a keytab from this map,
                 this might lead to a memory leak.                
            </comment>
            <comment line="73">
                KeyTab file does not exist. Note: a missing keytab is still valid                
            </comment>
            <comment line="76">
                KeyTab file is invalid, possibly an I/O error or a file format error.                
            </comment>
            <comment line="368">
                ///////////////// THE WRITE SIDE ///////////////////////
                / only used by ktab tool                
            </comment>
            <implements interface="KeyTabConstants"/>
            <javadoc line="50">
                This class represents key table. The key table functions deal with storing
                  and retrieving service keys for use in authentication exchanges.
                  A KeyTab object is always constructed, if the file specified does not
                  exist, it&apos;s still valid but empty. If there is an I/O error or file format
                  error, it&apos;s invalid.
                  The class is immutable on the read side (the write side is only used by
                  the ktab tool).                
                <author>
                    Yanni Zhang                    
                </author>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="65"/>
            <declaration name="defaultTabName" type="String" line="66"/>
            <declaration name="map" type="Map&lt;String,KeyTab&gt;" line="70"/>
            <declaration name="isMissing" type="boolean" line="73"/>
            <declaration name="isValid" type="boolean" line="76"/>
            <declaration name="tabName" type="String" line="78"/>
            <declaration name="lastModified" type="long" line="79"/>
            <declaration name="kt_vno" type="int" line="80"/>
            <declaration name="entries" type="Vector&lt;KeyTabEntry&gt;" line="82"/>
            <javadoc line="84">
                Constructs a KeyTab object.
                  If there is any I/O error or format errot during the loading, the
                  isValid flag is set to false, and all half-read entries are dismissed.                
                <param>
                    filename path name for the keytab file, must not be null                    
                </param>
            </javadoc>
            <method name="KeyTab" type="constructor" line="91">
                <params>
                    <param name="filename" type="String"/>
                </params>
                <scope line="93">
                    <scope line="96"/>
                </scope>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <javadoc line="108">
                Read a keytab file. Returns a new object and save it into cache when
                  new content (modified since last read) is available. If keytab file is
                  invalid, the old object will be returned. This is a safeguard for
                  partial-written keytab files or non-stable network. Please note that
                  a missing keytab is valid, which is equivalent to an empty keytab.                
                <param>
                    s file name of keytab, must not be null                    
                </param>
                <return>
                    the keytab object, can be invalid, but never null.                    
                </return>
            </javadoc>
            <method name="getInstance0" type="KeyTab" line="118">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="126">
                    A valid new keytab                    
                </comment>
                <comment line="129">
                    An existing old one                    
                </comment>
                <comment line="132">
                    first read is invalid                    
                </comment>
                <declaration name="lm" type="long" line="119"/>
                <declaration name="old" type="KeyTab" line="120"/>
                <scope line="121"/>
                <declaration name="ktab" type="KeyTab" line="124"/>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Gets a KeyTab object.                
                <param>
                    s the key tab file name.                    
                </param>
                <return>
                    the KeyTab object, never null.                    
                </return>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="140">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="141"/>
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Gets a KeyTab object.                
                <param>
                    file the key tab file.                    
                </param>
                <return>
                    the KeyTab object, never null.                    
                </return>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="153">
                <params>
                    <param name="file" type="File"/>
                </params>
                <scope line="154"/>
                <scope line="156"/>
            </method>
            <javadoc line="161">
                Gets the default KeyTab object.                
                <return>
                    the KeyTab object, never null.                    
                </return>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="165"/>
            <method name="isMissing" type="boolean" line="169"/>
            <method name="isValid" type="boolean" line="173"/>
            <javadoc line="177">
                The location of keytab file will be read from the configuration file
                  If it is not specified, consider user.home as the keytab file&apos;s
                  default location.                
                <return>
                    never null                    
                </return>
            </javadoc>
            <method name="getDefaultTabName" type="String" line="183">
                <scope line="184"/>
                <scope line="186">
                    <declaration name="kname" type="String" line="187"/>
                    <scope line="188">
                        <declaration name="keytab_names" type="String" line="189"/>
                        <scope line="191">
                            <declaration name="st" type="StringTokenizer" line="192"/>
                            <scope line="193">
                                <scope line="195"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="200"/>
                    <scope line="204">
                        <declaration name="user_home" type="String" line="205"/>
                        <scope line="209"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="222">
                Parses some common keytab name formats                
                <param>
                    name never null                    
                </param>
                <return>
                    never null                    
                </return>
            </javadoc>
            <method name="parse" type="String" line="227">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="235">
                    this format found in MIT&apos;s krb5.ini.                    
                </comment>
                <comment line="239">
                    this format found in MIT&apos;s krb5.ini.                    
                </comment>
                <declaration name="kname" type="String" line="228"/>
                <scope line="230"/>
                <scope line="233"/>
                <scope line="237"/>
            </method>
            <method name="load" type="void" line="246">
                <params>
                    <param name="kis" type="KeyTabInputStream"/>
                </params>
                <scope line="250"/>
                <declaration name="entryLength" type="int" line="253"/>
                <declaration name="entry" type="KeyTabEntry" line="254"/>
                <scope line="255">
                    <scope line="258"/>
                </scope>
            </method>
            <javadoc line="268">
                Reads all keys for a service from the keytab file that have
                  etypes that have been configured for use. If there are multiple
                  keys with same etype, the one with the highest kvno is returned.                
                <param>
                    service the PrincipalName of the requested service                    
                </param>
                <return>
                    an array containing all the service keys, never null                    
                </return>
            </javadoc>
            <method name="readServiceKeys" type="EncryptionKey[]" line="275">
                <params>
                    <param name="service" type="PrincipalName"/>
                </params>
                <comment line="302">
                    Sort keys according to default_tkt_enctypes                    
                </comment>
                <comment line="309">
                    Sort the keys, k1 is preferred than k2 if:
                     1. k1&apos;s etype appears earlier in etypes than k2&apos;s
                     2. If same, k1&apos;s KVNO is higher                    
                </comment>
                <comment line="326">
                    Neither o1EType nor o2EType in default_tkt_enctypes,
                     therefore won&apos;t be used in AS-REQ. We do not care
                     about their order, use kvno is OK.                    
                </comment>
                <declaration name="entry" type="KeyTabEntry" line="276"/>
                <declaration name="key" type="EncryptionKey" line="277"/>
                <declaration name="size" type="int" line="278"/>
                <declaration name="keys" type="ArrayList&lt;EncryptionKey&gt;" line="279"/>
                <scope line="280">
                    <scope line="282">
                        <scope line="283">
                            <scope line="288"/>
                        </scope>
                        <scope line="292"/>
                    </scope>
                </scope>
                <declaration name="retVal" type="EncryptionKey[]" line="299"/>
                <scope line="302"/>
                <declaration name="etypes" type="int[]" line="306"/>
                <anonymous_class line="311">
                    <method name="compare" type="int" line="313">
                        <params>
                            <param name="o1" type="EncryptionKey"/>
                            <param name="o2" type="EncryptionKey"/>
                        </params>
                        <comment line="326">
                            Neither o1EType nor o2EType in default_tkt_enctypes,
                             therefore won&apos;t be used in AS-REQ. We do not care
                             about their order, use kvno is OK.                            
                        </comment>
                        <scope line="314">
                            <declaration name="o1EType" type="int" line="315"/>
                            <declaration name="o2EType" type="int" line="316"/>
                            <scope line="317">
                                <scope line="318">
                                    <scope line="319"/>
                                    <scope line="321"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="340">
                Searches for the service entry in the keytab file.
                  The etype of the key must be one that has been configured
                  to be used.                
                <param>
                    service the PrincipalName of the requested service.                    
                </param>
                <return>
                    true if the entry is found, otherwise, return false.                    
                </return>
            </javadoc>
            <method name="findServiceEntry" type="boolean" line="347">
                <params>
                    <param name="service" type="PrincipalName"/>
                </params>
                <declaration name="entry" type="KeyTabEntry" line="348"/>
                <scope line="349">
                    <scope line="351">
                        <scope line="352"/>
                        <scope line="354"/>
                    </scope>
                </scope>
            </method>
            <method name="tabName" type="String" line="363"/>
            <javadoc line="370">
                Adds a new entry in the key table.                
                <param>
                    service the service which will have a new entry in the key table.                    
                </param>
                <param>
                    psswd the password which generates the key.                    
                </param>
                <param>
                    kvno the kvno to use, -1 means automatic increasing                    
                </param>
                <param>
                    append false if entries with old kvno would be removed.
                      Note: if kvno is not -1, entries with the same kvno are always removed                    
                </param>
            </javadoc>
            <method name="addEntry" type="void" line="379">
                <params>
                    <param name="service" type="PrincipalName"/>
                    <param name="psswd" type="char[]"/>
                    <param name="kvno" type="int"/>
                    <param name="append" type="boolean"/>
                </params>
                <comment line="385">
                    There should be only one maximum KVNO value for all etypes, so that
                     all added keys can have the same KVNO.                    
                </comment>
                <comment line="388">
                    only useful when kvno == -1                    
                </comment>
                <declaration name="encKeys" type="EncryptionKey[]" line="381"/>
                <declaration name="maxKvno" type="int" line="387"/>
                <scope line="388">
                    <declaration name="e" type="KeyTabEntry" line="389"/>
                    <scope line="390">
                        <scope line="391"/>
                        <scope line="394"/>
                    </scope>
                </scope>
                <scope line="399"/>
                <scope line="403">
                    <declaration name="keyType" type="int" line="404"/>
                    <declaration name="keyValue" type="byte[]" line="405"/>
                    <declaration name="newEntry" type="KeyTabEntry" line="407"/>
                </scope>
            </method>
            <javadoc line="415">
                Gets the list of service entries in key table.                
                <return>
                    array of &lt;code&gt;KeyTabEntry&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getEntries" type="KeyTabEntry[]" line="419">
                <declaration name="kentries" type="KeyTabEntry[]" line="420"/>
                <scope line="421"/>
            </method>
            <javadoc line="427">
                Creates a new default key table.                
            </javadoc>
            <method name="create" type="KeyTab" line="431">
                <declaration name="dname" type="String" line="432"/>
            </method>
            <javadoc line="436">
                Creates a new default key table.                
            </javadoc>
            <method name="create" type="KeyTab" line="440">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="443"/>
            </method>
            <javadoc line="449">
                Saves the file at the directory.                
            </javadoc>
            <method name="save" type="void" line="452">
                <scope line="454">
                    <scope line="456"/>
                </scope>
            </method>
            <javadoc line="462">
                Removes entries from the key table.                
                <param>
                    service the service &lt;code&gt;PrincipalName&lt;/code&gt;.                    
                </param>
                <param>
                    etype the etype to match, remove all if -1                    
                </param>
                <param>
                    kvno what kvno to remove, -1 for all, -2 for old                    
                </param>
                <return>
                    the number of entries deleted                    
                </return>
            </javadoc>
            <method name="deleteEntries" type="int" line="469">
                <params>
                    <param name="service" type="PrincipalName"/>
                    <param name="etype" type="int"/>
                    <param name="kvno" type="int"/>
                </params>
                <comment line="473">
                    Remember the highest KVNO for each etype. Used for kvno == -2                    
                </comment>
                <comment line="481">
                    Two rounds for kvno == -2. In the first round (here),
                     only find out highest KVNO for each etype                    
                </comment>
                <comment line="499">
                    Second round for kvno == -2, remove old entries                    
                </comment>
                <declaration name="count" type="int" line="470"/>
                <declaration name="highest" type="Map&lt;Integer,Integer&gt;" line="473"/>
                <scope line="475">
                    <declaration name="e" type="KeyTabEntry" line="476"/>
                    <scope line="477">
                        <scope line="478">
                            <scope line="479">
                                <scope line="482">
                                    <declaration name="n" type="int" line="483"/>
                                    <scope line="484"/>
                                </scope>
                                <scope line="487"/>
                            </scope>
                            <scope line="490"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="499">
                    <scope line="500">
                        <declaration name="e" type="KeyTabEntry" line="501"/>
                        <scope line="502">
                            <scope line="503">
                                <declaration name="n" type="int" line="504"/>
                                <scope line="505"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="516">
                Creates key table file version.                
                <param>
                    file the key table file.                    
                </param>
                <exception>
                    IOException.                    
                </exception>
            </javadoc>
            <method name="createVersion" type="void" line="521">
                <params>
                    <param name="file" type="File"/>
                </params>
                <scope line="523"/>
            </method>
        </class>
    </source>