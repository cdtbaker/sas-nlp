<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="java.io.ObjectOutputStream"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <import package="sun.security.krb5.Checksum"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.Realm"/>
        <import package="sun.security.krb5.RealmException"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="sun.security.krb5.internal.util.KerberosString"/>
        <class name="KRBError" line="48">
            <comment line="89">
                optional                
            </comment>
            <comment line="90">
                optional                
            </comment>
            <comment line="94">
                optional                
            </comment>
            <comment line="95">
                optional                
            </comment>
            <comment line="98">
                optional                
            </comment>
            <comment line="99">
                optional                
            </comment>
            <comment line="100">
                optional                
            </comment>
            <comment line="102">
                PA-DATA in eData                
            </comment>
            <comment line="103">
                The 1st etype appeared in salt-related PAData                
            </comment>
            <comment line="203">
                Attention:
                
                 According to RFC 4120, e-data field in a KRB-ERROR message is
                 a METHOD-DATA when errorCode is KDC_ERR_PREAUTH_REQUIRED,
                 and application-specific otherwise (The RFC suggests using
                 TYPED-DATA).
                
                 Hence, the ideal procedure to parse e-data should look like:
                
                 if (errorCode is KDC_ERR_PREAUTH_REQUIRED) {
                    parse as METHOD-DATA
                 } else {
                    try parsing as TYPED-DATA
                 }
                
                 Unfortunately, we know that some implementations also use the
                 METHOD-DATA format for errorcode KDC_ERR_PREAUTH_FAILED, and
                 do not use the TYPED-DATA for other errorcodes (say,
                 KDC_ERR_CLIENT_REVOKED).                
            </comment>
            <comment line="225">
                parse the edata field                
            </comment>
            <comment line="339">
                access pre-auth info                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="48">
                Implements the ASN.1 KRBError type.
                  &lt;xmp&gt;
                  KRB-ERROR       ::= [APPLICATION 30] SEQUENCE {
                  pvno            [0] INTEGER (5),
                  msg-type        [1] INTEGER (30),
                  ctime           [2] KerberosTime OPTIONAL,
                  cusec           [3] Microseconds OPTIONAL,
                  stime           [4] KerberosTime,
                  susec           [5] Microseconds,
                  error-code      [6] Int32,
                  crealm          [7] Realm OPTIONAL,
                  cname           [8] PrincipalName OPTIONAL,
                  realm           [9] Realm -- service realm --,
                  sname           [10] PrincipalName -- service name --,
                  e-text          [11] KerberosString OPTIONAL,
                  e-data          [12] OCTET STRING OPTIONAL
                  }
                  METHOD-DATA     ::= SEQUENCE OF PA-DATA
                  TYPED-DATA      ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {
                  data-type       [0] Int32,
                  data-value      [1] OCTET STRING OPTIONAL
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="84"/>
            <declaration name="pvno" type="int" line="86"/>
            <declaration name="msgType" type="int" line="87"/>
            <declaration name="cTime" type="KerberosTime" line="88"/>
            <declaration name="cuSec" type="Integer" line="89"/>
            <declaration name="sTime" type="KerberosTime" line="90"/>
            <declaration name="suSec" type="Integer" line="91"/>
            <declaration name="errorCode" type="int" line="92"/>
            <declaration name="crealm" type="Realm" line="93"/>
            <declaration name="cname" type="PrincipalName" line="94"/>
            <declaration name="realm" type="Realm" line="95"/>
            <declaration name="sname" type="PrincipalName" line="96"/>
            <declaration name="eText" type="String" line="97"/>
            <declaration name="eData" type="byte[]" line="98"/>
            <declaration name="eCksum" type="Checksum" line="99"/>
            <declaration name="pa" type="PAData[]" line="101"/>
            <declaration name="pa_eType" type="int" line="102"/>
            <declaration name="DEBUG" type="boolean" line="104"/>
            <method name="readObject" type="void" line="107">
                <params>
                    <param name="is" type="ObjectInputStream"/>
                </params>
                <scope line="108"/>
                <scope line="111"/>
            </method>
            <method name="writeObject" type="void" line="117">
                <params>
                    <param name="os" type="ObjectOutputStream"/>
                </params>
                <scope line="118"/>
                <scope line="120"/>
            </method>
            <method name="KRBError" type="constructor" line="138">
                <params>
                    <param name="new_apOptions" type="APOptions"/>
                    <param name="new_cTime" type="KerberosTime"/>
                    <param name="new_cuSec" type="Integer"/>
                    <param name="new_sTime" type="KerberosTime"/>
                    <param name="new_suSec" type="Integer"/>
                    <param name="new_errorCode" type="int"/>
                    <param name="new_crealm" type="Realm"/>
                    <param name="new_cname" type="PrincipalName"/>
                    <param name="new_realm" type="Realm"/>
                    <param name="new_sname" type="PrincipalName"/>
                    <param name="new_eText" type="String"/>
                    <param name="new_eData" type="byte[]"/>
                </params>
            </method>
            <method name="KRBError" type="constructor" line="170">
                <params>
                    <param name="new_apOptions" type="APOptions"/>
                    <param name="new_cTime" type="KerberosTime"/>
                    <param name="new_cuSec" type="Integer"/>
                    <param name="new_sTime" type="KerberosTime"/>
                    <param name="new_suSec" type="Integer"/>
                    <param name="new_errorCode" type="int"/>
                    <param name="new_crealm" type="Realm"/>
                    <param name="new_cname" type="PrincipalName"/>
                    <param name="new_realm" type="Realm"/>
                    <param name="new_sname" type="PrincipalName"/>
                    <param name="new_eText" type="String"/>
                    <param name="new_eData" type="byte[]"/>
                    <param name="new_eCksum" type="Checksum"/>
                </params>
            </method>
            <method name="KRBError" type="constructor" line="190">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="KRBError" type="constructor" line="196">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <method name="parseEData" type="void" line="225">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="231">
                    We need to parse eData as METHOD-DATA for both errorcodes.                    
                </comment>
                <comment line="235">
                    RFC 4120 does not guarantee that eData is METHOD-DATA when
                     errorCode is KDC_ERR_PREAUTH_FAILED. Therefore, the parse
                     may fail.                    
                </comment>
                <scope line="226"/>
                <scope line="232">
                    <scope line="233"/>
                    <scope line="238">
                        <scope line="239"/>
                        <declaration name="ioe" type="IOException" line="243"/>
                    </scope>
                </scope>
                <scope line="248">
                    <scope line="249"/>
                </scope>
            </method>
            <javadoc line="256">
                Try parsing the data as a sequence of PA-DATA.                
                <param>
                    data the data block                    
                </param>
            </javadoc>
            <method name="parsePAData" type="void" line="261">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="266">
                    read the PA-DATA                    
                </comment>
                <comment line="312">
                    Unknown Pre-auth type                    
                </comment>
                <declaration name="derPA" type="DerValue" line="262"/>
                <declaration name="paList" type="List&lt;PAData&gt;" line="263"/>
                <scope line="264">
                    <declaration name="tmp" type="DerValue" line="266"/>
                    <declaration name="pa_data" type="PAData" line="267"/>
                    <declaration name="pa_type" type="int" line="269"/>
                    <declaration name="pa_value" type="byte[]" line="270"/>
                    <scope line="271"/>
                    <scope line="278"/>
                    <scope line="283">
                        <declaration name="der" type="DerValue" line="284"/>
                        <scope line="285">
                            <declaration name="value" type="DerValue" line="286"/>
                            <declaration name="info" type="ETypeInfo" line="287"/>
                            <scope line="289"/>
                        </scope>
                    </scope>
                    <scope line="297">
                        <declaration name="der" type="DerValue" line="298"/>
                        <scope line="299">
                            <declaration name="value" type="DerValue" line="300"/>
                            <declaration name="info2" type="ETypeInfo2" line="301"/>
                            <scope line="303"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getServerTime" type="KerberosTime" line="318"/>
            <method name="getClientTime" type="KerberosTime" line="322"/>
            <method name="getServerMicroSeconds" type="Integer" line="326"/>
            <method name="getClientMicroSeconds" type="Integer" line="330"/>
            <method name="getErrorCode" type="int" line="334"/>
            <method name="getPA" type="PAData[]" line="339"/>
            <method name="getEType" type="int" line="343"/>
            <method name="getErrorString" type="String" line="347"/>
            <javadoc line="351">
                Initializes a KRBError object.                
                <param>
                    encoding a DER-encoded data.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <exception>
                    KrbApErrException if the value read from the DER-encoded data
                      stream does not match the pre-defined value.                    
                </exception>
                <exception>
                    RealmException if an error occurs while parsing a Realm object.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="361">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="362"/>
                <scope line="365"/>
                <scope line="369"/>
                <scope line="373"/>
                <scope line="378"/>
                <scope line="383">
                    <scope line="385"/>
                </scope>
                <scope line="388"/>
                <scope line="393"/>
                <scope line="400"/>
                <scope line="405"/>
                <scope line="416">
                    <scope line="417"/>
                </scope>
                <scope line="423">
                    <scope line="424"/>
                </scope>
                <scope line="429"/>
            </method>
            <javadoc line="436">
                For debug use only                
            </javadoc>
            <method name="showDebug" type="void" line="439">
                <scope line="440">
                    <scope line="444"/>
                    <scope line="453"/>
                    <scope line="456"/>
                    <scope line="459"/>
                    <scope line="462"/>
                    <scope line="465"/>
                    <scope line="468"/>
                </scope>
            </method>
            <javadoc line="475">
                Encodes an KRBError object.                
                <return>
                    the byte array of encoded KRBError object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="481">
                <declaration name="temp" type="DerOutputStream" line="482"/>
                <declaration name="bytes" type="DerOutputStream" line="483"/>
                <scope line="491"/>
                <scope line="494"/>
                <scope line="508"/>
                <scope line="511"/>
                <scope line="518"/>
                <scope line="523"/>
                <scope line="528"/>
            </method>
            <method name="equals" type="boolean" line="539">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="540"/>
                <scope line="544"/>
                <declaration name="other" type="KRBError" line="548"/>
            </method>
            <method name="isEqual" type="boolean" line="565">
                <params>
                    <param name="a" type="Object"/>
                    <param name="b" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="569">
                <declaration name="result" type="int" line="570"/>
            </method>
        </class>
    </source>