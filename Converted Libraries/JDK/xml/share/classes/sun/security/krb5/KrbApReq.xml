<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="sun.security.krb5.internal.rcache"/>
        <import package="java.net.InetAddress"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <class name="KrbApReq" line="9">
            <javadoc line="9">
                This class encapsulates a KRB-AP-REQ that a client sends to a
                  server for authentication.                
            </javadoc>
            <declaration name="obuf" type="byte[]" line="14"/>
            <declaration name="ctime" type="KerberosTime" line="15"/>
            <declaration name="cusec" type="int" line="16"/>
            <declaration name="authenticator" type="Authenticator" line="17"/>
            <declaration name="creds" type="Credentials" line="18"/>
            <declaration name="apReqMessg" type="APReq" line="19"/>
            <declaration name="table" type="CacheTable" line="20"/>
            <declaration name="DEBUG" type="boolean" line="21"/>
            <javadoc line="22">
                Contructs a AP-REQ message to send to the peer.                
                <param>
                    tgsCred the &lt;code&gt;Credentials&lt;/code&gt; to be used to construct the
                      AP Request  protocol message.                    
                </param>
                <param>
                    mutualRequired Whether mutual authentication is required                    
                </param>
                <param>
                    useSubkey Whether the subkey is to be used to protect this
                      specific application session. If this is not set then the
                      session key from the ticket will be used.                    
                </param>
                <param>
                    checksum checksum of the the application data that accompanies
                      the KRB_AP_REQ.                    
                </param>
                <throws>
                    KrbException for any Kerberos protocol specific error                    
                </throws>
                <throws>
                    IOException for any IO related errors
                      (e.g. socket operations)                    
                </throws>
            </javadoc>
            <method name="KrbApReq" type="constructor" line="36">
                <params>
                    <param name="tgsCred" type="Credentials"/>
                    <param name="mutualRequired" type="boolean"/>
                    <param name="useSubKey" type="boolean"/>
                    <param name="useSeqNumber" type="boolean"/>
                    <param name="cksum" type="Checksum"/>
                </params>
                <declaration name="apOptions" type="APOptions" line="37"/>
                <declaration name="subKey" type="EncryptionKey" line="39"/>
                <declaration name="seqNum" type="SeqNumber" line="40"/>
            </method>
            <javadoc line="43">
                Contructs a AP-REQ message from the bytes received from the
                  peer.                
                <param>
                    message The message received from the peer                    
                </param>
                <param>
                    keys &lt;code&gt;EncrtyptionKey&lt;/code&gt;s to decrypt the message;
                      key selected will depend on etype used to encrypte data                    
                </param>
                <throws>
                    KrbException for any Kerberos protocol specific error                    
                </throws>
                <throws>
                    IOException for any IO related errors
                      (e.g. socket operations)                    
                </throws>
            </javadoc>
            <method name="KrbApReq" type="constructor" line="53">
                <params>
                    <param name="message" type="byte[]"/>
                    <param name="keys" type="EncryptionKey[]"/>
                    <param name="initiator" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="58">
                used by KrbTgsReq                
            </javadoc>
            <method name="KrbApReq" type="constructor" line="61">
                <params>
                    <param name="apOptions" type="APOptions"/>
                    <param name="ticket" type="Ticket"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="crealm" type="Realm"/>
                    <param name="cname" type="PrincipalName"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="ctime" type="KerberosTime"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                </params>
            </method>
            <method name="init" type="void" line="64">
                <params>
                    <param name="options" type="APOptions"/>
                    <param name="tgs_creds" type="Credentials"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                    <param name="usage" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="68">
                <params>
                    <param name="apOptions" type="APOptions"/>
                    <param name="ticket" type="Ticket"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="crealm" type="Realm"/>
                    <param name="cname" type="PrincipalName"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="ctime" type="KerberosTime"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                    <param name="usage" type="int"/>
                </params>
            </method>
            <method name="decode" type="void" line="72">
                <declaration name="encoding" type="DerValue" line="73"/>
            </method>
            <method name="decode" type="void" line="76">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <scope line="78"/>
                <scope line="81">
                    <declaration name="err" type="KRBError" line="83"/>
                    <declaration name="errStr" type="String" line="84"/>
                    <declaration name="eText" type="String" line="85"/>
                    <declaration name="ke" type="KrbException" line="88"/>
                </scope>
            </method>
            <method name="authenticate" type="void" line="93">
                <params>
                    <param name="keys" type="EncryptionKey[]"/>
                    <param name="initiator" type="InetAddress"/>
                </params>
                <declaration name="encPartKeyType" type="int" line="94"/>
                <declaration name="kvno" type="Integer" line="95"/>
                <declaration name="dkey" type="EncryptionKey" line="96"/>
                <scope line="97"/>
                <declaration name="bytes" type="byte[]" line="100"/>
                <declaration name="temp" type="byte[]" line="101"/>
                <declaration name="enc_ticketPart" type="EncTicketPart" line="102"/>
                <declaration name="bytes2" type="byte[]" line="104"/>
                <declaration name="temp2" type="byte[]" line="105"/>
                <declaration name="currTime" type="KerberosTime" line="114"/>
                <declaration name="time" type="AuthTime" line="116"/>
                <declaration name="client" type="String" line="117"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124">
                    <declaration name="sender" type="HostAddress" line="125"/>
                    <scope line="126">
                        <scope line="127"/>
                    </scope>
                </scope>
                <declaration name="now" type="KerberosTime" line="133"/>
                <scope line="135"/>
                <scope line="139"/>
            </method>
            <javadoc line="143">
                Returns the credentials that are contained in the ticket that
                  is part of this this AP-REP.                
            </javadoc>
            <method name="getCreds" type="Credentials" line="147"/>
            <method name="getCtime" type="KerberosTime" line="150"/>
            <method name="cusec" type="int" line="154"/>
            <method name="getAPOptions" type="APOptions" line="157"/>
            <javadoc line="162">
                Returns true if mutual authentication is required and hence an
                  AP-REP will need to be generated.                
                <throws>
                    KrbException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="getMutualAuthRequired" type="boolean" line="168"/>
            <method name="useSessionKey" type="boolean" line="173"/>
            <javadoc line="178">
                Returns the optional subkey stored in the Authenticator for
                  this message. Returns null if none is stored.                
            </javadoc>
            <method name="getSubKey" type="EncryptionKey" line="182"/>
            <javadoc line="185">
                Returns the optional sequence number stored in the
                  Authenticator for this message. Returns null if none is
                  stored.                
            </javadoc>
            <method name="getSeqNumber" type="Integer" line="190"/>
            <javadoc line="193">
                Returns the optional Checksum stored in the
                  Authenticator for this message. Returns null if none is
                  stored.                
            </javadoc>
            <method name="getChecksum" type="Checksum" line="198"/>
            <javadoc line="201">
                Returns the ASN.1 encoding that should be sent to the peer.                
            </javadoc>
            <method name="getMessage" type="byte[]" line="204"/>
            <javadoc line="207">
                Returns the principal name of the client that generated this
                  message.                
            </javadoc>
            <method name="getClient" type="PrincipalName" line="211"/>
            <method name="createMessage" type="void" line="214">
                <params>
                    <param name="apOptions" type="APOptions"/>
                    <param name="ticket" type="Ticket"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="crealm" type="Realm"/>
                    <param name="cname" type="PrincipalName"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="ctime" type="KerberosTime"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                    <param name="usage" type="int"/>
                </params>
                <declaration name="seqno" type="Integer" line="215"/>
                <declaration name="temp" type="byte[]" line="218"/>
                <declaration name="encAuthenticator" type="EncryptedData" line="219"/>
            </method>
            <method name="checkPermittedEType" type="void" line="222">
                <params>
                    <param name="target" type="int"/>
                </params>
                <declaration name="etypes" type="int[]" line="223"/>
                <scope line="224"/>
                <scope line="227"/>
            </method>
        </class>
    </source>