<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="sun.security.krb5.internal.rcache"/>
        <import package="java.net.InetAddress"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <class name="KrbApReq" line="42">
            <comment line="59">
                Contructs a AP-REQ message to send to the peer.
                 @param tgsCred the &lt;code&gt;Credentials&lt;code&gt; to be used to construct the
                          AP Request  protocol message.
                 @param mutualRequired Whether mutual authentication is required
                 @param useSubkey Whether the subkey is to be used to protect this
                        specific application session. If this is not set then the
                        session key from the ticket will be used.
                 @throws KrbException for any Kerberos protocol specific error
                 @throws IOException for any IO related errors
                          (e.g. socket operations)                
            </comment>
            <comment line="71">
                Not Used
                public KrbApReq(Credentials tgsCred,
                boolean mutualRequired,
                boolean useSubKey,
                boolean useSeqNumber) throws Asn1Exception,
                KrbCryptoException, KrbException, IOException {
                
                this(tgsCred, mutualRequired, useSubKey, useSeqNumber, null);
                }                
            </comment>
            <comment line="148">
                Contructs a AP-REQ message from the bytes received from the
                 peer.
                 @param value The &lt;code&gt;DerValue&lt;code&gt; that contains the
                              DER enoded AP-REQ protocol message
                 @param keys &lt;code&gt;EncrtyptionKey&lt;code&gt;s to decrypt the message;
                
                 @throws KrbException for any Kerberos protocol specific error
                 @throws IOException for any IO related errors
                          (e.g. socket operations)                
            </comment>
            <comment line="159">
                public KrbApReq(DerValue value, EncryptionKey[] key, InetAddress initiator)
                throws KrbException, IOException {
                obuf = value.toByteArray();
                if (apReqMessg == null)
                decode(value);
                authenticate(keys, initiator);
                }
                
                KrbApReq(APOptions options,
                Credentials tgs_creds,
                Checksum cksum,
                EncryptionKey subKey,
                SeqNumber seqNumber,
                AuthorizationData authorizationData)
                throws KrbException, IOException {
                init(options, tgs_creds, cksum, subKey, seqNumber, authorizationData);
                }                
            </comment>
            <comment line="496">
                Check that key is one of the permitted types                
            </comment>
            <javadoc line="42">
                This class encapsulates a KRB-AP-REQ that a client sends to a
                  server for authentication.                
            </javadoc>
            <declaration name="obuf" type="byte[]" line="48"/>
            <declaration name="ctime" type="KerberosTime" line="49"/>
            <declaration name="cusec" type="int" line="50"/>
            <declaration name="authenticator" type="Authenticator" line="51"/>
            <declaration name="creds" type="Credentials" line="52"/>
            <declaration name="apReqMessg" type="APReq" line="53"/>
            <declaration name="table" type="CacheTable" line="55"/>
            <declaration name="DEBUG" type="boolean" line="56"/>
            <javadoc line="82">
                Contructs a AP-REQ message to send to the peer.                
                <param>
                    tgsCred the <code>Credentials</code> to be used to construct the
                      AP Request  protocol message.                    
                </param>
                <param>
                    mutualRequired Whether mutual authentication is required                    
                </param>
                <param>
                    useSubkey Whether the subkey is to be used to protect this
                      specific application session. If this is not set then the
                      session key from the ticket will be used.                    
                </param>
                <param>
                    checksum checksum of the the application data that accompanies
                      the KRB_AP_REQ.                    
                </param>
                <throws>
                    KrbException for any Kerberos protocol specific error                    
                </throws>
                <throws>
                    IOException for any IO related errors
                      (e.g. socket operations)                    
                </throws>
            </javadoc>
            <method name="KrbApReq" type="constructor" line="102">
                <params>
                    <param name="tgsCred" type="Credentials"/>
                    <param name="mutualRequired" type="boolean"/>
                    <param name="useSubKey" type="boolean"/>
                    <param name="useSeqNumber" type="boolean"/>
                    <param name="cksum" type="Checksum"/>
                </params>
                <comment line="97">
                    Used in InitSecContextToken                    
                </comment>
                <comment line="122">
                    AuthorizationData authzData                    
                </comment>
                <declaration name="apOptions" type="APOptions" line="104"/>
                <declaration name="subKey" type="EncryptionKey" line="110"/>
                <declaration name="seqNum" type="SeqNumber" line="114"/>
            </method>
            <javadoc line="126">
                Contructs a AP-REQ message from the bytes received from the
                  peer.                
                <param>
                    message The message received from the peer                    
                </param>
                <param>
                    keys <code>EncrtyptionKey</code>s to decrypt the message;
                      key selected will depend on etype used to encrypte data                    
                </param>
                <throws>
                    KrbException for any Kerberos protocol specific error                    
                </throws>
                <throws>
                    IOException for any IO related errors
                      (e.g. socket operations)                    
                </throws>
            </javadoc>
            <method name="KrbApReq" type="constructor" line="140">
                <params>
                    <param name="message" type="byte[]"/>
                    <param name="keys" type="EncryptionKey[]"/>
                    <param name="initiator" type="InetAddress"/>
                </params>
                <comment line="137">
                    Used in InitSecContextToken (for AP_REQ and not TGS REQ)                    
                </comment>
            </method>
            <javadoc line="178">
                used by KrbTgsReq                
            </javadoc>
            <method name="KrbApReq" type="constructor" line="190">
                <params>
                    <param name="apOptions" type="APOptions"/>
                    <param name="ticket" type="Ticket"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="crealm" type="Realm"/>
                    <param name="cname" type="PrincipalName"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="ctime" type="KerberosTime"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                </params>
            </method>
            <method name="init" type="void" line="205">
                <params>
                    <param name="options" type="APOptions"/>
                    <param name="tgs_creds" type="Credentials"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                    <param name="usage" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="233">
                <params>
                    <param name="apOptions" type="APOptions"/>
                    <param name="ticket" type="Ticket"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="crealm" type="Realm"/>
                    <param name="cname" type="PrincipalName"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="ctime" type="KerberosTime"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                    <param name="usage" type="int"/>
                </params>
            </method>
            <method name="decode" type="void" line="242">
                <declaration name="encoding" type="DerValue" line="243"/>
            </method>
            <method name="decode" type="void" line="247">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <scope line="249"/>
                <scope line="251">
                    <declaration name="err" type="KRBError" line="253"/>
                    <declaration name="errStr" type="String" line="254"/>
                    <declaration name="eText" type="String" line="255"/>
                    <declaration name="ke" type="KrbException" line="260"/>
                </scope>
            </method>
            <method name="authenticate" type="void" line="267">
                <params>
                    <param name="keys" type="EncryptionKey[]"/>
                    <param name="initiator" type="InetAddress"/>
                </params>
                <comment line="304">
                    start to check if it is a replay attack.                    
                </comment>
                <comment line="315">
                    sender host address                    
                </comment>
                <comment line="330">
                    XXX check for repeated authenticator
                     if found
                        throw new KrbApErrException(Krb5.KRB_AP_ERR_REPEAT);
                     else
                        save authenticator to check for later                    
                </comment>
                <comment line="343">
                    if the current time is later than end time by more
                     than the allowable clock skew, throws ticket expired exception.                    
                </comment>
                <declaration name="encPartKeyType" type="int" line="268"/>
                <declaration name="kvno" type="Integer" line="269"/>
                <declaration name="dkey" type="EncryptionKey" line="270"/>
                <scope line="272"/>
                <declaration name="bytes" type="byte[]" line="278"/>
                <declaration name="temp" type="byte[]" line="280"/>
                <declaration name="enc_ticketPart" type="EncTicketPart" line="281"/>
                <declaration name="bytes2" type="byte[]" line="285"/>
                <declaration name="temp2" type="byte[]" line="287"/>
                <declaration name="currTime" type="KerberosTime" line="299"/>
                <declaration name="time" type="AuthTime" line="304"/>
                <declaration name="client" type="String" line="306"/>
                <scope line="307"/>
                <scope line="309"/>
                <scope line="313">
                    <declaration name="sender" type="HostAddress" line="315"/>
                    <scope line="317">
                        <scope line="318"/>
                    </scope>
                </scope>
                <declaration name="now" type="KerberosTime" line="335"/>
                <scope line="345"/>
                <scope line="361"/>
            </method>
            <javadoc line="366">
                Returns the credentials that are contained in the ticket that
                  is part of this this AP-REP.                
            </javadoc>
            <method name="getCreds" type="Credentials" line="370"/>
            <method name="getCtime" type="KerberosTime" line="374"/>
            <method name="cusec" type="int" line="380"/>
            <method name="getAPOptions" type="APOptions" line="384"/>
            <javadoc line="392">
                Returns true if mutual authentication is required and hence an
                  AP-REP will need to be generated.                
                <throws>
                    KrbException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="getMutualAuthRequired" type="boolean" line="398"/>
            <method name="useSessionKey" type="boolean" line="406"/>
            <javadoc line="414">
                Returns the optional subkey stored in the Authenticator for
                  this message. Returns null if none is stored.                
            </javadoc>
            <method name="getSubKey" type="EncryptionKey" line="418">
                <comment line="420">
                    XXX Can authenticator be null                    
                </comment>
            </method>
            <javadoc line="423">
                Returns the optional sequence number stored in the
                  Authenticator for this message. Returns null if none is
                  stored.                
            </javadoc>
            <method name="getSeqNumber" type="Integer" line="428">
                <comment line="430">
                    XXX Can authenticator be null                    
                </comment>
            </method>
            <javadoc line="433">
                Returns the optional Checksum stored in the
                  Authenticator for this message. Returns null if none is
                  stored.                
            </javadoc>
            <method name="getChecksum" type="Checksum" line="438"/>
            <javadoc line="442">
                Returns the ASN.1 encoding that should be sent to the peer.                
            </javadoc>
            <method name="getMessage" type="byte[]" line="445"/>
            <javadoc line="449">
                Returns the principal name of the client that generated this
                  message.                
            </javadoc>
            <method name="getClient" type="PrincipalName" line="453"/>
            <method name="createMessage" type="void" line="469">
                <params>
                    <param name="apOptions" type="APOptions"/>
                    <param name="ticket" type="Ticket"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="crealm" type="Realm"/>
                    <param name="cname" type="PrincipalName"/>
                    <param name="cksum" type="Checksum"/>
                    <param name="ctime" type="KerberosTime"/>
                    <param name="subKey" type="EncryptionKey"/>
                    <param name="seqNumber" type="SeqNumber"/>
                    <param name="authorizationData" type="AuthorizationData"/>
                    <param name="usage" type="int"/>
                </params>
                <declaration name="seqno" type="Integer" line="471"/>
                <declaration name="temp" type="byte[]" line="486"/>
                <declaration name="encAuthenticator" type="EncryptedData" line="488"/>
            </method>
            <method name="checkPermittedEType" type="void" line="496">
                <params>
                    <param name="target" type="int"/>
                </params>
                <declaration name="etypes" type="int[]" line="497"/>
                <scope line="498"/>
                <scope line="502"/>
            </method>
        </class>
    </source>