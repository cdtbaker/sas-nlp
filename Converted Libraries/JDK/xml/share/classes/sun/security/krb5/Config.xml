<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.ArrayList"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.List"/>
        <import package="sun.net.dns.ResolverConfiguration"/>
        <import package="sun.security.krb5.internal.crypto.EType"/>
        <import package="sun.security.krb5.internal.ktab"/>
        <import package="sun.security.krb5.internal.Krb5"/>
        <class name="Config" line="19">
            <javadoc line="19">
                This class maintains key-value pairs of Kerberos configurable constants
                  from configuration file or from user specified system properties.                
            </javadoc>
            <declaration name="singleton" type="Config" line="24"/>
            <declaration name="stanzaTable" type="Hashtable&lt;String,Object&gt;" line="25"/>
            <declaration name="DEBUG" type="boolean" line="26"/>
            <declaration name="BASE16_0" type="int" line="27"/>
            <declaration name="BASE16_1" type="int" line="28"/>
            <declaration name="BASE16_2" type="int" line="29"/>
            <declaration name="BASE16_3" type="int" line="30"/>
            <declaration name="defaultRealm" type="String" line="31"/>
            <javadoc line="31">
                Specified by system properties. Must be both null or non-null.                
            </javadoc>
            <declaration name="defaultKDC" type="String" line="35"/>
            <method name="getWindowsDirectory" type="String" line="36"/>
            <javadoc line="37">
                Gets an instance of Config class. One and only one instance (the
                  singleton) is returned.                
                <exception>
                    KrbException if error occurs when constructing a Config
                      instance. Possible causes would be either of java.security.krb5.realm or
                      java.security.krb5.kdc not specified, error reading configuration file.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="Config" line="44">
                <scope line="45"/>
            </method>
            <javadoc line="50">
                Refresh and reload the Configuration. This could involve,
                  for example reading the Configuration file again or getting
                  the java.security.krb5. system properties again.                
                <exception>
                    KrbException if error occurs when constructing a Config
                      instance. Possible causes would be either of java.security.krb5.realm or
                      java.security.krb5.kdc not specified, error reading configuration file.                    
                </exception>
            </javadoc>
            <method name="refresh" type="void" line="58"/>
            <javadoc line="62">
                Private constructor - can not be instantiated externally.                
            </javadoc>
            <method name="Config" type="constructor" line="65">
                <declaration name="tmp" type="String" line="66"/>
                <scope line="67"/>
                <scope line="70"/>
                <scope line="74"/>
                <scope line="77">
                    <declaration name="configFile" type="Vector&lt;String&gt;" line="78"/>
                </scope>
                <scope line="82"/>
            </method>
            <javadoc line="85">
                Gets the default int value for the specified name.                
                <param>
                    name the name.                    
                </param>
                <return>
                    the default Integer, null is returned if no such name and
                      value are found in configuration file, or error occurs when parsing
                      string to integer.                    
                </return>
            </javadoc>
            <method name="getDefaultIntValue" type="int" line="92">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="result" type="String" line="93"/>
                <declaration name="value" type="int" line="94"/>
                <scope line="96">
                    <scope line="97"/>
                    <scope line="100">
                        <scope line="101"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="110">
                Gets the default int value for the specified name in the specified
                  section. &lt;br&gt;This method is quicker by using section name as the
                  search key.                
                <param>
                    name the name.                    
                </param>
                <param>
                    sectio the name string of the section.                    
                </param>
                <return>
                    the default Integer, null is returned if no such name and
                      value are found in configuration file, or error occurs when parsing
                      string to integer.                    
                </return>
            </javadoc>
            <method name="getDefaultIntValue" type="int" line="120">
                <params>
                    <param name="name" type="String"/>
                    <param name="section" type="String"/>
                </params>
                <declaration name="result" type="String" line="121"/>
                <declaration name="value" type="int" line="122"/>
                <scope line="124">
                    <scope line="125"/>
                    <scope line="128">
                        <scope line="129"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="138">
                Gets the default string value for the specified name.                
                <param>
                    name the name.                    
                </param>
                <return>
                    the default value, null is returned if it cannot be found.                    
                </return>
            </javadoc>
            <method name="getDefault" type="String" line="143">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="144"/>
                <scope line="147"/>
            </method>
            <javadoc line="151">
                This method does the real job to recursively search through the
                  stanzaTable.                
                <param>
                    k the key string.                    
                </param>
                <param>
                    t stanzaTable or sub hashtable within it.                    
                </param>
                <return>
                    the value found in config file, returns null if no value
                      matched with the key is found.                    
                </return>
            </javadoc>
            <method name="getDefault" type="String" line="159">
                <params>
                    <param name="k" type="String"/>
                    <param name="t" type="Hashtable"/>
                </params>
                <declaration name="result" type="String" line="160"/>
                <declaration name="key" type="String" line="161"/>
                <scope line="162">
                    <scope line="163">
                        <declaration name="ob" type="Object" line="165"/>
                        <scope line="166">
                            <scope line="168"/>
                        </scope>
                        <scope line="172">
                            <scope line="173"/>
                            <scope line="176">
                                <declaration name="length" type="int" line="178"/>
                                <scope line="179">
                                    <scope line="180"/>
                                    <scope line="183"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="194">
                Gets the default string value for the specified name in the
                  specified section.
                  &lt;br&gt;This method is quicker by using the section name as the search key.                
                <param>
                    name the name.                    
                </param>
                <param>
                    section the name of the section.                    
                </param>
                <return>
                    the default value, null is returned if it cannot be found.                    
                </return>
            </javadoc>
            <method name="getDefault" type="String" line="202">
                <params>
                    <param name="name" type="String"/>
                    <param name="section" type="String"/>
                </params>
                <declaration name="stanzaName" type="String" line="203"/>
                <declaration name="result" type="String" line="204"/>
                <declaration name="subTable" type="Hashtable" line="205"/>
                <scope line="206">
                    <scope line="207">
                        <scope line="210">
                            <scope line="211"/>
                        </scope>
                        <scope line="215">
                            <declaration name="ob" type="Object" line="216"/>
                            <scope line="217">
                                <declaration name="temp" type="Hashtable" line="218"/>
                                <scope line="219">
                                    <declaration name="object" type="Object" line="220"/>
                                    <scope line="221">
                                        <declaration name="length" type="int" line="223"/>
                                        <scope line="224">
                                            <scope line="225"/>
                                            <scope line="228"/>
                                        </scope>
                                    </scope>
                                    <scope line="233"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="243">
                Gets the default boolean value for the specified name.                
                <param>
                    name the name.                    
                </param>
                <return>
                    the default boolean value, false is returned if it cannot be
                      found.                    
                </return>
            </javadoc>
            <method name="getDefaultBooleanValue" type="boolean" line="249">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="val" type="String" line="250"/>
                <scope line="251"/>
                <scope line="254"/>
                <scope line="257"/>
                <scope line="260"/>
            </method>
            <javadoc line="264">
                Gets the default boolean value for the specified name in the
                  specified section.
                  &lt;br&gt;This method is quicker by using the section name as the search key.                
                <param>
                    name the name.                    
                </param>
                <param>
                    section the name of the section.                    
                </param>
                <return>
                    the default boolean value, false is returned if it cannot be
                      found.                    
                </return>
            </javadoc>
            <method name="getDefaultBooleanValue" type="boolean" line="273">
                <params>
                    <param name="name" type="String"/>
                    <param name="section" type="String"/>
                </params>
                <declaration name="val" type="String" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <javadoc line="282">
                Parses a string to an integer. The convertible strings include the
                  string representations of positive integers, negative integers, and
                  hex decimal integers.  Valid inputs are, e.g., -1234, +1234,
                  0x40000.                
                <param>
                    input the String to be converted to an Integer.                    
                </param>
                <return>
                    an numeric value represented by the string                    
                </return>
                <exception>
                    NumberFormationException if the String does not contain a
                      parsable integer.                    
                </exception>
            </javadoc>
            <method name="parseIntValue" type="int" line="292">
                <params>
                    <param name="input" type="String"/>
                </params>
                <declaration name="value" type="int" line="293"/>
                <scope line="294">
                    <declaration name="temp" type="String" line="295"/>
                </scope>
                <scope line="298">
                    <declaration name="temp" type="String" line="299"/>
                    <declaration name="chars" type="char[]" line="300"/>
                    <scope line="301"/>
                    <scope line="304">
                        <scope line="305">
                            <declaration name="index" type="int" line="306"/>
                        </scope>
                    </scope>
                    <scope line="367"/>
                </scope>
                <scope line="371"/>
            </method>
            <method name="getBase" type="int" line="376">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="result" type="int" line="377"/>
                <scope line="392"/>
            </method>
            <javadoc line="398">
                Finds the matching value in the hashtable.                
            </javadoc>
            <method name="find" type="String" line="401">
                <params>
                    <param name="key1" type="String"/>
                    <param name="key2" type="String"/>
                </params>
                <declaration name="result" type="String" line="402"/>
                <scope line="403"/>
                <scope line="406"/>
            </method>
            <javadoc line="410">
                Reads name/value pairs to the memory from the configuration
                  file. The default location of the configuration file is in java home
                  directory.
                  Configuration file contains information about the default realm,
                  ticket parameters, location of the KDC and the admin server for
                  known realms, etc. The file is divided into sections. Each section
                  contains one or more name/value pairs with one pair per line. A
                  typical file would be:
                  [libdefaults]
                  default_realm = EXAMPLE.COM
                  default_tgs_enctypes = des-cbc-md5
                  default_tkt_enctypes = des-cbc-md5
                  [realms]
                  EXAMPLE.COM = {
                  kdc = kerberos.example.com
                  kdc = kerberos-1.example.com
                  admin_server = kerberos.example.com
                  }
                  SAMPLE_COM = {
                  kdc = orange.sample.com
                  admin_server = orange.sample.com
                  }
                  [domain_realm]
                  blue.sample.com = TEST.SAMPLE.COM
                  .backup.com     = EXAMPLE.COM                
            </javadoc>
            <method name="loadConfigFile" type="Vector<String>" line="437">
                <scope line="438">
                    <declaration name="fileName" type="String" line="439"/>
                    <scope line="440">
                        <anonymous_class line="441">
                            <method name="run" type="FileInputStream" line="442"/>
                        </anonymous_class>
                        <declaration name="br" type="BufferedReader" line="441"/>
                        <declaration name="Line" type="String" line="447"/>
                        <declaration name="v" type="Vector&lt;String&gt;" line="448"/>
                        <declaration name="previous" type="String" line="449"/>
                        <scope line="450">
                            <scope line="451">
                                <declaration name="current" type="String" line="452"/>
                                <scope line="453">
                                    <scope line="454"/>
                                </scope>
                                <scope line="459">
                                    <scope line="460"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="467"/>
                    </scope>
                </scope>
                <scope line="475"/>
            </method>
            <javadoc line="479">
                Parses stanza names and values from configuration file to
                  stanzaTable (Hashtable). Hashtable key would be stanza names,
                  (libdefaults, realms, domain_realms, etc), and the hashtable value
                  would be another hashtable which contains the key-value pairs under
                  a stanza name.                
            </javadoc>
            <method name="parseStanzaTable" type="Hashtable<String,Object>" line="486">
                <params>
                    <param name="v" type="Vector<String>"/>
                </params>
                <scope line="487"/>
                <declaration name="table" type="Hashtable&lt;String,Object&gt;" line="490"/>
                <scope line="491">
                    <declaration name="line" type="String" line="492"/>
                    <scope line="493">
                        <scope line="494">
                            <scope line="495">
                                <declaration name="temp" type="Hashtable&lt;String,Hashtable&lt;String,Vector&lt;String&gt;&gt;&gt;" line="496"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="504">
                        <scope line="505">
                            <scope line="506">
                                <declaration name="temp" type="Hashtable&lt;String,Hashtable&lt;String,Vector&lt;String&gt;&gt;&gt;" line="507"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="515">
                        <declaration name="key" type="String" line="516"/>
                        <scope line="517">
                            <scope line="518">
                                <declaration name="temp" type="Hashtable&lt;String,String&gt;" line="519"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="529">
                Gets the default configuration file name. This method will never
                  return null.
                  If the system property &quot;java.security.krb5.conf&quot; is defined, we&apos;ll
                  use its value, no matter if the file exists or not. Otherwise,
                  the file will be searched in a list of possible loations in the
                  following order:
                  1. at Java home lib\security directory with &quot;krb5.conf&quot; name,
                  2. at windows directory with the name of &quot;krb5.ini&quot; for Windows,
                  /etc/krb5/krb5.conf for Solaris, /etc/krb5.conf otherwise.
                  Note: When the Terminal Service is started in Windows (from 2003),
                  there are two kinds of Windows directories: A system one (say,
                  C:\Windows), and a user-private one (say, C:\Users\Me\Windows).
                  We will first look for krb5.ini in the user-private one. If not
                  found, try the system one instead.                
            </javadoc>
            <method name="getFileName" type="String" line="545">
                <declaration name="name" type="String" line="546"/>
                <scope line="547">
                    <scope line="549">
                        <declaration name="osname" type="String" line="551"/>
                        <scope line="552">
                            <scope line="553"/>
                            <scope line="556"/>
                            <scope line="558">
                                <declaration name="path" type="String" line="559"/>
                                <scope line="560">
                                    <scope line="561"/>
                                    <scope line="564"/>
                                    <scope line="567"/>
                                </scope>
                                <scope line="571">
                                    <scope line="573">
                                        <scope line="574"/>
                                        <scope line="577"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="584"/>
                        </scope>
                        <scope line="588"/>
                        <scope line="591"/>
                    </scope>
                </scope>
                <scope line="596"/>
            </method>
            <method name="trimmed" type="String" line="601">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="603"/>
            </method>
            <javadoc line="608">
                Parses key-value pairs under a stanza name.                
            </javadoc>
            <method name="parseField" type="Hashtable<String,String>" line="611">
                <params>
                    <param name="v" type="Vector<String>"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="table" type="Hashtable&lt;String,String&gt;" line="612"/>
                <declaration name="line" type="String" line="613"/>
                <scope line="614">
                    <scope line="616">
                        <scope line="617">
                            <declaration name="key" type="String" line="618"/>
                            <declaration name="value" type="String" line="619"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="627">
                Parses key-value pairs under [realms].  The key would be the realm
                  name, the value would be another hashtable which contains
                  information for the realm given within a pair of braces.                
            </javadoc>
            <method name="parseRealmField" type="Hashtable<String,Hashtable<String,Vector<String>>>" line="632">
                <params>
                    <param name="v" type="Vector<String>"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="table" type="Hashtable&lt;String,Hashtable&lt;String,Vector&lt;String&gt;&gt;&gt;" line="633"/>
                <declaration name="line" type="String" line="634"/>
                <scope line="635">
                    <scope line="637">
                        <declaration name="key" type="String" line="638"/>
                        <scope line="639">
                            <scope line="640"/>
                        </scope>
                        <scope line="645">
                            <declaration name="found" type="boolean" line="646"/>
                            <scope line="648">
                                <scope line="649"/>
                            </scope>
                            <scope line="654">
                                <declaration name="temp" type="Hashtable&lt;String,Vector&lt;String&gt;&gt;" line="655"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="666">
                Parses key-value pairs within each braces under [realms].                
            </javadoc>
            <method name="parseRealmFieldEx" type="Hashtable<String,Vector<String>>" line="669">
                <params>
                    <param name="v" type="Vector<String>"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="table" type="Hashtable&lt;String,Vector&lt;String&gt;&gt;" line="670"/>
                <declaration name="keyVector" type="Vector&lt;String&gt;" line="671"/>
                <declaration name="nameVector" type="Vector&lt;String&gt;" line="672"/>
                <declaration name="line" type="String" line="673"/>
                <declaration name="key" type="String" line="674"/>
                <scope line="675">
                    <scope line="677">
                        <scope line="678">
                            <declaration name="index" type="int" line="679"/>
                            <scope line="681"/>
                            <scope line="685"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="696">
                Compares the key with the known keys to see if it exists.                
            </javadoc>
            <method name="exists" type="boolean" line="699">
                <params>
                    <param name="key" type="String"/>
                    <param name="v" type="Vector"/>
                </params>
                <declaration name="exists" type="boolean" line="700"/>
                <scope line="701">
                    <scope line="702"/>
                </scope>
            </method>
            <javadoc line="708">
                For testing purpose. This method lists all information being parsed from
                  the configuration file to the hashtable.                
            </javadoc>
            <method name="listTable" type="void" line="712"/>
            <method name="listTable" type="void" line="715">
                <params>
                    <param name="table" type="Hashtable"/>
                </params>
                <declaration name="v" type="Vector" line="716"/>
                <declaration name="key" type="String" line="717"/>
                <scope line="718">
                    <scope line="719">
                        <declaration name="object" type="Object" line="721"/>
                        <scope line="722"/>
                        <scope line="725"/>
                        <scope line="730"/>
                        <scope line="733">
                            <scope line="735"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="741"/>
            </method>
            <javadoc line="745">
                Returns the default encryption types.                
            </javadoc>
            <method name="defaultEtype" type="int[]" line="748">
                <params>
                    <param name="enctypes" type="String"/>
                </params>
                <declaration name="default_enctypes" type="String" line="749"/>
                <declaration name="delim" type="String" line="751"/>
                <declaration name="st" type="StringTokenizer" line="752"/>
                <declaration name="etype" type="int[]" line="753"/>
                <scope line="754">
                    <scope line="755"/>
                </scope>
                <scope line="760">
                    <scope line="761">
                        <scope line="762"/>
                    </scope>
                    <declaration name="len" type="int" line="768"/>
                    <declaration name="ls" type="ArrayList&lt;Integer&gt;" line="769"/>
                    <declaration name="type" type="int" line="770"/>
                    <scope line="771">
                        <scope line="773"/>
                    </scope>
                    <scope line="777">
                        <scope line="778"/>
                    </scope>
                    <scope line="783">
                        <scope line="785"/>
                    </scope>
                </scope>
                <scope line="790">
                    <scope line="792"/>
                </scope>
            </method>
            <javadoc line="799">
                Get the etype and checksum value for the specified encryption and
                  checksum type.                
            </javadoc>
            <method name="getType" type="int" line="803">
                <params>
                    <param name="input" type="String"/>
                </params>
                <declaration name="result" type="int" line="804"/>
                <scope line="805"/>
                <scope line="808">
                    <scope line="809"/>
                    <scope line="812"/>
                    <scope line="815"/>
                    <scope line="818"/>
                    <scope line="821"/>
                    <scope line="824"/>
                </scope>
                <scope line="828">
                    <scope line="829"/>
                    <scope line="832"/>
                    <scope line="835"/>
                </scope>
                <scope line="839"/>
                <scope line="842"/>
                <scope line="845">
                    <scope line="846"/>
                    <scope line="849"/>
                </scope>
                <scope line="853"/>
                <scope line="856"/>
                <scope line="859"/>
                <scope line="862"/>
                <scope line="865"/>
            </method>
            <javadoc line="870">
                Resets the default kdc realm.
                  We do not need to synchronize these methods since assignments are atomic
                  This method was useless. Kept here in case some class still calls it.                
            </javadoc>
            <method name="resetDefaultRealm" type="void" line="875">
                <params>
                    <param name="realm" type="String"/>
                </params>
                <scope line="876"/>
            </method>
            <javadoc line="880">
                Check to use addresses in tickets
                  use addresses if &quot;no_addresses&quot; or &quot;noaddresses&quot; is set to false                
            </javadoc>
            <method name="useAddresses" type="boolean" line="884">
                <declaration name="useAddr" type="boolean" line="885"/>
                <declaration name="value" type="String" line="886"/>
                <scope line="888"/>
            </method>
            <javadoc line="894">
                Check if need to use DNS to locate Kerberos services                
            </javadoc>
            <method name="useDNS" type="boolean" line="897">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="value" type="String" line="898"/>
                <scope line="899">
                    <scope line="901"/>
                    <scope line="904"/>
                </scope>
                <scope line="908"/>
            </method>
            <javadoc line="912">
                Check if need to use DNS to locate the KDC                
            </javadoc>
            <method name="useDNS_KDC" type="boolean" line="915"/>
            <method name="useDNS_Realm" type="boolean" line="918"/>
            <javadoc line="921">
                Gets default realm.                
                <throws>
                    KrbException where no realm can be located                    
                </throws>
                <return>
                    the default realm, always non null                    
                </return>
            </javadoc>
            <method name="getDefaultRealm" type="String" line="926">
                <scope line="927"/>
                <declaration name="cause" type="Exception" line="930"/>
                <declaration name="realm" type="String" line="931"/>
                <scope line="932">
                    <scope line="933"/>
                    <scope line="936"/>
                </scope>
                <scope line="940">
                    <anonymous_class line="941">
                        <method name="run" type="String" line="942">
                            <declaration name="osname" type="String" line="943"/>
                            <scope line="944"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="952">
                    <declaration name="ke" type="KrbException" line="953"/>
                    <scope line="954"/>
                </scope>
            </method>
            <javadoc line="961">
                Returns a list of KDC&apos;s with each KDC separated by a space                
                <param>
                    realm the realm for which the KDC list is desired                    
                </param>
                <throws>
                    KrbException if there's no way to find KDC for the realm                    
                </throws>
                <return>
                    the list of KDCs separated by a space, always non null                    
                </return>
            </javadoc>
            <method name="getKDCList" type="String" line="967">
                <params>
                    <param name="realm" type="String"/>
                </params>
                <scope line="968"/>
                <scope line="971"/>
                <declaration name="cause" type="Exception" line="974"/>
                <declaration name="kdcs" type="String" line="975"/>
                <scope line="976">
                    <scope line="977"/>
                    <scope line="980"/>
                </scope>
                <scope line="984">
                    <anonymous_class line="985">
                        <method name="run" type="String" line="986">
                            <declaration name="osname" type="String" line="987"/>
                            <scope line="988">
                                <declaration name="logonServer" type="String" line="989"/>
                                <scope line="990"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="1000">
                    <scope line="1001"/>
                    <declaration name="ke" type="KrbException" line="1004"/>
                    <scope line="1005"/>
                </scope>
            </method>
            <javadoc line="1012">
                Locate Kerberos realm using DNS                
                <return>
                    the Kerberos realm                    
                </return>
            </javadoc>
            <method name="getRealmFromDNS" type="String" line="1016">
                <declaration name="realm" type="String" line="1017"/>
                <declaration name="hostName" type="String" line="1018"/>
                <scope line="1019"/>
                <scope line="1022">
                    <declaration name="ke" type="KrbException" line="1023"/>
                </scope>
                <declaration name="mapRealm" type="String" line="1027"/>
                <scope line="1028">
                    <declaration name="srchlist" type="List&lt;String&gt;" line="1029"/>
                    <scope line="1030">
                        <scope line="1032"/>
                    </scope>
                </scope>
                <scope line="1037"/>
                <scope line="1040"/>
            </method>
            <javadoc line="1045">
                Check if the provided realm is the correct realm                
                <return>
                    the realm if correct, or null otherwise                    
                </return>
            </javadoc>
            <method name="checkRealm" type="String" line="1049">
                <params>
                    <param name="mapRealm" type="String"/>
                </params>
                <scope line="1050"/>
                <declaration name="records" type="String[]" line="1053"/>
                <declaration name="newRealm" type="String" line="1054"/>
                <scope line="1055"/>
                <scope line="1059">
                    <scope line="1060">
                        <scope line="1061"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1068">
                Locate KDC using DNS                
                <param>
                    realm the realm for which the master KDC is desired                    
                </param>
                <return>
                    the KDC                    
                </return>
            </javadoc>
            <method name="getKDCFromDNS" type="String" line="1073">
                <params>
                    <param name="realm" type="String"/>
                </params>
                <declaration name="kdcs" type="String" line="1074"/>
                <declaration name="srvs" type="String[]" line="1075"/>
                <scope line="1076"/>
                <scope line="1080">
                    <scope line="1081"/>
                </scope>
                <scope line="1086"/>
                <scope line="1089">
                    <declaration name="value" type="String" line="1090"/>
                    <scope line="1091">
                        <scope line="1092"/>
                    </scope>
                </scope>
            </method>
            <method name="fileExists" type="boolean" line="1099">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <class name="FileExistsAction" line="1102">
                <implements interface="java.security.PrivilegedAction">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </implements>
                <declaration name="fileName" type="String" line="1103"/>
                <method name="FileExistsAction" type="constructor" line="1104">
                    <params>
                        <param name="fileName" type="String"/>
                    </params>
                </method>
                <method name="run" type="Boolean" line="1107"/>
            </class>
            <method name="toString" type="String" line="1111">
                <declaration name="sb" type="StringBuffer" line="1112"/>
            </method>
            <method name="toStringIndented" type="void" line="1116">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="obj" type="Object"/>
                    <param name="sb" type="StringBuffer"/>
                </params>
                <scope line="1117"/>
                <scope line="1122">
                    <declaration name="tab" type="Hashtable" line="1123"/>
                    <scope line="1124"/>
                </scope>
                <scope line="1132">
                    <declaration name="v" type="Vector" line="1133"/>
                    <scope line="1134"/>
                </scope>
            </method>
        </class>
    </source>