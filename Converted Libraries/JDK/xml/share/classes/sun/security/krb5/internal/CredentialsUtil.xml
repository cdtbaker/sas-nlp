<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5"/>
        <import package="sun.security.krb5.internal.ccache.CredentialsCache"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.security.krb5.internal.ktab"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Date"/>
        <import package="java.util.Vector"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.net.InetAddress"/>
        <class name="CredentialsUtil" line="47">
            <comment line="306">
                This method does the real job to request the service credential.                
            </comment>
            <javadoc line="47">
                This class is a utility that contains much of the TGS-Exchange
                  protocol. It is used by ../Credentials.java for service ticket
                  acquisition in both the normal and the x-realm case.                
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="54"/>
            <javadoc line="56">
                Acquires credentials for a specified service using initial credential. Wh
                  en the service has a different realm
                  from the initial credential, we do cross-realm authentication - first, we
                  use the current credential to get
                  a cross-realm credential from the local KDC, then use that cross-realm cr
                  edential to request service credential
                  from the foreigh KDC.                
                <param>
                    service the name of service principal using format components@real
                      m                    
                </param>
                <param>
                    ccreds client's initial credential.                    
                </param>
                <exception>
                    Exception general exception will be thrown when any error occu
                      rs.                    
                </exception>
                <return>
                    a <code>Credentials</code> object.                    
                </return>
            </javadoc>
            <method name="acquireServiceCreds" type="Credentials" line="74">
                <params>
                    <param name="service" type="String"/>
                    <param name="ccreds" type="Credentials"/>
                </params>
                <comment line="94">
                    if (!localRealm.equalsIgnoreCase(serviceRealm)) { do cross-realm auth entication
                    if (DEBUG) {
                    System.out.println(&quot;&gt;&gt;&gt;DEBUG: Credentails request cross realm ticket for &quot; + &quot;krbtgt&quot; + serviceRealm + &quot;@&quot; + localRealm);
                    }
                    Credentials crossCreds = serviceCreds(new ServiceName(&quot;krbtgt&quot; + serviceRealm + &quot;@&quot; + localRealm), ccreds);
                    if (DEBUG) {
                    printDebug(crossCreds);
                    }
                    Credentials result = serviceCreds(sname, crossCreds);
                    if (DEBUG) {
                    printDebug(result);
                    }
                    return result;
                    }
                    else return serviceCreds(sname, ccreds);                    
                </comment>
                <comment line="119">
                    Get a list of realms to traverse                    
                </comment>
                <comment line="158">
                    No tgt found. Try to get one for a
                     realm as close to the target as possible.
                     That means traversing the realms list backwards.                    
                </comment>
                <comment line="182">
                    Ends &apos;if (newTgt == null)&apos;                    
                </comment>
                <comment line="193">
                    We have a tgt. It may or may not be for the target.
                     If it&apos;s for the target realm, we&apos;re done looking for a tgt.                    
                </comment>
                <comment line="212">
                    printDebug(newTgt);                    
                </comment>
                <comment line="217">
                                        
                </comment>
                <comment line="223">
                    The new tgt is not for the target realm.
                     See if the realm of the new tgt is in the list of realms
                     and continue looking from there.                    
                </comment>
                <comment line="239">
                    (re)set the counter so we start looking
                     from the realm we just obtained a tgt for.                    
                </comment>
                <comment line="255">
                    The new tgt&apos;s realm is not in the heirarchy of realms.
                     It&apos;s probably not safe to get a tgt from
                     a tgs that is outside the known list of realms.
                     Give up now.                    
                </comment>
                <comment line="264">
                    Ends outermost/main &apos;for&apos; loop                    
                </comment>
                <comment line="270">
                                        
                </comment>
                <comment line="276">
                    printDebug(theTgt);                    
                </comment>
                <declaration name="sname" type="ServiceName" line="75"/>
                <declaration name="serviceRealm" type="String" line="76"/>
                <declaration name="localRealm" type="String" line="77"/>
                <declaration name="defaultRealm" type="String" line="78"/>
                <scope line="80">
                    <declaration name="temp" type="PrincipalName" line="81"/>
                </scope>
                <scope line="85"/>
                <scope line="88"/>
                <scope line="112"/>
                <declaration name="realms" type="String[]" line="119"/>
                <declaration name="okAsDelegate" type="boolean" line="120"/>
                <scope line="123"/>
                <declaration name="i" type="int" line="129"/>
                <declaration name="cTgt" type="Credentials" line="130"/>
                <declaration name="tempService" type="ServiceName" line="131"/>
                <declaration name="realm" type="String" line="132"/>
                <scope line="135">
                    <scope line="140"/>
                    <scope line="144"/>
                    <scope line="146"/>
                    <scope line="151">
                        <scope line="153"/>
                        <scope line="165">
                            <scope line="171"/>
                            <scope line="175"/>
                            <scope line="177"/>
                        </scope>
                    </scope>
                    <scope line="184">
                        <scope line="186"/>
                    </scope>
                    <scope line="198">
                        <scope line="200"/>
                    </scope>
                    <scope line="209"/>
                    <scope line="215"/>
                    <scope line="229">
                        <scope line="231"/>
                    </scope>
                    <scope line="237">
                        <scope line="246"/>
                    </scope>
                    <scope line="253"/>
                </scope>
                <declaration name="theCreds" type="Credentials" line="265"/>
                <scope line="268">
                    <scope line="272"/>
                    <scope line="280"/>
                    <scope line="282"/>
                </scope>
                <scope line="290">
                    <scope line="292"/>
                    <scope line="296"/>
                </scope>
            </method>
            <method name="serviceCreds" type="Credentials" line="310">
                <params>
                    <param name="service" type="ServiceName"/>
                    <param name="ccreds" type="Credentials"/>
                </params>
            </method>
        </class>
    </source>