<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5.Config"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.util"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.Inet4Address"/>
        <import package="java.net.Inet6Address"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.io.IOException"/>
        <class name="HostAddress" line="10">
            <implements interface="Cloneable"/>
            <javadoc line="10">
                Implements the ASN.1 HostAddress type.
                  &lt;xmp&gt;
                  HostAddress     ::= SEQUENCE  {
                  addr-type       [0] Int32,
                  address         [1] OCTET STRING
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
            </javadoc>
            <declaration name="addrType" type="int" line="25"/>
            <declaration name="address" type="byte[]" line="26"/>
            <declaration name="localInetAddress" type="InetAddress" line="27"/>
            <declaration name="DEBUG" type="boolean" line="28"/>
            <declaration name="hashCode" type="int" line="29"/>
            <method name="HostAddress" type="constructor" line="30">
                <params>
                    <param name="dummy" type="int"/>
                </params>
            </method>
            <method name="clone" type="Object" line="32">
                <declaration name="new_hostAddress" type="HostAddress" line="33"/>
                <scope line="35"/>
            </method>
            <method name="hashCode" type="int" line="40">
                <scope line="41">
                    <declaration name="result" type="int" line="42"/>
                    <scope line="44">
                        <scope line="45"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="53">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="54"/>
                <scope line="57"/>
                <declaration name="h" type="HostAddress" line="60"/>
                <scope line="62"/>
            </method>
            <method name="getLocalInetAddress" type="InetAddress" line="68">
                <scope line="69"/>
                <scope line="72"/>
            </method>
            <javadoc line="77">
                Gets the InetAddress of this HostAddress.                
                <return>
                    the IP address for this specified host.                    
                </return>
                <exception>
                    if no IP address for the host could be found.                    
                </exception>
            </javadoc>
            <method name="getInetAddress" type="InetAddress" line="82">
                <scope line="83"/>
                <scope line="86"/>
            </method>
            <method name="getAddrType" type="int" line="90">
                <params>
                    <param name="inetAddress" type="InetAddress"/>
                </params>
                <declaration name="addressType" type="int" line="91"/>
            </method>
            <method name="HostAddress" type="constructor" line="96">
                <declaration name="inetAddress" type="InetAddress" line="97"/>
            </method>
            <javadoc line="101">
                Creates a HostAddress from the specified address and address type.                
                <param>
                    new_addrType the value of the address type which matches the defined
                      address family constants in the Berkeley Standard
                      Distributions of Unix.                    
                </param>
                <param>
                    new_address network address.                    
                </param>
                <exception>
                    KrbApErrException if address type and address length do not match defined value.                    
                </exception>
            </javadoc>
            <method name="HostAddress" type="constructor" line="109">
                <params>
                    <param name="new_addrType" type="int"/>
                    <param name="new_address" type="byte[]"/>
                </params>
                <scope line="133"/>
                <scope line="136">
                    <scope line="137"/>
                </scope>
            </method>
            <method name="HostAddress" type="constructor" line="142">
                <params>
                    <param name="inetAddress" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="146">
                Constructs a host address from a single DER-encoded value.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="HostAddress" type="constructor" line="152">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="153"/>
                <scope line="154"/>
                <scope line="159"/>
            </method>
            <javadoc line="165">
                Encodes a HostAddress object.                
                <return>
                    a byte array of encoded HostAddress object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="171">
                <declaration name="bytes" type="DerOutputStream" line="172"/>
                <declaration name="temp" type="DerOutputStream" line="173"/>
            </method>
            <javadoc line="183">
                Parses (unmarshal) a host address from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicates if this data field is optional                    
                </param>
                <return>
                    an instance of HostAddress.                    
                </return>
            </javadoc>
            <method name="parse" type="HostAddress" line="194">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <scope line="195"/>
                <declaration name="der" type="DerValue" line="198"/>
                <scope line="199"/>
                <scope line="202">
                    <declaration name="subDer" type="DerValue" line="203"/>
                </scope>
            </method>
        </class>
    </source>