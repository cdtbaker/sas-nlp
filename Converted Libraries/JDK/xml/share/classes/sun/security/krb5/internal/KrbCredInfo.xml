<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5"/>
        <import package="sun.security.util"/>
        <import package="java.util.Vector"/>
        <import package="java.io.IOException"/>
        <class name="KrbCredInfo" line="6">
            <javadoc line="6">
                Implements the ASN.1 KrbCredInfo type.
                  &lt;xmp&gt;
                  KrbCredInfo  ::= SEQUENCE {
                  key             [0] EncryptionKey,
                  prealm          [1] Realm OPTIONAL,
                  pname           [2] PrincipalName OPTIONAL,
                  flags           [3] TicketFlags OPTIONAL,
                  authtime        [4] KerberosTime OPTIONAL,
                  starttime       [5] KerberosTime OPTIONAL,
                  endtime         [6] KerberosTime OPTIONAL,
                  renew-till      [7] KerberosTime OPTIONAL,
                  srealm          [8] Realm OPTIONAL,
                  sname           [9] PrincipalName OPTIONAL,
                  caddr           [10] HostAddresses OPTIONAL
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
            </javadoc>
            <declaration name="key" type="EncryptionKey" line="30"/>
            <declaration name="prealm" type="Realm" line="31"/>
            <declaration name="pname" type="PrincipalName" line="32"/>
            <declaration name="flags" type="TicketFlags" line="33"/>
            <declaration name="authtime" type="KerberosTime" line="34"/>
            <declaration name="starttime" type="KerberosTime" line="35"/>
            <declaration name="endtime" type="KerberosTime" line="36"/>
            <declaration name="renewTill" type="KerberosTime" line="37"/>
            <declaration name="srealm" type="Realm" line="38"/>
            <declaration name="sname" type="PrincipalName" line="39"/>
            <declaration name="caddr" type="HostAddresses" line="40"/>
            <method name="KrbCredInfo" type="constructor" line="41"/>
            <method name="KrbCredInfo" type="constructor" line="43">
                <params>
                    <param name="new_key" type="EncryptionKey"/>
                    <param name="new_prealm" type="Realm"/>
                    <param name="new_pname" type="PrincipalName"/>
                    <param name="new_flags" type="TicketFlags"/>
                    <param name="new_authtime" type="KerberosTime"/>
                    <param name="new_starttime" type="KerberosTime"/>
                    <param name="new_endtime" type="KerberosTime"/>
                    <param name="new_renewTill" type="KerberosTime"/>
                    <param name="new_srealm" type="Realm"/>
                    <param name="new_sname" type="PrincipalName"/>
                    <param name="new_caddr" type="HostAddresses"/>
                </params>
            </method>
            <javadoc line="56">
                Constructs a KrbCredInfo object.                
                <param>
                    encoding a Der-encoded data.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <exception>
                    RealmException if an error occurs while parsing a Realm object.                    
                </exception>
            </javadoc>
            <method name="KrbCredInfo" type="constructor" line="63">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <scope line="64"/>
            </method>
            <javadoc line="90">
                Encodes an KrbCredInfo object.                
                <return>
                    the byte array of encoded KrbCredInfo object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="96">
                <declaration name="v" type="Vector&amp;lt;DerValue&amp;gt;" line="97"/>
                <declaration name="der" type="DerValue" line="109"/>
                <declaration name="out" type="DerOutputStream" line="111"/>
            </method>
            <method name="clone" type="Object" line="115">
                <declaration name="kcred" type="KrbCredInfo" line="116"/>
            </method>
        </class>
    </source>