<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.ccache.CredentialsCache"/>
        <import package="sun.security.krb5.internal.crypto.EType"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Date"/>
        <import package="java.util.Locale"/>
        <import package="java.net.InetAddress"/>
        <class name="Credentials" line="9">
            <javadoc line="9">
                This class encapsulates the concept of a Kerberos service
                  credential. That includes a Kerberos ticket and an associated
                  session key.                
            </javadoc>
            <declaration name="ticket" type="Ticket" line="15"/>
            <declaration name="client" type="PrincipalName" line="16"/>
            <declaration name="server" type="PrincipalName" line="17"/>
            <declaration name="key" type="EncryptionKey" line="18"/>
            <declaration name="flags" type="TicketFlags" line="19"/>
            <declaration name="authTime" type="KerberosTime" line="20"/>
            <declaration name="startTime" type="KerberosTime" line="21"/>
            <declaration name="endTime" type="KerberosTime" line="22"/>
            <declaration name="renewTill" type="KerberosTime" line="23"/>
            <declaration name="cAddr" type="HostAddresses" line="24"/>
            <declaration name="serviceKey" type="EncryptionKey" line="25"/>
            <declaration name="authzData" type="AuthorizationData" line="26"/>
            <declaration name="DEBUG" type="boolean" line="27"/>
            <declaration name="cache" type="CredentialsCache" line="28"/>
            <declaration name="alreadyLoaded" type="boolean" line="29"/>
            <declaration name="alreadyTried" type="boolean" line="30"/>
            <method name="acquireDefaultNativeCreds" type="Credentials" line="31"/>
            <method name="Credentials" type="constructor" line="32">
                <params>
                    <param name="new_ticket" type="Ticket"/>
                    <param name="new_client" type="PrincipalName"/>
                    <param name="new_server" type="PrincipalName"/>
                    <param name="new_key" type="EncryptionKey"/>
                    <param name="new_flags" type="TicketFlags"/>
                    <param name="authTime" type="KerberosTime"/>
                    <param name="new_startTime" type="KerberosTime"/>
                    <param name="new_endTime" type="KerberosTime"/>
                    <param name="renewTill" type="KerberosTime"/>
                    <param name="cAddr" type="HostAddresses"/>
                    <param name="authzData" type="AuthorizationData"/>
                </params>
            </method>
            <method name="Credentials" type="constructor" line="36">
                <params>
                    <param name="new_ticket" type="Ticket"/>
                    <param name="new_client" type="PrincipalName"/>
                    <param name="new_server" type="PrincipalName"/>
                    <param name="new_key" type="EncryptionKey"/>
                    <param name="new_flags" type="TicketFlags"/>
                    <param name="authTime" type="KerberosTime"/>
                    <param name="new_startTime" type="KerberosTime"/>
                    <param name="new_endTime" type="KerberosTime"/>
                    <param name="renewTill" type="KerberosTime"/>
                    <param name="cAddr" type="HostAddresses"/>
                </params>
            </method>
            <method name="Credentials" type="constructor" line="48">
                <params>
                    <param name="encoding" type="byte[]"/>
                    <param name="client" type="String"/>
                    <param name="server" type="String"/>
                    <param name="keyBytes" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="flags" type="boolean[]"/>
                    <param name="authTime" type="Date"/>
                    <param name="startTime" type="Date"/>
                    <param name="endTime" type="Date"/>
                    <param name="renewTill" type="Date"/>
                    <param name="cAddrs" type="InetAddress[]"/>
                </params>
            </method>
            <javadoc line="51">
                Acquires a service ticket for the specified service
                  principal. If the service ticket is not already available, it
                  obtains a new one from the KDC.                
            </javadoc>
            <method name="getClient" type="PrincipalName" line="56"/>
            <method name="getServer" type="PrincipalName" line="59"/>
            <method name="getSessionKey" type="EncryptionKey" line="62"/>
            <method name="getAuthTime" type="Date" line="65">
                <scope line="66"/>
                <scope line="69"/>
            </method>
            <method name="getStartTime" type="Date" line="73">
                <scope line="74"/>
            </method>
            <method name="getEndTime" type="Date" line="79">
                <scope line="80"/>
            </method>
            <method name="getRenewTill" type="Date" line="85">
                <scope line="86"/>
            </method>
            <method name="getFlags" type="boolean[]" line="91"/>
            <method name="getClientAddresses" type="InetAddress[]" line="95"/>
            <method name="getEncoded" type="byte[]" line="99">
                <declaration name="retVal" type="byte[]" line="100"/>
                <scope line="101"/>
                <scope line="104"/>
                <scope line="107"/>
            </method>
            <method name="isForwardable" type="boolean" line="112"/>
            <method name="isRenewable" type="boolean" line="115"/>
            <method name="getTicket" type="Ticket" line="118"/>
            <method name="getTicketFlags" type="TicketFlags" line="121"/>
            <method name="getAuthzData" type="AuthorizationData" line="124"/>
            <javadoc line="127">
                Checks if the service ticket returned by the KDC has the OK-AS-DELEGATE
                  flag set                
                <return>
                    true if OK-AS_DELEGATE flag is set, otherwise, return false.                    
                </return>
            </javadoc>
            <method name="checkDelegate" type="boolean" line="132"/>
            <javadoc line="135">
                Reset TKT_OPTS_DELEGATE to false, called at credentials acquirement
                  when one of the cross-realm TGTs does not have the OK-AS-DELEGATE
                  flag set. This info must be preservable and restorable through
                  the Krb5Util.credsToTicket/ticketToCreds() methods so that even if
                  the service ticket is cached it still remembers the cross-realm
                  authentication result.                
            </javadoc>
            <method name="resetDelegate" type="void" line="143"/>
            <method name="renew" type="Credentials" line="146">
                <declaration name="options" type="KDCOptions" line="147"/>
            </method>
            <javadoc line="152">
                Returns a TGT for the given client principal from a ticket cache.                
                <param>
                    princ the client principal. A value of null means that the
                      default principal name in the credentials cache will be used.                    
                </param>
                <param>
                    ticketCache the path to the tickets file. A value
                      of null will be accepted to indicate that the default
                      path should be searched                    
                </param>
                <returns>
                    the TGT credentials or null if none were found. If the tgt
                      expired, it is the responsibility of the caller to determine this.                    
                </returns>
            </javadoc>
            <method name="acquireTGTFromCache" type="Credentials" line="162">
                <params>
                    <param name="princ" type="PrincipalName"/>
                    <param name="ticketCache" type="String"/>
                </params>
                <scope line="163">
                    <declaration name="os" type="String" line="164"/>
                    <scope line="165">
                        <declaration name="creds" type="Credentials" line="166"/>
                        <scope line="167">
                            <scope line="168"/>
                        </scope>
                        <scope line="173">
                            <scope line="174">
                                <scope line="175"/>
                            </scope>
                            <scope line="180">
                                <scope line="181"/>
                            </scope>
                        </scope>
                        <scope line="187">
                            <scope line="188"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ccache" type="CredentialsCache" line="195"/>
                <declaration name="tgtCred" type="sun.security.krb5.internal.ccache.Credentials" line="197"/>
                <scope line="198"/>
                <scope line="201">
                    <scope line="202"/>
                </scope>
            </method>
            <javadoc line="208">
                Acquires default credentials.
                  &lt;br&gt;The possible locations for default credentials cache is searched in
                  the following order:
                  &lt;ol&gt;
                  &lt;li&gt; The directory and cache file name specified by &quot;KRB5CCNAME&quot; system.
                  property.
                  &lt;li&gt; The directory and cache file name specified by &quot;KRB5CCNAME&quot;
                  environment variable.
                  &lt;li&gt; A cache file named krb5cc_{user.name} at {user.home} directory.
                  &lt;/ol&gt;                
                <return>
                    a &lt;code&gt;KrbCreds&lt;/code&gt; object if the credential is found,
                      otherwise return null.                    
                </return>
            </javadoc>
            <method name="acquireDefaultCreds" type="Credentials" line="222">
                <declaration name="result" type="Credentials" line="223"/>
                <scope line="224"/>
                <scope line="227">
                    <scope line="228"/>
                    <declaration name="temp" type="sun.security.krb5.internal.ccache.Credentials" line="231"/>
                    <scope line="232"/>
                    <scope line="235">
                        <scope line="236"/>
                    </scope>
                </scope>
                <scope line="241">
                    <scope line="242">
                        <scope line="243"/>
                        <scope line="246">
                            <scope line="247"/>
                        </scope>
                    </scope>
                    <scope line="254"/>
                </scope>
            </method>
            <javadoc line="261">
                Acquires credentials for a specified service using initial credential.
                  When the service has a different realm
                  from the initial credential, we do cross-realm authentication
                  - first, we use the current credential to get
                  a cross-realm credential from the local KDC, then use that
                  cross-realm credential to request service credential
                  from the foreigh KDC.                
                <param>
                    service the name of service principal using format
                      components@realm                    
                </param>
                <param>
                    ccreds client&apos;s initial credential.                    
                </param>
                <exception>
                    IOException if an error occurs in reading the credentials
                      cache                    
                </exception>
                <exception>
                    KrbException if an error occurs specific to Kerberos                    
                </exception>
                <return>
                    a &lt;code&gt;Credentials&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="acquireServiceCreds" type="Credentials" line="277">
                <params>
                    <param name="service" type="String"/>
                    <param name="ccreds" type="Credentials"/>
                </params>
            </method>
            <method name="getCache" type="CredentialsCache" line="280"/>
            <method name="getServiceKey" type="EncryptionKey" line="283"/>
            <method name="printDebug" type="void" line="286">
                <params>
                    <param name="c" type="Credentials"/>
                </params>
                <scope line="292"/>
            </method>
            <method name="ensureLoaded" type="void" line="298">
                <anonymous_class line="299">
                    <method name="run" type="Void" line="300"/>
                </anonymous_class>
            </method>
            <method name="toString" type="String" line="308">
                <declaration name="buffer" type="StringBuffer" line="309"/>
                <scope line="312"/>
                <scope line="315"/>
            </method>
        </class>
    </source>