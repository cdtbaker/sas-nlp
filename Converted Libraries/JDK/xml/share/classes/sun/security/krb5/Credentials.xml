<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.ccache.CredentialsCache"/>
        <import package="sun.security.krb5.internal.crypto.EType"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Date"/>
        <import package="java.util.Locale"/>
        <import package="java.net.InetAddress"/>
        <class name="Credentials" line="42">
            <comment line="453">
                Prints out debug info.                
            </comment>
            <javadoc line="42">
                This class encapsulates the concept of a Kerberos service
                  credential. That includes a Kerberos ticket and an associated
                  session key.                
            </javadoc>
            <declaration name="ticket" type="Ticket" line="49"/>
            <declaration name="client" type="PrincipalName" line="50"/>
            <declaration name="server" type="PrincipalName" line="51"/>
            <declaration name="key" type="EncryptionKey" line="52"/>
            <declaration name="flags" type="TicketFlags" line="53"/>
            <declaration name="authTime" type="KerberosTime" line="54"/>
            <declaration name="startTime" type="KerberosTime" line="55"/>
            <declaration name="endTime" type="KerberosTime" line="56"/>
            <declaration name="renewTill" type="KerberosTime" line="57"/>
            <declaration name="cAddr" type="HostAddresses" line="58"/>
            <declaration name="serviceKey" type="EncryptionKey" line="59"/>
            <declaration name="authzData" type="AuthorizationData" line="60"/>
            <declaration name="DEBUG" type="boolean" line="61"/>
            <declaration name="cache" type="CredentialsCache" line="62"/>
            <declaration name="alreadyLoaded" type="boolean" line="63"/>
            <declaration name="alreadyTried" type="boolean" line="64"/>
            <method name="acquireDefaultNativeCreds" type="Credentials" line="65"/>
            <method name="Credentials" type="constructor" line="77">
                <params>
                    <param name="new_ticket" type="Ticket"/>
                    <param name="new_client" type="PrincipalName"/>
                    <param name="new_server" type="PrincipalName"/>
                    <param name="new_key" type="EncryptionKey"/>
                    <param name="new_flags" type="TicketFlags"/>
                    <param name="authTime" type="KerberosTime"/>
                    <param name="new_startTime" type="KerberosTime"/>
                    <param name="new_endTime" type="KerberosTime"/>
                    <param name="renewTill" type="KerberosTime"/>
                    <param name="cAddr" type="HostAddresses"/>
                    <param name="authzData" type="AuthorizationData"/>
                </params>
            </method>
            <method name="Credentials" type="constructor" line="92">
                <params>
                    <param name="new_ticket" type="Ticket"/>
                    <param name="new_client" type="PrincipalName"/>
                    <param name="new_server" type="PrincipalName"/>
                    <param name="new_key" type="EncryptionKey"/>
                    <param name="new_flags" type="TicketFlags"/>
                    <param name="authTime" type="KerberosTime"/>
                    <param name="new_startTime" type="KerberosTime"/>
                    <param name="new_endTime" type="KerberosTime"/>
                    <param name="renewTill" type="KerberosTime"/>
                    <param name="cAddr" type="HostAddresses"/>
                </params>
            </method>
            <method name="Credentials" type="constructor" line="115">
                <params>
                    <param name="encoding" type="byte[]"/>
                    <param name="client" type="String"/>
                    <param name="server" type="String"/>
                    <param name="keyBytes" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="flags" type="boolean[]"/>
                    <param name="authTime" type="Date"/>
                    <param name="startTime" type="Date"/>
                    <param name="endTime" type="Date"/>
                    <param name="renewTill" type="Date"/>
                    <param name="cAddrs" type="InetAddress[]"/>
                </params>
                <comment line="126">
                    caddrs are in the encoding at this point                    
                </comment>
            </method>
            <javadoc line="128">
                Acquires a service ticket for the specified service
                  principal. If the service ticket is not already available, it
                  obtains a new one from the KDC.                
            </javadoc>
            <method name="getClient" type="PrincipalName" line="139">
                <comment line="134">
                    public Credentials(Credentials tgt, PrincipalName service)
                    throws KrbException {
                    }                    
                </comment>
            </method>
            <method name="getServer" type="PrincipalName" line="143"/>
            <method name="getSessionKey" type="EncryptionKey" line="147"/>
            <method name="getAuthTime" type="Date" line="151">
                <scope line="152"/>
                <scope line="154"/>
            </method>
            <method name="getStartTime" type="Date" line="159">
                <scope line="161"/>
            </method>
            <method name="getEndTime" type="Date" line="167">
                <scope line="169"/>
            </method>
            <method name="getRenewTill" type="Date" line="175">
                <scope line="177"/>
            </method>
            <method name="getFlags" type="boolean[]" line="183">
                <comment line="185">
                    Can be in a KRB-CRED                    
                </comment>
            </method>
            <method name="getClientAddresses" type="InetAddress[]" line="189"/>
            <method name="getEncoded" type="byte[]" line="197">
                <declaration name="retVal" type="byte[]" line="198"/>
                <scope line="199"/>
                <scope line="201"/>
                <scope line="204"/>
            </method>
            <method name="isForwardable" type="boolean" line="211"/>
            <method name="isRenewable" type="boolean" line="215"/>
            <method name="getTicket" type="Ticket" line="219"/>
            <method name="getTicketFlags" type="TicketFlags" line="223"/>
            <method name="getAuthzData" type="AuthorizationData" line="227"/>
            <javadoc line="230">
                Checks if the service ticket returned by the KDC has the OK-AS-DELEGATE
                  flag set                
                <return>
                    true if OK-AS_DELEGATE flag is set, otherwise, return false.                    
                </return>
            </javadoc>
            <method name="checkDelegate" type="boolean" line="235"/>
            <javadoc line="239">
                Reset TKT_OPTS_DELEGATE to false, called at credentials acquirement
                  when one of the cross-realm TGTs does not have the OK-AS-DELEGATE
                  flag set. This info must be preservable and restorable through
                  the Krb5Util.credsToTicket/ticketToCreds() methods so that even if
                  the service ticket is cached it still remembers the cross-realm
                  authentication result.                
            </javadoc>
            <method name="resetDelegate" type="void" line="247"/>
            <method name="renew" type="Credentials" line="251">
                <comment line="255">
                    Added here to pass KrbKdcRep.check:73                    
                </comment>
                <comment line="263">
                    from                    
                </comment>
                <comment line="264">
                    till                    
                </comment>
                <comment line="265">
                    rtime                    
                </comment>
                <comment line="266">
                    eTypes                    
                </comment>
                <declaration name="options" type="KDCOptions" line="252"/>
            </method>
            <javadoc line="272">
                Returns a TGT for the given client principal from a ticket cache.                
                <param>
                    princ the client principal. A value of null means that the
                      default principal name in the credentials cache will be used.                    
                </param>
                <param>
                    ticketCache the path to the tickets file. A value
                      of null will be accepted to indicate that the default
                      path should be searched                    
                </param>
                <returns>
                    the TGT credentials or null if none were found. If the tgt
                      expired, it is the responsibility of the caller to determine this.                    
                </returns>
            </javadoc>
            <method name="acquireTGTFromCache" type="Credentials" line="285">
                <params>
                    <param name="princ" type="PrincipalName"/>
                    <param name="ticketCache" type="String"/>
                </params>
                <comment line="289">
                    The default ticket cache on Windows is not a file.                    
                </comment>
                <comment line="326">
                    Returns the appropriate cache. If ticketCache is null, it is the
                     default cache otherwise it is the cache filename contained in it.                    
                </comment>
                <scope line="287">
                    <declaration name="os" type="String" line="289"/>
                    <scope line="291">
                        <declaration name="creds" type="Credentials" line="292"/>
                        <scope line="293">
                            <scope line="294"/>
                        </scope>
                        <scope line="299">
                            <scope line="300">
                                <scope line="301"/>
                            </scope>
                            <scope line="306">
                                <scope line="307"/>
                            </scope>
                        </scope>
                        <scope line="315">
                            <scope line="316"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ccache" type="CredentialsCache" line="329"/>
                <declaration name="tgtCred" type="sun.security.krb5.internal.ccache.Credentials" line="335"/>
                <scope line="338"/>
                <scope line="340">
                    <scope line="341"/>
                </scope>
            </method>
            <javadoc line="350">
                Acquires default credentials.
                  &lt;br&gt;The possible locations for default credentials cache is searched in
                  the following order:
                  &lt;ol&gt;
                  &lt;li&gt; The directory and cache file name specified by &quot;KRB5CCNAME&quot; system.
                  property.
                  &lt;li&gt; The directory and cache file name specified by &quot;KRB5CCNAME&quot;
                  environment variable.
                  &lt;li&gt; A cache file named krb5cc_{user.name} at {user.home} directory.
                  &lt;/ol&gt;                
                <return>
                    a <code>KrbCreds</code> object if the credential is found,
                      otherwise return null.                    
                </return>
            </javadoc>
            <method name="acquireDefaultCreds" type="Credentials" line="370">
                <comment line="366">
                    this method is intentionally changed to not check if the caller&apos;s
                     principal name matches cache file&apos;s principal name.
                     It assumes that the GSS call has
                     the privilege to access the default cache file.                    
                </comment>
                <comment line="395">
                    Doesn&apos;t seem to be a default cache on this system or
                     TGT has unsupported encryption type                    
                </comment>
                <comment line="399">
                    See if there&apos;s any native code to load                    
                </comment>
                <comment line="411">
                    There is some native code                    
                </comment>
                <comment line="415">
                    only TGT with DES key will be returned by native method                    
                </comment>
                <declaration name="result" type="Credentials" line="371"/>
                <scope line="373"/>
                <scope line="376">
                    <scope line="377"/>
                    <declaration name="temp" type="sun.security.krb5.internal.ccache.Credentials" line="381"/>
                    <scope line="383"/>
                    <scope line="385">
                        <scope line="386"/>
                    </scope>
                </scope>
                <scope line="393">
                    <scope line="397">
                        <scope line="399"/>
                        <scope line="401">
                            <scope line="402"/>
                        </scope>
                    </scope>
                    <scope line="409"/>
                </scope>
            </method>
            <javadoc line="420">
                Acquires credentials for a specified service using initial credential.
                  When the service has a different realm
                  from the initial credential, we do cross-realm authentication
                  - first, we use the current credential to get
                  a cross-realm credential from the local KDC, then use that
                  cross-realm credential to request service credential
                  from the foreigh KDC.                
                <param>
                    service the name of service principal using format
                      components@realm                    
                </param>
                <param>
                    ccreds client's initial credential.                    
                </param>
                <exception>
                    IOException if an error occurs in reading the credentials
                      cache                    
                </exception>
                <exception>
                    KrbException if an error occurs specific to Kerberos                    
                </exception>
                <return>
                    a <code>Credentials</code> object.                    
                </return>
            </javadoc>
            <method name="acquireServiceCreds" type="Credentials" line="440">
                <params>
                    <param name="service" type="String"/>
                    <param name="ccreds" type="Credentials"/>
                </params>
            </method>
            <method name="getCache" type="CredentialsCache" line="444"/>
            <method name="getServiceKey" type="EncryptionKey" line="448"/>
            <method name="printDebug" type="void" line="455">
                <params>
                    <param name="c" type="Credentials"/>
                </params>
                <scope line="461"/>
            </method>
            <method name="ensureLoaded" type="void" line="469">
                <anonymous_class line="471">
                    <method name="run" type="Void" line="472"/>
                </anonymous_class>
            </method>
            <method name="toString" type="String" line="480">
                <declaration name="buffer" type="StringBuffer" line="481"/>
                <scope line="484"/>
                <scope line="487"/>
            </method>
        </class>
    </source>