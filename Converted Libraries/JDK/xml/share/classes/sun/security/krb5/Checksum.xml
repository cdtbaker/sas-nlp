<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="java.util.Arrays"/>
        <import package="sun.security.util"/>
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <class name="Checksum" line="8">
            <javadoc line="8">
                This class encapsulates the concept of a Kerberos checksum.                
            </javadoc>
            <declaration name="cksumType" type="int" line="12"/>
            <declaration name="checksum" type="byte[]" line="13"/>
            <declaration name="CKSUMTYPE_NULL" type="int" line="14"/>
            <declaration name="CKSUMTYPE_CRC32" type="int" line="15"/>
            <declaration name="CKSUMTYPE_RSA_MD4" type="int" line="16"/>
            <declaration name="CKSUMTYPE_RSA_MD4_DES" type="int" line="17"/>
            <declaration name="CKSUMTYPE_DES_MAC" type="int" line="18"/>
            <declaration name="CKSUMTYPE_DES_MAC_K" type="int" line="19"/>
            <declaration name="CKSUMTYPE_RSA_MD4_DES_K" type="int" line="20"/>
            <declaration name="CKSUMTYPE_RSA_MD5" type="int" line="21"/>
            <declaration name="CKSUMTYPE_RSA_MD5_DES" type="int" line="22"/>
            <declaration name="CKSUMTYPE_HMAC_SHA1_DES3_KD" type="int" line="23"/>
            <declaration name="CKSUMTYPE_HMAC_SHA1_96_AES128" type="int" line="24"/>
            <declaration name="CKSUMTYPE_HMAC_SHA1_96_AES256" type="int" line="25"/>
            <declaration name="CKSUMTYPE_HMAC_MD5_ARCFOUR" type="int" line="26"/>
            <declaration name="CKSUMTYPE_DEFAULT" type="int" line="27"/>
            <declaration name="SAFECKSUMTYPE_DEFAULT" type="int" line="28"/>
            <declaration name="DEBUG" type="boolean" line="29"/>
            <scope line="30">
                <declaration name="temp" type="String" line="31"/>
                <declaration name="cfg" type="Config" line="32"/>
                <scope line="33">
                    <scope line="36"/>
                    <scope line="39"/>
                </scope>
                <scope line="43">
                    <scope line="44"/>
                </scope>
                <scope line="50">
                    <scope line="52"/>
                    <scope line="55"/>
                </scope>
                <scope line="59">
                    <scope line="60"/>
                </scope>
            </scope>
            <javadoc line="67">
                Constructs a new Checksum using the raw data and type.                
                <data>
                    the byte array of checksum.                    
                </data>
                <new_cksumType>
                    the type of checksum.                    
                </new_cksumType>
            </javadoc>
            <method name="Checksum" type="constructor" line="72">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="new_cksumType" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Constructs a new Checksum by calculating the checksum over the data
                  using specified checksum type.                
                <new_cksumType>
                    the type of checksum.                    
                </new_cksumType>
                <data>
                    the data that needs to be performed a checksum calculation on.                    
                </data>
            </javadoc>
            <method name="Checksum" type="constructor" line="82">
                <params>
                    <param name="new_cksumType" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="cksumEngine" type="CksumType" line="84"/>
                <scope line="85"/>
                <scope line="88"/>
            </method>
            <javadoc line="92">
                Constructs a new Checksum by calculating the keyed checksum
                  over the data using specified checksum type.                
                <new_cksumType>
                    the type of checksum.                    
                </new_cksumType>
                <data>
                    the data that needs to be performed a checksum calculation on.                    
                </data>
            </javadoc>
            <method name="Checksum" type="constructor" line="98">
                <params>
                    <param name="new_cksumType" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="usage" type="int"/>
                </params>
                <declaration name="cksumEngine" type="CksumType" line="100"/>
            </method>
            <javadoc line="104">
                Verifies the keyed checksum over the data passed in.                
            </javadoc>
            <method name="verifyKeyedChecksum" type="boolean" line="107">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="usage" type="int"/>
                </params>
                <declaration name="cksumEngine" type="CksumType" line="108"/>
            </method>
            <method name="isEqual" type="boolean" line="112">
                <params>
                    <param name="cksum" type="Checksum"/>
                </params>
                <declaration name="cksumEngine" type="CksumType" line="114"/>
            </method>
            <javadoc line="117">
                Constructs an instance of Checksum from an ASN.1 encoded representation.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1
                      encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="Checksum" type="constructor" line="124">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="125"/>
                <scope line="126"/>
                <scope line="130"/>
                <scope line="135"/>
                <scope line="139"/>
            </method>
            <javadoc line="143">
                Encodes a Checksum object.
                  &lt;xmp&gt;
                  Checksum    ::= SEQUENCE {
                  cksumtype   [0] Int32,
                  checksum    [1] OCTET STRING
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
                <return>
                    byte array of enocded Checksum.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="162">
                <declaration name="bytes" type="DerOutputStream" line="163"/>
                <declaration name="temp" type="DerOutputStream" line="164"/>
            </method>
            <javadoc line="174">
                Parse (unmarshal) a checksum object from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more
                      marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicates if this data field is optional                    
                </param>
                <return>
                    an instance of Checksum.                    
                </return>
            </javadoc>
            <method name="parse" type="Checksum" line="188">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <scope line="189"/>
                <declaration name="der" type="DerValue" line="192"/>
                <scope line="193"/>
                <scope line="196">
                    <declaration name="subDer" type="DerValue" line="197"/>
                </scope>
            </method>
            <javadoc line="201">
                Returns the raw bytes of the checksum, not in ASN.1 encoded form.                
            </javadoc>
            <method name="getBytes" type="byte[]" line="204"/>
            <method name="getType" type="int" line="207"/>
            <method name="equals" type="boolean" line="210">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="211"/>
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220"/>
            </method>
            <method name="hashCode" type="int" line="224">
                <declaration name="result" type="int" line="225"/>
                <scope line="227"/>
            </method>
        </class>
    </source>