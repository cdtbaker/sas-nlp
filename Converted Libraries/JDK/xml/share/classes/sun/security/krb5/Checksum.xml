<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="java.util.Arrays"/>
        <import package="sun.security.util"/>
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <class name="Checksum" line="40">
            <comment line="49">
                ----------------------------------------------+-------------+-----------
                                      Checksum type            |sumtype      |checksum
                                                               |value        | size
                 ----------------------------------------------+-------------+-----------                
            </comment>
            <comment line="53">
                0                
            </comment>
            <comment line="54">
                4                
            </comment>
            <comment line="55">
                16                
            </comment>
            <comment line="56">
                24                
            </comment>
            <comment line="57">
                16                
            </comment>
            <comment line="58">
                8                
            </comment>
            <comment line="59">
                16                
            </comment>
            <comment line="60">
                16                
            </comment>
            <comment line="61">
                24                
            </comment>
            <comment line="63">
                draft-ietf-krb-wg-crypto-07.txt                
            </comment>
            <comment line="64">
                20                
            </comment>
            <comment line="66">
                draft-raeburn-krb-rijndael-krb-07.txt                
            </comment>
            <comment line="67">
                96                
            </comment>
            <comment line="68">
                96                
            </comment>
            <comment line="70">
                draft-brezak-win2k-krb-rc4-hmac-04.txt                
            </comment>
            <comment line="193">
                public Checksum(byte[] data) throws KdcErrException, KrbCryptoException {
                this(Checksum.CKSUMTYPE_DEFAULT, data);
                }                
            </comment>
            <javadoc line="40">
                This class encapsulates the concept of a Kerberos checksum.                
            </javadoc>
            <declaration name="cksumType" type="int" line="45"/>
            <declaration name="checksum" type="byte[]" line="46"/>
            <declaration name="CKSUMTYPE_NULL" type="int" line="52"/>
            <declaration name="CKSUMTYPE_CRC32" type="int" line="53"/>
            <declaration name="CKSUMTYPE_RSA_MD4" type="int" line="54"/>
            <declaration name="CKSUMTYPE_RSA_MD4_DES" type="int" line="55"/>
            <declaration name="CKSUMTYPE_DES_MAC" type="int" line="56"/>
            <declaration name="CKSUMTYPE_DES_MAC_K" type="int" line="57"/>
            <declaration name="CKSUMTYPE_RSA_MD4_DES_K" type="int" line="58"/>
            <declaration name="CKSUMTYPE_RSA_MD5" type="int" line="59"/>
            <declaration name="CKSUMTYPE_RSA_MD5_DES" type="int" line="60"/>
            <declaration name="CKSUMTYPE_HMAC_SHA1_DES3_KD" type="int" line="63"/>
            <declaration name="CKSUMTYPE_HMAC_SHA1_96_AES128" type="int" line="66"/>
            <declaration name="CKSUMTYPE_HMAC_SHA1_96_AES256" type="int" line="67"/>
            <declaration name="CKSUMTYPE_HMAC_MD5_ARCFOUR" type="int" line="70"/>
            <declaration name="CKSUMTYPE_DEFAULT" type="int" line="72"/>
            <declaration name="SAFECKSUMTYPE_DEFAULT" type="int" line="73"/>
            <declaration name="DEBUG" type="boolean" line="75"/>
            <scope line="76">
                <declaration name="temp" type="String" line="77"/>
                <declaration name="cfg" type="Config" line="78"/>
                <scope line="79">
                    <scope line="83"/>
                    <scope line="85"/>
                </scope>
                <scope line="94">
                    <scope line="95"/>
                </scope>
                <scope line="105">
                    <scope line="108"/>
                    <scope line="110"/>
                </scope>
                <scope line="113">
                    <scope line="114"/>
                </scope>
            </scope>
            <javadoc line="125">
                Constructs a new Checksum using the raw data and type.                
                <data>
                    the byte array of checksum.                    
                </data>
                <new_cksumType>
                    the type of checksum.                    
                </new_cksumType>
            </javadoc>
            <method name="Checksum" type="constructor" line="132">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="new_cksumType" type="int"/>
                </params>
                <comment line="132">
                    used in InitialToken                    
                </comment>
            </method>
            <javadoc line="137">
                Constructs a new Checksum by calculating the checksum over the data
                  using specified checksum type.                
                <new_cksumType>
                    the type of checksum.                    
                </new_cksumType>
                <data>
                    the data that needs to be performed a checksum calculation on.                    
                </data>
            </javadoc>
            <method name="Checksum" type="constructor" line="144">
                <params>
                    <param name="new_cksumType" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="cksumEngine" type="CksumType" line="147"/>
                <scope line="148"/>
                <scope line="150"/>
            </method>
            <javadoc line="155">
                Constructs a new Checksum by calculating the keyed checksum
                  over the data using specified checksum type.                
                <new_cksumType>
                    the type of checksum.                    
                </new_cksumType>
                <data>
                    the data that needs to be performed a checksum calculation on.                    
                </data>
            </javadoc>
            <method name="Checksum" type="constructor" line="164">
                <params>
                    <param name="new_cksumType" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="usage" type="int"/>
                </params>
                <comment line="162">
                    KrbSafe, KrbTgsReq                    
                </comment>
                <declaration name="cksumEngine" type="CksumType" line="166"/>
            </method>
            <javadoc line="176">
                Verifies the keyed checksum over the data passed in.                
            </javadoc>
            <method name="verifyKeyedChecksum" type="boolean" line="181">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="key" type="EncryptionKey"/>
                    <param name="usage" type="int"/>
                </params>
                <declaration name="cksumEngine" type="CksumType" line="182"/>
            </method>
            <method name="isEqual" type="boolean" line="198">
                <params>
                    <param name="cksum" type="Checksum"/>
                </params>
                <declaration name="cksumEngine" type="CksumType" line="201"/>
            </method>
            <javadoc line="205">
                Constructs an instance of Checksum from an ASN.1 encoded representation.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1
                      encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="Checksum" type="constructor" line="213">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="214"/>
                <scope line="215"/>
                <scope line="219"/>
                <scope line="225"/>
                <scope line="230"/>
            </method>
            <javadoc line="235">
                Encodes a Checksum object.
                  &lt;xmp&gt;
                  Checksum    ::= SEQUENCE {
                  cksumtype   [0] Int32,
                  checksum    [1] OCTET STRING
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
                <return>
                    byte array of enocded Checksum.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="256">
                <declaration name="bytes" type="DerOutputStream" line="257"/>
                <declaration name="temp" type="DerOutputStream" line="258"/>
            </method>
            <javadoc line="272">
                Parse (unmarshal) a checksum object from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more
                      marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicates if this data field is optional                    
                </param>
                <return>
                    an instance of Checksum.                    
                </return>
            </javadoc>
            <method name="parse" type="Checksum" line="290">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <scope line="293"/>
                <declaration name="der" type="DerValue" line="296"/>
                <scope line="297"/>
                <scope line="299">
                    <declaration name="subDer" type="DerValue" line="300"/>
                </scope>
            </method>
            <javadoc line="305">
                Returns the raw bytes of the checksum, not in ASN.1 encoded form.                
            </javadoc>
            <method name="getBytes" type="byte[]" line="308"/>
            <method name="getType" type="int" line="312"/>
            <method name="equals" type="boolean" line="316">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="317"/>
                <scope line="320"/>
                <scope line="324"/>
                <scope line="326"/>
            </method>
            <method name="hashCode" type="int" line="331">
                <declaration name="result" type="int" line="332"/>
                <scope line="334"/>
            </method>
        </class>
    </source>