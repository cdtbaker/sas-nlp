<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5.Config"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.internal.util.KerberosFlags"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <class name="KDCOptions" line="40">
            <extends class="KerberosFlags"/>
            <comment line="129">
                KDC Options                
            </comment>
            <javadoc line="40">
                Implements the ASN.1 KDCOptions type.
                  &lt;xmp&gt;
                  KDCOptions   ::= KerberosFlags
                  -- reserved(0),
                  -- forwardable(1),
                  -- forwarded(2),
                  -- proxiable(3),
                  -- proxy(4),
                  -- allow-postdate(5),
                  -- postdated(6),
                  -- unused7(7),
                  -- renewable(8),
                  -- unused9(9),
                  -- unused10(10),
                  -- opt-hardware-auth(11),
                  -- unused12(12),
                  -- unused13(13),
                  -- 15 is reserved for canonicalize
                  -- unused15(15),
                  -- 26 was unused in 1510
                  -- disable-transited-check(26),
                  -- renewable-ok(27),
                  -- enc-tkt-in-skey(28),
                  -- renew(30),
                  -- validate(31)
                  KerberosFlags   ::= BIT STRING (SIZE (32..MAX))
                  -- minimum number of bits shall be sent,
                  -- but no fewer than 32
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.
                  &lt;p&gt;
                  This class appears as data field in the initial request(KRB_AS_REQ)
                  or subsequent request(KRB_TGS_REQ) to the KDC and indicates the flags
                  that the client wants to set on the tickets.
                  The optional bits are:
                  &lt;UL&gt;
                  &lt;LI&gt;KDCOptions.RESERVED
                  &lt;LI&gt;KDCOptions.FORWARDABLE
                  &lt;LI&gt;KDCOptions.FORWARDED
                  &lt;LI&gt;KDCOptions.PROXIABLE
                  &lt;LI&gt;KDCOptions.PROXY
                  &lt;LI&gt;KDCOptions.ALLOW_POSTDATE
                  &lt;LI&gt;KDCOptions.POSTDATED
                  &lt;LI&gt;KDCOptions.RENEWABLE
                  &lt;LI&gt;KDCOptions.RENEWABLE_OK
                  &lt;LI&gt;KDCOptions.ENC_TKT_IN_SKEY
                  &lt;LI&gt;KDCOptions.RENEW
                  &lt;LI&gt;KDCOptions.VALIDATE
                  &lt;/UL&gt;
                  &lt;p&gt; Various checks must be made before honoring an option. The restrictions
                  on the use of some options are as follows:
                  &lt;ol&gt;
                  &lt;li&gt; FORWARDABLE, FORWARDED, PROXIABLE, RENEWABLE options may be set in
                  subsequent request only if the ticket_granting ticket on which it is based has
                  the same options (FORWARDABLE, FORWARDED, PROXIABLE, RENEWABLE) set.
                  &lt;li&gt; ALLOW_POSTDATE may be set in subsequent request only if the
                  ticket-granting ticket on which it is based also has its MAY_POSTDATE flag set.
                  &lt;li&gt; POSTDATED may be set in subsequent request only if the
                  ticket-granting ticket on which it is based also has its MAY_POSTDATE flag set.
                  &lt;li&gt; RENEWABLE or RENEW may be set in subsequent request only if the
                  ticket-granting ticket on which it is based also has its RENEWABLE flag set.
                  &lt;li&gt; POXY may be set in subsequent request only if the ticket-granting ticket
                  on which it is based also has its PROXIABLE flag set, and the address(es) of
                  the host from which the resulting ticket is to be valid should be included
                  in the addresses field of the request.
                  &lt;li&gt;FORWARDED, PROXY, ENC_TKT_IN_SKEY, RENEW, VALIDATE are used only in
                  subsequent requests.
                  &lt;/ol&gt;&lt;p&gt;                
            </javadoc>
            <declaration name="KDC_OPT_PROXIABLE" type="int" line="123"/>
            <declaration name="KDC_OPT_RENEWABLE_OK" type="int" line="124"/>
            <declaration name="KDC_OPT_FORWARDABLE" type="int" line="125"/>
            <declaration name="RESERVED" type="int" line="130"/>
            <declaration name="FORWARDABLE" type="int" line="131"/>
            <declaration name="FORWARDED" type="int" line="132"/>
            <declaration name="PROXIABLE" type="int" line="133"/>
            <declaration name="PROXY" type="int" line="134"/>
            <declaration name="ALLOW_POSTDATE" type="int" line="135"/>
            <declaration name="POSTDATED" type="int" line="136"/>
            <declaration name="UNUSED7" type="int" line="137"/>
            <declaration name="RENEWABLE" type="int" line="138"/>
            <declaration name="UNUSED9" type="int" line="139"/>
            <declaration name="UNUSED10" type="int" line="140"/>
            <declaration name="UNUSED11" type="int" line="141"/>
            <declaration name="RENEWABLE_OK" type="int" line="142"/>
            <declaration name="ENC_TKT_IN_SKEY" type="int" line="143"/>
            <declaration name="RENEW" type="int" line="144"/>
            <declaration name="VALIDATE" type="int" line="145"/>
            <declaration name="DEBUG" type="boolean" line="147"/>
            <method name="KDCOptions" type="constructor" line="149"/>
            <method name="KDCOptions" type="constructor" line="154">
                <params>
                    <param name="size" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="160">
                Constructs a KDCOptions from the specified bit settings.                
                <param>
                    data the bits to be set for the KDCOptions.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1
                      encoded data.                    
                </exception>
            </javadoc>
            <method name="KDCOptions" type="constructor" line="168">
                <params>
                    <param name="data" type="boolean[]"/>
                </params>
                <scope line="170"/>
            </method>
            <method name="KDCOptions" type="constructor" line="175">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <javadoc line="179">
                Constructs a KDCOptions from the passed bit settings.                
                <param>
                    options the bits to be set for the KDCOptions.                    
                </param>
            </javadoc>
            <method name="KDCOptions" type="constructor" line="185">
                <params>
                    <param name="options" type="byte[]"/>
                </params>
            </method>
            <javadoc line="189">
                Parse (unmarshal) a KDCOptions from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <param>
                    data the Der input stream value, which contains one or more
                      marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of KDCOptions.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="parse" type="KDCOptions" line="204">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="207"/>
                <scope line="208"/>
                <scope line="210">
                    <declaration name="subDer" type="DerValue" line="211"/>
                </scope>
            </method>
            <javadoc line="216">
                Sets the value(true/false) for one of the &lt;code&gt;KDCOptions&lt;/code&gt;.                
                <param>
                    option an option bit.                    
                </param>
                <param>
                    value true if the option is selected, false if the option is not selected.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException if array index out of bound occurs.                    
                </exception>
                <see>
                    sun.security.krb5.internal.Krb5                    
                </see>
            </javadoc>
            <method name="set" type="void" line="224">
                <params>
                    <param name="option" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="228">
                Gets the value(true/false) for one of the &lt;code&gt;KDCOptions&lt;/code&gt;.                
                <param>
                    option an option bit.                    
                </param>
                <return>
                    value true if the option is selected, false if the option is not selected.                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException if array index out of bound occurs.                    
                </exception>
                <see>
                    sun.security.krb5.internal.Krb5                    
                </see>
            </javadoc>
            <method name="get" type="boolean" line="237">
                <params>
                    <param name="option" type="int"/>
                </params>
            </method>
            <method name="setDefault" type="void" line="242">
                <comment line="247">
                    First see if the IBM hex format is being used.
                     If not, try the Sun&apos;s string (boolean) format.                    
                </comment>
                <scope line="243">
                    <declaration name="config" type="Config" line="245"/>
                    <declaration name="options" type="int" line="252"/>
                    <scope line="255"/>
                    <scope line="257">
                        <scope line="258"/>
                    </scope>
                    <scope line="262"/>
                    <scope line="264">
                        <scope line="265"/>
                    </scope>
                    <scope line="270"/>
                    <scope line="272">
                        <scope line="273"/>
                    </scope>
                </scope>
                <scope line="277">
                    <scope line="278"/>
                </scope>
            </method>
        </class>
    </source>