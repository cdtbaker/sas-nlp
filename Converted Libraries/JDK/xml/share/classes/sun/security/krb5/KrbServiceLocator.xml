<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="java.util.Arrays"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Random"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.List"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi.NamingManager"/>
        <class name="KrbServiceLocator" line="40">
            <comment line="229">
                Randomly select a service record in the range [head, tail] and return
                 its hostport value. Follows the algorithm in RFC 2782.                
            </comment>
            <javadoc line="40">
                This class discovers the location of Kerberos services by querying DNS,
                  as defined in RFC 4120.                
                <author>
                    Seema Malkani                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="SRV_RR" type="String" line="50"/>
            <declaration name="SRV_RR_ATTR" type="String[]" line="51"/>
            <declaration name="SRV_TXT" type="String" line="53"/>
            <declaration name="SRV_TXT_ATTR" type="String[]" line="54"/>
            <declaration name="random" type="Random" line="56"/>
            <method name="KrbServiceLocator" type="constructor" line="58"/>
            <javadoc line="61">
                Locates the KERBEROS service for a given domain.
                  Queries DNS for a list of KERBEROS Service Text Records (TXT) for a
                  given domain name.
                  Information on the mapping of DNS hostnames and domain names
                  to Kerberos realms is stored using DNS TXT records                
                <param>
                    domainName A string domain name.                    
                </param>
                <param>
                    environment The possibly null environment of the context.                    
                </param>
                <return>
                    An ordered list of hostports for the Kerberos service or null if
                      the service has not been located.                    
                </return>
            </javadoc>
            <method name="getKerberosService" type="String[]" line="73">
                <params>
                    <param name="realmName" type="String"/>
                </params>
                <comment line="76">
                    search realm in SRV TXT records                    
                </comment>
                <comment line="80">
                    Create the DNS context using NamingManager rather than using
                     the initial context constructor. This avoids having the initial
                     context constructor call itself (when processing the URL
                     argument in the getAttributes call).                    
                </comment>
                <comment line="86">
                    cannot create a DNS context                    
                </comment>
                <comment line="97">
                    gather the text records                    
                </comment>
                <comment line="105">
                    ignore bad value                    
                </comment>
                <comment line="111">
                    trim                    
                </comment>
                <comment line="121">
                    ignore                    
                </comment>
                <declaration name="dnsUrl" type="String" line="76"/>
                <declaration name="records" type="String[]" line="77"/>
                <scope line="78">
                    <declaration name="ctx" type="Context" line="83"/>
                    <scope line="84"/>
                    <declaration name="attrs" type="Attributes" line="87"/>
                    <declaration name="attr" type="Attribute" line="89"/>
                    <scope line="91">
                        <declaration name="numValues" type="int" line="92"/>
                        <declaration name="numRecords" type="int" line="93"/>
                        <declaration name="txtRecords" type="String[]" line="94"/>
                        <declaration name="i" type="int" line="97"/>
                        <declaration name="j" type="int" line="98"/>
                        <scope line="99">
                            <scope line="100"/>
                            <scope line="103"/>
                        </scope>
                        <scope line="111">
                            <declaration name="trimmed" type="String[]" line="112"/>
                        </scope>
                        <scope line="115"/>
                    </scope>
                </scope>
                <scope line="119"/>
            </method>
            <javadoc line="125">
                Locates the KERBEROS service for a given domain.
                  Queries DNS for a list of KERBEROS Service Location Records (SRV) for a
                  given domain name.                
                <param>
                    domainName A string domain name.                    
                </param>
                <return>
                    An ordered list of hostports for the Kerberos service or null if
                      the service has not been located.                    
                </return>
            </javadoc>
            <method name="getKerberosService" type="String[]" line="134">
                <params>
                    <param name="realmName" type="String"/>
                    <param name="protocol" type="String"/>
                </params>
                <comment line="141">
                    Create the DNS context using NamingManager rather than using
                     the initial context constructor. This avoids having the initial
                     context constructor call itself (when processing the URL
                     argument in the getAttributes call).                    
                </comment>
                <comment line="147">
                    cannot create a DNS context                    
                </comment>
                <comment line="158">
                    create the service records                    
                </comment>
                <comment line="166">
                    ignore bad value                    
                </comment>
                <comment line="172">
                    trim                    
                </comment>
                <comment line="179">
                    Sort the service records in ascending order of their
                     priority value. For records with equal priority, move
                     those with weight 0 to the top of the list.                    
                </comment>
                <comment line="186">
                    extract the host and port number from each service record                    
                </comment>
                <comment line="190">
                    e.printStackTrace();
                     ignore                    
                </comment>
                <declaration name="dnsUrl" type="String" line="136"/>
                <declaration name="hostports" type="String[]" line="137"/>
                <scope line="139">
                    <declaration name="ctx" type="Context" line="144"/>
                    <scope line="145"/>
                    <declaration name="attrs" type="Attributes" line="148"/>
                    <declaration name="attr" type="Attribute" line="150"/>
                    <scope line="152">
                        <declaration name="numValues" type="int" line="153"/>
                        <declaration name="numRecords" type="int" line="154"/>
                        <declaration name="srvRecords" type="SrvRecord[]" line="155"/>
                        <declaration name="i" type="int" line="158"/>
                        <declaration name="j" type="int" line="159"/>
                        <scope line="160">
                            <scope line="161"/>
                            <scope line="164"/>
                        </scope>
                        <scope line="172">
                            <declaration name="trimmed" type="SrvRecord[]" line="173"/>
                        </scope>
                        <scope line="181"/>
                    </scope>
                </scope>
                <scope line="188"/>
            </method>
            <javadoc line="195">
                Extract hosts and port numbers from a list of SRV records.
                  An array of hostports is returned or null if none were found.                
            </javadoc>
            <method name="extractHostports" type="String[]" line="199">
                <params>
                    <param name="srvRecords" type="SrvRecord[]"/>
                </params>
                <comment line="211">
                    find the head and tail of the list of records having the same
                     priority value.                    
                </comment>
                <comment line="220">
                    select hostports from the sublist                    
                </comment>
                <declaration name="hostports" type="String[]" line="200"/>
                <declaration name="head" type="int" line="202"/>
                <declaration name="tail" type="int" line="203"/>
                <declaration name="sublistLength" type="int" line="204"/>
                <declaration name="k" type="int" line="205"/>
                <scope line="206">
                    <scope line="207"/>
                    <scope line="214"/>
                    <scope line="221"/>
                </scope>
            </method>
            <method name="selectHostport" type="String" line="233">
                <params>
                    <param name="srvRecords" type="SrvRecord[]"/>
                    <param name="head" type="int"/>
                    <param name="tail" type="int"/>
                </params>
                <comment line="239">
                    compute the running sum for records between head and tail                    
                </comment>
                <comment line="249">
                    If all records have zero weight, select first available one;
                     otherwise, randomly select a record according to its weight                    
                </comment>
                <comment line="255">
                    make this record unavailable                    
                </comment>
                <scope line="234"/>
                <declaration name="sum" type="int" line="239"/>
                <scope line="240">
                    <scope line="241"/>
                </scope>
                <declaration name="hostport" type="String" line="246"/>
                <declaration name="target" type="int" line="250"/>
                <scope line="251">
                    <scope line="252"/>
                </scope>
            </method>
            <class name="SrvRecord" line="261">
                <comment line="295">
                    Sort records in ascending order of priority value. For records with
                     equal priority move those with weight 0 to the top of the list.                    
                </comment>
                <implements interface="Comparable"/>
                <javadoc line="261">
                    This class holds a DNS service (SRV) record.
                      See http://www.ietf.org/rfc/rfc2782.txt                    
                </javadoc>
                <declaration name="priority" type="int" line="268"/>
                <declaration name="weight" type="int" line="269"/>
                <declaration name="sum" type="int" line="270"/>
                <declaration name="hostport" type="String" line="271"/>
                <javadoc line="273">
                    Creates a service record object from a string record.
                      DNS supplies the string record in the following format:
                      &lt;pre&gt;
                      &lt;Priority&gt; &quot; &quot; &lt;Weight&gt; &quot; &quot; &lt;Port&gt; &quot; &quot; &lt;Host&gt;
                      &lt;/pre&gt;                    
                </javadoc>
                <method name="SrvRecord" type="constructor" line="280">
                    <params>
                        <param name="srvRecord" type="String"/>
                    </params>
                    <declaration name="tokenizer" type="StringTokenizer" line="281"/>
                    <declaration name="port" type="String" line="282"/>
                    <scope line="284"/>
                    <scope line="289"/>
                </method>
                <method name="compareTo" type="int" line="298">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <comment line="302">
                        this &gt; that                        
                    </comment>
                    <comment line="304">
                        this &lt; that                        
                    </comment>
                    <comment line="306">
                        this &lt; that                        
                    </comment>
                    <comment line="308">
                        this &gt; that                        
                    </comment>
                    <comment line="310">
                        this == that                        
                    </comment>
                    <declaration name="that" type="SrvRecord" line="299"/>
                    <scope line="300"/>
                    <scope line="302"/>
                    <scope line="304"/>
                    <scope line="306"/>
                    <scope line="308"/>
                </method>
            </class>
        </class>
    </source>