<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal.Krb5"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Stack"/>
        <import package="java.util.EmptyStackException"/>
        <import package="sun.security.krb5.internal.util.KerberosString"/>
        <class name="Realm" line="43">
            <comment line="180">
                This is protected because the definition of a realm                
            </comment>
            <comment line="181">
                string is fixed                
            </comment>
            <comment line="236">
                First leg of realms parsing. Used by getRealmsList.                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="43">
                Implements the ASN.1 Realm type.
                  &lt;xmp&gt;
                  Realm ::= GeneralString
                  &lt;/xmp&gt;                
            </javadoc>
            <declaration name="realm" type="String" line="51"/>
            <declaration name="DEBUG" type="boolean" line="52"/>
            <method name="Realm" type="constructor" line="54"/>
            <method name="Realm" type="constructor" line="57">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="clone" type="Object" line="61">
                <declaration name="new_realm" type="Realm" line="62"/>
                <scope line="63"/>
            </method>
            <method name="equals" type="boolean" line="69">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="70"/>
                <scope line="74"/>
                <declaration name="that" type="Realm" line="78"/>
                <scope line="79"/>
                <scope line="81"/>
            </method>
            <method name="hashCode" type="int" line="86">
                <declaration name="result" type="int" line="87"/>
                <scope line="89"/>
            </method>
            <javadoc line="96">
                Constructs a Realm object.                
                <param>
                    encoding a Der-encoded data.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <exception>
                    RealmException if an error occurs while parsing a Realm object.                    
                </exception>
            </javadoc>
            <method name="Realm" type="constructor" line="104">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <scope line="105"/>
            </method>
            <method name="toString" type="String" line="115"/>
            <method name="parseRealmAtSeparator" type="String" line="120">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="121"/>
                <declaration name="temp" type="String" line="125"/>
                <declaration name="result" type="String" line="126"/>
                <declaration name="i" type="int" line="127"/>
                <scope line="128">
                    <scope line="129">
                        <scope line="130"/>
                    </scope>
                </scope>
                <scope line="138"/>
            </method>
            <method name="parseRealmComponent" type="String" line="147">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="148"/>
                <declaration name="temp" type="String" line="152"/>
                <declaration name="result" type="String" line="153"/>
                <declaration name="i" type="int" line="154"/>
                <scope line="155">
                    <scope line="156">
                        <scope line="157"/>
                    </scope>
                </scope>
            </method>
            <method name="parseRealm" type="String" line="168">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="result" type="String" line="169"/>
            </method>
            <method name="isValidRealmString" type="boolean" line="181">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="186">
                    <scope line="189"/>
                </scope>
            </method>
            <javadoc line="196">
                Encodes a Realm object.                
                <return>
                    the byte array of encoded KrbCredInfo object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="203">
                <declaration name="out" type="DerOutputStream" line="204"/>
            </method>
            <javadoc line="210">
                Parse (unmarshal) a realm from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of Realm.                    
                </return>
            </javadoc>
            <method name="parse" type="Realm" line="222">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <scope line="223"/>
                <declaration name="der" type="DerValue" line="226"/>
                <scope line="227"/>
                <scope line="229">
                    <declaration name="subDer" type="DerValue" line="230"/>
                </scope>
            </method>
            <method name="doInitialParse" type="String[]" line="239">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <scope line="240"/>
                <scope line="243"/>
                <scope line="247">
                    <declaration name="retList" type="String[]" line="248"/>
                    <scope line="252"/>
                </scope>
            </method>
            <javadoc line="261">
                Returns an array of realms that may be traversed to obtain
                  a TGT from the initiating realm cRealm to the target realm
                  sRealm.
                  &lt;br&gt;
                  There may be an arbitrary number of intermediate realms
                  between cRealm and sRealm. The realms may be organized
                  organized hierarchically, or the paths between them may be
                  specified in the [capaths] stanza of the caller&apos;s
                  Kerberos configuration file. The configuration file is consulted
                  first. Then a hirarchical organization is assumed if no realms
                  are found in the configuration file.
                  &lt;br&gt;
                  The returned list, if not null, contains cRealm as the first
                  entry. sRealm is not included unless it is mistakenly listed
                  in the configuration file as an intermediary realm.                
                <param>
                    cRealm the initiating realm                    
                </param>
                <param>
                    sRealm the target realm                    
                </param>
                <returns>
                    array of realms                    
                </returns>
                <thows>
                    KrbException                    
                </thows>
            </javadoc>
            <method name="getRealmsList" type="String[]" line="284">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <comment line="289">
                    Try [capaths].                    
                </comment>
                <comment line="296">
                    Now assume the realms are organized hierarchically.                    
                </comment>
                <declaration name="retList" type="String[]" line="285"/>
                <scope line="286"/>
                <scope line="293"/>
            </method>
            <javadoc line="303">
                Parses the [capaths] stanza of the configuration file
                  for a list of realms to traverse
                  to obtain credentials from the initiating realm cRealm to
                  the target realm sRealm.                
                <param>
                    cRealm the initiating realm                    
                </param>
                <param>
                    sRealm the target realm                    
                </param>
                <returns>
                    array of realms                    
                </returns>
                <>
                    throws KrbException                    
                </>
            </javadoc>
            <method name="parseCapaths" type="String[]" line="338">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <comment line="314">
                    parseCapaths works for a capaths organized such that
                     for a given client realm C there is a tag C that
                     contains subtags Ci ... Cn that completely define intermediate
                     realms from C to target T. For example:
                    
                     [capaths]
                        TIVOLI.COM = {
                            IBM.COM = IBM_LDAPCENTRAL.COM MOONLITE.ORG
                            IBM_LDAPCENTRAL.COM = LDAPCENTRAL.NET
                            LDAPCENTRAL.NET = .
                        }
                    
                     The tag TIVOLI.COM contains subtags IBM.COM, IBM_LDAPCENTRAL.COM
                     and LDAPCENTRAL.NET that completely define the path from TIVOLI.COM
                     to IBM.COM (TIVOLI.COM-&gt;LADAPCENTRAL.NET-&gt;IBM_LDAPCENTRAL.COM-&gt;IBM
                     or TIVOLI.COM-&gt;MOONLITE.ORG-&gt;IBM.COM).
                    
                     A direct path is assumed for an intermediary whose entry is not
                     &quot;closed&quot; by a &quot;.&quot; In the above example, TIVOLI.COM is assumed
                     to have a direct path to MOONLITE.ORG and MOONLITE.COM
                     in turn to IBM.COM.                    
                </comment>
                <comment line="364">
                    The half-established reversed-path, starting from the final target
                     (sRealm), each item can be connected to by the next one.
                     Might contains wrong item, if found, a bad track is performed                    
                </comment>
                <comment line="372">
                    For debug only                    
                </comment>
                <comment line="391">
                    We have one or more space-separated intermediary realms.
                     Stack them. A null is always added between intermedies of
                     different targets. When this null is popped, it means none
                     of the intermedies for this target is useful (because of
                     infinite loop), the target is then removed from the partial
                     tempList, and the next possible intermediary is tried.                    
                </comment>
                <comment line="431">
                    Get next intermediary realm from the stack                    
                </comment>
                <comment line="447">
                    No more intermediaries. We&apos;re done.                    
                </comment>
                <comment line="469">
                    From (SREALM, T1, T2) to (CREALM, T2, T1)                    
                </comment>
                <declaration name="retList" type="String[]" line="339"/>
                <declaration name="cfg" type="Config" line="341"/>
                <scope line="342"/>
                <scope line="344">
                    <scope line="345"/>
                </scope>
                <declaration name="intermediaries" type="String" line="352"/>
                <scope line="354">
                    <scope line="355"/>
                </scope>
                <declaration name="tempTarget" type="String" line="361"/>
                <declaration name="iStack" type="Stack&lt;String&gt;" line="362"/>
                <declaration name="tempList" type="Vector&lt;String&gt;" line="369"/>
                <declaration name="count" type="int" line="372"/>
                <scope line="375">
                    <scope line="376"/>
                    <scope line="384">
                        <scope line="385"/>
                        <declaration name="ints" type="String[]" line="400"/>
                        <scope line="402">
                            <scope line="404"/>
                            <scope line="407">
                                <scope line="409"/>
                            </scope>
                            <scope line="415"/>
                        </scope>
                    </scope>
                    <scope line="422">
                        <scope line="423"/>
                    </scope>
                    <scope line="435">
                        <scope line="436">
                            <scope line="438"/>
                        </scope>
                    </scope>
                    <scope line="442"/>
                    <scope line="446"/>
                    <scope line="455"/>
                </scope>
                <scope line="465"/>
                <scope line="472"/>
                <scope line="476">
                    <scope line="477"/>
                </scope>
            </method>
            <javadoc line="486">
                Build a list of realm that can be traversed
                  to obtain credentials from the initiating realm cRealm
                  for a service in the target realm sRealm.                
                <param>
                    cRealm the initiating realm                    
                </param>
                <param>
                    sRealm the target realm                    
                </param>
                <returns>
                    array of realms                    
                </returns>
                <throws>
                    KrbException                    
                </throws>
            </javadoc>
            <method name="parseHierarchy" type="String[]" line="497">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <comment line="500">
                    Parse the components and determine common part, if any.                    
                </comment>
                <comment line="509">
                    Parse cRealm                    
                </comment>
                <comment line="528">
                    Parse sRealm                    
                </comment>
                <comment line="550">
                    Determine common components, if any.                    
                </comment>
                <comment line="554">
                    while (sCount &gt; 0 &amp;&amp; cCount &gt; 0 &amp;&amp;                    
                </comment>
                <comment line="555">
                    sComponents[--sCount].equals(cComponents[--cCount]))                    
                </comment>
                <comment line="572">
                    components from common to ancestors                    
                </comment>
                <comment line="618">
                    For an initiator realm A.B.C.D.COM,                    
                </comment>
                <comment line="619">
                    build a list krbtgt/B.C.D.COM@A.B.C.D.COM up to the common part,                    
                </comment>
                <comment line="620">
                    ie the issuer realm is the immediate descendant                    
                </comment>
                <comment line="621">
                    of the target realm.                    
                </comment>
                <comment line="627">
                    cTemp = substring(cRealm, cCount);                    
                </comment>
                <comment line="639">
                    cTemp = substring(sRealm, sCount);                    
                </comment>
                <declaration name="retList" type="String[]" line="498"/>
                <declaration name="cComponents" type="String[]" line="502"/>
                <declaration name="sComponents" type="String[]" line="503"/>
                <declaration name="strTok" type="StringTokenizer" line="505"/>
                <declaration name="cCount" type="int" line="511"/>
                <scope line="514"/>
                <scope line="518">
                    <declaration name="j" type="int" line="521"/>
                    <scope line="522"/>
                </scope>
                <declaration name="sCount" type="int" line="533"/>
                <scope line="536"/>
                <scope line="540">
                    <declaration name="j" type="int" line="543"/>
                    <scope line="544"/>
                </scope>
                <declaration name="commonComponents" type="int" line="552"/>
                <scope line="559"/>
                <declaration name="cCommonStart" type="int" line="563"/>
                <declaration name="sCommonStart" type="int" line="564"/>
                <declaration name="links" type="int" line="566"/>
                <scope line="568"/>
                <scope line="575"/>
                <scope line="579">
                    <scope line="580">
                        <declaration name="commonPart" type="String" line="593"/>
                    </scope>
                </scope>
                <scope line="605"/>
                <scope line="613"/>
                <declaration name="cTemp" type="String" line="623"/>
                <declaration name="i" type="int" line="624"/>
                <scope line="625">
                    <scope line="630"/>
                </scope>
                <scope line="637">
                    <scope line="641"/>
                </scope>
            </method>
            <method name="substring" type="String" line="651">
                <params>
                    <param name="realm" type="String"/>
                    <param name="componentIndex" type="int"/>
                </params>
                <declaration name="i" type="int" line="652"/>
                <scope line="654"/>
            </method>
            <method name="getRandIndex" type="int" line="663">
                <params>
                    <param name="arraySize" type="int"/>
                </params>
            </method>
            <method name="printNames" type="void" line="667">
                <params>
                    <param name="names" type="String[]"/>
                </params>
                <declaration name="len" type="int" line="671"/>
                <declaration name="i" type="int" line="672"/>
                <scope line="674"/>
            </method>
        </class>
    </source>