<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal.Krb5"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Stack"/>
        <import package="java.util.EmptyStackException"/>
        <import package="sun.security.krb5.internal.util.KerberosString"/>
        <class name="Realm" line="10">
            <implements interface="Cloneable"/>
            <javadoc line="10">
                Implements the ASN.1 Realm type.
                  &lt;xmp&gt;
                  Realm ::= GeneralString
                  &lt;/xmp&gt;                
            </javadoc>
            <declaration name="realm" type="String" line="17"/>
            <declaration name="DEBUG" type="boolean" line="18"/>
            <method name="Realm" type="constructor" line="19"/>
            <method name="Realm" type="constructor" line="21">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="clone" type="Object" line="24">
                <declaration name="new_realm" type="Realm" line="25"/>
                <scope line="26"/>
            </method>
            <method name="equals" type="boolean" line="31">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="32"/>
                <scope line="35"/>
                <declaration name="that" type="Realm" line="38"/>
                <scope line="39"/>
                <scope line="42"/>
            </method>
            <method name="hashCode" type="int" line="46">
                <declaration name="result" type="int" line="47"/>
                <scope line="48"/>
            </method>
            <javadoc line="53">
                Constructs a Realm object.                
                <param>
                    encoding a Der-encoded data.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <exception>
                    RealmException if an error occurs while parsing a Realm object.                    
                </exception>
            </javadoc>
            <method name="Realm" type="constructor" line="60">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <scope line="61"/>
            </method>
            <method name="toString" type="String" line="68"/>
            <method name="parseRealmAtSeparator" type="String" line="71">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="72"/>
                <declaration name="temp" type="String" line="75"/>
                <declaration name="result" type="String" line="76"/>
                <declaration name="i" type="int" line="77"/>
                <scope line="78">
                    <scope line="79">
                        <scope line="80"/>
                    </scope>
                </scope>
                <scope line="87"/>
            </method>
            <method name="parseRealmComponent" type="String" line="93">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="94"/>
                <declaration name="temp" type="String" line="97"/>
                <declaration name="result" type="String" line="98"/>
                <declaration name="i" type="int" line="99"/>
                <scope line="100">
                    <scope line="101">
                        <scope line="102"/>
                    </scope>
                </scope>
            </method>
            <method name="parseRealm" type="String" line="111">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="result" type="String" line="112"/>
            </method>
            <method name="isValidRealmString" type="boolean" line="118">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="121">
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="128">
                Encodes a Realm object.                
                <return>
                    the byte array of encoded KrbCredInfo object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="134">
                <declaration name="out" type="DerOutputStream" line="135"/>
            </method>
            <javadoc line="139">
                Parse (unmarshal) a realm from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of Realm.                    
                </return>
            </javadoc>
            <method name="parse" type="Realm" line="149">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <scope line="150"/>
                <declaration name="der" type="DerValue" line="153"/>
                <scope line="154"/>
                <scope line="157">
                    <declaration name="subDer" type="DerValue" line="158"/>
                </scope>
            </method>
            <method name="doInitialParse" type="String[]" line="162">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="169">
                    <declaration name="retList" type="String[]" line="170"/>
                    <scope line="173"/>
                </scope>
            </method>
            <javadoc line="180">
                Returns an array of realms that may be traversed to obtain
                  a TGT from the initiating realm cRealm to the target realm
                  sRealm.
                  &lt;br&gt;
                  There may be an arbitrary number of intermediate realms
                  between cRealm and sRealm. The realms may be organized
                  organized hierarchically, or the paths between them may be
                  specified in the [capaths] stanza of the caller&apos;s
                  Kerberos configuration file. The configuration file is consulted
                  first. Then a hirarchical organization is assumed if no realms
                  are found in the configuration file.
                  &lt;br&gt;
                  The returned list, if not null, contains cRealm as the first
                  entry. sRealm is not included unless it is mistakenly listed
                  in the configuration file as an intermediary realm.                
                <param>
                    cRealm the initiating realm                    
                </param>
                <param>
                    sRealm the target realm                    
                </param>
                <returns>
                    array of realms                    
                </returns>
                <thows>
                    KrbException                    
                </thows>
            </javadoc>
            <method name="getRealmsList" type="String[]" line="201">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <declaration name="retList" type="String[]" line="202"/>
                <scope line="203"/>
                <scope line="207"/>
            </method>
            <javadoc line="213">
                Parses the [capaths] stanza of the configuration file
                  for a list of realms to traverse
                  to obtain credentials from the initiating realm cRealm to
                  the target realm sRealm.                
                <param>
                    cRealm the initiating realm                    
                </param>
                <param>
                    sRealm the target realm                    
                </param>
                <returns>
                    array of realms                    
                </returns>
                <>
                    throws KrbException                    
                </>
            </javadoc>
            <method name="parseCapaths" type="String[]" line="223">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <declaration name="retList" type="String[]" line="224"/>
                <declaration name="cfg" type="Config" line="225"/>
                <scope line="226"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
                <declaration name="intermediaries" type="String" line="235"/>
                <scope line="236">
                    <scope line="237"/>
                </scope>
                <declaration name="tempTarget" type="String" line="242"/>
                <declaration name="iStack" type="Stack&lt;String&gt;" line="243"/>
                <declaration name="tempList" type="Vector&lt;String&gt;" line="244"/>
                <declaration name="count" type="int" line="246"/>
                <scope line="248">
                    <scope line="249"/>
                    <scope line="253">
                        <scope line="254"/>
                        <declaration name="ints" type="String[]" line="258"/>
                        <scope line="259">
                            <scope line="261"/>
                            <scope line="264">
                                <scope line="266"/>
                            </scope>
                            <scope line="270"/>
                        </scope>
                    </scope>
                    <scope line="275">
                        <scope line="276"/>
                    </scope>
                    <scope line="281">
                        <scope line="282">
                            <scope line="284"/>
                        </scope>
                    </scope>
                    <scope line="289"/>
                    <scope line="292"/>
                    <scope line="296"/>
                </scope>
                <scope line="302"/>
                <scope line="307"/>
                <scope line="310">
                    <scope line="311"/>
                </scope>
            </method>
            <javadoc line="317">
                Build a list of realm that can be traversed
                  to obtain credentials from the initiating realm cRealm
                  for a service in the target realm sRealm.                
                <param>
                    cRealm the initiating realm                    
                </param>
                <param>
                    sRealm the target realm                    
                </param>
                <returns>
                    array of realms                    
                </returns>
                <throws>
                    KrbException                    
                </throws>
            </javadoc>
            <method name="parseHierarchy" type="String[]" line="326">
                <params>
                    <param name="cRealm" type="String"/>
                    <param name="sRealm" type="String"/>
                </params>
                <declaration name="retList" type="String[]" line="327"/>
                <declaration name="cComponents" type="String[]" line="328"/>
                <declaration name="sComponents" type="String[]" line="329"/>
                <declaration name="strTok" type="StringTokenizer" line="330"/>
                <declaration name="cCount" type="int" line="331"/>
                <scope line="333"/>
                <scope line="336">
                    <declaration name="j" type="int" line="338"/>
                    <scope line="339"/>
                </scope>
                <declaration name="sCount" type="int" line="344"/>
                <scope line="346"/>
                <scope line="349">
                    <declaration name="j" type="int" line="351"/>
                    <scope line="352"/>
                </scope>
                <declaration name="commonComponents" type="int" line="356"/>
                <scope line="357"/>
                <declaration name="cCommonStart" type="int" line="360"/>
                <declaration name="sCommonStart" type="int" line="361"/>
                <declaration name="links" type="int" line="362"/>
                <scope line="363"/>
                <scope line="369"/>
                <scope line="372">
                    <scope line="373">
                        <declaration name="commonPart" type="String" line="377"/>
                    </scope>
                </scope>
                <scope line="384"/>
                <scope line="389"/>
                <declaration name="cTemp" type="String" line="392"/>
                <declaration name="i" type="int" line="393"/>
                <scope line="394">
                    <scope line="397"/>
                </scope>
                <scope line="401">
                    <scope line="404"/>
                </scope>
            </method>
            <method name="substring" type="String" line="410">
                <params>
                    <param name="realm" type="String"/>
                    <param name="componentIndex" type="int"/>
                </params>
                <declaration name="i" type="int" line="411"/>
                <scope line="412"/>
            </method>
            <method name="getRandIndex" type="int" line="418">
                <params>
                    <param name="arraySize" type="int"/>
                </params>
            </method>
            <method name="printNames" type="void" line="421">
                <params>
                    <param name="names" type="String[]"/>
                </params>
                <declaration name="len" type="int" line="423"/>
                <declaration name="i" type="int" line="424"/>
                <scope line="426"/>
            </method>
        </class>
    </source>