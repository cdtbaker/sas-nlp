<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.crypto">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.Config"/>
        <import package="sun.security.krb5.EncryptedData"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.KrbCryptoException"/>
        <import package="javax.crypto"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <class name="EType" line="48">
            <comment line="184">
                Note: the first 2 entries of BUILTIN_ETYPES and BUILTIN_ETYPES_NOAES256                
            </comment>
            <comment line="185">
                should be kept DES-related. They will be removed when allow_weak_crypto                
            </comment>
            <comment line="186">
                is set to false.                
            </comment>
            <comment line="206">
                used in Config                
            </comment>
            <declaration name="DEBUG" type="boolean" line="50"/>
            <declaration name="ALLOW_WEAK_CRYPTO" type="boolean" line="51"/>
            <scope line="53">
                <declaration name="allowed" type="boolean" line="54"/>
                <scope line="55">
                    <declaration name="cfg" type="Config" line="56"/>
                    <declaration name="temp" type="String" line="57"/>
                </scope>
                <scope line="59">
                    <scope line="60"/>
                </scope>
            </scope>
            <method name="getInstance" type="EType" line="70">
                <params>
                    <param name="eTypeConst" type="int"/>
                </params>
                <declaration name="eType" type="EType" line="71"/>
                <declaration name="eTypeName" type="String" line="72"/>
                <declaration name="msg" type="String" line="111"/>
                <scope line="115"/>
            </method>
            <method name="eType" type="int" line="121"/>
            <method name="minimumPadSize" type="int" line="123"/>
            <method name="confounderSize" type="int" line="125"/>
            <method name="checksumType" type="int" line="127"/>
            <method name="checksumSize" type="int" line="129"/>
            <method name="blockSize" type="int" line="131"/>
            <method name="keyType" type="int" line="133"/>
            <method name="keySize" type="int" line="135"/>
            <method name="encrypt" type="byte[]" line="137"/>
            <method name="encrypt" type="byte[]" line="140"/>
            <method name="decrypt" type="byte[]" line="143"/>
            <method name="decrypt" type="byte[]" line="146"/>
            <method name="dataSize" type="int" line="151">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="150">
                    throws Asn1Exception                    
                </comment>
                <comment line="152">
                    EncodeRef ref = new EncodeRef(data, startOfData());                    
                </comment>
                <comment line="153">
                    return ref.end - startOfData();                    
                </comment>
                <comment line="154">
                    should be the above according to spec, but in fact                    
                </comment>
                <comment line="155">
                    implementations include the pad bytes in the data size                    
                </comment>
            </method>
            <method name="padSize" type="int" line="159">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="startOfChecksum" type="int" line="164"/>
            <method name="startOfData" type="int" line="168"/>
            <method name="startOfPad" type="int" line="172">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="decryptedData" type="byte[]" line="176">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="tempSize" type="int" line="177"/>
                <declaration name="result" type="byte[]" line="178"/>
            </method>
            <declaration name="BUILTIN_ETYPES" type="int[]" line="187"/>
            <declaration name="BUILTIN_ETYPES_NOAES256" type="int[]" line="196"/>
            <method name="getBuiltInDefaults" type="int[]" line="206">
                <comment line="211">
                    should not happen                    
                </comment>
                <comment line="220">
                    The last 2 etypes are now weak ones                    
                </comment>
                <declaration name="allowed" type="int" line="207"/>
                <scope line="208"/>
                <scope line="210"/>
                <declaration name="result" type="int[]" line="213"/>
                <scope line="214"/>
                <scope line="216"/>
                <scope line="219"/>
            </method>
            <javadoc line="226">
                Retrieves the default etypes from the configuration file, or
                  if that&apos;s not available, return the built-in list of default etypes.                
            </javadoc>
            <method name="getDefaults" type="int[]" line="231">
                <params>
                    <param name="configName" type="String"/>
                </params>
                <comment line="230">
                    used in KrbAsReq, KeyTab                    
                </comment>
                <scope line="232"/>
                <scope line="234">
                    <scope line="235"/>
                </scope>
            </method>
            <javadoc line="244">
                Retrieve the default etypes from the configuration file for
                  those etypes for which there are corresponding keys.
                  Used in scenario we have some keys from a keytab with etypes
                  different from those named in configName. Then, in order
                  to decrypt an AS-REP, we should only ask for etypes for which
                  we have keys.                
            </javadoc>
            <method name="getDefaults" type="int[]" line="253">
                <params>
                    <param name="configName" type="String"/>
                    <param name="keys" type="EncryptionKey[]"/>
                </params>
                <declaration name="answer" type="int[]" line="254"/>
                <scope line="255"/>
                <declaration name="list" type="List&lt;Integer&gt;" line="260"/>
                <scope line="261">
                    <scope line="262"/>
                </scope>
                <declaration name="len" type="int" line="266"/>
                <scope line="267">
                    <declaration name="keystr" type="StringBuffer" line="268"/>
                    <scope line="269"/>
                </scope>
                <scope line="277">
                    <scope line="279"/>
                </scope>
            </method>
            <method name="isSupported" type="boolean" line="286">
                <params>
                    <param name="eTypeConst" type="int"/>
                    <param name="config" type="int[]"/>
                </params>
                <scope line="287">
                    <scope line="288"/>
                </scope>
            </method>
            <method name="isSupported" type="boolean" line="295">
                <params>
                    <param name="eTypeConst" type="int"/>
                </params>
                <declaration name="enabledETypes" type="int[]" line="296"/>
            </method>
            <method name="toString" type="String" line="300">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
        </class>
    </source>