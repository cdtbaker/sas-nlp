<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.util"/>
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="java.io.IOException"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.util.Arrays"/>
        <import package="sun.security.krb5.internal.ktab.KeyTab"/>
        <import package="sun.security.krb5.internal.ccache.CCacheOutputStream"/>
        <import package="javax.crypto.spec.DESKeySpec"/>
        <import package="javax.crypto.spec.DESedeKeySpec"/>
        <class name="EncryptionKey" line="45">
            <comment line="76">
                not part of ASN1 encoding;                
            </comment>
            <comment line="101">
                Obtains the latest version of the secret key of
                 the principal from a keytab.
                
                 @param princ the principal whose secret key is desired
                 @param keytab the path to the keytab file. A value of null
                 will be accepted to indicate that the default path should be
                 searched.
                 @returns the secret key or null if none was found.                
            </comment>
            <comment line="111">
                Replaced by acquireSecretKeys
                public static EncryptionKey acquireSecretKey(PrincipalName princ,
                String keytab)
                throws KrbException, IOException {
                
                if (princ == null) {
                throw new IllegalArgumentException(
                &quot;Cannot have null pricipal name to look in keytab.&quot;);
                }
                
                KeyTab ktab = KeyTab.getInstance(keytab);
                
                if (ktab == null)
                return null;
                
                return ktab.readServiceKey(princ);
                }                
            </comment>
            <comment line="208">
                Used in Krb5AcceptCredential, self                
            </comment>
            <comment line="278">
                Used in javax.security.auth.kerberos.KeyImpl                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="45">
                This class encapsulates the concept of an EncryptionKey. An encryption
                  key is defined in RFC 4120 as:
                  EncryptionKey   ::= SEQUENCE {
                  keytype         [0] Int32 -- actually encryption type --,
                  keyvalue        [1] OCTET STRING
                  }
                  keytype
                  This field specifies the encryption type of the encryption key
                  that follows in the keyvalue field.  Although its name is
                  &quot;keytype&quot;, it actually specifies an encryption type.  Previously,
                  multiple cryptosystems that performed encryption differently but
                  were capable of using keys with the same characteristics were
                  permitted to share an assigned number to designate the type of
                  key; this usage is now deprecated.
                  keyvalue
                  This field contains the key itself, encoded as an octet string.                
            </javadoc>
            <declaration name="NULL_KEY" type="EncryptionKey" line="70"/>
            <declaration name="keyType" type="int" line="73"/>
            <declaration name="keyValue" type="byte[]" line="74"/>
            <declaration name="kvno" type="Integer" line="75"/>
            <declaration name="DEBUG" type="boolean" line="77"/>
            <method name="getEType" type="int" line="79"/>
            <method name="getKeyVersionNumber" type="Integer" line="83"/>
            <javadoc line="87">
                Returns the raw key bytes, not in any ASN.1 encoding.                
            </javadoc>
            <method name="getBytes" type="byte[]" line="90">
                <comment line="91">
                    This method cannot be called outside sun.security, hence no                    
                </comment>
                <comment line="92">
                    cloning. getEncoded() calls this method.                    
                </comment>
            </method>
            <method name="clone" type="Object" line="96"/>
            <javadoc line="130">
                Obtains all versions of the secret key of the principal from a
                  keytab.                
                <Param>
                    princ the principal whose secret key is desired                    
                </Param>
                <param>
                    keytab the path to the keytab file. A value of null
                      will be accepted to indicate that the default path should be
                      searched.                    
                </param>
                <returns>
                    an array of secret keys or null if none were found.                    
                </returns>
            </javadoc>
            <method name="acquireSecretKeys" type="EncryptionKey[]" line="141">
                <params>
                    <param name="princ" type="PrincipalName"/>
                    <param name="keytab" type="String"/>
                </params>
                <comment line="147">
                    KeyTab getInstance(keytab) will call KeyTab.getInstance()                    
                </comment>
                <comment line="148">
                    if keytab is null                    
                </comment>
                <declaration name="ktab" type="KeyTab" line="149"/>
            </method>
            <javadoc line="153">
                Obtains a key for a given etype with salt and optional s2kparams                
                <param>
                    password NOT null                    
                </param>
                <param>
                    salt NOT null                    
                </param>
                <param>
                    etype                    
                </param>
                <param>
                    s2kparams can be NULL                    
                </param>
            </javadoc>
            <method name="acquireSecretKey" type="EncryptionKey" line="162">
                <params>
                    <param name="password" type="char[]"/>
                    <param name="salt" type="String"/>
                    <param name="etype" type="int"/>
                    <param name="s2kparams" type="byte[]"/>
                </params>
            </method>
            <javadoc line="169">
                Generate a list of keys using the given principal and password.
                  Construct a key for each configured etype.
                  Caller is responsible for clearing password.                
            </javadoc>
            <method name="acquireSecretKeys" type="EncryptionKey[]" line="183">
                <params>
                    <param name="password" type="char[]"/>
                    <param name="salt" type="String"/>
                </params>
                <comment line="174">
                    Usually, when keyType is decoded from ASN.1 it will contain a
                     value indicating what the algorithm to be used is. However, when
                     converting from a password to a key for the AS-EXCHANGE, this
                     keyType will not be available. Use builtin list of default etypes
                     as the default in that case. If default_tkt_enctypes was set in
                     the libdefaults of krb5.conf, then use that sequence.                    
                </comment>
                <declaration name="etypes" type="int[]" line="185"/>
                <scope line="186"/>
                <declaration name="encKeys" type="EncryptionKey[]" line="190"/>
                <scope line="191">
                    <scope line="192"/>
                    <scope line="196">
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <method name="EncryptionKey" type="constructor" line="210">
                <params>
                    <param name="keyValue" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="kvno" type="Integer"/>
                </params>
                <scope line="212"/>
                <scope line="215"/>
            </method>
            <javadoc line="223">
                Constructs an EncryptionKey by using the specified key type and key
                  value.  It is used to recover the key when retrieving data from
                  credential cache file.                
            </javadoc>
            <method name="EncryptionKey" type="constructor" line="232">
                <params>
                    <param name="keyType" type="int"/>
                    <param name="keyValue" type="byte[]"/>
                </params>
                <comment line="229">
                    Used in JSSE (KerberosWrapper), Credentials,                    
                </comment>
                <comment line="230">
                    javax.security.auth.kerberos.KeyImpl                    
                </comment>
            </method>
            <method name="stringToKey" type="byte[]" line="237">
                <params>
                    <param name="password" type="char[]"/>
                    <param name="salt" type="String"/>
                    <param name="s2kparams" type="byte[]"/>
                    <param name="keyType" type="int"/>
                </params>
                <declaration name="slt" type="char[]" line="239"/>
                <declaration name="pwsalt" type="char[]" line="240"/>
                <scope line="245"/>
                <scope line="268">
                    <declaration name="ke" type="KrbCryptoException" line="269"/>
                </scope>
                <scope line="272"/>
            </method>
            <method name="EncryptionKey" type="constructor" line="280">
                <params>
                    <param name="password" type="char[]"/>
                    <param name="salt" type="String"/>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="292">
                    validate if AES256 is enabled                    
                </comment>
                <scope line="282"/>
                <scope line="284"/>
                <scope line="286"/>
                <scope line="288"/>
                <scope line="290">
                    <scope line="293"/>
                </scope>
                <scope line="297"/>
            </method>
            <javadoc line="306">
                Generates a sub-sessionkey from a given session key.                
            </javadoc>
            <method name="EncryptionKey" type="constructor" line="310">
                <params>
                    <param name="key" type="EncryptionKey"/>
                </params>
                <comment line="309">
                    Used in KrbApRep, KrbApReq                    
                </comment>
                <comment line="311">
                    generate random sub-session key                    
                </comment>
                <comment line="318">
                    check for key parity and weak keys                    
                </comment>
                <comment line="320">
                    check for DES key                    
                </comment>
                <comment line="323">
                    fix DES key parity                    
                </comment>
                <comment line="327">
                    check for weak key                    
                </comment>
                <comment line="332">
                    check for 3DES key                    
                </comment>
                <comment line="334">
                    fix 3DES key parity                    
                </comment>
                <comment line="338">
                    check for weak keys                    
                </comment>
                <scope line="313"/>
                <scope line="319">
                    <scope line="322">
                        <scope line="324"/>
                        <scope line="328"/>
                    </scope>
                    <scope line="333">
                        <scope line="335"/>
                        <declaration name="oneKey" type="byte[]" line="339"/>
                        <scope line="340">
                            <scope line="342"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="347">
                    <declaration name="ke" type="KrbCryptoException" line="348"/>
                </scope>
            </method>
            <javadoc line="354">
                Constructs an instance of EncryptionKey type.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1
                      encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded
                      data.                    
                </exception>
            </javadoc>
            <method name="EncryptionKey" type="constructor" line="365">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <comment line="364">
                    Used in javax.security.auth.kerberos.KeyImpl                    
                </comment>
                <declaration name="der" type="DerValue" line="366"/>
                <scope line="367"/>
                <scope line="371"/>
                <scope line="377"/>
                <scope line="382"/>
            </method>
            <javadoc line="387">
                Returns the ASN.1 encoding of this EncryptionKey.
                  &lt;xmp&gt;
                  EncryptionKey ::=   SEQUENCE {
                  keytype[0]    INTEGER,
                  keyvalue[1]   OCTET STRING }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
                <return>
                    byte array of encoded EncryptionKey object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1
                      encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded
                      data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="409">
                <declaration name="bytes" type="DerOutputStream" line="410"/>
                <declaration name="temp" type="DerOutputStream" line="411"/>
            </method>
            <method name="destroy" type="void" line="424"/>
            <javadoc line="431">
                Parse (unmarshal) an Encryption key from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <param>
                    data the Der input stream value, which contains one or more
                      marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1
                      encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded
                      data.                    
                </exception>
                <return>
                    an instance of EncryptionKey.                    
                </return>
            </javadoc>
            <method name="parse" type="EncryptionKey" line="449">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <scope line="451"/>
                <declaration name="der" type="DerValue" line="454"/>
                <scope line="455"/>
                <scope line="457">
                    <declaration name="subDer" type="DerValue" line="458"/>
                </scope>
            </method>
            <javadoc line="463">
                Writes key value in FCC format to a &lt;code&gt;CCacheOutputStream&lt;/code&gt;.                
                <param>
                    cos a <code>CCacheOutputStream</code> to be written to.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs.                    
                </exception>
                <see>
                    sun.security.krb5.internal.ccache.CCacheOutputStream                    
                </see>
            </javadoc>
            <method name="writeKey" type="void" line="472">
                <params>
                    <param name="cos" type="CCacheOutputStream"/>
                </params>
                <comment line="475">
                    we use KRB5_FCC_FVNO_3                    
                </comment>
                <comment line="476">
                    key type is recorded twice.                    
                </comment>
                <scope line="478"/>
            </method>
            <method name="toString" type="String" line="483"/>
            <javadoc line="493">
                Find a key with given etype                
            </javadoc>
            <method name="findKey" type="EncryptionKey" line="497">
                <params>
                    <param name="etype" type="int"/>
                    <param name="keys" type="EncryptionKey[]"/>
                </params>
            </method>
            <javadoc line="501">
                Determines if a kvno matches another kvno. Used in the method
                  findKey(type, kvno, keys). Always returns true if either input
                  is null or zero, in case any side does not have kvno info available.
                  Note: zero is included because N/A is not a legal value for kvno
                  in javax.security.auth.kerberos.KerberosKey. Therefore, the info
                  that the kvno is N/A might be lost when converting between this
                  class and KerberosKey.                
            </javadoc>
            <method name="versionMatches" type="boolean" line="511">
                <params>
                    <param name="v1" type="Integer"/>
                    <param name="v2" type="Integer"/>
                </params>
                <scope line="512"/>
            </method>
            <javadoc line="518">
                Find a key with given etype and kvno                
                <param>
                    kvno if null, return any (first?) key                    
                </param>
            </javadoc>
            <method name="findKey" type="EncryptionKey" line="523">
                <params>
                    <param name="etype" type="int"/>
                    <param name="kvno" type="Integer"/>
                    <param name="keys" type="EncryptionKey[]"/>
                </params>
                <comment line="525">
                    check if encryption type is supported                    
                </comment>
                <comment line="546">
                    Key not found.                    
                </comment>
                <comment line="547">
                    allow DES key to be used for the DES etypes                    
                </comment>
                <scope line="526"/>
                <declaration name="ktype" type="int" line="531"/>
                <declaration name="etypeFound" type="boolean" line="532"/>
                <scope line="533">
                    <scope line="535">
                        <declaration name="kv" type="Integer" line="536"/>
                        <scope line="537">
                            <scope line="539"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="549">
                    <scope line="550">
                        <scope line="553">
                            <declaration name="kv" type="Integer" line="554"/>
                            <scope line="556"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="562"/>
            </method>
        </class>
    </source>