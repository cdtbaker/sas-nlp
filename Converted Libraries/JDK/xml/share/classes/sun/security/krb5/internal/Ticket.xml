<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5.PrincipalName"/>
        <import package="sun.security.krb5.EncryptedData"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.Realm"/>
        <import package="sun.security.krb5.RealmException"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <class name="Ticket" line="42">
            <implements interface="Cloneable"/>
            <javadoc line="42">
                Implements the ASN.1 Ticket type.
                  &lt;xmp&gt;
                  Ticket               ::= [APPLICATION 1] SEQUENCE {
                  tkt-vno         [0] INTEGER (5),
                  realm           [1] Realm,
                  sname           [2] PrincipalName,
                  enc-part        [3] EncryptedData -- EncTicketPart
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
            </javadoc>
            <declaration name="tkt_vno" type="int" line="62"/>
            <declaration name="realm" type="Realm" line="63"/>
            <declaration name="sname" type="PrincipalName" line="64"/>
            <declaration name="encPart" type="EncryptedData" line="65"/>
            <method name="Ticket" type="constructor" line="67"/>
            <method name="clone" type="Object" line="70">
                <declaration name="new_ticket" type="Ticket" line="71"/>
            </method>
            <method name="Ticket" type="constructor" line="83">
                <params>
                    <param name="new_realm" type="Realm"/>
                    <param name="new_sname" type="PrincipalName"/>
                    <param name="new_encPart" type="EncryptedData"/>
                </params>
            </method>
            <method name="Ticket" type="constructor" line="91">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="Ticket" type="constructor" line="96">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <javadoc line="100">
                Initializes a Ticket object.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <exception>
                    KrbApErrException if the value read from the DER-encoded data stream does not match the pre-defined value.                    
                </exception>
                <exception>
                    RealmException if an error occurs while parsing a Realm object.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="110">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="111"/>
                <declaration name="subDer" type="DerValue" line="112"/>
            </method>
            <javadoc line="133">
                Encodes a Ticket object.                
                <return>
                    byte array of encoded ticket object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="139">
                <declaration name="bytes" type="DerOutputStream" line="140"/>
                <declaration name="temp" type="DerOutputStream" line="141"/>
                <declaration name="der" type="DerValue" line="142"/>
                <declaration name="ticket" type="DerOutputStream" line="150"/>
            </method>
            <javadoc line="155">
                Parse (unmarshal) a Ticket from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of Ticket.                    
                </return>
            </javadoc>
            <method name="parse" type="Ticket" line="166">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="169"/>
                <scope line="170"/>
                <scope line="173">
                    <declaration name="subDer" type="DerValue" line="174"/>
                </scope>
            </method>
        </class>
    </source>