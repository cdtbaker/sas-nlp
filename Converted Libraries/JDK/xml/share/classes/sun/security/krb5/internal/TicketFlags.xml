<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.internal.util.KerberosFlags"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <class name="TicketFlags" line="6">
            <extends class="KerberosFlags"/>
            <javadoc line="6">
                Implements the ASN.1TicketFlags type.
                  TicketFlags ::= BIT STRING
                  {
                  reserved(0),
                  forwardable(1),
                  forwarded(2),
                  proxiable(3),
                  proxy(4),
                  may-postdate(5),
                  postdated(6),
                  invalid(7),
                  renewable(8),
                  initial(9),
                  pre-authent(10),
                  hw-authent(11)
                  }                
            </javadoc>
            <method name="TicketFlags" type="constructor" line="25"/>
            <method name="TicketFlags" type="constructor" line="28">
                <params>
                    <param name="flags" type="boolean[]"/>
                </params>
                <scope line="30"/>
            </method>
            <method name="TicketFlags" type="constructor" line="34">
                <params>
                    <param name="size" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="TicketFlags" type="constructor" line="38">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <javadoc line="41">
                Parse (unmarshal) a ticket flag from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of TicketFlags.                    
                </return>
            </javadoc>
            <method name="parse" type="TicketFlags" line="51">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="53"/>
                <scope line="54"/>
                <scope line="57">
                    <declaration name="subDer" type="DerValue" line="58"/>
                </scope>
            </method>
            <method name="clone" type="Object" line="62">
                <scope line="63"/>
                <scope line="66"/>
            </method>
            <method name="match" type="boolean" line="70">
                <params>
                    <param name="options" type="LoginOptions"/>
                </params>
                <declaration name="matched" type="boolean" line="71"/>
                <scope line="72">
                    <scope line="73">
                        <scope line="74"/>
                    </scope>
                </scope>
            </method>
            <method name="match" type="boolean" line="81">
                <params>
                    <param name="flags" type="TicketFlags"/>
                </params>
                <declaration name="matched" type="boolean" line="82"/>
                <scope line="83">
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="90">
                Returns the string representative of ticket flags.                
            </javadoc>
            <method name="toString" type="String" line="93">
                <declaration name="sb" type="StringBuffer" line="94"/>
                <declaration name="flags" type="boolean[]" line="95"/>
                <scope line="96">
                    <scope line="97"/>
                </scope>
                <declaration name="result" type="String" line="138"/>
                <scope line="139"/>
            </method>
        </class>
    </source>