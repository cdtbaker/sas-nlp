<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.internal.util.KerberosFlags"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <class name="TicketFlags" line="38">
            <extends class="KerberosFlags"/>
            <javadoc line="38">
                Implements the ASN.1TicketFlags type.
                  TicketFlags ::= BIT STRING
                  {
                  reserved(0),
                  forwardable(1),
                  forwarded(2),
                  proxiable(3),
                  proxy(4),
                  may-postdate(5),
                  postdated(6),
                  invalid(7),
                  renewable(8),
                  initial(9),
                  pre-authent(10),
                  hw-authent(11)
                  }                
            </javadoc>
            <method name="TicketFlags" type="constructor" line="58"/>
            <method name="TicketFlags" type="constructor" line="62">
                <params>
                    <param name="flags" type="boolean[]"/>
                </params>
                <scope line="64"/>
            </method>
            <method name="TicketFlags" type="constructor" line="69">
                <params>
                    <param name="size" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="TicketFlags" type="constructor" line="75">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <javadoc line="79">
                Parse (unmarshal) a ticket flag from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of TicketFlags.                    
                </return>
            </javadoc>
            <method name="parse" type="TicketFlags" line="91">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="94"/>
                <scope line="95"/>
                <scope line="98">
                    <declaration name="subDer" type="DerValue" line="99"/>
                </scope>
            </method>
            <method name="clone" type="Object" line="104">
                <scope line="105"/>
                <scope line="108"/>
            </method>
            <method name="match" type="boolean" line="113">
                <params>
                    <param name="options" type="LoginOptions"/>
                </params>
                <comment line="116">
                    We currently only consider if forwardable renewable and proxiable are match                    
                </comment>
                <declaration name="matched" type="boolean" line="114"/>
                <scope line="116">
                    <scope line="117">
                        <scope line="118"/>
                    </scope>
                </scope>
            </method>
            <method name="match" type="boolean" line="125">
                <params>
                    <param name="flags" type="TicketFlags"/>
                </params>
                <declaration name="matched" type="boolean" line="126"/>
                <scope line="127">
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="136">
                Returns the string representative of ticket flags.                
            </javadoc>
            <method name="toString" type="String" line="139">
                <declaration name="sb" type="StringBuffer" line="140"/>
                <declaration name="flags" type="boolean[]" line="141"/>
                <scope line="142">
                    <scope line="143"/>
                </scope>
                <declaration name="result" type="String" line="184"/>
                <scope line="185"/>
            </method>
        </class>
    </source>