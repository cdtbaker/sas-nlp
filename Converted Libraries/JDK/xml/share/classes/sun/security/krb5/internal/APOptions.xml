<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.internal.util.KerberosFlags"/>
        <import package="sun.security.util"/>
        <import package="java.io.IOException"/>
        <class name="APOptions" line="38">
            <extends class="KerberosFlags"/>
            <javadoc line="38">
                Implements the ASN.1 APOptions type.
                  &lt;xmp&gt;
                  APOptions    ::= KerberosFlags
                  -- reserved(0),
                  -- use-session-key(1),
                  -- mutual-required(2)
                  &lt;/xmp&gt;
                  KerberosFlags   ::= BIT STRING (SIZE (32..MAX))
                  -- minimum number of bits shall be sent,
                  -- but no fewer than 32
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
            </javadoc>
            <method name="APOptions" type="constructor" line="60"/>
            <method name="APOptions" type="constructor" line="64">
                <params>
                    <param name="oneBit" type="int"/>
                </params>
            </method>
            <method name="APOptions" type="constructor" line="68">
                <params>
                    <param name="size" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="70"/>
            </method>
            <method name="APOptions" type="constructor" line="75">
                <params>
                    <param name="data" type="boolean[]"/>
                </params>
                <scope line="77"/>
            </method>
            <method name="APOptions" type="constructor" line="82">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
            </method>
            <javadoc line="86">
                Parse (unmarshal) an APOptions from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional.                    
                </param>
                <return>
                    an instance of APOptions.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="parse" type="APOptions" line="99">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="102"/>
                <scope line="103"/>
                <scope line="105">
                    <declaration name="subDer" type="DerValue" line="106"/>
                </scope>
            </method>
        </class>
    </source>