<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal.crypto.dk">
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.Mac"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.Arrays"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.krb5.Confounder"/>
        <import package="sun.security.krb5.internal.crypto.KeyUsage"/>
        <import package="sun.security.krb5.KrbCryptoException"/>
        <class name="DkCrypto" line="16">
            <javadoc line="16">
                Implements Derive Key cryptography functionality as defined in RFC 3961.
                  http://www.ietf.org/rfc/rfc3961.txt
                  This is an abstract class. Concrete subclasses need to implement
                  the abstract methods.                
            </javadoc>
            <declaration name="debug" type="boolean" line="23"/>
            <declaration name="KERBEROS_CONSTANT" type="byte[]" line="24"/>
            <method name="getKeySeedLength" type="int" line="25"/>
            <method name="randomToKey" type="byte[]" line="26"/>
            <method name="getCipher" type="Cipher" line="27"/>
            <method name="getChecksumLength" type="int" line="28"/>
            <method name="getHmac" type="byte[]" line="29"/>
            <javadoc line="30">
                From RFC 3961.
                  encryption function       conf = random string of length c
                  pad = shortest string to bring confounder
                  and plaintext to a length that&apos;s a
                  multiple of m
                  (C1, newIV) = E(Ke, conf | plaintext | pad,
                  oldstate.ivec)
                  H1 = HMAC(Ki, conf | plaintext | pad)
                  ciphertext =  C1 | H1[1..h]
                  newstate.ivec = newIV                
                <param>
                    ivec initial vector to use when initializing the cipher; if null,
                      then blocksize number of zeros are used,                    
                </param>
                <param>
                    new_ivec if non-null, it is updated upon return to be the
                      new ivec to use when calling encrypt next time                    
                </param>
            </javadoc>
            <method name="encrypt" type="byte[]" line="46">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="new_ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="47"/>
                <declaration name="Ke" type="byte[]" line="50"/>
                <declaration name="Ki" type="byte[]" line="51"/>
                <scope line="52">
                    <declaration name="constant" type="byte[]" line="53"/>
                    <scope line="60">
                        <scope line="62"/>
                    </scope>
                    <declaration name="encCipher" type="Cipher" line="70"/>
                    <declaration name="blockSize" type="int" line="71"/>
                    <declaration name="confounder" type="byte[]" line="72"/>
                    <declaration name="plainSize" type="int" line="73"/>
                    <scope line="74"/>
                    <declaration name="toBeEncrypted" type="byte[]" line="78"/>
                    <declaration name="cipherSize" type="int" line="82"/>
                    <declaration name="ccSize" type="int" line="83"/>
                    <declaration name="ciphertext" type="byte[]" line="84"/>
                    <scope line="86">
                        <scope line="88"/>
                    </scope>
                    <scope line="94"/>
                    <declaration name="hmac" type="byte[]" line="98"/>
                    <scope line="99"/>
                </scope>
                <scope line="106">
                    <scope line="107"/>
                    <scope line="110"/>
                </scope>
            </method>
            <javadoc line="115">
                Performs encryption using given key only; does not add
                  confounder, padding, or checksum. Incoming data to be encrypted
                  assumed to have the correct blocksize.
                  Ignore key usage.                
            </javadoc>
            <method name="encryptRaw" type="byte[]" line="121">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="122">
                    <scope line="124"/>
                </scope>
                <declaration name="encCipher" type="Cipher" line="130"/>
                <declaration name="blockSize" type="int" line="131"/>
                <scope line="132"/>
                <declaration name="cipherSize" type="int" line="135"/>
                <declaration name="ciphertext" type="byte[]" line="136"/>
            </method>
            <javadoc line="140">
                Decrypts data using specified key and initial vector.                
                <param>
                    baseKey encryption key to use                    
                </param>
                <param>
                    ciphertext  encrypted data to be decrypted                    
                </param>
                <param>
                    usage ignored                    
                </param>
            </javadoc>
            <method name="decryptRaw" type="byte[]" line="146">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="147">
                    <scope line="149"/>
                </scope>
                <declaration name="decCipher" type="Cipher" line="155"/>
                <declaration name="blockSize" type="int" line="156"/>
                <scope line="157"/>
                <declaration name="decrypted" type="byte[]" line="160"/>
                <scope line="161"/>
            </method>
            <javadoc line="166">
                @param baseKey key from which keys are to be derived using usage                
                <param>
                    ciphertext  E(Ke, conf | plaintext | padding, ivec) | H1[1..h]                    
                </param>
            </javadoc>
            <method name="decrypt" type="byte[]" line="170">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="ivec" type="byte[]"/>
                    <param name="ciphertext" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="171"/>
                <declaration name="Ke" type="byte[]" line="174"/>
                <declaration name="Ki" type="byte[]" line="175"/>
                <scope line="176">
                    <declaration name="constant" type="byte[]" line="177"/>
                    <scope line="184">
                        <scope line="186"/>
                    </scope>
                    <declaration name="decCipher" type="Cipher" line="194"/>
                    <declaration name="blockSize" type="int" line="195"/>
                    <declaration name="cksumSize" type="int" line="196"/>
                    <declaration name="cipherSize" type="int" line="197"/>
                    <declaration name="decrypted" type="byte[]" line="198"/>
                    <scope line="199"/>
                    <scope line="204"/>
                    <declaration name="calculatedHmac" type="byte[]" line="208"/>
                    <scope line="209"/>
                    <declaration name="cksumFailed" type="boolean" line="213"/>
                    <scope line="214">
                        <scope line="215">
                            <scope line="216"/>
                        </scope>
                    </scope>
                    <scope line="222"/>
                    <scope line="225">
                        <scope line="227"/>
                    </scope>
                    <declaration name="plaintext" type="byte[]" line="231"/>
                </scope>
                <scope line="235">
                    <scope line="236"/>
                    <scope line="239"/>
                </scope>
            </method>
            <method name="roundup" type="int" line="244">
                <params>
                    <param name="n" type="int"/>
                    <param name="blocksize" type="int"/>
                </params>
            </method>
            <method name="calculateChecksum" type="byte[]" line="247">
                <params>
                    <param name="baseKey" type="byte[]"/>
                    <param name="usage" type="int"/>
                    <param name="input" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="248"/>
                <declaration name="constant" type="byte[]" line="251"/>
                <declaration name="Kc" type="byte[]" line="257"/>
                <scope line="258"/>
                <scope line="265">
                    <declaration name="hmac" type="byte[]" line="266"/>
                    <scope line="267"/>
                    <scope line="270"/>
                    <scope line="273">
                        <declaration name="buf" type="byte[]" line="274"/>
                    </scope>
                    <scope line="278"/>
                </scope>
                <scope line="282"/>
            </method>
            <method name="dk" type="byte[]" line="286">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="constant" type="byte[]"/>
                </params>
            </method>
            <method name="dr" type="byte[]" line="289">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="constant" type="byte[]"/>
                </params>
                <declaration name="encCipher" type="Cipher" line="290"/>
                <declaration name="blocksize" type="int" line="291"/>
                <scope line="292"/>
                <declaration name="toBeEncrypted" type="byte[]" line="295"/>
                <declaration name="keybytes" type="int" line="296"/>
                <declaration name="rawkey" type="byte[]" line="297"/>
                <declaration name="posn" type="int" line="298"/>
                <declaration name="n" type="int" line="299"/>
                <scope line="300">
                    <scope line="301"/>
                    <declaration name="cipherBlock" type="byte[]" line="304"/>
                    <scope line="305"/>
                    <scope line="309"/>
                </scope>
            </method>
            <method name="nfold" type="byte[]" line="318">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="outbits" type="int"/>
                </params>
                <declaration name="inbits" type="int" line="319"/>
                <declaration name="a" type="int" line="321"/>
                <scope line="324"/>
                <scope line="330"/>
                <declaration name="out" type="byte[]" line="335"/>
                <declaration name="thisbyte" type="int" line="337"/>
                <declaration name="msbit" type="int" line="338"/>
                <scope line="339">
                    <scope line="346"/>
                    <scope line="350"/>
                </scope>
                <scope line="354">
                    <scope line="355"/>
                </scope>
            </method>
            <method name="bytesToString" type="String" line="363">
                <params>
                    <param name="digest" type="byte[]"/>
                </params>
                <declaration name="digestString" type="StringBuffer" line="364"/>
                <scope line="365">
                    <scope line="366"/>
                    <scope line="369"/>
                </scope>
            </method>
            <method name="binaryStringToBytes" type="byte[]" line="375">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="usageStr" type="char[]" line="376"/>
                <declaration name="usage" type="byte[]" line="377"/>
                <scope line="378">
                    <declaration name="a" type="byte" line="379"/>
                    <declaration name="b" type="byte" line="380"/>
                </scope>
            </method>
            <method name="traceOutput" type="void" line="385">
                <params>
                    <param name="traceTag" type="String"/>
                    <param name="output" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="386">
                    <declaration name="out" type="ByteArrayOutputStream" line="387"/>
                </scope>
                <scope line="391"/>
            </method>
            <method name="charToUtf8" type="byte[]" line="394">
                <params>
                    <param name="chars" type="char[]"/>
                </params>
                <declaration name="utf8" type="Charset" line="395"/>
                <declaration name="cb" type="CharBuffer" line="396"/>
                <declaration name="bb" type="ByteBuffer" line="397"/>
                <declaration name="len" type="int" line="398"/>
                <declaration name="answer" type="byte[]" line="399"/>
            </method>
            <method name="charToUtf16" type="byte[]" line="403">
                <params>
                    <param name="chars" type="char[]"/>
                </params>
                <declaration name="utf8" type="Charset" line="404"/>
                <declaration name="cb" type="CharBuffer" line="405"/>
                <declaration name="bb" type="ByteBuffer" line="406"/>
                <declaration name="len" type="int" line="407"/>
                <declaration name="answer" type="byte[]" line="408"/>
            </method>
        </class>
    </source>