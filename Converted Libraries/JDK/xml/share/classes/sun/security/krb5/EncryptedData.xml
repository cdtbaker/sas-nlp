<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.util"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="sun.security.krb5.internal"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <class name="EncryptedData" line="40">
            <comment line="49">
                optional                
            </comment>
            <comment line="51">
                not part of ASN.1 encoding                
            </comment>
            <comment line="53">
                ----------------+-----------+----------+----------------+---------------                
            </comment>
            <comment line="54">
                Encryption type |etype value|block size|minimum pad size|confounder size                
            </comment>
            <comment line="55">
                ----------------+-----------+----------+----------------+---------------                
            </comment>
            <comment line="57">
                1          0                0                
            </comment>
            <comment line="59">
                8          4                8                
            </comment>
            <comment line="61">
                8          0                8                
            </comment>
            <comment line="63">
                8          0                8                
            </comment>
            <comment line="65">
                draft-brezak-win2k-krb-rc4-hmac-04.txt                
            </comment>
            <comment line="67">
                1                
            </comment>
            <comment line="68">
                NOTE: the exportable RC4-HMAC is not supported;                
            </comment>
            <comment line="69">
                it is no longer a usable encryption type                
            </comment>
            <comment line="71">
                1                
            </comment>
            <comment line="73">
                draft-ietf-krb-wg-crypto-07.txt                
            </comment>
            <comment line="75">
                8     0                8                
            </comment>
            <comment line="77">
                draft-raeburn-krb-rijndael-krb-07.txt                
            </comment>
            <comment line="79">
                16      0           16                
            </comment>
            <comment line="81">
                16      0           16                
            </comment>
            <comment line="83">
                                
            </comment>
            <comment line="101">
                Used in JSSE (com.sun.net.ssl.internal.KerberosPreMasterSecret)                
            </comment>
            <comment line="111">
                Not used.
                public EncryptedData(
                EncryptionKey key,
                byte[] plaintext)
                throws KdcErrException, KrbCryptoException {
                EType etypeEngine = EType.getInstance(key.getEType());
                cipher = etypeEngine.encrypt(plaintext, key.getBytes());
                eType = key.getEType();
                kvno = key.getKeyVersionNumber();
                }                
            </comment>
            <comment line="124">
                used in KrbApRep, KrbApReq, KrbAsReq, KrbCred, KrbPriv                
            </comment>
            <comment line="125">
                Used in JSSE (com.sun.net.ssl.internal.KerberosPreMasterSecret)                
            </comment>
            <comment line="137">
                Not used.
                public EncryptedData(
                EncryptionKey key,
                byte[] ivec,
                byte[] plaintext)
                throws KdcErrException, KrbCryptoException {
                EType etypeEngine = EType.getInstance(key.getEType());
                cipher = etypeEngine.encrypt(plaintext, key.getBytes(), ivec);
                eType = key.getEType();
                kvno = key.getKeyVersionNumber();
                }                
            </comment>
            <comment line="151">
                Not used.
                EncryptedData(
                StringBuffer password,
                byte[] plaintext)
                throws KdcErrException, KrbCryptoException {
                EncryptionKey key = new EncryptionKey(password);
                EType etypeEngine = EType.getInstance(key.getEType());
                cipher = etypeEngine.encrypt(plaintext, key.getBytes());
                eType = key.getEType();
                kvno = key.getKeyVersionNumber();
                }                
            </comment>
            <comment line="165">
                currently destructive on cipher                
            </comment>
            <comment line="183">
                currently destructive on cipher
                 Not used.
                public byte[] decrypt(
                EncryptionKey key,
                byte[] ivec, int usage)
                throws KdcErrException, KrbApErrException, KrbCryptoException {
                 XXX check for matching eType and kvno here
                EType etypeEngine = EType.getInstance(eType);
                plain = etypeEngine.decrypt(cipher, key.getBytes(), ivec, usage);
                cipher = null;
                return etypeEngine.decryptedData(plain);
                }
                
                 currently destructive on cipher
                 Not used.
                byte[] decrypt(StringBuffer password)
                throws KdcErrException, KrbApErrException, KrbCryptoException {
                EncryptionKey key = new EncryptionKey(password);
                 XXX check for matching eType here
                EType etypeEngine = EType.getInstance(eType);
                plain = etypeEngine.decrypt(cipher, key.getBytes());
                cipher = null;
                return etypeEngine.decryptedData(plain);
                }                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="40">
                This class encapsulates Kerberos encrypted data. It allows
                  callers access to both the ASN.1 encoded form of the EncryptedData
                  type as well as the raw cipher text.                
            </javadoc>
            <declaration name="eType" type="int" line="47"/>
            <declaration name="kvno" type="Integer" line="48"/>
            <declaration name="cipher" type="byte[]" line="49"/>
            <declaration name="plain" type="byte[]" line="50"/>
            <declaration name="ETYPE_NULL" type="int" line="55"/>
            <declaration name="ETYPE_DES_CBC_CRC" type="int" line="57"/>
            <declaration name="ETYPE_DES_CBC_MD4" type="int" line="59"/>
            <declaration name="ETYPE_DES_CBC_MD5" type="int" line="61"/>
            <declaration name="ETYPE_ARCFOUR_HMAC" type="int" line="65"/>
            <declaration name="ETYPE_ARCFOUR_HMAC_EXP" type="int" line="69"/>
            <declaration name="ETYPE_DES3_CBC_HMAC_SHA1_KD" type="int" line="73"/>
            <declaration name="ETYPE_AES128_CTS_HMAC_SHA1_96" type="int" line="77"/>
            <declaration name="ETYPE_AES256_CTS_HMAC_SHA1_96" type="int" line="79"/>
            <method name="EncryptedData" type="constructor" line="83"/>
            <method name="clone" type="Object" line="86">
                <declaration name="new_encryptedData" type="EncryptedData" line="87"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <method name="EncryptedData" type="constructor" line="104">
                <params>
                    <param name="new_eType" type="int"/>
                    <param name="new_kvno" type="Integer"/>
                    <param name="new_cipher" type="byte[]"/>
                </params>
            </method>
            <method name="EncryptedData" type="constructor" line="129">
                <params>
                    <param name="key" type="EncryptionKey"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="usage" type="int"/>
                </params>
                <declaration name="etypeEngine" type="EType" line="130"/>
            </method>
            <method name="decrypt" type="byte[]" line="167">
                <params>
                    <param name="key" type="EncryptionKey"/>
                    <param name="usage" type="int"/>
                </params>
                <scope line="168"/>
                <declaration name="etypeEngine" type="EType" line="176"/>
            </method>
            <method name="decryptedData" type="byte[]" line="209">
                <scope line="210">
                    <declaration name="etypeEngine" type="EType" line="211"/>
                </scope>
            </method>
            <javadoc line="217">
                Constructs an instance of EncryptedData type.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded
                      data.                    
                </exception>
            </javadoc>
            <method name="EncryptedData" type="constructor" line="228">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <comment line="226">
                                        
                </comment>
                <declaration name="der" type="DerValue" line="230"/>
                <scope line="231"/>
                <scope line="235"/>
                <scope line="237"/>
                <scope line="241">
                    <declaration name="i" type="int" line="243"/>
                </scope>
                <scope line="245"/>
                <scope line="249"/>
                <scope line="251"/>
                <scope line="254"/>
            </method>
            <javadoc line="259">
                Returns an ASN.1 encoded EncryptedData type.
                  &lt;xmp&gt;
                  EncryptedData   ::= SEQUENCE {
                  etype   [0] Int32 -- EncryptionType --,
                  kvno    [1] UInt32 OPTIONAL,
                  cipher  [2] OCTET STRING -- ciphertext
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.
                  &lt;p&gt;                
                <return>
                    byte array of encoded EncryptedData object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="283">
                <comment line="291">
                    encode as an unsigned integer (UInt32)                    
                </comment>
                <declaration name="bytes" type="DerOutputStream" line="284"/>
                <declaration name="temp" type="DerOutputStream" line="285"/>
                <scope line="290"/>
            </method>
            <javadoc line="306">
                Parse (unmarshal) an EncryptedData from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <param>
                    data the Der input stream value, which contains one or more
                      marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
                <return>
                    an instance of EncryptedData.                    
                </return>
            </javadoc>
            <method name="parse" type="EncryptedData" line="325">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="329"/>
                <scope line="330"/>
                <scope line="332">
                    <declaration name="subDer" type="DerValue" line="333"/>
                </scope>
            </method>
            <javadoc line="338">
                Reset asn.1 data stream after decryption, remove redundant bytes.                
                <param>
                    data the decrypted data from decrypt().                    
                </param>
                <return>
                    the reset byte array which holds exactly one asn1 datum
                      including its tag and length.                    
                </return>
            </javadoc>
            <method name="reset" type="byte[]" line="345">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="347">
                    for asn.1 encoded data, we use length field to                    
                </comment>
                <comment line="348">
                    determine the data length and remove redundant paddings.                    
                </comment>
                <declaration name="bytes" type="byte[]" line="346"/>
                <scope line="349"/>
                <scope line="352">
                    <scope line="353">
                        <declaration name="len" type="int" line="354"/>
                        <declaration name="result" type="int" line="355"/>
                        <scope line="356"/>
                    </scope>
                </scope>
            </method>
            <method name="getEType" type="int" line="366"/>
            <method name="getKeyVersionNumber" type="Integer" line="370"/>
            <javadoc line="374">
                Returns the raw cipher text bytes, not in ASN.1 encoding.                
            </javadoc>
            <method name="getBytes" type="byte[]" line="377"/>
        </class>
    </source>