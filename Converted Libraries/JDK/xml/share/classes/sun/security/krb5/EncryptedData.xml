<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.util"/>
        <import package="sun.security.krb5.internal.crypto"/>
        <import package="sun.security.krb5.internal"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <class name="EncryptedData" line="7">
            <implements interface="Cloneable"/>
            <javadoc line="7">
                This class encapsulates Kerberos encrypted data. It allows
                  callers access to both the ASN.1 encoded form of the EncryptedData
                  type as well as the raw cipher text.                
            </javadoc>
            <declaration name="eType" type="int" line="13"/>
            <declaration name="kvno" type="Integer" line="14"/>
            <declaration name="cipher" type="byte[]" line="15"/>
            <declaration name="plain" type="byte[]" line="16"/>
            <declaration name="ETYPE_NULL" type="int" line="17"/>
            <declaration name="ETYPE_DES_CBC_CRC" type="int" line="18"/>
            <declaration name="ETYPE_DES_CBC_MD4" type="int" line="19"/>
            <declaration name="ETYPE_DES_CBC_MD5" type="int" line="20"/>
            <declaration name="ETYPE_ARCFOUR_HMAC" type="int" line="21"/>
            <declaration name="ETYPE_ARCFOUR_HMAC_EXP" type="int" line="22"/>
            <declaration name="ETYPE_DES3_CBC_HMAC_SHA1_KD" type="int" line="23"/>
            <declaration name="ETYPE_AES128_CTS_HMAC_SHA1_96" type="int" line="24"/>
            <declaration name="ETYPE_AES256_CTS_HMAC_SHA1_96" type="int" line="25"/>
            <method name="EncryptedData" type="constructor" line="26"/>
            <method name="clone" type="Object" line="28">
                <declaration name="new_encryptedData" type="EncryptedData" line="29"/>
                <scope line="31"/>
                <scope line="34"/>
            </method>
            <method name="EncryptedData" type="constructor" line="40">
                <params>
                    <param name="new_eType" type="int"/>
                    <param name="new_kvno" type="Integer"/>
                    <param name="new_cipher" type="byte[]"/>
                </params>
            </method>
            <method name="EncryptedData" type="constructor" line="45">
                <params>
                    <param name="key" type="EncryptionKey"/>
                    <param name="plaintext" type="byte[]"/>
                    <param name="usage" type="int"/>
                </params>
                <declaration name="etypeEngine" type="EType" line="46"/>
            </method>
            <method name="decrypt" type="byte[]" line="51">
                <params>
                    <param name="key" type="EncryptionKey"/>
                    <param name="usage" type="int"/>
                </params>
                <scope line="52"/>
                <declaration name="etypeEngine" type="EType" line="55"/>
            </method>
            <method name="decryptedData" type="byte[]" line="60">
                <scope line="61">
                    <declaration name="etypeEngine" type="EType" line="62"/>
                </scope>
            </method>
            <javadoc line="67">
                Constructs an instance of EncryptedData type.                
                <param>
                    encoding a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded
                      data.                    
                </exception>
            </javadoc>
            <method name="EncryptedData" type="constructor" line="75">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="76"/>
                <scope line="77"/>
                <scope line="81"/>
                <scope line="84"/>
                <scope line="87">
                    <declaration name="i" type="int" line="89"/>
                </scope>
                <scope line="92"/>
                <scope line="96"/>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <javadoc line="106">
                Returns an ASN.1 encoded EncryptedData type.
                  &lt;xmp&gt;
                  EncryptedData   ::= SEQUENCE {
                  etype   [0] Int32 -- EncryptionType --,
                  kvno    [1] UInt32 OPTIONAL,
                  cipher  [2] OCTET STRING -- ciphertext
                  }
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.
                  &lt;p&gt;                
                <return>
                    byte array of encoded EncryptedData object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="127">
                <declaration name="bytes" type="DerOutputStream" line="128"/>
                <declaration name="temp" type="DerOutputStream" line="129"/>
                <scope line="133"/>
            </method>
            <javadoc line="144">
                Parse (unmarshal) an EncryptedData from a DER input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <param>
                    data the Der input stream value, which contains one or more
                      marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an
                      ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading
                      encoded data.                    
                </exception>
                <return>
                    an instance of EncryptedData.                    
                </return>
            </javadoc>
            <method name="parse" type="EncryptedData" line="158">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="160"/>
                <scope line="161"/>
                <scope line="164">
                    <declaration name="subDer" type="DerValue" line="165"/>
                </scope>
            </method>
            <javadoc line="169">
                Reset asn.1 data stream after decryption, remove redundant bytes.                
                <param>
                    data the decrypted data from decrypt().                    
                </param>
                <return>
                    the reset byte array which holds exactly one asn1 datum
                      including its tag and length.                    
                </return>
            </javadoc>
            <method name="reset" type="byte[]" line="175">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="bytes" type="byte[]" line="176"/>
                <scope line="177"/>
                <scope line="181">
                    <scope line="182">
                        <declaration name="len" type="int" line="183"/>
                        <declaration name="result" type="int" line="184"/>
                        <scope line="185"/>
                    </scope>
                </scope>
            </method>
            <method name="getEType" type="int" line="194"/>
            <method name="getKeyVersionNumber" type="Integer" line="197"/>
            <javadoc line="200">
                Returns the raw cipher text bytes, not in ASN.1 encoding.                
            </javadoc>
            <method name="getBytes" type="byte[]" line="203"/>
        </class>
    </source>