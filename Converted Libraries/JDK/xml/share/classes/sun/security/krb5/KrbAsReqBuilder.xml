<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <import package="javax.security.auth.kerberos.KeyTab"/>
        <import package="sun.security.jgss.krb5.Krb5Util"/>
        <import package="sun.security.krb5.internal.HostAddresses"/>
        <import package="sun.security.krb5.internal.KDCOptions"/>
        <import package="sun.security.krb5.internal.KRBError"/>
        <import package="sun.security.krb5.internal.KerberosTime"/>
        <import package="sun.security.krb5.internal.Krb5"/>
        <import package="sun.security.krb5.internal.PAData"/>
        <import package="sun.security.krb5.internal.crypto.EType"/>
        <class name="KrbAsReqBuilder" line="13">
            <javadoc line="13">
                A manager class for AS-REQ communications.
                  This class does:
                  1. Gather information to create AS-REQ
                  2. Create and send AS-REQ
                  3. Receive AS-REP and KRB-ERROR (-KRB_ERR_RESPONSE_TOO_BIG) and parse them
                  4. Emit credentials and secret keys (for JAAS storeKey=true with password)
                  This class does not:
                  1. Deal with real communications (KdcComm does it, and TGS-REQ)
                  a. Name of KDCs for a realm
                  b. Server availability, timeout, UDP or TCP
                  d. KRB_ERR_RESPONSE_TOO_BIG
                  2. Stores its own copy of password, this means:
                  a. Do not change/wipe it before Builder finish
                  b. Builder will not wipe it for you
                  With this class:
                  1. KrbAsReq has only one constructor
                  2. Krb5LoginModule and Kinit call a single builder
                  3. Better handling of sensitive info                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="options" type="KDCOptions" line="35"/>
            <declaration name="cname" type="PrincipalName" line="36"/>
            <declaration name="sname" type="PrincipalName" line="37"/>
            <declaration name="from" type="KerberosTime" line="38"/>
            <declaration name="till" type="KerberosTime" line="39"/>
            <declaration name="rtime" type="KerberosTime" line="40"/>
            <declaration name="addresses" type="HostAddresses" line="41"/>
            <declaration name="password" type="char[]" line="42"/>
            <declaration name="ktab" type="KeyTab" line="43"/>
            <declaration name="paList" type="PAData[]" line="44"/>
            <declaration name="req" type="KrbAsReq" line="45"/>
            <declaration name="rep" type="KrbAsRep" line="46"/>
            <declaration name="State" type="enum" line="47"/>
            <scope line="47"/>
            <declaration name="state" type="State" line="48"/>
            <method name="init" type="void" line="49">
                <params>
                    <param name="cname" type="PrincipalName"/>
                </params>
                <scope line="50"/>
            </method>
            <javadoc line="56">
                Creates a builder to be used by {@code cname} with existing keys.                
                <param>
                    cname the client of the AS-REQ. Must not be null. Might have no
                      realm, where default realm will be used. This realm will be the target
                      realm for AS-REQ. I believe a client should only get initial TGT from
                      its own realm.                    
                </param>
                <param>
                    keys must not be null. if empty, might be quite useless.
                      This argument will neither be modified nor stored by the method.                    
                </param>
                <throws>
                    KrbException                    
                </throws>
            </javadoc>
            <method name="KrbAsReqBuilder" type="constructor" line="66">
                <params>
                    <param name="cname" type="PrincipalName"/>
                    <param name="ktab" type="KeyTab"/>
                </params>
            </method>
            <javadoc line="71">
                Creates a builder to be used by {@code cname} with a known password.                
                <param>
                    cname the client of the AS-REQ. Must not be null. Might have no
                      realm, where default realm will be used. This realm will be the target
                      realm for AS-REQ. I believe a client should only get initial TGT from
                      its own realm.                    
                </param>
                <param>
                    pass must not be null. This argument will neither be modified
                      nor stored by the method.                    
                </param>
                <throws>
                    KrbException                    
                </throws>
            </javadoc>
            <method name="KrbAsReqBuilder" type="constructor" line="81">
                <params>
                    <param name="cname" type="PrincipalName"/>
                    <param name="pass" type="char[]"/>
                </params>
            </method>
            <javadoc line="86">
                Retrieves an array of secret keys for the client. This is used when
                  the client supplies password but need keys to act as an acceptor
                  (in JAAS words, isInitiator=true and storeKey=true)                
                <return>
                    generated keys from password. PA-DATA from server might be used.
                      All &quot;default_tkt_enctypes&quot; keys will be generated, Never null.                    
                </return>
                <throws>
                    IllegalStateException if not constructed from a password                    
                </throws>
                <throws>
                    KrbException                    
                </throws>
            </javadoc>
            <method name="getKeys" type="EncryptionKey[]" line="95">
                <scope line="97">
                    <declaration name="eTypes" type="int[]" line="98"/>
                    <declaration name="result" type="EncryptionKey[]" line="99"/>
                    <declaration name="salt" type="String" line="100"/>
                    <scope line="101">
                        <declaration name="snp" type="PAData.SaltAndParams" line="102"/>
                        <scope line="103"/>
                    </scope>
                    <scope line="109">
                        <scope line="110">
                            <declaration name="snp" type="PAData.SaltAndParams" line="111"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="117"/>
            </method>
            <javadoc line="121">
                Sets or clears options. If cleared, default options will be used
                  at creation time.                
                <param>
                    options                    
                </param>
            </javadoc>
            <method name="setOptions" type="void" line="126">
                <params>
                    <param name="options" type="KDCOptions"/>
                </params>
            </method>
            <javadoc line="130">
                Sets or clears target. If cleared, KrbAsReq might choose krbtgt
                  for cname realm                
                <param>
                    sname                    
                </param>
            </javadoc>
            <method name="setTarget" type="void" line="135">
                <params>
                    <param name="sname" type="PrincipalName"/>
                </params>
            </method>
            <javadoc line="139">
                Adds or clears addresses. KrbAsReq might add some if empty
                  field not allowed                
                <param>
                    addresses                    
                </param>
            </javadoc>
            <method name="setAddresses" type="void" line="144">
                <params>
                    <param name="addresses" type="HostAddresses"/>
                </params>
            </method>
            <javadoc line="148">
                Build a KrbAsReq object from all info fed above. Normally this method
                  will be called twice: initial AS-REQ and second with pakey                
                <param>
                    key null (initial AS-REQ) or pakey (with preauth)                    
                </param>
                <return>
                    the KrbAsReq object                    
                </return>
                <throws>
                    KrbException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="build" type="KrbAsReq" line="156">
                <params>
                    <param name="key" type="EncryptionKey"/>
                </params>
                <declaration name="eTypes" type="int[]" line="157"/>
                <scope line="158"/>
                <scope line="161">
                    <declaration name="ks" type="EncryptionKey[]" line="162"/>
                </scope>
            </method>
            <javadoc line="168">
                Parses AS-REP, decrypts enc-part, retrieves ticket and session key                
                <throws>
                    KrbException                    
                </throws>
                <throws>
                    Asn1Exception                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="resolve" type="KrbAsReqBuilder" line="174">
                <scope line="175"/>
                <scope line="178"/>
                <scope line="181">
                    <scope line="182"/>
                    <scope line="185">
                        <declaration name="extraLen" type="int" line="186"/>
                        <scope line="187">
                            <declaration name="oldLen" type="int" line="188"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="196">
                Communication until AS-REP or non preauth-related KRB-ERROR received                
                <throws>
                    KrbException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="send" type="KrbAsReqBuilder" line="201">
                <declaration name="preAuthFailedOnce" type="boolean" line="202"/>
                <declaration name="comm" type="KdcComm" line="203"/>
                <declaration name="pakey" type="EncryptionKey" line="204"/>
                <scope line="205">
                    <scope line="206"/>
                    <scope line="211">
                        <scope line="212">
                            <scope line="213"/>
                            <declaration name="kerr" type="KRBError" line="217"/>
                            <scope line="218">
                                <declaration name="ks" type="EncryptionKey[]" line="219"/>
                            </scope>
                            <scope line="224">
                                <declaration name="snp" type="PAData.SaltAndParams" line="225"/>
                                <scope line="226"/>
                                <scope line="229"/>
                            </scope>
                        </scope>
                        <scope line="235"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="241">
                Performs AS-REQ send and AS-REP receive.
                  Maybe a state is needed here, to divide prepare process and getCreds.                
                <throws>
                    KrbException                    
                </throws>
                <throws>
                    Asn1Exception                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="action" type="KrbAsReqBuilder" line="248"/>
            <javadoc line="253">
                Gets Credentials object after action                
            </javadoc>
            <method name="getCreds" type="Credentials" line="256"/>
            <javadoc line="260">
                Gets another type of Credentials after action                
            </javadoc>
            <method name="getCCreds" type="sun.security.krb5.internal.ccache.Credentials" line="263"/>
            <javadoc line="267">
                Destroys the object and clears keys and password info.                
            </javadoc>
            <method name="destroy" type="void" line="270">
                <scope line="272"/>
            </method>
            <javadoc line="276">
                Checks if the current state is the specified one.                
                <param>
                    st the expected state                    
                </param>
                <param>
                    msg error message if state is not correct                    
                </param>
                <throws>
                    IllegalStateException if state is not correct                    
                </throws>
            </javadoc>
            <method name="checkState" type="void" line="282">
                <params>
                    <param name="st" type="State"/>
                    <param name="msg" type="String"/>
                </params>
                <scope line="283"/>
            </method>
        </class>
    </source>