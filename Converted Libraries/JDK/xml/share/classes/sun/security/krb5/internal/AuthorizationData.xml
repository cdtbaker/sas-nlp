<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5.internal">
        <import package="sun.security.util"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="java.util.Vector"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.krb5.internal.ccache.CCacheOutputStream"/>
        <class name="AuthorizationData" line="39">
            <implements interface="Cloneable"/>
            <javadoc line="39">
                In RFC4120, the ASN.1 AuthorizationData is defined as:
                  AuthorizationData            ::= SEQUENCE OF SEQUENCE {
                  ad-type         [0] Int32,
                  ad-data         [1] OCTET STRING
                  }
                  Here, two classes are used to implement it and they can be represented as follows:
                  AuthorizationData ::= SEQUENCE OF AuthorizationDataEntry
                  AuthorizationDataEntry ::= SEQUENCE {
                  ad-type[0]  Int32,
                  ad-data[1]  OCTET STRING
                  }                
            </javadoc>
            <declaration name="entry" type="AuthorizationDataEntry[]" line="57"/>
            <method name="AuthorizationData" type="constructor" line="59"/>
            <method name="AuthorizationData" type="constructor" line="63">
                <params>
                    <param name="new_entries" type="AuthorizationDataEntry[]"/>
                </params>
                <scope line="64">
                    <scope line="66">
                        <scope line="67"/>
                        <scope line="69"/>
                    </scope>
                </scope>
            </method>
            <method name="AuthorizationData" type="constructor" line="76">
                <params>
                    <param name="new_entry" type="AuthorizationDataEntry"/>
                </params>
            </method>
            <method name="clone" type="Object" line="81">
                <declaration name="new_authorizationData" type="AuthorizationData" line="82"/>
                <scope line="84">
                    <scope line="87"/>
                </scope>
            </method>
            <javadoc line="95">
                Constructs a new &lt;code&gt;AuthorizationData,&lt;/code&gt; instance.                
                <param>
                    der a single DER-encoded value.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="AuthorizationData" type="constructor" line="101">
                <params>
                    <param name="der" type="DerValue"/>
                </params>
                <declaration name="v" type="Vector&lt;AuthorizationDataEntry&gt;" line="102"/>
                <scope line="103"/>
                <scope line="106"/>
                <scope line="109"/>
            </method>
            <javadoc line="115">
                Encodes an &lt;code&gt;AuthorizationData&lt;/code&gt; object.                
                <return>
                    byte array of encoded &lt;code&gt;AuthorizationData&lt;/code&gt; object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="121">
                <declaration name="bytes" type="DerOutputStream" line="122"/>
                <declaration name="der" type="DerValue" line="123"/>
                <scope line="124"/>
            </method>
            <javadoc line="131">
                Parse (unmarshal) an &lt;code&gt;AuthorizationData&lt;/code&gt; object from a DER input stream.
                  This form of parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicates if this data field is optional                    
                </param>
                <return>
                    an instance of AuthorizationData.                    
                </return>
            </javadoc>
            <method name="parse" type="AuthorizationData" line="144">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <scope line="145"/>
                <declaration name="der" type="DerValue" line="148"/>
                <scope line="149"/>
                <scope line="151">
                    <declaration name="subDer" type="DerValue" line="152"/>
                </scope>
            </method>
            <javadoc line="157">
                Writes &lt;code&gt;AuthorizationData&lt;/code&gt; data fields to a output stream.                
                <param>
                    cos a &lt;code&gt;CCacheOutputStream&lt;/code&gt; to be written to.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs.                    
                </exception>
            </javadoc>
            <method name="writeAuth" type="void" line="163">
                <params>
                    <param name="cos" type="CCacheOutputStream"/>
                </params>
                <scope line="164"/>
            </method>
            <method name="toString" type="String" line="169">
                <declaration name="retVal" type="String" line="170"/>
                <scope line="171"/>
            </method>
            <method name="count" type="int" line="177"/>
            <method name="item" type="AuthorizationDataEntry" line="181">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
        </class>
    </source>