<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.util"/>
        <import package="java.net"/>
        <import package="java.util.Vector"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="sun.security.krb5.internal.ccache.CCacheOutputStream"/>
        <import package="sun.security.krb5.internal.util.KerberosString"/>
        <class name="PrincipalName" line="44">
            <comment line="51">
                name types                
            </comment>
            <comment line="100">
                Principal names don&apos;t mutate often                
            </comment>
            <comment line="102">
                optional; a null realm means use default                
            </comment>
            <comment line="103">
                Note: the nameRealm is not included in the default ASN.1 encoding                
            </comment>
            <comment line="105">
                cached salt, might be changed by KDC info, not used in clone                
            </comment>
            <comment line="142">
                Added to workaround a bug where the equals method that takes a
                 PrincipalName is not being called but Object.equals(Object) is
                 being called.                
            </comment>
            <comment line="297">
                This is protected because the definition of a principal                
            </comment>
            <comment line="298">
                string is fixed                
            </comment>
            <comment line="299">
                XXX Error checkin consistent with MIT krb5_parse_name                
            </comment>
            <comment line="300">
                Code repetition, realm parsed again by class Realm                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="44">
                This class encapsulates a Kerberos principal.                
            </javadoc>
            <declaration name="KRB_NT_UNKNOWN" type="int" line="52"/>
            <javadoc line="52">
                Name type not known                
            </javadoc>
            <declaration name="KRB_NT_PRINCIPAL" type="int" line="57"/>
            <javadoc line="57">
                Just the name of the principal as in DCE, or for users                
            </javadoc>
            <declaration name="KRB_NT_SRV_INST" type="int" line="62"/>
            <javadoc line="62">
                Service and other unique instance (krbtgt)                
            </javadoc>
            <declaration name="KRB_NT_SRV_HST" type="int" line="67"/>
            <javadoc line="67">
                Service with host name as instance (telnet, rcommands)                
            </javadoc>
            <declaration name="KRB_NT_SRV_XHST" type="int" line="72"/>
            <javadoc line="72">
                Service with host as remaining components                
            </javadoc>
            <declaration name="KRB_NT_UID" type="int" line="77"/>
            <javadoc line="77">
                Unique ID                
            </javadoc>
            <declaration name="TGS_DEFAULT_SRV_NAME" type="String" line="84"/>
            <javadoc line="84">
                TGS Name                
            </javadoc>
            <declaration name="TGS_DEFAULT_NT" type="int" line="88"/>
            <declaration name="NAME_COMPONENT_SEPARATOR" type="char" line="90"/>
            <declaration name="NAME_REALM_SEPARATOR" type="char" line="91"/>
            <declaration name="REALM_COMPONENT_SEPARATOR" type="char" line="92"/>
            <declaration name="NAME_COMPONENT_SEPARATOR_STR" type="String" line="94"/>
            <declaration name="NAME_REALM_SEPARATOR_STR" type="String" line="95"/>
            <declaration name="REALM_COMPONENT_SEPARATOR_STR" type="String" line="96"/>
            <declaration name="nameType" type="int" line="98"/>
            <declaration name="nameStrings" type="String[]" line="99"/>
            <declaration name="nameRealm" type="Realm" line="101"/>
            <declaration name="salt" type="String" line="105"/>
            <method name="PrincipalName" type="constructor" line="107"/>
            <method name="PrincipalName" type="constructor" line="111">
                <params>
                    <param name="nameParts" type="String[]"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="112"/>
            </method>
            <method name="PrincipalName" type="constructor" line="121">
                <params>
                    <param name="nameParts" type="String[]"/>
                </params>
            </method>
            <method name="clone" type="Object" line="125">
                <comment line="128">
                    Re-assign mutable fields                    
                </comment>
                <scope line="126">
                    <declaration name="pName" type="PrincipalName" line="127"/>
                    <scope line="129"/>
                    <scope line="132"/>
                </scope>
                <scope line="136"/>
            </method>
            <method name="equals" type="boolean" line="146">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="153">
                <params>
                    <param name="other" type="PrincipalName"/>
                </params>
                <scope line="156"/>
                <scope line="161"/>
                <scope line="165">
                    <scope line="166"/>
                </scope>
            </method>
            <method name="equalsWithoutRealm" type="boolean" line="174">
                <params>
                    <param name="other" type="PrincipalName"/>
                </params>
                <scope line="186"/>
            </method>
            <javadoc line="198">
                Returns the ASN.1 encoding of the
                  &lt;xmp&gt;
                  PrincipalName    ::= SEQUENCE {
                  name-type       [0] Int32,
                  name-string     [1] SEQUENCE OF KerberosString
                  }
                  KerberosString   ::= GeneralString (IA5String)
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
                <param>
                    encoding a Der-encoded data.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding
                      an ASN1 encoded data.                    
                </exception>
                <exception>
                    Asn1Exception if there is an ASN1 encoding error                    
                </exception>
                <exception>
                    IOException if an I/O error occurs                    
                </exception>
                <exception>
                    IllegalArgumentException if encoding is null
                      reading encoded data.                    
                </exception>
            </javadoc>
            <method name="PrincipalName" type="constructor" line="225">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="227"/>
                <scope line="228"/>
                <scope line="231"/>
                <scope line="235">
                    <declaration name="bint" type="BigInteger" line="236"/>
                </scope>
                <scope line="238"/>
                <scope line="242">
                    <declaration name="subDer" type="DerValue" line="243"/>
                    <scope line="244"/>
                    <declaration name="v" type="Vector&lt;String&gt;" line="247"/>
                    <declaration name="subSubDer" type="DerValue" line="248"/>
                    <scope line="249"/>
                    <scope line="253"/>
                    <scope line="256"/>
                </scope>
                <scope line="259"/>
            </method>
            <javadoc line="264">
                Parse (unmarshal) a &lt;code&gt;PrincipalName&lt;/code&gt; from a DER
                  input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or
                      more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of <code>PrincipalName</code>.                    
                </return>
            </javadoc>
            <method name="parse" type="PrincipalName" line="281">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="286"/>
                <scope line="289">
                    <declaration name="subDer" type="DerValue" line="290"/>
                </scope>
            </method>
            <method name="parseName" type="String[]" line="300">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="310">
                    If this separator is escaped then don&apos;t treat it
                     as a separator                    
                </comment>
                <comment line="328">
                    If this separator is escaped then don&apos;t treat it
                     as a separator                    
                </comment>
                <declaration name="tempStrings" type="Vector&lt;String&gt;" line="302"/>
                <declaration name="temp" type="String" line="303"/>
                <declaration name="i" type="int" line="304"/>
                <declaration name="componentStart" type="int" line="305"/>
                <declaration name="component" type="String" line="306"/>
                <scope line="308">
                    <scope line="309">
                        <scope line="314"/>
                        <scope line="319">
                            <scope line="320"/>
                        </scope>
                    </scope>
                    <scope line="327">
                        <scope line="332"/>
                        <scope line="336">
                            <scope line="337"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="349"/>
                <declaration name="result" type="String[]" line="354"/>
            </method>
            <method name="PrincipalName" type="constructor" line="360">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="388">
                    RFC4120 does not recommend canonicalizing a hostname.                    
                </comment>
                <comment line="389">
                    However, for compatibility reason, we will try                    
                </comment>
                <comment line="390">
                    canonicalize it and see if the output looks better.                    
                </comment>
                <comment line="395">
                    Looks if canonicalized is a longer format of hostName,                    
                </comment>
                <comment line="396">
                    we accept cases like                    
                </comment>
                <comment line="397">
                    bunny -&gt; bunny.rabbit.hole                    
                </comment>
                <comment line="403">
                    no canonicalization, use old                    
                </comment>
                <comment line="409">
                    We will try to get realm name from the mapping in                    
                </comment>
                <comment line="410">
                    the configuration. If it is not specified                    
                </comment>
                <comment line="411">
                    we will use the default realm. This nametype does                    
                </comment>
                <comment line="412">
                    not allow a realm to be specified. The name string must of                    
                </comment>
                <comment line="413">
                    the form service@host and this is internally changed into                    
                </comment>
                <comment line="414">
                    service/host by Kerberos                    
                </comment>
                <scope line="361"/>
                <declaration name="nameParts" type="String[]" line="364"/>
                <declaration name="tempRealm" type="Realm" line="365"/>
                <declaration name="realmString" type="String" line="366"/>
                <scope line="368">
                    <scope line="369">
                        <declaration name="config" type="Config" line="370"/>
                    </scope>
                    <scope line="372">
                        <declaration name="re" type="RealmException" line="373"/>
                    </scope>
                </scope>
                <scope line="385">
                    <declaration name="hostName" type="String" line="386"/>
                    <scope line="387">
                        <declaration name="canonicalized" type="String" line="392"/>
                        <scope line="399"/>
                    </scope>
                    <scope line="402"/>
                </scope>
                <declaration name="mapRealm" type="String" line="416"/>
                <scope line="417"/>
                <scope line="419"/>
            </method>
            <method name="PrincipalName" type="constructor" line="437">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="PrincipalName" type="constructor" line="441">
                <params>
                    <param name="name" type="String"/>
                    <param name="realm" type="String"/>
                </params>
            </method>
            <method name="getRealmAsString" type="String" line="446"/>
            <method name="getPrincipalNameAsString" type="String" line="450">
                <declaration name="temp" type="StringBuffer" line="451"/>
            </method>
            <method name="hashCode" type="int" line="457"/>
            <method name="getName" type="String" line="461"/>
            <method name="getNameType" type="int" line="465"/>
            <method name="getNameStrings" type="String[]" line="469"/>
            <method name="toByteArray" type="byte[][]" line="473">
                <declaration name="result" type="byte[][]" line="474"/>
                <scope line="475"/>
            </method>
            <method name="getRealmString" type="String" line="482"/>
            <method name="getRealm" type="Realm" line="488"/>
            <method name="setRealm" type="void" line="492">
                <params>
                    <param name="new_nameRealm" type="Realm"/>
                </params>
            </method>
            <method name="setRealm" type="void" line="496">
                <params>
                    <param name="realmsString" type="String"/>
                </params>
            </method>
            <method name="getSalt" type="String" line="500">
                <scope line="501">
                    <declaration name="salt" type="StringBuffer" line="502"/>
                    <scope line="503"/>
                    <scope line="506"/>
                </scope>
            </method>
            <method name="toString" type="String" line="514">
                <declaration name="str" type="StringBuffer" line="515"/>
                <scope line="516"/>
                <scope line="521"/>
            </method>
            <method name="getNameString" type="String" line="529">
                <declaration name="str" type="StringBuffer" line="530"/>
                <scope line="531"/>
            </method>
            <javadoc line="539">
                Encodes a &lt;code&gt;PrincipalName&lt;/code&gt; object.                
                <return>
                    the byte array of the encoded PrncipalName object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="546">
                <declaration name="bytes" type="DerOutputStream" line="547"/>
                <declaration name="temp" type="DerOutputStream" line="548"/>
                <declaration name="bint" type="BigInteger" line="549"/>
                <declaration name="der" type="DerValue" line="553"/>
                <scope line="554"/>
            </method>
            <javadoc line="565">
                Checks if two &lt;code&gt;PrincipalName&lt;/code&gt; objects have identical values in their corresponding data fields.                
                <param>
                    pname the other <code>PrincipalName</code> object.                    
                </param>
                <return>
                    true if two have identical values, otherwise, return false.                    
                </return>
            </javadoc>
            <method name="match" type="boolean" line="572">
                <params>
                    <param name="pname" type="PrincipalName"/>
                </params>
                <comment line="571">
                    It is used in &lt;code&gt;sun.security.krb5.internal.ccache&lt;/code&gt; package.                    
                </comment>
                <comment line="574">
                    name type is just a hint, no two names can be the same ignoring name type.                    
                </comment>
                <comment line="575">
                    if (this.nameType != pname.nameType) {                    
                </comment>
                <comment line="576">
                    matched = false;                    
                </comment>
                <comment line="577">
                    }                    
                </comment>
                <declaration name="matched" type="boolean" line="573"/>
                <scope line="578">
                    <scope line="579"/>
                </scope>
                <scope line="583"/>
                <scope line="585">
                    <scope line="586">
                        <scope line="587"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="595">
                Writes data field values of &lt;code&gt;PrincipalName&lt;/code&gt; in FCC format to an output stream.                
                <param>
                    cos a <code>CCacheOutputStream</code> for writing data.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs.                    
                </exception>
                <see>
                    sun.security.krb5.internal.ccache.CCacheOutputStream                    
                </see>
            </javadoc>
            <method name="writePrincipal" type="void" line="602">
                <params>
                    <param name="cos" type="CCacheOutputStream"/>
                </params>
                <scope line="605">
                    <declaration name="realmBytes" type="byte[]" line="606"/>
                </scope>
                <declaration name="bytes" type="byte[]" line="611"/>
                <scope line="612"/>
            </method>
            <javadoc line="619">
                Creates a KRB_NT_SRV_INST name from the supplied
                  name components and realm.                
                <param>
                    primary the primary component of the name                    
                </param>
                <param>
                    instance the instance component of the name                    
                </param>
                <param>
                    realm the realm                    
                </param>
                <throws>
                    KrbException                    
                </throws>
            </javadoc>
            <method name="PrincipalName" type="constructor" line="629">
                <params>
                    <param name="primary" type="String"/>
                    <param name="instance" type="String"/>
                    <param name="realm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="631"/>
                <declaration name="nParts" type="String[]" line="635"/>
            </method>
            <javadoc line="644">
                Returns the instance component of a name.
                  In a multi-component name such as a KRB_NT_SRV_INST
                  name, the second component is returned.
                  Null is returned if there are not two or more
                  components in the name.                
                <returns>
                    instance component of a multi-component name.                    
                </returns>
            </javadoc>
            <method name="getInstanceComponent" type="String" line="653">
                <scope line="655"/>
            </method>
            <method name="mapHostToRealm" type="String" line="662">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="671">
                    mapping could be .ibm.com = AUSTIN.IBM.COM                    
                </comment>
                <comment line="678">
                    or mapping could be ibm.com = AUSTIN.IBM.COM                    
                </comment>
                <declaration name="result" type="String" line="663"/>
                <scope line="664">
                    <declaration name="subname" type="String" line="665"/>
                    <declaration name="c" type="Config" line="666"/>
                    <scope line="669">
                        <scope line="670">
                            <scope line="671">
                                <scope line="674"/>
                                <scope line="677">
                                    <scope line="680"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="687"/>
            </method>
        </class>
    </source>