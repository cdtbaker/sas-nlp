<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.krb5">
        <import package="sun.security.krb5.internal"/>
        <import package="sun.security.util"/>
        <import package="java.net"/>
        <import package="java.util.Vector"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="sun.security.krb5.internal.ccache.CCacheOutputStream"/>
        <import package="sun.security.krb5.internal.util.KerberosString"/>
        <class name="PrincipalName" line="10">
            <implements interface="Cloneable"/>
            <javadoc line="10">
                This class encapsulates a Kerberos principal.                
            </javadoc>
            <declaration name="KRB_NT_UNKNOWN" type="int" line="14"/>
            <javadoc line="14">
                Name type not known                
            </javadoc>
            <declaration name="KRB_NT_PRINCIPAL" type="int" line="18"/>
            <javadoc line="18">
                Just the name of the principal as in DCE, or for users                
            </javadoc>
            <declaration name="KRB_NT_SRV_INST" type="int" line="22"/>
            <javadoc line="22">
                Service and other unique instance (krbtgt)                
            </javadoc>
            <declaration name="KRB_NT_SRV_HST" type="int" line="26"/>
            <javadoc line="26">
                Service with host name as instance (telnet, rcommands)                
            </javadoc>
            <declaration name="KRB_NT_SRV_XHST" type="int" line="30"/>
            <javadoc line="30">
                Service with host as remaining components                
            </javadoc>
            <declaration name="KRB_NT_UID" type="int" line="34"/>
            <javadoc line="34">
                Unique ID                
            </javadoc>
            <declaration name="TGS_DEFAULT_SRV_NAME" type="String" line="38"/>
            <javadoc line="38">
                TGS Name                
            </javadoc>
            <declaration name="TGS_DEFAULT_NT" type="int" line="42"/>
            <declaration name="NAME_COMPONENT_SEPARATOR" type="char" line="43"/>
            <declaration name="NAME_REALM_SEPARATOR" type="char" line="44"/>
            <declaration name="REALM_COMPONENT_SEPARATOR" type="char" line="45"/>
            <declaration name="NAME_COMPONENT_SEPARATOR_STR" type="String" line="46"/>
            <declaration name="NAME_REALM_SEPARATOR_STR" type="String" line="47"/>
            <declaration name="REALM_COMPONENT_SEPARATOR_STR" type="String" line="48"/>
            <declaration name="nameType" type="int" line="49"/>
            <declaration name="nameStrings" type="String[]" line="50"/>
            <declaration name="nameRealm" type="Realm" line="51"/>
            <declaration name="salt" type="String" line="52"/>
            <method name="PrincipalName" type="constructor" line="53"/>
            <method name="PrincipalName" type="constructor" line="55">
                <params>
                    <param name="nameParts" type="String[]"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="56"/>
            </method>
            <method name="PrincipalName" type="constructor" line="64">
                <params>
                    <param name="nameParts" type="String[]"/>
                </params>
            </method>
            <method name="clone" type="Object" line="67">
                <scope line="68">
                    <declaration name="pName" type="PrincipalName" line="69"/>
                    <scope line="70"/>
                    <scope line="73"/>
                </scope>
                <scope line="78"/>
            </method>
            <method name="equals" type="boolean" line="82">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="86">
                <params>
                    <param name="other" type="PrincipalName"/>
                </params>
                <scope line="87"/>
                <scope line="90"/>
                <scope line="93">
                    <scope line="94"/>
                </scope>
            </method>
            <method name="equalsWithoutRealm" type="boolean" line="100">
                <params>
                    <param name="other" type="PrincipalName"/>
                </params>
                <scope line="103"/>
            </method>
            <javadoc line="109">
                Returns the ASN.1 encoding of the
                  &lt;xmp&gt;
                  PrincipalName    ::= SEQUENCE {
                  name-type       [0] Int32,
                  name-string     [1] SEQUENCE OF KerberosString
                  }
                  KerberosString   ::= GeneralString (IA5String)
                  &lt;/xmp&gt;
                  &lt;p&gt;
                  This definition reflects the Network Working Group RFC 4120
                  specification available at
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc4120.txt&lt;/a&gt;.                
                <param>
                    encoding a Der-encoded data.                    
                </param>
                <exception>
                    Asn1Exception if an error occurs while decoding
                      an ASN1 encoded data.                    
                </exception>
                <exception>
                    Asn1Exception if there is an ASN1 encoding error                    
                </exception>
                <exception>
                    IOException if an I/O error occurs                    
                </exception>
                <exception>
                    IllegalArgumentException if encoding is null
                      reading encoded data.                    
                </exception>
            </javadoc>
            <method name="PrincipalName" type="constructor" line="131">
                <params>
                    <param name="encoding" type="DerValue"/>
                </params>
                <declaration name="der" type="DerValue" line="133"/>
                <scope line="134"/>
                <scope line="137"/>
                <scope line="141">
                    <declaration name="bint" type="BigInteger" line="142"/>
                </scope>
                <scope line="145"/>
                <scope line="149">
                    <declaration name="subDer" type="DerValue" line="150"/>
                    <scope line="151"/>
                    <declaration name="v" type="Vector&amp;lt;String&amp;gt;" line="154"/>
                    <declaration name="subSubDer" type="DerValue" line="155"/>
                    <scope line="156"/>
                    <scope line="160"/>
                    <scope line="164"/>
                </scope>
                <scope line="168"/>
            </method>
            <javadoc line="172">
                Parse (unmarshal) a &lt;code&gt;PrincipalName&lt;/code&gt; from a DER
                  input stream.  This form
                  parsing might be used when expanding a value which is part of
                  a constructed sequence and uses explicitly tagged type.                
                <exception>
                    Asn1Exception on error.                    
                </exception>
                <param>
                    data the Der input stream value, which contains one or
                      more marshaled value.                    
                </param>
                <param>
                    explicitTag tag number.                    
                </param>
                <param>
                    optional indicate if this data field is optional                    
                </param>
                <return>
                    an instance of &lt;code&gt;PrincipalName&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="parse" type="PrincipalName" line="184">
                <params>
                    <param name="data" type="DerInputStream"/>
                    <param name="explicitTag" type="byte"/>
                    <param name="optional" type="boolean"/>
                </params>
                <declaration name="der" type="DerValue" line="186"/>
                <scope line="188">
                    <declaration name="subDer" type="DerValue" line="189"/>
                </scope>
            </method>
            <method name="parseName" type="String[]" line="193">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="tempStrings" type="Vector&amp;lt;String&amp;gt;" line="194"/>
                <declaration name="temp" type="String" line="195"/>
                <declaration name="i" type="int" line="196"/>
                <declaration name="componentStart" type="int" line="197"/>
                <declaration name="component" type="String" line="198"/>
                <scope line="199">
                    <scope line="200">
                        <scope line="201"/>
                        <scope line="205">
                            <scope line="206"/>
                        </scope>
                    </scope>
                    <scope line="213">
                        <scope line="214"/>
                        <scope line="218">
                            <scope line="219"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="229"/>
                <declaration name="result" type="String[]" line="233"/>
            </method>
            <method name="PrincipalName" type="constructor" line="237">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="238"/>
                <declaration name="nameParts" type="String[]" line="241"/>
                <declaration name="tempRealm" type="Realm" line="242"/>
                <declaration name="realmString" type="String" line="243"/>
                <scope line="244">
                    <scope line="245">
                        <declaration name="config" type="Config" line="246"/>
                    </scope>
                    <scope line="249">
                        <declaration name="re" type="RealmException" line="250"/>
                    </scope>
                </scope>
                <scope line="258">
                    <declaration name="hostName" type="String" line="259"/>
                    <scope line="260">
                        <declaration name="canonicalized" type="String" line="261"/>
                        <scope line="262"/>
                    </scope>
                    <scope line="266"/>
                </scope>
                <declaration name="mapRealm" type="String" line="272"/>
                <scope line="273"/>
                <scope line="276"/>
            </method>
            <method name="PrincipalName" type="constructor" line="293">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="PrincipalName" type="constructor" line="296">
                <params>
                    <param name="name" type="String"/>
                    <param name="realm" type="String"/>
                </params>
            </method>
            <method name="getRealmAsString" type="String" line="300"/>
            <method name="getPrincipalNameAsString" type="String" line="303">
                <declaration name="temp" type="StringBuffer" line="304"/>
            </method>
            <method name="hashCode" type="int" line="308"/>
            <method name="getName" type="String" line="311"/>
            <method name="getNameType" type="int" line="314"/>
            <method name="getNameStrings" type="String[]" line="317"/>
            <method name="toByteArray" type="byte[][]" line="320">
                <declaration name="result" type="byte[][]" line="321"/>
                <scope line="322"/>
            </method>
            <method name="getRealmString" type="String" line="328"/>
            <method name="getRealm" type="Realm" line="332"/>
            <method name="setRealm" type="void" line="335">
                <params>
                    <param name="new_nameRealm" type="Realm"/>
                </params>
            </method>
            <method name="setRealm" type="void" line="338">
                <params>
                    <param name="realmsString" type="String"/>
                </params>
            </method>
            <method name="getSalt" type="String" line="341">
                <scope line="342">
                    <declaration name="salt" type="StringBuffer" line="343"/>
                    <scope line="344"/>
                    <scope line="347"/>
                </scope>
            </method>
            <method name="toString" type="String" line="354">
                <declaration name="str" type="StringBuffer" line="355"/>
                <scope line="356"/>
                <scope line="360"/>
            </method>
            <method name="getNameString" type="String" line="366">
                <declaration name="str" type="StringBuffer" line="367"/>
                <scope line="368"/>
            </method>
            <javadoc line="374">
                Encodes a &lt;code&gt;PrincipalName&lt;/code&gt; object.                
                <return>
                    the byte array of the encoded PrncipalName object.                    
                </return>
                <exception>
                    Asn1Exception if an error occurs while decoding an ASN1 encoded data.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs while reading encoded data.                    
                </exception>
            </javadoc>
            <method name="asn1Encode" type="byte[]" line="380">
                <declaration name="bytes" type="DerOutputStream" line="381"/>
                <declaration name="temp" type="DerOutputStream" line="382"/>
                <declaration name="bint" type="BigInteger" line="383"/>
                <declaration name="der" type="DerValue" line="387"/>
                <scope line="388"/>
            </method>
            <javadoc line="397">
                Checks if two &lt;code&gt;PrincipalName&lt;/code&gt; objects have identical values in their corresponding data fields.                
                <param>
                    pname the other &lt;code&gt;PrincipalName&lt;/code&gt; object.                    
                </param>
                <return>
                    true if two have identical values, otherwise, return false.                    
                </return>
            </javadoc>
            <method name="match" type="boolean" line="402">
                <params>
                    <param name="pname" type="PrincipalName"/>
                </params>
                <declaration name="matched" type="boolean" line="403"/>
                <scope line="404">
                    <scope line="405"/>
                </scope>
                <scope line="409"/>
                <scope line="412">
                    <scope line="413">
                        <scope line="414"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="421">
                Writes data field values of &lt;code&gt;PrincipalName&lt;/code&gt; in FCC format to an output stream.                
                <param>
                    cos a &lt;code&gt;CCacheOutputStream&lt;/code&gt; for writing data.                    
                </param>
                <exception>
                    IOException if an I/O exception occurs.                    
                </exception>
                <see>
                    sun.security.krb5.internal.ccache.CCacheOutputStream                    
                </see>
            </javadoc>
            <method name="writePrincipal" type="void" line="427">
                <params>
                    <param name="cos" type="CCacheOutputStream"/>
                </params>
                <scope line="430">
                    <declaration name="realmBytes" type="byte[]" line="431"/>
                </scope>
                <declaration name="bytes" type="byte[]" line="436"/>
                <scope line="437"/>
            </method>
            <javadoc line="443">
                Creates a KRB_NT_SRV_INST name from the supplied
                  name components and realm.                
                <param>
                    primary the primary component of the name                    
                </param>
                <param>
                    instance the instance component of the name                    
                </param>
                <param>
                    realm the realm                    
                </param>
                <throws>
                    KrbException                    
                </throws>
            </javadoc>
            <method name="PrincipalName" type="constructor" line="451">
                <params>
                    <param name="primary" type="String"/>
                    <param name="instance" type="String"/>
                    <param name="realm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="452"/>
                <declaration name="nParts" type="String[]" line="455"/>
            </method>
            <javadoc line="462">
                Returns the instance component of a name.
                  In a multi-component name such as a KRB_NT_SRV_INST
                  name, the second component is returned.
                  Null is returned if there are not two or more
                  components in the name.                
                <returns>
                    instance component of a multi-component name.                    
                </returns>
            </javadoc>
            <method name="getInstanceComponent" type="String" line="470">
                <scope line="471"/>
            </method>
            <method name="mapHostToRealm" type="String" line="476">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="result" type="String" line="477"/>
                <scope line="478">
                    <declaration name="subname" type="String" line="479"/>
                    <declaration name="c" type="Config" line="480"/>
                    <scope line="482">
                        <scope line="483">
                            <scope line="484">
                                <scope line="487"/>
                                <scope line="490">
                                    <scope line="493"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="501"/>
            </method>
        </class>
    </source>