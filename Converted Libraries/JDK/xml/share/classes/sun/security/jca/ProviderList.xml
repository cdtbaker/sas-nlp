<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jca">
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <class name="ProviderList" line="5">
            <javadoc line="5">
                List of Providers. Used to represent the provider preferences.
                  The system starts out with a ProviderList that only has the classNames
                  of the Providers. Providers are loaded on demand only when needed.
                  For compatibility reasons, Providers that could not be loaded are ignored
                  and internally presented as the instance EMPTY_PROVIDER. However, those
                  objects cannot be presented to applications. Call the convert() method
                  to force all Providers to be loaded and to obtain a ProviderList with
                  invalid entries removed. All this is handled by the Security class.
                  Note that all indices used by this class are 0-based per general Java
                  convention. These must be converted to the 1-based indices used by the
                  Security class externally when needed.
                  Instances of this class are immutable. This eliminates the need for
                  cloning and synchronization in consumers. The add() and remove() style
                  methods are static in order to avoid confusion about the immutability.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="debug" type="sun.security.util.Debug" line="24"/>
            <declaration name="PC0" type="ProviderConfig[]" line="25"/>
            <declaration name="P0" type="Provider[]" line="26"/>
            <declaration name="EMPTY" type="ProviderList" line="27"/>
            <declaration name="EMPTY_PROVIDER" type="Provider" line="28"/>
            <anonymous_class line="28">
                <method name="getService" type="Service" line="29">
                    <params>
                        <param name="type" type="String"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="fromSecurityProperties" type="ProviderList" line="34">
                <anonymous_class line="35">
                    <method name="run" type="ProviderList" line="36"/>
                </anonymous_class>
            </method>
            <method name="add" type="ProviderList" line="42">
                <params>
                    <param name="providerList" type="ProviderList"/>
                    <param name="p" type="Provider"/>
                </params>
            </method>
            <method name="insertAt" type="ProviderList" line="45">
                <params>
                    <param name="providerList" type="ProviderList"/>
                    <param name="p" type="Provider"/>
                    <param name="position" type="int"/>
                </params>
                <scope line="46"/>
                <declaration name="list" type="List&amp;lt;ProviderConfig&amp;gt;" line="49"/>
                <declaration name="n" type="int" line="50"/>
                <scope line="51"/>
            </method>
            <method name="remove" type="ProviderList" line="57">
                <params>
                    <param name="providerList" type="ProviderList"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="58"/>
                <declaration name="configs" type="ProviderConfig[]" line="61"/>
                <declaration name="j" type="int" line="62"/>
                <scope line="63">
                    <scope line="64"/>
                </scope>
            </method>
            <method name="newList" type="ProviderList" line="70">
                <params>
                    <param name="providers" type="Provider"/>
                </params>
                <declaration name="configs" type="ProviderConfig[]" line="71"/>
                <scope line="72"/>
            </method>
            <declaration name="configs" type="ProviderConfig[]" line="77"/>
            <declaration name="allLoaded" type="boolean" line="78"/>
            <declaration name="userList" type="List&amp;lt;Provider&amp;gt;" line="79"/>
            <anonymous_class line="79">
                <method name="size" type="int" line="80"/>
                <method name="get" type="Provider" line="83">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="88">
                Create a new ProviderList from an array of configs                
            </javadoc>
            <method name="ProviderList" type="constructor" line="91">
                <params>
                    <param name="configs" type="ProviderConfig[]"/>
                    <param name="allLoaded" type="boolean"/>
                </params>
            </method>
            <javadoc line="95">
                Return a new ProviderList parsed from the java.security Properties.                
            </javadoc>
            <method name="ProviderList" type="constructor" line="98">
                <declaration name="configList" type="List&amp;lt;ProviderConfig&amp;gt;" line="99"/>
                <scope line="100">
                    <declaration name="entry" type="String" line="101"/>
                    <scope line="102"/>
                    <scope line="106"/>
                    <declaration name="k" type="int" line="110"/>
                    <declaration name="config" type="ProviderConfig" line="111"/>
                    <scope line="112"/>
                    <scope line="115">
                        <declaration name="className" type="String" line="116"/>
                        <declaration name="argument" type="String" line="117"/>
                    </scope>
                    <scope line="120"/>
                </scope>
                <scope line="125"/>
            </method>
            <javadoc line="129">
                Construct a special ProviderList for JAR verification. It consists
                  of the providers specified via jarClassNames, which must be on the
                  bootclasspath and cannot be in signed JAR files. This is to avoid
                  possible recursion and deadlock during verification.                
            </javadoc>
            <method name="getJarList" type="ProviderList" line="135">
                <params>
                    <param name="jarClassNames" type="String[]"/>
                </params>
                <declaration name="newConfigs" type="List&amp;lt;ProviderConfig&amp;gt;" line="136"/>
                <scope line="137">
                    <declaration name="newConfig" type="ProviderConfig" line="138"/>
                    <scope line="139">
                        <scope line="140"/>
                    </scope>
                </scope>
                <declaration name="configArray" type="ProviderConfig[]" line="147"/>
            </method>
            <method name="size" type="int" line="150"/>
            <javadoc line="153">
                Return the Provider at the specified index. Returns EMPTY_PROVIDER
                  if the provider could not be loaded at this time.                
            </javadoc>
            <method name="getProvider" type="Provider" line="157">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="p" type="Provider" line="158"/>
            </method>
            <javadoc line="161">
                Return an unmodifiable List of all Providers in this List. The
                  individual Providers are loaded on demand. Elements that could not
                  be initialized are replaced with EMPTY_PROVIDER.                
            </javadoc>
            <method name="providers" type="List&lt;Provider&gt;" line="166"/>
            <method name="getProviderConfig" type="ProviderConfig" line="169">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="index" type="int" line="170"/>
            </method>
            <method name="getProvider" type="Provider" line="173">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="config" type="ProviderConfig" line="174"/>
            </method>
            <javadoc line="177">
                Return the index at which the provider with the specified name is
                  installed or -1 if it is not present in this ProviderList.                
            </javadoc>
            <method name="getIndex" type="int" line="181">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="182">
                    <declaration name="p" type="Provider" line="183"/>
                    <scope line="184"/>
                </scope>
            </method>
            <method name="loadAll" type="int" line="190">
                <scope line="191"/>
                <scope line="194"/>
                <declaration name="n" type="int" line="198"/>
                <scope line="199">
                    <declaration name="p" type="Provider" line="200"/>
                    <scope line="201"/>
                </scope>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Try to load all Providers and return the ProviderList. If one or
                  more Providers could not be loaded, a new ProviderList with those
                  entries removed is returned. Otherwise, the method returns this.                
            </javadoc>
            <method name="removeInvalid" type="ProviderList" line="215">
                <declaration name="n" type="int" line="216"/>
                <scope line="217"/>
                <declaration name="newConfigs" type="ProviderConfig[]" line="220"/>
                <scope line="221">
                    <declaration name="config" type="ProviderConfig" line="222"/>
                    <scope line="223"/>
                </scope>
            </method>
            <method name="toArray" type="Provider[]" line="229"/>
            <method name="toString" type="String" line="232"/>
            <javadoc line="235">
                Return a Service describing an implementation of the specified
                  algorithm from the Provider with the highest precedence that
                  supports that algorithm. Return null if no Provider supports this
                  algorithm.                
            </javadoc>
            <method name="getService" type="Service" line="241">
                <params>
                    <param name="type" type="String"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="242">
                    <declaration name="p" type="Provider" line="243"/>
                    <declaration name="s" type="Service" line="244"/>
                    <scope line="245"/>
                </scope>
            </method>
            <javadoc line="251">
                Return a List containing all the Services describing implementations
                  of the specified algorithms in precedence order. If no implementation
                  exists, this method returns an empty List.
                  The elements of this list are determined lazily on demand.
                  The List returned is NOT thread safe.                
            </javadoc>
            <method name="getServices" type="List&lt;Service&gt;" line="258">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="261">
                This method exists for compatibility with JCE only. It will be removed
                  once JCE has been changed to use the replacement method.                
                <deprecated>
                    use getServices(List&lt;ServiceId&gt;) instead                    
                </deprecated>
            </javadoc>
            <method name="getServices" type="List&lt;Service&gt;" line="266">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithms" type="List&lt;String&gt;"/>
                </params>
                <declaration name="ids" type="List&amp;lt;ServiceId&amp;gt;" line="267"/>
                <scope line="268"/>
            </method>
            <method name="getServices" type="List&lt;Service&gt;" line="273">
                <params>
                    <param name="ids" type="List&lt;ServiceId&gt;"/>
                </params>
            </method>
            <class name="ServiceList" line="276">
                <extends class="AbstractList">
                    <type_params>
                        <type_param name="Service"/>
                    </type_params>
                </extends>
                <javadoc line="276">
                    Inner class for a List of Services. Custom List implementation in
                      order to delay Provider initialization and lookup.
                      Not thread safe.                    
                </javadoc>
                <declaration name="type" type="String" line="282"/>
                <declaration name="algorithm" type="String" line="283"/>
                <declaration name="ids" type="List&amp;lt;ServiceId&amp;gt;" line="284"/>
                <declaration name="firstService" type="Service" line="285"/>
                <declaration name="services" type="List&amp;lt;Service&amp;gt;" line="286"/>
                <declaration name="providerIndex" type="int" line="287"/>
                <method name="ServiceList" type="constructor" line="288">
                    <params>
                        <param name="type" type="String"/>
                        <param name="algorithm" type="String"/>
                    </params>
                </method>
                <method name="ServiceList" type="constructor" line="293">
                    <params>
                        <param name="ids" type="List&lt;ServiceId&gt;"/>
                    </params>
                </method>
                <method name="addService" type="void" line="298">
                    <params>
                        <param name="s" type="Service"/>
                    </params>
                    <scope line="299"/>
                    <scope line="302">
                        <scope line="303"/>
                    </scope>
                </method>
                <method name="tryGet" type="Service" line="310">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="311">
                        <scope line="312"/>
                        <scope line="315"/>
                        <scope line="318"/>
                        <declaration name="p" type="Provider" line="321"/>
                        <scope line="322">
                            <declaration name="s" type="Service" line="323"/>
                            <scope line="324"/>
                        </scope>
                        <scope line="328">
                            <scope line="329">
                                <declaration name="s" type="Service" line="330"/>
                                <scope line="331"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="get" type="Service" line="338">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="s" type="Service" line="339"/>
                    <scope line="340"/>
                </method>
                <method name="size" type="int" line="345">
                    <declaration name="n" type="int" line="346"/>
                    <scope line="347"/>
                    <scope line="350"/>
                    <scope line="353"/>
                </method>
                <method name="isEmpty" type="boolean" line="358"/>
                <method name="iterator" type="Iterator&lt;Service&gt;" line="361">
                    <anonymous_class line="362">
                        <declaration name="index" type="int" line="363"/>
                        <method name="hasNext" type="boolean" line="364"/>
                        <method name="next" type="Service" line="367">
                            <declaration name="s" type="Service" line="368"/>
                            <scope line="369"/>
                        </method>
                        <method name="remove" type="void" line="375"/>
                    </anonymous_class>
                </method>
            </class>
        </class>
    </source>