<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jca">
        <import package="java.util"/>
        <import package="java.security.Provider"/>
        <import package="java.security.Security"/>
        <class name="Providers" line="33">
            <comment line="46">
                number of threads currently using thread-local provider lists
                 tracked to allow an optimization if == 0                
            </comment>
            <comment line="50">
                current system-wide provider list
                 Note volatile immutable object, so no synchronization needed.                
            </comment>
            <comment line="65">
                we need special handling to resolve circularities when loading
                 signed JAR files during startup. The code below is part of that.                
            </comment>
            <comment line="68">
                Basically, before we load data from a signed JAR file, we parse
                 the PKCS#7 file and verify the signature. We need a
                 CertificateFactory, Signatures, etc. to do that. We have to make
                 sure that we do not try to load the implementation from the JAR
                 file we are just verifying.
                
                 To avoid that, we use different provider settings during JAR
                 verification.  However, we do not want those provider settings to
                 interfere with other parts of the system. Therefore, we make them local
                 to the Thread executing the JAR verification code.
                
                 The code here is used by sun.security.util.SignatureFileVerifier.
                 See there for details.                
            </comment>
            <comment line="85">
                Hardcoded classnames of providers to use for JAR verification.
                 MUST NOT be on the bootclasspath and not in signed JAR files.                
            </comment>
            <comment line="96">
                Return to Sun provider or its backup.
                 This method should only be called by
                 sun.security.util.ManifestEntryVerifier and java.security.SecureRandom.                
            </comment>
            <comment line="202">
                Change the thread local provider list. Use only if the current thread
                 is already using a thread local list and you want to change it in place.
                 In other cases, use the begin/endThreadProviderList() methods.                
            </comment>
            <javadoc line="33">
                Collection of methods to get and set provider list. Also includes
                  special code for the provider list during JAR verification.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="threadLists" type="ThreadLocal&lt;ProviderList&gt;" line="42"/>
            <declaration name="threadListsUsed" type="int" line="47"/>
            <declaration name="providerList" type="ProviderList" line="51"/>
            <scope line="53"/>
            <method name="Providers" type="constructor" line="60">
                <comment line="62">
                    empty                    
                </comment>
            </method>
            <declaration name="BACKUP_PROVIDER_CLASSNAME" type="String" line="81"/>
            <declaration name="jarVerificationProviders" type="String[]" line="86"/>
            <method name="getSunProvider" type="Provider" line="98">
                <scope line="99">
                    <declaration name="clazz" type="Class" line="100"/>
                </scope>
                <scope line="102">
                    <scope line="103">
                        <declaration name="clazz" type="Class" line="104"/>
                    </scope>
                    <scope line="106"/>
                </scope>
            </method>
            <javadoc line="112">
                Start JAR verification. This sets a special provider list for
                  the current thread. You MUST save the return value from this
                  method and you MUST call stopJarVerification() with that object
                  once you are done.                
            </javadoc>
            <method name="startJarVerification" type="Object" line="118">
                <comment line="122">
                    return the old thread-local provider list, usually null                    
                </comment>
                <declaration name="currentList" type="ProviderList" line="119"/>
                <declaration name="jarList" type="ProviderList" line="120"/>
            </method>
            <javadoc line="125">
                Stop JAR verification. Call once you have completed JAR verification.                
            </javadoc>
            <method name="stopJarVerification" type="void" line="128">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="130">
                    restore old thread-local provider list                    
                </comment>
            </method>
            <javadoc line="133">
                Return the current ProviderList. If the thread-local list is set,
                  it is returned. Otherwise, the system wide list is returned.                
            </javadoc>
            <method name="getProviderList" type="ProviderList" line="137">
                <declaration name="list" type="ProviderList" line="138"/>
                <scope line="139"/>
            </method>
            <javadoc line="145">
                Set the current ProviderList. Affects the thread-local list if set,
                  otherwise the system wide list.                
            </javadoc>
            <method name="setProviderList" type="void" line="149">
                <params>
                    <param name="newList" type="ProviderList"/>
                </params>
                <scope line="150"/>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Get the full provider list with invalid providers (those that
                  could not be loaded) removed. This is the list we need to
                  present to applications.                
            </javadoc>
            <method name="getFullProviderList" type="ProviderList" line="162">
                <declaration name="list" type="ProviderList" line="163"/>
                <scope line="164">
                    <scope line="166">
                        <declaration name="newList" type="ProviderList" line="167"/>
                        <scope line="168"/>
                    </scope>
                </scope>
                <declaration name="newList" type="ProviderList" line="176"/>
                <scope line="177"/>
            </method>
            <method name="getSystemProviderList" type="ProviderList" line="184"/>
            <method name="setSystemProviderList" type="void" line="188">
                <params>
                    <param name="list" type="ProviderList"/>
                </params>
            </method>
            <method name="getThreadProviderList" type="ProviderList" line="192">
                <comment line="194">
                    avoid accessing the threadlocal if none are currently in use
                     (first use of ThreadLocal.get() for a Thread allocates a Map)                    
                </comment>
                <scope line="195"/>
            </method>
            <method name="changeThreadProviderList" type="void" line="204">
                <params>
                    <param name="list" type="ProviderList"/>
                </params>
            </method>
            <javadoc line="208">
                Methods to manipulate the thread local provider list. It is for use by
                  JAR verification (see above) and the SunJSSE FIPS mode only.
                  It should be used as follows:
                  ProviderList list = ...;
                  ProviderList oldList = Providers.beginThreadProviderList(list);
                  try {
                  // code that needs thread local provider list
                  } finally {
                  Providers.endThreadProviderList(oldList);
                  }                
            </javadoc>
            <method name="beginThreadProviderList" type="ProviderList" line="224">
                <params>
                    <param name="list" type="ProviderList"/>
                </params>
                <scope line="225"/>
                <declaration name="oldList" type="ProviderList" line="228"/>
            </method>
            <method name="endThreadProviderList" type="void" line="234">
                <params>
                    <param name="list" type="ProviderList"/>
                </params>
                <scope line="235">
                    <scope line="236"/>
                </scope>
                <scope line="240">
                    <scope line="241"/>
                </scope>
            </method>
        </class>
    </source>