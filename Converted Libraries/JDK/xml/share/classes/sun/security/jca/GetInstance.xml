<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.jca">
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <class name="GetInstance" line="33">
            <comment line="139">
                For all the getInstance() methods below:
                 @param type the type of engine (e.g. MessageDigest)
                 @param clazz the Spi class that the implementation must subclass
                   (e.g. MessageDigestSpi.class) or null if no superclass check
                   is required
                 @param algorithm the name of the algorithm (or alias), e.g. MD5
                 @param provider the provider (String or Provider object)
                 @param param the parameter to pass to the Spi constructor
                   (for CertStores)
                
                 There are overloaded methods for all the permutations.                
            </comment>
            <comment line="228">
                The two getInstance() methods below take a service. They are
                 intended for classes that cannot use the standard methods, e.g.
                 because they implement delayed provider selection like the
                 Signature class.                
            </comment>
            <javadoc line="33">
                Collection of utility methods to facilitate implementing getInstance()
                  methods in the JCA/JCE/JSSE/... framework.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="GetInstance" type="constructor" line="42">
                <comment line="44">
                    empty                    
                </comment>
            </method>
            <class name="Instance" line="46">
                <comment line="51">
                    public final fields, access directly without accessors                    
                </comment>
                <comment line="58">
                    Return Provider and implementation as an array as used in the
                     old Security.getImpl() methods.                    
                </comment>
                <javadoc line="46">
                    Static inner class representing a newly created instance.                    
                </javadoc>
                <declaration name="provider" type="Provider" line="51"/>
                <declaration name="impl" type="Object" line="52"/>
                <method name="Instance" type="constructor" line="53">
                    <params>
                        <param name="provider" type="Provider"/>
                        <param name="impl" type="Object"/>
                    </params>
                </method>
                <method name="toArray" type="Object[]" line="59"/>
            </class>
            <method name="getService" type="Service" line="65">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="list" type="ProviderList" line="66"/>
                <declaration name="s" type="Service" line="67"/>
                <scope line="68"/>
            </method>
            <method name="getService" type="Service" line="77">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="78"/>
                <declaration name="p" type="Provider" line="81"/>
                <scope line="82"/>
                <declaration name="s" type="Service" line="85"/>
                <scope line="86"/>
            </method>
            <method name="getService" type="Service" line="94">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="95"/>
                <declaration name="s" type="Service" line="98"/>
                <scope line="99"/>
            </method>
            <javadoc line="106">
                Return a List of all the available Services that implement
                  (type, algorithm). Note that the list is initialized lazily
                  and Provider loading and lookup is only trigered when
                  necessary.                
            </javadoc>
            <method name="getServices" type="List<Service>" line="112">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="list" type="ProviderList" line="113"/>
            </method>
            <javadoc line="117">
                This method exists for compatibility with JCE only. It will be removed
                  once JCE has been changed to use the replacement method.                
                <deprecated>
                    use getServices(List&lt;ServiceId&gt;) instead                    
                </deprecated>
            </javadoc>
            <method name="getServices" type="List<Service>" line="124">
                <params>
                    <param name="type" type="String"/>
                    <param name="algorithms" type="List<String>"/>
                </params>
                <declaration name="list" type="ProviderList" line="125"/>
            </method>
            <javadoc line="129">
                Return a List of all the available Services that implement any of
                  the specified algorithms. See getServices(String, String) for detals.                
            </javadoc>
            <method name="getServices" type="List<Service>" line="133">
                <params>
                    <param name="ids" type="List<ServiceId>"/>
                </params>
                <declaration name="list" type="ProviderList" line="134"/>
            </method>
            <method name="getInstance" type="Instance" line="153">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="155">
                    in the almost all cases, the first service will work
                     avoid taking long path if so                    
                </comment>
                <comment line="169">
                    if we cannot get the service from the prefered provider,
                     fail over to the next                    
                </comment>
                <comment line="173">
                    do not retry initial failed service                    
                </comment>
                <declaration name="list" type="ProviderList" line="156"/>
                <declaration name="firstService" type="Service" line="157"/>
                <scope line="158"/>
                <declaration name="failure" type="NoSuchAlgorithmException" line="162"/>
                <scope line="163"/>
                <scope line="165"/>
                <scope line="170">
                    <scope line="171"/>
                    <scope line="175"/>
                    <scope line="177"/>
                </scope>
            </method>
            <method name="getInstance" type="Instance" line="185">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                    <param name="param" type="Object"/>
                </params>
                <declaration name="services" type="List&lt;Service&gt;" line="186"/>
                <declaration name="failure" type="NoSuchAlgorithmException" line="187"/>
                <scope line="188">
                    <scope line="189"/>
                    <scope line="191"/>
                </scope>
                <scope line="195"/>
                <scope line="197"/>
            </method>
            <method name="getInstance" type="Instance" line="205">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
            </method>
            <method name="getInstance" type="Instance" line="211">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                    <param name="param" type="Object"/>
                    <param name="provider" type="String"/>
                </params>
            </method>
            <method name="getInstance" type="Instance" line="217">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
            </method>
            <method name="getInstance" type="Instance" line="223">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                    <param name="param" type="Object"/>
                    <param name="provider" type="Provider"/>
                </params>
            </method>
            <method name="getInstance" type="Instance" line="235">
                <params>
                    <param name="s" type="Service"/>
                    <param name="clazz" type="Class"/>
                </params>
                <declaration name="instance" type="Object" line="236"/>
            </method>
            <method name="getInstance" type="Instance" line="242">
                <params>
                    <param name="s" type="Service"/>
                    <param name="clazz" type="Class"/>
                    <param name="param" type="Object"/>
                </params>
                <declaration name="instance" type="Object" line="243"/>
            </method>
            <javadoc line="248">
                Check is subClass is a subclass of superClass. If not,
                  throw a NoSuchAlgorithmException.                
            </javadoc>
            <method name="checkSuperClass" type="void" line="253">
                <params>
                    <param name="s" type="Service"/>
                    <param name="subClass" type="Class"/>
                    <param name="superClass" type="Class"/>
                </params>
                <scope line="254"/>
                <scope line="257"/>
            </method>
        </class>
    </source>