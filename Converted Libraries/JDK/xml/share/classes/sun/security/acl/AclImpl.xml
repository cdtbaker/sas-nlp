<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.acl">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security.Principal"/>
        <import package="java.security.acl"/>
        <class name="AclImpl" line="6">
            <extends class="OwnerImpl"/>
            <implements interface="Acl"/>
            <javadoc line="6">
                An Access Control List (ACL) is encapsulated by this class.                
                <author>
                    Satish Dharmaraj                    
                </author>
            </javadoc>
            <declaration name="allowedUsersTable" type="Hashtable&amp;lt;Principal,AclEntry&amp;gt;" line="11"/>
            <declaration name="allowedGroupsTable" type="Hashtable&amp;lt;Principal,AclEntry&amp;gt;" line="12"/>
            <declaration name="deniedUsersTable" type="Hashtable&amp;lt;Principal,AclEntry&amp;gt;" line="13"/>
            <declaration name="deniedGroupsTable" type="Hashtable&amp;lt;Principal,AclEntry&amp;gt;" line="14"/>
            <declaration name="aclName" type="String" line="15"/>
            <declaration name="zeroSet" type="Vector&amp;lt;Permission&amp;gt;" line="16"/>
            <javadoc line="17">
                Constructor for creating an empty ACL.                
            </javadoc>
            <method name="AclImpl" type="constructor" line="20">
                <params>
                    <param name="owner" type="Principal"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="22"/>
                <scope line="25"/>
            </method>
            <javadoc line="28">
                Sets the name of the ACL.                
                <param>
                    caller the principal who is invoking this method.                    
                </param>
                <param>
                    name the name of the ACL.                    
                </param>
                <exception>
                    NotOwnerException if the caller principal is
                      not on the owners list of the Acl.                    
                </exception>
            </javadoc>
            <method name="setName" type="void" line="35">
                <params>
                    <param name="caller" type="Principal"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="39">
                Returns the name of the ACL.                
                <return>
                    the name of the ACL.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="43"/>
            <javadoc line="46">
                Adds an ACL entry to this ACL. An entry associates a
                  group or a principal with a set of permissions. Each
                  user or group can have one positive ACL entry and one
                  negative ACL entry. If there is one of the type (negative
                  or positive) already in the table, a false value is returned.
                  The caller principal must be a part of the owners list of
                  the ACL in order to invoke this method.                
                <param>
                    caller the principal who is invoking this method.                    
                </param>
                <param>
                    entry the ACL entry that must be added to the ACL.                    
                </param>
                <return>
                    true on success, false if the entry is already present.                    
                </return>
                <exception>
                    NotOwnerException if the caller principal
                      is not on the owners list of the Acl.                    
                </exception>
            </javadoc>
            <method name="addEntry" type="boolean" line="60">
                <params>
                    <param name="caller" type="Principal"/>
                    <param name="entry" type="AclEntry"/>
                </params>
                <declaration name="aclTable" type="Hashtable&amp;lt;Principal,AclEntry&amp;gt;" line="62"/>
                <declaration name="key" type="Principal" line="63"/>
            </method>
            <javadoc line="68">
                Removes an ACL entry from this ACL.
                  The caller principal must be a part of the owners list of the ACL
                  in order to invoke this method.                
                <param>
                    caller the principal who is invoking this method.                    
                </param>
                <param>
                    entry the ACL entry that must be removed from the ACL.                    
                </param>
                <return>
                    true on success, false if the entry is not part of the ACL.                    
                </return>
                <exception>
                    NotOwnerException if the caller principal is not
                      the owners list of the Acl.                    
                </exception>
            </javadoc>
            <method name="removeEntry" type="boolean" line="78">
                <params>
                    <param name="caller" type="Principal"/>
                    <param name="entry" type="AclEntry"/>
                </params>
                <declaration name="aclTable" type="Hashtable&amp;lt;Principal,AclEntry&amp;gt;" line="80"/>
                <declaration name="key" type="Principal" line="81"/>
                <declaration name="o" type="AclEntry" line="82"/>
            </method>
            <javadoc line="85">
                This method returns the set of allowed permissions for the
                  specified principal. This set of allowed permissions is calculated
                  as follows:
                  If there is no entry for a group or a principal an empty permission
                  set is assumed.
                  The group positive permission set is the union of all
                  the positive permissions of each group that the individual belongs to.
                  The group negative permission set is the union of all
                  the negative permissions of each group that the individual belongs to.
                  If there is a specific permission that occurs in both
                  the postive permission set and the negative permission set,
                  it is removed from both. The group positive and negatoive permission
                  sets are calculated.
                  The individial positive permission set and the individual negative
                  permission set is then calculated. Again abscence of an entry means
                  the empty set.
                  The set of permissions granted to the principal is then calculated using
                  the simple rule: Individual permissions always override the Group permissions.
                  Specifically, individual negative permission set (specific
                  denial of permissions) overrides the group positive permission set.
                  And the individual positive permission set override the group negative
                  permission set.                
                <param>
                    user the principal for which the ACL entry is returned.                    
                </param>
                <return>
                    The resulting permission set that the principal is allowed.                    
                </return>
            </javadoc>
            <method name="getPermissions" type="Enumeration&lt;Permission&gt;" line="111">
                <params>
                    <param name="user" type="Principal"/>
                </params>
                <declaration name="individualPositive" type="Enumeration&amp;lt;Permission&amp;gt;" line="112"/>
                <declaration name="individualNegative" type="Enumeration&amp;lt;Permission&amp;gt;" line="113"/>
                <declaration name="groupPositive" type="Enumeration&amp;lt;Permission&amp;gt;" line="114"/>
                <declaration name="groupNegative" type="Enumeration&amp;lt;Permission&amp;gt;" line="115"/>
                <declaration name="temp1" type="Enumeration&amp;lt;Permission&amp;gt;" line="120"/>
                <declaration name="netPositive" type="Enumeration&amp;lt;Permission&amp;gt;" line="121"/>
                <declaration name="netNegative" type="Enumeration&amp;lt;Permission&amp;gt;" line="125"/>
            </method>
            <javadoc line="128">
                This method checks whether or not the specified principal
                  has the required permission. If permission is denied
                  permission false is returned, a true value is returned otherwise.
                  This method does not authenticate the principal. It presumes that
                  the principal is a valid authenticated principal.                
                <param>
                    principal the name of the authenticated principal                    
                </param>
                <param>
                    permission the permission that the principal must have.                    
                </param>
                <return>
                    true of the principal has the permission desired, false
                      otherwise.                    
                </return>
            </javadoc>
            <method name="checkPermission" type="boolean" line="139">
                <params>
                    <param name="principal" type="Principal"/>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="permSet" type="Enumeration&amp;lt;Permission&amp;gt;" line="140"/>
                <scope line="141">
                    <declaration name="p" type="Permission" line="142"/>
                </scope>
            </method>
            <javadoc line="147">
                returns an enumeration of the entries in this ACL.                
            </javadoc>
            <method name="entries" type="Enumeration&lt;AclEntry&gt;" line="150"/>
            <javadoc line="153">
                return a stringified version of the
                  ACL.                
            </javadoc>
            <method name="toString" type="String" line="157">
                <declaration name="sb" type="StringBuffer" line="158"/>
                <declaration name="entries" type="Enumeration&amp;lt;AclEntry&amp;gt;" line="159"/>
                <scope line="160">
                    <declaration name="entry" type="AclEntry" line="161"/>
                </scope>
            </method>
            <method name="findTable" type="Hashtable&lt;Principal,AclEntry&gt;" line="167">
                <params>
                    <param name="entry" type="AclEntry"/>
                </params>
                <declaration name="aclTable" type="Hashtable&amp;lt;Principal,AclEntry&amp;gt;" line="168"/>
                <declaration name="p" type="Principal" line="169"/>
                <scope line="170"/>
                <scope line="174"/>
            </method>
            <method name="union" type="Enumeration&lt;Permission&gt;" line="180">
                <params>
                    <param name="e1" type="Enumeration&lt;Permission&gt;"/>
                    <param name="e2" type="Enumeration&lt;Permission&gt;"/>
                </params>
                <declaration name="v" type="Vector&amp;lt;Permission&amp;gt;" line="181"/>
                <scope line="183">
                    <declaration name="o" type="Permission" line="184"/>
                </scope>
            </method>
            <method name="subtract" type="Enumeration&lt;Permission&gt;" line="189">
                <params>
                    <param name="e1" type="Enumeration&lt;Permission&gt;"/>
                    <param name="e2" type="Enumeration&lt;Permission&gt;"/>
                </params>
                <declaration name="v" type="Vector&amp;lt;Permission&amp;gt;" line="190"/>
                <scope line="192">
                    <declaration name="o" type="Permission" line="193"/>
                </scope>
            </method>
            <method name="getGroupPositive" type="Enumeration&lt;Permission&gt;" line="198">
                <params>
                    <param name="user" type="Principal"/>
                </params>
                <declaration name="groupPositive" type="Enumeration&amp;lt;Permission&amp;gt;" line="199"/>
                <declaration name="e" type="Enumeration&amp;lt;Principal&amp;gt;" line="200"/>
                <scope line="201">
                    <declaration name="g" type="Group" line="202"/>
                    <scope line="203">
                        <declaration name="ae" type="AclEntry" line="204"/>
                    </scope>
                </scope>
            </method>
            <method name="getGroupNegative" type="Enumeration&lt;Permission&gt;" line="210">
                <params>
                    <param name="user" type="Principal"/>
                </params>
                <declaration name="groupNegative" type="Enumeration&amp;lt;Permission&amp;gt;" line="211"/>
                <declaration name="e" type="Enumeration&amp;lt;Principal&amp;gt;" line="212"/>
                <scope line="213">
                    <declaration name="g" type="Group" line="214"/>
                    <scope line="215">
                        <declaration name="ae" type="AclEntry" line="216"/>
                    </scope>
                </scope>
            </method>
            <method name="getIndividualPositive" type="Enumeration&lt;Permission&gt;" line="222">
                <params>
                    <param name="user" type="Principal"/>
                </params>
                <declaration name="individualPositive" type="Enumeration&amp;lt;Permission&amp;gt;" line="223"/>
                <declaration name="ae" type="AclEntry" line="224"/>
            </method>
            <method name="getIndividualNegative" type="Enumeration&lt;Permission&gt;" line="228">
                <params>
                    <param name="user" type="Principal"/>
                </params>
                <declaration name="individualNegative" type="Enumeration&amp;lt;Permission&amp;gt;" line="229"/>
                <declaration name="ae" type="AclEntry" line="230"/>
            </method>
        </class>
        <class name="AclEnumerator" line="235">
            <implements interface="Enumeration">
                <type_params>
                    <type_param name="AclEntry"/>
                </type_params>
            </implements>
            <declaration name="acl" type="Acl" line="236"/>
            <declaration name="u1" type="Enumeration&amp;lt;AclEntry&amp;gt;" line="237"/>
            <method name="AclEnumerator" type="constructor" line="238">
                <params>
                    <param name="acl" type="Acl"/>
                    <param name="u1" type="Hashtable&lt;?,AclEntry&gt;"/>
                    <param name="g1" type="Hashtable&lt;?,AclEntry&gt;"/>
                    <param name="u2" type="Hashtable&lt;?,AclEntry&gt;"/>
                    <param name="g2" type="Hashtable&lt;?,AclEntry&gt;"/>
                </params>
            </method>
            <method name="hasMoreElements" type="boolean" line="245"/>
            <method name="nextElement" type="AclEntry" line="248">
                <declaration name="o" type="AclEntry" line="249"/>
                <scope line="250"/>
            </method>
        </class>
    </source>