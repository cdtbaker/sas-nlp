<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.cert"/>
        <import package="java.util"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.GeneralNames"/>
        <import package="sun.security.x509.GeneralNameInterface"/>
        <import package="sun.security.x509.GeneralSubtrees"/>
        <import package="sun.security.x509.NameConstraintsExtension"/>
        <import package="sun.security.x509.SubjectAlternativeNameExtension"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="Builder" line="46">
            <javadoc line="46">
                Abstract class representing a builder, which is able to retrieve
                  matching certificates and is able to verify a particular certificate.                
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="57"/>
            <declaration name="matchingPolicies" type="Set&lt;String&gt;" line="58"/>
            <declaration name="buildParams" type="PKIXBuilderParameters" line="59"/>
            <declaration name="targetSubjectDN" type="X500Principal" line="60"/>
            <declaration name="date" type="Date" line="61"/>
            <declaration name="targetCertConstraints" type="X509CertSelector" line="62"/>
            <declaration name="USE_AIA" type="boolean" line="64"/>
            <javadoc line="64">
                Flag indicating whether support for the caIssuers field of the
                  Authority Information Access extension shall be enabled. Currently
                  disabled by default for compatibility reasons.                
            </javadoc>
            <javadoc line="72">
                Initialize the builder with the input parameters.                
                <param>
                    params the parameter set used to build a certification path                    
                </param>
            </javadoc>
            <method name="Builder" type="constructor" line="77">
                <params>
                    <param name="buildParams" type="PKIXBuilderParameters"/>
                    <param name="targetSubjectDN" type="X500Principal"/>
                </params>
                <comment line="81">
                    Initialize date if not specified                    
                </comment>
                <declaration name="paramsDate" type="Date" line="81"/>
            </method>
            <method name="getMatchingCerts" type="Collection<X509Certificate>" line="87"/>
            <javadoc line="87">
                Retrieves certificates from the list of certStores using the buildParams
                  and the currentState as a filter                
                <param>
                    currentState the current State                    
                </param>
                <param>
                    certStores list of CertStores                    
                </param>
            </javadoc>
            <method name="verifyCert" type="void" line="98"/>
            <javadoc line="98">
                Verifies the cert against the currentState, using the certPathList
                  generated thus far to help with loop detection                
                <param>
                    cert the certificate to be verified                    
                </param>
                <param>
                    currentState the current state against which the cert is verified                    
                </param>
                <param>
                    certPathList the certPathList generated thus far                    
                </param>
            </javadoc>
            <method name="isPathCompleted" type="boolean" line="109"/>
            <javadoc line="109">
                Verifies whether the input certificate completes the path.
                  When building forward, a trust anchor will complete the path.
                  When building reverse, the target certificate will complete the path.                
                <param>
                    cert the certificate to test                    
                </param>
                <return>
                    a boolean value indicating whether the cert completes the path.                    
                </return>
            </javadoc>
            <method name="addCertToPath" type="void" line="119"/>
            <javadoc line="119">
                Adds the certificate to the certPathList                
                <param>
                    cert the certificate to be added                    
                </param>
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="removeFinalCertFromPath" type="void" line="128"/>
            <javadoc line="128">
                Removes final certificate from the certPathList                
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <javadoc line="136">
                get distance of one GeneralName from another                
                <param>
                    base GeneralName at base of subtree                    
                </param>
                <param>
                    test GeneralName to be tested against base                    
                </param>
                <param>
                    incomparable the value to return if the names are
                      incomparable                    
                </param>
                <return>
                    distance of test name from base, where 0
                      means exact match, 1 means test is an immediate
                      child of base, 2 means test is a grandchild, etc.
                      -1 means test is a parent of base, -2 means test
                      is a grandparent, etc.                    
                </return>
            </javadoc>
            <method name="distance" type="int" line="150">
                <params>
                    <param name="base" type="GeneralNameInterface"/>
                    <param name="test" type="GeneralNameInterface"/>
                    <param name="incomparable" type="int"/>
                </params>
                <comment line="169">
                    should never occur                    
                </comment>
                <comment line="173">
                                        
                </comment>
                <scope line="153"/>
                <scope line="157"/>
            </method>
            <javadoc line="176">
                get hop distance of one GeneralName from another in links where
                  the names need not have an ancestor/descendant relationship.
                  For example, the hop distance from ou=D,ou=C,o=B,c=US to
                  ou=F,ou=E,ou=C,o=B,c=US is 3: D-&gt;C, C-&gt;E, E-&gt;F.  The hop distance
                  from ou=C,o=B,c=US to ou=D,ou=C,o=B,c=US is -1: C-&gt;D                
                <param>
                    base GeneralName                    
                </param>
                <param>
                    test GeneralName to be tested against base                    
                </param>
                <param>
                    incomparable the value to return if the names are
                      incomparable                    
                </param>
                <return>
                    distance of test name from base measured in hops in the
                      namespace hierarchy, where 0 means exact match.  Result
                      is positive if path is some number of up hops followed by
                      some number of down hops; result is negative if path is
                      some number of down hops.                    
                </return>
            </javadoc>
            <method name="hops" type="int" line="194">
                <params>
                    <param name="base" type="GeneralNameInterface"/>
                    <param name="test" type="GeneralNameInterface"/>
                    <param name="incomparable" type="int"/>
                </params>
                <comment line="204">
                                        
                </comment>
                <comment line="207">
                                        
                </comment>
                <comment line="210">
                                        
                </comment>
                <comment line="213">
                                        
                </comment>
                <comment line="215">
                    should never occur                    
                </comment>
                <comment line="219">
                                        
                </comment>
                <declaration name="baseRtest" type="int" line="195"/>
                <scope line="198"/>
                <scope line="219">
                    <scope line="220"/>
                </scope>
                <declaration name="baseName" type="X500Name" line="226"/>
                <declaration name="testName" type="X500Name" line="227"/>
                <declaration name="commonName" type="X500Name" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
                <scope line="235">
                    <declaration name="commonDistance" type="int" line="236"/>
                    <declaration name="baseDistance" type="int" line="237"/>
                    <declaration name="testDistance" type="int" line="238"/>
                </scope>
            </method>
            <javadoc line="243">
                Determine how close a given certificate gets you toward
                  a given target.                
                <param>
                    constraints Current NameConstraints; if null,
                      then caller must verify NameConstraints
                      independently, realizing that this certificate
                      may not actually lead to the target at all.                    
                </param>
                <param>
                    cert Candidate certificate for chain                    
                </param>
                <param>
                    target GeneralNameInterface name of target                    
                </param>
                <return>
                    distance from this certificate to target:
                      &lt;ul&gt;
                      &lt;li&gt;-1 means certificate could be CA for target, but
                      there are no NameConstraints limiting how close
                      &lt;li&gt; 0 means certificate subject or subjectAltName
                      matches target
                      &lt;li&gt; 1 means certificate is permitted to be CA for
                      target.
                      &lt;li&gt; 2 means certificate is permitted to be CA for
                      parent of target.
                      &lt;li&gt;&amp;gt;0 in general, means certificate is permitted
                      to be a CA for this distance higher in the naming
                      hierarchy than the target, plus 1.
                      &lt;/ul&gt;
                      &lt;p&gt;Note that the subject and/or subjectAltName of the
                      candidate cert does not have to be an ancestor of the
                      target in order to be a CA that can issue a certificate to
                      the target. In these cases, the target distance is calculated
                      by inspecting the NameConstraints extension in the candidate
                      certificate. For example, suppose the target is an X.500 DN with
                      a value of &quot;CN=mullan,OU=ireland,O=sun,C=us&quot; and the
                      NameConstraints extension in the candidate certificate
                      includes a permitted component of &quot;O=sun,C=us&quot;, which implies
                      that the candidate certificate is allowed to issue certs in
                      the &quot;O=sun,C=us&quot; namespace. The target distance is 3
                      ((distance of permitted NC from target) + 1).
                      The (+1) is added to distinguish the result from the case
                      which returns (0).                    
                </return>
                <throws>
                    IOException if certificate does not get closer                    
                </throws>
            </javadoc>
            <method name="targetDistance" type="int" line="285">
                <params>
                    <param name="constraints" type="NameConstraintsExtension"/>
                    <param name="cert" type="X509Certificate"/>
                    <param name="target" type="GeneralNameInterface"/>
                </params>
                <comment line="288">
                                        
                </comment>
                <comment line="300">
                                        
                </comment>
                <comment line="303">
                                        
                </comment>
                <comment line="312">
                                        
                </comment>
                <comment line="324">
                                        
                </comment>
                <comment line="326">
                                        
                </comment>
                <comment line="332">
                                        
                </comment>
                <comment line="336">
                    Make sure we do a clone here, because we&apos;re probably
                     going to modify this object later and we don&apos;t want to
                     be sharing it with a Certificate object!                    
                </comment>
                <comment line="346">
                                        
                </comment>
                <comment line="358">
                                        
                </comment>
                <comment line="363">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="375">
                                        
                </comment>
                <scope line="288"/>
                <declaration name="certImpl" type="X509CertImpl" line="293"/>
                <scope line="294"/>
                <scope line="296"/>
                <declaration name="subject" type="X500Name" line="300"/>
                <scope line="301"/>
                <declaration name="altNameExt" type="SubjectAlternativeNameExtension" line="306"/>
                <scope line="308">
                    <declaration name="altNames" type="GeneralNames" line="309"/>
                    <scope line="312">
                        <scope line="313">
                            <declaration name="altName" type="GeneralNameInterface" line="314"/>
                            <scope line="315"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ncExt" type="NameConstraintsExtension" line="326"/>
                <scope line="327"/>
                <scope line="332"/>
                <scope line="334"/>
                <scope line="341"/>
                <declaration name="permitted" type="GeneralSubtrees" line="346"/>
                <declaration name="excluded" type="GeneralSubtrees" line="348"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="358"/>
                <scope line="363"/>
                <scope line="367">
                    <declaration name="perName" type="GeneralNameInterface" line="368"/>
                    <declaration name="distance" type="int" line="369"/>
                    <scope line="370"/>
                </scope>
            </method>
            <javadoc line="378">
                This method can be used as an optimization to filter out
                  certificates that do not have policies which are valid.
                  It returns the set of policies (String OIDs) that should exist in
                  the certificate policies extension of the certificate that is
                  needed by the builder. The logic applied is as follows:
                  &lt;p&gt;
                  1) If some initial policies have been set and policy mappings are
                  inhibited, then acceptable certificates are those that include
                  the ANY_POLICY OID or with policies that intersect with the
                  initial policies.
                  2) If no initial policies have been set or policy mappings are
                  not inhibited then we don&apos;t have much to work with. All we know is
                  that a certificate must have some policy because if it didn&apos;t
                  have any policy then the policy tree would become null (and validation
                  would fail).                
                <return>
                    the Set of policies any of which must exist in a
                      cert&apos;s certificate policies extension in order for a cert to be selected.                    
                </return>
            </javadoc>
            <method name="getMatchingPolicies" type="Set<String>" line="398">
                <comment line="409">
                    we just return an empty set to make sure that there is
                     at least a certificate policies extension in the cert                    
                </comment>
                <scope line="399">
                    <declaration name="initialPolicies" type="Set&lt;String&gt;" line="400"/>
                    <scope line="404"/>
                    <scope line="407"/>
                </scope>
            </method>
            <javadoc line="416">
                Search the specified CertStores and add all certificates matching
                  selector to resultCerts. Self-signed certs are not useful here
                  and therefore ignored.
                  If the targetCert criterion of the selector is set, only that cert
                  is examined and the CertStores are not searched.
                  If checkAll is true, all CertStores are searched for matching certs.
                  If false, the method returns as soon as the first CertStore returns
                  a matching cert(s).
                  Returns true iff resultCerts changed (a cert was added to the collection)                
            </javadoc>
            <method name="addMatchingCerts" type="boolean" line="432">
                <params>
                    <param name="selector" type="X509CertSelector"/>
                    <param name="certStores" type="Collection<CertStore>"/>
                    <param name="resultCerts" type="Collection<X509Certificate>"/>
                    <param name="checkAll" type="boolean"/>
                </params>
                <comment line="436">
                    no need to search CertStores                    
                </comment>
                <comment line="463">
                    if getCertificates throws a CertStoreException, we ignore
                     it and move on to the next CertStore                    
                </comment>
                <declaration name="targetCert" type="X509Certificate" line="433"/>
                <scope line="434">
                    <scope line="437">
                        <scope line="438"/>
                    </scope>
                </scope>
                <declaration name="add" type="boolean" line="445"/>
                <scope line="446">
                    <scope line="447">
                        <declaration name="certs" type="Collection&lt;? extends Certificate&gt;" line="448"/>
                        <scope line="450">
                            <scope line="452">
                                <scope line="453"/>
                            </scope>
                        </scope>
                        <scope line="458"/>
                    </scope>
                    <scope line="461">
                        <scope line="464"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="474">
                Returns true if CertStore is local. Currently, returns true if
                  type is Collection or if it has been initialized with
                  CollectionCertStoreParameters. A new API method should be added
                  to CertStore that returns local or remote.                
            </javadoc>
            <method name="isLocalCertStore" type="boolean" line="480">
                <params>
                    <param name="certStore" type="CertStore"/>
                </params>
            </method>
        </class>
    </source>