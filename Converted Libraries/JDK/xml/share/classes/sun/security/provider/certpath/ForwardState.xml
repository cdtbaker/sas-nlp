<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.SubjectAlternativeNameExtension"/>
        <import package="sun.security.x509.GeneralNames"/>
        <import package="sun.security.x509.GeneralName"/>
        <import package="sun.security.x509.GeneralNameInterface"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="ForwardState" line="50">
            <comment line="62">
                                
            </comment>
            <comment line="65">
                                
            </comment>
            <comment line="68">
                                
            </comment>
            <comment line="71">
                The number of intermediate CA certs which have been traversed so
                 far in the path                
            </comment>
            <comment line="77">
                                
            </comment>
            <comment line="80">
                                
            </comment>
            <comment line="83">
                                
            </comment>
            <comment line="86">
                Flag indicating if key needing to inherit key parameters has been
                 encountered.                
            </comment>
            <comment line="231">
                Clone current state. The state is cloned as each cert is
                 added to the path. This is necessary if backtracking occurs,
                 and a prior state needs to be restored.
                
                 Note that this is a SMART clone. Not all fields are fully copied,
                 because some of them will
                 not have their contents modified by subsequent calls to updateState.                
            </comment>
            <implements interface="State"/>
            <javadoc line="50">
                A specification of a forward PKIX validation state
                  which is initialized by each build and updated each time a
                  certificate is added to the current path.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="59"/>
            <declaration name="issuerDN" type="X500Principal" line="62"/>
            <declaration name="cert" type="X509CertImpl" line="65"/>
            <declaration name="subjectNamesTraversed" type="HashSet&lt;GeneralNameInterface&gt;" line="68"/>
            <declaration name="traversedCACerts" type="int" line="74"/>
            <declaration name="init" type="boolean" line="77"/>
            <declaration name="crlChecker" type="CrlRevocationChecker" line="80"/>
            <declaration name="forwardCheckers" type="ArrayList&lt;PKIXCertPathChecker&gt;" line="83"/>
            <declaration name="keyParamsNeededFlag" type="boolean" line="88"/>
            <javadoc line="90">
                Returns a boolean flag indicating if the state is initial
                  (just starting)                
                <return>
                    boolean flag indicating if the state is initial (just starting)                    
                </return>
            </javadoc>
            <method name="isInitial" type="boolean" line="96"/>
            <javadoc line="100">
                Return boolean flag indicating whether a public key that needs to inherit
                  key parameters has been encountered.                
                <return>
                    boolean true if key needing to inherit parameters has been
                      encountered; false otherwise.                    
                </return>
            </javadoc>
            <method name="keyParamsNeeded" type="boolean" line="107"/>
            <javadoc line="111">
                Display state for debugging purposes                
            </javadoc>
            <method name="toString" type="String" line="114">
                <declaration name="sb" type="StringBuffer" line="115"/>
                <scope line="116"/>
                <scope line="125">
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="134">
                Initialize the state.                
                <param>
                    certPathCheckers the list of user-defined PKIXCertPathCheckers                    
                </param>
            </javadoc>
            <method name="initState" type="void" line="141">
                <params>
                    <param name="certPathCheckers" type="List<PKIXCertPathChecker>"/>
                </params>
                <comment line="146">
                    Populate forwardCheckers with every user-defined checker
                     that supports forward checking and initialize the forwardCheckers                    
                </comment>
                <scope line="150">
                    <scope line="151">
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="162">
                Update the state with the next certificate added to the path.                
                <param>
                    cert the certificate which is used to update the state                    
                </param>
            </javadoc>
            <method name="updateState" type="void" line="168">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="176">
                                        
                </comment>
                <comment line="183">
                                        
                </comment>
                <comment line="186">
                                        
                </comment>
                <comment line="191">
                    update traversedCACerts only if this is a non-self-issued
                     intermediate CA cert                    
                </comment>
                <comment line="200">
                    update subjectNamesTraversed only if this is the EE cert or if                    
                </comment>
                <declaration name="icert" type="X509CertImpl" line="173"/>
                <declaration name="newKey" type="PublicKey" line="176"/>
                <scope line="178"/>
                <scope line="188">
                    <scope line="194"/>
                </scope>
                <scope line="201">
                    <declaration name="subjName" type="X500Principal" line="202"/>
                    <scope line="205">
                        <declaration name="subjAltNameExt" type="SubjectAlternativeNameExtension" line="206"/>
                        <scope line="208">
                            <declaration name="gNames" type="GeneralNames" line="209"/>
                            <scope line="212">
                                <declaration name="gName" type="GeneralNameInterface" line="213"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="217">
                        <scope line="218"/>
                    </scope>
                </scope>
            </method>
            <method name="clone" type="Object" line="239">
                <comment line="244">
                                        
                </comment>
                <comment line="256">
                    Shallow copy traversed names. There is no need to
                     deep copy contents, since the elements of the Set
                     are never modified by subsequent calls to updateState().                    
                </comment>
                <scope line="240">
                    <declaration name="clonedState" type="ForwardState" line="241"/>
                    <declaration name="li" type="ListIterator&lt;PKIXCertPathChecker&gt;" line="246"/>
                    <scope line="248">
                        <declaration name="checker" type="PKIXCertPathChecker" line="249"/>
                        <scope line="250"/>
                    </scope>
                </scope>
                <scope line="263"/>
            </method>
        </class>
    </source>