<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.ProviderException"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="sun.security.x509.X509Key"/>
        <import package="sun.security.x509.AlgIdDSA"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <class name="DSAPublicKey" line="45">
            <extends class="X509Key"/>
            <comment line="63">
                                
            </comment>
            <comment line="66">
                Keep this constructor for backwards compatibility with JDK1.1.                
            </comment>
            <implements interface="java.security.interfaces.DSAPublicKey"/>
            <implements interface="Serializable"/>
            <javadoc line="45">
                An X.509 public key for the Digital Signature Algorithm.                
                <author>
                    Benjamin Renaud                    
                </author>
                <see>
                    DSAPrivateKey                    
                </see>
                <see>
                    AlgIdDSA                    
                </see>
                <see>
                    DSA                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="59"/>
            <javadoc line="59">
                use serialVersionUID from JDK 1.1. for interoperability                
            </javadoc>
            <declaration name="y" type="BigInteger" line="63"/>
            <method name="DSAPublicKey" type="constructor" line="68"/>
            <javadoc line="71">
                Make a DSA public key out of a public key and three parameters.
                  The p, q, and g parameters may be null, but if so, parameters will need
                  to be supplied from some other source before this key can be used in
                  cryptographic operations.  PKIX RFC2459bis explicitly allows DSA public
                  keys without parameters, where the parameters are provided in the
                  issuer&apos;s DSA public key.                
                <param>
                    y the actual key bits                    
                </param>
                <param>
                    p DSA parameter p, may be null if all of p, q, and g are null.                    
                </param>
                <param>
                    q DSA parameter q, may be null if all of p, q, and g are null.                    
                </param>
                <param>
                    g DSA parameter g, may be null if all of p, q, and g are null.                    
                </param>
            </javadoc>
            <method name="DSAPublicKey" type="constructor" line="86">
                <params>
                    <param name="y" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
                <scope line="90"/>
                <scope line="94"/>
            </method>
            <javadoc line="100">
                Make a DSA public key from its DER encoding (X.509).                
            </javadoc>
            <method name="DSAPublicKey" type="constructor" line="103">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
            </method>
            <javadoc line="107">
                Returns the DSA parameters associated with this key, or null if the
                  parameters could not be parsed.                
            </javadoc>
            <method name="getParams" type="DSAParams" line="111">
                <scope line="112">
                    <scope line="113"/>
                    <scope line="115">
                        <declaration name="paramSpec" type="DSAParameterSpec" line="116"/>
                        <declaration name="algParams" type="AlgorithmParameters" line="117"/>
                        <scope line="118"/>
                    </scope>
                </scope>
                <scope line="124"/>
            </method>
            <javadoc line="129">
                Get the raw public value, y, without the parameters.                
                <see>
                    getParameters                    
                </see>
            </javadoc>
            <method name="getY" type="BigInteger" line="134"/>
            <method name="toString" type="String" line="138"/>
            <method name="parseKeyBits" type="void" line="143">
                <scope line="144">
                    <declaration name="in" type="DerInputStream" line="145"/>
                </scope>
                <scope line="147"/>
            </method>
        </class>
    </source>