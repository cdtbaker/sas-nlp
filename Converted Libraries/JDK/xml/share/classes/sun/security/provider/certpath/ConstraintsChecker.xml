<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.io.IOException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.x509.NameConstraintsExtension"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="ConstraintsChecker" line="44">
            <extends class="PKIXCertPathChecker"/>
            <comment line="56">
                                
            </comment>
            <comment line="58">
                                
            </comment>
            <comment line="60">
                                
            </comment>
            <javadoc line="44">
                ConstraintsChecker is a &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; that checks
                  constraints information on a PKIX certificate, namely basic constraints
                  and name constraints.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="54"/>
            <declaration name="certPathLength" type="int" line="56"/>
            <declaration name="maxPathLength" type="int" line="58"/>
            <declaration name="i" type="int" line="60"/>
            <declaration name="prevNC" type="NameConstraintsExtension" line="61"/>
            <declaration name="supportedExts" type="Set&lt;String&gt;" line="63"/>
            <javadoc line="65">
                Creates a ConstraintsChecker.                
                <param>
                    certPathLength the length of the certification path                    
                </param>
                <throws>
                    CertPathValidatorException if the checker cannot be initialized                    
                </throws>
            </javadoc>
            <method name="ConstraintsChecker" type="constructor" line="71">
                <params>
                    <param name="certPathLength" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="76">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="77"/>
                <scope line="81"/>
            </method>
            <method name="isForwardCheckingSupported" type="boolean" line="87"/>
            <method name="getSupportedExtensions" type="Set<String>" line="91">
                <scope line="92"/>
            </method>
            <javadoc line="101">
                Performs the basic constraints and name constraints
                  checks on the certificate using its internal state.                
                <param>
                    cert the &lt;code&gt;Certificate&lt;/code&gt; to be checked                    
                </param>
                <param>
                    unresCritExts a &lt;code&gt;Collection&lt;/code&gt; of OID strings
                      representing the current set of unresolved critical extensions                    
                </param>
                <throws>
                    CertPathValidatorException if the specified certificate
                      does not pass the check                    
                </throws>
            </javadoc>
            <method name="check" type="void" line="113">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="unresCritExts" type="Collection<String>"/>
                </params>
                <comment line="118">
                    MUST run NC check second, since it depends on BC check to
                     update remainingCerts                    
                </comment>
                <declaration name="currCert" type="X509Certificate" line="114"/>
                <scope line="122"/>
            </method>
            <javadoc line="128">
                Internal method to check the name constraints against a cert                
            </javadoc>
            <method name="verifyNameConstraints" type="void" line="133">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                </params>
                <comment line="140">
                    check name constraints only if there is a previous name constraint
                     and either the currCert is the final cert or the currCert is not
                     self-issued                    
                </comment>
                <comment line="160">
                    merge name constraints regardless of whether cert is self-issued                    
                </comment>
                <declaration name="msg" type="String" line="134"/>
                <scope line="135"/>
                <scope line="143">
                    <scope line="144"/>
                    <scope line="149">
                        <scope line="150"/>
                    </scope>
                    <scope line="154"/>
                </scope>
            </method>
            <javadoc line="166">
                Helper to fold sets of name constraints together                
            </javadoc>
            <method name="mergeNameConstraints" type="NameConstraintsExtension" line="172">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                    <param name="prevNC" type="NameConstraintsExtension"/>
                </params>
                <comment line="189">
                    if there are no previous name constraints, we just return the
                     new name constraints.                    
                </comment>
                <comment line="198">
                    Make sure we do a clone here, because we&apos;re probably
                     going to modify this object later and we don&apos;t want to
                     be sharing it with a Certificate object!                    
                </comment>
                <comment line="205">
                    after merge, prevNC should contain the merged constraints                    
                </comment>
                <declaration name="currCertImpl" type="X509CertImpl" line="173"/>
                <scope line="174"/>
                <scope line="176"/>
                <declaration name="newConstraints" type="NameConstraintsExtension" line="180"/>
                <scope line="183"/>
                <scope line="190">
                    <scope line="191"/>
                    <scope line="194"/>
                    <scope line="196"/>
                </scope>
                <scope line="202">
                    <scope line="203"/>
                    <scope line="206"/>
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="216">
                Internal method to check that a given cert meets basic constraints.                
            </javadoc>
            <method name="checkBasicConstraints" type="void" line="221">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                </params>
                <comment line="230">
                                        
                </comment>
                <comment line="232">
                    RFC5280: If certificate i is a version 3 certificate, verify
                     that the basicConstraints extension is present and that cA is
                     set to TRUE.  (If certificate i is a version 1 or version 2
                     certificate, then the application MUST either verify that
                     certificate i is a CA certificate through out-of-band means
                     or reject the certificate.  Conforming implementations may
                     choose to reject all version 1 and version 2 intermediate
                     certificates.)
                    
                     We choose to reject all version 1 and version 2 intermediate
                     certificates except that it is self issued by the trust
                     anchor in order to support key rollover or changes in
                     certificate policies.                    
                </comment>
                <comment line="246">
                    version 1 or version 2                    
                </comment>
                <comment line="247">
                    issued by a trust anchor                    
                </comment>
                <declaration name="msg" type="String" line="222"/>
                <scope line="223"/>
                <scope line="230">
                    <declaration name="pathLenConstraint" type="int" line="244"/>
                    <scope line="245">
                        <scope line="246">
                            <scope line="247"/>
                        </scope>
                    </scope>
                    <scope line="251"/>
                    <scope line="255"/>
                    <scope line="261">
                        <scope line="262"/>
                    </scope>
                </scope>
                <scope line="275"/>
            </method>
            <javadoc line="281">
                Merges the specified maxPathLength with the pathLenConstraint
                  obtained from the certificate.                
                <param>
                    cert the &lt;code&gt;X509Certificate&lt;/code&gt;                    
                </param>
                <param>
                    maxPathLength the previous maximum path length                    
                </param>
                <return>
                    the new maximum path length constraint (-1 means no more
                      certificates can follow, Integer.MAX_VALUE means path length is
                      unconstrained)                    
                </return>
            </javadoc>
            <method name="mergeBasicConstraints" type="int" line="291">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="maxPathLength" type="int"/>
                </params>
                <declaration name="pathLenConstraint" type="int" line="293"/>
                <scope line="295"/>
                <scope line="299"/>
            </method>
        </class>
    </source>