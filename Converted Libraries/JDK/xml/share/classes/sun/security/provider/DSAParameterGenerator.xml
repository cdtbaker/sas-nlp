<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.math.BigInteger"/>
        <import package="java.security.AlgorithmParameterGeneratorSpi"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.InvalidParameterException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <class name="DSAParameterGenerator" line="40">
            <extends class="AlgorithmParameterGeneratorSpi"/>
            <comment line="58">
                the modulus length                
            </comment>
            <comment line="59">
                default                
            </comment>
            <comment line="61">
                the source of randomness                
            </comment>
            <comment line="64">
                useful constants                
            </comment>
            <comment line="69">
                Make a SHA-1 hash function                
            </comment>
            <comment line="152">
                Generates the prime and subprime parameters for DSA,
                 using the provided source of randomness.
                 This method will generate new seeds until a suitable
                 seed has been found.
                
                 @param random the source of randomness to generate the
                 seed
                 @param L the size of &lt;code&gt;p&lt;code&gt;, in bits.
                
                 @return an array of BigInteger, with &lt;code&gt;p&lt;code&gt; at index 0 and
                 &lt;code&gt;q&lt;code&gt; at index 1.                
            </comment>
            <comment line="178">
                Generates the prime and subprime parameters for DSA.
                
                 &lt;p&gt;The seed parameter corresponds to the &lt;code&gt;SEED&lt;code&gt; parameter
                 referenced in the FIPS specification of the DSA algorithm,
                 and L is the size of &lt;code&gt;p&lt;code&gt;, in bits.
                
                 @param seed the seed to generate the parameters
                 @param L the size of &lt;code&gt;p&lt;code&gt;, in bits.
                
                 @return an array of BigInteger, with &lt;code&gt;p&lt;code&gt; at index 0,
                 &lt;code&gt;q&lt;code&gt; at index 1, the seed at index 2, and the counter value
                 at index 3, or null if the seed does not yield suitable numbers.                
            </comment>
            <comment line="258">
                Generates the &lt;code&gt;g&lt;code&gt; parameter for DSA.
                
                 @param p the prime, &lt;code&gt;p&lt;code&gt;.
                 @param q the subprime, &lt;code&gt;q&lt;code&gt;.
                
                 @param the &lt;code&gt;g&lt;code&gt;                
            </comment>
            <comment line="277">
                Returns the SHA-1 digest of some data                
            </comment>
            <comment line="286">
                Converts the result of a BigInteger.toByteArray call to an exact
                 signed magnitude representation for any positive number.                
            </comment>
            <comment line="300">
                XORs U2 into U1                
            </comment>
            <javadoc line="40">
                This class generates parameters for the DSA algorithm. It uses a default
                  prime modulus size of 1024 bits, which can be overwritten during
                  initialization.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.AlgorithmParameters                    
                </see>
                <see>
                    java.security.spec.AlgorithmParameterSpec                    
                </see>
                <see>
                    DSAParameters                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="modLen" type="int" line="58"/>
            <declaration name="random" type="SecureRandom" line="61"/>
            <declaration name="ZERO" type="BigInteger" line="64"/>
            <declaration name="ONE" type="BigInteger" line="65"/>
            <declaration name="TWO" type="BigInteger" line="66"/>
            <declaration name="sha" type="SHA" line="69"/>
            <method name="DSAParameterGenerator" type="constructor" line="71"/>
            <javadoc line="75">
                Initializes this parameter generator for a certain strength
                  and source of randomness.                
                <param>
                    strength the strength (size of prime) in bits                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
            </javadoc>
            <method name="engineInit" type="void" line="82">
                <params>
                    <param name="strength" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="84">
                    Bruce Schneier, &quot;Applied Cryptography&quot;, 2nd Edition,
                     Description of DSA:
                     [...] The algorithm uses the following parameter:
                     p=a prime number L bits long, when L ranges from 512 to 1024 and is
                     a multiple of 64. [...]                    
                </comment>
                <scope line="90"/>
            </method>
            <javadoc line="99">
                Initializes this parameter generator with a set of
                  algorithm-specific parameter generation values.                
                <param>
                    params the set of algorithm-specific parameter generation values                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameter
                      generation values are inappropriate for this parameter generator                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="111">
                <params>
                    <param name="genParamSpec" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="115">
                Generates the parameters.                
                <return>
                    the new AlgorithmParameters object                    
                </return>
            </javadoc>
            <method name="engineGenerateParameters" type="AlgorithmParameters" line="120">
                <comment line="139">
                    this should never happen                    
                </comment>
                <comment line="142">
                    this should never happen, because we provide it                    
                </comment>
                <comment line="145">
                    this should never happen, because we provide it                    
                </comment>
                <declaration name="algParams" type="AlgorithmParameters" line="121"/>
                <scope line="122">
                    <scope line="123"/>
                    <declaration name="pAndQ" type="BigInteger[]" line="127"/>
                    <declaration name="paramP" type="BigInteger" line="128"/>
                    <declaration name="paramQ" type="BigInteger" line="129"/>
                    <declaration name="paramG" type="BigInteger" line="130"/>
                    <declaration name="dsaParamSpec" type="DSAParameterSpec" line="132"/>
                </scope>
                <scope line="137"/>
                <scope line="140"/>
                <scope line="143"/>
            </method>
            <method name="generatePandQ" type="BigInteger[]" line="164">
                <params>
                    <param name="random" type="SecureRandom"/>
                    <param name="L" type="int"/>
                </params>
                <declaration name="result" type="BigInteger[]" line="165"/>
                <declaration name="seed" type="byte[]" line="166"/>
                <scope line="168">
                    <scope line="169"/>
                </scope>
            </method>
            <method name="generatePandQ" type="BigInteger[]" line="191">
                <params>
                    <param name="seed" type="byte[]"/>
                    <param name="L" type="int"/>
                </params>
                <comment line="194">
                                        
                </comment>
                <comment line="202">
                                        
                </comment>
                <comment line="209">
                                        
                </comment>
                <comment line="214">
                                        
                </comment>
                <comment line="222">
                                        
                </comment>
                <comment line="225">
                                        
                </comment>
                <comment line="232">
                                        
                </comment>
                <comment line="242">
                                        
                </comment>
                <comment line="246">
                                        
                </comment>
                <declaration name="g" type="int" line="194"/>
                <declaration name="n" type="int" line="195"/>
                <declaration name="b" type="int" line="196"/>
                <declaration name="SEED" type="BigInteger" line="198"/>
                <declaration name="TWOG" type="BigInteger" line="199"/>
                <declaration name="U1" type="byte[]" line="202"/>
                <declaration name="U2" type="byte[]" line="203"/>
                <declaration name="U" type="byte[]" line="206"/>
                <declaration name="q" type="BigInteger" line="211"/>
                <scope line="214"/>
                <scope line="217">
                    <declaration name="V" type="BigInteger" line="218"/>
                    <declaration name="offset" type="BigInteger" line="219"/>
                    <scope line="222">
                        <scope line="225">
                            <declaration name="K" type="BigInteger" line="226"/>
                            <declaration name="tmp" type="BigInteger" line="227"/>
                        </scope>
                        <declaration name="W" type="BigInteger" line="232"/>
                        <scope line="233"/>
                        <declaration name="TWOLm1" type="BigInteger" line="238"/>
                        <declaration name="X" type="BigInteger" line="239"/>
                        <declaration name="c" type="BigInteger" line="242"/>
                        <declaration name="p" type="BigInteger" line="243"/>
                        <scope line="246">
                            <declaration name="result" type="BigInteger[]" line="247"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="generateG" type="BigInteger" line="265">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                </params>
                <declaration name="h" type="BigInteger" line="266"/>
                <declaration name="pMinusOneOverQ" type="BigInteger" line="267"/>
                <declaration name="g" type="BigInteger" line="268"/>
                <scope line="269"/>
            </method>
            <method name="SHA" type="byte[]" line="279">
                <params>
                    <param name="array" type="byte[]"/>
                </params>
            </method>
            <method name="toByteArray" type="byte[]" line="289">
                <params>
                    <param name="bigInt" type="BigInteger"/>
                </params>
                <declaration name="result" type="byte[]" line="290"/>
                <scope line="291">
                    <declaration name="tmp" type="byte[]" line="292"/>
                </scope>
            </method>
            <method name="xor" type="void" line="302">
                <params>
                    <param name="U1" type="byte[]"/>
                    <param name="U2" type="byte[]"/>
                </params>
                <scope line="303"/>
            </method>
        </class>
    </source>