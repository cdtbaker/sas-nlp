<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io"/>
        <import package="java.net.URI"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.cert"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.x509"/>
        <class name="DistributionPointFetcher" line="40">
            <comment line="69">
                singleton instance                
            </comment>
            <javadoc line="40">
                Class to obtain CRLs via the CRLDistributionPoints extension.
                  Note that the functionality of this class must be explicitly enabled
                  via a system property, see the USE_CRLDP variable below.
                  This class uses the URICertStore class to fetch CRLs. The URICertStore
                  class also implements CRL caching: see the class description for more
                  information.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
                <since>
                    1.4.2                    
                </since>
            </javadoc>
            <declaration name="debug" type="Debug" line="55"/>
            <declaration name="ALL_REASONS" type="boolean[]" line="57"/>
            <declaration name="USE_CRLDP" type="boolean" line="60"/>
            <javadoc line="60">
                Flag indicating whether support for the CRL distribution point
                  extension shall be enabled. Currently disabled by default for
                  compatibility and legal reasons.                
            </javadoc>
            <declaration name="INSTANCE" type="DistributionPointFetcher" line="69"/>
            <javadoc line="72">
                Private instantiation only.                
            </javadoc>
            <method name="DistributionPointFetcher" type="constructor" line="75"/>
            <javadoc line="77">
                Return a DistributionPointFetcher instance.                
            </javadoc>
            <method name="getInstance" type="DistributionPointFetcher" line="80"/>
            <javadoc line="84">
                Return the X509CRLs matching this selector. The selector must be
                  an X509CRLSelector with certificateChecking set.
                  If CRLDP support is disabled, this method always returns an
                  empty set.                
            </javadoc>
            <method name="getCRLs" type="Collection<X509CRL>" line="94">
                <params>
                    <param name="selector" type="X509CRLSelector"/>
                    <param name="signFlag" type="boolean"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="provider" type="String"/>
                    <param name="certStores" type="List<CertStore>"/>
                    <param name="reasonsMask" type="boolean[]"/>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                    <param name="validity" type="Date"/>
                </params>
                <scope line="96"/>
                <declaration name="cert" type="X509Certificate" line="99"/>
                <scope line="100"/>
                <scope line="103">
                    <declaration name="certImpl" type="X509CertImpl" line="104"/>
                    <scope line="105"/>
                    <declaration name="ext" type="CRLDistributionPointsExtension" line="109"/>
                    <scope line="111">
                        <scope line="112"/>
                    </scope>
                    <declaration name="points" type="List&lt;DistributionPoint&gt;" line="117"/>
                    <declaration name="results" type="Set&lt;X509CRL&gt;" line="119"/>
                    <scope line="121">
                        <declaration name="point" type="DistributionPoint" line="122"/>
                        <declaration name="crls" type="Collection&lt;X509CRL&gt;" line="123"/>
                    </scope>
                    <scope line="128"/>
                </scope>
                <scope line="132"/>
                <scope line="134"/>
            </method>
            <javadoc line="139">
                Download CRLs from the given distribution point, verify and return them.
                  See the top of the class for current limitations.                
            </javadoc>
            <method name="getCRLs" type="Collection<X509CRL>" line="147">
                <params>
                    <param name="selector" type="X509CRLSelector"/>
                    <param name="certImpl" type="X509CertImpl"/>
                    <param name="point" type="DistributionPoint"/>
                    <param name="reasonsMask" type="boolean[]"/>
                    <param name="signFlag" type="boolean"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="provider" type="String"/>
                    <param name="certStores" type="List<CertStore>"/>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                    <param name="validity" type="Date"/>
                </params>
                <comment line="150">
                    check for full name                    
                </comment>
                <comment line="153">
                    check for relative name                    
                </comment>
                <comment line="164">
                    should only be one CRL Issuer                    
                </comment>
                <comment line="196">
                    make sure issuer is not set
                     we check the issuer in verifyCRLs method                    
                </comment>
                <comment line="205">
                    don&apos;t add the CRL                    
                </comment>
                <declaration name="fullName" type="GeneralNames" line="150"/>
                <scope line="151">
                    <declaration name="relativeName" type="RDN" line="153"/>
                    <scope line="154"/>
                    <scope line="157">
                        <declaration name="crlIssuers" type="GeneralNames" line="158"/>
                        <scope line="159"/>
                        <scope line="162">
                            <scope line="164"/>
                            <scope line="166"/>
                        </scope>
                    </scope>
                    <scope line="171"/>
                </scope>
                <declaration name="possibleCRLs" type="Collection&lt;X509CRL&gt;" line="175"/>
                <declaration name="crls" type="Collection&lt;X509CRL&gt;" line="176"/>
                <scope line="177">
                    <declaration name="name" type="GeneralName" line="178"/>
                    <scope line="179">
                        <declaration name="x500Name" type="X500Name" line="180"/>
                    </scope>
                    <scope line="184">
                        <declaration name="uriName" type="URIName" line="185"/>
                        <declaration name="crl" type="X509CRL" line="186"/>
                        <scope line="187"/>
                    </scope>
                </scope>
                <scope line="193">
                    <scope line="194">
                        <scope line="200"/>
                    </scope>
                    <scope line="203">
                        <scope line="205"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="214">
                Download CRL from given URI.                
            </javadoc>
            <method name="getCRL" type="X509CRL" line="217">
                <params>
                    <param name="name" type="URIName"/>
                </params>
                <declaration name="uri" type="URI" line="218"/>
                <scope line="219"/>
                <scope line="222">
                    <declaration name="ucs" type="CertStore" line="223"/>
                    <declaration name="crls" type="Collection&lt;? extends CRL&gt;" line="225"/>
                    <scope line="226"/>
                    <scope line="228"/>
                </scope>
                <scope line="231">
                    <scope line="232"/>
                </scope>
            </method>
            <javadoc line="240">
                Fetch CRLs from certStores.                
            </javadoc>
            <method name="getCRLs" type="Collection<X509CRL>" line="245">
                <params>
                    <param name="name" type="X500Name"/>
                    <param name="certIssuer" type="X500Principal"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <comment line="260">
                    don&apos;t add the CRL                    
                </comment>
                <scope line="246"/>
                <declaration name="xcs" type="X509CRLSelector" line="249"/>
                <declaration name="crls" type="Collection&lt;X509CRL&gt;" line="252"/>
                <scope line="253">
                    <scope line="254">
                        <scope line="255"/>
                    </scope>
                    <scope line="258">
                        <scope line="260"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="270">
                Verifies a CRL for the given certificate&apos;s Distribution Point to
                  ensure it is appropriate for checking the revocation status.                
                <param>
                    certImpl the certificate whose revocation status is being checked                    
                </param>
                <param>
                    point one of the distribution points of the certificate                    
                </param>
                <param>
                    crl the CRL                    
                </param>
                <param>
                    reasonsMask the interim reasons mask                    
                </param>
                <param>
                    signFlag true if prevKey can be used to verify the CRL                    
                </param>
                <param>
                    prevKey the public key that verifies the certificate&apos;s signature                    
                </param>
                <param>
                    provider the Signature provider to use                    
                </param>
                <param>
                    trustAnchors a {@code Set} of {@code TrustAnchor}s                    
                </param>
                <param>
                    certStores a {@code List} of {@code CertStore}s to be used in
                      finding certificates and CRLs                    
                </param>
                <param>
                    validity the time for which the validity of the CRL issuer&apos;s
                      certification path should be determined                    
                </param>
                <return>
                    true if ok, false if not                    
                </return>
            </javadoc>
            <method name="verifyCRL" type="boolean" line="292">
                <params>
                    <param name="certImpl" type="X509CertImpl"/>
                    <param name="point" type="DistributionPoint"/>
                    <param name="crl" type="X509CRL"/>
                    <param name="reasonsMask" type="boolean[]"/>
                    <param name="signFlag" type="boolean"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="provider" type="String"/>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                    <param name="certStores" type="List<CertStore>"/>
                    <param name="validity" type="Date"/>
                </params>
                <comment line="302">
                    if crlIssuer is set, verify that it matches the issuer of the
                     CRL and the CRL contains an IDP extension with the indirectCRL
                     boolean asserted. Otherwise, verify that the CRL issuer matches the
                     certificate issuer.                    
                </comment>
                <comment line="328">
                    we accept the case that a CRL issuer provide status
                     information for itself.                    
                </comment>
                <comment line="331">
                    reset the public key used to verify the CRL&apos;s signature                    
                </comment>
                <comment line="342">
                    in case of self-issued indirect CRL issuer.                    
                </comment>
                <comment line="349">
                    cannot recognize indirect CRL without AKID                    
                </comment>
                <comment line="351">
                    we accept the case that a CRL issuer provide status
                     information for itself.                    
                </comment>
                <comment line="354">
                    reset the public key used to verify the CRL&apos;s signature                    
                </comment>
                <comment line="358">
                    we accept the case that a CRL issuer provide status
                     information for itself.                    
                </comment>
                <comment line="361">
                    reset the public key used to verify the CRL&apos;s signature                    
                </comment>
                <comment line="370">
                    cert&apos;s key cannot be used to verify the CRL                    
                </comment>
                <comment line="392">
                    if the DP name is present in the IDP CRL extension and the
                     DP field is present in the DP, then verify that one of the
                     names in the IDP matches one of the names in the DP                    
                </comment>
                <comment line="411">
                    RFC 3280: there must be only 1 CRL issuer
                     name when relativeName is present                    
                </comment>
                <comment line="447">
                    if the DP name is present in the IDP CRL extension and the
                     DP field is absent from the DP, then verify that one of the
                     names in the IDP matches one of the names in the crlIssuer
                     field of the DP                    
                </comment>
                <comment line="452">
                    verify that one of the names in the IDP matches one of
                     the names in the cRLIssuer of the cert&apos;s DP                    
                </comment>
                <comment line="470">
                    if the onlyContainsUserCerts boolean is asserted, verify that the
                     cert is not a CA cert                    
                </comment>
                <comment line="481">
                    if the onlyContainsCACerts boolean is asserted, verify that the
                     cert is a CA cert                    
                </comment>
                <comment line="492">
                    verify that the onlyContainsAttributeCerts boolean is not
                     asserted                    
                </comment>
                <comment line="504">
                    compute interim reasons mask                    
                </comment>
                <comment line="515">
                    set interim reasons mask to the intersection of
                     reasons in the DP and onlySomeReasons in the IDP                    
                </comment>
                <comment line="524">
                    set interim reasons mask to the value of
                     onlySomeReasons in the IDP (and clone it since we may
                     modify it)                    
                </comment>
                <comment line="531">
                    set interim reasons mask to the value of DP reasons                    
                </comment>
                <comment line="534">
                    set interim reasons mask to the special value all-reasons                    
                </comment>
                <comment line="540">
                    verify that interim reasons mask includes one or more reasons
                     not included in the reasons mask                    
                </comment>
                <comment line="552">
                    Obtain and validate the certification path for the complete
                     CRL issuer (if indirect CRL). If a key usage extension is present
                     in the CRL issuer&apos;s certificate, verify that the cRLSign bit is set.                    
                </comment>
                <comment line="561">
                    Currently by default, forward builder does not enable
                     subject/authority key identifier identifying for target
                     certificate, instead, it only compares the CRL issuer and
                     the target certificate subject. If the certificate of the
                     delegated CRL issuer is a self-issued certificate, the
                     builder is unable to find the proper CRL issuer by issuer
                     name only, there is a potential dead loop on finding the
                     proper issuer. It is of great help to narrow the target
                     scope down to aware of authority key identifiers in the
                     selector, for the purposes of breaking the dead loop.                    
                </comment>
                <comment line="586">
                    the subject criterion will be set by builder automatically.                    
                </comment>
                <comment line="589">
                    by far, we have validated the previous certificate, we can
                     trust it during validating the CRL issuer.
                     Except the performance improvement, another benefit is to break
                     the dead loop while looking for the issuer back and forth
                     between the delegated self-issued certificate and its issuer.                    
                </comment>
                <comment line="597">
                    Add the previous certificate as a trust anchor.                    
                </comment>
                <comment line="623">
                    check the crl signature algorithm                    
                </comment>
                <comment line="633">
                    validate the signature on the CRL                    
                </comment>
                <comment line="643">
                    reject CRL if any unresolved critical extensions remain in the CRL.                    
                </comment>
                <comment line="645">
                    remove any that we have processed                    
                </comment>
                <comment line="661">
                    update reasonsMask                    
                </comment>
                <declaration name="indirectCRL" type="boolean" line="294"/>
                <declaration name="crlImpl" type="X509CRLImpl" line="295"/>
                <declaration name="idpExt" type="IssuingDistributionPointExtension" line="296"/>
                <declaration name="certIssuer" type="X500Name" line="298"/>
                <declaration name="crlIssuer" type="X500Name" line="299"/>
                <declaration name="pointCrlIssuers" type="GeneralNames" line="305"/>
                <declaration name="pointCrlIssuer" type="X500Name" line="306"/>
                <scope line="307">
                    <scope line="311"/>
                    <declaration name="match" type="boolean" line="314"/>
                    <scope line="316">
                        <declaration name="name" type="GeneralNameInterface" line="317"/>
                        <scope line="318"/>
                    </scope>
                    <scope line="323"/>
                    <scope line="329"/>
                    <scope line="332"/>
                </scope>
                <scope line="335">
                    <scope line="336"/>
                </scope>
                <scope line="340">
                    <declaration name="certAKID" type="byte[]" line="342"/>
                    <declaration name="crlAKID" type="byte[]" line="344"/>
                    <scope line="347">
                        <scope line="352"/>
                    </scope>
                    <scope line="356">
                        <scope line="359"/>
                        <scope line="362"/>
                    </scope>
                </scope>
                <scope line="368"/>
                <scope line="373">
                    <declaration name="idpPoint" type="DistributionPointName" line="374"/>
                    <scope line="376">
                        <declaration name="idpNames" type="GeneralNames" line="377"/>
                        <scope line="378">
                            <declaration name="relativeName" type="RDN" line="379"/>
                            <scope line="380">
                                <scope line="381"/>
                            </scope>
                            <scope line="386"/>
                        </scope>
                        <scope line="395">
                            <declaration name="pointNames" type="GeneralNames" line="396"/>
                            <scope line="397">
                                <declaration name="relativeName" type="RDN" line="398"/>
                                <scope line="399">
                                    <scope line="400"/>
                                </scope>
                                <scope line="405"/>
                                <scope line="408">
                                    <scope line="409">
                                        <scope line="412"/>
                                    </scope>
                                </scope>
                                <scope line="420"/>
                            </scope>
                            <declaration name="match" type="boolean" line="424"/>
                            <scope line="426">
                                <declaration name="idpName" type="GeneralNameInterface" line="427"/>
                                <scope line="428"/>
                                <scope line="432">
                                    <declaration name="pointName" type="GeneralNameInterface" line="433"/>
                                    <scope line="434"/>
                                </scope>
                            </scope>
                            <scope line="440">
                                <scope line="441"/>
                            </scope>
                        </scope>
                        <scope line="450">
                            <declaration name="match" type="boolean" line="453"/>
                            <scope line="455">
                                <declaration name="crlIssuerName" type="GeneralNameInterface" line="456"/>
                                <scope line="458">
                                    <declaration name="idpName" type="GeneralNameInterface" line="459"/>
                                </scope>
                            </scope>
                            <scope line="463"/>
                        </scope>
                    </scope>
                    <declaration name="b" type="Boolean" line="471"/>
                    <scope line="473">
                        <scope line="474"/>
                    </scope>
                    <scope line="484">
                        <scope line="485"/>
                    </scope>
                    <scope line="495">
                        <scope line="496"/>
                    </scope>
                </scope>
                <declaration name="interimReasonsMask" type="boolean[]" line="504"/>
                <declaration name="reasons" type="ReasonFlags" line="505"/>
                <scope line="506"/>
                <declaration name="pointReasonFlags" type="boolean[]" line="511"/>
                <scope line="512">
                    <scope line="513">
                        <declaration name="idpReasonFlags" type="boolean[]" line="516"/>
                        <scope line="517">
                            <scope line="518"/>
                        </scope>
                    </scope>
                    <scope line="522"/>
                </scope>
                <scope line="528">
                    <scope line="529"/>
                    <scope line="532"/>
                </scope>
                <declaration name="oneOrMore" type="boolean" line="541"/>
                <scope line="542">
                    <scope line="543"/>
                </scope>
                <scope line="547"/>
                <scope line="554">
                    <declaration name="certSel" type="X509CertSelector" line="555"/>
                    <declaration name="crlSign" type="boolean[]" line="557"/>
                    <declaration name="akidext" type="AuthorityKeyIdentifierExtension" line="570"/>
                    <scope line="572">
                        <declaration name="akid" type="KeyIdentifier" line="573"/>
                        <scope line="574">
                            <declaration name="derout" type="DerOutputStream" line="575"/>
                        </scope>
                        <declaration name="asn" type="SerialNumber" line="580"/>
                        <scope line="582"/>
                    </scope>
                    <declaration name="newTrustAnchors" type="Set&lt;TrustAnchor&gt;" line="593"/>
                    <scope line="595">
                        <declaration name="principal" type="X500Principal" line="597"/>
                        <declaration name="temporary" type="TrustAnchor" line="598"/>
                    </scope>
                    <declaration name="params" type="PKIXBuilderParameters" line="603"/>
                    <scope line="604"/>
                    <scope line="606"/>
                    <scope line="612">
                        <declaration name="builder" type="CertPathBuilder" line="613"/>
                        <declaration name="result" type="PKIXCertPathBuilderResult" line="614"/>
                    </scope>
                    <scope line="617"/>
                </scope>
                <scope line="623"/>
                <scope line="625">
                    <scope line="626"/>
                </scope>
                <scope line="633"/>
                <scope line="635">
                    <scope line="636"/>
                </scope>
                <declaration name="unresCritExts" type="Set&lt;String&gt;" line="643"/>
                <scope line="645">
                    <scope line="648">
                        <scope line="649">
                            <declaration name="i" type="Iterator&lt;String&gt;" line="652"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="661">
                    <scope line="662"/>
                </scope>
            </method>
            <javadoc line="669">
                Append relative name to the issuer name and return a new
                  GeneralNames object.                
            </javadoc>
            <method name="getFullNames" type="GeneralNames" line="674">
                <params>
                    <param name="issuer" type="X500Name"/>
                    <param name="rdn" type="RDN"/>
                </params>
                <declaration name="rdns" type="List&lt;RDN&gt;" line="675"/>
                <declaration name="fullName" type="X500Name" line="677"/>
                <declaration name="fullNames" type="GeneralNames" line="678"/>
            </method>
            <javadoc line="683">
                Verifies whether a CRL is issued by a certain certificate                
                <param>
                    cert the certificate                    
                </param>
                <param>
                    crl the CRL to be verified                    
                </param>
                <param>
                    provider the name of the signature provider                    
                </param>
            </javadoc>
            <method name="issues" type="boolean" line="690">
                <params>
                    <param name="cert" type="X509CertImpl"/>
                    <param name="crl" type="X509CRLImpl"/>
                    <param name="provider" type="String"/>
                </params>
                <comment line="698">
                    check certificate&apos;s key usage                    
                </comment>
                <comment line="701">
                    cRLSign                    
                </comment>
                <comment line="705">
                    check certificate&apos;s subject                    
                </comment>
                <comment line="709">
                    Facilitate certification path construction with authority
                     key identifier and subject key identifier.
                    
                     In practice, conforming CAs MUST use the key identifier method,
                     and MUST include authority key identifier extension in all CRLs
                     issued. [section 5.2.1, RFC 2459]                    
                </comment>
                <comment line="724">
                    if AKID is unreliable, verify the CRL signature with the cert                    
                </comment>
                <declaration name="matched" type="boolean" line="692"/>
                <declaration name="issuerSelector" type="AdaptableX509CertSelector" line="694"/>
                <declaration name="usages" type="boolean[]" line="698"/>
                <scope line="699"/>
                <declaration name="crlIssuer" type="X500Principal" line="705"/>
                <declaration name="crlAKID" type="AuthorityKeyIdentifierExtension" line="716"/>
                <scope line="717"/>
                <scope line="725">
                    <scope line="726"/>
                    <scope line="729"/>
                </scope>
            </method>
        </class>
    </source>