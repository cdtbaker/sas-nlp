<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.ProviderException"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="sun.security.x509.AlgIdDSA"/>
        <import package="sun.security.pkcs.PKCS8Key"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <class name="DSAPrivateKey" line="45">
            <extends class="PKCS8Key"/>
            <comment line="63">
                                
            </comment>
            <comment line="66">
                Keep this constructor for backwards compatibility with JDK1.1.                
            </comment>
            <implements interface="java.security.interfaces.DSAPrivateKey"/>
            <implements interface="Serializable"/>
            <javadoc line="45">
                A PKCS#8 private key for the Digital Signature Algorithm.                
                <author>
                    Benjamin Renaud                    
                </author>
                <see>
                    DSAPublicKey                    
                </see>
                <see>
                    AlgIdDSA                    
                </see>
                <see>
                    DSA                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="59"/>
            <javadoc line="59">
                use serialVersionUID from JDK 1.1. for interoperability                
            </javadoc>
            <declaration name="x" type="BigInteger" line="63"/>
            <method name="DSAPrivateKey" type="constructor" line="68"/>
            <javadoc line="71">
                Make a DSA private key out of a private key and three parameters.                
            </javadoc>
            <method name="DSAPrivateKey" type="constructor" line="76">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
                <scope line="80"/>
                <scope line="84">
                    <declaration name="ike" type="InvalidKeyException" line="85"/>
                </scope>
            </method>
            <javadoc line="92">
                Make a DSA private key from its DER encoding (PKCS #8).                
            </javadoc>
            <method name="DSAPrivateKey" type="constructor" line="95">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
            </method>
            <javadoc line="100">
                Returns the DSA parameters associated with this key, or null if the
                  parameters could not be parsed.                
            </javadoc>
            <method name="getParams" type="DSAParams" line="104">
                <scope line="105">
                    <scope line="106"/>
                    <scope line="108">
                        <declaration name="paramSpec" type="DSAParameterSpec" line="109"/>
                        <declaration name="algParams" type="AlgorithmParameters" line="110"/>
                        <scope line="111"/>
                    </scope>
                </scope>
                <scope line="117"/>
            </method>
            <javadoc line="122">
                Get the raw private key, x, without the parameters.                
                <see>
                    getParameters                    
                </see>
            </javadoc>
            <method name="getX" type="BigInteger" line="127"/>
            <method name="clearOldKey" type="void" line="131">
                <declaration name="i" type="int" line="132"/>
                <scope line="133">
                    <scope line="134"/>
                </scope>
                <scope line="138">
                    <scope line="139"/>
                </scope>
            </method>
            <method name="toString" type="String" line="145"/>
            <method name="parseKeyBits" type="void" line="150">
                <scope line="151">
                    <declaration name="in" type="DerInputStream" line="152"/>
                </scope>
                <scope line="154">
                    <declaration name="ike" type="InvalidKeyException" line="155"/>
                </scope>
            </method>
        </class>
    </source>