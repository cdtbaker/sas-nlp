<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.ProviderException"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="sun.security.x509.AlgIdDSA"/>
        <import package="sun.security.pkcs.PKCS8Key"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <class name="DSAPrivateKey" line="17">
            <extends class="PKCS8Key"/>
            <implements interface="java.security.interfaces.DSAPrivateKey"/>
            <implements interface="Serializable"/>
            <javadoc line="17">
                A PKCS#8 private key for the Digital Signature Algorithm.                
                <author>
                    Benjamin Renaud                    
                </author>
                <see>
                    DSAPublicKey                    
                </see>
                <see>
                    AlgIdDSA                    
                </see>
                <see>
                    DSA                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="25"/>
            <javadoc line="25">
                use serialVersionUID from JDK 1.1. for interoperability                
            </javadoc>
            <declaration name="x" type="BigInteger" line="29"/>
            <method name="DSAPrivateKey" type="constructor" line="30"/>
            <javadoc line="32">
                Make a DSA private key out of a private key and three parameters.                
            </javadoc>
            <method name="DSAPrivateKey" type="constructor" line="35">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
                <scope line="38"/>
                <scope line="42">
                    <declaration name="ike" type="InvalidKeyException" line="43"/>
                </scope>
            </method>
            <javadoc line="48">
                Make a DSA private key from its DER encoding (PKCS #8).                
            </javadoc>
            <method name="DSAPrivateKey" type="constructor" line="51">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
            </method>
            <javadoc line="55">
                Returns the DSA parameters associated with this key, or null if the
                  parameters could not be parsed.                
            </javadoc>
            <method name="getParams" type="DSAParams" line="59">
                <scope line="60">
                    <scope line="61"/>
                    <scope line="64">
                        <declaration name="paramSpec" type="DSAParameterSpec" line="65"/>
                        <declaration name="algParams" type="AlgorithmParameters" line="66"/>
                        <scope line="67"/>
                    </scope>
                </scope>
                <scope line="74"/>
            </method>
            <javadoc line="78">
                Get the raw private key, x, without the parameters.                
                <see>
                    getParameters                    
                </see>
            </javadoc>
            <method name="getX" type="BigInteger" line="82"/>
            <method name="clearOldKey" type="void" line="85">
                <declaration name="i" type="int" line="86"/>
                <scope line="87">
                    <scope line="88"/>
                </scope>
                <scope line="92">
                    <scope line="93"/>
                </scope>
            </method>
            <method name="toString" type="String" line="98"/>
            <method name="parseKeyBits" type="void" line="101">
                <scope line="102">
                    <declaration name="in" type="DerInputStream" line="103"/>
                </scope>
                <scope line="106">
                    <declaration name="ike" type="InvalidKeyException" line="107"/>
                </scope>
            </method>
        </class>
    </source>