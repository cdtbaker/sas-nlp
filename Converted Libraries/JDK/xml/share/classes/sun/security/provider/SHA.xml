<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="sun.security.provider.ByteArrayAccess"/>
        <class name="SHA" line="30">
            <extends class="DigestBase"/>
            <comment line="47">
                Buffer of int&apos;s and count of characters accumulated
                 64 bytes are included in each hash block so the low order
                 bits of count are used to know how to pack the bytes into ints
                 and to know when to compute the block and start the next one.                
            </comment>
            <comment line="53">
                state of this                
            </comment>
            <comment line="74">
                Clones this object.                
            </comment>
            <comment line="109">
                Constants for each round                
            </comment>
            <javadoc line="30">
                This class implements the Secure Hash Algorithm (SHA) developed by
                  the National Institute of Standards and Technology along with the
                  National Security Agency.  This is the updated version of SHA
                  fip-180 as superseded by fip-180-1.
                  &lt;p&gt;It implement JavaSecurity MessageDigest, and can be used by in
                  the Java Security framework, as a pluggable implementation, as a
                  filter for the digest stream classes.                
                <author>
                    Roger Riggs                    
                </author>
                <author>
                    Benjamin Renaud                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="W" type="int[]" line="50"/>
            <declaration name="state" type="int[]" line="53"/>
            <javadoc line="55">
                Creates a new SHA object.                
            </javadoc>
            <method name="SHA" type="constructor" line="58"/>
            <javadoc line="65">
                Creates a SHA object.with state (for cloning)                
            </javadoc>
            <method name="SHA" type="constructor" line="67">
                <params>
                    <param name="base" type="SHA"/>
                </params>
            </method>
            <method name="clone" type="Object" line="76"/>
            <javadoc line="80">
                Resets the buffers and hash value to start a new hash.                
            </javadoc>
            <method name="implReset" type="void" line="83"/>
            <javadoc line="91">
                Computes the final hash and copies the 20 bytes to the output array.                
            </javadoc>
            <method name="implDigest" type="void" line="94">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="ofs" type="int"/>
                </params>
                <declaration name="bitsProcessed" type="long" line="95"/>
                <declaration name="index" type="int" line="97"/>
                <declaration name="padLen" type="int" line="98"/>
            </method>
            <declaration name="round1_kt" type="int" line="109"/>
            <declaration name="round2_kt" type="int" line="110"/>
            <declaration name="round3_kt" type="int" line="111"/>
            <declaration name="round4_kt" type="int" line="112"/>
            <javadoc line="114">
                Compute a the hash for the current block.
                  This is in the same vein as Peter Gutmann&apos;s algorithm listed in
                  the back of Applied Cryptography, Compact implementation of
                  &quot;old&quot; NIST Secure Hash Algorithm.                
            </javadoc>
            <method name="implCompress" type="void" line="121">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="ofs" type="int"/>
                </params>
                <comment line="125">
                    The first 16 ints have the byte stream, compute the rest of
                     the buffer                    
                </comment>
                <comment line="138">
                    Round 1                    
                </comment>
                <comment line="149">
                    Round 2                    
                </comment>
                <comment line="160">
                    Round 3                    
                </comment>
                <comment line="171">
                    Round 4                    
                </comment>
                <scope line="126">
                    <declaration name="temp" type="int" line="127"/>
                </scope>
                <declaration name="a" type="int" line="131"/>
                <declaration name="b" type="int" line="132"/>
                <declaration name="c" type="int" line="133"/>
                <declaration name="d" type="int" line="134"/>
                <declaration name="e" type="int" line="135"/>
                <scope line="138">
                    <declaration name="temp" type="int" line="139"/>
                </scope>
                <scope line="149">
                    <declaration name="temp" type="int" line="150"/>
                </scope>
                <scope line="160">
                    <declaration name="temp" type="int" line="161"/>
                </scope>
                <scope line="171">
                    <declaration name="temp" type="int" line="172"/>
                </scope>
            </method>
        </class>
    </source>