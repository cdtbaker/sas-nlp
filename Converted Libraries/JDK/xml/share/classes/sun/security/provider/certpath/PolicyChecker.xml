<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.util"/>
        <import package="java.io.IOException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.PolicyNode"/>
        <import package="java.security.cert.PolicyQualifierInfo"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.CertificatePoliciesExtension"/>
        <import package="sun.security.x509.PolicyConstraintsExtension"/>
        <import package="sun.security.x509.PolicyMappingsExtension"/>
        <import package="sun.security.x509.CertificatePolicyMap"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.x509.PolicyInformation"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.InhibitAnyPolicyExtension"/>
        <class name="PolicyChecker" line="21">
            <extends class="PKIXCertPathChecker"/>
            <javadoc line="21">
                PolicyChecker is a &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; that checks policy
                  information on a PKIX certificate, namely certificate policies, policy
                  mappings, policy constraints and policy qualifiers.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="initPolicies" type="Set&amp;lt;String&amp;gt;" line="29"/>
            <declaration name="certPathLen" type="int" line="30"/>
            <declaration name="expPolicyRequired" type="boolean" line="31"/>
            <declaration name="polMappingInhibited" type="boolean" line="32"/>
            <declaration name="anyPolicyInhibited" type="boolean" line="33"/>
            <declaration name="rejectPolicyQualifiers" type="boolean" line="34"/>
            <declaration name="rootNode" type="PolicyNodeImpl" line="35"/>
            <declaration name="explicitPolicy" type="int" line="36"/>
            <declaration name="policyMapping" type="int" line="37"/>
            <declaration name="inhibitAnyPolicy" type="int" line="38"/>
            <declaration name="certIndex" type="int" line="39"/>
            <declaration name="supportedExts" type="Set&amp;lt;String&amp;gt;" line="40"/>
            <declaration name="debug" type="Debug" line="41"/>
            <declaration name="ANY_POLICY" type="String" line="42"/>
            <javadoc line="43">
                Constructs a Policy Checker.                
                <param>
                    initialPolicies Set of initial policies                    
                </param>
                <param>
                    certPathLen length of the certification path to be checked                    
                </param>
                <param>
                    expPolicyRequired true if explicit policy is required                    
                </param>
                <param>
                    polMappingInhibited true if policy mapping is inhibited                    
                </param>
                <param>
                    anyPolicyInhibited true if the ANY_POLICY OID should be inhibited                    
                </param>
                <param>
                    rejectPolicyQualifiers true if pol qualifiers are to be rejected                    
                </param>
                <param>
                    rootNode the initial root node of the valid policy tree                    
                </param>
            </javadoc>
            <method name="PolicyChecker" type="constructor" line="53">
                <params>
                    <param name="initialPolicies" type="Set&lt;String&gt;"/>
                    <param name="certPathLen" type="int"/>
                    <param name="expPolicyRequired" type="boolean"/>
                    <param name="polMappingInhibited" type="boolean"/>
                    <param name="anyPolicyInhibited" type="boolean"/>
                    <param name="rejectPolicyQualifiers" type="boolean"/>
                    <param name="rootNode" type="PolicyNodeImpl"/>
                </params>
                <scope line="54"/>
                <scope line="58"/>
            </method>
            <javadoc line="69">
                Initializes the internal state of the checker from parameters
                  specified in the constructor                
                <param>
                    forward a boolean indicating whether this checker should
                      be initialized capable of building in the forward direction                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if user
                      wants to enable forward checking and forward checking is not supported.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="77">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="78"/>
            </method>
            <javadoc line="86">
                Checks if forward checking is supported. Forward checking refers
                  to the ability of the PKIXCertPathChecker to perform its checks
                  when presented with certificates in the forward direction (from
                  target to anchor).                
                <return>
                    true if forward checking is supported, false otherwise                    
                </return>
            </javadoc>
            <method name="isForwardCheckingSupported" type="boolean" line="93"/>
            <javadoc line="96">
                Gets an immutable Set of the OID strings for the extensions that
                  the PKIXCertPathChecker supports (i.e. recognizes, is able to
                  process), or null if no extensions are
                  supported. All OID strings that a PKIXCertPathChecker might
                  possibly be able to process should be included.                
                <return>
                    the Set of extensions supported by this PKIXCertPathChecker,
                      or null if no extensions are supported                    
                </return>
            </javadoc>
            <method name="getSupportedExtensions" type="Set&lt;String&gt;" line="105">
                <scope line="106"/>
            </method>
            <javadoc line="116">
                Performs the policy processing checks on the certificate using its
                  internal state.                
                <param>
                    cert the Certificate to be processed                    
                </param>
                <param>
                    unresCritExts the unresolved critical extensions                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if
                      the certificate does not verify.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="124">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="unresCritExts" type="Collection&lt;String&gt;"/>
                </params>
                <scope line="126"/>
            </method>
            <javadoc line="133">
                Internal method to run through all the checks.                
                <param>
                    currCert the certificate to be processed                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if
                      the certificate does not verify                    
                </exception>
            </javadoc>
            <method name="checkPolicy" type="void" line="139">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                </params>
                <declaration name="msg" type="String" line="140"/>
                <scope line="141"/>
                <declaration name="currCertImpl" type="X509CertImpl" line="149"/>
                <scope line="150"/>
                <scope line="153"/>
                <declaration name="finalCert" type="boolean" line="156"/>
                <scope line="158"/>
                <scope line="164"/>
            </method>
            <javadoc line="172">
                Merges the specified explicitPolicy value with the
                  requireExplicitPolicy field of the &lt;code&gt;PolicyConstraints&lt;/code&gt;
                  extension obtained from the certificate. An explicitPolicy
                  value of -1 implies no constraint.                
                <param>
                    explicitPolicy an integer which indicates if a non-null
                      valid policy tree is required                    
                </param>
                <param>
                    currCert the Certificate to be processed                    
                </param>
                <param>
                    finalCert a boolean indicating whether currCert is
                      the final cert in the cert path                    
                </param>
                <return>
                    returns the new explicitPolicy value                    
                </return>
                <exception>
                    CertPathValidatorException Exception thrown if an error
                      occurs                    
                </exception>
            </javadoc>
            <method name="mergeExplicitPolicy" type="int" line="186">
                <params>
                    <param name="explicitPolicy" type="int"/>
                    <param name="currCert" type="X509CertImpl"/>
                    <param name="finalCert" type="boolean"/>
                </params>
                <scope line="187"/>
                <scope line="190">
                    <declaration name="polConstExt" type="PolicyConstraintsExtension" line="191"/>
                    <declaration name="require" type="int" line="193"/>
                    <scope line="194"/>
                    <scope line="197">
                        <scope line="198">
                            <scope line="199"/>
                        </scope>
                    </scope>
                    <scope line="204"/>
                </scope>
                <scope line="208">
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="217">
                Merges the specified policyMapping value with the
                  inhibitPolicyMapping field of the &lt;code&gt;PolicyConstraints&lt;/code&gt;
                  extension obtained from the certificate. A policyMapping
                  value of -1 implies no constraint.                
                <param>
                    policyMapping an integer which indicates if policy mapping
                      is inhibited                    
                </param>
                <param>
                    currCert the Certificate to be processed                    
                </param>
                <return>
                    returns the new policyMapping value                    
                </return>
                <exception>
                    CertPathValidatorException Exception thrown if an error
                      occurs                    
                </exception>
            </javadoc>
            <method name="mergePolicyMapping" type="int" line="229">
                <params>
                    <param name="policyMapping" type="int"/>
                    <param name="currCert" type="X509CertImpl"/>
                </params>
                <scope line="230"/>
                <scope line="233">
                    <declaration name="polConstExt" type="PolicyConstraintsExtension" line="234"/>
                    <declaration name="inhibit" type="int" line="236"/>
                    <scope line="238">
                        <scope line="239"/>
                    </scope>
                </scope>
                <scope line="244">
                    <scope line="245"/>
                </scope>
            </method>
            <javadoc line="253">
                Merges the specified inhibitAnyPolicy value with the
                  SkipCerts value of the InhibitAnyPolicy
                  extension obtained from the certificate.                
                <param>
                    inhibitAnyPolicy an integer which indicates whether
                      &quot;any-policy&quot; is considered a match                    
                </param>
                <param>
                    currCert the Certificate to be processed                    
                </param>
                <return>
                    returns the new inhibitAnyPolicy value                    
                </return>
                <exception>
                    CertPathValidatorException Exception thrown if an error
                      occurs                    
                </exception>
            </javadoc>
            <method name="mergeInhibitAnyPolicy" type="int" line="264">
                <params>
                    <param name="inhibitAnyPolicy" type="int"/>
                    <param name="currCert" type="X509CertImpl"/>
                </params>
                <scope line="265"/>
                <scope line="268">
                    <declaration name="inhAnyPolExt" type="InhibitAnyPolicyExtension" line="269"/>
                    <declaration name="skipCerts" type="int" line="271"/>
                    <scope line="273">
                        <scope line="274"/>
                    </scope>
                </scope>
                <scope line="279">
                    <scope line="280"/>
                </scope>
            </method>
            <javadoc line="288">
                Processes certificate policies in the certificate.                
                <param>
                    certIndex the index of the certificate                    
                </param>
                <param>
                    initPolicies the initial policies required by the user                    
                </param>
                <param>
                    explicitPolicy an integer which indicates if a non-null
                      valid policy tree is required                    
                </param>
                <param>
                    policyMapping an integer which indicates if policy
                      mapping is inhibited                    
                </param>
                <param>
                    inhibitAnyPolicy an integer which indicates whether
                      &quot;any-policy&quot; is considered a match                    
                </param>
                <param>
                    rejectPolicyQualifiers a boolean indicating whether the
                      user wants to reject policies that have qualifiers                    
                </param>
                <param>
                    origRootNode the root node of the valid policy tree                    
                </param>
                <param>
                    currCert the Certificate to be processed                    
                </param>
                <param>
                    finalCert a boolean indicating whether currCert is the final
                      cert in the cert path                    
                </param>
                <return>
                    the root node of the valid policy tree after modification                    
                </return>
                <exception>
                    CertPathValidatorException Exception thrown if an
                      error occurs while processing policies.                    
                </exception>
            </javadoc>
            <method name="processPolicies" type="PolicyNodeImpl" line="308">
                <params>
                    <param name="certIndex" type="int"/>
                    <param name="initPolicies" type="Set&lt;String&gt;"/>
                    <param name="explicitPolicy" type="int"/>
                    <param name="policyMapping" type="int"/>
                    <param name="inhibitAnyPolicy" type="int"/>
                    <param name="rejectPolicyQualifiers" type="boolean"/>
                    <param name="origRootNode" type="PolicyNodeImpl"/>
                    <param name="currCert" type="X509CertImpl"/>
                    <param name="finalCert" type="boolean"/>
                </params>
                <declaration name="policiesCritical" type="boolean" line="309"/>
                <declaration name="policyInfo" type="List&amp;lt;PolicyInformation&amp;gt;" line="310"/>
                <declaration name="rootNode" type="PolicyNodeImpl" line="311"/>
                <declaration name="anyQuals" type="Set&amp;lt;PolicyQualifierInfo&amp;gt;" line="312"/>
                <declaration name="currCertPolicies" type="CertificatePoliciesExtension" line="315"/>
                <scope line="316">
                    <scope line="319"/>
                    <scope line="322"/>
                    <declaration name="foundAnyPolicy" type="boolean" line="326"/>
                    <scope line="327">
                        <declaration name="curPolicy" type="String" line="328"/>
                        <scope line="329"/>
                        <scope line="333">
                            <declaration name="pQuals" type="Set&amp;lt;PolicyQualifierInfo&amp;gt;" line="335"/>
                            <scope line="336"/>
                            <declaration name="foundMatch" type="boolean" line="339"/>
                            <scope line="340"/>
                        </scope>
                    </scope>
                    <scope line="345">
                        <scope line="346">
                            <scope line="347"/>
                        </scope>
                    </scope>
                    <scope line="354"/>
                </scope>
                <scope line="358"/>
                <scope line="362">
                    <scope line="363"/>
                </scope>
                <scope line="367">
                    <scope line="369"/>
                </scope>
                <scope line="373"/>
                <scope line="376"/>
            </method>
            <javadoc line="381">
                Rewrite leaf nodes at the end of validation as described in RFC 3280
                  section 6.1.5: Step (g)(iii). Leaf nodes with anyPolicy are replaced
                  by nodes explicitly representing initial policies not already
                  represented by leaf nodes.
                  This method should only be called when processing the final cert
                  and if the policy tree is not null and initial policies is not
                  anyPolicy.                
                <param>
                    certIndex the depth of the tree                    
                </param>
                <param>
                    initPolicies Set of user specified initial policies                    
                </param>
                <param>
                    rootNode the root of the policy tree                    
                </param>
            </javadoc>
            <method name="rewriteLeafNodes" type="PolicyNodeImpl" line="393">
                <params>
                    <param name="certIndex" type="int"/>
                    <param name="initPolicies" type="Set&lt;String&gt;"/>
                    <param name="rootNode" type="PolicyNodeImpl"/>
                </params>
                <declaration name="anyNodes" type="Set&amp;lt;PolicyNodeImpl&amp;gt;" line="394"/>
                <scope line="395"/>
                <declaration name="anyNode" type="PolicyNodeImpl" line="398"/>
                <declaration name="parentNode" type="PolicyNodeImpl" line="399"/>
                <declaration name="initial" type="Set&amp;lt;String&amp;gt;" line="401"/>
                <scope line="402"/>
                <scope line="405">
                    <scope line="407"/>
                </scope>
                <scope line="411">
                    <declaration name="anyCritical" type="boolean" line="412"/>
                    <declaration name="anyQualifiers" type="Set&amp;lt;PolicyQualifierInfo&amp;gt;" line="413"/>
                    <scope line="414">
                        <declaration name="expectedPolicies" type="Set&amp;lt;String&amp;gt;" line="415"/>
                        <declaration name="node" type="PolicyNodeImpl" line="416"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="421">
                Finds the policy nodes of depth (certIndex-1) where curPolicy
                  is in the expected policy set and creates a new child node
                  appropriately. If matchAny is true, then a value of ANY_POLICY
                  in the expected policy set will match any curPolicy. If matchAny
                  is false, then the expected policy set must exactly contain the
                  curPolicy to be considered a match. This method returns a boolean
                  value indicating whether a match was found.                
                <param>
                    certIndex the index of the certificate whose policy is
                      being processed                    
                </param>
                <param>
                    policiesCritical a boolean indicating whether the certificate
                      policies extension is critical                    
                </param>
                <param>
                    rejectPolicyQualifiers a boolean indicating whether the
                      user wants to reject policies that have qualifiers                    
                </param>
                <param>
                    rootNode the root node of the valid policy tree                    
                </param>
                <param>
                    curPolicy a String representing the policy being processed                    
                </param>
                <param>
                    pQuals the policy qualifiers of the policy being processed or an
                      empty Set if there are no qualifiers                    
                </param>
                <param>
                    matchAny a boolean indicating whether a value of ANY_POLICY
                      in the expected policy set will be considered a match                    
                </param>
                <return>
                    a boolean indicating whether a match was found                    
                </return>
                <exception>
                    CertPathValidatorException Exception thrown if error occurs.                    
                </exception>
            </javadoc>
            <method name="processParents" type="boolean" line="444">
                <params>
                    <param name="certIndex" type="int"/>
                    <param name="policiesCritical" type="boolean"/>
                    <param name="rejectPolicyQualifiers" type="boolean"/>
                    <param name="rootNode" type="PolicyNodeImpl"/>
                    <param name="curPolicy" type="String"/>
                    <param name="pQuals" type="Set&lt;PolicyQualifierInfo&gt;"/>
                    <param name="matchAny" type="boolean"/>
                </params>
                <declaration name="foundMatch" type="boolean" line="445"/>
                <declaration name="parentNodes" type="Set&amp;lt;PolicyNodeImpl&amp;gt;" line="447"/>
                <scope line="448">
                    <declaration name="curParPolicy" type="String" line="451"/>
                    <declaration name="curNode" type="PolicyNodeImpl" line="452"/>
                    <declaration name="curExpPols" type="Set&amp;lt;String&amp;gt;" line="453"/>
                    <scope line="454">
                        <declaration name="parExpPols" type="Set&amp;lt;String&amp;gt;" line="455"/>
                        <scope line="456">
                            <declaration name="childIter" type="Iterator&amp;lt;PolicyNodeImpl&amp;gt;" line="457"/>
                            <scope line="458">
                                <declaration name="childNode" type="PolicyNodeImpl" line="459"/>
                                <declaration name="childPolicy" type="String" line="460"/>
                                <scope line="461"/>
                            </scope>
                            <declaration name="expPols" type="Set&amp;lt;String&amp;gt;" line="466"/>
                        </scope>
                    </scope>
                    <scope line="471"/>
                </scope>
            </method>
            <javadoc line="479">
                Processes policy mappings in the certificate.                
                <param>
                    currCert the Certificate to be processed                    
                </param>
                <param>
                    certIndex the index of the current certificate                    
                </param>
                <param>
                    policyMapping an integer which indicates if policy
                      mapping is inhibited                    
                </param>
                <param>
                    rootNode the root node of the valid policy tree                    
                </param>
                <param>
                    policiesCritical a boolean indicating if the certificate policies
                      extension is critical                    
                </param>
                <param>
                    anyQuals the qualifiers associated with ANY-POLICY, or an empty
                      Set if there are no qualifiers associated with ANY-POLICY                    
                </param>
                <return>
                    the root node of the valid policy tree after modification                    
                </return>
                <exception>
                    CertPathValidatorException exception thrown if an error
                      occurs while processing policy mappings                    
                </exception>
            </javadoc>
            <method name="processPolicyMappings" type="PolicyNodeImpl" line="494">
                <params>
                    <param name="currCert" type="X509CertImpl"/>
                    <param name="certIndex" type="int"/>
                    <param name="policyMapping" type="int"/>
                    <param name="rootNode" type="PolicyNodeImpl"/>
                    <param name="policiesCritical" type="boolean"/>
                    <param name="anyQuals" type="Set&lt;PolicyQualifierInfo&gt;"/>
                </params>
                <declaration name="polMappingsExt" type="PolicyMappingsExtension" line="495"/>
                <declaration name="maps" type="List&amp;lt;CertificatePolicyMap&amp;gt;" line="498"/>
                <scope line="499"/>
                <scope line="502">
                    <scope line="503"/>
                </scope>
                <declaration name="childDeleted" type="boolean" line="509"/>
                <scope line="510">
                    <declaration name="polMap" type="CertificatePolicyMap" line="511"/>
                    <declaration name="issuerDomain" type="String" line="512"/>
                    <declaration name="subjectDomain" type="String" line="513"/>
                    <scope line="514"/>
                    <scope line="518"/>
                    <scope line="521"/>
                    <declaration name="validNodes" type="Set&amp;lt;PolicyNodeImpl&amp;gt;" line="524"/>
                    <scope line="525">
                        <scope line="526">
                            <scope line="527"/>
                            <scope line="530">
                                <declaration name="parentNode" type="PolicyNodeImpl" line="531"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="539">
                        <scope line="540">
                            <declaration name="validAnyNodes" type="Set&amp;lt;PolicyNodeImpl&amp;gt;" line="541"/>
                            <scope line="542">
                                <declaration name="curAnyNodeParent" type="PolicyNodeImpl" line="543"/>
                                <declaration name="expPols" type="Set&amp;lt;String&amp;gt;" line="544"/>
                                <declaration name="curNode" type="PolicyNodeImpl" line="546"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="551">
                    <scope line="553"/>
                </scope>
            </method>
            <javadoc line="560">
                Removes those nodes which do not intersect with the initial policies
                  specified by the user.                
                <param>
                    rootNode the root node of the valid policy tree                    
                </param>
                <param>
                    certIndex the index of the certificate being processed                    
                </param>
                <param>
                    initPolicies the Set of policies required by the user                    
                </param>
                <param>
                    currCertPolicies the CertificatePoliciesExtension of the
                      certificate being processed                    
                </param>
                <returns>
                    the root node of the valid policy tree after modification                    
                </returns>
                <exception>
                    CertPathValidatorException Exception thrown if error occurs.                    
                </exception>
            </javadoc>
            <method name="removeInvalidNodes" type="PolicyNodeImpl" line="571">
                <params>
                    <param name="rootNode" type="PolicyNodeImpl"/>
                    <param name="certIndex" type="int"/>
                    <param name="initPolicies" type="Set&lt;String&gt;"/>
                    <param name="currCertPolicies" type="CertificatePoliciesExtension"/>
                </params>
                <declaration name="policyInfo" type="List&amp;lt;PolicyInformation&amp;gt;" line="572"/>
                <scope line="573"/>
                <scope line="576"/>
                <declaration name="childDeleted" type="boolean" line="579"/>
                <scope line="580">
                    <declaration name="curPolicy" type="String" line="581"/>
                    <declaration name="validNodes" type="Set&amp;lt;PolicyNodeImpl&amp;gt;" line="583"/>
                    <scope line="584">
                        <declaration name="parentNode" type="PolicyNodeImpl" line="585"/>
                        <scope line="586">
                            <scope line="587"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="596">
                    <scope line="598"/>
                </scope>
            </method>
            <javadoc line="604">
                Gets the root node of the valid policy tree, or null if the
                  valid policy tree is null. Marks each node of the returned tree
                  immutable and thread-safe.                
                <returns>
                    the root node of the valid policy tree, or null if
                      the valid policy tree is null                    
                </returns>
            </javadoc>
            <method name="getPolicyTree" type="PolicyNode" line="611">
                <scope line="613">
                    <declaration name="policyTree" type="PolicyNodeImpl" line="614"/>
                </scope>
            </method>
        </class>
    </source>