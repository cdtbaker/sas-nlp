<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="sun.security.util.Debug"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.security.cert.CertificateRevokedException"/>
        <import package="java.security.cert.CertPath"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.CertPathValidatorException.BasicReason"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.X509Certificate"/>
        <class name="PKIXMasterCertPathValidator" line="41">
            <comment line="210">
                Examines the list of PKIX cert path checkers to determine whether
                 both the current checker and the next checker are revocation checkers.
                 OCSPChecker and CrlRevocationChecker are both revocation checkers.                
            </comment>
            <javadoc line="41">
                This class is initialized with a list of &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s
                  and is used to verify the certificates in a &lt;code&gt;CertPath&lt;/code&gt; by
                  feeding each certificate to each &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="51"/>
            <declaration name="certPathCheckers" type="List&lt;PKIXCertPathChecker&gt;" line="52"/>
            <javadoc line="54">
                Initializes the list of PKIXCertPathCheckers whose checks
                  will be performed on each certificate in the certpath.                
                <param>
                    certPathCheckers a List of checkers to use                    
                </param>
            </javadoc>
            <method name="PKIXMasterCertPathValidator" type="constructor" line="60">
                <params>
                    <param name="certPathCheckers" type="List<PKIXCertPathChecker>"/>
                </params>
            </method>
            <javadoc line="64">
                Validates a certification path consisting exclusively of
                  &lt;code&gt;X509Certificate&lt;/code&gt;s using the
                  &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s specified
                  in the constructor. It is assumed that the
                  &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s
                  have been initialized with any input parameters they may need.                
                <param>
                    cpOriginal the original X509 CertPath passed in by the user                    
                </param>
                <param>
                    reversedCertList the reversed X509 CertPath (as a List)                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if cert
                      path does not validate.                    
                </exception>
            </javadoc>
            <method name="validate" type="void" line="79">
                <params>
                    <param name="cpOriginal" type="CertPath"/>
                    <param name="reversedCertList" type="List<X509Certificate>"/>
                </params>
                <comment line="81">
                    we actually process reversedCertList, but we keep cpOriginal because
                     we need to return the original certPath when we throw an exception.
                     we will also need to modify the index appropriately when we
                     throw an exception.                    
                </comment>
                <comment line="97">
                    The basic loop algorithm is that we get the
                     current certificate, we verify the current certificate using
                     information from the previous certificate and from the state,
                     and we modify the state for the next loop by setting the
                     current certificate of this loop to be the previous certificate
                     of the next loop. The state is initialized during first loop.                    
                </comment>
                <comment line="136">
                    OCSP has validated the cert so skip the CRL check                    
                </comment>
                <comment line="143">
                    skip                    
                </comment>
                <comment line="147">
                    Throw the saved OCSP exception unless the CRL
                     checker has determined that the cert is revoked                    
                </comment>
                <comment line="157">
                    Handle failover from OCSP to CRLs                    
                </comment>
                <comment line="165">
                    Check if OCSP has confirmed that the cert was revoked                    
                </comment>
                <comment line="169">
                    Check if it is appropriate to failover                    
                </comment>
                <comment line="171">
                    no failover                    
                </comment>
                <comment line="174">
                    Save the current exception
                     (in case the CRL check also fails)                    
                </comment>
                <comment line="178">
                    Otherwise, failover to CRLs                    
                </comment>
                <declaration name="cpSize" type="int" line="85"/>
                <scope line="87"/>
                <scope line="94">
                    <declaration name="currCert" type="X509Certificate" line="106"/>
                    <declaration name="unresolvedCritExts" type="Set&lt;String&gt;" line="107"/>
                    <scope line="109"/>
                    <scope line="113">
                        <scope line="115"/>
                    </scope>
                    <declaration name="ocspCause" type="CertPathValidatorException" line="120"/>
                    <scope line="121">
                        <declaration name="currChecker" type="PKIXCertPathChecker" line="123"/>
                        <scope line="124"/>
                        <scope line="132">
                            <scope line="136">
                                <scope line="137"/>
                            </scope>
                        </scope>
                        <scope line="145">
                            <scope line="149">
                                <scope line="150"/>
                                <scope line="152"/>
                            </scope>
                            <declaration name="currentCause" type="CertPathValidatorException" line="159"/>
                            <scope line="165"/>
                            <scope line="169"/>
                            <scope line="178"/>
                        </scope>
                    </scope>
                    <scope line="191"/>
                </scope>
                <scope line="201"/>
            </method>
            <method name="isRevocationCheck" type="boolean" line="215">
                <params>
                    <param name="checker" type="PKIXCertPathChecker"/>
                    <param name="index" type="int"/>
                    <param name="checkers" type="List<PKIXCertPathChecker>"/>
                </params>
                <scope line="217">
                    <declaration name="nextChecker" type="PKIXCertPathChecker" line="218"/>
                    <scope line="219"/>
                </scope>
            </method>
        </class>
    </source>