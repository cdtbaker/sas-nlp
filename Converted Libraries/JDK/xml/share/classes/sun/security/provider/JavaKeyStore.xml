<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util"/>
        <import package="sun.misc.IOUtils"/>
        <import package="sun.security.pkcs.EncryptedPrivateKeyInfo"/>
        <class name="JavaKeyStore" line="10">
            <extends class="KeyStoreSpi"/>
            <javadoc line="10">
                This class provides the keystore implementation referred to as &quot;JKS&quot;.                
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    David Brownell                    
                </author>
                <see>
                    KeyProtector                    
                </see>
                <see>
                    java.security.KeyStoreSpi                    
                </see>
                <see>
                    KeyTool                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <class name="JKS" line="20">
                <extends class="JavaKeyStore"/>
                <method name="convertAlias" type="String" line="21">
                    <params>
                        <param name="alias" type="String"/>
                    </params>
                </method>
            </class>
            <class name="CaseExactJKS" line="25">
                <extends class="JavaKeyStore"/>
                <method name="convertAlias" type="String" line="26">
                    <params>
                        <param name="alias" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="MAGIC" type="int" line="30"/>
            <declaration name="VERSION_1" type="int" line="31"/>
            <declaration name="VERSION_2" type="int" line="32"/>
            <class name="KeyEntry" line="33">
                <declaration name="date" type="Date" line="34"/>
                <declaration name="protectedPrivKey" type="byte[]" line="35"/>
                <declaration name="chain" type="Certificate" line="36"/>
            </class>
            <class name="TrustedCertEntry" line="38">
                <declaration name="date" type="Date" line="39"/>
                <declaration name="cert" type="Certificate" line="40"/>
            </class>
            <declaration name="entries" type="Hashtable&lt;String,Object&gt;" line="42"/>
            <javadoc line="42">
                Private keys and certificates are stored in a hashtable.
                  Hash entries are keyed by alias names.                
            </javadoc>
            <method name="JavaKeyStore" type="constructor" line="47"/>
            <method name="convertAlias" type="String" line="50"/>
            <javadoc line="51">
                Returns the key associated with the given alias, using the given
                  password to recover it.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a <i>key entry</i>.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="63">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="entry" type="Object" line="64"/>
                <scope line="65"/>
                <scope line="68"/>
                <declaration name="keyProtector" type="KeyProtector" line="71"/>
                <declaration name="encrBytes" type="byte[]" line="72"/>
                <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="73"/>
                <declaration name="plain" type="byte[]" line="74"/>
                <scope line="75"/>
                <scope line="78"/>
            </method>
            <javadoc line="83">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a <i>trusted certificate entry</i> or a
                      <i>key entry</i> without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="92">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="93"/>
                <scope line="94">
                    <scope line="95"/>
                    <scope line="98"/>
                </scope>
                <scope line="102"/>
            </method>
            <javadoc line="106">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="118">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="119"/>
                <scope line="120">
                    <scope line="121"/>
                    <scope line="124">
                        <scope line="125"/>
                        <scope line="128"/>
                    </scope>
                </scope>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="143">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="144"/>
                <scope line="145">
                    <scope line="146"/>
                    <scope line="149"/>
                </scope>
                <scope line="153"/>
            </method>
            <javadoc line="157">
                Assigns the given private key to the given alias, protecting
                  it with the given password as defined in PKCS8.
                  &lt;p&gt;The given java.security.PrivateKey &lt;code&gt;key&lt;/code&gt; must
                  be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key and certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the private key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the given key is not a private key,
                      cannot be protected, or this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="175">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <declaration name="keyProtector" type="KeyProtector" line="176"/>
                <scope line="177"/>
                <scope line="180">
                    <scope line="181">
                        <declaration name="entry" type="KeyEntry" line="182"/>
                        <scope line="186"/>
                        <scope line="189"/>
                    </scope>
                </scope>
                <scope line="195"/>
                <scope line="198"/>
            </method>
            <javadoc line="202">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a
                  certificate chain certifying the corresponding public key. If the
                  underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;,
                  &lt;code&gt;key&lt;/code&gt; must be encoded as an
                  &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="221">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="222">
                    <scope line="223"/>
                    <scope line="226"/>
                    <declaration name="entry" type="KeyEntry" line="229"/>
                    <scope line="232"/>
                    <scope line="235"/>
                </scope>
            </method>
            <javadoc line="241">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify a <i>trusted certificate entry</i>, or this operation
                      fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="252">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="253">
                    <declaration name="entry" type="Object" line="254"/>
                    <scope line="255"/>
                    <declaration name="trustedCertEntry" type="TrustedCertEntry" line="258"/>
                </scope>
            </method>
            <javadoc line="264">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="269">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="270"/>
            </method>
            <javadoc line="274">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration<String>" line="278"/>
            <javadoc line="281">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="286">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="289">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="293"/>
            <javadoc line="296">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>key entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="302">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="303"/>
                <scope line="304"/>
                <scope line="307"/>
            </method>
            <javadoc line="311">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>trusted certificate entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="317">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="318"/>
                <scope line="319"/>
                <scope line="322"/>
            </method>
            <javadoc line="326">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="339">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="certElem" type="Certificate" line="340"/>
                <scope line="341">
                    <declaration name="alias" type="String" line="342"/>
                    <declaration name="entry" type="Object" line="343"/>
                    <scope line="344"/>
                    <scope line="347"/>
                    <scope line="350"/>
                    <scope line="353"/>
                </scope>
            </method>
            <javadoc line="359">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="370">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="371">
                    <scope line="372"/>
                    <declaration name="encoded" type="byte[]" line="375"/>
                    <declaration name="md" type="MessageDigest" line="376"/>
                    <declaration name="dos" type="DataOutputStream" line="377"/>
                    <scope line="381">
                        <declaration name="alias" type="String" line="382"/>
                        <declaration name="entry" type="Object" line="383"/>
                        <scope line="384">
                            <declaration name="chainLen" type="int" line="390"/>
                            <scope line="391"/>
                            <scope line="394"/>
                            <scope line="398"/>
                        </scope>
                        <scope line="405"/>
                    </scope>
                    <declaration name="digest" type="byte" line="415"/>
                </scope>
            </method>
            <javadoc line="420">
                Loads the keystore from the given input stream.
                  &lt;p&gt;If a password is given, it is used to check the integrity of the
                  keystore data. Otherwise, the integrity of the keystore is not checked.                
                <param>
                    stream the input stream from which the keystore is loaded                    
                </param>
                <param>
                    password the (optional) password used to check the integrity of
                      the keystore.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="434">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="435">
                    <declaration name="dis" type="DataInputStream" line="436"/>
                    <declaration name="md" type="MessageDigest" line="437"/>
                    <declaration name="cf" type="CertificateFactory" line="438"/>
                    <declaration name="cfs" type="Hashtable&lt;String,CertificateFactory&gt;" line="439"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="440"/>
                    <declaration name="encoded" type="byte[]" line="441"/>
                    <scope line="443"/>
                    <scope line="447"/>
                    <declaration name="xMagic" type="int" line="450"/>
                    <declaration name="xVersion" type="int" line="451"/>
                    <scope line="452"/>
                    <scope line="455"/>
                    <scope line="458"/>
                    <declaration name="count" type="int" line="462"/>
                    <scope line="463">
                        <declaration name="tag" type="int" line="464"/>
                        <declaration name="alias" type="String" line="465"/>
                        <scope line="467">
                            <declaration name="entry" type="KeyEntry" line="468"/>
                            <declaration name="numOfCerts" type="int" line="472"/>
                            <scope line="473">
                                <declaration name="certs" type="List&lt;Certificate&gt;" line="474"/>
                                <scope line="475">
                                    <scope line="476">
                                        <declaration name="certType" type="String" line="477"/>
                                        <scope line="478"/>
                                        <scope line="481"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="495">
                            <declaration name="entry" type="TrustedCertEntry" line="496"/>
                            <scope line="499">
                                <declaration name="certType" type="String" line="500"/>
                                <scope line="501"/>
                                <scope line="504"/>
                            </scope>
                        </scope>
                        <scope line="515"/>
                    </scope>
                    <scope line="519">
                        <declaration name="computed" type="byte" line="520"/>
                        <scope line="524">
                            <scope line="525">
                                <declaration name="t" type="Throwable" line="526"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="533">
                To guard against tampering with the keystore, we append a keyed
                  hash with a bit of whitener.                
            </javadoc>
            <method name="getPreKeyedHash" type="MessageDigest" line="537">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="i" type="int" line="538"/>
                <declaration name="md" type="MessageDigest" line="539"/>
                <declaration name="passwdBytes" type="byte[]" line="540"/>
                <scope line="541"/>
            </method>
        </class>
    </source>