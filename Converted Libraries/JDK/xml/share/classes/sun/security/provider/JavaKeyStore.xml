<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util"/>
        <import package="sun.misc.IOUtils"/>
        <import package="sun.security.pkcs.EncryptedPrivateKeyInfo"/>
        <class name="JavaKeyStore" line="38">
            <extends class="KeyStoreSpi"/>
            <comment line="55">
                regular JKS                
            </comment>
            <comment line="62">
                special JKS that uses case sensitive aliases                
            </comment>
            <comment line="73">
                Private keys and their supporting certificate chains                
            </comment>
            <comment line="80">
                Trusted certificates                
            </comment>
            <comment line="96">
                convert an alias to internal form, overridden in subclasses:
                 lower case for regular JKS
                 original string for CaseExactJKS                
            </comment>
            <javadoc line="38">
                This class provides the keystore implementation referred to as &quot;JKS&quot;.                
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    David Brownell                    
                </author>
                <see>
                    KeyProtector                    
                </see>
                <see>
                    java.security.KeyStoreSpi                    
                </see>
                <see>
                    KeyTool                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <class name="JKS" line="55">
                <extends class="JavaKeyStore"/>
                <comment line="75">
                    the creation date of this entry                    
                </comment>
                <comment line="82">
                    the creation date of this entry                    
                </comment>
                <method name="convertAlias" type="String" line="56">
                    <params>
                        <param name="alias" type="String"/>
                    </params>
                </method>
            </class>
            <class name="CaseExactJKS" line="62">
                <extends class="JavaKeyStore"/>
                <comment line="75">
                    the creation date of this entry                    
                </comment>
                <comment line="82">
                    the creation date of this entry                    
                </comment>
                <method name="convertAlias" type="String" line="63">
                    <params>
                        <param name="alias" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="MAGIC" type="int" line="68"/>
            <declaration name="VERSION_1" type="int" line="69"/>
            <declaration name="VERSION_2" type="int" line="70"/>
            <class name="KeyEntry" line="73">
                <comment line="75">
                    the creation date of this entry                    
                </comment>
                <comment line="82">
                    the creation date of this entry                    
                </comment>
                <declaration name="date" type="Date" line="74"/>
                <declaration name="protectedPrivKey" type="byte[]" line="75"/>
                <declaration name="chain" type="Certificate" line="76"/>
            </class>
            <class name="TrustedCertEntry" line="80">
                <comment line="75">
                    the creation date of this entry                    
                </comment>
                <comment line="82">
                    the creation date of this entry                    
                </comment>
                <declaration name="date" type="Date" line="81"/>
                <declaration name="cert" type="Certificate" line="82"/>
            </class>
            <declaration name="entries" type="Hashtable&lt;String,Object&gt;" line="85"/>
            <javadoc line="85">
                Private keys and certificates are stored in a hashtable.
                  Hash entries are keyed by alias names.                
            </javadoc>
            <method name="JavaKeyStore" type="constructor" line="91"/>
            <method name="convertAlias" type="String" line="98"/>
            <javadoc line="100">
                Returns the key associated with the given alias, using the given
                  password to recover it.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a <i>key entry</i>.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="117">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="entry" type="Object" line="118"/>
                <scope line="120"/>
                <scope line="123"/>
                <declaration name="keyProtector" type="KeyProtector" line="127"/>
                <declaration name="encrBytes" type="byte[]" line="128"/>
                <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="129"/>
                <declaration name="plain" type="byte[]" line="130"/>
                <scope line="131"/>
                <scope line="133"/>
            </method>
            <javadoc line="141">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a <i>trusted certificate entry</i> or a
                      <i>key entry</i> without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="152">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="153"/>
                <scope line="155">
                    <scope line="156"/>
                    <scope line="158"/>
                </scope>
                <scope line="161"/>
            </method>
            <javadoc line="166">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="181">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="182"/>
                <scope line="184">
                    <scope line="185"/>
                    <scope line="187">
                        <scope line="188"/>
                        <scope line="190"/>
                    </scope>
                </scope>
                <scope line="194"/>
            </method>
            <javadoc line="199">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="207">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="208"/>
                <scope line="210">
                    <scope line="211"/>
                    <scope line="213"/>
                </scope>
                <scope line="216"/>
            </method>
            <javadoc line="221">
                Assigns the given private key to the given alias, protecting
                  it with the given password as defined in PKCS8.
                  &lt;p&gt;The given java.security.PrivateKey &lt;code&gt;key&lt;/code&gt; must
                  be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key and certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the private key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the given key is not a private key,
                      cannot be protected, or this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="246">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="258">
                    Protect the encoding of the key                    
                </comment>
                <comment line="262">
                    clone the chain                    
                </comment>
                <declaration name="keyProtector" type="KeyProtector" line="247"/>
                <scope line="249"/>
                <scope line="252">
                    <scope line="253">
                        <declaration name="entry" type="KeyEntry" line="254"/>
                        <scope line="263"/>
                        <scope line="265"/>
                    </scope>
                </scope>
                <scope line="271"/>
                <scope line="273"/>
            </method>
            <javadoc line="278">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a
                  certificate chain certifying the corresponding public key. If the
                  underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;,
                  &lt;code&gt;key&lt;/code&gt; must be encoded as an
                  &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="304">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="307">
                    key must be encoded as EncryptedPrivateKeyInfo as defined in
                     PKCS#8                    
                </comment>
                <scope line="305">
                    <scope line="308"/>
                    <scope line="310"/>
                    <declaration name="entry" type="KeyEntry" line="315"/>
                    <scope line="320"/>
                    <scope line="322"/>
                </scope>
            </method>
            <javadoc line="330">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify a <i>trusted certificate entry</i>, or this operation
                      fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="346">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="347">
                    <declaration name="entry" type="Object" line="349"/>
                    <scope line="350"/>
                    <declaration name="trustedCertEntry" type="TrustedCertEntry" line="355"/>
                </scope>
            </method>
            <javadoc line="362">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="371">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="372"/>
            </method>
            <javadoc line="377">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration<String>" line="382"/>
            <javadoc line="386">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="393">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="397">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="402"/>
            <javadoc line="406">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>key entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="413">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="414"/>
                <scope line="415"/>
                <scope line="417"/>
            </method>
            <javadoc line="422">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>trusted certificate entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="429">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="Object" line="430"/>
                <scope line="431"/>
                <scope line="433"/>
            </method>
            <javadoc line="438">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="454">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="certElem" type="Certificate" line="455"/>
                <scope line="457">
                    <declaration name="alias" type="String" line="458"/>
                    <declaration name="entry" type="Object" line="459"/>
                    <scope line="460"/>
                    <scope line="462"/>
                    <scope line="464"/>
                    <scope line="467"/>
                </scope>
            </method>
            <javadoc line="474">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="489">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="492">
                    KEYSTORE FORMAT:
                    
                     Magic number (big-endian integer),
                     Version of this file format (big-endian integer),
                    
                     Count (big-endian integer),
                     followed by &quot;count&quot; instances of either:
                    
                         {
                          tag=1 (big-endian integer),
                          alias (UTF string)
                          timestamp
                          encrypted private-key info according to PKCS #8
                              (integer length followed by encoding)
                          cert chain (integer count, then certs; for each cert,
                              integer length followed by encoding)
                         }
                    
                     or:
                    
                         {
                          tag=2 (big-endian integer)
                          alias (UTF string)
                          timestamp
                          cert (integer length followed by encoding)
                         }
                    
                     ended by a keyed SHA1 hash (bytes only) of
                         { password + whitener + preceding body }                    
                </comment>
                <comment line="524">
                    password is mandatory when storing                    
                </comment>
                <comment line="529">
                    the certificate encoding                    
                </comment>
                <comment line="536">
                    always write the latest version                    
                </comment>
                <comment line="548">
                    Store this entry as a KeyEntry                    
                </comment>
                <comment line="551">
                    Write the alias                    
                </comment>
                <comment line="554">
                    Write the (entry creation) date                    
                </comment>
                <comment line="557">
                    Write the protected private key                    
                </comment>
                <comment line="561">
                    Write the certificate chain                    
                </comment>
                <comment line="577">
                    Store this entry as a certificate                    
                </comment>
                <comment line="580">
                    Write the alias                    
                </comment>
                <comment line="583">
                    Write the (entry creation) date                    
                </comment>
                <comment line="586">
                    Write the trusted certificate                    
                </comment>
                <comment line="594">
                    Write the keyed hash which is used to detect tampering with
                     the keystore (such as deleting or modifying key or
                     certificate entries).                    
                </comment>
                <scope line="490">
                    <scope line="524"/>
                    <declaration name="encoded" type="byte[]" line="528"/>
                    <declaration name="md" type="MessageDigest" line="530"/>
                    <declaration name="dos" type="DataOutputStream" line="531"/>
                    <scope line="540">
                        <declaration name="alias" type="String" line="542"/>
                        <declaration name="entry" type="Object" line="543"/>
                        <scope line="545">
                            <declaration name="chainLen" type="int" line="561"/>
                            <scope line="562"/>
                            <scope line="564"/>
                            <scope line="568"/>
                        </scope>
                        <scope line="574"/>
                    </scope>
                    <declaration name="digest" type="byte" line="598"/>
                </scope>
            </method>
            <javadoc line="605">
                Loads the keystore from the given input stream.
                  &lt;p&gt;If a password is given, it is used to check the integrity of the
                  keystore data. Otherwise, the integrity of the keystore is not checked.                
                <param>
                    stream the input stream from which the keystore is loaded                    
                </param>
                <param>
                    password the (optional) password used to check the integrity of
                      the keystore.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="624">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="644">
                    Body format: see store method                    
                </comment>
                <comment line="657">
                    version 2                    
                </comment>
                <comment line="670">
                    private key entry                    
                </comment>
                <comment line="674">
                    Read the alias                    
                </comment>
                <comment line="677">
                    Read the (entry creation) date                    
                </comment>
                <comment line="680">
                    Read the private key                    
                </comment>
                <comment line="684">
                    Read the certificate chain                    
                </comment>
                <comment line="691">
                    read the certificate type, and instantiate a
                     certificate factory of that type (reuse
                     existing factory if possible)                    
                </comment>
                <comment line="696">
                    reuse certificate factory                    
                </comment>
                <comment line="699">
                    create new certificate factory                    
                </comment>
                <comment line="701">
                    store the certificate factory so we can
                     reuse it later                    
                </comment>
                <comment line="706">
                    instantiate the certificate                    
                </comment>
                <comment line="712">
                    We can be sure now that numOfCerts of certs are read                    
                </comment>
                <comment line="716">
                    Add the entry to the list                    
                </comment>
                <comment line="719">
                    trusted certificate entry                    
                </comment>
                <comment line="723">
                    Read the alias                    
                </comment>
                <comment line="726">
                    Read the (entry creation) date                    
                </comment>
                <comment line="729">
                    Read the trusted certificate                    
                </comment>
                <comment line="731">
                    read the certificate type, and instantiate a
                     certificate factory of that type (reuse
                     existing factory if possible)                    
                </comment>
                <comment line="736">
                    reuse certificate factory                    
                </comment>
                <comment line="739">
                    create new certificate factory                    
                </comment>
                <comment line="741">
                    store the certificate factory so we can
                     reuse it later                    
                </comment>
                <comment line="751">
                    Add the entry to the list                    
                </comment>
                <comment line="759">
                    If a password has been provided, we check the keyed digest
                     at the end. If this check fails, the store has been tampered
                     with                    
                </comment>
                <scope line="625">
                    <declaration name="dis" type="DataInputStream" line="626"/>
                    <declaration name="md" type="MessageDigest" line="627"/>
                    <declaration name="cf" type="CertificateFactory" line="628"/>
                    <declaration name="cfs" type="Hashtable&lt;String,CertificateFactory&gt;" line="629"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="630"/>
                    <declaration name="encoded" type="byte[]" line="631"/>
                    <scope line="636"/>
                    <scope line="639"/>
                    <declaration name="xMagic" type="int" line="645"/>
                    <declaration name="xVersion" type="int" line="646"/>
                    <scope line="649"/>
                    <scope line="653"/>
                    <scope line="655"/>
                    <declaration name="count" type="int" line="661"/>
                    <scope line="663">
                        <declaration name="tag" type="int" line="664"/>
                        <declaration name="alias" type="String" line="665"/>
                        <scope line="669">
                            <declaration name="entry" type="KeyEntry" line="671"/>
                            <declaration name="numOfCerts" type="int" line="684"/>
                            <scope line="685">
                                <declaration name="certs" type="List&lt;Certificate&gt;" line="686"/>
                                <scope line="688">
                                    <scope line="689">
                                        <declaration name="certType" type="String" line="693"/>
                                        <scope line="694"/>
                                        <scope line="697"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="718">
                            <declaration name="entry" type="TrustedCertEntry" line="720"/>
                            <scope line="729">
                                <declaration name="certType" type="String" line="733"/>
                                <scope line="734"/>
                                <scope line="737"/>
                            </scope>
                        </scope>
                        <scope line="753"/>
                    </scope>
                    <scope line="763">
                        <declaration name="computed" type="byte" line="764"/>
                        <scope line="768">
                            <scope line="769">
                                <declaration name="t" type="Throwable" line="770"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="781">
                To guard against tampering with the keystore, we append a keyed
                  hash with a bit of whitener.                
            </javadoc>
            <method name="getPreKeyedHash" type="MessageDigest" line="787">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="i" type="int" line="788"/>
                <declaration name="md" type="MessageDigest" line="790"/>
                <declaration name="passwdBytes" type="byte[]" line="791"/>
                <scope line="792"/>
            </method>
        </class>
    </source>