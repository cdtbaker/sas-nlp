<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.security.AlgorithmConstraints"/>
        <import package="java.security.CryptoPrimitive"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Set"/>
        <import package="java.util.EnumSet"/>
        <import package="java.util.HashSet"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509CRL"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.CRLException"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.CertPathValidatorException.BasicReason"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.io.IOException"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="sun.security.util.DisabledAlgorithmConstraints"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.X509CRLImpl"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <class name="AlgorithmChecker" line="60">
            <extends class="PKIXCertPathChecker"/>
            <javadoc line="60">
                A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; implementation to check whether a
                  specified certificate contains the required algorithm constraints.
                  &lt;p&gt;
                  Certificate fields such as the subject public key, the signature
                  algorithm, key usage, extended key usage, etc. need to conform to
                  the specified algorithm constraints.                
                <see>
                    PKIXCertPathChecker                    
                </see>
                <see>
                    PKIXParameters                    
                </see>
            </javadoc>
            <declaration name="constraints" type="AlgorithmConstraints" line="73"/>
            <declaration name="trustedPubKey" type="PublicKey" line="74"/>
            <declaration name="prevPubKey" type="PublicKey" line="75"/>
            <declaration name="SIGNATURE_PRIMITIVE_SET" type="Set&lt;CryptoPrimitive&gt;" line="77"/>
            <declaration name="certPathDefaultConstraints" type="DisabledAlgorithmConstraints" line="80"/>
            <javadoc line="84">
                Create a new &lt;code&gt;AlgorithmChecker&lt;/code&gt; with the algorithm
                  constraints specified in security property
                  &quot;jdk.certpath.disabledAlgorithms&quot;.                
                <param>
                    anchor the trust anchor selected to validate the target
                      certificate                    
                </param>
            </javadoc>
            <method name="AlgorithmChecker" type="constructor" line="92">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                </params>
            </method>
            <javadoc line="96">
                Create a new &lt;code&gt;AlgorithmChecker&lt;/code&gt; with the
                  given {@code AlgorithmConstraints}.
                  &lt;p&gt;
                  Note that this constructor will be used to check a certification
                  path where the trust anchor is unknown, or a certificate list which may
                  contain the trust anchor. This constructor is used by SunJSSE.                
                <param>
                    constraints the algorithm constraints (or null)                    
                </param>
            </javadoc>
            <method name="AlgorithmChecker" type="constructor" line="106">
                <params>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
            </method>
            <javadoc line="112">
                Create a new &lt;code&gt;AlgorithmChecker&lt;/code&gt; with the
                  given &lt;code&gt;TrustAnchor&lt;/code&gt; and &lt;code&gt;AlgorithmConstraints&lt;/code&gt;.                
                <param>
                    anchor the trust anchor selected to validate the target
                      certificate                    
                </param>
                <param>
                    constraints the algorithm constraints (or null)                    
                </param>
                <throws>
                    IllegalArgumentException if the <code>anchor</code> is null                    
                </throws>
            </javadoc>
            <method name="AlgorithmChecker" type="constructor" line="123">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
                <scope line="125"/>
                <scope line="130"/>
                <scope line="132"/>
            </method>
            <method name="init" type="void" line="141">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <comment line="143">
                    Note that this class does not support forward mode.                    
                </comment>
                <scope line="143">
                    <scope line="144"/>
                    <scope line="146"/>
                </scope>
                <scope line="149"/>
            </method>
            <method name="isForwardCheckingSupported" type="boolean" line="156">
                <comment line="158">
                    Note that as this class does not support forward mode, the method
                      will always returns false.                    
                </comment>
            </method>
            <method name="getSupportedExtensions" type="Set<String>" line="163"/>
            <method name="check" type="void" line="170">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="unresolvedCritExts" type="Collection<String>"/>
                </params>
                <comment line="174">
                    ignore the check for non-x.509 certificate or null constraints                    
                </comment>
                <comment line="197">
                    Check the current signature algorithm                    
                </comment>
                <comment line="206">
                    check the key usage and key size                    
                </comment>
                <comment line="219">
                    keyUsage[0]: KeyUsage.digitalSignature
                     keyUsage[1]: KeyUsage.nonRepudiation
                     keyUsage[5]: KeyUsage.keyCertSign
                     keyUsage[6]: KeyUsage.cRLSign                    
                </comment>
                <comment line="226">
                    KeyUsage.keyEncipherment                    
                </comment>
                <comment line="230">
                    KeyUsage.dataEncipherment                    
                </comment>
                <comment line="234">
                    KeyUsage.keyAgreement                    
                </comment>
                <comment line="238">
                    KeyUsage.encipherOnly and KeyUsage.decipherOnly are
                     undefined in the absence of the keyAgreement bit.                    
                </comment>
                <comment line="250">
                    Check with previous cert for signature algorithm and public key                    
                </comment>
                <comment line="262">
                    Inherit key parameters from previous key                    
                </comment>
                <comment line="265">
                    Inherit DSA parameters from previous key                    
                </comment>
                <comment line="292">
                    reset the previous public key                    
                </comment>
                <comment line="295">
                    check the extended key usage, ignore the check now
                     List&lt;String&gt; extendedKeyUsages = x509Cert.getExtendedKeyUsage();                    
                </comment>
                <comment line="298">
                    DO NOT remove any unresolved critical extensions                    
                </comment>
                <scope line="172"/>
                <declaration name="x509Cert" type="X509CertImpl" line="177"/>
                <scope line="178"/>
                <scope line="180"/>
                <declaration name="currPubKey" type="PublicKey" line="184"/>
                <declaration name="currSigAlg" type="String" line="185"/>
                <declaration name="algorithmId" type="AlgorithmId" line="187"/>
                <scope line="188"/>
                <scope line="190"/>
                <declaration name="currSigAlgParams" type="AlgorithmParameters" line="194"/>
                <scope line="199"/>
                <declaration name="keyUsage" type="boolean[]" line="206"/>
                <scope line="207"/>
                <scope line="213">
                    <declaration name="primitives" type="Set&lt;CryptoPrimitive&gt;" line="214"/>
                    <scope line="217"/>
                    <scope line="225"/>
                    <scope line="229"/>
                    <scope line="233"/>
                    <scope line="240">
                        <scope line="241"/>
                    </scope>
                </scope>
                <scope line="250">
                    <scope line="251">
                        <scope line="254"/>
                    </scope>
                    <scope line="263">
                        <scope line="265"/>
                        <declaration name="params" type="DSAParams" line="270"/>
                        <scope line="271"/>
                        <scope line="276">
                            <declaration name="y" type="BigInteger" line="277"/>
                            <declaration name="kf" type="KeyFactory" line="278"/>
                            <declaration name="ks" type="DSAPublicKeySpec" line="279"/>
                        </scope>
                        <scope line="284"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="300">
                Try to set the trust anchor of the checker.
                  &lt;p&gt;
                  If there is no trust anchor specified and the checker has not started,
                  set the trust anchor.                
                <param>
                    anchor the trust anchor selected to validate the target
                      certificate                    
                </param>
            </javadoc>
            <method name="trySetTrustAnchor" type="void" line="309">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                </params>
                <comment line="311">
                    Don&apos;t bother if the check has started or trust anchor has already
                     specified.                    
                </comment>
                <comment line="319">
                    Don&apos;t bother to change the trustedPubKey.                    
                </comment>
                <scope line="312">
                    <scope line="313"/>
                    <scope line="319"/>
                    <scope line="321"/>
                </scope>
            </method>
            <javadoc line="327">
                Check the signature algorithm with the specified public key.                
                <param>
                    key the public key to verify the CRL signature                    
                </param>
                <param>
                    crl the target CRL                    
                </param>
            </javadoc>
            <method name="check" type="void" line="334">
                <params>
                    <param name="key" type="PublicKey"/>
                    <param name="crl" type="X509CRL"/>
                </params>
                <declaration name="x509CRLImpl" type="X509CRLImpl" line="336"/>
                <scope line="337"/>
                <scope line="339"/>
                <declaration name="algorithmId" type="AlgorithmId" line="343"/>
            </method>
            <javadoc line="347">
                Check the signature algorithm with the specified public key.                
                <param>
                    key the public key to verify the CRL signature                    
                </param>
                <param>
                    crl the target CRL                    
                </param>
            </javadoc>
            <method name="check" type="void" line="354">
                <params>
                    <param name="key" type="PublicKey"/>
                    <param name="algorithmId" type="AlgorithmId"/>
                </params>
                <declaration name="sigAlgName" type="String" line="355"/>
                <declaration name="sigAlgParams" type="AlgorithmParameters" line="356"/>
                <scope line="359"/>
            </method>
        </class>
    </source>