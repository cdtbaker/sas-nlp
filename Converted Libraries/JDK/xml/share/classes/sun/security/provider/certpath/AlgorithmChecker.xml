<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.security.AlgorithmConstraints"/>
        <import package="java.security.CryptoPrimitive"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Set"/>
        <import package="java.util.EnumSet"/>
        <import package="java.util.HashSet"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509CRL"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.CRLException"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.CertPathValidatorException.BasicReason"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.io.IOException"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="sun.security.util.DisabledAlgorithmConstraints"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.X509CRLImpl"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <class name="AlgorithmChecker" line="32">
            <extends class="PKIXCertPathChecker"/>
            <javadoc line="32">
                A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; implementation to check whether a
                  specified certificate contains the required algorithm constraints.
                  &lt;p&gt;
                  Certificate fields such as the subject public key, the signature
                  algorithm, key usage, extended key usage, etc. need to conform to
                  the specified algorithm constraints.                
                <see>
                    PKIXCertPathChecker                    
                </see>
                <see>
                    PKIXParameters                    
                </see>
            </javadoc>
            <declaration name="constraints" type="AlgorithmConstraints" line="43"/>
            <declaration name="trustedPubKey" type="PublicKey" line="44"/>
            <declaration name="prevPubKey" type="PublicKey" line="45"/>
            <declaration name="SIGNATURE_PRIMITIVE_SET" type="Set&lt;CryptoPrimitive&gt;" line="46"/>
            <declaration name="certPathDefaultConstraints" type="DisabledAlgorithmConstraints" line="47"/>
            <javadoc line="48">
                Create a new &lt;code&gt;AlgorithmChecker&lt;/code&gt; with the algorithm
                  constraints specified in security property
                  &quot;jdk.certpath.disabledAlgorithms&quot;.                
                <param>
                    anchor the trust anchor selected to validate the target
                      certificate                    
                </param>
            </javadoc>
            <method name="AlgorithmChecker" type="constructor" line="55">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                </params>
            </method>
            <javadoc line="58">
                Create a new &lt;code&gt;AlgorithmChecker&lt;/code&gt; with the
                  given {@code AlgorithmConstraints}.
                  &lt;p&gt;
                  Note that this constructor will be used to check a certification
                  path where the trust anchor is unknown, or a certificate list which may
                  contain the trust anchor. This constructor is used by SunJSSE.                
                <param>
                    constraints the algorithm constraints (or null)                    
                </param>
            </javadoc>
            <method name="AlgorithmChecker" type="constructor" line="67">
                <params>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
            </method>
            <javadoc line="72">
                Create a new &lt;code&gt;AlgorithmChecker&lt;/code&gt; with the
                  given &lt;code&gt;TrustAnchor&lt;/code&gt; and &lt;code&gt;AlgorithmConstraints&lt;/code&gt;.                
                <param>
                    anchor the trust anchor selected to validate the target
                      certificate                    
                </param>
                <param>
                    constraints the algorithm constraints (or null)                    
                </param>
                <throws>
                    IllegalArgumentException if the <code>anchor</code> is null                    
                </throws>
            </javadoc>
            <method name="AlgorithmChecker" type="constructor" line="80">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
                <scope line="81"/>
                <scope line="84"/>
                <scope line="87"/>
            </method>
            <method name="init" type="void" line="93">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="94">
                    <scope line="95"/>
                    <scope line="98"/>
                </scope>
                <scope line="102"/>
            </method>
            <method name="isForwardCheckingSupported" type="boolean" line="106"/>
            <method name="getSupportedExtensions" type="Set<String>" line="109"/>
            <method name="check" type="void" line="112">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="unresolvedCritExts" type="Collection<String>"/>
                </params>
                <scope line="113"/>
                <declaration name="x509Cert" type="X509CertImpl" line="116"/>
                <scope line="117"/>
                <scope line="120"/>
                <declaration name="currPubKey" type="PublicKey" line="123"/>
                <declaration name="currSigAlg" type="String" line="124"/>
                <declaration name="algorithmId" type="AlgorithmId" line="125"/>
                <scope line="126"/>
                <scope line="129"/>
                <declaration name="currSigAlgParams" type="AlgorithmParameters" line="132"/>
                <scope line="133"/>
                <declaration name="keyUsage" type="boolean[]" line="136"/>
                <scope line="137"/>
                <scope line="140">
                    <declaration name="primitives" type="Set&lt;CryptoPrimitive&gt;" line="141"/>
                    <scope line="142"/>
                    <scope line="145"/>
                    <scope line="148"/>
                    <scope line="151"/>
                    <scope line="154">
                        <scope line="155"/>
                    </scope>
                </scope>
                <scope line="160">
                    <scope line="161">
                        <scope line="162"/>
                    </scope>
                    <scope line="166">
                        <scope line="167"/>
                        <declaration name="params" type="DSAParams" line="170"/>
                        <scope line="171"/>
                        <scope line="174">
                            <declaration name="y" type="BigInteger" line="175"/>
                            <declaration name="kf" type="KeyFactory" line="176"/>
                            <declaration name="ks" type="DSAPublicKeySpec" line="177"/>
                        </scope>
                        <scope line="180"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                Try to set the trust anchor of the checker.
                  &lt;p&gt;
                  If there is no trust anchor specified and the checker has not started,
                  set the trust anchor.                
                <param>
                    anchor the trust anchor selected to validate the target
                      certificate                    
                </param>
            </javadoc>
            <method name="trySetTrustAnchor" type="void" line="195">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                </params>
                <scope line="196">
                    <scope line="197"/>
                    <scope line="200"/>
                    <scope line="203"/>
                </scope>
            </method>
            <javadoc line="208">
                Check the signature algorithm with the specified public key.                
                <param>
                    key the public key to verify the CRL signature                    
                </param>
                <param>
                    crl the target CRL                    
                </param>
            </javadoc>
            <method name="check" type="void" line="213">
                <params>
                    <param name="key" type="PublicKey"/>
                    <param name="crl" type="X509CRL"/>
                </params>
                <declaration name="x509CRLImpl" type="X509CRLImpl" line="214"/>
                <scope line="215"/>
                <scope line="218"/>
                <declaration name="algorithmId" type="AlgorithmId" line="221"/>
            </method>
            <javadoc line="224">
                Check the signature algorithm with the specified public key.                
                <param>
                    key the public key to verify the CRL signature                    
                </param>
                <param>
                    crl the target CRL                    
                </param>
            </javadoc>
            <method name="check" type="void" line="229">
                <params>
                    <param name="key" type="PublicKey"/>
                    <param name="algorithmId" type="AlgorithmId"/>
                </params>
                <declaration name="sigAlgName" type="String" line="230"/>
                <declaration name="sigAlgParams" type="AlgorithmParameters" line="231"/>
                <scope line="232"/>
            </method>
        </class>
    </source>