<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.cert.CertPath"/>
        <import package="java.security.cert.CertPathParameters"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.CertPathValidatorSpi"/>
        <import package="java.security.cert.CertPathValidatorResult"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.PKIXCertPathValidatorResult"/>
        <import package="java.security.cert.PKIXParameters"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.PolicyNode"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.X509CertSelector"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Date"/>
        <import package="java.util.Set"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.action.GetBooleanSecurityPropertyAction"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="PKIXCertPathValidator" line="56">
            <extends class="CertPathValidatorSpi"/>
            <javadoc line="56">
                This class implements the PKIX validation algorithm for certification
                  paths consisting exclusively of &lt;code&gt;X509Certificates&lt;/code&gt;. It uses
                  the specified input parameter set (which must be a
                  &lt;code&gt;PKIXParameters&lt;/code&gt; object) and signature provider (if any).                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="67"/>
            <declaration name="testDate" type="Date" line="68"/>
            <declaration name="userCheckers" type="List&lt;PKIXCertPathChecker&gt;" line="69"/>
            <declaration name="sigProvider" type="String" line="70"/>
            <declaration name="basicChecker" type="BasicChecker" line="71"/>
            <declaration name="ocspEnabled" type="boolean" line="72"/>
            <declaration name="onlyEECert" type="boolean" line="73"/>
            <javadoc line="75">
                Default constructor.                
            </javadoc>
            <method name="PKIXCertPathValidator" type="constructor" line="78"/>
            <javadoc line="80">
                Validates a certification path consisting exclusively of
                  &lt;code&gt;X509Certificate&lt;/code&gt;s using the PKIX validation algorithm,
                  which uses the specified input parameter set.
                  The input parameter set must be a &lt;code&gt;PKIXParameters&lt;/code&gt; object.                
                <param>
                    cp the X509 certification path                    
                </param>
                <param>
                    param the input PKIX parameter set                    
                </param>
                <return>
                    the result                    
                </return>
                <exception>
                    CertPathValidatorException Exception thrown if cert path
                      does not validate.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the specified
                      parameters are inappropriate for this certification path validator                    
                </exception>
            </javadoc>
            <method name="engineValidate" type="CertPathValidatorResult" line="97">
                <params>
                    <param name="cp" type="CertPath"/>
                    <param name="param" type="CertPathParameters"/>
                </params>
                <comment line="113">
                    Make sure that none of the trust anchors include name constraints                    
                </comment>
                <comment line="114">
                    (not supported).                    
                </comment>
                <comment line="123">
                    the certpath which has been passed in (cp)                    
                </comment>
                <comment line="124">
                    has the target cert as the first certificate - we                    
                </comment>
                <comment line="125">
                    need to keep this cp so we can return it                    
                </comment>
                <comment line="126">
                    in case of an exception and for policy qualifier                    
                </comment>
                <comment line="127">
                    processing - however, for certpath validation,                    
                </comment>
                <comment line="128">
                    we need to create a reversed path, where we reverse the                    
                </comment>
                <comment line="129">
                    ordering so that the target cert is the last certificate                    
                </comment>
                <comment line="131">
                    Must copy elements of certList into a new modifiable List before                    
                </comment>
                <comment line="132">
                    calling Collections.reverse().                    
                </comment>
                <comment line="145">
                    now certList has the target cert as the last cert and we                    
                </comment>
                <comment line="146">
                    can proceed with normal validation                    
                </comment>
                <comment line="150">
                    Retrieve the first certificate in the certpath                    
                </comment>
                <comment line="151">
                    (to be used later in pre-screening)                    
                </comment>
                <comment line="159">
                    We iterate through the set of trust anchors until we find                    
                </comment>
                <comment line="160">
                    one that works at which time we stop iterating                    
                </comment>
                <comment line="169">
                    if this trust anchor is not worth trying,                    
                </comment>
                <comment line="170">
                    we move on to the next one                    
                </comment>
                <comment line="193">
                    if this anchor works, return success                    
                </comment>
                <comment line="197">
                    remember this exception                    
                </comment>
                <comment line="202">
                    could not find a trust anchor that verified                    
                </comment>
                <comment line="203">
                    (a) if we did a validation and it failed, use that exception                    
                </comment>
                <comment line="207">
                    (b) otherwise, generate new exception                    
                </comment>
                <scope line="101"/>
                <scope line="106"/>
                <declaration name="pkixParam" type="PKIXParameters" line="111"/>
                <declaration name="anchors" type="Set&lt;TrustAnchor&gt;" line="115"/>
                <scope line="116">
                    <scope line="117"/>
                </scope>
                <declaration name="certList" type="ArrayList&lt;X509Certificate&gt;" line="133"/>
                <scope line="135">
                    <scope line="136"/>
                </scope>
                <declaration name="firstCert" type="X509Certificate" line="152"/>
                <scope line="153"/>
                <declaration name="lastException" type="CertPathValidatorException" line="157"/>
                <scope line="161">
                    <declaration name="trustedCert" type="X509Certificate" line="162"/>
                    <scope line="163">
                        <scope line="164"/>
                        <scope line="171"/>
                        <scope line="175"/>
                    </scope>
                    <scope line="180">
                        <scope line="181"/>
                    </scope>
                    <scope line="187">
                        <declaration name="rootNode" type="PolicyNodeImpl" line="188"/>
                        <declaration name="policyTree" type="PolicyNode" line="191"/>
                    </scope>
                    <scope line="196"/>
                </scope>
                <scope line="204"/>
            </method>
            <javadoc line="213">
                Internal method to do some simple checks to see if a given cert is
                  worth trying to validate in the chain.                
            </javadoc>
            <method name="isWorthTrying" type="boolean" line="218">
                <params>
                    <param name="trustedCert" type="X509Certificate"/>
                    <param name="firstCert" type="X509Certificate"/>
                </params>
                <comment line="234">
                    check trusted certificate&apos;s subject                    
                </comment>
                <comment line="237">
                    check the validity period                    
                </comment>
                <comment line="241">
                    Facilitate certification path construction with authority
                     key identifier and subject key identifier.                    
                </comment>
                <comment line="252">
                    It is not worth trying.                    
                </comment>
                <declaration name="worthy" type="boolean" line="220"/>
                <scope line="222"/>
                <scope line="227"/>
                <declaration name="issuerSelector" type="AdaptableX509CertSelector" line="231"/>
                <scope line="245">
                    <declaration name="firstCertImpl" type="X509CertImpl" line="246"/>
                </scope>
                <scope line="251"/>
                <scope line="255">
                    <scope line="256"/>
                    <scope line="258"/>
                </scope>
            </method>
            <javadoc line="266">
                Internal method to setup the internal state                
            </javadoc>
            <method name="populateVariables" type="void" line="270">
                <params>
                    <param name="pkixParam" type="PKIXParameters"/>
                </params>
                <comment line="271">
                    default value for testDate is current time                    
                </comment>
                <comment line="281">
                    Examine OCSP security property                    
                </comment>
                <scope line="273"/>
                <scope line="280"/>
            </method>
            <javadoc line="291">
                Internal method to actually validate a constructed path.                
                <return>
                    the valid policy tree                    
                </return>
            </javadoc>
            <method name="doValidate" type="PolicyNode" line="300">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="cpOriginal" type="CertPath"/>
                    <param name="certList" type="ArrayList<X509Certificate>"/>
                    <param name="pkixParam" type="PKIXParameters"/>
                    <param name="rootNode" type="PolicyNodeImpl"/>
                </params>
                <comment line="320">
                    add standard checkers that we will be using                    
                </comment>
                <comment line="327">
                    only add a revocationChecker if revocation is enabled                    
                </comment>
                <comment line="330">
                    Use OCSP if it has been enabled                    
                </comment>
                <comment line="337">
                    Always use CRLs                    
                </comment>
                <comment line="343">
                    add user-specified checkers                    
                </comment>
                <declaration name="certPathLen" type="int" line="301"/>
                <declaration name="algorithmChecker" type="AlgorithmChecker" line="304"/>
                <declaration name="keyChecker" type="KeyChecker" line="305"/>
                <declaration name="constraintsChecker" type="ConstraintsChecker" line="307"/>
                <declaration name="policyChecker" type="PolicyChecker" line="310"/>
                <declaration name="certPathCheckers" type="ArrayList&lt;PKIXCertPathChecker&gt;" line="318"/>
                <scope line="328">
                    <scope line="331">
                        <declaration name="ocspChecker" type="OCSPChecker" line="332"/>
                    </scope>
                    <declaration name="revocationChecker" type="CrlRevocationChecker" line="338"/>
                </scope>
                <declaration name="masterValidator" type="PKIXMasterCertPathValidator" line="346"/>
            </method>
        </class>
    </source>