<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.util"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <class name="KeyChecker" line="35">
            <extends class="PKIXCertPathChecker"/>
            <comment line="49">
                the index of keyCertSign in the boolean KeyUsage array                
            </comment>
            <javadoc line="35">
                KeyChecker is a &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; that checks that the
                  keyCertSign bit is set in the keyUsage extension in an intermediate CA
                  certificate. It also checks whether the final certificate in a
                  certification path meets the specified target constraints specified as
                  a CertSelector in the PKIXParameters passed to the CertPathValidator.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="47"/>
            <declaration name="keyCertSign" type="int" line="49"/>
            <declaration name="certPathLen" type="int" line="50"/>
            <declaration name="targetConstraints" type="CertSelector" line="51"/>
            <declaration name="remainingCerts" type="int" line="52"/>
            <declaration name="supportedExts" type="Set&lt;String&gt;" line="54"/>
            <javadoc line="56">
                Default Constructor                
                <param>
                    certPathLen allowable cert path length                    
                </param>
                <param>
                    targetCertSel a CertSelector object specifying the constraints
                      on the target certificate                    
                </param>
            </javadoc>
            <method name="KeyChecker" type="constructor" line="65">
                <params>
                    <param name="certPathLen" type="int"/>
                    <param name="targetCertSel" type="CertSelector"/>
                </params>
            </method>
            <javadoc line="71">
                Initializes the internal state of the checker from parameters
                  specified in the constructor                
            </javadoc>
            <method name="init" type="void" line="75">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="76"/>
                <scope line="78"/>
            </method>
            <method name="isForwardCheckingSupported" type="boolean" line="84"/>
            <method name="getSupportedExtensions" type="Set<String>" line="88">
                <scope line="89"/>
            </method>
            <javadoc line="99">
                Checks that keyUsage and target constraints are satisfied by
                  the specified certificate.                
                <param>
                    cert the Certificate                    
                </param>
                <param>
                    unresolvedCritExts the unresolved critical extensions                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if certificate
                      does not verify                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="110">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="unresCritExts" type="Collection<String>"/>
                </params>
                <comment line="116">
                    if final certificate, check that target constraints are satisfied                    
                </comment>
                <comment line="124">
                    otherwise, verify that keyCertSign bit is set in CA certificate                    
                </comment>
                <comment line="128">
                    remove the extensions that we have checked                    
                </comment>
                <declaration name="currCert" type="X509Certificate" line="111"/>
                <scope line="116">
                    <scope line="118"/>
                </scope>
                <scope line="122"/>
                <scope line="128"/>
            </method>
            <javadoc line="136">
                Static method to verify that the key usage and extended key usage
                  extension in a CA cert. The key usage extension, if present, must
                  assert the keyCertSign bit. The extended key usage extension, if
                  present, must include anyExtendedKeyUsage.                
            </javadoc>
            <method name="verifyCAKeyUsage" type="void" line="143">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="153">
                    getKeyUsage returns null if the KeyUsage extension is not present
                     in the certificate - in which case there is nothing to check                    
                </comment>
                <comment line="159">
                    throw an exception if the keyCertSign bit is not set                    
                </comment>
                <declaration name="msg" type="String" line="144"/>
                <scope line="145"/>
                <declaration name="keyUsageBits" type="boolean[]" line="150"/>
                <scope line="154"/>
                <scope line="159"/>
                <scope line="165"/>
            </method>
        </class>
    </source>