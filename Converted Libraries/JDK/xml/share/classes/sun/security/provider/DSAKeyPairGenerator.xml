<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="DSAKeyPairGenerator" line="39">
            <extends class="KeyPairGenerator"/>
            <comment line="52">
                                
            </comment>
            <comment line="55">
                                
            </comment>
            <comment line="58">
                                
            </comment>
            <comment line="61">
                                
            </comment>
            <implements interface="java.security.interfaces.DSAKeyPairGenerator"/>
            <javadoc line="39">
                This class generates DSA key parameters and public/private key
                  pairs according to the DSS standard NIST FIPS 186. It uses the
                  updated version of SHA, SHA-1 as described in FIPS 180-1.                
                <author>
                    Benjamin Renaud                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="modlen" type="int" line="52"/>
            <declaration name="forceNewParameters" type="boolean" line="55"/>
            <declaration name="params" type="DSAParameterSpec" line="58"/>
            <declaration name="random" type="SecureRandom" line="61"/>
            <method name="DSAKeyPairGenerator" type="constructor" line="63"/>
            <method name="checkStrength" type="void" line="68">
                <params>
                    <param name="strength" type="int"/>
                </params>
                <scope line="69"/>
            </method>
            <method name="initialize" type="void" line="76">
                <params>
                    <param name="modlen" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="84">
                Initializes the DSA key pair generator. If &lt;code&gt;genParams&lt;/code&gt;
                  is false, a set of pre-computed parameters is used.                
            </javadoc>
            <method name="initialize" type="void" line="88">
                <params>
                    <param name="modlen" type="int"/>
                    <param name="genParams" type="boolean"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="90"/>
                <scope line="92">
                    <scope line="94"/>
                </scope>
            </method>
            <javadoc line="105">
                Initializes the DSA object using a DSA parameter object.                
                <param>
                    params a fully initialized DSA parameter object.                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="110">
                <params>
                    <param name="params" type="DSAParams"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="111"/>
                <declaration name="spec" type="DSAParameterSpec" line="114"/>
            </method>
            <javadoc line="119">
                Initializes the DSA object using a parameter object.                
                <param>
                    params the parameter set to be used to generate
                      the keys.                    
                </param>
                <param>
                    random the source of randomness for this generator.                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key pair generator                    
                </exception>
            </javadoc>
            <method name="initialize" type="void" line="130">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="131"/>
            </method>
            <method name="initialize0" type="void" line="138">
                <params>
                    <param name="params" type="DSAParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="modlen" type="int" line="139"/>
            </method>
            <javadoc line="147">
                Generates a pair of keys usable by any JavaSecurity compliant
                  DSA implementation.                
            </javadoc>
            <method name="generateKeyPair" type="KeyPair" line="151">
                <comment line="159">
                    generate new parameters each time                    
                </comment>
                <scope line="152"/>
                <declaration name="spec" type="DSAParameterSpec" line="155"/>
                <scope line="156">
                    <scope line="157"/>
                    <scope line="160">
                        <scope line="161"/>
                    </scope>
                </scope>
                <scope line="167"/>
            </method>
            <method name="generateKeyPair" type="KeyPair" line="174">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="182">
                    See the comments in DSAKeyFactory, 4532506, and 6232513.                    
                </comment>
                <declaration name="x" type="BigInteger" line="176"/>
                <declaration name="y" type="BigInteger" line="177"/>
                <scope line="179">
                    <declaration name="pub" type="DSAPublicKey" line="183"/>
                    <scope line="184"/>
                    <scope line="186"/>
                    <declaration name="priv" type="DSAPrivateKey" line="189"/>
                    <declaration name="pair" type="KeyPair" line="191"/>
                </scope>
                <scope line="193"/>
            </method>
            <javadoc line="198">
                Generate the private key component of the key pair using the
                  provided source of random bits. This method uses the random but
                  source passed to generate a seed and then calls the seed-based
                  generateX method.                
            </javadoc>
            <method name="generateX" type="BigInteger" line="204">
                <params>
                    <param name="random" type="SecureRandom"/>
                    <param name="q" type="BigInteger"/>
                </params>
                <declaration name="x" type="BigInteger" line="205"/>
                <scope line="206">
                    <declaration name="seed" type="int[]" line="207"/>
                    <scope line="208"/>
                    <scope line="212"/>
                </scope>
            </method>
            <javadoc line="219">
                Given a seed, generate the private key component of the key
                  pair. In the terminology used in the DSA specification
                  (FIPS-186) seed is the XSEED quantity.                
                <param>
                    seed the seed to use to generate the private key.                    
                </param>
            </javadoc>
            <method name="generateX" type="BigInteger" line="226">
                <params>
                    <param name="seed" type="int[]"/>
                    <param name="q" type="BigInteger"/>
                </params>
                <comment line="229">
                    check out t in the spec.                    
                </comment>
                <comment line="232">
                                        
                </comment>
                <declaration name="t" type="int[]" line="229"/>
                <declaration name="tmp" type="int[]" line="233"/>
                <declaration name="tmpBytes" type="byte[]" line="234"/>
                <scope line="235">
                    <declaration name="k" type="int" line="236"/>
                    <scope line="237"/>
                </scope>
                <declaration name="x" type="BigInteger" line="241"/>
            </method>
            <javadoc line="245">
                Generate the public key component y of the key pair.                
                <param>
                    x the private key component.                    
                </param>
                <param>
                    p the base parameter.                    
                </param>
            </javadoc>
            <method name="generateY" type="BigInteger" line="252">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
                <declaration name="y" type="BigInteger" line="253"/>
            </method>
        </class>
    </source>