<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="DSAKeyPairGenerator" line="10">
            <extends class="KeyPairGenerator"/>
            <implements interface="java.security.interfaces.DSAKeyPairGenerator"/>
            <javadoc line="10">
                This class generates DSA key parameters and public/private key
                  pairs according to the DSS standard NIST FIPS 186. It uses the
                  updated version of SHA, SHA-1 as described in FIPS 180-1.                
                <author>
                    Benjamin Renaud                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="modlen" type="int" line="18"/>
            <declaration name="forceNewParameters" type="boolean" line="19"/>
            <declaration name="params" type="DSAParameterSpec" line="20"/>
            <declaration name="random" type="SecureRandom" line="21"/>
            <method name="DSAKeyPairGenerator" type="constructor" line="22"/>
            <method name="checkStrength" type="void" line="26">
                <params>
                    <param name="strength" type="int"/>
                </params>
                <scope line="27"/>
            </method>
            <method name="initialize" type="void" line="31">
                <params>
                    <param name="modlen" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="38">
                Initializes the DSA key pair generator. If &lt;code&gt;genParams&lt;/code&gt;
                  is false, a set of pre-computed parameters is used.                
            </javadoc>
            <method name="initialize" type="void" line="42">
                <params>
                    <param name="modlen" type="int"/>
                    <param name="genParams" type="boolean"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="44"/>
                <scope line="47">
                    <scope line="49"/>
                </scope>
            </method>
            <javadoc line="57">
                Initializes the DSA object using a DSA parameter object.                
                <param>
                    params a fully initialized DSA parameter object.                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="61">
                <params>
                    <param name="params" type="DSAParams"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="62"/>
                <declaration name="spec" type="DSAParameterSpec" line="65"/>
            </method>
            <javadoc line="68">
                Initializes the DSA object using a parameter object.                
                <param>
                    params the parameter set to be used to generate
                      the keys.                    
                </param>
                <param>
                    random the source of randomness for this generator.                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key pair generator                    
                </exception>
            </javadoc>
            <method name="initialize" type="void" line="76">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="77"/>
            </method>
            <method name="initialize0" type="void" line="82">
                <params>
                    <param name="params" type="DSAParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="modlen" type="int" line="83"/>
            </method>
            <javadoc line="90">
                Generates a pair of keys usable by any JavaSecurity compliant
                  DSA implementation.                
            </javadoc>
            <method name="generateKeyPair" type="KeyPair" line="94">
                <scope line="95"/>
                <declaration name="spec" type="DSAParameterSpec" line="98"/>
                <scope line="99">
                    <scope line="100"/>
                    <scope line="103">
                        <scope line="104"/>
                    </scope>
                </scope>
                <scope line="110"/>
            </method>
            <method name="generateKeyPair" type="KeyPair" line="115">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="x" type="BigInteger" line="116"/>
                <declaration name="y" type="BigInteger" line="117"/>
                <scope line="118">
                    <declaration name="pub" type="DSAPublicKey" line="119"/>
                    <scope line="120"/>
                    <scope line="123"/>
                    <declaration name="priv" type="DSAPrivateKey" line="126"/>
                    <declaration name="pair" type="KeyPair" line="127"/>
                </scope>
                <scope line="130"/>
            </method>
            <javadoc line="134">
                Generate the private key component of the key pair using the
                  provided source of random bits. This method uses the random but
                  source passed to generate a seed and then calls the seed-based
                  generateX method.                
            </javadoc>
            <method name="generateX" type="BigInteger" line="140">
                <params>
                    <param name="random" type="SecureRandom"/>
                    <param name="q" type="BigInteger"/>
                </params>
                <declaration name="x" type="BigInteger" line="141"/>
                <scope line="142">
                    <declaration name="seed" type="int[]" line="143"/>
                    <scope line="144"/>
                    <scope line="148"/>
                </scope>
            </method>
            <javadoc line="154">
                Given a seed, generate the private key component of the key
                  pair. In the terminology used in the DSA specification
                  (FIPS-186) seed is the XSEED quantity.                
                <param>
                    seed the seed to use to generate the private key.                    
                </param>
            </javadoc>
            <method name="generateX" type="BigInteger" line="160">
                <params>
                    <param name="seed" type="int[]"/>
                    <param name="q" type="BigInteger"/>
                </params>
                <declaration name="t" type="int[]" line="161"/>
                <declaration name="tmp" type="int[]" line="162"/>
                <declaration name="tmpBytes" type="byte[]" line="163"/>
                <scope line="164">
                    <declaration name="k" type="int" line="165"/>
                    <scope line="166"/>
                </scope>
                <declaration name="x" type="BigInteger" line="170"/>
            </method>
            <javadoc line="173">
                Generate the public key component y of the key pair.                
                <param>
                    x the private key component.                    
                </param>
                <param>
                    p the base parameter.                    
                </param>
            </javadoc>
            <method name="generateY" type="BigInteger" line="178">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
                <declaration name="y" type="BigInteger" line="179"/>
            </method>
        </class>
    </source>