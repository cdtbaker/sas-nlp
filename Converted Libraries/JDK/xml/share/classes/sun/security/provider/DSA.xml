<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.math.BigInteger"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.x509.AlgIdDSA"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="DSA" line="46">
            <extends class="SignatureSpi"/>
            <comment line="67">
                                
            </comment>
            <comment line="70">
                                
            </comment>
            <comment line="73">
                                
            </comment>
            <comment line="76">
                                
            </comment>
            <comment line="79">
                                
            </comment>
            <comment line="82">
                                
            </comment>
            <comment line="85">
                                
            </comment>
            <comment line="88">
                The random seed used to generate k
                 (prevent the same Kseed from being used twice in a row                
            </comment>
            <comment line="94">
                                
            </comment>
            <comment line="399">
                Please read bug report 4044247 for an alternative, faster,
                 NON-FIPS approved method to generate K                
            </comment>
            <comment line="437">
                Use the application-specified SecureRandom Object if provided.
                 Otherwise, use our default SecureRandom Object.                
            </comment>
            <comment line="477">
                Constants for each round                
            </comment>
            <comment line="636">
                Utility routine for converting a byte array into an int array                
            </comment>
            <javadoc line="46">
                The Digital Signature Standard (using the Digital Signature
                  Algorithm), as described in fips186 of the National Instute of
                  Standards and Technology (NIST), using fips180-1 (SHA-1).
                  This file contains both the signature implementation for the
                  commonly used SHA1withDSA (DSS) as well as RawDSA, used by TLS
                  among others. RawDSA expects the 20 byte SHA-1 digest as input
                  via update rather than the original data like other signature
                  implementations.                
                <author>
                    Benjamin Renaud                    
                </author>
                <since>
                    1.1                    
                </since>
                <see>
                    DSAPublicKey                    
                </see>
                <see>
                    DSAPrivateKey                    
                </see>
            </javadoc>
            <declaration name="debug" type="boolean" line="67"/>
            <declaration name="params" type="DSAParams" line="70"/>
            <declaration name="presetP" type="BigInteger" line="73"/>
            <declaration name="presetY" type="BigInteger" line="76"/>
            <declaration name="presetX" type="BigInteger" line="79"/>
            <declaration name="Kseed" type="int[]" line="82"/>
            <declaration name="KseedAsByteArray" type="byte[]" line="85"/>
            <declaration name="previousKseed" type="int[]" line="91"/>
            <declaration name="signingRandom" type="SecureRandom" line="94"/>
            <javadoc line="96">
                Construct a blank DSA object. It must be
                  initialized before being usable for signing or verifying.                
            </javadoc>
            <method name="DSA" type="constructor" line="100"/>
            <method name="getDigest" type="byte[]" line="104"/>
            <javadoc line="104">
                Return the 20 byte hash value and reset the digest.                
            </javadoc>
            <method name="resetDigest" type="void" line="109"/>
            <javadoc line="109">
                Reset the digest.                
            </javadoc>
            <class name="SHA1withDSA" line="114">
                <extends class="DSA"/>
                <comment line="120">
                                        
                </comment>
                <comment line="163">
                    length of the SHA-1 digest (20 bytes)                    
                </comment>
                <comment line="166">
                    20 byte digest buffer                    
                </comment>
                <comment line="169">
                    offset into the buffer                    
                </comment>
                <javadoc line="114">
                    Standard SHA1withDSA implementation.                    
                </javadoc>
                <declaration name="dataSHA" type="MessageDigest" line="120"/>
                <method name="SHA1withDSA" type="constructor" line="122"/>
                <javadoc line="126">
                    Update a byte to be signed or verified.                    
                </javadoc>
                <method name="engineUpdate" type="void" line="129">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <javadoc line="133">
                    Update an array of bytes to be signed or verified.                    
                </javadoc>
                <method name="engineUpdate" type="void" line="136">
                    <params>
                        <param name="data" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="140">
                    <params>
                        <param name="b" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="getDigest" type="byte[]" line="144"/>
                <method name="resetDigest" type="void" line="148"/>
            </class>
            <class name="RawDSA" line="153">
                <extends class="DSA"/>
                <comment line="120">
                                        
                </comment>
                <comment line="163">
                    length of the SHA-1 digest (20 bytes)                    
                </comment>
                <comment line="166">
                    20 byte digest buffer                    
                </comment>
                <comment line="169">
                    offset into the buffer                    
                </comment>
                <javadoc line="153">
                    RawDSA implementation.
                      RawDSA requires the data to be exactly 20 bytes long. If it is
                      not, a SignatureException is thrown when sign()/verify() is called
                      per JCA spec.                    
                </javadoc>
                <declaration name="SHA1_LEN" type="int" line="163"/>
                <declaration name="digestBuffer" type="byte[]" line="166"/>
                <declaration name="ofs" type="int" line="169"/>
                <method name="RawDSA" type="constructor" line="171"/>
                <method name="engineUpdate" type="void" line="175">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                    <scope line="176"/>
                </method>
                <method name="engineUpdate" type="void" line="183">
                    <params>
                        <param name="data" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="184"/>
                </method>
                <method name="getDigest" type="byte[]" line="192">
                    <scope line="193"/>
                </method>
                <method name="resetDigest" type="void" line="201"/>
            </class>
            <javadoc line="206">
                Initialize the DSA object with a DSA private key.                
                <param>
                    privateKey the DSA private key                    
                </param>
                <exception>
                    InvalidKeyException if the key is not a valid DSA private
                      key.                    
                </exception>
            </javadoc>
            <method name="engineInitSign" type="void" line="215">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
                <scope line="216"/>
                <declaration name="priv" type="java.security.interfaces.DSAPrivateKey" line="220"/>
            </method>
            <javadoc line="227">
                Initialize the DSA object with a DSA public key.                
                <param>
                    publicKey the DSA public key.                    
                </param>
                <exception>
                    InvalidKeyException if the key is not a valid DSA public
                      key.                    
                </exception>
            </javadoc>
            <method name="engineInitVerify" type="void" line="236">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
                <scope line="237"/>
                <declaration name="pub" type="java.security.interfaces.DSAPublicKey" line="241"/>
            </method>
            <method name="initialize" type="void" line="248">
                <params>
                    <param name="params" type="DSAParams"/>
                </params>
            </method>
            <javadoc line="253">
                Sign all the data thus far updated. The signature is formatted
                  according to the Canonical Encoding Rules, returned as a DER
                  sequence of Integer, r and s.                
                <return>
                    a signature block formatted according to the Canonical
                      Encoding Rules.                    
                </return>
                <exception>
                    SignatureException if the signature object was not
                      properly initialized, or if another exception occurs.                    
                </exception>
                <see>
                    sun.security.DSA#engineUpdate                    
                </see>
                <see>
                    sun.security.DSA#engineVerify                    
                </see>
            </javadoc>
            <method name="engineSign" type="byte[]" line="267">
                <declaration name="k" type="BigInteger" line="268"/>
                <declaration name="r" type="BigInteger" line="269"/>
                <declaration name="s" type="BigInteger" line="270"/>
                <scope line="272">
                    <declaration name="outseq" type="DerOutputStream" line="273"/>
                    <declaration name="result" type="DerValue" line="276"/>
                </scope>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                Verify all the data thus far updated.                
                <param>
                    signature the alledged signature, encoded using the
                      Canonical Encoding Rules, as a sequence of integers, r and s.                    
                </param>
                <exception>
                    SignatureException if the signature object was not
                      properly initialized, or if another exception occurs.                    
                </exception>
                <see>
                    sun.security.DSA#engineUpdate                    
                </see>
                <see>
                    sun.security.DSA#engineSign                    
                </see>
            </javadoc>
            <method name="engineVerify" type="boolean" line="299">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
            </method>
            <javadoc line="303">
                Verify all the data thus far updated.                
                <param>
                    signature the alledged signature, encoded using the
                      Canonical Encoding Rules, as a sequence of integers, r and s.                    
                </param>
                <param>
                    offset the offset to start from in the array of bytes.                    
                </param>
                <param>
                    length the number of bytes to use, starting at offset.                    
                </param>
                <exception>
                    SignatureException if the signature object was not
                      properly initialized, or if another exception occurs.                    
                </exception>
                <see>
                    sun.security.DSA#engineUpdate                    
                </see>
                <see>
                    sun.security.DSA#engineSign                    
                </see>
            </javadoc>
            <method name="engineVerify" type="boolean" line="320">
                <params>
                    <param name="signature" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="325">
                    first decode the signature.                    
                </comment>
                <comment line="337">
                    some implementations do not correctly encode values in the ASN.1
                     2&apos;s complement format. force r and s to be positive in order to
                     to validate those signatures                    
                </comment>
                <declaration name="r" type="BigInteger" line="322"/>
                <declaration name="s" type="BigInteger" line="323"/>
                <scope line="325">
                    <declaration name="in" type="DerInputStream" line="326"/>
                    <declaration name="values" type="DerValue[]" line="327"/>
                </scope>
                <scope line="332"/>
                <scope line="339"/>
                <scope line="342"/>
                <scope line="346">
                    <declaration name="w" type="BigInteger" line="347"/>
                    <declaration name="v" type="BigInteger" line="348"/>
                </scope>
                <scope line="350"/>
            </method>
            <method name="generateR" type="BigInteger" line="356">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="k" type="BigInteger"/>
                </params>
                <declaration name="temp" type="BigInteger" line="357"/>
            </method>
            <method name="generateS" type="BigInteger" line="362">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="r" type="BigInteger"/>
                    <param name="k" type="BigInteger"/>
                </params>
                <declaration name="s2" type="byte[]" line="364"/>
                <declaration name="temp" type="BigInteger" line="365"/>
                <declaration name="k1" type="BigInteger" line="366"/>
                <declaration name="s" type="BigInteger" line="368"/>
            </method>
            <method name="generateW" type="BigInteger" line="375">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="s" type="BigInteger"/>
                </params>
            </method>
            <method name="generateV" type="BigInteger" line="381">
                <params>
                    <param name="y" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="w" type="BigInteger"/>
                    <param name="r" type="BigInteger"/>
                </params>
                <declaration name="s2" type="byte[]" line="383"/>
                <declaration name="temp" type="BigInteger" line="384"/>
                <declaration name="u1" type="BigInteger" line="387"/>
                <declaration name="u2" type="BigInteger" line="389"/>
                <declaration name="t1" type="BigInteger" line="391"/>
                <declaration name="t2" type="BigInteger" line="392"/>
                <declaration name="t3" type="BigInteger" line="393"/>
                <declaration name="t5" type="BigInteger" line="394"/>
            </method>
            <method name="generateK" type="BigInteger" line="402">
                <params>
                    <param name="q" type="BigInteger"/>
                </params>
                <comment line="407">
                    The application specified a Kseed for us to use.
                     Note that we do not allow usage of the same Kseed twice in a row                    
                </comment>
                <comment line="418">
                    The application did not specify a Kseed for us to use.
                     We&apos;ll generate a new Kseed by getting random bytes from
                     a SecureRandom object.                    
                </comment>
                <declaration name="k" type="BigInteger" line="404"/>
                <scope line="408">
                    <scope line="410"/>
                </scope>
                <declaration name="random" type="SecureRandom" line="420"/>
                <scope line="422">
                    <declaration name="seed" type="int[]" line="423"/>
                    <scope line="428"/>
                </scope>
            </method>
            <method name="getSigningRandom" type="SecureRandom" line="438">
                <scope line="439">
                    <scope line="440"/>
                    <scope line="442"/>
                </scope>
            </method>
            <javadoc line="449">
                Compute k for a DSA signature.                
                <param>
                    seed the seed for generating k. This seed should be
                      secure. This is what is refered to as the KSEED in the DSA
                      specification.                    
                </param>
                <param>
                    g the g parameter from the DSA key pair.                    
                </param>
            </javadoc>
            <method name="generateK" type="BigInteger" line="458">
                <params>
                    <param name="seed" type="int[]"/>
                    <param name="q" type="BigInteger"/>
                </params>
                <comment line="461">
                    check out t in the spec.                    
                </comment>
                <comment line="464">
                                        
                </comment>
                <declaration name="t" type="int[]" line="461"/>
                <declaration name="tmp" type="int[]" line="464"/>
                <declaration name="tmpBytes" type="byte[]" line="465"/>
                <scope line="466">
                    <declaration name="k" type="int" line="467"/>
                    <scope line="468"/>
                </scope>
                <declaration name="k" type="BigInteger" line="472"/>
            </method>
            <declaration name="round1_kt" type="int" line="477"/>
            <declaration name="round2_kt" type="int" line="478"/>
            <declaration name="round3_kt" type="int" line="479"/>
            <declaration name="round4_kt" type="int" line="480"/>
            <javadoc line="482">
                Computes set 1 thru 7 of SHA-1 on m1.                
            </javadoc>
            <method name="SHA_7" type="int[]" line="484">
                <params>
                    <param name="m1" type="int[]"/>
                    <param name="h" type="int[]"/>
                </params>
                <comment line="507">
                    Round 2                    
                </comment>
                <comment line="518">
                    Round 3                    
                </comment>
                <comment line="529">
                    Round 4                    
                </comment>
                <declaration name="W" type="int[]" line="486"/>
                <declaration name="temp" type="int" line="488"/>
                <scope line="490"/>
                <declaration name="a" type="int" line="495"/>
                <scope line="496"/>
                <scope line="507"/>
                <scope line="518"/>
                <scope line="529"/>
                <declaration name="md" type="int[]" line="538"/>
            </method>
            <javadoc line="548">
                This implementation recognizes the following parameter:&lt;dl&gt;
                  &lt;dt&gt;&lt;tt&gt;Kseed&lt;/tt&gt;
                  &lt;dd&gt;a byte array.
                  &lt;/dl&gt;                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="engineSetParameter" type="void" line="560">
                <params>
                    <param name="key" type="String"/>
                    <param name="param" type="Object"/>
                </params>
                <scope line="561">
                    <scope line="562"/>
                    <scope line="565"/>
                </scope>
                <scope line="569"/>
            </method>
            <javadoc line="574">
                Return the value of the requested parameter. Recognized
                  parameters are:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;tt&gt;Kseed&lt;/tt&gt;
                  &lt;dd&gt;a byte array.
                  &lt;/dl&gt;                
                <return>
                    the value of the requested parameter.                    
                </return>
                <see>
                    java.security.SignatureEngine                    
                </see>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="engineGetParameter" type="Object" line="593">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="594"/>
                <scope line="596"/>
            </method>
            <javadoc line="601">
                Set the algorithm object.                
            </javadoc>
            <method name="setParams" type="void" line="604">
                <params>
                    <param name="params" type="DSAParams"/>
                </params>
                <scope line="605"/>
            </method>
            <javadoc line="614">
                Return a human readable rendition of the engine.                
            </javadoc>
            <method name="toString" type="String" line="617">
                <declaration name="printable" type="String" line="618"/>
                <scope line="619"/>
                <scope line="623"/>
                <scope line="626"/>
                <scope line="629"/>
            </method>
            <method name="byteArray2IntArray" type="int[]" line="638">
                <params>
                    <param name="byteArray" type="byte[]"/>
                </params>
                <comment line="645">
                    guarantee that the incoming byteArray is a multiple of 4
                     (pad with 0&apos;s)                    
                </comment>
                <comment line="655">
                    copy each set of 4 bytes in the byte array into an integer                    
                </comment>
                <declaration name="j" type="int" line="640"/>
                <declaration name="newBA" type="byte[]" line="641"/>
                <declaration name="mod" type="int" line="642"/>
                <declaration name="newSeed" type="int[]" line="655"/>
                <scope line="656"/>
            </method>
            <method name="debug" type="void" line="667">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <scope line="668"/>
            </method>
            <method name="debug" type="void" line="673">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="674"/>
            </method>
        </class>
    </source>