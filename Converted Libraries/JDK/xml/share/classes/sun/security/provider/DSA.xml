<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.math.BigInteger"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec.DSAParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.x509.AlgIdDSA"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="DSA" line="17">
            <extends class="SignatureSpi"/>
            <javadoc line="17">
                The Digital Signature Standard (using the Digital Signature
                  Algorithm), as described in fips186 of the National Instute of
                  Standards and Technology (NIST), using fips180-1 (SHA-1).
                  This file contains both the signature implementation for the
                  commonly used SHA1withDSA (DSS) as well as RawDSA, used by TLS
                  among others. RawDSA expects the 20 byte SHA-1 digest as input
                  via update rather than the original data like other signature
                  implementations.                
                <author>
                    Benjamin Renaud                    
                </author>
                <since>
                    1.1                    
                </since>
                <see>
                    DSAPublicKey                    
                </see>
                <see>
                    DSAPrivateKey                    
                </see>
            </javadoc>
            <declaration name="debug" type="boolean" line="32"/>
            <declaration name="params" type="DSAParams" line="33"/>
            <declaration name="presetP" type="BigInteger" line="34"/>
            <declaration name="presetY" type="BigInteger" line="35"/>
            <declaration name="presetX" type="BigInteger" line="36"/>
            <declaration name="Kseed" type="int[]" line="37"/>
            <declaration name="KseedAsByteArray" type="byte[]" line="38"/>
            <declaration name="previousKseed" type="int[]" line="39"/>
            <declaration name="signingRandom" type="SecureRandom" line="40"/>
            <javadoc line="41">
                Construct a blank DSA object. It must be
                  initialized before being usable for signing or verifying.                
            </javadoc>
            <method name="DSA" type="constructor" line="45"/>
            <method name="getDigest" type="byte[]" line="48"/>
            <javadoc line="48">
                Return the 20 byte hash value and reset the digest.                
            </javadoc>
            <method name="resetDigest" type="void" line="52"/>
            <javadoc line="52">
                Reset the digest.                
            </javadoc>
            <class name="SHA1withDSA" line="56">
                <extends class="DSA"/>
                <javadoc line="56">
                    Standard SHA1withDSA implementation.                    
                </javadoc>
                <declaration name="dataSHA" type="MessageDigest" line="60"/>
                <method name="SHA1withDSA" type="constructor" line="61"/>
                <javadoc line="64">
                    Update a byte to be signed or verified.                    
                </javadoc>
                <method name="engineUpdate" type="void" line="67">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <javadoc line="70">
                    Update an array of bytes to be signed or verified.                    
                </javadoc>
                <method name="engineUpdate" type="void" line="73">
                    <params>
                        <param name="data" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="76">
                    <params>
                        <param name="b" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="getDigest" type="byte[]" line="79"/>
                <method name="resetDigest" type="void" line="82"/>
            </class>
            <class name="RawDSA" line="86">
                <extends class="DSA"/>
                <javadoc line="86">
                    RawDSA implementation.
                      RawDSA requires the data to be exactly 20 bytes long. If it is
                      not, a SignatureException is thrown when sign()/verify() is called
                      per JCA spec.                    
                </javadoc>
                <declaration name="SHA1_LEN" type="int" line="93"/>
                <declaration name="digestBuffer" type="byte[]" line="94"/>
                <declaration name="ofs" type="int" line="95"/>
                <method name="RawDSA" type="constructor" line="96"/>
                <method name="engineUpdate" type="void" line="99">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                    <scope line="100"/>
                </method>
                <method name="engineUpdate" type="void" line="106">
                    <params>
                        <param name="data" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="107"/>
                </method>
                <method name="getDigest" type="byte[]" line="114">
                    <scope line="115"/>
                </method>
                <method name="resetDigest" type="void" line="121"/>
            </class>
            <javadoc line="125">
                Initialize the DSA object with a DSA private key.                
                <param>
                    privateKey the DSA private key                    
                </param>
                <exception>
                    InvalidKeyException if the key is not a valid DSA private
                      key.                    
                </exception>
            </javadoc>
            <method name="engineInitSign" type="void" line="131">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
                <scope line="132"/>
                <declaration name="priv" type="java.security.interfaces.DSAPrivateKey" line="135"/>
            </method>
            <javadoc line="140">
                Initialize the DSA object with a DSA public key.                
                <param>
                    publicKey the DSA public key.                    
                </param>
                <exception>
                    InvalidKeyException if the key is not a valid DSA public
                      key.                    
                </exception>
            </javadoc>
            <method name="engineInitVerify" type="void" line="146">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
                <scope line="147"/>
                <declaration name="pub" type="java.security.interfaces.DSAPublicKey" line="150"/>
            </method>
            <method name="initialize" type="void" line="155">
                <params>
                    <param name="params" type="DSAParams"/>
                </params>
            </method>
            <javadoc line="159">
                Sign all the data thus far updated. The signature is formatted
                  according to the Canonical Encoding Rules, returned as a DER
                  sequence of Integer, r and s.                
                <return>
                    a signature block formatted according to the Canonical
                      Encoding Rules.                    
                </return>
                <exception>
                    SignatureException if the signature object was not
                      properly initialized, or if another exception occurs.                    
                </exception>
                <see>
                    sun.security.DSA#engineUpdate                    
                </see>
                <see>
                    sun.security.DSA#engineVerify                    
                </see>
            </javadoc>
            <method name="engineSign" type="byte[]" line="170">
                <declaration name="k" type="BigInteger" line="171"/>
                <declaration name="r" type="BigInteger" line="172"/>
                <declaration name="s" type="BigInteger" line="173"/>
                <scope line="174">
                    <declaration name="outseq" type="DerOutputStream" line="175"/>
                    <declaration name="result" type="DerValue" line="178"/>
                </scope>
                <scope line="181"/>
            </method>
            <javadoc line="185">
                Verify all the data thus far updated.                
                <param>
                    signature the alledged signature, encoded using the
                      Canonical Encoding Rules, as a sequence of integers, r and s.                    
                </param>
                <exception>
                    SignatureException if the signature object was not
                      properly initialized, or if another exception occurs.                    
                </exception>
                <see>
                    sun.security.DSA#engineUpdate                    
                </see>
                <see>
                    sun.security.DSA#engineSign                    
                </see>
            </javadoc>
            <method name="engineVerify" type="boolean" line="194">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
            </method>
            <javadoc line="197">
                Verify all the data thus far updated.                
                <param>
                    signature the alledged signature, encoded using the
                      Canonical Encoding Rules, as a sequence of integers, r and s.                    
                </param>
                <param>
                    offset the offset to start from in the array of bytes.                    
                </param>
                <param>
                    length the number of bytes to use, starting at offset.                    
                </param>
                <exception>
                    SignatureException if the signature object was not
                      properly initialized, or if another exception occurs.                    
                </exception>
                <see>
                    sun.security.DSA#engineUpdate                    
                </see>
                <see>
                    sun.security.DSA#engineSign                    
                </see>
            </javadoc>
            <method name="engineVerify" type="boolean" line="208">
                <params>
                    <param name="signature" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="r" type="BigInteger" line="209"/>
                <declaration name="s" type="BigInteger" line="210"/>
                <scope line="211">
                    <declaration name="in" type="DerInputStream" line="212"/>
                    <declaration name="values" type="DerValue[]" line="213"/>
                </scope>
                <scope line="217"/>
                <scope line="220"/>
                <scope line="223"/>
                <scope line="226">
                    <declaration name="w" type="BigInteger" line="227"/>
                    <declaration name="v" type="BigInteger" line="228"/>
                </scope>
                <scope line="231"/>
            </method>
            <method name="generateR" type="BigInteger" line="235">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="k" type="BigInteger"/>
                </params>
                <declaration name="temp" type="BigInteger" line="236"/>
            </method>
            <method name="generateS" type="BigInteger" line="239">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="r" type="BigInteger"/>
                    <param name="k" type="BigInteger"/>
                </params>
                <declaration name="s2" type="byte[]" line="240"/>
                <declaration name="temp" type="BigInteger" line="241"/>
                <declaration name="k1" type="BigInteger" line="242"/>
                <declaration name="s" type="BigInteger" line="243"/>
            </method>
            <method name="generateW" type="BigInteger" line="248">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="s" type="BigInteger"/>
                </params>
            </method>
            <method name="generateV" type="BigInteger" line="251">
                <params>
                    <param name="y" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="w" type="BigInteger"/>
                    <param name="r" type="BigInteger"/>
                </params>
                <declaration name="s2" type="byte[]" line="252"/>
                <declaration name="temp" type="BigInteger" line="253"/>
                <declaration name="u1" type="BigInteger" line="255"/>
                <declaration name="u2" type="BigInteger" line="256"/>
                <declaration name="t1" type="BigInteger" line="257"/>
                <declaration name="t2" type="BigInteger" line="258"/>
                <declaration name="t3" type="BigInteger" line="259"/>
                <declaration name="t5" type="BigInteger" line="260"/>
            </method>
            <method name="generateK" type="BigInteger" line="263">
                <params>
                    <param name="q" type="BigInteger"/>
                </params>
                <declaration name="k" type="BigInteger" line="264"/>
                <scope line="265">
                    <scope line="267"/>
                </scope>
                <declaration name="random" type="SecureRandom" line="273"/>
                <scope line="274">
                    <declaration name="seed" type="int[]" line="275"/>
                    <scope line="278"/>
                </scope>
            </method>
            <method name="getSigningRandom" type="SecureRandom" line="285">
                <scope line="286">
                    <scope line="287"/>
                    <scope line="290"/>
                </scope>
            </method>
            <javadoc line="296">
                Compute k for a DSA signature.                
                <param>
                    seed the seed for generating k. This seed should be
                      secure. This is what is refered to as the KSEED in the DSA
                      specification.                    
                </param>
                <param>
                    g the g parameter from the DSA key pair.                    
                </param>
            </javadoc>
            <method name="generateK" type="BigInteger" line="303">
                <params>
                    <param name="seed" type="int[]"/>
                    <param name="q" type="BigInteger"/>
                </params>
                <declaration name="t" type="int[]" line="304"/>
                <declaration name="tmp" type="int[]" line="305"/>
                <declaration name="tmpBytes" type="byte[]" line="306"/>
                <scope line="307">
                    <declaration name="k" type="int" line="308"/>
                    <scope line="309"/>
                </scope>
                <declaration name="k" type="BigInteger" line="313"/>
            </method>
            <declaration name="round1_kt" type="int" line="316"/>
            <declaration name="round2_kt" type="int" line="317"/>
            <declaration name="round3_kt" type="int" line="318"/>
            <declaration name="round4_kt" type="int" line="319"/>
            <javadoc line="320">
                Computes set 1 thru 7 of SHA-1 on m1.                
            </javadoc>
            <method name="SHA_7" type="int[]" line="323">
                <params>
                    <param name="m1" type="int[]"/>
                    <param name="h" type="int[]"/>
                </params>
                <declaration name="W" type="int[]" line="324"/>
                <declaration name="temp" type="int" line="326"/>
                <scope line="327"/>
                <declaration name="a" type="int" line="331"/>
                <scope line="332"/>
                <scope line="340"/>
                <scope line="348"/>
                <scope line="356"/>
                <declaration name="md" type="int[]" line="364"/>
            </method>
            <javadoc line="372">
                This implementation recognizes the following parameter:&lt;dl&gt;
                  &lt;dt&gt;&lt;tt&gt;Kseed&lt;/tt&gt;
                  &lt;dd&gt;a byte array.
                  &lt;/dl&gt;                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="engineSetParameter" type="void" line="379">
                <params>
                    <param name="key" type="String"/>
                    <param name="param" type="Object"/>
                </params>
                <scope line="380">
                    <scope line="381"/>
                    <scope line="385"/>
                </scope>
                <scope line="390"/>
            </method>
            <javadoc line="394">
                Return the value of the requested parameter. Recognized
                  parameters are:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;tt&gt;Kseed&lt;/tt&gt;
                  &lt;dd&gt;a byte array.
                  &lt;/dl&gt;                
                <return>
                    the value of the requested parameter.                    
                </return>
                <see>
                    java.security.SignatureEngine                    
                </see>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="engineGetParameter" type="Object" line="405">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="406"/>
                <scope line="409"/>
            </method>
            <javadoc line="413">
                Set the algorithm object.                
            </javadoc>
            <method name="setParams" type="void" line="416">
                <params>
                    <param name="params" type="DSAParams"/>
                </params>
                <scope line="417"/>
            </method>
            <javadoc line="425">
                Return a human readable rendition of the engine.                
            </javadoc>
            <method name="toString" type="String" line="428">
                <declaration name="printable" type="String" line="429"/>
                <scope line="430"/>
                <scope line="435"/>
                <scope line="438"/>
                <scope line="441"/>
            </method>
            <method name="byteArray2IntArray" type="int[]" line="446">
                <params>
                    <param name="byteArray" type="byte[]"/>
                </params>
                <declaration name="j" type="int" line="447"/>
                <declaration name="newBA" type="byte[]" line="448"/>
                <declaration name="mod" type="int" line="449"/>
                <declaration name="newSeed" type="int[]" line="465"/>
                <scope line="466"/>
            </method>
            <method name="debug" type="void" line="475">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <scope line="476"/>
            </method>
            <method name="debug" type="void" line="480">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="481"/>
            </method>
        </class>
    </source>