<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.cert.CertificateEncodingException"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.Cache"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.provider.X509Factory"/>
        <class name="X509CertificatePair" line="15">
            <javadoc line="15">
                This class represents an X.509 Certificate Pair object, which is primarily
                  used to hold a pair of cross certificates issued between Certification
                  Authorities. The ASN.1 structure is listed below. The forward certificate
                  of the CertificatePair contains a certificate issued to this CA by another
                  CA. The reverse certificate of the CertificatePair contains a certificate
                  issued by this CA to another CA. When both the forward and the reverse
                  certificates are present in the CertificatePair, the issuer name in one
                  certificate shall match the subject name in the other and vice versa, and
                  the subject public key in one certificate shall be capable of verifying the
                  digital signature on the other certificate and vice versa.  If a subject
                  public key in one certificate does not contain required key algorithm
                  parameters, then the signature check involving that key is not done.&lt;p&gt;
                  The ASN.1 syntax for this object is:
                  &lt;pre&gt;
                  CertificatePair      ::=     SEQUENCE {
                  forward [0]     Certificate OPTIONAL,
                  reverse [1]     Certificate OPTIONAL
                  -- at least one of the pair shall be present -- }
                  &lt;/pre&gt;&lt;p&gt;
                  This structure uses EXPLICIT tagging. References: Annex A of
                  X.509(2000), X.509(1997).                
                <author>
                    Sean Mullan                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="TAG_FORWARD" type="byte" line="41"/>
            <declaration name="TAG_REVERSE" type="byte" line="42"/>
            <declaration name="forward" type="X509Certificate" line="43"/>
            <declaration name="reverse" type="X509Certificate" line="44"/>
            <declaration name="encoded" type="byte[]" line="45"/>
            <declaration name="cache" type="Cache" line="46"/>
            <javadoc line="47">
                Creates an empty instance of X509CertificatePair.                
            </javadoc>
            <method name="X509CertificatePair" type="constructor" line="50"/>
            <javadoc line="52">
                Creates an instance of X509CertificatePair. At least one of
                  the pair must be non-null.                
                <param>
                    forward The forward component of the certificate pair
                      which represents a certificate issued to this CA by other CAs.                    
                </param>
                <param>
                    reverse The reverse component of the certificate pair
                      which represents a certificate issued by this CA to other CAs.                    
                </param>
                <throws>
                    CertificateException If an exception occurs.                    
                </throws>
            </javadoc>
            <method name="X509CertificatePair" type="constructor" line="61">
                <params>
                    <param name="forward" type="X509Certificate"/>
                    <param name="reverse" type="X509Certificate"/>
                </params>
                <scope line="62"/>
            </method>
            <javadoc line="69">
                Create a new X509CertificatePair from its encoding.
                  For internal use only, external code should use generateCertificatePair.                
            </javadoc>
            <method name="X509CertificatePair" type="constructor" line="73">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
                <scope line="74"/>
                <scope line="78"/>
            </method>
            <javadoc line="83">
                Clear the cache for debugging.                
            </javadoc>
            <method name="clearCache" type="void" line="86"/>
            <javadoc line="89">
                Create a X509CertificatePair from its encoding. Uses cache lookup
                  if possible.                
            </javadoc>
            <method name="generateCertificatePair" type="X509CertificatePair" line="93">
                <params>
                    <param name="encoded" type="byte[]"/>
                </params>
                <declaration name="key" type="Object" line="94"/>
                <declaration name="pair" type="X509CertificatePair" line="95"/>
                <scope line="96"/>
            </method>
            <javadoc line="104">
                Sets the forward component of the certificate pair.                
            </javadoc>
            <method name="setForward" type="void" line="107">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
            </method>
            <javadoc line="111">
                Sets the reverse component of the certificate pair.                
            </javadoc>
            <method name="setReverse" type="void" line="114">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
            </method>
            <javadoc line="118">
                Returns the forward component of the certificate pair.                
                <return>
                    The forward certificate, or null if not set.                    
                </return>
            </javadoc>
            <method name="getForward" type="X509Certificate" line="122"/>
            <javadoc line="125">
                Returns the reverse component of the certificate pair.                
                <return>
                    The reverse certificate, or null if not set.                    
                </return>
            </javadoc>
            <method name="getReverse" type="X509Certificate" line="129"/>
            <javadoc line="132">
                Return the DER encoded form of the certificate pair.                
                <return>
                    The encoded form of the certificate pair.                    
                </return>
                <throws>
                    CerticateEncodingException If an encoding exception occurs.                    
                </throws>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="137">
                <scope line="138">
                    <scope line="139">
                        <declaration name="tmp" type="DerOutputStream" line="140"/>
                    </scope>
                </scope>
                <scope line="145"/>
            </method>
            <javadoc line="150">
                Return a printable representation of the certificate pair.                
                <return>
                    A String describing the contents of the pair.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="154">
                <declaration name="sb" type="StringBuffer" line="155"/>
            </method>
            <method name="parse" type="void" line="162">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
                <scope line="163"/>
                <scope line="166">
                    <declaration name="opt" type="DerValue" line="167"/>
                    <declaration name="tag" type="short" line="168"/>
                    <scope line="171">
                        <scope line="172"/>
                    </scope>
                    <scope line="180">
                        <scope line="181"/>
                    </scope>
                </scope>
                <scope line="192"/>
            </method>
            <method name="emit" type="void" line="196">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
                <declaration name="tagged" type="DerOutputStream" line="197"/>
                <scope line="198">
                    <declaration name="tmp" type="DerOutputStream" line="199"/>
                </scope>
                <scope line="203">
                    <declaration name="tmp" type="DerOutputStream" line="204"/>
                </scope>
            </method>
            <method name="checkPair" type="void" line="210">
                <scope line="211"/>
                <declaration name="fwSubject" type="X500Principal" line="214"/>
                <declaration name="fwIssuer" type="X500Principal" line="215"/>
                <declaration name="rvSubject" type="X500Principal" line="216"/>
                <declaration name="rvIssuer" type="X500Principal" line="217"/>
                <scope line="218"/>
                <scope line="221">
                    <declaration name="pk" type="PublicKey" line="222"/>
                    <scope line="223"/>
                    <scope line="227"/>
                </scope>
                <scope line="231"/>
            </method>
        </class>
    </source>