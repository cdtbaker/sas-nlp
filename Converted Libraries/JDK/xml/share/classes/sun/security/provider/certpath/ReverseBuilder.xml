<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.CertStore"/>
        <import package="java.security.cert.CertStoreException"/>
        <import package="java.security.cert.PKIXBuilderParameters"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.PKIXParameters"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.X509CertSelector"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Set"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.Extension"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.PolicyMappingsExtension"/>
        <class name="ReverseBuilder" line="61">
            <extends class="Builder"/>
            <comment line="134">
                Retrieves all end-entity certificates which satisfy constraints
                 and requirements specified in the parameters and PKIX state.                
            </comment>
            <comment line="194">
                Retrieves all CA certificates which satisfy constraints
                 and requirements specified in the parameters and PKIX state.                
            </comment>
            <comment line="261">
                This inner class compares 2 PKIX certificates according to which
                 should be tried first when building a path to the target. For
                 now, the algorithm is to look at name constraints in each cert and those
                 which constrain the path closer to the target should be
                 ranked higher. Later, we may want to consider other components,
                 such as key identifiers.                
            </comment>
            <javadoc line="61">
                This class represents a reverse builder, which is able to retrieve
                  matching certificates from CertStores and verify a particular certificate
                  against a ReverseState.                
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="73"/>
            <declaration name="initPolicies" type="Set&lt;String&gt;" line="75"/>
            <javadoc line="77">
                Initialize the builder with the input parameters.                
                <param>
                    params the parameter set used to build a certification path                    
                </param>
            </javadoc>
            <method name="ReverseBuilder" type="constructor" line="83">
                <params>
                    <param name="buildParams" type="PKIXBuilderParameters"/>
                    <param name="targetSubjectDN" type="X500Principal"/>
                </params>
                <comment line="91">
                    if no initialPolicies are specified by user, set
                     initPolicies to be anyPolicy by default                    
                </comment>
                <declaration name="initialPolicies" type="Set&lt;String&gt;" line="87"/>
                <scope line="89"/>
                <scope line="93">
                    <scope line="94"/>
                </scope>
            </method>
            <javadoc line="100">
                Retrieves all certs from the specified CertStores that satisfy the
                  requirements specified in the parameters and the current
                  PKIX state (name constraints, policy constraints, etc).                
                <param>
                    currentState the current state.
                      Must be an instance of <code>ReverseState</code>                    
                </param>
                <param>
                    certStores list of CertStores                    
                </param>
            </javadoc>
            <method name="getMatchingCerts" type="Collection<X509Certificate>" line="112">
                <params>
                    <param name="currState" type="State"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <comment line="119">
                    The last certificate could be an EE or a CA certificate
                     (we may be building a partial certification path or
                     establishing trust in a CA).
                    
                     Try the EE certs before the CA certs. It will be more
                     common to build a path to an end entity.                    
                </comment>
                <declaration name="currentState" type="ReverseState" line="113"/>
                <declaration name="certs" type="Collection&lt;X509Certificate&gt;" line="126"/>
            </method>
            <method name="getMatchingEECerts" type="Collection<X509Certificate>" line="139">
                <params>
                    <param name="currentState" type="ReverseState"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <comment line="142">
                    Compose a CertSelector to filter out
                     certs which do not satisfy requirements.
                    
                     First, retrieve clone of current target cert constraints,
                     and then add more selection criteria based on current validation state.                    
                </comment>
                <comment line="151">
                    Match on issuer (subject of previous cert)                    
                </comment>
                <comment line="156">
                    Match on certificate validity date.                    
                </comment>
                <comment line="161">
                    Policy processing optimizations                    
                </comment>
                <comment line="167">
                    If previous cert has a subject key identifier extension,
                     use it to match on authority key identifier extension.                    
                </comment>
                <comment line="171">
                    if (currentState.subjKeyId != null) {
                    AuthorityKeyIdentifierExtension authKeyId = new AuthorityKeyIdentifierExtension(
                    (KeyIdentifier) currentState.subjKeyId.get(SubjectKeyIdentifierExtension.KEY_ID),
                    null, null);
                    sel.setAuthorityKeyIdentifier(authKeyId.getExtensionValue());                    
                </comment>
                <comment line="178">
                    Require EE certs                    
                </comment>
                <comment line="183">
                                        
                </comment>
                <declaration name="sel" type="X509CertSelector" line="148"/>
                <declaration name="eeCerts" type="HashSet&lt;X509Certificate&gt;" line="183"/>
                <scope line="186"/>
            </method>
            <method name="getMatchingCACerts" type="Collection<X509Certificate>" line="199">
                <params>
                    <param name="currentState" type="ReverseState"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <comment line="202">
                    Compose a CertSelector to filter out
                     certs which do not satisfy requirements.                    
                </comment>
                <comment line="208">
                    Match on issuer (subject of previous cert)                    
                </comment>
                <comment line="213">
                    Match on certificate validity date.                    
                </comment>
                <comment line="218">
                    Match on target subject name (checks that current cert&apos;s
                     name constraints permit it to certify target).
                     (4 is the integer type for DIRECTORY name).                    
                </comment>
                <comment line="225">
                    Policy processing optimizations                    
                </comment>
                <comment line="231">
                    If previous cert has a subject key identifier extension,
                     use it to match on authority key identifier extension.                    
                </comment>
                <comment line="235">
                    if (currentState.subjKeyId != null) {
                    AuthorityKeyIdentifierExtension authKeyId = new AuthorityKeyIdentifierExtension(
                    (KeyIdentifier) currentState.subjKeyId.get(SubjectKeyIdentifierExtension.KEY_ID),
                    null, null);
                    sel.setAuthorityKeyIdentifier(authKeyId.getExtensionValue());                    
                </comment>
                <comment line="242">
                    Require CA certs                    
                </comment>
                <comment line="247">
                                        
                </comment>
                <comment line="252">
                                        
                </comment>
                <declaration name="sel" type="X509CertSelector" line="205"/>
                <declaration name="reverseCerts" type="ArrayList&lt;X509Certificate&gt;" line="247"/>
            </method>
            <class name="PKIXCertComparator" line="268">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="X509Certificate"/>
                    </type_params>
                </implements>
                <declaration name="debug" type="Debug" line="270"/>
                <method name="compare" type="int" line="272">
                    <params>
                        <param name="cert1" type="X509Certificate"/>
                        <param name="cert2" type="X509Certificate"/>
                    </params>
                    <comment line="275">
                        if either cert certifies the target, always
                         put at head of list.                        
                    </comment>
                    <scope line="278"/>
                    <scope line="281"/>
                    <declaration name="targetDist1" type="int" line="285"/>
                    <declaration name="targetDist2" type="int" line="286"/>
                    <scope line="287">
                        <declaration name="targetSubjectName" type="X500Name" line="288"/>
                    </scope>
                    <scope line="293">
                        <scope line="294"/>
                    </scope>
                </method>
            </class>
            <javadoc line="315">
                Verifies a matching certificate.
                  This method executes any of the validation steps in the PKIX path validation
                  algorithm which were not satisfied via filtering out non-compliant
                  certificates with certificate matching rules.
                  If the last certificate is being verified (the one whose subject
                  matches the target subject, then the steps in Section 6.1.4 of the
                  Certification Path Validation algorithm are NOT executed,
                  regardless of whether or not the last cert is an end-entity
                  cert or not. This allows callers to certify CA certs as
                  well as EE certs.                
                <param>
                    cert the certificate to be verified                    
                </param>
                <param>
                    currentState the current state against which the cert is verified                    
                </param>
                <param>
                    certPathList the certPathList generated thus far                    
                </param>
            </javadoc>
            <method name="verifyCert" type="void" line="336">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="currState" type="State"/>
                    <param name="certPathList" type="List<X509Certificate>"/>
                </params>
                <comment line="346">
                                        
                </comment>
                <comment line="351">
                    check for looping - abort a loop if
                     ((we encounter the same certificate twice) AND
                     ((policyMappingInhibited = true) OR (no policy mapping
                     extensions can be found between the occurences of the same
                     certificate)))
                     in order to facilitate the check to see if there are
                     any policy mapping extensions found between the occurences
                     of the same certificate, we reverse the certpathlist first                    
                </comment>
                <comment line="389">
                                        
                </comment>
                <comment line="392">
                                        
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="398">
                                        
                </comment>
                <comment line="402">
                    If the certificate was not self-issued, verify that
                     remainingCerts is greater than zero                    
                </comment>
                <comment line="411">
                    Check keyUsage extension (only if CA cert and not final cert)                    
                </comment>
                <comment line="418">
                    If final cert, check that it satisfies specified target
                     constraints                    
                </comment>
                <comment line="428">
                    Check revocation.                    
                </comment>
                <comment line="438">
                                        
                </comment>
                <comment line="453">
                    Check policy                    
                </comment>
                <comment line="464">
                    Check CRITICAL private extensions                    
                </comment>
                <comment line="472">
                    Check that the signature algorithm is not disabled.                    
                </comment>
                <comment line="481">
                    Look at the remaining extensions and remove any ones we have
                     already checked. If there are any left, throw an exception!                    
                </comment>
                <comment line="502">
                    Check signature.                    
                </comment>
                <scope line="337"/>
                <declaration name="currentState" type="ReverseState" line="343"/>
                <scope line="346"/>
                <scope line="360">
                    <declaration name="reverseCertList" type="List&lt;X509Certificate&gt;" line="361"/>
                    <scope line="363"/>
                    <declaration name="policyMappingFound" type="boolean" line="367"/>
                    <scope line="368">
                        <declaration name="cpListCertImpl" type="X509CertImpl" line="369"/>
                        <declaration name="policyMappingsExt" type="PolicyMappingsExtension" line="370"/>
                        <scope line="372"/>
                        <scope line="377">
                            <scope line="379"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="finalCert" type="boolean" line="389"/>
                <declaration name="caCert" type="boolean" line="392"/>
                <scope line="395">
                    <scope line="404"/>
                </scope>
                <scope line="415">
                    <scope line="421"/>
                </scope>
                <scope line="430"/>
                <scope line="438">
                    <scope line="439">
                        <scope line="440">
                            <scope line="441"/>
                        </scope>
                        <scope line="446"/>
                    </scope>
                </scope>
                <declaration name="certImpl" type="X509CertImpl" line="455"/>
                <declaration name="unresolvedCritExts" type="Set&lt;String&gt;" line="466"/>
                <scope line="467"/>
                <scope line="476"/>
                <scope line="484"/>
                <scope line="504"/>
                <scope line="506"/>
            </method>
            <javadoc line="511">
                Verifies whether the input certificate completes the path.
                  This checks whether the cert is the target certificate.                
                <param>
                    cert the certificate to test                    
                </param>
                <return>
                    a boolean value indicating whether the cert completes the path.                    
                </return>
            </javadoc>
            <method name="isPathCompleted" type="boolean" line="518">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
            </method>
            <javadoc line="522">
                Adds the certificate to the certPathList                
                <param>
                    cert the certificate to be added                    
                </param>
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="addCertToPath" type="void" line="528">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
            <javadoc line="532">
                Removes final certificate from the certPathList                
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="removeFinalCertFromPath" type="void" line="536">
                <params>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
        </class>
    </source>