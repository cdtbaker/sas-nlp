<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.CertStore"/>
        <import package="java.security.cert.CertStoreException"/>
        <import package="java.security.cert.PKIXBuilderParameters"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.PKIXParameters"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.X509CertSelector"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Set"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.Extension"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.PolicyMappingsExtension"/>
        <class name="ReverseBuilder" line="32">
            <extends class="Builder"/>
            <javadoc line="32">
                This class represents a reverse builder, which is able to retrieve
                  matching certificates from CertStores and verify a particular certificate
                  against a ReverseState.                
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="41"/>
            <declaration name="initPolicies" type="Set&lt;String&gt;" line="42"/>
            <javadoc line="43">
                Initialize the builder with the input parameters.                
                <param>
                    params the parameter set used to build a certification path                    
                </param>
            </javadoc>
            <method name="ReverseBuilder" type="constructor" line="47">
                <params>
                    <param name="buildParams" type="PKIXBuilderParameters"/>
                    <param name="targetSubjectDN" type="X500Principal"/>
                </params>
                <declaration name="initialPolicies" type="Set&lt;String&gt;" line="49"/>
                <scope line="51"/>
                <scope line="54">
                    <scope line="55"/>
                </scope>
            </method>
            <javadoc line="60">
                Retrieves all certs from the specified CertStores that satisfy the
                  requirements specified in the parameters and the current
                  PKIX state (name constraints, policy constraints, etc).                
                <param>
                    currentState the current state.
                      Must be an instance of <code>ReverseState</code>                    
                </param>
                <param>
                    certStores list of CertStores                    
                </param>
            </javadoc>
            <method name="getMatchingCerts" type="Collection<X509Certificate>" line="68">
                <params>
                    <param name="currState" type="State"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <declaration name="currentState" type="ReverseState" line="69"/>
                <declaration name="certs" type="Collection&lt;X509Certificate&gt;" line="71"/>
            </method>
            <method name="getMatchingEECerts" type="Collection<X509Certificate>" line="75">
                <params>
                    <param name="currentState" type="ReverseState"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <declaration name="sel" type="X509CertSelector" line="76"/>
                <declaration name="eeCerts" type="HashSet&lt;X509Certificate&gt;" line="81"/>
                <scope line="83"/>
            </method>
            <method name="getMatchingCACerts" type="Collection<X509Certificate>" line="88">
                <params>
                    <param name="currentState" type="ReverseState"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <declaration name="sel" type="X509CertSelector" line="89"/>
                <declaration name="reverseCerts" type="ArrayList&lt;X509Certificate&gt;" line="95"/>
            </method>
            <class name="PKIXCertComparator" line="101">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="X509Certificate"/>
                    </type_params>
                </implements>
                <declaration name="debug" type="Debug" line="102"/>
                <method name="compare" type="int" line="103">
                    <params>
                        <param name="cert1" type="X509Certificate"/>
                        <param name="cert2" type="X509Certificate"/>
                    </params>
                    <scope line="104"/>
                    <scope line="107"/>
                    <declaration name="targetDist1" type="int" line="110"/>
                    <declaration name="targetDist2" type="int" line="111"/>
                    <scope line="112">
                        <declaration name="targetSubjectName" type="X500Name" line="113"/>
                    </scope>
                    <scope line="117">
                        <scope line="118"/>
                    </scope>
                </method>
            </class>
            <javadoc line="130">
                Verifies a matching certificate.
                  This method executes any of the validation steps in the PKIX path validation
                  algorithm which were not satisfied via filtering out non-compliant
                  certificates with certificate matching rules.
                  If the last certificate is being verified (the one whose subject
                  matches the target subject, then the steps in Section 6.1.4 of the
                  Certification Path Validation algorithm are NOT executed,
                  regardless of whether or not the last cert is an end-entity
                  cert or not. This allows callers to certify CA certs as
                  well as EE certs.                
                <param>
                    cert the certificate to be verified                    
                </param>
                <param>
                    currentState the current state against which the cert is verified                    
                </param>
                <param>
                    certPathList the certPathList generated thus far                    
                </param>
            </javadoc>
            <method name="verifyCert" type="void" line="145">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="currState" type="State"/>
                    <param name="certPathList" type="List<X509Certificate>"/>
                </params>
                <scope line="146"/>
                <declaration name="currentState" type="ReverseState" line="149"/>
                <scope line="150"/>
                <scope line="153">
                    <declaration name="reverseCertList" type="List&lt;X509Certificate&gt;" line="154"/>
                    <scope line="155"/>
                    <declaration name="policyMappingFound" type="boolean" line="158"/>
                    <scope line="159">
                        <declaration name="cpListCertImpl" type="X509CertImpl" line="160"/>
                        <declaration name="policyMappingsExt" type="PolicyMappingsExtension" line="161"/>
                        <scope line="162"/>
                        <scope line="166">
                            <scope line="167"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="finalCert" type="boolean" line="174"/>
                <declaration name="caCert" type="boolean" line="175"/>
                <scope line="176">
                    <scope line="178"/>
                </scope>
                <scope line="183">
                    <scope line="184"/>
                </scope>
                <scope line="188"/>
                <scope line="191">
                    <scope line="192">
                        <scope line="193">
                            <scope line="194"/>
                        </scope>
                        <scope line="198"/>
                    </scope>
                </scope>
                <declaration name="certImpl" type="X509CertImpl" line="203"/>
                <declaration name="unresolvedCritExts" type="Set&lt;String&gt;" line="205"/>
                <scope line="206"/>
                <scope line="210"/>
                <scope line="213"/>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <javadoc line="232">
                Verifies whether the input certificate completes the path.
                  This checks whether the cert is the target certificate.                
                <param>
                    cert the certificate to test                    
                </param>
                <return>
                    a boolean value indicating whether the cert completes the path.                    
                </return>
            </javadoc>
            <method name="isPathCompleted" type="boolean" line="238">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
            </method>
            <javadoc line="241">
                Adds the certificate to the certPathList                
                <param>
                    cert the certificate to be added                    
                </param>
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="addCertToPath" type="void" line="246">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
            <javadoc line="249">
                Removes final certificate from the certPathList                
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="removeFinalCertFromPath" type="void" line="253">
                <params>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
        </class>
    </source>