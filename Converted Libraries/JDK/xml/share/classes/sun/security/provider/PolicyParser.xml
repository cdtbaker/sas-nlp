<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.lang.RuntimePermission"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.URL"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Vector"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.text.MessageFormat"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.PropertyExpander"/>
        <import package="sun.security.util.ResourcesMgr"/>
        <class name="PolicyParser" line="46">
            <comment line="91">
                needs to be public for PolicyTool                
            </comment>
            <comment line="98">
                package-private: used by PolicyFile for static policy                
            </comment>
            <comment line="104">
                Convenience variables for parsing                
            </comment>
            <comment line="110">
                unexpanded                
            </comment>
            <comment line="639">
                package-private: used by PolicyFile for static policy                
            </comment>
            <javadoc line="46">
                The policy for a Java runtime (specifying
                  which permissions are available for code from various principals)
                  is represented as a separate
                  persistent configuration.  The configuration may be stored as a
                  flat ASCII file, as a serialized binary file of
                  the Policy class, or as a database. &lt;p&gt;
                  &lt;p&gt;The Java runtime creates one global Policy object, which is used to
                  represent the static policy configuration file.  It is consulted by
                  a ProtectionDomain when the protection domain initializes its set of
                  permissions. &lt;p&gt;
                  &lt;p&gt;The Policy &lt;code&gt;init&lt;/code&gt; method parses the policy
                  configuration file, and then
                  populates the Policy object.  The Policy object is agnostic in that
                  it is not involved in making policy decisions.  It is merely the
                  Java runtime representation of the persistent policy configuration
                  file. &lt;p&gt;
                  &lt;p&gt;When a protection domain needs to initialize its set of
                  permissions, it executes code such as the following
                  to ask the global Policy object to populate a
                  Permissions object with the appropriate permissions:
                  &lt;pre&gt;
                  policy = Policy.getPolicy();
                  Permissions perms = policy.getPermissions(protectiondomain)
                  &lt;/pre&gt;
                  &lt;p&gt;The protection domain contains CodeSource
                  object, which encapsulates its codebase (URL) and public key attributes.
                  It also contains the principals associated with the domain.
                  The Policy object evaluates the global policy in light of who the
                  principal is and what the code source is and returns an appropriate
                  Permissions object.                
                <author>
                    Roland Schemers                    
                </author>
                <author>
                    Ram Marti                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="REPLACE_NAME" type="String" line="91"/>
            <declaration name="EXTDIRS_PROPERTY" type="String" line="93"/>
            <declaration name="OLD_EXTDIRS_EXPANSION" type="String" line="94"/>
            <declaration name="EXTDIRS_EXPANSION" type="String" line="98"/>
            <declaration name="grantEntries" type="Vector&lt;GrantEntry&gt;" line="101"/>
            <declaration name="debug" type="Debug" line="104"/>
            <declaration name="st" type="StreamTokenizer" line="106"/>
            <declaration name="lookahead" type="int" line="107"/>
            <declaration name="expandProp" type="boolean" line="108"/>
            <declaration name="keyStoreUrlString" type="String" line="109"/>
            <declaration name="keyStoreType" type="String" line="110"/>
            <declaration name="keyStoreProvider" type="String" line="111"/>
            <declaration name="storePassURL" type="String" line="112"/>
            <method name="expand" type="String" line="116">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="expand" type="String" line="122">
                <params>
                    <param name="value" type="String"/>
                    <param name="encodeURL" type="boolean"/>
                </params>
                <scope line="123"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Creates a PolicyParser object.                
            </javadoc>
            <method name="PolicyParser" type="constructor" line="134"/>
            <method name="PolicyParser" type="constructor" line="139">
                <params>
                    <param name="expandProp" type="boolean"/>
                </params>
            </method>
            <javadoc line="144">
                Reads a policy configuration into the Policy object using a
                  Reader object. &lt;p&gt;                
                <param>
                    policy the policy Reader object.                    
                </param>
                <exception>
                    ParsingException if the policy configuration contains
                      a syntax error.                    
                </exception>
                <exception>
                    IOException if an error occurs while reading the policy
                      configuration.                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="159">
                <params>
                    <param name="policy" type="Reader"/>
                </params>
                <comment line="165">
                    Configure the stream tokenizer:
                          Recognize strings between &quot;...&quot;
                          Don&apos;t convert words to lowercase
                          Recognize both C-style and C++-style comments
                          Treat end-of-line as white space, not as a token                    
                </comment>
                <comment line="191">
                    The main parsing loop.  The loop is executed once
                     for each entry in the config file.      The entries
                     are delimited by semicolons.   Once we&apos;ve read in
                     the information for an entry, go ahead and try to
                     add it to the policy vector.                    
                </comment>
                <comment line="204">
                    could be null if we couldn&apos;t expand a property                    
                </comment>
                <comment line="208">
                    only one keystore entry per policy file, others will be
                     ignored                    
                </comment>
                <comment line="212">
                    only one keystore passwordURL per policy file, others will be
                     ignored                    
                </comment>
                <comment line="216">
                    error?                    
                </comment>
                <scope line="160"/>
                <scope line="200">
                    <scope line="201">
                        <declaration name="ge" type="GrantEntry" line="202"/>
                    </scope>
                    <scope line="206"/>
                    <scope line="210"/>
                    <scope line="214"/>
                </scope>
                <scope line="220"/>
            </method>
            <method name="add" type="void" line="227">
                <params>
                    <param name="ge" type="GrantEntry"/>
                </params>
            </method>
            <method name="replace" type="void" line="232">
                <params>
                    <param name="origGe" type="GrantEntry"/>
                    <param name="newGe" type="GrantEntry"/>
                </params>
            </method>
            <method name="remove" type="boolean" line="237">
                <params>
                    <param name="ge" type="GrantEntry"/>
                </params>
            </method>
            <javadoc line="241">
                Returns the (possibly expanded) keystore location, or null if the
                  expansion fails.                
            </javadoc>
            <method name="getKeyStoreUrl" type="String" line="245">
                <scope line="246">
                    <scope line="247"/>
                </scope>
                <scope line="251">
                    <scope line="252"/>
                </scope>
            </method>
            <method name="setKeyStoreUrl" type="void" line="260">
                <params>
                    <param name="url" type="String"/>
                </params>
            </method>
            <method name="getKeyStoreType" type="String" line="264"/>
            <method name="setKeyStoreType" type="void" line="268">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <method name="getKeyStoreProvider" type="String" line="272"/>
            <method name="setKeyStoreProvider" type="void" line="276">
                <params>
                    <param name="provider" type="String"/>
                </params>
            </method>
            <method name="getStorePassURL" type="String" line="280">
                <scope line="281">
                    <scope line="282"/>
                </scope>
                <scope line="286">
                    <scope line="287"/>
                </scope>
            </method>
            <method name="setStorePassURL" type="void" line="295">
                <params>
                    <param name="storePassURL" type="String"/>
                </params>
            </method>
            <javadoc line="299">
                Enumerate all the entries in the global policy object.
                  This method is used by policy admin tools.   The tools
                  should use the Enumeration methods on the returned object
                  to fetch the elements sequentially.                
            </javadoc>
            <method name="grantElements" type="Enumeration<GrantEntry>" line="305"/>
            <javadoc line="309">
                write out the policy                
            </javadoc>
            <method name="write" type="void" line="314">
                <params>
                    <param name="policy" type="Writer"/>
                </params>
                <comment line="325">
                    write the (unexpanded) keystore entry as the first entry of the
                     policy file                    
                </comment>
                <comment line="334">
                    write &quot;grant&quot; entries                    
                </comment>
                <declaration name="out" type="PrintWriter" line="315"/>
                <declaration name="enum_" type="Enumeration&lt;GrantEntry&gt;" line="317"/>
                <scope line="326"/>
                <scope line="329"/>
                <scope line="334">
                    <declaration name="ge" type="GrantEntry" line="335"/>
                </scope>
            </method>
            <javadoc line="342">
                parses a keystore entry                
            </javadoc>
            <method name="parseKeyStoreEntry" type="void" line="345">
                <comment line="350">
                    parse keystore type                    
                </comment>
                <comment line="352">
                    default type                    
                </comment>
                <comment line="363">
                    parse keystore provider                    
                </comment>
                <comment line="365">
                    provider optional                    
                </comment>
                <scope line="350"/>
                <scope line="355"/>
                <scope line="357"/>
                <scope line="363"/>
                <scope line="368"/>
                <scope line="370"/>
            </method>
            <method name="parseStorePassURL" type="void" line="376"/>
            <javadoc line="381">
                writes the (unexpanded) keystore entry                
            </javadoc>
            <method name="writeKeyStoreEntry" type="void" line="384">
                <params>
                    <param name="out" type="PrintWriter"/>
                </params>
            </method>
            <method name="writeStorePassURL" type="void" line="396">
                <params>
                    <param name="out" type="PrintWriter"/>
                </params>
            </method>
            <javadoc line="404">
                parse a Grant entry                
            </javadoc>
            <method name="parseGrantEntry" type="GrantEntry" line="409">
                <comment line="435">
                    verify syntax of the aliases                    
                </comment>
                <comment line="463">
                    both the principalClass and principalName
                     will be replaced later                    
                </comment>
                <comment line="468">
                    check for principalClass wildcard                    
                </comment>
                <comment line="476">
                    check for principalName wildcard                    
                </comment>
                <comment line="484">
                    disallow WILDCARD_CLASS &amp;&amp; actual name                    
                </comment>
                <comment line="505">
                    4702543:  X500 names with an EmailAddress
                     were encoded incorrectly.  construct a new
                     X500Principal with correct encoding.                    
                </comment>
                <comment line="517">
                    ignore the entire policy entry
                     but continue parsing all the info
                     so we can get to the next entry                    
                </comment>
                <comment line="544">
                    ignore. The add never happened                    
                </comment>
                <comment line="548">
                    BugId 4219343                    
                </comment>
                <comment line="564">
                    For backward compatibility with 1.4                    
                </comment>
                <comment line="573">
                    expand the system property &quot;java.ext.dirs&quot;,
                     parse it into its path components,
                     and then create a grant entry for each component                    
                </comment>
                <declaration name="e" type="GrantEntry" line="410"/>
                <declaration name="principals" type="LinkedList&lt;PrincipalEntry&gt;" line="411"/>
                <declaration name="ignoreEntry" type="boolean" line="412"/>
                <scope line="416">
                    <scope line="418"/>
                    <scope line="426">
                        <declaration name="aliases" type="StringTokenizer" line="435"/>
                        <declaration name="actr" type="int" line="437"/>
                        <declaration name="cctr" type="int" line="438"/>
                        <scope line="439">
                            <declaration name="alias" type="String" line="440"/>
                        </scope>
                    </scope>
                    <scope line="453">
                        <scope line="454"/>
                        <declaration name="principalClass" type="String" line="458"/>
                        <declaration name="principalName" type="String" line="459"/>
                        <scope line="461"/>
                        <scope line="466">
                            <scope line="468"/>
                            <scope line="471"/>
                            <scope line="476"/>
                            <scope line="479"/>
                            <scope line="485">
                                <scope line="486"/>
                            </scope>
                        </scope>
                        <scope line="497">
                            <scope line="502">
                                <declaration name="p" type="X500Principal" line="508"/>
                            </scope>
                        </scope>
                        <scope line="515">
                            <scope line="519"/>
                        </scope>
                    </scope>
                    <scope line="527"/>
                </scope>
                <scope line="537">
                    <scope line="538">
                        <scope line="539">
                            <declaration name="pe" type="PermissionEntry" line="540"/>
                        </scope>
                        <scope line="542">
                            <scope line="544"/>
                        </scope>
                    </scope>
                    <scope line="550"/>
                </scope>
                <scope line="559">
                    <scope line="561">
                        <scope line="564"/>
                        <declaration name="es" type="int" line="567"/>
                        <scope line="568"/>
                        <scope line="571">
                            <declaration name="extDirs" type="String[]" line="575"/>
                            <scope line="576">
                                <scope line="577">
                                    <declaration name="newGe" type="GrantEntry" line="578"/>
                                    <scope line="582"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="592">
                    <scope line="593"/>
                </scope>
            </method>
            <javadoc line="602">
                parse a Permission entry                
            </javadoc>
            <method name="parsePermissionEntry" type="PermissionEntry" line="607">
                <comment line="611">
                    Permission                    
                </comment>
                <comment line="616">
                    Permission name                    
                </comment>
                <declaration name="e" type="PermissionEntry" line="608"/>
                <scope line="614"/>
                <scope line="619"/>
                <scope line="624">
                    <scope line="626"/>
                </scope>
                <scope line="632"/>
            </method>
            <method name="parseExtDirs" type="String[]" line="639">
                <params>
                    <param name="codebase" type="String"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="s" type="String" line="641"/>
                <declaration name="globalPrefix" type="String" line="642"/>
                <declaration name="end" type="int" line="643"/>
                <declaration name="globalSuffix" type="String" line="644"/>
                <declaration name="dirs" type="String[]" line="647"/>
                <declaration name="localSuffix" type="String" line="648"/>
                <scope line="649">
                    <declaration name="st" type="StringTokenizer" line="650"/>
                    <declaration name="count" type="int" line="652"/>
                    <scope line="654">
                        <declaration name="file" type="File" line="655"/>
                        <scope line="659"/>
                    </scope>
                </scope>
            </method>
            <method name="peekAndMatch" type="boolean" line="675">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <scope line="676"/>
                <scope line="679"/>
            </method>
            <method name="peek" type="boolean" line="684">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="found" type="boolean" line="685"/>
            </method>
            <method name="match" type="String" line="721">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="value" type="String" line="722"/>
                <declaration name="form" type="MessageFormat" line="730"/>
                <declaration name="source" type="Object[]" line="733"/>
                <scope line="736"/>
                <scope line="738"/>
                <scope line="741"/>
                <scope line="744"/>
                <scope line="750"/>
                <scope line="753"/>
                <scope line="756"/>
                <scope line="759"/>
            </method>
            <javadoc line="800">
                skip all tokens for this entry leaving the delimiter &quot;;&quot;
                  in the stream.                
            </javadoc>
            <method name="skipEntry" type="void" line="804">
                <scope line="805"/>
            </method>
            <class name="GrantEntry" line="820">
                <javadoc line="820">
                    Each grant entry in the policy configuration file is
                      represented by a
                      GrantEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      grant signedBy &quot;Duke&quot; {
                      permission java.io.FilePermission &quot;/tmp&quot;, &quot;read,write&quot;;
                      };
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new PermissionEntry(&quot;java.io.FilePermission&quot;,
                      &quot;/tmp&quot;, &quot;read,write&quot;);
                      ge = new GrantEntry(&quot;Duke&quot;, null);
                      ge.add(pe);
                      &lt;/pre&gt;                    
                    <author>
                        Roland Schemers
                          version 1.19, 05/21/98                        
                    </author>
                </javadoc>
                <declaration name="signedBy" type="String" line="852"/>
                <declaration name="codeBase" type="String" line="853"/>
                <declaration name="principals" type="LinkedList&lt;PrincipalEntry&gt;" line="854"/>
                <declaration name="permissionEntries" type="Vector&lt;PermissionEntry&gt;" line="855"/>
                <method name="GrantEntry" type="constructor" line="857"/>
                <method name="GrantEntry" type="constructor" line="862">
                    <params>
                        <param name="signedBy" type="String"/>
                        <param name="codeBase" type="String"/>
                    </params>
                </method>
                <method name="add" type="void" line="870">
                    <params>
                        <param name="pe" type="PermissionEntry"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="875">
                    <params>
                        <param name="pe" type="PrincipalEntry"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="880">
                    <params>
                        <param name="pe" type="PermissionEntry"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="885">
                    <params>
                        <param name="pe" type="PrincipalEntry"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="890">
                    <params>
                        <param name="pe" type="PermissionEntry"/>
                    </params>
                </method>
                <javadoc line="894">
                    Enumerate all the permission entries in this GrantEntry.                    
                </javadoc>
                <method name="permissionElements" type="Enumeration<PermissionEntry>" line="897"/>
                <method name="write" type="void" line="902">
                    <params>
                        <param name="out" type="PrintWriter"/>
                    </params>
                    <scope line="904"/>
                    <scope line="911"/>
                    <scope line="918">
                        <declaration name="pli" type="ListIterator&lt;PrincipalEntry&gt;" line="919"/>
                        <scope line="920">
                            <declaration name="pe" type="PrincipalEntry" line="922"/>
                        </scope>
                    </scope>
                    <declaration name="enum_" type="Enumeration&lt;PermissionEntry&gt;" line="929"/>
                    <scope line="930">
                        <declaration name="pe" type="PermissionEntry" line="931"/>
                    </scope>
                </method>
                <method name="clone" type="Object" line="938">
                    <declaration name="ge" type="GrantEntry" line="939"/>
                </method>
            </class>
            <class name="PrincipalEntry" line="949">
                <javadoc line="949">
                    Principal info (class and name) in a grant entry                    
                </javadoc>
                <declaration name="WILDCARD_CLASS" type="String" line="954"/>
                <declaration name="WILDCARD_NAME" type="String" line="955"/>
                <declaration name="principalClass" type="String" line="957"/>
                <declaration name="principalName" type="String" line="958"/>
                <javadoc line="960">
                    A PrincipalEntry consists of the &lt;code&gt;Principal&lt;/code&gt;
                      class and &lt;code&gt;Principal&lt;/code&gt; name.
                      &lt;p&gt;                    
                    <param>
                        principalClass the &lt;code&gt;Principal&lt;/code&gt; class. &lt;p&gt;                        
                    </param>
                    <param>
                        principalName the &lt;code&gt;Principal&lt;/code&gt; name. &lt;p&gt;                        
                    </param>
                </javadoc>
                <method name="PrincipalEntry" type="constructor" line="970">
                    <params>
                        <param name="principalClass" type="String"/>
                        <param name="principalName" type="String"/>
                    </params>
                </method>
                <method name="getPrincipalClass" type="String" line="978"/>
                <method name="getPrincipalName" type="String" line="982"/>
                <method name="getDisplayClass" type="String" line="986">
                    <scope line="987"/>
                    <scope line="989"/>
                </method>
                <method name="getDisplayName" type="String" line="995"/>
                <method name="getDisplayName" type="String" line="999">
                    <params>
                        <param name="addQuote" type="boolean"/>
                    </params>
                    <scope line="1000"/>
                    <scope line="1003"/>
                </method>
                <method name="toString" type="String" line="1009">
                    <scope line="1010"/>
                    <scope line="1012"/>
                </method>
                <javadoc line="1017">
                    Test for equality between the specified object and this object.
                      Two PrincipalEntries are equal if their PrincipalClass and
                      PrincipalName values are equal.
                      &lt;p&gt;                    
                    <param>
                        obj the object to test for equality with this object.                        
                    </param>
                    <return>
                        true if the objects are equal, false otherwise.                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="1028">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="PrincipalEntry" line="1035"/>
                    <scope line="1037"/>
                </method>
                <javadoc line="1044">
                    Return a hashcode for this &lt;code&gt;PrincipalEntry&lt;/code&gt;.
                      &lt;p&gt;                    
                    <return>
                        a hashcode for this &lt;code&gt;PrincipalEntry&lt;/code&gt;.                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="1051"/>
                <method name="write" type="void" line="1054">
                    <params>
                        <param name="out" type="PrintWriter"/>
                    </params>
                </method>
            </class>
            <class name="PermissionEntry" line="1060">
                <javadoc line="1060">
                    Each permission entry in the policy configuration file is
                      represented by a
                      PermissionEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      permission java.io.FilePermission &quot;/tmp&quot;, &quot;read,write&quot;;
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new PermissionEntry(&quot;java.io.FilePermission&quot;,
                      &quot;/tmp&quot;, &quot;read,write&quot;);
                      &lt;/pre&gt;                    
                    <author>
                        Roland Schemers
                          version 1.19, 05/21/98                        
                    </author>
                </javadoc>
                <declaration name="permission" type="String" line="1084"/>
                <declaration name="name" type="String" line="1085"/>
                <declaration name="action" type="String" line="1086"/>
                <declaration name="signedBy" type="String" line="1087"/>
                <method name="PermissionEntry" type="constructor" line="1089"/>
                <method name="PermissionEntry" type="constructor" line="1094">
                    <params>
                        <param name="permission" type="String"/>
                        <param name="name" type="String"/>
                        <param name="action" type="String"/>
                    </params>
                </method>
                <javadoc line="1100">
                    Calculates a hash code value for the object.  Objects
                      which are equal will also have the same hashcode.                    
                </javadoc>
                <method name="hashCode" type="int" line="1104">
                    <declaration name="retval" type="int" line="1105"/>
                </method>
                <method name="equals" type="boolean" line="1111">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <comment line="1145">
                        everything matched -- the 2 objects are equal                        
                    </comment>
                    <declaration name="that" type="PermissionEntry" line="1118"/>
                    <scope line="1120"/>
                    <scope line="1122"/>
                    <scope line="1126"/>
                    <scope line="1128"/>
                    <scope line="1132"/>
                    <scope line="1134"/>
                    <scope line="1138"/>
                    <scope line="1140"/>
                </method>
                <method name="write" type="void" line="1148">
                    <params>
                        <param name="out" type="PrintWriter"/>
                    </params>
                    <comment line="1155">
                        ATTENTION: regex with double escaping,
                         the normal forms look like:
                         $name =~ s/\\/\\\\/g; and
                         $name =~ s/\&quot;/\\\&quot;/g;
                         and then in a java string, it&apos;s escaped again                        
                    </comment>
                    <scope line="1151"/>
                    <scope line="1163"/>
                    <scope line="1168"/>
                </method>
            </class>
            <class name="ParsingException" line="1177">
                <extends class="GeneralSecurityException"/>
                <declaration name="serialVersionUID" type="long" line="1179"/>
                <declaration name="i18nMessage" type="String" line="1181"/>
                <javadoc line="1183">
                    Constructs a ParsingException with the specified
                      detail message. A detail message is a String that describes
                      this particular exception, which may, for example, specify which
                      algorithm is not available.                    
                    <param>
                        msg the detail message.                        
                    </param>
                </javadoc>
                <method name="ParsingException" type="constructor" line="1191">
                    <params>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="ParsingException" type="constructor" line="1196">
                    <params>
                        <param name="line" type="int"/>
                        <param name="msg" type="String"/>
                    </params>
                    <declaration name="form" type="MessageFormat" line="1198"/>
                    <declaration name="source" type="Object[]" line="1200"/>
                </method>
                <method name="ParsingException" type="constructor" line="1204">
                    <params>
                        <param name="line" type="int"/>
                        <param name="expect" type="String"/>
                        <param name="actual" type="String"/>
                    </params>
                    <declaration name="form" type="MessageFormat" line="1207"/>
                    <declaration name="source" type="Object[]" line="1209"/>
                </method>
                <method name="getLocalizedMessage" type="String" line="1213"/>
            </class>
            <method name="main" type="void" line="1218">
                <params>
                    <param name="arg" type="String"/>
                </params>
                <declaration name="fr" type="FileReader" line="1219"/>
                <declaration name="fw" type="FileWriter" line="1220"/>
                <scope line="1221">
                    <declaration name="pp" type="PolicyParser" line="1222"/>
                </scope>
                <scope line="1227">
                    <scope line="1228"/>
                    <scope line="1232"/>
                </scope>
            </method>
        </class>
    </source>