<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.lang.RuntimePermission"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.URL"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Vector"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.text.MessageFormat"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.PropertyExpander"/>
        <import package="sun.security.util.ResourcesMgr"/>
        <class name="PolicyParser" line="18">
            <javadoc line="18">
                The policy for a Java runtime (specifying
                  which permissions are available for code from various principals)
                  is represented as a separate
                  persistent configuration.  The configuration may be stored as a
                  flat ASCII file, as a serialized binary file of
                  the Policy class, or as a database. &lt;p&gt;
                  &lt;p&gt;The Java runtime creates one global Policy object, which is used to
                  represent the static policy configuration file.  It is consulted by
                  a ProtectionDomain when the protection domain initializes its set of
                  permissions. &lt;p&gt;
                  &lt;p&gt;The Policy &lt;code&gt;init&lt;/code&gt; method parses the policy
                  configuration file, and then
                  populates the Policy object.  The Policy object is agnostic in that
                  it is not involved in making policy decisions.  It is merely the
                  Java runtime representation of the persistent policy configuration
                  file. &lt;p&gt;
                  &lt;p&gt;When a protection domain needs to initialize its set of
                  permissions, it executes code such as the following
                  to ask the global Policy object to populate a
                  Permissions object with the appropriate permissions:
                  &lt;pre&gt;
                  policy = Policy.getPolicy();
                  Permissions perms = policy.getPermissions(protectiondomain)
                  &lt;/pre&gt;
                  &lt;p&gt;The protection domain contains CodeSource
                  object, which encapsulates its codebase (URL) and public key attributes.
                  It also contains the principals associated with the domain.
                  The Policy object evaluates the global policy in light of who the
                  principal is and what the code source is and returns an appropriate
                  Permissions object.                
                <author>
                    Roland Schemers                    
                </author>
                <author>
                    Ram Marti                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="REPLACE_NAME" type="String" line="54"/>
            <declaration name="EXTDIRS_PROPERTY" type="String" line="55"/>
            <declaration name="OLD_EXTDIRS_EXPANSION" type="String" line="56"/>
            <declaration name="EXTDIRS_EXPANSION" type="String" line="57"/>
            <declaration name="grantEntries" type="Vector&amp;lt;GrantEntry&amp;gt;" line="58"/>
            <declaration name="debug" type="Debug" line="59"/>
            <declaration name="st" type="StreamTokenizer" line="60"/>
            <declaration name="lookahead" type="int" line="61"/>
            <declaration name="expandProp" type="boolean" line="62"/>
            <declaration name="keyStoreUrlString" type="String" line="63"/>
            <declaration name="keyStoreType" type="String" line="64"/>
            <declaration name="keyStoreProvider" type="String" line="65"/>
            <declaration name="storePassURL" type="String" line="66"/>
            <method name="expand" type="String" line="67">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <method name="expand" type="String" line="70">
                <params>
                    <param name="value" type="String"/>
                    <param name="encodeURL" type="boolean"/>
                </params>
                <scope line="71"/>
                <scope line="74"/>
            </method>
            <javadoc line="78">
                Creates a PolicyParser object.                
            </javadoc>
            <method name="PolicyParser" type="constructor" line="81"/>
            <method name="PolicyParser" type="constructor" line="84">
                <params>
                    <param name="expandProp" type="boolean"/>
                </params>
            </method>
            <javadoc line="88">
                Reads a policy configuration into the Policy object using a
                  Reader object. &lt;p&gt;                
                <param>
                    policy the policy Reader object.                    
                </param>
                <exception>
                    ParsingException if the policy configuration contains
                      a syntax error.                    
                </exception>
                <exception>
                    IOException if an error occurs while reading the policy
                      configuration.                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="97">
                <params>
                    <param name="policy" type="Reader"/>
                </params>
                <scope line="98"/>
                <scope line="119">
                    <scope line="120">
                        <declaration name="ge" type="GrantEntry" line="121"/>
                    </scope>
                    <scope line="124"/>
                    <scope line="127"/>
                    <scope line="130"/>
                </scope>
                <scope line="134"/>
            </method>
            <method name="add" type="void" line="138">
                <params>
                    <param name="ge" type="GrantEntry"/>
                </params>
            </method>
            <method name="replace" type="void" line="141">
                <params>
                    <param name="origGe" type="GrantEntry"/>
                    <param name="newGe" type="GrantEntry"/>
                </params>
            </method>
            <method name="remove" type="boolean" line="144">
                <params>
                    <param name="ge" type="GrantEntry"/>
                </params>
            </method>
            <javadoc line="147">
                Returns the (possibly expanded) keystore location, or null if the
                  expansion fails.                
            </javadoc>
            <method name="getKeyStoreUrl" type="String" line="151">
                <scope line="152">
                    <scope line="153"/>
                </scope>
                <scope line="157">
                    <scope line="158"/>
                </scope>
            </method>
            <method name="setKeyStoreUrl" type="void" line="165">
                <params>
                    <param name="url" type="String"/>
                </params>
            </method>
            <method name="getKeyStoreType" type="String" line="168"/>
            <method name="setKeyStoreType" type="void" line="171">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <method name="getKeyStoreProvider" type="String" line="174"/>
            <method name="setKeyStoreProvider" type="void" line="177">
                <params>
                    <param name="provider" type="String"/>
                </params>
            </method>
            <method name="getStorePassURL" type="String" line="180">
                <scope line="181">
                    <scope line="182"/>
                </scope>
                <scope line="186">
                    <scope line="187"/>
                </scope>
            </method>
            <method name="setStorePassURL" type="void" line="194">
                <params>
                    <param name="storePassURL" type="String"/>
                </params>
            </method>
            <javadoc line="197">
                Enumerate all the entries in the global policy object.
                  This method is used by policy admin tools.   The tools
                  should use the Enumeration methods on the returned object
                  to fetch the elements sequentially.                
            </javadoc>
            <method name="grantElements" type="Enumeration&lt;GrantEntry&gt;" line="203"/>
            <javadoc line="206">
                write out the policy                
            </javadoc>
            <method name="write" type="void" line="209">
                <params>
                    <param name="policy" type="Writer"/>
                </params>
                <declaration name="out" type="PrintWriter" line="210"/>
                <declaration name="enum_" type="Enumeration&amp;lt;GrantEntry&amp;gt;" line="211"/>
                <scope line="215"/>
                <scope line="218"/>
                <scope line="221">
                    <declaration name="ge" type="GrantEntry" line="222"/>
                </scope>
            </method>
            <javadoc line="228">
                parses a keystore entry                
            </javadoc>
            <method name="parseKeyStoreEntry" type="void" line="231">
                <scope line="234"/>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="248"/>
                <scope line="251"/>
            </method>
            <method name="parseStorePassURL" type="void" line="255"/>
            <javadoc line="259">
                writes the (unexpanded) keystore entry                
            </javadoc>
            <method name="writeKeyStoreEntry" type="void" line="262">
                <params>
                    <param name="out" type="PrintWriter"/>
                </params>
            </method>
            <method name="writeStorePassURL" type="void" line="271">
                <params>
                    <param name="out" type="PrintWriter"/>
                </params>
            </method>
            <javadoc line="278">
                parse a Grant entry                
            </javadoc>
            <method name="parseGrantEntry" type="GrantEntry" line="281">
                <declaration name="e" type="GrantEntry" line="282"/>
                <declaration name="principals" type="LinkedList&amp;lt;PrincipalEntry&amp;gt;" line="283"/>
                <declaration name="ignoreEntry" type="boolean" line="284"/>
                <scope line="286">
                    <scope line="287"/>
                    <scope line="292">
                        <declaration name="aliases" type="StringTokenizer" line="295"/>
                        <declaration name="actr" type="int" line="296"/>
                        <declaration name="cctr" type="int" line="297"/>
                        <scope line="298">
                            <declaration name="alias" type="String" line="299"/>
                        </scope>
                    </scope>
                    <scope line="306">
                        <scope line="307"/>
                        <declaration name="principalClass" type="String" line="310"/>
                        <declaration name="principalName" type="String" line="311"/>
                        <scope line="312"/>
                        <scope line="316">
                            <scope line="317"/>
                            <scope line="321"/>
                            <scope line="324"/>
                            <scope line="328"/>
                            <scope line="331">
                                <scope line="332"/>
                            </scope>
                        </scope>
                        <scope line="338">
                            <scope line="340">
                                <declaration name="p" type="X500Principal" line="341"/>
                            </scope>
                        </scope>
                        <scope line="346">
                            <scope line="347"/>
                        </scope>
                    </scope>
                    <scope line="354"/>
                </scope>
                <scope line="360">
                    <scope line="361">
                        <scope line="362">
                            <declaration name="pe" type="PermissionEntry" line="363"/>
                        </scope>
                        <scope line="366">
                            <scope line="367"/>
                        </scope>
                    </scope>
                    <scope line="374"/>
                </scope>
                <scope line="379">
                    <scope line="381">
                        <scope line="382"/>
                        <declaration name="es" type="int" line="385"/>
                        <scope line="386"/>
                        <scope line="389">
                            <declaration name="extDirs" type="String[]" line="390"/>
                            <scope line="391">
                                <scope line="392">
                                    <declaration name="newGe" type="GrantEntry" line="393"/>
                                    <scope line="396"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="405">
                    <scope line="406"/>
                </scope>
            </method>
            <javadoc line="413">
                parse a Permission entry                
            </javadoc>
            <method name="parsePermissionEntry" type="PermissionEntry" line="416">
                <declaration name="e" type="PermissionEntry" line="417"/>
                <scope line="420"/>
                <scope line="423"/>
                <scope line="427">
                    <scope line="429"/>
                </scope>
                <scope line="434"/>
            </method>
            <method name="parseExtDirs" type="String[]" line="439">
                <params>
                    <param name="codebase" type="String"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="s" type="String" line="440"/>
                <declaration name="globalPrefix" type="String" line="441"/>
                <declaration name="end" type="int" line="442"/>
                <declaration name="globalSuffix" type="String" line="443"/>
                <declaration name="dirs" type="String[]" line="444"/>
                <declaration name="localSuffix" type="String" line="445"/>
                <scope line="446">
                    <declaration name="st" type="StringTokenizer" line="447"/>
                    <declaration name="count" type="int" line="448"/>
                    <scope line="450">
                        <declaration name="file" type="File" line="451"/>
                        <scope line="453"/>
                    </scope>
                </scope>
            </method>
            <method name="peekAndMatch" type="boolean" line="462">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <scope line="463"/>
                <scope line="467"/>
            </method>
            <method name="peek" type="boolean" line="471">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="found" type="boolean" line="472"/>
            </method>
            <method name="match" type="String" line="496">
                <params>
                    <param name="expect" type="String"/>
                </params>
                <declaration name="value" type="String" line="497"/>
                <declaration name="form" type="MessageFormat" line="502"/>
                <declaration name="source" type="Object[]" line="503"/>
                <scope line="506"/>
                <scope line="509"/>
                <scope line="513"/>
                <scope line="517"/>
                <scope line="522"/>
                <scope line="526"/>
                <scope line="530"/>
                <scope line="534"/>
            </method>
            <javadoc line="563">
                skip all tokens for this entry leaving the delimiter &quot;;&quot;
                  in the stream.                
            </javadoc>
            <method name="skipEntry" type="void" line="567">
                <scope line="568"/>
            </method>
            <class name="GrantEntry" line="579">
                <javadoc line="579">
                    Each grant entry in the policy configuration file is
                      represented by a
                      GrantEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      grant signedBy &quot;Duke&quot; {
                      permission java.io.FilePermission &quot;/tmp&quot;, &quot;read,write&quot;;
                      };
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new PermissionEntry(&quot;java.io.FilePermission&quot;,
                      &quot;/tmp&quot;, &quot;read,write&quot;);
                      ge = new GrantEntry(&quot;Duke&quot;, null);
                      ge.add(pe);
                      &lt;/pre&gt;                    
                    <author>
                        Roland Schemers
                          version 1.19, 05/21/98                        
                    </author>
                </javadoc>
                <declaration name="signedBy" type="String" line="601"/>
                <declaration name="codeBase" type="String" line="602"/>
                <declaration name="principals" type="LinkedList&amp;lt;PrincipalEntry&amp;gt;" line="603"/>
                <declaration name="permissionEntries" type="Vector&amp;lt;PermissionEntry&amp;gt;" line="604"/>
                <method name="GrantEntry" type="constructor" line="605"/>
                <method name="GrantEntry" type="constructor" line="609">
                    <params>
                        <param name="signedBy" type="String"/>
                        <param name="codeBase" type="String"/>
                    </params>
                </method>
                <method name="add" type="void" line="615">
                    <params>
                        <param name="pe" type="PermissionEntry"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="618">
                    <params>
                        <param name="pe" type="PrincipalEntry"/>
                    </params>
                </method>
                <method name="remove" type="boolean" line="621">
                    <params>
                        <param name="pe" type="PermissionEntry"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="624">
                    <params>
                        <param name="pe" type="PrincipalEntry"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="627">
                    <params>
                        <param name="pe" type="PermissionEntry"/>
                    </params>
                </method>
                <javadoc line="630">
                    Enumerate all the permission entries in this GrantEntry.                    
                </javadoc>
                <method name="permissionElements" type="Enumeration&lt;PermissionEntry&gt;" line="633"/>
                <method name="write" type="void" line="636">
                    <params>
                        <param name="out" type="PrintWriter"/>
                    </params>
                    <scope line="638"/>
                    <scope line="644"/>
                    <scope line="650">
                        <declaration name="pli" type="ListIterator&amp;lt;PrincipalEntry&amp;gt;" line="651"/>
                        <scope line="652">
                            <declaration name="pe" type="PrincipalEntry" line="654"/>
                        </scope>
                    </scope>
                    <declaration name="enum_" type="Enumeration&amp;lt;PermissionEntry&amp;gt;" line="660"/>
                    <scope line="661">
                        <declaration name="pe" type="PermissionEntry" line="662"/>
                    </scope>
                </method>
                <method name="clone" type="Object" line="668">
                    <declaration name="ge" type="GrantEntry" line="669"/>
                </method>
            </class>
            <class name="PrincipalEntry" line="677">
                <javadoc line="677">
                    Principal info (class and name) in a grant entry                    
                </javadoc>
                <declaration name="WILDCARD_CLASS" type="String" line="681"/>
                <declaration name="WILDCARD_NAME" type="String" line="682"/>
                <declaration name="principalClass" type="String" line="683"/>
                <declaration name="principalName" type="String" line="684"/>
                <javadoc line="685">
                    A PrincipalEntry consists of the &lt;code&gt;Principal&lt;/code&gt;
                      class and &lt;code&gt;Principal&lt;/code&gt; name.
                      &lt;p&gt;                    
                    <param>
                        principalClass the &lt;code&gt;Principal&lt;/code&gt; class. &lt;p&gt;                        
                    </param>
                    <param>
                        principalName the &lt;code&gt;Principal&lt;/code&gt; name. &lt;p&gt;                        
                    </param>
                </javadoc>
                <method name="PrincipalEntry" type="constructor" line="692">
                    <params>
                        <param name="principalClass" type="String"/>
                        <param name="principalName" type="String"/>
                    </params>
                </method>
                <method name="getPrincipalClass" type="String" line="697"/>
                <method name="getPrincipalName" type="String" line="700"/>
                <method name="getDisplayClass" type="String" line="703">
                    <scope line="704"/>
                    <scope line="707"/>
                </method>
                <method name="getDisplayName" type="String" line="712"/>
                <method name="getDisplayName" type="String" line="715">
                    <params>
                        <param name="addQuote" type="boolean"/>
                    </params>
                    <scope line="716"/>
                    <scope line="719"/>
                </method>
                <method name="toString" type="String" line="724">
                    <scope line="725"/>
                    <scope line="728"/>
                </method>
                <javadoc line="732">
                    Test for equality between the specified object and this object.
                      Two PrincipalEntries are equal if their PrincipalClass and
                      PrincipalName values are equal.
                      &lt;p&gt;                    
                    <param>
                        obj the object to test for equality with this object.                        
                    </param>
                    <return>
                        true if the objects are equal, false otherwise.                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="740">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="PrincipalEntry" line="743"/>
                    <scope line="744"/>
                </method>
                <javadoc line="749">
                    Return a hashcode for this &lt;code&gt;PrincipalEntry&lt;/code&gt;.
                      &lt;p&gt;                    
                    <return>
                        a hashcode for this &lt;code&gt;PrincipalEntry&lt;/code&gt;.                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="754"/>
                <method name="write" type="void" line="757">
                    <params>
                        <param name="out" type="PrintWriter"/>
                    </params>
                </method>
            </class>
            <class name="PermissionEntry" line="761">
                <javadoc line="761">
                    Each permission entry in the policy configuration file is
                      represented by a
                      PermissionEntry object.  &lt;p&gt;
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      permission java.io.FilePermission &quot;/tmp&quot;, &quot;read,write&quot;;
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      pe = new PermissionEntry(&quot;java.io.FilePermission&quot;,
                      &quot;/tmp&quot;, &quot;read,write&quot;);
                      &lt;/pre&gt;                    
                    <author>
                        Roland Schemers
                          version 1.19, 05/21/98                        
                    </author>
                </javadoc>
                <declaration name="permission" type="String" line="779"/>
                <declaration name="name" type="String" line="780"/>
                <declaration name="action" type="String" line="781"/>
                <declaration name="signedBy" type="String" line="782"/>
                <method name="PermissionEntry" type="constructor" line="783"/>
                <method name="PermissionEntry" type="constructor" line="785">
                    <params>
                        <param name="permission" type="String"/>
                        <param name="name" type="String"/>
                        <param name="action" type="String"/>
                    </params>
                </method>
                <javadoc line="790">
                    Calculates a hash code value for the object.  Objects
                      which are equal will also have the same hashcode.                    
                </javadoc>
                <method name="hashCode" type="int" line="794">
                    <declaration name="retval" type="int" line="795"/>
                </method>
                <method name="equals" type="boolean" line="800">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="PermissionEntry" line="803"/>
                    <scope line="804"/>
                    <scope line="807"/>
                    <scope line="810"/>
                    <scope line="813"/>
                    <scope line="816"/>
                    <scope line="819"/>
                    <scope line="822"/>
                    <scope line="825"/>
                </method>
                <method name="write" type="void" line="830">
                    <params>
                        <param name="out" type="PrintWriter"/>
                    </params>
                    <scope line="833"/>
                    <scope line="838"/>
                    <scope line="843"/>
                </method>
            </class>
            <class name="ParsingException" line="851">
                <extends class="GeneralSecurityException"/>
                <declaration name="serialVersionUID" type="long" line="852"/>
                <declaration name="i18nMessage" type="String" line="853"/>
                <javadoc line="854">
                    Constructs a ParsingException with the specified
                      detail message. A detail message is a String that describes
                      this particular exception, which may, for example, specify which
                      algorithm is not available.                    
                    <param>
                        msg the detail message.                        
                    </param>
                </javadoc>
                <method name="ParsingException" type="constructor" line="861">
                    <params>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="ParsingException" type="constructor" line="865">
                    <params>
                        <param name="line" type="int"/>
                        <param name="msg" type="String"/>
                    </params>
                    <declaration name="form" type="MessageFormat" line="867"/>
                    <declaration name="source" type="Object[]" line="868"/>
                </method>
                <method name="ParsingException" type="constructor" line="871">
                    <params>
                        <param name="line" type="int"/>
                        <param name="expect" type="String"/>
                        <param name="actual" type="String"/>
                    </params>
                    <declaration name="form" type="MessageFormat" line="873"/>
                    <declaration name="source" type="Object[]" line="874"/>
                </method>
                <method name="getLocalizedMessage" type="String" line="877"/>
            </class>
            <method name="main" type="void" line="881">
                <params>
                    <param name="arg" type="String"/>
                </params>
                <declaration name="fr" type="FileReader" line="882"/>
                <declaration name="fw" type="FileWriter" line="883"/>
                <scope line="884">
                    <declaration name="pp" type="PolicyParser" line="885"/>
                </scope>
                <scope line="891">
                    <scope line="892"/>
                    <scope line="895"/>
                </scope>
            </method>
        </class>
    </source>