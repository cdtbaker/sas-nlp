<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.CertStore"/>
        <import package="java.security.cert.CertStoreException"/>
        <import package="java.security.cert.PKIXBuilderParameters"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.X509CertSelector"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.x509.AccessDescription"/>
        <import package="sun.security.x509.AuthorityInfoAccessExtension"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.x509.PolicyMappingsExtension"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.X509CRLImpl"/>
        <import package="sun.security.x509.AuthorityKeyIdentifierExtension"/>
        <import package="sun.security.x509.KeyIdentifier"/>
        <import package="sun.security.x509.SubjectKeyIdentifierExtension"/>
        <import package="sun.security.x509.SerialNumber"/>
        <import package="sun.security.x509.GeneralNames"/>
        <import package="sun.security.x509.GeneralName"/>
        <import package="sun.security.x509.GeneralNameInterface"/>
        <import package="java.math.BigInteger"/>
        <class name="ForwardBuilder" line="35">
            <extends class="Builder"/>
            <javadoc line="35">
                This class represents a forward builder, which is able to retrieve
                  matching certificates from CertStores and verify a particular certificate
                  against a ForwardState.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="44"/>
            <declaration name="trustedCerts" type="Set&lt;X509Certificate&gt;" line="45"/>
            <declaration name="trustedSubjectDNs" type="Set&lt;X500Principal&gt;" line="46"/>
            <declaration name="trustAnchors" type="Set&lt;TrustAnchor&gt;" line="47"/>
            <declaration name="eeSelector" type="X509CertSelector" line="48"/>
            <declaration name="caSelector" type="AdaptableX509CertSelector" line="49"/>
            <declaration name="caTargetSelector" type="X509CertSelector" line="50"/>
            <declaration name="trustAnchor" type="TrustAnchor" line="51"/>
            <declaration name="comparator" type="Comparator&lt;X509Certificate&gt;" line="52"/>
            <declaration name="searchAllCertStores" type="boolean" line="53"/>
            <declaration name="onlyEECert" type="boolean" line="54"/>
            <javadoc line="55">
                Initialize the builder with the input parameters.                
                <param>
                    params the parameter set used to build a certification path                    
                </param>
            </javadoc>
            <method name="ForwardBuilder" type="constructor" line="59">
                <params>
                    <param name="buildParams" type="PKIXBuilderParameters"/>
                    <param name="targetSubjectDN" type="X500Principal"/>
                    <param name="searchAllCertStores" type="boolean"/>
                    <param name="onlyEECert" type="boolean"/>
                </params>
                <scope line="64">
                    <declaration name="trustedCert" type="X509Certificate" line="65"/>
                    <scope line="66"/>
                    <scope line="70"/>
                </scope>
            </method>
            <javadoc line="78">
                Retrieves all certs from the specified CertStores that satisfy the
                  requirements specified in the parameters and the current
                  PKIX state (name constraints, policy constraints, etc).                
                <param>
                    currentState the current state.
                      Must be an instance of <code>ForwardState</code>                    
                </param>
                <param>
                    certStores list of CertStores                    
                </param>
            </javadoc>
            <method name="getMatchingCerts" type="Collection<X509Certificate>" line="86">
                <params>
                    <param name="currentState" type="State"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <scope line="87"/>
                <declaration name="currState" type="ForwardState" line="90"/>
                <declaration name="certs" type="Set&lt;X509Certificate&gt;" line="91"/>
                <scope line="92"/>
            </method>
            <method name="getMatchingEECerts" type="void" line="98">
                <params>
                    <param name="currentState" type="ForwardState"/>
                    <param name="certStores" type="List<CertStore>"/>
                    <param name="eeCerts" type="Collection<X509Certificate>"/>
                </params>
                <scope line="99"/>
                <scope line="102">
                    <scope line="105"/>
                </scope>
            </method>
            <javadoc line="112">
                Retrieves all CA certificates which satisfy constraints
                  and requirements specified in the parameters and PKIX state.                
            </javadoc>
            <method name="getMatchingCACerts" type="void" line="116">
                <params>
                    <param name="currentState" type="ForwardState"/>
                    <param name="certStores" type="List<CertStore>"/>
                    <param name="caCerts" type="Collection<X509Certificate>"/>
                </params>
                <scope line="117"/>
                <declaration name="initialSize" type="int" line="120"/>
                <declaration name="sel" type="X509CertSelector" line="121"/>
                <scope line="122">
                    <scope line="123"/>
                    <scope line="126"/>
                    <scope line="129"/>
                </scope>
                <scope line="135">
                    <scope line="136"/>
                    <declaration name="akidext" type="AuthorityKeyIdentifierExtension" line="142"/>
                </scope>
                <scope line="148">
                    <scope line="149">
                        <scope line="150"/>
                        <scope line="153"/>
                    </scope>
                </scope>
                <scope line="160">
                    <scope line="161"/>
                </scope>
                <scope line="165">
                    <declaration name="aiaExt" type="AuthorityInfoAccessExtension" line="166"/>
                    <scope line="167"/>
                </scope>
                <scope line="171">
                    <declaration name="numCerts" type="int" line="172"/>
                </scope>
            </method>
            <javadoc line="176">
                Download Certificates from the given AIA and add them to the
                  specified Collection.                
            </javadoc>
            <method name="getCerts" type="boolean" line="180">
                <params>
                    <param name="aiaExt" type="AuthorityInfoAccessExtension"/>
                    <param name="certs" type="Collection<X509Certificate>"/>
                </params>
                <scope line="181"/>
                <declaration name="adList" type="List&lt;AccessDescription&gt;" line="184"/>
                <scope line="185"/>
                <declaration name="add" type="boolean" line="188"/>
                <scope line="189">
                    <declaration name="cs" type="CertStore" line="190"/>
                    <scope line="191">
                        <scope line="192">
                            <scope line="194"/>
                        </scope>
                    </scope>
                    <scope line="199">
                        <scope line="200"/>
                    </scope>
                </scope>
            </method>
            <class name="PKIXCertComparator" line="209">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="X509Certificate"/>
                    </type_params>
                </implements>
                <javadoc line="209">
                    This inner class compares 2 PKIX certificates according to which
                      should be tried first when building a path from the target.
                      The preference order is as follows:
                      Given trusted certificate(s):
                      Subject:ou=D,ou=C,o=B,c=A
                      Preference order for current cert:
                      1) Issuer matches a trusted subject
                      Issuer: ou=D,ou=C,o=B,c=A
                      2) Issuer is a descendant of a trusted subject (in order of
                      number of links to the trusted subject)
                      a) Issuer: ou=E,ou=D,ou=C,o=B,c=A        [links=1]
                      b) Issuer: ou=F,ou=E,ou=D,ou=C,ou=B,c=A  [links=2]
                      3) Issuer is an ancestor of a trusted subject (in order of number of
                      links to the trusted subject)
                      a) Issuer: ou=C,o=B,c=A [links=1]
                      b) Issuer: o=B,c=A      [links=2]
                      4) Issuer is in the same namespace as a trusted subject (in order of
                      number of links to the trusted subject)
                      a) Issuer: ou=G,ou=C,o=B,c=A  [links=2]
                      b) Issuer: ou=H,o=B,c=A       [links=3]
                      5) Issuer is an ancestor of certificate subject (in order of number
                      of links to the certificate subject)
                      a) Issuer:  ou=K,o=J,c=A
                      Subject: ou=L,ou=K,o=J,c=A
                      b) Issuer:  o=J,c=A
                      Subject: ou=L,ou=K,0=J,c=A
                      6) Any other certificates                    
                </javadoc>
                <declaration name="METHOD_NME" type="String" line="239"/>
                <declaration name="trustedSubjectDNs" type="Set&lt;X500Principal&gt;" line="240"/>
                <method name="PKIXCertComparator" type="constructor" line="241">
                    <params>
                        <param name="trustedSubjectDNs" type="Set<X500Principal>"/>
                    </params>
                </method>
                <javadoc line="244">
                    @param oCert1 First X509Certificate to be compared                    
                    <param>
                        oCert2 Second X509Certificate to be compared                        
                    </param>
                    <return>
                        -1 if oCert1 is preferable to oCert2, or
                          if oCert1 and oCert2 are equally preferable (in this
                          case it doesn't matter which is preferable, but we don't
                          return 0 because the comparator would behave strangely
                          when used in a SortedSet).
                          1 if oCert2 is preferable to oCert1
                          0 if oCert1.equals(oCert2). We only return 0 if the
                          certs are equal so that this comparator behaves
                          correctly when used in a SortedSet.                        
                    </return>
                    <throws>
                        ClassCastException if either argument is not of type
                          X509Certificate                        
                    </throws>
                </javadoc>
                <method name="compare" type="int" line="259">
                    <params>
                        <param name="oCert1" type="X509Certificate"/>
                        <param name="oCert2" type="X509Certificate"/>
                    </params>
                    <declaration name="cIssuer1" type="X500Principal" line="261"/>
                    <declaration name="cIssuer2" type="X500Principal" line="262"/>
                    <declaration name="cIssuer1Name" type="X500Name" line="263"/>
                    <declaration name="cIssuer2Name" type="X500Name" line="264"/>
                    <scope line="265"/>
                    <scope line="269"/>
                    <declaration name="m1" type="boolean" line="272"/>
                    <declaration name="m2" type="boolean" line="273"/>
                    <scope line="274"/>
                    <scope line="278"/>
                    <scope line="281"/>
                    <scope line="284"/>
                    <scope line="287"/>
                    <scope line="290">
                        <declaration name="tSubjectName" type="X500Name" line="291"/>
                        <declaration name="distanceTto1" type="int" line="292"/>
                        <declaration name="distanceTto2" type="int" line="293"/>
                        <scope line="294"/>
                        <scope line="298">
                            <scope line="299"/>
                            <scope line="302"/>
                            <scope line="305"/>
                            <scope line="308"/>
                            <scope line="311"/>
                        </scope>
                    </scope>
                    <scope line="316"/>
                    <scope line="319">
                        <declaration name="tSubjectName" type="X500Name" line="320"/>
                        <declaration name="distanceTto1" type="int" line="321"/>
                        <declaration name="distanceTto2" type="int" line="322"/>
                        <scope line="323"/>
                        <scope line="327">
                            <scope line="328"/>
                            <scope line="331"/>
                            <scope line="334"/>
                            <scope line="337"/>
                            <scope line="340"/>
                        </scope>
                    </scope>
                    <scope line="345"/>
                    <scope line="348">
                        <declaration name="tSubjectName" type="X500Name" line="349"/>
                        <declaration name="tAo1" type="X500Name" line="350"/>
                        <declaration name="tAo2" type="X500Name" line="351"/>
                        <scope line="352"/>
                        <scope line="356">
                            <scope line="357">
                                <declaration name="hopsTto1" type="int" line="358"/>
                                <declaration name="hopsTto2" type="int" line="359"/>
                                <scope line="360"/>
                                <scope line="364"/>
                                <scope line="366"/>
                                <scope line="369"/>
                            </scope>
                            <scope line="373"/>
                            <scope line="376"/>
                        </scope>
                    </scope>
                    <scope line="381"/>
                    <declaration name="cSubject1" type="X500Principal" line="384"/>
                    <declaration name="cSubject2" type="X500Principal" line="385"/>
                    <declaration name="cSubject1Name" type="X500Name" line="386"/>
                    <declaration name="cSubject2Name" type="X500Name" line="387"/>
                    <scope line="388"/>
                    <declaration name="distanceStoI1" type="int" line="392"/>
                    <declaration name="distanceStoI2" type="int" line="393"/>
                    <scope line="394"/>
                    <scope line="398"/>
                    <scope line="401"/>
                    <scope line="404"/>
                </method>
            </class>
            <javadoc line="410">
                Verifies a matching certificate.
                  This method executes the validation steps in the PKIX path
                  validation algorithm &lt;draft-ietf-pkix-new-part1-08.txt&gt; which were
                  not satisfied by the selection criteria used by getCertificates()
                  to find the certs and only the steps that can be executed in a
                  forward direction (target to trust anchor). Those steps that can
                  only be executed in a reverse direction are deferred until the
                  complete path has been built.
                  Trust anchor certs are not validated, but are used to verify the
                  signature and revocation status of the previous cert.
                  If the last certificate is being verified (the one whose subject
                  matches the target subject, then steps in 6.1.4 of the PKIX
                  Certification Path Validation algorithm are NOT executed,
                  regardless of whether or not the last cert is an end-entity
                  cert or not. This allows callers to certify CA certs as
                  well as EE certs.                
                <param>
                    cert the certificate to be verified                    
                </param>
                <param>
                    currentState the current state against which the cert is verified                    
                </param>
                <param>
                    certPathList the certPathList generated thus far                    
                </param>
            </javadoc>
            <method name="verifyCert" type="void" line="431">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="currentState" type="State"/>
                    <param name="certPathList" type="List<X509Certificate>"/>
                </params>
                <scope line="432"/>
                <declaration name="currState" type="ForwardState" line="435"/>
                <scope line="436">
                    <declaration name="policyMappingFound" type="boolean" line="437"/>
                    <scope line="438">
                        <declaration name="cpListCertImpl" type="X509CertImpl" line="439"/>
                        <declaration name="policyMappingsExt" type="PolicyMappingsExtension" line="440"/>
                        <scope line="441"/>
                        <scope line="444"/>
                        <scope line="447">
                            <scope line="448">
                                <scope line="449"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="isTrustedCert" type="boolean" line="457"/>
                <scope line="458">
                    <declaration name="unresCritExts" type="Set&lt;String&gt;" line="459"/>
                    <scope line="460"/>
                    <scope line="463"/>
                    <scope line="466">
                        <scope line="467">
                            <declaration name="supportedExts" type="Set&lt;String&gt;" line="468"/>
                            <scope line="469"/>
                        </scope>
                    </scope>
                    <scope line="474"/>
                </scope>
                <scope line="487"/>
                <scope line="490">
                    <scope line="491"/>
                </scope>
                <scope line="496">
                    <scope line="497"/>
                </scope>
                <scope line="501"/>
            </method>
            <javadoc line="505">
                Verifies whether the input certificate completes the path.
                  Checks the cert against each trust anchor that was specified, in order,
                  and returns true as soon as it finds a valid anchor.
                  Returns true if the cert matches a trust anchor specified as a
                  certificate or if the cert verifies with a trust anchor that
                  was specified as a trusted {pubkey, caname} pair. Returns false if none
                  of the trust anchors are valid for this cert.                
                <param>
                    cert the certificate to test                    
                </param>
                <return>
                    a boolean value indicating whether the cert completes the path.                    
                </return>
            </javadoc>
            <method name="isPathCompleted" type="boolean" line="516">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="517">
                    <scope line="518">
                        <scope line="519"/>
                        <scope line="523"/>
                    </scope>
                    <scope line="527">
                        <declaration name="principal" type="X500Principal" line="528"/>
                        <declaration name="publicKey" type="java.security.PublicKey" line="529"/>
                        <scope line="530">
                            <scope line="531"/>
                        </scope>
                        <scope line="536"/>
                    </scope>
                    <scope line="540">
                        <scope line="541">
                            <declaration name="crlChecker" type="CrlRevocationChecker" line="542"/>
                        </scope>
                        <scope line="545">
                            <scope line="546"/>
                        </scope>
                    </scope>
                    <scope line="553"/>
                    <scope line="556">
                        <scope line="557"/>
                    </scope>
                    <scope line="562">
                        <scope line="563"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="574">
                Adds the certificate to the certPathList                
                <param>
                    cert the certificate to be added                    
                </param>
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="addCertToPath" type="void" line="579">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
            <javadoc line="582">
                Removes final certificate from the certPathList                
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="removeFinalCertFromPath" type="void" line="586">
                <params>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
        </class>
    </source>