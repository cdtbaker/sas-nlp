<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.CertStore"/>
        <import package="java.security.cert.CertStoreException"/>
        <import package="java.security.cert.PKIXBuilderParameters"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.X509CertSelector"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.x509.AccessDescription"/>
        <import package="sun.security.x509.AuthorityInfoAccessExtension"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.x509.PolicyMappingsExtension"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.X509CRLImpl"/>
        <import package="sun.security.x509.AuthorityKeyIdentifierExtension"/>
        <import package="sun.security.x509.KeyIdentifier"/>
        <import package="sun.security.x509.SubjectKeyIdentifierExtension"/>
        <import package="sun.security.x509.SerialNumber"/>
        <import package="sun.security.x509.GeneralNames"/>
        <import package="sun.security.x509.GeneralName"/>
        <import package="sun.security.x509.GeneralNameInterface"/>
        <import package="java.math.BigInteger"/>
        <class name="ForwardBuilder" line="64">
            <extends class="Builder"/>
            <comment line="154">
                Retrieves all end-entity certificates which satisfy constraints
                 and requirements specified in the parameters and PKIX state.                
            </comment>
            <javadoc line="64">
                This class represents a forward builder, which is able to retrieve
                  matching certificates from CertStores and verify a particular certificate
                  against a ForwardState.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="75"/>
            <declaration name="trustedCerts" type="Set&lt;X509Certificate&gt;" line="76"/>
            <declaration name="trustedSubjectDNs" type="Set&lt;X500Principal&gt;" line="77"/>
            <declaration name="trustAnchors" type="Set&lt;TrustAnchor&gt;" line="78"/>
            <declaration name="eeSelector" type="X509CertSelector" line="79"/>
            <declaration name="caSelector" type="AdaptableX509CertSelector" line="80"/>
            <declaration name="caTargetSelector" type="X509CertSelector" line="81"/>
            <declaration name="trustAnchor" type="TrustAnchor" line="82"/>
            <declaration name="comparator" type="Comparator&lt;X509Certificate&gt;" line="83"/>
            <declaration name="searchAllCertStores" type="boolean" line="84"/>
            <declaration name="onlyEECert" type="boolean" line="85"/>
            <javadoc line="87">
                Initialize the builder with the input parameters.                
                <param>
                    params the parameter set used to build a certification path                    
                </param>
            </javadoc>
            <method name="ForwardBuilder" type="constructor" line="95">
                <params>
                    <param name="buildParams" type="PKIXBuilderParameters"/>
                    <param name="targetSubjectDN" type="X500Principal"/>
                    <param name="searchAllCertStores" type="boolean"/>
                    <param name="onlyEECert" type="boolean"/>
                </params>
                <comment line="99">
                    populate sets of trusted certificates and subject DNs                    
                </comment>
                <scope line="102">
                    <declaration name="trustedCert" type="X509Certificate" line="103"/>
                    <scope line="104"/>
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="116">
                Retrieves all certs from the specified CertStores that satisfy the
                  requirements specified in the parameters and the current
                  PKIX state (name constraints, policy constraints, etc).                
                <param>
                    currentState the current state.
                      Must be an instance of <code>ForwardState</code>                    
                </param>
                <param>
                    certStores list of CertStores                    
                </param>
            </javadoc>
            <method name="getMatchingCerts" type="Collection<X509Certificate>" line="128">
                <params>
                    <param name="currentState" type="State"/>
                    <param name="certStores" type="List<CertStore>"/>
                </params>
                <comment line="136">
                    We store certs in a Set because we don&apos;t want duplicates.
                     As each cert is added, it is sorted based on the PKIXCertComparator
                     algorithm.                    
                </comment>
                <comment line="143">
                    Only look for EE certs if search has just started.                    
                </comment>
                <scope line="129"/>
                <declaration name="currState" type="ForwardState" line="133"/>
                <declaration name="certs" type="Set&lt;X509Certificate&gt;" line="140"/>
                <scope line="145"/>
            </method>
            <method name="getMatchingEECerts" type="void" line="159">
                <params>
                    <param name="currentState" type="ForwardState"/>
                    <param name="certStores" type="List<CertStore>"/>
                    <param name="eeCerts" type="Collection<X509Certificate>"/>
                </params>
                <comment line="165">
                    Compose a certificate matching rule to filter out
                     certs which don&apos;t satisfy constraints
                    
                     First, retrieve clone of current target cert constraints,
                     and then add more selection criteria based on current validation
                     state. Since selector never changes, cache local copy &amp; reuse.                    
                </comment>
                <comment line="176">
                    Match on certificate validity date                    
                </comment>
                <comment line="181">
                    Policy processing optimizations                    
                </comment>
                <comment line="187">
                    Require EE certs                    
                </comment>
                <comment line="193">
                                        
                </comment>
                <scope line="161"/>
                <scope line="172">
                    <scope line="183"/>
                </scope>
            </method>
            <javadoc line="196">
                Retrieves all CA certificates which satisfy constraints
                  and requirements specified in the parameters and PKIX state.                
            </javadoc>
            <method name="getMatchingCACerts" type="void" line="202">
                <params>
                    <param name="currentState" type="ForwardState"/>
                    <param name="certStores" type="List<CertStore>"/>
                    <param name="caCerts" type="Collection<X509Certificate>"/>
                </params>
                <comment line="210">
                    Compose a CertSelector to filter out
                     certs which do not satisfy requirements.                    
                </comment>
                <comment line="218">
                    no need to continue: this means we never can match a CA cert                    
                </comment>
                <comment line="222">
                    This means a CA is the target, so match on same stuff as
                     getMatchingEECerts                    
                </comment>
                <comment line="233">
                    Since we don&apos;t check the validity period of trusted
                     certificates, please don&apos;t set the certificate valid
                     criterion unless the trusted certificate matching is
                     completed.                    
                </comment>
                <comment line="240">
                    Policy processing optimizations                    
                </comment>
                <comment line="253">
                    Since we don&apos;t check the validity period of trusted
                     certificates, please don&apos;t set the certificate valid
                     criterion unless the trusted certificate matching is
                     completed.                    
                </comment>
                <comment line="260">
                    Policy processing optimizations                    
                </comment>
                <comment line="267">
                    Match on subject (issuer of previous cert)                    
                </comment>
                <comment line="272">
                    Match on subjectNamesTraversed (both DNs and AltNames)
                     (checks that current cert&apos;s name constraints permit it
                     to certify all the DNs and AltNames that have been traversed)                    
                </comment>
                <comment line="280">
                    Facilitate certification path construction with authority
                     key identifier and subject key identifier.                    
                </comment>
                <comment line="288">
                    check the validity period                    
                </comment>
                <comment line="297">
                    For compatibility, conservatively, we don&apos;t check the path
                     length constraint of trusted anchors.  Please don&apos;t set the
                     basic constraints criterion unless the trusted certificate
                     matching is completed.                    
                </comment>
                <comment line="317">
                    The trusted certificate matching is completed. We need to match
                     on certificate validity date.                    
                </comment>
                <comment line="323">
                    Require CA certs with a pathLenConstraint that allows
                     at least as many CA certs that have already been traversed                    
                </comment>
                <comment line="329">
                    If we have already traversed as many CA certs as the maxPathLength
                     will allow us to, then we don&apos;t bother looking through these
                     certificate pairs. If maxPathLength has a value of -1, this
                     means it is unconstrained, so we always look through the
                     certificate pairs.                    
                </comment>
                <comment line="347">
                    check for AuthorityInformationAccess extension                    
                </comment>
                <scope line="204"/>
                <declaration name="initialSize" type="int" line="207"/>
                <declaration name="sel" type="X509CertSelector" line="213"/>
                <scope line="215">
                    <scope line="216"/>
                    <scope line="224"/>
                    <scope line="228"/>
                </scope>
                <scope line="247">
                    <scope line="249"/>
                    <declaration name="akidext" type="AuthorityKeyIdentifierExtension" line="283"/>
                </scope>
                <scope line="304">
                    <scope line="305">
                        <scope line="306"/>
                        <scope line="310"/>
                    </scope>
                </scope>
                <scope line="338">
                    <scope line="340"/>
                </scope>
                <scope line="345">
                    <declaration name="aiaExt" type="AuthorityInfoAccessExtension" line="347"/>
                    <scope line="349"/>
                </scope>
                <scope line="354">
                    <declaration name="numCerts" type="int" line="355"/>
                </scope>
            </method>
            <javadoc line="361">
                Download Certificates from the given AIA and add them to the
                  specified Collection.                
            </javadoc>
            <method name="getCerts" type="boolean" line="366">
                <params>
                    <param name="aiaExt" type="AuthorityInfoAccessExtension"/>
                    <param name="certs" type="Collection<X509Certificate>"/>
                </params>
                <scope line="367"/>
                <declaration name="adList" type="List&lt;AccessDescription&gt;" line="370"/>
                <scope line="371"/>
                <declaration name="add" type="boolean" line="375"/>
                <scope line="376">
                    <declaration name="cs" type="CertStore" line="377"/>
                    <scope line="378">
                        <scope line="380">
                            <scope line="382"/>
                        </scope>
                    </scope>
                    <scope line="386">
                        <scope line="387"/>
                    </scope>
                </scope>
            </method>
            <class name="PKIXCertComparator" line="397">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="X509Certificate"/>
                    </type_params>
                </implements>
                <javadoc line="397">
                    This inner class compares 2 PKIX certificates according to which
                      should be tried first when building a path from the target.
                      The preference order is as follows:
                      Given trusted certificate(s):
                      Subject:ou=D,ou=C,o=B,c=A
                      Preference order for current cert:
                      1) Issuer matches a trusted subject
                      Issuer: ou=D,ou=C,o=B,c=A
                      2) Issuer is a descendant of a trusted subject (in order of
                      number of links to the trusted subject)
                      a) Issuer: ou=E,ou=D,ou=C,o=B,c=A        [links=1]
                      b) Issuer: ou=F,ou=E,ou=D,ou=C,ou=B,c=A  [links=2]
                      3) Issuer is an ancestor of a trusted subject (in order of number of
                      links to the trusted subject)
                      a) Issuer: ou=C,o=B,c=A [links=1]
                      b) Issuer: o=B,c=A      [links=2]
                      4) Issuer is in the same namespace as a trusted subject (in order of
                      number of links to the trusted subject)
                      a) Issuer: ou=G,ou=C,o=B,c=A  [links=2]
                      b) Issuer: ou=H,o=B,c=A       [links=3]
                      5) Issuer is an ancestor of certificate subject (in order of number
                      of links to the certificate subject)
                      a) Issuer:  ou=K,o=J,c=A
                      Subject: ou=L,ou=K,o=J,c=A
                      b) Issuer:  o=J,c=A
                      Subject: ou=L,ou=K,0=J,c=A
                      6) Any other certificates                    
                </javadoc>
                <declaration name="METHOD_NME" type="String" line="436"/>
                <declaration name="trustedSubjectDNs" type="Set&lt;X500Principal&gt;" line="438"/>
                <method name="PKIXCertComparator" type="constructor" line="440">
                    <params>
                        <param name="trustedSubjectDNs" type="Set<X500Principal>"/>
                    </params>
                </method>
                <javadoc line="444">
                    @param oCert1 First X509Certificate to be compared                    
                    <param>
                        oCert2 Second X509Certificate to be compared                        
                    </param>
                    <return>
                        -1 if oCert1 is preferable to oCert2, or
                          if oCert1 and oCert2 are equally preferable (in this
                          case it doesn't matter which is preferable, but we don't
                          return 0 because the comparator would behave strangely
                          when used in a SortedSet).
                          1 if oCert2 is preferable to oCert1
                          0 if oCert1.equals(oCert2). We only return 0 if the
                          certs are equal so that this comparator behaves
                          correctly when used in a SortedSet.                        
                    </return>
                    <throws>
                        ClassCastException if either argument is not of type
                          X509Certificate                        
                    </throws>
                </javadoc>
                <method name="compare" type="int" line="459">
                    <params>
                        <param name="oCert1" type="X509Certificate"/>
                        <param name="oCert2" type="X509Certificate"/>
                    </params>
                    <comment line="462">
                        if certs are the same, return 0                        
                    </comment>
                    <comment line="475">
                        If one cert&apos;s issuer matches a trusted subject, then it is
                         preferable.                        
                    </comment>
                    <comment line="496">
                        If one cert&apos;s issuer is a naming descendant of a trusted subject,
                         then it is preferable, in order of increasing naming distance.                        
                    </comment>
                    <comment line="521">
                        distanceTto1 &gt; distanceTto2                        
                    </comment>
                    <comment line="527">
                        If one cert&apos;s issuer is a naming ancestor of a trusted subject,
                         then it is preferable, in order of increasing naming distance.                        
                    </comment>
                    <comment line="559">
                        If one cert&apos;s issuer is in the same namespace as a trusted
                         subject, then it is preferable, in order of increasing naming
                         distance.                        
                    </comment>
                    <comment line="587">
                        hopsTto1 &lt; hopsTto2                        
                    </comment>
                    <comment line="599">
                        If one cert&apos;s issuer is an ancestor of that cert&apos;s subject,
                         then it is preferable, in order of increasing naming distance.                        
                    </comment>
                    <comment line="628">
                        Otherwise, certs are equally preferable.                        
                    </comment>
                    <declaration name="cIssuer1" type="X500Principal" line="464"/>
                    <declaration name="cIssuer2" type="X500Principal" line="465"/>
                    <declaration name="cIssuer1Name" type="X500Name" line="466"/>
                    <declaration name="cIssuer2Name" type="X500Name" line="467"/>
                    <scope line="469"/>
                    <scope line="477"/>
                    <declaration name="m1" type="boolean" line="481"/>
                    <declaration name="m2" type="boolean" line="482"/>
                    <scope line="483"/>
                    <scope line="487"/>
                    <scope line="489"/>
                    <scope line="491"/>
                    <scope line="498"/>
                    <scope line="501">
                        <declaration name="tSubjectName" type="X500Name" line="502"/>
                        <declaration name="distanceTto1" type="int" line="503"/>
                        <declaration name="distanceTto2" type="int" line="505"/>
                        <scope line="507"/>
                        <scope line="511">
                            <scope line="512"/>
                            <scope line="514"/>
                            <scope line="516"/>
                            <scope line="518"/>
                            <scope line="520"/>
                        </scope>
                    </scope>
                    <scope line="529"/>
                    <scope line="532">
                        <declaration name="tSubjectName" type="X500Name" line="533"/>
                        <declaration name="distanceTto1" type="int" line="535"/>
                        <declaration name="distanceTto2" type="int" line="537"/>
                        <scope line="539"/>
                        <scope line="543">
                            <scope line="544"/>
                            <scope line="546"/>
                            <scope line="548"/>
                            <scope line="550"/>
                            <scope line="552"/>
                        </scope>
                    </scope>
                    <scope line="562"/>
                    <scope line="565">
                        <declaration name="tSubjectName" type="X500Name" line="566"/>
                        <declaration name="tAo1" type="X500Name" line="567"/>
                        <declaration name="tAo2" type="X500Name" line="568"/>
                        <scope line="569"/>
                        <scope line="573">
                            <scope line="574">
                                <declaration name="hopsTto1" type="int" line="575"/>
                                <declaration name="hopsTto2" type="int" line="577"/>
                                <scope line="579"/>
                                <scope line="583"/>
                                <scope line="584"/>
                                <scope line="586"/>
                            </scope>
                            <scope line="589"/>
                            <scope line="591"/>
                        </scope>
                    </scope>
                    <scope line="601"/>
                    <declaration name="cSubject1" type="X500Principal" line="604"/>
                    <declaration name="cSubject2" type="X500Principal" line="605"/>
                    <declaration name="cSubject1Name" type="X500Name" line="606"/>
                    <declaration name="cSubject2Name" type="X500Name" line="607"/>
                    <scope line="609"/>
                    <declaration name="distanceStoI1" type="int" line="613"/>
                    <declaration name="distanceStoI2" type="int" line="615"/>
                    <scope line="617"/>
                    <scope line="621"/>
                    <scope line="623"/>
                    <scope line="629"/>
                </method>
            </class>
            <javadoc line="636">
                Verifies a matching certificate.
                  This method executes the validation steps in the PKIX path
                  validation algorithm &lt;draft-ietf-pkix-new-part1-08.txt&gt; which were
                  not satisfied by the selection criteria used by getCertificates()
                  to find the certs and only the steps that can be executed in a
                  forward direction (target to trust anchor). Those steps that can
                  only be executed in a reverse direction are deferred until the
                  complete path has been built.
                  Trust anchor certs are not validated, but are used to verify the
                  signature and revocation status of the previous cert.
                  If the last certificate is being verified (the one whose subject
                  matches the target subject, then steps in 6.1.4 of the PKIX
                  Certification Path Validation algorithm are NOT executed,
                  regardless of whether or not the last cert is an end-entity
                  cert or not. This allows callers to certify CA certs as
                  well as EE certs.                
                <param>
                    cert the certificate to be verified                    
                </param>
                <param>
                    currentState the current state against which the cert is verified                    
                </param>
                <param>
                    certPathList the certPathList generated thus far                    
                </param>
            </javadoc>
            <method name="verifyCert" type="void" line="663">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="currentState" type="State"/>
                    <param name="certPathList" type="List<X509Certificate>"/>
                </params>
                <comment line="674">
                    check for looping - abort a loop if
                     ((we encounter the same certificate twice) AND
                     ((policyMappingInhibited = true) OR (no policy mapping
                     extensions can be found between the occurences of the same
                     certificate)))                    
                </comment>
                <comment line="705">
                                        
                </comment>
                <comment line="708">
                                        
                </comment>
                <comment line="710">
                    Check CRITICAL private extensions for user checkers that
                     support forward checking (forwardCheckers) and remove
                     ones we know how to check.                    
                </comment>
                <comment line="723">
                    Remove extensions from user checkers that don&apos;t support
                     forward checking. After this step, we will have removed
                     all extensions that all user checkers are capable of
                     processing.                    
                </comment>
                <comment line="738">
                    Look at the remaining extensions and remove any ones we know how
                     to check. If there are any left, throw an exception!                    
                </comment>
                <comment line="768">
                    if this is the target certificate (init=true), then we are
                     not able to do any more verification, so just return                    
                </comment>
                <comment line="776">
                                        
                </comment>
                <comment line="778">
                                        
                </comment>
                <comment line="783">
                    Check keyUsage extension                    
                </comment>
                <comment line="789">
                    the following checks are performed even when the cert
                     is a trusted cert, since we are only extracting the
                     subjectDN, and publicKey from the cert
                     in order to verify a previous cert                    
                </comment>
                <comment line="796">
                    Check revocation for the previous cert                    
                </comment>
                <comment line="801">
                    first off, see if this cert can authorize revocation...                    
                </comment>
                <comment line="803">
                    And then check to be sure no key requiring key parameters
                     has been encountered                    
                </comment>
                <comment line="806">
                    If all that checks out, we can check the
                     revocation status of the cert. Otherwise,
                     we&apos;ll just wait until the end.                    
                </comment>
                <comment line="815">
                    Check signature only if no key requiring key parameters has been
                     encountered.                    
                </comment>
                <scope line="664"/>
                <declaration name="currState" type="ForwardState" line="671"/>
                <scope line="680">
                    <declaration name="policyMappingFound" type="boolean" line="681"/>
                    <scope line="682">
                        <declaration name="cpListCertImpl" type="X509CertImpl" line="683"/>
                        <declaration name="policyMappingsExt" type="PolicyMappingsExtension" line="684"/>
                        <scope line="686"/>
                        <scope line="689"/>
                        <scope line="692">
                            <scope line="694">
                                <scope line="695"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="isTrustedCert" type="boolean" line="705"/>
                <scope line="708">
                    <declaration name="unresCritExts" type="Set&lt;String&gt;" line="714"/>
                    <scope line="715"/>
                    <scope line="718"/>
                    <scope line="728">
                        <scope line="729">
                            <declaration name="supportedExts" type="Set&lt;String&gt;" line="730"/>
                            <scope line="731"/>
                        </scope>
                    </scope>
                    <scope line="741"/>
                </scope>
                <scope line="771"/>
                <scope line="776">
                    <scope line="778"/>
                </scope>
                <scope line="798">
                    <scope line="801"/>
                </scope>
                <scope line="818"/>
            </method>
            <javadoc line="824">
                Verifies whether the input certificate completes the path.
                  Checks the cert against each trust anchor that was specified, in order,
                  and returns true as soon as it finds a valid anchor.
                  Returns true if the cert matches a trust anchor specified as a
                  certificate or if the cert verifies with a trust anchor that
                  was specified as a trusted {pubkey, caname} pair. Returns false if none
                  of the trust anchors are valid for this cert.                
                <param>
                    cert the certificate to test                    
                </param>
                <return>
                    a boolean value indicating whether the cert completes the path.                    
                </return>
            </javadoc>
            <method name="isPathCompleted" type="boolean" line="836">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="853">
                    the cert itself is a trust anchor                    
                </comment>
                <comment line="857">
                    else, it is a self-issued certificate of the anchor                    
                </comment>
                <comment line="860">
                    Check subject/issuer name chaining                    
                </comment>
                <comment line="867">
                                        
                </comment>
                <comment line="882">
                    Check signature                    
                </comment>
                <comment line="886">
                    NOTE: the DSA public key in the buildParams may lack
                     parameters, yet there is no key to inherit the parameters
                     from.  This is probably such a rare case that it is not worth
                     trying to detect the situation earlier.                    
                </comment>
                <scope line="837">
                    <scope line="838">
                        <scope line="839"/>
                        <scope line="842"/>
                    </scope>
                    <scope line="845">
                        <declaration name="principal" type="X500Principal" line="846"/>
                        <declaration name="publicKey" type="java.security.PublicKey" line="847"/>
                        <scope line="850">
                            <scope line="851"/>
                        </scope>
                        <scope line="861"/>
                    </scope>
                    <scope line="867">
                        <scope line="868">
                            <declaration name="crlChecker" type="CrlRevocationChecker" line="869"/>
                        </scope>
                        <scope line="872">
                            <scope line="873"/>
                        </scope>
                    </scope>
                    <scope line="884"/>
                    <scope line="891">
                        <scope line="892"/>
                    </scope>
                    <scope line="897">
                        <scope line="898"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="913">
                Adds the certificate to the certPathList                
                <param>
                    cert the certificate to be added                    
                </param>
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="addCertToPath" type="void" line="919">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
            <javadoc line="923">
                Removes final certificate from the certPathList                
                <param>
                    certPathList the certification path list                    
                </param>
            </javadoc>
            <method name="removeFinalCertFromPath" type="void" line="927">
                <params>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
            </method>
        </class>
    </source>