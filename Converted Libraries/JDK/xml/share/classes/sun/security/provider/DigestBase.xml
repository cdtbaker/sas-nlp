<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.security.MessageDigestSpi"/>
        <import package="java.security.DigestException"/>
        <import package="java.security.ProviderException"/>
        <class name="DigestBase" line="32">
            <extends class="MessageDigestSpi"/>
            <comment line="52">
                one element byte array, temporary storage for update(byte)                
            </comment>
            <comment line="55">
                algorithm name to use in the exception message                
            </comment>
            <comment line="57">
                length of the message digest in bytes                
            </comment>
            <comment line="60">
                size of the input to the compression function in bytes                
            </comment>
            <comment line="62">
                buffer to store partial blocks, blockSize bytes large
                 Subclasses should not access this array directly except possibly in their
                 implDigest() method. See MD5.java as an example.                
            </comment>
            <comment line="66">
                offset into buffer                
            </comment>
            <comment line="69">
                number of bytes processed so far. subclasses should not modify
                 this value.
                 also used as a flag to indicate reset status
                 -1: need to call engineReset() before next call to update()
                  0: is already reset                
            </comment>
            <comment line="99">
                return digest length. See JCA doc.                
            </comment>
            <comment line="104">
                single byte update. See JCA doc.                
            </comment>
            <comment line="113">
                array update. See JCA doc.                
            </comment>
            <comment line="151">
                reset this object. See JCA doc.                
            </comment>
            <comment line="162">
                return the digest. See JCA doc.                
            </comment>
            <comment line="174">
                return the digest in the specified array. See JCA doc.                
            </comment>
            <comment line="217">
                padding used for the MD5, and SHA-* message digests                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="32">
                Common base message digest implementation for the Sun provider.
                  It implements all the JCA methods as suitable for a Java message digest
                  implementation of an algorithm based on a compression function (as all
                  commonly used algorithms are). The individual digest subclasses only need to
                  implement the following methods:
                  . abstract void implCompress(byte[] b, int ofs);
                  . abstract void implDigest(byte[] out, int ofs);
                  . abstract void implReset();
                  . public abstract Object clone();
                  See the inline documentation for details.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="oneByte" type="byte[]" line="52"/>
            <declaration name="algorithm" type="String" line="55"/>
            <declaration name="digestLength" type="int" line="57"/>
            <declaration name="blockSize" type="int" line="60"/>
            <declaration name="buffer" type="byte[]" line="64"/>
            <declaration name="bufOfs" type="int" line="66"/>
            <declaration name="bytesProcessed" type="long" line="73"/>
            <javadoc line="75">
                Main constructor.                
            </javadoc>
            <method name="DigestBase" type="constructor" line="78">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="digestLength" type="int"/>
                    <param name="blockSize" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Constructor for cloning. Replicates common data.                
            </javadoc>
            <method name="DigestBase" type="constructor" line="89">
                <params>
                    <param name="base" type="DigestBase"/>
                </params>
            </method>
            <method name="engineGetDigestLength" type="int" line="99"/>
            <method name="engineUpdate" type="void" line="104">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="105"/>
            </method>
            <method name="engineUpdate" type="void" line="113">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="ofs" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="125">
                    if buffer is not empty, we need to fill it before proceeding                    
                </comment>
                <comment line="133">
                    compress completed block now                    
                </comment>
                <comment line="138">
                    compress complete blocks                    
                </comment>
                <comment line="144">
                    copy remainder to buffer                    
                </comment>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="120"/>
                <scope line="125">
                    <declaration name="n" type="int" line="126"/>
                    <scope line="131"/>
                </scope>
                <scope line="138"/>
                <scope line="144"/>
            </method>
            <method name="engineReset" type="void" line="151">
                <comment line="154">
                    already reset, ignore                    
                </comment>
                <scope line="152"/>
            </method>
            <method name="engineDigest" type="byte[]" line="162">
                <declaration name="b" type="byte[]" line="163"/>
                <scope line="164"/>
                <scope line="166"/>
            </method>
            <method name="engineDigest" type="int" line="175">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="ofs" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="176"/>
                <scope line="180"/>
                <scope line="183"/>
            </method>
            <method name="implCompress" type="void" line="191"/>
            <javadoc line="191">
                Core compression function. Processes blockSize bytes at a time
                  and updates the state of this object.                
            </javadoc>
            <method name="implDigest" type="void" line="197"/>
            <javadoc line="197">
                Return the digest. Subclasses do not need to reset() themselves,
                  DigestBase calls implReset() when necessary.                
            </javadoc>
            <method name="implReset" type="void" line="203"/>
            <javadoc line="203">
                Reset subclass specific state to their initial values. DigestBase
                  calls this method when necessary.                
            </javadoc>
            <method name="clone" type="Object" line="209"/>
            <javadoc line="209">
                Clone this digest. Should be implemented as &quot;return new MyDigest(this)&quot;.
                  That constructor should first call &quot;super(baseDigest)&quot; and then copy
                  subclass specific data.                
            </javadoc>
            <declaration name="padding" type="byte[]" line="217"/>
            <scope line="219"/>
        </class>
    </source>