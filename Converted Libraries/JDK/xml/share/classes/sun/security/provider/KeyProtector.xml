<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.Key"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.util"/>
        <import package="sun.security.pkcs.PKCS8Key"/>
        <import package="sun.security.pkcs.EncryptedPrivateKeyInfo"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.security.util.DerValue"/>
        <class name="KeyProtector" line="16">
            <javadoc line="16">
                This is an implementation of a Sun proprietary, exportable algorithm
                  intended for use when protecting (or recovering the cleartext version of)
                  sensitive keys.
                  This algorithm is not intended as a general purpose cipher.
                  This is how the algorithm works for key protection:
                  p - user password
                  s - random salt
                  X - xor key
                  P - to-be-protected key
                  Y - protected key
                  R - what gets stored in the keystore
                  Step 1:
                  Take the user&apos;s password, append a random salt (of fixed size) to it,
                  and hash it: d1 = digest(p, s)
                  Store d1 in X.
                  Step 2:
                  Take the user&apos;s password, append the digest result from the previous step,
                  and hash it: dn = digest(p, dn-1).
                  Store dn in X (append it to the previously stored digests).
                  Repeat this step until the length of X matches the length of the private key
                  P.
                  Step 3:
                  XOR X and P, and store the result in Y: Y = X XOR P.
                  Step 4:
                  Store s, Y, and digest(p, P) in the result buffer R:
                  R = s + Y + digest(p, P), where &quot;+&quot; denotes concatenation.
                  (NOTE: digest(p, P) is stored in the result buffer, so that when the key is
                  recovered, we can check if the recovered key indeed matches the original
                  key.) R is stored in the keystore.
                  The protected key is recovered as follows:
                  Step1 and Step2 are the same as above, except that the salt is not randomly
                  generated, but taken from the result R of step 4 (the first length(s)
                  bytes).
                  Step 3 (XOR operation) yields the plaintext key.
                  Then concatenate the password with the recovered key, and compare with the
                  last length(digest(p, P)) bytes of R. If they match, the recovered key is
                  indeed the same key as the original key.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.KeyStore                    
                </see>
                <see>
                    JavaKeyStore                    
                </see>
                <see>
                    KeyTool                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="SALT_LEN" type="int" line="61"/>
            <declaration name="DIGEST_ALG" type="String" line="62"/>
            <declaration name="DIGEST_LEN" type="int" line="63"/>
            <declaration name="KEY_PROTECTOR_OID" type="String" line="64"/>
            <declaration name="passwdBytes" type="byte[]" line="65"/>
            <declaration name="md" type="MessageDigest" line="66"/>
            <javadoc line="67">
                Creates an instance of this class, and initializes it with the given
                  password.
                  &lt;p&gt;The password is expected to be in printable ASCII.
                  Normal rules for good password selection apply: at least
                  seven characters, mixed case, with punctuation encouraged.
                  Phrases or words which are easily guessed, for example by
                  being found in dictionaries, are bad.                
            </javadoc>
            <method name="KeyProtector" type="constructor" line="76">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="i" type="int" line="77"/>
                <scope line="78"/>
                <scope line="83"/>
            </method>
            <javadoc line="88">
                Ensures that the password bytes of this key protector are
                  set to zero when there are no more references to it.                
            </javadoc>
            <method name="finalize" type="void" line="92">
                <scope line="93"/>
            </method>
            <method name="protect" type="byte[]" line="98">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="i" type="int" line="99"/>
                <declaration name="numRounds" type="int" line="100"/>
                <declaration name="digest" type="byte[]" line="101"/>
                <declaration name="xorOffset" type="int" line="102"/>
                <declaration name="encrKeyOffset" type="int" line="103"/>
                <scope line="104"/>
                <scope line="107"/>
                <declaration name="plainKey" type="byte[]" line="110"/>
                <scope line="111"/>
                <declaration name="salt" type="byte[]" line="116"/>
                <declaration name="random" type="SecureRandom" line="117"/>
                <declaration name="xorKey" type="byte[]" line="119"/>
                <scope line="120">
                    <scope line="125"/>
                    <scope line="128"/>
                </scope>
                <declaration name="tmpKey" type="byte[]" line="132"/>
                <scope line="133"/>
                <declaration name="encrKey" type="byte[]" line="136"/>
                <declaration name="encrAlg" type="AlgorithmId" line="148"/>
                <scope line="149"/>
                <scope line="153"/>
            </method>
            <method name="recover" type="Key" line="157">
                <params>
                    <param name="encrInfo" type="EncryptedPrivateKeyInfo"/>
                </params>
                <declaration name="i" type="int" line="158"/>
                <declaration name="digest" type="byte[]" line="159"/>
                <declaration name="numRounds" type="int" line="160"/>
                <declaration name="xorOffset" type="int" line="161"/>
                <declaration name="encrKeyLen" type="int" line="162"/>
                <declaration name="encrAlg" type="AlgorithmId" line="163"/>
                <scope line="164"/>
                <declaration name="protectedKey" type="byte[]" line="167"/>
                <declaration name="salt" type="byte[]" line="168"/>
                <declaration name="encrKey" type="byte[]" line="173"/>
                <declaration name="xorKey" type="byte[]" line="175"/>
                <scope line="176">
                    <scope line="181"/>
                    <scope line="184"/>
                </scope>
                <declaration name="plainKey" type="byte[]" line="188"/>
                <scope line="189"/>
                <scope line="198">
                    <scope line="199"/>
                </scope>
                <scope line="203"/>
                <scope line="206"/>
            </method>
        </class>
    </source>