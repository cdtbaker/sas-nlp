<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io.IOException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.SecureRandomSpi"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <class name="SecureRandom" line="6">
            <extends class="SecureRandomSpi"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="6">
                &lt;p&gt;This class provides a crytpographically strong pseudo-random number
                  generator based on the SHA-1 hash algorithm.
                  &lt;p&gt;Note that if a seed is not provided, we attempt to provide sufficient
                  seed bytes to completely randomize the internal state of the generator
                  (20 bytes).  However, our seed generation algorithm has not been thoroughly
                  studied or widely deployed.
                  &lt;p&gt;Also note that when a random object is deserialized,
                  &lt;a href=&quot;#engineNextBytes(byte[])&quot;&gt;engineNextBytes&lt;/a&gt; invoked on the
                  restored random object will yield the exact same (random) bytes as the
                  original object.  If this behaviour is not desired, the restored random
                  object should be seeded, using
                  &lt;a href=&quot;#engineSetSeed(byte[])&quot;&gt;engineSetSeed&lt;/a&gt;.                
                <author>
                    Benjamin Renaud                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Gadi Guy                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <declaration name="seeder" type="SecureRandom" line="25"/>
            <javadoc line="25">
                This static object will be seeded by SeedGenerator, and used
                  to seed future instances of SecureRandom                
            </javadoc>
            <declaration name="DIGEST_SIZE" type="int" line="30"/>
            <declaration name="digest" type="MessageDigest" line="31"/>
            <declaration name="state" type="byte[]" line="32"/>
            <declaration name="remainder" type="byte[]" line="33"/>
            <declaration name="remCount" type="int" line="34"/>
            <javadoc line="35">
                This empty constructor automatically seeds the generator.  We attempt
                  to provide sufficient seed bytes to completely randomize the internal
                  state of the generator (20 bytes).  Note, however, that our seed
                  generation algorithm has not been thoroughly studied or widely deployed.
                  &lt;p&gt;The first time this constructor is called in a given Virtual Machine,
                  it may take several seconds of CPU time to seed the generator, depending
                  on the underlying hardware.  Successive calls run quickly because they
                  rely on the same (internal) pseudo-random number generator for their
                  seed bits.                
            </javadoc>
            <method name="SecureRandom" type="constructor" line="46"/>
            <javadoc line="49">
                This constructor is used to instatiate the private seeder object
                  with a given seed from the SeedGenerator.                
                <param>
                    seed the seed.                    
                </param>
            </javadoc>
            <method name="SecureRandom" type="constructor" line="54">
                <params>
                    <param name="seed" type="byte"/>
                </params>
            </method>
            <javadoc line="57">
                This call, used by the constructors, instantiates the SHA digest
                  and sets the seed, if given.                
            </javadoc>
            <method name="init" type="void" line="61">
                <params>
                    <param name="seed" type="byte[]"/>
                </params>
                <scope line="62"/>
                <scope line="65"/>
                <scope line="68"/>
            </method>
            <javadoc line="72">
                Returns the given number of seed bytes, computed using the seed
                  generation algorithm that this class uses to seed itself.  This
                  call may be used to seed other random number generators.  While
                  we attempt to return a &quot;truly random&quot; sequence of bytes, we do not
                  know exactly how random the bytes returned by this call are.  (See
                  the empty constructor &lt;a href = &quot;#SecureRandom&quot;&gt;SecureRandom&lt;/a&gt;
                  for a brief description of the underlying algorithm.)
                  The prudent user will err on the side of caution and get extra
                  seed bytes, although it should be noted that seed generation is
                  somewhat costly.                
                <param>
                    numBytes the number of seed bytes to generate.                    
                </param>
                <return>
                    the seed bytes.                    
                </return>
            </javadoc>
            <method name="engineGenerateSeed" type="byte[]" line="86">
                <params>
                    <param name="numBytes" type="int"/>
                </params>
                <declaration name="b" type="byte[]" line="87"/>
            </method>
            <javadoc line="91">
                Reseeds this random object. The given seed supplements, rather than
                  replaces, the existing seed. Thus, repeated calls are guaranteed
                  never to reduce randomness.                
                <param>
                    seed the seed.                    
                </param>
            </javadoc>
            <method name="engineSetSeed" type="void" line="97">
                <params>
                    <param name="seed" type="byte[]"/>
                </params>
                <scope line="98"/>
            </method>
            <method name="updateState" type="void" line="104">
                <params>
                    <param name="state" type="byte[]"/>
                    <param name="output" type="byte[]"/>
                </params>
                <declaration name="last" type="int" line="105"/>
                <declaration name="v" type="int" line="106"/>
                <declaration name="t" type="byte" line="107"/>
                <declaration name="zf" type="boolean" line="108"/>
                <scope line="109"/>
            </method>
            <javadoc line="118">
                Generates a user-specified number of random bytes.                
                <param>
                    bytes the array to be filled in with random bytes.                    
                </param>
            </javadoc>
            <method name="engineNextBytes" type="void" line="122">
                <params>
                    <param name="result" type="byte[]"/>
                </params>
                <declaration name="index" type="int" line="123"/>
                <declaration name="todo" type="int" line="124"/>
                <declaration name="output" type="byte[]" line="125"/>
                <scope line="126">
                    <scope line="127"/>
                    <declaration name="seed" type="byte[]" line="131"/>
                </scope>
                <declaration name="r" type="int" line="135"/>
                <scope line="136">
                    <scope line="138"/>
                </scope>
                <scope line="145">
                    <scope line="150"/>
                </scope>
            </method>
            <method name="readObject" type="void" line="159">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <scope line="161"/>
                <scope line="164"/>
            </method>
        </class>
    </source>