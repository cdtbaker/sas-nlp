<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Set"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.NameConstraintsExtension"/>
        <import package="sun.security.x509.SubjectKeyIdentifierExtension"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="ReverseState" line="48">
            <comment line="62">
                                
            </comment>
            <comment line="65">
                                
            </comment>
            <comment line="68">
                                
            </comment>
            <comment line="71">
                                
            </comment>
            <comment line="74">
                The PKIX explicit policy, policy mapping, and inhibit_any-policy                
            </comment>
            <comment line="82">
                The number of remaining CA certs which may follow in the path.
                 -1: previous cert was an EE cert
                 0: only EE certs may follow.
                 &gt;0 and &lt;Integer.MAX_VALUE:no more than this number of CA certs may follow
                 Integer.MAX_VALUE: unlimited                
            </comment>
            <comment line="90">
                The list of user-defined checkers retrieved from the PKIXParameters                
            </comment>
            <comment line="94">
                                
            </comment>
            <comment line="97">
                                
            </comment>
            <comment line="100">
                                
            </comment>
            <comment line="103">
                                
            </comment>
            <comment line="106">
                Flag indicating if current cert can vouch for the CRL for
                 the next cert                
            </comment>
            <comment line="360">
                Clone current state. The state is cloned as each cert is
                 added to the path. This is necessary if backtracking occurs,
                 and a prior state needs to be restored.
                
                 Note that this is a SMART clone. Not all fields are fully copied,
                 because some of them (e.g., subjKeyId) will
                 not have their contents modified by subsequent calls to updateState.                
            </comment>
            <implements interface="State"/>
            <javadoc line="48">
                A specification of a reverse PKIX validation state
                  which is initialized by each build and updated each time a
                  certificate is added to the current path.                
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="59"/>
            <declaration name="subjectDN" type="X500Principal" line="62"/>
            <declaration name="pubKey" type="PublicKey" line="65"/>
            <declaration name="subjKeyId" type="SubjectKeyIdentifierExtension" line="68"/>
            <declaration name="nc" type="NameConstraintsExtension" line="71"/>
            <declaration name="explicitPolicy" type="int" line="75"/>
            <declaration name="policyMapping" type="int" line="76"/>
            <declaration name="inhibitAnyPolicy" type="int" line="77"/>
            <declaration name="certIndex" type="int" line="78"/>
            <declaration name="rootNode" type="PolicyNodeImpl" line="79"/>
            <declaration name="remainingCACerts" type="int" line="87"/>
            <declaration name="userCheckers" type="ArrayList&lt;PKIXCertPathChecker&gt;" line="91"/>
            <declaration name="init" type="boolean" line="94"/>
            <declaration name="crlChecker" type="CrlRevocationChecker" line="97"/>
            <declaration name="algorithmChecker" type="AlgorithmChecker" line="100"/>
            <declaration name="trustAnchor" type="TrustAnchor" line="103"/>
            <declaration name="crlSign" type="boolean" line="108"/>
            <javadoc line="110">
                Returns a boolean flag indicating if the state is initial
                  (just starting)                
                <return>
                    boolean flag indicating if the state is initial (just starting)                    
                </return>
            </javadoc>
            <method name="isInitial" type="boolean" line="116"/>
            <javadoc line="120">
                Display state for debugging purposes                
            </javadoc>
            <method name="toString" type="String" line="123">
                <declaration name="sb" type="StringBuffer" line="124"/>
                <scope line="125"/>
                <scope line="139">
                    <scope line="140"/>
                </scope>
            </method>
            <javadoc line="148">
                Initialize the state.                
                <param>
                    maxPathLen The maximum number of CA certs in a path, where -1
                      means unlimited and 0 means only a single EE cert is allowed.                    
                </param>
                <param>
                    explicitPolicyRequired True, if explicit policy is required.                    
                </param>
                <param>
                    policyMappingInhibited True, if policy mapping is inhibited.                    
                </param>
                <param>
                    anyPolicyInhibited True, if any policy is inhibited.                    
                </param>
                <param>
                    certPathCheckers the list of user-defined PKIXCertPathCheckers                    
                </param>
            </javadoc>
            <method name="initState" type="void" line="162">
                <params>
                    <param name="maxPathLen" type="int"/>
                    <param name="explicitPolicyRequired" type="boolean"/>
                    <param name="policyMappingInhibited" type="boolean"/>
                    <param name="anyPolicyInhibited" type="boolean"/>
                    <param name="certPathCheckers" type="List<PKIXCertPathChecker>"/>
                </params>
                <comment line="163">
                    Initialize number of remainingCACerts.
                     Note that -1 maxPathLen implies unlimited.
                     0 implies only an EE cert is acceptable.                    
                </comment>
                <comment line="170">
                                        
                </comment>
                <comment line="174">
                    unconstrained if maxPathLen is -1,                    
                </comment>
                <comment line="175">
                    otherwise, we want to initialize this to the value of the                    
                </comment>
                <comment line="176">
                    longest possible path + 1 (i.e. maxpathlen + finalcert + 1)                    
                </comment>
                <comment line="182">
                                        
                </comment>
                <comment line="191">
                                        
                </comment>
                <comment line="200">
                                        
                </comment>
                <comment line="203">
                                        
                </comment>
                <comment line="210">
                    Initialize each user-defined checker                    
                </comment>
                <comment line="214">
                                        
                </comment>
                <comment line="216">
                                        
                </comment>
                <comment line="224">
                                        
                </comment>
                <scope line="171"/>
                <scope line="173"/>
                <scope line="183"/>
                <scope line="185"/>
                <scope line="192"/>
                <scope line="194"/>
                <declaration name="initExpPolSet" type="Set&lt;String&gt;" line="204"/>
                <scope line="213">
                    <scope line="217"/>
                </scope>
                <scope line="220"/>
            </method>
            <javadoc line="230">
                Update the state with the specified trust anchor.                
                <param>
                    anchor the most-trusted CA                    
                </param>
            </javadoc>
            <method name="updateState" type="void" line="237">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                </params>
                <comment line="247">
                    The user specified AlgorithmChecker may not be                    
                </comment>
                <comment line="248">
                    able to set the trust anchor until now.                    
                </comment>
                <declaration name="trustedCert" type="X509Certificate" line="239"/>
                <scope line="240"/>
                <scope line="242">
                    <declaration name="caName" type="X500Principal" line="243"/>
                </scope>
                <scope line="249">
                    <scope line="250"/>
                </scope>
            </method>
            <javadoc line="258">
                Update the state. This method is used when the most-trusted CA is
                  a trusted public-key and caName, instead of a trusted cert.                
                <param>
                    pubKey the public key of the trusted CA                    
                </param>
                <param>
                    subjectDN the subject distinguished name of the trusted CA                    
                </param>
            </javadoc>
            <method name="updateState" type="void" line="265">
                <params>
                    <param name="pubKey" type="PublicKey"/>
                    <param name="subjectDN" type="X500Principal"/>
                </params>
                <comment line="267">
                                        
                </comment>
                <comment line="270">
                                        
                </comment>
            </method>
            <javadoc line="274">
                Update the state with the next certificate added to the path.                
                <param>
                    cert the certificate which is used to update the state                    
                </param>
            </javadoc>
            <method name="updateState" type="void" line="280">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="286">
                                        
                </comment>
                <comment line="289">
                                        
                </comment>
                <comment line="297">
                                        
                </comment>
                <comment line="300">
                    if this is a trusted cert (init == true), then we
                     don&apos;t update any of the remaining fields                    
                </comment>
                <comment line="309">
                                        
                </comment>
                <comment line="312">
                                        
                </comment>
                <comment line="315">
                                        
                </comment>
                <comment line="321">
                    Make sure we do a clone here, because we&apos;re probably                    
                </comment>
                <comment line="322">
                    going to modify this object later and we don&apos;t want to                    
                </comment>
                <comment line="323">
                    be sharing it with a Certificate object!                    
                </comment>
                <comment line="328">
                                        
                </comment>
                <comment line="337">
                    Update remaining CA certs                    
                </comment>
                <scope line="282"/>
                <declaration name="icert" type="X509CertImpl" line="290"/>
                <declaration name="newKey" type="PublicKey" line="291"/>
                <scope line="293"/>
                <scope line="304"/>
                <scope line="316"/>
                <scope line="318">
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="346">
                Returns a boolean flag indicating if a key lacking necessary key
                  algorithm parameters has been encountered.                
                <return>
                    boolean flag indicating if key lacking parameters encountered.                    
                </return>
            </javadoc>
            <method name="keyParamsNeeded" type="boolean" line="352">
                <comment line="353">
                    when building in reverse, we immediately get parameters needed
                     or else throw an exception                    
                </comment>
            </method>
            <method name="clone" type="Object" line="368">
                <comment line="372">
                                        
                </comment>
                <comment line="384">
                                        
                </comment>
                <comment line="389">
                                        
                </comment>
                <scope line="369">
                    <declaration name="clonedState" type="ReverseState" line="370"/>
                    <declaration name="li" type="ListIterator&lt;PKIXCertPathChecker&gt;" line="375"/>
                    <scope line="377">
                        <declaration name="checker" type="PKIXCertPathChecker" line="378"/>
                        <scope line="379"/>
                    </scope>
                    <scope line="385"/>
                    <scope line="390"/>
                </scope>
                <scope line="395"/>
            </method>
        </class>
    </source>