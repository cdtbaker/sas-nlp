<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Set"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.NameConstraintsExtension"/>
        <import package="sun.security.x509.SubjectKeyIdentifierExtension"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <class name="ReverseState" line="20">
            <implements interface="State"/>
            <javadoc line="20">
                A specification of a reverse PKIX validation state
                  which is initialized by each build and updated each time a
                  certificate is added to the current path.                
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="29"/>
            <declaration name="subjectDN" type="X500Principal" line="30"/>
            <declaration name="pubKey" type="PublicKey" line="31"/>
            <declaration name="subjKeyId" type="SubjectKeyIdentifierExtension" line="32"/>
            <declaration name="nc" type="NameConstraintsExtension" line="33"/>
            <declaration name="explicitPolicy" type="int" line="34"/>
            <declaration name="policyMapping" type="int" line="35"/>
            <declaration name="inhibitAnyPolicy" type="int" line="36"/>
            <declaration name="certIndex" type="int" line="37"/>
            <declaration name="rootNode" type="PolicyNodeImpl" line="38"/>
            <declaration name="remainingCACerts" type="int" line="39"/>
            <declaration name="userCheckers" type="ArrayList&amp;lt;PKIXCertPathChecker&amp;gt;" line="40"/>
            <declaration name="init" type="boolean" line="41"/>
            <declaration name="crlChecker" type="CrlRevocationChecker" line="42"/>
            <declaration name="algorithmChecker" type="AlgorithmChecker" line="43"/>
            <declaration name="trustAnchor" type="TrustAnchor" line="44"/>
            <declaration name="crlSign" type="boolean" line="45"/>
            <javadoc line="46">
                Returns a boolean flag indicating if the state is initial
                  (just starting)                
                <return>
                    boolean flag indicating if the state is initial (just starting)                    
                </return>
            </javadoc>
            <method name="isInitial" type="boolean" line="51"/>
            <javadoc line="54">
                Display state for debugging purposes                
            </javadoc>
            <method name="toString" type="String" line="57">
                <declaration name="sb" type="StringBuffer" line="58"/>
                <scope line="59"/>
                <scope line="74">
                    <scope line="75"/>
                </scope>
            </method>
            <javadoc line="82">
                Initialize the state.                
                <param>
                    maxPathLen The maximum number of CA certs in a path, where -1
                      means unlimited and 0 means only a single EE cert is allowed.                    
                </param>
                <param>
                    explicitPolicyRequired True, if explicit policy is required.                    
                </param>
                <param>
                    policyMappingInhibited True, if policy mapping is inhibited.                    
                </param>
                <param>
                    anyPolicyInhibited True, if any policy is inhibited.                    
                </param>
                <param>
                    certPathCheckers the list of user-defined PKIXCertPathCheckers                    
                </param>
            </javadoc>
            <method name="initState" type="void" line="91">
                <params>
                    <param name="maxPathLen" type="int"/>
                    <param name="explicitPolicyRequired" type="boolean"/>
                    <param name="policyMappingInhibited" type="boolean"/>
                    <param name="anyPolicyInhibited" type="boolean"/>
                    <param name="certPathCheckers" type="List&lt;PKIXCertPathChecker&gt;"/>
                </params>
                <scope line="93"/>
                <scope line="96"/>
                <scope line="99"/>
                <scope line="102"/>
                <scope line="105"/>
                <scope line="108"/>
                <declaration name="initExpPolSet" type="Set&amp;lt;String&amp;gt;" line="112"/>
                <scope line="115">
                    <scope line="117"/>
                </scope>
                <scope line="121"/>
            </method>
            <javadoc line="127">
                Update the state with the specified trust anchor.                
                <param>
                    anchor the most-trusted CA                    
                </param>
            </javadoc>
            <method name="updateState" type="void" line="131">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                </params>
                <declaration name="trustedCert" type="X509Certificate" line="133"/>
                <scope line="134"/>
                <scope line="137">
                    <declaration name="caName" type="X500Principal" line="138"/>
                </scope>
                <scope line="141">
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="148">
                Update the state. This method is used when the most-trusted CA is
                  a trusted public-key and caName, instead of a trusted cert.                
                <param>
                    pubKey the public key of the trusted CA                    
                </param>
                <param>
                    subjectDN the subject distinguished name of the trusted CA                    
                </param>
            </javadoc>
            <method name="updateState" type="void" line="154">
                <params>
                    <param name="pubKey" type="PublicKey"/>
                    <param name="subjectDN" type="X500Principal"/>
                </params>
            </method>
            <javadoc line="158">
                Update the state with the next certificate added to the path.                
                <param>
                    cert the certificate which is used to update the state                    
                </param>
            </javadoc>
            <method name="updateState" type="void" line="162">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="163"/>
                <declaration name="icert" type="X509CertImpl" line="167"/>
                <declaration name="newKey" type="PublicKey" line="168"/>
                <scope line="169"/>
                <scope line="173"/>
                <scope line="179"/>
                <scope line="182">
                    <scope line="184"/>
                </scope>
            </method>
            <javadoc line="195">
                Returns a boolean flag indicating if a key lacking necessary key
                  algorithm parameters has been encountered.                
                <return>
                    boolean flag indicating if key lacking parameters encountered.                    
                </return>
            </javadoc>
            <method name="keyParamsNeeded" type="boolean" line="200"/>
            <method name="clone" type="Object" line="203">
                <scope line="204">
                    <declaration name="clonedState" type="ReverseState" line="205"/>
                    <declaration name="li" type="ListIterator&amp;lt;PKIXCertPathChecker&amp;gt;" line="207"/>
                    <scope line="208">
                        <declaration name="checker" type="PKIXCertPathChecker" line="209"/>
                        <scope line="210"/>
                    </scope>
                    <scope line="214"/>
                    <scope line="217"/>
                </scope>
                <scope line="222"/>
            </method>
        </class>
    </source>