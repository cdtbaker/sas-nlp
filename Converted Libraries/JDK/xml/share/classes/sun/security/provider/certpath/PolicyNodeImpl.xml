<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="java.security.cert"/>
        <class name="PolicyNodeImpl" line="35">
            <comment line="56">
                every node has one parent, and zero or more children                
            </comment>
            <comment line="60">
                the 4 fields specified by RFC 3280                
            </comment>
            <comment line="67">
                the tree depth                
            </comment>
            <comment line="69">
                immutability flag                
            </comment>
            <comment line="183">
                private methods and package private operations                
            </comment>
            <implements interface="PolicyNode"/>
            <javadoc line="35">
                Implements the &lt;code&gt;PolicyNode&lt;/code&gt; interface.
                  &lt;p&gt;
                  This class provides an implementation of the &lt;code&gt;PolicyNode&lt;/code&gt;
                  interface, and is used internally to build and search Policy Trees.
                  While the implementation is mutable during construction, it is immutable
                  before returning to a client and no mutable public or protected methods
                  are exposed by this implementation, as per the contract of PolicyNode.                
                <since>
                    1.4                    
                </since>
                <author>
                    Seth Proctor                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
            </javadoc>
            <declaration name="ANY_POLICY" type="String" line="50"/>
            <javadoc line="50">
                Use to specify the special policy &quot;Any Policy&quot;                
            </javadoc>
            <declaration name="mParent" type="PolicyNodeImpl" line="56"/>
            <declaration name="mChildren" type="HashSet&lt;PolicyNodeImpl&gt;" line="57"/>
            <declaration name="mValidPolicy" type="String" line="60"/>
            <declaration name="mQualifierSet" type="HashSet&lt;PolicyQualifierInfo&gt;" line="61"/>
            <declaration name="mCriticalityIndicator" type="boolean" line="62"/>
            <declaration name="mExpectedPolicySet" type="HashSet&lt;String&gt;" line="63"/>
            <declaration name="mOriginalExpectedPolicySet" type="boolean" line="64"/>
            <declaration name="mDepth" type="int" line="67"/>
            <declaration name="isImmutable" type="boolean" line="69"/>
            <javadoc line="71">
                Constructor which takes a &lt;code&gt;PolicyNodeImpl&lt;/code&gt; representing the
                  parent in the Policy Tree to this node. If null, this is the
                  root of the tree. The constructor also takes the associated data
                  for this node, as found in the certificate. It also takes a boolean
                  argument specifying whether this node is being created as a result
                  of policy mapping.                
                <param>
                    parent the PolicyNode above this in the tree, or null if this
                      node is the tree's root node                    
                </param>
                <param>
                    validPolicy a String representing this node's valid policy OID                    
                </param>
                <param>
                    qualifierSet the Set of qualifiers for this policy                    
                </param>
                <param>
                    criticalityIndicator a boolean representing whether or not the
                      extension is critical                    
                </param>
                <param>
                    expectedPolicySet a Set of expected policies                    
                </param>
                <param>
                    generatedByPolicyMapping a boolean indicating whether this
                      node was generated by a policy mapping                    
                </param>
            </javadoc>
            <method name="PolicyNodeImpl" type="constructor" line="92">
                <params>
                    <param name="parent" type="PolicyNodeImpl"/>
                    <param name="validPolicy" type="String"/>
                    <param name="qualifierSet" type="Set<PolicyQualifierInfo>"/>
                    <param name="criticalityIndicator" type="boolean"/>
                    <param name="expectedPolicySet" type="Set<String>"/>
                    <param name="generatedByPolicyMapping" type="boolean"/>
                </params>
                <comment line="116">
                    see if we&apos;re the root, and act appropriately                    
                </comment>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                Alternate constructor which makes a new node with the policy data
                  in an existing &lt;code&gt;PolicyNodeImpl&lt;/code&gt;.                
                <param>
                    parent a PolicyNode that's the new parent of the node, or
                      null if this is the root node                    
                </param>
                <param>
                    node a PolicyNode containing the policy data to copy                    
                </param>
            </javadoc>
            <method name="PolicyNodeImpl" type="constructor" line="132">
                <params>
                    <param name="parent" type="PolicyNodeImpl"/>
                    <param name="node" type="PolicyNodeImpl"/>
                </params>
            </method>
            <method name="getParent" type="PolicyNode" line="137"/>
            <method name="getChildren" type="Iterator<PolicyNodeImpl>" line="141"/>
            <method name="getDepth" type="int" line="145"/>
            <method name="getValidPolicy" type="String" line="149"/>
            <method name="getPolicyQualifiers" type="Set<PolicyQualifierInfo>" line="153"/>
            <method name="getExpectedPolicies" type="Set<String>" line="157"/>
            <method name="isCritical" type="boolean" line="161"/>
            <javadoc line="165">
                Return a printable representation of the PolicyNode.
                  Starting at the node on which this method is called,
                  it recurses through the tree and prints out each node.                
                <return>
                    a String describing the contents of the Policy Node                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="172">
                <declaration name="buffer" type="StringBuffer" line="173"/>
                <declaration name="it" type="Iterator&lt;PolicyNodeImpl&gt;" line="175"/>
                <scope line="176"/>
            </method>
            <method name="isImmutable" type="boolean" line="184"/>
            <javadoc line="188">
                Sets the immutability flag of this node and all of its children
                  to true.                
            </javadoc>
            <method name="setImmutable" type="void" line="192">
                <scope line="195"/>
            </method>
            <javadoc line="201">
                Private method sets a child node. This is called from the child&apos;s
                  constructor.                
                <param>
                    child new <code>PolicyNodeImpl</code> child node                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="207">
                <params>
                    <param name="child" type="PolicyNodeImpl"/>
                </params>
                <scope line="208"/>
            </method>
            <javadoc line="214">
                Adds an expectedPolicy to the expected policy set.
                  If this is the original expected policy set initialized
                  by the constructor, then the expected policy set is cleared
                  before the expected policy is added.                
                <param>
                    expectedPolicy a String representing an expected policy.                    
                </param>
            </javadoc>
            <method name="addExpectedPolicy" type="void" line="222">
                <params>
                    <param name="expectedPolicy" type="String"/>
                </params>
                <scope line="223"/>
                <scope line="226"/>
            </method>
            <javadoc line="233">
                Removes all paths which don&apos;t reach the specified depth.                
                <param>
                    depth an int representing the desired minimum depth of all paths                    
                </param>
            </javadoc>
            <method name="prune" type="void" line="238">
                <params>
                    <param name="depth" type="int"/>
                </params>
                <comment line="243">
                    if we have no children, we can&apos;t prune below us...                    
                </comment>
                <comment line="251">
                    now that we&apos;ve called prune on the child, see if we should
                     remove it from the tree                    
                </comment>
                <declaration name="it" type="Iterator&lt;PolicyNodeImpl&gt;" line="246"/>
                <scope line="247">
                    <declaration name="node" type="PolicyNodeImpl" line="248"/>
                </scope>
            </method>
            <javadoc line="257">
                Deletes the specified child node of this node, if it exists.                
                <param>
                    childNode the child node to be deleted                    
                </param>
            </javadoc>
            <method name="deleteChild" type="void" line="262">
                <params>
                    <param name="childNode" type="PolicyNode"/>
                </params>
                <scope line="263"/>
            </method>
            <javadoc line="269">
                Returns a copy of the tree, without copying the policy-related data,
                  rooted at the node on which this was called.                
                <return>
                    a copy of the tree                    
                </return>
            </javadoc>
            <method name="copyTree" type="PolicyNodeImpl" line="275"/>
            <method name="copyTree" type="PolicyNodeImpl" line="279">
                <params>
                    <param name="parent" type="PolicyNodeImpl"/>
                </params>
                <declaration name="newNode" type="PolicyNodeImpl" line="280"/>
                <scope line="282"/>
            </method>
            <javadoc line="289">
                Returns all nodes at the specified depth in the tree.                
                <param>
                    depth an int representing the depth of the desired nodes                    
                </param>
                <return>
                    a <code>Set</code> of all nodes at the specified depth                    
                </return>
            </javadoc>
            <method name="getPolicyNodes" type="Set<PolicyNodeImpl>" line="295">
                <params>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="set" type="Set&lt;PolicyNodeImpl&gt;" line="296"/>
            </method>
            <javadoc line="301">
                Add all nodes at depth depth to set and return the Set.
                  Internal recursion helper.                
            </javadoc>
            <method name="getPolicyNodes" type="void" line="305">
                <params>
                    <param name="depth" type="int"/>
                    <param name="set" type="Set<PolicyNodeImpl>"/>
                </params>
                <comment line="307">
                    if we&apos;ve reached the desired depth, then return ourself                    
                </comment>
                <scope line="307"/>
                <scope line="309">
                    <scope line="310"/>
                </scope>
            </method>
            <javadoc line="316">
                Finds all nodes at the specified depth whose expected_policy_set
                  contains the specified expected OID (if matchAny is false)
                  or the special OID &quot;any value&quot; (if matchAny is true).                
                <param>
                    depth an int representing the desired depth                    
                </param>
                <param>
                    expectedOID a String encoding the valid OID to match                    
                </param>
                <param>
                    matchAny a boolean indicating whether an expected_policy_set
                      containing ANY_POLICY should be considered a match                    
                </param>
                <return>
                    a Set of matched <code>PolicyNode</code>s                    
                </return>
            </javadoc>
            <method name="getPolicyNodesExpected" type="Set<PolicyNodeImpl>" line="328">
                <params>
                    <param name="depth" type="int"/>
                    <param name="expectedOID" type="String"/>
                    <param name="matchAny" type="boolean"/>
                </params>
                <scope line="330"/>
                <scope line="332"/>
            </method>
            <method name="getPolicyNodesExpectedHelper" type="Set<PolicyNodeImpl>" line="338">
                <params>
                    <param name="depth" type="int"/>
                    <param name="expectedOID" type="String"/>
                    <param name="matchAny" type="boolean"/>
                </params>
                <declaration name="set" type="HashSet&lt;PolicyNodeImpl&gt;" line="340"/>
                <scope line="342">
                    <scope line="343"/>
                </scope>
                <scope line="348">
                    <scope line="349"/>
                    <scope line="352"/>
                </scope>
            </method>
            <javadoc line="361">
                Finds all nodes at the specified depth that contains the
                  specified valid OID                
                <param>
                    depth an int representing the desired depth                    
                </param>
                <param>
                    validOID a String encoding the valid OID to match                    
                </param>
                <return>
                    a Set of matched <code>PolicyNode</code>s                    
                </return>
            </javadoc>
            <method name="getPolicyNodesValid" type="Set<PolicyNodeImpl>" line="369">
                <params>
                    <param name="depth" type="int"/>
                    <param name="validOID" type="String"/>
                </params>
                <declaration name="set" type="HashSet&lt;PolicyNodeImpl&gt;" line="370"/>
                <scope line="372">
                    <scope line="373"/>
                </scope>
                <scope line="376"/>
            </method>
            <method name="policyToString" type="String" line="384">
                <params>
                    <param name="oid" type="String"/>
                </params>
                <scope line="385"/>
                <scope line="387"/>
            </method>
            <javadoc line="392">
                Prints out some data on this node.                
            </javadoc>
            <method name="asString" type="String" line="395">
                <scope line="396"/>
                <scope line="398">
                    <declaration name="sb" type="StringBuffer" line="399"/>
                    <scope line="400"/>
                    <scope line="407"/>
                </scope>
            </method>
        </class>
    </source>