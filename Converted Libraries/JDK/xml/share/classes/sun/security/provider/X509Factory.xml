<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security.cert"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.X509CRLImpl"/>
        <import package="sun.security.pkcs.PKCS7"/>
        <import package="sun.security.provider.certpath.X509CertPath"/>
        <import package="sun.security.provider.certpath.X509CertificatePair"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.Cache"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.security.pkcs.ParsingException"/>
        <class name="X509Factory" line="41">
            <extends class="CertificateFactorySpi"/>
            <comment line="66">
                4 MB MAX                
            </comment>
            <comment line="404">
                Parses the data in the given input stream as a sequence of DER
                 encoded X.509 certificates (in binary or base 64 encoded format) OR
                 as a single PKCS#7 encoded blob (in binary or base64 encoded format).                
            </comment>
            <comment line="437">
                Parses the data in the given input stream as a sequence of DER encoded
                 X.509 CRLs (in binary or base 64 encoded format) OR as a single PKCS#7
                 encoded blob (in binary or base 64 encoded format).                
            </comment>
            <javadoc line="41">
                This class defines a certificate factory for X.509 v3 certificates &amp;
                  certification paths, and X.509 v2 certificate revocation lists (CRLs).                
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
                <see>
                    java.security.cert.CertificateFactorySpi                    
                </see>
                <see>
                    java.security.cert.Certificate                    
                </see>
                <see>
                    java.security.cert.CertPath                    
                </see>
                <see>
                    java.security.cert.CRL                    
                </see>
                <see>
                    java.security.cert.X509Certificate                    
                </see>
                <see>
                    java.security.cert.X509CRL                    
                </see>
                <see>
                    sun.security.x509.X509CertImpl                    
                </see>
                <see>
                    sun.security.x509.X509CRLImpl                    
                </see>
            </javadoc>
            <declaration name="BEGIN_CERT" type="String" line="62"/>
            <declaration name="END_CERT" type="String" line="63"/>
            <declaration name="ENC_MAX_LENGTH" type="int" line="65"/>
            <declaration name="certCache" type="Cache" line="67"/>
            <declaration name="crlCache" type="Cache" line="68"/>
            <javadoc line="70">
                Generates an X.509 certificate object and initializes it with
                  the data read from the input stream &lt;code&gt;is&lt;/code&gt;.                
                <param>
                    is an input stream with the certificate data.                    
                </param>
                <return>
                    an X.509 certificate object initialized with the data
                      from the input stream.                    
                </return>
                <exception>
                    CertificateException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="engineGenerateCertificate" type="Certificate" line="83">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="86">
                    clear the caches (for debugging)                    
                </comment>
                <scope line="84"/>
                <scope line="90">
                    <declaration name="encoding" type="byte[]" line="91"/>
                    <scope line="92">
                        <declaration name="cert" type="X509CertImpl" line="93"/>
                        <scope line="94"/>
                    </scope>
                    <scope line="100"/>
                </scope>
                <scope line="103"/>
            </method>
            <javadoc line="109">
                Read from the stream until length bytes have been read or EOF has
                  been reached. Return the number of bytes actually read.                
            </javadoc>
            <method name="readFully" type="int" line="114">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="bout" type="ByteArrayOutputStream"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="read" type="int" line="115"/>
                <declaration name="buffer" type="byte[]" line="116"/>
                <scope line="117">
                    <declaration name="n" type="int" line="118"/>
                    <scope line="119"/>
                </scope>
            </method>
            <javadoc line="129">
                Return an interned X509CertImpl for the given certificate.
                  If the given X509Certificate or X509CertImpl is already present
                  in the cert cache, the cached object is returned. Otherwise,
                  if it is a X509Certificate, it is first converted to a X509CertImpl.
                  Then the X509CertImpl is added to the cache and returned.
                  Note that all certificates created via generateCertificate(InputStream)
                  are already interned and this method does not need to be called.
                  It is useful for certificates that cannot be created via
                  generateCertificate() and for converting other X509Certificate
                  implementations to an X509CertImpl.                
            </javadoc>
            <method name="intern" type="X509CertImpl" line="143">
                <params>
                    <param name="c" type="X509Certificate"/>
                </params>
                <scope line="144"/>
                <declaration name="isImpl" type="boolean" line="147"/>
                <declaration name="encoding" type="byte[]" line="148"/>
                <scope line="149"/>
                <scope line="151"/>
                <declaration name="newC" type="X509CertImpl" line="154"/>
                <scope line="155"/>
                <scope line="158"/>
                <scope line="160"/>
            </method>
            <javadoc line="168">
                Return an interned X509CRLImpl for the given certificate.
                  For more information, see intern(X509Certificate).                
            </javadoc>
            <method name="intern" type="X509CRLImpl" line="173">
                <params>
                    <param name="c" type="X509CRL"/>
                </params>
                <scope line="174"/>
                <declaration name="isImpl" type="boolean" line="177"/>
                <declaration name="encoding" type="byte[]" line="178"/>
                <scope line="179"/>
                <scope line="181"/>
                <declaration name="newC" type="X509CRLImpl" line="184"/>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="190"/>
            </method>
            <javadoc line="198">
                Get the X509CertImpl or X509CRLImpl from the cache.                
            </javadoc>
            <method name="getFromCache" type="Object" line="202">
                <params>
                    <param name="cache" type="Cache"/>
                    <param name="encoding" type="byte[]"/>
                </params>
                <declaration name="key" type="Object" line="203"/>
                <declaration name="value" type="Object" line="204"/>
            </method>
            <javadoc line="208">
                Add the X509CertImpl or X509CRLImpl to the cache.                
            </javadoc>
            <method name="addToCache" type="void" line="212">
                <params>
                    <param name="cache" type="Cache"/>
                    <param name="encoding" type="byte[]"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="213"/>
                <declaration name="key" type="Object" line="216"/>
            </method>
            <javadoc line="220">
                Generates a &lt;code&gt;CertPath&lt;/code&gt; object and initializes it with
                  the data read from the &lt;code&gt;InputStream&lt;/code&gt; inStream. The data
                  is assumed to be in the default encoding.                
                <param>
                    inStream an &lt;code&gt;InputStream&lt;/code&gt; containing the data                    
                </param>
                <return>
                    a &lt;code&gt;CertPath&lt;/code&gt; initialized with the data from the
                      &lt;code&gt;InputStream&lt;/code&gt;                    
                </return>
                <exception>
                    CertificateException if an exception occurs while decoding                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineGenerateCertPath" type="CertPath" line="233">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
                <scope line="234"/>
                <scope line="237">
                    <declaration name="encoding" type="byte[]" line="238"/>
                    <scope line="239"/>
                    <scope line="241"/>
                </scope>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Generates a &lt;code&gt;CertPath&lt;/code&gt; object and initializes it with
                  the data read from the &lt;code&gt;InputStream&lt;/code&gt; inStream. The data
                  is assumed to be in the specified encoding.                
                <param>
                    inStream an &lt;code&gt;InputStream&lt;/code&gt; containing the data                    
                </param>
                <param>
                    encoding the encoding used for the data                    
                </param>
                <return>
                    a &lt;code&gt;CertPath&lt;/code&gt; initialized with the data from the
                      &lt;code&gt;InputStream&lt;/code&gt;                    
                </return>
                <exception>
                    CertificateException if an exception occurs while decoding or
                      the encoding requested is not supported                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineGenerateCertPath" type="CertPath" line="264">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="encoding" type="String"/>
                </params>
                <scope line="265"/>
                <scope line="268">
                    <declaration name="data" type="byte[]" line="269"/>
                    <scope line="270"/>
                    <scope line="272"/>
                </scope>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Generates a &lt;code&gt;CertPath&lt;/code&gt; object and initializes it with
                  a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s.
                  &lt;p&gt;
                  The certificates supplied must be of a type supported by the
                  &lt;code&gt;CertificateFactory&lt;/code&gt;. They will be copied out of the supplied
                  &lt;code&gt;List&lt;/code&gt; object.                
                <param>
                    certificates a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s                    
                </param>
                <return>
                    a &lt;code&gt;CertPath&lt;/code&gt; initialized with the supplied list of
                      certificates                    
                </return>
                <exception>
                    CertificateException if an exception occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineGenerateCertPath" type="CertPath" line="297">
                <params>
                    <param name="certificates" type="List<? extends Certificate>"/>
                </params>
            </method>
            <javadoc line="301">
                Returns an iteration of the &lt;code&gt;CertPath&lt;/code&gt; encodings supported
                  by this certificate factory, with the default encoding first.
                  &lt;p&gt;
                  Attempts to modify the returned &lt;code&gt;Iterator&lt;/code&gt; via its
                  &lt;code&gt;remove&lt;/code&gt; method result in an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;Iterator&lt;/code&gt; over the names of the supported
                      &lt;code&gt;CertPath&lt;/code&gt; encodings (as &lt;code&gt;String&lt;/code&gt;s)                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineGetCertPathEncodings" type="Iterator<String>" line="313"/>
            <javadoc line="317">
                Returns a (possibly empty) collection view of X.509 certificates read
                  from the given input stream &lt;code&gt;is&lt;/code&gt;.                
                <param>
                    is the input stream with the certificates.                    
                </param>
                <return>
                    a (possibly empty) collection view of X.509 certificate objects
                      initialized with the data from the input stream.                    
                </return>
                <exception>
                    CertificateException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="engineGenerateCertificates" type="Collection<? extends java.security.cert.Certificate>" line="330">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="331"/>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <javadoc line="341">
                Generates an X.509 certificate revocation list (CRL) object and
                  initializes it with the data read from the given input stream
                  &lt;code&gt;is&lt;/code&gt;.                
                <param>
                    is an input stream with the CRL data.                    
                </param>
                <return>
                    an X.509 CRL object initialized with the data
                      from the input stream.                    
                </return>
                <exception>
                    CRLException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="engineGenerateCRL" type="CRL" line="355">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="358">
                    clear the cache (for debugging)                    
                </comment>
                <scope line="356"/>
                <scope line="361">
                    <declaration name="encoding" type="byte[]" line="362"/>
                    <scope line="363">
                        <declaration name="crl" type="X509CRLImpl" line="364"/>
                        <scope line="365"/>
                    </scope>
                    <scope line="371"/>
                </scope>
                <scope line="374"/>
            </method>
            <javadoc line="379">
                Returns a (possibly empty) collection view of X.509 CRLs read
                  from the given input stream &lt;code&gt;is&lt;/code&gt;.                
                <param>
                    is the input stream with the CRLs.                    
                </param>
                <return>
                    a (possibly empty) collection view of X.509 CRL objects
                      initialized with the data from the input stream.                    
                </return>
                <exception>
                    CRLException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="engineGenerateCRLs" type="Collection<? extends java.security.cert.CRL>" line="392">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="393"/>
                <scope line="396"/>
                <scope line="398"/>
            </method>
            <method name="parseX509orPKCS7Cert" type="Collection<? extends java.security.cert.Certificate>" line="411">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="421">
                    certs are optional in PKCS #7                    
                </comment>
                <comment line="425">
                    no crls provided                    
                </comment>
                <declaration name="coll" type="Collection&lt;X509CertImpl&gt;" line="412"/>
                <declaration name="data" type="byte[]" line="413"/>
                <scope line="414"/>
                <scope line="417">
                    <declaration name="pkcs7" type="PKCS7" line="418"/>
                    <declaration name="certs" type="X509Certificate[]" line="419"/>
                    <scope line="421"/>
                    <scope line="423"/>
                </scope>
                <scope line="427">
                    <scope line="428"/>
                </scope>
            </method>
            <method name="parseX509orPKCS7CRL" type="Collection<? extends java.security.cert.CRL>" line="444">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="454">
                    CRLs are optional in PKCS #7                    
                </comment>
                <comment line="458">
                    no crls provided                    
                </comment>
                <declaration name="coll" type="Collection&lt;X509CRLImpl&gt;" line="445"/>
                <declaration name="data" type="byte[]" line="446"/>
                <scope line="447"/>
                <scope line="450">
                    <declaration name="pkcs7" type="PKCS7" line="451"/>
                    <declaration name="crls" type="X509CRL[]" line="452"/>
                    <scope line="454"/>
                    <scope line="456"/>
                </scope>
                <scope line="460">
                    <scope line="461"/>
                </scope>
            </method>
            <javadoc line="469">
                Returns an ASN.1 SEQUENCE from a stream, which might be a BER-encoded
                  binary block or a PEM-style BASE64-encoded ASCII data. In the latter
                  case, it&apos;s de-BASE64&apos;ed before return.
                  After the reading, the input stream pointer is after the BER block, or
                  after the newline character after the -----END SOMETHING----- line.                
                <param>
                    is the InputStream                    
                </param>
                <returns>
                    byte block or null if end of stream                    
                </returns>
                <throws>
                    IOException If any parsing error                    
                </throws>
            </javadoc>
            <method name="readOneBlock" type="byte[]" line="481">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="484">
                    The first character of a BLOCK.                    
                </comment>
                <comment line="495">
                    Read BASE64 encoded data, might skip info at the beginning                    
                </comment>
                <comment line="499">
                    Step 1: Read until header is found                    
                </comment>
                <comment line="500">
                    count of consequent hyphens                    
                </comment>
                <comment line="501">
                    the char before hyphen                    
                </comment>
                <comment line="505">
                    We accept useless data after the last block,
                     say, empty lines.                    
                </comment>
                <comment line="520">
                    Step 2: Read the rest of header, determine the line end                    
                </comment>
                <comment line="548">
                    Step 3: Read the data                    
                </comment>
                <comment line="564">
                    Step 4: Consume the footer                    
                </comment>
                <comment line="568">
                    Add next == &apos;\n&apos; for maximum safety, in case endline
                     is not consistent.                    
                </comment>
                <declaration name="c" type="int" line="484"/>
                <scope line="485"/>
                <scope line="488">
                    <declaration name="bout" type="ByteArrayOutputStream" line="489"/>
                </scope>
                <scope line="493">
                    <declaration name="data" type="char[]" line="495"/>
                    <declaration name="pos" type="int" line="496"/>
                    <declaration name="hyphen" type="int" line="499"/>
                    <declaration name="last" type="int" line="500"/>
                    <scope line="501">
                        <declaration name="next" type="int" line="502"/>
                        <scope line="503"/>
                        <scope line="508"/>
                        <scope line="510"/>
                        <scope line="514"/>
                    </scope>
                    <declaration name="end" type="int" line="520"/>
                    <declaration name="header" type="StringBuffer" line="521"/>
                    <scope line="522">
                        <declaration name="next" type="int" line="523"/>
                        <scope line="524"/>
                        <scope line="527"/>
                        <scope line="531">
                            <scope line="533"/>
                            <scope line="536"/>
                            <scope line="538"/>
                        </scope>
                    </scope>
                    <scope line="548">
                        <declaration name="next" type="int" line="549"/>
                        <scope line="550"/>
                        <scope line="553">
                            <scope line="555"/>
                        </scope>
                        <scope line="558"/>
                    </scope>
                    <declaration name="footer" type="StringBuffer" line="564"/>
                    <scope line="565">
                        <declaration name="next" type="int" line="566"/>
                        <scope line="569"/>
                    </scope>
                    <declaration name="decoder" type="BASE64Decoder" line="577"/>
                </scope>
            </method>
            <method name="checkHeaderFooter" type="void" line="583">
                <params>
                    <param name="header" type="String"/>
                    <param name="footer" type="String"/>
                </params>
                <scope line="585"/>
                <scope line="589"/>
                <declaration name="headerType" type="String" line="592"/>
                <declaration name="footerType" type="String" line="593"/>
                <scope line="594"/>
            </method>
            <javadoc line="600">
                Read one BER data block. This method is aware of indefinite-length BER
                  encoding and will read all of the sub-sections in a recursive way                
                <param>
                    is    Read from this InputStream                    
                </param>
                <param>
                    bout  Write into this OutputStream                    
                </param>
                <param>
                    tag   Tag already read (-1 mean not read)                    
                </param>
                <returns>
                    The current tag, used to check EOC in indefinite-length BER                    
                </returns>
                <throws>
                    IOException Any parsing error                    
                </throws>
            </javadoc>
            <method name="readBERInternal" type="int" line="611">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="bout" type="ByteArrayOutputStream"/>
                    <param name="tag" type="int"/>
                </params>
                <comment line="614">
                    Not read before the call, read now                    
                </comment>
                <comment line="633">
                    Indefinite-length encoding                    
                </comment>
                <comment line="640">
                    EOC, end of indefinite-length section                    
                </comment>
                <comment line="673">
                    ignore longer length forms                    
                </comment>
                <scope line="613">
                    <scope line="615"/>
                    <scope line="618"/>
                </scope>
                <declaration name="n" type="int" line="624"/>
                <scope line="625"/>
                <declaration name="length" type="int" line="630"/>
                <scope line="632">
                    <scope line="633"/>
                    <scope line="637">
                        <declaration name="subTag" type="int" line="638"/>
                        <scope line="639"/>
                    </scope>
                </scope>
                <scope line="643">
                    <scope line="644"/>
                    <scope line="646">
                        <scope line="648"/>
                    </scope>
                    <scope line="652">
                        <declaration name="highByte" type="int" line="653"/>
                        <declaration name="lowByte" type="int" line="654"/>
                        <scope line="655"/>
                    </scope>
                    <scope line="661">
                        <declaration name="highByte" type="int" line="662"/>
                        <declaration name="midByte" type="int" line="663"/>
                        <declaration name="lowByte" type="int" line="664"/>
                        <scope line="665"/>
                    </scope>
                    <scope line="672"/>
                    <scope line="675"/>
                </scope>
            </method>
        </class>
    </source>