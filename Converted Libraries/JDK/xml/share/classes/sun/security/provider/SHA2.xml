<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider">
        <import package="sun.security.provider.ByteArrayAccess"/>
        <class name="SHA2" line="30">
            <extends class="DigestBase"/>
            <comment line="47">
                Constants for each round                
            </comment>
            <comment line="67">
                buffer used by implCompress()                
            </comment>
            <comment line="70">
                state of this object                
            </comment>
            <javadoc line="30">
                This class implements the Secure Hash Algorithm SHA-256 developed by
                  the National Institute of Standards and Technology along with the
                  National Security Agency.
                  &lt;p&gt;It implements java.security.MessageDigestSpi, and can be used
                  through Java Cryptography Architecture (JCA), as a pluggable
                  MessageDigest implementation.                
                <since>
                    1.4.2                    
                </since>
                <author>
                    Valerie Peng                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="ITERATION" type="int" line="45"/>
            <declaration name="ROUND_CONSTS" type="int[]" line="47"/>
            <declaration name="W" type="int[]" line="67"/>
            <declaration name="state" type="int[]" line="70"/>
            <javadoc line="72">
                Creates a new SHA object.                
            </javadoc>
            <method name="SHA2" type="constructor" line="75"/>
            <javadoc line="82">
                Creates a SHA2 object.with state (for cloning)                
            </javadoc>
            <method name="SHA2" type="constructor" line="85">
                <params>
                    <param name="base" type="SHA2"/>
                </params>
            </method>
            <method name="clone" type="Object" line="91"/>
            <javadoc line="95">
                Resets the buffers and hash value to start a new hash.                
            </javadoc>
            <method name="implReset" type="void" line="98"/>
            <method name="implDigest" type="void" line="109">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="ofs" type="int"/>
                </params>
                <declaration name="bitsProcessed" type="long" line="110"/>
                <declaration name="index" type="int" line="112"/>
                <declaration name="padLen" type="int" line="113"/>
            </method>
            <javadoc line="123">
                logical function ch(x,y,z) as defined in spec:                
                <return>
                    (x and y) xor ((complement x) and z)                    
                </return>
                <param>
                    x int                    
                </param>
                <param>
                    y int                    
                </param>
                <param>
                    z int                    
                </param>
            </javadoc>
            <method name="lf_ch" type="int" line="130">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="z" type="int"/>
                </params>
            </method>
            <javadoc line="134">
                logical function maj(x,y,z) as defined in spec:                
                <return>
                    (x and y) xor (x and z) xor (y and z)                    
                </return>
                <param>
                    x int                    
                </param>
                <param>
                    y int                    
                </param>
                <param>
                    z int                    
                </param>
            </javadoc>
            <method name="lf_maj" type="int" line="141">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="z" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                logical function R(x,s) - right shift                
                <return>
                    x right shift for s times                    
                </return>
                <param>
                    x int                    
                </param>
                <param>
                    s int                    
                </param>
            </javadoc>
            <method name="lf_R" type="int" line="151">
                <params>
                    <param name="x" type="int"/>
                    <param name="s" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                logical function S(x,s) - right rotation                
                <return>
                    x circular right shift for s times                    
                </return>
                <param>
                    x int                    
                </param>
                <param>
                    s int                    
                </param>
            </javadoc>
            <method name="lf_S" type="int" line="161">
                <params>
                    <param name="x" type="int"/>
                    <param name="s" type="int"/>
                </params>
            </method>
            <javadoc line="165">
                logical function sigma0(x) - xor of results of right rotations                
                <return>
                    S(x,2) xor S(x,13) xor S(x,22)                    
                </return>
                <param>
                    x int                    
                </param>
            </javadoc>
            <method name="lf_sigma0" type="int" line="170">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="174">
                logical function sigma1(x) - xor of results of right rotations                
                <return>
                    S(x,6) xor S(x,11) xor S(x,25)                    
                </return>
                <param>
                    x int                    
                </param>
            </javadoc>
            <method name="lf_sigma1" type="int" line="179">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="183">
                logical function delta0(x) - xor of results of right shifts/rotations                
                <return>
                    int                    
                </return>
                <param>
                    x int                    
                </param>
            </javadoc>
            <method name="lf_delta0" type="int" line="188">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                logical function delta1(x) - xor of results of right shifts/rotations                
                <return>
                    int                    
                </return>
                <param>
                    x int                    
                </param>
            </javadoc>
            <method name="lf_delta1" type="int" line="197">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="201">
                Process the current block to update the state variable state.                
            </javadoc>
            <method name="implCompress" type="void" line="204">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="ofs" type="int"/>
                </params>
                <comment line="207">
                    The first 16 ints are from the byte stream, compute the rest of                    
                </comment>
                <comment line="208">
                    the W[]&apos;s                    
                </comment>
                <scope line="209"/>
                <declaration name="a" type="int" line="214"/>
                <declaration name="b" type="int" line="215"/>
                <declaration name="c" type="int" line="216"/>
                <declaration name="d" type="int" line="217"/>
                <declaration name="e" type="int" line="218"/>
                <declaration name="f" type="int" line="219"/>
                <declaration name="g" type="int" line="220"/>
                <declaration name="h" type="int" line="221"/>
                <scope line="223">
                    <declaration name="T1" type="int" line="224"/>
                    <declaration name="T2" type="int" line="225"/>
                </scope>
            </method>
        </class>
    </source>