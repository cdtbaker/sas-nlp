<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <class name="AdjacencyList" line="6">
            <javadoc line="6">
                An AdjacencyList is used to store the history of certification paths
                  attempted in constructing a path from an initiator to a target. The
                  AdjacencyList is initialized with a &lt;code&gt;List&lt;/code&gt; of
                  &lt;code&gt;List&lt;/code&gt;s, where each sub-&lt;code&gt;List&lt;/code&gt; contains objects of
                  type &lt;code&gt;Vertex&lt;/code&gt;. A &lt;code&gt;Vertex&lt;/code&gt; describes one possible or
                  actual step in the chain building process, and the associated
                  &lt;code&gt;Certificate&lt;/code&gt;. Specifically, a &lt;code&gt;Vertex&lt;/code&gt; object
                  contains a &lt;code&gt;Certificate&lt;/code&gt; and an index value referencing the
                  next sub-list in the process. If the index value is -1 then this
                  &lt;code&gt;Vertex&lt;/code&gt; doesn&apos;t continue the attempted build path.
                  &lt;p&gt;
                  Example:
                  &lt;p&gt;
                  Attempted Paths:&lt;ul&gt;
                  &lt;li&gt;C1-&amp;gt;C2-&amp;gt;C3
                  &lt;li&gt;C1-&amp;gt;C4-&amp;gt;C5
                  &lt;li&gt;C1-&amp;gt;C4-&amp;gt;C6
                  &lt;li&gt;C1-&amp;gt;C4-&amp;gt;C7
                  &lt;li&gt;C1-&amp;gt;C8-&amp;gt;C9
                  &lt;li&gt;C1-&amp;gt;C10-&amp;gt;C11
                  &lt;/ul&gt;
                  &lt;p&gt;
                  AdjacencyList structure:&lt;ul&gt;
                  &lt;li&gt;AL[0] = C1,1
                  &lt;li&gt;AL[1] = C2,2   =&amp;gt;C4,3   =&amp;gt;C8,4     =&amp;gt;C10,5
                  &lt;li&gt;AL[2] = C3,-1
                  &lt;li&gt;AL[3] = C5,-1  =&amp;gt;C6,-1  =&amp;gt;C7,-1
                  &lt;li&gt;AL[4] = C9,-1
                  &lt;li&gt;AL[5] = C11,-1
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The iterator method returns objects of type &lt;code&gt;BuildStep&lt;/code&gt;, not
                  objects of type &lt;code&gt;Vertex&lt;/code&gt;.
                  A &lt;code&gt;BuildStep&lt;/code&gt; contains a &lt;code&gt;Vertex&lt;/code&gt; and a result code,
                  accessable via getResult method. There are five result values.
                  &lt;code&gt;POSSIBLE&lt;/code&gt; denotes that the current step represents a
                  &lt;code&gt;Certificate&lt;/code&gt; that the builder is considering at this point in
                  the build. &lt;code&gt;FOLLOW&lt;/code&gt; denotes a &lt;code&gt;Certificate&lt;/code&gt; (one of
                  those noted as &lt;code&gt;POSSIBLE&lt;/code&gt;) that the builder is using to try
                  extending the chain. &lt;code&gt;BACK&lt;/code&gt; represents that a
                  &lt;code&gt;FOLLOW&lt;/code&gt; was incorrect, and is being removed from the chain.
                  There is exactly one &lt;code&gt;FOLLOW&lt;/code&gt; for each &lt;code&gt;BACK&lt;/code&gt;. The
                  values &lt;code&gt;SUCCEED&lt;/code&gt; and &lt;code&gt;FAIL&lt;/code&gt; mean that we&apos;ve come to
                  the end of the build process, and there will not be any more entries in
                  the list.
                  &lt;p&gt;                
                <see>
                    sun.security.provider.certpath.BuildStep                    
                </see>
                <see>
                    sun.security.provider.certpath.Vertex<p>                    
                </see>
                <author>
                    seth proctor                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="mStepList" type="ArrayList&lt;BuildStep&gt;" line="59"/>
            <declaration name="mOrigList" type="List&lt;List&lt;Vertex&gt;&gt;" line="60"/>
            <javadoc line="61">
                Constructs a new &lt;code&gt;AdjacencyList&lt;/code&gt; based on the specified
                  &lt;code&gt;List&lt;/code&gt;. See the example above.                
                <param>
                    list a <code>List</code> of <code>List</code>s of
                      <code>Vertex</code> objects                    
                </param>
            </javadoc>
            <method name="AdjacencyList" type="constructor" line="67">
                <params>
                    <param name="list" type="List<List<Vertex>>"/>
                </params>
            </method>
            <javadoc line="72">
                Gets an &lt;code&gt;Iterator&lt;/code&gt; to iterate over the set of
                  &lt;code&gt;BuildStep&lt;/code&gt;s in build-order. Any attempts to change
                  the list through the remove method will fail.                
                <return>
                    an <code>Iterator</code> over the <code>BuildStep</code>s                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<BuildStep>" line="78"/>
            <javadoc line="81">
                Recursive, private method which actually builds the step list from
                  the given adjacency list. &lt;code&gt;Follow&lt;/code&gt; is the parent BuildStep
                  that we followed to get here, and if it&apos;s null, it means that we&apos;re
                  at the start.                
            </javadoc>
            <method name="buildList" type="boolean" line="87">
                <params>
                    <param name="theList" type="List<List<Vertex>>"/>
                    <param name="index" type="int"/>
                    <param name="follow" type="BuildStep"/>
                </params>
                <declaration name="l" type="List&lt;Vertex&gt;" line="88"/>
                <scope line="89">
                    <declaration name="allNegOne" type="boolean" line="90"/>
                    <declaration name="allXcps" type="boolean" line="91"/>
                    <scope line="92">
                        <scope line="93"/>
                    </scope>
                    <scope line="99">
                        <scope line="100"/>
                        <scope line="105">
                            <declaration name="possibles" type="List&lt;Vertex&gt;" line="106"/>
                            <scope line="107"/>
                            <scope line="110"/>
                            <scope line="113"/>
                        </scope>
                    </scope>
                    <scope line="119">
                        <declaration name="success" type="boolean" line="120"/>
                        <scope line="121">
                            <scope line="122">
                                <scope line="123">
                                    <declaration name="bs" type="BuildStep" line="124"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="130"/>
                        <scope line="133"/>
                    </scope>
                </scope>
                <scope line="140"/>
            </method>
            <javadoc line="144">
                Prints out a string representation of this AdjacencyList.                
                <return>
                    String representation                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="148">
                <declaration name="out" type="String" line="149"/>
                <declaration name="i" type="int" line="150"/>
                <scope line="151">
                    <scope line="153">
                        <scope line="154"/>
                        <scope line="158"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>