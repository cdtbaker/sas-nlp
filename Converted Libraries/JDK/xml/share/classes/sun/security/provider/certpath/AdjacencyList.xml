<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <class name="AdjacencyList" line="34">
            <comment line="90">
                the actual set of steps the AdjacencyList represents                
            </comment>
            <comment line="93">
                the original list, just for the toString method                
            </comment>
            <javadoc line="34">
                An AdjacencyList is used to store the history of certification paths
                  attempted in constructing a path from an initiator to a target. The
                  AdjacencyList is initialized with a &lt;code&gt;List&lt;/code&gt; of
                  &lt;code&gt;List&lt;/code&gt;s, where each sub-&lt;code&gt;List&lt;/code&gt; contains objects of
                  type &lt;code&gt;Vertex&lt;/code&gt;. A &lt;code&gt;Vertex&lt;/code&gt; describes one possible or
                  actual step in the chain building process, and the associated
                  &lt;code&gt;Certificate&lt;/code&gt;. Specifically, a &lt;code&gt;Vertex&lt;/code&gt; object
                  contains a &lt;code&gt;Certificate&lt;/code&gt; and an index value referencing the
                  next sub-list in the process. If the index value is -1 then this
                  &lt;code&gt;Vertex&lt;/code&gt; doesn&apos;t continue the attempted build path.
                  &lt;p&gt;
                  Example:
                  &lt;p&gt;
                  Attempted Paths:&lt;ul&gt;
                  &lt;li&gt;C1-&amp;gt;C2-&amp;gt;C3
                  &lt;li&gt;C1-&amp;gt;C4-&amp;gt;C5
                  &lt;li&gt;C1-&amp;gt;C4-&amp;gt;C6
                  &lt;li&gt;C1-&amp;gt;C4-&amp;gt;C7
                  &lt;li&gt;C1-&amp;gt;C8-&amp;gt;C9
                  &lt;li&gt;C1-&amp;gt;C10-&amp;gt;C11
                  &lt;/ul&gt;
                  &lt;p&gt;
                  AdjacencyList structure:&lt;ul&gt;
                  &lt;li&gt;AL[0] = C1,1
                  &lt;li&gt;AL[1] = C2,2   =&amp;gt;C4,3   =&amp;gt;C8,4     =&amp;gt;C10,5
                  &lt;li&gt;AL[2] = C3,-1
                  &lt;li&gt;AL[3] = C5,-1  =&amp;gt;C6,-1  =&amp;gt;C7,-1
                  &lt;li&gt;AL[4] = C9,-1
                  &lt;li&gt;AL[5] = C11,-1
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The iterator method returns objects of type &lt;code&gt;BuildStep&lt;/code&gt;, not
                  objects of type &lt;code&gt;Vertex&lt;/code&gt;.
                  A &lt;code&gt;BuildStep&lt;/code&gt; contains a &lt;code&gt;Vertex&lt;/code&gt; and a result code,
                  accessable via getResult method. There are five result values.
                  &lt;code&gt;POSSIBLE&lt;/code&gt; denotes that the current step represents a
                  &lt;code&gt;Certificate&lt;/code&gt; that the builder is considering at this point in
                  the build. &lt;code&gt;FOLLOW&lt;/code&gt; denotes a &lt;code&gt;Certificate&lt;/code&gt; (one of
                  those noted as &lt;code&gt;POSSIBLE&lt;/code&gt;) that the builder is using to try
                  extending the chain. &lt;code&gt;BACK&lt;/code&gt; represents that a
                  &lt;code&gt;FOLLOW&lt;/code&gt; was incorrect, and is being removed from the chain.
                  There is exactly one &lt;code&gt;FOLLOW&lt;/code&gt; for each &lt;code&gt;BACK&lt;/code&gt;. The
                  values &lt;code&gt;SUCCEED&lt;/code&gt; and &lt;code&gt;FAIL&lt;/code&gt; mean that we&apos;ve come to
                  the end of the build process, and there will not be any more entries in
                  the list.
                  &lt;p&gt;                
                <see>
                    sun.security.provider.certpath.BuildStep                    
                </see>
                <see>
                    sun.security.provider.certpath.Vertex<p>                    
                </see>
                <author>
                    seth proctor                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="mStepList" type="ArrayList&lt;BuildStep&gt;" line="90"/>
            <declaration name="mOrigList" type="List&lt;List&lt;Vertex&gt;&gt;" line="93"/>
            <javadoc line="95">
                Constructs a new &lt;code&gt;AdjacencyList&lt;/code&gt; based on the specified
                  &lt;code&gt;List&lt;/code&gt;. See the example above.                
                <param>
                    list a <code>List</code> of <code>List</code>s of
                      <code>Vertex</code> objects                    
                </param>
            </javadoc>
            <method name="AdjacencyList" type="constructor" line="102">
                <params>
                    <param name="list" type="List<List<Vertex>>"/>
                </params>
            </method>
            <javadoc line="108">
                Gets an &lt;code&gt;Iterator&lt;/code&gt; to iterate over the set of
                  &lt;code&gt;BuildStep&lt;/code&gt;s in build-order. Any attempts to change
                  the list through the remove method will fail.                
                <return>
                    an <code>Iterator</code> over the <code>BuildStep</code>s                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<BuildStep>" line="115"/>
            <javadoc line="119">
                Recursive, private method which actually builds the step list from
                  the given adjacency list. &lt;code&gt;Follow&lt;/code&gt; is the parent BuildStep
                  that we followed to get here, and if it&apos;s null, it means that we&apos;re
                  at the start.                
            </javadoc>
            <method name="buildList" type="boolean" line="126">
                <params>
                    <param name="theList" type="List<List<Vertex>>"/>
                    <param name="index" type="int"/>
                    <param name="follow" type="BuildStep"/>
                </params>
                <comment line="129">
                    Each time this method is called, we&apos;re examining a new list
                     from the global list. So, we have to start by getting the list
                     that contains the set of Vertexes we&apos;re considering.                    
                </comment>
                <comment line="135">
                    we&apos;re interested in the case where all indexes are -1...                    
                </comment>
                <comment line="137">
                    ...and in the case where every entry has a Throwable                    
                </comment>
                <comment line="142">
                    count an empty list the same as an index of -1...this
                     is to patch a bug somewhere in the builder                    
                </comment>
                <comment line="151">
                    every entry, regardless of the final use for it, is always
                     entered as a possible step before we take any actions                    
                </comment>
                <comment line="157">
                    There are two cases that we could be looking at here. We
                     may need to back up, or the build may have succeeded at
                     this point. This is based on whether or not any
                     exceptions were found in the list.                    
                </comment>
                <comment line="162">
                    we need to go back...see if this is the last one                    
                </comment>
                <comment line="171">
                    we succeeded...now the only question is which is the
                     successful step? If there&apos;s only one entry without
                     a throwable, then that&apos;s the successful step. Otherwise,
                     we&apos;ll have to make some guesses...                    
                </comment>
                <comment line="182">
                    real easy...we&apos;ve found the final Vertex                    
                </comment>
                <comment line="186">
                    ok...at this point, there is more than one Cert
                     which might be the succeed step...how do we know
                     which it is? I&apos;m going to assume that our builder
                     algorithm is good enough to know which is the
                     correct one, and put it first...but a FIXME goes
                     here anyway, and we should be comparing to the
                     target/initiator Cert...                    
                </comment>
                <comment line="200">
                    There&apos;s at least one thing that we can try before we give
                     up and go back. Run through the list now, and enter a new
                     BuildStep for each path that we try to follow. If none of
                     the paths we try produce a successful end, we&apos;re going to
                     have to back out ourselves.                    
                </comment>
                <comment line="209">
                    Note that we&apos;ll only find a SUCCEED case when we&apos;re
                     looking at the last possible path, so we don&apos;t need to
                     consider success in the while loop                    
                </comment>
                <comment line="215">
                    If the entry we&apos;re looking at doesn&apos;t have an
                     index of -1, and doesn&apos;t lead to an empty list,
                     then it&apos;s something we follow!                    
                </comment>
                <comment line="226">
                    We&apos;re already finished!                    
                </comment>
                <comment line="229">
                    We failed, and we&apos;ve exhausted all the paths that we
                     could take. The only choice is to back ourselves out.                    
                </comment>
                <comment line="243">
                    we&apos;ll never get here, but you know java...                    
                </comment>
                <declaration name="l" type="List&lt;Vertex&gt;" line="131"/>
                <scope line="133">
                    <declaration name="allNegOne" type="boolean" line="135"/>
                    <declaration name="allXcps" type="boolean" line="137"/>
                    <scope line="139">
                        <scope line="140"/>
                    </scope>
                    <scope line="155">
                        <scope line="160"/>
                        <scope line="169">
                            <declaration name="possibles" type="List&lt;Vertex&gt;" line="174"/>
                            <scope line="175"/>
                            <scope line="180"/>
                            <scope line="184"/>
                        </scope>
                    </scope>
                    <scope line="198">
                        <declaration name="success" type="boolean" line="204"/>
                        <scope line="206">
                            <scope line="212">
                                <scope line="213">
                                    <declaration name="bs" type="BuildStep" line="217"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="224"/>
                        <scope line="227"/>
                    </scope>
                </scope>
                <scope line="240"/>
            </method>
            <javadoc line="246">
                Prints out a string representation of this AdjacencyList.                
                <return>
                    String representation                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="251">
                <declaration name="out" type="String" line="252"/>
                <declaration name="i" type="int" line="254"/>
                <scope line="255">
                    <scope line="258">
                        <scope line="259"/>
                        <scope line="263"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>