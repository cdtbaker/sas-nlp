<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.math.BigInteger"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Date"/>
        <import package="java.util.Set"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.SignatureException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateExpiredException"/>
        <import package="java.security.cert.CertificateNotYetValidException"/>
        <import package="java.security.cert.CertPathValidatorException"/>
        <import package="java.security.cert.CertPathValidatorException.BasicReason"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.PKIXCertPathChecker"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.cert.TrustAnchor"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="java.security.spec.DSAPublicKeySpec"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.util.Debug"/>
        <class name="BasicChecker" line="25">
            <extends class="PKIXCertPathChecker"/>
            <javadoc line="25">
                BasicChecker is a PKIXCertPathChecker that checks the basic information
                  on a PKIX certificate, namely the signature, timestamp, and subject/issuer
                  name chaining.                
                <since>
                    1.4                    
                </since>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="33"/>
            <declaration name="trustedPubKey" type="PublicKey" line="34"/>
            <declaration name="caName" type="X500Principal" line="35"/>
            <declaration name="testDate" type="Date" line="36"/>
            <declaration name="sigProvider" type="String" line="37"/>
            <declaration name="sigOnly" type="boolean" line="38"/>
            <declaration name="prevSubject" type="X500Principal" line="39"/>
            <declaration name="prevPubKey" type="PublicKey" line="40"/>
            <javadoc line="41">
                Constructor that initializes the input parameters.                
                <param>
                    anchor the anchor selected to validate the target certificate                    
                </param>
                <param>
                    testDate the time for which the validity of the certificate
                      should be determined                    
                </param>
                <param>
                    sigProvider the name of the signature provider                    
                </param>
                <param>
                    sigOnly true if only signature checking is to be done;
                      if false, all checks are done                    
                </param>
            </javadoc>
            <method name="BasicChecker" type="constructor" line="50">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="testDate" type="Date"/>
                    <param name="sigProvider" type="String"/>
                    <param name="sigOnly" type="boolean"/>
                </params>
                <scope line="51"/>
                <scope line="55"/>
            </method>
            <javadoc line="64">
                Initializes the internal state of the checker from parameters
                  specified in the constructor.                
            </javadoc>
            <method name="init" type="void" line="68">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="69"/>
                <scope line="73"/>
            </method>
            <method name="isForwardCheckingSupported" type="boolean" line="77"/>
            <method name="getSupportedExtensions" type="Set<String>" line="80"/>
            <javadoc line="83">
                Performs the signature, timestamp, and subject/issuer name chaining
                  checks on the certificate using its internal state. This method does
                  not remove any critical extensions from the Collection.                
                <param>
                    cert the Certificate                    
                </param>
                <param>
                    unresolvedCritExts a Collection of the unresolved critical
                      extensions                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if certificate
                      does not verify.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="93">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="unresolvedCritExts" type="Collection<String>"/>
                </params>
                <declaration name="currCert" type="X509Certificate" line="94"/>
                <scope line="95"/>
            </method>
            <javadoc line="102">
                Verifies the signature on the certificate using the previous public key                
                <param>
                    cert the Certificate                    
                </param>
                <param>
                    prevPubKey the previous PublicKey                    
                </param>
                <param>
                    sigProvider a String containing the signature provider                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if certificate
                      does not verify.                    
                </exception>
            </javadoc>
            <method name="verifySignature" type="void" line="110">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="prevPubKey" type="PublicKey"/>
                    <param name="sigProvider" type="String"/>
                </params>
                <declaration name="msg" type="String" line="111"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                Internal method to verify the timestamp on a certificate                
            </javadoc>
            <method name="verifyTimestamp" type="void" line="127">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="date" type="Date"/>
                </params>
                <declaration name="msg" type="String" line="128"/>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Internal method to check that cert has a valid DN to be next in a chain                
            </javadoc>
            <method name="verifyNameChaining" type="void" line="144">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="prevSubject" type="X500Principal"/>
                </params>
                <scope line="145">
                    <declaration name="msg" type="String" line="146"/>
                    <declaration name="currIssuer" type="X500Principal" line="148"/>
                    <scope line="149"/>
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="158">
                Internal method to manage state information at each iteration                
            </javadoc>
            <method name="updateState" type="void" line="161">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                </params>
                <declaration name="cKey" type="PublicKey" line="162"/>
                <scope line="163"/>
                <scope line="166"/>
            </method>
            <javadoc line="173">
                Internal method to create a new key with inherited key parameters                
                <param>
                    keyValueKey key from which to obtain key value                    
                </param>
                <param>
                    keyParamsKey key from which to obtain key parameters                    
                </param>
                <return>
                    new public key having value and parameters                    
                </return>
                <throws>
                    CertPathValidatorException if keys are not appropriate types
                      for this operation                    
                </throws>
            </javadoc>
            <method name="makeInheritedParamsKey" type="PublicKey" line="181">
                <params>
                    <param name="keyValueKey" type="PublicKey"/>
                    <param name="keyParamsKey" type="PublicKey"/>
                </params>
                <declaration name="usableKey" type="PublicKey" line="182"/>
                <declaration name="params" type="DSAParams" line="184"/>
                <scope line="186">
                    <declaration name="y" type="BigInteger" line="187"/>
                    <declaration name="kf" type="KeyFactory" line="188"/>
                    <declaration name="ks" type="DSAPublicKeySpec" line="189"/>
                </scope>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                return the public key associated with the last certificate processed                
                <return>
                    PublicKey the last public key processed                    
                </return>
            </javadoc>
            <method name="getPublicKey" type="PublicKey" line="201"/>
        </class>
    </source>