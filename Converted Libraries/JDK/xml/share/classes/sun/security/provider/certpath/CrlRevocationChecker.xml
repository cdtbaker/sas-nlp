<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Date"/>
        <import package="java.util.List"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="java.util.Iterator"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.CertPathValidatorException.BasicReason"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.AccessDescription"/>
        <import package="sun.security.x509.AuthorityInfoAccessExtension"/>
        <import package="sun.security.x509.CRLDistributionPointsExtension"/>
        <import package="sun.security.x509.DistributionPoint"/>
        <import package="sun.security.x509.GeneralName"/>
        <import package="sun.security.x509.GeneralNames"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.X509CertImpl"/>
        <import package="sun.security.x509.X509CRLEntryImpl"/>
        <class name="CrlRevocationChecker" line="30">
            <extends class="PKIXCertPathChecker"/>
            <javadoc line="30">
                CrlRevocationChecker is a &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; that checks
                  revocation status information on a PKIX certificate using CRLs obtained
                  from one or more &lt;code&gt;CertStores&lt;/code&gt;. This is based on section 6.3
                  of RFC 3280 (http://www.ietf.org/rfc/rfc3280.txt).                
                <since>
                    1.4                    
                </since>
                <author>
                    Seth Proctor                    
                </author>
                <author>
                    Steve Hanna                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="40"/>
            <declaration name="mAnchor" type="TrustAnchor" line="41"/>
            <declaration name="mStores" type="List&lt;CertStore&gt;" line="42"/>
            <declaration name="mSigProvider" type="String" line="43"/>
            <declaration name="mCurrentTime" type="Date" line="44"/>
            <declaration name="mPrevPubKey" type="PublicKey" line="45"/>
            <declaration name="mCRLSignFlag" type="boolean" line="46"/>
            <declaration name="mPossibleCRLs" type="HashSet&lt;X509CRL&gt;" line="47"/>
            <declaration name="mApprovedCRLs" type="HashSet&lt;X509CRL&gt;" line="48"/>
            <declaration name="mParams" type="PKIXParameters" line="49"/>
            <declaration name="mCrlSignUsage" type="boolean[]" line="50"/>
            <declaration name="ALL_REASONS" type="boolean[]" line="51"/>
            <declaration name="mOnlyEECert" type="boolean" line="52"/>
            <declaration name="MAX_CLOCK_SKEW" type="long" line="53"/>
            <javadoc line="54">
                Creates a &lt;code&gt;CrlRevocationChecker&lt;/code&gt;.                
                <param>
                    anchor anchor selected to validate the target certificate                    
                </param>
                <param>
                    params <code>PKIXParameters</code> to be used for
                      finding certificates and CRLs, etc.                    
                </param>
            </javadoc>
            <method name="CrlRevocationChecker" type="constructor" line="60">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="params" type="PKIXParameters"/>
                </params>
            </method>
            <javadoc line="63">
                Creates a &lt;code&gt;CrlRevocationChecker&lt;/code&gt;, allowing
                  extra certificates to be supplied beyond those contained
                  in the &lt;code&gt;PKIXParameters&lt;/code&gt;.                
                <param>
                    anchor anchor selected to validate the target certificate                    
                </param>
                <param>
                    params <code>PKIXParameters</code> to be used for
                      finding certificates and CRLs, etc.                    
                </param>
                <param>
                    certs a <code>Collection</code> of certificates
                      that may be useful, beyond those available
                      through <code>params</code> (<code>null</code>
                      if none)                    
                </param>
            </javadoc>
            <method name="CrlRevocationChecker" type="constructor" line="75">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="params" type="PKIXParameters"/>
                    <param name="certs" type="Collection<X509Certificate>"/>
                </params>
            </method>
            <method name="CrlRevocationChecker" type="constructor" line="78">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="params" type="PKIXParameters"/>
                    <param name="certs" type="Collection<X509Certificate>"/>
                    <param name="onlyEECert" type="boolean"/>
                </params>
                <scope line="83">
                    <scope line="84"/>
                    <scope line="87">
                        <scope line="88"/>
                    </scope>
                </scope>
                <declaration name="testDate" type="Date" line="93"/>
            </method>
            <javadoc line="98">
                Initializes the internal state of the checker from parameters
                  specified in the constructor                
            </javadoc>
            <method name="init" type="void" line="102">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="103">
                    <scope line="104">
                        <scope line="105"/>
                        <scope line="108"/>
                    </scope>
                    <scope line="112"/>
                </scope>
                <scope line="117"/>
            </method>
            <method name="isForwardCheckingSupported" type="boolean" line="121"/>
            <method name="getSupportedExtensions" type="Set<String>" line="124"/>
            <javadoc line="127">
                Performs the revocation status check on the certificate using
                  its internal state.                
                <param>
                    cert the Certificate                    
                </param>
                <param>
                    unresolvedCritExts a Collection of the unresolved critical
                      extensions                    
                </param>
                <exception>
                    CertPathValidatorException Exception thrown if
                      certificate does not verify                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="136">
                <params>
                    <param name="cert" type="Certificate"/>
                    <param name="unresolvedCritExts" type="Collection<String>"/>
                </params>
                <declaration name="currCert" type="X509Certificate" line="137"/>
                <declaration name="cKey" type="PublicKey" line="139"/>
                <scope line="140"/>
            </method>
            <javadoc line="146">
                Performs the revocation status check on the certificate using
                  the provided state variables, as well as the constant internal
                  data.                
                <param>
                    currCert the Certificate                    
                </param>
                <param>
                    prevKey the previous PublicKey in the chain                    
                </param>
                <param>
                    signFlag a boolean as returned from the last call, or true
                      if this is the first cert in the chain                    
                </param>
                <return>
                    a boolean specifying if the cert is allowed to vouch for the
                      validity of a CRL for the next iteration                    
                </return>
                <exception>
                    CertPathValidatorException Exception thrown if
                      certificate does not verify.                    
                </exception>
            </javadoc>
            <method name="check" type="boolean" line="159">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="signFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="163">
                Checks that a cert can be used to verify a CRL.                
                <param>
                    currCert an X509Certificate to check                    
                </param>
                <return>
                    a boolean specifying if the cert is allowed to vouch for the
                      validity of a CRL                    
                </return>
            </javadoc>
            <method name="certCanSignCrl" type="boolean" line="169">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                </params>
                <declaration name="kbools" type="boolean[]" line="170"/>
                <scope line="171"/>
            </method>
            <javadoc line="176">
                Internal method to start the verification of a cert                
            </javadoc>
            <method name="verifyRevocationStatus" type="void" line="179">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="signFlag" type="boolean"/>
                    <param name="allowSeparateKey" type="boolean"/>
                </params>
            </method>
            <javadoc line="182">
                Internal method to start the verification of a cert                
                <param>
                    stackedCerts a <code>Set</code> of <code>X509Certificate</code>s>
                      whose revocation status depends on the
                      non-revoked status of this cert. To avoid
                      circular dependencies, we assume they're
                      revoked while checking the revocation
                      status of this cert.                    
                </param>
                <param>
                    trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s                    
                </param>
            </javadoc>
            <method name="verifyRevocationStatus" type="void" line="192">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="signFlag" type="boolean"/>
                    <param name="allowSeparateKey" type="boolean"/>
                    <param name="stackedCerts" type="Set<X509Certificate>"/>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                </params>
                <declaration name="msg" type="String" line="193"/>
                <scope line="194"/>
                <scope line="197">
                    <scope line="198"/>
                </scope>
                <scope line="203">
                    <scope line="204"/>
                </scope>
                <declaration name="reasonsMask" type="boolean[]" line="211"/>
                <scope line="212">
                    <declaration name="sel" type="X509CRLSelector" line="213"/>
                    <scope line="216">
                        <scope line="217"/>
                    </scope>
                    <declaration name="store" type="DistributionPointFetcher" line="221"/>
                </scope>
                <scope line="224">
                    <scope line="225"/>
                </scope>
                <scope line="230"/>
                <scope line="233"/>
                <scope line="236"/>
                <scope line="239">
                    <scope line="240"/>
                    <scope line="244"/>
                </scope>
                <scope line="248">
                    <declaration name="sn" type="BigInteger" line="249"/>
                </scope>
                <declaration name="reasonCode" type="CRLReason" line="253"/>
                <declaration name="entry" type="X509CRLEntryImpl" line="254"/>
                <scope line="255">
                    <declaration name="e" type="X509CRLEntry" line="256"/>
                    <scope line="257">
                        <scope line="258"/>
                        <scope line="261"/>
                        <scope line="264"/>
                        <declaration name="unresCritExts" type="Set&lt;String&gt;" line="267"/>
                        <scope line="268">
                            <scope line="271">
                                <scope line="272"/>
                            </scope>
                        </scope>
                        <scope line="279"/>
                        <declaration name="t" type="Throwable" line="282"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="287">
                We have a cert whose revocation status couldn&apos;t be verified by
                  a CRL issued by the cert that issued the CRL. See if we can
                  find a valid CRL issued by a separate key that can verify the
                  revocation status of this certificate.
                  &lt;p&gt;
                  Note that this does not provide support for indirect CRLs,
                  only CRLs signed with a different key (but the same issuer
                  name) as the certificate being checked.                
                <param>
                    currCert the <code>X509Certificate</code> to be checked                    
                </param>
                <param>
                    prevKey the <code>PublicKey</code> that failed                    
                </param>
                <param>
                    signFlag <code>true</code> if that key was trusted to sign CRLs                    
                </param>
                <param>
                    stackedCerts a <code>Set</code> of <code>X509Certificate</code>s>
                      whose revocation status depends on the
                      non-revoked status of this cert. To avoid
                      circular dependencies, we assume they're
                      revoked while checking the revocation
                      status of this cert.                    
                </param>
                <throws>
                    CertPathValidatorException if the cert's revocation status
                      cannot be verified successfully with another key                    
                </throws>
            </javadoc>
            <method name="verifyWithSeparateSigningKey" type="void" line="308">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="signFlag" type="boolean"/>
                    <param name="stackedCerts" type="Set<X509Certificate>"/>
                </params>
                <declaration name="msg" type="String" line="309"/>
                <scope line="310"/>
                <scope line="313">
                    <scope line="314"/>
                </scope>
                <scope line="319"/>
            </method>
            <javadoc line="324">
                Tries to find a CertPath that establishes a key that can be
                  used to verify the revocation status of a given certificate.
                  Ignores keys that have previously been tried. Throws a
                  CertPathValidatorException if no such key could be found.                
                <param>
                    currCert the <code>X509Certificate</code> to be checked                    
                </param>
                <param>
                    prevKey the <code>PublicKey</code> of the certificate whose key
                      cannot be used to vouch for the CRL and should be ignored                    
                </param>
                <param>
                    stackedCerts a <code>Set</code> of <code>X509Certificate</code>s>
                      whose revocation status depends on the
                      establishment of this path.                    
                </param>
                <throws>
                    CertPathValidatorException on failure                    
                </throws>
            </javadoc>
            <method name="buildToNewKey" type="void" line="337">
                <params>
                    <param name="currCert" type="X509Certificate"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="stackedCerts" type="Set<X509Certificate>"/>
                </params>
                <scope line="338"/>
                <declaration name="badKeys" type="Set&lt;PublicKey&gt;" line="341"/>
                <scope line="342"/>
                <declaration name="certSel" type="X509CertSelector" line="345"/>
                <declaration name="newAnchors" type="Set&lt;TrustAnchor&gt;" line="348"/>
                <declaration name="builderParams" type="PKIXBuilderParameters" line="349"/>
                <scope line="350">
                    <scope line="354"/>
                    <scope line="357"/>
                </scope>
                <scope line="361">
                    <scope line="362"/>
                    <scope line="365"/>
                </scope>
                <scope line="378">
                    <declaration name="currCertImpl" type="X509CertImpl" line="379"/>
                    <scope line="380"/>
                    <scope line="383">
                        <scope line="384"/>
                    </scope>
                    <declaration name="aiaExt" type="AuthorityInfoAccessExtension" line="388"/>
                    <scope line="389"/>
                    <scope line="392">
                        <declaration name="adList" type="List&lt;AccessDescription&gt;" line="393"/>
                        <scope line="394">
                            <scope line="395">
                                <declaration name="cs" type="CertStore" line="396"/>
                                <scope line="397">
                                    <scope line="398"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="builder" type="CertPathBuilder" line="407"/>
                <scope line="408"/>
                <scope line="411"/>
                <scope line="414">
                    <scope line="415">
                        <scope line="416"/>
                        <declaration name="cpbr" type="PKIXCertPathBuilderResult" line="419"/>
                        <scope line="420"/>
                        <scope line="423"/>
                        <declaration name="ta" type="TrustAnchor" line="427"/>
                        <declaration name="prevKey2" type="PublicKey" line="428"/>
                        <scope line="429"/>
                        <declaration name="signFlag" type="boolean" line="432"/>
                        <declaration name="cpList" type="List&lt;? extends Certificate&gt;" line="433"/>
                        <scope line="434">
                            <scope line="435">
                                <declaration name="cert" type="X509Certificate" line="436"/>
                                <scope line="437"/>
                            </scope>
                        </scope>
                        <scope line="445"/>
                        <scope line="449"/>
                        <declaration name="newKey" type="PublicKey" line="452"/>
                        <scope line="453"/>
                        <scope line="457">
                            <scope line="458"/>
                        </scope>
                    </scope>
                    <scope line="464"/>
                    <scope line="467"/>
                </scope>
            </method>
            <class name="RejectKeySelector" line="472">
                <extends class="X509CertSelector"/>
                <declaration name="badKeySet" type="Set&lt;PublicKey&gt;" line="473"/>
                <javadoc line="474">
                    Creates a new &lt;code&gt;RejectKeySelector&lt;/code&gt;.                    
                    <param>
                        badPublicKeys a <code>Set</code> of
                          <code>PublicKey</code>s that
                          should be rejected (or <code>null</code>
                          if no such check should be done)                        
                    </param>
                </javadoc>
                <method name="RejectKeySelector" type="constructor" line="481">
                    <params>
                        <param name="badPublicKeys" type="Set<PublicKey>"/>
                    </params>
                </method>
                <javadoc line="484">
                    Decides whether a &lt;code&gt;Certificate&lt;/code&gt; should be selected.                    
                    <param>
                        cert the <code>Certificate</code> to be checked                        
                    </param>
                    <return>
                        <code>true</code> if the <code>Certificate</code> should be
                          selected, <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="match" type="boolean" line="490">
                    <params>
                        <param name="cert" type="Certificate"/>
                    </params>
                    <scope line="492"/>
                </method>
                <javadoc line="499">
                    Return a printable representation of the &lt;code&gt;CertSelector&lt;/code&gt;.                    
                    <return>
                        a <code>String</code> describing the contents of the
                          <code>CertSelector</code>                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="504">
                    <declaration name="sb" type="StringBuilder" line="505"/>
                </method>
            </class>
            <javadoc line="513">
                Internal method that verifies a set of possible_crls,
                  and sees if each is approved, based on the cert.                
                <param>
                    crls a set of possible CRLs to test for acceptability                    
                </param>
                <param>
                    cert the certificate whose revocation status is being checked                    
                </param>
                <param>
                    signFlag <code>true</code> if prevKey was trusted to sign CRLs                    
                </param>
                <param>
                    prevKey the public key of the issuer of cert                    
                </param>
                <param>
                    reasonsMask the reason code mask                    
                </param>
                <param>
                    trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s>                    
                </param>
                <return>
                    a collection of approved crls (or an empty collection)                    
                </return>
            </javadoc>
            <method name="verifyPossibleCRLs" type="Collection<X509CRL>" line="524">
                <params>
                    <param name="crls" type="Set<X509CRL>"/>
                    <param name="cert" type="X509Certificate"/>
                    <param name="signFlag" type="boolean"/>
                    <param name="prevKey" type="PublicKey"/>
                    <param name="reasonsMask" type="boolean[]"/>
                    <param name="trustAnchors" type="Set<TrustAnchor>"/>
                </params>
                <scope line="525">
                    <declaration name="certImpl" type="X509CertImpl" line="526"/>
                    <scope line="527"/>
                    <declaration name="ext" type="CRLDistributionPointsExtension" line="530"/>
                    <declaration name="points" type="List&lt;DistributionPoint&gt;" line="531"/>
                    <scope line="532">
                        <declaration name="certIssuer" type="X500Name" line="533"/>
                        <declaration name="point" type="DistributionPoint" line="534"/>
                    </scope>
                    <scope line="537"/>
                    <declaration name="results" type="Set&lt;X509CRL&gt;" line="540"/>
                    <declaration name="dpf" type="DistributionPointFetcher" line="541"/>
                    <scope line="542">
                        <declaration name="point" type="DistributionPoint" line="543"/>
                        <scope line="544">
                            <scope line="545"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="552">
                    <scope line="553"/>
                </scope>
            </method>
        </class>
    </source>