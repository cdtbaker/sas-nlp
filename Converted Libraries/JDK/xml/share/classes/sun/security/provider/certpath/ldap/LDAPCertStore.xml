<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath.ldap">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.net.URI"/>
        <import package="java.util"/>
        <import package="javax.naming.Context"/>
        <import package="javax.naming.NamingEnumeration"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.NameNotFoundException"/>
        <import package="javax.naming.directory.Attribute"/>
        <import package="javax.naming.directory.Attributes"/>
        <import package="javax.naming.directory.BasicAttributes"/>
        <import package="javax.naming.directory.DirContext"/>
        <import package="javax.naming.directory.InitialDirContext"/>
        <import package="java.security"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.provider.certpath.X509CertificatePair"/>
        <import package="sun.security.util.Cache"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="LDAPCertStore" line="26">
            <extends class="CertStoreSpi"/>
            <javadoc line="26">
                A &lt;code&gt;CertStore&lt;/code&gt; that retrieves &lt;code&gt;Certificates&lt;/code&gt; and
                  &lt;code&gt;CRL&lt;/code&gt;s from an LDAP directory, using the PKIX LDAP V2 Schema
                  (RFC 2587):
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2587.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc2587.txt&lt;/a&gt;.
                  &lt;p&gt;
                  Before calling the {@link #engineGetCertificates engineGetCertificates} or{@link #engineGetCRLs engineGetCRLs} methods, the{@link #LDAPCertStore(CertStoreParameters)LDAPCertStore(CertStoreParameters)} constructor is called to create the
                  &lt;code&gt;CertStore&lt;/code&gt; and establish the DNS name and port of the LDAP
                  server from which &lt;code&gt;Certificate&lt;/code&gt;s and &lt;code&gt;CRL&lt;/code&gt;s will be
                  retrieved.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  As described in the javadoc for &lt;code&gt;CertStoreSpi&lt;/code&gt;, the
                  &lt;code&gt;engineGetCertificates&lt;/code&gt; and &lt;code&gt;engineGetCRLs&lt;/code&gt; methods
                  must be thread-safe. That is, multiple threads may concurrently
                  invoke these methods on a single &lt;code&gt;LDAPCertStore&lt;/code&gt; object
                  (or more than one) with no ill effects. This allows a
                  &lt;code&gt;CertPathBuilder&lt;/code&gt; to search for a CRL while simultaneously
                  searching for further certificates, for instance.
                  &lt;p&gt;
                  This is achieved by adding the &lt;code&gt;synchronized&lt;/code&gt; keyword to the
                  &lt;code&gt;engineGetCertificates&lt;/code&gt; and &lt;code&gt;engineGetCRLs&lt;/code&gt; methods.
                  &lt;p&gt;
                  This classes uses caching and requests multiple attributes at once to
                  minimize LDAP round trips. The cache is associated with the CertStore
                  instance. It uses soft references to hold the values to minimize impact
                  on footprint and currently has a maximum size of 750 attributes and a
                  30 second default lifetime.
                  &lt;p&gt;
                  We always request CA certificates, cross certificate pairs, and ARLs in
                  a single LDAP request when any one of them is needed. The reason is that
                  we typically need all of them anyway and requesting them in one go can
                  reduce the number of requests to a third. Even if we don&apos;t need them,
                  these attributes are typically small enough not to cause a noticeable
                  overhead. In addition, when the prefetchCRLs flag is true, we also request
                  the full CRLs. It is currently false initially but set to true once any
                  request for an ARL to the server returns an null value. The reason is
                  that CRLs could be rather large but are rarely used. This implementation
                  should improve performance in most cases.                
                <see>
                    java.security.cert.CertStore                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Steve Hanna                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="73"/>
            <declaration name="DEBUG" type="boolean" line="74"/>
            <declaration name="USER_CERT" type="String" line="75"/>
            <javadoc line="75">
                LDAP attribute identifiers.                
            </javadoc>
            <declaration name="CA_CERT" type="String" line="79"/>
            <declaration name="CROSS_CERT" type="String" line="80"/>
            <declaration name="CRL" type="String" line="81"/>
            <declaration name="ARL" type="String" line="82"/>
            <declaration name="DELTA_CRL" type="String" line="83"/>
            <declaration name="STRING0" type="String[]" line="84"/>
            <declaration name="BB0" type="byte[][]" line="85"/>
            <declaration name="EMPTY_ATTRIBUTES" type="Attributes" line="86"/>
            <declaration name="DEFAULT_CACHE_SIZE" type="int" line="87"/>
            <declaration name="DEFAULT_CACHE_LIFETIME" type="int" line="88"/>
            <declaration name="LIFETIME" type="int" line="89"/>
            <declaration name="PROP_LIFETIME" type="String" line="90"/>
            <scope line="91">
                <declaration name="s" type="String" line="92"/>
                <scope line="93"/>
                <scope line="96"/>
            </scope>
            <declaration name="cf" type="CertificateFactory" line="100"/>
            <javadoc line="100">
                The CertificateFactory used to decode certificates from
                  their binary stored form.                
            </javadoc>
            <declaration name="ctx" type="DirContext" line="105"/>
            <javadoc line="105">
                The JNDI directory context.                
            </javadoc>
            <declaration name="prefetchCRLs" type="boolean" line="109"/>
            <javadoc line="109">
                Flag indicating whether we should prefetch CRLs.                
            </javadoc>
            <declaration name="valueCache" type="Cache" line="113"/>
            <declaration name="cacheHits" type="int" line="114"/>
            <declaration name="cacheMisses" type="int" line="115"/>
            <declaration name="requests" type="int" line="116"/>
            <javadoc line="117">
                Creates a &lt;code&gt;CertStore&lt;/code&gt; with the specified parameters.
                  For this class, the parameters object must be an instance of
                  &lt;code&gt;LDAPCertStoreParameters&lt;/code&gt;.                
                <param>
                    params the algorithm parameters                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if params is not an
                      instance of &lt;code&gt;LDAPCertStoreParameters&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="LDAPCertStore" type="constructor" line="125">
                <params>
                    <param name="params" type="CertStoreParameters"/>
                </params>
                <declaration name="lparams" type="LDAPCertStoreParameters" line="128"/>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="136"/>
                <scope line="139"/>
                <scope line="142"/>
            </method>
            <declaration name="certStoreCache" type="Cache" line="146"/>
            <javadoc line="146">
                Returns an LDAP CertStore. This method consults a cache of
                  CertStores (shared per JVM) using the LDAP server/port as a key.                
            </javadoc>
            <method name="getInstance" type="CertStore" line="151">
                <params>
                    <param name="params" type="LDAPCertStoreParameters"/>
                </params>
                <declaration name="lcs" type="CertStore" line="152"/>
                <scope line="153"/>
                <scope line="157">
                    <scope line="158"/>
                </scope>
            </method>
            <javadoc line="164">
                Create InitialDirContext.                
                <param>
                    server Server DNS name hosting LDAP service                    
                </param>
                <param>
                    port   Port at which server listens for requests                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if creation fails                    
                </throws>
            </javadoc>
            <method name="createInitialDirContext" type="void" line="170">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="url" type="String" line="171"/>
                <declaration name="env" type="Hashtable&amp;lt;String,Object&amp;gt;" line="172"/>
                <scope line="175">
                    <declaration name="currentEnv" type="Hashtable&amp;lt;?,?&amp;gt;" line="177"/>
                    <scope line="178"/>
                </scope>
                <scope line="182">
                    <scope line="183"/>
                    <declaration name="ee" type="Exception" line="187"/>
                </scope>
            </method>
            <class name="LDAPRequest" line="192">
                <javadoc line="192">
                    Private class encapsulating the actual LDAP operations and cache
                      handling. Use:
                      LDAPRequest request = new LDAPRequest(dn);
                      request.addRequestedAttribute(CROSS_CERT);
                      request.addRequestedAttribute(CA_CERT);
                      byte[][] crossValues = request.getValues(CROSS_CERT);
                      byte[][] caValues = request.getValues(CA_CERT);
                      At most one LDAP request is sent for each instance created. If all
                      getValues() calls can be satisfied from the cache, no request
                      is sent at all. If a request is sent, all requested attributes
                      are always added to the cache irrespective of whether the getValues()
                      method is called.                    
                </javadoc>
                <declaration name="name" type="String" line="207"/>
                <declaration name="valueMap" type="Map&amp;lt;String,byte[][]&amp;gt;" line="208"/>
                <declaration name="requestedAttributes" type="List&amp;lt;String&amp;gt;" line="209"/>
                <method name="LDAPRequest" type="constructor" line="210">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="getName" type="String" line="214"/>
                <method name="addRequestedAttribute" type="void" line="217">
                    <params>
                        <param name="attrId" type="String"/>
                    </params>
                    <scope line="218"/>
                </method>
                <javadoc line="223">
                    Gets one or more binary values from an attribute.                    
                    <param>
                        name          the location holding the attribute                        
                    </param>
                    <param>
                        attrId                the attribute identifier                        
                    </param>
                    <return>
                        an array of binary values (byte arrays)                        
                    </return>
                    <throws>
                        NamingException      if a naming exception occurs                        
                    </throws>
                </javadoc>
                <method name="getValues" type="byte[][]" line="230">
                    <params>
                        <param name="attrId" type="String"/>
                    </params>
                    <scope line="231"/>
                    <declaration name="cacheKey" type="String" line="234"/>
                    <declaration name="values" type="byte[][]" line="235"/>
                    <scope line="236"/>
                    <declaration name="attrs" type="Map&amp;lt;String,byte[][]&amp;gt;" line="241"/>
                </method>
                <javadoc line="245">
                    Get a map containing the values for this request. The first time
                      this method is called on an object, the LDAP request is sent,
                      the results parsed and added to a private map and also to the
                      cache of this LDAPCertStore. Subsequent calls return the private
                      map immediately.
                      The map contains an entry for each requested attribute. The
                      attribute name is the key, values are byte[][]. If there are no
                      values for that attribute, values are byte[0][].                    
                    <return>
                        the value Map                        
                    </return>
                    <throws>
                        NamingException      if a naming exception occurs                        
                    </throws>
                </javadoc>
                <method name="getValueMap" type="Map&lt;String,byte[][]&gt;" line="257">
                    <scope line="258"/>
                    <scope line="261">
                        <scope line="264"/>
                    </scope>
                    <declaration name="attrIds" type="String[]" line="269"/>
                    <declaration name="attrs" type="Attributes" line="270"/>
                    <scope line="271"/>
                    <scope line="274"/>
                    <scope line="277">
                        <declaration name="attr" type="Attribute" line="278"/>
                        <declaration name="values" type="byte[][]" line="279"/>
                    </scope>
                </method>
                <javadoc line="285">
                    Add the values to the cache.                    
                </javadoc>
                <method name="cacheAttribute" type="void" line="288">
                    <params>
                        <param name="attrId" type="String"/>
                        <param name="values" type="byte[][]"/>
                    </params>
                    <declaration name="cacheKey" type="String" line="289"/>
                </method>
                <javadoc line="292">
                    Get the values for the given attribute. If the attribute is null
                      or does not contain any values, a zero length byte array is
                      returned. NOTE that it is assumed that all values are byte arrays.                    
                </javadoc>
                <method name="getAttributeValues" type="byte[][]" line="297">
                    <params>
                        <param name="attr" type="Attribute"/>
                    </params>
                    <declaration name="values" type="byte[][]" line="298"/>
                    <scope line="299"/>
                    <scope line="302">
                        <declaration name="i" type="int" line="304"/>
                        <declaration name="enum_" type="NamingEnumeration&amp;lt;?&amp;gt;" line="305"/>
                        <scope line="306">
                            <declaration name="obj" type="Object" line="307"/>
                            <scope line="308">
                                <scope line="309"/>
                            </scope>
                            <declaration name="value" type="byte[]" line="313"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="getCertificates" type="Collection&lt;X509Certificate&gt;" line="320">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="id" type="String"/>
                    <param name="sel" type="X509CertSelector"/>
                </params>
                <declaration name="encodedCert" type="byte[][]" line="321"/>
                <scope line="322"/>
                <scope line="325"/>
                <declaration name="n" type="int" line="328"/>
                <scope line="329"/>
                <declaration name="certs" type="List&amp;lt;X509Certificate&amp;gt;" line="332"/>
                <scope line="333">
                    <declaration name="bais" type="ByteArrayInputStream" line="334"/>
                    <scope line="335">
                        <declaration name="cert" type="Certificate" line="336"/>
                        <scope line="337"/>
                    </scope>
                    <scope line="341">
                        <scope line="342">
                            <declaration name="encoder" type="HexDumpEncoder" line="344"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getCertPairs" type="Collection&lt;X509CertificatePair&gt;" line="351">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="id" type="String"/>
                </params>
                <declaration name="encodedCertPair" type="byte[][]" line="352"/>
                <scope line="353"/>
                <scope line="356"/>
                <declaration name="n" type="int" line="359"/>
                <scope line="360"/>
                <declaration name="certPairs" type="List&amp;lt;X509CertificatePair&amp;gt;" line="363"/>
                <scope line="364">
                    <scope line="365">
                        <declaration name="certPair" type="X509CertificatePair" line="366"/>
                    </scope>
                    <scope line="369">
                        <scope line="370">
                            <declaration name="encoder" type="HexDumpEncoder" line="372"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getMatchingCrossCerts" type="Collection&lt;X509Certificate&gt;" line="379">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="forward" type="X509CertSelector"/>
                    <param name="reverse" type="X509CertSelector"/>
                </params>
                <declaration name="certPairs" type="Collection&amp;lt;X509CertificatePair&amp;gt;" line="380"/>
                <declaration name="matchingCerts" type="ArrayList&amp;lt;X509Certificate&amp;gt;" line="381"/>
                <scope line="382">
                    <declaration name="cert" type="X509Certificate" line="383"/>
                    <scope line="384">
                        <scope line="386"/>
                    </scope>
                    <scope line="390">
                        <scope line="392"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="399">
                Returns a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s that
                  match the specified selector. If no &lt;code&gt;Certificate&lt;/code&gt;s
                  match the selector, an empty &lt;code&gt;Collection&lt;/code&gt; will be returned.
                  &lt;p&gt;
                  It is not practical to search every entry in the LDAP database for
                  matching &lt;code&gt;Certificate&lt;/code&gt;s. Instead, the &lt;code&gt;CertSelector&lt;/code&gt;
                  is examined in order to determine where matching &lt;code&gt;Certificate&lt;/code&gt;s
                  are likely to be found (according to the PKIX LDAPv2 schema, RFC 2587).
                  If the subject is specified, its directory entry is searched. If the
                  issuer is specified, its directory entry is searched. If neither the
                  subject nor the issuer are specified (or the selector is not an
                  &lt;code&gt;X509CertSelector&lt;/code&gt;), a &lt;code&gt;CertStoreException&lt;/code&gt; is
                  thrown.                
                <param>
                    selector a &lt;code&gt;CertSelector&lt;/code&gt; used to select which
                      &lt;code&gt;Certificate&lt;/code&gt;s should be returned.                    
                </param>
                <return>
                    a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s that
                      match the specified selector                    
                </return>
                <throws>
                    CertStoreException if an exception occurs                    
                </throws>
            </javadoc>
            <method name="engineGetCertificates" type="Collection&lt;X509Certificate&gt;" line="419">
                <params>
                    <param name="selector" type="CertSelector"/>
                </params>
                <scope line="420"/>
                <scope line="423"/>
                <scope line="426"/>
                <declaration name="xsel" type="X509CertSelector" line="429"/>
                <declaration name="basicConstraints" type="int" line="430"/>
                <declaration name="subject" type="String" line="431"/>
                <declaration name="issuer" type="String" line="432"/>
                <declaration name="certs" type="HashSet&amp;lt;X509Certificate&amp;gt;" line="433"/>
                <scope line="434"/>
                <scope line="437">
                    <scope line="438"/>
                    <declaration name="request" type="LDAPRequest" line="441"/>
                    <scope line="442">
                        <scope line="446"/>
                    </scope>
                    <scope line="450"/>
                    <scope line="453">
                        <scope line="455"/>
                        <scope line="459"/>
                    </scope>
                    <scope line="463">
                        <scope line="465"/>
                    </scope>
                </scope>
                <scope line="470">
                    <scope line="471"/>
                    <scope line="474"/>
                    <scope line="477"/>
                </scope>
                <scope line="481"/>
                <scope line="484">
                    <declaration name="request" type="LDAPRequest" line="485"/>
                    <scope line="489"/>
                    <scope line="493"/>
                    <scope line="497"/>
                </scope>
                <scope line="501"/>
            </method>
            <method name="getCRLs" type="Collection&lt;X509CRL&gt;" line="506">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="id" type="String"/>
                    <param name="sel" type="X509CRLSelector"/>
                </params>
                <declaration name="encodedCRL" type="byte[][]" line="507"/>
                <scope line="508"/>
                <scope line="511"/>
                <declaration name="n" type="int" line="514"/>
                <scope line="515"/>
                <declaration name="crls" type="List&amp;lt;X509CRL&amp;gt;" line="518"/>
                <scope line="519">
                    <scope line="520">
                        <declaration name="crl" type="CRL" line="521"/>
                        <scope line="522"/>
                    </scope>
                    <scope line="526">
                        <scope line="527">
                            <declaration name="encoder" type="HexDumpEncoder" line="529"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="536">
                Returns a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;CRL&lt;/code&gt;s that
                  match the specified selector. If no &lt;code&gt;CRL&lt;/code&gt;s
                  match the selector, an empty &lt;code&gt;Collection&lt;/code&gt; will be returned.
                  &lt;p&gt;
                  It is not practical to search every entry in the LDAP database for
                  matching &lt;code&gt;CRL&lt;/code&gt;s. Instead, the &lt;code&gt;CRLSelector&lt;/code&gt;
                  is examined in order to determine where matching &lt;code&gt;CRL&lt;/code&gt;s
                  are likely to be found (according to the PKIX LDAPv2 schema, RFC 2587).
                  If issuerNames or certChecking are specified, the issuer&apos;s directory
                  entry is searched. If neither issuerNames or certChecking are specified
                  (or the selector is not an &lt;code&gt;X509CRLSelector&lt;/code&gt;), a
                  &lt;code&gt;CertStoreException&lt;/code&gt; is thrown.                
                <param>
                    selector A &lt;code&gt;CRLSelector&lt;/code&gt; used to select which
                      &lt;code&gt;CRL&lt;/code&gt;s should be returned. Specify &lt;code&gt;null&lt;/code&gt;
                      to return all &lt;code&gt;CRL&lt;/code&gt;s.                    
                </param>
                <return>
                    A &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;CRL&lt;/code&gt;s that
                      match the specified selector                    
                </return>
                <throws>
                    CertStoreException if an exception occurs                    
                </throws>
            </javadoc>
            <method name="engineGetCRLs" type="Collection&lt;X509CRL&gt;" line="556">
                <params>
                    <param name="selector" type="CRLSelector"/>
                </params>
                <scope line="557"/>
                <scope line="560"/>
                <scope line="563"/>
                <declaration name="xsel" type="X509CRLSelector" line="566"/>
                <declaration name="crls" type="HashSet&amp;lt;X509CRL&amp;gt;" line="567"/>
                <declaration name="issuerNames" type="Collection&amp;lt;Object&amp;gt;" line="568"/>
                <declaration name="certChecking" type="X509Certificate" line="569"/>
                <scope line="570">
                    <declaration name="issuer" type="X500Principal" line="572"/>
                </scope>
                <scope line="575">
                    <scope line="577"/>
                </scope>
                <scope line="581">
                    <declaration name="issuerName" type="String" line="582"/>
                    <scope line="583">
                        <scope line="584">
                            <declaration name="issuer" type="X500Principal" line="585"/>
                        </scope>
                        <scope line="588"/>
                    </scope>
                    <scope line="592"/>
                    <declaration name="entryCRLs" type="Collection&amp;lt;X509CRL&amp;gt;" line="595"/>
                    <scope line="596">
                        <declaration name="request" type="LDAPRequest" line="597"/>
                        <scope line="601"/>
                        <scope line="604">
                            <scope line="606"/>
                            <scope line="609"/>
                        </scope>
                        <scope line="613">
                            <scope line="614"/>
                        </scope>
                    </scope>
                    <scope line="620">
                        <declaration name="request" type="LDAPRequest" line="621"/>
                    </scope>
                </scope>
            </method>
            <method name="getParameters" type="LDAPCertStoreParameters" line="629">
                <params>
                    <param name="uri" type="URI"/>
                </params>
                <declaration name="host" type="String" line="630"/>
                <scope line="631"/>
                <scope line="634">
                    <declaration name="port" type="int" line="635"/>
                </scope>
            </method>
            <class name="SunLDAPCertStoreParameters" line="639">
                <extends class="LDAPCertStoreParameters"/>
                <declaration name="hashCode" type="int" line="640"/>
                <method name="SunLDAPCertStoreParameters" type="constructor" line="641">
                    <params>
                        <param name="serverName" type="String"/>
                        <param name="port" type="int"/>
                    </params>
                </method>
                <method name="SunLDAPCertStoreParameters" type="constructor" line="644">
                    <params>
                        <param name="serverName" type="String"/>
                    </params>
                </method>
                <method name="SunLDAPCertStoreParameters" type="constructor" line="647"/>
                <method name="equals" type="boolean" line="650">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="651"/>
                    <declaration name="params" type="LDAPCertStoreParameters" line="654"/>
                </method>
                <method name="hashCode" type="int" line="657">
                    <scope line="658">
                        <declaration name="result" type="int" line="659"/>
                    </scope>
                </method>
            </class>
            <class name="LDAPCertSelector" line="667">
                <extends class="X509CertSelector"/>
                <declaration name="certSubject" type="X500Principal" line="668"/>
                <declaration name="selector" type="X509CertSelector" line="669"/>
                <declaration name="subject" type="X500Principal" line="670"/>
                <javadoc line="671">
                    Creates an LDAPCertSelector.                    
                    <param>
                        selector the X509CertSelector to wrap                        
                    </param>
                    <param>
                        certSubject the subject DN of the certificate that you want
                          to retrieve via LDAP                        
                    </param>
                    <param>
                        ldapDN the LDAP DN where the certificate is stored                        
                    </param>
                </javadoc>
                <method name="LDAPCertSelector" type="constructor" line="678">
                    <params>
                        <param name="selector" type="X509CertSelector"/>
                        <param name="certSubject" type="X500Principal"/>
                        <param name="ldapDN" type="String"/>
                    </params>
                </method>
                <method name="getCertificate" type="X509Certificate" line="683"/>
                <method name="getSerialNumber" type="BigInteger" line="686"/>
                <method name="getIssuer" type="X500Principal" line="689"/>
                <method name="getIssuerAsString" type="String" line="692"/>
                <method name="getIssuerAsBytes" type="byte[]" line="695"/>
                <method name="getSubject" type="X500Principal" line="698"/>
                <method name="getSubjectAsString" type="String" line="701"/>
                <method name="getSubjectAsBytes" type="byte[]" line="704"/>
                <method name="getSubjectKeyIdentifier" type="byte[]" line="707"/>
                <method name="getAuthorityKeyIdentifier" type="byte[]" line="710"/>
                <method name="getCertificateValid" type="Date" line="713"/>
                <method name="getPrivateKeyValid" type="Date" line="716"/>
                <method name="getSubjectPublicKeyAlgID" type="String" line="719"/>
                <method name="getSubjectPublicKey" type="PublicKey" line="722"/>
                <method name="getKeyUsage" type="boolean[]" line="725"/>
                <method name="getExtendedKeyUsage" type="Set&lt;String&gt;" line="728"/>
                <method name="getMatchAllSubjectAltNames" type="boolean" line="731"/>
                <method name="getSubjectAlternativeNames" type="Collection&lt;List&lt;?&gt;&gt;" line="734"/>
                <method name="getNameConstraints" type="byte[]" line="737"/>
                <method name="getBasicConstraints" type="int" line="740"/>
                <method name="getPolicy" type="Set&lt;String&gt;" line="743"/>
                <method name="getPathToNames" type="Collection&lt;List&lt;?&gt;&gt;" line="746"/>
                <method name="match" type="boolean" line="749">
                    <params>
                        <param name="cert" type="Certificate"/>
                    </params>
                    <declaration name="match" type="boolean" line="751"/>
                </method>
            </class>
            <class name="LDAPCRLSelector" line="756">
                <extends class="X509CRLSelector"/>
                <javadoc line="756">
                    This class has the same purpose as LDAPCertSelector except it is for
                      X.509 CRLs.                    
                </javadoc>
                <declaration name="selector" type="X509CRLSelector" line="761"/>
                <declaration name="certIssuers" type="Collection&amp;lt;X500Principal&amp;gt;" line="762"/>
                <declaration name="issuers" type="Collection&amp;lt;X500Principal&amp;gt;" line="763"/>
                <declaration name="issuerNames" type="HashSet&amp;lt;Object&amp;gt;" line="764"/>
                <javadoc line="765">
                    Creates an LDAPCRLSelector.                    
                    <param>
                        selector the X509CRLSelector to wrap                        
                    </param>
                    <param>
                        certIssuers the issuer DNs of the CRLs that you want
                          to retrieve via LDAP                        
                    </param>
                    <param>
                        ldapDN the LDAP DN where the CRL is stored                        
                    </param>
                </javadoc>
                <method name="LDAPCRLSelector" type="constructor" line="772">
                    <params>
                        <param name="selector" type="X509CRLSelector"/>
                        <param name="certIssuers" type="Collection&lt;X500Principal&gt;"/>
                        <param name="ldapDN" type="String"/>
                    </params>
                </method>
                <method name="getIssuers" type="Collection&lt;X500Principal&gt;" line="780"/>
                <method name="getIssuerNames" type="Collection&lt;Object&gt;" line="783"/>
                <method name="getMinCRL" type="BigInteger" line="786"/>
                <method name="getMaxCRL" type="BigInteger" line="789"/>
                <method name="getDateAndTime" type="Date" line="792"/>
                <method name="getCertificateChecking" type="X509Certificate" line="795"/>
                <method name="match" type="boolean" line="798">
                    <params>
                        <param name="crl" type="CRL"/>
                    </params>
                    <declaration name="match" type="boolean" line="800"/>
                </method>
            </class>
        </class>
    </source>