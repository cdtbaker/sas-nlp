<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath.ldap">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.net.URI"/>
        <import package="java.util"/>
        <import package="javax.naming.Context"/>
        <import package="javax.naming.NamingEnumeration"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.NameNotFoundException"/>
        <import package="javax.naming.directory.Attribute"/>
        <import package="javax.naming.directory.Attributes"/>
        <import package="javax.naming.directory.BasicAttributes"/>
        <import package="javax.naming.directory.DirContext"/>
        <import package="javax.naming.directory.InitialDirContext"/>
        <import package="java.security"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.provider.certpath.X509CertificatePair"/>
        <import package="sun.security.util.Cache"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="LDAPCertStore" line="55">
            <extends class="CertStoreSpi"/>
            <comment line="123">
                Constants for various empty values                
            </comment>
            <comment line="130">
                cache related constants                
            </comment>
            <comment line="409">
                Gets certificates from an attribute id and location in the LDAP
                 directory. Returns a Collection containing only the Certificates that
                 match the specified CertSelector.
                
                 @param name the location holding the attribute
                 @param id the attribute identifier
                 @param sel a CertSelector that the Certificates must match
                 @return a Collection of Certificates found
                 @throws CertStoreException       if an exception occurs                
            </comment>
            <comment line="459">
                Gets certificate pairs from an attribute id and location in the LDAP
                 directory.
                
                 @param name the location holding the attribute
                 @param id the attribute identifier
                 @return a Collection of X509CertificatePairs found
                 @throws CertStoreException       if an exception occurs                
            </comment>
            <comment line="507">
                Looks at certificate pairs stored in the crossCertificatePair attribute
                 at the specified location in the LDAP directory. Returns a Collection
                 containing all Certificates stored in the forward component that match
                 the forward CertSelector and all Certificates stored in the reverse
                 component that match the reverse CertSelector.
                 &lt;p&gt;
                 If either forward or reverse is null, all certificates from the
                 corresponding component will be rejected.
                
                 @param name the location to look in
                 @param forward the forward CertSelector (or null)
                 @param reverse the reverse CertSelector (or null)
                 @return a Collection of Certificates found
                 @throws CertStoreException       if an exception occurs                
            </comment>
            <comment line="686">
                Gets CRLs from an attribute id and location in the LDAP directory.
                 Returns a Collection containing only the CRLs that match the
                 specified CRLSelector.
                
                 @param name the location holding the attribute
                 @param id the attribute identifier
                 @param sel a CRLSelector that the CRLs must match
                 @return a Collection of CRLs found
                 @throws CertStoreException       if an exception occurs                
            </comment>
            <comment line="839">
                converts an LDAP URI into LDAPCertStoreParameters                
            </comment>
            <comment line="852">
                Subclass of LDAPCertStoreParameters with overridden equalshashCode
                 methods. This is necessary because the parameters are used as
                 keys in the LDAPCertStore cache.                
            </comment>
            <comment line="890">
                This inner class wraps an existing X509CertSelector and adds
                 additional criteria to match on when the certificate&apos;s subject is
                 different than the LDAP Distinguished Name entry. The LDAPCertStore
                 implementation uses the subject DN as the directory entry for
                 looking up certificates. This can be problematic if the certificates
                 that you want to fetch have a different subject DN than the entry
                 where they are stored. You could set the selector&apos;s subject to the
                 LDAP DN entry, but then the resulting match would fail to find the
                 desired certificates because the subject DNs would not match. This
                 class avoids that problem by introducing a certSubject which should
                 be set to the certificate&apos;s subject DN when it is different than
                 the LDAP DN.                
            </comment>
            <javadoc line="55">
                A &lt;code&gt;CertStore&lt;/code&gt; that retrieves &lt;code&gt;Certificates&lt;/code&gt; and
                  &lt;code&gt;CRL&lt;/code&gt;s from an LDAP directory, using the PKIX LDAP V2 Schema
                  (RFC 2587):
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2587.txt&quot;&gt;
                  http://www.ietf.org/rfc/rfc2587.txt&lt;/a&gt;.
                  &lt;p&gt;
                  Before calling the {@link #engineGetCertificates engineGetCertificates} or{@link #engineGetCRLs engineGetCRLs} methods, the{@link #LDAPCertStore(CertStoreParameters)LDAPCertStore(CertStoreParameters)} constructor is called to create the
                  &lt;code&gt;CertStore&lt;/code&gt; and establish the DNS name and port of the LDAP
                  server from which &lt;code&gt;Certificate&lt;/code&gt;s and &lt;code&gt;CRL&lt;/code&gt;s will be
                  retrieved.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;
                  As described in the javadoc for &lt;code&gt;CertStoreSpi&lt;/code&gt;, the
                  &lt;code&gt;engineGetCertificates&lt;/code&gt; and &lt;code&gt;engineGetCRLs&lt;/code&gt; methods
                  must be thread-safe. That is, multiple threads may concurrently
                  invoke these methods on a single &lt;code&gt;LDAPCertStore&lt;/code&gt; object
                  (or more than one) with no ill effects. This allows a
                  &lt;code&gt;CertPathBuilder&lt;/code&gt; to search for a CRL while simultaneously
                  searching for further certificates, for instance.
                  &lt;p&gt;
                  This is achieved by adding the &lt;code&gt;synchronized&lt;/code&gt; keyword to the
                  &lt;code&gt;engineGetCertificates&lt;/code&gt; and &lt;code&gt;engineGetCRLs&lt;/code&gt; methods.
                  &lt;p&gt;
                  This classes uses caching and requests multiple attributes at once to
                  minimize LDAP round trips. The cache is associated with the CertStore
                  instance. It uses soft references to hold the values to minimize impact
                  on footprint and currently has a maximum size of 750 attributes and a
                  30 second default lifetime.
                  &lt;p&gt;
                  We always request CA certificates, cross certificate pairs, and ARLs in
                  a single LDAP request when any one of them is needed. The reason is that
                  we typically need all of them anyway and requesting them in one go can
                  reduce the number of requests to a third. Even if we don&apos;t need them,
                  these attributes are typically small enough not to cause a noticeable
                  overhead. In addition, when the prefetchCRLs flag is true, we also request
                  the full CRLs. It is currently false initially but set to true once any
                  request for an ARL to the server returns an null value. The reason is
                  that CRLs could be rather large but are rarely used. This implementation
                  should improve performance in most cases.                
                <see>
                    java.security.cert.CertStore                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Steve Hanna                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="108"/>
            <declaration name="DEBUG" type="boolean" line="110"/>
            <declaration name="USER_CERT" type="String" line="112"/>
            <javadoc line="112">
                LDAP attribute identifiers.                
            </javadoc>
            <declaration name="CA_CERT" type="String" line="116"/>
            <declaration name="CROSS_CERT" type="String" line="117"/>
            <declaration name="CRL" type="String" line="118"/>
            <declaration name="ARL" type="String" line="119"/>
            <declaration name="DELTA_CRL" type="String" line="120"/>
            <declaration name="STRING0" type="String[]" line="123"/>
            <declaration name="BB0" type="byte[][]" line="125"/>
            <declaration name="EMPTY_ATTRIBUTES" type="Attributes" line="127"/>
            <declaration name="DEFAULT_CACHE_SIZE" type="int" line="130"/>
            <declaration name="DEFAULT_CACHE_LIFETIME" type="int" line="131"/>
            <declaration name="LIFETIME" type="int" line="133"/>
            <declaration name="PROP_LIFETIME" type="String" line="135"/>
            <scope line="138">
                <declaration name="s" type="String" line="139"/>
                <scope line="141"/>
                <scope line="143"/>
            </scope>
            <declaration name="cf" type="CertificateFactory" line="148"/>
            <javadoc line="148">
                The CertificateFactory used to decode certificates from
                  their binary stored form.                
            </javadoc>
            <declaration name="ctx" type="DirContext" line="153"/>
            <javadoc line="153">
                The JNDI directory context.                
            </javadoc>
            <declaration name="prefetchCRLs" type="boolean" line="158"/>
            <javadoc line="158">
                Flag indicating whether we should prefetch CRLs.                
            </javadoc>
            <declaration name="valueCache" type="Cache" line="163"/>
            <declaration name="cacheHits" type="int" line="165"/>
            <declaration name="cacheMisses" type="int" line="166"/>
            <declaration name="requests" type="int" line="167"/>
            <javadoc line="169">
                Creates a &lt;code&gt;CertStore&lt;/code&gt; with the specified parameters.
                  For this class, the parameters object must be an instance of
                  &lt;code&gt;LDAPCertStoreParameters&lt;/code&gt;.                
                <param>
                    params the algorithm parameters                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if params is not an
                      instance of <code>LDAPCertStoreParameters</code>                    
                </exception>
            </javadoc>
            <method name="LDAPCertStore" type="constructor" line="179">
                <params>
                    <param name="params" type="CertStoreParameters"/>
                </params>
                <comment line="188">
                    Create InitialDirContext needed to communicate with the server                    
                </comment>
                <comment line="191">
                    Create CertificateFactory for use later on                    
                </comment>
                <declaration name="lparams" type="LDAPCertStoreParameters" line="185"/>
                <scope line="191"/>
                <scope line="193"/>
                <scope line="197"/>
                <scope line="199"/>
                <scope line="201"/>
            </method>
            <declaration name="certStoreCache" type="Cache" line="206"/>
            <javadoc line="206">
                Returns an LDAP CertStore. This method consults a cache of
                  CertStores (shared per JVM) using the LDAP server/port as a key.                
            </javadoc>
            <method name="getInstance" type="CertStore" line="212">
                <params>
                    <param name="params" type="LDAPCertStoreParameters"/>
                </params>
                <declaration name="lcs" type="CertStore" line="213"/>
                <scope line="214"/>
                <scope line="217">
                    <scope line="218"/>
                </scope>
            </method>
            <javadoc line="225">
                Create InitialDirContext.                
                <param>
                    server Server DNS name hosting LDAP service                    
                </param>
                <param>
                    port   Port at which server listens for requests                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if creation fails                    
                </throws>
            </javadoc>
            <method name="createInitialDirContext" type="void" line="233">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <comment line="242">
                    By default, follow referrals unless application has
                     overridden property in an application resource file.                    
                </comment>
                <declaration name="url" type="String" line="234"/>
                <declaration name="env" type="Hashtable&lt;String,Object&gt;" line="235"/>
                <scope line="239">
                    <declaration name="currentEnv" type="Hashtable&lt;?,?&gt;" line="245"/>
                    <scope line="246"/>
                </scope>
                <scope line="249">
                    <scope line="250"/>
                    <declaration name="ee" type="Exception" line="255"/>
                </scope>
            </method>
            <class name="LDAPRequest" line="262">
                <comment line="925">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCertSelector.                    
                </comment>
                <comment line="1036">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCRLSelector.                    
                </comment>
                <javadoc line="262">
                    Private class encapsulating the actual LDAP operations and cache
                      handling. Use:
                      LDAPRequest request = new LDAPRequest(dn);
                      request.addRequestedAttribute(CROSS_CERT);
                      request.addRequestedAttribute(CA_CERT);
                      byte[][] crossValues = request.getValues(CROSS_CERT);
                      byte[][] caValues = request.getValues(CA_CERT);
                      At most one LDAP request is sent for each instance created. If all
                      getValues() calls can be satisfied from the cache, no request
                      is sent at all. If a request is sent, all requested attributes
                      are always added to the cache irrespective of whether the getValues()
                      method is called.                    
                </javadoc>
                <declaration name="name" type="String" line="280"/>
                <declaration name="valueMap" type="Map&lt;String,byte[][]&gt;" line="281"/>
                <declaration name="requestedAttributes" type="List&lt;String&gt;" line="282"/>
                <method name="LDAPRequest" type="constructor" line="284">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="getName" type="String" line="289"/>
                <method name="addRequestedAttribute" type="void" line="293">
                    <params>
                        <param name="attrId" type="String"/>
                    </params>
                    <scope line="294"/>
                </method>
                <javadoc line="300">
                    Gets one or more binary values from an attribute.                    
                    <param>
                        name          the location holding the attribute                        
                    </param>
                    <param>
                        attrId                the attribute identifier                        
                    </param>
                    <return>
                        an array of binary values (byte arrays)                        
                    </return>
                    <throws>
                        NamingException      if a naming exception occurs                        
                    </throws>
                </javadoc>
                <method name="getValues" type="byte[][]" line="308">
                    <params>
                        <param name="attrId" type="String"/>
                    </params>
                    <scope line="309"/>
                    <declaration name="cacheKey" type="String" line="313"/>
                    <declaration name="values" type="byte[][]" line="314"/>
                    <scope line="315"/>
                    <declaration name="attrs" type="Map&lt;String,byte[][]&gt;" line="320"/>
                </method>
                <javadoc line="325">
                    Get a map containing the values for this request. The first time
                      this method is called on an object, the LDAP request is sent,
                      the results parsed and added to a private map and also to the
                      cache of this LDAPCertStore. Subsequent calls return the private
                      map immediately.
                      The map contains an entry for each requested attribute. The
                      attribute name is the key, values are byte[][]. If there are no
                      values for that attribute, values are byte[0][].                    
                    <return>
                        the value Map                        
                    </return>
                    <throws>
                        NamingException      if a naming exception occurs                        
                    </throws>
                </javadoc>
                <method name="getValueMap" type="Map<String,byte[][]>" line="339">
                    <comment line="357">
                        name does not exist on this LDAP server
                         treat same as not attributes found                        
                    </comment>
                    <scope line="340"/>
                    <scope line="343">
                        <scope line="346"/>
                    </scope>
                    <declaration name="attrIds" type="String[]" line="351"/>
                    <declaration name="attrs" type="Attributes" line="352"/>
                    <scope line="353"/>
                    <scope line="355"/>
                    <scope line="360">
                        <declaration name="attr" type="Attribute" line="361"/>
                        <declaration name="values" type="byte[][]" line="362"/>
                    </scope>
                </method>
                <javadoc line="369">
                    Add the values to the cache.                    
                </javadoc>
                <method name="cacheAttribute" type="void" line="372">
                    <params>
                        <param name="attrId" type="String"/>
                        <param name="values" type="byte[][]"/>
                    </params>
                    <declaration name="cacheKey" type="String" line="373"/>
                </method>
                <javadoc line="377">
                    Get the values for the given attribute. If the attribute is null
                      or does not contain any values, a zero length byte array is
                      returned. NOTE that it is assumed that all values are byte arrays.                    
                </javadoc>
                <method name="getAttributeValues" type="byte[][]" line="383">
                    <params>
                        <param name="attr" type="Attribute"/>
                    </params>
                    <declaration name="values" type="byte[][]" line="384"/>
                    <scope line="385"/>
                    <scope line="387">
                        <declaration name="i" type="int" line="389"/>
                        <declaration name="enum_" type="NamingEnumeration&lt;?&gt;" line="390"/>
                        <scope line="391">
                            <declaration name="obj" type="Object" line="392"/>
                            <scope line="393">
                                <scope line="394"/>
                            </scope>
                            <declaration name="value" type="byte[]" line="399"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="getCertificates" type="Collection<X509Certificate>" line="420">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="id" type="String"/>
                    <param name="sel" type="X509CertSelector"/>
                </params>
                <comment line="423">
                                        
                </comment>
                <comment line="437">
                                        
                </comment>
                <declaration name="encodedCert" type="byte[][]" line="423"/>
                <scope line="424"/>
                <scope line="426"/>
                <declaration name="n" type="int" line="430"/>
                <scope line="431"/>
                <declaration name="certs" type="List&lt;X509Certificate&gt;" line="435"/>
                <scope line="437">
                    <declaration name="bais" type="ByteArrayInputStream" line="438"/>
                    <scope line="439">
                        <declaration name="cert" type="Certificate" line="440"/>
                        <scope line="441"/>
                    </scope>
                    <scope line="444">
                        <scope line="445">
                            <declaration name="encoder" type="HexDumpEncoder" line="448"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getCertPairs" type="Collection<X509CertificatePair>" line="468">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="id" type="String"/>
                </params>
                <comment line="471">
                                        
                </comment>
                <comment line="486">
                                        
                </comment>
                <declaration name="encodedCertPair" type="byte[][]" line="471"/>
                <scope line="472"/>
                <scope line="474"/>
                <declaration name="n" type="int" line="478"/>
                <scope line="479"/>
                <declaration name="certPairs" type="List&lt;X509CertificatePair&gt;" line="483"/>
                <scope line="486">
                    <scope line="487">
                        <declaration name="certPair" type="X509CertificatePair" line="488"/>
                    </scope>
                    <scope line="491">
                        <scope line="492">
                            <declaration name="encoder" type="HexDumpEncoder" line="496"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getMatchingCrossCerts" type="Collection<X509Certificate>" line="525">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="forward" type="X509CertSelector"/>
                    <param name="reverse" type="X509CertSelector"/>
                </params>
                <comment line="527">
                    Get the cert pairs                    
                </comment>
                <comment line="531">
                    Find Certificates that match and put them in a list                    
                </comment>
                <declaration name="certPairs" type="Collection&lt;X509CertificatePair&gt;" line="527"/>
                <declaration name="matchingCerts" type="ArrayList&lt;X509Certificate&gt;" line="531"/>
                <scope line="533">
                    <declaration name="cert" type="X509Certificate" line="534"/>
                    <scope line="535">
                        <scope line="537"/>
                    </scope>
                    <scope line="541">
                        <scope line="543"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="551">
                Returns a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s that
                  match the specified selector. If no &lt;code&gt;Certificate&lt;/code&gt;s
                  match the selector, an empty &lt;code&gt;Collection&lt;/code&gt; will be returned.
                  &lt;p&gt;
                  It is not practical to search every entry in the LDAP database for
                  matching &lt;code&gt;Certificate&lt;/code&gt;s. Instead, the &lt;code&gt;CertSelector&lt;/code&gt;
                  is examined in order to determine where matching &lt;code&gt;Certificate&lt;/code&gt;s
                  are likely to be found (according to the PKIX LDAPv2 schema, RFC 2587).
                  If the subject is specified, its directory entry is searched. If the
                  issuer is specified, its directory entry is searched. If neither the
                  subject nor the issuer are specified (or the selector is not an
                  &lt;code&gt;X509CertSelector&lt;/code&gt;), a &lt;code&gt;CertStoreException&lt;/code&gt; is
                  thrown.                
                <param>
                    selector a <code>CertSelector</code> used to select which
                      <code>Certificate</code>s should be returned.                    
                </param>
                <return>
                    a <code>Collection</code> of <code>Certificate</code>s that
                      match the specified selector                    
                </return>
                <throws>
                    CertStoreException if an exception occurs                    
                </throws>
            </javadoc>
            <method name="engineGetCertificates" type="Collection<X509Certificate>" line="573">
                <params>
                    <param name="selector" type="CertSelector"/>
                </params>
                <comment line="597">
                    basicConstraints:
                     -2: only EE certs accepted
                     -1: no check is done
                      0: any CA certificate accepted
                     &gt;1: certificate&apos;s basicConstraints extension pathlen must match                    
                </comment>
                <scope line="574"/>
                <scope line="579"/>
                <scope line="582"/>
                <declaration name="xsel" type="X509CertSelector" line="586"/>
                <declaration name="basicConstraints" type="int" line="587"/>
                <declaration name="subject" type="String" line="588"/>
                <declaration name="issuer" type="String" line="589"/>
                <declaration name="certs" type="HashSet&lt;X509Certificate&gt;" line="590"/>
                <scope line="591"/>
                <scope line="601">
                    <scope line="602"/>
                    <declaration name="request" type="LDAPRequest" line="606"/>
                    <scope line="607">
                        <scope line="611"/>
                    </scope>
                    <scope line="615"/>
                    <scope line="619">
                        <scope line="621"/>
                        <scope line="627"/>
                    </scope>
                    <scope line="633">
                        <scope line="635"/>
                    </scope>
                </scope>
                <scope line="641">
                    <scope line="642"/>
                    <scope line="646"/>
                    <scope line="649"/>
                </scope>
                <scope line="653"/>
                <scope line="657">
                    <declaration name="request" type="LDAPRequest" line="658"/>
                    <scope line="662"/>
                    <scope line="667"/>
                    <scope line="673"/>
                </scope>
                <scope line="679"/>
            </method>
            <method name="getCRLs" type="Collection<X509CRL>" line="697">
                <params>
                    <param name="request" type="LDAPRequest"/>
                    <param name="id" type="String"/>
                    <param name="sel" type="X509CRLSelector"/>
                </params>
                <comment line="700">
                                        
                </comment>
                <comment line="714">
                                        
                </comment>
                <declaration name="encodedCRL" type="byte[][]" line="700"/>
                <scope line="701"/>
                <scope line="703"/>
                <declaration name="n" type="int" line="707"/>
                <scope line="708"/>
                <declaration name="crls" type="List&lt;X509CRL&gt;" line="712"/>
                <scope line="714">
                    <scope line="715">
                        <declaration name="crl" type="CRL" line="716"/>
                        <scope line="717"/>
                    </scope>
                    <scope line="720">
                        <scope line="721">
                            <declaration name="encoder" type="HexDumpEncoder" line="724"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="733">
                Returns a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;CRL&lt;/code&gt;s that
                  match the specified selector. If no &lt;code&gt;CRL&lt;/code&gt;s
                  match the selector, an empty &lt;code&gt;Collection&lt;/code&gt; will be returned.
                  &lt;p&gt;
                  It is not practical to search every entry in the LDAP database for
                  matching &lt;code&gt;CRL&lt;/code&gt;s. Instead, the &lt;code&gt;CRLSelector&lt;/code&gt;
                  is examined in order to determine where matching &lt;code&gt;CRL&lt;/code&gt;s
                  are likely to be found (according to the PKIX LDAPv2 schema, RFC 2587).
                  If issuerNames or certChecking are specified, the issuer&apos;s directory
                  entry is searched. If neither issuerNames or certChecking are specified
                  (or the selector is not an &lt;code&gt;X509CRLSelector&lt;/code&gt;), a
                  &lt;code&gt;CertStoreException&lt;/code&gt; is thrown.                
                <param>
                    selector A <code>CRLSelector</code> used to select which
                      <code>CRL</code>s should be returned. Specify <code>null</code>
                      to return all <code>CRL</code>s.                    
                </param>
                <return>
                    A <code>Collection</code> of <code>CRL</code>s that
                      match the specified selector                    
                </return>
                <throws>
                    CertStoreException if an exception occurs                    
                </throws>
            </javadoc>
            <method name="engineGetCRLs" type="Collection<X509CRL>" line="755">
                <params>
                    <param name="selector" type="CRLSelector"/>
                </params>
                <comment line="761">
                    Set up selector and collection to hold CRLs                    
                </comment>
                <comment line="771">
                    Look in directory entry for issuer of cert we&apos;re checking.                    
                </comment>
                <comment line="779">
                    But if we don&apos;t know which cert we&apos;re checking, try the directory
                     entries of all acceptable CRL issuers                    
                </comment>
                <comment line="799">
                    If all we want is CA certs, try to get the (probably shorter) ARL                    
                </comment>
                <comment line="812">
                    no ARLs found. We assume that means that there are
                     no ARLs on this server at all and prefetch the CRLs.                    
                </comment>
                <comment line="826">
                    Otherwise, get the CRL
                     if certChecking is null, we don&apos;t know if we should look in ARL or CRL
                     attribute, so check both for matching CRLs.                    
                </comment>
                <scope line="756"/>
                <scope line="761"/>
                <scope line="764"/>
                <declaration name="xsel" type="X509CRLSelector" line="767"/>
                <declaration name="crls" type="HashSet&lt;X509CRL&gt;" line="768"/>
                <declaration name="issuerNames" type="Collection&lt;Object&gt;" line="771"/>
                <declaration name="certChecking" type="X509Certificate" line="772"/>
                <scope line="773">
                    <declaration name="issuer" type="X500Principal" line="775"/>
                </scope>
                <scope line="777">
                    <scope line="781"/>
                </scope>
                <scope line="786">
                    <declaration name="issuerName" type="String" line="787"/>
                    <scope line="788">
                        <scope line="789">
                            <declaration name="issuer" type="X500Principal" line="790"/>
                        </scope>
                        <scope line="792"/>
                    </scope>
                    <scope line="795"/>
                    <declaration name="entryCRLs" type="Collection&lt;X509CRL&gt;" line="799"/>
                    <scope line="800">
                        <declaration name="request" type="LDAPRequest" line="801"/>
                        <scope line="805"/>
                        <scope line="808">
                            <scope line="810"/>
                            <scope line="814"/>
                        </scope>
                        <scope line="817">
                            <scope line="818"/>
                        </scope>
                    </scope>
                    <scope line="828">
                        <declaration name="request" type="LDAPRequest" line="829"/>
                    </scope>
                </scope>
            </method>
            <method name="getParameters" type="LDAPCertStoreParameters" line="839">
                <params>
                    <param name="uri" type="URI"/>
                </params>
                <declaration name="host" type="String" line="840"/>
                <scope line="841"/>
                <scope line="843">
                    <declaration name="port" type="int" line="844"/>
                </scope>
            </method>
            <class name="SunLDAPCertStoreParameters" line="856">
                <extends class="LDAPCertStoreParameters"/>
                <comment line="925">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCertSelector.                    
                </comment>
                <comment line="1036">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCRLSelector.                    
                </comment>
                <declaration name="hashCode" type="int" line="859"/>
                <method name="SunLDAPCertStoreParameters" type="constructor" line="861">
                    <params>
                        <param name="serverName" type="String"/>
                        <param name="port" type="int"/>
                    </params>
                </method>
                <method name="SunLDAPCertStoreParameters" type="constructor" line="864">
                    <params>
                        <param name="serverName" type="String"/>
                    </params>
                </method>
                <method name="SunLDAPCertStoreParameters" type="constructor" line="867"/>
                <method name="equals" type="boolean" line="870">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="871"/>
                    <declaration name="params" type="LDAPCertStoreParameters" line="874"/>
                </method>
                <method name="hashCode" type="int" line="878">
                    <scope line="879">
                        <declaration name="result" type="int" line="880"/>
                    </scope>
                </method>
            </class>
            <class name="LDAPCertSelector" line="903">
                <extends class="X509CertSelector"/>
                <comment line="925">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCertSelector.                    
                </comment>
                <comment line="1036">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCRLSelector.                    
                </comment>
                <declaration name="certSubject" type="X500Principal" line="905"/>
                <declaration name="selector" type="X509CertSelector" line="906"/>
                <declaration name="subject" type="X500Principal" line="907"/>
                <javadoc line="909">
                    Creates an LDAPCertSelector.                    
                    <param>
                        selector the X509CertSelector to wrap                        
                    </param>
                    <param>
                        certSubject the subject DN of the certificate that you want
                          to retrieve via LDAP                        
                    </param>
                    <param>
                        ldapDN the LDAP DN where the certificate is stored                        
                    </param>
                </javadoc>
                <method name="LDAPCertSelector" type="constructor" line="918">
                    <params>
                        <param name="selector" type="X509CertSelector"/>
                        <param name="certSubject" type="X500Principal"/>
                        <param name="ldapDN" type="String"/>
                    </params>
                </method>
                <method name="getCertificate" type="X509Certificate" line="926"/>
                <method name="getSerialNumber" type="BigInteger" line="929"/>
                <method name="getIssuer" type="X500Principal" line="932"/>
                <method name="getIssuerAsString" type="String" line="935"/>
                <method name="getIssuerAsBytes" type="byte[]" line="938"/>
                <method name="getSubject" type="X500Principal" line="941">
                    <comment line="943">
                        return the ldap DN                        
                    </comment>
                </method>
                <method name="getSubjectAsString" type="String" line="945">
                    <comment line="947">
                        return the ldap DN                        
                    </comment>
                </method>
                <method name="getSubjectAsBytes" type="byte[]" line="949">
                    <comment line="951">
                        return the encoded ldap DN                        
                    </comment>
                </method>
                <method name="getSubjectKeyIdentifier" type="byte[]" line="953"/>
                <method name="getAuthorityKeyIdentifier" type="byte[]" line="956"/>
                <method name="getCertificateValid" type="Date" line="959"/>
                <method name="getPrivateKeyValid" type="Date" line="962"/>
                <method name="getSubjectPublicKeyAlgID" type="String" line="965"/>
                <method name="getSubjectPublicKey" type="PublicKey" line="968"/>
                <method name="getKeyUsage" type="boolean[]" line="971"/>
                <method name="getExtendedKeyUsage" type="Set<String>" line="974"/>
                <method name="getMatchAllSubjectAltNames" type="boolean" line="977"/>
                <method name="getSubjectAlternativeNames" type="Collection<List<?>>" line="980"/>
                <method name="getNameConstraints" type="byte[]" line="983"/>
                <method name="getBasicConstraints" type="int" line="986"/>
                <method name="getPolicy" type="Set<String>" line="989"/>
                <method name="getPathToNames" type="Collection<List<?>>" line="992"/>
                <method name="match" type="boolean" line="996">
                    <params>
                        <param name="cert" type="Certificate"/>
                    </params>
                    <comment line="998">
                        temporarily set the subject criterion to the certSubject
                         so that match will not reject the desired certificates                        
                    </comment>
                    <declaration name="match" type="boolean" line="1000"/>
                </method>
            </class>
            <class name="LDAPCRLSelector" line="1006">
                <extends class="X509CRLSelector"/>
                <comment line="925">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCertSelector.                    
                </comment>
                <comment line="1036">
                    we only override the get (accessor methods) since the set methods
                     will not be invoked by the code that uses this LDAPCRLSelector.                    
                </comment>
                <javadoc line="1006">
                    This class has the same purpose as LDAPCertSelector except it is for
                      X.509 CRLs.                    
                </javadoc>
                <declaration name="selector" type="X509CRLSelector" line="1012"/>
                <declaration name="certIssuers" type="Collection&lt;X500Principal&gt;" line="1013"/>
                <declaration name="issuers" type="Collection&lt;X500Principal&gt;" line="1014"/>
                <declaration name="issuerNames" type="HashSet&lt;Object&gt;" line="1015"/>
                <javadoc line="1017">
                    Creates an LDAPCRLSelector.                    
                    <param>
                        selector the X509CRLSelector to wrap                        
                    </param>
                    <param>
                        certIssuers the issuer DNs of the CRLs that you want
                          to retrieve via LDAP                        
                    </param>
                    <param>
                        ldapDN the LDAP DN where the CRL is stored                        
                    </param>
                </javadoc>
                <method name="LDAPCRLSelector" type="constructor" line="1027">
                    <params>
                        <param name="selector" type="X509CRLSelector"/>
                        <param name="certIssuers" type="Collection<X500Principal>"/>
                        <param name="ldapDN" type="String"/>
                    </params>
                </method>
                <method name="getIssuers" type="Collection<X500Principal>" line="1037">
                    <comment line="1039">
                        return the ldap DN                        
                    </comment>
                </method>
                <method name="getIssuerNames" type="Collection<Object>" line="1041">
                    <comment line="1043">
                        return the ldap DN                        
                    </comment>
                </method>
                <method name="getMinCRL" type="BigInteger" line="1045"/>
                <method name="getMaxCRL" type="BigInteger" line="1048"/>
                <method name="getDateAndTime" type="Date" line="1051"/>
                <method name="getCertificateChecking" type="X509Certificate" line="1054"/>
                <method name="match" type="boolean" line="1057">
                    <params>
                        <param name="crl" type="CRL"/>
                    </params>
                    <comment line="1059">
                        temporarily set the issuer criterion to the certIssuers
                         so that match will not reject the desired CRL                        
                    </comment>
                    <declaration name="match" type="boolean" line="1061"/>
                </method>
            </class>
        </class>
    </source>