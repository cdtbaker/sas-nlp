<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.provider.certpath">
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.PKIXReason"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Set"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.action.GetBooleanSecurityPropertyAction"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.security.util.Debug"/>
        <class name="SunCertPathBuilder" line="53">
            <extends class="CertPathBuilderSpi"/>
            <comment line="79">
                private objects shared by methods                
            </comment>
            <comment line="264">
                Private build reverse method.                
            </comment>
            <comment line="331">
                Private build forward method.                
            </comment>
            <comment line="360">
                This method performs a depth first search for a certification
                 path while building forward which meets the requirements set in
                 the parameters object.
                 It uses an adjacency list to store all certificates which were
                 tried (i.e. at one time added to the path - they may not end up in
                 the final path if backtracking occurs). This information can
                 be used later to debug or demo the build.
                
                 See &quot;Data Structure and Algorithms, by Aho, Hopcroft, and Ullman&quot;
                 for an explanation of the DFS algorithm.
                
                 @param dN the distinguished name being currently searched for certs
                 @param currentState the current PKIX validation state                
            </comment>
            <comment line="672">
                This method performs a depth first search for a certification
                 path while building reverse which meets the requirements set in
                 the parameters object.
                 It uses an adjacency list to store all certificates which were
                 tried (i.e. at one time added to the path - they may not end up in
                 the final path if backtracking occurs). This information can
                 be used later to debug or demo the build.
                
                 See &quot;Data Structure and Algorithms, by Aho, Hopcroft, and Ullman&quot;
                 for an explanation of the DFS algorithm.
                
                 @param dN the distinguished name being currently searched for certs
                 @param currentState the current PKIX validation state                
            </comment>
            <comment line="812">
                Adds a collection of matching certificates to the
                 adjacency list.                
            </comment>
            <javadoc line="53">
                This class is able to build certification paths in either the forward
                  or reverse directions.
                  &lt;p&gt; If successful, it returns a certification path which has succesfully
                  satisfied all the constraints and requirements specified in the
                  PKIXBuilderParameters object and has been validated according to the PKIX
                  path validation algorithm defined in RFC 3280.
                  &lt;p&gt; This implementation uses a depth-first search approach to finding
                  certification paths. If it comes to a point in which it cannot find
                  any more certificates leading to the target OR the path length is too long
                  it backtracks to previous paths until the target has been found or
                  all possible paths have been exhausted.
                  &lt;p&gt; This implementation is not thread-safe.                
                <since>
                    1.4                    
                </since>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Yassir Elley                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="76"/>
            <declaration name="buildParams" type="PKIXBuilderParameters" line="81"/>
            <declaration name="cf" type="CertificateFactory" line="82"/>
            <declaration name="pathCompleted" type="boolean" line="83"/>
            <declaration name="targetSubjectDN" type="X500Principal" line="84"/>
            <declaration name="policyTreeResult" type="PolicyNode" line="85"/>
            <declaration name="trustAnchor" type="TrustAnchor" line="86"/>
            <declaration name="finalPublicKey" type="PublicKey" line="87"/>
            <declaration name="targetSel" type="X509CertSelector" line="88"/>
            <declaration name="orderedCertStores" type="List&lt;CertStore&gt;" line="89"/>
            <declaration name="onlyEECert" type="boolean" line="90"/>
            <javadoc line="92">
                Create an instance of &lt;code&gt;SunCertPathBuilder&lt;/code&gt;.                
                <throws>
                    CertPathBuilderException if an error occurs                    
                </throws>
            </javadoc>
            <method name="SunCertPathBuilder" type="constructor" line="97">
                <scope line="98"/>
                <scope line="100"/>
            </method>
            <javadoc line="108">
                Attempts to build a certification path using the Sun build
                  algorithm from a trusted anchor(s) to a target subject, which must both
                  be specified in the input parameter set. By default, this method will
                  attempt to build in the forward direction. In order to build in the
                  reverse direction, the caller needs to pass in an instance of
                  SunCertPathBuilderParameters with the buildForward flag set to false.
                  &lt;p&gt;The certification path that is constructed is validated
                  according to the PKIX specification.                
                <param>
                    params the parameter set for building a path. Must be an instance
                      of <code>PKIXBuilderParameters</code>.                    
                </param>
                <return>
                    a certification path builder result.                    
                </return>
                <exception>
                    CertPathBuilderException Exception thrown if builder is
                      unable to build a complete certification path from the trusted anchor(s)
                      to the target subject.                    
                </exception>
                <throws>
                    InvalidAlgorithmParameterException if the given parameters are
                      inappropriate for this certification path builder.                    
                </throws>
            </javadoc>
            <method name="engineBuild" type="CertPathBuilderResult" line="129">
                <params>
                    <param name="params" type="CertPathParameters"/>
                </params>
                <comment line="149">
                                        
                </comment>
                <comment line="151">
                    Make sure that none of the trust anchors include name constraints
                     (not supported).                    
                </comment>
                <comment line="174">
                    reorder CertStores so that local CertStores are tried first                    
                </comment>
                <comment line="193">
                    try again                    
                </comment>
                <scope line="131"/>
                <scope line="135"/>
                <declaration name="buildForward" type="boolean" line="140"/>
                <scope line="141"/>
                <scope line="152">
                    <scope line="153"/>
                </scope>
                <declaration name="sel" type="CertSelector" line="159"/>
                <scope line="160"/>
                <scope line="167">
                    <declaration name="targetCert" type="X509Certificate" line="168"/>
                    <scope line="169"/>
                </scope>
                <scope line="177"/>
                <scope line="180"/>
                <declaration name="adjList" type="List&lt;List&lt;Vertex&gt;&gt;" line="185"/>
                <declaration name="result" type="CertPathBuilderResult" line="186"/>
                <scope line="188">
                    <scope line="189"/>
                    <scope line="195"/>
                </scope>
            </method>
            <method name="buildCertPath" type="CertPathBuilderResult" line="206">
                <params>
                    <param name="buildForward" type="boolean"/>
                    <param name="searchAllCertStores" type="boolean"/>
                    <param name="adjList" type="List<List<Vertex>>"/>
                </params>
                <comment line="209">
                    Init shared variables and build certification path                    
                </comment>
                <comment line="233">
                    construct SunCertPathBuilderResult                    
                </comment>
                <comment line="240">
                    we must return a certpath which has the target
                     as the first cert in the certpath - i.e. reverse
                     the certPathList                    
                </comment>
                <declaration name="certPathList" type="LinkedList&lt;X509Certificate&gt;" line="213"/>
                <scope line="215">
                    <scope line="216"/>
                    <scope line="218"/>
                </scope>
                <scope line="221">
                    <scope line="222"/>
                </scope>
                <scope line="233">
                    <scope line="234"/>
                </scope>
                <scope line="249">
                    <scope line="250"/>
                </scope>
            </method>
            <method name="buildReverse" type="void" line="268">
                <params>
                    <param name="adjacencyList" type="List<List<Vertex>>"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
                <comment line="277">
                                        
                </comment>
                <comment line="281">
                    Perform a search using each trust anchor, until a valid
                     path is found                    
                </comment>
                <comment line="288">
                                        
                </comment>
                <comment line="296">
                                        
                </comment>
                <comment line="303">
                    init the crl checker                    
                </comment>
                <comment line="312">
                    continue on error if more anchors to try                    
                </comment>
                <comment line="319">
                    break out of loop if search is successful                    
                </comment>
                <scope line="269"/>
                <declaration name="currentState" type="ReverseState" line="275"/>
                <declaration name="iter" type="Iterator&lt;TrustAnchor&gt;" line="284"/>
                <scope line="285">
                    <declaration name="anchor" type="TrustAnchor" line="286"/>
                    <scope line="288"/>
                    <scope line="306"/>
                    <scope line="310"/>
                </scope>
                <scope line="322"/>
            </method>
            <method name="buildForward" type="void" line="336">
                <params>
                    <param name="adjacencyList" type="List<List<Vertex>>"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                    <param name="searchAllCertStores" type="boolean"/>
                </params>
                <comment line="342">
                                        
                </comment>
                <comment line="346">
                                        
                </comment>
                <comment line="350">
                    init the crl checker                    
                </comment>
                <scope line="337"/>
                <declaration name="currentState" type="ForwardState" line="342"/>
            </method>
            <method name="depthFirstSearchForward" type="void" line="378">
                <params>
                    <param name="dN" type="X500Principal"/>
                    <param name="currentState" type="ForwardState"/>
                    <param name="builder" type="ForwardBuilder"/>
                    <param name="adjList" type="List<List<Vertex>>"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
                <comment line="380">
                    XXX This method should probably catch &amp; handle exceptions                    
                </comment>
                <comment line="387">
                    Find all the certificates issued to dN which
                     satisfy the PKIX certification path constraints.                    
                </comment>
                <comment line="398">
                    For each cert in the collection, verify anything
                     that hasn&apos;t been checked yet (signature, revocation, etc)
                     and check for loops. Call depthFirstSearchForward()
                     recursively for each good cert.                    
                </comment>
                <comment line="407">
                    Restore state to currentState each time through the loop.
                     This is important because some of the user-defined
                     checkers modify the state, which MUST be restored if
                     the cert eventually fails to lead to the target and
                     the next matching cert is tried.                    
                </comment>
                <comment line="429">
                    Certificate is good.
                     If cert completes the path,
                        process userCheckers that don&apos;t support forward checking
                        and process policies over whole path
                        and backtrack appropriately if there is a failure
                     else if cert does not complete the path,
                        add it to the path                    
                </comment>
                <comment line="448">
                    if the trust anchor selected is specified as a trusted
                     public key rather than a trusted cert, then verify this
                     cert (which is signed by the trusted public key), but
                     don&apos;t add it yet to the certPathList                    
                </comment>
                <comment line="480">
                    add the algorithm checker                    
                </comment>
                <comment line="498">
                    add the basic checker                    
                </comment>
                <comment line="506">
                    add the crl revocation checker                    
                </comment>
                <comment line="513">
                    Why we don&apos;t need BasicChecker and CrlRevocationChecker
                     if nextState.keyParamsNeeded() is false?                    
                </comment>
                <comment line="534">
                    The user specified
                     AlgorithmChecker may not be
                     able to set the trust anchor until now.                    
                </comment>
                <comment line="557">
                    Remove extensions from user checkers that support
                     forward checking. After this step, we will have
                     removed all extensions that all user checkers
                     are capable of processing.                    
                </comment>
                <comment line="607">
                    if the user specified a trusted public key rather than
                     trusted certs, then add this cert (which is signed by
                     the trusted public key) to the certPathList                    
                </comment>
                <comment line="614">
                    Save the trust anchor                    
                </comment>
                <comment line="617">
                    Extract and save the final target public key                    
                </comment>
                <comment line="638">
                                        
                </comment>
                <comment line="641">
                    Append an entry for cert in adjacency list and
                     set index for current vertex.                    
                </comment>
                <comment line="648">
                                        
                </comment>
                <comment line="652">
                    If path has been completed, return ASAP!                    
                </comment>
                <comment line="658">
                    If we get here, it means we have searched all possible
                     certs issued by the dN wo finding any matching certs.
                     This means we have to backtrack to the previous cert in
                     the path and try some other paths.                    
                </comment>
                <scope line="381"/>
                <declaration name="vertices" type="List&lt;Vertex&gt;" line="390"/>
                <scope line="392"/>
                <scope line="405">
                    <declaration name="nextState" type="ForwardState" line="413"/>
                    <declaration name="cert" type="X509Certificate" line="414"/>
                    <scope line="416"/>
                    <scope line="418">
                        <scope line="419"/>
                    </scope>
                    <scope line="437">
                        <declaration name="basicChecker" type="BasicChecker" line="439"/>
                        <declaration name="appendedCerts" type="ArrayList&lt;X509Certificate&gt;" line="444"/>
                        <scope line="453"/>
                        <declaration name="initExpPolSet" type="HashSet&lt;String&gt;" line="457"/>
                        <declaration name="rootNode" type="PolicyNodeImpl" line="460"/>
                        <declaration name="policyChecker" type="PolicyChecker" line="463"/>
                        <declaration name="userCheckers" type="List&lt;PKIXCertPathChecker&gt;" line="472"/>
                        <declaration name="mustCheck" type="int" line="475"/>
                        <scope line="484">
                            <declaration name="rootKey" type="PublicKey" line="485"/>
                            <scope line="486"/>
                            <declaration name="anchor" type="TrustAnchor" line="494"/>
                            <scope line="506"/>
                        </scope>
                        <scope line="515">
                            <declaration name="currCert" type="X509Certificate" line="516"/>
                            <declaration name="unresCritExts" type="Set&lt;String&gt;" line="520"/>
                            <scope line="522"/>
                            <scope line="526">
                                <declaration name="currChecker" type="PKIXCertPathChecker" line="527"/>
                                <scope line="529">
                                    <scope line="530">
                                        <scope line="537"/>
                                    </scope>
                                    <scope line="543"/>
                                    <scope line="545"/>
                                </scope>
                            </scope>
                            <scope line="564">
                                <scope line="565">
                                    <declaration name="suppExts" type="Set&lt;String&gt;" line="566"/>
                                    <scope line="568"/>
                                </scope>
                            </scope>
                            <scope line="574">
                                <scope line="594"/>
                            </scope>
                        </scope>
                        <scope line="619"/>
                        <scope line="621">
                            <declaration name="finalCert" type="Certificate" line="622"/>
                            <scope line="623"/>
                            <scope line="625"/>
                        </scope>
                    </scope>
                    <scope line="633"/>
                    <scope line="654"/>
                    <scope line="656"/>
                </scope>
            </method>
            <method name="depthFirstSearchReverse" type="void" line="690">
                <params>
                    <param name="dN" type="X500Principal"/>
                    <param name="currentState" type="ReverseState"/>
                    <param name="builder" type="ReverseBuilder"/>
                    <param name="adjList" type="List<List<Vertex>>"/>
                    <param name="certPathList" type="LinkedList<X509Certificate>"/>
                </params>
                <comment line="696">
                    Find all the certificates issued by dN which
                     satisfy the PKIX certification path constraints.                    
                </comment>
                <comment line="706">
                    For each cert in the collection, verify anything
                     that hasn&apos;t been checked yet (signature, revocation, etc)
                     and check for loops. Call depthFirstSearchReverse()
                     recursively for each good cert.                    
                </comment>
                <comment line="713">
                    Restore state to currentState each time through the loop.
                     This is important because some of the user-defined
                     checkers modify the state, which MUST be restored if
                     the cert eventually fails to lead to the target and
                     the next matching cert is tried.                    
                </comment>
                <comment line="732">
                    Certificate is good, add it to the path (if it isn&apos;t a
                     self-signed cert) and update state                    
                </comment>
                <comment line="738">
                    save trust anchor                    
                </comment>
                <comment line="741">
                    Check if path is completed, return ASAP if so.                    
                </comment>
                <comment line="759">
                    Extract and save the final target public key                    
                </comment>
                <comment line="774">
                                        
                </comment>
                <comment line="777">
                    Append an entry for cert in adjacency list and
                     set index for current vertex.                    
                </comment>
                <comment line="784">
                                        
                </comment>
                <comment line="788">
                    If path has been completed, return ASAP!                    
                </comment>
                <comment line="794">
                    If we get here, it means we have searched all possible
                     certs issued by the dN wo finding any matching certs. This
                     means we have to backtrack to the previous cert in the path
                     and try some other paths.                    
                </comment>
                <declaration name="vertices" type="List&lt;Vertex&gt;" line="699"/>
                <scope line="711">
                    <declaration name="nextState" type="ReverseState" line="719"/>
                    <declaration name="cert" type="X509Certificate" line="720"/>
                    <scope line="721"/>
                    <scope line="723"/>
                    <scope line="743">
                        <declaration name="rootNode" type="PolicyNodeImpl" line="749"/>
                        <scope line="753"/>
                        <scope line="764"/>
                    </scope>
                    <scope line="790"/>
                    <scope line="792"/>
                </scope>
            </method>
            <method name="addVertices" type="List<Vertex>" line="816">
                <params>
                    <param name="certs" type="Collection<X509Certificate>"/>
                    <param name="adjList" type="List<List<Vertex>>"/>
                </params>
                <declaration name="l" type="List&lt;Vertex&gt;" line="817"/>
                <scope line="819">
                    <declaration name="v" type="Vertex" line="820"/>
                </scope>
            </method>
            <javadoc line="827">
                Returns true if trust anchor certificate matches specified
                  certificate constraints.                
            </javadoc>
            <method name="anchorIsTarget" type="boolean" line="831">
                <params>
                    <param name="anchor" type="TrustAnchor"/>
                    <param name="sel" type="X509CertSelector"/>
                </params>
                <declaration name="anchorCert" type="X509Certificate" line="832"/>
                <scope line="833"/>
            </method>
            <class name="CertStoreComparator" line="839">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="CertStore"/>
                    </type_params>
                </implements>
                <javadoc line="839">
                    Comparator that orders CertStores so that local CertStores come before
                      remote CertStores.                    
                </javadoc>
                <method name="compare" type="int" line="844">
                    <params>
                        <param name="store1" type="CertStore"/>
                        <param name="store2" type="CertStore"/>
                    </params>
                    <scope line="845"/>
                    <scope line="847"/>
                </method>
            </class>
            <javadoc line="853">
                Returns the target subject DN from the first X509Certificate that
                  is fetched that matches the specified X509CertSelector.                
            </javadoc>
            <method name="getTargetSubjectDN" type="X500Principal" line="858">
                <params>
                    <param name="stores" type="List<CertStore>"/>
                    <param name="targetSel" type="X509CertSelector"/>
                </params>
                <comment line="871">
                    ignore but log it                    
                </comment>
                <scope line="859">
                    <scope line="860">
                        <declaration name="targetCerts" type="Collection&lt;? extends Certificate&gt;" line="861"/>
                        <scope line="864">
                            <declaration name="targetCert" type="X509Certificate" line="865"/>
                        </scope>
                    </scope>
                    <scope line="869">
                        <scope line="871"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>