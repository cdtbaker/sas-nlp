<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <class name="ProtocolVersion" line="2">
            <implements interface="Comparable">
                <type_params>
                    <type_param name="ProtocolVersion"/>
                </type_params>
            </implements>
            <javadoc line="2">
                Type safe enum for an SSL/TLS protocol version. Instances are obtained
                  using the static factory methods or by referencing the static members
                  in this class. Member variables are final and can be accessed without
                  accessor methods.
                  There is only ever one instance per supported protocol version, this
                  means == can be used for comparision instead of equals() if desired.
                  Checks for a particular version number should generally take this form:
                  if (protocolVersion.v &gt;= ProtocolVersion.TLS10) {
                  // TLS 1.0 code goes here
                  } else {
                  // SSL 3.0 code here
                  }                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.4.1                    
                </since>
            </javadoc>
            <declaration name="LIMIT_MAX_VALUE" type="int" line="19"/>
            <declaration name="LIMIT_MIN_VALUE" type="int" line="20"/>
            <declaration name="NONE" type="ProtocolVersion" line="21"/>
            <declaration name="SSL20Hello" type="ProtocolVersion" line="22"/>
            <declaration name="SSL30" type="ProtocolVersion" line="23"/>
            <declaration name="TLS10" type="ProtocolVersion" line="24"/>
            <declaration name="TLS11" type="ProtocolVersion" line="25"/>
            <declaration name="TLS12" type="ProtocolVersion" line="26"/>
            <declaration name="FIPS" type="boolean" line="27"/>
            <declaration name="MIN" type="ProtocolVersion" line="28"/>
            <declaration name="MAX" type="ProtocolVersion" line="29"/>
            <declaration name="DEFAULT" type="ProtocolVersion" line="30"/>
            <declaration name="DEFAULT_HELLO" type="ProtocolVersion" line="31"/>
            <declaration name="v" type="int" line="32"/>
            <declaration name="major" type="byte" line="33"/>
            <declaration name="name" type="String" line="34"/>
            <method name="ProtocolVersion" type="constructor" line="35">
                <params>
                    <param name="v" type="int"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="valueOf" type="ProtocolVersion" line="41">
                <params>
                    <param name="v" type="int"/>
                </params>
                <scope line="42"/>
                <scope line="45"/>
                <scope line="48"/>
                <scope line="51"/>
                <scope line="54"/>
                <scope line="57">
                    <declaration name="major" type="int" line="58"/>
                    <declaration name="minor" type="int" line="59"/>
                </scope>
            </method>
            <javadoc line="63">
                Return a ProtocolVersion with the specified major and minor version
                  numbers. Never throws exceptions.                
            </javadoc>
            <method name="valueOf" type="ProtocolVersion" line="67">
                <params>
                    <param name="major" type="int"/>
                    <param name="minor" type="int"/>
                </params>
                <declaration name="v" type="int" line="70"/>
            </method>
            <javadoc line="73">
                Return a ProtocolVersion for the given name.                
                <exception>
                    IllegalArgumentException if name is null or does not
                      identify a supported protocol                    
                </exception>
            </javadoc>
            <method name="valueOf" type="ProtocolVersion" line="78">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="79"/>
                <scope line="82"/>
                <scope line="85"/>
                <scope line="88"/>
                <scope line="91"/>
                <scope line="94"/>
                <scope line="97"/>
                <scope line="100"/>
            </method>
            <method name="toString" type="String" line="104"/>
            <javadoc line="107">
                Compares this object with the specified object for order.                
            </javadoc>
            <method name="compareTo" type="int" line="110">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                </params>
            </method>
        </class>
    </source>