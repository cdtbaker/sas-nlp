<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="javax.net.ssl.SSLException"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="OutputRecord" line="6">
            <extends class="ByteArrayOutputStream"/>
            <implements interface="Record"/>
            <javadoc line="6">
                SSL 3.0 records, as written to a TCP stream.
                  Each record has a message area that starts out with data supplied by the
                  application.  It may grow/shrink due to compression and will be modified
                  in place for mac-ing and encryption.
                  Handshake records have additional needs, notably accumulation of a set
                  of hashes which are used to establish that handshaking was done right.
                  Handshake records usually have several handshake messages each, and we
                  need message-level control over what&apos;s hashed.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="handshakeHash" type="HandshakeHash" line="18"/>
            <declaration name="lastHashed" type="int" line="19"/>
            <declaration name="firstMessage" type="boolean" line="20"/>
            <declaration name="contentType" type="byte" line="21"/>
            <declaration name="protocolVersion" type="ProtocolVersion" line="22"/>
            <declaration name="helloVersion" type="ProtocolVersion" line="23"/>
            <declaration name="debug" type="Debug" line="24"/>
            <method name="OutputRecord" type="constructor" line="25">
                <params>
                    <param name="type" type="byte"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="OutputRecord" type="constructor" line="34">
                <params>
                    <param name="type" type="byte"/>
                </params>
            </method>
            <javadoc line="37">
                Get the size of the buffer we need for records of the specified
                  type.                
            </javadoc>
            <method name="recordSize" type="int" line="41">
                <params>
                    <param name="type" type="byte"/>
                </params>
                <scope line="42"/>
                <scope line="45"/>
            </method>
            <method name="setVersion" type="void" line="49">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                </params>
            </method>
            <method name="setHelloVersion" type="void" line="52">
                <params>
                    <param name="helloVersion" type="ProtocolVersion"/>
                </params>
            </method>
            <method name="reset" type="void" line="55"/>
            <method name="setHandshakeHash" type="void" line="60">
                <params>
                    <param name="handshakeHash" type="HandshakeHash"/>
                </params>
            </method>
            <method name="doHashes" type="void" line="64">
                <declaration name="len" type="int" line="65"/>
                <scope line="66"/>
            </method>
            <method name="hashInternal" type="void" line="71">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="72">
                    <scope line="73">
                        <declaration name="hd" type="HexDumpEncoder" line="74"/>
                    </scope>
                    <scope line="78"/>
                </scope>
            </method>
            <method name="isEmpty" type="boolean" line="84"/>
            <method name="isAlert" type="boolean" line="87">
                <params>
                    <param name="description" type="byte"/>
                </params>
                <scope line="88"/>
            </method>
            <method name="addMAC" type="void" line="93">
                <params>
                    <param name="signer" type="MAC"/>
                </params>
                <scope line="94"/>
                <scope line="97">
                    <declaration name="hash" type="byte[]" line="98"/>
                </scope>
            </method>
            <method name="encrypt" type="void" line="102">
                <params>
                    <param name="box" type="CipherBox"/>
                </params>
                <declaration name="len" type="int" line="103"/>
            </method>
            <method name="availableDataBytes" type="int" line="106">
                <declaration name="dataSize" type="int" line="107"/>
            </method>
            <method name="contentType" type="byte" line="110"/>
            <method name="write" type="void" line="113">
                <params>
                    <param name="s" type="OutputStream"/>
                </params>
                <scope line="114"/>
                <declaration name="length" type="int" line="117"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124">
                    <declaration name="v3Msg" type="byte[]" line="125"/>
                    <scope line="131"/>
                </scope>
                <scope line="135"/>
            </method>
            <method name="writeBuffer" type="void" line="146">
                <params>
                    <param name="s" type="OutputStream"/>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="149">
                    <scope line="150">
                        <declaration name="hd" type="HexDumpEncoder" line="151"/>
                        <declaration name="bb" type="ByteBuffer" line="152"/>
                    </scope>
                    <scope line="156"/>
                </scope>
            </method>
            <method name="useV2Hello" type="boolean" line="160"/>
            <method name="V3toV2ClientHello" type="void" line="163">
                <params>
                    <param name="v3Msg" type="byte"/>
                </params>
                <declaration name="v3SessionIdLenOffset" type="int" line="164"/>
                <declaration name="v3SessionIdLen" type="int" line="165"/>
                <declaration name="v3CipherSpecLenOffset" type="int" line="166"/>
                <declaration name="v3CipherSpecLen" type="int" line="167"/>
                <declaration name="cipherSpecs" type="int" line="168"/>
                <declaration name="v3CipherSpecOffset" type="int" line="169"/>
                <declaration name="v2CipherSpecLen" type="int" line="170"/>
                <declaration name="containsRenegoInfoSCSV" type="boolean" line="172"/>
                <scope line="173">
                    <declaration name="byte1" type="byte" line="174"/>
                    <scope line="178"/>
                </scope>
                <scope line="182"/>
            </method>
            <declaration name="V3toV2CipherMap1" type="int[]" line="202"/>
            <declaration name="V3toV2CipherMap3" type="int[]" line="203"/>
            <method name="V3toV2CipherSuite" type="int" line="204">
                <params>
                    <param name="byte1" type="byte"/>
                    <param name="byte2" type="byte"/>
                </params>
                <scope line="208"/>
            </method>
        </class>
    </source>