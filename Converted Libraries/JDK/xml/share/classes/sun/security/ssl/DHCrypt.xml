<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.KeyAgreement"/>
        <import package="javax.crypto.interfaces.DHPublicKey"/>
        <import package="javax.crypto.spec"/>
        <class name="DHCrypt" line="8">
            <javadoc line="8">
                This class implements the Diffie-Hellman key exchange algorithm.
                  D-H means combining your private key with your partners public key to
                  generate a number. The peer does the same with its private key and our
                  public key. Through the magic of Diffie-Hellman we both come up with the
                  same number. This number is secret (discounting MITM attacks) and hence
                  called the shared secret. It has the same length as the modulus, e.g. 512
                  or 1024 bit. Man-in-the-middle attacks are typically countered by an
                  independent authentication step using certificates (RSA, DSA, etc.).
                  The thing to note is that the shared secret is constant for two partners
                  with constant private keys. This is often not what we want, which is why
                  it is generally a good idea to create a new private key for each session.
                  Generating a private key involves one modular exponentiation assuming
                  suitable D-H parameters are available.
                  General usage of this class (TLS DHE case):
                  . if we are server, call DHCrypt(keyLength,random). This generates
                  an ephemeral keypair of the request length.
                  . if we are client, call DHCrypt(modulus, base, random). This
                  generates an ephemeral keypair using the parameters specified by the server.
                  . send parameters and public value to remote peer
                  . receive peers ephemeral public key
                  . call getAgreedSecret() to calculate the shared secret
                  In TLS the server chooses the parameter values itself, the client must use
                  those sent to it by the server.
                  The use of ephemeral keys as described above also achieves what is called
                  &quot;forward secrecy&quot;. This means that even if the authentication keys are
                  broken at a later date, the shared secret remains secure. The session is
                  compromised only if the authentication keys are already broken at the
                  time the key exchange takes place and an active MITM attack is used.
                  This is in contrast to straightforward encrypting RSA key exchanges.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="modulus" type="BigInteger" line="41"/>
            <declaration name="base" type="BigInteger" line="42"/>
            <declaration name="privateKey" type="PrivateKey" line="43"/>
            <declaration name="publicValue" type="BigInteger" line="44"/>
            <javadoc line="45">
                Generate a Diffie-Hellman keypair of the specified size.                
            </javadoc>
            <method name="DHCrypt" type="constructor" line="48">
                <params>
                    <param name="keyLength" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="49">
                    <declaration name="kpg" type="KeyPairGenerator" line="50"/>
                    <declaration name="kp" type="KeyPair" line="52"/>
                    <declaration name="spec" type="DHPublicKeySpec" line="54"/>
                </scope>
                <scope line="59"/>
            </method>
            <javadoc line="63">
                Generate a Diffie-Hellman keypair using the specified parameters.                
                <param>
                    modulus the Diffie-Hellman modulus P                    
                </param>
                <param>
                    base the Diffie-Hellman base G                    
                </param>
            </javadoc>
            <method name="DHCrypt" type="constructor" line="68">
                <params>
                    <param name="modulus" type="BigInteger"/>
                    <param name="base" type="BigInteger"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="71">
                    <declaration name="kpg" type="KeyPairGenerator" line="72"/>
                    <declaration name="params" type="DHParameterSpec" line="73"/>
                    <declaration name="kp" type="KeyPair" line="75"/>
                    <declaration name="spec" type="DHPublicKeySpec" line="77"/>
                </scope>
                <scope line="80"/>
            </method>
            <method name="getDHPublicKeySpec" type="DHPublicKeySpec" line="84">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <scope line="85">
                    <declaration name="dhKey" type="DHPublicKey" line="86"/>
                    <declaration name="params" type="DHParameterSpec" line="87"/>
                </scope>
                <scope line="90">
                    <declaration name="factory" type="KeyFactory" line="91"/>
                </scope>
                <scope line="94"/>
            </method>
            <javadoc line="98">
                Returns the Diffie-Hellman modulus.                
            </javadoc>
            <method name="getModulus" type="BigInteger" line="101"/>
            <javadoc line="104">
                Returns the Diffie-Hellman base (generator).                
            </javadoc>
            <method name="getBase" type="BigInteger" line="107"/>
            <javadoc line="110">
                Gets the public key of this end of the key exchange.                
            </javadoc>
            <method name="getPublicKey" type="BigInteger" line="113"/>
            <javadoc line="116">
                Get the secret data that has been agreed on through Diffie-Hellman
                  key agreement protocol.  Note that in the two party protocol, if
                  the peer keys are already known, no other data needs to be sent in
                  order to agree on a secret.  That is, a secured message may be
                  sent without any mandatory round-trip overheads.
                  &lt;P&gt;It is illegal to call this member function if the private key
                  has not been set (or generated).                
                <param>
                    peerPublicKey the peer's public key.                    
                </param>
                <returns>
                    the secret, which is an unsigned big-endian integer
                      the same size as the Diffie-Hellman modulus.                    
                </returns>
            </javadoc>
            <method name="getAgreedSecret" type="SecretKey" line="128">
                <params>
                    <param name="peerPublicValue" type="BigInteger"/>
                </params>
                <scope line="129">
                    <declaration name="kf" type="KeyFactory" line="130"/>
                    <declaration name="spec" type="DHPublicKeySpec" line="131"/>
                    <declaration name="publicKey" type="PublicKey" line="132"/>
                    <declaration name="ka" type="KeyAgreement" line="133"/>
                </scope>
                <scope line="138"/>
            </method>
        </class>
    </source>