<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.Socket"/>
        <import package="java.net.ServerSocket"/>
        <import package="java.security.AlgorithmConstraints"/>
        <import package="java.util"/>
        <import package="javax.net.ServerSocketFactory"/>
        <import package="javax.net.ssl.SSLException"/>
        <import package="javax.net.ssl.SSLServerSocket"/>
        <import package="javax.net.ssl.SSLParameters"/>
        <class name="SSLServerSocketImpl" line="44">
            <extends class="SSLServerSocket"/>
            <comment line="72">
                                
            </comment>
            <comment line="75">
                                
            </comment>
            <comment line="78">
                                
            </comment>
            <comment line="81">
                                
            </comment>
            <comment line="84">
                                
            </comment>
            <comment line="87">
                                
            </comment>
            <comment line="90">
                the endpoint identification protocol to use by default                
            </comment>
            <comment line="93">
                The cryptographic algorithm constraints                
            </comment>
            <javadoc line="44">
                This class provides a simple way for servers to support conventional
                  use of the Secure Sockets Layer (SSL).  Application code uses an
                  SSLServerSocketImpl exactly like it uses a regular TCP ServerSocket; the
                  difference is that the connections established are secured using SSL.
                  &lt;P&gt; Also, the constructors take an explicit authentication context
                  parameter, giving flexibility with respect to how the server socket
                  authenticates itself.  That policy flexibility is not exposed through
                  the standard SSLServerSocketFactory API.
                  &lt;P&gt; System security defaults prevent server sockets from accepting
                  connections if they the authentication context has not been given
                  a certificate chain and its matching private key.  If the clients
                  of your application support &quot;anonymous&quot; cipher suites, you may be
                  able to configure a server socket to accept those suites.                
                <see>
                    SSLSocketImpl                    
                </see>
                <see>
                    SSLServerSocketFactoryImpl                    
                </see>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="sslContext" type="SSLContextImpl" line="69"/>
            <declaration name="doClientAuth" type="byte" line="72"/>
            <declaration name="useServerMode" type="boolean" line="75"/>
            <declaration name="enableSessionCreation" type="boolean" line="78"/>
            <declaration name="enabledCipherSuites" type="CipherSuiteList" line="81"/>
            <declaration name="enabledProtocols" type="ProtocolList" line="84"/>
            <declaration name="checkedEnabled" type="boolean" line="87"/>
            <declaration name="identificationProtocol" type="String" line="90"/>
            <declaration name="algorithmConstraints" type="AlgorithmConstraints" line="93"/>
            <javadoc line="95">
                Create an SSL server socket on a port, using a non-default
                  authentication context and a specified connection backlog.                
                <param>
                    port the port on which to listen                    
                </param>
                <param>
                    backlog how many connections may be pending before
                      the system should start rejecting new requests                    
                </param>
                <param>
                    context authentication context for this server                    
                </param>
            </javadoc>
            <method name="SSLServerSocketImpl" type="constructor" line="106">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                    <param name="context" type="SSLContextImpl"/>
                </params>
            </method>
            <javadoc line="112">
                Create an SSL server socket on a port, using a specified
                  authentication context and a specified backlog of connections
                  as well as a particular specified network interface.  This
                  constructor is used on multihomed hosts, such as those used
                  for firewalls or as routers, to control through which interface
                  a network service is provided.                
                <param>
                    port the port on which to listen                    
                </param>
                <param>
                    backlog how many connections may be pending before
                      the system should start rejecting new requests                    
                </param>
                <param>
                    address the address of the network interface through
                      which connections will be accepted                    
                </param>
                <param>
                    context authentication context for this server                    
                </param>
            </javadoc>
            <method name="SSLServerSocketImpl" type="constructor" line="133">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                    <param name="address" type="InetAddress"/>
                    <param name="context" type="SSLContextImpl"/>
                </params>
            </method>
            <javadoc line="139">
                Creates an unbound server socket.                
            </javadoc>
            <method name="SSLServerSocketImpl" type="constructor" line="142">
                <params>
                    <param name="context" type="SSLContextImpl"/>
                </params>
            </method>
            <javadoc line="148">
                Initializes the server socket.                
            </javadoc>
            <method name="initServer" type="void" line="151">
                <params>
                    <param name="context" type="SSLContextImpl"/>
                </params>
                <scope line="152"/>
            </method>
            <javadoc line="160">
                Returns the names of the cipher suites which could be enabled for use
                  on an SSL connection.  Normally, only a subset of these will actually
                  be enabled by default, since this list may include cipher suites which
                  do not support the mutual authentication of servers and clients, or
                  which do not protect data confidentiality.  Servers may also need
                  certain kinds of certificates to use certain cipher suites.                
                <return>
                    an array of cipher suite names                    
                </return>
            </javadoc>
            <method name="getSupportedCipherSuites" type="String[]" line="170"/>
            <javadoc line="174">
                Returns the list of cipher suites which are currently enabled
                  for use by newly accepted connections.  A null return indicates
                  that the system defaults are in effect.                
            </javadoc>
            <method name="getEnabledCipherSuites" type="String[]" line="179"/>
            <javadoc line="183">
                Controls which particular SSL cipher suites are enabled for use
                  by accepted connections.                
                <param>
                    suites Names of all the cipher suites to enable; null
                      means to accept system defaults.                    
                </param>
            </javadoc>
            <method name="setEnabledCipherSuites" type="void" line="190">
                <params>
                    <param name="suites" type="String[]"/>
                </params>
            </method>
            <method name="getSupportedProtocols" type="String[]" line="195"/>
            <javadoc line="199">
                Controls which protocols are enabled for use.
                  The protocols must have been listed by
                  getSupportedProtocols() as being supported.                
                <param>
                    protocols protocols to enable.                    
                </param>
                <exception>
                    IllegalArgumentException when one of the protocols
                      named by the parameter is not supported.                    
                </exception>
            </javadoc>
            <method name="setEnabledProtocols" type="void" line="208">
                <params>
                    <param name="protocols" type="String[]"/>
                </params>
            </method>
            <method name="getEnabledProtocols" type="String[]" line="212"/>
            <javadoc line="216">
                Controls whether the connections which are accepted must include
                  client authentication.                
            </javadoc>
            <method name="setNeedClientAuth" type="void" line="220">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <method name="getNeedClientAuth" type="boolean" line="225"/>
            <javadoc line="229">
                Controls whether the connections which are accepted should request
                  client authentication.                
            </javadoc>
            <method name="setWantClientAuth" type="void" line="233">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <method name="getWantClientAuth" type="boolean" line="238"/>
            <javadoc line="242">
                Makes the returned sockets act in SSL &quot;client&quot; mode, not the usual
                  server mode.  The canonical example of why this is needed is for
                  FTP clients, which accept connections from servers and should be
                  rejoining the already-negotiated SSL connection.                
            </javadoc>
            <method name="setUseClientMode" type="void" line="248">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <comment line="250">
                    If we need to change the socket mode and the enabled
                     protocols haven&apos;t specifically been set by the user,
                     change them to the corresponding default ones.                    
                </comment>
                <scope line="255"/>
            </method>
            <method name="getUseClientMode" type="boolean" line="262"/>
            <javadoc line="267">
                Controls whether new connections may cause creation of new SSL
                  sessions.                
            </javadoc>
            <method name="setEnableSessionCreation" type="void" line="271">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="275">
                Returns true if new connections may cause creation of new SSL
                  sessions.                
            </javadoc>
            <method name="getEnableSessionCreation" type="boolean" line="279"/>
            <javadoc line="283">
                Returns the SSLParameters in effect for newly accepted connections.                
            </javadoc>
            <method name="getSSLParameters" type="SSLParameters" line="286">
                <comment line="290">
                    the super implementation does not handle the following parameters                    
                </comment>
                <declaration name="params" type="SSLParameters" line="287"/>
            </method>
            <javadoc line="296">
                Applies SSLParameters to newly accepted connections.                
            </javadoc>
            <method name="setSSLParameters" type="void" line="299">
                <params>
                    <param name="params" type="SSLParameters"/>
                </params>
                <comment line="303">
                    the super implementation does not handle the following parameters                    
                </comment>
            </method>
            <javadoc line="307">
                Accept a new SSL connection.  This server identifies itself with
                  information provided in the authentication context which was
                  presented during construction.                
            </javadoc>
            <method name="accept" type="Socket" line="312">
                <declaration name="s" type="SSLSocketImpl" line="313"/>
            </method>
            <javadoc line="322">
                Provides a brief description of this SSL socket.                
            </javadoc>
            <method name="toString" type="String" line="325"/>
        </class>
    </source>