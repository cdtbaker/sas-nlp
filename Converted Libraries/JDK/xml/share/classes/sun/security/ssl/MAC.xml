<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="sun.security.ssl.CipherSuite.MacAlg"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <class name="MAC" line="9">
            <javadoc line="9">
                This class computes the &quot;Message Authentication Code&quot; (MAC) for each
                  SSL message.  This is essentially a shared-secret signature, used to
                  provide integrity protection for SSL messages.  The MAC is actually
                  one of several keyed hashes, as associated with the cipher suite and
                  protocol version.  (SSL v3.0 uses one construct, TLS uses another.)
                  &lt;P&gt;NOTE: MAC computation is the only place in the SSL protocol that the
                  sequence number is used.  It&apos;s also reset to zero with each change of
                  a cipher spec, so this is the only place this state is needed.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="NULL" type="MAC" line="22"/>
            <declaration name="nullMAC" type="byte" line="23"/>
            <declaration name="macAlg" type="MacAlg" line="24"/>
            <declaration name="macSize" type="int" line="25"/>
            <declaration name="mac" type="Mac" line="26"/>
            <declaration name="block" type="byte[]" line="27"/>
            <declaration name="BLOCK_SIZE_SSL" type="int" line="28"/>
            <declaration name="BLOCK_SIZE_TLS" type="int" line="29"/>
            <declaration name="BLOCK_OFFSET_TYPE" type="int" line="30"/>
            <declaration name="BLOCK_OFFSET_VERSION" type="int" line="31"/>
            <method name="MAC" type="constructor" line="32"/>
            <javadoc line="38">
                Set up, configured for the given SSL/TLS MAC type and version.                
            </javadoc>
            <method name="MAC" type="constructor" line="41">
                <params>
                    <param name="macAlg" type="MacAlg"/>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="key" type="SecretKey"/>
                </params>
                <declaration name="algorithm" type="String" line="44"/>
                <declaration name="tls" type="boolean" line="45"/>
                <scope line="46"/>
                <scope line="49"/>
                <scope line="52"/>
                <scope line="55"/>
                <scope line="58"/>
                <scope line="63"/>
                <scope line="68"/>
            </method>
            <javadoc line="72">
                Returns the length of the MAC.                
            </javadoc>
            <method name="MAClen" type="int" line="75"/>
            <javadoc line="78">
                Computes and returns the MAC for the data in this byte array.                
                <param>
                    type record type                    
                </param>
                <param>
                    buf compressed record on which the MAC is computed                    
                </param>
                <param>
                    offset start of compressed record data                    
                </param>
                <param>
                    len the size of the compressed record                    
                </param>
            </javadoc>
            <method name="compute" type="byte[]" line="85">
                <params>
                    <param name="type" type="byte"/>
                    <param name="buf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Compute and returns the MAC for the remaining data
                  in this ByteBuffer.
                  On return, the bb position == limit, and limit will
                  have not changed.                
                <param>
                    type record type                    
                </param>
                <param>
                    bb a ByteBuffer in which the position and limit
                      demarcate the data to be MAC'd.                    
                </param>
            </javadoc>
            <method name="compute" type="byte[]" line="97">
                <params>
                    <param name="type" type="byte"/>
                    <param name="bb" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="100">
                Check whether the sequence number is close to wrap
                  Sequence numbers are of type uint64 and may not exceed 2^64-1.
                  Sequence numbers do not wrap. When the sequence number is near
                  to wrap, we need to close the connection immediately.                
            </javadoc>
            <method name="seqNumOverflow" type="boolean" line="106"/>
            <method name="seqNumIsHuge" type="boolean" line="109"/>
            <method name="incrementSequenceNumber" type="void" line="112">
                <declaration name="k" type="int" line="113"/>
                <scope line="114"/>
            </method>
            <method name="compute" type="byte[]" line="118">
                <params>
                    <param name="type" type="byte"/>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="119"/>
                <scope line="127"/>
                <scope line="130"/>
            </method>
        </class>
    </source>