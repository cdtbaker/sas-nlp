<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.util"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces.RSAPublicKey"/>
        <import package="java.security.spec.RSAPublicKeySpec"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="java.security.Provider"/>
        <import package="sun.security.jca.Providers"/>
        <import package="sun.security.jca.ProviderList"/>
        <import package="sun.security.ec.ECParameters"/>
        <import package="sun.security.ec.NamedCurve"/>
        <import package="sun.security.ssl.SunJSSE.cryptoProvider"/>
        <class name="JsseJce" line="50">
            <comment line="63">
                Flag indicating whether EC crypto is available.
                 If null, then we have not checked yet.
                 If yes, then all the EC based crypto we need is available.                
            </comment>
            <comment line="68">
                Flag indicating whether Kerberos crypto is available.
                 If true, then all the Kerberos-based crypto we need is available.                
            </comment>
            <comment line="397">
                In FIPS mode, set thread local providers; otherwise a no-op.
                 Must be paired with endFipsProvider.                
            </comment>
            <javadoc line="50">
                This class contains a few static methods for interaction with the JCA/JCE
                  to obtain implementations, etc.                
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="58"/>
            <declaration name="fipsProviderList" type="ProviderList" line="60"/>
            <declaration name="ecAvailable" type="Boolean" line="65"/>
            <declaration name="kerberosAvailable" type="boolean" line="69"/>
            <scope line="70">
                <declaration name="temp" type="boolean" line="71"/>
                <scope line="72">
                    <anonymous_class line="74">
                        <method name="run" type="Void" line="75">
                            <comment line="77">
                                Test for Kerberos using the bootstrap class loader                                
                            </comment>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="84"/>
            </scope>
            <scope line="90">
                <scope line="95"/>
                <scope line="97">
                    <declaration name="sun" type="Provider" line="102"/>
                    <scope line="103"/>
                    <declaration name="sunCerts" type="Provider" line="107"/>
                </scope>
            </scope>
            <class name="SunCertificates" line="112">
                <extends class="Provider"/>
                <method name="SunCertificates" type="constructor" line="113">
                    <params>
                        <param name="p" type="Provider"/>
                    </params>
                    <comment line="118">
                        copy certificate related services from the Sun provider                        
                    </comment>
                    <anonymous_class line="115">
                        <method name="run" type="Object" line="116">
                            <comment line="118">
                                copy certificate related services from the Sun provider                                
                            </comment>
                            <scope line="118">
                                <declaration name="key" type="String" line="119"/>
                                <scope line="123"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <declaration name="CIPHER_RSA_PKCS1" type="String" line="133"/>
            <javadoc line="133">
                JCE transformation string for RSA with PKCS#1 v1.5 padding.
                  Can be used for encryption, decryption, signing, verifying.                
            </javadoc>
            <declaration name="CIPHER_RC4" type="String" line="138"/>
            <javadoc line="138">
                JCE transformation string for the stream cipher RC4.                
            </javadoc>
            <declaration name="CIPHER_DES" type="String" line="142"/>
            <javadoc line="142">
                JCE transformation string for DES in CBC mode without padding.                
            </javadoc>
            <declaration name="CIPHER_3DES" type="String" line="146"/>
            <javadoc line="146">
                JCE transformation string for (3-key) Triple DES in CBC mode
                  without padding.                
            </javadoc>
            <declaration name="CIPHER_AES" type="String" line="151"/>
            <javadoc line="151">
                JCE transformation string for AES in CBC mode
                  without padding.                
            </javadoc>
            <declaration name="SIGNATURE_DSA" type="String" line="156"/>
            <javadoc line="156">
                JCA identifier string for DSA, i.e. a DSA with SHA-1.                
            </javadoc>
            <declaration name="SIGNATURE_ECDSA" type="String" line="160"/>
            <javadoc line="160">
                JCA identifier string for ECDSA, i.e. a ECDSA with SHA-1.                
            </javadoc>
            <declaration name="SIGNATURE_RAWDSA" type="String" line="164"/>
            <javadoc line="164">
                JCA identifier string for Raw DSA, i.e. a DSA signature without
                  hashing where the application provides the SHA-1 hash of the data.
                  Note that the standard name is &quot;NONEwithDSA&quot; but we use &quot;RawDSA&quot;
                  for compatibility.                
            </javadoc>
            <declaration name="SIGNATURE_RAWECDSA" type="String" line="171"/>
            <javadoc line="171">
                JCA identifier string for Raw ECDSA, i.e. a DSA signature without
                  hashing where the application provides the SHA-1 hash of the data.                
            </javadoc>
            <declaration name="SIGNATURE_RAWRSA" type="String" line="176"/>
            <javadoc line="176">
                JCA identifier string for Raw RSA, i.e. a RSA PKCS#1 v1.5 signature
                  without hashing where the application provides the hash of the data.
                  Used for RSA client authentication with a 36 byte hash.                
            </javadoc>
            <declaration name="SIGNATURE_SSLRSA" type="String" line="182"/>
            <javadoc line="182">
                JCA identifier string for the SSL/TLS style RSA Signature. I.e.
                  an signature using RSA with PKCS#1 v1.5 padding signing a
                  concatenation of an MD5 and SHA-1 digest.                
            </javadoc>
            <method name="JsseJce" type="constructor" line="189">
                <comment line="191">
                    no instantiation of this class                    
                </comment>
            </method>
            <method name="isEcAvailable" type="boolean" line="193">
                <scope line="194">
                    <scope line="195"/>
                    <scope line="202"/>
                </scope>
            </method>
            <method name="clearEcAvailable" type="void" line="209"/>
            <method name="isKerberosAvailable" type="boolean" line="213"/>
            <javadoc line="217">
                Return an JCE cipher implementation for the specified algorithm.                
            </javadoc>
            <method name="getCipher" type="Cipher" line="221">
                <params>
                    <param name="transformation" type="String"/>
                </params>
                <scope line="222">
                    <scope line="223"/>
                    <scope line="225"/>
                </scope>
                <scope line="228"/>
            </method>
            <javadoc line="233">
                Return an JCA signature implementation for the specified algorithm.
                  The algorithm string should be one of the constants defined
                  in this class.                
            </javadoc>
            <method name="getSignature" type="Signature" line="239">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="244">
                    reference equality                    
                </comment>
                <comment line="246">
                    The SunPKCS11 provider currently does not support this
                     special algorithm. We allow a fallback in this case because
                     the SunJSSE implementation does the actual crypto using
                     a NONEwithRSA signature obtained from the cryptoProvider.                    
                </comment>
                <comment line="251">
                    Calling Signature.getInstance() and catching the
                     exception would be cleaner, but exceptions are a little
                     expensive. So we check directly via getService().                    
                </comment>
                <scope line="240"/>
                <scope line="242">
                    <scope line="244">
                        <scope line="249">
                            <scope line="253"/>
                            <scope line="255"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKeyGenerator" type="KeyGenerator" line="265">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="266"/>
                <scope line="268"/>
            </method>
            <method name="getKeyPairGenerator" type="KeyPairGenerator" line="274">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="275"/>
                <scope line="277"/>
            </method>
            <method name="getKeyAgreement" type="KeyAgreement" line="283">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="284"/>
                <scope line="286"/>
            </method>
            <method name="getMac" type="Mac" line="292">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="293"/>
                <scope line="295"/>
            </method>
            <method name="getKeyFactory" type="KeyFactory" line="301">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="302"/>
                <scope line="304"/>
            </method>
            <method name="getSecureRandom" type="SecureRandom" line="309">
                <comment line="314">
                    Try &quot;PKCS11&quot; first. If that is not supported, iterate through
                     the provider and return the first working implementation.                    
                </comment>
                <comment line="319">
                    ignore                    
                </comment>
                <comment line="326">
                    ignore                    
                </comment>
                <scope line="310"/>
                <scope line="315"/>
                <scope line="317"/>
                <scope line="320">
                    <scope line="321">
                        <scope line="322"/>
                        <scope line="324"/>
                    </scope>
                </scope>
            </method>
            <method name="getMD5" type="MessageDigest" line="333"/>
            <method name="getSHA" type="MessageDigest" line="337"/>
            <method name="getMessageDigest" type="MessageDigest" line="341">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="342">
                    <scope line="343"/>
                    <scope line="345"/>
                </scope>
                <scope line="348"/>
            </method>
            <method name="getRSAKeyLength" type="int" line="354">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <declaration name="modulus" type="BigInteger" line="355"/>
                <scope line="356"/>
                <scope line="358">
                    <declaration name="spec" type="RSAPublicKeySpec" line="359"/>
                </scope>
            </method>
            <method name="getRSAPublicKeySpec" type="RSAPublicKeySpec" line="365">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <scope line="366">
                    <declaration name="rsaKey" type="RSAPublicKey" line="367"/>
                </scope>
                <scope line="371">
                    <declaration name="factory" type="KeyFactory" line="372"/>
                </scope>
                <scope line="374"/>
            </method>
            <method name="getECParameterSpec" type="ECParameterSpec" line="379">
                <params>
                    <param name="namedCurveOid" type="String"/>
                </params>
            </method>
            <method name="getNamedCurveOid" type="String" line="383">
                <params>
                    <param name="params" type="ECParameterSpec"/>
                </params>
            </method>
            <method name="decodePoint" type="ECPoint" line="388">
                <params>
                    <param name="encoded" type="byte[]"/>
                    <param name="curve" type="EllipticCurve"/>
                </params>
            </method>
            <method name="encodePoint" type="byte[]" line="392">
                <params>
                    <param name="point" type="ECPoint"/>
                    <param name="curve" type="EllipticCurve"/>
                </params>
            </method>
            <method name="beginFipsProvider" type="Object" line="398">
                <scope line="399"/>
                <scope line="401"/>
            </method>
            <method name="endFipsProvider" type="void" line="406">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="407"/>
            </method>
        </class>
    </source>