<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.util"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces.RSAPublicKey"/>
        <import package="java.security.spec.RSAPublicKeySpec"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="java.security.Provider"/>
        <import package="sun.security.jca.Providers"/>
        <import package="sun.security.jca.ProviderList"/>
        <import package="sun.security.ec.ECParameters"/>
        <import package="sun.security.ec.NamedCurve"/>
        <import package="sun.security.ssl.SunJSSE.cryptoProvider"/>
        <class name="JsseJce" line="15">
            <javadoc line="15">
                This class contains a few static methods for interaction with the JCA/JCE
                  to obtain implementations, etc.                
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="21"/>
            <declaration name="fipsProviderList" type="ProviderList" line="22"/>
            <declaration name="ecAvailable" type="Boolean" line="23"/>
            <declaration name="kerberosAvailable" type="boolean" line="24"/>
            <scope line="25">
                <declaration name="temp" type="boolean" line="26"/>
                <scope line="27">
                    <anonymous_class line="28">
                        <method name="run" type="Void" line="29"/>
                    </anonymous_class>
                </scope>
                <scope line="37"/>
            </scope>
            <scope line="42">
                <scope line="43"/>
                <scope line="46">
                    <declaration name="sun" type="Provider" line="47"/>
                    <scope line="48"/>
                    <declaration name="sunCerts" type="Provider" line="51"/>
                </scope>
            </scope>
            <class name="SunCertificates" line="55">
                <extends class="Provider"/>
                <method name="SunCertificates" type="constructor" line="56">
                    <params>
                        <param name="p" type="Provider"/>
                    </params>
                    <anonymous_class line="58">
                        <method name="run" type="Object" line="59">
                            <scope line="60">
                                <declaration name="key" type="String" line="61"/>
                                <scope line="62"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <declaration name="CIPHER_RSA_PKCS1" type="String" line="72"/>
            <javadoc line="72">
                JCE transformation string for RSA with PKCS#1 v1.5 padding.
                  Can be used for encryption, decryption, signing, verifying.                
            </javadoc>
            <declaration name="CIPHER_RC4" type="String" line="77"/>
            <javadoc line="77">
                JCE transformation string for the stream cipher RC4.                
            </javadoc>
            <declaration name="CIPHER_DES" type="String" line="81"/>
            <javadoc line="81">
                JCE transformation string for DES in CBC mode without padding.                
            </javadoc>
            <declaration name="CIPHER_3DES" type="String" line="85"/>
            <javadoc line="85">
                JCE transformation string for (3-key) Triple DES in CBC mode
                  without padding.                
            </javadoc>
            <declaration name="CIPHER_AES" type="String" line="90"/>
            <javadoc line="90">
                JCE transformation string for AES in CBC mode
                  without padding.                
            </javadoc>
            <declaration name="SIGNATURE_DSA" type="String" line="95"/>
            <javadoc line="95">
                JCA identifier string for DSA, i.e. a DSA with SHA-1.                
            </javadoc>
            <declaration name="SIGNATURE_ECDSA" type="String" line="99"/>
            <javadoc line="99">
                JCA identifier string for ECDSA, i.e. a ECDSA with SHA-1.                
            </javadoc>
            <declaration name="SIGNATURE_RAWDSA" type="String" line="103"/>
            <javadoc line="103">
                JCA identifier string for Raw DSA, i.e. a DSA signature without
                  hashing where the application provides the SHA-1 hash of the data.
                  Note that the standard name is &quot;NONEwithDSA&quot; but we use &quot;RawDSA&quot;
                  for compatibility.                
            </javadoc>
            <declaration name="SIGNATURE_RAWECDSA" type="String" line="110"/>
            <javadoc line="110">
                JCA identifier string for Raw ECDSA, i.e. a DSA signature without
                  hashing where the application provides the SHA-1 hash of the data.                
            </javadoc>
            <declaration name="SIGNATURE_RAWRSA" type="String" line="115"/>
            <javadoc line="115">
                JCA identifier string for Raw RSA, i.e. a RSA PKCS#1 v1.5 signature
                  without hashing where the application provides the hash of the data.
                  Used for RSA client authentication with a 36 byte hash.                
            </javadoc>
            <declaration name="SIGNATURE_SSLRSA" type="String" line="121"/>
            <javadoc line="121">
                JCA identifier string for the SSL/TLS style RSA Signature. I.e.
                  an signature using RSA with PKCS#1 v1.5 padding signing a
                  concatenation of an MD5 and SHA-1 digest.                
            </javadoc>
            <method name="JsseJce" type="constructor" line="127"/>
            <method name="isEcAvailable" type="boolean" line="129">
                <scope line="130">
                    <scope line="131"/>
                    <scope line="139"/>
                </scope>
            </method>
            <method name="clearEcAvailable" type="void" line="145"/>
            <method name="isKerberosAvailable" type="boolean" line="148"/>
            <javadoc line="151">
                Return an JCE cipher implementation for the specified algorithm.                
            </javadoc>
            <method name="getCipher" type="Cipher" line="154">
                <params>
                    <param name="transformation" type="String"/>
                </params>
                <scope line="155">
                    <scope line="156"/>
                    <scope line="159"/>
                </scope>
                <scope line="163"/>
            </method>
            <javadoc line="167">
                Return an JCA signature implementation for the specified algorithm.
                  The algorithm string should be one of the constants defined
                  in this class.                
            </javadoc>
            <method name="getSignature" type="Signature" line="172">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="173"/>
                <scope line="176">
                    <scope line="177">
                        <scope line="178">
                            <scope line="179"/>
                            <scope line="182"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getKeyGenerator" type="KeyGenerator" line="190">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="191"/>
                <scope line="194"/>
            </method>
            <method name="getKeyPairGenerator" type="KeyPairGenerator" line="198">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="199"/>
                <scope line="202"/>
            </method>
            <method name="getKeyAgreement" type="KeyAgreement" line="206">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="207"/>
                <scope line="210"/>
            </method>
            <method name="getMac" type="Mac" line="214">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <method name="getKeyFactory" type="KeyFactory" line="222">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="223"/>
                <scope line="226"/>
            </method>
            <method name="getSecureRandom" type="SecureRandom" line="230">
                <scope line="231"/>
                <scope line="234"/>
                <scope line="237"/>
                <scope line="239">
                    <scope line="240">
                        <scope line="241"/>
                        <scope line="244"/>
                    </scope>
                </scope>
            </method>
            <method name="getMD5" type="MessageDigest" line="250"/>
            <method name="getSHA" type="MessageDigest" line="253"/>
            <method name="getMessageDigest" type="MessageDigest" line="256">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="257">
                    <scope line="258"/>
                    <scope line="261"/>
                </scope>
                <scope line="265"/>
            </method>
            <method name="getRSAKeyLength" type="int" line="269">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <declaration name="modulus" type="BigInteger" line="270"/>
                <scope line="271"/>
                <scope line="274">
                    <declaration name="spec" type="RSAPublicKeySpec" line="275"/>
                </scope>
            </method>
            <method name="getRSAPublicKeySpec" type="RSAPublicKeySpec" line="280">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <scope line="281">
                    <declaration name="rsaKey" type="RSAPublicKey" line="282"/>
                </scope>
                <scope line="285">
                    <declaration name="factory" type="KeyFactory" line="286"/>
                </scope>
                <scope line="289"/>
            </method>
            <method name="getECParameterSpec" type="ECParameterSpec" line="293">
                <params>
                    <param name="namedCurveOid" type="String"/>
                </params>
            </method>
            <method name="getNamedCurveOid" type="String" line="296">
                <params>
                    <param name="params" type="ECParameterSpec"/>
                </params>
            </method>
            <method name="decodePoint" type="ECPoint" line="299">
                <params>
                    <param name="encoded" type="byte[]"/>
                    <param name="curve" type="EllipticCurve"/>
                </params>
            </method>
            <method name="encodePoint" type="byte[]" line="302">
                <params>
                    <param name="point" type="ECPoint"/>
                    <param name="curve" type="EllipticCurve"/>
                </params>
            </method>
            <method name="beginFipsProvider" type="Object" line="305">
                <scope line="306"/>
                <scope line="309"/>
            </method>
            <method name="endFipsProvider" type="void" line="313">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="314"/>
            </method>
        </class>
    </source>