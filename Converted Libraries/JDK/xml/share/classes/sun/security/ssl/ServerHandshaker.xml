<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.cert"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec.ECParameterSpec"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.net.ssl"/>
        <import package="javax.security.auth.Subject"/>
        <import package="sun.security.ssl.HandshakeMessage"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.security.ssl.SignatureAndHashAlgorithm"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.security.ssl.CipherSuite.KeyExchange"/>
        <class name="ServerHandshaker" line="17">
            <extends class="Handshaker"/>
            <javadoc line="17">
                ServerHandshaker does the protocol handshaking from the point
                  of view of a server.  It is driven asychronously by handshake messages
                  as delivered by the parent Handshaker class, and also uses
                  common functionality (e.g. key generation) that is provided there.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="doClientAuth" type="byte" line="25"/>
            <declaration name="certs" type="X509Certificate[]" line="26"/>
            <declaration name="privateKey" type="PrivateKey" line="27"/>
            <declaration name="kerberosKeys" type="SecretKey[]" line="28"/>
            <declaration name="needClientVerify" type="boolean" line="29"/>
            <declaration name="tempPrivateKey" type="PrivateKey" line="30"/>
            <declaration name="tempPublicKey" type="PublicKey" line="31"/>
            <declaration name="dh" type="DHCrypt" line="32"/>
            <declaration name="ecdh" type="ECDHCrypt" line="33"/>
            <declaration name="clientRequestedVersion" type="ProtocolVersion" line="34"/>
            <declaration name="supportedCurves" type="SupportedEllipticCurvesExtension" line="35"/>
            <declaration name="preferableSignatureAlgorithm" type="SignatureAndHashAlgorithm" line="36"/>
            <method name="ServerHandshaker" type="constructor" line="37">
                <params>
                    <param name="socket" type="SSLSocketImpl"/>
                    <param name="context" type="SSLContextImpl"/>
                    <param name="enabledProtocols" type="ProtocolList"/>
                    <param name="clientAuth" type="byte"/>
                    <param name="activeProtocolVersion" type="ProtocolVersion"/>
                    <param name="isInitialHandshake" type="boolean"/>
                    <param name="secureRenegotiation" type="boolean"/>
                    <param name="clientVerifyData" type="byte[]"/>
                    <param name="serverVerifyData" type="byte[]"/>
                </params>
            </method>
            <method name="ServerHandshaker" type="constructor" line="41">
                <params>
                    <param name="engine" type="SSLEngineImpl"/>
                    <param name="context" type="SSLContextImpl"/>
                    <param name="enabledProtocols" type="ProtocolList"/>
                    <param name="clientAuth" type="byte"/>
                    <param name="activeProtocolVersion" type="ProtocolVersion"/>
                    <param name="isInitialHandshake" type="boolean"/>
                    <param name="secureRenegotiation" type="boolean"/>
                    <param name="clientVerifyData" type="byte[]"/>
                    <param name="serverVerifyData" type="byte[]"/>
                </params>
            </method>
            <method name="setClientAuth" type="void" line="45">
                <params>
                    <param name="clientAuth" type="byte"/>
                </params>
            </method>
            <method name="processMessage" type="void" line="48">
                <params>
                    <param name="type" type="byte"/>
                    <param name="message_len" type="int"/>
                </params>
                <scope line="49"/>
                <declaration name="ch" type="ClientHello" line="54"/>
                <scope line="58"/>
                <declaration name="preMasterSecret" type="SecretKey" line="64"/>
                <declaration name="pms" type="RSAClientKeyExchange" line="68"/>
                <scope line="101"/>
            </method>
            <method name="clientHello" type="void" line="105">
                <params>
                    <param name="mesg" type="ClientHello"/>
                </params>
                <scope line="106"/>
                <declaration name="renegotiationIndicated" type="boolean" line="109"/>
                <declaration name="cipherSuites" type="CipherSuiteList" line="110"/>
                <scope line="111">
                    <scope line="113"/>
                    <scope line="116">
                        <scope line="117"/>
                        <scope line="120"/>
                    </scope>
                </scope>
                <declaration name="clientHelloRI" type="RenegotiationInfoExtension" line="125"/>
                <scope line="126">
                    <scope line="128">
                        <scope line="129"/>
                    </scope>
                    <scope line="134">
                        <scope line="135"/>
                        <scope line="138"/>
                    </scope>
                </scope>
                <scope line="143"/>
                <scope line="146">
                    <scope line="147">
                        <scope line="148"/>
                        <scope line="151"/>
                    </scope>
                    <scope line="155">
                        <scope line="156">
                            <scope line="159"/>
                        </scope>
                        <scope line="164"/>
                    </scope>
                    <scope line="168">
                        <scope line="169"/>
                    </scope>
                </scope>
                <declaration name="m1" type="ServerHello" line="175"/>
                <declaration name="selectedVersion" type="ProtocolVersion" line="177"/>
                <scope line="178"/>
                <scope line="188">
                    <declaration name="previous" type="SSLSessionImpl" line="189"/>
                    <scope line="190">
                        <scope line="192">
                            <declaration name="oldVersion" type="ProtocolVersion" line="193"/>
                            <scope line="194"/>
                        </scope>
                        <scope line="198">
                            <scope line="199"/>
                            <scope line="202"/>
                        </scope>
                        <scope line="206">
                            <declaration name="suite" type="CipherSuite" line="207"/>
                            <scope line="208">
                                <declaration name="localPrincipal" type="Principal" line="209"/>
                                <declaration name="subject" type="Subject" line="210"/>
                                <scope line="211">
                                    <anonymous_class line="212">
                                        <method name="run" type="Subject" line="213"/>
                                    </anonymous_class>
                                </scope>
                                <scope line="219">
                                    <scope line="221"/>
                                </scope>
                                <scope line="225">
                                    <declaration name="principals" type="Set&amp;lt;Principal&amp;gt;" line="226"/>
                                    <scope line="227">
                                        <scope line="229"/>
                                    </scope>
                                    <scope line="233"/>
                                </scope>
                                <scope line="237"/>
                            </scope>
                        </scope>
                        <scope line="243">
                            <declaration name="suite" type="CipherSuite" line="244"/>
                            <scope line="245"/>
                            <scope line="248"/>
                        </scope>
                        <scope line="252">
                            <scope line="254"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="260">
                    <scope line="261"/>
                    <scope line="265">
                        <declaration name="signAlgs" type="SignatureAlgorithmsExtension" line="266"/>
                        <scope line="267">
                            <declaration name="peerSignAlgs" type="Collection&amp;lt;SignatureAndHashAlgorithm&amp;gt;" line="268"/>
                            <scope line="269"/>
                            <declaration name="supportedPeerSignAlgs" type="Collection&amp;lt;SignatureAndHashAlgorithm&amp;gt;" line="272"/>
                            <scope line="273"/>
                        </scope>
                    </scope>
                    <scope line="280">
                        <scope line="281"/>
                    </scope>
                </scope>
                <scope line="290"/>
                <scope line="293">
                    <scope line="294"/>
                </scope>
                <scope line="302">
                    <declaration name="serverHelloRI" type="HelloExtension" line="303"/>
                </scope>
                <scope line="306"/>
                <scope line="311"/>
                <scope line="316"/>
                <scope line="318">
                    <scope line="319"/>
                    <declaration name="m2" type="CertificateMsg" line="322"/>
                    <scope line="324"/>
                </scope>
                <scope line="329">
                    <scope line="330"/>
                </scope>
                <declaration name="m3" type="ServerKeyExchange" line="334"/>
                <scope line="342">
                    <scope line="343"/>
                    <scope line="347"/>
                </scope>
                <scope line="352"/>
                <scope line="358"/>
                <scope line="361"/>
                <scope line="372"/>
                <scope line="375"/>
                <scope line="387">
                    <scope line="388"/>
                </scope>
                <scope line="393">
                    <declaration name="m4" type="CertificateRequest" line="394"/>
                    <declaration name="caCerts" type="X509Certificate" line="395"/>
                    <declaration name="localSignAlgs" type="Collection&amp;lt;SignatureAndHashAlgorithm&amp;gt;" line="396"/>
                    <scope line="397">
                        <scope line="399"/>
                        <declaration name="localHashAlgs" type="Set&amp;lt;String&amp;gt;" line="402"/>
                        <scope line="403"/>
                    </scope>
                    <scope line="410"/>
                </scope>
                <scope line="415">
                    <scope line="416"/>
                </scope>
                <declaration name="m5" type="ServerHelloDone" line="420"/>
                <scope line="421"/>
            </method>
            <method name="chooseCipherSuite" type="void" line="427">
                <params>
                    <param name="mesg" type="ClientHello"/>
                </params>
                <scope line="428">
                    <scope line="429"/>
                    <scope line="432">
                        <scope line="433"/>
                    </scope>
                    <scope line="437"/>
                </scope>
            </method>
            <javadoc line="444">
                Set the given CipherSuite, if possible. Return the result.
                  The call succeeds if the CipherSuite is available and we have
                  the necessary certificates to complete the handshake. We don&apos;t
                  check if the CipherSuite is actually enabled.
                  If successful, this method also generates ephemeral keys if
                  required for this ciphersuite. This may take some time, so this
                  method should only be called if you really want to use the
                  CipherSuite.
                  This method is called from chooseCipherSuite() in this class.                
            </javadoc>
            <method name="trySetCipherSuite" type="boolean" line="455">
                <params>
                    <param name="suite" type="CipherSuite"/>
                </params>
                <scope line="456"/>
                <scope line="459"/>
                <scope line="462"/>
                <scope line="465"/>
                <declaration name="keyExchange" type="KeyExchange" line="468"/>
                <declaration name="supportedSignAlgs" type="Collection&amp;lt;SignatureAndHashAlgorithm&amp;gt;" line="474"/>
                <scope line="475">
                    <scope line="476"/>
                    <scope line="479">
                        <declaration name="algorithm" type="SignatureAndHashAlgorithm" line="480"/>
                        <scope line="499"/>
                        <scope line="502"/>
                    </scope>
                </scope>
                <scope line="511"/>
                <scope line="516"/>
                <scope line="519">
                    <scope line="520">
                        <scope line="521"/>
                    </scope>
                </scope>
                <scope line="526"/>
                <scope line="531">
                    <scope line="533"/>
                </scope>
                <scope line="537"/>
                <scope line="543">
                    <scope line="545"/>
                </scope>
                <scope line="549"/>
                <scope line="552"/>
                <scope line="557">
                    <scope line="559"/>
                </scope>
                <scope line="563"/>
                <scope line="569">
                    <scope line="571"/>
                </scope>
                <scope line="575"/>
                <scope line="578"/>
                <scope line="583"/>
                <scope line="589"/>
                <scope line="596"/>
                <scope line="604"/>
                <scope line="612">
                    <scope line="613"/>
                </scope>
            </method>
            <method name="setupEphemeralRSAKeys" type="boolean" line="619">
                <params>
                    <param name="export" type="boolean"/>
                </params>
                <declaration name="kp" type="KeyPair" line="620"/>
                <scope line="621"/>
                <scope line="624"/>
            </method>
            <method name="setupEphemeralDHKeys" type="void" line="630">
                <params>
                    <param name="export" type="boolean"/>
                </params>
            </method>
            <method name="setupEphemeralECDHKeys" type="boolean" line="633">
                <declaration name="index" type="int" line="634"/>
                <scope line="635">
                    <scope line="636">
                        <scope line="637"/>
                    </scope>
                    <scope line="642"/>
                </scope>
                <scope line="646"/>
                <declaration name="oid" type="String" line="649"/>
            </method>
            <method name="setupStaticECDHKeys" type="void" line="653"/>
            <javadoc line="656">
                Retrieve the server key and certificate for the specified algorithm
                  from the KeyManager and set the instance variables.                
                <return>
                    true if successful, false if not available or invalid                    
                </return>
            </javadoc>
            <method name="setupPrivateKeyAndChain" type="boolean" line="661">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="km" type="X509ExtendedKeyManager" line="662"/>
                <declaration name="alias" type="String" line="663"/>
                <scope line="664"/>
                <scope line="667"/>
                <scope line="670"/>
                <declaration name="tempPrivateKey" type="PrivateKey" line="673"/>
                <scope line="674"/>
                <declaration name="tempCerts" type="X509Certificate[]" line="677"/>
                <scope line="678"/>
                <declaration name="keyAlgorithm" type="String" line="681"/>
                <declaration name="publicKey" type="PublicKey" line="682"/>
                <scope line="683"/>
                <scope line="686">
                    <scope line="687"/>
                    <declaration name="params" type="ECParameterSpec" line="690"/>
                    <declaration name="index" type="int" line="691"/>
                    <scope line="692"/>
                    <scope line="695"/>
                </scope>
            </method>
            <javadoc line="703">
                Retrieve the Kerberos key for the specified server principal
                  from the JAAS configuration file.                
                <return>
                    true if successful, false if not available or invalid                    
                </return>
            </javadoc>
            <method name="setupKerberosKeys" type="boolean" line="708">
                <scope line="709"/>
                <scope line="712">
                    <declaration name="acc" type="AccessControlContext" line="713"/>
                    <anonymous_class line="714">
                        <method name="run" type="SecretKey[]" line="715"/>
                    </anonymous_class>
                    <scope line="720">
                        <scope line="721">
                            <scope line="722"/>
                        </scope>
                        <declaration name="serverPrincipal" type="String" line="726"/>
                        <declaration name="sm" type="SecurityManager" line="727"/>
                        <scope line="728">
                            <scope line="729"/>
                        </scope>
                        <scope line="733"/>
                    </scope>
                </scope>
                <scope line="741">
                    <scope line="742"/>
                </scope>
            </method>
            <method name="clientKeyExchange" type="SecretKey" line="748">
                <params>
                    <param name="mesg" type="KerberosClientKeyExchange"/>
                </params>
                <scope line="749"/>
                <declaration name="b" type="byte[]" line="754"/>
            </method>
            <method name="clientKeyExchange" type="SecretKey" line="757">
                <params>
                    <param name="mesg" type="DHClientKeyExchange"/>
                </params>
                <scope line="758"/>
            </method>
            <method name="clientKeyExchange" type="SecretKey" line="763">
                <params>
                    <param name="mesg" type="ECDHClientKeyExchange"/>
                </params>
                <scope line="764"/>
            </method>
            <method name="clientCertificateVerify" type="void" line="769">
                <params>
                    <param name="mesg" type="CertificateVerify"/>
                </params>
                <scope line="770"/>
                <scope line="773">
                    <declaration name="signAlg" type="SignatureAndHashAlgorithm" line="774"/>
                    <scope line="775"/>
                    <declaration name="hashAlg" type="String" line="778"/>
                    <scope line="779"/>
                </scope>
                <scope line="784">
                    <declaration name="publicKey" type="PublicKey" line="785"/>
                    <declaration name="valid" type="boolean" line="786"/>
                    <scope line="787"/>
                </scope>
                <scope line="791"/>
            </method>
            <method name="clientFinished" type="void" line="796">
                <params>
                    <param name="mesg" type="Finished"/>
                </params>
                <scope line="797"/>
                <scope line="800"/>
                <scope line="803"/>
                <declaration name="verified" type="boolean" line="806"/>
                <scope line="807"/>
                <scope line="810"/>
                <scope line="813"/>
                <scope line="818">
                    <scope line="820"/>
                </scope>
                <scope line="824"/>
            </method>
            <method name="sendChangeCipherAndFinish" type="void" line="828">
                <params>
                    <param name="finishedTag" type="boolean"/>
                </params>
                <declaration name="mesg" type="Finished" line="830"/>
                <scope line="832"/>
                <scope line="835"/>
            </method>
            <method name="getKickstartMessage" type="HandshakeMessage" line="839"/>
            <method name="handshakeAlert" type="void" line="842">
                <params>
                    <param name="description" type="byte"/>
                </params>
                <declaration name="message" type="String" line="843"/>
                <scope line="844"/>
                <scope line="847"/>
            </method>
            <method name="clientKeyExchange" type="SecretKey" line="852">
                <params>
                    <param name="mesg" type="RSAClientKeyExchange"/>
                </params>
                <scope line="853"/>
            </method>
            <method name="clientCertificate" type="void" line="858">
                <params>
                    <param name="mesg" type="CertificateMsg"/>
                </params>
                <scope line="859"/>
                <declaration name="peerCerts" type="X509Certificate[]" line="862"/>
                <scope line="863">
                    <scope line="864">
                        <scope line="865"/>
                    </scope>
                    <scope line="870"/>
                </scope>
                <declaration name="tm" type="X509TrustManager" line="874"/>
                <scope line="875">
                    <declaration name="key" type="PublicKey" line="876"/>
                    <declaration name="keyAlgorithm" type="String" line="877"/>
                    <declaration name="authType" type="String" line="878"/>
                    <scope line="879"/>
                    <scope line="882"/>
                    <scope line="885"/>
                    <scope line="888"/>
                    <scope line="891">
                        <scope line="892"/>
                        <scope line="895"/>
                    </scope>
                    <scope line="899"/>
                </scope>
                <scope line="903"/>
            </method>
        </class>
    </source>