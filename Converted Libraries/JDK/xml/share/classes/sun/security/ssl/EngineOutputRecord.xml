<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="javax.net.ssl.SSLException"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="EngineOutputRecord" line="6">
            <extends class="OutputRecord"/>
            <javadoc line="6">
                A OutputRecord class extension which uses external ByteBuffers
                  or the internal ByteArrayOutputStream for data manipulations.
                  &lt;P&gt;
                  Instead of rewriting this entire class
                  to use ByteBuffers, we leave things intact, so handshake, CCS,
                  and alerts will continue to use the internal buffers, but application
                  data will use external buffers.                
                <author>
                    Brad Wetmore                    
                </author>
            </javadoc>
            <declaration name="writer" type="EngineWriter" line="17"/>
            <declaration name="finishedMsg" type="boolean" line="18"/>
            <method name="EngineOutputRecord" type="constructor" line="19">
                <params>
                    <param name="type" type="byte"/>
                    <param name="engine" type="SSLEngineImpl"/>
                </params>
            </method>
            <javadoc line="23">
                Get the size of the buffer we need for records of the specified
                  type.
                  &lt;P&gt;
                  Application data buffers will provide their own byte buffers,
                  and will not use the internal byte caching.                
            </javadoc>
            <method name="recordSize" type="int" line="30">
                <params>
                    <param name="type" type="byte"/>
                </params>
            </method>
            <method name="setFinishedMsg" type="void" line="42"/>
            <method name="flush" type="void" line="45"/>
            <method name="isFinishedMsg" type="boolean" line="48"/>
            <javadoc line="51">
                Calculate the MAC value, storing the result either in
                  the internal buffer, or at the end of the destination
                  ByteBuffer.
                  &lt;P&gt;
                  We assume that the higher levels have assured us enough
                  room, otherwise we&apos;ll indirectly throw a
                  BufferOverFlowException runtime exception.
                  position should equal limit, and points to the next
                  free spot.                
            </javadoc>
            <method name="addMAC" type="void" line="62">
                <params>
                    <param name="signer" type="MAC"/>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <scope line="63">
                    <declaration name="hash" type="byte[]" line="64"/>
                </scope>
            </method>
            <method name="encrypt" type="void" line="69">
                <params>
                    <param name="box" type="CipherBox"/>
                    <param name="bb" type="ByteBuffer"/>
                </params>
            </method>
            <method name="writeBuffer" type="void" line="72">
                <params>
                    <param name="s" type="OutputStream"/>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="netBB" type="ByteBuffer" line="73"/>
            </method>
            <method name="write" type="void" line="76">
                <params>
                    <param name="writeMAC" type="MAC"/>
                    <param name="writeCipher" type="CipherBox"/>
                </params>
                <scope line="85"/>
            </method>
            <javadoc line="92">
                Main wrap/write driver.                
            </javadoc>
            <method name="write" type="void" line="95">
                <params>
                    <param name="ea" type="EngineArgs"/>
                    <param name="writeMAC" type="MAC"/>
                    <param name="writeCipher" type="CipherBox"/>
                </params>
                <scope line="97"/>
                <declaration name="length" type="int" line="100"/>
                <scope line="101"/>
                <declaration name="dstBB" type="ByteBuffer" line="104"/>
                <declaration name="dstPos" type="int" line="105"/>
                <declaration name="dstLim" type="int" line="106"/>
                <declaration name="dstData" type="int" line="107"/>
                <scope line="116"/>
                <declaration name="packetLength" type="int" line="119"/>
            </method>
        </class>
    </source>