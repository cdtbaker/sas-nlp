<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl.krb5">
        <import package="java.io.IOException"/>
        <import package="java.io.PrintStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.net.InetAddress"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.security.auth.kerberos.KerberosTicket"/>
        <import package="javax.security.auth.kerberos.KerberosKey"/>
        <import package="javax.security.auth.kerberos.KerberosPrincipal"/>
        <import package="javax.security.auth.kerberos.ServicePermission"/>
        <import package="sun.security.jgss.GSSCaller"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.EncryptedData"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <import package="sun.security.krb5.Realm"/>
        <import package="sun.security.krb5.internal.Ticket"/>
        <import package="sun.security.krb5.internal.EncTicketPart"/>
        <import package="sun.security.krb5.internal.crypto.KeyUsage"/>
        <import package="sun.security.jgss.krb5.Krb5Util"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.internal.Krb5"/>
        <import package="sun.security.ssl.Debug"/>
        <import package="sun.security.ssl.HandshakeInStream"/>
        <import package="sun.security.ssl.HandshakeOutStream"/>
        <import package="sun.security.ssl.ProtocolVersion"/>
        <class name="KerberosClientKeyExchangeImpl" line="30">
            <extends class="sun.security.ssl.KerberosClientKeyExchange"/>
            <javadoc line="30">
                This is Kerberos option in the client key exchange message
                  (CLIENT -&gt; SERVER). It holds the Kerberos ticket and the encrypted
                  premaster secret encrypted with the session key sealed in the ticket.
                  From RFC 2712:
                  struct
                  {
                  opaque Ticket;
                  opaque authenticator;            // optional
                  opaque EncryptedPreMasterSecret; // encrypted with the session key
                  // which is sealed in the ticket
                  } KerberosWrapper;
                  Ticket and authenticator are encrypted as per RFC 1510 (in ASN.1)
                  Encrypted pre-master secret has the same structure as it does for RSA
                  except for Kerberos, the encryption key is the session key instead of
                  the RSA public key.
                  XXX authenticator currently ignored                
            </javadoc>
            <declaration name="preMaster" type="KerberosPreMasterSecret" line="49"/>
            <declaration name="encodedTicket" type="byte[]" line="50"/>
            <declaration name="peerPrincipal" type="KerberosPrincipal" line="51"/>
            <declaration name="localPrincipal" type="KerberosPrincipal" line="52"/>
            <method name="KerberosClientKeyExchangeImpl" type="constructor" line="53"/>
            <javadoc line="55">
                Creates an instance of KerberosClientKeyExchange consisting of the
                  Kerberos service ticket, authenticator and encrypted premaster secret.
                  Called by client handshaker.                
                <param>
                    serverName name of server with which to do handshake;
                      this is used to get the Kerberos service ticket                    
                </param>
                <param>
                    protocolVersion Maximum version supported by client (i.e,
                      version it requested in client hello)                    
                </param>
                <param>
                    rand random number generator to use for generating pre-master
                      secret                    
                </param>
            </javadoc>
            <method name="init" type="void" line="66">
                <params>
                    <param name="serverName" type="String"/>
                    <param name="isLoopback" type="boolean"/>
                    <param name="acc" type="AccessControlContext"/>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="rand" type="SecureRandom"/>
                </params>
                <declaration name="ticket" type="KerberosTicket" line="67"/>
                <declaration name="sessionKey" type="EncryptionKey" line="71"/>
            </method>
            <javadoc line="74">
                Creates an instance of KerberosClientKeyExchange from its ASN.1 encoding.
                  Used by ServerHandshaker to verify and obtain premaster secret.                
                <param>
                    protocolVersion current protocol version                    
                </param>
                <param>
                    clientVersion version requested by client in its ClientHello;
                      used by premaster secret version check                    
                </param>
                <param>
                    rand random number generator used for generating random
                      premaster secret if ticket and/or premaster verification fails                    
                </param>
                <param>
                    input inputstream from which to get ASN.1-encoded KerberosWrapper                    
                </param>
                <param>
                    serverKey server's master secret key                    
                </param>
            </javadoc>
            <method name="init" type="void" line="85">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="clientVersion" type="ProtocolVersion"/>
                    <param name="rand" type="SecureRandom"/>
                    <param name="input" type="HandshakeInStream"/>
                    <param name="secretKeys" type="SecretKey[]"/>
                </params>
                <declaration name="serverKeys" type="KerberosKey[]" line="86"/>
                <scope line="88"/>
                <declaration name="sessionKey" type="EncryptionKey" line="91"/>
                <scope line="92">
                    <declaration name="t" type="Ticket" line="93"/>
                    <declaration name="encPart" type="EncryptedData" line="94"/>
                    <declaration name="ticketSname" type="PrincipalName" line="95"/>
                    <declaration name="ticketRealm" type="Realm" line="96"/>
                    <declaration name="serverPrincipal" type="String" line="97"/>
                    <declaration name="ticketPrinc" type="String" line="98"/>
                    <scope line="99"/>
                    <declaration name="encPartKeyType" type="int" line="103"/>
                    <declaration name="encPartKeyVersion" type="Integer" line="104"/>
                    <declaration name="dkey" type="KerberosKey" line="105"/>
                    <scope line="106"/>
                    <scope line="109"/>
                    <scope line="112"/>
                    <declaration name="secretKey" type="EncryptionKey" line="115"/>
                    <declaration name="bytes" type="byte[]" line="116"/>
                    <declaration name="temp" type="byte[]" line="117"/>
                    <declaration name="encTicketPart" type="EncTicketPart" line="118"/>
                    <scope line="122"/>
                </scope>
                <scope line="128"/>
                <scope line="131">
                    <scope line="132"/>
                </scope>
                <scope line="138"/>
                <scope line="141"/>
            </method>
            <method name="messageLength" type="int" line="145"/>
            <method name="send" type="void" line="148">
                <params>
                    <param name="s" type="HandshakeOutStream"/>
                </params>
            </method>
            <method name="print" type="void" line="153">
                <params>
                    <param name="s" type="PrintStream"/>
                </params>
                <scope line="155"/>
            </method>
            <method name="getServiceTicket" type="KerberosTicket" line="161">
                <params>
                    <param name="srvName" type="String"/>
                    <param name="isLoopback" type="boolean"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="serverName" type="String" line="162"/>
                <scope line="163">
                    <anonymous_class line="164">
                        <method name="run" type="String" line="165">
                            <declaration name="hostname" type="String" line="166"/>
                            <scope line="167"/>
                            <scope line="170"/>
                        </method>
                    </anonymous_class>
                    <declaration name="localHost" type="String" line="164"/>
                </scope>
                <declaration name="serviceName" type="String" line="179"/>
                <declaration name="principal" type="PrincipalName" line="180"/>
                <scope line="181"/>
                <scope line="184"/>
                <scope line="187">
                    <declaration name="ioe" type="IOException" line="188"/>
                </scope>
                <declaration name="realm" type="String" line="192"/>
                <declaration name="serverPrincipal" type="String" line="193"/>
                <declaration name="tgsPrincipal" type="String" line="194"/>
                <declaration name="clientPrincipal" type="String" line="195"/>
                <declaration name="sm" type="SecurityManager" line="196"/>
                <scope line="197"/>
                <scope line="200">
                    <anonymous_class line="201">
                        <method name="run" type="KerberosTicket" line="202"/>
                    </anonymous_class>
                    <declaration name="ticket" type="KerberosTicket" line="201"/>
                    <scope line="207"/>
                </scope>
                <scope line="212">
                    <declaration name="ioe" type="IOException" line="213"/>
                </scope>
            </method>
            <method name="getUnencryptedPreMasterSecret" type="byte[]" line="218"/>
            <method name="getPeerPrincipal" type="KerberosPrincipal" line="221"/>
            <method name="getLocalPrincipal" type="KerberosPrincipal" line="224"/>
            <javadoc line="227">
                Determines if a kvno matches another kvno. Used in the method
                  findKey(etype, version, keys). Always returns true if either input
                  is null or zero, in case any side does not have kvno info available.
                  Note: zero is included because N/A is not a legal value for kvno
                  in javax.security.auth.kerberos.KerberosKey. Therefore, the info
                  that the kvno is N/A might be lost when converting between
                  EncryptionKey and KerberosKey.                
            </javadoc>
            <method name="versionMatches" type="boolean" line="236">
                <params>
                    <param name="v1" type="Integer"/>
                    <param name="v2" type="int"/>
                </params>
                <scope line="237"/>
            </method>
            <method name="findKey" type="KerberosKey" line="242">
                <params>
                    <param name="etype" type="int"/>
                    <param name="version" type="Integer"/>
                    <param name="keys" type="KerberosKey[]"/>
                </params>
                <declaration name="ktype" type="int" line="243"/>
                <declaration name="etypeFound" type="boolean" line="244"/>
                <scope line="245">
                    <scope line="247">
                        <scope line="249"/>
                    </scope>
                </scope>
                <scope line="254">
                    <scope line="255">
                        <scope line="257">
                            <scope line="259"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="265"/>
            </method>
        </class>
    </source>