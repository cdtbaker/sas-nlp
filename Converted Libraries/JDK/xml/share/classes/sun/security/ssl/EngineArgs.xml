<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="javax.net.ssl"/>
        <import package="java.nio"/>
        <class name="EngineArgs" line="38">
            <comment line="41">
                Keep track of the input parameters.                
            </comment>
            <comment line="47">
                offset/len for the appData array.                
            </comment>
            <comment line="50">
                The initial poslimit conditions.  This is useful because we can
                 quickly calculate the amount consumedproduced in successful
                 operations, or easily return the buffers to their pre-error
                 conditions.                
            </comment>
            <comment line="62">
                Sum total of the space remaining in all of the appData buffers                
            </comment>
            <comment line="69">
                Called by the SSLEngine.wrap() method.                
            </comment>
            <comment line="78">
                Called by the SSLEngine.unwrap() method.                
            </comment>
            <comment line="87">
                The main initialization method for the arguments.  Most
                 of them are pretty obvious as to what they do.
                
                 Since we&apos;re already iterating over appData array for validity
                 checking, we also keep track of how much remainging space is
                 available.  Info is used in both unwrap (to see if there is
                 enough space available in the destination), and in wrap (to
                 determine how much more we can copy into the outgoing data
                 buffer.                
            </comment>
            <comment line="149">
                Given spaceLeft bytes to transfer, gather up that much data
                 from the appData buffers (starting at offset in the array),
                 and transfer it into the netData buffer.
                
                 The user has already ensured there is enough room.                
            </comment>
            <comment line="165">
                Using the supplied buffer, scatter the data into the appData buffers
                 (starting at offset in the array).
                
                 The user has already ensured there is enough room.                
            </comment>
            <comment line="188">
                Calculate the bytesConsumedbyteProduced.  Aren&apos;t you glad
                 we saved this off earlier?                
            </comment>
            <comment line="196">
                Calculate the bytesConsumedbyteProduced.  Aren&apos;t you glad
                 we saved this off earlier?                
            </comment>
            <comment line="210">
                In the case of Exception, we want to reset the positions
                 to appear as though no data has been consumed or produced.                
            </comment>
            <comment line="221">
                We are doing lots of ByteBuffer manipulations, in which case
                 we need to make sure that the limits get set back correctly.
                 This is one of the last things to get done before returning to
                 the user.                
            </comment>
            <declaration name="netData" type="ByteBuffer" line="43"/>
            <declaration name="appData" type="ByteBuffer[]" line="44"/>
            <declaration name="offset" type="int" line="46"/>
            <declaration name="len" type="int" line="47"/>
            <declaration name="netPos" type="int" line="55"/>
            <declaration name="netLim" type="int" line="56"/>
            <declaration name="appPoss" type="int[]" line="58"/>
            <declaration name="appLims" type="int[]" line="59"/>
            <declaration name="appRemaining" type="int" line="64"/>
            <declaration name="wrapMethod" type="boolean" line="66"/>
            <method name="EngineArgs" type="constructor" line="72">
                <params>
                    <param name="appData" type="ByteBuffer[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="netData" type="ByteBuffer"/>
                </params>
            </method>
            <method name="EngineArgs" type="constructor" line="81">
                <params>
                    <param name="netData" type="ByteBuffer"/>
                    <param name="appData" type="ByteBuffer[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="98">
                <params>
                    <param name="netData" type="ByteBuffer"/>
                    <param name="appData" type="ByteBuffer[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="124">
                    If we&apos;re unwrapping, then check to make sure our
                     destination bufffers are writable.                    
                </comment>
                <comment line="138">
                    Ok, looks like we have a good set of args, let&apos;s
                     store the rest of this stuff.                    
                </comment>
                <scope line="100"/>
                <scope line="104"/>
                <scope line="108"/>
                <scope line="118">
                    <scope line="119"/>
                    <scope line="128"/>
                </scope>
            </method>
            <method name="gather" type="void" line="155">
                <params>
                    <param name="spaceLeft" type="int"/>
                </params>
                <scope line="156">
                    <declaration name="amount" type="int" line="157"/>
                </scope>
            </method>
            <method name="scatter" type="void" line="170">
                <params>
                    <param name="readyData" type="ByteBuffer"/>
                </params>
                <declaration name="amountLeft" type="int" line="171"/>
                <scope line="174">
                    <declaration name="amount" type="int" line="175"/>
                </scope>
            </method>
            <method name="getAppRemaining" type="int" line="183"/>
            <method name="deltaNet" type="int" line="191"/>
            <method name="deltaApp" type="int" line="199">
                <comment line="200">
                    Only calculating 2^14 here, don&apos;t need a long.                    
                </comment>
                <declaration name="sum" type="int" line="200"/>
                <scope line="202"/>
            </method>
            <method name="resetPos" type="void" line="213">
                <scope line="215"/>
            </method>
            <method name="resetLim" type="void" line="226">
                <scope line="228"/>
            </method>
        </class>
    </source>