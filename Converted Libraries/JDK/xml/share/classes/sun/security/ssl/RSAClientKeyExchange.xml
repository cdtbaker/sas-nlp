<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.internal.spec.TlsRsaPremasterSecretParameterSpec"/>
        <class name="RSAClientKeyExchange" line="9">
            <extends class="HandshakeMessage"/>
            <javadoc line="9">
                This is the client key exchange message (CLIENT --&gt; SERVER) used with
                  all RSA key exchanges; it holds the RSA-encrypted pre-master secret.
                  The message is encrypted using PKCS #1 block type 02 encryption with the
                  server&apos;s public key.  The padding and resulting message size is a function
                  of this server&apos;s public key modulus size, but the pre-master secret is
                  always exactly 48 bytes.                
            </javadoc>
            <declaration name="PROP_NAME" type="String" line="18"/>
            <javadoc line="18">
                The TLS spec says that the version in the RSA premaster secret must
                  be the maximum version supported by the client (i.e. the version it
                  requested in its client hello version). However, we (and other
                  implementations) used to send the active negotiated version. The
                  system property below allows to toggle the behavior.                
            </javadoc>
            <declaration name="rsaPreMasterSecretFix" type="boolean" line="26"/>
            <declaration name="protocolVersion" type="ProtocolVersion" line="27"/>
            <declaration name="preMaster" type="SecretKey" line="28"/>
            <declaration name="encrypted" type="byte[]" line="29"/>
            <method name="RSAClientKeyExchange" type="constructor" line="30">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="maxVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="publicKey" type="PublicKey"/>
                </params>
                <scope line="31"/>
                <declaration name="major" type="int" line="35"/>
                <scope line="36"/>
                <scope line="40"/>
                <scope line="44">
                    <declaration name="s" type="String" line="45"/>
                    <declaration name="kg" type="KeyGenerator" line="46"/>
                    <declaration name="cipher" type="Cipher" line="49"/>
                </scope>
                <scope line="53"/>
            </method>
            <method name="RSAClientKeyExchange" type="constructor" line="57">
                <params>
                    <param name="currentVersion" type="ProtocolVersion"/>
                    <param name="maxVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="input" type="HandshakeInStream"/>
                    <param name="messageSize" type="int"/>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
                <scope line="58"/>
                <scope line="61"/>
                <scope line="64">
                    <scope line="66"/>
                </scope>
                <scope line="70">
                    <declaration name="cipher" type="Cipher" line="71"/>
                </scope>
                <scope line="76"/>
            </method>
            <javadoc line="80">
                To avoid vulnerabilities described by section 7.4.7.1, RFC 5246,
                  treating incorrectly formatted message blocks and/or mismatched
                  version numbers in a manner indistinguishable from correctly
                  formatted RSA blocks.
                  RFC 5246 describes the approach as :
                  1. Generate a string R of 46 random bytes
                  2. Decrypt the message to recover the plaintext M
                  3. If the PKCS#1 padding is not correct, or the length of message
                  M is not exactly 48 bytes:
                  pre_master_secret = ClientHello.client_version || R
                  else If ClientHello.client_version &lt;= TLS 1.0, and version
                  number check is explicitly disabled:
                  pre_master_secret = M
                  else:
                  pre_master_secret = ClientHello.client_version || M[2..47]                
            </javadoc>
            <method name="polishPreMasterSecretKey" type="SecretKey" line="97">
                <params>
                    <param name="currentVersion" type="ProtocolVersion"/>
                    <param name="clientHelloVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="secretKey" type="SecretKey"/>
                    <param name="failoverException" type="Exception"/>
                </params>
                <scope line="99">
                    <declaration name="encoded" type="byte[]" line="100"/>
                    <scope line="101">
                        <scope line="102"/>
                    </scope>
                    <scope line="107">
                        <scope line="108"/>
                        <scope line="111">
                            <scope line="112"/>
                        </scope>
                        <scope line="117"/>
                    </scope>
                    <scope line="121">
                        <scope line="122"/>
                    </scope>
                </scope>
                <scope line="127">
                    <scope line="128"/>
                </scope>
            </method>
            <method name="generateDummySecret" type="SecretKey" line="136">
                <params>
                    <param name="version" type="ProtocolVersion"/>
                </params>
                <scope line="137">
                    <declaration name="s" type="String" line="138"/>
                    <declaration name="kg" type="KeyGenerator" line="139"/>
                </scope>
                <scope line="143"/>
            </method>
            <method name="messageType" type="int" line="147"/>
            <method name="messageLength" type="int" line="150">
                <scope line="151"/>
                <scope line="154"/>
            </method>
            <method name="send" type="void" line="158">
                <params>
                    <param name="s" type="HandshakeOutStream"/>
                </params>
                <scope line="159"/>
                <scope line="162"/>
            </method>
            <method name="print" type="void" line="166">
                <params>
                    <param name="s" type="PrintStream"/>
                </params>
            </method>
        </class>
    </source>