<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.internal.spec.TlsRsaPremasterSecretParameterSpec"/>
        <class name="RSAClientKeyExchange" line="40">
            <extends class="HandshakeMessage"/>
            <comment line="63">
                Default is &quot;false&quot; (old behavior) for compatibility reasons in
                 SSLv3TLSv1.  Later protocols (TLSv1.1+) do not use this property.                
            </comment>
            <comment line="70">
                The following field values were encrypted with the server&apos;s public
                 key (or temp key from server key exchange msg) and are presented
                 here in DECRYPTED form.                
            </comment>
            <comment line="75">
                preMaster [0,1]                
            </comment>
            <comment line="77">
                same size as public modulus                
            </comment>
            <comment line="79">
                Client randomly creates a pre-master secret and encrypts it
                 using the server&apos;s RSA public key; only the server can decrypt
                 it, using its RSA private key.  Result is the same size as the
                 server&apos;s public key, and uses PKCS #1 block format 02.                
            </comment>
            <comment line="120">
                Server gets the PKCS #1 (block format 02) data, decrypts
                 it with its private key.                
            </comment>
            <comment line="245">
                generate a premaster secret with the specified version number                
            </comment>
            <javadoc line="40">
                This is the client key exchange message (CLIENT --&gt; SERVER) used with
                  all RSA key exchanges; it holds the RSA-encrypted pre-master secret.
                  The message is encrypted using PKCS #1 block type 02 encryption with the
                  server&apos;s public key.  The padding and resulting message size is a function
                  of this server&apos;s public key modulus size, but the pre-master secret is
                  always exactly 48 bytes.                
            </javadoc>
            <declaration name="PROP_NAME" type="String" line="52"/>
            <javadoc line="52">
                The TLS spec says that the version in the RSA premaster secret must
                  be the maximum version supported by the client (i.e. the version it
                  requested in its client hello version). However, we (and other
                  implementations) used to send the active negotiated version. The
                  system property below allows to toggle the behavior.                
            </javadoc>
            <declaration name="rsaPreMasterSecretFix" type="boolean" line="66"/>
            <declaration name="protocolVersion" type="ProtocolVersion" line="74"/>
            <declaration name="preMaster" type="SecretKey" line="75"/>
            <declaration name="encrypted" type="byte[]" line="76"/>
            <method name="RSAClientKeyExchange" type="constructor" line="86">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="maxVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="publicKey" type="PublicKey"/>
                </params>
                <scope line="87"/>
                <declaration name="major" type="int" line="92"/>
                <scope line="94"/>
                <scope line="97"/>
                <scope line="102">
                    <declaration name="s" type="String" line="103"/>
                    <declaration name="kg" type="KeyGenerator" line="105"/>
                    <declaration name="cipher" type="Cipher" line="110"/>
                </scope>
                <scope line="113"/>
            </method>
            <method name="RSAClientKeyExchange" type="constructor" line="126">
                <params>
                    <param name="currentVersion" type="ProtocolVersion"/>
                    <param name="maxVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="input" type="HandshakeInStream"/>
                    <param name="messageSize" type="int"/>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
                <comment line="148">
                    polish the premaster secret                    
                </comment>
                <comment line="152">
                    polish the premaster secret                    
                </comment>
                <scope line="128"/>
                <scope line="132"/>
                <scope line="134">
                    <scope line="136"/>
                </scope>
                <scope line="142">
                    <declaration name="cipher" type="Cipher" line="143"/>
                </scope>
                <scope line="151"/>
            </method>
            <javadoc line="159">
                To avoid vulnerabilities described by section 7.4.7.1, RFC 5246,
                  treating incorrectly formatted message blocks and/or mismatched
                  version numbers in a manner indistinguishable from correctly
                  formatted RSA blocks.
                  RFC 5246 describes the approach as :
                  1. Generate a string R of 46 random bytes
                  2. Decrypt the message to recover the plaintext M
                  3. If the PKCS#1 padding is not correct, or the length of message
                  M is not exactly 48 bytes:
                  pre_master_secret = ClientHello.client_version || R
                  else If ClientHello.client_version &lt;= TLS 1.0, and version
                  number check is explicitly disabled:
                  pre_master_secret = M
                  else:
                  pre_master_secret = ClientHello.client_version || M[2..47]                
            </javadoc>
            <method name="polishPreMasterSecretKey" type="SecretKey" line="182">
                <params>
                    <param name="currentVersion" type="ProtocolVersion"/>
                    <param name="clientHelloVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="secretKey" type="SecretKey"/>
                    <param name="failoverException" type="Exception"/>
                </params>
                <comment line="187">
                    check the length                    
                </comment>
                <comment line="189">
                    unable to get the encoded key                    
                </comment>
                <comment line="195">
                    We are not always able to get the encoded key of the                    
                </comment>
                <comment line="196">
                    premaster secret. Pass the cheking to master secret                    
                </comment>
                <comment line="197">
                    calculation.                    
                </comment>
                <comment line="200">
                    check the version                    
                </comment>
                <comment line="205">
                    we never checked the client_version in server side
                     for TLS v1.0 and SSL v3.0. For compatibility, we
                     maintain this behavior.                    
                </comment>
                <scope line="186">
                    <declaration name="encoded" type="byte[]" line="188"/>
                    <scope line="189">
                        <scope line="190"/>
                    </scope>
                    <scope line="199">
                        <scope line="202"/>
                        <scope line="204">
                            <scope line="211"/>
                        </scope>
                        <scope line="217"/>
                    </scope>
                    <scope line="223">
                        <scope line="224"/>
                    </scope>
                </scope>
                <scope line="232">
                    <scope line="233"/>
                </scope>
            </method>
            <method name="generateDummySecret" type="SecretKey" line="245">
                <params>
                    <param name="version" type="ProtocolVersion"/>
                </params>
                <scope line="246">
                    <declaration name="s" type="String" line="247"/>
                    <declaration name="kg" type="KeyGenerator" line="249"/>
                </scope>
                <scope line="253"/>
            </method>
            <method name="messageType" type="int" line="259"/>
            <method name="messageLength" type="int" line="264">
                <scope line="265"/>
                <scope line="267"/>
            </method>
            <method name="send" type="void" line="273">
                <params>
                    <param name="s" type="HandshakeOutStream"/>
                </params>
                <scope line="274"/>
                <scope line="276"/>
            </method>
            <method name="print" type="void" line="282">
                <params>
                    <param name="s" type="PrintStream"/>
                </params>
            </method>
        </class>
    </source>