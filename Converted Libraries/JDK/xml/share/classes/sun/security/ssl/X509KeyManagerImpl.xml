<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.lang.ref"/>
        <import package="java.util"/>
        <import package="java.util.Locale.ENGLISH"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="java.net.Socket"/>
        <import package="java.security"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.Certificate"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.provider.certpath.AlgorithmChecker"/>
        <class name="X509KeyManagerImpl" line="43">
            <extends class="X509ExtendedKeyManager"/>
            <comment line="69">
                for unit testing only, set via privileged reflection                
            </comment>
            <comment line="72">
                list of the builders                
            </comment>
            <comment line="75">
                counter to generate unique ids for the aliases                
            </comment>
            <comment line="78">
                cached entries                
            </comment>
            <comment line="92">
                LinkedHashMap with a max size of 10
                 see LinkedHashMap JavaDocs                
            </comment>
            <comment line="100">
                public methods                
            </comment>
            <comment line="147">
                implementation private methods                
            </comment>
            <comment line="151">
                Gets algorithm constraints of the socket.                
            </comment>
            <comment line="183">
                Gets algorithm constraints of the engine.                
            </comment>
            <comment line="209">
                we construct the alias we return to JSSE as seen in the code below
                 a unique id is included to allow us to reliably cache entries
                 between the calls to getCertificateChain() and getPrivateKey()
                 even if tokens are inserted or removed                
            </comment>
            <comment line="259">
                Class to help verify that the public key algorithm (and optionally
                 the signature algorithm) of a certificate matches what we need.                
            </comment>
            <comment line="318">
                Return the best alias that fits the given parameters.
                 The algorithm we use is:
                   . scan through all the aliases in all builders in order
                   . as soon as we find a perfect match, return
                     (i.e. a match with a cert that has appropriate key usage
                      and is not expired).
                   . if we do not find a perfect match, keep looping and remember
                     the imperfect matches
                   . at the end, sort the imperfect matches. we prefer expired certs
                     with appropriate key usage to certs with the wrong key usage.
                     return the first one of them.                
            </comment>
            <comment line="378">
                Return all aliases that (approximately) fit the parameters.
                 These are perfect matches plus imperfect matches (expired certificates
                 and certificates with the wrong extensions).
                 The perfect matches will be first in the array.                
            </comment>
            <comment line="420">
                turn candidate entries into unique aliases we can return to JSSE                
            </comment>
            <comment line="430">
                make a Set out of the array                
            </comment>
            <comment line="439">
                a candidate match
                 identifies the entry by builder and alias
                 and includes the result of the certificate check                
            </comment>
            <comment line="472">
                enum for the type of certificate check we want to perform
                 (client or server)
                 also includes the check code itself                
            </comment>
            <comment line="575">
                enum for the result of the extension check
                 NOTE: the order of the constants is important as they are used
                 for sorting, i.e. OK is best, followed by EXPIRED and EXTENSION_MISMATCH                
            </comment>
            <comment line="584">
                Return a List of all candidate matches in the specified builder
                 that fit the parameters.
                 We exclude entries in the KeyStore if they are not:
                  . private key entries
                  . the certificates are not X509 certificates
                  . the algorithm of the key in the EE cert doesn&apos;t match one of keyTypes
                  . none of the certs is issued by a Principal in issuerSet
                 Using those entries would not be possible or they would almost
                 certainly be rejected by the peer.
                
                 In addition to those checks, we also check the extensions in the EE
                 cert and its expiration. Even if there is a mismatch, we include
                 such certificates because they technically work and might be accepted
                 by the peer. This leads to more graceful failure and better error
                 messages if the cert expires from one day to the next.
                
                 The return values are:
                   . null, if there are no matching entries at all
                   . if &apos;findAll&apos; is &apos;false&apos; and there is a perfect match, a List
                     with a single element (early return)
                   . if &apos;findAll&apos; is &apos;false&apos; and there is NO perfect match, a List
                     with all the imperfect matches (expired, wrong extensions)
                   . if &apos;findAll&apos; is &apos;true&apos;, a List with all perfect and imperfect
                     matches                
            </comment>
            <implements interface="X509KeyManager"/>
            <javadoc line="43">
                The new X509 key manager implementation. The main differences to the
                  old SunX509 key manager are:
                  . it is based around the KeyStore.Builder API. This allows it to use
                  other forms of KeyStore protection or password input (e.g. a
                  CallbackHandler) or to have keys within one KeyStore protected by
                  different keys.
                  . it can use multiple KeyStores at the same time.
                  . it is explicitly designed to accomodate KeyStores that change over
                  the lifetime of the process.
                  . it makes an effort to choose the key that matches best, i.e. one that
                  is not expired and has the appropriate certificate extensions.
                  Note that this code is not explicitly performance optimzied yet.                
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="63"/>
            <declaration name="useDebug" type="boolean" line="65"/>
            <declaration name="verificationDate" type="Date" line="69"/>
            <declaration name="builders" type="List&lt;Builder&gt;" line="72"/>
            <declaration name="uidCounter" type="AtomicLong" line="75"/>
            <declaration name="entryCacheMap" type="Map&lt;String,Reference&lt;PrivateKeyEntry&gt;&gt;" line="78"/>
            <method name="X509KeyManagerImpl" type="constructor" line="80">
                <params>
                    <param name="builder" type="Builder"/>
                </params>
            </method>
            <method name="X509KeyManagerImpl" type="constructor" line="84">
                <params>
                    <param name="builders" type="List<Builder>"/>
                </params>
            </method>
            <class name="SizedMap" line="93">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="LinkedHashMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="V"/>
                    </type_params>
                </extends>
                <comment line="265">
                    In TLS 1.2, the signature algorithm  has been obsoleted by the
                     supported_signature_algorithms, and the certificate type no longer
                     restricts the algorithm used to sign the certificate.
                     However, because we don&apos;t support certificate type checking other
                     than rsa_sign, dss_sign and ecdsa_sign, we don&apos;t have to check the
                     protocol version here.                    
                </comment>
                <comment line="477">
                    enum constant for &quot;no check&quot; (currently not used)                    
                </comment>
                <comment line="480">
                    enum constant for &quot;tls client&quot; check
                     valid EKU for TLS client: any, tls_client                    
                </comment>
                <comment line="485">
                    enum constant for &quot;tls server&quot; check
                     valid EKU for TLS server: any, tls_server, ns_sgc, ms_sgc                    
                </comment>
                <comment line="491">
                    set of valid EKU values for this type                    
                </comment>
                <comment line="502">
                    check if this certificate is appropriate for this type of use
                     first check extensions, if they match, check expiration
                     note: we may want to move this code into the sun.security.validator
                     package                    
                </comment>
                <comment line="579">
                    ok or not checked                    
                </comment>
                <comment line="580">
                    extensions valid but cert expired                    
                </comment>
                <comment line="581">
                    extensions invalid (expiration not checked)                    
                </comment>
                <method name="removeEldestEntry" type="boolean" line="94">
                    <params>
                        <param name="eldest" type="Map.Entry<K,V>"/>
                    </params>
                </method>
            </class>
            <method name="getCertificateChain" type="X509Certificate[]" line="103">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="PrivateKeyEntry" line="104"/>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="109">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="entry" type="PrivateKeyEntry" line="110"/>
            </method>
            <method name="chooseClientAlias" type="String" line="115">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="chooseEngineClientAlias" type="String" line="121">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="chooseServerAlias" type="String" line="127">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="chooseEngineServerAlias" type="String" line="133">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="getClientAliases" type="String[]" line="138">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="getServerAliases" type="String[]" line="142">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="getAlgorithmConstraints" type="AlgorithmConstraints" line="151">
                <params>
                    <param name="socket" type="Socket"/>
                </params>
                <scope line="153">
                    <declaration name="sslSocket" type="SSLSocket" line="155"/>
                    <declaration name="session" type="SSLSession" line="156"/>
                    <scope line="158">
                        <declaration name="protocolVersion" type="ProtocolVersion" line="159"/>
                        <scope line="161">
                            <declaration name="peerSupportedSignAlgs" type="String[]" line="162"/>
                            <scope line="164">
                                <declaration name="extSession" type="ExtendedSSLSession" line="165"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getAlgorithmConstraints" type="AlgorithmConstraints" line="183">
                <params>
                    <param name="engine" type="SSLEngine"/>
                </params>
                <scope line="184">
                    <declaration name="session" type="SSLSession" line="185"/>
                    <scope line="186">
                        <declaration name="protocolVersion" type="ProtocolVersion" line="187"/>
                        <scope line="189">
                            <declaration name="peerSupportedSignAlgs" type="String[]" line="190"/>
                            <scope line="192">
                                <declaration name="extSession" type="ExtendedSSLSession" line="193"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="makeAlias" type="String" line="212">
                <params>
                    <param name="entry" type="EntryStatus"/>
                </params>
            </method>
            <method name="getEntry" type="PrivateKeyEntry" line="217">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="219">
                    if the alias is null, return immediately                    
                </comment>
                <comment line="224">
                    try to get the entry from cache                    
                </comment>
                <comment line="231">
                    parse the alias                    
                </comment>
                <comment line="235">
                    invalid alias                    
                </comment>
                <comment line="247">
                    unexpected type of entry                    
                </comment>
                <comment line="254">
                    ignore                    
                </comment>
                <scope line="219"/>
                <declaration name="ref" type="Reference&lt;PrivateKeyEntry&gt;" line="224"/>
                <declaration name="entry" type="PrivateKeyEntry" line="225"/>
                <scope line="226"/>
                <declaration name="firstDot" type="int" line="231"/>
                <declaration name="secondDot" type="int" line="232"/>
                <scope line="233"/>
                <scope line="237">
                    <declaration name="builderIndex" type="int" line="238"/>
                    <declaration name="keyStoreAlias" type="String" line="240"/>
                    <declaration name="builder" type="Builder" line="241"/>
                    <declaration name="ks" type="KeyStore" line="242"/>
                    <declaration name="newEntry" type="Entry" line="243"/>
                    <scope line="245"/>
                </scope>
                <scope line="252"/>
            </method>
            <class name="KeyType" line="260">
                <comment line="265">
                    In TLS 1.2, the signature algorithm  has been obsoleted by the
                     supported_signature_algorithms, and the certificate type no longer
                     restricts the algorithm used to sign the certificate.
                     However, because we don&apos;t support certificate type checking other
                     than rsa_sign, dss_sign and ecdsa_sign, we don&apos;t have to check the
                     protocol version here.                    
                </comment>
                <comment line="477">
                    enum constant for &quot;no check&quot; (currently not used)                    
                </comment>
                <comment line="480">
                    enum constant for &quot;tls client&quot; check
                     valid EKU for TLS client: any, tls_client                    
                </comment>
                <comment line="485">
                    enum constant for &quot;tls server&quot; check
                     valid EKU for TLS server: any, tls_server, ns_sgc, ms_sgc                    
                </comment>
                <comment line="491">
                    set of valid EKU values for this type                    
                </comment>
                <comment line="502">
                    check if this certificate is appropriate for this type of use
                     first check extensions, if they match, check expiration
                     note: we may want to move this code into the sun.security.validator
                     package                    
                </comment>
                <comment line="579">
                    ok or not checked                    
                </comment>
                <comment line="580">
                    extensions valid but cert expired                    
                </comment>
                <comment line="581">
                    extensions invalid (expiration not checked)                    
                </comment>
                <declaration name="keyAlgorithm" type="String" line="262"/>
                <declaration name="sigKeyAlgorithm" type="String" line="270"/>
                <method name="KeyType" type="constructor" line="272">
                    <params>
                        <param name="algorithm" type="String"/>
                    </params>
                    <declaration name="k" type="int" line="273"/>
                    <scope line="274"/>
                    <scope line="277"/>
                </method>
                <method name="matches" type="boolean" line="283">
                    <params>
                        <param name="chain" type="Certificate[]"/>
                    </params>
                    <comment line="292">
                        if possible, check the public key in the issuer cert                        
                    </comment>
                    <comment line="296">
                        Check the signature algorithm of the certificate itself.
                         Look for the &quot;withRSA&quot; in &quot;SHA1withRSA&quot;, etc.                        
                    </comment>
                    <scope line="284"/>
                    <scope line="287"/>
                    <scope line="290"/>
                    <scope line="294">
                        <declaration name="issuer" type="X509Certificate" line="297"/>
                        <declaration name="sigAlgName" type="String" line="298"/>
                        <declaration name="pattern" type="String" line="299"/>
                    </scope>
                </method>
            </class>
            <method name="getKeyTypes" type="List<KeyType>" line="305">
                <params>
                    <param name="keyTypes" type="String"/>
                </params>
                <scope line="307"/>
                <declaration name="list" type="List&lt;KeyType&gt;" line="310"/>
                <scope line="311"/>
            </method>
            <method name="chooseAlias" type="String" line="331">
                <params>
                    <param name="keyTypeList" type="List<KeyType>"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="checkType" type="CheckType"/>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
                <comment line="344">
                    the results will either be a single perfect match
                     or 1 or more imperfect matches
                     if it&apos;s a perfect match, return immediately                    
                </comment>
                <comment line="360">
                    ignore                    
                </comment>
                <scope line="332"/>
                <declaration name="issuerSet" type="Set&lt;Principal&gt;" line="336"/>
                <declaration name="allResults" type="List&lt;EntryStatus&gt;" line="337"/>
                <scope line="338">
                    <scope line="339">
                        <declaration name="results" type="List&lt;EntryStatus&gt;" line="340"/>
                        <scope line="342">
                            <declaration name="status" type="EntryStatus" line="346"/>
                            <scope line="347">
                                <scope line="348"/>
                            </scope>
                            <scope line="353"/>
                        </scope>
                    </scope>
                    <scope line="358"/>
                </scope>
                <scope line="362">
                    <scope line="363"/>
                </scope>
                <scope line="369"/>
            </method>
            <method name="getAliases" type="String[]" line="384">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="checkType" type="CheckType"/>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
                <comment line="404">
                    ignore                    
                </comment>
                <scope line="385"/>
                <declaration name="issuerSet" type="Set&lt;Principal&gt;" line="389"/>
                <declaration name="keyTypeList" type="List&lt;KeyType&gt;" line="390"/>
                <declaration name="allResults" type="List&lt;EntryStatus&gt;" line="391"/>
                <scope line="392">
                    <scope line="393">
                        <declaration name="results" type="List&lt;EntryStatus&gt;" line="394"/>
                        <scope line="396">
                            <scope line="397"/>
                        </scope>
                    </scope>
                    <scope line="402"/>
                </scope>
                <scope line="406">
                    <scope line="407"/>
                </scope>
                <scope line="413"/>
            </method>
            <method name="toAliases" type="String[]" line="420">
                <params>
                    <param name="results" type="List<EntryStatus>"/>
                </params>
                <declaration name="s" type="String[]" line="421"/>
                <declaration name="i" type="int" line="422"/>
                <scope line="423"/>
            </method>
            <method name="getIssuerSet" type="Set<Principal>" line="430">
                <params>
                    <param name="issuers" type="Principal[]"/>
                </params>
                <scope line="431"/>
                <scope line="433"/>
            </method>
            <class name="EntryStatus" line="441">
                <comment line="265">
                    In TLS 1.2, the signature algorithm  has been obsoleted by the
                     supported_signature_algorithms, and the certificate type no longer
                     restricts the algorithm used to sign the certificate.
                     However, because we don&apos;t support certificate type checking other
                     than rsa_sign, dss_sign and ecdsa_sign, we don&apos;t have to check the
                     protocol version here.                    
                </comment>
                <comment line="477">
                    enum constant for &quot;no check&quot; (currently not used)                    
                </comment>
                <comment line="480">
                    enum constant for &quot;tls client&quot; check
                     valid EKU for TLS client: any, tls_client                    
                </comment>
                <comment line="485">
                    enum constant for &quot;tls server&quot; check
                     valid EKU for TLS server: any, tls_server, ns_sgc, ms_sgc                    
                </comment>
                <comment line="491">
                    set of valid EKU values for this type                    
                </comment>
                <comment line="502">
                    check if this certificate is appropriate for this type of use
                     first check extensions, if they match, check expiration
                     note: we may want to move this code into the sun.security.validator
                     package                    
                </comment>
                <comment line="579">
                    ok or not checked                    
                </comment>
                <comment line="580">
                    extensions valid but cert expired                    
                </comment>
                <comment line="581">
                    extensions invalid (expiration not checked)                    
                </comment>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="EntryStatus"/>
                    </type_params>
                </implements>
                <declaration name="builderIndex" type="int" line="443"/>
                <declaration name="keyIndex" type="int" line="444"/>
                <declaration name="alias" type="String" line="445"/>
                <declaration name="checkResult" type="CheckResult" line="446"/>
                <method name="EntryStatus" type="constructor" line="449">
                    <params>
                        <param name="builderIndex" type="int"/>
                        <param name="keyIndex" type="int"/>
                        <param name="alias" type="String"/>
                        <param name="chain" type="Certificate[]"/>
                        <param name="checkResult" type="CheckResult"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="456">
                    <params>
                        <param name="other" type="EntryStatus"/>
                    </params>
                    <declaration name="result" type="int" line="457"/>
                </method>
                <method name="toString" type="String" line="461">
                    <declaration name="s" type="String" line="462"/>
                    <scope line="463"/>
                    <scope line="465"/>
                </method>
            </class>
            <declaration name="validEku" type="Set&lt;String&gt;" line="491"/>
            <method name="CheckType" type="constructor" line="493">
                <params>
                    <param name="validEku" type="Set<String>"/>
                </params>
            </method>
            <method name="getBit" type="boolean" line="497">
                <params>
                    <param name="keyUsage" type="boolean[]"/>
                    <param name="bit" type="int"/>
                </params>
            </method>
            <method name="check" type="CheckResult" line="505">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="date" type="Date"/>
                </params>
                <comment line="511">
                    check extensions                    
                </comment>
                <comment line="513">
                    check extended key usage                    
                </comment>
                <comment line="517">
                    if extension present and it does not contain any of
                     the valid EKU OIDs, return extension_mismatch                    
                </comment>
                <comment line="522">
                    check key usage                    
                </comment>
                <comment line="528">
                    require either signature bit
                     or if server also allow key encipherment bit                    
                </comment>
                <comment line="536">
                    require signature bit                    
                </comment>
                <comment line="541">
                    require keyagreement bit                    
                </comment>
                <comment line="546">
                    require signature bit                    
                </comment>
                <comment line="550">
                    For servers, also require key agreement.
                     This is not totally accurate as the keyAgreement bit
                     is only necessary for static ECDH key exchange and
                     not ephemeral ECDH. We leave it in for now until
                     there are signs that this check causes problems
                     for real world EC certificates.                    
                </comment>
                <comment line="562">
                    extensions unparseable, return failure                    
                </comment>
                <scope line="506"/>
                <scope line="511">
                    <declaration name="certEku" type="List&lt;String&gt;" line="513"/>
                    <scope line="515"/>
                    <declaration name="ku" type="boolean[]" line="522"/>
                    <scope line="523">
                        <declaration name="algorithm" type="String" line="524"/>
                        <declaration name="kuSignature" type="boolean" line="525"/>
                        <scope line="526">
                            <scope line="529">
                                <scope line="530"/>
                            </scope>
                        </scope>
                        <scope line="534">
                            <scope line="536"/>
                        </scope>
                        <scope line="539">
                            <scope line="541"/>
                        </scope>
                        <scope line="544">
                            <scope line="546"/>
                            <scope line="555"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="560"/>
                <scope line="565"/>
                <scope line="568"/>
            </method>
            <method name="getAliases" type="List<EntryStatus>" line="612">
                <params>
                    <param name="builderIndex" type="int"/>
                    <param name="keyTypes" type="List<KeyType>"/>
                    <param name="issuerSet" type="Set<Principal>"/>
                    <param name="findAll" type="boolean"/>
                    <param name="checkType" type="CheckType"/>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
                <comment line="621">
                    check if it is a key entry (private key or secret key)                    
                </comment>
                <comment line="628">
                    must be secret key entry, ignore                    
                </comment>
                <comment line="635">
                    not an X509Certificate, ignore this alias                    
                </comment>
                <comment line="644">
                    check keytype                    
                </comment>
                <comment line="661">
                    check issuers                    
                </comment>
                <comment line="680">
                    check the algorithm constraints                    
                </comment>
                <comment line="704">
                    if we have a good match and do not need all matches,
                     return immediately                    
                </comment>
                <declaration name="builder" type="Builder" line="613"/>
                <declaration name="ks" type="KeyStore" line="614"/>
                <declaration name="results" type="List&lt;EntryStatus&gt;" line="615"/>
                <declaration name="date" type="Date" line="616"/>
                <declaration name="preferred" type="boolean" line="617"/>
                <scope line="618">
                    <declaration name="alias" type="String" line="619"/>
                    <scope line="621"/>
                    <declaration name="chain" type="Certificate[]" line="625"/>
                    <scope line="626"/>
                    <declaration name="incompatible" type="boolean" line="631"/>
                    <scope line="632">
                        <scope line="633"/>
                    </scope>
                    <scope line="639"/>
                    <declaration name="keyIndex" type="int" line="644"/>
                    <declaration name="j" type="int" line="645"/>
                    <scope line="646">
                        <scope line="647"/>
                    </scope>
                    <scope line="653">
                        <scope line="654"/>
                    </scope>
                    <scope line="661">
                        <declaration name="found" type="boolean" line="662"/>
                        <scope line="663">
                            <declaration name="xcert" type="X509Certificate" line="664"/>
                            <scope line="665"/>
                        </scope>
                        <scope line="670">
                            <scope line="671"/>
                        </scope>
                    </scope>
                    <scope line="681">
                        <scope line="683"/>
                    </scope>
                    <scope line="691"/>
                    <declaration name="checkResult" type="CheckResult" line="694"/>
                    <declaration name="status" type="EntryStatus" line="696"/>
                    <scope line="699"/>
                    <scope line="702"/>
                    <scope line="706">
                        <scope line="707"/>
                    </scope>
                </scope>
            </method>
            <method name="conformsToAlgorithmConstraints" type="boolean" line="717">
                <params>
                    <param name="constraints" type="AlgorithmConstraints"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="724">
                    unlikely to happen                    
                </comment>
                <comment line="728">
                    It is a forward checker, so we need to check from trust to target.                    
                </comment>
                <comment line="732">
                    We don&apos;t care about the unresolved critical extensions.                    
                </comment>
                <declaration name="checker" type="AlgorithmChecker" line="719"/>
                <scope line="720"/>
                <scope line="722"/>
                <scope line="728">
                    <declaration name="cert" type="Certificate" line="729"/>
                    <scope line="730"/>
                    <scope line="733"/>
                </scope>
            </method>
        </class>
    </source>