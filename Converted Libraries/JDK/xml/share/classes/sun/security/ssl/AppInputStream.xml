<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <class name="AppInputStream" line="3">
            <extends class="InputStream"/>
            <javadoc line="3">
                InputStream for application data as returned by SSLSocket.getInputStream().
                  It uses an InputRecord as internal buffer that is refilled on demand
                  whenever it runs out of data.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="SKIP_ARRAY" type="byte[]" line="10"/>
            <declaration name="c" type="SSLSocketImpl" line="11"/>
            <declaration name="r" type="InputRecord" line="12"/>
            <declaration name="oneByte" type="byte[]" line="13"/>
            <method name="AppInputStream" type="constructor" line="14">
                <params>
                    <param name="conn" type="SSLSocketImpl"/>
                </params>
            </method>
            <javadoc line="18">
                Return the minimum number of bytes that can be read without blocking.
                  Currently not synchronized.                
            </javadoc>
            <method name="available" type="int" line="22">
                <scope line="23"/>
            </method>
            <javadoc line="28">
                Read a single byte, returning -1 on non-fault EOF status.                
            </javadoc>
            <method name="read" type="int" line="31">
                <declaration name="n" type="int" line="32"/>
                <scope line="33"/>
            </method>
            <javadoc line="38">
                Read up to &quot;len&quot; bytes into this buffer, starting at &quot;off&quot;.
                  If the layer above needs more data, it asks for more, so we
                  are responsible only for blocking to fill at most one buffer,
                  and returning &quot;-1&quot; on non-fault EOF status.                
            </javadoc>
            <method name="read" type="int" line="44">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="45"/>
                <scope line="48"/>
                <scope line="51"/>
                <scope line="54"/>
                <scope line="57">
                    <scope line="58">
                        <scope line="60"/>
                    </scope>
                    <declaration name="howmany" type="int" line="64"/>
                </scope>
                <scope line="68"/>
            </method>
            <javadoc line="73">
                Skip n bytes. This implementation is somewhat less efficient
                  than possible, but not badly so (redundant copy). We reuse
                  the read() code to keep things simpler. Note that SKIP_ARRAY
                  is static and may garbled by concurrent use, but we are not interested
                  in the data anyway.                
            </javadoc>
            <method name="skip" type="long" line="80">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="skipped" type="long" line="81"/>
                <scope line="82">
                    <declaration name="len" type="int" line="83"/>
                    <declaration name="r" type="int" line="84"/>
                    <scope line="85"/>
                </scope>
            </method>
            <method name="close" type="void" line="93"/>
        </class>
    </source>