<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.security"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="java.nio"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="CipherBox" line="13">
            <javadoc line="13">
                This class handles bulk data enciphering/deciphering for each SSLv3
                  message.  This provides data confidentiality.  Stream ciphers (such
                  as RC4) don&apos;t need to do padding; block ciphers (e.g. DES) need it.
                  Individual instances are obtained by calling the static method
                  newCipherBox(), which should only be invoked by BulkCipher.newCipher().
                  In RFC 2246, with bock ciphers in CBC mode, the Initialization
                  Vector (IV) for the first record is generated with the other keys
                  and secrets when the security parameters are set.  The IV for
                  subsequent records is the last ciphertext block from the previous
                  record.
                  In RFC 4346, the implicit Initialization Vector (IV) is replaced
                  with an explicit IV to protect against CBC attacks.  RFC 4346
                  recommends two algorithms used to generated the per-record IV.
                  The implementation uses the algorithm (2)(b), as described at
                  section 6.2.3.2 of RFC 4346.
                  The usage of IV in CBC block cipher can be illustrated in
                  the following diagrams.
                  (random)
                  R         P1                    IV        C1
                  |          |                     |         |
                  SIV---+    |-----+    |-...            |-----    |------
                  |    |     |    |                |    |    |     |
                  +----+  |  +----+  |             +----+  |  +----+  |
                  | Ek |  |  + Ek +  |             | Dk |  |  | Dk |  |
                  +----+  |  +----+  |             +----+  |  +----+  |
                  |    |     |    |                |    |    |     |
                  |----|     |----|           SIV--+    |----|     |-...
                  |          |                     |       |
                  IV         C1                     R      P1
                  (discard)
                  CBC Encryption                    CBC Decryption
                  NOTE that any ciphering involved in key exchange (e.g. with RSA) is
                  handled separately.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="NULL" type="CipherBox" line="51"/>
            <declaration name="debug" type="Debug" line="52"/>
            <declaration name="protocolVersion" type="ProtocolVersion" line="53"/>
            <declaration name="cipher" type="Cipher" line="54"/>
            <declaration name="blockSize" type="int" line="55"/>
            <javadoc line="55">
                Cipher blocksize, 0 for stream ciphers                
            </javadoc>
            <declaration name="random" type="SecureRandom" line="59"/>
            <javadoc line="59">
                secure random                
            </javadoc>
            <declaration name="masks" type="Hashtable&amp;lt;Integer,IvParameterSpec&amp;gt;" line="63"/>
            <javadoc line="63">
                Fixed masks of various block size, as the initial decryption IVs
                  for TLS 1.1 or later.
                  For performance, we do not use random IVs. As the initial decryption
                  IVs will be discarded by TLS decryption processes, so the fixed masks
                  do not hurt cryptographic strength.                
            </javadoc>
            <javadoc line="71">
                NULL cipherbox. Identity operation, no encryption.                
            </javadoc>
            <method name="CipherBox" type="constructor" line="74"/>
            <javadoc line="78">
                Construct a new CipherBox using the cipher transformation.                
                <exception>
                    NoSuchAlgorithmException if no appropriate JCE Cipher
                      implementation could be found.                    
                </exception>
            </javadoc>
            <method name="CipherBox" type="constructor" line="83">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="bulkCipher" type="BulkCipher"/>
                    <param name="key" type="SecretKey"/>
                    <param name="iv" type="IvParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="encrypt" type="boolean"/>
                </params>
                <scope line="84">
                    <declaration name="mode" type="int" line="87"/>
                    <scope line="88"/>
                    <scope line="92"/>
                    <scope line="97"/>
                </scope>
                <scope line="101"/>
                <scope line="104"/>
                <scope line="107"/>
            </method>
            <method name="newCipherBox" type="CipherBox" line="111">
                <params>
                    <param name="version" type="ProtocolVersion"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="key" type="SecretKey"/>
                    <param name="iv" type="IvParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="encrypt" type="boolean"/>
                </params>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="118"/>
            </method>
            <method name="getFixedMask" type="IvParameterSpec" line="122">
                <params>
                    <param name="ivSize" type="int"/>
                </params>
                <scope line="123"/>
                <declaration name="iv" type="IvParameterSpec" line="126"/>
                <scope line="127"/>
            </method>
            <method name="encrypt" type="int" line="133">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="134"/>
                <scope line="137">
                    <scope line="138">
                        <scope line="139">
                            <declaration name="prefix" type="byte[]" line="140"/>
                        </scope>
                    </scope>
                    <scope line="148">
                        <scope line="149">
                            <declaration name="hd" type="HexDumpEncoder" line="150"/>
                        </scope>
                        <scope line="154"/>
                    </scope>
                    <declaration name="newLen" type="int" line="157"/>
                    <scope line="158"/>
                </scope>
                <scope line="163"/>
            </method>
            <method name="encrypt" type="int" line="167">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="len" type="int" line="168"/>
                <scope line="169"/>
                <scope line="173">
                    <declaration name="pos" type="int" line="174"/>
                    <scope line="175">
                        <scope line="176">
                            <declaration name="prefix" type="byte[]" line="177"/>
                            <declaration name="buf" type="byte[]" line="179"/>
                            <declaration name="limit" type="int" line="180"/>
                            <scope line="181"/>
                            <scope line="186"/>
                        </scope>
                    </scope>
                    <scope line="200">
                        <scope line="201">
                            <declaration name="hd" type="HexDumpEncoder" line="202"/>
                        </scope>
                        <scope line="206"/>
                    </scope>
                    <declaration name="dup" type="ByteBuffer" line="210"/>
                    <declaration name="newLen" type="int" line="211"/>
                    <scope line="212"/>
                    <scope line="215"/>
                </scope>
                <scope line="220">
                    <declaration name="exc" type="RuntimeException" line="221"/>
                </scope>
            </method>
            <method name="decrypt" type="int" line="226">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="227"/>
                <scope line="230">
                    <declaration name="newLen" type="int" line="231"/>
                    <scope line="232"/>
                    <scope line="235">
                        <scope line="236">
                            <declaration name="hd" type="HexDumpEncoder" line="237"/>
                        </scope>
                        <scope line="241"/>
                    </scope>
                    <scope line="244">
                        <scope line="246">
                            <scope line="247"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="256"/>
            </method>
            <method name="decrypt" type="int" line="260">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="len" type="int" line="261"/>
                <scope line="262"/>
                <scope line="266">
                    <declaration name="pos" type="int" line="267"/>
                    <declaration name="dup" type="ByteBuffer" line="268"/>
                    <declaration name="newLen" type="int" line="269"/>
                    <scope line="270"/>
                    <scope line="273">
                        <scope line="275">
                            <declaration name="hd" type="HexDumpEncoder" line="276"/>
                        </scope>
                        <scope line="280"/>
                    </scope>
                    <scope line="283">
                        <scope line="286">
                            <scope line="287"/>
                            <declaration name="buf" type="byte[]" line="290"/>
                            <declaration name="limit" type="int" line="291"/>
                            <scope line="292"/>
                            <scope line="297"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="311">
                    <declaration name="exc" type="RuntimeException" line="312"/>
                </scope>
            </method>
            <method name="addPadding" type="int" line="317">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="blockSize" type="int"/>
                </params>
                <declaration name="newlen" type="int" line="318"/>
                <declaration name="pad" type="byte" line="319"/>
                <declaration name="i" type="int" line="320"/>
                <scope line="321"/>
                <scope line="326"/>
                <scope line="329"/>
            </method>
            <method name="addPadding" type="int" line="334">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="blockSize" type="int"/>
                </params>
                <declaration name="len" type="int" line="335"/>
                <declaration name="offset" type="int" line="336"/>
                <declaration name="newlen" type="int" line="337"/>
                <declaration name="pad" type="byte" line="338"/>
                <declaration name="i" type="int" line="339"/>
                <scope line="340"/>
                <scope line="346"/>
            </method>
            <method name="removePadding" type="int" line="353">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="blockSize" type="int"/>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                </params>
                <declaration name="padOffset" type="int" line="354"/>
                <declaration name="pad" type="int" line="355"/>
                <declaration name="newlen" type="int" line="356"/>
                <scope line="357"/>
                <scope line="360">
                    <scope line="361">
                        <declaration name="val" type="int" line="362"/>
                        <scope line="363"/>
                    </scope>
                </scope>
                <scope line="368">
                    <scope line="369"/>
                </scope>
            </method>
            <method name="removePadding" type="int" line="375">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="blockSize" type="int"/>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                </params>
                <declaration name="len" type="int" line="376"/>
                <declaration name="offset" type="int" line="377"/>
                <declaration name="padOffset" type="int" line="378"/>
                <declaration name="pad" type="int" line="379"/>
                <declaration name="newlen" type="int" line="380"/>
                <scope line="381"/>
                <scope line="384">
                    <scope line="386">
                        <declaration name="val" type="int" line="387"/>
                        <scope line="388"/>
                    </scope>
                </scope>
                <scope line="393">
                    <scope line="394"/>
                </scope>
            </method>
            <method name="dispose" type="void" line="402">
                <scope line="403">
                    <scope line="404"/>
                </scope>
                <scope line="408"/>
            </method>
        </class>
    </source>