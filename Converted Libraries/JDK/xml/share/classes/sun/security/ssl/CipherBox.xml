<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.security"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="java.nio"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="CipherBox" line="46">
            <comment line="94">
                A CipherBox that implements the identity operation                
            </comment>
            <comment line="97">
                                
            </comment>
            <comment line="100">
                the protocol version this cipher conforms to                
            </comment>
            <comment line="103">
                cipher object                
            </comment>
            <comment line="189">
                Factory method to obtain a new CipherBox object.                
            </comment>
            <comment line="206">
                Get a fixed mask, as the initial decryption IVs for TLS 1.1 or later.                
            </comment>
            <comment line="223">
                Encrypts a block of data, returning the size of the
                 resulting block.                
            </comment>
            <comment line="277">
                Encrypts a ByteBuffer block of data, returning the size of the
                 resulting block.
                
                 The byte buffers position and limit initially define the amount
                 to encrypt.  On return, the position and limit are
                 set to last position paddedencrypted.  The limit may have changed
                 because of the added padding bytes.                
            </comment>
            <comment line="371">
                Decrypts a block of data, returning the size of the
                 resulting block if padding was required.
                
                 For SSLv3 and TLSv1.0, with block ciphers in CBC mode the
                 Initialization Vector (IV) for the first record is generated by
                 the handshake protocol, the IV for subsequent records is the
                 last ciphertext block from the previous record.
                
                 From TLSv1.1, the implicit IV is replaced with an explicit IV to
                 protect against CBC attacks.
                
                 Differentiating between bad_record_mac and decryption_failed alerts
                 may permit certain attacks against CBC mode. It is preferable to
                 uniformly use the bad_record_mac alert to hide the specific type of
                 the error.                
            </comment>
            <comment line="435">
                Decrypts a block of data, returning the size of the
                 resulting block if padding was required.  position and limit
                 point to the end of the decrypteddepadded data.  The initial
                 limit and new limit may be different, given we may
                 have stripped off some padding bytes.
                
                  @see decrypt(byte[], int, int)                
            </comment>
            <comment line="546">
                Apply the padding to the buffer.
                
                 Limit is advanced to the new buffer length.
                 Position is equal to limit.                
            </comment>
            <comment line="586">
                Typical TLS padding format for a 64 bit block cipher is as follows:
                   xx xx xx xx xx xx xx 00
                   xx xx xx xx xx xx 01 01
                   ...
                   xx 06 06 06 06 06 06 06
                   07 07 07 07 07 07 07 07
                 TLS also allows any amount of padding from 1 and 256 bytes as long
                 as it makes the data a multiple of the block size                
            </comment>
            <comment line="628">
                Positionlimit is equal the removed padding.                
            </comment>
            <comment line="679">
                Dispose of any intermediate state in the underlying cipher.
                 For PKCS11 ciphers, this will release any attached sessions, and
                 thus make finalization faster.                
            </comment>
            <javadoc line="46">
                This class handles bulk data enciphering/deciphering for each SSLv3
                  message.  This provides data confidentiality.  Stream ciphers (such
                  as RC4) don&apos;t need to do padding; block ciphers (e.g. DES) need it.
                  Individual instances are obtained by calling the static method
                  newCipherBox(), which should only be invoked by BulkCipher.newCipher().
                  In RFC 2246, with bock ciphers in CBC mode, the Initialization
                  Vector (IV) for the first record is generated with the other keys
                  and secrets when the security parameters are set.  The IV for
                  subsequent records is the last ciphertext block from the previous
                  record.
                  In RFC 4346, the implicit Initialization Vector (IV) is replaced
                  with an explicit IV to protect against CBC attacks.  RFC 4346
                  recommends two algorithms used to generated the per-record IV.
                  The implementation uses the algorithm (2)(b), as described at
                  section 6.2.3.2 of RFC 4346.
                  The usage of IV in CBC block cipher can be illustrated in
                  the following diagrams.
                  (random)
                  R         P1                    IV        C1
                  |          |                     |         |
                  SIV---+    |-----+    |-...            |-----    |------
                  |    |     |    |                |    |    |     |
                  +----+  |  +----+  |             +----+  |  +----+  |
                  | Ek |  |  + Ek +  |             | Dk |  |  | Dk |  |
                  +----+  |  +----+  |             +----+  |  +----+  |
                  |    |     |    |                |    |    |     |
                  |----|     |----|           SIV--+    |----|     |-...
                  |          |                     |       |
                  IV         C1                     R      P1
                  (discard)
                  CBC Encryption                    CBC Decryption
                  NOTE that any ciphering involved in key exchange (e.g. with RSA) is
                  handled separately.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="NULL" type="CipherBox" line="94"/>
            <declaration name="debug" type="Debug" line="97"/>
            <declaration name="protocolVersion" type="ProtocolVersion" line="100"/>
            <declaration name="cipher" type="Cipher" line="103"/>
            <declaration name="blockSize" type="int" line="105"/>
            <javadoc line="105">
                Cipher blocksize, 0 for stream ciphers                
            </javadoc>
            <declaration name="random" type="SecureRandom" line="110"/>
            <javadoc line="110">
                secure random                
            </javadoc>
            <declaration name="masks" type="Hashtable&lt;Integer,IvParameterSpec&gt;" line="115"/>
            <javadoc line="115">
                Fixed masks of various block size, as the initial decryption IVs
                  for TLS 1.1 or later.
                  For performance, we do not use random IVs. As the initial decryption
                  IVs will be discarded by TLS decryption processes, so the fixed masks
                  do not hurt cryptographic strength.                
            </javadoc>
            <javadoc line="125">
                NULL cipherbox. Identity operation, no encryption.                
            </javadoc>
            <method name="CipherBox" type="constructor" line="128"/>
            <javadoc line="133">
                Construct a new CipherBox using the cipher transformation.                
                <exception>
                    NoSuchAlgorithmException if no appropriate JCE Cipher
                      implementation could be found.                    
                </exception>
            </javadoc>
            <method name="CipherBox" type="constructor" line="141">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="bulkCipher" type="BulkCipher"/>
                    <param name="key" type="SecretKey"/>
                    <param name="iv" type="IvParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="encrypt" type="boolean"/>
                </params>
                <comment line="152">
                    RFC 4346 recommends two algorithms used to generated the
                     per-record IV. The implementation uses the algorithm (2)(b),
                     as described at section 6.2.3.2 of RFC 4346.
                    
                     As we don&apos;t care about the initial IV value for TLS 1.1 or
                     later, so if the &quot;iv&quot; parameter is null, we use the default
                     value generated by Cipher.init() for encryption, and a fixed
                     mask for decryption.                    
                </comment>
                <comment line="170">
                    Do not call getBlockSize until after init()                    
                </comment>
                <comment line="171">
                    otherwise we would disrupt JCE delayed provider selection                    
                </comment>
                <comment line="173">
                    some providers implement getBlockSize() incorrectly                    
                </comment>
                <scope line="142">
                    <declaration name="mode" type="int" line="145"/>
                    <scope line="147"/>
                    <scope line="164"/>
                    <scope line="174"/>
                </scope>
                <scope line="177"/>
                <scope line="179"/>
                <scope line="182"/>
            </method>
            <method name="newCipherBox" type="CipherBox" line="193">
                <params>
                    <param name="version" type="ProtocolVersion"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="key" type="SecretKey"/>
                    <param name="iv" type="IvParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="encrypt" type="boolean"/>
                </params>
                <scope line="194"/>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <method name="getFixedMask" type="IvParameterSpec" line="208">
                <params>
                    <param name="ivSize" type="int"/>
                </params>
                <scope line="209"/>
                <declaration name="iv" type="IvParameterSpec" line="213"/>
                <scope line="214"/>
            </method>
            <method name="encrypt" type="int" line="226">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="233">
                    TLSv1.1 needs a IV block                    
                </comment>
                <comment line="235">
                    generate a random number                    
                </comment>
                <comment line="239">
                    move forward the plaintext                    
                </comment>
                <comment line="243">
                    prefix the plaintext                    
                </comment>
                <comment line="266">
                    catch BouncyCastle buffering error                    
                </comment>
                <scope line="227"/>
                <scope line="231">
                    <scope line="232">
                        <scope line="234">
                            <declaration name="prefix" type="byte[]" line="236"/>
                        </scope>
                    </scope>
                    <scope line="252">
                        <scope line="253">
                            <declaration name="hd" type="HexDumpEncoder" line="254"/>
                        </scope>
                        <scope line="262"/>
                    </scope>
                    <declaration name="newLen" type="int" line="264"/>
                    <scope line="265"/>
                </scope>
                <scope line="271"/>
            </method>
            <method name="encrypt" type="int" line="285">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="298">
                    TLSv1.1 needs a IV block                    
                </comment>
                <comment line="300">
                    generate a random number                    
                </comment>
                <comment line="304">
                    move forward the plaintext                    
                </comment>
                <comment line="321">
                    prefix the plaintext                    
                </comment>
                <comment line="326">
                    addPadding adjusts pos/limit                    
                </comment>
                <comment line="340">
                    reset back to beginning                    
                </comment>
                <comment line="346">
                    Encrypt &quot;in-place&quot;.  This does not add its own padding.                    
                </comment>
                <comment line="357">
                    catch BouncyCastle buffering error                    
                </comment>
                <declaration name="len" type="int" line="287"/>
                <scope line="289"/>
                <scope line="294">
                    <declaration name="pos" type="int" line="295"/>
                    <scope line="297">
                        <scope line="299">
                            <declaration name="prefix" type="byte[]" line="301"/>
                            <declaration name="buf" type="byte[]" line="305"/>
                            <declaration name="limit" type="int" line="306"/>
                            <scope line="307"/>
                            <scope line="312"/>
                        </scope>
                    </scope>
                    <scope line="330">
                        <scope line="331">
                            <declaration name="hd" type="HexDumpEncoder" line="332"/>
                        </scope>
                        <scope line="339"/>
                    </scope>
                    <declaration name="dup" type="ByteBuffer" line="349"/>
                    <declaration name="newLen" type="int" line="350"/>
                    <scope line="352"/>
                    <scope line="356"/>
                </scope>
                <scope line="362">
                    <declaration name="exc" type="RuntimeException" line="363"/>
                </scope>
            </method>
            <method name="decrypt" type="int" line="387">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="395">
                    catch BouncyCastle buffering error                    
                </comment>
                <comment line="420">
                    discards the first cipher block, the IV component.                    
                </comment>
                <scope line="388"/>
                <scope line="392">
                    <declaration name="newLen" type="int" line="393"/>
                    <scope line="394"/>
                    <scope line="399">
                        <scope line="400">
                            <declaration name="hd" type="HexDumpEncoder" line="401"/>
                        </scope>
                        <scope line="409"/>
                    </scope>
                    <scope line="411">
                        <scope line="415">
                            <scope line="416"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="428"/>
            </method>
            <method name="decrypt" type="int" line="443">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="453">
                    Decrypt &quot;in-place&quot;.                    
                </comment>
                <comment line="460">
                    catch BouncyCastle buffering error                    
                </comment>
                <comment line="478">
                    Remove the block padding.                    
                </comment>
                <comment line="490">
                    discards the first cipher block, the IV component.                    
                </comment>
                <comment line="507">
                    reset the position to the end of the decrypted data                    
                </comment>
                <declaration name="len" type="int" line="445"/>
                <scope line="447"/>
                <scope line="452">
                    <declaration name="pos" type="int" line="456"/>
                    <declaration name="dup" type="ByteBuffer" line="457"/>
                    <declaration name="newLen" type="int" line="458"/>
                    <scope line="459"/>
                    <scope line="465">
                        <scope line="467">
                            <declaration name="hd" type="HexDumpEncoder" line="468"/>
                        </scope>
                        <scope line="475"/>
                    </scope>
                    <scope line="481">
                        <scope line="485">
                            <scope line="486"/>
                            <declaration name="buf" type="byte[]" line="491"/>
                            <declaration name="limit" type="int" line="492"/>
                            <scope line="493"/>
                            <scope line="498"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="513">
                    <declaration name="exc" type="RuntimeException" line="514"/>
                </scope>
            </method>
            <method name="addPadding" type="int" line="521">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="blockSize" type="int"/>
                </params>
                <comment line="536">
                    TLS version of the padding works for both SSLv3 and TLSv1                    
                </comment>
                <declaration name="newlen" type="int" line="522"/>
                <declaration name="pad" type="byte" line="523"/>
                <declaration name="i" type="int" line="524"/>
                <scope line="526"/>
                <scope line="532"/>
                <scope line="539"/>
            </method>
            <method name="addPadding" type="int" line="551">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="blockSize" type="int"/>
                </params>
                <comment line="566">
                    Update the limit to what will be padded.                    
                </comment>
                <comment line="571">
                    TLS version of the padding works for both SSLv3 and TLSv1                    
                </comment>
                <declaration name="len" type="int" line="553"/>
                <declaration name="offset" type="int" line="554"/>
                <declaration name="newlen" type="int" line="556"/>
                <declaration name="pad" type="byte" line="557"/>
                <declaration name="i" type="int" line="558"/>
                <scope line="560"/>
                <scope line="574"/>
            </method>
            <method name="removePadding" type="int" line="597">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="blockSize" type="int"/>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                </params>
                <comment line="598">
                    last byte is length byte (i.e. actual padding length - 1)                    
                </comment>
                <comment line="615">
                    SSLv3                    
                </comment>
                <comment line="616">
                    SSLv3 requires 0 &lt;= length byte &lt; block size                    
                </comment>
                <comment line="617">
                    some implementations do 1 &lt;= length byte &lt;= block size,                    
                </comment>
                <comment line="618">
                    so accept that as well                    
                </comment>
                <comment line="619">
                    v3 does not require any particular value for the other bytes                    
                </comment>
                <declaration name="padOffset" type="int" line="599"/>
                <declaration name="pad" type="int" line="600"/>
                <declaration name="newlen" type="int" line="602"/>
                <scope line="603"/>
                <scope line="607">
                    <scope line="608">
                        <declaration name="val" type="int" line="609"/>
                        <scope line="610"/>
                    </scope>
                </scope>
                <scope line="615">
                    <scope line="620"/>
                </scope>
            </method>
            <method name="removePadding" type="int" line="632">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                    <param name="blockSize" type="int"/>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                </params>
                <comment line="637">
                    last byte is length byte (i.e. actual padding length - 1)                    
                </comment>
                <comment line="646">
                    We could zero the padding area, but not much useful
                     information there.                    
                </comment>
                <comment line="651">
                    zero the padding.                    
                </comment>
                <comment line="659">
                    SSLv3                    
                </comment>
                <comment line="660">
                    SSLv3 requires 0 &lt;= length byte &lt; block size                    
                </comment>
                <comment line="661">
                    some implementations do 1 &lt;= length byte &lt;= block size,                    
                </comment>
                <comment line="662">
                    so accept that as well                    
                </comment>
                <comment line="663">
                    v3 does not require any particular value for the other bytes                    
                </comment>
                <comment line="669">
                    Reset buffer limit to remove padding.                    
                </comment>
                <declaration name="len" type="int" line="634"/>
                <declaration name="offset" type="int" line="635"/>
                <declaration name="padOffset" type="int" line="638"/>
                <declaration name="pad" type="int" line="639"/>
                <declaration name="newlen" type="int" line="641"/>
                <scope line="642"/>
                <scope line="650">
                    <scope line="652">
                        <declaration name="val" type="int" line="653"/>
                        <scope line="654"/>
                    </scope>
                </scope>
                <scope line="659">
                    <scope line="664"/>
                </scope>
            </method>
            <method name="dispose" type="void" line="683">
                <comment line="686">
                    ignore return value.                    
                </comment>
                <comment line="690">
                    swallow for now.                    
                </comment>
                <scope line="684">
                    <scope line="685"/>
                </scope>
                <scope line="689"/>
            </method>
        </class>
    </source>