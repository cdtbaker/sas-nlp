<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="javax.net.ssl"/>
        <import package="java.security"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.util"/>
        <import package="java.net.Socket"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <class name="SunX509KeyManagerImpl" line="38">
            <extends class="X509ExtendedKeyManager"/>
            <comment line="75">
                The credentials from the KeyStore as
                 Map: String(alias) -&gt; X509Credentials(credentials)                
            </comment>
            <comment line="81">
                Cached server aliases for the case issuers == null.
                 (in the current JSSE implementation, issuers are always null for
                 server certs). See chooseServerAlias() for details.
                
                 Map: String(keyType) -&gt; String[](alias)                
            </comment>
            <comment line="90">
                Basic container for credentials implemented as an inner class.                
            </comment>
            <comment line="162">
                Returns the certificate chain associated with the given alias.
                
                 @return the certificate chain (ordered with the user&apos;s certificate first
                 and the root certificate authority last)                
            </comment>
            <comment line="180">
                Returns the key associated with the given alias                
            </comment>
            <comment line="195">
                Choose an alias to authenticate the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="222">
                Choose an alias to authenticate the client side of an
                 &lt;code&gt;SSLEngine&lt;code&gt; connection given the public key type
                 and the list of certificate issuer authorities recognized by
                 the peer (if any).
                
                 @since 1.5                
            </comment>
            <comment line="239">
                Choose an alias to authenticate the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="277">
                Choose an alias to authenticate the server side of an
                 &lt;code&gt;SSLEngine&lt;code&gt; connection given the public key type
                 and the list of certificate issuer authorities recognized by
                 the peer (if any).
                
                 @since 1.5                
            </comment>
            <comment line="294">
                Get the matching aliases for authenticating the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="303">
                Get the matching aliases for authenticating the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="312">
                Get the matching aliases for authenticating the either side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).
                
                 Issuers comes to us in the form of X500Principal[].                
            </comment>
            <comment line="396">
                Convert an array of Principals to an array of X500Principals, if
                 possible. Principals that cannot be converted are ignored.                
            </comment>
            <javadoc line="38">
                An implemention of X509KeyManager backed by a KeyStore.
                  The backing KeyStore is inspected when this object is constructed.
                  All key entries containing a PrivateKey and a non-empty chain of
                  X509Certificate are then copied into an internal store. This means
                  that subsequent modifications of the KeyStore have no effect on the
                  X509KeyManagerImpl object.
                  Note that this class assumes that all keys are protected by the same
                  password.
                  The JSSE handshake code currently calls into this class via
                  chooseClientAlias() and chooseServerAlias() to find the certificates to
                  use. As implemented here, both always return the first alias returned by
                  getClientAliases() and getServerAliases(). In turn, these methods are
                  implemented by calling getAliases(), which performs the actual lookup.
                  Note that this class currently implements no checking of the local
                  certificates. In particular, it is not guaranteed that:
                  . the certificates are within their validity period and not revoked
                  . the signatures verify
                  . they form a PKIX compliant chain.
                  . the certificate extensions allow the certificate to be used for
                  the desired purpose.
                  Chains that fail any of these criteria will probably be rejected by
                  the remote peer.                
            </javadoc>
            <declaration name="debug" type="Debug" line="70"/>
            <declaration name="STRING0" type="String[]" line="72"/>
            <declaration name="credentialsMap" type="Map&lt;String,X509Credentials&gt;" line="78"/>
            <declaration name="serverAliasCache" type="Map&lt;String,String[]&gt;" line="87"/>
            <class name="X509Credentials" line="92">
                <declaration name="privateKey" type="PrivateKey" line="93"/>
                <declaration name="certificates" type="X509Certificate[]" line="94"/>
                <declaration name="issuerX500Principals" type="Set&lt;X500Principal&gt;" line="95"/>
                <method name="X509Credentials" type="constructor" line="97">
                    <params>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="certificates" type="X509Certificate[]"/>
                    </params>
                    <comment line="99">
                        assert privateKey and certificates != null                        
                    </comment>
                </method>
                <method name="getIssuerX500Principals" type="Set<X500Principal>" line="103">
                    <comment line="105">
                        lazy initialization                        
                    </comment>
                    <scope line="105">
                        <scope line="107"/>
                    </scope>
                </method>
            </class>
            <method name="SunX509KeyManagerImpl" type="constructor" line="117">
                <params>
                    <param name="ks" type="KeyStore"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="121"/>
                <scope line="126">
                    <declaration name="alias" type="String" line="127"/>
                    <scope line="128"/>
                    <declaration name="key" type="Key" line="131"/>
                    <scope line="132"/>
                    <declaration name="certs" type="Certificate[]" line="135"/>
                    <scope line="137"/>
                    <scope line="140">
                        <declaration name="tmp" type="Certificate[]" line="141"/>
                    </scope>
                    <declaration name="cred" type="X509Credentials" line="146"/>
                    <scope line="149">
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
            <method name="getCertificateChain" type="X509Certificate[]" line="167">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="168"/>
                <declaration name="cred" type="X509Credentials" line="171"/>
                <scope line="172"/>
                <scope line="174"/>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="182">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="183"/>
                <declaration name="cred" type="X509Credentials" line="186"/>
                <scope line="187"/>
                <scope line="189"/>
            </method>
            <method name="chooseClientAlias" type="String" line="200">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
                <comment line="202">
                    We currently don&apos;t do anything with socket, but
                     someday we might.  It might be a useful hint for
                     selecting one of the aliases we get back from
                     getClientAliases().                    
                </comment>
                <scope line="208"/>
                <scope line="212">
                    <declaration name="aliases" type="String[]" line="213"/>
                    <scope line="214"/>
                </scope>
            </method>
            <method name="chooseEngineClientAlias" type="String" line="230">
                <params>
                    <param name="keyType" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
                <comment line="232">
                    If we ever start using socket as a selection criteria,
                     we&apos;ll need to adjust this.                    
                </comment>
            </method>
            <method name="chooseServerAlias" type="String" line="244">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
                <comment line="246">
                    We currently don&apos;t do anything with socket, but
                     someday we might.  It might be a useful hint for
                     selecting one of the aliases we get back from
                     getServerAliases().                    
                </comment>
                <comment line="262">
                    Cache the result (positive and negative lookups)                    
                </comment>
                <scope line="251"/>
                <declaration name="aliases" type="String[]" line="255"/>
                <scope line="257">
                    <scope line="259">
                        <scope line="262"/>
                    </scope>
                </scope>
                <scope line="267"/>
                <scope line="270"/>
            </method>
            <method name="chooseEngineServerAlias" type="String" line="285">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
                <comment line="287">
                    If we ever start using socket as a selection criteria,
                     we&apos;ll need to adjust this.                    
                </comment>
            </method>
            <method name="getClientAliases" type="String[]" line="298">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="getServerAliases" type="String[]" line="307">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="getAliases" type="String[]" line="318">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
                <comment line="327">
                    normally, this will never happen but try to recover if it does                    
                </comment>
                <comment line="340">
                    the algorithm below does not produce duplicates, so avoid Set                    
                </comment>
                <comment line="355">
                    if possible, check the public key in the issuer cert                    
                </comment>
                <comment line="360">
                    Check the signature algorithm of the certificate itself.
                     Look for the &quot;withRSA&quot; in &quot;SHA1withRSA&quot;, etc.                    
                </comment>
                <comment line="372">
                    no issuer specified, match all                    
                </comment>
                <scope line="319"/>
                <scope line="322"/>
                <scope line="325"/>
                <declaration name="sigType" type="String" line="329"/>
                <scope line="330">
                    <declaration name="k" type="int" line="331"/>
                </scope>
                <scope line="334"/>
                <declaration name="x500Issuers" type="X500Principal[]" line="338"/>
                <declaration name="aliases" type="List&lt;String&gt;" line="340"/>
                <scope line="343">
                    <declaration name="alias" type="String" line="345"/>
                    <declaration name="credentials" type="X509Credentials" line="346"/>
                    <declaration name="certs" type="X509Certificate[]" line="347"/>
                    <scope line="349"/>
                    <scope line="352">
                        <scope line="353">
                            <scope line="355"/>
                        </scope>
                        <scope line="358">
                            <declaration name="sigAlgName" type="String" line="361"/>
                            <declaration name="pattern" type="String" line="363"/>
                            <scope line="364"/>
                        </scope>
                    </scope>
                    <scope line="370">
                        <scope line="373"/>
                    </scope>
                    <scope line="376">
                        <declaration name="certIssuers" type="Set&lt;X500Principal&gt;" line="377"/>
                        <scope line="379">
                            <scope line="380">
                                <scope line="382"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="aliasStrings" type="String[]" line="391"/>
            </method>
            <method name="convertPrincipals" type="X500Principal[]" line="399">
                <params>
                    <param name="principals" type="Principal[]"/>
                </params>
                <comment line="410">
                    ignore                    
                </comment>
                <declaration name="list" type="List&lt;X500Principal&gt;" line="400"/>
                <scope line="401">
                    <declaration name="p" type="Principal" line="402"/>
                    <scope line="403"/>
                    <scope line="405">
                        <scope line="406"/>
                        <scope line="408"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>