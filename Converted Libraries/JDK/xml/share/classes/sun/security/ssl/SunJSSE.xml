<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.security"/>
        <class name="SunJSSE" line="31">
            <extends class="java.security.Provider"/>
            <comment line="69">
                tri-valued flag:                
            </comment>
            <comment line="70">
                null  := no final decision made                
            </comment>
            <comment line="71">
                false := data structures initialized in non-FIPS mode                
            </comment>
            <comment line="72">
                true  := data structures initialized in FIPS mode                
            </comment>
            <comment line="75">
                the FIPS certificate crypto provider that we use to perform all crypto                
            </comment>
            <comment line="76">
                operations. null in non-FIPS mode                
            </comment>
            <comment line="86">
                ensure we can use FIPS mode using the specified crypto provider.                
            </comment>
            <comment line="87">
                enable FIPS mode if not already enabled.                
            </comment>
            <comment line="105">
                standard constructor                
            </comment>
            <comment line="116">
                prefered constructor to enable FIPS mode at runtime                
            </comment>
            <comment line="121">
                constructor to enable FIPS mode from java.security file                
            </comment>
            <javadoc line="31">
                The JSSE provider.
                  The RSA implementation has been removed from JSSE, but we still need to
                  register the same algorithms for compatibility. We just point to the RSA
                  implementation in the SunRsaSign provider. This works because all classes
                  are in the bootclasspath and therefore loaded by the same classloader.
                  SunJSSE now supports an experimental FIPS compliant mode when used with an
                  appropriate FIPS certified crypto provider. In FIPS mode, we:
                  . allow only TLS 1.0 or later
                  . allow only FIPS approved ciphersuites
                  . perform all crypto in the FIPS crypto provider
                  It is currently not possible to use both FIPS compliant SunJSSE and
                  standard JSSE at the same time because of the various static data structures
                  we use.
                  However, we do want to allow FIPS mode to be enabled at runtime and without
                  editing the java.security file. That means we need to allow
                  Security.removeProvider(&quot;SunJSSE&quot;) to work, which creates an instance of
                  this class in non-FIPS mode. That is why we delay the selection of the mode
                  as long as possible. This is until we open an SSL/TLS connection and the
                  data structures need to be initialized or until SunJSSE is initialized in
                  FIPS mode.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="60"/>
            <declaration name="info" type="String" line="62"/>
            <declaration name="fipsInfo" type="String" line="65"/>
            <declaration name="fips" type="Boolean" line="72"/>
            <declaration name="cryptoProvider" type="java.security.Provider" line="76"/>
            <method name="isFIPS" type="boolean" line="78">
                <scope line="79"/>
            </method>
            <method name="ensureFIPS" type="void" line="87">
                <params>
                    <param name="p" type="java.security.Provider"/>
                </params>
                <scope line="88"/>
                <scope line="91">
                    <scope line="92"/>
                    <scope line="96"/>
                </scope>
            </method>
            <method name="SunJSSE" type="constructor" line="105">
                <scope line="108"/>
            </method>
            <method name="SunJSSE" type="constructor" line="116">
                <params>
                    <param name="cryptoProvider" type="java.security.Provider"/>
                </params>
            </method>
            <method name="SunJSSE" type="constructor" line="121">
                <params>
                    <param name="cryptoProvider" type="String"/>
                </params>
            </method>
            <method name="checkNull" type="T" line="125">
                <params>
                    <param name="t" type="T"/>
                </params>
                <scope line="126"/>
            </method>
            <method name="SunJSSE" type="constructor" line="133">
                <params>
                    <param name="cryptoProvider" type="java.security.Provider"/>
                    <param name="providerName" type="String"/>
                </params>
                <comment line="137">
                    Calling Security.getProvider() will cause other providers to be                    
                </comment>
                <comment line="138">
                    loaded. That is not good but unavoidable here.                    
                </comment>
                <scope line="136">
                    <scope line="140"/>
                </scope>
            </method>
            <method name="registerAlgorithms" type="void" line="149">
                <params>
                    <param name="isfips" type="boolean"/>
                </params>
                <anonymous_class line="150">
                    <method name="run" type="Object" line="151"/>
                </anonymous_class>
            </method>
            <method name="doRegister" type="void" line="158">
                <params>
                    <param name="isfips" type="boolean"/>
                </params>
                <comment line="223">
                    KeyStore                    
                </comment>
                <scope line="159"/>
                <scope line="211"/>
            </method>
            <method name="subclassCheck" type="void" line="230">
                <scope line="231"/>
            </method>
            <method name="finalize" type="void" line="237">
                <comment line="238">
                    empty                    
                </comment>
            </method>
        </class>
    </source>