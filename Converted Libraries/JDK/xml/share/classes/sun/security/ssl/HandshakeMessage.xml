<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.lang.reflect"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="javax.crypto.KeyGenerator"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.internal.spec.TlsPrfParameterSpec"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.security.ssl.CipherSuite.PRF"/>
        <class name="HandshakeMessage" line="51">
            <comment line="77">
                enum HandshakeType:                
            </comment>
            <comment line="91">
                                
            </comment>
            <comment line="111">
                SSL 3.0 MAC padding constants.
                 Also used by CertificateVerify and Finished during the handshake.                
            </comment>
            <comment line="127">
                Write a handshake message on the (handshake) output stream.
                 This is just a four byte header followed by the data.
                
                 NOTE that huge messages -- notably, ones with huge cert
                 chains -- are handled correctly.                
            </comment>
            <comment line="145">
                Subclasses implement these methods so those kinds of
                 messages can be emitted.  Base class delegates to subclass.                
            </comment>
            <comment line="153">
                Write a descriptive message on the output stream; for debugging.                
            </comment>
            <comment line="158">
                NOTE:  the rest of these classes are nested within this one, and are
                 imported by other classes in this package.  There are a few other
                 handshake message classes, not neatly nested here because of current
                 licensing requirement for native (RSA) methods.  They belong here,
                 but those native methods complicate things a lot!                
            </comment>
            <comment line="167">
                HelloRequest ... SERVER --&gt; CLIENT
                
                 Server can ask the client to initiate a new handshake, e.g. to change
                 session parameters after a connection has been (re)established.                
            </comment>
            <comment line="198">
                ClientHello ... CLIENT --&gt; SERVER
                
                 Client initiates handshake by telling server what it wants, and what it
                 can support (prioritized by what&apos;s first in the ciphe suite list).
                
                 By RFC2246:7.4.1.2 it&apos;s explicitly anticipated that this message
                 will have more data added at the end ... e.g. what CAs the client trusts.
                 Until we know how to parse it, we will just read what we know
                 about, and let our caller handle the jumps over unknown data.                
            </comment>
            <comment line="327">
                ServerHello ... SERVER --&gt; CLIENT
                
                 Server chooses protocol options from among those it supports and the
                 client supports.  Then it sends the basic session descriptive parameters
                 back to the client.                
            </comment>
            <comment line="408">
                CertificateMsg ... send by both CLIENT and SERVER
                
                 Each end of a connection may need to pass its certificate chain to
                 the other end.  Such chains are intended to validate an identity with
                 reference to some certifying authority.  Examples include companies
                 like Verisign, or financial institutions.  There&apos;s some control over
                 the certifying authorities which are sent.
                
                 NOTE: that these messages might be huge, taking many handshake records.
                 Up to 2^48 bytes of certificate may be sent, in records of at most 2^14
                 bytes each ... up to 2^32 records sent on the output stream.                
            </comment>
            <comment line="498">
                ServerKeyExchange ... SERVER --&gt; CLIENT
                
                 The cipher suite selected, when combined with the certificate exchanged,
                 implies one of several different kinds of key exchange.  Most current
                 cipher suites require the server to send more than its certificate.
                
                 The primary exceptions are when a server sends an encryption-capable
                 RSA public key in its cert, to be used with RSA (or RSA_export) key
                 exchange; and when a server sends its Diffie-Hellman cert.  Those kinds
                 of key exchange do not require a ServerKeyExchange message.
                
                 Key exchange can be viewed as having three modes, which are explicit
                 for the Diffie-Hellman flavors and poorly specified for RSA ones:
                
                      - &quot;Ephemeral&quot; keys.  Here, a &quot;temporary&quot; key is allocated by the
                        server, and signed.  Diffie-Hellman keys signed using RSA or
                        DSS are ephemeral (DHE flavor).  RSA keys get used to do the same
                        thing, to cut the key size down to 512 bits (export restrictions)
                        or for signing-only RSA certificates.
                
                      - Anonymity.  Here no server certificate is sent, only the public
                        key of the server.  This case is subject to man-in-the-middle
                        attacks.  This can be done with Diffie-Hellman keys (DH_anon) or
                        with RSA keys, but is only used in SSLv3 for DH_anon.
                
                      - &quot;Normal&quot; case.  Here a server certificate is sent, and the public
                        key there is used directly in exchanging the premaster secret.
                        For example, Diffie-Hellman &quot;DH&quot; flavor, and any RSA flavor with
                        only 512 bit keys.
                
                 If a server certificate is sent, there is no anonymity.  However,
                 when a certificate is sent, ephemeral keys may still be used to
                 exchange the premaster secret.  That&apos;s how RSA_EXPORT often works,
                 as well as how the DHE_ flavors work.                
            </comment>
            <comment line="540">
                Using RSA for Key Exchange:  exchange a session key that&apos;s not as big
                 as the signing-only key.  Used for export applications, since exported
                 RSA encryption keys can&apos;t be bigger than 512 bytes.
                
                 This is never used when keys are 512 bits or smaller, and isn&apos;t used
                 on &quot;US Domestic&quot; ciphers in any case.                
            </comment>
            <comment line="665">
                Using Diffie-Hellman algorithm for key exchange.  All we really need to
                 do is securely get Diffie-Hellman keys (using the same P, G parameters)
                 to our peer, then we automatically have a shared secret without need
                 to exchange any more data.  (D-H only solutions, such as SKIP, could
                 eliminate key exchange negotiations and get faster connection setup.
                 But they still need a signature algorithm like DSSDSA to support the
                 trusted distribution of keys without relying on unscalable physical
                 key distribution systems.)
                
                 This class supports several DH-based key exchange algorithms, though
                 perhaps eventually each deserves its own class.  Notably, this has
                 basic support for DH_anon and its DHE_DSS and DHE_RSA signed variants.                
            </comment>
            <comment line="941">
                ECDH server key exchange message. Sent by the server for ECDHE and ECDH_anon
                 ciphersuites to communicate its ephemeral public key (including the
                 EC domain parameters).
                
                 We support named curves only, no explicitly encoded curves.                
            </comment>
            <comment line="1206">
                CertificateRequest ... SERVER --&gt; CLIENT
                
                 Authenticated servers may ask clients to authenticate themselves
                 in turn, using this message.
                
                 Prior to TLS 1.2, the structure of the message is defined as:
                     struct {
                         ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
                         DistinguishedName certificate_authorities&lt;0..2^16-1&gt;;
                     } CertificateRequest;
                
                 In TLS 1.2, the structure is changed to:
                     struct {
                         ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
                         SignatureAndHashAlgorithm
                           supported_signature_algorithms&lt;2^16-1&gt;;
                         DistinguishedName certificate_authorities&lt;0..2^16-1&gt;;
                     } CertificateRequest;                
            </comment>
            <comment line="1472">
                ServerHelloDone ... SERVER --&gt; CLIENT
                
                 When server&apos;s done sending its messages in response to the client&apos;s
                 &quot;hello&quot; (e.g. its own hello, certificate, key exchange message, perhaps
                 client certificate request) it sends this message to flag that it&apos;s
                 done that part of the handshake.                
            </comment>
            <comment line="1509">
                CertificateVerify ... CLIENT --&gt; SERVER
                
                 Sent after client sends signature-capable certificates (e.g. not
                 Diffie-Hellman) to verify.                
            </comment>
            <comment line="1803">
                FINISHED ... sent by both CLIENT and SERVER
                
                 This is the FINISHED message as defined in the SSL and TLS protocols.
                 Both protocols define this handshake message slightly differently.
                 This class supports both formats.
                
                 When handshaking is finished, each side sends a &quot;change_cipher_spec&quot;
                 record, then immediately sends a &quot;finished&quot; handshake message prepared
                 according to the newly adopted cipher spec.
                
                 NOTE that until this is sent, no application data may be passed, unless
                 some non-default cipher suite has already been set up on this connection
                 connection (e.g. a previous handshake arranged one).                
            </comment>
            <comment line="2003">
                END of nested classes                
            </comment>
            <javadoc line="51">
                Many data structures are involved in the handshake messages.  These
                  classes are used as structures, with public data members.  They are
                  not visible outside the SSL package.
                  Handshake messages all have a common header format, and they are all
                  encoded in a &quot;handshake data&quot; SSL record substream.  The base class
                  here (HandshakeMessage) provides a common framework and records the
                  SSL record type of the particular handshake message.
                  This file contains subclasses for all the basic handshake messages.
                  All handshake messages know how to encode and decode themselves on
                  SSL streams; this facilitates using the same code on SSL client and
                  server sides, although they don&apos;t send and receive the same messages.
                  Messages also know how to print themselves, which is quite handy
                  for debugging.  They always identify their type, and can optionally
                  dump all of their content.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <method name="HandshakeMessage" type="constructor" line="74"/>
            <declaration name="ht_hello_request" type="byte" line="77"/>
            <declaration name="ht_client_hello" type="byte" line="78"/>
            <declaration name="ht_server_hello" type="byte" line="79"/>
            <declaration name="ht_certificate" type="byte" line="81"/>
            <declaration name="ht_server_key_exchange" type="byte" line="82"/>
            <declaration name="ht_certificate_request" type="byte" line="83"/>
            <declaration name="ht_server_hello_done" type="byte" line="84"/>
            <declaration name="ht_certificate_verify" type="byte" line="85"/>
            <declaration name="ht_client_key_exchange" type="byte" line="86"/>
            <declaration name="ht_finished" type="byte" line="88"/>
            <declaration name="debug" type="Debug" line="91"/>
            <javadoc line="93">
                Utility method to convert a BigInteger to a byte array in unsigned
                  format as needed in the handshake messages. BigInteger uses
                  2&apos;s complement format, i.e. it prepends an extra zero if the MSB
                  is set. We remove that.                
            </javadoc>
            <method name="toByteArray" type="byte[]" line="99">
                <params>
                    <param name="bi" type="BigInteger"/>
                </params>
                <declaration name="b" type="byte[]" line="100"/>
                <scope line="101">
                    <declaration name="n" type="int" line="102"/>
                    <declaration name="newarray" type="byte[]" line="103"/>
                </scope>
            </method>
            <declaration name="MD5_pad1" type="byte[]" line="114"/>
            <declaration name="MD5_pad2" type="byte[]" line="115"/>
            <declaration name="SHA_pad1" type="byte[]" line="117"/>
            <declaration name="SHA_pad2" type="byte[]" line="118"/>
            <method name="genPad" type="byte[]" line="120">
                <params>
                    <param name="b" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="padding" type="byte[]" line="121"/>
            </method>
            <method name="write" type="void" line="133">
                <params>
                    <param name="s" type="HandshakeOutStream"/>
                </params>
                <declaration name="len" type="int" line="134"/>
                <scope line="135"/>
            </method>
            <method name="messageType" type="int" line="148"/>
            <method name="messageLength" type="int" line="149"/>
            <method name="send" type="void" line="150"/>
            <method name="print" type="void" line="155"/>
            <class name="HelloRequest" line="172">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <method name="messageType" type="int" line="173"/>
                <method name="HelloRequest" type="constructor" line="175"/>
                <method name="HelloRequest" type="constructor" line="178">
                    <params>
                        <param name="in" type="HandshakeInStream"/>
                    </params>
                    <comment line="180">
                        nothing in this message                        
                    </comment>
                </method>
                <method name="messageLength" type="int" line="182"/>
                <method name="send" type="void" line="185">
                    <params>
                        <param name="out" type="HandshakeOutStream"/>
                    </params>
                    <comment line="187">
                        nothing in this messaage                        
                    </comment>
                </method>
                <method name="print" type="void" line="190">
                    <params>
                        <param name="out" type="PrintStream"/>
                    </params>
                </method>
            </class>
            <class name="ClientHello" line="208">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="protocolVersion" type="ProtocolVersion" line="210"/>
                <declaration name="clnt_random" type="RandomCookie" line="211"/>
                <declaration name="sessionId" type="SessionId" line="212"/>
                <declaration name="cipherSuites" type="CipherSuiteList" line="213"/>
                <declaration name="compression_methods" type="byte[]" line="214"/>
                <declaration name="extensions" type="HelloExtensions" line="216"/>
                <declaration name="NULL_COMPRESSION" type="byte[]" line="218"/>
                <method name="ClientHello" type="constructor" line="221">
                    <params>
                        <param name="generator" type="SecureRandom"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="sessionId" type="SessionId"/>
                        <param name="cipherSuites" type="CipherSuiteList"/>
                    </params>
                    <scope line="227"/>
                </method>
                <method name="ClientHello" type="constructor" line="236">
                    <params>
                        <param name="s" type="HandshakeInStream"/>
                        <param name="messageLength" type="int"/>
                    </params>
                    <scope line="242"/>
                </method>
                <method name="getCipherSuites" type="CipherSuiteList" line="247"/>
                <method name="addRenegotiationInfoExtension" type="void" line="252">
                    <params>
                        <param name="clientVerifyData" type="byte[]"/>
                    </params>
                    <declaration name="renegotiationInfo" type="HelloExtension" line="253"/>
                </method>
                <method name="addServerNameIndicationExtension" type="void" line="259">
                    <params>
                        <param name="hostname" type="String"/>
                    </params>
                    <comment line="261">
                        We would have checked that the hostname ia a FQDN.                        
                    </comment>
                    <comment line="268">
                        ignore the exception and return                        
                    </comment>
                    <declaration name="hostnames" type="ArrayList&lt;String&gt;" line="261"/>
                    <scope line="264"/>
                    <scope line="266"/>
                </method>
                <method name="addSignatureAlgorithmsExtension" type="void" line="273">
                    <params>
                        <param name="algorithms" type="Collection<SignatureAndHashAlgorithm>"/>
                    </params>
                    <declaration name="signatureAlgorithm" type="HelloExtension" line="274"/>
                </method>
                <method name="messageType" type="int" line="280"/>
                <method name="messageLength" type="int" line="283">
                    <comment line="285">
                        Add fixed size parts of each field...
                         version + random + session + cipher + compress                        
                    </comment>
                    <comment line="290">
                                                
                    </comment>
                </method>
                <method name="send" type="void" line="296">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                </method>
                <method name="print" type="void" line="307">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="310"/>
                </method>
            </class>
            <class name="ServerHello" line="333">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <method name="messageType" type="int" line="336"/>
                <declaration name="protocolVersion" type="ProtocolVersion" line="338"/>
                <declaration name="svr_random" type="RandomCookie" line="339"/>
                <declaration name="sessionId" type="SessionId" line="340"/>
                <declaration name="cipherSuite" type="CipherSuite" line="341"/>
                <declaration name="compression_method" type="byte" line="342"/>
                <declaration name="extensions" type="HelloExtensions" line="343"/>
                <method name="ServerHello" type="constructor" line="345">
                    <comment line="347">
                        empty                        
                    </comment>
                </method>
                <method name="ServerHello" type="constructor" line="350">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                        <param name="messageLength" type="int"/>
                    </params>
                    <scope line="357"/>
                </method>
                <method name="messageLength" type="int" line="363">
                    <comment line="365">
                        almost fixed size, except session ID and extensions:
                              major + minor = 2
                              random = 32
                              session ID len field = 1
                              cipher suite + compression = 3
                              extensions: if present, 2 + length of extensions                        
                    </comment>
                </method>
                <method name="send" type="void" line="374">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                </method>
                <method name="print" type="void" line="386">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="389">
                        <declaration name="i" type="int" line="393"/>
                    </scope>
                </method>
            </class>
            <class name="CertificateMsg" line="420">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <method name="messageType" type="int" line="423"/>
                <declaration name="chain" type="X509Certificate[]" line="425"/>
                <declaration name="encodedChain" type="List&lt;byte[]&gt;" line="427"/>
                <declaration name="messageLength" type="int" line="429"/>
                <method name="CertificateMsg" type="constructor" line="431">
                    <params>
                        <param name="certs" type="X509Certificate[]"/>
                    </params>
                </method>
                <method name="CertificateMsg" type="constructor" line="435">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                    </params>
                    <declaration name="chainLen" type="int" line="436"/>
                    <declaration name="v" type="List&lt;Certificate&gt;" line="437"/>
                    <declaration name="cf" type="CertificateFactory" line="439"/>
                    <scope line="440">
                        <declaration name="cert" type="byte[]" line="441"/>
                        <scope line="443">
                            <scope line="444"/>
                        </scope>
                        <scope line="448"/>
                    </scope>
                </method>
                <method name="messageLength" type="int" line="457">
                    <scope line="458">
                        <scope line="461">
                            <scope line="462">
                                <declaration name="b" type="byte[]" line="463"/>
                            </scope>
                        </scope>
                        <scope line="467"/>
                    </scope>
                </method>
                <method name="send" type="void" line="475">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                    <scope line="477"/>
                </method>
                <method name="print" type="void" line="482">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="485"/>
                </method>
                <method name="getCertificateChain" type="X509Certificate[]" line="492"/>
            </class>
            <class name="ServerKeyExchange" line="533">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <method name="messageType" type="int" line="535"/>
            </class>
            <class name="RSA_ServerKeyExchange" line="547">
                <extends class="ServerKeyExchange"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="rsa_modulus" type="byte" line="550"/>
                <declaration name="rsa_exponent" type="byte" line="551"/>
                <declaration name="signature" type="Signature" line="553"/>
                <declaration name="signatureBytes" type="byte[]" line="554"/>
                <method name="updateSignature" type="void" line="560">
                    <params>
                        <param name="clntNonce" type="byte"/>
                        <param name="svrNonce" type="byte"/>
                    </params>
                    <declaration name="tmp" type="int" line="561"/>
                </method>
                <method name="RSA_ServerKeyExchange" type="constructor" line="590">
                    <params>
                        <param name="ephemeralKey" type="PublicKey"/>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="clntNonce" type="RandomCookie"/>
                        <param name="svrNonce" type="RandomCookie"/>
                        <param name="sr" type="SecureRandom"/>
                    </params>
                    <declaration name="rsaKey" type="RSAPublicKeySpec" line="591"/>
                </method>
                <method name="RSA_ServerKeyExchange" type="constructor" line="606">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                    </params>
                </method>
                <method name="getPublicKey" type="PublicKey" line="617">
                    <comment line="621">
                        modulus and exponent are always positive                        
                    </comment>
                    <scope line="618">
                        <declaration name="kfac" type="KeyFactory" line="619"/>
                        <declaration name="kspec" type="RSAPublicKeySpec" line="621"/>
                    </scope>
                    <scope line="625"/>
                </method>
                <method name="verify" type="boolean" line="636">
                    <params>
                        <param name="certifiedKey" type="PublicKey"/>
                        <param name="clntNonce" type="RandomCookie"/>
                        <param name="svrNonce" type="RandomCookie"/>
                    </params>
                </method>
                <method name="messageLength" type="int" line="642"/>
                <method name="send" type="void" line="647">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                </method>
                <method name="print" type="void" line="653">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="656"/>
                </method>
            </class>
            <class name="DH_ServerKeyExchange" line="678">
                <extends class="ServerKeyExchange"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="dhKeyExchangeFix" type="boolean" line="682"/>
                <declaration name="dh_p" type="byte" line="685"/>
                <declaration name="dh_g" type="byte" line="686"/>
                <declaration name="dh_Ys" type="byte" line="687"/>
                <declaration name="signature" type="byte" line="689"/>
                <declaration name="protocolVersion" type="ProtocolVersion" line="692"/>
                <declaration name="preferableSignatureAlgorithm" type="SignatureAndHashAlgorithm" line="695"/>
                <method name="DH_ServerKeyExchange" type="constructor" line="701">
                    <params>
                        <param name="obj" type="DHCrypt"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                </method>
                <method name="DH_ServerKeyExchange" type="constructor" line="717">
                    <params>
                        <param name="obj" type="DHCrypt"/>
                        <param name="key" type="PrivateKey"/>
                        <param name="clntNonce" type="byte"/>
                        <param name="svrNonce" type="byte"/>
                        <param name="sr" type="SecureRandom"/>
                        <param name="signAlgorithm" type="SignatureAndHashAlgorithm"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                    <declaration name="sig" type="Signature" line="723"/>
                    <scope line="724"/>
                    <scope line="727">
                        <scope line="729"/>
                        <scope line="731"/>
                    </scope>
                </method>
                <method name="DH_ServerKeyExchange" type="constructor" line="747">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                </method>
                <method name="DH_ServerKeyExchange" type="constructor" line="767">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                        <param name="publicKey" type="PublicKey"/>
                        <param name="clntNonce" type="byte"/>
                        <param name="svrNonce" type="byte"/>
                        <param name="messageSize" type="int"/>
                        <param name="localSupportedSignAlgs" type="Collection<SignatureAndHashAlgorithm>"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                    <comment line="772">
                        read params: ServerDHParams                        
                    </comment>
                    <comment line="777">
                        read the signature and hash algorithm                        
                    </comment>
                    <comment line="779">
                        hash algorithm                        
                    </comment>
                    <comment line="780">
                        signature algorithm                        
                    </comment>
                    <comment line="785">
                        Is it a local supported signature algorithm?                        
                    </comment>
                    <comment line="796">
                        read the signature                        
                    </comment>
                    <scope line="777">
                        <declaration name="hash" type="int" line="778"/>
                        <declaration name="signature" type="int" line="779"/>
                        <scope line="786"/>
                    </scope>
                    <scope line="791"/>
                    <declaration name="signature" type="byte" line="796"/>
                    <scope line="797"/>
                    <scope line="799"/>
                    <declaration name="sig" type="Signature" line="808"/>
                    <declaration name="algorithm" type="String" line="809"/>
                    <scope line="810"/>
                    <scope line="813">
                        <scope line="814"/>
                        <scope line="816"/>
                        <scope line="818"/>
                    </scope>
                    <scope line="826"/>
                </method>
                <method name="getModulus" type="BigInteger" line="832"/>
                <method name="getBase" type="BigInteger" line="837"/>
                <method name="getServerPublicKey" type="BigInteger" line="842"/>
                <method name="updateSignature" type="void" line="850">
                    <params>
                        <param name="sig" type="Signature"/>
                        <param name="clntNonce" type="byte"/>
                        <param name="svrNonce" type="byte"/>
                    </params>
                    <declaration name="tmp" type="int" line="851"/>
                </method>
                <method name="setValues" type="void" line="872">
                    <params>
                        <param name="obj" type="DHCrypt"/>
                    </params>
                </method>
                <method name="messageLength" type="int" line="878">
                    <comment line="880">
                        overhead for p, g, y(s) values.                        
                    </comment>
                    <declaration name="temp" type="int" line="879"/>
                    <scope line="885">
                        <scope line="886"/>
                        <scope line="891"/>
                    </scope>
                </method>
                <method name="send" type="void" line="899">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                    <scope line="904">
                        <scope line="905"/>
                        <scope line="910"/>
                        <scope line="912"/>
                    </scope>
                </method>
                <method name="print" type="void" line="918">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="921">
                        <scope line="926"/>
                        <scope line="928">
                            <scope line="929"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="ECDH_ServerKeyExchange" line="947">
                <extends class="ServerKeyExchange"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="CURVE_EXPLICIT_PRIME" type="int" line="951"/>
                <declaration name="CURVE_EXPLICIT_CHAR2" type="int" line="952"/>
                <declaration name="CURVE_NAMED_CURVE" type="int" line="953"/>
                <declaration name="curveId" type="int" line="956"/>
                <declaration name="pointBytes" type="byte[]" line="958"/>
                <declaration name="signatureBytes" type="byte[]" line="961"/>
                <declaration name="publicKey" type="ECPublicKey" line="964"/>
                <declaration name="protocolVersion" type="ProtocolVersion" line="967"/>
                <declaration name="preferableSignatureAlgorithm" type="SignatureAndHashAlgorithm" line="970"/>
                <method name="ECDH_ServerKeyExchange" type="constructor" line="975">
                    <params>
                        <param name="obj" type="ECDHCrypt"/>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="clntNonce" type="byte[]"/>
                        <param name="svrNonce" type="byte[]"/>
                        <param name="sr" type="SecureRandom"/>
                        <param name="signAlgorithm" type="SignatureAndHashAlgorithm"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                    <comment line="987">
                        ECDH_anon                        
                    </comment>
                    <comment line="998">
                        where is the SecureRandom?                        
                    </comment>
                    <declaration name="params" type="ECParameterSpec" line="980"/>
                    <declaration name="point" type="ECPoint" line="981"/>
                    <scope line="985"/>
                    <declaration name="sig" type="Signature" line="990"/>
                    <scope line="991"/>
                    <scope line="994"/>
                </method>
                <method name="ECDH_ServerKeyExchange" type="constructor" line="1010">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                        <param name="signingKey" type="PublicKey"/>
                        <param name="clntNonce" type="byte[]"/>
                        <param name="svrNonce" type="byte[]"/>
                        <param name="localSupportedSignAlgs" type="Collection<SignatureAndHashAlgorithm>"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                    <comment line="1015">
                        read params: ServerECDHParams                        
                    </comment>
                    <comment line="1018">
                        These parsing errors should never occur as we negotiated
                         the supported curves during the exchange of the Hello messages.                        
                    </comment>
                    <comment line="1050">
                        ECDH_anon                        
                    </comment>
                    <comment line="1054">
                        read the signature and hash algorithm                        
                    </comment>
                    <comment line="1056">
                        hash algorithm                        
                    </comment>
                    <comment line="1057">
                        signature algorithm                        
                    </comment>
                    <comment line="1062">
                        Is it a local supported signature algorithm?                        
                    </comment>
                    <comment line="1071">
                        read the signature                        
                    </comment>
                    <comment line="1074">
                        verify the signature                        
                    </comment>
                    <declaration name="curveType" type="int" line="1015"/>
                    <declaration name="parameters" type="ECParameterSpec" line="1016"/>
                    <scope line="1019">
                        <scope line="1022"/>
                        <declaration name="curveOid" type="String" line="1026"/>
                        <scope line="1028"/>
                        <scope line="1033"/>
                    </scope>
                    <scope line="1037"/>
                    <declaration name="point" type="ECPoint" line="1043"/>
                    <declaration name="factory" type="KeyFactory" line="1044"/>
                    <scope line="1048"/>
                    <scope line="1054">
                        <declaration name="hash" type="int" line="1055"/>
                        <declaration name="signature" type="int" line="1056"/>
                        <scope line="1063"/>
                    </scope>
                    <declaration name="sig" type="Signature" line="1074"/>
                    <scope line="1075"/>
                    <scope line="1078"/>
                    <scope line="1085"/>
                </method>
                <method name="getPublicKey" type="ECPublicKey" line="1094"/>
                <method name="getSignature" type="Signature" line="1099">
                    <params>
                        <param name="keyAlgorithm" type="String"/>
                    </params>
                    <scope line="1100"/>
                    <scope line="1102"/>
                    <scope line="1104"/>
                </method>
                <method name="updateSignature" type="void" line="1110">
                    <params>
                        <param name="sig" type="Signature"/>
                        <param name="clntNonce" type="byte"/>
                        <param name="svrNonce" type="byte"/>
                    </params>
                </method>
                <method name="messageLength" type="int" line="1121">
                    <declaration name="sigLen" type="int" line="1122"/>
                    <scope line="1123">
                        <scope line="1125"/>
                    </scope>
                </method>
                <method name="send" type="void" line="1133">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                    <scope line="1138">
                        <scope line="1139"/>
                    </scope>
                </method>
                <method name="print" type="void" line="1148">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="1151">
                        <scope line="1152"/>
                        <scope line="1154">
                            <scope line="1155"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DistinguishedName" line="1166">
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="name" type="byte" line="1172"/>
                <method name="DistinguishedName" type="constructor" line="1174">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                    </params>
                </method>
                <method name="DistinguishedName" type="constructor" line="1178">
                    <params>
                        <param name="dn" type="X500Principal"/>
                    </params>
                </method>
                <method name="getX500Principal" type="X500Principal" line="1182">
                    <scope line="1183"/>
                    <scope line="1185"/>
                </method>
                <method name="length" type="int" line="1191"/>
                <method name="send" type="void" line="1195">
                    <params>
                        <param name="output" type="HandshakeOutStream"/>
                    </params>
                </method>
                <method name="print" type="void" line="1199">
                    <params>
                        <param name="output" type="PrintStream"/>
                    </params>
                    <declaration name="principal" type="X500Principal" line="1200"/>
                </method>
            </class>
            <class name="CertificateRequest" line="1226">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="cct_rsa_sign" type="int" line="1230"/>
                <declaration name="cct_dss_sign" type="int" line="1231"/>
                <declaration name="cct_rsa_fixed_dh" type="int" line="1232"/>
                <declaration name="cct_dss_fixed_dh" type="int" line="1233"/>
                <declaration name="cct_rsa_ephemeral_dh" type="int" line="1237"/>
                <declaration name="cct_dss_ephemeral_dh" type="int" line="1238"/>
                <declaration name="cct_ecdsa_sign" type="int" line="1241"/>
                <declaration name="cct_rsa_fixed_ecdh" type="int" line="1242"/>
                <declaration name="cct_ecdsa_fixed_ecdh" type="int" line="1243"/>
                <declaration name="TYPES_NO_ECC" type="byte[]" line="1245"/>
                <declaration name="TYPES_ECC" type="byte[]" line="1246"/>
                <declaration name="types" type="byte" line="1249"/>
                <declaration name="authorities" type="DistinguishedName" line="1250"/>
                <declaration name="protocolVersion" type="ProtocolVersion" line="1254"/>
                <declaration name="algorithms" type="Collection&lt;SignatureAndHashAlgorithm&gt;" line="1257"/>
                <declaration name="algorithmsLen" type="int" line="1260"/>
                <method name="CertificateRequest" type="constructor" line="1264">
                    <params>
                        <param name="ca" type="X509Certificate"/>
                        <param name="keyExchange" type="KeyExchange"/>
                        <param name="signAlgs" type="Collection<SignatureAndHashAlgorithm>"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                    <comment line="1269">
                        always use X500Principal                        
                    </comment>
                    <comment line="1275">
                        we support RSA, DSS, and ECDSA client authentication and they
                         can be used with all ciphersuites. If this changes, the code
                         needs to be adapted to take keyExchange into account.
                         We only request ECDSA client auth if we have ECC crypto available.                        
                    </comment>
                    <comment line="1281">
                        Use supported_signature_algorithms for TLS 1.2 or later.                        
                    </comment>
                    <scope line="1270">
                        <declaration name="x500Principal" type="X500Principal" line="1271"/>
                    </scope>
                    <scope line="1281">
                        <scope line="1282"/>
                    </scope>
                    <scope line="1290"/>
                </method>
                <method name="CertificateRequest" type="constructor" line="1297">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                    <comment line="1302">
                        Read the certificate_types.                        
                    </comment>
                    <comment line="1305">
                        Read the supported_signature_algorithms for TLS 1.2 or later.                        
                    </comment>
                    <comment line="1316">
                        needs at least two bytes                        
                    </comment>
                    <comment line="1317">
                        hash algorithm                        
                    </comment>
                    <comment line="1318">
                        signature algorithm                        
                    </comment>
                    <comment line="1324">
                        one byte for hash, one byte for signature                        
                    </comment>
                    <comment line="1336">
                        read the certificate_authorities                        
                    </comment>
                    <scope line="1305">
                        <scope line="1307"/>
                        <declaration name="remains" type="int" line="1313"/>
                        <declaration name="sequence" type="int" line="1314"/>
                        <scope line="1315">
                            <declaration name="hash" type="int" line="1316"/>
                            <declaration name="signature" type="int" line="1317"/>
                            <declaration name="algorithm" type="SignatureAndHashAlgorithm" line="1319"/>
                        </scope>
                        <scope line="1326"/>
                    </scope>
                    <scope line="1330"/>
                    <declaration name="len" type="int" line="1336"/>
                    <declaration name="v" type="ArrayList&lt;DistinguishedName&gt;" line="1337"/>
                    <scope line="1338">
                        <declaration name="dn" type="DistinguishedName" line="1339"/>
                    </scope>
                    <scope line="1344"/>
                </method>
                <method name="getAuthorities" type="X500Principal[]" line="1351">
                    <declaration name="ret" type="X500Principal[]" line="1352"/>
                    <scope line="1353"/>
                </method>
                <method name="getSignAlgorithms" type="Collection<SignatureAndHashAlgorithm>" line="1359"/>
                <method name="messageType" type="int" line="1364"/>
                <method name="messageLength" type="int" line="1369">
                    <declaration name="len" type="int" line="1370"/>
                    <scope line="1372"/>
                    <scope line="1376"/>
                </method>
                <method name="send" type="void" line="1384">
                    <params>
                        <param name="output" type="HandshakeOutStream"/>
                    </params>
                    <comment line="1386">
                        put certificate_types                        
                    </comment>
                    <comment line="1389">
                        put supported_signature_algorithms                        
                    </comment>
                    <comment line="1393">
                        hash                        
                    </comment>
                    <comment line="1394">
                        signature                        
                    </comment>
                    <comment line="1398">
                        put certificate_authorities                        
                    </comment>
                    <scope line="1389">
                        <scope line="1391"/>
                    </scope>
                    <declaration name="len" type="int" line="1398"/>
                    <scope line="1399"/>
                    <scope line="1404"/>
                </method>
                <method name="print" type="void" line="1410">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="1413">
                        <scope line="1415">
                            <scope line="1438"/>
                        </scope>
                        <scope line="1444">
                            <declaration name="buffer" type="StringBuffer" line="1445"/>
                            <declaration name="opened" type="boolean" line="1446"/>
                            <scope line="1447">
                                <scope line="1448"/>
                                <scope line="1450"/>
                            </scope>
                        </scope>
                        <scope line="1459"/>
                        <scope line="1461">
                            <scope line="1462"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="ServerHelloDone" line="1479">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <method name="messageType" type="int" line="1482"/>
                <method name="ServerHelloDone" type="constructor" line="1484"/>
                <method name="ServerHelloDone" type="constructor" line="1487">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                    </params>
                    <comment line="1489">
                        nothing to do                        
                    </comment>
                </method>
                <method name="messageLength" type="int" line="1492"/>
                <method name="send" type="void" line="1497">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                    <comment line="1499">
                        nothing to send                        
                    </comment>
                </method>
                <method name="print" type="void" line="1502">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                </method>
            </class>
            <class name="CertificateVerify" line="1514">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="signature" type="byte[]" line="1517"/>
                <declaration name="protocolVersion" type="ProtocolVersion" line="1520"/>
                <declaration name="preferableSignatureAlgorithm" type="SignatureAndHashAlgorithm" line="1523"/>
                <method name="CertificateVerify" type="constructor" line="1532">
                    <params>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="handshakeHash" type="HandshakeHash"/>
                        <param name="privateKey" type="PrivateKey"/>
                        <param name="masterSecret" type="SecretKey"/>
                        <param name="sr" type="SecureRandom"/>
                        <param name="signAlgorithm" type="SignatureAndHashAlgorithm"/>
                    </params>
                    <declaration name="algorithm" type="String" line="1536"/>
                    <declaration name="sig" type="Signature" line="1537"/>
                    <scope line="1538"/>
                    <scope line="1541"/>
                </method>
                <method name="CertificateVerify" type="constructor" line="1555">
                    <params>
                        <param name="input" type="HandshakeInStream"/>
                        <param name="localSupportedSignAlgs" type="Collection<SignatureAndHashAlgorithm>"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                    </params>
                    <comment line="1560">
                        read the signature and hash algorithm                        
                    </comment>
                    <comment line="1562">
                        hash algorithm                        
                    </comment>
                    <comment line="1563">
                        signature algorithm                        
                    </comment>
                    <comment line="1568">
                        Is it a local supported signature algorithm?                        
                    </comment>
                    <comment line="1577">
                        read the signature                        
                    </comment>
                    <scope line="1560">
                        <declaration name="hashAlg" type="int" line="1561"/>
                        <declaration name="signAlg" type="int" line="1562"/>
                        <scope line="1569"/>
                    </scope>
                </method>
                <method name="getPreferableSignatureAlgorithm" type="SignatureAndHashAlgorithm" line="1583"/>
                <method name="verify" type="boolean" line="1593">
                    <params>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="handshakeHash" type="HandshakeHash"/>
                        <param name="publicKey" type="PublicKey"/>
                        <param name="masterSecret" type="SecretKey"/>
                    </params>
                    <declaration name="algorithm" type="String" line="1594"/>
                    <declaration name="sig" type="Signature" line="1595"/>
                    <scope line="1596"/>
                    <scope line="1599"/>
                </method>
                <method name="getSignature" type="Signature" line="1613">
                    <params>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="algorithm" type="String"/>
                    </params>
                    <scope line="1614"/>
                    <scope line="1616"/>
                    <scope line="1618"/>
                    <scope line="1620"/>
                </method>
                <method name="updateSignature" type="void" line="1634">
                    <params>
                        <param name="sig" type="Signature"/>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="handshakeHash" type="HandshakeHash"/>
                        <param name="algorithm" type="String"/>
                        <param name="masterKey" type="SecretKey"/>
                    </params>
                    <comment line="1638">
                        TLS1.1-                        
                    </comment>
                    <comment line="1642">
                        SSLv3                        
                    </comment>
                    <comment line="1647">
                        The signature must be an instance of RSASignature, need
                         to use these hashes directly.                        
                    </comment>
                    <comment line="1650">
                        TLS1.2+                        
                    </comment>
                    <comment line="1653">
                        DSA, ECDSA                        
                    </comment>
                    <comment line="1654">
                        TLS1.1-                        
                    </comment>
                    <comment line="1657">
                        SSLv3                        
                    </comment>
                    <comment line="1662">
                        TLS1.2+                        
                    </comment>
                    <scope line="1636">
                        <scope line="1637">
                            <declaration name="md5Clone" type="MessageDigest" line="1638"/>
                            <declaration name="shaClone" type="MessageDigest" line="1639"/>
                            <scope line="1641"/>
                        </scope>
                        <scope line="1649"/>
                    </scope>
                    <scope line="1652">
                        <scope line="1653">
                            <declaration name="shaClone" type="MessageDigest" line="1654"/>
                            <scope line="1656"/>
                        </scope>
                        <scope line="1661"/>
                    </scope>
                </method>
                <method name="updateDigest" type="void" line="1675">
                    <params>
                        <param name="md" type="MessageDigest"/>
                        <param name="pad1" type="byte[]"/>
                        <param name="pad2" type="byte[]"/>
                        <param name="masterSecret" type="SecretKey"/>
                    </params>
                    <comment line="1677">
                        Digest the key bytes if available.
                         Otherwise (sensitive key), try digesting the key directly.
                         That is currently only implemented in SunPKCS11 using a private
                         reflection API, so we avoid that if possible.                        
                    </comment>
                    <declaration name="keyBytes" type="byte[]" line="1680"/>
                    <scope line="1682"/>
                    <scope line="1684"/>
                    <declaration name="temp" type="byte[]" line="1688"/>
                    <scope line="1690"/>
                    <scope line="1692"/>
                </method>
                <declaration name="delegate" type="Class" line="1699"/>
                <declaration name="spiField" type="Field" line="1700"/>
                <scope line="1702">
                    <scope line="1703"/>
                    <scope line="1706"/>
                </scope>
                <method name="makeAccessible" type="void" line="1712">
                    <params>
                        <param name="o" type="AccessibleObject"/>
                    </params>
                    <anonymous_class line="1713">
                        <method name="run" type="Object" line="1714"/>
                    </anonymous_class>
                </method>
                <declaration name="NULL_OBJECT" type="Object" line="1722"/>
                <declaration name="methodCache" type="Map&lt;Class,Object&gt;" line="1727"/>
                <method name="digestKey" type="void" line="1730">
                    <params>
                        <param name="md" type="MessageDigest"/>
                        <param name="key" type="SecretKey"/>
                    </params>
                    <comment line="1733">
                        Verify that md is implemented via MessageDigestSpi, not
                         via JDK 1.1 style MessageDigest subclassing.                        
                    </comment>
                    <scope line="1731">
                        <scope line="1734"/>
                        <declaration name="spi" type="MessageDigestSpi" line="1737"/>
                        <declaration name="clazz" type="Class&lt;?&gt;" line="1738"/>
                        <declaration name="r" type="Object" line="1739"/>
                        <scope line="1740">
                            <scope line="1741"/>
                            <scope line="1744"/>
                        </scope>
                        <scope line="1749"/>
                        <declaration name="update" type="Method" line="1753"/>
                    </scope>
                    <scope line="1755"/>
                </method>
                <method name="messageType" type="int" line="1763"/>
                <method name="messageLength" type="int" line="1768">
                    <declaration name="temp" type="int" line="1769"/>
                    <scope line="1771"/>
                </method>
                <method name="send" type="void" line="1779">
                    <params>
                        <param name="s" type="HandshakeOutStream"/>
                    </params>
                    <scope line="1780"/>
                </method>
                <method name="print" type="void" line="1789">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="1792">
                        <scope line="1793"/>
                    </scope>
                </method>
            </class>
            <class name="Finished" line="1817">
                <extends class="HandshakeMessage"/>
                <comment line="252">
                    add renegotiation_info extension                    
                </comment>
                <comment line="259">
                    add server_name extension                    
                </comment>
                <comment line="272">
                    add signature_algorithm extension                    
                </comment>
                <comment line="551">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="552">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="557">
                    Hash the nonces and the ephemeral RSA public key.                    
                </comment>
                <comment line="579">
                    Construct an RSA server key exchange message, using data
                     known _only_ to the server.
                    
                     The client knows the public key corresponding to this private
                     key, from the Certificate message sent previously.  To comply
                     with US export regulations we use short RSA keys ... either
                     long term ones in the server&apos;s X509 cert, or else ephemeral
                     ones sent using this message.                    
                </comment>
                <comment line="602">
                    Parse an RSA server key exchange message, using data known
                     to the client (and, in some situations, eavesdroppers).                    
                </comment>
                <comment line="614">
                    Get the ephemeral RSA public key that will be used in this
                     SSL connection.                    
                </comment>
                <comment line="631">
                    Verify the signed temporary key using the hashes computed
                     from it and the two nonces.  This is called by clients
                     with &quot;exportable&quot; RSA flavors.                    
                </comment>
                <comment line="682">
                    Fix message encoding, see 4348279                    
                </comment>
                <comment line="686">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="687">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="688">
                    1 to 2^16 - 1 bytes                    
                </comment>
                <comment line="692">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="695">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="698">
                    Construct from initialized DH key object, for DH_anon
                     key exchange.                    
                </comment>
                <comment line="710">
                    Construct from initialized DH key object and the key associated
                     with the cert chain which was sent ... for DHE_DSS and DHE_RSA
                     key exchange.  (Constructor called by server.)                    
                </comment>
                <comment line="742">
                    Construct a DH_ServerKeyExchange message from an input
                     stream, as if sent from server to client for use with
                     DH_anon key exchange                    
                </comment>
                <comment line="759">
                    Construct a DH_ServerKeyExchange message from an input stream
                     and a certificate, as if sent from server to client for use with
                     DHE_DSS or DHE_RSA key exchange.  (Called by client.)                    
                </comment>
                <comment line="832">
                                        
                </comment>
                <comment line="837">
                                        
                </comment>
                <comment line="842">
                                        
                </comment>
                <comment line="847">
                    Update sig with nonces and Diffie-Hellman public key.                    
                </comment>
                <comment line="951">
                    constants for ECCurveType                    
                </comment>
                <comment line="956">
                    id of the curve we are using                    
                </comment>
                <comment line="958">
                    encoded public point                    
                </comment>
                <comment line="961">
                    signature bytes (or null if anonymous)                    
                </comment>
                <comment line="964">
                    public key object encapsulated in this message                    
                </comment>
                <comment line="967">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="970">
                    the preferable signature algorithm used by this ServerKeyExchange message                    
                </comment>
                <comment line="1004">
                    Parse an ECDH server key exchange message.                    
                </comment>
                <comment line="1092">
                    Get the ephemeral EC public key encapsulated in this message.                    
                </comment>
                <comment line="1169">
                    DER encoded distinguished name.
                     TLS requires that its not longer than 65535 bytes.                    
                </comment>
                <comment line="1230">
                    enum ClientCertificateType                    
                </comment>
                <comment line="1236">
                    The existance of these two values is a bug in the SSL specification.
                     They are never used in the protocol.                    
                </comment>
                <comment line="1241">
                    From RFC 4492 (ECC)                    
                </comment>
                <comment line="1250">
                    1 to 255 types                    
                </comment>
                <comment line="1251">
                    3 to 2^16 - 1                    
                </comment>
                <comment line="1252">
                    ... &quot;3&quot; because that&apos;s the smallest DER-encoded X500 DN                    
                </comment>
                <comment line="1254">
                    protocol version being established using this CertificateRequest message                    
                </comment>
                <comment line="1257">
                    supported_signature_algorithms for TLS 1.2 or later                    
                </comment>
                <comment line="1260">
                    length of supported_signature_algorithms                    
                </comment>
                <comment line="1517">
                    the signature bytes                    
                </comment>
                <comment line="1520">
                    protocol version being established using this ServerKeyExchange message                    
                </comment>
                <comment line="1523">
                    the preferable signature algorithm used by this CertificateVerify message                    
                </comment>
                <comment line="1526">
                    Create an RSA or DSA signed certificate verify message.                    
                </comment>
                <comment line="1551">
                    Unmarshal the signed data from the input stream.                    
                </comment>
                <comment line="1581">
                    Get the preferable signature algorithm used by this message                    
                </comment>
                <comment line="1588">
                    Verify a certificate verify message. Return the result of verification,
                     if there is a problem throw a GeneralSecurityException.                    
                </comment>
                <comment line="1609">
                    Get the Signature object appropriate for verification using the
                     given signature algorithm and protocol version.                    
                </comment>
                <comment line="1627">
                    Update the Signature with the data appropriate for the given
                     signature algorithm and protocol version so that the object is
                     ready for signing or verifying.                    
                </comment>
                <comment line="1668">
                    Update the MessageDigest for SSLv3 certificate verify or finished
                     message calculation. The digest must already have been updated with
                     all preceding handshake messages.
                     Used by the Finished class as well.                    
                </comment>
                <comment line="1722">
                    ConcurrentHashMap does not allow null values, use this marker object                    
                </comment>
                <comment line="1725">
                    cache Method objects per Spi class
                     Note that this will prevent the Spi classes from being GC&apos;d. We assume
                     that is not a problem.                    
                </comment>
                <comment line="1820">
                    constant for a Finished message sent by the client                    
                </comment>
                <comment line="1823">
                    constant for a Finished message sent by the server                    
                </comment>
                <comment line="1826">
                    enum Sender:  &quot;CLNT&quot; and &quot;SRVR&quot;                    
                </comment>
                <comment line="1830">
                    Contents of the finished message (&quot;checksum&quot;). For TLS, it
                     is 12 bytes long, for SSLv3 36 bytes.                    
                </comment>
                <comment line="1836">
                    Current cipher suite we are negotiating.  TLS 1.2 has
                     ciphersuite-defined PRF algorithms.                    
                </comment>
                <comment line="1843">
                    Create a finished message to send to the remote peer.                    
                </comment>
                <comment line="1853">
                    Constructor that reads FINISHED message from stream.                    
                </comment>
                <comment line="1865">
                    Verify that the hashes here are what would have been produced
                     according to a given set of inputs.  This is used to ensure that
                     both client and server are fully in sync, and that the handshake
                     computations have been successful.                    
                </comment>
                <comment line="1876">
                    Perform the actual finished message calculation.                    
                </comment>
                <comment line="1963">
                    Update the MessageDigest for SSLv3 finished message calculation.
                     The digest must already have been updated with all preceding handshake
                     messages. This operation is almost identical to the certificate verify
                     hash, reuse that code.                    
                </comment>
                <comment line="1975">
                    get the verify_data of the finished message                    
                </comment>
                <declaration name="CLIENT" type="int" line="1820"/>
                <declaration name="SERVER" type="int" line="1823"/>
                <declaration name="SSL_CLIENT" type="byte[]" line="1826"/>
                <declaration name="SSL_SERVER" type="byte[]" line="1827"/>
                <declaration name="verifyData" type="byte[]" line="1833"/>
                <declaration name="protocolVersion" type="ProtocolVersion" line="1839"/>
                <declaration name="cipherSuite" type="CipherSuite" line="1840"/>
                <method name="Finished" type="constructor" line="1846">
                    <params>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="handshakeHash" type="HandshakeHash"/>
                        <param name="sender" type="int"/>
                        <param name="master" type="SecretKey"/>
                        <param name="cipherSuite" type="CipherSuite"/>
                    </params>
                </method>
                <method name="Finished" type="constructor" line="1856">
                    <params>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="input" type="HandshakeInStream"/>
                        <param name="cipherSuite" type="CipherSuite"/>
                    </params>
                    <declaration name="msgLen" type="int" line="1859"/>
                </method>
                <method name="verify" type="boolean" line="1870">
                    <params>
                        <param name="handshakeHash" type="HandshakeHash"/>
                        <param name="sender" type="int"/>
                        <param name="master" type="SecretKey"/>
                    </params>
                    <declaration name="myFinished" type="byte[]" line="1871"/>
                </method>
                <method name="getFinished" type="byte[]" line="1879">
                    <params>
                        <param name="handshakeHash" type="HandshakeHash"/>
                        <param name="sender" type="int"/>
                        <param name="masterKey" type="SecretKey"/>
                    </params>
                    <comment line="1894">
                        TLS 1.0+                        
                    </comment>
                    <comment line="1900">
                        Get the KeyGenerator alg and calculate the seed.                        
                    </comment>
                    <comment line="1902">
                        TLS 1.2                        
                    </comment>
                    <comment line="1908">
                        TLS 1.0/1.1                        
                    </comment>
                    <comment line="1923">
                        RFC 52467.4.9 says that finished messages can
                         be ciphersuite-specific in both lengthPRF hash
                         algorithm.  If we ever run across a different
                         length, this call will need to be updated.                        
                    </comment>
                    <comment line="1946">
                        SSLv3                        
                    </comment>
                    <comment line="1956">
                        cannot occur                        
                    </comment>
                    <declaration name="sslLabel" type="byte[]" line="1880"/>
                    <declaration name="tlsLabel" type="String" line="1881"/>
                    <scope line="1882"/>
                    <scope line="1885"/>
                    <scope line="1888"/>
                    <scope line="1892">
                        <scope line="1894">
                            <declaration name="seed" type="byte[]" line="1895"/>
                            <declaration name="prfAlg" type="String" line="1896"/>
                            <declaration name="prf" type="PRF" line="1897"/>
                            <scope line="1900"/>
                            <scope line="1906">
                                <declaration name="md5Clone" type="MessageDigest" line="1908"/>
                                <declaration name="shaClone" type="MessageDigest" line="1909"/>
                            </scope>
                            <declaration name="prfHashAlg" type="String" line="1918"/>
                            <declaration name="prfHashLength" type="int" line="1919"/>
                            <declaration name="prfBlockSize" type="int" line="1920"/>
                            <declaration name="spec" type="TlsPrfParameterSpec" line="1928"/>
                            <declaration name="kg" type="KeyGenerator" line="1932"/>
                            <declaration name="prfKey" type="SecretKey" line="1934"/>
                            <scope line="1935"/>
                            <declaration name="finished" type="byte[]" line="1939"/>
                        </scope>
                        <scope line="1941"/>
                    </scope>
                    <scope line="1944">
                        <declaration name="md5Clone" type="MessageDigest" line="1946"/>
                        <declaration name="shaClone" type="MessageDigest" line="1947"/>
                        <declaration name="finished" type="byte[]" line="1950"/>
                        <scope line="1951"/>
                        <scope line="1954"/>
                    </scope>
                </method>
                <method name="updateDigest" type="void" line="1969">
                    <params>
                        <param name="md" type="MessageDigest"/>
                        <param name="sender" type="byte[]"/>
                        <param name="pad1" type="byte[]"/>
                        <param name="pad2" type="byte[]"/>
                        <param name="masterSecret" type="SecretKey"/>
                    </params>
                </method>
                <method name="getVerifyData" type="byte[]" line="1975"/>
                <method name="messageType" type="int" line="1980"/>
                <method name="messageLength" type="int" line="1983"/>
                <method name="send" type="void" line="1988">
                    <params>
                        <param name="out" type="HandshakeOutStream"/>
                    </params>
                </method>
                <method name="print" type="void" line="1993">
                    <params>
                        <param name="s" type="PrintStream"/>
                    </params>
                    <scope line="1995"/>
                </method>
            </class>
        </class>
    </source>