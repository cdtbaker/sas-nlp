<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.security.MessageDigest"/>
        <import package="javax.net.ssl.SSLException"/>
        <class name="HandshakeInStream" line="6">
            <extends class="InputStream"/>
            <javadoc line="6">
                InputStream for handshake data, used internally only. Contains the
                  handshake message buffer and methods to parse them.
                  Once a new handshake record arrives, it is buffered in this class until
                  processed by the Handshaker. The buffer may also contain incomplete
                  handshake messages in case the message is split across multiple records.
                  Handshaker.process_record deals with all that. It may also contain
                  handshake messages larger than the default buffer size (e.g. large
                  certificate messages). The buffer is grown dynamically to handle that
                  (see InputRecord.queueHandshake()).
                  Note that the InputRecord used as a buffer here is separate from the
                  AppInStream.r, which is where data from the socket is initially read
                  into. This is because once the initial handshake has been completed,
                  handshake and application data messages may be interleaved arbitrarily
                  and must be processed independently.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="r" type="InputRecord" line="24"/>
            <method name="HandshakeInStream" type="constructor" line="25">
                <params>
                    <param name="handshakeHash" type="HandshakeHash"/>
                </params>
            </method>
            <method name="available" type="int" line="29"/>
            <method name="read" type="int" line="32">
                <declaration name="n" type="int" line="33"/>
                <scope line="34"/>
            </method>
            <method name="read" type="int" line="39">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="n" type="int" line="40"/>
                <scope line="41"/>
            </method>
            <method name="skip" type="long" line="46">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
            <method name="mark" type="void" line="49">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <method name="reset" type="void" line="52"/>
            <method name="markSupported" type="boolean" line="55"/>
            <method name="incomingRecord" type="void" line="58">
                <params>
                    <param name="in" type="InputRecord"/>
                </params>
            </method>
            <method name="digestNow" type="void" line="61"/>
            <method name="ignore" type="void" line="64">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="getInt8" type="int" line="67"/>
            <method name="getInt16" type="int" line="70"/>
            <method name="getInt24" type="int" line="73"/>
            <method name="getInt32" type="int" line="76"/>
            <method name="getBytes8" type="byte[]" line="79">
                <declaration name="len" type="int" line="80"/>
                <declaration name="b" type="byte" line="81"/>
            </method>
            <method name="getBytes16" type="byte[]" line="85">
                <declaration name="len" type="int" line="86"/>
                <declaration name="b" type="byte" line="87"/>
            </method>
            <method name="getBytes24" type="byte[]" line="91">
                <declaration name="len" type="int" line="92"/>
                <declaration name="b" type="byte" line="93"/>
            </method>
        </class>
    </source>