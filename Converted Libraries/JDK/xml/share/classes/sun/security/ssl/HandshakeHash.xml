<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.security"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Set"/>
        <class name="HandshakeHash" line="9">
            <javadoc line="9">
                Abstraction for the SSL/TLS hash of all handshake messages that is
                  maintained to verify the integrity of the negotiation. Internally,
                  it consists of an MD5 and an SHA1 digest. They are used in the client
                  and server finished messages and in certificate verify messages (if sent).
                  This class transparently deals with cloneable and non-cloneable digests.
                  This class now supports TLS 1.2 also. The key difference for TLS 1.2
                  is that you cannot determine the hash algorithms for CertificateVerify
                  at a early stage. On the other hand, it&apos;s simpler than TLS 1.1 (and earlier)
                  that there is no messy MD5+SHA1 digests.
                  You need to obey these conventions when using this class:
                  1. protocolDetermined(version) should be called when the negotiated
                  protocol version is determined.
                  2. Before protocolDetermined() is called, only update(), reset(),
                  restrictCertificateVerifyAlgs(), setFinishedAlg(), and
                  setCertificateVerifyAlg() can be called.
                  3. After protocolDetermined() is called, reset() cannot be called.
                  4. After protocolDetermined() is called, if the version is pre-TLS 1.2,
                  getFinishedHash() and getCertificateVerifyHash() cannot be called. Otherwise,
                  getMD5Clone() and getSHAClone() cannot be called.
                  5. getMD5Clone() and getSHAClone() can only be called after
                  protocolDetermined() is called and version is pre-TLS 1.2.
                  6. getFinishedHash() and getCertificateVerifyHash() can only be called after
                  all protocolDetermined(), setCertificateVerifyAlg() and setFinishedAlg()
                  have been called and the version is TLS 1.2. If a CertificateVerify message
                  is to be used, call setCertificateVerifyAlg() with the hash algorithm as the
                  argument. Otherwise, you still must call setCertificateVerifyAlg(null) before
                  calculating any hash value.
                  Suggestions: Call protocolDetermined(), restrictCertificateVerifyAlgs(),
                  setFinishedAlg(), and setCertificateVerifyAlg() as early as possible.
                  Example:
                  &lt;pre&gt;
                  HandshakeHash hh = new HandshakeHash(...)
                  hh.protocolDetermined(ProtocolVersion.TLS12);
                  hh.update(clientHelloBytes);
                  hh.setFinishedAlg(&quot;SHA-256&quot;);
                  hh.update(serverHelloBytes);
                  ...
                  hh.setCertificateVerifyAlg(&quot;SHA-384&quot;);
                  hh.update(CertificateVerifyBytes);
                  byte[] cvDigest = hh.getCertificateVerifyHash();
                  ...
                  hh.update(finished1);
                  byte[] finDigest1 = hh.getFinishedHash();
                  hh.update(finished2);
                  byte[] finDigest2 = hh.getFinishedHash();
                  &lt;/pre&gt;
                  If no CertificateVerify message is to be used, call
                  &lt;pre&gt;
                  hh.setCertificateVerifyAlg(null);
                  &lt;/pre&gt;
                  This call can be made once you are certain that this message
                  will never be used.                
            </javadoc>
            <declaration name="version" type="int" line="64"/>
            <declaration name="data" type="ByteArrayOutputStream" line="65"/>
            <declaration name="isServer" type="boolean" line="66"/>
            <declaration name="md5" type="MessageDigest" line="67"/>
            <declaration name="clonesNeeded" type="int" line="68"/>
            <declaration name="cvAlgDetermined" type="boolean" line="69"/>
            <declaration name="cvAlg" type="String" line="70"/>
            <declaration name="finMD" type="MessageDigest" line="71"/>
            <javadoc line="72">
                Create a new HandshakeHash. needCertificateVerify indicates whether
                  a hash for the certificate verify message is required. The argument
                  algs is a set of all possible hash algorithms that might be used in
                  TLS 1.2. If the caller is sure that TLS 1.2 won&apos;t be used or no
                  CertificateVerify message will be used, leave it null or empty.                
            </javadoc>
            <method name="HandshakeHash" type="constructor" line="79">
                <params>
                    <param name="isServer" type="boolean"/>
                    <param name="needCertificateVerify" type="boolean"/>
                    <param name="algs" type="Set&lt;String&gt;"/>
                </params>
            </method>
            <method name="update" type="void" line="83">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="97">
                Reset the remaining digests. Note this does not reset the number of
                  digest clones that can be obtained. Digests that have already been
                  cloned and are gone remain gone.                
            </javadoc>
            <method name="reset" type="void" line="102">
                <scope line="103"/>
            </method>
            <method name="protocolDetermined" type="void" line="108">
                <params>
                    <param name="pv" type="ProtocolVersion"/>
                </params>
                <scope line="113"/>
                <scope line="117"/>
                <declaration name="bytes" type="byte[]" line="120"/>
            </method>
            <javadoc line="127">
                Return a new MD5 digest updated with all data hashed so far.                
            </javadoc>
            <method name="getMD5Clone" type="MessageDigest" line="130">
                <scope line="131"/>
            </method>
            <javadoc line="136">
                Return a new SHA digest updated with all data hashed so far.                
            </javadoc>
            <method name="getSHAClone" type="MessageDigest" line="139">
                <scope line="140"/>
            </method>
            <method name="cloneDigest" type="MessageDigest" line="145">
                <params>
                    <param name="digest" type="MessageDigest"/>
                </params>
                <scope line="146"/>
                <scope line="149"/>
            </method>
            <method name="normalizeAlgName" type="String" line="153">
                <params>
                    <param name="alg" type="String"/>
                </params>
                <scope line="155">
                    <scope line="156"/>
                    <scope line="159"/>
                </scope>
            </method>
            <javadoc line="165">
                Specifies the hash algorithm used in Finished. This should be called
                  based in info in ServerHello.
                  Can be called multiple times.                
            </javadoc>
            <method name="setFinishedAlg" type="void" line="170">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="171"/>
                <scope line="175"/>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Restricts the possible algorithms for the CertificateVerify. Called by
                  the server based on info in CertRequest. The argument must be a subset
                  of the argument with the same name in the constructor. The method can be
                  called multiple times. If the caller is sure that no CertificateVerify
                  message will be used, leave this argument null or empty.                
            </javadoc>
            <method name="restrictCertificateVerifyAlgs" type="void" line="190">
                <params>
                    <param name="algs" type="Set&lt;String&gt;"/>
                </params>
                <scope line="191"/>
            </method>
            <javadoc line="195">
                Specifies the hash algorithm used in CertificateVerify.
                  Can be called multiple times.                
            </javadoc>
            <method name="setCertificateVerifyAlg" type="void" line="199">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getAllHandshakeMessages" type="byte[]" line="204"/>
            <javadoc line="207">
                Calculates the hash in Finished. Must be called after setFinishedAlg().
                  This method can be called twice, for Finished messages of the server
                  side and client side respectively.                
            </javadoc>
            <method name="getFinishedHash" type="byte[]" line="212">
                <scope line="213"/>
                <scope line="216"/>
            </method>
        </class>
        <class name="CloneableDigest" line="221">
            <extends class="MessageDigest"/>
            <implements interface="Cloneable"/>
            <javadoc line="221">
                A wrapper for MessageDigests that simulates cloning of non-cloneable
                  digests. It uses the standard MessageDigest API and therefore can be used
                  transparently in place of a regular digest.
                  Note that we extend the MessageDigest class directly rather than
                  MessageDigestSpi. This works because MessageDigest was originally designed
                  this way in the JDK 1.1 days which allows us to avoid creating an internal
                  provider.
                  It can be &quot;cloned&quot; a limited number of times, which is specified at
                  construction time. This is achieved by internally maintaining n digests
                  in parallel. Consequently, it is only 1/n-th times as fast as the original
                  digest.
                  Example:
                  MessageDigest md = CloneableDigest.getDigest(&quot;SHA&quot;, 2);
                  md.update(data1);
                  MessageDigest md2 = (MessageDigest)md.clone();
                  md2.update(data2);
                  byte[] d1 = md2.digest(); // digest of data1 || data2
                  md.update(data3);
                  byte[] d2 = md.digest();  // digest of data1 || data3
                  This class is not thread safe.                
            </javadoc>
            <declaration name="digests" type="MessageDigest[]" line="244"/>
            <javadoc line="244">
                The individual MessageDigests. Initially, all elements are non-null.
                  When clone() is called, the non-null element with the maximum index is
                  returned and the array element set to null.
                  All non-null element are always in the same state.                
            </javadoc>
            <method name="CloneableDigest" type="constructor" line="251">
                <params>
                    <param name="digest" type="MessageDigest"/>
                    <param name="n" type="int"/>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="255"/>
            </method>
            <javadoc line="259">
                Return a MessageDigest for the given algorithm that can be cloned the
                  specified number of times. If the default implementation supports
                  cloning, it is returned. Otherwise, an instance of this class is
                  returned.                
            </javadoc>
            <method name="getDigest" type="MessageDigest" line="265">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="digest" type="MessageDigest" line="266"/>
                <scope line="267"/>
                <scope line="271"/>
            </method>
            <javadoc line="275">
                Check if this object is still usable. If it has already been cloned the
                  maximum number of times, there are no digests left and this object can no
                  longer be used.                
            </javadoc>
            <method name="checkState" type="void" line="280"/>
            <method name="engineGetDigestLength" type="int" line="282"/>
            <method name="engineUpdate" type="void" line="286">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="288"/>
            </method>
            <method name="engineUpdate" type="void" line="292">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="294"/>
            </method>
            <method name="engineDigest" type="byte[]" line="298">
                <declaration name="digest" type="byte[]" line="300"/>
            </method>
            <method name="engineDigest" type="int" line="304">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="n" type="int" line="306"/>
            </method>
            <javadoc line="310">
                Reset all digests after a digest() call. digests[0] has already been
                  implicitly reset by the digest() call and does not need to be reset
                  again.                
            </javadoc>
            <method name="digestReset" type="void" line="315">
                <scope line="316"/>
            </method>
            <method name="engineReset" type="void" line="320">
                <scope line="322"/>
            </method>
            <method name="clone" type="Object" line="326">
                <scope line="328">
                    <scope line="329">
                        <declaration name="digest" type="MessageDigest" line="330"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>