<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl.krb5">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.util.Arrays"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.EncryptedData"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.internal.crypto.KeyUsage"/>
        <import package="sun.security.ssl.Debug"/>
        <import package="sun.security.ssl.HandshakeInStream"/>
        <import package="sun.security.ssl.HandshakeMessage"/>
        <import package="sun.security.ssl.ProtocolVersion"/>
        <class name="KerberosPreMasterSecret" line="44">
            <comment line="56">
                preMaster [0,1]                
            </comment>
            <comment line="57">
                48 bytes                
            </comment>
            <comment line="96">
                Constructor used by server to decrypt encrypted premaster secret.
                 The protocol version in preMaster[0,1] must match either currentVersion
                 or clientVersion, otherwise, the premaster secret is set to
                 a random one to foil possible attack.
                
                 @param currentVersion version of protocol being used
                 @param clientVersion version requested by client
                 @param generator random number generator used to generate
                        bogus premaster secret if premaster secret verification fails
                 @param input input stream from which to read the encrypted
                        premaster secret
                 @param sessionKey Kerberos session key to be used for decryption                
            </comment>
            <comment line="239">
                Used by server to generate premaster secret in case of
                 problem decoding ticket.
                
                 @param protocolVersion used for preMaster[0,1]
                 @param generator random number generator to use for generating secret.                
            </comment>
            <comment line="264">
                Clone not needed; internal use only                
            </comment>
            <comment line="269">
                Clone not needed; internal use only                
            </comment>
            <javadoc line="44">
                This is the Kerberos premaster secret in the Kerberos client key
                  exchange message (CLIENT --&gt; SERVER); it holds the
                  Kerberos-encrypted pre-master secret. The secret is encrypted using the
                  Kerberos session key.  The padding and size of the resulting message
                  depends on the session key type, but the pre-master secret is
                  always exactly 48 bytes.                
            </javadoc>
            <declaration name="protocolVersion" type="ProtocolVersion" line="55"/>
            <declaration name="preMaster" type="byte" line="56"/>
            <declaration name="encrypted" type="byte" line="57"/>
            <javadoc line="59">
                Constructor used by client to generate premaster secret.
                  Client randomly creates a pre-master secret and encrypts it
                  using the Kerberos session key; only the server can decrypt
                  it, using the session key available in the service ticket.                
                <param>
                    protocolVersion used to set preMaster[0,1]                    
                </param>
                <param>
                    generator random number generator for generating premaster secret                    
                </param>
                <param>
                    sessionKey Kerberos session key for encrypting premaster secret                    
                </param>
            </javadoc>
            <method name="KerberosPreMasterSecret" type="constructor" line="71">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="sessionKey" type="EncryptionKey"/>
                </params>
                <comment line="84">
                    Encrypt premaster secret                    
                </comment>
                <comment line="88">
                    not ASN.1 encoded.                    
                </comment>
                <scope line="74"/>
                <scope line="84">
                    <declaration name="eData" type="EncryptedData" line="85"/>
                </scope>
                <scope line="89"/>
            </method>
            <method name="KerberosPreMasterSecret" type="constructor" line="112">
                <params>
                    <param name="currentVersion" type="ProtocolVersion"/>
                    <param name="clientVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="input" type="HandshakeInStream"/>
                    <param name="sessionKey" type="EncryptionKey"/>
                </params>
                <comment line="115">
                    Extract encrypted premaster secret from message                    
                </comment>
                <comment line="132">
                    Decrypt premaster secret                    
                </comment>
                <comment line="135">
                                        
                </comment>
                <comment line="145">
                    Remove padding bytes after decryption. Only DES and DES3 have
                     paddings and we don&apos;t support DES3 in TLS (see above)                    
                </comment>
                <comment line="150">
                    For des-cbc-crc, 4 paddings. Value can be 0x04 or 0x00.                    
                </comment>
                <comment line="157">
                    For des-cbc-md5, 8 paddings with 0x08, or no padding                    
                </comment>
                <comment line="172">
                    catch exception &amp; process below                    
                </comment>
                <comment line="177">
                    check if the premaster secret version is ok
                     the specification says that it must be the maximum version supported
                     by the client from its ClientHello message. However, many
                     old implementations send the negotiated version, so accept both
                     for SSL v3.0 and TLS v1.0.
                     NOTE that we may be comparing two unsupported version numbers in
                     the second case, which is why we cannot use object references
                     equality in this special case                    
                </comment>
                <comment line="187">
                    we never checked the client_version in server side
                     for TLS v1.0 and SSL v3.0. For compatibility, we
                     maintain this behavior.                    
                </comment>
                <comment line="196">
                    Bogus decrypted ClientKeyExchange? If so, conjure a
                     a random preMaster secret that will fail later during
                     Finished message processing. This is a countermeasure against
                     the &quot;interactive RSA PKCS#1 encryption envelop attack&quot; reported
                     in June 1998. Preserving the executation path will
                     mitigate timing attacks and force consistent error handling
                     that will prevent an attacking client from differentiating
                     different kinds of decrypted ClientKeyExchange bogosities.                    
                </comment>
                <comment line="216">
                    Randomize the preMaster secret with the
                     ClientHello.client_version, as will produce invalid master
                     secret to prevent the attacks.                    
                </comment>
                <scope line="117">
                    <scope line="118"/>
                </scope>
                <scope line="125"/>
                <scope line="132">
                    <declaration name="data" type="EncryptedData" line="133"/>
                    <declaration name="temp" type="byte[]" line="136"/>
                    <scope line="137">
                        <scope line="138"/>
                    </scope>
                    <scope line="148">
                        <scope line="151"/>
                    </scope>
                    <scope line="155">
                        <scope line="157"/>
                    </scope>
                    <scope line="166"/>
                </scope>
                <scope line="170"/>
                <declaration name="versionMismatch" type="boolean" line="184"/>
                <scope line="191"/>
                <scope line="206">
                    <scope line="207">
                        <scope line="210"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="225">
                Checks if all paddings of data are b                
                <param>
                    data the block with padding                    
                </param>
                <param>
                    len length of data, >= 48                    
                </param>
                <param>
                    b expected padding byte                    
                </param>
            </javadoc>
            <method name="paddingByteIs" type="boolean" line="231">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="len" type="int"/>
                    <param name="b" type="byte"/>
                </params>
                <scope line="232"/>
            </method>
            <method name="KerberosPreMasterSecret" type="constructor" line="246">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                </params>
            </method>
            <method name="generatePreMaster" type="byte[]" line="253">
                <params>
                    <param name="rand" type="SecureRandom"/>
                    <param name="ver" type="ProtocolVersion"/>
                </params>
                <declaration name="pm" type="byte[]" line="255"/>
            </method>
            <method name="getUnencrypted" type="byte[]" line="264"/>
            <method name="getEncrypted" type="byte[]" line="269"/>
        </class>
    </source>