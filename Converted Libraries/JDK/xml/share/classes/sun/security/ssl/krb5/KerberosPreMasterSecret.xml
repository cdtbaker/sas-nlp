<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl.krb5">
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.util.Arrays"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.EncryptedData"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.internal.crypto.KeyUsage"/>
        <import package="sun.security.ssl.Debug"/>
        <import package="sun.security.ssl.HandshakeInStream"/>
        <import package="sun.security.ssl.HandshakeMessage"/>
        <import package="sun.security.ssl.ProtocolVersion"/>
        <class name="KerberosPreMasterSecret" line="14">
            <javadoc line="14">
                This is the Kerberos premaster secret in the Kerberos client key
                  exchange message (CLIENT --&gt; SERVER); it holds the
                  Kerberos-encrypted pre-master secret. The secret is encrypted using the
                  Kerberos session key.  The padding and size of the resulting message
                  depends on the session key type, but the pre-master secret is
                  always exactly 48 bytes.                
            </javadoc>
            <declaration name="protocolVersion" type="ProtocolVersion" line="23"/>
            <declaration name="preMaster" type="byte" line="24"/>
            <declaration name="encrypted" type="byte" line="25"/>
            <javadoc line="26">
                Constructor used by client to generate premaster secret.
                  Client randomly creates a pre-master secret and encrypts it
                  using the Kerberos session key; only the server can decrypt
                  it, using the session key available in the service ticket.                
                <param>
                    protocolVersion used to set preMaster[0,1]                    
                </param>
                <param>
                    generator random number generator for generating premaster secret                    
                </param>
                <param>
                    sessionKey Kerberos session key for encrypting premaster secret                    
                </param>
            </javadoc>
            <method name="KerberosPreMasterSecret" type="constructor" line="35">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="sessionKey" type="EncryptionKey"/>
                </params>
                <scope line="36"/>
                <scope line="41">
                    <declaration name="eData" type="EncryptedData" line="42"/>
                </scope>
                <scope line="45"/>
            </method>
            <method name="KerberosPreMasterSecret" type="constructor" line="49">
                <params>
                    <param name="currentVersion" type="ProtocolVersion"/>
                    <param name="clientVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                    <param name="input" type="HandshakeInStream"/>
                    <param name="sessionKey" type="EncryptionKey"/>
                </params>
                <scope line="51">
                    <scope line="52"/>
                </scope>
                <scope line="56"/>
                <scope line="59">
                    <declaration name="data" type="EncryptedData" line="60"/>
                    <declaration name="temp" type="byte[]" line="61"/>
                    <scope line="62">
                        <scope line="63"/>
                    </scope>
                    <scope line="67">
                        <scope line="68"/>
                    </scope>
                    <scope line="72">
                        <scope line="73"/>
                    </scope>
                    <scope line="79"/>
                </scope>
                <scope line="83"/>
                <declaration name="versionMismatch" type="boolean" line="87"/>
                <scope line="88"/>
                <scope line="91">
                    <scope line="92">
                        <scope line="94"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="102">
                Checks if all paddings of data are b                
                <param>
                    data the block with padding                    
                </param>
                <param>
                    len length of data, &gt;= 48                    
                </param>
                <param>
                    b expected padding byte                    
                </param>
            </javadoc>
            <method name="paddingByteIs" type="boolean" line="108">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="len" type="int"/>
                    <param name="b" type="byte"/>
                </params>
                <scope line="109"/>
            </method>
            <method name="KerberosPreMasterSecret" type="constructor" line="114">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="generator" type="SecureRandom"/>
                </params>
            </method>
            <method name="generatePreMaster" type="byte[]" line="118">
                <params>
                    <param name="rand" type="SecureRandom"/>
                    <param name="ver" type="ProtocolVersion"/>
                </params>
                <declaration name="pm" type="byte[]" line="119"/>
            </method>
            <method name="getUnencrypted" type="byte[]" line="125"/>
            <method name="getEncrypted" type="byte[]" line="128"/>
        </class>
    </source>