<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <import package="javax.net.ssl.SSLSocket"/>
        <class name="SSLSocketFactoryImpl" line="6">
            <extends class="SSLSocketFactory"/>
            <javadoc line="6">
                Implementation of an SSL socket factory.  This provides the public
                  hooks to create SSL sockets, using a &quot;high level&quot; programming
                  interface which encapsulates system security policy defaults rather than
                  offering application flexibility.  In particular, it uses a configurable
                  authentication context (and the keys held there) rather than offering
                  any flexibility about which keys to use; that context defaults to the
                  process-default context, but may be explicitly specified.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="defaultContext" type="SSLContextImpl" line="17"/>
            <declaration name="context" type="SSLContextImpl" line="18"/>
            <javadoc line="19">
                Constructor used to instantiate the default factory. This method is
                  only called if the old &quot;ssl.SocketFactory.provider&quot; property in the
                  java.security file is set.                
            </javadoc>
            <method name="SSLSocketFactoryImpl" type="constructor" line="24"/>
            <javadoc line="27">
                Constructs an SSL socket factory.                
            </javadoc>
            <method name="SSLSocketFactoryImpl" type="constructor" line="30">
                <params>
                    <param name="context" type="SSLContextImpl"/>
                </params>
            </method>
            <javadoc line="33">
                Creates an unconnected socket.                
                <return>
                    the unconnected socket                    
                </return>
                <see>
                    java.net.Socket#connect(java.net.SocketAddress,int)                    
                </see>
            </javadoc>
            <method name="createSocket" type="Socket" line="38"/>
            <javadoc line="41">
                Constructs an SSL connection to a named host at a specified port.
                  This acts as the SSL client, and may authenticate itself or rejoin
                  existing SSL sessions allowed by the authentication context which
                  has been configured.                
                <param>
                    host name of the host with which to connect                    
                </param>
                <param>
                    port number of the server&apos;s port                    
                </param>
            </javadoc>
            <method name="createSocket" type="Socket" line="49">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="52">
                Returns a socket layered over an existing socket to a
                  ServerSocket on the named host, at the given port.  This
                  constructor can be used when tunneling SSL through a proxy. The
                  host and port refer to the logical destination server.  This
                  socket is configured using the socket options established for
                  this factory.                
                <param>
                    s the existing socket                    
                </param>
                <param>
                    host the server host                    
                </param>
                <param>
                    port the server port                    
                </param>
                <param>
                    autoClose close the underlying socket when this socket is closed                    
                </param>
                <exception>
                    IOException if the connection can&apos;t be established                    
                </exception>
                <exception>
                    UnknownHostException if the host is not known                    
                </exception>
            </javadoc>
            <method name="createSocket" type="Socket" line="66">
                <params>
                    <param name="s" type="Socket"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="autoClose" type="boolean"/>
                </params>
            </method>
            <javadoc line="69">
                Constructs an SSL connection to a server at a specified address
                  and TCP port.  This acts as the SSL client, and may authenticate
                  itself or rejoin existing SSL sessions allowed by the authentication
                  context which has been configured.                
                <param>
                    address the server&apos;s host                    
                </param>
                <param>
                    port its port                    
                </param>
            </javadoc>
            <method name="createSocket" type="Socket" line="77">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Constructs an SSL connection to a named host at a specified port.
                  This acts as the SSL client, and may authenticate itself or rejoin
                  existing SSL sessions allowed by the authentication context which
                  has been configured. The socket will also bind() to the local
                  address and port supplied.                
            </javadoc>
            <method name="createSocket" type="Socket" line="87">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="clientAddress" type="InetAddress"/>
                    <param name="clientPort" type="int"/>
                </params>
            </method>
            <javadoc line="90">
                Constructs an SSL connection to a server at a specified address
                  and TCP port.  This acts as the SSL client, and may authenticate
                  itself or rejoin existing SSL sessions allowed by the authentication
                  context which has been configured. The socket will also bind() to
                  the local address and port supplied.                
            </javadoc>
            <method name="createSocket" type="Socket" line="97">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="clientAddress" type="InetAddress"/>
                    <param name="clientPort" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Returns the subset of the supported cipher suites which are
                  enabled by default.  These cipher suites all provide a minimum
                  quality of service whereby the server authenticates itself
                  (preventing person-in-the-middle attacks) and where traffic
                  is encrypted to provide confidentiality.                
            </javadoc>
            <method name="getDefaultCipherSuites" type="String[]" line="107"/>
            <javadoc line="110">
                Returns the names of the cipher suites which could be enabled for use
                  on an SSL connection.  Normally, only a subset of these will actually
                  be enabled by default, since this list may include cipher suites which
                  do not support the mutual authentication of servers and clients, or
                  which do not protect data confidentiality.  Servers may also need
                  certain kinds of certificates to use certain cipher suites.                
            </javadoc>
            <method name="getSupportedCipherSuites" type="String[]" line="118"/>
        </class>
    </source>