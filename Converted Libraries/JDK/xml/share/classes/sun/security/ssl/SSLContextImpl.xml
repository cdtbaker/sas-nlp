<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.net.Socket"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.Certificate"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.provider.certpath.AlgorithmChecker"/>
        <class name="SSLContextImpl" line="10">
            <extends class="SSLContextSpi"/>
            <declaration name="debug" type="Debug" line="11"/>
            <declaration name="ephemeralKeyManager" type="EphemeralKeyManager" line="12"/>
            <declaration name="clientCache" type="SSLSessionContextImpl" line="13"/>
            <declaration name="serverCache" type="SSLSessionContextImpl" line="14"/>
            <declaration name="isInitialized" type="boolean" line="15"/>
            <declaration name="keyManager" type="X509ExtendedKeyManager" line="16"/>
            <declaration name="trustManager" type="X509TrustManager" line="17"/>
            <declaration name="secureRandom" type="SecureRandom" line="18"/>
            <declaration name="defaultAlgorithmConstraints" type="AlgorithmConstraints" line="19"/>
            <declaration name="defaultServerProtocolList" type="ProtocolList" line="20"/>
            <declaration name="defaultClientProtocolList" type="ProtocolList" line="21"/>
            <declaration name="supportedProtocolList" type="ProtocolList" line="22"/>
            <declaration name="defaultServerCipherSuiteList" type="CipherSuiteList" line="23"/>
            <declaration name="defaultClientCipherSuiteList" type="CipherSuiteList" line="24"/>
            <declaration name="supportedCipherSuiteList" type="CipherSuiteList" line="25"/>
            <method name="SSLContextImpl" type="constructor" line="26"/>
            <method name="engineInit" type="void" line="31">
                <params>
                    <param name="km" type="KeyManager[]"/>
                    <param name="tm" type="TrustManager[]"/>
                    <param name="sr" type="SecureRandom"/>
                </params>
                <scope line="34">
                    <scope line="35">
                        <declaration name="tmf" type="TrustManagerFactory" line="36"/>
                    </scope>
                    <scope line="40"/>
                </scope>
                <scope line="44"/>
                <scope line="47">
                    <scope line="48"/>
                </scope>
                <scope line="53"/>
                <scope line="57"/>
            </method>
            <method name="chooseTrustManager" type="X509TrustManager" line="62">
                <params>
                    <param name="tm" type="TrustManager[]"/>
                </params>
                <scope line="63">
                    <scope line="64">
                        <scope line="65"/>
                        <scope line="68"/>
                        <scope line="71"/>
                    </scope>
                </scope>
            </method>
            <method name="chooseKeyManager" type="X509ExtendedKeyManager" line="78">
                <params>
                    <param name="kms" type="KeyManager[]"/>
                </params>
                <scope line="79">
                    <declaration name="km" type="KeyManager" line="80"/>
                    <scope line="81"/>
                    <scope line="84">
                        <scope line="85"/>
                        <scope line="88"/>
                    </scope>
                    <scope line="92"/>
                    <scope line="95"/>
                </scope>
            </method>
            <method name="engineGetSocketFactory" type="SSLSocketFactory" line="102">
                <scope line="103"/>
            </method>
            <method name="engineGetServerSocketFactory" type="SSLServerSocketFactory" line="108">
                <scope line="109"/>
            </method>
            <method name="engineCreateSSLEngine" type="SSLEngine" line="114">
                <scope line="115"/>
            </method>
            <method name="engineCreateSSLEngine" type="SSLEngine" line="120">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="121"/>
            </method>
            <method name="engineGetClientSessionContext" type="SSLSessionContext" line="126"/>
            <method name="engineGetServerSessionContext" type="SSLSessionContext" line="129"/>
            <method name="getSecureRandom" type="SecureRandom" line="132"/>
            <method name="getX509KeyManager" type="X509ExtendedKeyManager" line="135"/>
            <method name="getX509TrustManager" type="X509TrustManager" line="138"/>
            <method name="getEphemeralKeyManager" type="EphemeralKeyManager" line="141"/>
            <method name="getDefaultServerSSLParams" type="SSLParameters" line="144"/>
            <method name="getDefaultClientSSLParams" type="SSLParameters" line="145"/>
            <method name="getSupportedSSLParams" type="SSLParameters" line="146"/>
            <method name="getSuportedProtocolList" type="ProtocolList" line="147">
                <scope line="148"/>
            </method>
            <method name="getDefaultProtocolList" type="ProtocolList" line="153">
                <params>
                    <param name="roleIsServer" type="boolean"/>
                </params>
                <scope line="154">
                    <scope line="155"/>
                </scope>
                <scope line="160">
                    <scope line="161"/>
                </scope>
            </method>
            <method name="getSuportedCipherSuiteList" type="CipherSuiteList" line="167">
                <scope line="169"/>
            </method>
            <method name="getDefaultCipherSuiteList" type="CipherSuiteList" line="174">
                <params>
                    <param name="roleIsServer" type="boolean"/>
                </params>
                <scope line="176">
                    <scope line="177"/>
                </scope>
                <scope line="182">
                    <scope line="183"/>
                </scope>
            </method>
            <javadoc line="189">
                Return whether a protocol list is the original default enabled
                  protocols.  See: SSLSocket/SSLEngine.setEnabledProtocols()                
            </javadoc>
            <method name="isDefaultProtocolList" type="boolean" line="193">
                <params>
                    <param name="protocols" type="ProtocolList"/>
                </params>
            </method>
            <method name="getApplicableCipherSuiteList" type="CipherSuiteList" line="196">
                <params>
                    <param name="protocols" type="ProtocolList"/>
                    <param name="onlyEnabled" type="boolean"/>
                </params>
                <declaration name="minPriority" type="int" line="197"/>
                <scope line="198"/>
                <declaration name="allowedCipherSuites" type="Collection&amp;lt;CipherSuite&amp;gt;" line="201"/>
                <declaration name="suites" type="ArrayList&amp;lt;CipherSuite&amp;gt;" line="202"/>
                <scope line="203">
                    <scope line="204">
                        <scope line="205"/>
                        <scope line="208">
                            <scope line="209"/>
                        </scope>
                        <scope line="213">
                            <scope line="214"/>
                            <scope line="217"/>
                            <scope line="220"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="228">
                Clear cache of available ciphersuites. If we support all ciphers
                  internally, there is no need to clear the cache and calling this
                  method has no effect.                
            </javadoc>
            <method name="clearAvailableCache" type="void" line="233">
                <scope line="234"/>
            </method>
            <class name="ConservativeSSLContext" line="242">
                <extends class="SSLContextImpl"/>
                <declaration name="defaultServerSSLParams" type="SSLParameters" line="243"/>
                <declaration name="defaultClientSSLParams" type="SSLParameters" line="244"/>
                <declaration name="supportedSSLParams" type="SSLParameters" line="245"/>
                <scope line="246">
                    <scope line="247"/>
                    <scope line="254"/>
                </scope>
                <method name="getDefaultServerSSLParams" type="SSLParameters" line="262"/>
                <method name="getDefaultClientSSLParams" type="SSLParameters" line="265"/>
                <method name="getSupportedSSLParams" type="SSLParameters" line="268"/>
            </class>
            <class name="DefaultSSLContext" line="272">
                <extends class="ConservativeSSLContext"/>
                <declaration name="NONE" type="String" line="273"/>
                <declaration name="P11KEYSTORE" type="String" line="274"/>
                <declaration name="defaultImpl" type="SSLContextImpl" line="275"/>
                <declaration name="defaultTrustManagers" type="TrustManager[]" line="276"/>
                <declaration name="defaultKeyManagers" type="KeyManager[]" line="277"/>
                <method name="DefaultSSLContext" type="constructor" line="278">
                    <scope line="279"/>
                    <scope line="282">
                        <scope line="283"/>
                    </scope>
                    <scope line="288"/>
                </method>
                <method name="engineInit" type="void" line="292">
                    <params>
                        <param name="km" type="KeyManager[]"/>
                        <param name="tm" type="TrustManager[]"/>
                        <param name="sr" type="SecureRandom"/>
                    </params>
                </method>
                <method name="getDefaultImpl" type="SSLContextImpl" line="295">
                    <scope line="296"/>
                </method>
                <method name="getDefaultTrustManager" type="TrustManager[]" line="301">
                    <scope line="302"/>
                    <declaration name="ks" type="KeyStore" line="305"/>
                    <declaration name="tmf" type="TrustManagerFactory" line="306"/>
                </method>
                <method name="getDefaultKeyManager" type="KeyManager[]" line="311">
                    <scope line="312"/>
                    <declaration name="props" type="Map&amp;lt;String,String&amp;gt;" line="315"/>
                    <anonymous_class line="316">
                        <method name="run" type="Object" line="317"/>
                    </anonymous_class>
                    <declaration name="defaultKeyStore" type="String" line="326"/>
                    <declaration name="defaultKeyStoreType" type="String" line="327"/>
                    <declaration name="defaultKeyStoreProvider" type="String" line="328"/>
                    <scope line="329"/>
                    <scope line="334"/>
                    <declaration name="fs" type="FileInputStream" line="337"/>
                    <scope line="338">
                        <anonymous_class line="339">
                            <method name="run" type="FileInputStream" line="340"/>
                        </anonymous_class>
                    </scope>
                    <declaration name="defaultKeyStorePassword" type="String" line="346"/>
                    <declaration name="passwd" type="char[]" line="347"/>
                    <scope line="348"/>
                    <declaration name="ks" type="KeyStore" line="351"/>
                    <scope line="352">
                        <scope line="353"/>
                        <scope line="356"/>
                        <scope line="359"/>
                    </scope>
                    <scope line="364"/>
                    <scope line="368"/>
                    <declaration name="kmf" type="KeyManagerFactory" line="371"/>
                    <scope line="372"/>
                    <scope line="375"/>
                </method>
            </class>
            <class name="TLS10Context" line="382">
                <extends class="ConservativeSSLContext"/>
            </class>
            <class name="TLS11Context" line="384">
                <extends class="SSLContextImpl"/>
                <declaration name="defaultServerSSLParams" type="SSLParameters" line="385"/>
                <declaration name="defaultClientSSLParams" type="SSLParameters" line="386"/>
                <declaration name="supportedSSLParams" type="SSLParameters" line="387"/>
                <scope line="388">
                    <scope line="389"/>
                    <scope line="396"/>
                </scope>
                <method name="getDefaultServerSSLParams" type="SSLParameters" line="404"/>
                <method name="getDefaultClientSSLParams" type="SSLParameters" line="407"/>
                <method name="getSupportedSSLParams" type="SSLParameters" line="410"/>
            </class>
            <class name="TLS12Context" line="414">
                <extends class="SSLContextImpl"/>
                <declaration name="defaultServerSSLParams" type="SSLParameters" line="415"/>
                <declaration name="defaultClientSSLParams" type="SSLParameters" line="416"/>
                <declaration name="supportedSSLParams" type="SSLParameters" line="417"/>
                <scope line="418">
                    <scope line="419"/>
                    <scope line="426"/>
                </scope>
                <method name="getDefaultServerSSLParams" type="SSLParameters" line="434"/>
                <method name="getDefaultClientSSLParams" type="SSLParameters" line="437"/>
                <method name="getSupportedSSLParams" type="SSLParameters" line="440"/>
            </class>
        </class>
        <class name="AbstractTrustManagerWrapper" line="445">
            <extends class="X509ExtendedTrustManager"/>
            <implements interface="X509TrustManager"/>
            <declaration name="tm" type="X509TrustManager" line="446"/>
            <method name="AbstractTrustManagerWrapper" type="constructor" line="447">
                <params>
                    <param name="tm" type="X509TrustManager"/>
                </params>
            </method>
            <method name="checkClientTrusted" type="void" line="450">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="453">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="getAcceptedIssuers" type="X509Certificate[]" line="456"/>
            <method name="checkClientTrusted" type="void" line="459">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="463">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkClientTrusted" type="void" line="467">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="471">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="checkAdditionalTrust" type="void" line="475">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                    <param name="isClient" type="boolean"/>
                </params>
                <scope line="476">
                    <declaration name="sslSocket" type="SSLSocket" line="477"/>
                    <declaration name="session" type="SSLSession" line="478"/>
                    <scope line="479"/>
                    <declaration name="identityAlg" type="String" line="482"/>
                    <scope line="483">
                        <declaration name="hostname" type="String" line="484"/>
                    </scope>
                    <declaration name="protocolVersion" type="ProtocolVersion" line="487"/>
                    <declaration name="constraints" type="AlgorithmConstraints" line="488"/>
                    <scope line="489">
                        <scope line="490">
                            <declaration name="extSession" type="ExtendedSSLSession" line="491"/>
                            <declaration name="peerSupportedSignAlgs" type="String[]" line="492"/>
                        </scope>
                        <scope line="495"/>
                    </scope>
                    <scope line="499"/>
                    <declaration name="checker" type="AlgorithmChecker" line="502"/>
                    <scope line="503">
                        <scope line="505">
                            <declaration name="cert" type="Certificate" line="506"/>
                        </scope>
                    </scope>
                    <scope line="510"/>
                </scope>
            </method>
            <method name="checkAdditionalTrust" type="void" line="515">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                    <param name="isClient" type="boolean"/>
                </params>
                <scope line="516">
                    <declaration name="session" type="SSLSession" line="517"/>
                    <scope line="518"/>
                    <declaration name="identityAlg" type="String" line="521"/>
                    <scope line="522">
                        <declaration name="hostname" type="String" line="523"/>
                    </scope>
                    <declaration name="protocolVersion" type="ProtocolVersion" line="526"/>
                    <declaration name="constraints" type="AlgorithmConstraints" line="527"/>
                    <scope line="528">
                        <scope line="529">
                            <declaration name="extSession" type="ExtendedSSLSession" line="530"/>
                            <declaration name="peerSupportedSignAlgs" type="String[]" line="531"/>
                        </scope>
                        <scope line="534"/>
                    </scope>
                    <scope line="538"/>
                    <declaration name="checker" type="AlgorithmChecker" line="541"/>
                    <scope line="542">
                        <scope line="544">
                            <declaration name="cert" type="Certificate" line="545"/>
                        </scope>
                    </scope>
                    <scope line="549"/>
                </scope>
            </method>
        </class>
        <class name="DummyX509TrustManager" line="555">
            <extends class="X509ExtendedTrustManager"/>
            <implements interface="X509TrustManager"/>
            <declaration name="INSTANCE" type="X509TrustManager" line="556"/>
            <method name="DummyX509TrustManager" type="constructor" line="557"/>
            <method name="checkClientTrusted" type="void" line="559">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="562">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="getAcceptedIssuers" type="X509Certificate[]" line="565"/>
            <method name="checkClientTrusted" type="void" line="568">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="571">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkClientTrusted" type="void" line="574">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="577">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
        </class>
        <class name="AbstractKeyManagerWrapper" line="581">
            <extends class="X509ExtendedKeyManager"/>
            <declaration name="km" type="X509KeyManager" line="582"/>
            <method name="AbstractKeyManagerWrapper" type="constructor" line="583">
                <params>
                    <param name="km" type="X509KeyManager"/>
                </params>
            </method>
            <method name="getClientAliases" type="String[]" line="586">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseClientAlias" type="String" line="589">
                <params>
                    <param name="keyType" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="getServerAliases" type="String[]" line="592">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseServerAlias" type="String" line="595">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="getCertificateChain" type="X509Certificate[]" line="598">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="601">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
        </class>
        <class name="DummyX509KeyManager" line="605">
            <extends class="X509ExtendedKeyManager"/>
            <declaration name="INSTANCE" type="X509ExtendedKeyManager" line="606"/>
            <method name="DummyX509KeyManager" type="constructor" line="607"/>
            <method name="getClientAliases" type="String[]" line="609">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseClientAlias" type="String" line="612">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="chooseEngineClientAlias" type="String" line="615">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="getServerAliases" type="String[]" line="618">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseServerAlias" type="String" line="621">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="chooseEngineServerAlias" type="String" line="624">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <javadoc line="627">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user&apos;s certificate first
                      and the root certificate authority last)                    
                </return>
            </javadoc>
            <method name="getCertificateChain" type="X509Certificate[]" line="633">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="636">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
        </class>
    </source>