<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.net.Socket"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.Certificate"/>
        <import package="javax.net.ssl"/>
        <import package="sun.security.provider.certpath.AlgorithmChecker"/>
        <class name="SSLContextImpl" line="40">
            <extends class="SSLContextSpi"/>
            <comment line="55">
                The default algrithm constraints                
            </comment>
            <comment line="59">
                supported and default protocols                
            </comment>
            <comment line="64">
                supported and default cipher suites                
            </comment>
            <comment line="240">
                Get suported ProtoclList.                
            </comment>
            <comment line="250">
                Get default ProtoclList.                
            </comment>
            <comment line="269">
                Get suported CipherSuiteList.                
            </comment>
            <comment line="282">
                Get default CipherSuiteList.                
            </comment>
            <comment line="314">
                Return the list of all available CipherSuites with a priority of
                 minPriority or above.                
            </comment>
            <comment line="379">
                The SSLContext implementation for TLSSSL algorithm
                
                 SSLTLS protocols specify the forward compatibility and version
                 roll-back attack protections, however, a number of SSLTLS server
                 vendors did not implement these aspects properly, and some current
                 SSLTLS servers may refuse to talk to a TLS 1.1 or later client.
                
                 Considering above interoperability issues, SunJSSE will not set
                 TLS 1.1 and TLS 1.2 as the enabled protocols for client by default.
                
                 For SSLTLS servers, there is no such interoperability issues as
                 SSLTLS clients. In SunJSSE, TLS 1.1 or later version will be the
                 enabled protocols for server by default.
                
                 We may change the behavior when popular TLSSSL vendors support TLS
                 forward compatibility properly.
                
                 SSLv2Hello is no longer necessary.  This interoperability option was
                 put in place in the late 90&apos;s when SSLv3TLS1.0 were relatively new
                 and there were a fair number of SSLv2-only servers deployed.  Because
                 of the security issues in SSLv2, it is rarely (if ever) used, as
                 deployments should now be using SSLv3 and TLSv1.
                
                 Considering the issues of SSLv2Hello, we should not enable SSLv2Hello
                 by default. Applications still can use it by enabling SSLv2Hello with
                 the series of setEnabledProtocols APIs.                
            </comment>
            <comment line="408">
                The conservative SSLContext implementation for TLS, SSL, SSLv3 and
                 TLS10 algorithm.
                
                 This is a super class of DefaultSSLContext and TLS10Context.
                
                 @see SSLContext                
            </comment>
            <comment line="471">
                The SSLContext implementation for default algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="630">
                The SSLContext implementation for TLS, SSL, SSLv3 and TLS10 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="639">
                The SSLContext implementation for TLS11 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="701">
                The SSLContext implementation for TLS12 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="947">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for client SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="961">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for server SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="975">
                Return an array of issuer certificates which are trusted
                 for authenticating peers.                
            </comment>
            <comment line="1050">
                Inherit chooseEngineClientAlias() and chooseEngineServerAlias() from                
            </comment>
            <comment line="1051">
                X509ExtendedKeymanager. It defines them to return null;                
            </comment>
            <comment line="1065">
                Get the matching aliases for authenticating the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1074">
                Choose an alias to authenticate the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1084">
                Choose an alias to authenticate the client side of an
                 engine given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1094">
                Get the matching aliases for authenticating the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1103">
                Choose an alias to authenticate the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1113">
                Choose an alias to authenticate the server side of an engine
                 given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1135">
                Returns the key associated with the given alias, using the given
                 password to recover it.
                
                 @param alias the alias name
                
                 @return the requested key                
            </comment>
            <declaration name="debug" type="Debug" line="42"/>
            <declaration name="ephemeralKeyManager" type="EphemeralKeyManager" line="44"/>
            <declaration name="clientCache" type="SSLSessionContextImpl" line="45"/>
            <declaration name="serverCache" type="SSLSessionContextImpl" line="46"/>
            <declaration name="isInitialized" type="boolean" line="48"/>
            <declaration name="keyManager" type="X509ExtendedKeyManager" line="50"/>
            <declaration name="trustManager" type="X509TrustManager" line="51"/>
            <declaration name="secureRandom" type="SecureRandom" line="52"/>
            <declaration name="defaultAlgorithmConstraints" type="AlgorithmConstraints" line="55"/>
            <declaration name="defaultServerProtocolList" type="ProtocolList" line="59"/>
            <declaration name="defaultClientProtocolList" type="ProtocolList" line="60"/>
            <declaration name="supportedProtocolList" type="ProtocolList" line="61"/>
            <declaration name="defaultServerCipherSuiteList" type="CipherSuiteList" line="64"/>
            <declaration name="defaultClientCipherSuiteList" type="CipherSuiteList" line="65"/>
            <declaration name="supportedCipherSuiteList" type="CipherSuiteList" line="66"/>
            <method name="SSLContextImpl" type="constructor" line="68"/>
            <method name="engineInit" type="void" line="75">
                <params>
                    <param name="km" type="KeyManager[]"/>
                    <param name="tm" type="TrustManager[]"/>
                    <param name="sr" type="SecureRandom"/>
                </params>
                <comment line="86">
                    eat                    
                </comment>
                <comment line="103">
                    The initial delay of seeding the random number generator
                     could be long enough to cause the initial handshake on our
                     first connection to timeout and fail. Make sure it is
                     primed and ready by getting some initial output from it.                    
                </comment>
                <scope line="79">
                    <scope line="80">
                        <declaration name="tmf" type="TrustManagerFactory" line="81"/>
                    </scope>
                    <scope line="85"/>
                </scope>
                <scope line="91"/>
                <scope line="93">
                    <scope line="95"/>
                </scope>
                <scope line="109"/>
                <scope line="113"/>
            </method>
            <method name="chooseTrustManager" type="X509TrustManager" line="120">
                <params>
                    <param name="tm" type="TrustManager[]"/>
                </params>
                <comment line="121">
                    We only use the first instance of X509TrustManager passed to us.                    
                </comment>
                <comment line="139">
                    nothing found, return a dummy X509TrustManager.                    
                </comment>
                <scope line="122">
                    <scope line="123">
                        <scope line="125"/>
                        <scope line="130"/>
                        <scope line="132"/>
                    </scope>
                </scope>
            </method>
            <method name="chooseKeyManager" type="X509ExtendedKeyManager" line="144">
                <params>
                    <param name="kms" type="KeyManager[]"/>
                </params>
                <comment line="151">
                    In FIPS mode, require that one of SunJSSE&apos;s own keymanagers                    
                </comment>
                <comment line="152">
                    is used. Otherwise, we cannot be sure that only keys from                    
                </comment>
                <comment line="153">
                    the FIPS token are used.                    
                </comment>
                <comment line="158">
                    throw exception, we don&apos;t want to silently use the                    
                </comment>
                <comment line="159">
                    dummy keymanager without telling the user.                    
                </comment>
                <comment line="176">
                    nothing found, return a dummy X509ExtendedKeyManager                    
                </comment>
                <scope line="145">
                    <declaration name="km" type="KeyManager" line="146"/>
                    <scope line="147"/>
                    <scope line="150">
                        <scope line="155"/>
                        <scope line="157"/>
                    </scope>
                    <scope line="164"/>
                    <scope line="167"/>
                </scope>
            </method>
            <method name="engineGetSocketFactory" type="SSLSocketFactory" line="180">
                <scope line="181"/>
            </method>
            <method name="engineGetServerSocketFactory" type="SSLServerSocketFactory" line="188">
                <scope line="189"/>
            </method>
            <method name="engineCreateSSLEngine" type="SSLEngine" line="195">
                <scope line="196"/>
            </method>
            <method name="engineCreateSSLEngine" type="SSLEngine" line="203">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="204"/>
            </method>
            <method name="engineGetClientSessionContext" type="SSLSessionContext" line="211"/>
            <method name="engineGetServerSessionContext" type="SSLSessionContext" line="215"/>
            <method name="getSecureRandom" type="SecureRandom" line="219"/>
            <method name="getX509KeyManager" type="X509ExtendedKeyManager" line="223"/>
            <method name="getX509TrustManager" type="X509TrustManager" line="227"/>
            <method name="getEphemeralKeyManager" type="EphemeralKeyManager" line="231"/>
            <method name="getDefaultServerSSLParams" type="SSLParameters" line="235"/>
            <method name="getDefaultClientSSLParams" type="SSLParameters" line="236"/>
            <method name="getSupportedSSLParams" type="SSLParameters" line="237"/>
            <method name="getSuportedProtocolList" type="ProtocolList" line="240">
                <scope line="241"/>
            </method>
            <method name="getDefaultProtocolList" type="ProtocolList" line="250">
                <params>
                    <param name="roleIsServer" type="boolean"/>
                </params>
                <scope line="251">
                    <scope line="252"/>
                </scope>
                <scope line="258">
                    <scope line="259"/>
                </scope>
            </method>
            <method name="getSuportedCipherSuiteList" type="CipherSuiteList" line="269">
                <comment line="270">
                    Clear cache of available ciphersuites.                    
                </comment>
                <scope line="273"/>
            </method>
            <method name="getDefaultCipherSuiteList" type="CipherSuiteList" line="282">
                <params>
                    <param name="roleIsServer" type="boolean"/>
                </params>
                <comment line="283">
                    Clear cache of available ciphersuites.                    
                </comment>
                <scope line="286">
                    <scope line="287"/>
                </scope>
                <scope line="293">
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="303">
                Return whether a protocol list is the original default enabled
                  protocols.  See: SSLSocket/SSLEngine.setEnabledProtocols()                
            </javadoc>
            <method name="isDefaultProtocolList" type="boolean" line="307">
                <params>
                    <param name="protocols" type="ProtocolList"/>
                </params>
            </method>
            <method name="getApplicableCipherSuiteList" type="CipherSuiteList" line="318">
                <params>
                    <param name="protocols" type="ProtocolList"/>
                    <param name="onlyEnabled" type="boolean"/>
                </params>
                <declaration name="minPriority" type="int" line="320"/>
                <scope line="321"/>
                <declaration name="allowedCipherSuites" type="Collection&lt;CipherSuite&gt;" line="325"/>
                <declaration name="suites" type="ArrayList&lt;CipherSuite&gt;" line="328"/>
                <scope line="330">
                    <scope line="331">
                        <scope line="332"/>
                        <scope line="338">
                            <scope line="341"/>
                        </scope>
                        <scope line="345">
                            <scope line="346"/>
                            <scope line="349"/>
                            <scope line="352"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="363">
                Clear cache of available ciphersuites. If we support all ciphers
                  internally, there is no need to clear the cache and calling this
                  method has no effect.                
            </javadoc>
            <method name="clearAvailableCache" type="void" line="368">
                <scope line="369"/>
            </method>
            <class name="ConservativeSSLContext" line="415">
                <extends class="SSLContextImpl"/>
                <comment line="417">
                    parameters                    
                </comment>
                <comment line="636">
                    use the default constructor and methods                    
                </comment>
                <comment line="645">
                    parameters                    
                </comment>
                <comment line="707">
                    parameters                    
                </comment>
                <declaration name="defaultServerSSLParams" type="SSLParameters" line="417"/>
                <declaration name="defaultClientSSLParams" type="SSLParameters" line="418"/>
                <declaration name="supportedSSLParams" type="SSLParameters" line="419"/>
                <scope line="421">
                    <scope line="422"/>
                    <scope line="437"/>
                </scope>
                <method name="getDefaultServerSSLParams" type="SSLParameters" line="457"/>
                <method name="getDefaultClientSSLParams" type="SSLParameters" line="461"/>
                <method name="getSupportedSSLParams" type="SSLParameters" line="465"/>
            </class>
            <class name="DefaultSSLContext" line="475">
                <extends class="ConservativeSSLContext"/>
                <comment line="417">
                    parameters                    
                </comment>
                <comment line="636">
                    use the default constructor and methods                    
                </comment>
                <comment line="645">
                    parameters                    
                </comment>
                <comment line="707">
                    parameters                    
                </comment>
                <declaration name="NONE" type="String" line="476"/>
                <declaration name="P11KEYSTORE" type="String" line="477"/>
                <declaration name="defaultImpl" type="SSLContextImpl" line="479"/>
                <declaration name="defaultTrustManagers" type="TrustManager[]" line="481"/>
                <declaration name="defaultKeyManagers" type="KeyManager[]" line="482"/>
                <method name="DefaultSSLContext" type="constructor" line="484">
                    <scope line="485"/>
                    <scope line="488">
                        <scope line="489"/>
                    </scope>
                    <scope line="495"/>
                </method>
                <method name="engineInit" type="void" line="501">
                    <params>
                        <param name="km" type="KeyManager[]"/>
                        <param name="tm" type="TrustManager[]"/>
                        <param name="sr" type="SecureRandom"/>
                    </params>
                </method>
                <method name="getDefaultImpl" type="SSLContextImpl" line="506">
                    <scope line="507"/>
                </method>
                <method name="getDefaultTrustManager" type="TrustManager[]" line="514">
                    <scope line="515"/>
                    <declaration name="ks" type="KeyStore" line="519"/>
                    <declaration name="tmf" type="TrustManagerFactory" line="522"/>
                </method>
                <method name="getDefaultKeyManager" type="KeyManager[]" line="530">
                    <comment line="585">
                        Try to initialize key store.                        
                    </comment>
                    <comment line="600">
                        if defaultKeyStore is NONE, fs will be null                        
                    </comment>
                    <comment line="608">
                        Try to initialize key manager.                        
                    </comment>
                    <comment line="619">
                        do not pass key passwd if using token                        
                    </comment>
                    <scope line="531"/>
                    <declaration name="props" type="Map&lt;String,String&gt;" line="535"/>
                    <anonymous_class line="537">
                        <method name="run" type="Object" line="538"/>
                    </anonymous_class>
                    <declaration name="defaultKeyStore" type="String" line="552"/>
                    <declaration name="defaultKeyStoreType" type="String" line="553"/>
                    <declaration name="defaultKeyStoreProvider" type="String" line="554"/>
                    <scope line="555"/>
                    <scope line="564"/>
                    <declaration name="fs" type="FileInputStream" line="569"/>
                    <scope line="570">
                        <anonymous_class line="572">
                            <method name="run" type="FileInputStream" line="573"/>
                        </anonymous_class>
                    </scope>
                    <declaration name="defaultKeyStorePassword" type="String" line="579"/>
                    <declaration name="passwd" type="char[]" line="580"/>
                    <scope line="581"/>
                    <declaration name="ks" type="KeyStore" line="588"/>
                    <scope line="589">
                        <scope line="590"/>
                        <scope line="593"/>
                        <scope line="595"/>
                    </scope>
                    <scope line="603"/>
                    <scope line="611"/>
                    <declaration name="kmf" type="KeyManagerFactory" line="615"/>
                    <scope line="618"/>
                    <scope line="620"/>
                </method>
            </class>
            <class name="TLS10Context" line="634">
                <extends class="ConservativeSSLContext"/>
                <comment line="417">
                    parameters                    
                </comment>
                <comment line="636">
                    use the default constructor and methods                    
                </comment>
                <comment line="645">
                    parameters                    
                </comment>
                <comment line="707">
                    parameters                    
                </comment>
            </class>
            <class name="TLS11Context" line="643">
                <extends class="SSLContextImpl"/>
                <comment line="417">
                    parameters                    
                </comment>
                <comment line="636">
                    use the default constructor and methods                    
                </comment>
                <comment line="645">
                    parameters                    
                </comment>
                <comment line="707">
                    parameters                    
                </comment>
                <declaration name="defaultServerSSLParams" type="SSLParameters" line="645"/>
                <declaration name="defaultClientSSLParams" type="SSLParameters" line="646"/>
                <declaration name="supportedSSLParams" type="SSLParameters" line="647"/>
                <scope line="649">
                    <scope line="650"/>
                    <scope line="666"/>
                </scope>
                <method name="getDefaultServerSSLParams" type="SSLParameters" line="687"/>
                <method name="getDefaultClientSSLParams" type="SSLParameters" line="691"/>
                <method name="getSupportedSSLParams" type="SSLParameters" line="695"/>
            </class>
            <class name="TLS12Context" line="705">
                <extends class="SSLContextImpl"/>
                <comment line="417">
                    parameters                    
                </comment>
                <comment line="636">
                    use the default constructor and methods                    
                </comment>
                <comment line="645">
                    parameters                    
                </comment>
                <comment line="707">
                    parameters                    
                </comment>
                <declaration name="defaultServerSSLParams" type="SSLParameters" line="707"/>
                <declaration name="defaultClientSSLParams" type="SSLParameters" line="708"/>
                <declaration name="supportedSSLParams" type="SSLParameters" line="709"/>
                <scope line="711">
                    <scope line="712"/>
                    <scope line="729"/>
                </scope>
                <method name="getDefaultServerSSLParams" type="SSLParameters" line="751"/>
                <method name="getDefaultClientSSLParams" type="SSLParameters" line="755"/>
                <method name="getSupportedSSLParams" type="SSLParameters" line="759"/>
            </class>
        </class>
        <class name="AbstractTrustManagerWrapper" line="767">
            <extends class="X509ExtendedTrustManager"/>
            <comment line="55">
                The default algrithm constraints                
            </comment>
            <comment line="59">
                supported and default protocols                
            </comment>
            <comment line="64">
                supported and default cipher suites                
            </comment>
            <comment line="240">
                Get suported ProtoclList.                
            </comment>
            <comment line="250">
                Get default ProtoclList.                
            </comment>
            <comment line="269">
                Get suported CipherSuiteList.                
            </comment>
            <comment line="282">
                Get default CipherSuiteList.                
            </comment>
            <comment line="314">
                Return the list of all available CipherSuites with a priority of
                 minPriority or above.                
            </comment>
            <comment line="379">
                The SSLContext implementation for TLSSSL algorithm
                
                 SSLTLS protocols specify the forward compatibility and version
                 roll-back attack protections, however, a number of SSLTLS server
                 vendors did not implement these aspects properly, and some current
                 SSLTLS servers may refuse to talk to a TLS 1.1 or later client.
                
                 Considering above interoperability issues, SunJSSE will not set
                 TLS 1.1 and TLS 1.2 as the enabled protocols for client by default.
                
                 For SSLTLS servers, there is no such interoperability issues as
                 SSLTLS clients. In SunJSSE, TLS 1.1 or later version will be the
                 enabled protocols for server by default.
                
                 We may change the behavior when popular TLSSSL vendors support TLS
                 forward compatibility properly.
                
                 SSLv2Hello is no longer necessary.  This interoperability option was
                 put in place in the late 90&apos;s when SSLv3TLS1.0 were relatively new
                 and there were a fair number of SSLv2-only servers deployed.  Because
                 of the security issues in SSLv2, it is rarely (if ever) used, as
                 deployments should now be using SSLv3 and TLSv1.
                
                 Considering the issues of SSLv2Hello, we should not enable SSLv2Hello
                 by default. Applications still can use it by enabling SSLv2Hello with
                 the series of setEnabledProtocols APIs.                
            </comment>
            <comment line="408">
                The conservative SSLContext implementation for TLS, SSL, SSLv3 and
                 TLS10 algorithm.
                
                 This is a super class of DefaultSSLContext and TLS10Context.
                
                 @see SSLContext                
            </comment>
            <comment line="471">
                The SSLContext implementation for default algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="630">
                The SSLContext implementation for TLS, SSL, SSLv3 and TLS10 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="639">
                The SSLContext implementation for TLS11 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="701">
                The SSLContext implementation for TLS12 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="947">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for client SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="961">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for server SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="975">
                Return an array of issuer certificates which are trusted
                 for authenticating peers.                
            </comment>
            <comment line="1050">
                Inherit chooseEngineClientAlias() and chooseEngineServerAlias() from                
            </comment>
            <comment line="1051">
                X509ExtendedKeymanager. It defines them to return null;                
            </comment>
            <comment line="1065">
                Get the matching aliases for authenticating the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1074">
                Choose an alias to authenticate the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1084">
                Choose an alias to authenticate the client side of an
                 engine given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1094">
                Get the matching aliases for authenticating the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1103">
                Choose an alias to authenticate the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1113">
                Choose an alias to authenticate the server side of an engine
                 given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1135">
                Returns the key associated with the given alias, using the given
                 password to recover it.
                
                 @param alias the alias name
                
                 @return the requested key                
            </comment>
            <implements interface="X509TrustManager"/>
            <declaration name="tm" type="X509TrustManager" line="770"/>
            <method name="AbstractTrustManagerWrapper" type="constructor" line="772">
                <params>
                    <param name="tm" type="X509TrustManager"/>
                </params>
            </method>
            <method name="checkClientTrusted" type="void" line="778">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="784">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="getAcceptedIssuers" type="X509Certificate[]" line="789"/>
            <method name="checkClientTrusted" type="void" line="795">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="802">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkClientTrusted" type="void" line="809">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="816">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="checkAdditionalTrust" type="void" line="822">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                    <param name="isClient" type="boolean"/>
                </params>
                <comment line="832">
                    check endpoint identity                    
                </comment>
                <comment line="841">
                    try the best to check the algorithm constraints                    
                </comment>
                <comment line="866">
                    a forward checker, need to check from trust to target                    
                </comment>
                <comment line="869">
                    We don&apos;t care about the unresolved critical extensions.                    
                </comment>
                <scope line="824">
                    <declaration name="sslSocket" type="SSLSocket" line="826"/>
                    <declaration name="session" type="SSLSession" line="827"/>
                    <scope line="828"/>
                    <declaration name="identityAlg" type="String" line="833"/>
                    <scope line="835">
                        <declaration name="hostname" type="String" line="836"/>
                    </scope>
                    <declaration name="protocolVersion" type="ProtocolVersion" line="842"/>
                    <declaration name="constraints" type="AlgorithmConstraints" line="844"/>
                    <scope line="845">
                        <scope line="846">
                            <declaration name="extSession" type="ExtendedSSLSession" line="847"/>
                            <declaration name="peerSupportedSignAlgs" type="String[]" line="849"/>
                        </scope>
                        <scope line="854"/>
                    </scope>
                    <scope line="858"/>
                    <declaration name="checker" type="AlgorithmChecker" line="862"/>
                    <scope line="863">
                        <scope line="867">
                            <declaration name="cert" type="Certificate" line="868"/>
                        </scope>
                    </scope>
                    <scope line="872"/>
                </scope>
            </method>
            <method name="checkAdditionalTrust" type="void" line="880">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                    <param name="isClient" type="boolean"/>
                </params>
                <comment line="887">
                    check endpoint identity                    
                </comment>
                <comment line="896">
                    try the best to check the algorithm constraints                    
                </comment>
                <comment line="921">
                    A forward checker, need to check from trust to target                    
                </comment>
                <comment line="924">
                    We don&apos;t care about the unresolved critical extensions.                    
                </comment>
                <scope line="881">
                    <declaration name="session" type="SSLSession" line="882"/>
                    <scope line="883"/>
                    <declaration name="identityAlg" type="String" line="888"/>
                    <scope line="890">
                        <declaration name="hostname" type="String" line="891"/>
                    </scope>
                    <declaration name="protocolVersion" type="ProtocolVersion" line="897"/>
                    <declaration name="constraints" type="AlgorithmConstraints" line="899"/>
                    <scope line="900">
                        <scope line="901">
                            <declaration name="extSession" type="ExtendedSSLSession" line="902"/>
                            <declaration name="peerSupportedSignAlgs" type="String[]" line="904"/>
                        </scope>
                        <scope line="909"/>
                    </scope>
                    <scope line="913"/>
                    <declaration name="checker" type="AlgorithmChecker" line="917"/>
                    <scope line="918">
                        <scope line="922">
                            <declaration name="cert" type="Certificate" line="923"/>
                        </scope>
                    </scope>
                    <scope line="927"/>
                </scope>
            </method>
        </class>
        <class name="DummyX509TrustManager" line="937">
            <extends class="X509ExtendedTrustManager"/>
            <comment line="55">
                The default algrithm constraints                
            </comment>
            <comment line="59">
                supported and default protocols                
            </comment>
            <comment line="64">
                supported and default cipher suites                
            </comment>
            <comment line="240">
                Get suported ProtoclList.                
            </comment>
            <comment line="250">
                Get default ProtoclList.                
            </comment>
            <comment line="269">
                Get suported CipherSuiteList.                
            </comment>
            <comment line="282">
                Get default CipherSuiteList.                
            </comment>
            <comment line="314">
                Return the list of all available CipherSuites with a priority of
                 minPriority or above.                
            </comment>
            <comment line="379">
                The SSLContext implementation for TLSSSL algorithm
                
                 SSLTLS protocols specify the forward compatibility and version
                 roll-back attack protections, however, a number of SSLTLS server
                 vendors did not implement these aspects properly, and some current
                 SSLTLS servers may refuse to talk to a TLS 1.1 or later client.
                
                 Considering above interoperability issues, SunJSSE will not set
                 TLS 1.1 and TLS 1.2 as the enabled protocols for client by default.
                
                 For SSLTLS servers, there is no such interoperability issues as
                 SSLTLS clients. In SunJSSE, TLS 1.1 or later version will be the
                 enabled protocols for server by default.
                
                 We may change the behavior when popular TLSSSL vendors support TLS
                 forward compatibility properly.
                
                 SSLv2Hello is no longer necessary.  This interoperability option was
                 put in place in the late 90&apos;s when SSLv3TLS1.0 were relatively new
                 and there were a fair number of SSLv2-only servers deployed.  Because
                 of the security issues in SSLv2, it is rarely (if ever) used, as
                 deployments should now be using SSLv3 and TLSv1.
                
                 Considering the issues of SSLv2Hello, we should not enable SSLv2Hello
                 by default. Applications still can use it by enabling SSLv2Hello with
                 the series of setEnabledProtocols APIs.                
            </comment>
            <comment line="408">
                The conservative SSLContext implementation for TLS, SSL, SSLv3 and
                 TLS10 algorithm.
                
                 This is a super class of DefaultSSLContext and TLS10Context.
                
                 @see SSLContext                
            </comment>
            <comment line="471">
                The SSLContext implementation for default algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="630">
                The SSLContext implementation for TLS, SSL, SSLv3 and TLS10 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="639">
                The SSLContext implementation for TLS11 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="701">
                The SSLContext implementation for TLS12 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="947">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for client SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="961">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for server SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="975">
                Return an array of issuer certificates which are trusted
                 for authenticating peers.                
            </comment>
            <comment line="1050">
                Inherit chooseEngineClientAlias() and chooseEngineServerAlias() from                
            </comment>
            <comment line="1051">
                X509ExtendedKeymanager. It defines them to return null;                
            </comment>
            <comment line="1065">
                Get the matching aliases for authenticating the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1074">
                Choose an alias to authenticate the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1084">
                Choose an alias to authenticate the client side of an
                 engine given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1094">
                Get the matching aliases for authenticating the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1103">
                Choose an alias to authenticate the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1113">
                Choose an alias to authenticate the server side of an engine
                 given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1135">
                Returns the key associated with the given alias, using the given
                 password to recover it.
                
                 @param alias the alias name
                
                 @return the requested key                
            </comment>
            <implements interface="X509TrustManager"/>
            <declaration name="INSTANCE" type="X509TrustManager" line="940"/>
            <method name="DummyX509TrustManager" type="constructor" line="942">
                <comment line="943">
                    empty                    
                </comment>
            </method>
            <method name="checkClientTrusted" type="void" line="955">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="969">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
            </method>
            <method name="getAcceptedIssuers" type="X509Certificate[]" line="979"/>
            <method name="checkClientTrusted" type="void" line="985">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="992">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="checkClientTrusted" type="void" line="999">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="checkServerTrusted" type="void" line="1006">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="authType" type="String"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
        </class>
        <class name="AbstractKeyManagerWrapper" line="1015">
            <extends class="X509ExtendedKeyManager"/>
            <comment line="55">
                The default algrithm constraints                
            </comment>
            <comment line="59">
                supported and default protocols                
            </comment>
            <comment line="64">
                supported and default cipher suites                
            </comment>
            <comment line="240">
                Get suported ProtoclList.                
            </comment>
            <comment line="250">
                Get default ProtoclList.                
            </comment>
            <comment line="269">
                Get suported CipherSuiteList.                
            </comment>
            <comment line="282">
                Get default CipherSuiteList.                
            </comment>
            <comment line="314">
                Return the list of all available CipherSuites with a priority of
                 minPriority or above.                
            </comment>
            <comment line="379">
                The SSLContext implementation for TLSSSL algorithm
                
                 SSLTLS protocols specify the forward compatibility and version
                 roll-back attack protections, however, a number of SSLTLS server
                 vendors did not implement these aspects properly, and some current
                 SSLTLS servers may refuse to talk to a TLS 1.1 or later client.
                
                 Considering above interoperability issues, SunJSSE will not set
                 TLS 1.1 and TLS 1.2 as the enabled protocols for client by default.
                
                 For SSLTLS servers, there is no such interoperability issues as
                 SSLTLS clients. In SunJSSE, TLS 1.1 or later version will be the
                 enabled protocols for server by default.
                
                 We may change the behavior when popular TLSSSL vendors support TLS
                 forward compatibility properly.
                
                 SSLv2Hello is no longer necessary.  This interoperability option was
                 put in place in the late 90&apos;s when SSLv3TLS1.0 were relatively new
                 and there were a fair number of SSLv2-only servers deployed.  Because
                 of the security issues in SSLv2, it is rarely (if ever) used, as
                 deployments should now be using SSLv3 and TLSv1.
                
                 Considering the issues of SSLv2Hello, we should not enable SSLv2Hello
                 by default. Applications still can use it by enabling SSLv2Hello with
                 the series of setEnabledProtocols APIs.                
            </comment>
            <comment line="408">
                The conservative SSLContext implementation for TLS, SSL, SSLv3 and
                 TLS10 algorithm.
                
                 This is a super class of DefaultSSLContext and TLS10Context.
                
                 @see SSLContext                
            </comment>
            <comment line="471">
                The SSLContext implementation for default algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="630">
                The SSLContext implementation for TLS, SSL, SSLv3 and TLS10 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="639">
                The SSLContext implementation for TLS11 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="701">
                The SSLContext implementation for TLS12 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="947">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for client SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="961">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for server SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="975">
                Return an array of issuer certificates which are trusted
                 for authenticating peers.                
            </comment>
            <comment line="1050">
                Inherit chooseEngineClientAlias() and chooseEngineServerAlias() from                
            </comment>
            <comment line="1051">
                X509ExtendedKeymanager. It defines them to return null;                
            </comment>
            <comment line="1065">
                Get the matching aliases for authenticating the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1074">
                Choose an alias to authenticate the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1084">
                Choose an alias to authenticate the client side of an
                 engine given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1094">
                Get the matching aliases for authenticating the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1103">
                Choose an alias to authenticate the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1113">
                Choose an alias to authenticate the server side of an engine
                 given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1135">
                Returns the key associated with the given alias, using the given
                 password to recover it.
                
                 @param alias the alias name
                
                 @return the requested key                
            </comment>
            <declaration name="km" type="X509KeyManager" line="1017"/>
            <method name="AbstractKeyManagerWrapper" type="constructor" line="1019">
                <params>
                    <param name="km" type="X509KeyManager"/>
                </params>
            </method>
            <method name="getClientAliases" type="String[]" line="1023">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseClientAlias" type="String" line="1028">
                <params>
                    <param name="keyType" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="getServerAliases" type="String[]" line="1032">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseServerAlias" type="String" line="1037">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="getCertificateChain" type="X509Certificate[]" line="1041">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="1045">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
        </class>
        <class name="DummyX509KeyManager" line="1056">
            <extends class="X509ExtendedKeyManager"/>
            <comment line="55">
                The default algrithm constraints                
            </comment>
            <comment line="59">
                supported and default protocols                
            </comment>
            <comment line="64">
                supported and default cipher suites                
            </comment>
            <comment line="240">
                Get suported ProtoclList.                
            </comment>
            <comment line="250">
                Get default ProtoclList.                
            </comment>
            <comment line="269">
                Get suported CipherSuiteList.                
            </comment>
            <comment line="282">
                Get default CipherSuiteList.                
            </comment>
            <comment line="314">
                Return the list of all available CipherSuites with a priority of
                 minPriority or above.                
            </comment>
            <comment line="379">
                The SSLContext implementation for TLSSSL algorithm
                
                 SSLTLS protocols specify the forward compatibility and version
                 roll-back attack protections, however, a number of SSLTLS server
                 vendors did not implement these aspects properly, and some current
                 SSLTLS servers may refuse to talk to a TLS 1.1 or later client.
                
                 Considering above interoperability issues, SunJSSE will not set
                 TLS 1.1 and TLS 1.2 as the enabled protocols for client by default.
                
                 For SSLTLS servers, there is no such interoperability issues as
                 SSLTLS clients. In SunJSSE, TLS 1.1 or later version will be the
                 enabled protocols for server by default.
                
                 We may change the behavior when popular TLSSSL vendors support TLS
                 forward compatibility properly.
                
                 SSLv2Hello is no longer necessary.  This interoperability option was
                 put in place in the late 90&apos;s when SSLv3TLS1.0 were relatively new
                 and there were a fair number of SSLv2-only servers deployed.  Because
                 of the security issues in SSLv2, it is rarely (if ever) used, as
                 deployments should now be using SSLv3 and TLSv1.
                
                 Considering the issues of SSLv2Hello, we should not enable SSLv2Hello
                 by default. Applications still can use it by enabling SSLv2Hello with
                 the series of setEnabledProtocols APIs.                
            </comment>
            <comment line="408">
                The conservative SSLContext implementation for TLS, SSL, SSLv3 and
                 TLS10 algorithm.
                
                 This is a super class of DefaultSSLContext and TLS10Context.
                
                 @see SSLContext                
            </comment>
            <comment line="471">
                The SSLContext implementation for default algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="630">
                The SSLContext implementation for TLS, SSL, SSLv3 and TLS10 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="639">
                The SSLContext implementation for TLS11 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="701">
                The SSLContext implementation for TLS12 algorithm
                
                 @see SSLContext                
            </comment>
            <comment line="947">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for client SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="961">
                Given the partial or complete certificate chain
                 provided by the peer, build a certificate path
                 to a trusted root and return if it can be
                 validated and is trusted for server SSL authentication.
                 If not, it throws an exception.                
            </comment>
            <comment line="975">
                Return an array of issuer certificates which are trusted
                 for authenticating peers.                
            </comment>
            <comment line="1050">
                Inherit chooseEngineClientAlias() and chooseEngineServerAlias() from                
            </comment>
            <comment line="1051">
                X509ExtendedKeymanager. It defines them to return null;                
            </comment>
            <comment line="1065">
                Get the matching aliases for authenticating the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1074">
                Choose an alias to authenticate the client side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1084">
                Choose an alias to authenticate the client side of an
                 engine given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1094">
                Get the matching aliases for authenticating the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1103">
                Choose an alias to authenticate the server side of a secure
                 socket given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1113">
                Choose an alias to authenticate the server side of an engine
                 given the public key type and the list of
                 certificate issuer authorities recognized by the peer (if any).                
            </comment>
            <comment line="1135">
                Returns the key associated with the given alias, using the given
                 password to recover it.
                
                 @param alias the alias name
                
                 @return the requested key                
            </comment>
            <declaration name="INSTANCE" type="X509ExtendedKeyManager" line="1058"/>
            <method name="DummyX509KeyManager" type="constructor" line="1060">
                <comment line="1061">
                    empty                    
                </comment>
            </method>
            <method name="getClientAliases" type="String[]" line="1069">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseClientAlias" type="String" line="1079">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="chooseEngineClientAlias" type="String" line="1089">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <method name="getServerAliases" type="String[]" line="1098">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseServerAlias" type="String" line="1108">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="chooseEngineServerAlias" type="String" line="1118">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="SSLEngine"/>
                </params>
            </method>
            <javadoc line="1122">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last)                    
                </return>
            </javadoc>
            <method name="getCertificateChain" type="X509Certificate[]" line="1130">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="1142">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
        </class>
    </source>