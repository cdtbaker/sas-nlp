<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.nio"/>
        <class name="ByteBufferInputStream" line="4">
            <extends class="InputStream"/>
            <javadoc line="4">
                A simple InputStream which uses ByteBuffers as it&apos;s backing store.
                  &lt;P&gt;
                  The only IOException should come if the InputStream has been closed.
                  All other IOException should not occur because all the data is local.
                  Data reads on an exhausted ByteBuffer returns a -1.                
                <author>
                    Brad Wetmore                    
                </author>
            </javadoc>
            <declaration name="bb" type="ByteBuffer" line="13"/>
            <method name="ByteBufferInputStream" type="constructor" line="14">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="17">
                Returns a byte from the ByteBuffer.
                  Increments position().                
            </javadoc>
            <method name="read" type="int" line="21">
                <scope line="22"/>
                <scope line="25"/>
            </method>
            <javadoc line="30">
                Returns a byte array from the ByteBuffer.
                  Increments position().                
            </javadoc>
            <method name="read" type="int" line="34">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="35"/>
            </method>
            <javadoc line="40">
                Returns a byte array from the ByteBuffer.
                  Increments position().                
            </javadoc>
            <method name="read" type="int" line="44">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="45"/>
                <scope line="48"/>
                <scope line="51"/>
                <scope line="54"/>
                <declaration name="length" type="int" line="57"/>
                <scope line="58"/>
            </method>
            <javadoc line="64">
                Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from this input
                  stream.                
            </javadoc>
            <method name="skip" type="long" line="68">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="69"/>
                <scope line="72"/>
                <declaration name="nInt" type="int" line="75"/>
                <declaration name="skip" type="int" line="76"/>
            </method>
            <javadoc line="80">
                Returns the number of bytes that can be read (or skipped over)
                  from this input stream without blocking by the next caller of a
                  method for this input stream.                
            </javadoc>
            <method name="available" type="int" line="85">
                <scope line="86"/>
            </method>
            <javadoc line="91">
                Closes this input stream and releases any system resources associated
                  with the stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="96"/>
            <javadoc line="99">
                Marks the current position in this input stream.                
            </javadoc>
            <method name="mark" type="void" line="102">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="104">
                Repositions this stream to the position at the time the
                  &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.                
            </javadoc>
            <method name="reset" type="void" line="108"/>
            <javadoc line="111">
                Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt; and
                  &lt;code&gt;reset&lt;/code&gt; methods.                
            </javadoc>
            <method name="markSupported" type="boolean" line="115"/>
        </class>
    </source>