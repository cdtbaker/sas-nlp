<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.nio"/>
        <class name="ByteBufferInputStream" line="31">
            <extends class="InputStream"/>
            <javadoc line="31">
                A simple InputStream which uses ByteBuffers as it&apos;s backing store.
                  &lt;P&gt;
                  The only IOException should come if the InputStream has been closed.
                  All other IOException should not occur because all the data is local.
                  Data reads on an exhausted ByteBuffer returns a -1.                
                <author>
                    Brad Wetmore                    
                </author>
            </javadoc>
            <declaration name="bb" type="ByteBuffer" line="42"/>
            <method name="ByteBufferInputStream" type="constructor" line="44">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="48">
                Returns a byte from the ByteBuffer.
                  Increments position().                
            </javadoc>
            <method name="read" type="int" line="53">
                <scope line="55"/>
                <scope line="59"/>
            </method>
            <javadoc line="65">
                Returns a byte array from the ByteBuffer.
                  Increments position().                
            </javadoc>
            <method name="read" type="int" line="70">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="72"/>
            </method>
            <javadoc line="79">
                Returns a byte array from the ByteBuffer.
                  Increments position().                
            </javadoc>
            <method name="read" type="int" line="84">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="86"/>
                <scope line="90"/>
                <scope line="92"/>
                <scope line="94"/>
                <declaration name="length" type="int" line="98"/>
                <scope line="99"/>
            </method>
            <javadoc line="107">
                Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from this input
                  stream.                
            </javadoc>
            <method name="skip" type="long" line="111">
                <params>
                    <param name="n" type="long"/>
                </params>
                <comment line="122">
                    ByteBuffers have at most an int, so lose the upper bits.
                     The contract allows this.                    
                </comment>
                <scope line="113"/>
                <scope line="117"/>
                <declaration name="nInt" type="int" line="125"/>
                <declaration name="skip" type="int" line="126"/>
            </method>
            <javadoc line="133">
                Returns the number of bytes that can be read (or skipped over)
                  from this input stream without blocking by the next caller of a
                  method for this input stream.                
            </javadoc>
            <method name="available" type="int" line="138">
                <scope line="140"/>
            </method>
            <javadoc line="147">
                Closes this input stream and releases any system resources associated
                  with the stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="153"/>
            <javadoc line="157">
                Marks the current position in this input stream.                
            </javadoc>
            <method name="mark" type="void" line="160">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="162">
                Repositions this stream to the position at the time the
                  &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.                
            </javadoc>
            <method name="reset" type="void" line="166"/>
            <javadoc line="170">
                Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt; and
                  &lt;code&gt;reset&lt;/code&gt; methods.                
            </javadoc>
            <method name="markSupported" type="boolean" line="174"/>
        </class>
    </source>