<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.net.SocketException"/>
        <import package="java.net.SocketTimeoutException"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.net.ssl"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="InputRecord" line="9">
            <extends class="ByteArrayInputStream"/>
            <implements interface="Record"/>
            <javadoc line="9">
                SSL 3.0 records, as pulled off a TCP stream.  Input records are
                  basically buffers tied to a particular input stream ... a layer
                  above this must map these records into the model of a continuous
                  stream of data.
                  Since this returns SSL 3.0 records, it&apos;s the layer that needs to
                  map SSL 2.0 style handshake records into SSL 3.0 ones for those
                  &quot;old&quot; clients that interop with both V2 and V3 servers.  Not as
                  pretty as might be desired.
                  NOTE:  During handshaking, each message must be hashed to support
                  verification that the handshake process wasn&apos;t compromised.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="handshakeHash" type="HandshakeHash" line="23"/>
            <declaration name="lastHashed" type="int" line="24"/>
            <declaration name="formatVerified" type="boolean" line="25"/>
            <declaration name="isClosed" type="boolean" line="26"/>
            <declaration name="appDataValid" type="boolean" line="27"/>
            <declaration name="helloVersion" type="ProtocolVersion" line="28"/>
            <declaration name="debug" type="Debug" line="29"/>
            <declaration name="exlen" type="int" line="30"/>
            <declaration name="v2Buf" type="byte" line="31"/>
            <method name="InputRecord" type="constructor" line="32"/>
            <method name="setHelloVersion" type="void" line="41">
                <params>
                    <param name="helloVersion" type="ProtocolVersion"/>
                </params>
            </method>
            <method name="getHelloVersion" type="ProtocolVersion" line="44"/>
            <method name="enableFormatChecks" type="void" line="47"/>
            <method name="isAppDataValid" type="boolean" line="50"/>
            <method name="setAppDataValid" type="void" line="53">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <method name="contentType" type="byte" line="56"/>
            <method name="setHandshakeHash" type="void" line="59">
                <params>
                    <param name="handshakeHash" type="HandshakeHash"/>
                </params>
            </method>
            <method name="getHandshakeHash" type="HandshakeHash" line="62"/>
            <method name="checkMAC" type="boolean" line="65">
                <params>
                    <param name="signer" type="MAC"/>
                </params>
                <declaration name="len" type="int" line="66"/>
                <scope line="67"/>
                <declaration name="offset" type="int" line="70"/>
                <scope line="71"/>
                <declaration name="mac" type="byte[]" line="74"/>
                <scope line="75"/>
                <scope line="78">
                    <scope line="79"/>
                </scope>
            </method>
            <method name="decrypt" type="void" line="86">
                <params>
                    <param name="box" type="CipherBox"/>
                </params>
                <declaration name="len" type="int" line="87"/>
            </method>
            <method name="ignore" type="void" line="90">
                <params>
                    <param name="bytes" type="int"/>
                </params>
                <scope line="91"/>
            </method>
            <method name="doHashes" type="void" line="96">
                <declaration name="len" type="int" line="97"/>
                <scope line="98"/>
            </method>
            <method name="hashInternal" type="void" line="103">
                <params>
                    <param name="databuf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="104">
                    <scope line="105">
                        <declaration name="hd" type="HexDumpEncoder" line="106"/>
                    </scope>
                    <scope line="110"/>
                </scope>
            </method>
            <method name="queueHandshake" type="void" line="115">
                <params>
                    <param name="r" type="InputRecord"/>
                </params>
                <declaration name="len" type="int" line="116"/>
                <scope line="118">
                    <scope line="120"/>
                </scope>
                <scope line="128">
                    <declaration name="newbuf" type="byte" line="129"/>
                </scope>
                <scope line="137"/>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Prevent any more data from being read into this record,
                  and flag the record as holding no data.                
            </javadoc>
            <method name="close" type="void" line="149"/>
            <declaration name="v2NoCipher" type="byte[]" line="156"/>
            <method name="readFully" type="int" line="157">
                <params>
                    <param name="s" type="InputStream"/>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="n" type="int" line="158"/>
                <scope line="159">
                    <declaration name="readLen" type="int" line="160"/>
                    <scope line="161"/>
                    <scope line="164">
                        <scope line="165">
                            <declaration name="hd" type="HexDumpEncoder" line="166"/>
                            <declaration name="bb" type="ByteBuffer" line="167"/>
                        </scope>
                        <scope line="171"/>
                    </scope>
                </scope>
            </method>
            <method name="read" type="void" line="179">
                <params>
                    <param name="s" type="InputStream"/>
                    <param name="o" type="OutputStream"/>
                </params>
                <scope line="180"/>
                <scope line="183">
                    <declaration name="really" type="int" line="184"/>
                    <scope line="185"/>
                </scope>
                <scope line="192">
                    <scope line="194"/>
                    <scope line="197"/>
                </scope>
                <scope line="201"/>
            </method>
            <javadoc line="205">
                Read a SSL/TLS record. Throw an IOException if the format is invalid.                
            </javadoc>
            <method name="readV3Record" type="void" line="208">
                <params>
                    <param name="s" type="InputStream"/>
                    <param name="o" type="OutputStream"/>
                </params>
                <declaration name="recordVersion" type="ProtocolVersion" line="209"/>
                <scope line="210"/>
                <declaration name="contentLen" type="int" line="213"/>
                <scope line="214"/>
                <scope line="217">
                    <declaration name="newbuf" type="byte[]" line="218"/>
                </scope>
                <scope line="222">
                    <declaration name="really" type="int" line="223"/>
                    <scope line="224"/>
                </scope>
                <scope line="230">
                    <scope line="231"/>
                </scope>
            </method>
            <javadoc line="237">
                Deal with unknown records. Called if the first data we read on this
                  connection does not look like an SSL/TLS record. It could a SSLv2
                  message, or just garbage.                
            </javadoc>
            <method name="handleUnknownRecord" type="void" line="242">
                <params>
                    <param name="s" type="InputStream"/>
                    <param name="o" type="OutputStream"/>
                </params>
                <scope line="243">
                    <scope line="244"/>
                    <declaration name="recordVersion" type="ProtocolVersion" line="247"/>
                    <scope line="248">
                        <scope line="249"/>
                        <scope line="252"/>
                    </scope>
                    <declaration name="len" type="int" line="256"/>
                    <scope line="257"/>
                    <scope line="260">
                        <declaration name="really" type="int" line="261"/>
                        <scope line="262"/>
                    </scope>
                    <scope line="272"/>
                </scope>
                <scope line="277">
                    <scope line="278"/>
                    <scope line="281">
                        <scope line="282"/>
                    </scope>
                </scope>
            </method>
            <method name="writeBuffer" type="void" line="289">
                <params>
                    <param name="s" type="OutputStream"/>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="V2toV3ClientHello" type="void" line="293">
                <params>
                    <param name="v2Msg" type="byte"/>
                </params>
                <declaration name="i" type="int" line="294"/>
                <declaration name="cipherSpecLen" type="int" line="302"/>
                <declaration name="offset" type="int" line="306"/>
                <scope line="307"/>
                <scope line="312"/>
                <declaration name="j" type="int" line="320"/>
                <scope line="323"/>
            </method>
            <javadoc line="341">
                Return a description for the given content type. This method should be
                  in Record, but since that is an interface this is not possible.
                  Called from InputRecord and OutputRecord.                
            </javadoc>
            <method name="contentName" type="String" line="346">
                <params>
                    <param name="contentType" type="int"/>
                </params>
            </method>
        </class>
    </source>