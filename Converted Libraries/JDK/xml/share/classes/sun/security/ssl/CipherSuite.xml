<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.util"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.SecureRandom"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.security.ssl.CipherSuite.KeyExchange"/>
        <import package="sun.security.ssl.CipherSuite.PRF"/>
        <import package="sun.security.ssl.JsseJce"/>
        <class name="CipherSuite" line="44">
            <comment line="71">
                minimum priority for supported CipherSuites                
            </comment>
            <comment line="74">
                minimum priority for default enabled CipherSuites                
            </comment>
            <comment line="77">
                Flag indicating if CipherSuite availability can change dynamically.
                 This is the case when we rely on a JCE cipher implementation that
                 may not be available in the installed JCE providers.
                 It is true because we might not have an ECC implementation.                
            </comment>
            <comment line="86">
                Map Integer(id) -&gt; CipherSuite
                 contains all known CipherSuites                
            </comment>
            <comment line="90">
                Map String(name) -&gt; CipherSuite
                 contains only supported CipherSuites (i.e. allowed == true)                
            </comment>
            <comment line="94">
                Protocol defined CipherSuite name, e.g. SSL_RSA_WITH_RC4_128_MD5
                 we use TLS_* only for new CipherSuites, still SSL_* for old ones                
            </comment>
            <comment line="98">
                id in 16 bit MSB format, i.e. 0x0004 for SSL_RSA_WITH_RC4_128_MD5                
            </comment>
            <comment line="101">
                priority for the internal default preference order. the higher the
                 better. Each supported CipherSuite *must* have a unique priority.
                 Ciphersuites with priority &gt;= DEFAULT_SUITES_PRIORITY are enabled
                 by default                
            </comment>
            <comment line="107">
                key exchange, bulk cipher, mac and prf algorithms. See those
                 classes below.                
            </comment>
            <comment line="114">
                whether a CipherSuite qualifies as exportable under 512/40 bit rules.
                 TLS 1.1+ (RFC 4346) must not negotiate to these suites.                
            </comment>
            <comment line="118">
                true iff implemented and enabled at compile time                
            </comment>
            <comment line="121">
                obsoleted since protocol version                
            </comment>
            <comment line="124">
                supported since protocol version                
            </comment>
            <comment line="256">
                for use by CipherSuiteList only                
            </comment>
            <comment line="261">
                Use this method when all of the values need to be specified.
                 This is primarily used when defining a new ciphersuite for
                 TLS 1.2+ that doesn&apos;t use the &quot;default&quot; PRF.                
            </comment>
            <comment line="284">
                Use this method when there is no lower protocol limit where this
                 suite can be used, and the PRF is P_SHA256.  That is, the
                 existing ciphersuites.  From RFC 5246:
                
                     All cipher suites in this document use P_SHA256.                
            </comment>
            <comment line="305">
                Use this method when there is no upper protocol limit.  That is,
                 suites which have not been obsoleted.                
            </comment>
            <comment line="315">
                Use this method to define an unimplemented suite.  This provides
                 a number&lt;-&gt;name mapping that can be used for debugging.                
            </comment>
            <comment line="550">
                export strength ciphers                
            </comment>
            <comment line="560">
                domestic strength ciphers                
            </comment>
            <comment line="574">
                MACs                
            </comment>
            <comment line="1270">
                ciphersuite SSL_NULL_WITH_NULL_NULL                
            </comment>
            <comment line="1273">
                ciphersuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV                
            </comment>
            <implements interface="Comparable"/>
            <javadoc line="44">
                An SSL/TLS CipherSuite. Constants for the standard key exchange, cipher,
                  and mac algorithms are also defined in this class.
                  The CipherSuite class and the inner classes defined in this file roughly
                  follow the type safe enum pattern described in Effective Java. This means:
                  . instances are immutable, classes are final
                  . there is a unique instance of every value, i.e. there are never two
                  instances representing the same CipherSuite, etc. This means equality
                  tests can be performed using == instead of equals() (although that works
                  as well). [A minor exception are unsupported CipherSuites read from a
                  handshake message, but this is usually irrelevant]
                  . instances are obtained using the static valueOf() factory methods.
                  . properties are defined as final variables and made available as
                  package private variables without method accessors
                  . if the member variable allowed is false, the given algorithm is either
                  unavailable or disabled at compile time                
            </javadoc>
            <declaration name="SUPPORTED_SUITES_PRIORITY" type="int" line="71"/>
            <declaration name="DEFAULT_SUITES_PRIORITY" type="int" line="74"/>
            <declaration name="DYNAMIC_AVAILABILITY" type="boolean" line="80"/>
            <declaration name="ALLOW_ECC" type="boolean" line="82"/>
            <declaration name="idMap" type="Map&lt;Integer,CipherSuite&gt;" line="87"/>
            <declaration name="nameMap" type="Map&lt;String,CipherSuite&gt;" line="91"/>
            <declaration name="name" type="String" line="95"/>
            <declaration name="id" type="int" line="98"/>
            <declaration name="priority" type="int" line="104"/>
            <declaration name="keyExchange" type="KeyExchange" line="108"/>
            <declaration name="cipher" type="BulkCipher" line="109"/>
            <declaration name="macAlg" type="MacAlg" line="110"/>
            <declaration name="prfAlg" type="PRF" line="111"/>
            <declaration name="exportable" type="boolean" line="115"/>
            <declaration name="allowed" type="boolean" line="118"/>
            <declaration name="obsoleted" type="int" line="121"/>
            <declaration name="supported" type="int" line="124"/>
            <javadoc line="126">
                Constructor for implemented CipherSuites.                
            </javadoc>
            <method name="CipherSuite" type="constructor" line="131">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                    <param name="obsoleted" type="int"/>
                    <param name="supported" type="int"/>
                    <param name="prfAlg" type="PRF"/>
                </params>
                <scope line="138"/>
                <scope line="140"/>
                <scope line="142"/>
                <scope line="144"/>
                <scope line="146"/>
                <scope line="148"/>
                <scope line="150"/>
            </method>
            <javadoc line="163">
                Constructor for unimplemented CipherSuites.                
            </javadoc>
            <method name="CipherSuite" type="constructor" line="166">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="181">
                Return whether this CipherSuite is available for use. A
                  CipherSuite may be unavailable even if it is supported
                  (i.e. allowed == true) if the required JCE cipher is not installed.
                  In some configuration, this situation may change over time, call
                  CipherSuiteList.clearAvailableCache() before this method to obtain
                  the most current status.                
            </javadoc>
            <method name="isAvailable" type="boolean" line="189"/>
            <method name="isNegotiable" type="boolean" line="193"/>
            <javadoc line="197">
                Compares CipherSuites based on their priority. Has the effect of
                  sorting CipherSuites when put in a sorted collection, which is
                  used by CipherSuiteList. Follows standard Comparable contract.
                  Note that for unsupported CipherSuites parsed from a handshake
                  message we violate the equals() contract.                
            </javadoc>
            <method name="compareTo" type="int" line="205">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="209">
                Returns this.name.                
            </javadoc>
            <method name="toString" type="String" line="212"/>
            <javadoc line="216">
                Return a CipherSuite for the given name. The returned CipherSuite
                  is supported by this implementation but may not actually be
                  currently useable. See isAvailable().                
                <exception>
                    IllegalArgumentException if the CipherSuite is unknown or
                      unsupported.                    
                </exception>
            </javadoc>
            <method name="valueOf" type="CipherSuite" line="224">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="225"/>
                <declaration name="c" type="CipherSuite" line="229"/>
                <scope line="230"/>
            </method>
            <javadoc line="237">
                Return a CipherSuite with the given ID. A temporary object is
                  constructed if the ID is unknown. Use isAvailable() to verify that
                  the CipherSuite can actually be used.                
            </javadoc>
            <method name="valueOf" type="CipherSuite" line="242">
                <params>
                    <param name="id1" type="int"/>
                    <param name="id2" type="int"/>
                </params>
                <declaration name="id" type="int" line="245"/>
                <declaration name="c" type="CipherSuite" line="246"/>
                <scope line="247">
                    <declaration name="h1" type="String" line="248"/>
                    <declaration name="h2" type="String" line="249"/>
                </scope>
            </method>
            <method name="allowedCipherSuites" type="Collection<CipherSuite>" line="256"/>
            <method name="add" type="void" line="267">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                    <param name="obsoleted" type="int"/>
                    <param name="supported" type="int"/>
                    <param name="prf" type="PRF"/>
                </params>
                <declaration name="c" type="CipherSuite" line="269"/>
                <scope line="271"/>
                <scope line="275">
                    <scope line="276"/>
                </scope>
            </method>
            <method name="add" type="void" line="292">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                    <param name="obsoleted" type="int"/>
                </params>
                <comment line="294">
                    If this is an obsoleted suite, then don&apos;t let the TLS 1.2
                     protocol have a valid PRF value.                    
                </comment>
                <declaration name="prf" type="PRF" line="295"/>
                <scope line="296"/>
            </method>
            <method name="add" type="void" line="309">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                </params>
            </method>
            <method name="add" type="void" line="318">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                </params>
                <declaration name="c" type="CipherSuite" line="319"/>
                <scope line="320"/>
            </method>
            <javadoc line="326">
                An SSL/TLS key exchange algorithm.                
            </javadoc>
            <declaration name="name" type="String" line="355"/>
            <declaration name="allowed" type="boolean" line="356"/>
            <declaration name="alwaysAvailable" type="boolean" line="357"/>
            <method name="KeyExchange" type="constructor" line="359">
                <params>
                    <param name="name" type="String"/>
                    <param name="allowed" type="boolean"/>
                </params>
            </method>
            <method name="isAvailable" type="boolean" line="366">
                <scope line="367"/>
                <scope line="371"/>
                <scope line="373"/>
                <scope line="375"/>
            </method>
            <method name="toString" type="String" line="380"/>
            <class name="BulkCipher" line="385">
                <comment line="332">
                    key exchange algorithms                    
                </comment>
                <comment line="348">
                    Kerberos cipher suites                    
                </comment>
                <comment line="352">
                    renegotiation protection request signaling cipher suite                    
                </comment>
                <comment line="355">
                    name of the key exchange algorithm, e.g. DHE_DSS                    
                </comment>
                <comment line="395">
                    Map BulkCipher -&gt; Boolean(available)                    
                </comment>
                <comment line="399">
                    descriptive name including key size, e.g. AES/128                    
                </comment>
                <comment line="402">
                    JCE cipher transformation string, e.g. AES/CBC/NoPadding                    
                </comment>
                <comment line="405">
                    algorithm name, e.g. AES                    
                </comment>
                <comment line="408">
                    supported and compile time enabled. Also see isAvailable()                    
                </comment>
                <comment line="411">
                    number of bytes of entropy in the key                    
                </comment>
                <comment line="414">
                    length of the actual cipher key in bytes.
                     for non-exportable ciphers, this is the same as keySize                    
                </comment>
                <comment line="418">
                    size of the IV (also block size)                    
                </comment>
                <comment line="421">
                    exportable under 512/40 bit rules                    
                </comment>
                <comment line="484">
                    for use by CipherSuiteList.clearAvailableCache();                    
                </comment>
                <comment line="523">
                    descriptive name, e.g. MD5                    
                </comment>
                <comment line="526">
                    size of the MAC value (and MAC key) in bytes                    
                </comment>
                <comment line="593">
                    PRF algorithms                    
                </comment>
                <comment line="597">
                    not currently used.                    
                </comment>
                <comment line="599">
                    PRF characteristics                    
                </comment>
                <javadoc line="385">
                    An SSL/TLS bulk cipher algorithm. One instance per combination of
                      cipher and key length.
                      Also contains a factory method to obtain in initialized CipherBox
                      for this algorithm.                    
                </javadoc>
                <declaration name="availableCache" type="Map&lt;BulkCipher,Boolean&gt;" line="395"/>
                <declaration name="description" type="String" line="399"/>
                <declaration name="transformation" type="String" line="402"/>
                <declaration name="algorithm" type="String" line="405"/>
                <declaration name="allowed" type="boolean" line="408"/>
                <declaration name="keySize" type="int" line="411"/>
                <declaration name="expandedKeySize" type="int" line="415"/>
                <declaration name="ivSize" type="int" line="418"/>
                <declaration name="exportable" type="boolean" line="421"/>
                <method name="BulkCipher" type="constructor" line="424">
                    <params>
                        <param name="transformation" type="String"/>
                        <param name="keySize" type="int"/>
                        <param name="expandedKeySize" type="int"/>
                        <param name="ivSize" type="int"/>
                        <param name="allowed" type="boolean"/>
                    </params>
                </method>
                <method name="BulkCipher" type="constructor" line="437">
                    <params>
                        <param name="transformation" type="String"/>
                        <param name="keySize" type="int"/>
                        <param name="ivSize" type="int"/>
                        <param name="allowed" type="boolean"/>
                    </params>
                </method>
                <javadoc line="449">
                    Return an initialized CipherBox for this BulkCipher.
                      IV must be null for stream ciphers.                    
                    <exception>
                        NoSuchAlgorithmException if anything goes wrong                        
                    </exception>
                </javadoc>
                <method name="newCipher" type="CipherBox" line="457">
                    <params>
                        <param name="version" type="ProtocolVersion"/>
                        <param name="key" type="SecretKey"/>
                        <param name="iv" type="IvParameterSpec"/>
                        <param name="random" type="SecureRandom"/>
                        <param name="encrypt" type="boolean"/>
                    </params>
                </method>
                <javadoc line="462">
                    Test if this bulk cipher is available. For use by CipherSuite.
                      Currently all supported ciphers except AES are always available
                      via the JSSE internal implementations. We also assume AES/128
                      is always available since it is shipped with the SunJCE provider.
                      However, AES/256 is unavailable when the default JCE policy
                      jurisdiction files are installed because of key length restrictions.                    
                </javadoc>
                <method name="isAvailable" type="boolean" line="471">
                    <comment line="480">
                        always available                        
                    </comment>
                    <scope line="472"/>
                    <scope line="475"/>
                </method>
                <method name="clearAvailableCache" type="void" line="484">
                    <scope line="485"/>
                </method>
                <method name="isAvailable" type="boolean" line="490">
                    <params>
                        <param name="cipher" type="BulkCipher"/>
                    </params>
                    <declaration name="b" type="Boolean" line="491"/>
                    <scope line="492">
                        <scope line="493">
                            <declaration name="key" type="SecretKey" line="494"/>
                            <declaration name="iv" type="IvParameterSpec" line="496"/>
                        </scope>
                        <scope line="501"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="509"/>
            </class>
            <class name="MacAlg" line="514">
                <comment line="332">
                    key exchange algorithms                    
                </comment>
                <comment line="348">
                    Kerberos cipher suites                    
                </comment>
                <comment line="352">
                    renegotiation protection request signaling cipher suite                    
                </comment>
                <comment line="355">
                    name of the key exchange algorithm, e.g. DHE_DSS                    
                </comment>
                <comment line="395">
                    Map BulkCipher -&gt; Boolean(available)                    
                </comment>
                <comment line="399">
                    descriptive name including key size, e.g. AES/128                    
                </comment>
                <comment line="402">
                    JCE cipher transformation string, e.g. AES/CBC/NoPadding                    
                </comment>
                <comment line="405">
                    algorithm name, e.g. AES                    
                </comment>
                <comment line="408">
                    supported and compile time enabled. Also see isAvailable()                    
                </comment>
                <comment line="411">
                    number of bytes of entropy in the key                    
                </comment>
                <comment line="414">
                    length of the actual cipher key in bytes.
                     for non-exportable ciphers, this is the same as keySize                    
                </comment>
                <comment line="418">
                    size of the IV (also block size)                    
                </comment>
                <comment line="421">
                    exportable under 512/40 bit rules                    
                </comment>
                <comment line="484">
                    for use by CipherSuiteList.clearAvailableCache();                    
                </comment>
                <comment line="523">
                    descriptive name, e.g. MD5                    
                </comment>
                <comment line="526">
                    size of the MAC value (and MAC key) in bytes                    
                </comment>
                <comment line="593">
                    PRF algorithms                    
                </comment>
                <comment line="597">
                    not currently used.                    
                </comment>
                <comment line="599">
                    PRF characteristics                    
                </comment>
                <javadoc line="514">
                    An SSL/TLS key MAC algorithm.
                      Also contains a factory method to obtain an initialized MAC
                      for this algorithm.                    
                </javadoc>
                <declaration name="name" type="String" line="523"/>
                <declaration name="size" type="int" line="526"/>
                <method name="MacAlg" type="constructor" line="528">
                    <params>
                        <param name="name" type="String"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <javadoc line="533">
                    Return an initialized MAC for this MacAlg. ProtocolVersion
                      must either be SSL30 (SSLv3 custom MAC) or TLS10 (std. HMAC).                    
                    <exception>
                        NoSuchAlgorithmException if anything goes wrong                        
                    </exception>
                </javadoc>
                <method name="newMac" type="MAC" line="540">
                    <params>
                        <param name="protocolVersion" type="ProtocolVersion"/>
                        <param name="secret" type="SecretKey"/>
                    </params>
                </method>
                <method name="toString" type="String" line="544"/>
            </class>
            <declaration name="B_NULL" type="BulkCipher" line="550"/>
            <declaration name="B_RC4_40" type="BulkCipher" line="552"/>
            <declaration name="B_RC2_40" type="BulkCipher" line="554"/>
            <declaration name="B_DES_40" type="BulkCipher" line="556"/>
            <declaration name="B_RC4_128" type="BulkCipher" line="560"/>
            <declaration name="B_DES" type="BulkCipher" line="562"/>
            <declaration name="B_3DES" type="BulkCipher" line="564"/>
            <declaration name="B_IDEA" type="BulkCipher" line="566"/>
            <declaration name="B_AES_128" type="BulkCipher" line="568"/>
            <declaration name="B_AES_256" type="BulkCipher" line="570"/>
            <declaration name="M_NULL" type="MacAlg" line="574"/>
            <declaration name="M_MD5" type="MacAlg" line="575"/>
            <declaration name="M_SHA" type="MacAlg" line="576"/>
            <declaration name="M_SHA256" type="MacAlg" line="577"/>
            <declaration name="M_SHA384" type="MacAlg" line="578"/>
            <javadoc line="580">
                PRFs (PseudoRandom Function) from TLS specifications.
                  TLS 1.1- uses a single MD5/SHA1-based PRF algorithm for generating
                  the necessary material.
                  In TLS 1.2+, all existing/known CipherSuites use SHA256, however
                  new Ciphersuites (e.g. RFC 5288) can define specific PRF hash
                  algorithms.                
            </javadoc>
            <declaration name="prfHashAlg" type="String" line="599"/>
            <declaration name="prfHashLength" type="int" line="600"/>
            <declaration name="prfBlockSize" type="int" line="601"/>
            <method name="PRF" type="constructor" line="603">
                <params>
                    <param name="prfHashAlg" type="String"/>
                    <param name="prfHashLength" type="int"/>
                    <param name="prfBlockSize" type="int"/>
                </params>
            </method>
            <method name="getPRFHashAlg" type="String" line="609"/>
            <method name="getPRFHashLength" type="int" line="613"/>
            <method name="getPRFBlockSize" type="int" line="617"/>
            <scope line="622">
                <declaration name="F" type="boolean" line="626"/>
                <declaration name="T" type="boolean" line="627"/>
                <declaration name="N" type="boolean" line="629"/>
                <declaration name="p" type="int" line="879"/>
                <declaration name="max" type="int" line="882"/>
                <declaration name="tls11" type="int" line="883"/>
                <declaration name="tls12" type="int" line="884"/>
            </scope>
            <declaration name="C_NULL" type="CipherSuite" line="1270"/>
            <declaration name="C_SCSV" type="CipherSuite" line="1273"/>
        </class>
    </source>