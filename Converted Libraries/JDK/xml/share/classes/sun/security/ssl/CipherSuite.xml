<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ssl">
        <import package="java.util"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.SecureRandom"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="sun.security.ssl.CipherSuite"/>
        <import package="sun.security.ssl.CipherSuite.KeyExchange"/>
        <import package="sun.security.ssl.CipherSuite.PRF"/>
        <import package="sun.security.ssl.JsseJce"/>
        <class name="CipherSuite" line="13">
            <implements interface="Comparable"/>
            <javadoc line="13">
                An SSL/TLS CipherSuite. Constants for the standard key exchange, cipher,
                  and mac algorithms are also defined in this class.
                  The CipherSuite class and the inner classes defined in this file roughly
                  follow the type safe enum pattern described in Effective Java. This means:
                  . instances are immutable, classes are final
                  . there is a unique instance of every value, i.e. there are never two
                  instances representing the same CipherSuite, etc. This means equality
                  tests can be performed using == instead of equals() (although that works
                  as well). [A minor exception are unsupported CipherSuites read from a
                  handshake message, but this is usually irrelevant]
                  . instances are obtained using the static valueOf() factory methods.
                  . properties are defined as final variables and made available as
                  package private variables without method accessors
                  . if the member variable allowed is false, the given algorithm is either
                  unavailable or disabled at compile time                
            </javadoc>
            <declaration name="SUPPORTED_SUITES_PRIORITY" type="int" line="31"/>
            <declaration name="DEFAULT_SUITES_PRIORITY" type="int" line="32"/>
            <declaration name="DYNAMIC_AVAILABILITY" type="boolean" line="33"/>
            <declaration name="ALLOW_ECC" type="boolean" line="34"/>
            <declaration name="idMap" type="Map&lt;Integer,CipherSuite&gt;" line="35"/>
            <declaration name="nameMap" type="Map&lt;String,CipherSuite&gt;" line="36"/>
            <declaration name="name" type="String" line="37"/>
            <declaration name="id" type="int" line="38"/>
            <declaration name="priority" type="int" line="39"/>
            <declaration name="keyExchange" type="KeyExchange" line="40"/>
            <declaration name="cipher" type="BulkCipher" line="41"/>
            <declaration name="macAlg" type="MacAlg" line="42"/>
            <declaration name="prfAlg" type="PRF" line="43"/>
            <declaration name="exportable" type="boolean" line="44"/>
            <declaration name="allowed" type="boolean" line="45"/>
            <declaration name="obsoleted" type="int" line="46"/>
            <declaration name="supported" type="int" line="47"/>
            <javadoc line="48">
                Constructor for implemented CipherSuites.                
            </javadoc>
            <method name="CipherSuite" type="constructor" line="51">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                    <param name="obsoleted" type="int"/>
                    <param name="supported" type="int"/>
                    <param name="prfAlg" type="PRF"/>
                </params>
                <scope line="58"/>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="67"/>
                <scope line="70"/>
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <javadoc line="86">
                Constructor for unimplemented CipherSuites.                
            </javadoc>
            <method name="CipherSuite" type="constructor" line="89">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Return whether this CipherSuite is available for use. A
                  CipherSuite may be unavailable even if it is supported
                  (i.e. allowed == true) if the required JCE cipher is not installed.
                  In some configuration, this situation may change over time, call
                  CipherSuiteList.clearAvailableCache() before this method to obtain
                  the most current status.                
            </javadoc>
            <method name="isAvailable" type="boolean" line="110"/>
            <method name="isNegotiable" type="boolean" line="113"/>
            <javadoc line="116">
                Compares CipherSuites based on their priority. Has the effect of
                  sorting CipherSuites when put in a sorted collection, which is
                  used by CipherSuiteList. Follows standard Comparable contract.
                  Note that for unsupported CipherSuites parsed from a handshake
                  message we violate the equals() contract.                
            </javadoc>
            <method name="compareTo" type="int" line="123">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="126">
                Returns this.name.                
            </javadoc>
            <method name="toString" type="String" line="129"/>
            <javadoc line="132">
                Return a CipherSuite for the given name. The returned CipherSuite
                  is supported by this implementation but may not actually be
                  currently useable. See isAvailable().                
                <exception>
                    IllegalArgumentException if the CipherSuite is unknown or
                      unsupported.                    
                </exception>
            </javadoc>
            <method name="valueOf" type="CipherSuite" line="139">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="140"/>
                <declaration name="c" type="CipherSuite" line="143"/>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                Return a CipherSuite with the given ID. A temporary object is
                  constructed if the ID is unknown. Use isAvailable() to verify that
                  the CipherSuite can actually be used.                
            </javadoc>
            <method name="valueOf" type="CipherSuite" line="154">
                <params>
                    <param name="id1" type="int"/>
                    <param name="id2" type="int"/>
                </params>
                <declaration name="id" type="int" line="157"/>
                <declaration name="c" type="CipherSuite" line="158"/>
                <scope line="159">
                    <declaration name="h1" type="String" line="160"/>
                    <declaration name="h2" type="String" line="161"/>
                </scope>
            </method>
            <method name="allowedCipherSuites" type="Collection<CipherSuite>" line="166"/>
            <method name="add" type="void" line="169">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                    <param name="obsoleted" type="int"/>
                    <param name="supported" type="int"/>
                    <param name="prf" type="PRF"/>
                </params>
                <declaration name="c" type="CipherSuite" line="170"/>
                <scope line="171"/>
                <scope line="174">
                    <scope line="175"/>
                </scope>
            </method>
            <method name="add" type="void" line="180">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                    <param name="obsoleted" type="int"/>
                </params>
                <declaration name="prf" type="PRF" line="181"/>
                <scope line="182"/>
            </method>
            <method name="add" type="void" line="187">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                    <param name="priority" type="int"/>
                    <param name="keyExchange" type="KeyExchange"/>
                    <param name="cipher" type="BulkCipher"/>
                    <param name="allowed" type="boolean"/>
                </params>
            </method>
            <method name="add" type="void" line="190">
                <params>
                    <param name="name" type="String"/>
                    <param name="id" type="int"/>
                </params>
                <declaration name="c" type="CipherSuite" line="191"/>
                <scope line="192"/>
            </method>
            <declaration name="KeyExchange" type="enum" line="196"/>
            <javadoc line="196">
                An SSL/TLS key exchange algorithm.                
            </javadoc>
            <scope line="199"/>
            <declaration name="alwaysAvailable" type="boolean" line="201"/>
            <method name="KeyExchange" type="constructor" line="202">
                <params>
                    <param name="name" type="String"/>
                    <param name="allowed" type="boolean"/>
                </params>
            </method>
            <method name="isAvailable" type="boolean" line="207">
                <scope line="208"/>
                <scope line="211"/>
                <scope line="214"/>
                <scope line="217"/>
            </method>
            <method name="toString" type="String" line="221"/>
        </class>
        <class name="BulkCipher" line="225">
            <javadoc line="225">
                An SSL/TLS bulk cipher algorithm. One instance per combination of
                  cipher and key length.
                  Also contains a factory method to obtain in initialized CipherBox
                  for this algorithm.                
            </javadoc>
            <declaration name="availableCache" type="Map&lt;BulkCipher,Boolean&gt;" line="232"/>
            <declaration name="description" type="String" line="233"/>
            <declaration name="transformation" type="String" line="234"/>
            <declaration name="algorithm" type="String" line="235"/>
            <declaration name="allowed" type="boolean" line="236"/>
            <declaration name="keySize" type="int" line="237"/>
            <declaration name="expandedKeySize" type="int" line="238"/>
            <declaration name="ivSize" type="int" line="239"/>
            <declaration name="exportable" type="boolean" line="240"/>
            <method name="BulkCipher" type="constructor" line="241">
                <params>
                    <param name="transformation" type="String"/>
                    <param name="keySize" type="int"/>
                    <param name="expandedKeySize" type="int"/>
                    <param name="ivSize" type="int"/>
                    <param name="allowed" type="boolean"/>
                </params>
            </method>
            <method name="BulkCipher" type="constructor" line="251">
                <params>
                    <param name="transformation" type="String"/>
                    <param name="keySize" type="int"/>
                    <param name="ivSize" type="int"/>
                    <param name="allowed" type="boolean"/>
                </params>
            </method>
            <javadoc line="261">
                Return an initialized CipherBox for this BulkCipher.
                  IV must be null for stream ciphers.                
                <exception>
                    NoSuchAlgorithmException if anything goes wrong                    
                </exception>
            </javadoc>
            <method name="newCipher" type="CipherBox" line="266">
                <params>
                    <param name="version" type="ProtocolVersion"/>
                    <param name="key" type="SecretKey"/>
                    <param name="iv" type="IvParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="encrypt" type="boolean"/>
                </params>
            </method>
            <javadoc line="269">
                Test if this bulk cipher is available. For use by CipherSuite.
                  Currently all supported ciphers except AES are always available
                  via the JSSE internal implementations. We also assume AES/128
                  is always available since it is shipped with the SunJCE provider.
                  However, AES/256 is unavailable when the default JCE policy
                  jurisdiction files are installed because of key length restrictions.                
            </javadoc>
            <method name="isAvailable" type="boolean" line="277">
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <method name="clearAvailableCache" type="void" line="286">
                <scope line="287"/>
            </method>
            <method name="isAvailable" type="boolean" line="291">
                <params>
                    <param name="cipher" type="BulkCipher"/>
                </params>
                <declaration name="b" type="Boolean" line="292"/>
                <scope line="293">
                    <scope line="294">
                        <declaration name="key" type="SecretKey" line="295"/>
                        <declaration name="iv" type="IvParameterSpec" line="296"/>
                    </scope>
                    <scope line="300"/>
                </scope>
            </method>
            <method name="toString" type="String" line="307"/>
        </class>
        <class name="MacAlg" line="311">
            <javadoc line="311">
                An SSL/TLS key MAC algorithm.
                  Also contains a factory method to obtain an initialized MAC
                  for this algorithm.                
            </javadoc>
            <declaration name="name" type="String" line="317"/>
            <declaration name="size" type="int" line="318"/>
            <method name="MacAlg" type="constructor" line="319">
                <params>
                    <param name="name" type="String"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="323">
                Return an initialized MAC for this MacAlg. ProtocolVersion
                  must either be SSL30 (SSLv3 custom MAC) or TLS10 (std. HMAC).                
                <exception>
                    NoSuchAlgorithmException if anything goes wrong                    
                </exception>
            </javadoc>
            <method name="newMac" type="MAC" line="328">
                <params>
                    <param name="protocolVersion" type="ProtocolVersion"/>
                    <param name="secret" type="SecretKey"/>
                </params>
            </method>
            <method name="toString" type="String" line="331"/>
            <declaration name="B_NULL" type="BulkCipher" line="335"/>
            <declaration name="B_RC4_40" type="BulkCipher" line="336"/>
            <declaration name="B_RC2_40" type="BulkCipher" line="337"/>
            <declaration name="B_DES_40" type="BulkCipher" line="338"/>
            <declaration name="B_RC4_128" type="BulkCipher" line="339"/>
            <declaration name="B_DES" type="BulkCipher" line="340"/>
            <declaration name="B_3DES" type="BulkCipher" line="341"/>
            <declaration name="B_IDEA" type="BulkCipher" line="342"/>
            <declaration name="B_AES_128" type="BulkCipher" line="343"/>
            <declaration name="B_AES_256" type="BulkCipher" line="344"/>
            <declaration name="M_NULL" type="MacAlg" line="345"/>
            <declaration name="M_MD5" type="MacAlg" line="346"/>
            <declaration name="M_SHA" type="MacAlg" line="347"/>
            <declaration name="M_SHA256" type="MacAlg" line="348"/>
            <declaration name="M_SHA384" type="MacAlg" line="349"/>
            <declaration name="PRF" type="enum" line="350"/>
            <javadoc line="350">
                PRFs (PseudoRandom Function) from TLS specifications.
                  TLS 1.1- uses a single MD5/SHA1-based PRF algorithm for generating
                  the necessary material.
                  In TLS 1.2+, all existing/known CipherSuites use SHA256, however
                  new Ciphersuites (e.g. RFC 5288) can define specific PRF hash
                  algorithms.                
            </javadoc>
            <method name="P_NONE" type="constructor" line="358"/>
            <declaration name="prfHashAlg" type="String" line="358"/>
            <declaration name="prfHashLength" type="int" line="359"/>
            <declaration name="prfBlockSize" type="int" line="360"/>
            <method name="PRF" type="constructor" line="361">
                <params>
                    <param name="prfHashAlg" type="String"/>
                    <param name="prfHashLength" type="int"/>
                    <param name="prfBlockSize" type="int"/>
                </params>
            </method>
            <method name="getPRFHashAlg" type="String" line="366"/>
            <method name="getPRFHashLength" type="int" line="369"/>
            <method name="getPRFBlockSize" type="int" line="372"/>
            <declaration name="C_NULL" type="CipherSuite" line="601"/>
            <declaration name="C_SCSV" type="CipherSuite" line="602"/>
        </class>
    </source>