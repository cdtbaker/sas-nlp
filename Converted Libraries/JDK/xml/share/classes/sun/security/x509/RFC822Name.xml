<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.util.Locale"/>
        <import package="sun.security.util"/>
        <class name="RFC822Name" line="33">
            <implements interface="GeneralNameInterface"/>
            <javadoc line="33">
                This class implements the RFC822Name as required by the GeneralNames
                  ASN.1 object.                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    GeneralName                    
                </see>
                <see>
                    GeneralNames                    
                </see>
                <see>
                    GeneralNameInterface                    
                </see>
            </javadoc>
            <declaration name="name" type="String" line="45"/>
            <javadoc line="47">
                Create the RFC822Name object from the passed encoded Der value.                
                <param>
                    derValue the encoded DER RFC822Name.                    
                </param>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="RFC822Name" type="constructor" line="53">
                <params>
                    <param name="derValue" type="DerValue"/>
                </params>
            </method>
            <javadoc line="58">
                Create the RFC822Name object with the specified name.                
                <param>
                    name the RFC822Name.                    
                </param>
                <throws>
                    IOException on invalid input name                    
                </throws>
            </javadoc>
            <method name="RFC822Name" type="constructor" line="64">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="69">
                Parse an RFC822Name string to see if it is a valid
                  addr-spec according to IETF RFC822 and RFC2459:
                  [local-part@]domain
                  &lt;p&gt;
                  local-part@ could be empty for an RFC822Name NameConstraint,
                  but the domain at least must be non-empty.  Case is not
                  significant.                
                <param>
                    name the RFC822Name string                    
                </param>
                <throws>
                    IOException if name is not valid                    
                </throws>
            </javadoc>
            <method name="parseName" type="void" line="81">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="85">
                    See if domain is a valid domain name                    
                </comment>
                <comment line="90">
                    An RFC822 NameConstraint could start with a ., although                    
                </comment>
                <comment line="91">
                    a DNSName may not                    
                </comment>
                <scope line="82"/>
                <declaration name="domain" type="String" line="86"/>
                <scope line="87"/>
                <scope line="89">
                    <scope line="92"/>
                </scope>
            </method>
            <javadoc line="99">
                Return the type of the GeneralName.                
            </javadoc>
            <method name="getType" type="int" line="102"/>
            <javadoc line="106">
                Return the actual name value of the GeneralName.                
            </javadoc>
            <method name="getName" type="String" line="109"/>
            <javadoc line="113">
                Encode the RFC822 name into the DerOutputStream.                
                <param>
                    out the DER stream to encode the RFC822Name to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="119">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="123">
                Convert the name into user readable string.                
            </javadoc>
            <method name="toString" type="String" line="126"/>
            <javadoc line="130">
                Compares this name with another, for equality.                
                <return>
                    true iff the names are equivalent
                      according to RFC2459.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="136">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="145">
                    RFC2459 mandates that these names are                    
                </comment>
                <comment line="146">
                    not case-sensitive                    
                </comment>
                <declaration name="other" type="RFC822Name" line="143"/>
            </method>
            <javadoc line="150">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="155"/>
            <javadoc line="159">
                Return constraint type:&lt;ul&gt;
                  &lt;li&gt;NAME_DIFF_TYPE = -1: input name is different type from name (i.e. does not constrain)
                  &lt;li&gt;NAME_MATCH = 0: input name matches name
                  &lt;li&gt;NAME_NARROWS = 1: input name narrows name
                  &lt;li&gt;NAME_WIDENS = 2: input name widens name
                  &lt;li&gt;NAME_SAME_TYPE = 3: input name does not match or narrow name, but is same type
                  &lt;/ul&gt;.  These results are used in checking NameConstraints during
                  certification path verification.
                  &lt;p&gt;
                  [RFC2459]    When the subjectAltName extension contains an Internet mail address,
                  the address MUST be included as an rfc822Name. The format of an
                  rfc822Name is an &quot;addr-spec&quot; as defined in RFC 822 [RFC 822]. An
                  addr-spec has the form &quot;local-part@domain&quot;. Note that an addr-spec
                  has no phrase (such as a common name) before it, has no comment (text
                  surrounded in parentheses) after it, and is not surrounded by &quot;&amp;lt;&quot; and
                  &quot;&amp;gt;&quot;. Note that while upper and lower case letters are allowed in an
                  RFC 822 addr-spec, no significance is attached to the case.
                  &lt;p&gt;                
                <param>
                    inputName to be checked for being constrained                    
                </param>
                <returns>
                    constraint type above                    
                </returns>
                <throws>
                    UnsupportedOperationException if name is not exact match, but narrowing and widening are
                      not supported for this name type.                    
                </throws>
            </javadoc>
            <method name="constrains" type="int" line="183">
                <params>
                    <param name="inputName" type="GeneralNameInterface"/>
                </params>
                <comment line="190">
                    RFC2459 specifies that case is not significant in RFC822Names                    
                </comment>
                <comment line="197">
                                        
                </comment>
                <comment line="211">
                                        
                </comment>
                <declaration name="constraintType" type="int" line="184"/>
                <scope line="187"/>
                <scope line="189">
                    <declaration name="inName" type="String" line="191"/>
                    <declaration name="thisName" type="String" line="193"/>
                    <scope line="194"/>
                    <scope line="196">
                        <scope line="198"/>
                        <scope line="200"/>
                        <scope line="202">
                            <declaration name="inNdx" type="int" line="203"/>
                            <scope line="204"/>
                            <scope line="206"/>
                        </scope>
                    </scope>
                    <scope line="210">
                        <scope line="212"/>
                        <scope line="214"/>
                        <scope line="216">
                            <declaration name="ndx" type="int" line="217"/>
                            <scope line="218"/>
                            <scope line="220"/>
                        </scope>
                    </scope>
                    <scope line="224"/>
                </scope>
            </method>
            <javadoc line="231">
                Return subtree depth of this name for purposes of determining
                  NameConstraints minimum and maximum bounds.                
                <returns>
                    distance of name from root                    
                </returns>
                <throws>
                    UnsupportedOperationException if not supported for this name type                    
                </throws>
            </javadoc>
            <method name="subtreeDepth" type="int" line="238">
                <comment line="242">
                                        
                </comment>
                <comment line="249">
                                        
                </comment>
                <declaration name="subtree" type="String" line="239"/>
                <declaration name="i" type="int" line="240"/>
                <declaration name="atNdx" type="int" line="243"/>
                <scope line="244"/>
                <scope line="250"/>
            </method>
        </class>
    </source>