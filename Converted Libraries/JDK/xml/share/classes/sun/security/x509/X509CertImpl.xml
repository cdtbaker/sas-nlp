<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.OutputStream"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.util"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="sun.security.util"/>
        <import package="sun.security.provider.X509Factory"/>
        <class name="X509CertImpl" line="48">
            <extends class="X509Certificate"/>
            <comment line="102">
                x509.info.issuer.dname                
            </comment>
            <comment line="106">
                x509.info.serialNumber.number                
            </comment>
            <comment line="110">
                x509.info.key.value                
            </comment>
            <comment line="115">
                x509.info.version.value                
            </comment>
            <comment line="120">
                x509.algorithm                
            </comment>
            <comment line="123">
                x509.signature                
            </comment>
            <comment line="126">
                when we sign and decode we set this to true
                 this is our means to make certificates immutable                
            </comment>
            <comment line="130">
                Certificate data, and its envelope                
            </comment>
            <comment line="136">
                recognized extension OIDS                
            </comment>
            <comment line="144">
                number of standard key usage bits.                
            </comment>
            <comment line="147">
                SubjectAlterntativeNames cache                
            </comment>
            <comment line="150">
                IssuerAlternativeNames cache                
            </comment>
            <comment line="153">
                ExtendedKeyUsage cache                
            </comment>
            <comment line="156">
                AuthorityInformationAccess cache                
            </comment>
            <comment line="774">
                the strongly typed gets, as per java.security.cert.X509Certificate                
            </comment>
            <implements interface="DerEncoder"/>
            <javadoc line="48">
                The X509CertImpl class represents an X.509 certificate. These certificates
                  are widely used to support authentication and other functionality in
                  Internet security systems.  Common applications include Privacy Enhanced
                  Mail (PEM), Transport Layer Security (SSL), code signing for trusted
                  software distribution, and Secure Electronic Transactions (SET).  There
                  is a commercial infrastructure ready to manage large scale deployments
                  of X.509 identity certificates.
                  &lt;P&gt;These certificates are managed and vouched for by &lt;em&gt;Certificate
                  Authorities&lt;/em&gt; (CAs).  CAs are services which create certificates by
                  placing data in the X.509 standard format and then digitally signing
                  that data.  Such signatures are quite difficult to forge.  CAs act as
                  trusted third parties, making introductions between agents who have no
                  direct knowledge of each other.  CA certificates are either signed by
                  themselves, or by some other CA such as a &quot;root&quot; CA.
                  &lt;P&gt;RFC 1422 is very informative, though it does not describe much
                  of the recent work being done with X.509 certificates.  That includes
                  a 1996 version (X.509v3) and a variety of enhancements being made to
                  facilitate an explosion of personal certificates used as &quot;Internet
                  Drivers&apos; Licences&quot;, or with SET for credit card transactions.
                  &lt;P&gt;More recent work includes the IETF PKIX Working Group efforts,
                  especially RFC2459.                
                <author>
                    Dave Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    X509CertInfo                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="81"/>
            <declaration name="DOT" type="String" line="83"/>
            <declaration name="NAME" type="String" line="84"/>
            <javadoc line="84">
                Public attribute names.                
            </javadoc>
            <declaration name="INFO" type="String" line="88"/>
            <declaration name="ALG_ID" type="String" line="89"/>
            <declaration name="SIGNATURE" type="String" line="90"/>
            <declaration name="SIGNED_CERT" type="String" line="91"/>
            <declaration name="SUBJECT_DN" type="String" line="93"/>
            <javadoc line="93">
                The following are defined for ease-of-use. These
                  are the most frequently retrieved attributes.                
            </javadoc>
            <declaration name="ISSUER_DN" type="String" line="102"/>
            <declaration name="SERIAL_ID" type="String" line="106"/>
            <declaration name="PUBLIC_KEY" type="String" line="110"/>
            <declaration name="VERSION" type="String" line="115"/>
            <declaration name="SIG_ALG" type="String" line="120"/>
            <declaration name="SIG" type="String" line="123"/>
            <declaration name="readOnly" type="boolean" line="127"/>
            <declaration name="signedCert" type="byte[]" line="130"/>
            <declaration name="info" type="X509CertInfo" line="131"/>
            <declaration name="algId" type="AlgorithmId" line="132"/>
            <declaration name="signature" type="byte[]" line="133"/>
            <declaration name="KEY_USAGE_OID" type="String" line="136"/>
            <declaration name="EXTENDED_KEY_USAGE_OID" type="String" line="137"/>
            <declaration name="BASIC_CONSTRAINT_OID" type="String" line="138"/>
            <declaration name="SUBJECT_ALT_NAME_OID" type="String" line="139"/>
            <declaration name="ISSUER_ALT_NAME_OID" type="String" line="140"/>
            <declaration name="AUTH_INFO_ACCESS_OID" type="String" line="141"/>
            <declaration name="NUM_STANDARD_KEY_USAGE" type="int" line="144"/>
            <declaration name="subjectAlternativeNames" type="Collection&lt;List&lt;?&gt;&gt;" line="147"/>
            <declaration name="issuerAlternativeNames" type="Collection&lt;List&lt;?&gt;&gt;" line="150"/>
            <declaration name="extKeyUsage" type="List&lt;String&gt;" line="153"/>
            <declaration name="authInfoAccess" type="Set&lt;AccessDescription&gt;" line="156"/>
            <declaration name="verifiedPublicKey" type="PublicKey" line="158"/>
            <javadoc line="158">
                PublicKey that has previously been used to verify
                  the signature of this certificate. Null if the certificate has not
                  yet been verified.                
            </javadoc>
            <declaration name="verifiedProvider" type="String" line="164"/>
            <javadoc line="164">
                If verifiedPublicKey is not null, name of the provider used to
                  successfully verify the signature of this certificate, or the
                  empty String if no provider was explicitly specified.                
            </javadoc>
            <declaration name="verificationResult" type="boolean" line="170"/>
            <javadoc line="170">
                If verifiedPublicKey is not null, result of the verification using
                  verifiedPublicKey and verifiedProvider. If true, verification was
                  successful, if false, it failed.                
            </javadoc>
            <javadoc line="177">
                Default constructor.                
            </javadoc>
            <method name="X509CertImpl" type="constructor" line="180"/>
            <javadoc line="182">
                Unmarshals a certificate from its encoded form, parsing the
                  encoded bytes.  This form of constructor is used by agents which
                  need to examine and use certificate contents.  That is, this is
                  one of the more commonly used constructors.  Note that the buffer
                  must include only a certificate, and no &quot;garbage&quot; may be left at
                  the end.  If you need to ignore data at the end of a certificate,
                  use another constructor.                
                <param>
                    certData the encoded bytes, with no trailing padding.                    
                </param>
                <exception>
                    CertificateException on parsing and initialization errors.                    
                </exception>
            </javadoc>
            <method name="X509CertImpl" type="constructor" line="194">
                <params>
                    <param name="certData" type="byte[]"/>
                </params>
                <scope line="195"/>
                <scope line="197">
                    <declaration name="ce" type="CertificateException" line="199"/>
                </scope>
            </method>
            <javadoc line="206">
                unmarshals an X.509 certificate from an input stream.  If the
                  certificate is RFC1421 hex-encoded, then it must begin with
                  the line X509Factory.BEGIN_CERT and end with the line
                  X509Factory.END_CERT.                
                <param>
                    in an input stream holding at least one certificate that may
                      be either DER-encoded or RFC1421 hex-encoded version of the
                      DER-encoded certificate.                    
                </param>
                <exception>
                    CertificateException on parsing and initialization errors.                    
                </exception>
            </javadoc>
            <method name="X509CertImpl" type="constructor" line="217">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="224">
                    First try reading stream as HEX-encoded DER-encoded bytes,
                     since not mistakable for raw DER                    
                </comment>
                <comment line="231">
                    Next, try reading stream as raw DER-encoded bytes                    
                </comment>
                <declaration name="der" type="DerValue" line="219"/>
                <declaration name="inBuffered" type="BufferedInputStream" line="221"/>
                <scope line="225"/>
                <scope line="228">
                    <scope line="229"/>
                    <scope line="233">
                        <declaration name="ce" type="CertificateException" line="234"/>
                    </scope>
                </scope>
                <scope line="244"/>
                <scope line="246">
                    <declaration name="ce" type="CertificateException" line="248"/>
                </scope>
            </method>
            <javadoc line="256">
                read input stream as HEX-encoded DER-encoded bytes                
                <param>
                    in InputStream to read                    
                </param>
                <returns>
                    DerValue corresponding to decoded HEX-encoded bytes                    
                </returns>
                <throws>
                    IOException if stream can not be interpreted as RFC1421
                      encoded bytes                    
                </throws>
            </javadoc>
            <method name="readRFC1421Cert" type="DerValue" line="264">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="277">
                                        
                </comment>
                <declaration name="der" type="DerValue" line="265"/>
                <declaration name="line" type="String" line="266"/>
                <declaration name="certBufferedReader" type="BufferedReader" line="267"/>
                <scope line="269"/>
                <scope line="271"/>
                <scope line="275">
                    <declaration name="decoder" type="BASE64Decoder" line="277"/>
                    <declaration name="decstream" type="ByteArrayOutputStream" line="278"/>
                    <scope line="279">
                        <scope line="280">
                            <scope line="281"/>
                            <scope line="284"/>
                        </scope>
                    </scope>
                    <scope line="288"/>
                </scope>
                <scope line="292"/>
            </method>
            <javadoc line="299">
                Construct an initialized X509 Certificate. The certificate is stored
                  in raw form and has to be signed to be useful.                
                <params>
                    info the X509CertificateInfo which the Certificate is to be
                      created from.                    
                </params>
            </javadoc>
            <method name="X509CertImpl" type="constructor" line="306">
                <params>
                    <param name="certInfo" type="X509CertInfo"/>
                </params>
            </method>
            <javadoc line="310">
                Unmarshal a certificate from its encoded form, parsing a DER value.
                  This form of constructor is used by agents which need to examine
                  and use certificate contents.                
                <param>
                    derVal the der value containing the encoded cert.                    
                </param>
                <exception>
                    CertificateException on parsing and initialization errors.                    
                </exception>
            </javadoc>
            <method name="X509CertImpl" type="constructor" line="318">
                <params>
                    <param name="derVal" type="DerValue"/>
                </params>
                <scope line="319"/>
                <scope line="321">
                    <declaration name="ce" type="CertificateException" line="323"/>
                </scope>
            </method>
            <javadoc line="330">
                Appends the certificate to an output stream.                
                <param>
                    out an input stream to which the certificate is appended.                    
                </param>
                <exception>
                    CertificateEncodingException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="337">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="341"/>
                <scope line="343"/>
            </method>
            <javadoc line="348">
                DER encode this object onto an output stream.
                  Implements the &lt;code&gt;DerEncoder&lt;/code&gt; interface.                
                <param>
                    out the output stream on which to write the DER encoding.                    
                </param>
                <exception>
                    IOException on encoding error.                    
                </exception>
            </javadoc>
            <method name="derEncode" type="void" line="356">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="362">
                Returns the encoded form of this certificate. It is
                  assumed that each certificate type would have only a single
                  form of encoding; for example, X.509 certificates would
                  be encoded as ASN.1 DER.                
                <exception>
                    CertificateEncodingException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="370"/>
            <javadoc line="374">
                Returned the encoding as an uncloned byte array. Callers must
                  guarantee that they neither modify it nor expose it to untrusted
                  code.                
            </javadoc>
            <method name="getEncodedInternal" type="byte[]" line="379">
                <scope line="380"/>
            </method>
            <javadoc line="387">
                Throws an exception if the certificate was not signed using the
                  verification key provided.  Successfully verifying a certificate
                  does &lt;em&gt;not&lt;/em&gt; indicate that one should trust the entity which
                  it represents.                
                <param>
                    key the public key used for verification.                    
                </param>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    NoSuchProviderException if there&apos;s no default provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="404">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
            </method>
            <javadoc line="409">
                Throws an exception if the certificate was not signed using the
                  verification key provided.  Successfully verifying a certificate
                  does &lt;em&gt;not&lt;/em&gt; indicate that one should trust the entity which
                  it represents.                
                <param>
                    key the public key used for verification.                    
                </param>
                <param>
                    sigProvider the name of the provider.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="427">
                <params>
                    <param name="key" type="PublicKey"/>
                    <param name="sigProvider" type="String"/>
                </params>
                <comment line="433">
                    this certificate has already been verified using
                     this public key. Make sure providers match, too.                    
                </comment>
                <comment line="446">
                    Verify the signature ...                    
                </comment>
                <comment line="458">
                    verify may throw SignatureException for invalid encodings, etc.                    
                </comment>
                <scope line="428"/>
                <scope line="431">
                    <scope line="434">
                        <scope line="435"/>
                        <scope line="437"/>
                    </scope>
                </scope>
                <scope line="442"/>
                <declaration name="sigVerf" type="Signature" line="446"/>
                <scope line="447"/>
                <scope line="449"/>
                <declaration name="rawCert" type="byte[]" line="454"/>
                <scope line="462"/>
            </method>
            <javadoc line="467">
                Creates an X.509 certificate, and signs it using the given key
                  (associating a signature algorithm and an X.500 name).
                  This operation is used to implement the certificate generation
                  functionality of a certificate authority.                
                <param>
                    key the private key used for signing.                    
                </param>
                <param>
                    algorithm the name of the signature algorithm used.                    
                </param>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    NoSuchProviderException if there&apos;s no default provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="sign" type="void" line="485">
                <params>
                    <param name="key" type="PrivateKey"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="489">
                Creates an X.509 certificate, and signs it using the given key
                  (associating a signature algorithm and an X.500 name).
                  This operation is used to implement the certificate generation
                  functionality of a certificate authority.                
                <param>
                    key the private key used for signing.                    
                </param>
                <param>
                    algorithm the name of the signature algorithm used.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="sign" type="void" line="508">
                <params>
                    <param name="key" type="PrivateKey"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <comment line="522">
                    in case the name is reset                    
                </comment>
                <comment line="528">
                    encode certificate info                    
                </comment>
                <comment line="532">
                    encode algorithm identifier                    
                </comment>
                <comment line="535">
                    Create and encode the signature itself.                    
                </comment>
                <comment line="540">
                    Wrap the signed data in a SEQUENCE { data, algorithm, sig }                    
                </comment>
                <scope line="509">
                    <declaration name="sigEngine" type="Signature" line="513"/>
                    <declaration name="out" type="DerOutputStream" line="524"/>
                    <declaration name="tmp" type="DerOutputStream" line="525"/>
                    <declaration name="rawCert" type="byte[]" line="529"/>
                </scope>
                <scope line="544"/>
            </method>
            <javadoc line="549">
                Checks that the certificate is currently valid, i.e. the current
                  time is within the specified validity period.                
                <exception>
                    CertificateExpiredException if the certificate has expired.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid.                    
                </exception>
            </javadoc>
            <method name="checkValidity" type="void" line="558">
                <declaration name="date" type="Date" line="559"/>
            </method>
            <javadoc line="563">
                Checks that the specified date is within the certificate&apos;s
                  validity period, or basically if the certificate would be
                  valid at the specified date/time.                
                <param>
                    date the Date to check against to see if this certificate
                      is valid at that date/time.                    
                </param>
                <exception>
                    CertificateExpiredException if the certificate has expired
                      with respect to the &lt;code&gt;date&lt;/code&gt; supplied.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid with respect to the &lt;code&gt;date&lt;/code&gt; supplied.                    
                </exception>
            </javadoc>
            <method name="checkValidity" type="void" line="577">
                <params>
                    <param name="date" type="Date"/>
                </params>
                <declaration name="interval" type="CertificateValidity" line="579"/>
                <scope line="580"/>
                <scope line="582"/>
            </method>
            <javadoc line="590">
                Return the requested attribute from the certificate.
                  Note that the X509CertInfo is not cloned for performance reasons.
                  Callers must ensure that they do not modify it. All other
                  attributes are cloned.                
                <param>
                    name the name of the attribute.                    
                </param>
                <exception>
                    CertificateParsingException on invalid attribute identifier.                    
                </exception>
            </javadoc>
            <method name="get" type="Object" line="601">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="attr" type="X509AttributeName" line="602"/>
                <declaration name="id" type="String" line="603"/>
                <scope line="604"/>
                <scope line="612">
                    <scope line="613"/>
                    <scope line="616">
                        <scope line="617"/>
                        <scope line="619"/>
                        <scope line="621"/>
                    </scope>
                    <scope line="624"/>
                </scope>
                <scope line="627"/>
                <scope line="629"/>
                <scope line="634"/>
                <scope line="639"/>
            </method>
            <javadoc line="645">
                Set the requested attribute in the certificate.                
                <param>
                    name the name of the attribute.                    
                </param>
                <param>
                    obj the value of the attribute.                    
                </param>
                <exception>
                    CertificateException on invalid attribute identifier.                    
                </exception>
                <exception>
                    IOException on encoding error of attribute.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="654">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="656">
                    check if immutable                    
                </comment>
                <comment line="677">
                    reset this as certificate data has changed                    
                </comment>
                <comment line="680">
                    reset this as certificate data has changed                    
                </comment>
                <declaration name="attr" type="X509AttributeName" line="660"/>
                <declaration name="id" type="String" line="661"/>
                <scope line="662"/>
                <scope line="669">
                    <scope line="670">
                        <scope line="671"/>
                    </scope>
                    <scope line="677"/>
                </scope>
                <scope line="681"/>
            </method>
            <javadoc line="687">
                Delete the requested attribute from the certificate.                
                <param>
                    name the name of the attribute.                    
                </param>
                <exception>
                    CertificateException on invalid attribute identifier.                    
                </exception>
                <exception>
                    IOException on other errors.                    
                </exception>
            </javadoc>
            <method name="delete" type="void" line="695">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="697">
                    check if immutable                    
                </comment>
                <declaration name="attr" type="X509AttributeName" line="701"/>
                <declaration name="id" type="String" line="702"/>
                <scope line="703"/>
                <scope line="711">
                    <scope line="712"/>
                    <scope line="714"/>
                </scope>
                <scope line="717"/>
                <scope line="719"/>
                <scope line="721"/>
                <scope line="723"/>
            </method>
            <javadoc line="729">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration<String>" line="733">
                <declaration name="elements" type="AttributeNameEnumeration" line="734"/>
            </method>
            <javadoc line="743">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="746"/>
            <javadoc line="750">
                Returns a printable representation of the certificate.  This does not
                  contain all the information available to distinguish this from any
                  other certificate.  The certificate must be fully constructed
                  before this function may be called.                
            </javadoc>
            <method name="toString" type="String" line="756">
                <declaration name="sb" type="StringBuilder" line="760"/>
                <declaration name="encoder" type="HexDumpEncoder" line="766"/>
            </method>
            <javadoc line="775">
                Gets the publickey from this certificate.                
                <return>
                    the publickey.                    
                </return>
            </javadoc>
            <method name="getPublicKey" type="PublicKey" line="780">
                <scope line="783">
                    <declaration name="key" type="PublicKey" line="784"/>
                </scope>
                <scope line="787"/>
            </method>
            <javadoc line="792">
                Gets the version number from the certificate.                
                <return>
                    the version number, i.e. 1, 2 or 3.                    
                </return>
            </javadoc>
            <method name="getVersion" type="int" line="797">
                <scope line="800">
                    <declaration name="vers" type="int" line="801"/>
                </scope>
                <scope line="804"/>
            </method>
            <javadoc line="809">
                Gets the serial number from the certificate.                
                <return>
                    the serial number.                    
                </return>
            </javadoc>
            <method name="getSerialNumber" type="BigInteger" line="814">
                <declaration name="ser" type="SerialNumber" line="815"/>
            </method>
            <javadoc line="820">
                Gets the serial number from the certificate as
                  a SerialNumber object.                
                <return>
                    the serial number.                    
                </return>
            </javadoc>
            <method name="getSerialNumberObject" type="SerialNumber" line="826">
                <scope line="829">
                    <declaration name="ser" type="SerialNumber" line="830"/>
                </scope>
                <scope line="834"/>
            </method>
            <javadoc line="840">
                Gets the subject distinguished name from the certificate.                
                <return>
                    the subject name.                    
                </return>
            </javadoc>
            <method name="getSubjectDN" type="Principal" line="845">
                <scope line="848">
                    <declaration name="subject" type="Principal" line="849"/>
                </scope>
                <scope line="853"/>
            </method>
            <javadoc line="858">
                Get subject name as X500Principal. Overrides implementation in
                  X509Certificate with a slightly more efficient version that is
                  also aware of X509CertImpl mutability.                
            </javadoc>
            <method name="getSubjectX500Principal" type="X500Principal" line="863">
                <scope line="864"/>
                <scope line="867">
                    <declaration name="subject" type="X500Principal" line="868"/>
                </scope>
                <scope line="872"/>
            </method>
            <javadoc line="877">
                Gets the issuer distinguished name from the certificate.                
                <return>
                    the issuer name.                    
                </return>
            </javadoc>
            <method name="getIssuerDN" type="Principal" line="882">
                <scope line="885">
                    <declaration name="issuer" type="Principal" line="886"/>
                </scope>
                <scope line="890"/>
            </method>
            <javadoc line="895">
                Get issuer name as X500Principal. Overrides implementation in
                  X509Certificate with a slightly more efficient version that is
                  also aware of X509CertImpl mutability.                
            </javadoc>
            <method name="getIssuerX500Principal" type="X500Principal" line="900">
                <scope line="901"/>
                <scope line="904">
                    <declaration name="issuer" type="X500Principal" line="905"/>
                </scope>
                <scope line="909"/>
            </method>
            <javadoc line="914">
                Gets the notBefore date from the validity period of the certificate.                
                <return>
                    the start date of the validity period.                    
                </return>
            </javadoc>
            <method name="getNotBefore" type="Date" line="919">
                <scope line="922">
                    <declaration name="d" type="Date" line="923"/>
                </scope>
                <scope line="926"/>
            </method>
            <javadoc line="931">
                Gets the notAfter date from the validity period of the certificate.                
                <return>
                    the end date of the validity period.                    
                </return>
            </javadoc>
            <method name="getNotAfter" type="Date" line="936">
                <scope line="939">
                    <declaration name="d" type="Date" line="940"/>
                </scope>
                <scope line="943"/>
            </method>
            <javadoc line="948">
                Gets the DER encoded certificate informations, the
                  &lt;code&gt;tbsCertificate&lt;/code&gt; from this certificate.
                  This can be used to verify the signature independently.                
                <return>
                    the DER encoded certificate information.                    
                </return>
                <exception>
                    CertificateEncodingException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="getTBSCertificate" type="byte[]" line="956">
                <scope line="957"/>
            </method>
            <javadoc line="963">
                Gets the raw Signature bits from the certificate.                
                <return>
                    the signature.                    
                </return>
            </javadoc>
            <method name="getSignature" type="byte[]" line="968">
                <declaration name="dup" type="byte[]" line="971"/>
            </method>
            <javadoc line="976">
                Gets the signature algorithm name for the certificate
                  signature algorithm.
                  For example, the string &quot;SHA-1/DSA&quot; or &quot;DSS&quot;.                
                <return>
                    the signature algorithm name.                    
                </return>
            </javadoc>
            <method name="getSigAlgName" type="String" line="983"/>
            <javadoc line="989">
                Gets the signature algorithm OID string from the certificate.
                  For example, the string &quot;1.2.840.10040.4.3&quot;                
                <return>
                    the signature algorithm oid string.                    
                </return>
            </javadoc>
            <method name="getSigAlgOID" type="String" line="995">
                <declaration name="oid" type="ObjectIdentifier" line="998"/>
            </method>
            <javadoc line="1002">
                Gets the DER encoded signature algorithm parameters from this
                  certificate&apos;s signature algorithm.                
                <return>
                    the DER encoded signature algorithm parameters, or
                      null if no parameters are present.                    
                </return>
            </javadoc>
            <method name="getSigAlgParams" type="byte[]" line="1009">
                <scope line="1012"/>
                <scope line="1014"/>
            </method>
            <javadoc line="1019">
                Gets the Issuer Unique Identity from the certificate.                
                <return>
                    the Issuer Unique Identity.                    
                </return>
            </javadoc>
            <method name="getIssuerUniqueID" type="boolean[]" line="1024">
                <scope line="1027">
                    <declaration name="id" type="UniqueIdentity" line="1028"/>
                </scope>
                <scope line="1035"/>
            </method>
            <javadoc line="1040">
                Gets the Subject Unique Identity from the certificate.                
                <return>
                    the Subject Unique Identity.                    
                </return>
            </javadoc>
            <method name="getSubjectUniqueID" type="boolean[]" line="1045">
                <scope line="1048">
                    <declaration name="id" type="UniqueIdentity" line="1049"/>
                </scope>
                <scope line="1056"/>
            </method>
            <javadoc line="1061">
                Get AuthorityKeyIdentifier extension                
                <return>
                    AuthorityKeyIdentifier object or null (if no such object
                      in certificate)                    
                </return>
            </javadoc>
            <method name="getAuthorityKeyIdentifierExtension" type="AuthorityKeyIdentifierExtension" line="1067"/>
            <javadoc line="1072">
                Get BasicConstraints extension                
                <return>
                    BasicConstraints object or null (if no such object in
                      certificate)                    
                </return>
            </javadoc>
            <method name="getBasicConstraintsExtension" type="BasicConstraintsExtension" line="1077"/>
            <javadoc line="1082">
                Get CertificatePoliciesExtension                
                <return>
                    CertificatePoliciesExtension or null (if no such object in
                      certificate)                    
                </return>
            </javadoc>
            <method name="getCertificatePoliciesExtension" type="CertificatePoliciesExtension" line="1087"/>
            <javadoc line="1092">
                Get ExtendedKeyUsage extension                
                <return>
                    ExtendedKeyUsage extension object or null (if no such object
                      in certificate)                    
                </return>
            </javadoc>
            <method name="getExtendedKeyUsageExtension" type="ExtendedKeyUsageExtension" line="1097"/>
            <javadoc line="1102">
                Get IssuerAlternativeName extension                
                <return>
                    IssuerAlternativeName object or null (if no such object in
                      certificate)                    
                </return>
            </javadoc>
            <method name="getIssuerAlternativeNameExtension" type="IssuerAlternativeNameExtension" line="1107"/>
            <javadoc line="1112">
                Get NameConstraints extension                
                <return>
                    NameConstraints object or null (if no such object in certificate)                    
                </return>
            </javadoc>
            <method name="getNameConstraintsExtension" type="NameConstraintsExtension" line="1116"/>
            <javadoc line="1121">
                Get PolicyConstraints extension                
                <return>
                    PolicyConstraints object or null (if no such object in
                      certificate)                    
                </return>
            </javadoc>
            <method name="getPolicyConstraintsExtension" type="PolicyConstraintsExtension" line="1126"/>
            <javadoc line="1131">
                Get PolicyMappingsExtension extension                
                <return>
                    PolicyMappingsExtension object or null (if no such object
                      in certificate)                    
                </return>
            </javadoc>
            <method name="getPolicyMappingsExtension" type="PolicyMappingsExtension" line="1136"/>
            <javadoc line="1141">
                Get PrivateKeyUsage extension                
                <return>
                    PrivateKeyUsage object or null (if no such object in certificate)                    
                </return>
            </javadoc>
            <method name="getPrivateKeyUsageExtension" type="PrivateKeyUsageExtension" line="1145"/>
            <javadoc line="1150">
                Get SubjectAlternativeName extension                
                <return>
                    SubjectAlternativeName object or null (if no such object in
                      certificate)                    
                </return>
            </javadoc>
            <method name="getSubjectAlternativeNameExtension" type="SubjectAlternativeNameExtension" line="1156"/>
            <javadoc line="1161">
                Get SubjectKeyIdentifier extension                
                <return>
                    SubjectKeyIdentifier object or null (if no such object in
                      certificate)                    
                </return>
            </javadoc>
            <method name="getSubjectKeyIdentifierExtension" type="SubjectKeyIdentifierExtension" line="1166"/>
            <javadoc line="1171">
                Get CRLDistributionPoints extension                
                <return>
                    CRLDistributionPoints object or null (if no such object in
                      certificate)                    
                </return>
            </javadoc>
            <method name="getCRLDistributionPointsExtension" type="CRLDistributionPointsExtension" line="1176"/>
            <javadoc line="1181">
                Return true if a critical extension is found that is
                  not supported, otherwise return false.                
            </javadoc>
            <method name="hasUnsupportedCriticalExtension" type="boolean" line="1185">
                <scope line="1188">
                    <declaration name="exts" type="CertificateExtensions" line="1189"/>
                </scope>
                <scope line="1194"/>
            </method>
            <javadoc line="1199">
                Gets a Set of the extension(s) marked CRITICAL in the
                  certificate. In the returned set, each extension is
                  represented by its OID string.                
                <return>
                    a set of the extension oid strings in the
                      certificate that are marked critical.                    
                </return>
            </javadoc>
            <method name="getCriticalExtensionOIDs" type="Set<String>" line="1207">
                <scope line="1208"/>
                <scope line="1211">
                    <declaration name="exts" type="CertificateExtensions" line="1212"/>
                    <scope line="1214"/>
                    <declaration name="extSet" type="Set&lt;String&gt;" line="1217"/>
                    <scope line="1218">
                        <scope line="1219"/>
                    </scope>
                </scope>
                <scope line="1224"/>
            </method>
            <javadoc line="1229">
                Gets a Set of the extension(s) marked NON-CRITICAL in the
                  certificate. In the returned set, each extension is
                  represented by its OID string.                
                <return>
                    a set of the extension oid strings in the
                      certificate that are NOT marked critical.                    
                </return>
            </javadoc>
            <method name="getNonCriticalExtensionOIDs" type="Set<String>" line="1237">
                <scope line="1238"/>
                <scope line="1241">
                    <declaration name="exts" type="CertificateExtensions" line="1242"/>
                    <scope line="1244"/>
                    <declaration name="extSet" type="Set&lt;String&gt;" line="1247"/>
                    <scope line="1248">
                        <scope line="1249"/>
                    </scope>
                </scope>
                <scope line="1255"/>
            </method>
            <javadoc line="1260">
                Gets the extension identified by the given ObjectIdentifier                
                <param>
                    oid the Object Identifier value for the extension.                    
                </param>
                <return>
                    Extension or null if certificate does not contain this
                      extension                    
                </return>
            </javadoc>
            <method name="getExtension" type="Extension" line="1267">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
                <comment line="1284">
                    XXXX May want to consider cloning this                    
                </comment>
                <comment line="1288">
                                        
                </comment>
                <scope line="1268"/>
                <scope line="1271">
                    <declaration name="extensions" type="CertificateExtensions" line="1272"/>
                    <scope line="1273"/>
                    <scope line="1275"/>
                    <scope line="1278"/>
                    <scope line="1280">
                        <scope line="1281">
                            <scope line="1282"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1290"/>
            </method>
            <method name="getUnparseableExtension" type="Extension" line="1295">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
                <scope line="1296"/>
                <scope line="1299">
                    <declaration name="extensions" type="CertificateExtensions" line="1300"/>
                    <scope line="1301"/>
                    <scope line="1303"/>
                    <scope line="1306"/>
                    <scope line="1308"/>
                </scope>
                <scope line="1311"/>
            </method>
            <javadoc line="1316">
                Gets the DER encoded extension identified by the given
                  oid String.                
                <param>
                    oid the Object Identifier value for the extension.                    
                </param>
            </javadoc>
            <method name="getExtensionValue" type="byte[]" line="1322">
                <params>
                    <param name="oid" type="String"/>
                </params>
                <comment line="1331">
                    may be unknown                    
                </comment>
                <comment line="1332">
                    get the extensions, search thru&apos; for this oid                    
                </comment>
                <comment line="1344">
                    there&apos;s sub-class that can handle this extension                    
                </comment>
                <comment line="1348">
                    get() throws an Exception instead of returning null, ignore                    
                </comment>
                <scope line="1323">
                    <declaration name="findOID" type="ObjectIdentifier" line="1324"/>
                    <declaration name="extAlias" type="String" line="1325"/>
                    <declaration name="certExt" type="Extension" line="1326"/>
                    <declaration name="exts" type="CertificateExtensions" line="1327"/>
                    <scope line="1330">
                        <scope line="1332"/>
                        <scope line="1336">
                            <declaration name="inCertOID" type="ObjectIdentifier" line="1337"/>
                            <scope line="1338"/>
                        </scope>
                    </scope>
                    <scope line="1343">
                        <scope line="1344"/>
                        <scope line="1346"/>
                    </scope>
                    <scope line="1350">
                        <scope line="1351"/>
                        <scope line="1354"/>
                    </scope>
                    <declaration name="extData" type="byte[]" line="1358"/>
                    <scope line="1359"/>
                    <declaration name="out" type="DerOutputStream" line="1362"/>
                </scope>
                <scope line="1365"/>
            </method>
            <javadoc line="1370">
                Get a boolean array representing the bits of the KeyUsage extension,
                  (oid = 2.5.29.15).                
                <return>
                    the bit values of this extension as an array of booleans.                    
                </return>
            </javadoc>
            <method name="getKeyUsage" type="boolean[]" line="1375">
                <scope line="1376">
                    <declaration name="extAlias" type="String" line="1377"/>
                    <declaration name="certExt" type="KeyUsageExtension" line="1381"/>
                    <declaration name="ret" type="boolean[]" line="1385"/>
                    <scope line="1386">
                        <declaration name="usageBits" type="boolean[]" line="1387"/>
                    </scope>
                </scope>
                <scope line="1392"/>
            </method>
            <javadoc line="1397">
                This method are the overridden implementation of
                  getExtendedKeyUsage method in X509Certificate in the Sun
                  provider. It is better performance-wise since it returns cached
                  values.                
            </javadoc>
            <method name="getExtendedKeyUsage" type="List<String>" line="1404">
                <scope line="1405"/>
                <scope line="1407">
                    <declaration name="ext" type="ExtendedKeyUsageExtension" line="1408"/>
                    <scope line="1409"/>
                </scope>
            </method>
            <javadoc line="1418">
                This static method is the default implementation of the
                  getExtendedKeyUsage method in X509Certificate. A
                  X509Certificate provider generally should overwrite this to
                  provide among other things caching for better performance.                
            </javadoc>
            <method name="getExtendedKeyUsage" type="List<String>" line="1425">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="1426">
                    <declaration name="ext" type="byte[]" line="1427"/>
                    <declaration name="val" type="DerValue" line="1430"/>
                    <declaration name="data" type="byte[]" line="1431"/>
                    <declaration name="ekuExt" type="ExtendedKeyUsageExtension" line="1433"/>
                </scope>
                <scope line="1436">
                    <declaration name="cpe" type="CertificateParsingException" line="1437"/>
                </scope>
            </method>
            <javadoc line="1444">
                Get the certificate constraints path length from the
                  the critical BasicConstraints extension, (oid = 2.5.29.19).                
                <return>
                    the length of the constraint.                    
                </return>
            </javadoc>
            <method name="getBasicConstraints" type="int" line="1449">
                <scope line="1450">
                    <declaration name="extAlias" type="String" line="1451"/>
                    <declaration name="certExt" type="BasicConstraintsExtension" line="1454"/>
                </scope>
                <scope line="1465"/>
            </method>
            <javadoc line="1470">
                Converts a GeneralNames structure into an immutable Collection of
                  alternative names (subject or issuer) in the form required by{@link #getSubjectAlternativeNames} or{@link #getIssuerAlternativeNames}.                
                <param>
                    names the GeneralNames to be converted                    
                </param>
                <return>
                    an immutable Collection of alternative names                    
                </return>
            </javadoc>
            <method name="makeAltNames" type="Collection<List<?>>" line="1479">
                <params>
                    <param name="names" type="GeneralNames"/>
                </params>
                <comment line="1506">
                    IPAddressName in cert is bogus                    
                </comment>
                <comment line="1515">
                    add DER encoded form                    
                </comment>
                <comment line="1520">
                    should not occur since name has already been decoded
                     from cert (this would indicate a bug in our code)                    
                </comment>
                <scope line="1480"/>
                <declaration name="newNames" type="Set&lt;List&lt;?&gt;&gt;" line="1483"/>
                <scope line="1484">
                    <declaration name="name" type="GeneralNameInterface" line="1485"/>
                    <declaration name="nameEntry" type="List&lt;Object&gt;" line="1486"/>
                    <scope line="1502"/>
                    <scope line="1504"/>
                    <declaration name="derOut" type="DerOutputStream" line="1515"/>
                    <scope line="1516"/>
                    <scope line="1518"/>
                </scope>
            </method>
            <javadoc line="1531">
                Checks a Collection of altNames and clones any name entries of type
                  byte [].                
            </javadoc>
            <method name="cloneAltNames" type="Collection<List<?>>" line="1535">
                <params>
                    <param name="altNames" type="Collection<List<?>>"/>
                </params>
                <comment line="1535">
                    only partially generified due to javac bug                    
                </comment>
                <comment line="1540">
                    must clone names                    
                </comment>
                <declaration name="mustClone" type="boolean" line="1536"/>
                <scope line="1537">
                    <scope line="1538"/>
                </scope>
                <scope line="1543">
                    <declaration name="namesCopy" type="Set&lt;List&lt;?&gt;&gt;" line="1544"/>
                    <scope line="1545">
                        <declaration name="nameObject" type="Object" line="1546"/>
                        <scope line="1547">
                            <declaration name="nameEntryCopy" type="List&lt;Object&gt;" line="1548"/>
                        </scope>
                        <scope line="1552"/>
                    </scope>
                </scope>
                <scope line="1557"/>
            </method>
            <javadoc line="1562">
                This method are the overridden implementation of
                  getSubjectAlternativeNames method in X509Certificate in the Sun
                  provider. It is better performance-wise since it returns cached
                  values.                
            </javadoc>
            <method name="getSubjectAlternativeNames" type="Collection<List<?>>" line="1569">
                <comment line="1571">
                    return cached value if we can                    
                </comment>
                <comment line="1585">
                    should not occur                    
                </comment>
                <scope line="1571"/>
                <declaration name="subjectAltNameExt" type="SubjectAlternativeNameExtension" line="1574"/>
                <scope line="1576"/>
                <declaration name="names" type="GeneralNames" line="1579"/>
                <scope line="1580"/>
                <scope line="1583"/>
            </method>
            <javadoc line="1591">
                This static method is the default implementation of the
                  getSubjectAlternaitveNames method in X509Certificate. A
                  X509Certificate provider generally should overwrite this to
                  provide among other things caching for better performance.                
            </javadoc>
            <method name="getSubjectAlternativeNames" type="Collection<List<?>>" line="1598">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="1617">
                    should not occur                    
                </comment>
                <scope line="1599">
                    <declaration name="ext" type="byte[]" line="1600"/>
                    <scope line="1601"/>
                    <declaration name="val" type="DerValue" line="1604"/>
                    <declaration name="data" type="byte[]" line="1605"/>
                    <declaration name="subjectAltNameExt" type="SubjectAlternativeNameExtension" line="1607"/>
                    <declaration name="names" type="GeneralNames" line="1611"/>
                    <scope line="1612"/>
                    <scope line="1615"/>
                </scope>
                <scope line="1620">
                    <declaration name="cpe" type="CertificateParsingException" line="1621"/>
                </scope>
            </method>
            <javadoc line="1628">
                This method are the overridden implementation of
                  getIssuerAlternativeNames method in X509Certificate in the Sun
                  provider. It is better performance-wise since it returns cached
                  values.                
            </javadoc>
            <method name="getIssuerAlternativeNames" type="Collection<List<?>>" line="1635">
                <comment line="1637">
                    return cached value if we can                    
                </comment>
                <comment line="1651">
                    should not occur                    
                </comment>
                <scope line="1637"/>
                <declaration name="issuerAltNameExt" type="IssuerAlternativeNameExtension" line="1640"/>
                <scope line="1642"/>
                <declaration name="names" type="GeneralNames" line="1645"/>
                <scope line="1646"/>
                <scope line="1649"/>
            </method>
            <javadoc line="1657">
                This static method is the default implementation of the
                  getIssuerAlternaitveNames method in X509Certificate. A
                  X509Certificate provider generally should overwrite this to
                  provide among other things caching for better performance.                
            </javadoc>
            <method name="getIssuerAlternativeNames" type="Collection<List<?>>" line="1664">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="1683">
                    should not occur                    
                </comment>
                <scope line="1665">
                    <declaration name="ext" type="byte[]" line="1666"/>
                    <scope line="1667"/>
                    <declaration name="val" type="DerValue" line="1671"/>
                    <declaration name="data" type="byte[]" line="1672"/>
                    <declaration name="issuerAltNameExt" type="IssuerAlternativeNameExtension" line="1674"/>
                    <declaration name="names" type="GeneralNames" line="1677"/>
                    <scope line="1678"/>
                    <scope line="1681"/>
                </scope>
                <scope line="1686">
                    <declaration name="cpe" type="CertificateParsingException" line="1687"/>
                </scope>
            </method>
            <method name="getAuthorityInfoAccessExtension" type="AuthorityInfoAccessExtension" line="1694"/>
            <javadoc line="1699">
                                
            </javadoc>
            <method name="parse" type="void" line="1712">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
                <comment line="1702">
                    Cert is a SIGNED ASN.1 macro, a three elment sequence:
                    
                      - Data to be signed (ToBeSigned) -- the &quot;raw&quot; cert
                      - Signature algorithm (SigAlgId)
                      - The signature bits
                    
                     This routine unmarshals the certificate, saving the signature
                     parts away for later verification.                    
                </comment>
                <comment line="1714">
                    check if can over write the certificate                    
                </comment>
                <comment line="1747">
                    The CertificateInfo                    
                </comment>
                <comment line="1750">
                    the &quot;inner&quot; and &quot;outer&quot; signature algorithms must match                    
                </comment>
                <declaration name="seq" type="DerValue[]" line="1723"/>
                <scope line="1729"/>
                <scope line="1733"/>
                <scope line="1740"/>
                <declaration name="infoSigAlg" type="AlgorithmId" line="1750"/>
            </method>
            <javadoc line="1759">
                Extract the subject or issuer X500Principal from an X509Certificate.
                  Parses the encoded form of the cert to preserve the principal&apos;s
                  ASN.1 encoding.                
            </javadoc>
            <method name="getX500Principal" type="X500Principal" line="1765">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="getIssuer" type="boolean"/>
                </params>
                <comment line="1773">
                    skip version number if present                    
                </comment>
                <comment line="1777">
                    tmp always contains serial number now                    
                </comment>
                <comment line="1778">
                    skip signature                    
                </comment>
                <comment line="1779">
                    issuer                    
                </comment>
                <comment line="1781">
                    skip validity                    
                </comment>
                <comment line="1782">
                    subject                    
                </comment>
                <declaration name="encoded" type="byte[]" line="1766"/>
                <declaration name="derIn" type="DerInputStream" line="1767"/>
                <declaration name="tbsCert" type="DerValue" line="1768"/>
                <declaration name="tbsIn" type="DerInputStream" line="1769"/>
                <declaration name="tmp" type="DerValue" line="1770"/>
                <scope line="1773"/>
                <scope line="1779"/>
                <declaration name="principalBytes" type="byte[]" line="1783"/>
            </method>
            <javadoc line="1787">
                Extract the subject X500Principal from an X509Certificate.
                  Called from java.security.cert.X509Certificate.getSubjectX500Principal().                
            </javadoc>
            <method name="getSubjectX500Principal" type="X500Principal" line="1791">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="1792"/>
                <scope line="1794"/>
            </method>
            <javadoc line="1799">
                Extract the issuer X500Principal from an X509Certificate.
                  Called from java.security.cert.X509Certificate.getIssuerX500Principal().                
            </javadoc>
            <method name="getIssuerX500Principal" type="X500Principal" line="1803">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="1804"/>
                <scope line="1806"/>
            </method>
            <javadoc line="1811">
                Returned the encoding of the given certificate for internal use.
                  Callers must guarantee that they neither modify it nor expose it
                  to untrusted code. Uses getEncodedInternal() if the certificate
                  is instance of X509CertImpl, getEncoded() otherwise.                
            </javadoc>
            <method name="getEncodedInternal" type="byte[]" line="1818">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="1819"/>
                <scope line="1821"/>
            </method>
            <javadoc line="1826">
                Utility method to convert an arbitrary instance of X509Certificate
                  to a X509CertImpl. Does a cast if possible, otherwise reparses
                  the encoding.                
            </javadoc>
            <method name="toImpl" type="X509CertImpl" line="1832">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="1833"/>
                <scope line="1835"/>
            </method>
            <javadoc line="1840">
                Utility method to test if a certificate is self-issued. This is
                  the case iff the subject and issuer X500Principals are equal.                
            </javadoc>
            <method name="isSelfIssued" type="boolean" line="1844">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <declaration name="subject" type="X500Principal" line="1845"/>
                <declaration name="issuer" type="X500Principal" line="1846"/>
            </method>
            <javadoc line="1850">
                Utility method to test if a certificate is self-signed. This is
                  the case iff the subject and issuer X500Principals are equal
                  AND the certificate&apos;s subject public key can be used to verify
                  the certificate. In case of exception, returns false.                
            </javadoc>
            <method name="isSelfSigned" type="boolean" line="1857">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="sigProvider" type="String"/>
                </params>
                <comment line="1868">
                    In case of exception, return false                    
                </comment>
                <scope line="1858">
                    <scope line="1859">
                        <scope line="1860"/>
                        <scope line="1862"/>
                    </scope>
                    <scope line="1866"/>
                </scope>
            </method>
        </class>
    </source>