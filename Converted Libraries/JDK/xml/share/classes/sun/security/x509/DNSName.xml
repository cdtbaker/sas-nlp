<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.util.Locale"/>
        <import package="sun.security.util"/>
        <class name="DNSName" line="5">
            <implements interface="GeneralNameInterface"/>
            <javadoc line="5">
                This class implements the DNSName as required by the GeneralNames
                  ASN.1 object.
                  &lt;p&gt;
                  [RFC2459] When the subjectAltName extension contains a domain name service
                  label, the domain name MUST be stored in the dNSName (an IA5String).
                  The name MUST be in the &quot;preferred name syntax,&quot; as specified by RFC
                  1034 [RFC 1034]. Note that while upper and lower case letters are
                  allowed in domain names, no signifigance is attached to the case.  In
                  addition, while the string &quot; &quot; is a legal domain name, subjectAltName
                  extensions with a dNSName &quot; &quot; are not permitted.  Finally, the use of
                  the DNS representation for Internet mail addresses (wpolk.nist.gov
                  instead of wpolk@nist.gov) is not permitted; such identities are to
                  be encoded as rfc822Name.
                  &lt;p&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="24"/>
            <declaration name="alpha" type="String" line="25"/>
            <declaration name="digitsAndHyphen" type="String" line="26"/>
            <declaration name="alphaDigitsAndHyphen" type="String" line="27"/>
            <javadoc line="28">
                Create the DNSName object from the passed encoded Der value.                
                <param>
                    derValue the encoded DER DNSName.                    
                </param>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="DNSName" type="constructor" line="33">
                <params>
                    <param name="derValue" type="DerValue"/>
                </params>
            </method>
            <javadoc line="36">
                Create the DNSName object with the specified name.                
                <param>
                    name the DNSName.                    
                </param>
                <throws>
                    IOException if the name is not a valid DNSName subjectAltName                    
                </throws>
            </javadoc>
            <method name="DNSName" type="constructor" line="41">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="45">
                    <scope line="47"/>
                    <scope line="52">
                        <declaration name="x" type="char" line="53"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="59">
                Return the type of the GeneralName.                
            </javadoc>
            <method name="getType" type="int" line="62"/>
            <javadoc line="65">
                Return the actual name value of the GeneralName.                
            </javadoc>
            <method name="getName" type="String" line="68"/>
            <javadoc line="71">
                Encode the DNS name into the DerOutputStream.                
                <param>
                    out the DER stream to encode the DNSName to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="76">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="79">
                Convert the name into user readable string.                
            </javadoc>
            <method name="toString" type="String" line="82"/>
            <javadoc line="85">
                Compares this name with another, for equality.                
                <return>
                    true iff the names are equivalent
                      according to RFC2459.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="90">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="DNSName" line="93"/>
            </method>
            <javadoc line="96">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="100"/>
            <javadoc line="103">
                Return type of constraint inputName places on this name:&lt;ul&gt;
                  &lt;li&gt;NAME_DIFF_TYPE = -1: input name is different type from name (i.e. does not constrain).
                  &lt;li&gt;NAME_MATCH = 0: input name matches name.
                  &lt;li&gt;NAME_NARROWS = 1: input name narrows name (is lower in the naming subtree)
                  &lt;li&gt;NAME_WIDENS = 2: input name widens name (is higher in the naming subtree)
                  &lt;li&gt;NAME_SAME_TYPE = 3: input name does not match or narrow name, but is same type.
                  &lt;/ul&gt;.  These results are used in checking NameConstraints during
                  certification path verification.
                  &lt;p&gt;
                  RFC2459: DNS name restrictions are expressed as foo.bar.com. Any subdomain
                  satisfies the name constraint. For example, www.foo.bar.com would
                  satisfy the constraint but bigfoo.bar.com would not.
                  &lt;p&gt;
                  draft-ietf-pkix-new-part1-00.txt:  DNS name restrictions are expressed as foo.bar.com.
                  Any DNS name that
                  can be constructed by simply adding to the left hand side of the name
                  satisfies the name constraint. For example, www.foo.bar.com would
                  satisfy the constraint but foo1.bar.com would not.
                  &lt;p&gt;
                  RFC1034: By convention, domain names can be stored with arbitrary case, but
                  domain name comparisons for all present domain functions are done in a
                  case-insensitive manner, assuming an ASCII character set, and a high
                  order zero bit.
                  &lt;p&gt;                
                <param>
                    inputName to be checked for being constrained                    
                </param>
                <returns>
                    constraint type above                    
                </returns>
                <throws>
                    UnsupportedOperationException if name is not exact match, but narrowing and widening are
                      not supported for this name type.                    
                </throws>
            </javadoc>
            <method name="constrains" type="int" line="133">
                <params>
                    <param name="inputName" type="GeneralNameInterface"/>
                </params>
                <declaration name="constraintType" type="int" line="134"/>
                <scope line="137">
                    <declaration name="inName" type="String" line="138"/>
                    <declaration name="thisName" type="String" line="139"/>
                    <scope line="141">
                        <declaration name="inNdx" type="int" line="142"/>
                    </scope>
                    <scope line="146">
                        <declaration name="ndx" type="int" line="147"/>
                    </scope>
                    <scope line="151"/>
                </scope>
            </method>
            <javadoc line="157">
                Return subtree depth of this name for purposes of determining
                  NameConstraints minimum and maximum bounds and for calculating
                  path lengths in name subtrees.                
                <returns>
                    distance of name from root                    
                </returns>
                <throws>
                    UnsupportedOperationException if not supported for this name type                    
                </throws>
            </javadoc>
            <method name="subtreeDepth" type="int" line="164">
                <declaration name="subtree" type="String" line="165"/>
                <declaration name="i" type="int" line="166"/>
                <scope line="167"/>
            </method>
        </class>
    </source>