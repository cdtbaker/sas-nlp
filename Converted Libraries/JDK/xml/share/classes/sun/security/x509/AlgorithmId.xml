<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="sun.security.util"/>
        <class name="AlgorithmId" line="35">
            <comment line="69">
                The (parsed) parameters                
            </comment>
            <comment line="447">
                Translates from some common algorithm names to the
                 OID with which they&apos;re usually associated ... this mapping
                 is the reverse of the one below, except in those cases
                 where synonyms are supported or where a given algorithm
                 is commonly associated with multiple OIDs.
                
                 XXX This method needs to be enhanced so that we can also pass the
                 scope of the algorithm name to it, e.g., the algorithm name &quot;DSA&quot;
                 may have a different OID when used as a &quot;Signature&quot; algorithm than when
                 used as a &quot;KeyPairGenerator&quot; algorithm.                
            </comment>
            <comment line="600">
                                
            </comment>
            <comment line="602">
                HASHING ALGORITHMS                
            </comment>
            <comment line="638">
                COMMON PUBLIC KEY TYPES                
            </comment>
            <comment line="657">
                COMMON SIGNATURE ALGORITHMS                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="DerEncoder"/>
            <javadoc line="35">
                This class identifies algorithms, such as cryptographic transforms, each
                  of which may be associated with parameters.  Instances of this base class
                  are used when this runtime environment has no special knowledge of the
                  algorithm type, and may also be used in other cases.  Equivalence is
                  defined according to OID and (where relevant) parameters.
                  &lt;P&gt;Subclasses may be used, for example when when the algorithm ID has
                  associated parameters which some code (e.g. code using public keys) needs
                  to have parsed.  Two examples of such algorithms are Diffie-Hellman key
                  exchange, and the Digital Signature Standard Algorithm (DSS/DSA).
                  &lt;P&gt;The OID constants defined in this class correspond to some widely
                  used algorithms, for which conventional string names have been defined.
                  This class is not a general repository for OIDs, or for such string names.
                  Note that the mappings between algorithm IDs and algorithm names is
                  not one-to-one.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="60"/>
            <javadoc line="60">
                use serialVersionUID from JDK 1.1. for interoperability                
            </javadoc>
            <declaration name="algid" type="ObjectIdentifier" line="63"/>
            <javadoc line="63">
                The object identitifer being used for this algorithm.                
            </javadoc>
            <declaration name="algParams" type="AlgorithmParameters" line="69"/>
            <declaration name="constructedFromDer" type="boolean" line="70"/>
            <declaration name="params" type="DerValue" line="72"/>
            <javadoc line="72">
                Parameters for this algorithm.  These are stored in unparsed
                  DER-encoded form; subclasses can be made to automaticaly parse
                  them so there is fast access to these parameters.                
            </javadoc>
            <javadoc line="80">
                Constructs an algorithm ID which will be initialized
                  separately, for example by deserialization.                
                <deprecated>
                    use one of the other constructors.                    
                </deprecated>
            </javadoc>
            <method name="AlgorithmId" type="constructor" line="86"/>
            <javadoc line="88">
                Constructs a parameterless algorithm ID.                
                <param>
                    oid the identifier for the algorithm                    
                </param>
            </javadoc>
            <method name="AlgorithmId" type="constructor" line="93">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
            </method>
            <javadoc line="97">
                Constructs an algorithm ID with algorithm parameters.                
                <param>
                    oid the identifier for the algorithm.                    
                </param>
                <param>
                    algparams the associated algorithm parameters.                    
                </param>
            </javadoc>
            <method name="AlgorithmId" type="constructor" line="103">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="algparams" type="AlgorithmParameters"/>
                </params>
            </method>
            <method name="AlgorithmId" type="constructor" line="110">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="params" type="DerValue"/>
                </params>
                <scope line="113"/>
            </method>
            <method name="decodeParams" type="void" line="118">
                <comment line="125">
                    Try the internal EC code so that we can fully parse EC
                     keys even if the provider is not registered.
                     This code can go away once we have EC in the SUN provider.                    
                </comment>
                <comment line="131">
                    This algorithm parameter type is not supported, so we cannot
                     parse the parameters.                    
                </comment>
                <comment line="139">
                    Decode (parse) the parameters                    
                </comment>
                <declaration name="algidString" type="String" line="119"/>
                <scope line="120"/>
                <scope line="122">
                    <scope line="123"/>
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="142">
                Marshal a DER-encoded &quot;AlgorithmID&quot; sequence on the DER stream.                
            </javadoc>
            <method name="encode" type="void" line="145">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="149">
                DER encode this object onto an output stream.
                  Implements the &lt;code&gt;DerEncoder&lt;/code&gt; interface.                
                <param>
                    outthe output stream on which to write the DER encoding.                    
                </param>
                <exception>
                    IOException on encoding error.                    
                </exception>
            </javadoc>
            <method name="derEncode" type="void" line="158">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="164">
                    Setup params from algParams since no DER encoding is given                    
                </comment>
                <comment line="173">
                    Changes backed out for compatibility with Solaris                    
                </comment>
                <comment line="175">
                    Several AlgorithmId should omit the whole parameter part when
                     it&apos;s NULL. They are ---
                     rfc3370 2.1: Implementations SHOULD generate SHA-1
                     AlgorithmIdentifiers with absent parameters.
                     rfc3447 C1: When id-sha1, id-sha256, id-sha384 and id-sha512
                     are used in an AlgorithmIdentifier the parameters (which are
                     optional) SHOULD be omitted.
                     rfc3279 2.3.2: The id-dsa algorithm syntax includes optional
                     domain parameters... When omitted, the parameters component
                     MUST be omitted entirely
                     rfc3370 3.1: When the id-dsa-with-sha1 algorithm identifier
                     is used, the AlgorithmIdentifier parameters field MUST be absent.                    
                </comment>
                <comment line="187">
                    if (
                    algid.equals((Object)SHA_oid) ||
                    algid.equals((Object)SHA256_oid) ||
                    algid.equals((Object)SHA384_oid) ||
                    algid.equals((Object)SHA512_oid) ||
                    algid.equals((Object)DSA_oid) ||
                    algid.equals((Object)sha1WithDSA_oid)) {
                    ;  no parameter part encoded
                    } else {
                    bytes.putNull();                    
                </comment>
                <declaration name="bytes" type="DerOutputStream" line="159"/>
                <declaration name="tmp" type="DerOutputStream" line="160"/>
                <scope line="164">
                    <scope line="165"/>
                    <scope line="167"/>
                </scope>
                <scope line="171"/>
                <scope line="198"/>
            </method>
            <javadoc line="206">
                Returns the DER-encoded X.509 AlgorithmId as a byte array.                
            </javadoc>
            <method name="encode" type="byte[]" line="209">
                <declaration name="out" type="DerOutputStream" line="210"/>
            </method>
            <javadoc line="215">
                Returns the ISO OID for this algorithm.  This is usually converted
                  to a string and used as part of an algorithm name, for example
                  &quot;OID.1.3.14.3.2.13&quot; style notation.  Use the &lt;code&gt;getName&lt;/code&gt;
                  call when you do not need to ensure cross-system portability
                  of algorithm names, or need a user friendly name.                
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="222"/>
            <javadoc line="226">
                Returns a name for the algorithm which may be more intelligible
                  to humans than the algorithm&apos;s OID, but which won&apos;t necessarily
                  be comprehensible on other systems.  For example, this might
                  return a name such as &quot;MD5withRSA&quot; for a signature algorithm on
                  some systems.  It also returns names like &quot;OID.1.2.3.4&quot;, when
                  no particular name for the algorithm is known.                
            </javadoc>
            <method name="getName" type="String" line="234">
                <comment line="250">
                    ignore                    
                </comment>
                <declaration name="algName" type="String" line="235"/>
                <scope line="236"/>
                <scope line="239">
                    <scope line="240">
                        <declaration name="paramsId" type="AlgorithmId" line="241"/>
                        <declaration name="paramsName" type="String" line="243"/>
                        <scope line="244"/>
                    </scope>
                    <scope line="248"/>
                </scope>
            </method>
            <method name="getParameters" type="AlgorithmParameters" line="255"/>
            <javadoc line="259">
                Returns the DER encoded parameter, which can then be
                  used to initialize java.security.AlgorithmParamters.                
                <return>
                    DER encoded parameters, or null not present.                    
                </return>
            </javadoc>
            <method name="getEncodedParams" type="byte[]" line="265"/>
            <javadoc line="269">
                Returns true iff the argument indicates the same algorithm
                  with the same parameters.                
            </javadoc>
            <method name="equals" type="boolean" line="273">
                <params>
                    <param name="other" type="AlgorithmId"/>
                </params>
                <declaration name="paramsEqual" type="boolean" line="274"/>
            </method>
            <javadoc line="279">
                Compares this AlgorithmID to another.  If algorithm parameters are
                  available, they are compared.  Otherwise, just the object IDs
                  for the algorithm are compared.                
                <param>
                    other preferably an AlgorithmId, else an ObjectIdentifier                    
                </param>
            </javadoc>
            <method name="equals" type="boolean" line="286">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="287"/>
                <scope line="290"/>
                <scope line="292"/>
                <scope line="294"/>
            </method>
            <javadoc line="299">
                Compares two algorithm IDs for equality.  Returns true iff
                  they are the same algorithm, ignoring algorithm parameters.                
            </javadoc>
            <method name="equals" type="boolean" line="303">
                <params>
                    <param name="id" type="ObjectIdentifier"/>
                </params>
            </method>
            <javadoc line="307">
                Returns a hashcode for this AlgorithmId.                
                <return>
                    a hashcode for this AlgorithmId.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="312">
                <declaration name="sbuf" type="StringBuilder" line="313"/>
            </method>
            <javadoc line="319">
                Provides a human-readable description of the algorithm parameters.
                  This may be redefined by subclasses which parse those parameters.                
            </javadoc>
            <method name="paramsToString" type="String" line="323">
                <scope line="324"/>
                <scope line="326"/>
                <scope line="328"/>
            </method>
            <javadoc line="333">
                Returns a string describing the algorithm and its parameters.                
            </javadoc>
            <method name="toString" type="String" line="336"/>
            <javadoc line="340">
                Parse (unmarshal) an ID from a DER sequence input value.  This form
                  parsing might be used when expanding a value which has already been
                  partially unmarshaled as a set or sequence member.                
                <exception>
                    IOException on error.                    
                </exception>
                <param>
                    val the input value, which contains the algid and, if
                      there are any parameters, those parameters.                    
                </param>
                <return>
                    an ID for the algorithm.  If the system is configured
                      appropriately, this may be an instance of a class
                      with some kind of special support for this algorithm.
                      In that case, you may "narrow" the type of the ID.                    
                </return>
            </javadoc>
            <method name="parse" type="AlgorithmId" line="353">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
                <comment line="359">
                    Get the algorithm ID and any parameters.                    
                </comment>
                <scope line="354"/>
                <declaration name="algid" type="ObjectIdentifier" line="361"/>
                <declaration name="params" type="DerValue" line="362"/>
                <declaration name="in" type="DerInputStream" line="363"/>
                <scope line="366"/>
                <scope line="368">
                    <scope line="370">
                        <scope line="371"/>
                    </scope>
                    <scope line="376"/>
                </scope>
            </method>
            <javadoc line="384">
                Returns one of the algorithm IDs most commonly associated
                  with this algorithm name.                
                <param>
                    algname the name being used                    
                </param>
                <deprecated>
                    use the short get form of this method.                    
                </deprecated>
                <exception>
                    NoSuchAlgorithmException on error.                    
                </exception>
            </javadoc>
            <method name="getAlgorithmId" type="AlgorithmId" line="394">
                <params>
                    <param name="algname" type="String"/>
                </params>
            </method>
            <javadoc line="398">
                Returns one of the algorithm IDs most commonly associated
                  with this algorithm name.                
                <param>
                    algname the name being used                    
                </param>
                <exception>
                    NoSuchAlgorithmException on error.                    
                </exception>
            </javadoc>
            <method name="get" type="AlgorithmId" line="406">
                <params>
                    <param name="algname" type="String"/>
                </params>
                <declaration name="oid" type="ObjectIdentifier" line="407"/>
                <scope line="408"/>
                <scope line="410"/>
                <scope line="415"/>
            </method>
            <javadoc line="422">
                Returns one of the algorithm IDs most commonly associated
                  with this algorithm parameters.                
                <param>
                    algparams the associated algorithm parameters.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on error.                    
                </exception>
            </javadoc>
            <method name="get" type="AlgorithmId" line="430">
                <params>
                    <param name="algparams" type="AlgorithmParameters"/>
                </params>
                <declaration name="oid" type="ObjectIdentifier" line="431"/>
                <declaration name="algname" type="String" line="432"/>
                <scope line="433"/>
                <scope line="435"/>
                <scope line="439"/>
            </method>
            <method name="algOID" type="ObjectIdentifier" line="458">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="460">
                    See if algname is in printable OID (&quot;dot-dot&quot;) notation                    
                </comment>
                <comment line="469">
                    Digesting algorithms                    
                </comment>
                <comment line="494">
                    Various public key algorithms                    
                </comment>
                <comment line="509">
                    Common signature types                    
                </comment>
                <comment line="548">
                    See if any of the installed providers supply a mapping from
                     the given algorithm name to an OID string                    
                </comment>
                <comment line="563">
                    invalid alias entry                    
                </comment>
                <scope line="460">
                    <scope line="461"/>
                    <scope line="463"/>
                </scope>
                <scope line="469"/>
                <scope line="472"/>
                <scope line="476"/>
                <scope line="480"/>
                <scope line="484"/>
                <scope line="488"/>
                <scope line="494"/>
                <scope line="498"/>
                <scope line="501"/>
                <scope line="504"/>
                <scope line="510"/>
                <scope line="514"/>
                <scope line="523"/>
                <scope line="527"/>
                <scope line="531"/>
                <scope line="534"/>
                <scope line="537"/>
                <scope line="540"/>
                <scope line="543"/>
                <declaration name="oidString" type="String" line="549"/>
                <scope line="550">
                    <declaration name="provs" type="Provider[]" line="551"/>
                    <scope line="552">
                        <scope line="554">
                            <declaration name="alias" type="String" line="555"/>
                            <declaration name="upperCaseAlias" type="String" line="556"/>
                            <declaration name="index" type="int" line="557"/>
                            <scope line="559">
                                <scope line="561"/>
                                <scope line="565"/>
                                <declaration name="stdAlgName" type="String" line="569"/>
                                <scope line="570"/>
                                <scope line="574"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="582"/>
                </scope>
            </method>
            <method name="oid" type="ObjectIdentifier" line="591">
                <params>
                    <param name="values" type="int"/>
                </params>
            </method>
            <declaration name="initOidTable" type="boolean" line="595"/>
            <declaration name="oidTable" type="Map&lt;String,ObjectIdentifier&gt;" line="596"/>
            <declaration name="nameTable" type="Map&lt;ObjectIdentifier,String&gt;" line="597"/>
            <declaration name="MD2_oid" type="ObjectIdentifier" line="605"/>
            <javadoc line="605">
                Algorithm ID for the MD2 Message Digest Algorthm, from RFC 1319.
                  OID = 1.2.840.113549.2.2                
            </javadoc>
            <declaration name="MD5_oid" type="ObjectIdentifier" line="612"/>
            <javadoc line="612">
                Algorithm ID for the MD5 Message Digest Algorthm, from RFC 1321.
                  OID = 1.2.840.113549.2.5                
            </javadoc>
            <declaration name="SHA_oid" type="ObjectIdentifier" line="619"/>
            <javadoc line="619">
                Algorithm ID for the SHA1 Message Digest Algorithm, from FIPS 180-1.
                  This is sometimes called &quot;SHA&quot;, though that is often confusing since
                  many people refer to FIPS 180 (which has an error) as defining SHA.
                  OID = 1.3.14.3.2.26. Old SHA-0 OID: 1.3.14.3.2.18.                
            </javadoc>
            <declaration name="SHA256_oid" type="ObjectIdentifier" line="628"/>
            <declaration name="SHA384_oid" type="ObjectIdentifier" line="631"/>
            <declaration name="SHA512_oid" type="ObjectIdentifier" line="634"/>
            <declaration name="DH_data" type="int" line="640"/>
            <declaration name="DH_PKIX_data" type="int" line="641"/>
            <declaration name="DSA_OIW_data" type="int" line="642"/>
            <declaration name="DSA_PKIX_data" type="int" line="643"/>
            <declaration name="RSA_data" type="int" line="644"/>
            <declaration name="RSAEncryption_data" type="int" line="645"/>
            <declaration name="DH_oid" type="ObjectIdentifier" line="648"/>
            <declaration name="DH_PKIX_oid" type="ObjectIdentifier" line="649"/>
            <declaration name="DSA_oid" type="ObjectIdentifier" line="650"/>
            <declaration name="DSA_OIW_oid" type="ObjectIdentifier" line="651"/>
            <declaration name="EC_oid" type="ObjectIdentifier" line="652"/>
            <declaration name="RSA_oid" type="ObjectIdentifier" line="653"/>
            <declaration name="RSAEncryption_oid" type="ObjectIdentifier" line="654"/>
            <declaration name="md2WithRSAEncryption_data" type="int" line="659"/>
            <declaration name="md5WithRSAEncryption_data" type="int" line="661"/>
            <declaration name="sha1WithRSAEncryption_data" type="int" line="663"/>
            <declaration name="sha1WithRSAEncryption_OIW_data" type="int" line="665"/>
            <declaration name="sha256WithRSAEncryption_data" type="int" line="667"/>
            <declaration name="sha384WithRSAEncryption_data" type="int" line="669"/>
            <declaration name="sha512WithRSAEncryption_data" type="int" line="671"/>
            <declaration name="shaWithDSA_OIW_data" type="int" line="673"/>
            <declaration name="sha1WithDSA_OIW_data" type="int" line="675"/>
            <declaration name="dsaWithSHA1_PKIX_data" type="int" line="677"/>
            <declaration name="md2WithRSAEncryption_oid" type="ObjectIdentifier" line="680"/>
            <declaration name="md5WithRSAEncryption_oid" type="ObjectIdentifier" line="681"/>
            <declaration name="sha1WithRSAEncryption_oid" type="ObjectIdentifier" line="682"/>
            <declaration name="sha1WithRSAEncryption_OIW_oid" type="ObjectIdentifier" line="683"/>
            <declaration name="sha256WithRSAEncryption_oid" type="ObjectIdentifier" line="684"/>
            <declaration name="sha384WithRSAEncryption_oid" type="ObjectIdentifier" line="685"/>
            <declaration name="sha512WithRSAEncryption_oid" type="ObjectIdentifier" line="686"/>
            <declaration name="shaWithDSA_OIW_oid" type="ObjectIdentifier" line="687"/>
            <declaration name="sha1WithDSA_OIW_oid" type="ObjectIdentifier" line="688"/>
            <declaration name="sha1WithDSA_oid" type="ObjectIdentifier" line="689"/>
            <declaration name="sha1WithECDSA_oid" type="ObjectIdentifier" line="691"/>
            <declaration name="sha224WithECDSA_oid" type="ObjectIdentifier" line="693"/>
            <declaration name="sha256WithECDSA_oid" type="ObjectIdentifier" line="695"/>
            <declaration name="sha384WithECDSA_oid" type="ObjectIdentifier" line="697"/>
            <declaration name="sha512WithECDSA_oid" type="ObjectIdentifier" line="699"/>
            <declaration name="specifiedWithECDSA_oid" type="ObjectIdentifier" line="701"/>
            <declaration name="pbeWithMD5AndDES_oid" type="ObjectIdentifier" line="704"/>
            <javadoc line="704">
                Algorithm ID for the PBE encryption algorithms from PKCS#5 and
                  PKCS#12.                
            </javadoc>
            <declaration name="pbeWithMD5AndRC2_oid" type="ObjectIdentifier" line="710"/>
            <declaration name="pbeWithSHA1AndDES_oid" type="ObjectIdentifier" line="712"/>
            <declaration name="pbeWithSHA1AndRC2_oid" type="ObjectIdentifier" line="714"/>
            <declaration name="pbeWithSHA1AndDESede_oid" type="ObjectIdentifier" line="716"/>
            <declaration name="pbeWithSHA1AndRC2_40_oid" type="ObjectIdentifier" line="718"/>
            <scope line="722"/>
            <javadoc line="895">
                Creates a signature algorithm name from a digest algorithm
                  name and a encryption algorithm name.                
            </javadoc>
            <method name="makeSigAlg" type="String" line="899">
                <params>
                    <param name="digAlg" type="String"/>
                    <param name="encAlg" type="String"/>
                </params>
            </method>
            <javadoc line="909">
                Extracts the encryption algorithm name from a signature
                  algorithm name.                
            </javadoc>
            <method name="getEncAlgFromSigAlg" type="String" line="913">
                <params>
                    <param name="signatureAlgorithm" type="String"/>
                </params>
                <declaration name="with" type="int" line="915"/>
                <declaration name="keyAlgorithm" type="String" line="916"/>
                <scope line="917">
                    <declaration name="and" type="int" line="918"/>
                    <scope line="919"/>
                    <scope line="921"/>
                    <scope line="924"/>
                </scope>
            </method>
            <javadoc line="931">
                Extracts the digest algorithm name from a signature
                  algorithm name.                
            </javadoc>
            <method name="getDigAlgFromSigAlg" type="String" line="935">
                <params>
                    <param name="signatureAlgorithm" type="String"/>
                </params>
                <declaration name="with" type="int" line="937"/>
                <scope line="938"/>
            </method>
        </class>
    </source>