<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertificateParsingException"/>
        <import package="java.security.cert.CertificateExpiredException"/>
        <import package="java.security.cert.CertificateNotYetValidException"/>
        <import package="java.util.Date"/>
        <import package="java.util.Enumeration"/>
        <import package="sun.security.util"/>
        <class name="PrivateKeyUsageExtension" line="11">
            <extends class="Extension"/>
            <implements interface="CertAttrSet">
                <type_params>
                    <type_param name="String"/>
                </type_params>
            </implements>
            <javadoc line="11">
                This class defines the Private Key Usage Extension.
                  &lt;p&gt;The Private Key Usage Period extension allows the certificate issuer
                  to specify a different validity period for the private key than the
                  certificate. This extension is intended for use with digital
                  signature keys.  This extension consists of two optional components
                  notBefore and notAfter.  The private key associated with the
                  certificate should not be used to sign objects before or after the
                  times specified by the two components, respectively.
                  &lt;pre&gt;
                  PrivateKeyUsagePeriod ::= SEQUENCE {
                  notBefore  [0]  GeneralizedTime OPTIONAL,
                  notAfter   [1]  GeneralizedTime OPTIONAL }
                  &lt;/pre&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    Extension                    
                </see>
                <see>
                    CertAttrSet                    
                </see>
            </javadoc>
            <declaration name="IDENT" type="String" line="31"/>
            <javadoc line="31">
                Identifier for this attribute, to be used with the
                  get, set, delete methods of Certificate, x509 type.                
            </javadoc>
            <declaration name="NAME" type="String" line="36"/>
            <javadoc line="36">
                Sub attributes name for this CertAttrSet.                
            </javadoc>
            <declaration name="NOT_BEFORE" type="String" line="40"/>
            <declaration name="NOT_AFTER" type="String" line="41"/>
            <declaration name="TAG_BEFORE" type="byte" line="42"/>
            <declaration name="TAG_AFTER" type="byte" line="43"/>
            <declaration name="notBefore" type="Date" line="44"/>
            <declaration name="notAfter" type="Date" line="45"/>
            <method name="encodeThis" type="void" line="46">
                <scope line="47"/>
                <declaration name="seq" type="DerOutputStream" line="51"/>
                <declaration name="tagged" type="DerOutputStream" line="52"/>
                <scope line="53">
                    <declaration name="tmp" type="DerOutputStream" line="54"/>
                </scope>
                <scope line="58">
                    <declaration name="tmp" type="DerOutputStream" line="59"/>
                </scope>
            </method>
            <javadoc line="66">
                The default constructor for PrivateKeyUsageExtension.                
                <param>
                    notBefore the date/time before which the private key
                      should not be used.                    
                </param>
                <param>
                    notAfter the date/time after which the private key
                      should not be used.                    
                </param>
            </javadoc>
            <method name="PrivateKeyUsageExtension" type="constructor" line="73">
                <params>
                    <param name="notBefore" type="Date"/>
                    <param name="notAfter" type="Date"/>
                </params>
            </method>
            <javadoc line="80">
                Create the extension from the passed DER encoded value.                
                <param>
                    critical true if the extension is to be treated as critical.                    
                </param>
                <param>
                    value an array of DER encoded bytes of the actual value.                    
                </param>
                <exception>
                    ClassCastException if value is not an array of bytes                    
                </exception>
                <exception>
                    CertificateException on certificate parsing errors.                    
                </exception>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="PrivateKeyUsageExtension" type="constructor" line="88">
                <params>
                    <param name="critical" type="Boolean"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="str" type="DerInputStream" line="92"/>
                <declaration name="seq" type="DerValue[]" line="93"/>
                <scope line="94">
                    <declaration name="opt" type="DerValue" line="95"/>
                    <scope line="96">
                        <scope line="97"/>
                    </scope>
                    <scope line="104">
                        <scope line="105"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="115">
                Return the printable string.                
            </javadoc>
            <method name="toString" type="String" line="118"/>
            <javadoc line="121">
                Verify that that the current time is within the validity period.                
                <exception>
                    CertificateExpiredException if the certificate has expired.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid.                    
                </exception>
            </javadoc>
            <method name="valid" type="void" line="127">
                <declaration name="now" type="Date" line="128"/>
            </method>
            <javadoc line="131">
                Verify that that the passed time is within the validity period.                
                <exception>
                    CertificateExpiredException if the certificate has expired
                      with respect to the &lt;code&gt;Date&lt;/code&gt; supplied.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid with respect to the &lt;code&gt;Date&lt;/code&gt; supplied.                    
                </exception>
            </javadoc>
            <method name="valid" type="void" line="138">
                <params>
                    <param name="now" type="Date"/>
                </params>
                <scope line="139"/>
                <scope line="142"/>
            </method>
            <javadoc line="146">
                Write the extension to the OutputStream.                
                <param>
                    out the OutputStream to write the extension to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="151">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="152"/>
                <scope line="153"/>
            </method>
            <javadoc line="161">
                Set the attribute value.                
                <exception>
                    CertificateException on attribute handling errors.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="165">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="166"/>
                <scope line="169"/>
                <scope line="172"/>
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Get the attribute value.                
                <exception>
                    CertificateException on attribute handling errors.                    
                </exception>
            </javadoc>
            <method name="get" type="Object" line="184">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="191"/>
            </method>
            <javadoc line="195">
                Delete the attribute value.                
                <exception>
                    CertificateException on attribute handling errors.                    
                </exception>
            </javadoc>
            <method name="delete" type="void" line="199">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="200"/>
                <scope line="203"/>
                <scope line="206"/>
            </method>
            <javadoc line="211">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration&lt;String&gt;" line="215">
                <declaration name="elements" type="AttributeNameEnumeration" line="216"/>
            </method>
            <javadoc line="221">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="224"/>
        </class>
    </source>