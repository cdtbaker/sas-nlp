<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerOutputStream"/>
        <class name="CertificatePoliciesExtension" line="35">
            <extends class="Extension"/>
            <comment line="88">
                Encode this extension value.                
            </comment>
            <implements interface="CertAttrSet">
                <type_params>
                    <type_param name="String"/>
                </type_params>
            </implements>
            <javadoc line="35">
                This class defines the certificate policies extension which specifies the
                  policies under which the certificate has been issued
                  and the purposes for which the certificate may be used.
                  &lt;p&gt;
                  Applications with specific policy requirements are expected to have a
                  list of those policies which they will accept and to compare the
                  policy OIDs in the certificate to that list.  If this extension is
                  critical, the path validation software MUST be able to interpret this
                  extension (including the optional qualifier), or MUST reject the
                  certificate.
                  &lt;p&gt;
                  Optional qualifiers are not supported in this implementation, as they are
                  not recommended by RFC2459.
                  The ASN.1 syntax for this is (IMPLICIT tagging is defined in the
                  module definition):
                  &lt;pre&gt;
                  id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }
                  certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation
                  PolicyInformation ::= SEQUENCE {
                  policyIdentifier   CertPolicyId,
                  policyQualifiers   SEQUENCE SIZE (1..MAX) OF
                  PolicyQualifierInfo OPTIONAL }
                  CertPolicyId ::= OBJECT IDENTIFIER
                  &lt;/pre&gt;                
                <author>
                    Anne Anderson                    
                </author>
                <since>
                    1.4                    
                </since>
                <see>
                    Extension                    
                </see>
                <see>
                    CertAttrSet                    
                </see>
            </javadoc>
            <declaration name="IDENT" type="String" line="71"/>
            <javadoc line="71">
                Identifier for this attribute, to be used with the
                  get, set, delete methods of Certificate, x509 type.                
            </javadoc>
            <declaration name="NAME" type="String" line="76"/>
            <javadoc line="76">
                Attribute names.                
            </javadoc>
            <declaration name="POLICIES" type="String" line="80"/>
            <declaration name="certPolicies" type="List&lt;PolicyInformation&gt;" line="82"/>
            <javadoc line="82">
                List of PolicyInformation for this object.                
            </javadoc>
            <method name="encodeThis" type="void" line="88">
                <scope line="89"/>
                <scope line="91">
                    <declaration name="os" type="DerOutputStream" line="92"/>
                    <declaration name="tmp" type="DerOutputStream" line="93"/>
                    <scope line="95"/>
                </scope>
            </method>
            <javadoc line="104">
                Create a CertificatePoliciesExtension object from
                  a List of PolicyInformation; the criticality is set to false.                
                <param>
                    certPolicies the List of PolicyInformation.                    
                </param>
            </javadoc>
            <method name="CertificatePoliciesExtension" type="constructor" line="111">
                <params>
                    <param name="certPolicies" type="List<PolicyInformation>"/>
                </params>
            </method>
            <javadoc line="115">
                Create a CertificatePoliciesExtension object from
                  a List of PolicyInformation with specified criticality.                
                <param>
                    critical true if the extension is to be treated as critical.                    
                </param>
                <param>
                    certPolicies the List of PolicyInformation.                    
                </param>
            </javadoc>
            <method name="CertificatePoliciesExtension" type="constructor" line="123">
                <params>
                    <param name="critical" type="Boolean"/>
                    <param name="certPolicies" type="List<PolicyInformation>"/>
                </params>
            </method>
            <javadoc line="130">
                Create the extension from its DER encoded value and criticality.                
                <param>
                    critical true if the extension is to be treated as critical.                    
                </param>
                <param>
                    value an array of DER encoded bytes of the actual value.                    
                </param>
                <exception>
                    ClassCastException if value is not an array of bytes                    
                </exception>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="CertificatePoliciesExtension" type="constructor" line="139">
                <params>
                    <param name="critical" type="Boolean"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="val" type="DerValue" line="143"/>
                <scope line="144"/>
                <scope line="149">
                    <declaration name="seq" type="DerValue" line="150"/>
                    <declaration name="policy" type="PolicyInformation" line="151"/>
                </scope>
            </method>
            <javadoc line="156">
                Return the extension as user readable string.                
            </javadoc>
            <method name="toString" type="String" line="159">
                <scope line="160"/>
                <declaration name="sb" type="StringBuilder" line="163"/>
                <scope line="165"/>
            </method>
            <javadoc line="172">
                Write the extension to the DerOutputStream.                
                <param>
                    out the DerOutputStream to write the extension to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="178">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="179"/>
                <scope line="180"/>
            </method>
            <javadoc line="189">
                Set the attribute value.                
            </javadoc>
            <method name="set" type="void" line="192">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="193">
                    <scope line="194"/>
                </scope>
                <scope line="198"/>
            </method>
            <javadoc line="206">
                Get the attribute value.                
            </javadoc>
            <method name="get" type="Object" line="209">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="211">
                    XXXX May want to consider cloning this                    
                </comment>
                <scope line="210"/>
                <scope line="213"/>
            </method>
            <javadoc line="220">
                Delete the attribute value.                
            </javadoc>
            <method name="delete" type="void" line="223">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="224"/>
                <scope line="226"/>
            </method>
            <javadoc line="234">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration<String>" line="238">
                <declaration name="elements" type="AttributeNameEnumeration" line="239"/>
            </method>
            <javadoc line="245">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="248"/>
        </class>
    </source>