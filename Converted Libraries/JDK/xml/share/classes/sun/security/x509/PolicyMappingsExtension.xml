<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="sun.security.util"/>
        <class name="PolicyMappingsExtension" line="36">
            <extends class="Extension"/>
            <comment line="69">
                Private data members                
            </comment>
            <comment line="72">
                Encode this extension value                
            </comment>
            <implements interface="CertAttrSet">
                <type_params>
                    <type_param name="String"/>
                </type_params>
            </implements>
            <javadoc line="36">
                Represent the Policy Mappings Extension.
                  This extension, if present, identifies the certificate policies considered
                  identical between the issuing and the subject CA.
                  &lt;p&gt;Extensions are addiitonal attributes which can be inserted in a X509
                  v3 certificate. For example a &quot;Driving License Certificate&quot; could have
                  the driving license number as a extension.
                  &lt;p&gt;Extensions are represented as a sequence of the extension identifier
                  (Object Identifier), a boolean flag stating whether the extension is to
                  be treated as being critical and the extension value itself (this is again
                  a DER encoding of the extension value).                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    Extension                    
                </see>
                <see>
                    CertAttrSet                    
                </see>
            </javadoc>
            <declaration name="IDENT" type="String" line="57"/>
            <javadoc line="57">
                Identifier for this attribute, to be used with the
                  get, set, delete methods of Certificate, x509 type.                
            </javadoc>
            <declaration name="NAME" type="String" line="62"/>
            <javadoc line="62">
                Attribute names.                
            </javadoc>
            <declaration name="MAP" type="String" line="66"/>
            <declaration name="maps" type="List&lt;CertificatePolicyMap&gt;" line="69"/>
            <method name="encodeThis" type="void" line="72">
                <scope line="73"/>
                <declaration name="os" type="DerOutputStream" line="77"/>
                <declaration name="tmp" type="DerOutputStream" line="78"/>
                <scope line="80"/>
            </method>
            <javadoc line="88">
                Create a PolicyMappings with the List of CertificatePolicyMap.                
                <param>
                    maps the List of CertificatePolicyMap.                    
                </param>
            </javadoc>
            <method name="PolicyMappingsExtension" type="constructor" line="94">
                <params>
                    <param name="map" type="List<CertificatePolicyMap>"/>
                </params>
            </method>
            <javadoc line="101">
                Create a default PolicyMappingsExtension.                
            </javadoc>
            <method name="PolicyMappingsExtension" type="constructor" line="104"/>
            <javadoc line="110">
                Create the extension from the passed DER encoded value.                
                <params>
                    critical true if the extension is to be treated as critical.                    
                </params>
                <params>
                    value an array of DER encoded bytes of the actual value.                    
                </params>
                <exception>
                    ClassCastException if value is not an array of bytes                    
                </exception>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="PolicyMappingsExtension" type="constructor" line="119">
                <params>
                    <param name="critical" type="Boolean"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="val" type="DerValue" line="124"/>
                <scope line="125"/>
                <scope line="130">
                    <declaration name="seq" type="DerValue" line="131"/>
                    <declaration name="map" type="CertificatePolicyMap" line="132"/>
                </scope>
            </method>
            <javadoc line="137">
                Returns a printable representation of the policy map.                
            </javadoc>
            <method name="toString" type="String" line="140">
                <declaration name="s" type="String" line="142"/>
            </method>
            <javadoc line="148">
                Write the extension to the OutputStream.                
                <param>
                    out the OutputStream to write the extension to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="154">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="155"/>
                <scope line="156"/>
            </method>
            <javadoc line="165">
                Set the attribute value.                
            </javadoc>
            <method name="set" type="void" line="168">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="169">
                    <scope line="170"/>
                </scope>
                <scope line="175"/>
            </method>
            <javadoc line="182">
                Get the attribute value.                
            </javadoc>
            <method name="get" type="Object" line="185">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="186"/>
                <scope line="188"/>
            </method>
            <javadoc line="194">
                Delete the attribute value.                
            </javadoc>
            <method name="delete" type="void" line="197">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <javadoc line="207">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration<String>" line="211">
                <declaration name="elements" type="AttributeNameEnumeration" line="212"/>
            </method>
            <javadoc line="218">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="221"/>
        </class>
    </source>