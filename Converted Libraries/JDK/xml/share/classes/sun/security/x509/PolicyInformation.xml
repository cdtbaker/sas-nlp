<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.security.cert.PolicyQualifierInfo"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedHashSet"/>
        <import package="java.util.Set"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerOutputStream"/>
        <class name="PolicyInformation" line="11">
            <javadoc line="11">
                PolicyInformation is the class that contains a specific certificate policy
                  that is part of the CertificatePoliciesExtension. A
                  CertificatePolicyExtension value consists of a vector of these objects.
                  &lt;p&gt;
                  The ASN.1 syntax for PolicyInformation (IMPLICIT tagging is defined in the
                  module definition):
                  &lt;pre&gt;
                  PolicyInformation ::= SEQUENCE {
                  policyIdentifier   CertPolicyId,
                  policyQualifiers   SEQUENCE SIZE (1..MAX) OF
                  PolicyQualifierInfo OPTIONAL }
                  CertPolicyId ::= OBJECT IDENTIFIER
                  PolicyQualifierInfo ::= SEQUENCE {
                  policyQualifierId  PolicyQualifierId,
                  qualifier          ANY DEFINED BY policyQualifierId }
                  &lt;/pre&gt;                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Anne Anderson                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="NAME" type="String" line="33"/>
            <declaration name="ID" type="String" line="34"/>
            <declaration name="QUALIFIERS" type="String" line="35"/>
            <declaration name="policyIdentifier" type="CertificatePolicyId" line="36"/>
            <declaration name="policyQualifiers" type="Set&amp;lt;PolicyQualifierInfo&amp;gt;" line="37"/>
            <javadoc line="38">
                Create an instance of PolicyInformation                
                <param>
                    policyIdentifier the policyIdentifier as a
                      CertificatePolicyId                    
                </param>
                <param>
                    policyQualifiers a Set of PolicyQualifierInfo objects.
                      Must not be NULL. Specify an empty Set for no qualifiers.                    
                </param>
                <exception>
                    IOException on decoding errors.                    
                </exception>
            </javadoc>
            <method name="PolicyInformation" type="constructor" line="46">
                <params>
                    <param name="policyIdentifier" type="CertificatePolicyId"/>
                    <param name="policyQualifiers" type="Set&lt;PolicyQualifierInfo&gt;"/>
                </params>
                <scope line="47"/>
            </method>
            <javadoc line="53">
                Create an instance of PolicyInformation, decoding from
                  the passed DerValue.                
                <param>
                    val the DerValue to construct the PolicyInformation from.                    
                </param>
                <exception>
                    IOException on decoding errors.                    
                </exception>
            </javadoc>
            <method name="PolicyInformation" type="constructor" line="59">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
                <scope line="60"/>
                <scope line="64">
                    <declaration name="opt" type="DerValue" line="66"/>
                </scope>
                <scope line="71"/>
            </method>
            <javadoc line="75">
                Compare this PolicyInformation with another object for equality                
                <param>
                    other object to be compared with this                    
                </param>
                <return>
                    true iff the PolicyInformation objects match                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="80">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <declaration name="piOther" type="PolicyInformation" line="82"/>
            </method>
            <javadoc line="86">
                Returns the hash code for this PolicyInformation.                
                <return>
                    a hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="90">
                <declaration name="myhash" type="int" line="91"/>
            </method>
            <javadoc line="95">
                Return the policyIdentifier value                
                <return>
                    The CertificatePolicyId object containing
                      the policyIdentifier (not a copy).                    
                </return>
            </javadoc>
            <method name="getPolicyIdentifier" type="CertificatePolicyId" line="100"/>
            <javadoc line="103">
                Return the policyQualifiers value                
                <return>
                    a Set of PolicyQualifierInfo objects associated
                      with this certificate policy (not a copy).
                      Returns an empty Set if there are no qualifiers.
                      Never returns null.                    
                </return>
            </javadoc>
            <method name="getPolicyQualifiers" type="Set&lt;PolicyQualifierInfo&gt;" line="110"/>
            <javadoc line="113">
                Get the attribute value.                
            </javadoc>
            <method name="get" type="Object" line="116">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="117"/>
                <scope line="120"/>
                <scope line="123"/>
            </method>
            <javadoc line="127">
                Set the attribute value.                
            </javadoc>
            <method name="set" type="void" line="130">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="131"/>
                <scope line="135">
                    <scope line="136"/>
                    <scope line="139">
                        <declaration name="i" type="Iterator&amp;lt;?&amp;gt;" line="140"/>
                        <scope line="141">
                            <declaration name="obj1" type="Object" line="142"/>
                            <scope line="143"/>
                        </scope>
                    </scope>
                    <scope line="149"/>
                </scope>
                <scope line="153"/>
            </method>
            <javadoc line="157">
                Delete the attribute value.                
            </javadoc>
            <method name="delete" type="void" line="160">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="161"/>
                <scope line="164"/>
                <scope line="167"/>
            </method>
            <javadoc line="171">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration&lt;String&gt;" line="175">
                <declaration name="elements" type="AttributeNameEnumeration" line="176"/>
            </method>
            <javadoc line="181">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="184"/>
            <javadoc line="187">
                Return a printable representation of the PolicyInformation.                
            </javadoc>
            <method name="toString" type="String" line="190">
                <declaration name="s" type="StringBuilder" line="191"/>
            </method>
            <javadoc line="195">
                Write the PolicyInformation to the DerOutputStream.                
                <param>
                    out the DerOutputStream to write the extension to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="200">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="201"/>
                <scope line="203">
                    <declaration name="tmp2" type="DerOutputStream" line="204"/>
                    <scope line="205"/>
                </scope>
            </method>
        </class>
    </source>