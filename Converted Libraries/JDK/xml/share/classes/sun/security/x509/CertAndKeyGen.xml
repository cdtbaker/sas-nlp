<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertificateEncodingException"/>
        <import package="java.security"/>
        <import package="java.util.Date"/>
        <import package="sun.security.pkcs.PKCS10"/>
        <class name="CertAndKeyGen" line="38">
            <comment line="120">
                want &quot;public void generate (X509Certificate)&quot; ... inherit DSA/D-H param                
            </comment>
            <comment line="252">
                Keep the old method                
            </comment>
            <javadoc line="38">
                Generate a pair of keys, and provide access to them.  This class is
                  provided primarily for ease of use.
                  &lt;P&gt;This provides some simple certificate management functionality.
                  Specifically, it allows you to create self-signed X.509 certificates
                  as well as PKCS 10 based certificate signing requests.
                  &lt;P&gt;Keys for some public key signature algorithms have algorithm
                  parameters, such as DSS/DSA.  Some sites&apos; Certificate Authorities
                  adopt fixed algorithm parameters, which speeds up some operations
                  including key generation and signing.  &lt;em&gt;At this time, this interface
                  does not provide a way to provide such algorithm parameters, e.g.
                  by providing the CA certificate which includes those parameters.&lt;/em&gt;
                  &lt;P&gt;Also, note that at this time only signature-capable keys may be
                  acquired through this interface.  Diffie-Hellman keys, used for secure
                  key exchange, may be supported later.                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    PKCS10                    
                </see>
                <see>
                    X509CertImpl                    
                </see>
            </javadoc>
            <javadoc line="63">
                Creates a CertAndKeyGen object for a particular key type
                  and signature algorithm.                
                <param>
                    keyType type of key, e.g. "RSA", "DSA"                    
                </param>
                <param>
                    sigAlg name of the signature algorithm, e.g. "MD5WithRSA",
                      "MD2WithRSA", "SHAwithDSA".                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unrecognized algorithms.                    
                </exception>
            </javadoc>
            <method name="CertAndKeyGen" type="constructor" line="74">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="sigAlg" type="String"/>
                </params>
            </method>
            <javadoc line="79">
                Creates a CertAndKeyGen object for a particular key type,
                  signature algorithm, and provider.                
                <param>
                    keyType type of key, e.g. "RSA", "DSA"                    
                </param>
                <param>
                    sigAlg name of the signature algorithm, e.g. "MD5WithRSA",
                      "MD2WithRSA", "SHAwithDSA".                    
                </param>
                <param>
                    providerName name of the provider                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unrecognized algorithms.                    
                </exception>
                <exception>
                    NoSuchProviderException on unrecognized providers.                    
                </exception>
            </javadoc>
            <method name="CertAndKeyGen" type="constructor" line="92">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="sigAlg" type="String"/>
                    <param name="providerName" type="String"/>
                </params>
                <comment line="99">
                    try first available provider instead                    
                </comment>
                <scope line="93"/>
                <scope line="95">
                    <scope line="96"/>
                    <scope line="98"/>
                </scope>
            </method>
            <javadoc line="106">
                Sets the source of random numbers used when generating keys.
                  If you do not provide one, a system default facility is used.
                  You may wish to provide your own source of random numbers
                  to get a reproducible sequence of keys and signatures, or
                  because you may be able to take advantage of strong sources
                  of randomness/entropy in your environment.                
            </javadoc>
            <method name="setRandom" type="void" line="115">
                <params>
                    <param name="generator" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="121">
                Generates a random public/private key pair, with a given key
                  size.  Different algorithms provide different degrees of security
                  for the same key size, because of the &quot;work factor&quot; involved in
                  brute force attacks.  As computers become faster, it becomes
                  easier to perform such attacks.  Small keys are to be avoided.
                  &lt;P&gt;Note that not all values of &quot;keyBits&quot; are valid for all
                  algorithms, and not all public key algorithms are currently
                  supported for use in X.509 certificates.  If the algorithm
                  you specified does not produce X.509 compatible keys, an
                  invalid key exception is thrown.                
                <param>
                    keyBits the number of bits in the keys.                    
                </param>
                <exception>
                    InvalidKeyException if the environment does not
                      provide X.509 public keys for this signature algorithm.                    
                </exception>
            </javadoc>
            <method name="generate" type="void" line="140">
                <params>
                    <param name="keyBits" type="int"/>
                </params>
                <declaration name="pair" type="KeyPair" line="141"/>
                <scope line="143">
                    <scope line="144"/>
                </scope>
                <scope line="150"/>
            </method>
            <javadoc line="159">
                Returns the public key of the generated key pair if it is of type
                  &lt;code&gt;X509Key&lt;/code&gt;, or null if the public key is of a different type.
                  XXX Note: This behaviour is needed for backwards compatibility.
                  What this method really should return is the public key of the
                  generated key pair, regardless of whether or not it is an instance of
                  &lt;code&gt;X509Key&lt;/code&gt;. Accordingly, the return type of this method
                  should be &lt;code&gt;PublicKey&lt;/code&gt;.                
            </javadoc>
            <method name="getPublicKey" type="X509Key" line="170">
                <scope line="171"/>
            </method>
            <javadoc line="178">
                Returns the private key of the generated key pair.
                  &lt;P&gt;&lt;STRONG&gt;&lt;em&gt;Be extremely careful when handling private keys.
                  When private keys are not kept secret, they lose their ability
                  to securely authenticate specific entities ... that is a huge
                  security risk!&lt;/em&gt;&lt;/STRONG&gt;                
            </javadoc>
            <method name="getPrivateKey" type="PrivateKey" line="187"/>
            <javadoc line="192">
                Returns a self-signed X.509v3 certificate for the public key.
                  The certificate is immediately valid. No extensions.
                  &lt;P&gt;Such certificates normally are used to identify a &quot;Certificate
                  Authority&quot; (CA).  Accordingly, they will not always be accepted by
                  other parties.  However, such certificates are also useful when
                  you are bootstrapping your security infrastructure, or deploying
                  system prototypes.                
                <param>
                    myname X.500 name of the subject (who is also the issuer)                    
                </param>
                <param>
                    firstDate the issue time of the certificate                    
                </param>
                <param>
                    validity how long the certificate should be valid, in seconds                    
                </param>
                <exception>
                    CertificateException on certificate handling errors.                    
                </exception>
                <exception>
                    InvalidKeyException on key handling errors.                    
                </exception>
                <exception>
                    SignatureException on signature handling errors.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException on unrecognized algorithms.                    
                </exception>
                <exception>
                    NoSuchProviderException on unrecognized providers.                    
                </exception>
            </javadoc>
            <method name="getSelfCertificate" type="X509Certificate" line="215">
                <params>
                    <param name="myname" type="X500Name"/>
                    <param name="firstDate" type="Date"/>
                    <param name="validity" type="long"/>
                </params>
                <comment line="227">
                    Add all mandatory attributes                    
                </comment>
                <declaration name="cert" type="X509CertImpl" line="216"/>
                <declaration name="lastDate" type="Date" line="217"/>
                <scope line="219">
                    <declaration name="interval" type="CertificateValidity" line="223"/>
                    <declaration name="info" type="X509CertInfo" line="226"/>
                    <declaration name="algID" type="AlgorithmId" line="232"/>
                </scope>
                <scope line="245"/>
            </method>
            <method name="getSelfCertificate" type="X509Certificate" line="255">
                <params>
                    <param name="myname" type="X500Name"/>
                    <param name="validity" type="long"/>
                </params>
            </method>
            <javadoc line="259">
                Returns a PKCS #10 certificate request.  The caller uses either
                  &lt;code&gt;PKCS10.print&lt;/code&gt; or &lt;code&gt;PKCS10.toByteArray&lt;/code&gt;
                  operations on the result, to get the request in an appropriate
                  transmission format.
                  &lt;P&gt;PKCS #10 certificate requests are sent, along with some proof
                  of identity, to Certificate Authorities (CAs) which then issue
                  X.509 public key certificates.                
                <param>
                    myname X.500 name of the subject                    
                </param>
                <exception>
                    InvalidKeyException on key handling errors.                    
                </exception>
                <exception>
                    SignatureException on signature handling errors.                    
                </exception>
            </javadoc>
            <method name="getCertRequest" type="PKCS10" line="275">
                <params>
                    <param name="myname" type="X500Name"/>
                </params>
                <comment line="290">
                    &quot;can&apos;t happen&quot;                    
                </comment>
                <declaration name="req" type="PKCS10" line="276"/>
                <scope line="278">
                    <declaration name="signature" type="Signature" line="279"/>
                </scope>
                <scope line="283"/>
                <scope line="286"/>
                <scope line="289"/>
            </method>
            <declaration name="prng" type="SecureRandom" line="296"/>
            <declaration name="sigAlg" type="String" line="297"/>
            <declaration name="keyGen" type="KeyPairGenerator" line="298"/>
            <declaration name="publicKey" type="PublicKey" line="299"/>
            <declaration name="privateKey" type="PrivateKey" line="300"/>
        </class>
    </source>