<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert.CertificateEncodingException"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.cert.CertificateParsingException"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.util"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util"/>
        <import package="sun.security.pkcs.PKCS9Attribute"/>
        <class name="NameConstraintsExtension" line="42">
            <extends class="Extension"/>
            <comment line="81">
                Private data members                
            </comment>
            <comment line="92">
                Recalculate hasMin and hasMax flags.                
            </comment>
            <comment line="118">
                Encode this extension value.                
            </comment>
            <implements interface="CertAttrSet">
                <type_params>
                    <type_param name="String"/>
                </type_params>
            </implements>
            <implements interface="Cloneable"/>
            <javadoc line="42">
                This class defines the Name Constraints Extension.
                  &lt;p&gt;
                  The name constraints extension provides permitted and excluded
                  subtrees that place restrictions on names that may be included within
                  a certificate issued by a given CA.  Restrictions may apply to the
                  subject distinguished name or subject alternative names.  Any name
                  matching a restriction in the excluded subtrees field is invalid
                  regardless of information appearing in the permitted subtrees.
                  &lt;p&gt;
                  The ASN.1 syntax for this is:
                  &lt;pre&gt;
                  NameConstraints ::= SEQUENCE {
                  permittedSubtrees [0]  GeneralSubtrees OPTIONAL,
                  excludedSubtrees  [1]  GeneralSubtrees OPTIONAL
                  }
                  GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
                  &lt;/pre&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    Extension                    
                </see>
                <see>
                    CertAttrSet                    
                </see>
            </javadoc>
            <declaration name="IDENT" type="String" line="68"/>
            <javadoc line="68">
                Identifier for this attribute, to be used with the
                  get, set, delete methods of Certificate, x509 type.                
            </javadoc>
            <declaration name="NAME" type="String" line="73"/>
            <javadoc line="73">
                Attribute names.                
            </javadoc>
            <declaration name="PERMITTED_SUBTREES" type="String" line="77"/>
            <declaration name="EXCLUDED_SUBTREES" type="String" line="78"/>
            <declaration name="TAG_PERMITTED" type="byte" line="81"/>
            <declaration name="TAG_EXCLUDED" type="byte" line="82"/>
            <declaration name="permitted" type="GeneralSubtrees" line="84"/>
            <declaration name="excluded" type="GeneralSubtrees" line="85"/>
            <declaration name="hasMin" type="boolean" line="87"/>
            <declaration name="hasMax" type="boolean" line="88"/>
            <declaration name="minMaxValid" type="boolean" line="89"/>
            <method name="calcMinMax" type="void" line="92">
                <scope line="95">
                    <scope line="96">
                        <declaration name="subtree" type="GeneralSubtree" line="97"/>
                    </scope>
                </scope>
                <scope line="105">
                    <scope line="106">
                        <declaration name="subtree" type="GeneralSubtree" line="107"/>
                    </scope>
                </scope>
            </method>
            <method name="encodeThis" type="void" line="118">
                <scope line="120"/>
                <declaration name="seq" type="DerOutputStream" line="124"/>
                <declaration name="tagged" type="DerOutputStream" line="126"/>
                <scope line="127">
                    <declaration name="tmp" type="DerOutputStream" line="128"/>
                </scope>
                <scope line="133">
                    <declaration name="tmp" type="DerOutputStream" line="134"/>
                </scope>
            </method>
            <javadoc line="143">
                The default constructor for this class. Both parameters
                  are optional and can be set to null.  The extension criticality
                  is set to true.                
                <param>
                    permitted the permitted GeneralSubtrees (null for optional).                    
                </param>
                <param>
                    excluded the excluded GeneralSubtrees (null for optional).                    
                </param>
            </javadoc>
            <method name="NameConstraintsExtension" type="constructor" line="153">
                <params>
                    <param name="permitted" type="GeneralSubtrees"/>
                    <param name="excluded" type="GeneralSubtrees"/>
                </params>
            </method>
            <javadoc line="162">
                Create the extension from the passed DER encoded value.                
                <param>
                    critical true if the extension is to be treated as critical.                    
                </param>
                <param>
                    value an array of DER encoded bytes of the actual value.                    
                </param>
                <exception>
                    ClassCastException if value is not an array of bytes                    
                </exception>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="NameConstraintsExtension" type="constructor" line="171">
                <params>
                    <param name="critical" type="Boolean"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="182">
                    NB. this is always encoded with the IMPLICIT tag                    
                </comment>
                <comment line="183">
                    The checks only make sense if we assume implicit tagging,                    
                </comment>
                <comment line="184">
                    with explicit tagging the form is always constructed.                    
                </comment>
                <comment line="185">
                    Note that all the fields in NameConstraints are defined as                    
                </comment>
                <comment line="186">
                    being OPTIONAL, i.e., there could be an empty SEQUENCE, resulting                    
                </comment>
                <comment line="187">
                    in val.data being null.                    
                </comment>
                <declaration name="val" type="DerValue" line="176"/>
                <scope line="177"/>
                <scope line="190">
                    <declaration name="opt" type="DerValue" line="191"/>
                    <scope line="193">
                        <scope line="194"/>
                    </scope>
                    <scope line="202">
                        <scope line="203"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="216">
                Return the printable string.                
            </javadoc>
            <method name="toString" type="String" line="219"/>
            <javadoc line="228">
                Write the extension to the OutputStream.                
                <param>
                    out the OutputStream to write the extension to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="234">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="235"/>
                <scope line="236"/>
            </method>
            <javadoc line="245">
                Set the attribute value.                
            </javadoc>
            <method name="set" type="void" line="248">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="249">
                    <scope line="250"/>
                </scope>
                <scope line="255">
                    <scope line="256"/>
                </scope>
                <scope line="261"/>
            </method>
            <javadoc line="268">
                Get the attribute value.                
            </javadoc>
            <method name="get" type="Object" line="271">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="272"/>
                <scope line="274"/>
                <scope line="276"/>
            </method>
            <javadoc line="282">
                Delete the attribute value.                
            </javadoc>
            <method name="delete" type="void" line="285">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="286"/>
                <scope line="288"/>
                <scope line="290"/>
            </method>
            <javadoc line="297">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration<String>" line="301">
                <declaration name="elements" type="AttributeNameEnumeration" line="302"/>
            </method>
            <javadoc line="309">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="312"/>
            <javadoc line="316">
                Merge additional name constraints with existing ones.
                  This function is used in certification path processing
                  to accumulate name constraints from successive certificates
                  in the path.  Note that NameConstraints can never be
                  expanded by a merge, just remain constant or become more
                  limiting.
                  &lt;p&gt;
                  IETF RFC2459 specifies the processing of Name Constraints as
                  follows:
                  &lt;p&gt;
                  (j)  If permittedSubtrees is present in the certificate, set the
                  constrained subtrees state variable to the intersection of its
                  previous value and the value indicated in the extension field.
                  &lt;p&gt;
                  (k)  If excludedSubtrees is present in the certificate, set the
                  excluded subtrees state variable to the union of its previous
                  value and the value indicated in the extension field.
                  &lt;p&gt;                
                <param>
                    newConstraints additional NameConstraints to be applied                    
                </param>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="merge" type="void" line="339">
                <params>
                    <param name="newConstraints" type="NameConstraintsExtension"/>
                </params>
                <comment line="342">
                    absence of any explicit constraints implies unconstrained                    
                </comment>
                <comment line="346">
                    If excludedSubtrees is present in the certificate, set the
                     excluded subtrees state variable to the union of its previous
                     value and the value indicated in the extension field.                    
                </comment>
                <comment line="359">
                    Merge new excluded with current excluded (union)                    
                </comment>
                <comment line="364">
                    If permittedSubtrees is present in the certificate, set the
                     constrained subtrees state variable to the intersection of its
                     previous value and the value indicated in the extension field.                    
                </comment>
                <comment line="377">
                    Merge new permitted with current permitted (intersection)                    
                </comment>
                <comment line="380">
                    Merge new excluded subtrees to current excluded (union)                    
                </comment>
                <comment line="391">
                    Optional optimization: remove permitted subtrees that are excluded.                    
                </comment>
                <comment line="392">
                    This is not necessary for algorithm correctness, but it makes                    
                </comment>
                <comment line="393">
                    subsequent operations on the NameConstraints faster and require                    
                </comment>
                <comment line="394">
                    less space.                    
                </comment>
                <comment line="399">
                    The NameConstraints have been changed, so re-encode them.  Methods in                    
                </comment>
                <comment line="400">
                    this class assume that the encodings have already been done.                    
                </comment>
                <scope line="341"/>
                <declaration name="newExcluded" type="GeneralSubtrees" line="352"/>
                <scope line="354"/>
                <scope line="357">
                    <scope line="358"/>
                </scope>
                <declaration name="newPermitted" type="GeneralSubtrees" line="370"/>
                <scope line="372"/>
                <scope line="375">
                    <scope line="376">
                        <scope line="381">
                            <scope line="382"/>
                            <scope line="384"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="395"/>
            </method>
            <javadoc line="405">
                check whether a certificate conforms to these NameConstraints.
                  This involves verifying that the subject name and subjectAltName
                  extension (critical or noncritical) is consistent with the permitted
                  subtrees state variables.  Also verify that the subject name and
                  subjectAltName extension (critical or noncritical) is consistent with
                  the excluded subtrees state variables.                
                <param>
                    cert X509Certificate to be verified                    
                </param>
                <returns>
                    true if certificate verifies successfully                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="verify" type="boolean" line="417">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="423">
                    Calculate hasMin and hasMax booleans (if necessary)                    
                </comment>
                <comment line="448">
                    extract altNames                    
                </comment>
                <comment line="450">
                    extract extensions, if any, from certInfo                    
                </comment>
                <comment line="451">
                    following returns null if certificate contains no extensions                    
                </comment>
                <comment line="456">
                    extract altNames from extension; this call does not                    
                </comment>
                <comment line="457">
                    return an IOException on null altnames                    
                </comment>
                <comment line="466">
                    If there are no subjectAlternativeNames, perform the special-case                    
                </comment>
                <comment line="467">
                    check where if the subjectName contains any EMAILADDRESS                    
                </comment>
                <comment line="468">
                    attributes, they must be checked against RFC822 constraints.                    
                </comment>
                <comment line="469">
                    If that passes, we&apos;re fine.                    
                </comment>
                <comment line="474">
                    verify each subjectAltName                    
                </comment>
                <comment line="482">
                    All tests passed.                    
                </comment>
                <scope line="419"/>
                <scope line="424"/>
                <scope line="428"/>
                <scope line="433"/>
                <declaration name="subjectPrincipal" type="X500Principal" line="438"/>
                <declaration name="subject" type="X500Name" line="439"/>
                <scope line="441">
                    <scope line="442"/>
                </scope>
                <declaration name="altNames" type="GeneralNames" line="447"/>
                <scope line="449">
                    <declaration name="certImpl" type="X509CertImpl" line="452"/>
                    <declaration name="altNameExt" type="SubjectAlternativeNameExtension" line="453"/>
                    <scope line="455"/>
                </scope>
                <scope line="461"/>
                <scope line="470"/>
                <scope line="475">
                    <declaration name="altGNI" type="GeneralNameInterface" line="476"/>
                    <scope line="477"/>
                </scope>
            </method>
            <javadoc line="486">
                check whether a name conforms to these NameConstraints.
                  This involves verifying that the name is consistent with the
                  permitted and excluded subtrees variables.                
                <param>
                    name GeneralNameInterface name to be verified                    
                </param>
                <returns>
                    true if certificate verifies successfully                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="verify" type="boolean" line="495">
                <params>
                    <param name="name" type="GeneralNameInterface"/>
                </params>
                <comment line="500">
                    Verify that the name is consistent with the excluded subtrees                    
                </comment>
                <comment line="514">
                    if name matches or narrows any excluded subtree,                    
                </comment>
                <comment line="515">
                    return false                    
                </comment>
                <comment line="518">
                    name widens excluded                    
                </comment>
                <comment line="522">
                    subject name excluded                    
                </comment>
                <comment line="528">
                    Verify that the name is consistent with the permitted subtrees                    
                </comment>
                <comment line="544">
                    if Name matches any type in permitted,                    
                </comment>
                <comment line="545">
                    and Name does not match or narrow some permitted subtree,                    
                </comment>
                <comment line="546">
                    return false                    
                </comment>
                <comment line="549">
                    continue checking other permitted names                    
                </comment>
                <comment line="550">
                    name widens permitted                    
                </comment>
                <comment line="553">
                    continue to look for a match or narrow                    
                </comment>
                <comment line="556">
                    name narrows permitted                    
                </comment>
                <comment line="557">
                    name is definitely OK, so break out of loop                    
                </comment>
                <scope line="496"/>
                <scope line="501">
                    <scope line="503">
                        <declaration name="gs" type="GeneralSubtree" line="504"/>
                        <declaration name="gn" type="GeneralName" line="507"/>
                        <declaration name="exName" type="GeneralNameInterface" line="510"/>
                    </scope>
                </scope>
                <scope line="529">
                    <declaration name="sameType" type="boolean" line="531"/>
                    <scope line="533">
                        <declaration name="gs" type="GeneralSubtree" line="534"/>
                        <declaration name="gn" type="GeneralName" line="537"/>
                        <declaration name="perName" type="GeneralNameInterface" line="540"/>
                    </scope>
                    <scope line="560"/>
                </scope>
            </method>
            <javadoc line="567">
                Perform the RFC 822 special case check. We have a certificate
                  that does not contain any subject alternative names. Check that
                  any EMAILADDRESS attributes in its subject name conform to these
                  NameConstraints.                
                <param>
                    subject the certificate's subject name                    
                </param>
                <returns>
                    true if certificate verifies successfully                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="verifyRFC822SpecialCase" type="boolean" line="577">
                <params>
                    <param name="subject" type="X500Name"/>
                </params>
                <scope line="578">
                    <declaration name="ava" type="AVA" line="579"/>
                    <declaration name="attrOID" type="ObjectIdentifier" line="580"/>
                    <scope line="581">
                        <declaration name="attrValue" type="String" line="582"/>
                        <scope line="583">
                            <declaration name="emailName" type="RFC822Name" line="584"/>
                            <scope line="585"/>
                            <scope line="587"/>
                            <scope line="590"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="599">
                Clone all objects that may be modified during certificate validation.                
            </javadoc>
            <method name="clone" type="Object" line="602">
                <scope line="603">
                    <declaration name="newNCE" type="NameConstraintsExtension" line="604"/>
                    <scope line="607"/>
                    <scope line="610"/>
                </scope>
                <scope line="614"/>
            </method>
        </class>
    </source>