<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.Reader"/>
        <import package="java.security.AccessController"/>
        <import package="java.text.Normalizer"/>
        <import package="java.util"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <import package="sun.security.util"/>
        <import package="sun.security.pkcs.PKCS9Attribute"/>
        <class name="AVA" line="12">
            <implements interface="DerEncoder"/>
            <javadoc line="12">
                X.500 Attribute-Value-Assertion (AVA):  an attribute, as identified by
                  some attribute ID, has some particular value.  Values are as a rule ASN.1
                  printable strings.  A conventional set of type IDs is recognized when
                  parsing (and generating) RFC 1779 or RFC 2253 syntax strings.
                  &lt;P&gt;AVAs are components of X.500 relative names.  Think of them as being
                  individual fields of a database record.  The attribute ID is how you
                  identify the field, and the value is part of a particular record.
                  &lt;p&gt;
                  Note that instances of this class are immutable.                
                <see>
                    X500Name                    
                </see>
                <see>
                    RDN                    
                </see>
                <author>
                    David Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="29"/>
            <declaration name="PRESERVE_OLD_DC_ENCODING" type="boolean" line="30"/>
            <declaration name="DEFAULT" type="int" line="31"/>
            <javadoc line="31">
                DEFAULT format allows both RFC1779 and RFC2253 syntax and
                  additional keywords.                
            </javadoc>
            <declaration name="RFC1779" type="int" line="36"/>
            <javadoc line="36">
                RFC1779 specifies format according to RFC1779.                
            </javadoc>
            <declaration name="RFC2253" type="int" line="40"/>
            <javadoc line="40">
                RFC2253 specifies format according to RFC2253.                
            </javadoc>
            <declaration name="oid" type="ObjectIdentifier" line="44"/>
            <declaration name="value" type="DerValue" line="45"/>
            <declaration name="specialChars" type="String" line="46"/>
            <declaration name="specialChars2253" type="String" line="47"/>
            <declaration name="specialCharsAll" type="String" line="48"/>
            <declaration name="hexDigits" type="String" line="49"/>
            <method name="AVA" type="constructor" line="50">
                <params>
                    <param name="type" type="ObjectIdentifier"/>
                    <param name="val" type="DerValue"/>
                </params>
                <scope line="51"/>
            </method>
            <javadoc line="57">
                Parse an RFC 1779 or RFC 2253 style AVA string:  CN=fee fie foe fum
                  or perhaps with quotes.  Not all defined AVA tags are supported;
                  of current note are X.400 related ones (PRMD, ADMD, etc).
                  This terminates at unescaped AVA separators (&quot;+&quot;) or RDN
                  separators (&quot;,&quot;, &quot;;&quot;), or DN terminators (&quot;&gt;&quot;), and removes
                  cosmetic whitespace at the end of values.                
            </javadoc>
            <method name="AVA" type="constructor" line="65">
                <params>
                    <param name="in" type="Reader"/>
                </params>
            </method>
            <javadoc line="68">
                Parse an RFC 1779 or RFC 2253 style AVA string:  CN=fee fie foe fum
                  or perhaps with quotes. Additional keywords can be specified in the
                  keyword/OID map.
                  This terminates at unescaped AVA separators (&quot;+&quot;) or RDN
                  separators (&quot;,&quot;, &quot;;&quot;), or DN terminators (&quot;&gt;&quot;), and removes
                  cosmetic whitespace at the end of values.                
            </javadoc>
            <method name="AVA" type="constructor" line="76">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="keywordMap" type="Map&lt;String,String&gt;"/>
                </params>
            </method>
            <javadoc line="79">
                Parse an AVA string formatted according to format.
                  XXX format RFC1779 should only allow RFC1779 syntax but is
                  actually DEFAULT with RFC1779 keywords.                
            </javadoc>
            <method name="AVA" type="constructor" line="84">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="format" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Parse an AVA string formatted according to format.
                  XXX format RFC1779 should only allow RFC1779 syntax but is
                  actually DEFAULT with RFC1779 keywords.                
                <param>
                    in Reader containing AVA String                    
                </param>
                <param>
                    format parsing format                    
                </param>
                <param>
                    keywordMap a Map where a keyword String maps to a corresponding
                      OID String. Each AVA keyword will be mapped to the corresponding OID.
                      If an entry does not exist, it will fallback to the builtin
                      keyword/OID mapping.                    
                </param>
                <throws>
                    IOException if the AVA String is not valid in the specified
                      standard or an OID String from the keywordMap is improperly formatted                    
                </throws>
            </javadoc>
            <method name="AVA" type="constructor" line="100">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="format" type="int"/>
                    <param name="keywordMap" type="Map&lt;String,String&gt;"/>
                </params>
                <declaration name="temp" type="StringBuilder" line="101"/>
                <declaration name="c" type="int" line="102"/>
                <scope line="103">
                    <scope line="105"/>
                </scope>
                <scope line="112">
                    <scope line="114"/>
                </scope>
                <scope line="118">
                    <scope line="119"/>
                </scope>
                <scope line="124"/>
                <scope line="128"/>
                <scope line="131"/>
                <scope line="134"/>
            </method>
            <javadoc line="138">
                Get the ObjectIdentifier of this AVA.                
            </javadoc>
            <method name="getObjectIdentifier" type="ObjectIdentifier" line="141"/>
            <javadoc line="144">
                Get the value of this AVA as a DerValue.                
            </javadoc>
            <method name="getDerValue" type="DerValue" line="147"/>
            <javadoc line="150">
                Get the value of this AVA as a String.                
                <exception>
                    RuntimeException if we could not obtain the string form
                      (should not occur)                    
                </exception>
            </javadoc>
            <method name="getValueString" type="String" line="155">
                <scope line="156">
                    <declaration name="s" type="String" line="157"/>
                    <scope line="158"/>
                </scope>
                <scope line="163"/>
            </method>
            <method name="parseHexString" type="DerValue" line="167">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="format" type="int"/>
                </params>
                <declaration name="c" type="int" line="168"/>
                <declaration name="baos" type="ByteArrayOutputStream" line="169"/>
                <declaration name="b" type="byte" line="170"/>
                <declaration name="cNdx" type="int" line="171"/>
                <scope line="172">
                    <scope line="174"/>
                    <declaration name="cVal" type="int" line="177"/>
                    <scope line="178"/>
                    <scope line="181"/>
                    <scope line="185"/>
                </scope>
                <scope line="190"/>
                <scope line="193"/>
            </method>
            <method name="parseQuotedString" type="DerValue" line="198">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="temp" type="StringBuilder"/>
                </params>
                <declaration name="c" type="int" line="199"/>
                <declaration name="embeddedHex" type="List&amp;lt;Byte&amp;gt;" line="200"/>
                <declaration name="isPrintableString" type="boolean" line="201"/>
                <scope line="202">
                    <scope line="203">
                        <declaration name="hexByte" type="Byte" line="205"/>
                        <scope line="206"/>
                        <scope line="212"/>
                    </scope>
                    <scope line="216">
                        <declaration name="hexString" type="String" line="217"/>
                    </scope>
                </scope>
                <scope line="225">
                    <declaration name="hexString" type="String" line="226"/>
                </scope>
                <scope line="230"/>
                <scope line="234"/>
                <scope line="237"/>
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <method name="parseString" type="DerValue" line="247">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="c" type="int"/>
                    <param name="format" type="int"/>
                    <param name="temp" type="StringBuilder"/>
                </params>
                <declaration name="embeddedHex" type="List&amp;lt;Byte&amp;gt;" line="248"/>
                <declaration name="isPrintableString" type="boolean" line="249"/>
                <declaration name="escape" type="boolean" line="250"/>
                <declaration name="leadingChar" type="boolean" line="251"/>
                <declaration name="spaceCount" type="int" line="252"/>
                <scope line="253">
                    <scope line="255">
                        <declaration name="hexByte" type="Byte" line="258"/>
                        <scope line="259"/>
                        <scope line="266"/>
                        <scope line="269">
                            <scope line="270">
                                <scope line="271"/>
                            </scope>
                            <scope line="275">
                                <scope line="276"/>
                            </scope>
                            <scope line="280"/>
                        </scope>
                    </scope>
                    <scope line="285">
                        <scope line="286">
                            <scope line="287"/>
                        </scope>
                    </scope>
                    <scope line="292">
                        <scope line="293"/>
                        <declaration name="hexString" type="String" line="297"/>
                    </scope>
                    <scope line="302"/>
                    <scope line="305">
                        <scope line="306"/>
                    </scope>
                </scope>
                <scope line="316"/>
                <scope line="319">
                    <declaration name="hexString" type="String" line="320"/>
                </scope>
                <scope line="324"/>
                <scope line="327"/>
                <scope line="330"/>
            </method>
            <method name="getEmbeddedHexPair" type="Byte" line="334">
                <params>
                    <param name="c1" type="int"/>
                    <param name="in" type="Reader"/>
                </params>
                <scope line="335">
                    <declaration name="c2" type="int" line="336"/>
                    <scope line="337">
                        <declaration name="hi" type="int" line="338"/>
                        <declaration name="lo" type="int" line="339"/>
                    </scope>
                    <scope line="342"/>
                </scope>
            </method>
            <method name="getEmbeddedHexString" type="String" line="348">
                <params>
                    <param name="hexList" type="List&lt;Byte&gt;"/>
                </params>
                <declaration name="n" type="int" line="349"/>
                <declaration name="hexBytes" type="byte[]" line="350"/>
                <scope line="351"/>
            </method>
            <method name="isTerminator" type="boolean" line="356">
                <params>
                    <param name="ch" type="int"/>
                    <param name="format" type="int"/>
                </params>
            </method>
            <method name="readChar" type="int" line="369">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="errMsg" type="String"/>
                </params>
                <declaration name="c" type="int" line="370"/>
                <scope line="371"/>
            </method>
            <method name="trailingSpace" type="boolean" line="376">
                <params>
                    <param name="in" type="Reader"/>
                </params>
                <declaration name="trailing" type="boolean" line="377"/>
                <scope line="378"/>
                <scope line="381">
                    <scope line="383">
                        <declaration name="nextChar" type="int" line="384"/>
                        <scope line="385"/>
                        <scope line="389"/>
                        <scope line="392">
                            <declaration name="followingChar" type="int" line="393"/>
                            <scope line="394"/>
                        </scope>
                        <scope line="399"/>
                    </scope>
                </scope>
            </method>
            <method name="AVA" type="constructor" line="408">
                <params>
                    <param name="derval" type="DerValue"/>
                </params>
                <scope line="409"/>
                <scope line="414"/>
            </method>
            <method name="AVA" type="constructor" line="418">
                <params>
                    <param name="in" type="DerInputStream"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="421">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="422"/>
                <scope line="425"/>
                <declaration name="other" type="AVA" line="428"/>
            </method>
            <javadoc line="431">
                Returns a hashcode for this AVA.                
                <return>
                    a hashcode for this AVA.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="435"/>
            <method name="encode" type="void" line="438">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="441">
                DER encode this object onto an output stream.
                  Implements the &lt;code&gt;DerEncoder&lt;/code&gt; interface.                
                <param>
                    outthe output stream on which to write the DER encoding.                    
                </param>
                <exception>
                    IOException on encoding error.                    
                </exception>
            </javadoc>
            <method name="derEncode" type="void" line="447">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="448"/>
                <declaration name="tmp2" type="DerOutputStream" line="449"/>
            </method>
            <method name="toKeyword" type="String" line="455">
                <params>
                    <param name="format" type="int"/>
                    <param name="oidMap" type="Map&lt;String,String&gt;"/>
                </params>
            </method>
            <javadoc line="458">
                Returns a printable form of this attribute, using RFC 1779
                  syntax for individual attribute/value assertions.                
            </javadoc>
            <method name="toString" type="String" line="462"/>
            <javadoc line="465">
                Returns a printable form of this attribute, using RFC 1779
                  syntax for individual attribute/value assertions. It only
                  emits standardised keywords.                
            </javadoc>
            <method name="toRFC1779String" type="String" line="470"/>
            <javadoc line="473">
                Returns a printable form of this attribute, using RFC 1779
                  syntax for individual attribute/value assertions. It
                  emits standardised keywords, as well as keywords contained in the
                  OID/keyword map.                
            </javadoc>
            <method name="toRFC1779String" type="String" line="479">
                <params>
                    <param name="oidMap" type="Map&lt;String,String&gt;"/>
                </params>
            </method>
            <javadoc line="482">
                Returns a printable form of this attribute, using RFC 2253
                  syntax for individual attribute/value assertions. It only
                  emits standardised keywords.                
            </javadoc>
            <method name="toRFC2253String" type="String" line="487"/>
            <javadoc line="490">
                Returns a printable form of this attribute, using RFC 2253
                  syntax for individual attribute/value assertions. It
                  emits standardised keywords, as well as keywords contained in the
                  OID/keyword map.                
            </javadoc>
            <method name="toRFC2253String" type="String" line="496">
                <params>
                    <param name="oidMap" type="Map&lt;String,String&gt;"/>
                </params>
                <declaration name="typeAndValue" type="StringBuilder" line="497"/>
                <scope line="500">
                    <declaration name="data" type="byte[]" line="501"/>
                    <scope line="502"/>
                    <scope line="505"/>
                    <scope line="509">
                        <declaration name="b" type="byte" line="510"/>
                    </scope>
                </scope>
                <scope line="515">
                    <declaration name="valStr" type="String" line="516"/>
                    <scope line="517"/>
                    <scope line="520"/>
                    <declaration name="escapees" type="String" line="523"/>
                    <declaration name="sbuffer" type="StringBuilder" line="524"/>
                    <scope line="525">
                        <declaration name="c" type="char" line="526"/>
                        <scope line="527">
                            <scope line="528"/>
                        </scope>
                        <scope line="533"/>
                        <scope line="536">
                            <declaration name="valueBytes" type="byte[]" line="537"/>
                            <scope line="538"/>
                            <scope line="541"/>
                            <scope line="544">
                                <declaration name="hexChar" type="char" line="546"/>
                            </scope>
                        </scope>
                        <scope line="552"/>
                    </scope>
                    <declaration name="chars" type="char[]" line="556"/>
                    <declaration name="lead" type="int" line="558"/>
                    <scope line="559">
                        <scope line="560"/>
                    </scope>
                    <declaration name="trail" type="int" line="564"/>
                    <scope line="565">
                        <scope line="566"/>
                    </scope>
                    <scope line="570">
                        <declaration name="c" type="char" line="571"/>
                        <scope line="572"/>
                    </scope>
                </scope>
            </method>
            <method name="toRFC2253CanonicalString" type="String" line="581">
                <declaration name="typeAndValue" type="StringBuilder" line="582"/>
                <scope line="585">
                    <declaration name="data" type="byte[]" line="586"/>
                    <scope line="587"/>
                    <scope line="590"/>
                    <scope line="594">
                        <declaration name="b" type="byte" line="595"/>
                    </scope>
                </scope>
                <scope line="600">
                    <declaration name="valStr" type="String" line="601"/>
                    <scope line="602"/>
                    <scope line="605"/>
                    <declaration name="escapees" type="String" line="608"/>
                    <declaration name="sbuffer" type="StringBuilder" line="609"/>
                    <declaration name="previousWhite" type="boolean" line="610"/>
                    <scope line="611">
                        <declaration name="c" type="char" line="612"/>
                        <scope line="613">
                            <scope line="614"/>
                            <scope line="617"/>
                            <scope line="621">
                                <scope line="622"/>
                                <scope line="626"/>
                            </scope>
                        </scope>
                        <scope line="631">
                            <declaration name="valueBytes" type="byte" line="633"/>
                            <scope line="634"/>
                            <scope line="637"/>
                            <scope line="640"/>
                        </scope>
                        <scope line="646"/>
                    </scope>
                </scope>
                <declaration name="canon" type="String" line="653"/>
            </method>
            <method name="isDerString" type="boolean" line="657">
                <params>
                    <param name="value" type="DerValue"/>
                    <param name="canonical" type="boolean"/>
                </params>
                <scope line="658"/>
                <scope line="667"/>
            </method>
            <method name="hasRFC2253Keyword" type="boolean" line="681"/>
            <method name="toKeywordValueString" type="String" line="684">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <declaration name="retval" type="StringBuilder" line="685"/>
                <scope line="688">
                    <declaration name="valStr" type="String" line="689"/>
                    <scope line="690">
                        <declaration name="data" type="byte" line="691"/>
                        <scope line="693"/>
                    </scope>
                    <scope line="698">
                        <declaration name="quoteNeeded" type="boolean" line="699"/>
                        <declaration name="sbuffer" type="StringBuilder" line="700"/>
                        <declaration name="previousWhite" type="boolean" line="701"/>
                        <declaration name="escapees" type="String" line="702"/>
                        <scope line="703">
                            <declaration name="c" type="char" line="704"/>
                            <scope line="705">
                                <scope line="706"/>
                                <scope line="709">
                                    <scope line="710"/>
                                </scope>
                                <scope line="715">
                                    <scope line="716"/>
                                </scope>
                            </scope>
                            <scope line="723">
                                <declaration name="valueBytes" type="byte[]" line="725"/>
                                <scope line="726">
                                    <declaration name="hexChar" type="char" line="728"/>
                                </scope>
                            </scope>
                            <scope line="734"/>
                        </scope>
                        <scope line="739">
                            <declaration name="trailChar" type="char" line="740"/>
                            <scope line="741"/>
                        </scope>
                        <scope line="745"/>
                        <scope line="748"/>
                    </scope>
                </scope>
                <scope line="753"/>
            </method>
        </class>
        <class name="AVAKeyword" line="759">
            <javadoc line="759">
                Helper class that allows conversion from String to ObjectIdentifier and
                  vice versa according to RFC1779, RFC2253, and an augmented version of
                  those standards.                
            </javadoc>
            <declaration name="oidMap" type="Map&amp;lt;ObjectIdentifier,AVAKeyword&amp;gt;" line="765"/>
            <declaration name="keywordMap" type="Map&amp;lt;String,AVAKeyword&amp;gt;" line="766"/>
            <declaration name="keyword" type="String" line="767"/>
            <declaration name="oid" type="ObjectIdentifier" line="768"/>
            <declaration name="rfc1779Compliant" type="boolean" line="769"/>
            <method name="AVAKeyword" type="constructor" line="770">
                <params>
                    <param name="keyword" type="String"/>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="rfc1779Compliant" type="boolean"/>
                    <param name="rfc2253Compliant" type="boolean"/>
                </params>
            </method>
            <method name="isCompliant" type="boolean" line="778">
                <params>
                    <param name="standard" type="int"/>
                </params>
            </method>
            <javadoc line="790">
                Get an object identifier representing the specified keyword (or
                  string encoded object identifier) in the given standard.                
                <throws>
                    IOException If the keyword is not valid in the specified standard                    
                </throws>
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="795">
                <params>
                    <param name="keyword" type="String"/>
                    <param name="standard" type="int"/>
                </params>
            </method>
            <javadoc line="798">
                Get an object identifier representing the specified keyword (or
                  string encoded object identifier) in the given standard.                
                <param>
                    keywordMap a Map where a keyword String maps to a corresponding
                      OID String. Each AVA keyword will be mapped to the corresponding OID.
                      If an entry does not exist, it will fallback to the builtin
                      keyword/OID mapping.                    
                </param>
                <throws>
                    IOException If the keyword is not valid in the specified standard
                      or the OID String to which a keyword maps to is improperly formatted.                    
                </throws>
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="808">
                <params>
                    <param name="keyword" type="String"/>
                    <param name="standard" type="int"/>
                    <param name="extraKeywordMap" type="Map&lt;String,String&gt;"/>
                </params>
                <scope line="810">
                    <scope line="811"/>
                </scope>
                <scope line="815"/>
                <declaration name="oidString" type="String" line="818"/>
                <scope line="819">
                    <declaration name="ak" type="AVAKeyword" line="820"/>
                    <scope line="821"/>
                </scope>
                <scope line="825"/>
                <scope line="828">
                    <scope line="829"/>
                </scope>
                <scope line="834">
                    <scope line="835"/>
                </scope>
                <declaration name="number" type="boolean" line="839"/>
                <scope line="840">
                    <declaration name="ch" type="char" line="841"/>
                    <scope line="842"/>
                </scope>
                <scope line="846"/>
            </method>
            <javadoc line="851">
                Get a keyword for the given ObjectIdentifier according to standard.
                  If no keyword is available, the ObjectIdentifier is encoded as a
                  String.                
            </javadoc>
            <method name="getKeyword" type="String" line="856">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="standard" type="int"/>
                </params>
            </method>
            <javadoc line="859">
                Get a keyword for the given ObjectIdentifier according to standard.
                  Checks the extraOidMap for a keyword first, then falls back to the
                  builtin/default set. If no keyword is available, the ObjectIdentifier
                  is encoded as a String.                
            </javadoc>
            <method name="getKeyword" type="String" line="865">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="standard" type="int"/>
                    <param name="extraOidMap" type="Map&lt;String,String&gt;"/>
                </params>
                <declaration name="oidString" type="String" line="866"/>
                <declaration name="keywordString" type="String" line="867"/>
                <scope line="868">
                    <declaration name="ak" type="AVAKeyword" line="869"/>
                    <scope line="870"/>
                </scope>
                <scope line="874">
                    <scope line="875"/>
                    <declaration name="c" type="char" line="879"/>
                    <scope line="880"/>
                    <scope line="883">
                        <scope line="885"/>
                    </scope>
                </scope>
                <scope line="891"/>
                <scope line="894"/>
            </method>
            <javadoc line="898">
                Test if oid has an associated keyword in standard.                
            </javadoc>
            <method name="hasKeyword" type="boolean" line="901">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="standard" type="int"/>
                </params>
                <declaration name="ak" type="AVAKeyword" line="902"/>
                <scope line="903"/>
            </method>
            <scope line="908"/>
        </class>
    </source>