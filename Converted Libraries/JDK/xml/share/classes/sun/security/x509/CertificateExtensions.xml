<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.util"/>
        <class name="CertificateExtensions" line="40">
            <comment line="81">
                helper routine                
            </comment>
            <comment line="94">
                Parse the encoded extension                
            </comment>
            <implements interface="CertAttrSet">
                <type_params>
                    <type_param name="Extension"/>
                </type_params>
            </implements>
            <javadoc line="40">
                This class defines the Extensions attribute for the Certificate.                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    CertAttrSet                    
                </see>
            </javadoc>
            <declaration name="IDENT" type="String" line="48"/>
            <javadoc line="48">
                Identifier for this attribute, to be used with the
                  get, set, delete methods of Certificate, x509 type.                
            </javadoc>
            <declaration name="NAME" type="String" line="53"/>
            <javadoc line="53">
                name                
            </javadoc>
            <declaration name="debug" type="Debug" line="58"/>
            <declaration name="map" type="Hashtable&lt;String,Extension&gt;" line="60"/>
            <declaration name="unsupportedCritExt" type="boolean" line="61"/>
            <declaration name="unparseableExtensions" type="Map&lt;String,Extension&gt;" line="63"/>
            <javadoc line="65">
                Default constructor.                
            </javadoc>
            <method name="CertificateExtensions" type="constructor" line="68"/>
            <javadoc line="70">
                Create the object, decoding the values from the passed DER stream.                
                <param>
                    in the DerInputStream to read the Extension from.                    
                </param>
                <exception>
                    IOException on decoding errors.                    
                </exception>
            </javadoc>
            <method name="CertificateExtensions" type="constructor" line="76">
                <params>
                    <param name="in" type="DerInputStream"/>
                </params>
            </method>
            <method name="init" type="void" line="81">
                <params>
                    <param name="in" type="DerInputStream"/>
                </params>
                <declaration name="exts" type="DerValue[]" line="83"/>
                <scope line="85">
                    <declaration name="ext" type="Extension" line="86"/>
                </scope>
            </method>
            <declaration name="PARAMS" type="Class[]" line="91"/>
            <method name="parseExtension" type="void" line="94">
                <params>
                    <param name="ext" type="Extension"/>
                </params>
                <comment line="98">
                    Unsupported extension                    
                </comment>
                <comment line="119">
                    ignore errors parsing non-critical extensions                    
                </comment>
                <scope line="95">
                    <declaration name="extClass" type="Class" line="96"/>
                    <scope line="97">
                        <scope line="98"/>
                        <scope line="101"/>
                        <scope line="103"/>
                    </scope>
                    <declaration name="cons" type="Constructor" line="107"/>
                    <declaration name="passed" type="Object[]" line="109"/>
                    <declaration name="certExt" type="CertAttrSet" line="111"/>
                    <scope line="112"/>
                </scope>
                <scope line="115">
                    <declaration name="e" type="Throwable" line="116"/>
                    <scope line="117">
                        <scope line="119"/>
                        <scope line="124">
                            <declaration name="h" type="HexDumpEncoder" line="127"/>
                        </scope>
                    </scope>
                    <scope line="132"/>
                    <scope line="134"/>
                </scope>
                <scope line="137"/>
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Encode the extensions in DER form to the stream, setting
                  the context specific tag as needed in the X.509 v3 certificate.                
                <param>
                    out the DerOutputStream to marshal the contents to.                    
                </param>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
                <exception>
                    IOException on errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="153">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="157">
                Encode the extensions in DER form to the stream.                
                <param>
                    out the DerOutputStream to marshal the contents to.                    
                </param>
                <param>
                    isCertReq if true then no context specific tag is added.                    
                </param>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
                <exception>
                    IOException on errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="166">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="isCertReq" type="boolean"/>
                </params>
                <comment line="185">
                    certificate                    
                </comment>
                <comment line="190">
                    pkcs#10 certificateRequest                    
                </comment>
                <declaration name="extOut" type="DerOutputStream" line="167"/>
                <declaration name="allExts" type="Collection&lt;Extension&gt;" line="168"/>
                <declaration name="objs" type="Object[]" line="169"/>
                <scope line="171"/>
                <declaration name="seq" type="DerOutputStream" line="180"/>
                <declaration name="tmp" type="DerOutputStream" line="183"/>
                <scope line="184"/>
            </method>
            <javadoc line="194">
                Set the attribute value.                
                <param>
                    name the extension name used in the cache.                    
                </param>
                <param>
                    obj the object to set.                    
                </param>
                <exception>
                    IOException if the object could not be cached.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="200">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="201"/>
                <scope line="203"/>
            </method>
            <javadoc line="208">
                Get the attribute value.                
                <param>
                    name the extension name used in the lookup.                    
                </param>
                <exception>
                    IOException if named extension is not found.                    
                </exception>
            </javadoc>
            <method name="get" type="Object" line="213">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="obj" type="Object" line="214"/>
                <scope line="215"/>
            </method>
            <javadoc line="221">
                Delete the attribute value.                
                <param>
                    name the extension name used in the lookup.                    
                </param>
                <exception>
                    IOException if named extension is not found.                    
                </exception>
            </javadoc>
            <method name="delete" type="void" line="226">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="obj" type="Object" line="227"/>
                <scope line="228"/>
            </method>
            <method name="getNameByOid" type="String" line="234">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
                <scope line="235">
                    <scope line="236"/>
                </scope>
            </method>
            <javadoc line="243">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration<Extension>" line="247"/>
            <javadoc line="251">
                Return a collection view of the extensions.                
                <return>
                    a collection view of the extensions in this Certificate.                    
                </return>
            </javadoc>
            <method name="getAllExtensions" type="Collection<Extension>" line="255"/>
            <method name="getUnparseableExtensions" type="Map<String,Extension>" line="259">
                <scope line="260"/>
                <scope line="262"/>
            </method>
            <javadoc line="267">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="270"/>
            <javadoc line="274">
                Return true if a critical extension is found that is
                  not supported, otherwise return false.                
            </javadoc>
            <method name="hasUnsupportedCriticalExtension" type="boolean" line="278"/>
            <javadoc line="282">
                Compares this CertificateExtensions for equality with the specified
                  object. If the &lt;code&gt;other&lt;/code&gt; object is an
                  &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;CertificateExtensions&lt;/code&gt;, then
                  all the entries are compared with the entries from this.                
                <param>
                    other the object to test for equality with this
                      CertificateExtensions.                    
                </param>
                <return>
                    true iff all the entries match that of the Other,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="293">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <declaration name="otherC" type="Collection&lt;Extension&gt;" line="298"/>
                <declaration name="objs" type="Object[]" line="300"/>
                <declaration name="len" type="int" line="302"/>
                <declaration name="otherExt" type="Extension" line="306"/>
                <declaration name="key" type="String" line="307"/>
                <scope line="308"/>
            </method>
            <javadoc line="324">
                Returns a hashcode value for this CertificateExtensions.                
                <return>
                    the hashcode value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="329"/>
            <javadoc line="333">
                Returns a string representation of this &lt;tt&gt;CertificateExtensions&lt;/tt&gt;
                  object in the form of a set of entries, enclosed in braces and separated
                  by the ASCII characters &quot;&lt;tt&gt;,&amp;nbsp;&lt;/tt&gt;&quot; (comma and space).
                  &lt;p&gt;Overrides to &lt;tt&gt;toString&lt;/tt&gt; method of &lt;tt&gt;Object&lt;/tt&gt;.                
                <return>
                    a string representation of this CertificateExtensions.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="341"/>
        </class>
        <class name="UnparseableExtension" line="347">
            <extends class="Extension"/>
            <comment line="81">
                helper routine                
            </comment>
            <comment line="94">
                Parse the encoded extension                
            </comment>
            <declaration name="name" type="String" line="348"/>
            <declaration name="why" type="Throwable" line="349"/>
            <method name="UnparseableExtension" type="constructor" line="351">
                <params>
                    <param name="ext" type="Extension"/>
                    <param name="why" type="Throwable"/>
                </params>
                <comment line="363">
                    If we cannot find the name, just ignore it                    
                </comment>
                <scope line="355">
                    <declaration name="extClass" type="Class" line="356"/>
                    <scope line="357">
                        <declaration name="field" type="Field" line="358"/>
                    </scope>
                </scope>
                <scope line="361"/>
            </method>
            <method name="toString" type="String" line="368"/>
        </class>
    </source>