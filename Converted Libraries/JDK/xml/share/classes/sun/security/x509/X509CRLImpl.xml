<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.Security"/>
        <import package="java.security.Signature"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.SignatureException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509CRL"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.X509CRLEntry"/>
        <import package="java.security.cert.CRLException"/>
        <import package="java.util"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.provider.X509Factory"/>
        <import package="sun.security.util"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="X509CRLImpl" line="25">
            <extends class="X509CRL"/>
            <implements interface="DerEncoder"/>
            <javadoc line="25">
                &lt;p&gt;
                  An implmentation for X509 CRL (Certificate Revocation List).
                  &lt;p&gt;
                  The X.509 v2 CRL format is described below in ASN.1:
                  &lt;pre&gt;
                  CertificateList  ::=  SEQUENCE  {
                  tbsCertList          TBSCertList,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signature            BIT STRING  }
                  &lt;/pre&gt;
                  More information can be found in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280: Internet X.509
                  Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.
                  &lt;p&gt;
                  The ASN.1 definition of &lt;code&gt;tbsCertList&lt;/code&gt; is:
                  &lt;pre&gt;
                  TBSCertList  ::=  SEQUENCE  {
                  version                 Version OPTIONAL,
                  -- if present, must be v2
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  thisUpdate              ChoiceOfTime,
                  nextUpdate              ChoiceOfTime OPTIONAL,
                  revokedCertificates     SEQUENCE OF SEQUENCE  {
                  userCertificate         CertificateSerialNumber,
                  revocationDate          ChoiceOfTime,
                  crlEntryExtensions      Extensions OPTIONAL
                  -- if present, must be v2
                  }  OPTIONAL,
                  crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                  -- if present, must be v2
                  }
                  &lt;/pre&gt;                
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    X509CRL                    
                </see>
            </javadoc>
            <declaration name="signedCRL" type="byte[]" line="63"/>
            <declaration name="signature" type="byte[]" line="64"/>
            <declaration name="tbsCertList" type="byte[]" line="65"/>
            <declaration name="sigAlgId" type="AlgorithmId" line="66"/>
            <declaration name="version" type="int" line="67"/>
            <declaration name="infoSigAlgId" type="AlgorithmId" line="68"/>
            <declaration name="issuer" type="X500Name" line="69"/>
            <declaration name="issuerPrincipal" type="X500Principal" line="70"/>
            <declaration name="thisUpdate" type="Date" line="71"/>
            <declaration name="nextUpdate" type="Date" line="72"/>
            <declaration name="revokedCerts" type="Map&amp;lt;X509IssuerSerial,X509CRLEntry&amp;gt;" line="73"/>
            <declaration name="extensions" type="CRLExtensions" line="74"/>
            <declaration name="isExplicit" type="boolean" line="75"/>
            <declaration name="YR_2050" type="long" line="76"/>
            <declaration name="readOnly" type="boolean" line="77"/>
            <declaration name="verifiedPublicKey" type="PublicKey" line="78"/>
            <javadoc line="78">
                PublicKey that has previously been used to successfully verify
                  the signature of this CRL. Null if the CRL has not
                  yet been verified (successfully).                
            </javadoc>
            <declaration name="verifiedProvider" type="String" line="84"/>
            <javadoc line="84">
                If verifiedPublicKey is not null, name of the provider used to
                  successfully verify the signature of this CRL, or the
                  empty String if no provider was explicitly specified.                
            </javadoc>
            <javadoc line="90">
                Not to be used. As it would lead to cases of uninitialized
                  CRL objects.                
            </javadoc>
            <method name="X509CRLImpl" type="constructor" line="94"/>
            <javadoc line="96">
                Unmarshals an X.509 CRL from its encoded form, parsing the encoded
                  bytes.  This form of constructor is used by agents which
                  need to examine and use CRL contents. Note that the buffer
                  must include only one CRL, and no &quot;garbage&quot; may be left at
                  the end.                
                <param>
                    crlData the encoded bytes, with no trailing padding.                    
                </param>
                <exception>
                    CRLException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="X509CRLImpl" type="constructor" line="105">
                <params>
                    <param name="crlData" type="byte[]"/>
                </params>
                <scope line="106"/>
                <scope line="109"/>
            </method>
            <javadoc line="114">
                Unmarshals an X.509 CRL from an DER value.                
                <param>
                    val a DER value holding at least one CRL                    
                </param>
                <exception>
                    CRLException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="X509CRLImpl" type="constructor" line="119">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
                <scope line="120"/>
                <scope line="123"/>
            </method>
            <javadoc line="128">
                Unmarshals an X.509 CRL from an input stream. Only one CRL
                  is expected at the end of the input stream.                
                <param>
                    inStrm an input stream holding at least one CRL                    
                </param>
                <exception>
                    CRLException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="X509CRLImpl" type="constructor" line="134">
                <params>
                    <param name="inStrm" type="InputStream"/>
                </params>
                <scope line="135"/>
                <scope line="138"/>
            </method>
            <javadoc line="143">
                Initial CRL constructor, no revoked certs, and no extensions.                
                <param>
                    issuer the name of the CA issuing this CRL.                    
                </param>
                <param>
                    thisUpdate the Date of this issue.                    
                </param>
                <param>
                    nextUpdate the Date of the next CRL.                    
                </param>
            </javadoc>
            <method name="X509CRLImpl" type="constructor" line="149">
                <params>
                    <param name="issuer" type="X500Name"/>
                    <param name="thisDate" type="Date"/>
                    <param name="nextDate" type="Date"/>
                </params>
            </method>
            <javadoc line="154">
                CRL constructor, revoked certs, no extensions.                
                <param>
                    issuer the name of the CA issuing this CRL.                    
                </param>
                <param>
                    thisUpdate the Date of this issue.                    
                </param>
                <param>
                    nextUpdate the Date of the next CRL.                    
                </param>
                <param>
                    badCerts the array of CRL entries.                    
                </param>
                <exception>
                    CRLException on parsing/construction errors.                    
                </exception>
            </javadoc>
            <method name="X509CRLImpl" type="constructor" line="162">
                <params>
                    <param name="issuer" type="X500Name"/>
                    <param name="thisDate" type="Date"/>
                    <param name="nextDate" type="Date"/>
                    <param name="badCerts" type="X509CRLEntry[]"/>
                </params>
                <scope line="166">
                    <declaration name="crlIssuer" type="X500Principal" line="167"/>
                    <declaration name="badCertIssuer" type="X500Principal" line="168"/>
                    <scope line="169">
                        <declaration name="badCert" type="X509CRLEntryImpl" line="170"/>
                        <scope line="171"/>
                        <scope line="174"/>
                        <declaration name="issuerSerial" type="X509IssuerSerial" line="178"/>
                        <scope line="180"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="186">
                CRL constructor, revoked certs and extensions.                
                <param>
                    issuer the name of the CA issuing this CRL.                    
                </param>
                <param>
                    thisUpdate the Date of this issue.                    
                </param>
                <param>
                    nextUpdate the Date of the next CRL.                    
                </param>
                <param>
                    badCerts the array of CRL entries.                    
                </param>
                <param>
                    crlExts the CRL extensions.                    
                </param>
                <exception>
                    CRLException on parsing/construction errors.                    
                </exception>
            </javadoc>
            <method name="X509CRLImpl" type="constructor" line="195">
                <params>
                    <param name="issuer" type="X500Name"/>
                    <param name="thisDate" type="Date"/>
                    <param name="nextDate" type="Date"/>
                    <param name="badCerts" type="X509CRLEntry[]"/>
                    <param name="crlExts" type="CRLExtensions"/>
                </params>
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Returned the encoding as an uncloned byte array. Callers must
                  guarantee that they neither modify it nor expose it to untrusted
                  code.                
            </javadoc>
            <method name="getEncodedInternal" type="byte[]" line="207">
                <scope line="208"/>
            </method>
            <javadoc line="213">
                Returns the ASN.1 DER encoded form of this CRL.                
                <exception>
                    CRLException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="217"/>
            <javadoc line="220">
                Encodes the &quot;to-be-signed&quot; CRL to the OutputStream.                
                <param>
                    out the OutputStream to write to.                    
                </param>
                <exception>
                    CRLException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encodeInfo" type="void" line="225">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="226">
                    <declaration name="tmp" type="DerOutputStream" line="227"/>
                    <declaration name="rCerts" type="DerOutputStream" line="228"/>
                    <declaration name="seq" type="DerOutputStream" line="229"/>
                    <scope line="236"/>
                    <scope line="240">
                        <scope line="241"/>
                    </scope>
                </scope>
                <scope line="251"/>
            </method>
            <javadoc line="255">
                Verifies that this CRL was signed using the
                  private key that corresponds to the given public key.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException if there&apos;s no default provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CRLException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="266">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
            </method>
            <javadoc line="269">
                Verifies that this CRL was signed using the
                  private key that corresponds to the given public key,
                  and that the signature verification was computed by
                  the given provider.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <param>
                    sigProvider the name of the signature provider.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CRLException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="283">
                <params>
                    <param name="key" type="PublicKey"/>
                    <param name="sigProvider" type="String"/>
                </params>
                <scope line="284"/>
                <scope line="287">
                    <scope line="288"/>
                </scope>
                <scope line="292"/>
                <declaration name="sigVerf" type="Signature" line="295"/>
                <scope line="296"/>
                <scope line="299"/>
                <scope line="303"/>
                <scope line="307"/>
            </method>
            <javadoc line="313">
                Encodes an X.509 CRL, and signs it using the given key.                
                <param>
                    key the private key used for signing.                    
                </param>
                <param>
                    algorithm the name of the signature algorithm used.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CRLException if any mandatory data was omitted.                    
                </exception>
            </javadoc>
            <method name="sign" type="void" line="324">
                <params>
                    <param name="key" type="PrivateKey"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="327">
                Encodes an X.509 CRL, and signs it using the given key.                
                <param>
                    key the private key used for signing.                    
                </param>
                <param>
                    algorithm the name of the signature algorithm used.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CRLException if any mandatory data was omitted.                    
                </exception>
            </javadoc>
            <method name="sign" type="void" line="339">
                <params>
                    <param name="key" type="PrivateKey"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="340">
                    <declaration name="sigEngine" type="Signature" line="342"/>
                    <declaration name="out" type="DerOutputStream" line="348"/>
                    <declaration name="tmp" type="DerOutputStream" line="349"/>
                </scope>
                <scope line="359"/>
            </method>
            <javadoc line="363">
                Returns a printable string of this CRL.                
                <return>
                    value of this CRL in a printable form.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="367">
                <declaration name="sb" type="StringBuffer" line="368"/>
                <scope line="375">
                    <declaration name="i" type="int" line="377"/>
                </scope>
                <scope line="380">
                    <declaration name="allExts" type="Collection&amp;lt;Extension&amp;gt;" line="381"/>
                    <declaration name="objs" type="Object[]" line="382"/>
                    <scope line="384">
                        <declaration name="ext" type="Extension" line="386"/>
                        <scope line="387">
                            <scope line="388">
                                <declaration name="extValue" type="byte[]" line="390"/>
                                <scope line="391">
                                    <declaration name="out" type="DerOutputStream" line="392"/>
                                    <declaration name="enc" type="HexDumpEncoder" line="395"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="401"/>
                    </scope>
                </scope>
                <scope line="406">
                    <declaration name="encoder" type="HexDumpEncoder" line="407"/>
                </scope>
            </method>
            <javadoc line="413">
                Checks whether the given certificate is on this CRL.                
                <param>
                    cert the certificate to check for.                    
                </param>
                <return>
                    true if the given certificate is on this CRL,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isRevoked" type="boolean" line="419">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="420"/>
                <declaration name="xcert" type="X509Certificate" line="423"/>
                <declaration name="issuerSerial" type="X509IssuerSerial" line="424"/>
            </method>
            <javadoc line="427">
                Gets the version number from this CRL.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
                  -- v3 does not apply to CRLs but appears for consistency
                  -- with definition of Version for certs
                  &lt;/pre&gt;                
                <return>
                    the version number, i.e. 1 or 2.                    
                </return>
            </javadoc>
            <method name="getVersion" type="int" line="437"/>
            <javadoc line="440">
                Gets the issuer distinguished name from this CRL.
                  The issuer name identifies the entity who has signed (and
                  issued the CRL). The issuer name field contains an
                  X.500 distinguished name (DN).
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  issuer    Name
                  Name ::= CHOICE { RDNSequence }
                  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
                  RelativeDistinguishedName ::=
                  SET OF AttributeValueAssertion
                  AttributeValueAssertion ::= SEQUENCE {
                  AttributeType,
                  AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY
                  &lt;/pre&gt;
                  The Name describes a hierarchical name composed of attributes,
                  such as country name, and corresponding values, such as US.
                  The type of the component AttributeValue is determined by the
                  AttributeType; in general it will be a directoryString.
                  A directoryString is usually one of PrintableString,
                  TeletexString or UniversalString.                
                <return>
                    the issuer name.                    
                </return>
            </javadoc>
            <method name="getIssuerDN" type="Principal" line="466"/>
            <javadoc line="469">
                Return the issuer as X500Principal. Overrides method in X509CRL
                  to provide a slightly more efficient version.                
            </javadoc>
            <method name="getIssuerX500Principal" type="X500Principal" line="473">
                <scope line="474"/>
            </method>
            <javadoc line="479">
                Gets the thisUpdate date from the CRL.
                  The ASN.1 definition for this is:                
                <return>
                    the thisUpdate date from the CRL.                    
                </return>
            </javadoc>
            <method name="getThisUpdate" type="Date" line="484"/>
            <javadoc line="487">
                Gets the nextUpdate date from the CRL.                
                <return>
                    the nextUpdate date from the CRL, or null if
                      not present.                    
                </return>
            </javadoc>
            <method name="getNextUpdate" type="Date" line="492"/>
            <javadoc line="496">
                Gets the CRL entry with the given serial number from this CRL.                
                <return>
                    the entry with the given serial number, or &lt;code&gt;null&lt;/code&gt; if
                      no such entry exists in the CRL.                    
                </return>
                <see>
                    X509CRLEntry                    
                </see>
            </javadoc>
            <method name="getRevokedCertificate" type="X509CRLEntry" line="502">
                <params>
                    <param name="serialNumber" type="BigInteger"/>
                </params>
                <scope line="503"/>
                <declaration name="issuerSerial" type="X509IssuerSerial" line="506"/>
            </method>
            <javadoc line="509">
                Gets the CRL entry for the given certificate.                
            </javadoc>
            <method name="getRevokedCertificate" type="X509CRLEntry" line="512">
                <params>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <scope line="513"/>
                <declaration name="issuerSerial" type="X509IssuerSerial" line="516"/>
            </method>
            <javadoc line="519">
                Gets all the revoked certificates from the CRL.
                  A Set of X509CRLEntry.                
                <return>
                    all the revoked certificates or &lt;code&gt;null&lt;/code&gt; if there are
                      none.                    
                </return>
                <see>
                    X509CRLEntry                    
                </see>
            </javadoc>
            <method name="getRevokedCertificates" type="Set&lt;X509CRLEntry&gt;" line="526">
                <scope line="527"/>
                <scope line="530"/>
            </method>
            <javadoc line="534">
                Gets the DER encoded CRL information, the
                  &lt;code&gt;tbsCertList&lt;/code&gt; from this CRL.
                  This can be used to verify the signature independently.                
                <return>
                    the DER encoded CRL information.                    
                </return>
                <exception>
                    CRLException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="getTBSCertList" type="byte[]" line="541">
                <declaration name="dup" type="byte[]" line="543"/>
            </method>
            <javadoc line="547">
                Gets the raw Signature bits from the CRL.                
                <return>
                    the signature.                    
                </return>
            </javadoc>
            <method name="getSignature" type="byte[]" line="551">
                <declaration name="dup" type="byte[]" line="553"/>
            </method>
            <javadoc line="557">
                Gets the signature algorithm name for the CRL
                  signature algorithm. For example, the string &quot;SHA1withDSA&quot;.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  AlgorithmIdentifier  ::=  SEQUENCE  {
                  algorithm               OBJECT IDENTIFIER,
                  parameters              ANY DEFINED BY algorithm OPTIONAL  }
                  -- contains a value of the type
                  -- registered for use with the
                  -- algorithm object identifier value
                  &lt;/pre&gt;                
                <return>
                    the signature algorithm name.                    
                </return>
            </javadoc>
            <method name="getSigAlgName" type="String" line="571"/>
            <javadoc line="575">
                Gets the signature algorithm OID string from the CRL.
                  An OID is represented by a set of positive whole number separated
                  by &quot;.&quot;, that means,&lt;br&gt;
                  &amp;lt;positive whole number&amp;gt;.&amp;lt;positive whole number&amp;gt;.&amp;lt;...&amp;gt;
                  For example, the string &quot;1.2.840.10040.4.3&quot; identifies the SHA-1
                  with DSA signature algorithm defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3279.txt&quot;&gt;RFC 3279: Algorithms and
                  Identifiers for the Internet X.509 Public Key Infrastructure Certificate
                  and CRL Profile&lt;/a&gt;.                
                <return>
                    the signature algorithm oid string.                    
                </return>
            </javadoc>
            <method name="getSigAlgOID" type="String" line="587">
                <declaration name="oid" type="ObjectIdentifier" line="589"/>
            </method>
            <javadoc line="592">
                Gets the DER encoded signature algorithm parameters from this
                  CRL&apos;s signature algorithm. In most cases, the signature
                  algorithm parameters are null, the parameters are usually
                  supplied with the Public Key.                
                <return>
                    the DER encoded signature algorithm parameters, or
                      null if no parameters are present.                    
                </return>
            </javadoc>
            <method name="getSigAlgParams" type="byte[]" line="600">
                <scope line="602"/>
                <scope line="605"/>
            </method>
            <javadoc line="609">
                Gets the signature AlgorithmId from the CRL.                
                <return>
                    the signature AlgorithmId                    
                </return>
            </javadoc>
            <method name="getSigAlgId" type="AlgorithmId" line="613"/>
            <javadoc line="616">
                return the AuthorityKeyIdentifier, if any.                
                <returns>
                    AuthorityKeyIdentifier or null
                      (if no AuthorityKeyIdentifierExtension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getAuthKeyId" type="KeyIdentifier" line="622">
                <declaration name="aki" type="AuthorityKeyIdentifierExtension" line="623"/>
                <scope line="624">
                    <declaration name="keyId" type="KeyIdentifier" line="625"/>
                </scope>
                <scope line="628"/>
            </method>
            <javadoc line="632">
                return the AuthorityKeyIdentifierExtension, if any.                
                <returns>
                    AuthorityKeyIdentifierExtension or null (if no such extension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getAuthKeyIdExtension" type="AuthorityKeyIdentifierExtension" line="637">
                <declaration name="obj" type="Object" line="638"/>
            </method>
            <javadoc line="641">
                return the CRLNumberExtension, if any.                
                <returns>
                    CRLNumberExtension or null (if no such extension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getCRLNumberExtension" type="CRLNumberExtension" line="646">
                <declaration name="obj" type="Object" line="647"/>
            </method>
            <javadoc line="650">
                return the CRL number from the CRLNumberExtension, if any.                
                <returns>
                    number or null (if no such extension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getCRLNumber" type="BigInteger" line="655">
                <declaration name="numExt" type="CRLNumberExtension" line="656"/>
                <scope line="657">
                    <declaration name="num" type="BigInteger" line="658"/>
                </scope>
                <scope line="661"/>
            </method>
            <javadoc line="665">
                return the DeltaCRLIndicatorExtension, if any.                
                <returns>
                    DeltaCRLIndicatorExtension or null (if no such extension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getDeltaCRLIndicatorExtension" type="DeltaCRLIndicatorExtension" line="670">
                <declaration name="obj" type="Object" line="671"/>
            </method>
            <javadoc line="674">
                return the base CRL number from the DeltaCRLIndicatorExtension, if any.                
                <returns>
                    number or null (if no such extension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getBaseCRLNumber" type="BigInteger" line="679">
                <declaration name="dciExt" type="DeltaCRLIndicatorExtension" line="680"/>
                <scope line="681">
                    <declaration name="num" type="BigInteger" line="682"/>
                </scope>
                <scope line="685"/>
            </method>
            <javadoc line="689">
                return the IssuerAlternativeNameExtension, if any.                
                <returns>
                    IssuerAlternativeNameExtension or null (if no such extension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getIssuerAltNameExtension" type="IssuerAlternativeNameExtension" line="694">
                <declaration name="obj" type="Object" line="695"/>
            </method>
            <javadoc line="698">
                return the IssuingDistributionPointExtension, if any.                
                <returns>
                    IssuingDistributionPointExtension or null
                      (if no such extension)                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getIssuingDistributionPointExtension" type="IssuingDistributionPointExtension" line="704">
                <declaration name="obj" type="Object" line="705"/>
            </method>
            <javadoc line="708">
                Return true if a critical extension is found that is
                  not supported, otherwise return false.                
            </javadoc>
            <method name="hasUnsupportedCriticalExtension" type="boolean" line="712"/>
            <javadoc line="716">
                Gets a Set of the extension(s) marked CRITICAL in the
                  CRL. In the returned set, each extension is represented by
                  its OID string.                
                <return>
                    a set of the extension oid strings in the
                      CRL that are marked critical.                    
                </return>
            </javadoc>
            <method name="getCriticalExtensionOIDs" type="Set&lt;String&gt;" line="723">
                <scope line="724"/>
                <declaration name="extSet" type="Set&amp;lt;String&amp;gt;" line="727"/>
                <scope line="728">
                    <scope line="729"/>
                </scope>
            </method>
            <javadoc line="735">
                Gets a Set of the extension(s) marked NON-CRITICAL in the
                  CRL. In the returned set, each extension is represented by
                  its OID string.                
                <return>
                    a set of the extension oid strings in the
                      CRL that are NOT marked critical.                    
                </return>
            </javadoc>
            <method name="getNonCriticalExtensionOIDs" type="Set&lt;String&gt;" line="742">
                <scope line="743"/>
                <declaration name="extSet" type="Set&amp;lt;String&amp;gt;" line="746"/>
                <scope line="747">
                    <scope line="748"/>
                </scope>
            </method>
            <javadoc line="754">
                Gets the DER encoded OCTET string for the extension value
                  (&lt;code&gt;extnValue&lt;/code&gt;) identified by the passed in oid String.
                  The &lt;code&gt;oid&lt;/code&gt; string is
                  represented by a set of positive whole number separated
                  by &quot;.&quot;, that means,&lt;br&gt;
                  &amp;lt;positive whole number&amp;gt;.&amp;lt;positive whole number&amp;gt;.&amp;lt;...&amp;gt;                
                <param>
                    oid the Object Identifier value for the extension.                    
                </param>
                <return>
                    the der encoded octet string of the extension value.                    
                </return>
            </javadoc>
            <method name="getExtensionValue" type="byte[]" line="764">
                <params>
                    <param name="oid" type="String"/>
                </params>
                <scope line="766">
                    <declaration name="extAlias" type="String" line="767"/>
                    <declaration name="crlExt" type="Extension" line="768"/>
                    <scope line="769">
                        <declaration name="findOID" type="ObjectIdentifier" line="770"/>
                        <declaration name="ex" type="Extension" line="771"/>
                        <declaration name="inCertOID" type="ObjectIdentifier" line="772"/>
                        <scope line="773">
                            <scope line="776"/>
                        </scope>
                    </scope>
                    <declaration name="extData" type="byte[]" line="784"/>
                    <declaration name="out" type="DerOutputStream" line="786"/>
                </scope>
                <scope line="790"/>
            </method>
            <javadoc line="794">
                get an extension                
                <param>
                    oid ObjectIdentifier of extension desired                    
                </param>
                <returns>
                    Object of type &lt;extension&gt; or null, if not found                    
                </returns>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="getExtension" type="Object" line="800">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
            </method>
            <method name="parse" type="void" line="804">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
                <declaration name="seq" type="DerValue" line="808"/>
                <declaration name="derStrm" type="DerInputStream" line="819"/>
                <declaration name="tmp" type="DerValue" line="820"/>
                <declaration name="nextByte" type="byte" line="821"/>
                <scope line="824"/>
                <declaration name="tmpId" type="AlgorithmId" line="829"/>
                <scope line="833"/>
                <scope line="837"/>
                <scope line="840"/>
                <scope line="843"/>
                <scope line="848"/>
                <scope line="851"/>
                <scope line="856">
                    <declaration name="badCerts" type="DerValue[]" line="857"/>
                    <declaration name="crlIssuer" type="X500Principal" line="858"/>
                    <declaration name="badCertIssuer" type="X500Principal" line="859"/>
                    <scope line="860">
                        <declaration name="entry" type="X509CRLEntryImpl" line="861"/>
                        <declaration name="issuerSerial" type="X509IssuerSerial" line="864"/>
                    </scope>
                </scope>
                <scope line="870"/>
            </method>
            <javadoc line="875">
                Extract the issuer X500Principal from an X509CRL. Parses the encoded
                  form of the CRL to preserve the principal&apos;s ASN.1 encoding.
                  Called by java.security.cert.X509CRL.getIssuerX500Principal().                
            </javadoc>
            <method name="getIssuerX500Principal" type="X500Principal" line="880">
                <params>
                    <param name="crl" type="X509CRL"/>
                </params>
                <scope line="881">
                    <declaration name="encoded" type="byte[]" line="882"/>
                    <declaration name="derIn" type="DerInputStream" line="883"/>
                    <declaration name="tbsCert" type="DerValue" line="884"/>
                    <declaration name="tbsIn" type="DerInputStream" line="885"/>
                    <declaration name="tmp" type="DerValue" line="886"/>
                    <declaration name="nextByte" type="byte" line="887"/>
                    <scope line="888"/>
                    <declaration name="principalBytes" type="byte[]" line="893"/>
                </scope>
                <scope line="896"/>
            </method>
            <javadoc line="900">
                Returned the encoding of the given certificate for internal use.
                  Callers must guarantee that they neither modify it nor expose it
                  to untrusted code. Uses getEncodedInternal() if the certificate
                  is instance of X509CertImpl, getEncoded() otherwise.                
            </javadoc>
            <method name="getEncodedInternal" type="byte[]" line="906">
                <params>
                    <param name="crl" type="X509CRL"/>
                </params>
                <scope line="907"/>
                <scope line="910"/>
            </method>
            <javadoc line="914">
                Utility method to convert an arbitrary instance of X509CRL
                  to a X509CRLImpl. Does a cast if possible, otherwise reparses
                  the encoding.                
            </javadoc>
            <method name="toImpl" type="X509CRLImpl" line="919">
                <params>
                    <param name="crl" type="X509CRL"/>
                </params>
                <scope line="920"/>
                <scope line="923"/>
            </method>
            <javadoc line="927">
                Returns the X500 certificate issuer DN of a CRL entry.                
                <param>
                    entry the entry to check                    
                </param>
                <param>
                    prevCertIssuer the previous entry&apos;s certificate issuer                    
                </param>
                <return>
                    the X500Principal in a CertificateIssuerExtension, or
                      prevCertIssuer if it does not exist                    
                </return>
            </javadoc>
            <method name="getCertIssuer" type="X500Principal" line="934">
                <params>
                    <param name="entry" type="X509CRLEntryImpl"/>
                    <param name="prevCertIssuer" type="X500Principal"/>
                </params>
                <declaration name="ciExt" type="CertificateIssuerExtension" line="935"/>
                <scope line="936">
                    <declaration name="names" type="GeneralNames" line="937"/>
                    <declaration name="issuerDN" type="X500Name" line="938"/>
                </scope>
                <scope line="941"/>
            </method>
            <method name="derEncode" type="void" line="945">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <class name="X509IssuerSerial" line="949">
                <javadoc line="949">
                    Immutable X.509 Certificate Issuer DN and serial number pair                    
                </javadoc>
                <declaration name="issuer" type="X500Principal" line="953"/>
                <declaration name="serial" type="BigInteger" line="954"/>
                <declaration name="hashcode" type="int" line="955"/>
                <javadoc line="956">
                    Create an X509IssuerSerial.                    
                    <param>
                        issuer the issuer DN                        
                    </param>
                    <param>
                        serial the serial number                        
                    </param>
                </javadoc>
                <method name="X509IssuerSerial" type="constructor" line="961">
                    <params>
                        <param name="issuer" type="X500Principal"/>
                        <param name="serial" type="BigInteger"/>
                    </params>
                </method>
                <javadoc line="965">
                    Construct an X509IssuerSerial from an X509Certificate.                    
                </javadoc>
                <method name="X509IssuerSerial" type="constructor" line="968">
                    <params>
                        <param name="cert" type="X509Certificate"/>
                    </params>
                </method>
                <javadoc line="971">
                    Returns the issuer.                    
                    <return>
                        the issuer                        
                    </return>
                </javadoc>
                <method name="getIssuer" type="X500Principal" line="975"/>
                <javadoc line="978">
                    Returns the serial number.                    
                    <return>
                        the serial number                        
                    </return>
                </javadoc>
                <method name="getSerial" type="BigInteger" line="982"/>
                <javadoc line="985">
                    Compares this X509Serial with another and returns true if they
                      are equivalent.                    
                    <param>
                        o the other object to compare with                        
                    </param>
                    <return>
                        true if equal, false otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="991">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="992"/>
                    <scope line="995"/>
                    <declaration name="other" type="X509IssuerSerial" line="998"/>
                    <scope line="999"/>
                </method>
                <javadoc line="1004">
                    Returns a hash code value for this X509IssuerSerial.                    
                    <return>
                        the hash code value                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="1008">
                    <scope line="1009">
                        <declaration name="result" type="int" line="1010"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>