<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="sun.security.util"/>
        <class name="PolicyConstraintsExtension" line="36">
            <extends class="Extension"/>
            <comment line="80">
                Encode this extension value.                
            </comment>
            <implements interface="CertAttrSet">
                <type_params>
                    <type_param name="String"/>
                </type_params>
            </implements>
            <javadoc line="36">
                This class defines the certificate extension which specifies the
                  Policy constraints.
                  &lt;p&gt;
                  The policy constraints extension can be used in certificates issued
                  to CAs. The policy constraints extension constrains path validation
                  in two ways. It can be used to prohibit policy mapping or require
                  that each certificate in a path contain an acceptable policy
                  identifier.&lt;p&gt;
                  The ASN.1 syntax for this is (IMPLICIT tagging is defined in the
                  module definition):
                  &lt;pre&gt;
                  PolicyConstraints ::= SEQUENCE {
                  requireExplicitPolicy [0] SkipCerts OPTIONAL,
                  inhibitPolicyMapping  [1] SkipCerts OPTIONAL
                  }
                  SkipCerts ::= INTEGER (0..MAX)
                  &lt;/pre&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <see>
                    Extension                    
                </see>
                <see>
                    CertAttrSet                    
                </see>
            </javadoc>
            <declaration name="IDENT" type="String" line="61"/>
            <javadoc line="61">
                Identifier for this attribute, to be used with the
                  get, set, delete methods of Certificate, x509 type.                
            </javadoc>
            <declaration name="NAME" type="String" line="66"/>
            <javadoc line="66">
                Attribute names.                
            </javadoc>
            <declaration name="REQUIRE" type="String" line="70"/>
            <declaration name="INHIBIT" type="String" line="71"/>
            <declaration name="TAG_REQUIRE" type="byte" line="73"/>
            <declaration name="TAG_INHIBIT" type="byte" line="74"/>
            <declaration name="require" type="int" line="76"/>
            <declaration name="inhibit" type="int" line="77"/>
            <method name="encodeThis" type="void" line="80">
                <scope line="81"/>
                <declaration name="tagged" type="DerOutputStream" line="85"/>
                <declaration name="seq" type="DerOutputStream" line="86"/>
                <scope line="88">
                    <declaration name="tmp" type="DerOutputStream" line="89"/>
                </scope>
                <scope line="94">
                    <declaration name="tmp" type="DerOutputStream" line="95"/>
                </scope>
            </method>
            <javadoc line="104">
                Create a PolicyConstraintsExtension object with both
                  require explicit policy and inhibit policy mapping. The
                  extension is marked non-critical.                
                <param>
                    require require explicit policy (-1 for optional).                    
                </param>
                <param>
                    inhibit inhibit policy mapping (-1 for optional).                    
                </param>
            </javadoc>
            <method name="PolicyConstraintsExtension" type="constructor" line="113">
                <params>
                    <param name="require" type="int"/>
                    <param name="inhibit" type="int"/>
                </params>
            </method>
            <javadoc line="117">
                Create a PolicyConstraintsExtension object with specified
                  criticality and both require explicit policy and inhibit
                  policy mapping.                
                <param>
                    critical true if the extension is to be treated as critical.                    
                </param>
                <param>
                    require require explicit policy (-1 for optional).                    
                </param>
                <param>
                    inhibit inhibit policy mapping (-1 for optional).                    
                </param>
            </javadoc>
            <method name="PolicyConstraintsExtension" type="constructor" line="127">
                <params>
                    <param name="critical" type="Boolean"/>
                    <param name="require" type="int"/>
                    <param name="inhibit" type="int"/>
                </params>
            </method>
            <javadoc line="135">
                Create the extension from its DER encoded value and criticality.                
                <param>
                    critical true if the extension is to be treated as critical.                    
                </param>
                <param>
                    value an array of DER encoded bytes of the actual value.                    
                </param>
                <exception>
                    ClassCastException if value is not an array of bytes                    
                </exception>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="PolicyConstraintsExtension" type="constructor" line="144">
                <params>
                    <param name="critical" type="Boolean"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="val" type="DerValue" line="149"/>
                <scope line="150"/>
                <declaration name="in" type="DerInputStream" line="153"/>
                <scope line="154">
                    <declaration name="next" type="DerValue" line="155"/>
                    <scope line="157"/>
                    <scope line="165"/>
                </scope>
            </method>
            <javadoc line="176">
                Return the extension as user readable string.                
            </javadoc>
            <method name="toString" type="String" line="179">
                <declaration name="s" type="String" line="180"/>
            </method>
            <javadoc line="195">
                Write the extension to the DerOutputStream.                
                <param>
                    out the DerOutputStream to write the extension to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="201">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="202"/>
                <scope line="203"/>
            </method>
            <javadoc line="212">
                Set the attribute value.                
            </javadoc>
            <method name="set" type="void" line="215">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="216"/>
                <scope line="219"/>
                <scope line="221"/>
                <scope line="223"/>
            </method>
            <javadoc line="231">
                Get the attribute value.                
            </javadoc>
            <method name="get" type="Object" line="234">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="235"/>
                <scope line="237"/>
                <scope line="239"/>
            </method>
            <javadoc line="245">
                Delete the attribute value.                
            </javadoc>
            <method name="delete" type="void" line="248">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="249"/>
                <scope line="251"/>
                <scope line="253"/>
            </method>
            <javadoc line="260">
                Return an enumeration of names of attributes existing within this
                  attribute.                
            </javadoc>
            <method name="getElements" type="Enumeration<String>" line="264">
                <declaration name="elements" type="AttributeNameEnumeration" line="265"/>
            </method>
            <javadoc line="272">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="275"/>
        </class>
    </source>