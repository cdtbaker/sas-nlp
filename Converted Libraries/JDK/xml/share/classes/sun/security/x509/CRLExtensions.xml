<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.security.cert.CRLException"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="sun.security.util"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="CRLExtensions" line="41">
            <comment line="85">
                helper routine                
            </comment>
            <comment line="110">
                Parse the encoded extension                
            </comment>
            <javadoc line="41">
                This class defines the CRL Extensions.
                  It is used for both CRL Extensions and CRL Entry Extensions,
                  which are defined are follows:
                  &lt;pre&gt;
                  TBSCertList  ::=  SEQUENCE  {
                  version              Version OPTIONAL,   -- if present, must be v2
                  signature            AlgorithmIdentifier,
                  issuer               Name,
                  thisUpdate           Time,
                  nextUpdate           Time  OPTIONAL,
                  revokedCertificates  SEQUENCE OF SEQUENCE  {
                  userCertificate         CertificateSerialNumber,
                  revocationDate          Time,
                  crlEntryExtensions      Extensions OPTIONAL  -- if present, must be v2
                  }  OPTIONAL,
                  crlExtensions        [0] EXPLICIT Extensions OPTIONAL  -- if present, must be v2
                  }
                  &lt;/pre&gt;                
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="map" type="Hashtable&lt;String,Extension&gt;" line="65"/>
            <declaration name="unsupportedCritExt" type="boolean" line="66"/>
            <javadoc line="68">
                Default constructor.                
            </javadoc>
            <method name="CRLExtensions" type="constructor" line="71"/>
            <javadoc line="73">
                Create the object, decoding the values from the passed DER stream.                
                <param>
                    in the DerInputStream to read the Extension from, i.e. the
                      sequence of extensions.                    
                </param>
                <exception>
                    CRLException on decoding errors.                    
                </exception>
            </javadoc>
            <method name="CRLExtensions" type="constructor" line="80">
                <params>
                    <param name="in" type="DerInputStream"/>
                </params>
            </method>
            <method name="init" type="void" line="85">
                <params>
                    <param name="derStrm" type="DerInputStream"/>
                </params>
                <comment line="91">
                    check for context specific byte 0; skip it                    
                </comment>
                <scope line="86">
                    <declaration name="str" type="DerInputStream" line="87"/>
                    <declaration name="nextByte" type="byte" line="89"/>
                    <scope line="92">
                        <declaration name="val" type="DerValue" line="93"/>
                    </scope>
                    <declaration name="exts" type="DerValue[]" line="97"/>
                    <scope line="98">
                        <declaration name="ext" type="Extension" line="99"/>
                    </scope>
                </scope>
                <scope line="102"/>
            </method>
            <declaration name="PARAMS" type="Class[]" line="107"/>
            <method name="parseExtension" type="void" line="110">
                <params>
                    <param name="ext" type="Extension"/>
                </params>
                <comment line="114">
                    Unsupported extension                    
                </comment>
                <scope line="111">
                    <declaration name="extClass" type="Class" line="112"/>
                    <scope line="113"/>
                    <declaration name="cons" type="Constructor" line="120"/>
                    <declaration name="passed" type="Object[]" line="121"/>
                    <declaration name="crlExt" type="CertAttrSet" line="123"/>
                    <scope line="124"/>
                </scope>
                <scope line="127"/>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Encode the extensions in DER form to the stream.                
                <param>
                    out the DerOutputStream to marshal the contents to.                    
                </param>
                <param>
                    isExplicit the tag indicating whether this is an entry
                      extension (false) or a CRL extension (true).                    
                </param>
                <exception>
                    CRLException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="143">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="isExplicit" type="boolean"/>
                </params>
                <scope line="144">
                    <declaration name="extOut" type="DerOutputStream" line="145"/>
                    <declaration name="allExts" type="Collection&lt;Extension&gt;" line="146"/>
                    <declaration name="objs" type="Object[]" line="147"/>
                    <scope line="149"/>
                    <declaration name="seq" type="DerOutputStream" line="158"/>
                    <declaration name="tmp" type="DerOutputStream" line="161"/>
                </scope>
                <scope line="169"/>
                <scope line="171"/>
            </method>
            <javadoc line="176">
                Get the extension with this alias.                
                <param>
                    alias the identifier string for the extension to retrieve.                    
                </param>
            </javadoc>
            <method name="get" type="Extension" line="181">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="186">
                    fully qualified                    
                </comment>
                <declaration name="attr" type="X509AttributeName" line="182"/>
                <declaration name="name" type="String" line="183"/>
                <declaration name="id" type="String" line="184"/>
                <scope line="185">
                    <declaration name="index" type="int" line="186"/>
                </scope>
            </method>
            <javadoc line="193">
                Set the extension value with this alias.                
                <param>
                    alias the identifier string for the extension to set.                    
                </param>
                <param>
                    obj the Object to set the extension identified by the
                      alias.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="200">
                <params>
                    <param name="alias" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="204">
                Delete the extension value with this alias.                
                <param>
                    alias the identifier string for the extension to delete.                    
                </param>
            </javadoc>
            <method name="delete" type="void" line="209">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="213">
                Return an enumeration of the extensions.                
                <return>
                    an enumeration of the extensions in this CRL.                    
                </return>
            </javadoc>
            <method name="getElements" type="Enumeration<Extension>" line="217"/>
            <javadoc line="221">
                Return a collection view of the extensions.                
                <return>
                    a collection view of the extensions in this CRL.                    
                </return>
            </javadoc>
            <method name="getAllExtensions" type="Collection<Extension>" line="225"/>
            <javadoc line="229">
                Return true if a critical extension is found that is
                  not supported, otherwise return false.                
            </javadoc>
            <method name="hasUnsupportedCriticalExtension" type="boolean" line="233"/>
            <javadoc line="237">
                Compares this CRLExtensions for equality with the specified
                  object. If the &lt;code&gt;other&lt;/code&gt; object is an
                  &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;CRLExtensions&lt;/code&gt;, then
                  all the entries are compared with the entries from this.                
                <param>
                    other the object to test for equality with this CRLExtensions.                    
                </param>
                <return>
                    true iff all the entries match that of the Other,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="247">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <declaration name="otherC" type="Collection&lt;Extension&gt;" line="252"/>
                <declaration name="objs" type="Object[]" line="254"/>
                <declaration name="len" type="int" line="256"/>
                <declaration name="otherExt" type="Extension" line="260"/>
                <declaration name="key" type="String" line="261"/>
                <scope line="262"/>
            </method>
            <javadoc line="277">
                Returns a hashcode value for this CRLExtensions.                
                <return>
                    the hashcode value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="282"/>
            <javadoc line="286">
                Returns a string representation of this &lt;tt&gt;CRLExtensions&lt;/tt&gt; object
                  in the form of a set of entries, enclosed in braces and separated
                  by the ASCII characters &quot;&lt;tt&gt;,&amp;nbsp;&lt;/tt&gt;&quot; (comma and space).
                  &lt;p&gt;Overrides to &lt;tt&gt;toString&lt;/tt&gt; method of &lt;tt&gt;Object&lt;/tt&gt;.                
                <return>
                    a string representation of this CRLExtensions.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="294"/>
        </class>
    </source>