<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.lang.reflect"/>
        <import package="java.io.IOException"/>
        <import package="java.io.StringReader"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Principal"/>
        <import package="java.util"/>
        <import package="sun.security.util"/>
        <import package="sun.security.pkcs.PKCS9Attribute"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <class name="RDN" line="12">
            <javadoc line="12">
                RDNs are a set of {attribute = value} assertions.  Some of those
                  attributes are &quot;distinguished&quot; (unique w/in context).  Order is
                  never relevant.
                  Some X.500 names include only a single distinguished attribute
                  per RDN.  This style is currently common.
                  Note that DER-encoded RDNs sort AVAs by assertion OID ... so that
                  when we parse this data we don&apos;t have to worry about canonicalizing
                  it, but we&apos;ll need to sort them when we expose the RDN class more.
                  &lt;p&gt;
                  The ASN.1 for RDNs is:
                  &lt;pre&gt;
                  RelativeDistinguishedName ::=
                  SET OF AttributeTypeAndValue
                  AttributeTypeAndValue ::= SEQUENCE {
                  type     AttributeType,
                  value    AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
                  &lt;/pre&gt;
                  Note that instances of this class are immutable.                
            </javadoc>
            <declaration name="assertion" type="AVA[]" line="35"/>
            <declaration name="avaList" type="List&amp;lt;AVA&amp;gt;" line="36"/>
            <declaration name="canonicalString" type="String" line="37"/>
            <javadoc line="38">
                Constructs an RDN from its printable representation.
                  An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                  using &apos;+&apos; as a separator.
                  If the &apos;+&apos; should be considered part of an AVA value, it must be
                  preceded by &apos;\&apos;.                
                <param>
                    name String form of RDN                    
                </param>
                <throws>
                    IOException on parsing error                    
                </throws>
            </javadoc>
            <method name="RDN" type="constructor" line="47">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="50">
                Constructs an RDN from its printable representation.
                  An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                  using &apos;+&apos; as a separator.
                  If the &apos;+&apos; should be considered part of an AVA value, it must be
                  preceded by &apos;\&apos;.                
                <param>
                    name String form of RDN                    
                </param>
                <param>
                    keyword an additional mapping of keywords to OIDs                    
                </param>
                <throws>
                    IOException on parsing error                    
                </throws>
            </javadoc>
            <method name="RDN" type="constructor" line="60">
                <params>
                    <param name="name" type="String"/>
                    <param name="keywordMap" type="Map&lt;String,String&gt;"/>
                </params>
                <declaration name="quoteCount" type="int" line="61"/>
                <declaration name="searchOffset" type="int" line="62"/>
                <declaration name="avaOffset" type="int" line="63"/>
                <declaration name="avaVec" type="List&amp;lt;AVA&amp;gt;" line="64"/>
                <declaration name="nextPlus" type="int" line="65"/>
                <scope line="66">
                    <scope line="68">
                        <declaration name="avaString" type="String" line="69"/>
                        <scope line="70"/>
                        <declaration name="ava" type="AVA" line="73"/>
                    </scope>
                </scope>
                <declaration name="avaString" type="String" line="81"/>
                <scope line="82"/>
                <declaration name="ava" type="AVA" line="85"/>
            </method>
            <method name="RDN" type="constructor" line="89">
                <params>
                    <param name="name" type="String"/>
                    <param name="format" type="String"/>
                </params>
            </method>
            <method name="RDN" type="constructor" line="92">
                <params>
                    <param name="name" type="String"/>
                    <param name="format" type="String"/>
                    <param name="keywordMap" type="Map&lt;String,String&gt;"/>
                </params>
                <scope line="93"/>
                <declaration name="searchOffset" type="int" line="96"/>
                <declaration name="avaOffset" type="int" line="97"/>
                <declaration name="avaVec" type="List&amp;lt;AVA&amp;gt;" line="98"/>
                <declaration name="nextPlus" type="int" line="99"/>
                <scope line="100">
                    <scope line="101">
                        <declaration name="avaString" type="String" line="102"/>
                        <scope line="103"/>
                        <declaration name="ava" type="AVA" line="106"/>
                    </scope>
                </scope>
                <declaration name="avaString" type="String" line="113"/>
                <scope line="114"/>
                <declaration name="ava" type="AVA" line="117"/>
            </method>
            <method name="RDN" type="constructor" line="121">
                <params>
                    <param name="rdn" type="DerValue"/>
                </params>
                <scope line="122"/>
                <declaration name="dis" type="DerInputStream" line="125"/>
                <declaration name="avaset" type="DerValue[]" line="126"/>
                <scope line="128"/>
            </method>
            <method name="RDN" type="constructor" line="132">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="RDN" type="constructor" line="135">
                <params>
                    <param name="ava" type="AVA"/>
                </params>
                <scope line="136"/>
            </method>
            <method name="RDN" type="constructor" line="141">
                <params>
                    <param name="avas" type="AVA[]"/>
                </params>
                <scope line="143">
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="149">
                Return an immutable List of the AVAs in this RDN.                
            </javadoc>
            <method name="avas" type="List&lt;AVA&gt;" line="152">
                <declaration name="list" type="List&amp;lt;AVA&amp;gt;" line="153"/>
                <scope line="154"/>
            </method>
            <javadoc line="160">
                Return the number of AVAs in this RDN.                
            </javadoc>
            <method name="size" type="int" line="163"/>
            <method name="equals" type="boolean" line="166">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="167"/>
                <scope line="170"/>
                <declaration name="other" type="RDN" line="173"/>
                <scope line="174"/>
                <declaration name="thisCanon" type="String" line="177"/>
                <declaration name="otherCanon" type="String" line="178"/>
            </method>
            <method name="hashCode" type="int" line="181"/>
            <method name="findAttribute" type="DerValue" line="184">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
                <scope line="185">
                    <scope line="186"/>
                </scope>
            </method>
            <method name="encode" type="void" line="192">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <method name="toString" type="String" line="195">
                <scope line="196"/>
                <declaration name="sb" type="StringBuilder" line="199"/>
                <scope line="200">
                    <scope line="201"/>
                </scope>
            </method>
            <method name="toRFC1779String" type="String" line="208"/>
            <method name="toRFC1779String" type="String" line="211">
                <params>
                    <param name="oidMap" type="Map&lt;String,String&gt;"/>
                </params>
                <scope line="212"/>
                <declaration name="sb" type="StringBuilder" line="215"/>
                <scope line="216">
                    <scope line="217"/>
                </scope>
            </method>
            <method name="toRFC2253String" type="String" line="224"/>
            <method name="toRFC2253String" type="String" line="227">
                <params>
                    <param name="oidMap" type="Map&lt;String,String&gt;"/>
                </params>
            </method>
            <method name="toRFC2253String" type="String" line="230">
                <params>
                    <param name="canonical" type="boolean"/>
                </params>
                <scope line="231"/>
                <declaration name="c" type="String" line="234"/>
                <scope line="235"/>
            </method>
            <method name="toRFC2253StringInternal" type="String" line="241">
                <params>
                    <param name="canonical" type="boolean"/>
                    <param name="oidMap" type="Map&lt;String,String&gt;"/>
                </params>
                <scope line="242"/>
                <declaration name="relname" type="StringBuilder" line="245"/>
                <scope line="246">
                    <scope line="247">
                        <scope line="248"/>
                    </scope>
                </scope>
                <scope line="254">
                    <declaration name="avaList" type="List&amp;lt;AVA&amp;gt;" line="255"/>
                    <scope line="256"/>
                    <scope line="260">
                        <scope line="261"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="AVAComparator" line="270">
            <implements interface="Comparator">
                <type_params>
                    <type_param name="AVA"/>
                </type_params>
            </implements>
            <declaration name="INSTANCE" type="Comparator&amp;lt;AVA&amp;gt;" line="271"/>
            <method name="AVAComparator" type="constructor" line="272"/>
            <method name="getInstance" type="Comparator&lt;AVA&gt;" line="274"/>
            <javadoc line="277">
                AVA&apos;s containing a standard keyword are ordered alphabetically,
                  followed by AVA&apos;s containing an OID keyword, ordered numerically                
            </javadoc>
            <method name="compare" type="int" line="281">
                <params>
                    <param name="a1" type="AVA"/>
                    <param name="a2" type="AVA"/>
                </params>
                <declaration name="a1Has2253" type="boolean" line="282"/>
                <declaration name="a2Has2253" type="boolean" line="283"/>
                <scope line="284"/>
                <scope line="287">
                    <scope line="288"/>
                    <scope line="291"/>
                </scope>
            </method>
        </class>
    </source>