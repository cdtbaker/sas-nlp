<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.lang.reflect"/>
        <import package="java.io.IOException"/>
        <import package="java.io.StringReader"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Principal"/>
        <import package="java.util"/>
        <import package="sun.security.util"/>
        <import package="sun.security.pkcs.PKCS9Attribute"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <class name="RDN" line="40">
            <comment line="72">
                currently not private, accessed directly from X500Name                
            </comment>
            <comment line="75">
                cached immutable List of the AVAs                
            </comment>
            <comment line="78">
                cache canonical String form                
            </comment>
            <comment line="158">
                Constructs an RDN from its printable representation.
                
                 An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                 using &apos;+&apos; as a separator.
                 If the &apos;+&apos; should be considered part of an AVA value, it must be
                 preceded by &apos;\&apos;.
                
                 @param name String form of RDN
                 @throws IOException on parsing error                
            </comment>
            <comment line="173">
                Constructs an RDN from its printable representation.
                
                 An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                 using &apos;+&apos; as a separator.
                 If the &apos;+&apos; should be considered part of an AVA value, it must be
                 preceded by &apos;\&apos;.
                
                 @param name String form of RDN
                 @param keyword an additional mapping of keywords to OIDs
                 @throws IOException on parsing error                
            </comment>
            <comment line="234">
                Constructs an RDN from an ASN.1 encoded value.  The encoding
                 of the name in the stream uses DER (a BER1 subset).
                
                 @param value a DER-encoded value holding an RDN.
                 @throws IOException on parsing error.                
            </comment>
            <comment line="254">
                Creates an empty RDN with slots for specified
                 number of AVAs.
                
                 @param i number of AVAs to be in RDN                
            </comment>
            <comment line="313">
                Calculates a hash code value for the object.  Objects
                 which are equal will also have the same hashcode.
                
                 @returns int hashCode value                
            </comment>
            <comment line="323">
                return specified attribute value from RDN
                
                 @params oid ObjectIdentifier of attribute to be found
                 @returns DerValue of attribute value; null if attribute does not exist                
            </comment>
            <comment line="338">
                Encode the RDN in DER-encoded form.
                
                 @param out DerOutputStream to which RDN is to be written
                 @throws IOException on error                
            </comment>
            <comment line="348">
                Returns a printable form of this RDN, using RFC 1779 style catenation
                 of attributevalue assertions, and emitting attribute type keywords
                 from RFCs 1779, 2253, and 3280.                
            </comment>
            <comment line="368">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 1779. Only RFC 1779 attribute type keywords are emitted.                
            </comment>
            <comment line="376">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 1779. RFC 1779 attribute type keywords are emitted, as well
                 as keywords contained in the OIDkeyword map.                
            </comment>
            <comment line="396">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 2253. Only RFC 2253 attribute type keywords are emitted.                
            </comment>
            <comment line="405">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 2253. RFC 2253 attribute type keywords are emitted, as well as
                 keywords contained in the OIDkeyword map.                
            </comment>
            <comment line="414">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 2253. Only RFC 2253 attribute type keywords are emitted.
                 If canonical is true, then additional canonicalizations
                 documented in X500Principal.getName are performed.                
            </comment>
            <javadoc line="40">
                RDNs are a set of {attribute = value} assertions.  Some of those
                  attributes are &quot;distinguished&quot; (unique w/in context).  Order is
                  never relevant.
                  Some X.500 names include only a single distinguished attribute
                  per RDN.  This style is currently common.
                  Note that DER-encoded RDNs sort AVAs by assertion OID ... so that
                  when we parse this data we don&apos;t have to worry about canonicalizing
                  it, but we&apos;ll need to sort them when we expose the RDN class more.
                  &lt;p&gt;
                  The ASN.1 for RDNs is:
                  &lt;pre&gt;
                  RelativeDistinguishedName ::=
                  SET OF AttributeTypeAndValue
                  AttributeTypeAndValue ::= SEQUENCE {
                  type     AttributeType,
                  value    AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
                  &lt;/pre&gt;
                  Note that instances of this class are immutable.                
            </javadoc>
            <declaration name="assertion" type="AVA[]" line="72"/>
            <declaration name="avaList" type="List&lt;AVA&gt;" line="75"/>
            <declaration name="canonicalString" type="String" line="78"/>
            <javadoc line="80">
                Constructs an RDN from its printable representation.
                  An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                  using &apos;+&apos; as a separator.
                  If the &apos;+&apos; should be considered part of an AVA value, it must be
                  preceded by &apos;\&apos;.                
                <param>
                    name String form of RDN                    
                </param>
                <throws>
                    IOException on parsing error                    
                </throws>
            </javadoc>
            <method name="RDN" type="constructor" line="91">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="95">
                Constructs an RDN from its printable representation.
                  An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                  using &apos;+&apos; as a separator.
                  If the &apos;+&apos; should be considered part of an AVA value, it must be
                  preceded by &apos;\&apos;.                
                <param>
                    name String form of RDN                    
                </param>
                <param>
                    keyword an additional mapping of keywords to OIDs                    
                </param>
                <throws>
                    IOException on parsing error                    
                </throws>
            </javadoc>
            <method name="RDN" type="constructor" line="107">
                <params>
                    <param name="name" type="String"/>
                    <param name="keywordMap" type="Map<String,String>"/>
                </params>
                <comment line="116">
                    We have encountered an AVA delimiter (plus sign).
                     If the plus sign in the RDN under consideration is
                     preceded by a backslash (escape), or by a double quote, it
                     is part of the AVA. Otherwise, it is used as a separator, to
                     delimit the AVA under consideration from any subsequent AVAs.                    
                </comment>
                <comment line="125">
                    Plus sign is a separator                    
                </comment>
                <comment line="133">
                    Parse AVA, and store it in vector                    
                </comment>
                <comment line="137">
                    Increase the offset                    
                </comment>
                <comment line="140">
                    Set quote counter back to zero                    
                </comment>
                <comment line="147">
                    parse last or only AVA                    
                </comment>
                <declaration name="quoteCount" type="int" line="108"/>
                <declaration name="searchOffset" type="int" line="109"/>
                <declaration name="avaOffset" type="int" line="110"/>
                <declaration name="avaVec" type="List&lt;AVA&gt;" line="111"/>
                <declaration name="nextPlus" type="int" line="112"/>
                <scope line="113">
                    <scope line="123">
                        <declaration name="avaString" type="String" line="127"/>
                        <scope line="128"/>
                        <declaration name="ava" type="AVA" line="133"/>
                    </scope>
                </scope>
                <declaration name="avaString" type="String" line="147"/>
                <scope line="148"/>
                <declaration name="ava" type="AVA" line="151"/>
            </method>
            <method name="RDN" type="constructor" line="168">
                <params>
                    <param name="name" type="String"/>
                    <param name="format" type="String"/>
                </params>
            </method>
            <method name="RDN" type="constructor" line="185">
                <params>
                    <param name="name" type="String"/>
                    <param name="format" type="String"/>
                    <param name="keywordMap" type="Map<String,String>"/>
                </params>
                <comment line="195">
                    We have encountered an AVA delimiter (plus sign).
                     If the plus sign in the RDN under consideration is
                     preceded by a backslash (escape), or by a double quote, it
                     is part of the AVA. Otherwise, it is used as a separator, to
                     delimit the AVA under consideration from any subsequent AVAs.                    
                </comment>
                <comment line="203">
                    Plus sign is a separator                    
                </comment>
                <comment line="211">
                    Parse AVA, and store it in vector                    
                </comment>
                <comment line="216">
                    Increase the offset                    
                </comment>
                <comment line="223">
                    parse last or only AVA                    
                </comment>
                <scope line="186"/>
                <declaration name="searchOffset" type="int" line="189"/>
                <declaration name="avaOffset" type="int" line="190"/>
                <declaration name="avaVec" type="List&lt;AVA&gt;" line="191"/>
                <declaration name="nextPlus" type="int" line="192"/>
                <scope line="193">
                    <scope line="201">
                        <declaration name="avaString" type="String" line="205"/>
                        <scope line="206"/>
                        <declaration name="ava" type="AVA" line="211"/>
                    </scope>
                </scope>
                <declaration name="avaString" type="String" line="223"/>
                <scope line="224"/>
                <declaration name="ava" type="AVA" line="227"/>
            </method>
            <method name="RDN" type="constructor" line="240">
                <params>
                    <param name="rdn" type="DerValue"/>
                </params>
                <scope line="241"/>
                <declaration name="dis" type="DerInputStream" line="244"/>
                <declaration name="avaset" type="DerValue[]" line="245"/>
                <scope line="248"/>
            </method>
            <method name="RDN" type="constructor" line="259">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="RDN" type="constructor" line="261">
                <params>
                    <param name="ava" type="AVA"/>
                </params>
                <scope line="262"/>
            </method>
            <method name="RDN" type="constructor" line="268">
                <params>
                    <param name="avas" type="AVA[]"/>
                </params>
                <scope line="270">
                    <scope line="271"/>
                </scope>
            </method>
            <javadoc line="277">
                Return an immutable List of the AVAs in this RDN.                
            </javadoc>
            <method name="avas" type="List<AVA>" line="280">
                <declaration name="list" type="List&lt;AVA&gt;" line="281"/>
                <scope line="282"/>
            </method>
            <javadoc line="289">
                Return the number of AVAs in this RDN.                
            </javadoc>
            <method name="size" type="int" line="292"/>
            <method name="equals" type="boolean" line="296">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="297"/>
                <scope line="300"/>
                <declaration name="other" type="RDN" line="303"/>
                <scope line="304"/>
                <declaration name="thisCanon" type="String" line="307"/>
                <declaration name="otherCanon" type="String" line="308"/>
            </method>
            <method name="hashCode" type="int" line="318"/>
            <method name="findAttribute" type="DerValue" line="328">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
                <scope line="329">
                    <scope line="330"/>
                </scope>
            </method>
            <method name="encode" type="void" line="343">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <method name="toString" type="String" line="352">
                <scope line="353"/>
                <declaration name="sb" type="StringBuilder" line="357"/>
                <scope line="358">
                    <scope line="359"/>
                </scope>
            </method>
            <method name="toRFC1779String" type="String" line="371"/>
            <method name="toRFC1779String" type="String" line="380">
                <params>
                    <param name="oidMap" type="Map<String,String>"/>
                </params>
                <scope line="381"/>
                <declaration name="sb" type="StringBuilder" line="385"/>
                <scope line="386">
                    <scope line="387"/>
                </scope>
            </method>
            <method name="toRFC2253String" type="String" line="399"/>
            <method name="toRFC2253String" type="String" line="409">
                <params>
                    <param name="oidMap" type="Map<String,String>"/>
                </params>
            </method>
            <method name="toRFC2253String" type="String" line="419">
                <params>
                    <param name="canonical" type="boolean"/>
                </params>
                <scope line="420"/>
                <declaration name="c" type="String" line="424"/>
                <scope line="425"/>
            </method>
            <method name="toRFC2253StringInternal" type="String" line="434">
                <params>
                    <param name="canonical" type="boolean"/>
                    <param name="oidMap" type="Map<String,String>"/>
                </params>
                <comment line="436">
                    Section 2.2: When converting from an ASN.1 RelativeDistinguishedName
                     to a string, the output consists of the string encodings of each
                     AttributeTypeAndValue (according to 2.3), in any order.
                    
                     Where there is a multi-valued RDN, the outputs from adjoining
                     AttributeTypeAndValues are separated by a plus (&apos;+&apos; ASCII 43)
                     character.                    
                </comment>
                <comment line="446">
                    normally, an RDN only contains one AVA                    
                </comment>
                <comment line="461">
                    order the string type AVA&apos;s alphabetically,
                     followed by the oid type AVA&apos;s numerically                    
                </comment>
                <scope line="446"/>
                <declaration name="relname" type="StringBuilder" line="451"/>
                <scope line="452">
                    <scope line="453">
                        <scope line="454"/>
                    </scope>
                </scope>
                <scope line="459">
                    <declaration name="avaList" type="List&lt;AVA&gt;" line="462"/>
                    <scope line="463"/>
                    <scope line="468">
                        <scope line="469"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="AVAComparator" line="480">
            <comment line="72">
                currently not private, accessed directly from X500Name                
            </comment>
            <comment line="75">
                cached immutable List of the AVAs                
            </comment>
            <comment line="78">
                cache canonical String form                
            </comment>
            <comment line="158">
                Constructs an RDN from its printable representation.
                
                 An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                 using &apos;+&apos; as a separator.
                 If the &apos;+&apos; should be considered part of an AVA value, it must be
                 preceded by &apos;\&apos;.
                
                 @param name String form of RDN
                 @throws IOException on parsing error                
            </comment>
            <comment line="173">
                Constructs an RDN from its printable representation.
                
                 An RDN may consist of one or multiple Attribute Value Assertions (AVAs),
                 using &apos;+&apos; as a separator.
                 If the &apos;+&apos; should be considered part of an AVA value, it must be
                 preceded by &apos;\&apos;.
                
                 @param name String form of RDN
                 @param keyword an additional mapping of keywords to OIDs
                 @throws IOException on parsing error                
            </comment>
            <comment line="234">
                Constructs an RDN from an ASN.1 encoded value.  The encoding
                 of the name in the stream uses DER (a BER1 subset).
                
                 @param value a DER-encoded value holding an RDN.
                 @throws IOException on parsing error.                
            </comment>
            <comment line="254">
                Creates an empty RDN with slots for specified
                 number of AVAs.
                
                 @param i number of AVAs to be in RDN                
            </comment>
            <comment line="313">
                Calculates a hash code value for the object.  Objects
                 which are equal will also have the same hashcode.
                
                 @returns int hashCode value                
            </comment>
            <comment line="323">
                return specified attribute value from RDN
                
                 @params oid ObjectIdentifier of attribute to be found
                 @returns DerValue of attribute value; null if attribute does not exist                
            </comment>
            <comment line="338">
                Encode the RDN in DER-encoded form.
                
                 @param out DerOutputStream to which RDN is to be written
                 @throws IOException on error                
            </comment>
            <comment line="348">
                Returns a printable form of this RDN, using RFC 1779 style catenation
                 of attributevalue assertions, and emitting attribute type keywords
                 from RFCs 1779, 2253, and 3280.                
            </comment>
            <comment line="368">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 1779. Only RFC 1779 attribute type keywords are emitted.                
            </comment>
            <comment line="376">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 1779. RFC 1779 attribute type keywords are emitted, as well
                 as keywords contained in the OIDkeyword map.                
            </comment>
            <comment line="396">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 2253. Only RFC 2253 attribute type keywords are emitted.                
            </comment>
            <comment line="405">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 2253. RFC 2253 attribute type keywords are emitted, as well as
                 keywords contained in the OIDkeyword map.                
            </comment>
            <comment line="414">
                Returns a printable form of this RDN using the algorithm defined in
                 RFC 2253. Only RFC 2253 attribute type keywords are emitted.
                 If canonical is true, then additional canonicalizations
                 documented in X500Principal.getName are performed.                
            </comment>
            <implements interface="Comparator">
                <type_params>
                    <type_param name="AVA"/>
                </type_params>
            </implements>
            <declaration name="INSTANCE" type="Comparator&lt;AVA&gt;" line="482"/>
            <method name="AVAComparator" type="constructor" line="484">
                <comment line="486">
                    empty                    
                </comment>
            </method>
            <method name="getInstance" type="Comparator<AVA>" line="488"/>
            <javadoc line="492">
                AVA&apos;s containing a standard keyword are ordered alphabetically,
                  followed by AVA&apos;s containing an OID keyword, ordered numerically                
            </javadoc>
            <method name="compare" type="int" line="496">
                <params>
                    <param name="a1" type="AVA"/>
                    <param name="a2" type="AVA"/>
                </params>
                <declaration name="a1Has2253" type="boolean" line="497"/>
                <declaration name="a2Has2253" type="boolean" line="498"/>
                <scope line="500"/>
                <scope line="503">
                    <scope line="504"/>
                    <scope line="506"/>
                </scope>
            </method>
        </class>
    </source>