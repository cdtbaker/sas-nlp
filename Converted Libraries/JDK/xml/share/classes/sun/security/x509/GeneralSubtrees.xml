<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="sun.security.util"/>
        <class name="GeneralSubtrees" line="5">
            <implements interface="Cloneable"/>
            <javadoc line="5">
                Represent the GeneralSubtrees ASN.1 object.
                  &lt;p&gt;
                  The ASN.1 for this is
                  &lt;pre&gt;
                  GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
                  &lt;/pre&gt;
                  &lt;/p&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="trees" type="List&amp;lt;GeneralSubtree&amp;gt;" line="18"/>
            <declaration name="NAME_DIFF_TYPE" type="int" line="19"/>
            <declaration name="NAME_MATCH" type="int" line="20"/>
            <declaration name="NAME_NARROWS" type="int" line="21"/>
            <declaration name="NAME_WIDENS" type="int" line="22"/>
            <declaration name="NAME_SAME_TYPE" type="int" line="23"/>
            <javadoc line="24">
                The default constructor for the class.                
            </javadoc>
            <method name="GeneralSubtrees" type="constructor" line="27"/>
            <method name="GeneralSubtrees" type="constructor" line="30">
                <params>
                    <param name="source" type="GeneralSubtrees"/>
                </params>
            </method>
            <javadoc line="33">
                Create the object from the passed DER encoded form.                
                <param>
                    val the DER encoded form of the same.                    
                </param>
            </javadoc>
            <method name="GeneralSubtrees" type="constructor" line="37">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
                <scope line="39"/>
                <scope line="42">
                    <declaration name="opt" type="DerValue" line="43"/>
                    <declaration name="tree" type="GeneralSubtree" line="44"/>
                </scope>
            </method>
            <method name="get" type="GeneralSubtree" line="48">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="remove" type="void" line="51">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="add" type="void" line="54">
                <params>
                    <param name="tree" type="GeneralSubtree"/>
                </params>
                <scope line="55"/>
            </method>
            <method name="contains" type="boolean" line="60">
                <params>
                    <param name="tree" type="GeneralSubtree"/>
                </params>
                <scope line="61"/>
            </method>
            <method name="size" type="int" line="66"/>
            <method name="iterator" type="Iterator&lt;GeneralSubtree&gt;" line="69"/>
            <method name="trees" type="List&lt;GeneralSubtree&gt;" line="72"/>
            <method name="clone" type="Object" line="75"/>
            <javadoc line="78">
                Return a printable string of the GeneralSubtree.                
            </javadoc>
            <method name="toString" type="String" line="81">
                <declaration name="s" type="String" line="82"/>
            </method>
            <javadoc line="85">
                Encode the GeneralSubtrees.                
                <params>
                    out the DerOutputStrean to encode this object to.                    
                </params>
            </javadoc>
            <method name="encode" type="void" line="89">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
                <declaration name="seq" type="DerOutputStream" line="90"/>
                <scope line="91"/>
            </method>
            <javadoc line="96">
                Compare two general subtrees by comparing the subtrees
                  of each.                
                <param>
                    other GeneralSubtrees to compare to this                    
                </param>
                <returns>
                    true if match                    
                </returns>
            </javadoc>
            <method name="equals" type="boolean" line="102">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="103"/>
                <scope line="106"/>
                <declaration name="other" type="GeneralSubtrees" line="109"/>
            </method>
            <method name="hashCode" type="int" line="112"/>
            <javadoc line="115">
                Return the GeneralNameInterface form of the GeneralName in one of
                  the GeneralSubtrees.                
                <param>
                    ndx index of the GeneralSubtree from which to obtain the name                    
                </param>
            </javadoc>
            <method name="getGeneralNameInterface" type="GeneralNameInterface" line="120">
                <params>
                    <param name="ndx" type="int"/>
                </params>
            </method>
            <method name="getGeneralNameInterface" type="GeneralNameInterface" line="123">
                <params>
                    <param name="gs" type="GeneralSubtree"/>
                </params>
                <declaration name="gn" type="GeneralName" line="124"/>
                <declaration name="gni" type="GeneralNameInterface" line="125"/>
            </method>
            <javadoc line="128">
                minimize this GeneralSubtrees by removing all redundant entries.
                  Internal method used by intersect and reduce.                
            </javadoc>
            <method name="minimize" type="void" line="132">
                <scope line="133">
                    <declaration name="current" type="GeneralNameInterface" line="134"/>
                    <declaration name="remove1" type="boolean" line="135"/>
                    <scope line="136">
                        <declaration name="subsequent" type="GeneralNameInterface" line="137"/>
                    </scope>
                    <scope line="156"/>
                </scope>
            </method>
            <javadoc line="162">
                create a subtree containing an instance of the input
                  name type that widens all other names of that type.                
                <params>
                    name GeneralNameInterface name                    
                </params>
                <returns>
                    GeneralSubtree containing widest name of that type                    
                </returns>
                <throws>
                    RuntimeException on error (should not occur)                    
                </throws>
            </javadoc>
            <method name="createWidestSubtree" type="GeneralSubtree" line="169">
                <params>
                    <param name="name" type="GeneralNameInterface"/>
                </params>
                <scope line="170">
                    <declaration name="newName" type="GeneralName" line="171"/>
                    <declaration name="otherOID" type="ObjectIdentifier" line="174"/>
                </scope>
                <scope line="206"/>
            </method>
            <javadoc line="210">
                intersect this GeneralSubtrees with other.  This function
                  is used in merging permitted NameConstraints.  The operation
                  is performed as follows:
                  &lt;ul&gt;
                  &lt;li&gt;If a name in other narrows all names of the same type in this,
                  the result will contain the narrower name and none of the
                  names it narrows.
                  &lt;li&gt;If a name in other widens all names of the same type in this,
                  the result will not contain the wider name.
                  &lt;li&gt;If a name in other does not share the same subtree with any name
                  of the same type in this, then the name is added to the list
                  of GeneralSubtrees returned.  These names should be added to
                  the list of names that are specifically excluded.  The reason
                  is that, if the intersection is empty, then no names of that
                  type are permitted, and the only way to express this in
                  NameConstraints is to include the name in excludedNames.
                  &lt;li&gt;If a name in this has no name of the same type in other, then
                  the result contains the name in this.  No name of a given type
                  means the name type is completely permitted.
                  &lt;li&gt;If a name in other has no name of the same type in this, then
                  the result contains the name in other.  This means that
                  the name is now constrained in some way, whereas before it was
                  completely permitted.
                  &lt;ul&gt;                
                <param>
                    other GeneralSubtrees to be intersected with this                    
                </param>
                <returns>
                    GeneralSubtrees to be merged with excluded; these are
                      empty-valued name types corresponding to entries that were
                      of the same type but did not share the same subtree between
                      this and other. Returns null if no such.                    
                </returns>
            </javadoc>
            <method name="intersect" type="GeneralSubtrees" line="241">
                <params>
                    <param name="other" type="GeneralSubtrees"/>
                </params>
                <scope line="242"/>
                <declaration name="newThis" type="GeneralSubtrees" line="245"/>
                <declaration name="newExcluded" type="GeneralSubtrees" line="246"/>
                <scope line="247"/>
                <scope line="253">
                    <declaration name="thisEntry" type="GeneralNameInterface" line="254"/>
                    <declaration name="removeThisEntry" type="boolean" line="255"/>
                    <declaration name="sameType" type="boolean" line="256"/>
                    <scope line="257">
                        <declaration name="otherEntryGS" type="GeneralSubtree" line="258"/>
                        <declaration name="otherEntry" type="GeneralNameInterface" line="259"/>
                    </scope>
                    <scope line="280">
                        <declaration name="intersection" type="boolean" line="281"/>
                        <scope line="282">
                            <declaration name="thisAltEntry" type="GeneralNameInterface" line="283"/>
                            <scope line="284">
                                <scope line="285">
                                    <declaration name="othAltEntry" type="GeneralNameInterface" line="286"/>
                                    <declaration name="constraintType" type="int" line="287"/>
                                    <scope line="288"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="295">
                            <scope line="296"/>
                            <declaration name="widestSubtree" type="GeneralSubtree" line="299"/>
                            <scope line="300"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="308"/>
                <scope line="311">
                    <declaration name="otherEntryGS" type="GeneralSubtree" line="312"/>
                    <declaration name="otherEntry" type="GeneralNameInterface" line="313"/>
                    <declaration name="diffType" type="boolean" line="314"/>
                    <scope line="315">
                        <declaration name="thisEntry" type="GeneralNameInterface" line="316"/>
                    </scope>
                    <scope line="332"/>
                </scope>
            </method>
            <javadoc line="338">
                construct union of this GeneralSubtrees with other.                
                <param>
                    other GeneralSubtrees to be united with this                    
                </param>
            </javadoc>
            <method name="union" type="void" line="342">
                <params>
                    <param name="other" type="GeneralSubtrees"/>
                </params>
                <scope line="343">
                    <scope line="344"/>
                </scope>
            </method>
            <javadoc line="350">
                reduce this GeneralSubtrees by contents of another.  This function
                  is used in merging excluded NameConstraints with permitted NameConstraints
                  to obtain a minimal form of permitted NameConstraints.  It is an
                  optimization, and does not affect correctness of the results.                
                <param>
                    excluded GeneralSubtrees                    
                </param>
            </javadoc>
            <method name="reduce" type="void" line="357">
                <params>
                    <param name="excluded" type="GeneralSubtrees"/>
                </params>
                <scope line="358"/>
                <scope line="361">
                    <declaration name="excludedName" type="GeneralNameInterface" line="362"/>
                    <scope line="363">
                        <declaration name="permitted" type="GeneralNameInterface" line="364"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>