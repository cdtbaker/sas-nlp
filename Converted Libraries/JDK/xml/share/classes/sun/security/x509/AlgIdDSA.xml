<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="sun.security.util"/>
        <class name="AlgIdDSA" line="7">
            <extends class="AlgorithmId"/>
            <implements interface="DSAParams"/>
            <javadoc line="7">
                This class identifies DSS/DSA Algorithm variants, which are distinguished
                  by using different algorithm parameters &lt;em&gt;P, Q, G&lt;/em&gt;.  It uses the
                  NIST/IETF standard DER encoding.  These are used to implement the Digital
                  Signature Standard (DSS), FIPS 186.
                  &lt;P&gt;&lt;em&gt;&lt;b&gt;NOTE:&lt;/b&gt;  DSS/DSA Algorithm IDs may be created without these
                  parameters.  Use of DSS/DSA in modes where parameters are
                  either implicit (e.g. a default applicable to a site or a larger scope),
                  or are derived from some Certificate Authority&apos;s DSS certificate, is
                  not supported directly.  The application is responsible for creating a key
                  containing the required parameters prior to using the key in cryptographic
                  operations.  The follwoing is an example of how this may be done assuming
                  that we have a certificate called &lt;code&gt;currentCert&lt;/code&gt; which doesn&apos;t
                  contain DSS/DSA parameters and we need to derive DSS/DSA parameters
                  from a CA&apos;s certificate called &lt;code&gt;caCert&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;&lt;pre&gt;
                  // key containing parameters to use
                  DSAPublicKey cAKey = (DSAPublicKey)(caCert.getPublicKey());
                  // key without parameters
                  DSAPublicKey nullParamsKey = (DSAPublicKey)(currentCert.getPublicKey());
                  DSAParams cAKeyParams = cAKey.getParams();
                  KeyFactory kf = KeyFactory.getInstance(&quot;DSA&quot;);
                  DSAPublicKeySpec ks = new DSAPublicKeySpec(nullParamsKey.getY(),
                  cAKeyParams.getP(),
                  cAKeyParams.getQ(),
                  cAKeyParams.getG());
                  DSAPublicKey usableKey = kf.generatePublic(ks);
                  &lt;/pre&gt;&lt;/code&gt;                
                <see>
                    java.security.interfaces.DSAParams                    
                </see>
                <see>
                    java.security.interfaces.DSAPublicKey                    
                </see>
                <see>
                    java.security.KeyFactory                    
                </see>
                <see>
                    java.security.spec.DSAPublicKeySpec                    
                </see>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <declaration name="p" type="BigInteger" line="44"/>
            <javadoc line="45">
                Returns the DSS/DSA parameter &quot;P&quot;                
            </javadoc>
            <method name="getP" type="BigInteger" line="48"/>
            <javadoc line="51">
                Returns the DSS/DSA parameter &quot;Q&quot;                
            </javadoc>
            <method name="getQ" type="BigInteger" line="54"/>
            <javadoc line="57">
                Returns the DSS/DSA parameter &quot;G&quot;                
            </javadoc>
            <method name="getG" type="BigInteger" line="60"/>
            <javadoc line="63">
                Default constructor.  The OID and parameters must be
                  deserialized before this algorithm ID is used.                
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="67"/>
            <method name="AlgIdDSA" type="constructor" line="69">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
            </method>
            <javadoc line="72">
                Construct an AlgIdDSA from an X.509 encoded byte array.                
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="75">
                <params>
                    <param name="encodedAlg" type="byte[]"/>
                </params>
            </method>
            <javadoc line="78">
                Constructs a DSS/DSA Algorithm ID from unsigned integers that
                  define the algorithm parameters.  Those integers are encoded
                  as big-endian byte arrays.                
                <param>
                    p the DSS/DSA paramter &quot;P&quot;                    
                </param>
                <param>
                    q the DSS/DSA paramter &quot;Q&quot;                    
                </param>
                <param>
                    g the DSS/DSA paramter &quot;G&quot;                    
                </param>
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="86">
                <params>
                    <param name="p" type="byte"/>
                    <param name="q" type="byte"/>
                    <param name="g" type="byte"/>
                </params>
            </method>
            <javadoc line="89">
                Constructs a DSS/DSA Algorithm ID from numeric parameters.
                  If all three are null, then the parameters portion of the algorithm id
                  is set to null.  See note in header regarding use.                
                <param>
                    p the DSS/DSA paramter &quot;P&quot;                    
                </param>
                <param>
                    q the DSS/DSA paramter &quot;Q&quot;                    
                </param>
                <param>
                    g the DSS/DSA paramter &quot;G&quot;                    
                </param>
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="97">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
                <scope line="99">
                    <scope line="101"/>
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="112">
                Returns &quot;DSA&quot;, indicating the Digital Signature Algorithm (DSA) as
                  defined by the Digital Signature Standard (DSS), FIPS 186.                
            </javadoc>
            <method name="getName" type="String" line="116"/>
            <method name="initializeParams" type="void" line="119">
                <declaration name="out" type="DerOutputStream" line="120"/>
            </method>
            <javadoc line="126">
                Parses algorithm parameters P, Q, and G.  They&apos;re found
                  in the &quot;params&quot; member, which never needs to be changed.                
            </javadoc>
            <method name="decodeParams" type="void" line="130"/>
            <method name="toString" type="String" line="139"/>
            <method name="paramsToString" type="String" line="142"/>
        </class>
    </source>