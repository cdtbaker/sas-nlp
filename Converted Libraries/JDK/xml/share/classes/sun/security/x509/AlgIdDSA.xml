<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.interfaces.DSAParams"/>
        <import package="sun.security.util"/>
        <class name="AlgIdDSA" line="36">
            <extends class="AlgorithmId"/>
            <comment line="82">
                The three unsigned integer parameters.                
            </comment>
            <comment line="167">
                For algorithm IDs which haven&apos;t been created from a DER encoded
                 value, &quot;params&quot; must be created.                
            </comment>
            <comment line="206">
                Returns a formatted string describing the parameters.                
            </comment>
            <comment line="212">
                Returns a string describing the parameters.                
            </comment>
            <implements interface="DSAParams"/>
            <javadoc line="36">
                This class identifies DSS/DSA Algorithm variants, which are distinguished
                  by using different algorithm parameters &lt;em&gt;P, Q, G&lt;/em&gt;.  It uses the
                  NIST/IETF standard DER encoding.  These are used to implement the Digital
                  Signature Standard (DSS), FIPS 186.
                  &lt;P&gt;&lt;em&gt;&lt;b&gt;NOTE:&lt;/b&gt;  DSS/DSA Algorithm IDs may be created without these
                  parameters.  Use of DSS/DSA in modes where parameters are
                  either implicit (e.g. a default applicable to a site or a larger scope),
                  or are derived from some Certificate Authority&apos;s DSS certificate, is
                  not supported directly.  The application is responsible for creating a key
                  containing the required parameters prior to using the key in cryptographic
                  operations.  The follwoing is an example of how this may be done assuming
                  that we have a certificate called &lt;code&gt;currentCert&lt;/code&gt; which doesn&apos;t
                  contain DSS/DSA parameters and we need to derive DSS/DSA parameters
                  from a CA&apos;s certificate called &lt;code&gt;caCert&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;&lt;pre&gt;
                  // key containing parameters to use
                  DSAPublicKey cAKey = (DSAPublicKey)(caCert.getPublicKey());
                  // key without parameters
                  DSAPublicKey nullParamsKey = (DSAPublicKey)(currentCert.getPublicKey());
                  DSAParams cAKeyParams = cAKey.getParams();
                  KeyFactory kf = KeyFactory.getInstance(&quot;DSA&quot;);
                  DSAPublicKeySpec ks = new DSAPublicKeySpec(nullParamsKey.getY(),
                  cAKeyParams.getP(),
                  cAKeyParams.getQ(),
                  cAKeyParams.getG());
                  DSAPublicKey usableKey = kf.generatePublic(ks);
                  &lt;/pre&gt;&lt;/code&gt;                
                <see>
                    java.security.interfaces.DSAParams                    
                </see>
                <see>
                    java.security.interfaces.DSAPublicKey                    
                </see>
                <see>
                    java.security.KeyFactory                    
                </see>
                <see>
                    java.security.spec.DSAPublicKeySpec                    
                </see>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="79"/>
            <declaration name="p" type="BigInteger" line="84"/>
            <javadoc line="86">
                Returns the DSS/DSA parameter &quot;P&quot;                
            </javadoc>
            <method name="getP" type="BigInteger" line="87"/>
            <javadoc line="89">
                Returns the DSS/DSA parameter &quot;Q&quot;                
            </javadoc>
            <method name="getQ" type="BigInteger" line="90"/>
            <javadoc line="92">
                Returns the DSS/DSA parameter &quot;G&quot;                
            </javadoc>
            <method name="getG" type="BigInteger" line="93"/>
            <javadoc line="95">
                Default constructor.  The OID and parameters must be
                  deserialized before this algorithm ID is used.                
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="100">
                <comment line="100">
                    XXX deprecated for general use                    
                </comment>
            </method>
            <method name="AlgIdDSA" type="constructor" line="103">
                <params>
                    <param name="val" type="DerValue"/>
                </params>
            </method>
            <javadoc line="105">
                Construct an AlgIdDSA from an X.509 encoded byte array.                
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="109">
                <params>
                    <param name="encodedAlg" type="byte[]"/>
                </params>
            </method>
            <javadoc line="111">
                Constructs a DSS/DSA Algorithm ID from unsigned integers that
                  define the algorithm parameters.  Those integers are encoded
                  as big-endian byte arrays.                
                <param>
                    p the DSS/DSA paramter &quot;P&quot;                    
                </param>
                <param>
                    q the DSS/DSA paramter &quot;Q&quot;                    
                </param>
                <param>
                    g the DSS/DSA paramter &quot;G&quot;                    
                </param>
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="122">
                <params>
                    <param name="p" type="byte"/>
                    <param name="q" type="byte"/>
                    <param name="g" type="byte"/>
                </params>
            </method>
            <javadoc line="128">
                Constructs a DSS/DSA Algorithm ID from numeric parameters.
                  If all three are null, then the parameters portion of the algorithm id
                  is set to null.  See note in header regarding use.                
                <param>
                    p the DSS/DSA paramter &quot;P&quot;                    
                </param>
                <param>
                    q the DSS/DSA paramter &quot;Q&quot;                    
                </param>
                <param>
                    g the DSS/DSA paramter &quot;G&quot;                    
                </param>
            </javadoc>
            <method name="AlgIdDSA" type="constructor" line="138">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="q" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
                <comment line="153">
                                        
                </comment>
                <scope line="141">
                    <scope line="145"/>
                    <scope line="151"/>
                </scope>
            </method>
            <javadoc line="158">
                Returns &quot;DSA&quot;, indicating the Digital Signature Algorithm (DSA) as
                  defined by the Digital Signature Standard (DSS), FIPS 186.                
            </javadoc>
            <method name="getName" type="String" line="163"/>
            <method name="initializeParams" type="void" line="172">
                <declaration name="out" type="DerOutputStream" line="173"/>
            </method>
            <javadoc line="181">
                Parses algorithm parameters P, Q, and G.  They&apos;re found
                  in the &quot;params&quot; member, which never needs to be changed.                
            </javadoc>
            <method name="decodeParams" type="void" line="187"/>
            <method name="toString" type="String" line="209"/>
            <method name="paramsToString" type="String" line="215"/>
        </class>
    </source>