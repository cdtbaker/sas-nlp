<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.util.Arrays"/>
        <import package="sun.security.util"/>
        <class name="OtherName" line="6">
            <implements interface="GeneralNameInterface"/>
            <javadoc line="6">
                This class represents the OtherName as required by the GeneralNames
                  ASN.1 object. It supplies the generic framework to allow specific
                  Other Name types, and also provides minimal support for unrecognized
                  Other Name types.
                  The ASN.1 definition for OtherName is:
                  &lt;pre&gt;
                  OtherName ::= SEQUENCE {
                  type-id    OBJECT IDENTIFIER,
                  value      [0] EXPLICIT ANY DEFINED BY type-id
                  }
                  &lt;/pre&gt;                
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="21"/>
            <declaration name="oid" type="ObjectIdentifier" line="22"/>
            <declaration name="nameValue" type="byte[]" line="23"/>
            <declaration name="gni" type="GeneralNameInterface" line="24"/>
            <declaration name="TAG_VALUE" type="byte" line="25"/>
            <declaration name="myhash" type="int" line="26"/>
            <javadoc line="27">
                Create the OtherName object from a passed ObjectIdentfier and
                  byte array name value                
                <param>
                    oid ObjectIdentifier of this OtherName object                    
                </param>
                <param>
                    value the DER-encoded value of the OtherName                    
                </param>
                <throws>
                    IOException on error                    
                </throws>
            </javadoc>
            <method name="OtherName" type="constructor" line="34">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="value" type="byte[]"/>
                </params>
                <scope line="35"/>
                <scope line="41"/>
                <scope line="44"/>
            </method>
            <javadoc line="48">
                Create the OtherName object from the passed encoded Der value.                
                <param>
                    derValue the encoded DER OtherName.                    
                </param>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="OtherName" type="constructor" line="53">
                <params>
                    <param name="derValue" type="DerValue"/>
                </params>
                <declaration name="in" type="DerInputStream" line="54"/>
                <declaration name="val" type="DerValue" line="56"/>
                <scope line="59"/>
                <scope line="62"/>
            </method>
            <javadoc line="66">
                Get ObjectIdentifier                
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="69"/>
            <javadoc line="72">
                Get name value                
            </javadoc>
            <method name="getNameValue" type="byte[]" line="75"/>
            <javadoc line="78">
                Get GeneralNameInterface                
            </javadoc>
            <method name="getGNI" type="GeneralNameInterface" line="81">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="nameValue" type="byte[]"/>
                </params>
                <scope line="82">
                    <declaration name="extClass" type="Class" line="83"/>
                    <scope line="84"/>
                    <declaration name="params" type="Class[]" line="87"/>
                    <declaration name="cons" type="Constructor" line="88"/>
                    <declaration name="passed" type="Object[]" line="89"/>
                    <declaration name="gni" type="GeneralNameInterface" line="90"/>
                </scope>
                <scope line="93"/>
            </method>
            <javadoc line="97">
                Return the type of the GeneralName.                
            </javadoc>
            <method name="getType" type="int" line="100"/>
            <javadoc line="103">
                Encode the Other name into the DerOutputStream.                
                <param>
                    out the DER stream to encode the Other-Name to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="108">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
                <scope line="109"/>
                <scope line="113">
                    <declaration name="tmp" type="DerOutputStream" line="114"/>
                </scope>
            </method>
            <javadoc line="120">
                Compares this name with another, for equality.                
                <return>
                    true iff the names are identical.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="124">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="125"/>
                <scope line="128"/>
                <declaration name="otherOther" type="OtherName" line="131"/>
                <scope line="132"/>
                <declaration name="otherGNI" type="GeneralNameInterface" line="135"/>
                <scope line="136"/>
                <scope line="139"/>
                <declaration name="result" type="boolean" line="142"/>
                <scope line="143">
                    <scope line="144"/>
                    <scope line="147"/>
                </scope>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Returns the hash code for this OtherName.                
                <return>
                    a hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="160">
                <scope line="161">
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="169">
                Convert the name into user readable string.                
            </javadoc>
            <method name="toString" type="String" line="172"/>
            <javadoc line="175">
                Return type of constraint inputName places on this name:&lt;ul&gt;
                  &lt;li&gt;NAME_DIFF_TYPE = -1: input name is different type from name
                  (i.e. does not constrain).
                  &lt;li&gt;NAME_MATCH = 0: input name matches name.
                  &lt;li&gt;NAME_NARROWS = 1: input name narrows name (is lower in the
                  naming subtree)
                  &lt;li&gt;NAME_WIDENS = 2: input name widens name (is higher in the
                  naming subtree)
                  &lt;li&gt;NAME_SAME_TYPE = 3: input name does not match or narrow name,
                  but is same type.
                  &lt;/ul&gt;.  These results are used in checking NameConstraints during
                  certification path verification.                
                <param>
                    inputName to be checked for being constrained                    
                </param>
                <returns>
                    constraint type above                    
                </returns>
                <throws>
                    UnsupportedOperationException if name is same type, but
                      comparison operations are not supported for this name type.                    
                </throws>
            </javadoc>
            <method name="constrains" type="int" line="193">
                <params>
                    <param name="inputName" type="GeneralNameInterface"/>
                </params>
                <declaration name="constraintType" type="int" line="194"/>
                <scope line="195"/>
                <scope line="198"/>
                <scope line="201"/>
            </method>
            <javadoc line="206">
                Return subtree depth of this name for purposes of determining
                  NameConstraints minimum and maximum bounds.                
                <returns>
                    distance of name from root                    
                </returns>
                <throws>
                    UnsupportedOperationException if not supported for this name type                    
                </throws>
            </javadoc>
            <method name="subtreeDepth" type="int" line="212"/>
        </class>
    </source>