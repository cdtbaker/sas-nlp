<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="sun.security.util"/>
        <class name="URIName" line="34">
            <comment line="84">
                private attributes                
            </comment>
            <implements interface="GeneralNameInterface"/>
            <javadoc line="34">
                This class implements the URIName as required by the GeneralNames
                  ASN.1 object.
                  &lt;p&gt;
                  [RFC3280] When the subjectAltName extension contains a URI, the name MUST be
                  stored in the uniformResourceIdentifier (an IA5String). The name MUST
                  be a non-relative URL, and MUST follow the URL syntax and encoding
                  rules specified in [RFC 1738].  The name must include both a scheme
                  (e.g., &quot;http&quot; or &quot;ftp&quot;) and a scheme-specific-part.  The scheme-
                  specific-part must include a fully qualified domain name or IP
                  address as the host.
                  &lt;p&gt;
                  As specified in [RFC 1738], the scheme name is not case-sensitive
                  (e.g., &quot;http&quot; is equivalent to &quot;HTTP&quot;).  The host part is also not
                  case-sensitive, but other components of the scheme-specific-part may
                  be case-sensitive. When comparing URIs, conforming implementations
                  MUST compare the scheme and host without regard to case, but assume
                  the remainder of the scheme-specific-part is case sensitive.
                  &lt;p&gt;
                  [RFC1738] In general, URLs are written as follows:
                  &lt;pre&gt;
                  &lt;scheme&gt;:&lt;scheme-specific-part&gt;
                  &lt;/pre&gt;
                  A URL contains the name of the scheme being used (&lt;scheme&gt;) followed
                  by a colon and then a string (the &lt;scheme-specific-part&gt;) whose
                  interpretation depends on the scheme.
                  &lt;p&gt;
                  While the syntax for the rest of the URL may vary depending on the
                  particular scheme selected, URL schemes that involve the direct use
                  of an IP-based protocol to a specified host on the Internet use a
                  common syntax for the scheme-specific data:
                  &lt;pre&gt;
                  //&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;
                  &lt;/pre&gt;
                  [RFC2732] specifies that an IPv6 address contained inside a URL
                  must be enclosed in square brackets (to allow distinguishing the
                  colons that separate IPv6 components from the colons that separate
                  scheme-specific data.
                  &lt;p&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Steve Hanna                    
                </author>
                <see>
                    GeneralName                    
                </see>
                <see>
                    GeneralNames                    
                </see>
                <see>
                    GeneralNameInterface                    
                </see>
            </javadoc>
            <declaration name="uri" type="URI" line="84"/>
            <declaration name="host" type="String" line="85"/>
            <declaration name="hostDNS" type="DNSName" line="86"/>
            <declaration name="hostIP" type="IPAddressName" line="87"/>
            <javadoc line="89">
                Create the URIName object from the passed encoded Der value.                
                <param>
                    derValue the encoded DER URIName.                    
                </param>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="URIName" type="constructor" line="95">
                <params>
                    <param name="derValue" type="DerValue"/>
                </params>
            </method>
            <javadoc line="99">
                Create the URIName object with the specified name.                
                <param>
                    name the URIName.                    
                </param>
                <throws>
                    IOException if name is not a proper URIName                    
                </throws>
            </javadoc>
            <method name="URIName" type="constructor" line="105">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="118">
                    RFC 3280 says that the host should be non-null, but we allow it to
                     be null because some widely deployed certificates contain CDP
                     extensions with URIs that have no hostname (see bugs 4802236 and
                     5107944).                    
                </comment>
                <comment line="124">
                    Verify host is a valid IPv6 address name                    
                </comment>
                <comment line="136">
                    Not a valid DNS Name; see if it is a valid IPv4
                     IPAddressName                    
                </comment>
                <scope line="106"/>
                <scope line="108"/>
                <scope line="112"/>
                <scope line="121">
                    <scope line="122">
                        <declaration name="ipV6Host" type="String" line="124"/>
                        <scope line="125"/>
                        <scope line="127"/>
                    </scope>
                    <scope line="131">
                        <scope line="132"/>
                        <scope line="134">
                            <scope line="137"/>
                            <scope line="139"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="149">
                Create the URIName object with the specified name constraint. URI
                  name constraints syntax is different than SubjectAltNames, etc. See
                  4.2.1.11 of RFC 3280.                
                <param>
                    value the URI name constraint                    
                </param>
                <throws>
                    IOException if name is not a proper URI name constraint                    
                </throws>
            </javadoc>
            <method name="nameConstraint" type="URIName" line="157">
                <params>
                    <param name="value" type="DerValue"/>
                </params>
                <declaration name="uri" type="URI" line="158"/>
                <declaration name="name" type="String" line="159"/>
                <scope line="160"/>
                <scope line="162"/>
                <scope line="166">
                    <declaration name="host" type="String" line="167"/>
                    <scope line="168">
                        <declaration name="hostDNS" type="DNSName" line="169"/>
                        <scope line="170"/>
                        <scope line="172"/>
                    </scope>
                    <scope line="176"/>
                </scope>
                <scope line="180"/>
            </method>
            <method name="URIName" type="constructor" line="186">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="host" type="String"/>
                    <param name="hostDNS" type="DNSName"/>
                </params>
            </method>
            <javadoc line="192">
                Return the type of the GeneralName.                
            </javadoc>
            <method name="getType" type="int" line="195"/>
            <javadoc line="199">
                Encode the URI name into the DerOutputStream.                
                <param>
                    out the DER stream to encode the URIName to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="205">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="209">
                Convert the name into user readable string.                
            </javadoc>
            <method name="toString" type="String" line="212"/>
            <javadoc line="216">
                Compares this name with another, for equality.                
                <return>
                    true iff the names are equivalent according to RFC2459.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="221">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="222"/>
                <scope line="226"/>
                <declaration name="other" type="URIName" line="230"/>
            </method>
            <javadoc line="235">
                Returns the URIName as a java.net.URI object                
            </javadoc>
            <method name="getURI" type="URI" line="238"/>
            <javadoc line="242">
                Returns this URI name.                
            </javadoc>
            <method name="getName" type="String" line="245"/>
            <javadoc line="249">
                Return the scheme name portion of a URIName                
                <returns>
                    scheme portion of full name                    
                </returns>
            </javadoc>
            <method name="getScheme" type="String" line="254"/>
            <javadoc line="258">
                Return the host name or IP address portion of the URIName                
                <returns>
                    host name or IP address portion of full name                    
                </returns>
            </javadoc>
            <method name="getHost" type="String" line="263"/>
            <javadoc line="267">
                Return the host object type; if host name is a
                  DNSName, then this host object does not include any
                  initial &quot;.&quot; on the name.                
                <returns>
                    host name as DNSName or IPAddressName                    
                </returns>
            </javadoc>
            <method name="getHostObject" type="Object" line="274">
                <scope line="275"/>
                <scope line="277"/>
            </method>
            <javadoc line="282">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="287"/>
            <javadoc line="291">
                Return type of constraint inputName places on this name:&lt;ul&gt;
                  &lt;li&gt;NAME_DIFF_TYPE = -1: input name is different type from name
                  (i.e. does not constrain).
                  &lt;li&gt;NAME_MATCH = 0: input name matches name.
                  &lt;li&gt;NAME_NARROWS = 1: input name narrows name (is lower in the naming
                  subtree)
                  &lt;li&gt;NAME_WIDENS = 2: input name widens name (is higher in the naming
                  subtree)
                  &lt;li&gt;NAME_SAME_TYPE = 3: input name does not match or narrow name, but
                  is same type.
                  &lt;/ul&gt;.
                  These results are used in checking NameConstraints during
                  certification path verification.
                  &lt;p&gt;
                  RFC3280: For URIs, the constraint applies to the host part of the name.
                  The constraint may specify a host or a domain.  Examples would be
                  &quot;foo.bar.com&quot;;  and &quot;.xyz.com&quot;.  When the the constraint begins with
                  a period, it may be expanded with one or more subdomains.  That is,
                  the constraint &quot;.xyz.com&quot; is satisfied by both abc.xyz.com and
                  abc.def.xyz.com.  However, the constraint &quot;.xyz.com&quot; is not satisfied
                  by &quot;xyz.com&quot;.  When the constraint does not begin with a period, it
                  specifies a host.
                  &lt;p&gt;                
                <param>
                    inputName to be checked for being constrained                    
                </param>
                <returns>
                    constraint type above                    
                </returns>
                <throws>
                    UnsupportedOperationException if name is not exact match, but
                      narrowing and widening are not supported for this name type.                    
                </throws>
            </javadoc>
            <method name="constrains" type="int" line="321">
                <params>
                    <param name="inputName" type="GeneralNameInterface"/>
                </params>
                <comment line="329">
                    Assuming from here on that one or both of these is
                     actually a URI name constraint (not a URI), so we
                     only need to compare the host portion of the name                    
                </comment>
                <comment line="335">
                    Quick check for equality                    
                </comment>
                <comment line="343">
                    If one (or both) is an IP address, only same type                    
                </comment>
                <comment line="346">
                    Both host portions are DNS names. Are they domains?                    
                </comment>
                <comment line="351">
                    Run DNSName.constrains.                    
                </comment>
                <comment line="353">
                    If neither one is a domain, then they can&apos;t
                     widen or narrow. That&apos;s just SAME_TYPE.                    
                </comment>
                <comment line="361">
                    If one is a domain and the other isn&apos;t,
                     then they can&apos;t match. The one that&apos;s a
                     domain doesn&apos;t include the one that&apos;s
                     not a domain.                    
                </comment>
                <declaration name="constraintType" type="int" line="322"/>
                <scope line="323"/>
                <scope line="325"/>
                <scope line="327">
                    <declaration name="otherHost" type="String" line="332"/>
                    <scope line="335"/>
                    <scope line="337">
                        <declaration name="otherHostObject" type="Object" line="338"/>
                        <scope line="341"/>
                        <scope line="344">
                            <declaration name="thisDomain" type="boolean" line="346"/>
                            <declaration name="otherDomain" type="boolean" line="347"/>
                            <declaration name="otherDNS" type="DNSName" line="348"/>
                            <scope line="356"/>
                            <scope line="365">
                                <scope line="366"/>
                                <scope line="368"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="378">
                Return subtree depth of this name for purposes of determining
                  NameConstraints minimum and maximum bounds and for calculating
                  path lengths in name subtrees.                
                <returns>
                    distance of name from root                    
                </returns>
                <throws>
                    UnsupportedOperationException if not supported for this name type                    
                </throws>
            </javadoc>
            <method name="subtreeDepth" type="int" line="386">
                <declaration name="dnsName" type="DNSName" line="387"/>
                <scope line="388"/>
                <scope line="390"/>
            </method>
        </class>
    </source>