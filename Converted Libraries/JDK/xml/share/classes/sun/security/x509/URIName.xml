<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="sun.security.util"/>
        <class name="URIName" line="6">
            <implements interface="GeneralNameInterface"/>
            <javadoc line="6">
                This class implements the URIName as required by the GeneralNames
                  ASN.1 object.
                  &lt;p&gt;
                  [RFC3280] When the subjectAltName extension contains a URI, the name MUST be
                  stored in the uniformResourceIdentifier (an IA5String). The name MUST
                  be a non-relative URL, and MUST follow the URL syntax and encoding
                  rules specified in [RFC 1738].  The name must include both a scheme
                  (e.g., &quot;http&quot; or &quot;ftp&quot;) and a scheme-specific-part.  The scheme-
                  specific-part must include a fully qualified domain name or IP
                  address as the host.
                  &lt;p&gt;
                  As specified in [RFC 1738], the scheme name is not case-sensitive
                  (e.g., &quot;http&quot; is equivalent to &quot;HTTP&quot;).  The host part is also not
                  case-sensitive, but other components of the scheme-specific-part may
                  be case-sensitive. When comparing URIs, conforming implementations
                  MUST compare the scheme and host without regard to case, but assume
                  the remainder of the scheme-specific-part is case sensitive.
                  &lt;p&gt;
                  [RFC1738] In general, URLs are written as follows:
                  &lt;pre&gt;
                  &lt;scheme&gt;:&lt;scheme-specific-part&gt;
                  &lt;/pre&gt;
                  A URL contains the name of the scheme being used (&lt;scheme&gt;) followed
                  by a colon and then a string (the &lt;scheme-specific-part&gt;) whose
                  interpretation depends on the scheme.
                  &lt;p&gt;
                  While the syntax for the rest of the URL may vary depending on the
                  particular scheme selected, URL schemes that involve the direct use
                  of an IP-based protocol to a specified host on the Internet use a
                  common syntax for the scheme-specific data:
                  &lt;pre&gt;
                  //&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;
                  &lt;/pre&gt;
                  [RFC2732] specifies that an IPv6 address contained inside a URL
                  must be enclosed in square brackets (to allow distinguishing the
                  colons that separate IPv6 components from the colons that separate
                  scheme-specific data.
                  &lt;p&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    Steve Hanna                    
                </author>
                <see>
                    GeneralName                    
                </see>
                <see>
                    GeneralNames                    
                </see>
                <see>
                    GeneralNameInterface                    
                </see>
            </javadoc>
            <declaration name="uri" type="URI" line="54"/>
            <declaration name="host" type="String" line="55"/>
            <declaration name="hostDNS" type="DNSName" line="56"/>
            <declaration name="hostIP" type="IPAddressName" line="57"/>
            <javadoc line="58">
                Create the URIName object from the passed encoded Der value.                
                <param>
                    derValue the encoded DER URIName.                    
                </param>
                <exception>
                    IOException on error.                    
                </exception>
            </javadoc>
            <method name="URIName" type="constructor" line="63">
                <params>
                    <param name="derValue" type="DerValue"/>
                </params>
            </method>
            <javadoc line="66">
                Create the URIName object with the specified name.                
                <param>
                    name the URIName.                    
                </param>
                <throws>
                    IOException if name is not a proper URIName                    
                </throws>
            </javadoc>
            <method name="URIName" type="constructor" line="71">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="72"/>
                <scope line="75"/>
                <scope line="78"/>
                <scope line="82">
                    <scope line="83">
                        <declaration name="ipV6Host" type="String" line="84"/>
                        <scope line="85"/>
                        <scope line="88"/>
                    </scope>
                    <scope line="92">
                        <scope line="93"/>
                        <scope line="96">
                            <scope line="97"/>
                            <scope line="100"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="107">
                Create the URIName object with the specified name constraint. URI
                  name constraints syntax is different than SubjectAltNames, etc. See
                  4.2.1.11 of RFC 3280.                
                <param>
                    value the URI name constraint                    
                </param>
                <throws>
                    IOException if name is not a proper URI name constraint                    
                </throws>
            </javadoc>
            <method name="nameConstraint" type="URIName" line="114">
                <params>
                    <param name="value" type="DerValue"/>
                </params>
                <declaration name="uri" type="URI" line="115"/>
                <declaration name="name" type="String" line="116"/>
                <scope line="117"/>
                <scope line="120"/>
                <scope line="123">
                    <declaration name="host" type="String" line="124"/>
                    <scope line="125">
                        <declaration name="hostDNS" type="DNSName" line="126"/>
                        <scope line="127"/>
                        <scope line="130"/>
                    </scope>
                    <scope line="135"/>
                </scope>
                <scope line="139"/>
            </method>
            <method name="URIName" type="constructor" line="143">
                <params>
                    <param name="uri" type="URI"/>
                    <param name="host" type="String"/>
                    <param name="hostDNS" type="DNSName"/>
                </params>
            </method>
            <javadoc line="148">
                Return the type of the GeneralName.                
            </javadoc>
            <method name="getType" type="int" line="151"/>
            <javadoc line="154">
                Encode the URI name into the DerOutputStream.                
                <param>
                    out the DER stream to encode the URIName to.                    
                </param>
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="159">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="162">
                Convert the name into user readable string.                
            </javadoc>
            <method name="toString" type="String" line="165"/>
            <javadoc line="168">
                Compares this name with another, for equality.                
                <return>
                    true iff the names are equivalent according to RFC2459.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="172">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="173"/>
                <scope line="176"/>
                <declaration name="other" type="URIName" line="179"/>
            </method>
            <javadoc line="182">
                Returns the URIName as a java.net.URI object                
            </javadoc>
            <method name="getURI" type="URI" line="185"/>
            <javadoc line="188">
                Returns this URI name.                
            </javadoc>
            <method name="getName" type="String" line="191"/>
            <javadoc line="194">
                Return the scheme name portion of a URIName                
                <returns>
                    scheme portion of full name                    
                </returns>
            </javadoc>
            <method name="getScheme" type="String" line="198"/>
            <javadoc line="201">
                Return the host name or IP address portion of the URIName                
                <returns>
                    host name or IP address portion of full name                    
                </returns>
            </javadoc>
            <method name="getHost" type="String" line="205"/>
            <javadoc line="208">
                Return the host object type; if host name is a
                  DNSName, then this host object does not include any
                  initial &quot;.&quot; on the name.                
                <returns>
                    host name as DNSName or IPAddressName                    
                </returns>
            </javadoc>
            <method name="getHostObject" type="Object" line="214">
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <javadoc line="222">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="226"/>
            <javadoc line="229">
                Return type of constraint inputName places on this name:&lt;ul&gt;
                  &lt;li&gt;NAME_DIFF_TYPE = -1: input name is different type from name
                  (i.e. does not constrain).
                  &lt;li&gt;NAME_MATCH = 0: input name matches name.
                  &lt;li&gt;NAME_NARROWS = 1: input name narrows name (is lower in the naming
                  subtree)
                  &lt;li&gt;NAME_WIDENS = 2: input name widens name (is higher in the naming
                  subtree)
                  &lt;li&gt;NAME_SAME_TYPE = 3: input name does not match or narrow name, but
                  is same type.
                  &lt;/ul&gt;.
                  These results are used in checking NameConstraints during
                  certification path verification.
                  &lt;p&gt;
                  RFC3280: For URIs, the constraint applies to the host part of the name.
                  The constraint may specify a host or a domain.  Examples would be
                  &quot;foo.bar.com&quot;;  and &quot;.xyz.com&quot;.  When the the constraint begins with
                  a period, it may be expanded with one or more subdomains.  That is,
                  the constraint &quot;.xyz.com&quot; is satisfied by both abc.xyz.com and
                  abc.def.xyz.com.  However, the constraint &quot;.xyz.com&quot; is not satisfied
                  by &quot;xyz.com&quot;.  When the constraint does not begin with a period, it
                  specifies a host.
                  &lt;p&gt;                
                <param>
                    inputName to be checked for being constrained                    
                </param>
                <returns>
                    constraint type above                    
                </returns>
                <throws>
                    UnsupportedOperationException if name is not exact match, but
                      narrowing and widening are not supported for this name type.                    
                </throws>
            </javadoc>
            <method name="constrains" type="int" line="258">
                <params>
                    <param name="inputName" type="GeneralNameInterface"/>
                </params>
                <declaration name="constraintType" type="int" line="259"/>
                <scope line="260"/>
                <scope line="263"/>
                <scope line="266">
                    <declaration name="otherHost" type="String" line="267"/>
                    <scope line="268"/>
                    <scope line="271">
                        <declaration name="otherHostObject" type="Object" line="272"/>
                        <scope line="273"/>
                        <scope line="276">
                            <declaration name="thisDomain" type="boolean" line="277"/>
                            <declaration name="otherDomain" type="boolean" line="278"/>
                            <declaration name="otherDNS" type="DNSName" line="279"/>
                            <scope line="281"/>
                            <scope line="284">
                                <scope line="285"/>
                                <scope line="288"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="297">
                Return subtree depth of this name for purposes of determining
                  NameConstraints minimum and maximum bounds and for calculating
                  path lengths in name subtrees.                
                <returns>
                    distance of name from root                    
                </returns>
                <throws>
                    UnsupportedOperationException if not supported for this name type                    
                </throws>
            </javadoc>
            <method name="subtreeDepth" type="int" line="304">
                <declaration name="dnsName" type="DNSName" line="305"/>
                <scope line="306"/>
                <scope line="309"/>
            </method>
        </class>
    </source>