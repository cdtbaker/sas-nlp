<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="sun.security.util"/>
        <interface name="GeneralNameInterface">
            <comment line="57">
                                
            </comment>
            <comment line="58">
                                
            </comment>
            <comment line="59">
                                
            </comment>
            <comment line="60">
                                
            </comment>
            <comment line="61">
                                
            </comment>
            <javadoc line="32">
                This interface specifies the abstract methods which have to be
                  implemented by all the members of the GeneralNames ASN.1 object.                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="NAME_ANY" type="int" line="40"/>
            <javadoc line="40">
                The list of names supported.                
            </javadoc>
            <declaration name="NAME_RFC822" type="int" line="44"/>
            <declaration name="NAME_DNS" type="int" line="45"/>
            <declaration name="NAME_X400" type="int" line="46"/>
            <declaration name="NAME_DIRECTORY" type="int" line="47"/>
            <declaration name="NAME_EDI" type="int" line="48"/>
            <declaration name="NAME_URI" type="int" line="49"/>
            <declaration name="NAME_IP" type="int" line="50"/>
            <declaration name="NAME_OID" type="int" line="51"/>
            <declaration name="NAME_DIFF_TYPE" type="int" line="53"/>
            <javadoc line="53">
                The list of constraint results.                
            </javadoc>
            <declaration name="NAME_MATCH" type="int" line="57"/>
            <declaration name="NAME_NARROWS" type="int" line="58"/>
            <declaration name="NAME_WIDENS" type="int" line="59"/>
            <declaration name="NAME_SAME_TYPE" type="int" line="60"/>
            <method name="getType" type="int" line="62"/>
            <javadoc line="62">
                Return the type of the general name, as
                  defined above.                
            </javadoc>
            <method name="encode" type="void" line="68"/>
            <javadoc line="68">
                Encode the name to the specified DerOutputStream.                
                <param>
                    out the DerOutputStream to encode the GeneralName to.                    
                </param>
                <exception>
                    IOException thrown if the GeneralName could not be
                      encoded.                    
                </exception>
            </javadoc>
            <method name="constrains" type="int" line="77"/>
            <javadoc line="77">
                Return type of constraint inputName places on this name:&lt;ul&gt;
                  &lt;li&gt;NAME_DIFF_TYPE = -1: input name is different type from name (i.e. does not constrain).
                  &lt;li&gt;NAME_MATCH = 0: input name matches name.
                  &lt;li&gt;NAME_NARROWS = 1: input name narrows name (is lower in the naming subtree)
                  &lt;li&gt;NAME_WIDENS = 2: input name widens name (is higher in the naming subtree)
                  &lt;li&gt;NAME_SAME_TYPE = 3: input name does not match or narrow name, but is same type.
                  &lt;/ul&gt;.  These results are used in checking NameConstraints during
                  certification path verification.                
                <param>
                    inputName to be checked for being constrained                    
                </param>
                <returns>
                    constraint type above                    
                </returns>
                <throws>
                    UnsupportedOperationException if name is same type, but comparison operations are
                      not supported for this name type.                    
                </throws>
            </javadoc>
            <method name="subtreeDepth" type="int" line="94"/>
            <javadoc line="94">
                Return subtree depth of this name for purposes of determining
                  NameConstraints minimum and maximum bounds and for calculating
                  path lengths in name subtrees.                
                <returns>
                    distance of name from root                    
                </returns>
                <throws>
                    UnsupportedOperationException if not supported for this name type                    
                </throws>
            </javadoc>
        </interface>
    </source>