<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Arrays"/>
        <import package="sun.security.util"/>
        <class name="Extension" line="6">
            <implements interface="java.security.cert.Extension"/>
            <javadoc line="6">
                Represent a X509 Extension Attribute.
                  &lt;p&gt;Extensions are additional attributes which can be inserted in a X509
                  v3 certificate. For example a &quot;Driving License Certificate&quot; could have
                  the driving license number as a extension.
                  &lt;p&gt;Extensions are represented as a sequence of the extension identifier
                  (Object Identifier), a boolean flag stating whether the extension is to
                  be treated as being critical and the extension value itself (this is again
                  a DER encoding of the extension value).
                  &lt;pre&gt;
                  ASN.1 definition of Extension:
                  Extension ::= SEQUENCE {
                  ExtensionId     OBJECT IDENTIFIER,
                  critical        BOOLEAN DEFAULT FALSE,
                  extensionValue  OCTET STRING
                  }
                  &lt;/pre&gt;
                  All subclasses need to implement a constructor of the form
                  &lt;pre&gt;
                  &lt;subclass&gt; (Boolean, Object)
                  &lt;/pre&gt;
                  where the Object is typically an array of DER encoded bytes.
                  &lt;p&gt;                
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <declaration name="extensionId" type="ObjectIdentifier" line="33"/>
            <declaration name="critical" type="boolean" line="34"/>
            <declaration name="extensionValue" type="byte[]" line="35"/>
            <javadoc line="36">
                Default constructor.  Used only by sub-classes.                
            </javadoc>
            <method name="Extension" type="constructor" line="39"/>
            <javadoc line="41">
                Constructs an extension from a DER encoded array of bytes.                
            </javadoc>
            <method name="Extension" type="constructor" line="44">
                <params>
                    <param name="derVal" type="DerValue"/>
                </params>
                <declaration name="in" type="DerInputStream" line="45"/>
                <declaration name="val" type="DerValue" line="47"/>
                <scope line="48"/>
                <scope line="53"/>
            </method>
            <javadoc line="58">
                Constructs an Extension from individual components of ObjectIdentifier,
                  criticality and the DER encoded OctetString.                
                <param>
                    extensionId the ObjectIdentifier of the extension                    
                </param>
                <param>
                    critical the boolean indicating if the extension is critical                    
                </param>
                <param>
                    extensionValue the DER encoded octet string of the value.                    
                </param>
            </javadoc>
            <method name="Extension" type="constructor" line="65">
                <params>
                    <param name="extensionId" type="ObjectIdentifier"/>
                    <param name="critical" type="boolean"/>
                    <param name="extensionValue" type="byte[]"/>
                </params>
                <declaration name="inDerVal" type="DerValue" line="68"/>
            </method>
            <javadoc line="71">
                Constructs an Extension from another extension. To be used for
                  creating decoded subclasses.                
                <param>
                    ext the extension to create from.                    
                </param>
            </javadoc>
            <method name="Extension" type="constructor" line="76">
                <params>
                    <param name="ext" type="Extension"/>
                </params>
            </method>
            <javadoc line="81">
                Constructs an Extension from individual components of ObjectIdentifier,
                  criticality and the raw encoded extension value.                
                <param>
                    extensionId the ObjectIdentifier of the extension                    
                </param>
                <param>
                    critical the boolean indicating if the extension is critical                    
                </param>
                <param>
                    rawExtensionValue the raw DER-encoded extension value (this
                      is not the encoded OctetString).                    
                </param>
            </javadoc>
            <method name="newExtension" type="Extension" line="89">
                <params>
                    <param name="extensionId" type="ObjectIdentifier"/>
                    <param name="critical" type="boolean"/>
                    <param name="rawExtensionValue" type="byte[]"/>
                </params>
                <declaration name="ext" type="Extension" line="90"/>
            </method>
            <method name="encode" type="void" line="96">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="97"/>
                <declaration name="dos1" type="DerOutputStream" line="100"/>
                <declaration name="dos2" type="DerOutputStream" line="101"/>
                <scope line="103"/>
            </method>
            <javadoc line="110">
                Write the extension to the DerOutputStream.                
                <param>
                    out the DerOutputStream to write the extension to.                    
                </param>
                <exception>
                    IOException on encoding errors                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="115">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
                <declaration name="dos" type="DerOutputStream" line="118"/>
            </method>
            <javadoc line="124">
                Returns true if extension is critical.                
            </javadoc>
            <method name="isCritical" type="boolean" line="127"/>
            <javadoc line="130">
                Returns the ObjectIdentifier of the extension.                
            </javadoc>
            <method name="getExtensionId" type="ObjectIdentifier" line="133"/>
            <method name="getValue" type="byte[]" line="136"/>
            <javadoc line="139">
                Returns the extension value as an byte array for further processing.
                  Note, this is the raw DER value of the extension, not the DER
                  encoded octet string which is in the certificate.
                  This method does not return a clone; it is the responsibility of the
                  caller to clone the array if necessary.                
            </javadoc>
            <method name="getExtensionValue" type="byte[]" line="146"/>
            <method name="getId" type="String" line="149"/>
            <javadoc line="152">
                Returns the Extension in user readable form.                
            </javadoc>
            <method name="toString" type="String" line="155">
                <declaration name="s" type="String" line="156"/>
                <scope line="157"/>
                <scope line="160"/>
            </method>
            <declaration name="hashMagic" type="int" line="165"/>
            <javadoc line="166">
                Returns a hashcode value for this Extension.                
                <return>
                    the hashcode value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="170">
                <declaration name="h" type="int" line="171"/>
                <scope line="172">
                    <declaration name="val" type="byte[]" line="173"/>
                    <declaration name="len" type="int" line="174"/>
                </scope>
            </method>
            <javadoc line="181">
                Compares this Extension for equality with the specified
                  object. If the &lt;code&gt;other&lt;/code&gt; object is an
                  &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;Extension&lt;/code&gt;, then
                  its encoded form is retrieved and compared with the
                  encoded form of this Extension.                
                <param>
                    other the object to test for equality with this Extension.                    
                </param>
                <return>
                    true iff the other object is of type Extension, and the
                      criticality flag, object identifier and encoded extension value of
                      the two Extensions match, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="192">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <declaration name="otherExt" type="Extension" line="195"/>
            </method>
        </class>
    </source>