<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.x509">
        <import package="java.io"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Properties"/>
        <import package="java.security.Key"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.Security"/>
        <import package="java.security.Provider"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="java.security.spec.X509EncodedKeySpec"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.util"/>
        <class name="X509Key" line="45">
            <comment line="66">
                                
            </comment>
            <comment line="79">
                The number of bits unused in the last byte of the key.
                 Added to keep the byte[] key form consistent with the BitArray
                 form. Can de deleted when byte[] key is deleted.                
            </comment>
            <comment line="86">
                                
            </comment>
            <comment line="89">
                                
            </comment>
            <comment line="99">
                Build and initialize as a &quot;default&quot; key.  All X.509 key
                 data is stored and transmitted losslessly, but no knowledge
                 about this particular algorithm is available.                
            </comment>
            <comment line="201">
                Factory interface, building the kind of key associated with this
                 specific algorithm ID or else returning this generic base class.
                 See the description above.                
            </comment>
            <comment line="348">
                Returns a printable representation of the key                
            </comment>
            <comment line="468">
                Produce SubjectPublicKey encoding from algorithm id and key material.                
            </comment>
            <implements interface="PublicKey"/>
            <javadoc line="45">
                Holds an X.509 key, for example a public key found in an X.509
                  certificate.  Includes a description of the algorithm to be used
                  with the key; these keys normally are used as
                  &quot;SubjectPublicKeyInfo&quot;.
                  &lt;P&gt;While this class can represent any kind of X.509 key, it may be
                  desirable to provide subclasses which understand how to parse keying
                  data.   For example, RSA public keys have two members, one for the
                  public modulus and one for the prime exponent.  If such a class is
                  provided, it is used when parsing X.509 keys.  If one is not provided,
                  the key still parses correctly.                
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="62"/>
            <javadoc line="62">
                use serialVersionUID from JDK 1.1. for interoperability                
            </javadoc>
            <declaration name="algid" type="AlgorithmId" line="66"/>
            <declaration name="key" type="byte[]" line="68"/>
            <javadoc line="68">
                The key bytes, without the algorithm information.                
                <deprecated>
                    Use the BitArray form which does not require keys to
                      be byte aligned.                    
                </deprecated>
                <see>
                    sun.security.x509.X509Key#setKey(BitArray)                    
                </see>
                <see>
                    sun.security.x509.X509Key#getKey()                    
                </see>
            </javadoc>
            <declaration name="unusedBits" type="int" line="83"/>
            <declaration name="bitStringKey" type="BitArray" line="86"/>
            <declaration name="encodedKey" type="byte[]" line="89"/>
            <javadoc line="91">
                Default constructor.  The key constructed must have its key
                  and algorithm initialized before it may be used, for example
                  by using &lt;code&gt;decode&lt;/code&gt;.                
            </javadoc>
            <method name="X509Key" type="constructor" line="96"/>
            <method name="X509Key" type="constructor" line="104">
                <params>
                    <param name="algid" type="AlgorithmId"/>
                    <param name="key" type="BitArray"/>
                </params>
            </method>
            <javadoc line="110">
                Sets the key in the BitArray form.                
            </javadoc>
            <method name="setKey" type="void" line="113">
                <params>
                    <param name="key" type="BitArray"/>
                </params>
                <comment line="117">
                    Do this to keep the byte array form consistent with
                     this. Can delete when byte[] key is deleted.                    
                </comment>
                <declaration name="remaining" type="int" line="121"/>
            </method>
            <javadoc line="126">
                Gets the key. The key may or may not be byte aligned.                
                <return>
                    a BitArray containing the key.                    
                </return>
            </javadoc>
            <method name="getKey" type="BitArray" line="130">
                <comment line="132">
                    Do this for consistency in case a subclass
                     modifies byte[] key directly. Remove when
                     byte[] key is deleted.
                     Note: the consistency checks fail when the subclass
                     modifies a non byte-aligned key (into a byte-aligned key)
                     using the deprecated byte[] key field.                    
                </comment>
            </method>
            <javadoc line="146">
                Construct X.509 subject public key from a DER value.  If
                  the runtime environment is configured with a specific class for
                  this kind of key, a subclass is returned.  Otherwise, a generic
                  X509Key object is returned.
                  &lt;P&gt;This mechanism gurantees that keys (and algorithms) may be
                  freely manipulated and transferred, without risk of losing
                  information.  Also, when a key (or algorithm) needs some special
                  handling, that specific need can be accomodated.                
                <param>
                    in the DER-encoded SubjectPublicKeyInfo value                    
                </param>
                <exception>
                    IOException on data format errors                    
                </exception>
            </javadoc>
            <method name="parse" type="PublicKey" line="161">
                <params>
                    <param name="in" type="DerValue"/>
                </params>
                <declaration name="algorithm" type="AlgorithmId" line="162"/>
                <declaration name="subjectKey" type="PublicKey" line="163"/>
                <scope line="169"/>
                <scope line="173"/>
            </method>
            <javadoc line="182">
                Parse the key bits.  This may be redefined by subclasses to take
                  advantage of structure within the key.  For example, RSA public
                  keys encapsulate two unsigned integers (modulus and exponent) as
                  DER values within the &lt;code&gt;key&lt;/code&gt; bits; Diffie-Hellman and
                  DSS/DSA keys encapsulate a single unsigned integer.
                  &lt;P&gt;This function is called when creating X.509 SubjectPublicKeyInfo
                  values using the X509Key member functions, such as &lt;code&gt;parse&lt;/code&gt;
                  and &lt;code&gt;decode&lt;/code&gt;.                
                <exception>
                    IOException on parsing errors.                    
                </exception>
                <exception>
                    InvalidKeyException on invalid key encodings.                    
                </exception>
            </javadoc>
            <method name="parseKeyBits" type="void" line="196"/>
            <method name="buildX509Key" type="PublicKey" line="207">
                <params>
                    <param name="algid" type="AlgorithmId"/>
                    <param name="key" type="BitArray"/>
                </params>
                <comment line="209">
                    Use the algid and key parameters to produce the ASN.1 encoding
                     of the key, which will then be used as the input to the
                     key factory.                    
                </comment>
                <comment line="220">
                    Instantiate the key factory of the appropriate algorithm                    
                </comment>
                <comment line="223">
                    Generate the public key                    
                </comment>
                <comment line="226">
                    Return generic X509Key with opaque key data (see below)                    
                </comment>
                <comment line="231">
                    Try again using JDK1.1-style for backwards compatibility.                    
                </comment>
                <comment line="274">
                    this should not happen.                    
                </comment>
                <declaration name="x509EncodedKeyStream" type="DerOutputStream" line="213"/>
                <declaration name="x509KeySpec" type="X509EncodedKeySpec" line="215"/>
                <scope line="218">
                    <declaration name="keyFac" type="KeyFactory" line="220"/>
                </scope>
                <scope line="224"/>
                <scope line="226"/>
                <declaration name="classname" type="String" line="233"/>
                <scope line="234">
                    <declaration name="props" type="Properties" line="235"/>
                    <declaration name="keytype" type="String" line="236"/>
                    <declaration name="sunProvider" type="Provider" line="237"/>
                    <scope line="244"/>
                    <declaration name="keyClass" type="Class" line="248"/>
                    <scope line="249"/>
                    <scope line="251">
                        <declaration name="cl" type="ClassLoader" line="252"/>
                        <scope line="253"/>
                    </scope>
                    <declaration name="inst" type="Object" line="258"/>
                    <declaration name="result" type="X509Key" line="259"/>
                    <scope line="263"/>
                </scope>
                <scope line="270"/>
                <scope line="271"/>
                <scope line="272"/>
                <declaration name="result" type="X509Key" line="277"/>
            </method>
            <javadoc line="281">
                Returns the algorithm to be used with this key.                
            </javadoc>
            <method name="getAlgorithm" type="String" line="284"/>
            <javadoc line="288">
                Returns the algorithm ID to be used with this key.                
            </javadoc>
            <method name="getAlgorithmId" type="AlgorithmId" line="291"/>
            <javadoc line="293">
                Encode SubjectPublicKeyInfo sequence on the DER output stream.                
                <exception>
                    IOException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="void" line="299">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="303">
                Returns the DER-encoded form of the key as a byte array.                
            </javadoc>
            <method name="getEncoded" type="byte[]" line="306">
                <comment line="311">
                    XXX                    
                </comment>
                <scope line="307"/>
                <scope line="309"/>
            </method>
            <method name="getEncodedInternal" type="byte[]" line="315">
                <declaration name="encoded" type="byte[]" line="316"/>
                <scope line="317">
                    <scope line="318">
                        <declaration name="out" type="DerOutputStream" line="319"/>
                    </scope>
                    <scope line="322"/>
                </scope>
            </method>
            <javadoc line="331">
                Returns the format for this key: &quot;X.509&quot;                
            </javadoc>
            <method name="getFormat" type="String" line="334"/>
            <javadoc line="338">
                Returns the DER-encoded form of the key as a byte array.                
                <exception>
                    InvalidKeyException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="encode" type="byte[]" line="343"/>
            <method name="toString" type="String" line="351">
                <declaration name="encoder" type="HexDumpEncoder" line="352"/>
            </method>
            <javadoc line="358">
                Initialize an X509Key object from an input stream.  The data on that
                  input stream must be encoded using DER, obeying the X.509
                  &lt;code&gt;SubjectPublicKeyInfo&lt;/code&gt; format.  That is, the data is a
                  sequence consisting of an algorithm ID and a bit string which holds
                  the key.  (That bit string is often used to encapsulate another DER
                  encoded sequence.)
                  &lt;P&gt;Subclasses should not normally redefine this method; they should
                  instead provide a &lt;code&gt;parseKeyBits&lt;/code&gt; method to parse any
                  fields inside the &lt;code&gt;key&lt;/code&gt; member.
                  &lt;P&gt;The exception to this rule is that since private keys need not
                  be encoded using the X.509 &lt;code&gt;SubjectPublicKeyInfo&lt;/code&gt; format,
                  private keys may override this method, &lt;code&gt;encode&lt;/code&gt;, and
                  of course &lt;code&gt;getFormat&lt;/code&gt;.                
                <param>
                    in an input stream with a DER-encoded X.509
                      SubjectPublicKeyInfo value                    
                </param>
                <exception>
                    InvalidKeyException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="decode" type="void" line="381">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="397">
                    e.printStackTrace ();                    
                </comment>
                <declaration name="val" type="DerValue" line="382"/>
                <scope line="384"/>
                <scope line="395"/>
            </method>
            <method name="decode" type="void" line="402">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                </params>
            </method>
            <javadoc line="406">
                Serialization write ... X.509 keys serialize as
                  themselves, and they&apos;re parsed when they get read back.                
            </javadoc>
            <method name="writeObject" type="void" line="410">
                <params>
                    <param name="stream" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="414">
                Serialization read ... X.509 keys serialize as
                  themselves, and they&apos;re parsed when they get read back.                
            </javadoc>
            <method name="readObject" type="void" line="418">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="419"/>
                <scope line="421"/>
            </method>
            <method name="equals" type="boolean" line="428">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="429"/>
                <scope line="432"/>
                <scope line="435">
                    <declaration name="thisEncoded" type="byte[]" line="436"/>
                    <declaration name="otherEncoded" type="byte[]" line="437"/>
                    <scope line="438"/>
                    <scope line="440"/>
                </scope>
                <scope line="444"/>
            </method>
            <javadoc line="449">
                Calculates a hash code value for the object. Objects
                  which are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="453">
                <comment line="463">
                    should not happen                    
                </comment>
                <scope line="454">
                    <declaration name="b1" type="byte[]" line="455"/>
                    <declaration name="r" type="int" line="456"/>
                    <scope line="457"/>
                </scope>
                <scope line="461"/>
            </method>
            <method name="encode" type="void" line="471">
                <params>
                    <param name="out" type="DerOutputStream"/>
                    <param name="algid" type="AlgorithmId"/>
                    <param name="key" type="BitArray"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="472"/>
            </method>
        </class>
    </source>