<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.util"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto.MacSpi"/>
        <import package="sun.nio.ch.DirectBuffer"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="P11Mac" line="41">
            <extends class="MacSpi"/>
            <comment line="58">
                                
            </comment>
            <comment line="61">
                                
            </comment>
            <comment line="64">
                                
            </comment>
            <comment line="67">
                                
            </comment>
            <comment line="70">
                token instance                
            </comment>
            <comment line="73">
                algorithm name                
            </comment>
            <comment line="76">
                mechanism id                
            </comment>
            <comment line="79">
                mechanism object                
            </comment>
            <comment line="82">
                length of the MAC in bytes                
            </comment>
            <comment line="85">
                key instance used, if operation active                
            </comment>
            <comment line="88">
                associated session, if any                
            </comment>
            <comment line="91">
                state, one of S_* above                
            </comment>
            <comment line="94">
                one byte buffer for the update(byte) method, initialized on demand                
            </comment>
            <comment line="175">
                see JCE spec                
            </comment>
            <comment line="180">
                see JCE spec                
            </comment>
            <comment line="196">
                see JCE spec                
            </comment>
            <comment line="212">
                see JCE spec                
            </comment>
            <comment line="226">
                see JCE spec                
            </comment>
            <comment line="235">
                see JCE spec                
            </comment>
            <comment line="246">
                see JCE spec                
            </comment>
            <javadoc line="41">
                MAC implementation class. This class currently supports HMAC using
                  MD5, SHA-1, SHA-256, SHA-384, and SHA-512 and the SSL3 MAC using MD5
                  and SHA-1.
                  Note that unlike other classes (e.g. Signature), this does not
                  composite various operations if the token only supports part of the
                  required functionality. The MAC implementations in SunJCE already
                  do exactly that by implementing an MAC on top of MessageDigests. We
                  could not do any better than they.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="S_UNINIT" type="int" line="58"/>
            <declaration name="S_RESET" type="int" line="61"/>
            <declaration name="S_UPDATE" type="int" line="64"/>
            <declaration name="S_DOFINAL" type="int" line="67"/>
            <declaration name="token" type="Token" line="70"/>
            <declaration name="algorithm" type="String" line="73"/>
            <declaration name="mechanism" type="long" line="76"/>
            <declaration name="ckMechanism" type="CK_MECHANISM" line="79"/>
            <declaration name="macLength" type="int" line="82"/>
            <declaration name="p11Key" type="P11Key" line="85"/>
            <declaration name="session" type="Session" line="88"/>
            <declaration name="state" type="int" line="91"/>
            <declaration name="oneByte" type="byte[]" line="94"/>
            <method name="P11Mac" type="constructor" line="97">
                <params>
                    <param name="token" type="Token"/>
                    <param name="algorithm" type="String"/>
                    <param name="mechanism" type="long"/>
                </params>
                <declaration name="params" type="Long" line="102"/>
            </method>
            <method name="ensureInitialized" type="void" line="135">
                <scope line="137"/>
            </method>
            <method name="cancelOperation" type="void" line="142">
                <scope line="144"/>
                <scope line="148"/>
                <scope line="151"/>
                <scope line="153"/>
            </method>
            <method name="initialize" type="void" line="158">
                <scope line="159"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="169"/>
            </method>
            <method name="engineGetMacLength" type="int" line="175"/>
            <method name="engineReset" type="void" line="180">
                <comment line="182">
                    the framework insists on calling reset() after doFinal(),
                     but we prefer to take care of reinitialization ourselves                    
                </comment>
                <scope line="183"/>
                <scope line="188"/>
                <scope line="190"/>
            </method>
            <method name="engineInit" type="void" line="197">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
                <scope line="198"/>
                <scope line="204"/>
                <scope line="206"/>
            </method>
            <method name="engineDoFinal" type="byte[]" line="212">
                <scope line="213">
                    <declaration name="mac" type="byte[]" line="215"/>
                </scope>
                <scope line="218"/>
                <scope line="220"/>
            </method>
            <method name="engineUpdate" type="void" line="226">
                <params>
                    <param name="input" type="byte"/>
                </params>
                <scope line="227"/>
            </method>
            <method name="engineUpdate" type="void" line="235">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="ofs" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="236"/>
                <scope line="240"/>
            </method>
            <method name="engineUpdate" type="void" line="246">
                <params>
                    <param name="byteBuffer" type="ByteBuffer"/>
                </params>
                <scope line="247">
                    <declaration name="len" type="int" line="249"/>
                    <scope line="250"/>
                    <scope line="253"/>
                    <declaration name="addr" type="long" line="257"/>
                    <declaration name="ofs" type="int" line="258"/>
                </scope>
                <scope line="262"/>
            </method>
        </class>
    </source>