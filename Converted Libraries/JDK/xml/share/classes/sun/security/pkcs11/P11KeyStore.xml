<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.math.BigInteger"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Date"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Set"/>
        <import package="java.security"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.cert.CertPath"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.interfaces"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="javax.security.auth.login.LoginException"/>
        <import package="javax.security.auth.callback.Callback"/>
        <import package="javax.security.auth.callback.PasswordCallback"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.callback.UnsupportedCallbackException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.SerialNumber"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.ec.ECParameters"/>
        <import package="sun.security.pkcs11.Secmod"/>
        <import package="sun.security.pkcs11.P11Util"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <import package="sun.security.rsa.RSAKeyFactory"/>
        <class name="P11KeyStore" line="46">
            <extends class="KeyStoreSpi"/>
            <declaration name="ATTR_CLASS_CERT" type="CK_ATTRIBUTE" line="47"/>
            <declaration name="ATTR_CLASS_PKEY" type="CK_ATTRIBUTE" line="48"/>
            <declaration name="ATTR_CLASS_SKEY" type="CK_ATTRIBUTE" line="49"/>
            <declaration name="ATTR_X509_CERT_TYPE" type="CK_ATTRIBUTE" line="50"/>
            <declaration name="ATTR_TOKEN_TRUE" type="CK_ATTRIBUTE" line="51"/>
            <declaration name="ATTR_SKEY_TOKEN_TRUE" type="CK_ATTRIBUTE" line="52"/>
            <declaration name="ATTR_TRUSTED_TRUE" type="CK_ATTRIBUTE" line="53"/>
            <declaration name="ATTR_PRIVATE_TRUE" type="CK_ATTRIBUTE" line="54"/>
            <declaration name="NO_HANDLE" type="long" line="55"/>
            <declaration name="FINDOBJECTS_MAX" type="long" line="56"/>
            <declaration name="ALIAS_SEP" type="String" line="57"/>
            <declaration name="NSS_TEST" type="boolean" line="58"/>
            <declaration name="debug" type="Debug" line="59"/>
            <declaration name="CKA_TRUSTED_SUPPORTED" type="boolean" line="60"/>
            <declaration name="token" type="Token" line="61"/>
            <declaration name="writeDisabled" type="boolean" line="62"/>
            <declaration name="aliasMap" type="HashMap&lt;String,AliasInfo&gt;" line="63"/>
            <declaration name="useSecmodTrust" type="boolean" line="64"/>
            <declaration name="nssTrustType" type="Secmod.TrustType" line="65"/>
            <class name="AliasInfo" line="66">
                <javadoc line="66">
                    The underlying token may contain multiple certs belonging to the
                      same &quot;personality&quot; (for example, a signing cert and encryption cert),
                      all sharing the same CKA_LABEL.  These must be resolved
                      into unique keystore aliases.
                      In addition, private keys and certs may not have a CKA_LABEL.
                      It is assumed that a private key and corresponding certificate
                      share the same CKA_ID, and that the CKA_ID is unique across the token.
                      The CKA_ID may not be human-readable.
                      These pairs must be resolved into unique keystore aliases.
                      Furthermore, secret keys are assumed to have a CKA_LABEL
                      unique across the entire token.
                      When the KeyStore is loaded, instances of this class are
                      created to represent the private keys/secret keys/certs
                      that reside on the token.                    
                </javadoc>
                <declaration name="type" type="CK_ATTRIBUTE" line="83"/>
                <declaration name="label" type="String" line="84"/>
                <declaration name="id" type="byte[]" line="85"/>
                <declaration name="trusted" type="boolean" line="86"/>
                <declaration name="cert" type="X509Certificate" line="87"/>
                <declaration name="chain" type="X509Certificate" line="88"/>
                <declaration name="matched" type="boolean" line="89"/>
                <method name="AliasInfo" type="constructor" line="90">
                    <params>
                        <param name="label" type="String"/>
                    </params>
                </method>
                <method name="AliasInfo" type="constructor" line="94">
                    <params>
                        <param name="label" type="String"/>
                        <param name="id" type="byte[]"/>
                        <param name="trusted" type="boolean"/>
                        <param name="cert" type="X509Certificate"/>
                    </params>
                </method>
                <method name="toString" type="String" line="101">
                    <declaration name="sb" type="StringBuilder" line="102"/>
                    <scope line="103"/>
                    <scope line="106"/>
                    <scope line="109"/>
                    <scope line="113"/>
                    <scope line="116"/>
                    <scope line="121"/>
                    <scope line="124"/>
                </method>
            </class>
            <class name="PasswordCallbackHandler" line="130">
                <implements interface="CallbackHandler"/>
                <javadoc line="130">
                    callback handler for passing password to Provider.login method                    
                </javadoc>
                <declaration name="password" type="char[]" line="134"/>
                <method name="PasswordCallbackHandler" type="constructor" line="135">
                    <params>
                        <param name="password" type="char[]"/>
                    </params>
                    <scope line="136"/>
                </method>
                <method name="handle" type="void" line="140">
                    <params>
                        <param name="callbacks" type="Callback[]"/>
                    </params>
                    <scope line="141"/>
                    <declaration name="pc" type="PasswordCallback" line="144"/>
                </method>
                <method name="finalize" type="void" line="147">
                    <scope line="148"/>
                </method>
            </class>
            <class name="THandle" line="154">
                <javadoc line="154">
                    getTokenObject return value.
                      if object is not found, type is set to null.
                      otherwise, type is set to the requested type.                    
                </javadoc>
                <declaration name="handle" type="long" line="160"/>
                <declaration name="type" type="CK_ATTRIBUTE" line="161"/>
                <method name="THandle" type="constructor" line="162">
                    <params>
                        <param name="handle" type="long"/>
                        <param name="type" type="CK_ATTRIBUTE"/>
                    </params>
                </method>
            </class>
            <method name="P11KeyStore" type="constructor" line="167">
                <params>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <javadoc line="171">
                Returns the key associated with the given alias.
                  The key must have been associated with
                  the alias by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password, which must be <code>null</code>                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a key-related entry.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="185">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="187"/>
                <declaration name="aliasInfo" type="AliasInfo" line="190"/>
                <scope line="191"/>
                <declaration name="session" type="Session" line="194"/>
                <scope line="195">
                    <scope line="197">
                        <declaration name="h" type="THandle" line="198"/>
                        <scope line="199"/>
                    </scope>
                    <scope line="203">
                        <declaration name="h" type="THandle" line="204"/>
                        <scope line="205"/>
                    </scope>
                </scope>
                <scope line="211"/>
                <scope line="214"/>
                <scope line="217"/>
            </method>
            <javadoc line="221">
                Returns the certificate chain associated with the given alias.
                  The certificate chain must have been associated with the alias
                  by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="232">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="234"/>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Returns the certificate associated with the given alias.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the trusted certificate contained in that entry is returned.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the first element of the certificate chain in that entry
                  (if a chain exists) is returned.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="257">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="259"/>
                <scope line="260"/>
            </method>
            <javadoc line="265">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="271">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="275">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the given key cannot be protected, or
                      this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="293">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="296"/>
                <scope line="299"/>
                <scope line="302"/>
                <scope line="305"/>
                <declaration name="entry" type="KeyStore.Entry" line="308"/>
                <scope line="309">
                    <scope line="310"/>
                    <scope line="313"/>
                </scope>
                <scope line="317"/>
                <scope line="320"/>
            </method>
            <javadoc line="325">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="342">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
            </method>
            <javadoc line="346">
                Assigns the given certificate to the given alias.
                  &lt;p&gt; If the given alias identifies an existing entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  the trusted certificate in the existing entry
                  is overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify an entry containing a trusted certificate,
                      or this operation fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="360">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="363"/>
                <declaration name="entry" type="KeyStore.Entry" line="366"/>
            </method>
            <javadoc line="370">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="375">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="377"/>
            </method>
            <javadoc line="383">
                XXX - not sure whether to keep this                
            </javadoc>
            <method name="deleteEntry" type="boolean" line="386">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="387"/>
                <scope line="388">
                    <scope line="390">
                        <scope line="391"/>
                        <scope line="394"/>
                        <scope line="397"/>
                        <scope line="400"/>
                    </scope>
                    <scope line="404"/>
                    <scope line="407"/>
                </scope>
            </method>
            <javadoc line="413">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration<String>" line="417"/>
            <javadoc line="421">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="426">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="430">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="434"/>
            <javadoc line="438">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or a &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias is a
                      key-related, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="447">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="449"/>
                <scope line="450"/>
            </method>
            <javadoc line="455">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias contains a
                      trusted certificate, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="464">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="466"/>
                <scope line="467"/>
            </method>
            <javadoc line="472">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered was
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the given certificate is compared to that entry&apos;s certificate.
                  &lt;p&gt; If the entry being considered was
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the given certificate is compared to the first
                  element of that entry&apos;s certificate chain.                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the alias name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="491">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="e" type="Enumeration&lt;String&gt;" line="493"/>
                <scope line="494">
                    <declaration name="alias" type="String" line="495"/>
                    <declaration name="tokenCert" type="Certificate" line="496"/>
                    <scope line="497"/>
                </scope>
            </method>
            <javadoc line="503">
                engineStore currently is a No-op.
                  Entries are stored to the token during engineSetEntry                
                <param>
                    stream this must be <code>null</code>                    
                </param>
                <param>
                    password this must be <code>null</code>                    
                </param>
            </javadoc>
            <method name="engineStore" type="void" line="509">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="511"/>
                <scope line="514"/>
            </method>
            <javadoc line="518">
                engineStore currently is a No-op.
                  Entries are stored to the token during engineSetEntry                
                <param>
                    param this must be <code>null</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>KeyStore.LoadStoreParameter</code>
                      input is not <code>null</code>                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="526">
                <params>
                    <param name="param" type="KeyStore.LoadStoreParameter"/>
                </params>
                <scope line="528"/>
            </method>
            <javadoc line="532">
                Loads the keystore.                
                <param>
                    stream the input stream, which must be <code>null</code>                    
                </param>
                <param>
                    password the password used to unlock the keystore,
                      or <code>null</code> if the token supports a
                      CKF_PROTECTED_AUTHENTICATION_PATH                    
                </param>
                <exception>
                    IOException if the given <code>stream</code> is not
                      <code>null</code>, if the token supports a
                      CKF_PROTECTED_AUTHENTICATION_PATH and a non-null
                      password is given, of if the token login operation failed                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="543">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="545"/>
                <scope line="548"/>
                <scope line="551"/>
                <scope line="554">
                    <scope line="555"/>
                    <scope line="558"/>
                    <scope line="561"/>
                    <scope line="564"/>
                </scope>
                <scope line="568">
                    <declaration name="ioe" type="IOException" line="569"/>
                </scope>
                <scope line="573">
                    <declaration name="ioe" type="IOException" line="574"/>
                </scope>
                <scope line="578">
                    <declaration name="ioe" type="IOException" line="579"/>
                </scope>
            </method>
            <javadoc line="584">
                Loads the keystore using the given
                  &lt;code&gt;KeyStore.LoadStoreParameter&lt;/code&gt;.
                  &lt;p&gt; The &lt;code&gt;LoadStoreParameter.getProtectionParameter()&lt;/code&gt;
                  method is expected to return a &lt;code&gt;KeyStore.PasswordProtection&lt;/code&gt;
                  object.  The password is retrieved from that object and used
                  to unlock the PKCS#11 token.
                  &lt;p&gt; If the token supports a CKF_PROTECTED_AUTHENTICATION_PATH
                  then the provided password must be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    param the <code>KeyStore.LoadStoreParameter</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>KeyStore.LoadStoreParameter</code> is <code>null</code>,
                      or if that parameter returns a <code>null</code>
                      <code>ProtectionParameter</code> object.
                      input is not recognized                    
                </exception>
                <exception>
                    IOException if the token supports a
                      CKF_PROTECTED_AUTHENTICATION_PATH and the provided password
                      is non-null, or if the token login operation fails                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="603">
                <params>
                    <param name="param" type="KeyStore.LoadStoreParameter"/>
                </params>
                <scope line="605"/>
                <scope line="608"/>
                <scope line="611">
                    <scope line="612"/>
                    <scope line="615"/>
                </scope>
                <declaration name="handler" type="CallbackHandler" line="619"/>
                <declaration name="pp" type="KeyStore.ProtectionParameter" line="620"/>
                <scope line="621">
                    <declaration name="password" type="char[]" line="622"/>
                    <scope line="623"/>
                    <scope line="626"/>
                </scope>
                <scope line="630"/>
                <scope line="633"/>
                <scope line="636">
                    <scope line="638"/>
                    <scope line="641"/>
                </scope>
                <scope line="645"/>
                <scope line="648"/>
                <scope line="651"/>
            </method>
            <method name="login" type="void" line="655">
                <params>
                    <param name="handler" type="CallbackHandler"/>
                </params>
                <scope line="656"/>
                <scope line="659">
                    <scope line="660"/>
                </scope>
            </method>
            <javadoc line="666">
                Get a &lt;code&gt;KeyStore.Entry&lt;/code&gt; for the specified alias                
                <param>
                    alias get the <code>KeyStore.Entry</code> for this alias                    
                </param>
                <param>
                    protParam this must be <code>null</code>                    
                </param>
                <return>
                    the <code>KeyStore.Entry</code> for the specified alias,
                      or <code>null</code> if there is no such entry                    
                </return>
                <exception>
                    KeyStoreException if the operation failed                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      entry cannot be found                    
                </exception>
                <exception>
                    UnrecoverableEntryException if the specified
                      <code>protParam</code> were insufficient or invalid                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineGetEntry" type="KeyStore.Entry" line="679">
                <params>
                    <param name="alias" type="String"/>
                    <param name="protParam" type="KeyStore.ProtectionParameter"/>
                </params>
                <scope line="681"/>
                <declaration name="aliasInfo" type="AliasInfo" line="684"/>
                <scope line="685">
                    <scope line="686"/>
                </scope>
                <declaration name="session" type="Session" line="691"/>
                <scope line="692">
                    <scope line="694">
                        <scope line="695"/>
                    </scope>
                    <scope line="700">
                        <scope line="701"/>
                        <declaration name="h" type="THandle" line="704"/>
                        <scope line="705"/>
                        <scope line="708">
                            <declaration name="skey" type="SecretKey" line="709"/>
                        </scope>
                    </scope>
                    <scope line="713">
                        <scope line="714"/>
                        <declaration name="h" type="THandle" line="717"/>
                        <scope line="718"/>
                        <scope line="721">
                            <declaration name="pkey" type="PrivateKey" line="722"/>
                            <declaration name="chain" type="Certificate[]" line="723"/>
                            <scope line="724"/>
                            <scope line="727">
                                <scope line="728"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="736"/>
                <scope line="739"/>
            </method>
            <javadoc line="743">
                Save a &lt;code&gt;KeyStore.Entry&lt;/code&gt; under the specified alias.
                  &lt;p&gt; If an entry already exists for the specified alias,
                  it is overridden.
                  &lt;p&gt; This KeyStore implementation only supports the standard
                  entry types, and only supports X509Certificates in
                  TrustedCertificateEntries.  Also, this implementation does not support
                  protecting entries using a different password
                  from the one used for token login.
                  &lt;p&gt; Entries are immediately stored on the token.                
                <param>
                    alias save the <code>KeyStore.Entry</code> under this alias                    
                </param>
                <param>
                    entry the <code>Entry</code> to save                    
                </param>
                <param>
                    protParam this must be <code>null</code>                    
                </param>
                <exception>
                    KeyStoreException if this operation fails                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineSetEntry" type="void" line="759">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entry" type="KeyStore.Entry"/>
                    <param name="protParam" type="KeyStore.ProtectionParameter"/>
                </params>
                <scope line="762"/>
                <scope line="765"/>
                <scope line="768">
                    <scope line="769"/>
                    <declaration name="module" type="Module" line="772"/>
                    <scope line="773"/>
                    <declaration name="cert" type="Certificate" line="776"/>
                    <scope line="777"/>
                    <declaration name="xcert" type="X509Certificate" line="780"/>
                    <declaration name="info" type="AliasInfo" line="781"/>
                    <scope line="782"/>
                    <scope line="785"/>
                    <scope line="790"/>
                    <scope line="793"/>
                </scope>
                <scope line="797">
                    <scope line="798">
                        <declaration name="key" type="PrivateKey" line="799"/>
                        <scope line="800"/>
                        <declaration name="chain" type="Certificate[]" line="803"/>
                        <scope line="804"/>
                        <scope line="807">
                            <declaration name="updatedAlias" type="boolean" line="808"/>
                            <declaration name="aliases" type="Set&lt;String&gt;" line="809"/>
                            <scope line="810">
                                <declaration name="aliasInfo" type="AliasInfo" line="811"/>
                                <scope line="812"/>
                            </scope>
                            <scope line="818"/>
                        </scope>
                        <scope line="823"/>
                        <scope line="826"/>
                    </scope>
                    <scope line="830">
                        <declaration name="ske" type="KeyStore.SecretKeyEntry" line="831"/>
                        <declaration name="skey" type="SecretKey" line="832"/>
                        <scope line="833">
                            <declaration name="aliasInfo" type="AliasInfo" line="834"/>
                            <scope line="835"/>
                        </scope>
                        <scope line="840"/>
                    </scope>
                    <scope line="844"/>
                    <scope line="847">
                        <scope line="849"/>
                    </scope>
                    <scope line="853"/>
                    <scope line="856"/>
                </scope>
                <scope line="860"/>
            </method>
            <javadoc line="864">
                Determines if the keystore &lt;code&gt;Entry&lt;/code&gt; for the specified
                  &lt;code&gt;alias&lt;/code&gt; is an instance or subclass of the specified
                  &lt;code&gt;entryClass&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    entryClass the entry class                    
                </param>
                <return>
                    true if the keystore <code>Entry</code> for the specified
                      <code>alias</code> is an instance or subclass of the
                      specified <code>entryClass</code>, false otherwise                    
                </return>
            </javadoc>
            <method name="engineEntryInstanceOf" type="boolean" line="874">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entryClass" type="Class<? extends KeyStore.Entry>"/>
                </params>
            </method>
            <method name="loadCert" type="X509Certificate" line="878">
                <params>
                    <param name="session" type="Session"/>
                    <param name="oHandle" type="long"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="879"/>
                <declaration name="bytes" type="byte[]" line="881"/>
                <scope line="882"/>
                <declaration name="cf" type="CertificateFactory" line="885"/>
            </method>
            <method name="loadChain" type="X509Certificate[]" line="888">
                <params>
                    <param name="session" type="Session"/>
                    <param name="endCert" type="X509Certificate"/>
                </params>
                <declaration name="lChain" type="ArrayList&lt;X509Certificate&gt;" line="889"/>
                <scope line="890"/>
                <scope line="893"/>
                <declaration name="next" type="X509Certificate" line="897"/>
                <scope line="898">
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="899"/>
                    <declaration name="ch" type="long[]" line="900"/>
                    <scope line="901"/>
                    <scope line="904">
                        <scope line="905"/>
                        <scope line="910"/>
                    </scope>
                </scope>
            </method>
            <method name="loadSkey" type="SecretKey" line="917">
                <params>
                    <param name="session" type="Session"/>
                    <param name="oHandle" type="long"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="918"/>
                <declaration name="kType" type="long" line="920"/>
                <declaration name="keyType" type="String" line="921"/>
                <declaration name="keyLength" type="int" line="922"/>
                <scope line="923">
                    <scope line="924"/>
                    <scope line="928"/>
                </scope>
                <scope line="933">
                    <scope line="934"/>
                    <scope line="937"/>
                    <scope line="940"/>
                    <scope line="943">
                        <scope line="944"/>
                    </scope>
                    <scope line="949"/>
                    <scope line="952"/>
                </scope>
            </method>
            <method name="loadPkey" type="PrivateKey" line="960">
                <params>
                    <param name="session" type="Session"/>
                    <param name="oHandle" type="long"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="961"/>
                <declaration name="kType" type="long" line="963"/>
                <declaration name="keyType" type="String" line="964"/>
                <declaration name="keyLength" type="int" line="965"/>
                <scope line="966">
                    <declaration name="modulus" type="BigInteger" line="970"/>
                    <scope line="972"/>
                    <scope line="975"/>
                </scope>
                <scope line="980">
                    <declaration name="prime" type="BigInteger" line="984"/>
                </scope>
                <scope line="988">
                    <declaration name="prime" type="BigInteger" line="992"/>
                </scope>
                <scope line="996">
                    <declaration name="encodedParams" type="byte[]" line="999"/>
                    <scope line="1000">
                        <declaration name="params" type="ECParameterSpec" line="1001"/>
                    </scope>
                    <scope line="1004"/>
                </scope>
                <scope line="1009">
                    <scope line="1010"/>
                </scope>
            </method>
            <javadoc line="1016">
                XXX  On ibutton, when you C_SetAttribute(CKA_ID) for a private key
                  it not only changes the CKA_ID of the private key,
                  it changes the CKA_ID of the corresponding cert too.
                  And vice versa.
                  XXX  On ibutton, CKR_DEVICE_ERROR if you C_SetAttribute(CKA_ID)
                  for a private key, and then try to delete the corresponding cert.
                  So this code reverses the order.
                  After the cert is first destroyed (if necessary),
                  then the CKA_ID of the private key can be changed successfully.                
                <param>
                    replaceCert if true, then caller is updating alias info for
                      existing cert (only update CKA_ID/CKA_LABEL).
                      if false, then caller is updating cert chain
                      (delete old end cert and add new chain).                    
                </param>
            </javadoc>
            <method name="updatePkey" type="void" line="1031">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cka_id" type="byte[]"/>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="replaceCert" type="boolean"/>
                </params>
                <declaration name="session" type="Session" line="1033"/>
                <scope line="1034">
                    <declaration name="h" type="THandle" line="1036"/>
                    <declaration name="pKeyHandle" type="long" line="1037"/>
                    <scope line="1038"/>
                    <scope line="1041"/>
                    <scope line="1045"/>
                    <scope line="1048">
                        <scope line="1049"/>
                        <scope line="1052">
                            <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1053"/>
                        </scope>
                    </scope>
                    <scope line="1057"/>
                    <scope line="1060"/>
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1063"/>
                    <scope line="1065"/>
                </scope>
                <scope line="1069"/>
            </method>
            <method name="updateP11Pkey" type="void" line="1073">
                <params>
                    <param name="alias" type="String"/>
                    <param name="attribute" type="CK_ATTRIBUTE"/>
                    <param name="key" type="P11Key"/>
                </params>
                <declaration name="session" type="Session" line="1074"/>
                <scope line="1075">
                    <scope line="1077">
                        <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1078"/>
                        <scope line="1080"/>
                    </scope>
                    <scope line="1084">
                        <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1085"/>
                        <scope line="1086"/>
                        <scope line="1090"/>
                    </scope>
                </scope>
                <scope line="1095"/>
            </method>
            <method name="storeCert" type="void" line="1099">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <declaration name="attrList" type="ArrayList&lt;CK_ATTRIBUTE&gt;" line="1100"/>
                <scope line="1108"/>
                <scope line="1112"/>
                <declaration name="session" type="Session" line="1115"/>
                <scope line="1116"/>
                <scope line="1120"/>
            </method>
            <method name="storeChain" type="void" line="1124">
                <params>
                    <param name="alias" type="String"/>
                    <param name="chain" type="X509Certificate[]"/>
                </params>
            </method>
            <method name="storeCaCerts" type="void" line="1128">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="session" type="Session" line="1129"/>
                <declaration name="cacerts" type="HashSet&lt;X509Certificate&gt;" line="1130"/>
                <scope line="1131">
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1133"/>
                    <declaration name="handles" type="long[]" line="1134"/>
                    <scope line="1135"/>
                </scope>
                <scope line="1139"/>
                <scope line="1142">
                    <scope line="1143"/>
                    <scope line="1146"/>
                </scope>
            </method>
            <method name="storeSkey" type="void" line="1151">
                <params>
                    <param name="alias" type="String"/>
                    <param name="ske" type="KeyStore.SecretKeyEntry"/>
                </params>
                <declaration name="skey" type="SecretKey" line="1152"/>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1153"/>
                <scope line="1154"/>
                <scope line="1157"/>
                <scope line="1161"/>
            </method>
            <method name="addAttribute" type="CK_ATTRIBUTE[]" line="1165">
                <params>
                    <param name="attrs" type="CK_ATTRIBUTE[]"/>
                    <param name="attr" type="CK_ATTRIBUTE"/>
                </params>
                <declaration name="n" type="int" line="1166"/>
                <declaration name="newAttrs" type="CK_ATTRIBUTE[]" line="1167"/>
            </method>
            <method name="storePkey" type="void" line="1172">
                <params>
                    <param name="alias" type="String"/>
                    <param name="pke" type="KeyStore.PrivateKeyEntry"/>
                </params>
                <declaration name="key" type="PrivateKey" line="1173"/>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1174"/>
                <scope line="1175">
                    <declaration name="p11Key" type="P11Key" line="1176"/>
                    <scope line="1177"/>
                </scope>
                <declaration name="useNDB" type="boolean" line="1183"/>
                <declaration name="publicKey" type="PublicKey" line="1184"/>
                <scope line="1185">
                    <declaration name="cert" type="X509Certificate" line="1186"/>
                </scope>
                <scope line="1189">
                    <declaration name="dsaKey" type="DSAPrivateKey" line="1190"/>
                    <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1191"/>
                    <scope line="1192"/>
                    <scope line="1196"/>
                    <scope line="1200"/>
                </scope>
                <scope line="1204">
                    <declaration name="dhKey" type="DHPrivateKey" line="1205"/>
                    <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1206"/>
                    <scope line="1207"/>
                    <scope line="1211"/>
                </scope>
                <scope line="1216">
                    <declaration name="ecKey" type="ECPrivateKey" line="1217"/>
                    <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1218"/>
                    <scope line="1219"/>
                    <declaration name="encodedParams" type="byte[]" line="1222"/>
                    <scope line="1224"/>
                    <scope line="1228"/>
                </scope>
                <scope line="1232">
                    <declaration name="p11Key" type="P11Key" line="1233"/>
                    <scope line="1234"/>
                    <declaration name="netscapeDB" type="CK_ATTRIBUTE" line="1237"/>
                    <scope line="1238">
                        <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1239"/>
                    </scope>
                </scope>
                <scope line="1246"/>
                <declaration name="session" type="Session" line="1249"/>
                <scope line="1250">
                    <scope line="1253"/>
                </scope>
                <scope line="1257"/>
            </method>
            <method name="getRsaPrivKeyAttrs" type="CK_ATTRIBUTE[]" line="1262">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="RSAPrivateKey"/>
                    <param name="subject" type="X500Principal"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1263"/>
                <scope line="1264">
                    <scope line="1265"/>
                    <declaration name="rsaKey" type="RSAPrivateCrtKey" line="1268"/>
                </scope>
                <scope line="1272">
                    <scope line="1273"/>
                    <declaration name="rsaKey" type="RSAPrivateKey" line="1276"/>
                </scope>
            </method>
            <javadoc line="1282">
                Compute the CKA_ID and/or CKA_NETSCAPE_DB attributes that should be
                  used for this private key. It uses the same algorithm to calculate the
                  values as NSS. The public and private keys MUST match for the result to
                  be correct.
                  It returns a 2 element array with CKA_ID at index 0 and CKA_NETSCAPE_DB
                  at index 1. The boolean flags determine what is to be calculated.
                  If false or if we could not calculate the value, that element is null.
                  NOTE that we currently do not use the CKA_ID value calculated by this
                  method.                
            </javadoc>
            <method name="getIdAttributes" type="CK_ATTRIBUTE[]" line="1293">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="publicKey" type="PublicKey"/>
                    <param name="id" type="boolean"/>
                    <param name="netscapeDb" type="boolean"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1294"/>
                <scope line="1295"/>
                <declaration name="alg" type="String" line="1298"/>
                <scope line="1299">
                    <declaration name="n" type="BigInteger" line="1300"/>
                </scope>
                <scope line="1303">
                    <declaration name="y" type="BigInteger" line="1304"/>
                    <scope line="1305"/>
                    <scope line="1308"/>
                </scope>
                <scope line="1312">
                    <declaration name="y" type="BigInteger" line="1313"/>
                    <scope line="1314"/>
                    <scope line="1317"/>
                </scope>
                <scope line="1321">
                    <declaration name="ecPub" type="ECPublicKey" line="1322"/>
                    <declaration name="point" type="ECPoint" line="1323"/>
                    <declaration name="params" type="ECParameterSpec" line="1324"/>
                    <declaration name="encodedPoint" type="byte[]" line="1325"/>
                    <scope line="1326"/>
                    <scope line="1329"/>
                </scope>
                <scope line="1333"/>
            </method>
            <javadoc line="1338">
                return true if cert destroyed                
            </javadoc>
            <method name="destroyCert" type="boolean" line="1341">
                <params>
                    <param name="cka_id" type="byte[]"/>
                </params>
                <declaration name="session" type="Session" line="1342"/>
                <scope line="1343">
                    <declaration name="h" type="THandle" line="1345"/>
                    <scope line="1346"/>
                    <scope line="1350"/>
                </scope>
                <scope line="1355"/>
            </method>
            <javadoc line="1359">
                return true if chain destroyed                
            </javadoc>
            <method name="destroyChain" type="boolean" line="1362">
                <params>
                    <param name="cka_id" type="byte[]"/>
                </params>
                <declaration name="session" type="Session" line="1363"/>
                <scope line="1364">
                    <declaration name="h" type="THandle" line="1366"/>
                    <scope line="1367">
                        <scope line="1368"/>
                    </scope>
                    <declaration name="endCert" type="X509Certificate" line="1373"/>
                    <scope line="1375"/>
                    <declaration name="next" type="X509Certificate" line="1378"/>
                    <scope line="1379">
                        <scope line="1380"/>
                        <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1383"/>
                        <declaration name="ch" type="long[]" line="1384"/>
                        <scope line="1385"/>
                        <scope line="1388">
                            <scope line="1389"/>
                            <declaration name="issuers" type="long[]" line="1394"/>
                            <declaration name="destroyIt" type="boolean" line="1395"/>
                            <scope line="1396"/>
                            <scope line="1399">
                                <declaration name="iCert" type="X509Certificate" line="1400"/>
                                <scope line="1401"/>
                            </scope>
                            <scope line="1405">
                                <scope line="1407"/>
                            </scope>
                            <scope line="1411">
                                <scope line="1412"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1420"/>
            </method>
            <javadoc line="1424">
                return true if secret key destroyed                
            </javadoc>
            <method name="destroySkey" type="boolean" line="1427">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="session" type="Session" line="1428"/>
                <scope line="1429">
                    <declaration name="h" type="THandle" line="1431"/>
                    <scope line="1432">
                        <scope line="1433"/>
                    </scope>
                </scope>
                <scope line="1441"/>
            </method>
            <javadoc line="1445">
                return true if private key destroyed                
            </javadoc>
            <method name="destroyPkey" type="boolean" line="1448">
                <params>
                    <param name="cka_id" type="byte[]"/>
                </params>
                <declaration name="session" type="Session" line="1449"/>
                <scope line="1450">
                    <declaration name="h" type="THandle" line="1452"/>
                    <scope line="1453">
                        <scope line="1454"/>
                    </scope>
                </scope>
                <scope line="1462"/>
            </method>
            <javadoc line="1466">
                build [alias + issuer + serialNumber] string from a cert                
            </javadoc>
            <method name="getID" type="String" line="1469">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <declaration name="issuer" type="X500Principal" line="1470"/>
                <declaration name="serialNum" type="BigInteger" line="1471"/>
            </method>
            <javadoc line="1474">
                build CKA_ID string from bytes                
            </javadoc>
            <method name="getID" type="String" line="1477">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <declaration name="printable" type="boolean" line="1478"/>
                <scope line="1479">
                    <scope line="1480"/>
                </scope>
                <scope line="1485"/>
                <scope line="1488">
                    <scope line="1489"/>
                    <scope line="1492"/>
                </scope>
            </method>
            <javadoc line="1497">
                find an object on the token                
                <param>
                    type either ATTR_CLASS_CERT, ATTR_CLASS_PKEY, or ATTR_CLASS_SKEY                    
                </param>
                <param>
                    cka_id the CKA_ID if type is ATTR_CLASS_CERT or ATTR_CLASS_PKEY                    
                </param>
                <param>
                    cka_label the CKA_LABEL if type is ATTR_CLASS_SKEY                    
                </param>
            </javadoc>
            <method name="getTokenObject" type="THandle" line="1503">
                <params>
                    <param name="session" type="Session"/>
                    <param name="type" type="CK_ATTRIBUTE"/>
                    <param name="cka_id" type="byte[]"/>
                    <param name="cka_label" type="String"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1504"/>
                <scope line="1505"/>
                <scope line="1508"/>
                <declaration name="h" type="long[]" line="1511"/>
                <scope line="1512">
                    <scope line="1513">
                        <scope line="1514"/>
                        <scope line="1517"/>
                        <scope line="1520"/>
                    </scope>
                </scope>
                <scope line="1525"/>
                <scope line="1528">
                    <scope line="1529">
                        <declaration name="list" type="ArrayList&lt;THandle&gt;" line="1530"/>
                        <scope line="1531">
                            <declaration name="label" type="CK_ATTRIBUTE[]" line="1532"/>
                            <scope line="1534"/>
                        </scope>
                        <scope line="1538"/>
                        <scope line="1541"/>
                    </scope>
                    <scope line="1545"/>
                    <scope line="1548"/>
                </scope>
            </method>
            <javadoc line="1554">
                Create a mapping of all key pairs, trusted certs, and secret keys
                  on the token into logical KeyStore entries unambiguously
                  accessible via an alias.
                  If the token is removed, the map may contain stale values.
                  KeyStore.load should be called to re-create the map.
                  Assume all private keys and matching certs share a unique CKA_ID.
                  Assume all secret keys have a unique CKA_LABEL.                
                <return>
                    true if multiple certs found sharing the same CKA_LABEL
                      (if so, write capabilities are disabled)                    
                </return>
            </javadoc>
            <method name="mapLabels" type="boolean" line="1565">
                <declaration name="trustedAttr" type="CK_ATTRIBUTE[]" line="1566"/>
                <declaration name="session" type="Session" line="1567"/>
                <scope line="1568">
                    <declaration name="pkeyIDs" type="ArrayList&lt;byte[]&gt;" line="1570"/>
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1571"/>
                    <declaration name="handles" type="long[]" line="1572"/>
                    <scope line="1573">
                        <scope line="1576"/>
                    </scope>
                    <declaration name="certMap" type="HashMap&lt;String,HashSet&lt;AliasInfo&gt;&gt;" line="1580"/>
                    <scope line="1583">
                        <declaration name="cka_label" type="String" line="1585"/>
                        <declaration name="cka_id" type="byte[]" line="1586"/>
                        <scope line="1587">
                            <scope line="1589"/>
                        </scope>
                        <scope line="1593">
                            <scope line="1594"/>
                        </scope>
                        <scope line="1600">
                            <scope line="1601"/>
                        </scope>
                        <scope line="1605">
                            <scope line="1606"/>
                        </scope>
                        <declaration name="cert" type="X509Certificate" line="1611"/>
                        <declaration name="cka_trusted" type="boolean" line="1612"/>
                        <scope line="1613"/>
                        <scope line="1616">
                            <scope line="1617">
                                <scope line="1618"/>
                                <scope line="1622">
                                    <scope line="1623">
                                        <scope line="1625"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="infoSet" type="HashSet&lt;AliasInfo&gt;" line="1632"/>
                        <scope line="1633"/>
                    </scope>
                    <declaration name="sKeyMap" type="HashMap&lt;String,AliasInfo&gt;" line="1639"/>
                    <scope line="1642">
                        <scope line="1645">
                            <declaration name="cka_label" type="String" line="1646"/>
                            <scope line="1647"/>
                            <scope line="1650"/>
                        </scope>
                    </scope>
                    <declaration name="matchedCerts" type="ArrayList&lt;AliasInfo&gt;" line="1655"/>
                    <declaration name="sharedLabel" type="boolean" line="1656"/>
                </scope>
                <scope line="1660"/>
            </method>
            <javadoc line="1664">
                for each private key CKA_ID, find corresponding cert with same CKA_ID.
                  if found cert, see if cert CKA_LABEL is unique.
                  if CKA_LABEL unique, map private key/cert alias to that CKA_LABEL.
                  if CKA_LABEL not unique, map private key/cert alias to:
                  CKA_LABEL + ALIAS_SEP + ISSUER + ALIAS_SEP + SERIAL
                  if cert not found, ignore private key
                  (don&apos;t support private key entries without a cert chain yet)                
                <return>
                    a list of AliasInfo entries that represents all matches                    
                </return>
            </javadoc>
            <method name="mapPrivateKeys" type="ArrayList<AliasInfo>" line="1674">
                <params>
                    <param name="pkeyIDs" type="ArrayList<byte[]>"/>
                    <param name="certMap" type="HashMap<String,HashSet<AliasInfo>>"/>
                </params>
                <declaration name="matchedCerts" type="ArrayList&lt;AliasInfo&gt;" line="1676"/>
                <scope line="1677">
                    <declaration name="foundMatch" type="boolean" line="1678"/>
                    <declaration name="certLabels" type="Set&lt;String&gt;" line="1679"/>
                    <scope line="1680">
                        <declaration name="infoSet" type="HashSet&lt;AliasInfo&gt;" line="1681"/>
                        <scope line="1682">
                            <scope line="1683">
                                <scope line="1684"/>
                                <scope line="1688"/>
                            </scope>
                        </scope>
                        <scope line="1697"/>
                    </scope>
                    <scope line="1701">
                        <scope line="1702"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1709">
                for each cert not matched with a private key but is CKA_TRUSTED:
                  if CKA_LABEL unique, map cert to CKA_LABEL.
                  if CKA_LABEL not unique, map cert to [label+issuer+serialNum]
                  if CKA_TRUSTED not supported, treat all certs not part of a chain
                  as trusted                
                <return>
                    true if multiple certs found sharing the same CKA_LABEL                    
                </return>
            </javadoc>
            <method name="mapCerts" type="boolean" line="1717">
                <params>
                    <param name="matchedCerts" type="ArrayList<AliasInfo>"/>
                    <param name="certMap" type="HashMap<String,HashSet<AliasInfo>>"/>
                </params>
                <scope line="1718">
                    <declaration name="session" type="Session" line="1719"/>
                    <scope line="1720"/>
                    <scope line="1724"/>
                </scope>
                <declaration name="sharedLabel" type="boolean" line="1728"/>
                <declaration name="certLabels" type="Set&lt;String&gt;" line="1729"/>
                <scope line="1730">
                    <declaration name="infoSet" type="HashSet&lt;AliasInfo&gt;" line="1731"/>
                    <scope line="1732">
                        <scope line="1733"/>
                        <scope line="1737">
                            <scope line="1738">
                                <scope line="1739"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="mapTrustedCert" type="boolean" line="1749">
                <params>
                    <param name="certLabel" type="String"/>
                    <param name="aliasInfo" type="AliasInfo"/>
                    <param name="infoSet" type="HashSet<AliasInfo>"/>
                </params>
                <declaration name="sharedLabel" type="boolean" line="1750"/>
                <scope line="1753"/>
                <scope line="1756"/>
            </method>
            <javadoc line="1762">
                If the secret key shares a CKA_LABEL with another entry,
                  throw an exception                
            </javadoc>
            <method name="mapSecretKeys" type="void" line="1766">
                <params>
                    <param name="sKeyMap" type="HashMap<String,AliasInfo>"/>
                </params>
                <scope line="1767">
                    <scope line="1768"/>
                </scope>
            </method>
            <method name="dumpTokenMap" type="void" line="1774">
                <declaration name="aliases" type="Set&lt;String&gt;" line="1775"/>
                <scope line="1777"/>
                <scope line="1780">
                    <scope line="1781"/>
                </scope>
            </method>
            <method name="checkWrite" type="void" line="1786">
                <scope line="1787"/>
            </method>
            <declaration name="LONG0" type="long[]" line="1791"/>
            <method name="findObjects" type="long[]" line="1792">
                <params>
                    <param name="session" type="Session"/>
                    <param name="attrs" type="CK_ATTRIBUTE[]"/>
                </params>
                <declaration name="token" type="Token" line="1793"/>
                <declaration name="handles" type="long[]" line="1794"/>
                <scope line="1796">
                    <declaration name="h" type="long[]" line="1797"/>
                    <scope line="1798"/>
                </scope>
            </method>
        </class>
    </source>