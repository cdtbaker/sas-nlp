<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.math.BigInteger"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Date"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Set"/>
        <import package="java.security"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.cert.CertPath"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.interfaces"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="javax.security.auth.login.LoginException"/>
        <import package="javax.security.auth.callback.Callback"/>
        <import package="javax.security.auth.callback.PasswordCallback"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.callback.UnsupportedCallbackException"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.x509.SerialNumber"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.ec.ECParameters"/>
        <import package="sun.security.pkcs11.Secmod"/>
        <import package="sun.security.pkcs11.P11Util"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <import package="sun.security.rsa.RSAKeyFactory"/>
        <class name="P11KeyStore" line="85">
            <extends class="KeyStoreSpi"/>
            <comment line="101">
                XXX for testing purposes only                
            </comment>
            <comment line="102">
                - NSS doesn&apos;t support persistent secret keys                
            </comment>
            <comment line="103">
                (key type gets mangled if secret key is a token key)                
            </comment>
            <comment line="104">
                - if debug is turned on, then this is set to false                
            </comment>
            <comment line="123">
                If multiple certs are found to share the same CKA_LABEL                
            </comment>
            <comment line="124">
                at load time (NSS-style keystore), then the keystore is read                
            </comment>
            <comment line="125">
                and the unique keystore aliases are mapped to the entries.                
            </comment>
            <comment line="126">
                However, write capabilities are disabled.                
            </comment>
            <comment line="129">
                Map of unique keystore aliases to entries in the token                
            </comment>
            <comment line="132">
                whether to use NSS Secmod info for trust attributes                
            </comment>
            <comment line="135">
                if useSecmodTrust == true, which type of trust we are interested in                
            </comment>
            <declaration name="ATTR_CLASS_CERT" type="CK_ATTRIBUTE" line="87"/>
            <declaration name="ATTR_CLASS_PKEY" type="CK_ATTRIBUTE" line="89"/>
            <declaration name="ATTR_CLASS_SKEY" type="CK_ATTRIBUTE" line="91"/>
            <declaration name="ATTR_X509_CERT_TYPE" type="CK_ATTRIBUTE" line="94"/>
            <declaration name="ATTR_TOKEN_TRUE" type="CK_ATTRIBUTE" line="97"/>
            <declaration name="ATTR_SKEY_TOKEN_TRUE" type="CK_ATTRIBUTE" line="104"/>
            <declaration name="ATTR_TRUSTED_TRUE" type="CK_ATTRIBUTE" line="106"/>
            <declaration name="ATTR_PRIVATE_TRUE" type="CK_ATTRIBUTE" line="108"/>
            <declaration name="NO_HANDLE" type="long" line="111"/>
            <declaration name="FINDOBJECTS_MAX" type="long" line="112"/>
            <declaration name="ALIAS_SEP" type="String" line="113"/>
            <declaration name="NSS_TEST" type="boolean" line="115"/>
            <declaration name="debug" type="Debug" line="116"/>
            <declaration name="CKA_TRUSTED_SUPPORTED" type="boolean" line="118"/>
            <declaration name="token" type="Token" line="120"/>
            <declaration name="writeDisabled" type="boolean" line="126"/>
            <declaration name="aliasMap" type="HashMap&lt;String,AliasInfo&gt;" line="129"/>
            <declaration name="useSecmodTrust" type="boolean" line="132"/>
            <declaration name="nssTrustType" type="Secmod.TrustType" line="135"/>
            <class name="AliasInfo" line="137">
                <comment line="159">
                    CKA_CLASS - entry type                    
                </comment>
                <comment line="162">
                    CKA_LABEL of cert and secret key                    
                </comment>
                <comment line="165">
                    CKA_ID of the private key/cert pair                    
                </comment>
                <comment line="168">
                    CKA_TRUSTED - true if cert is trusted                    
                </comment>
                <comment line="171">
                    either end-entity cert or trusted cert depending on &apos;type&apos;                    
                </comment>
                <comment line="174">
                    chain                    
                </comment>
                <comment line="177">
                    true if CKA_ID for private key and cert match up                    
                </comment>
                <comment line="180">
                    SecretKeyEntry                    
                </comment>
                <comment line="186">
                    PrivateKeyEntry                    
                </comment>
                <comment line="267">
                    token object handle                    
                </comment>
                <comment line="268">
                    CKA_CLASS                    
                </comment>
                <javadoc line="137">
                    The underlying token may contain multiple certs belonging to the
                      same &quot;personality&quot; (for example, a signing cert and encryption cert),
                      all sharing the same CKA_LABEL.  These must be resolved
                      into unique keystore aliases.
                      In addition, private keys and certs may not have a CKA_LABEL.
                      It is assumed that a private key and corresponding certificate
                      share the same CKA_ID, and that the CKA_ID is unique across the token.
                      The CKA_ID may not be human-readable.
                      These pairs must be resolved into unique keystore aliases.
                      Furthermore, secret keys are assumed to have a CKA_LABEL
                      unique across the entire token.
                      When the KeyStore is loaded, instances of this class are
                      created to represent the private keys/secret keys/certs
                      that reside on the token.                    
                </javadoc>
                <declaration name="type" type="CK_ATTRIBUTE" line="159"/>
                <declaration name="label" type="String" line="162"/>
                <declaration name="id" type="byte[]" line="165"/>
                <declaration name="trusted" type="boolean" line="168"/>
                <declaration name="cert" type="X509Certificate" line="171"/>
                <declaration name="chain" type="X509Certificate" line="174"/>
                <declaration name="matched" type="boolean" line="177"/>
                <method name="AliasInfo" type="constructor" line="180">
                    <params>
                        <param name="label" type="String"/>
                    </params>
                </method>
                <method name="AliasInfo" type="constructor" line="189">
                    <params>
                        <param name="label" type="String"/>
                        <param name="id" type="byte[]"/>
                        <param name="trusted" type="boolean"/>
                        <param name="cert" type="X509Certificate"/>
                    </params>
                </method>
                <method name="toString" type="String" line="197">
                    <declaration name="sb" type="StringBuilder" line="198"/>
                    <scope line="199"/>
                    <scope line="201"/>
                    <scope line="203"/>
                    <scope line="207"/>
                    <scope line="209"/>
                    <scope line="214"/>
                    <scope line="216"/>
                </method>
            </class>
            <class name="PasswordCallbackHandler" line="229">
                <comment line="159">
                    CKA_CLASS - entry type                    
                </comment>
                <comment line="162">
                    CKA_LABEL of cert and secret key                    
                </comment>
                <comment line="165">
                    CKA_ID of the private key/cert pair                    
                </comment>
                <comment line="168">
                    CKA_TRUSTED - true if cert is trusted                    
                </comment>
                <comment line="171">
                    either end-entity cert or trusted cert depending on &apos;type&apos;                    
                </comment>
                <comment line="174">
                    chain                    
                </comment>
                <comment line="177">
                    true if CKA_ID for private key and cert match up                    
                </comment>
                <comment line="180">
                    SecretKeyEntry                    
                </comment>
                <comment line="186">
                    PrivateKeyEntry                    
                </comment>
                <comment line="267">
                    token object handle                    
                </comment>
                <comment line="268">
                    CKA_CLASS                    
                </comment>
                <implements interface="CallbackHandler"/>
                <javadoc line="229">
                    callback handler for passing password to Provider.login method                    
                </javadoc>
                <declaration name="password" type="char[]" line="234"/>
                <method name="PasswordCallbackHandler" type="constructor" line="236">
                    <params>
                        <param name="password" type="char[]"/>
                    </params>
                    <scope line="237"/>
                </method>
                <method name="handle" type="void" line="243">
                    <params>
                        <param name="callbacks" type="Callback[]"/>
                    </params>
                    <comment line="248">
                        this clones the password if not null                        
                    </comment>
                    <scope line="244"/>
                    <declaration name="pc" type="PasswordCallback" line="247"/>
                </method>
                <method name="finalize" type="void" line="251">
                    <scope line="252"/>
                </method>
            </class>
            <class name="THandle" line="259">
                <comment line="159">
                    CKA_CLASS - entry type                    
                </comment>
                <comment line="162">
                    CKA_LABEL of cert and secret key                    
                </comment>
                <comment line="165">
                    CKA_ID of the private key/cert pair                    
                </comment>
                <comment line="168">
                    CKA_TRUSTED - true if cert is trusted                    
                </comment>
                <comment line="171">
                    either end-entity cert or trusted cert depending on &apos;type&apos;                    
                </comment>
                <comment line="174">
                    chain                    
                </comment>
                <comment line="177">
                    true if CKA_ID for private key and cert match up                    
                </comment>
                <comment line="180">
                    SecretKeyEntry                    
                </comment>
                <comment line="186">
                    PrivateKeyEntry                    
                </comment>
                <comment line="267">
                    token object handle                    
                </comment>
                <comment line="268">
                    CKA_CLASS                    
                </comment>
                <javadoc line="259">
                    getTokenObject return value.
                      if object is not found, type is set to null.
                      otherwise, type is set to the requested type.                    
                </javadoc>
                <declaration name="handle" type="long" line="266"/>
                <declaration name="type" type="CK_ATTRIBUTE" line="267"/>
                <method name="THandle" type="constructor" line="269">
                    <params>
                        <param name="handle" type="long"/>
                        <param name="type" type="CK_ATTRIBUTE"/>
                    </params>
                </method>
            </class>
            <method name="P11KeyStore" type="constructor" line="275">
                <params>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <javadoc line="280">
                Returns the key associated with the given alias.
                  The key must have been associated with
                  the alias by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password, which must be <code>null</code>                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a key-related entry.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="298">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="332">
                    did not find anything                    
                </comment>
                <scope line="301"/>
                <declaration name="aliasInfo" type="AliasInfo" line="305"/>
                <scope line="306"/>
                <declaration name="session" type="Session" line="310"/>
                <scope line="311">
                    <scope line="314">
                        <declaration name="h" type="THandle" line="315"/>
                        <scope line="319"/>
                    </scope>
                    <scope line="322">
                        <declaration name="h" type="THandle" line="323"/>
                        <scope line="327"/>
                    </scope>
                </scope>
                <scope line="334"/>
                <scope line="336"/>
                <scope line="338"/>
            </method>
            <javadoc line="343">
                Returns the certificate chain associated with the given alias.
                  The certificate chain must have been associated with the alias
                  by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="356">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="360"/>
                <scope line="361"/>
            </method>
            <javadoc line="367">
                Returns the certificate associated with the given alias.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the trusted certificate contained in that entry is returned.
                  &lt;p&gt; If the given alias name identifies an entry
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the first element of the certificate chain in that entry
                  (if a chain exists) is returned.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="388">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="391"/>
                <scope line="392"/>
            </method>
            <javadoc line="398">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="406">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="411">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the given key cannot be protected, or
                      this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="436">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="441"/>
                <scope line="443"/>
                <scope line="446"/>
                <scope line="450"/>
                <declaration name="entry" type="KeyStore.Entry" line="454"/>
                <scope line="455">
                    <scope line="456"/>
                    <scope line="458"/>
                </scope>
                <scope line="461"/>
                <scope line="463"/>
            </method>
            <javadoc line="469">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="491">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
            </method>
            <javadoc line="496">
                Assigns the given certificate to the given alias.
                  &lt;p&gt; If the given alias identifies an existing entry
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  the trusted certificate in the existing entry
                  is overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify an entry containing a trusted certificate,
                      or this operation fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="514">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="519"/>
                <declaration name="entry" type="KeyStore.Entry" line="523"/>
            </method>
            <javadoc line="528">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="536">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="539"/>
            </method>
            <javadoc line="546">
                XXX - not sure whether to keep this                
            </javadoc>
            <method name="deleteEntry" type="boolean" line="549">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="557">
                    trusted certificate entry                    
                </comment>
                <comment line="560">
                    private key entry                    
                </comment>
                <comment line="564">
                    secret key entry                    
                </comment>
                <declaration name="aliasInfo" type="AliasInfo" line="550"/>
                <scope line="551">
                    <scope line="555">
                        <scope line="556"/>
                        <scope line="559"/>
                        <scope line="563"/>
                        <scope line="566"/>
                    </scope>
                    <scope line="569"/>
                    <scope line="571"/>
                </scope>
            </method>
            <javadoc line="578">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration<String>" line="583">
                <comment line="586">
                    don&apos;t want returned enumeration to iterate off actual keySet -                    
                </comment>
                <comment line="587">
                    otherwise applications that iterate and modify the keystore                    
                </comment>
                <comment line="588">
                    may run into concurrent modification problems                    
                </comment>
            </method>
            <javadoc line="592">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="599">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="604">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="609"/>
            <javadoc line="614">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt; or a &lt;code&gt;SecretKeyEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias is a
                      key-related, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="625">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="628"/>
                <scope line="629"/>
            </method>
            <javadoc line="635">
                Returns true if the entry identified by the given alias
                  was created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;.                
                <param>
                    alias the alias for the keystore entry to be checked                    
                </param>
                <return>
                    true if the entry identified by the given alias contains a
                      trusted certificate, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="646">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="aliasInfo" type="AliasInfo" line="649"/>
                <scope line="650"/>
            </method>
            <javadoc line="656">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered was
                  created by a call to &lt;code&gt;setCertificateEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;TrustedCertificateEntry&lt;/code&gt;,
                  then the given certificate is compared to that entry&apos;s certificate.
                  &lt;p&gt; If the entry being considered was
                  created by a call to &lt;code&gt;setKeyEntry&lt;/code&gt;,
                  or created by a call to &lt;code&gt;setEntry&lt;/code&gt; with a
                  &lt;code&gt;PrivateKeyEntry&lt;/code&gt;,
                  then the given certificate is compared to the first
                  element of that entry&apos;s certificate chain.                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the alias name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="679">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="e" type="Enumeration&lt;String&gt;" line="681"/>
                <scope line="682">
                    <declaration name="alias" type="String" line="683"/>
                    <declaration name="tokenCert" type="Certificate" line="684"/>
                    <scope line="685"/>
                </scope>
            </method>
            <javadoc line="692">
                engineStore currently is a No-op.
                  Entries are stored to the token during engineSetEntry                
                <param>
                    stream this must be <code>null</code>                    
                </param>
                <param>
                    password this must be <code>null</code>                    
                </param>
            </javadoc>
            <method name="engineStore" type="void" line="700">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="702"/>
                <scope line="706"/>
            </method>
            <javadoc line="711">
                engineStore currently is a No-op.
                  Entries are stored to the token during engineSetEntry                
                <param>
                    param this must be <code>null</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>KeyStore.LoadStoreParameter</code>
                      input is not <code>null</code>                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="722">
                <params>
                    <param name="param" type="KeyStore.LoadStoreParameter"/>
                </params>
                <scope line="724"/>
            </method>
            <javadoc line="730">
                Loads the keystore.                
                <param>
                    stream the input stream, which must be <code>null</code>                    
                </param>
                <param>
                    password the password used to unlock the keystore,
                      or <code>null</code> if the token supports a
                      CKF_PROTECTED_AUTHENTICATION_PATH                    
                </param>
                <exception>
                    IOException if the given <code>stream</code> is not
                      <code>null</code>, if the token supports a
                      CKF_PROTECTED_AUTHENTICATION_PATH and a non-null
                      password is given, of if the token login operation failed                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="744">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="767">
                    CKA_LABELs are shared by multiple certs                    
                </comment>
                <scope line="748"/>
                <scope line="752"/>
                <scope line="756"/>
                <scope line="760">
                    <scope line="761"/>
                    <scope line="763"/>
                    <scope line="766"/>
                    <scope line="770"/>
                </scope>
                <scope line="773">
                    <declaration name="ioe" type="IOException" line="774"/>
                </scope>
                <scope line="777">
                    <declaration name="ioe" type="IOException" line="778"/>
                </scope>
                <scope line="781">
                    <declaration name="ioe" type="IOException" line="782"/>
                </scope>
            </method>
            <javadoc line="788">
                Loads the keystore using the given
                  &lt;code&gt;KeyStore.LoadStoreParameter&lt;/code&gt;.
                  &lt;p&gt; The &lt;code&gt;LoadStoreParameter.getProtectionParameter()&lt;/code&gt;
                  method is expected to return a &lt;code&gt;KeyStore.PasswordProtection&lt;/code&gt;
                  object.  The password is retrieved from that object and used
                  to unlock the PKCS#11 token.
                  &lt;p&gt; If the token supports a CKF_PROTECTED_AUTHENTICATION_PATH
                  then the provided password must be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    param the <code>KeyStore.LoadStoreParameter</code>                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      <code>KeyStore.LoadStoreParameter</code> is <code>null</code>,
                      or if that parameter returns a <code>null</code>
                      <code>ProtectionParameter</code> object.
                      input is not recognized                    
                </exception>
                <exception>
                    IOException if the token supports a
                      CKF_PROTECTED_AUTHENTICATION_PATH and the provided password
                      is non-null, or if the token login operation fails                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="813">
                <params>
                    <param name="param" type="KeyStore.LoadStoreParameter"/>
                </params>
                <comment line="821">
                    if caller wants to pass a NULL password,                    
                </comment>
                <comment line="822">
                    force it to pass a non-NULL PasswordProtection that returns                    
                </comment>
                <comment line="823">
                    a NULL password                    
                </comment>
                <comment line="857">
                    CKA_LABELs are shared by multiple certs                    
                </comment>
                <scope line="817"/>
                <scope line="825"/>
                <scope line="829">
                    <scope line="830"/>
                    <scope line="832"/>
                </scope>
                <declaration name="handler" type="CallbackHandler" line="837"/>
                <declaration name="pp" type="KeyStore.ProtectionParameter" line="838"/>
                <scope line="839">
                    <declaration name="password" type="char[]" line="840"/>
                    <scope line="841"/>
                    <scope line="843"/>
                </scope>
                <scope line="846"/>
                <scope line="848"/>
                <scope line="854">
                    <scope line="856"/>
                    <scope line="860"/>
                </scope>
                <scope line="863"/>
                <scope line="865"/>
                <scope line="867"/>
            </method>
            <method name="login" type="void" line="872">
                <params>
                    <param name="handler" type="CallbackHandler"/>
                </params>
                <comment line="876">
                    token supports protected authentication path                    
                </comment>
                <comment line="877">
                    (external pin-pad, for example)                    
                </comment>
                <comment line="884">
                    must rely on application-set or default handler                    
                </comment>
                <comment line="885">
                    if one is necessary                    
                </comment>
                <scope line="873"/>
                <scope line="875">
                    <scope line="879"/>
                </scope>
            </method>
            <javadoc line="890">
                Get a &lt;code&gt;KeyStore.Entry&lt;/code&gt; for the specified alias                
                <param>
                    alias get the <code>KeyStore.Entry</code> for this alias                    
                </param>
                <param>
                    protParam this must be <code>null</code>                    
                </param>
                <return>
                    the <code>KeyStore.Entry</code> for the specified alias,
                      or <code>null</code> if there is no such entry                    
                </return>
                <exception>
                    KeyStoreException if the operation failed                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      entry cannot be found                    
                </exception>
                <exception>
                    UnrecoverableEntryException if the specified
                      <code>protParam</code> were insufficient or invalid                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineGetEntry" type="KeyStore.Entry" line="910">
                <params>
                    <param name="alias" type="String"/>
                    <param name="protParam" type="KeyStore.ProtectionParameter"/>
                </params>
                <comment line="936">
                    trusted certificate entry                    
                </comment>
                <comment line="942">
                    secret key entry                    
                </comment>
                <comment line="957">
                    private key entry                    
                </comment>
                <scope line="917"/>
                <declaration name="aliasInfo" type="AliasInfo" line="921"/>
                <scope line="922">
                    <scope line="923"/>
                </scope>
                <declaration name="session" type="Session" line="931"/>
                <scope line="932">
                    <scope line="935">
                        <scope line="937"/>
                    </scope>
                    <scope line="941">
                        <scope line="943"/>
                        <declaration name="h" type="THandle" line="947"/>
                        <scope line="949"/>
                        <scope line="952">
                            <declaration name="skey" type="SecretKey" line="953"/>
                        </scope>
                    </scope>
                    <scope line="956">
                        <scope line="958"/>
                        <declaration name="h" type="THandle" line="962"/>
                        <scope line="964"/>
                        <scope line="967">
                            <declaration name="pkey" type="PrivateKey" line="968"/>
                            <declaration name="chain" type="Certificate[]" line="969"/>
                            <scope line="970"/>
                            <scope line="972">
                                <scope line="973"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="981"/>
                <scope line="983"/>
            </method>
            <javadoc line="988">
                Save a &lt;code&gt;KeyStore.Entry&lt;/code&gt; under the specified alias.
                  &lt;p&gt; If an entry already exists for the specified alias,
                  it is overridden.
                  &lt;p&gt; This KeyStore implementation only supports the standard
                  entry types, and only supports X509Certificates in
                  TrustedCertificateEntries.  Also, this implementation does not support
                  protecting entries using a different password
                  from the one used for token login.
                  &lt;p&gt; Entries are immediately stored on the token.                
                <param>
                    alias save the <code>KeyStore.Entry</code> under this alias                    
                </param>
                <param>
                    entry the <code>Entry</code> to save                    
                </param>
                <param>
                    protParam this must be <code>null</code>                    
                </param>
                <exception>
                    KeyStoreException if this operation fails                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineSetEntry" type="void" line="1012">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entry" type="KeyStore.Entry"/>
                    <param name="protParam" type="KeyStore.ProtectionParameter"/>
                </params>
                <comment line="1032">
                    PKCS #11 does not allow app to modify trusted certs -                    
                </comment>
                <comment line="1039">
                    XXX allow TRUSTANCHOR module                    
                </comment>
                <comment line="1050">
                    XXX try to update                    
                </comment>
                <comment line="1078">
                    only support X509Certificate chains                    
                </comment>
                <comment line="1093">
                    see if there&apos;s an existing entry with the same info                    
                </comment>
                <comment line="1100">
                    found existing entry -                    
                </comment>
                <comment line="1101">
                    caller is renaming entry or updating cert chain                    
                </comment>
                <comment line="1102">
                                        
                </comment>
                <comment line="1103">
                    set new CKA_LABEL/CKA_ID                    
                </comment>
                <comment line="1104">
                    and update certs if necessary                    
                </comment>
                <comment line="1116">
                    caller adding new entry                    
                </comment>
                <comment line="1133">
                    first check if the key already exists                    
                </comment>
                <comment line="1152">
                    XXX  NSS does not write out the CKA_ID we pass to them                    
                </comment>
                <comment line="1153">
                                        
                </comment>
                <comment line="1154">
                    therefore we must re-map labels                    
                </comment>
                <comment line="1155">
                    (can not simply update aliasMap)                    
                </comment>
                <scope line="1020"/>
                <scope line="1025"/>
                <scope line="1029">
                    <scope line="1031"/>
                    <declaration name="module" type="Module" line="1037"/>
                    <scope line="1038"/>
                    <declaration name="cert" type="Certificate" line="1043"/>
                    <scope line="1044"/>
                    <declaration name="xcert" type="X509Certificate" line="1047"/>
                    <declaration name="info" type="AliasInfo" line="1048"/>
                    <scope line="1049"/>
                    <scope line="1053"/>
                    <scope line="1057"/>
                    <scope line="1059"/>
                </scope>
                <scope line="1063">
                    <scope line="1065">
                        <declaration name="key" type="PrivateKey" line="1067"/>
                        <scope line="1073"/>
                        <declaration name="chain" type="Certificate[]" line="1079"/>
                        <scope line="1081"/>
                        <scope line="1088">
                            <declaration name="updatedAlias" type="boolean" line="1089"/>
                            <declaration name="aliases" type="Set&lt;String&gt;" line="1090"/>
                            <scope line="1091">
                                <declaration name="aliasInfo" type="AliasInfo" line="1095"/>
                                <scope line="1098"/>
                            </scope>
                            <scope line="1115"/>
                        </scope>
                        <scope line="1121"/>
                        <scope line="1123"/>
                    </scope>
                    <scope line="1127">
                        <declaration name="ske" type="KeyStore.SecretKeyEntry" line="1129"/>
                        <declaration name="skey" type="SecretKey" line="1130"/>
                        <scope line="1132">
                            <declaration name="aliasInfo" type="AliasInfo" line="1134"/>
                            <scope line="1136"/>
                        </scope>
                        <scope line="1141"/>
                    </scope>
                    <scope line="1145"/>
                    <scope line="1150">
                        <scope line="1158"/>
                    </scope>
                    <scope line="1161"/>
                    <scope line="1163"/>
                </scope>
                <scope line="1168"/>
            </method>
            <javadoc line="1176">
                Determines if the keystore &lt;code&gt;Entry&lt;/code&gt; for the specified
                  &lt;code&gt;alias&lt;/code&gt; is an instance or subclass of the specified
                  &lt;code&gt;entryClass&lt;/code&gt;.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    entryClass the entry class                    
                </param>
                <return>
                    true if the keystore <code>Entry</code> for the specified
                      <code>alias</code> is an instance or subclass of the
                      specified <code>entryClass</code>, false otherwise                    
                </return>
            </javadoc>
            <method name="engineEntryInstanceOf" type="boolean" line="1189">
                <params>
                    <param name="alias" type="String"/>
                    <param name="entryClass" type="Class<? extends KeyStore.Entry>"/>
                </params>
            </method>
            <method name="loadCert" type="X509Certificate" line="1195">
                <params>
                    <param name="session" type="Session"/>
                    <param name="oHandle" type="long"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1197"/>
                <declaration name="bytes" type="byte[]" line="1201"/>
                <scope line="1202"/>
                <declaration name="cf" type="CertificateFactory" line="1206"/>
            </method>
            <method name="loadChain" type="X509Certificate[]" line="1213">
                <params>
                    <param name="session" type="Session"/>
                    <param name="endCert" type="X509Certificate"/>
                </params>
                <comment line="1219">
                    self signed                    
                </comment>
                <comment line="1226">
                    try loading remaining certs in chain by following                    
                </comment>
                <comment line="1227">
                    issuer-&gt;subject links                    
                </comment>
                <comment line="1239">
                    done                    
                </comment>
                <comment line="1242">
                    if more than one found, use first                    
                </comment>
                <comment line="1255">
                    self signed                    
                </comment>
                <declaration name="lChain" type="ArrayList&lt;X509Certificate&gt;" line="1215"/>
                <scope line="1218"/>
                <scope line="1221"/>
                <declaration name="next" type="X509Certificate" line="1229"/>
                <scope line="1230">
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1231"/>
                    <declaration name="ch" type="long[]" line="1236"/>
                    <scope line="1238"/>
                    <scope line="1241">
                        <scope line="1243"/>
                        <scope line="1254"/>
                    </scope>
                </scope>
            </method>
            <method name="loadSkey" type="SecretKey" line="1265">
                <params>
                    <param name="session" type="Session"/>
                    <param name="oHandle" type="long"/>
                </params>
                <comment line="1275">
                    XXX NSS mangles the stored key type for secret key token objects                    
                </comment>
                <comment line="1301">
                    XXX NSS problem CKR_ATTRIBUTE_TYPE_INVALID?                    
                </comment>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1267"/>
                <declaration name="kType" type="long" line="1270"/>
                <declaration name="keyType" type="String" line="1272"/>
                <declaration name="keyLength" type="int" line="1273"/>
                <scope line="1277">
                    <scope line="1278"/>
                    <scope line="1281"/>
                </scope>
                <scope line="1285">
                    <scope line="1286"/>
                    <scope line="1288"/>
                    <scope line="1290"/>
                    <scope line="1292">
                        <scope line="1293"/>
                    </scope>
                    <scope line="1302"/>
                    <scope line="1304"/>
                </scope>
            </method>
            <method name="loadPkey" type="PrivateKey" line="1315">
                <params>
                    <param name="session" type="Session"/>
                    <param name="oHandle" type="long"/>
                </params>
                <comment line="1333">
                    This check will combine our &quot;don&apos;t care&quot; values here                    
                </comment>
                <comment line="1334">
                    with the system-wide min/max values.                    
                </comment>
                <comment line="1389">
                    we do not want to accept key with unsupported parameters                    
                </comment>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1317"/>
                <declaration name="kType" type="long" line="1320"/>
                <declaration name="keyType" type="String" line="1321"/>
                <declaration name="keyLength" type="int" line="1322"/>
                <scope line="1324">
                    <declaration name="modulus" type="BigInteger" line="1330"/>
                    <scope line="1335"/>
                    <scope line="1338"/>
                </scope>
                <scope line="1348">
                    <declaration name="prime" type="BigInteger" line="1354"/>
                </scope>
                <scope line="1363">
                    <declaration name="prime" type="BigInteger" line="1369"/>
                </scope>
                <scope line="1378">
                    <declaration name="encodedParams" type="byte[]" line="1384"/>
                    <scope line="1385">
                        <declaration name="params" type="ECParameterSpec" line="1386"/>
                    </scope>
                    <scope line="1388"/>
                </scope>
                <scope line="1395">
                    <scope line="1396"/>
                </scope>
            </method>
            <javadoc line="1404">
                XXX  On ibutton, when you C_SetAttribute(CKA_ID) for a private key
                  it not only changes the CKA_ID of the private key,
                  it changes the CKA_ID of the corresponding cert too.
                  And vice versa.
                  XXX  On ibutton, CKR_DEVICE_ERROR if you C_SetAttribute(CKA_ID)
                  for a private key, and then try to delete the corresponding cert.
                  So this code reverses the order.
                  After the cert is first destroyed (if necessary),
                  then the CKA_ID of the private key can be changed successfully.                
                <param>
                    replaceCert if true, then caller is updating alias info for
                      existing cert (only update CKA_ID/CKA_LABEL).
                      if false, then caller is updating cert chain
                      (delete old end cert and add new chain).                    
                </param>
            </javadoc>
            <method name="updatePkey" type="void" line="1425">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cka_id" type="byte[]"/>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="replaceCert" type="boolean"/>
                </params>
                <comment line="1427">
                    XXX                    
                </comment>
                <comment line="1428">
                                        
                </comment>
                <comment line="1429">
                    always set replaceCert to true                    
                </comment>
                <comment line="1430">
                                        
                </comment>
                <comment line="1431">
                    NSS does not allow resetting of CKA_LABEL on an existing cert                    
                </comment>
                <comment line="1432">
                    (C_SetAttribute call succeeds, but is ignored)                    
                </comment>
                <comment line="1440">
                    first get private key object handle and hang onto it                    
                </comment>
                <comment line="1453">
                    next find existing end entity cert                    
                </comment>
                <comment line="1463">
                    replacing existing cert and chain                    
                </comment>
                <comment line="1466">
                    renaming alias for existing cert                    
                </comment>
                <comment line="1475">
                    add new chain                    
                </comment>
                <comment line="1478">
                    add all certs in chain                    
                </comment>
                <comment line="1481">
                    already updated alias info for existing end cert -                    
                </comment>
                <comment line="1482">
                    just update CA certs                    
                </comment>
                <comment line="1486">
                    finally update CKA_ID for private key                    
                </comment>
                <comment line="1487">
                                        
                </comment>
                <comment line="1488">
                    ibutton may have already done this (that is ok)                    
                </comment>
                <declaration name="session" type="Session" line="1436"/>
                <scope line="1437">
                    <declaration name="h" type="THandle" line="1442"/>
                    <declaration name="pKeyHandle" type="long" line="1443"/>
                    <scope line="1444"/>
                    <scope line="1446"/>
                    <scope line="1456"/>
                    <scope line="1461">
                        <scope line="1462"/>
                        <scope line="1465">
                            <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1467"/>
                        </scope>
                    </scope>
                    <scope line="1477"/>
                    <scope line="1480"/>
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1490"/>
                    <scope line="1494"/>
                </scope>
                <scope line="1499"/>
            </method>
            <method name="updateP11Pkey" type="void" line="1505">
                <params>
                    <param name="alias" type="String"/>
                    <param name="attribute" type="CK_ATTRIBUTE"/>
                    <param name="key" type="P11Key"/>
                </params>
                <comment line="1507">
                    if token key, update alias.                    
                </comment>
                <comment line="1508">
                    if session key, convert to token key.                    
                </comment>
                <comment line="1515">
                    token key - set new CKA_ID                    
                </comment>
                <comment line="1528">
                    session key - convert to token key and set CKA_ID                    
                </comment>
                <declaration name="session" type="Session" line="1510"/>
                <scope line="1511">
                    <scope line="1513">
                        <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1517"/>
                        <scope line="1521"/>
                    </scope>
                    <scope line="1526">
                        <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1530"/>
                        <scope line="1534"/>
                        <scope line="1538"/>
                    </scope>
                </scope>
                <scope line="1545"/>
            </method>
            <method name="storeCert" type="void" line="1551">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <comment line="1569">
                    ibutton requires something to be set                    
                </comment>
                <comment line="1570">
                    - alias must be unique                    
                </comment>
                <declaration name="attrList" type="ArrayList&lt;CK_ATTRIBUTE&gt;" line="1553"/>
                <scope line="1565"/>
                <scope line="1568"/>
                <declaration name="session" type="Session" line="1576"/>
                <scope line="1577"/>
                <scope line="1581"/>
            </method>
            <method name="storeChain" type="void" line="1587">
                <params>
                    <param name="alias" type="String"/>
                    <param name="chain" type="X509Certificate[]"/>
                </params>
                <comment line="1589">
                    add new chain                    
                </comment>
                <comment line="1590">
                                        
                </comment>
                <comment line="1591">
                    end cert has CKA_LABEL and CKA_ID set to alias.                    
                </comment>
                <comment line="1592">
                    other certs in chain have neither set.                    
                </comment>
            </method>
            <method name="storeCaCerts" type="void" line="1599">
                <params>
                    <param name="chain" type="X509Certificate[]"/>
                    <param name="start" type="int"/>
                </params>
                <comment line="1601">
                    do not add duplicate CA cert if already in token                    
                </comment>
                <comment line="1602">
                                        
                </comment>
                <comment line="1603">
                    XXX   ibutton stores duplicate CA certs, NSS does not                    
                </comment>
                <comment line="1614">
                    load certs currently on the token                    
                </comment>
                <declaration name="session" type="Session" line="1605"/>
                <declaration name="cacerts" type="HashSet&lt;X509Certificate&gt;" line="1606"/>
                <scope line="1607">
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1609"/>
                    <declaration name="handles" type="long[]" line="1612"/>
                    <scope line="1615"/>
                </scope>
                <scope line="1618"/>
                <scope line="1622">
                    <scope line="1623"/>
                    <scope line="1625"/>
                </scope>
            </method>
            <method name="storeSkey" type="void" line="1634">
                <params>
                    <param name="alias" type="String"/>
                    <param name="ske" type="KeyStore.SecretKeyEntry"/>
                </params>
                <comment line="1637">
                    No need to specify CKA_CLASS, CKA_KEY_TYPE, CKA_VALUE since                    
                </comment>
                <comment line="1638">
                    they are handled in P11SecretKeyFactory.createKey() method.                    
                </comment>
                <comment line="1647">
                    re-throw KeyStoreException to match javadoc                    
                </comment>
                <comment line="1651">
                    update global alias map                    
                </comment>
                <declaration name="skey" type="SecretKey" line="1636"/>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1639"/>
                <scope line="1644"/>
                <scope line="1646"/>
                <scope line="1654"/>
            </method>
            <method name="addAttribute" type="CK_ATTRIBUTE[]" line="1660">
                <params>
                    <param name="attrs" type="CK_ATTRIBUTE[]"/>
                    <param name="attr" type="CK_ATTRIBUTE"/>
                </params>
                <declaration name="n" type="int" line="1661"/>
                <declaration name="newAttrs" type="CK_ATTRIBUTE[]" line="1662"/>
            </method>
            <method name="storePkey" type="void" line="1669">
                <params>
                    <param name="alias" type="String"/>
                    <param name="pke" type="KeyStore.PrivateKeyEntry"/>
                </params>
                <comment line="1674">
                    If the key is a token object on this token, update it instead                    
                </comment>
                <comment line="1675">
                    of creating a duplicate key object.                    
                </comment>
                <comment line="1676">
                    Otherwise, treat a P11Key like any other key, if is is extractable.                    
                </comment>
                <comment line="1783">
                    sensitive/non-extractable P11Key                    
                </comment>
                <comment line="1791">
                    Note that this currently fails due to an NSS bug.                    
                </comment>
                <comment line="1792">
                    They do not allow the CKA_NETSCAPE_DB attribute to be                    
                </comment>
                <comment line="1793">
                    specified during C_CopyObject() and fail with                    
                </comment>
                <comment line="1794">
                    CKR_ATTRIBUTE_READ_ONLY.                    
                </comment>
                <comment line="1795">
                    But if we did not specify it, they would fail with                    
                </comment>
                <comment line="1796">
                    CKA_TEMPLATE_INCOMPLETE, so leave this code in here.                    
                </comment>
                <comment line="1800">
                    Update the key object.                    
                </comment>
                <comment line="1813">
                    create private key entry                    
                </comment>
                <declaration name="key" type="PrivateKey" line="1671"/>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1672"/>
                <scope line="1677">
                    <declaration name="p11Key" type="P11Key" line="1678"/>
                    <scope line="1679"/>
                </scope>
                <declaration name="useNDB" type="boolean" line="1686"/>
                <declaration name="publicKey" type="PublicKey" line="1687"/>
                <scope line="1689">
                    <declaration name="cert" type="X509Certificate" line="1691"/>
                </scope>
                <scope line="1695">
                    <declaration name="dsaKey" type="DSAPrivateKey" line="1697"/>
                    <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1699"/>
                    <scope line="1700"/>
                    <scope line="1715"/>
                    <scope line="1722"/>
                </scope>
                <scope line="1726">
                    <declaration name="dhKey" type="DHPrivateKey" line="1728"/>
                    <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1730"/>
                    <scope line="1731"/>
                    <scope line="1745"/>
                </scope>
                <scope line="1752">
                    <declaration name="ecKey" type="ECPrivateKey" line="1754"/>
                    <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1756"/>
                    <scope line="1757"/>
                    <declaration name="encodedParams" type="byte[]" line="1761"/>
                    <scope line="1771"/>
                    <scope line="1778"/>
                </scope>
                <scope line="1782">
                    <declaration name="p11Key" type="P11Key" line="1784"/>
                    <scope line="1785"/>
                    <declaration name="netscapeDB" type="CK_ATTRIBUTE" line="1789"/>
                    <scope line="1790">
                        <declaration name="idAttrs" type="CK_ATTRIBUTE[]" line="1797"/>
                    </scope>
                </scope>
                <scope line="1805"/>
                <declaration name="session" type="Session" line="1809"/>
                <scope line="1810">
                    <scope line="1815"/>
                </scope>
                <scope line="1820"/>
            </method>
            <method name="getRsaPrivKeyAttrs" type="CK_ATTRIBUTE[]" line="1829">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="RSAPrivateKey"/>
                    <param name="subject" type="X500Principal"/>
                </params>
                <comment line="1831">
                    subject is currently ignored - could be used to set CKA_SUBJECT                    
                </comment>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1833"/>
                <scope line="1834">
                    <scope line="1836"/>
                    <declaration name="rsaKey" type="RSAPrivateCrtKey" line="1840"/>
                </scope>
                <scope line="1867">
                    <scope line="1869"/>
                    <declaration name="rsaKey" type="RSAPrivateKey" line="1873"/>
                </scope>
            </method>
            <javadoc line="1892">
                Compute the CKA_ID and/or CKA_NETSCAPE_DB attributes that should be
                  used for this private key. It uses the same algorithm to calculate the
                  values as NSS. The public and private keys MUST match for the result to
                  be correct.
                  It returns a 2 element array with CKA_ID at index 0 and CKA_NETSCAPE_DB
                  at index 1. The boolean flags determine what is to be calculated.
                  If false or if we could not calculate the value, that element is null.
                  NOTE that we currently do not use the CKA_ID value calculated by this
                  method.                
            </javadoc>
            <method name="getIdAttributes" type="CK_ATTRIBUTE[]" line="1906">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="publicKey" type="PublicKey"/>
                    <param name="id" type="boolean"/>
                    <param name="netscapeDb" type="boolean"/>
                </params>
                <comment line="1913">
                    CKA_NETSCAPE_DB not needed for RSA public keys                    
                </comment>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="1907"/>
                <scope line="1908"/>
                <declaration name="alg" type="String" line="1911"/>
                <scope line="1912">
                    <declaration name="n" type="BigInteger" line="1914"/>
                </scope>
                <scope line="1916">
                    <declaration name="y" type="BigInteger" line="1917"/>
                    <scope line="1918"/>
                    <scope line="1921"/>
                </scope>
                <scope line="1924">
                    <declaration name="y" type="BigInteger" line="1925"/>
                    <scope line="1926"/>
                    <scope line="1929"/>
                </scope>
                <scope line="1932">
                    <declaration name="ecPub" type="ECPublicKey" line="1933"/>
                    <declaration name="point" type="ECPoint" line="1934"/>
                    <declaration name="params" type="ECParameterSpec" line="1935"/>
                    <declaration name="encodedPoint" type="byte[]" line="1936"/>
                    <scope line="1937"/>
                    <scope line="1940"/>
                </scope>
                <scope line="1943"/>
            </method>
            <javadoc line="1949">
                return true if cert destroyed                
            </javadoc>
            <method name="destroyCert" type="boolean" line="1953">
                <params>
                    <param name="cka_id" type="byte[]"/>
                </params>
                <declaration name="session" type="Session" line="1954"/>
                <scope line="1955">
                    <declaration name="h" type="THandle" line="1957"/>
                    <scope line="1958"/>
                    <scope line="1963"/>
                </scope>
                <scope line="1969"/>
            </method>
            <javadoc line="1974">
                return true if chain destroyed                
            </javadoc>
            <method name="destroyChain" type="boolean" line="1978">
                <params>
                    <param name="cka_id" type="byte[]"/>
                </params>
                <comment line="2004">
                    build chain following issuer-&gt;subject links                    
                </comment>
                <comment line="2011">
                    self signed - done                    
                </comment>
                <comment line="2023">
                    done                    
                </comment>
                <comment line="2026">
                    if more than one found, use first                    
                </comment>
                <comment line="2037">
                    only delete if not part of any other chain                    
                </comment>
                <comment line="2048">
                    no other certs with this issuer -                    
                </comment>
                <comment line="2049">
                    destroy it                    
                </comment>
                <comment line="2054">
                    only cert with issuer is itself (self-signed) -                    
                </comment>
                <comment line="2055">
                    destroy it                    
                </comment>
                <declaration name="session" type="Session" line="1980"/>
                <scope line="1981">
                    <declaration name="h" type="THandle" line="1984"/>
                    <scope line="1985">
                        <scope line="1986"/>
                    </scope>
                    <declaration name="endCert" type="X509Certificate" line="1995"/>
                    <scope line="1997"/>
                    <declaration name="next" type="X509Certificate" line="2006"/>
                    <scope line="2007">
                        <scope line="2010"/>
                        <declaration name="attrs" type="CK_ATTRIBUTE[]" line="2015"/>
                        <declaration name="ch" type="long[]" line="2020"/>
                        <scope line="2022"/>
                        <scope line="2025">
                            <scope line="2027"/>
                            <declaration name="issuers" type="long[]" line="2044"/>
                            <declaration name="destroyIt" type="boolean" line="2046"/>
                            <scope line="2047"/>
                            <scope line="2051">
                                <declaration name="iCert" type="X509Certificate" line="2052"/>
                                <scope line="2053"/>
                            </scope>
                            <scope line="2060">
                                <scope line="2062"/>
                            </scope>
                            <scope line="2068">
                                <scope line="2069"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2080"/>
            </method>
            <javadoc line="2085">
                return true if secret key destroyed                
            </javadoc>
            <method name="destroySkey" type="boolean" line="2089">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="session" type="Session" line="2090"/>
                <scope line="2091">
                    <declaration name="h" type="THandle" line="2094"/>
                    <scope line="2095">
                        <scope line="2096"/>
                    </scope>
                </scope>
                <scope line="2106"/>
            </method>
            <javadoc line="2111">
                return true if private key destroyed                
            </javadoc>
            <method name="destroyPkey" type="boolean" line="2115">
                <params>
                    <param name="cka_id" type="byte[]"/>
                </params>
                <declaration name="session" type="Session" line="2116"/>
                <scope line="2117">
                    <declaration name="h" type="THandle" line="2120"/>
                    <scope line="2121">
                        <scope line="2122"/>
                    </scope>
                </scope>
                <scope line="2132"/>
            </method>
            <javadoc line="2137">
                build [alias + issuer + serialNumber] string from a cert                
            </javadoc>
            <method name="getID" type="String" line="2140">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="X509Certificate"/>
                </params>
                <declaration name="issuer" type="X500Principal" line="2141"/>
                <declaration name="serialNum" type="BigInteger" line="2142"/>
            </method>
            <javadoc line="2151">
                build CKA_ID string from bytes                
            </javadoc>
            <method name="getID" type="String" line="2154">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <declaration name="printable" type="boolean" line="2155"/>
                <scope line="2156">
                    <scope line="2157"/>
                </scope>
                <scope line="2163"/>
                <scope line="2165">
                    <scope line="2166"/>
                    <scope line="2168"/>
                </scope>
            </method>
            <javadoc line="2174">
                find an object on the token                
                <param>
                    type either ATTR_CLASS_CERT, ATTR_CLASS_PKEY, or ATTR_CLASS_SKEY                    
                </param>
                <param>
                    cka_id the CKA_ID if type is ATTR_CLASS_CERT or ATTR_CLASS_PKEY                    
                </param>
                <param>
                    cka_label the CKA_LABEL if type is ATTR_CLASS_SKEY                    
                </param>
            </javadoc>
            <method name="getTokenObject" type="THandle" line="2185">
                <params>
                    <param name="session" type="Session"/>
                    <param name="type" type="CK_ATTRIBUTE"/>
                    <param name="cka_id" type="byte[]"/>
                    <param name="cka_label" type="String"/>
                </params>
                <comment line="2221">
                    found object handle - return it                    
                </comment>
                <comment line="2226">
                    found multiple object handles -                    
                </comment>
                <comment line="2227">
                    see if token ignored CKA_LABEL during search (e.g. NSS)                    
                </comment>
                <comment line="2243">
                    yes, there was only one CKA_LABEL that matched                    
                </comment>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="2187"/>
                <scope line="2188"/>
                <scope line="2193"/>
                <declaration name="h" type="long[]" line="2199"/>
                <scope line="2200">
                    <scope line="2201">
                        <scope line="2202"/>
                        <scope line="2207"/>
                        <scope line="2212"/>
                    </scope>
                </scope>
                <scope line="2219"/>
                <scope line="2224">
                    <scope line="2229">
                        <declaration name="list" type="ArrayList&lt;THandle&gt;" line="2231"/>
                        <scope line="2232">
                            <declaration name="label" type="CK_ATTRIBUTE[]" line="2234"/>
                            <scope line="2238"/>
                        </scope>
                        <scope line="2242"/>
                        <scope line="2245"/>
                    </scope>
                    <scope line="2253"/>
                    <scope line="2259"/>
                </scope>
            </method>
            <javadoc line="2270">
                Create a mapping of all key pairs, trusted certs, and secret keys
                  on the token into logical KeyStore entries unambiguously
                  accessible via an alias.
                  If the token is removed, the map may contain stale values.
                  KeyStore.load should be called to re-create the map.
                  Assume all private keys and matching certs share a unique CKA_ID.
                  Assume all secret keys have a unique CKA_LABEL.                
                <return>
                    true if multiple certs found sharing the same CKA_LABEL
                      (if so, write capabilities are disabled)                    
                </return>
            </javadoc>
            <method name="mapLabels" type="boolean" line="2286">
                <comment line="2295">
                    get all private key CKA_IDs                    
                </comment>
                <comment line="2313">
                    Get all certificates                    
                </comment>
                <comment line="2314">
                                        
                </comment>
                <comment line="2315">
                    If cert does not have a CKA_LABEL nor CKA_ID, it is ignored.                    
                </comment>
                <comment line="2316">
                                        
                </comment>
                <comment line="2317">
                    Get the CKA_LABEL for each cert                    
                </comment>
                <comment line="2318">
                    (if the cert does not have a CKA_LABEL, use the CKA_ID).                    
                </comment>
                <comment line="2319">
                                        
                </comment>
                <comment line="2320">
                    Map each cert to the its CKA_LABEL                    
                </comment>
                <comment line="2321">
                    (multiple certs may be mapped to a single CKA_LABEL)                    
                </comment>
                <comment line="2340">
                    there is a CKA_LABEL                    
                </comment>
                <comment line="2348">
                    GetAttributeValue for CKA_LABEL not supported                    
                </comment>
                <comment line="2349">
                                        
                </comment>
                <comment line="2350">
                    XXX SCA1000                    
                </comment>
                <comment line="2353">
                    get CKA_ID                    
                </comment>
                <comment line="2359">
                    no cka_label nor cka_id - ignore                    
                </comment>
                <comment line="2364">
                    use CKA_ID as CKA_LABEL                    
                </comment>
                <comment line="2372">
                    get CKA_TRUSTED                    
                </comment>
                <comment line="2386">
                    XXX  NSS, ibutton, sca1000                    
                </comment>
                <comment line="2403">
                    initially create private key entry AliasInfo entries -                    
                </comment>
                <comment line="2404">
                    these entries will get resolved into their true                    
                </comment>
                <comment line="2405">
                    entry types later                    
                </comment>
                <comment line="2414">
                    create list secret key CKA_LABELS -                    
                </comment>
                <comment line="2415">
                    if there are duplicates (either between secret keys,                    
                </comment>
                <comment line="2416">
                    or between a secret key and another object),                    
                </comment>
                <comment line="2417">
                    throw an exception                    
                </comment>
                <comment line="2432">
                    there is a CKA_LABEL                    
                </comment>
                <comment line="2446">
                    update global aliasMap with alias mappings                    
                </comment>
                <declaration name="trustedAttr" type="CK_ATTRIBUTE[]" line="2288"/>
                <declaration name="session" type="Session" line="2291"/>
                <scope line="2292">
                    <declaration name="pkeyIDs" type="ArrayList&lt;byte[]&gt;" line="2297"/>
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="2298"/>
                    <declaration name="handles" type="long[]" line="2302"/>
                    <scope line="2304">
                        <scope line="2308"/>
                    </scope>
                    <declaration name="certMap" type="HashMap&lt;String,HashSet&lt;AliasInfo&gt;&gt;" line="2323"/>
                    <scope line="2332">
                        <declaration name="cka_label" type="String" line="2335"/>
                        <declaration name="cka_id" type="byte[]" line="2336"/>
                        <scope line="2337">
                            <scope line="2339"/>
                        </scope>
                        <scope line="2343">
                            <scope line="2344"/>
                        </scope>
                        <scope line="2357">
                            <scope line="2358"/>
                        </scope>
                        <scope line="2362">
                            <scope line="2363"/>
                        </scope>
                        <declaration name="cert" type="X509Certificate" line="2370"/>
                        <declaration name="cka_trusted" type="boolean" line="2374"/>
                        <scope line="2376"/>
                        <scope line="2378">
                            <scope line="2379">
                                <scope line="2380"/>
                                <scope line="2384">
                                    <scope line="2385">
                                        <scope line="2388"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="infoSet" type="HashSet&lt;AliasInfo&gt;" line="2397"/>
                        <scope line="2398"/>
                    </scope>
                    <declaration name="sKeyMap" type="HashMap&lt;String,AliasInfo&gt;" line="2418"/>
                    <scope line="2427">
                        <scope line="2430">
                            <declaration name="cka_label" type="String" line="2433"/>
                            <scope line="2434"/>
                            <scope line="2436"/>
                        </scope>
                    </scope>
                    <declaration name="matchedCerts" type="ArrayList&lt;AliasInfo&gt;" line="2447"/>
                    <declaration name="sharedLabel" type="boolean" line="2449"/>
                </scope>
                <scope line="2454"/>
            </method>
            <javadoc line="2459">
                for each private key CKA_ID, find corresponding cert with same CKA_ID.
                  if found cert, see if cert CKA_LABEL is unique.
                  if CKA_LABEL unique, map private key/cert alias to that CKA_LABEL.
                  if CKA_LABEL not unique, map private key/cert alias to:
                  CKA_LABEL + ALIAS_SEP + ISSUER + ALIAS_SEP + SERIAL
                  if cert not found, ignore private key
                  (don&apos;t support private key entries without a cert chain yet)                
                <return>
                    a list of AliasInfo entries that represents all matches                    
                </return>
            </javadoc>
            <method name="mapPrivateKeys" type="ArrayList<AliasInfo>" line="2472">
                <params>
                    <param name="pkeyIDs" type="ArrayList<byte[]>"/>
                    <param name="certMap" type="HashMap<String,HashSet<AliasInfo>>"/>
                </params>
                <comment line="2474">
                    reset global alias map                    
                </comment>
                <comment line="2477">
                    list of matched certs that we will return                    
                </comment>
                <comment line="2482">
                    try to find a matching CKA_ID in a certificate                    
                </comment>
                <comment line="2488">
                    get cert CKA_IDs (if present) for each cert                    
                </comment>
                <comment line="2494">
                    found private key with matching cert                    
                </comment>
                <comment line="2497">
                    unique CKA_LABEL - use certLabel as alias                    
                </comment>
                <comment line="2501">
                    create new alias                    
                </comment>
                <declaration name="matchedCerts" type="ArrayList&lt;AliasInfo&gt;" line="2478"/>
                <scope line="2480">
                    <declaration name="foundMatch" type="boolean" line="2484"/>
                    <declaration name="certLabels" type="Set&lt;String&gt;" line="2485"/>
                    <scope line="2486">
                        <declaration name="infoSet" type="HashSet&lt;AliasInfo&gt;" line="2490"/>
                        <scope line="2491">
                            <scope line="2492">
                                <scope line="2496"/>
                                <scope line="2500"/>
                            </scope>
                        </scope>
                        <scope line="2511"/>
                    </scope>
                    <scope line="2516">
                        <scope line="2517"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2529">
                for each cert not matched with a private key but is CKA_TRUSTED:
                  if CKA_LABEL unique, map cert to CKA_LABEL.
                  if CKA_LABEL not unique, map cert to [label+issuer+serialNum]
                  if CKA_TRUSTED not supported, treat all certs not part of a chain
                  as trusted                
                <return>
                    true if multiple certs found sharing the same CKA_LABEL                    
                </return>
            </javadoc>
            <method name="mapCerts" type="boolean" line="2541">
                <params>
                    <param name="matchedCerts" type="ArrayList<AliasInfo>"/>
                    <param name="certMap" type="HashMap<String,HashSet<AliasInfo>>"/>
                </params>
                <comment line="2543">
                    load all cert chains                    
                </comment>
                <comment line="2554">
                    find all certs in certMap not part of a cert chain                    
                </comment>
                <comment line="2555">
                    - these are trusted                    
                </comment>
                <comment line="2565">
                    already found a private key match for this cert -                    
                </comment>
                <comment line="2566">
                    just continue                    
                </comment>
                <comment line="2571">
                    cert in this aliasInfo is not matched yet                    
                </comment>
                <comment line="2572">
                                        
                </comment>
                <comment line="2573">
                    if CKA_TRUSTED_SUPPORTED == true,                    
                </comment>
                <comment line="2574">
                    then check if cert is trusted                    
                </comment>
                <comment line="2578">
                    trusted certificate                    
                </comment>
                <comment line="2587">
                    CKA_TRUSTED_SUPPORTED == false                    
                </comment>
                <comment line="2588">
                                        
                </comment>
                <comment line="2589">
                    XXX treat all certs not part of a chain as trusted                    
                </comment>
                <comment line="2590">
                    XXX                    
                </comment>
                <comment line="2591">
                    XXX Unsupported                    
                </comment>
                <comment line="2592">
                                        
                </comment>
                <comment line="2593">
                    boolean partOfChain = false;                    
                </comment>
                <comment line="2594">
                    for (AliasInfo matchedInfo : matchedCerts) {                    
                </comment>
                <comment line="2595">
                    for (int i = 0; i &lt; matchedInfo.chain.length; i++) {                    
                </comment>
                <comment line="2596">
                    if (matchedInfo.chain[i].equals(aliasInfo.cert)) {                    
                </comment>
                <comment line="2597">
                    partOfChain = true;                    
                </comment>
                <comment line="2598">
                    break;                    
                </comment>
                <comment line="2599">
                    }                    
                </comment>
                <comment line="2600">
                    }                    
                </comment>
                <comment line="2601">
                    if (partOfChain) {                    
                </comment>
                <comment line="2602">
                    break;                    
                </comment>
                <comment line="2603">
                    }                    
                </comment>
                <comment line="2604">
                    }                    
                </comment>
                <comment line="2605">
                                        
                </comment>
                <comment line="2606">
                    if (!partOfChain) {                    
                </comment>
                <comment line="2607">
                    if (mapTrustedCert(certLabel,aliasInfo,infoSet) == true){                    
                </comment>
                <comment line="2608">
                    sharedLabel = true;                    
                </comment>
                <comment line="2609">
                    }                    
                </comment>
                <comment line="2610">
                    } else {                    
                </comment>
                <comment line="2611">
                    if (debug != null) {                    
                </comment>
                <comment line="2612">
                    debug.println(&quot;ignoring unmatched/untrusted cert &quot; +                    
                </comment>
                <comment line="2613">
                    &quot;that is part of cert chain - cert subject is [&quot; +                    
                </comment>
                <comment line="2614">
                    aliasInfo.cert.getSubjectX500Principal().getName                    
                </comment>
                <comment line="2615">
                    (X500Principal.CANONICAL) +                    
                </comment>
                <comment line="2616">
                    &quot;]&quot;);                    
                </comment>
                <comment line="2617">
                    }                    
                </comment>
                <comment line="2618">
                    }                    
                </comment>
                <scope line="2544">
                    <declaration name="session" type="Session" line="2545"/>
                    <scope line="2546"/>
                    <scope line="2549"/>
                </scope>
                <declaration name="sharedLabel" type="boolean" line="2557"/>
                <declaration name="certLabels" type="Set&lt;String&gt;" line="2559"/>
                <scope line="2560">
                    <declaration name="infoSet" type="HashSet&lt;AliasInfo&gt;" line="2561"/>
                    <scope line="2562">
                        <scope line="2564"/>
                        <scope line="2576">
                            <scope line="2577">
                                <scope line="2580"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="mapTrustedCert" type="boolean" line="2627">
                <params>
                    <param name="certLabel" type="String"/>
                    <param name="aliasInfo" type="AliasInfo"/>
                    <param name="infoSet" type="HashSet<AliasInfo>"/>
                </params>
                <comment line="2634">
                    unique CKA_LABEL - use certLabel as alias                    
                </comment>
                <comment line="2637">
                    create new alias                    
                </comment>
                <declaration name="sharedLabel" type="boolean" line="2629"/>
                <scope line="2633"/>
                <scope line="2636"/>
            </method>
            <javadoc line="2645">
                If the secret key shares a CKA_LABEL with another entry,
                  throw an exception                
            </javadoc>
            <method name="mapSecretKeys" type="void" line="2650">
                <params>
                    <param name="sKeyMap" type="HashMap<String,AliasInfo>"/>
                </params>
                <scope line="2651">
                    <scope line="2652"/>
                </scope>
            </method>
            <method name="dumpTokenMap" type="void" line="2662">
                <declaration name="aliases" type="Set&lt;String&gt;" line="2663"/>
                <scope line="2665"/>
                <scope line="2667">
                    <scope line="2668"/>
                </scope>
            </method>
            <method name="checkWrite" type="void" line="2674">
                <scope line="2675"/>
            </method>
            <declaration name="LONG0" type="long[]" line="2681"/>
            <method name="findObjects" type="long[]" line="2684">
                <params>
                    <param name="session" type="Session"/>
                    <param name="attrs" type="CK_ATTRIBUTE[]"/>
                </params>
                <declaration name="token" type="Token" line="2685"/>
                <declaration name="handles" type="long[]" line="2686"/>
                <scope line="2688">
                    <declaration name="h" type="long[]" line="2689"/>
                    <scope line="2690"/>
                </scope>
            </method>
        </class>
    </source>