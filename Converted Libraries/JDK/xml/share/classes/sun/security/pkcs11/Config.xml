<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.io"/>
        <import package="java.io.StreamTokenizer"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.security.util.PropertyExpander"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <import package="sun.security.pkcs11.wrapper.CK_ATTRIBUTE"/>
        <import package="sun.security.pkcs11.TemplateManager"/>
        <class name="Config" line="44">
            <comment line="57">
                same as allowSingleThreadedModules but controlled via a system property
                 and applied to all providers. if set to false, no SunPKCS11 instances
                 will accept single threaded modules regardless of the setting in their
                 config files.                
            </comment>
            <comment line="73">
                temporary storage for configurations
                 needed because the SunPKCS11 needs to call the superclass constructor
                 in provider before accessing any instance variables                
            </comment>
            <comment line="105">
                Reader and StringTokenizer used during parsing                
            </comment>
            <comment line="112">
                name suffix of the provider                
            </comment>
            <comment line="115">
                name of the PKCS#11 library                
            </comment>
            <comment line="118">
                description to pass to the provider class                
            </comment>
            <comment line="121">
                slotID of the slot to use                
            </comment>
            <comment line="124">
                slot to use, specified as index in the slotlist                
            </comment>
            <comment line="127">
                set of enabled mechanisms (or null to use default)                
            </comment>
            <comment line="130">
                set of disabled mechanisms                
            </comment>
            <comment line="133">
                whether to print debug info during startup                
            </comment>
            <comment line="136">
                template manager, initialized from parsed attributes                
            </comment>
            <comment line="139">
                how to handle error during startup, one of ERR_                
            </comment>
            <comment line="142">
                flag indicating whether the P11KeyStore should
                 be more tolerant of input parameters                
            </comment>
            <comment line="146">
                flag indicating whether we need to explicitly cancel operations
                 see Token                
            </comment>
            <comment line="150">
                how often to test for token insertion, if no token is present                
            </comment>
            <comment line="153">
                flag inidicating whether to omit the call to C_Initialize()
                 should be used only if we are running within a process that
                 has already called it (e.g. Plugin inside of Mozilla/NSS)                
            </comment>
            <comment line="158">
                whether to allow modules that only support single threaded access.
                 they cannot be used safely from multiple PKCS#11 consumers in the
                 same process, for example NSS and SunPKCS11                
            </comment>
            <comment line="163">
                name of the C function that returns the PKCS#11 functionlist
                 This option primarily exists for the deprecated
                 Secmod.Module.getProvider() method.                
            </comment>
            <comment line="168">
                whether to use NSS secmod mode. Implicitly set if nssLibraryDirectory,
                 nssSecmodDirectory, or nssModule is specified.                
            </comment>
            <comment line="172">
                location of the NSS library files (libnss3.so, etc.)                
            </comment>
            <comment line="175">
                location of secmod.db                
            </comment>
            <comment line="178">
                which NSS module to use                
            </comment>
            <comment line="183">
                Whether the P11KeyStore should specify the CKA_NETSCAPE_DB attribute
                 when creating private keys. Only valid if nssUseSecmod is true.                
            </comment>
            <comment line="187">
                Special init argument string for the NSS softtoken.
                 This is used when using the NSS softtoken directly without secmod mode.                
            </comment>
            <comment line="191">
                whether to use NSS trust attributes for the KeyStore of this provider
                 this option is for internal use by the SunPKCS11 code only and
                 works only for NSS providers created via the Secmod API                
            </comment>
            <comment line="481">
                Parsing helper methods                
            </comment>
            <comment line="630">
                individual entry parsing methods                
            </comment>
            <javadoc line="44">
                Configuration container and file parsing.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="ERR_HALT" type="int" line="52"/>
            <declaration name="ERR_IGNORE_ALL" type="int" line="53"/>
            <declaration name="ERR_IGNORE_LIB" type="int" line="54"/>
            <declaration name="staticAllowSingleThreadedModules" type="boolean" line="60"/>
            <scope line="62">
                <declaration name="p" type="String" line="63"/>
                <declaration name="s" type="String" line="64"/>
                <scope line="65"/>
                <scope line="67"/>
            </scope>
            <declaration name="configMap" type="Map&lt;String,Config&gt;" line="75"/>
            <method name="getConfig" type="Config" line="78">
                <params>
                    <param name="name" type="String"/>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="config" type="Config" line="79"/>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="87"/>
            </method>
            <method name="removeConfig" type="Config" line="92">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <declaration name="DEBUG" type="boolean" line="96"/>
            <method name="debug" type="void" line="98">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="99"/>
            </method>
            <declaration name="reader" type="Reader" line="105"/>
            <declaration name="st" type="StreamTokenizer" line="107"/>
            <declaration name="parsedKeywords" type="Set&lt;String&gt;" line="109"/>
            <declaration name="name" type="String" line="112"/>
            <declaration name="library" type="String" line="115"/>
            <declaration name="description" type="String" line="118"/>
            <declaration name="slotID" type="int" line="121"/>
            <declaration name="slotListIndex" type="int" line="124"/>
            <declaration name="enabledMechanisms" type="Set&lt;Long&gt;" line="127"/>
            <declaration name="disabledMechanisms" type="Set&lt;Long&gt;" line="130"/>
            <declaration name="showInfo" type="boolean" line="133"/>
            <declaration name="templateManager" type="TemplateManager" line="136"/>
            <declaration name="handleStartupErrors" type="int" line="139"/>
            <declaration name="keyStoreCompatibilityMode" type="boolean" line="143"/>
            <declaration name="explicitCancel" type="boolean" line="147"/>
            <declaration name="insertionCheckInterval" type="int" line="150"/>
            <declaration name="omitInitialize" type="boolean" line="155"/>
            <declaration name="allowSingleThreadedModules" type="boolean" line="160"/>
            <declaration name="functionList" type="String" line="165"/>
            <declaration name="nssUseSecmod" type="boolean" line="169"/>
            <declaration name="nssLibraryDirectory" type="String" line="172"/>
            <declaration name="nssSecmodDirectory" type="String" line="175"/>
            <declaration name="nssModule" type="String" line="178"/>
            <declaration name="nssDbMode" type="Secmod.DbMode" line="180"/>
            <declaration name="nssNetscapeDbWorkaround" type="boolean" line="184"/>
            <declaration name="nssArgs" type="String" line="188"/>
            <declaration name="nssUseSecmodTrust" type="boolean" line="193"/>
            <method name="Config" type="constructor" line="195">
                <params>
                    <param name="filename" type="String"/>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="199">
                    inline config                    
                </comment>
                <scope line="196">
                    <scope line="197">
                        <declaration name="config" type="String" line="199"/>
                    </scope>
                    <scope line="201"/>
                </scope>
                <scope line="205"/>
            </method>
            <method name="getName" type="String" line="214"/>
            <method name="getLibrary" type="String" line="218"/>
            <method name="getDescription" type="String" line="222">
                <scope line="223"/>
            </method>
            <method name="getSlotID" type="int" line="229"/>
            <method name="getSlotListIndex" type="int" line="233">
                <comment line="236">
                    if neither is set, default to first slot                    
                </comment>
                <scope line="234"/>
                <scope line="237"/>
            </method>
            <method name="getShowInfo" type="boolean" line="242"/>
            <method name="getTemplateManager" type="TemplateManager" line="246">
                <scope line="247"/>
            </method>
            <method name="isEnabled" type="boolean" line="253">
                <params>
                    <param name="m" type="long"/>
                </params>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <method name="getHandleStartupErrors" type="int" line="263"/>
            <method name="getKeyStoreCompatibilityMode" type="boolean" line="267"/>
            <method name="getExplicitCancel" type="boolean" line="271"/>
            <method name="getInsertionCheckInterval" type="int" line="275"/>
            <method name="getOmitInitialize" type="boolean" line="279"/>
            <method name="getAllowSingleThreadedModules" type="boolean" line="283"/>
            <method name="getFunctionList" type="String" line="287"/>
            <method name="getNssUseSecmod" type="boolean" line="291"/>
            <method name="getNssLibraryDirectory" type="String" line="295"/>
            <method name="getNssSecmodDirectory" type="String" line="299"/>
            <method name="getNssModule" type="String" line="303"/>
            <method name="getNssDbMode" type="Secmod.DbMode" line="307"/>
            <method name="getNssNetscapeDbWorkaround" type="boolean" line="311"/>
            <method name="getNssArgs" type="String" line="315"/>
            <method name="getNssUseSecmodTrust" type="boolean" line="319"/>
            <method name="expand" type="String" line="323">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="324"/>
                <scope line="326"/>
            </method>
            <method name="setupTokenizer" type="void" line="331">
                <comment line="344">
                    need {} for property subst                    
                </comment>
                <comment line="349">
                    XXX check ASCII table and add all other characters except special                    
                </comment>
                <comment line="351">
                    special: #=&quot;(),                    
                </comment>
            </method>
            <method name="excToken" type="ConfigurationException" line="357">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="excLine" type="ConfigurationException" line="361">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="parse" type="void" line="365">
                <scope line="366">
                    <declaration name="token" type="int" line="367"/>
                    <scope line="368"/>
                    <scope line="371"/>
                    <scope line="374"/>
                    <declaration name="word" type="String" line="377"/>
                    <scope line="378"/>
                    <scope line="380"/>
                    <scope line="382"/>
                    <scope line="384"/>
                    <scope line="386"/>
                    <scope line="388"/>
                    <scope line="390"/>
                    <scope line="392"/>
                    <scope line="394"/>
                    <scope line="396">
                        <scope line="398"/>
                    </scope>
                    <scope line="401"/>
                    <scope line="403"/>
                    <scope line="405"/>
                    <scope line="407"/>
                    <scope line="409"/>
                    <scope line="411"/>
                    <scope line="413"/>
                    <scope line="415"/>
                    <scope line="418"/>
                    <scope line="421"/>
                    <scope line="424">
                        <declaration name="mode" type="String" line="425"/>
                        <scope line="426"/>
                        <scope line="428"/>
                        <scope line="430"/>
                        <scope line="432"/>
                    </scope>
                    <scope line="436"/>
                    <scope line="439"/>
                    <scope line="441"/>
                    <scope line="443"/>
                </scope>
                <scope line="453"/>
                <scope line="456">
                    <scope line="457"/>
                </scope>
                <scope line="460">
                    <scope line="461"/>
                    <scope line="465"/>
                    <scope line="469"/>
                    <scope line="473"/>
                </scope>
            </method>
            <method name="nextToken" type="int" line="484">
                <declaration name="token" type="int" line="485"/>
            </method>
            <method name="parseEquals" type="void" line="490">
                <declaration name="token" type="int" line="491"/>
                <scope line="492"/>
            </method>
            <method name="parseOpenBraces" type="void" line="497">
                <scope line="498">
                    <declaration name="token" type="int" line="499"/>
                    <scope line="500"/>
                    <scope line="503"/>
                </scope>
            </method>
            <method name="isCloseBraces" type="boolean" line="510">
                <params>
                    <param name="token" type="int"/>
                </params>
            </method>
            <method name="parseWord" type="String" line="514">
                <declaration name="token" type="int" line="515"/>
                <scope line="516"/>
            </method>
            <method name="parseStringEntry" type="String" line="522">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <comment line="529">
                    not a word token nor a string enclosed by double quotes                    
                </comment>
                <declaration name="token" type="int" line="526"/>
                <scope line="527"/>
                <declaration name="value" type="String" line="531"/>
            </method>
            <method name="parseBooleanEntry" type="boolean" line="537">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <declaration name="value" type="boolean" line="540"/>
            </method>
            <method name="parseIntegerEntry" type="int" line="545">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <declaration name="value" type="int" line="548"/>
            </method>
            <method name="parseBoolean" type="boolean" line="553">
                <declaration name="val" type="String" line="554"/>
                <scope line="555"/>
                <scope line="557"/>
                <scope line="559"/>
            </method>
            <method name="parseLine" type="String" line="564">
                <declaration name="s" type="String" line="565"/>
                <scope line="566">
                    <declaration name="token" type="int" line="567"/>
                    <scope line="568"/>
                    <scope line="571"/>
                </scope>
            </method>
            <method name="decodeNumber" type="int" line="579">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="580">
                    <scope line="581"/>
                    <scope line="583"/>
                </scope>
                <scope line="586"/>
            </method>
            <method name="isNumber" type="boolean" line="591">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="592"/>
                <declaration name="ch" type="char" line="595"/>
            </method>
            <method name="parseComma" type="void" line="599">
                <declaration name="token" type="int" line="600"/>
                <scope line="601"/>
            </method>
            <method name="isByteArray" type="boolean" line="606">
                <params>
                    <param name="val" type="String"/>
                </params>
            </method>
            <method name="decodeByteArray" type="byte[]" line="610">
                <params>
                    <param name="str" type="String"/>
                </params>
                <comment line="616">
                    XXX proper hex parsing                    
                </comment>
                <scope line="611"/>
                <scope line="616"/>
                <scope line="618"/>
            </method>
            <method name="checkDup" type="void" line="623">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <scope line="624"/>
            </method>
            <method name="parseLibrary" type="String" line="633">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <comment line="641">
                    replace &quot;/$ISA/&quot; with &quot;/sparcv9/&quot; on 64-bit Solaris SPARC
                     and with &quot;/amd64/&quot; on Solaris AMD64.
                     On all other platforms, just turn it into a &quot;/&quot;                    
                </comment>
                <comment line="658">
                    Check to see if full path is specified to prevent the DLL
                     preloading attack                    
                </comment>
                <declaration name="lib" type="String" line="636"/>
                <declaration name="i" type="int" line="638"/>
                <scope line="639">
                    <declaration name="osName" type="String" line="643"/>
                    <declaration name="osArch" type="String" line="644"/>
                    <declaration name="prefix" type="String" line="645"/>
                    <declaration name="suffix" type="String" line="646"/>
                    <scope line="647"/>
                    <scope line="649"/>
                    <scope line="651"/>
                </scope>
                <scope line="659"/>
            </method>
            <method name="parseDescription" type="void" line="666">
                <params>
                    <param name="keyword" type="String"/>
                </params>
            </method>
            <method name="parseSlotID" type="void" line="673">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <scope line="674"/>
                <scope line="677"/>
                <declaration name="slotString" type="String" line="682"/>
            </method>
            <method name="parseSlotListIndex" type="void" line="687">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <scope line="688"/>
                <scope line="691"/>
                <declaration name="slotString" type="String" line="696"/>
            </method>
            <method name="parseEnabledMechanisms" type="void" line="701">
                <params>
                    <param name="keyword" type="String"/>
                </params>
            </method>
            <method name="parseDisabledMechanisms" type="void" line="705">
                <params>
                    <param name="keyword" type="String"/>
                </params>
            </method>
            <method name="parseMechanisms" type="Set<Long>" line="709">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <declaration name="mechs" type="Set&lt;Long&gt;" line="711"/>
                <scope line="714">
                    <declaration name="token" type="int" line="715"/>
                    <scope line="716"/>
                    <scope line="719"/>
                    <scope line="722"/>
                    <declaration name="mech" type="long" line="725"/>
                </scope>
                <scope line="728">
                    <scope line="730"/>
                </scope>
            </method>
            <method name="parseMechanism" type="long" line="739">
                <params>
                    <param name="mech" type="String"/>
                </params>
                <scope line="740"/>
                <scope line="742">
                    <scope line="743"/>
                    <scope line="745"/>
                </scope>
            </method>
            <method name="parseAttributes" type="void" line="751">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <scope line="752"/>
                <declaration name="token" type="int" line="755"/>
                <scope line="756">
                    <declaration name="s" type="String" line="757"/>
                    <scope line="758"/>
                </scope>
                <scope line="764"/>
                <declaration name="op" type="String" line="767"/>
                <declaration name="objectClass" type="long" line="769"/>
                <declaration name="keyAlg" type="long" line="771"/>
                <scope line="773"/>
                <declaration name="attributes" type="List&lt;CK_ATTRIBUTE&gt;" line="778"/>
                <scope line="779">
                    <scope line="781"/>
                    <scope line="784"/>
                    <scope line="787"/>
                    <declaration name="attributeName" type="String" line="790"/>
                    <declaration name="attributeId" type="long" line="791"/>
                    <declaration name="attributeValue" type="String" line="793"/>
                </scope>
            </method>
            <method name="setCompatibilityAttributes" type="void" line="800">
                <comment line="802">
                    all secret keys                    
                </comment>
                <comment line="814">
                    generic secret keys are special
                     They are used as MAC keys plus for the SSL/TLS (pre)master secrets                    
                </comment>
                <comment line="827">
                    all private and public keys                    
                </comment>
                <comment line="839">
                    additional attributes for RSA private keys                    
                </comment>
                <comment line="847">
                    additional attributes for RSA public keys                    
                </comment>
                <comment line="856">
                    additional attributes for DSA private keys                    
                </comment>
                <comment line="861">
                    additional attributes for DSA public keys                    
                </comment>
                <comment line="867">
                    additional attributes for DH private keys                    
                </comment>
                <comment line="873">
                    additional attributes for EC private keys                    
                </comment>
                <comment line="879">
                    additional attributes for EC public keys                    
                </comment>
            </method>
            <declaration name="CK_A0" type="CK_ATTRIBUTE[]" line="885"/>
            <method name="parseOperation" type="String" line="887">
                <declaration name="op" type="String" line="888"/>
                <scope line="889"/>
                <scope line="891"/>
                <scope line="893"/>
                <scope line="895"/>
            </method>
            <method name="parseObjectClass" type="long" line="900">
                <declaration name="name" type="String" line="901"/>
                <scope line="902"/>
                <scope line="904"/>
            </method>
            <method name="parseKeyAlgorithm" type="long" line="909">
                <declaration name="name" type="String" line="910"/>
                <scope line="911"/>
                <scope line="913">
                    <scope line="914"/>
                    <scope line="916"/>
                </scope>
            </method>
            <method name="decodeAttributeName" type="long" line="922">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="923"/>
                <scope line="925">
                    <scope line="926"/>
                    <scope line="928"/>
                </scope>
            </method>
            <method name="decodeAttributeValue" type="CK_ATTRIBUTE" line="935">
                <params>
                    <param name="id" type="long"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="936"/>
                <scope line="938"/>
                <scope line="940"/>
                <scope line="942"/>
                <scope line="944"/>
                <scope line="946"/>
            </method>
            <method name="parseNSSArgs" type="void" line="951">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <declaration name="token" type="int" line="954"/>
                <scope line="955"/>
            </method>
            <method name="parseHandleStartupErrors" type="void" line="962">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <declaration name="val" type="String" line="965"/>
                <scope line="966"/>
                <scope line="968"/>
                <scope line="970"/>
                <scope line="972"/>
            </method>
        </class>
        <class name="ConfigurationException" line="980">
            <extends class="IOException"/>
            <comment line="57">
                same as allowSingleThreadedModules but controlled via a system property
                 and applied to all providers. if set to false, no SunPKCS11 instances
                 will accept single threaded modules regardless of the setting in their
                 config files.                
            </comment>
            <comment line="73">
                temporary storage for configurations
                 needed because the SunPKCS11 needs to call the superclass constructor
                 in provider before accessing any instance variables                
            </comment>
            <comment line="105">
                Reader and StringTokenizer used during parsing                
            </comment>
            <comment line="112">
                name suffix of the provider                
            </comment>
            <comment line="115">
                name of the PKCS#11 library                
            </comment>
            <comment line="118">
                description to pass to the provider class                
            </comment>
            <comment line="121">
                slotID of the slot to use                
            </comment>
            <comment line="124">
                slot to use, specified as index in the slotlist                
            </comment>
            <comment line="127">
                set of enabled mechanisms (or null to use default)                
            </comment>
            <comment line="130">
                set of disabled mechanisms                
            </comment>
            <comment line="133">
                whether to print debug info during startup                
            </comment>
            <comment line="136">
                template manager, initialized from parsed attributes                
            </comment>
            <comment line="139">
                how to handle error during startup, one of ERR_                
            </comment>
            <comment line="142">
                flag indicating whether the P11KeyStore should
                 be more tolerant of input parameters                
            </comment>
            <comment line="146">
                flag indicating whether we need to explicitly cancel operations
                 see Token                
            </comment>
            <comment line="150">
                how often to test for token insertion, if no token is present                
            </comment>
            <comment line="153">
                flag inidicating whether to omit the call to C_Initialize()
                 should be used only if we are running within a process that
                 has already called it (e.g. Plugin inside of Mozilla/NSS)                
            </comment>
            <comment line="158">
                whether to allow modules that only support single threaded access.
                 they cannot be used safely from multiple PKCS#11 consumers in the
                 same process, for example NSS and SunPKCS11                
            </comment>
            <comment line="163">
                name of the C function that returns the PKCS#11 functionlist
                 This option primarily exists for the deprecated
                 Secmod.Module.getProvider() method.                
            </comment>
            <comment line="168">
                whether to use NSS secmod mode. Implicitly set if nssLibraryDirectory,
                 nssSecmodDirectory, or nssModule is specified.                
            </comment>
            <comment line="172">
                location of the NSS library files (libnss3.so, etc.)                
            </comment>
            <comment line="175">
                location of secmod.db                
            </comment>
            <comment line="178">
                which NSS module to use                
            </comment>
            <comment line="183">
                Whether the P11KeyStore should specify the CKA_NETSCAPE_DB attribute
                 when creating private keys. Only valid if nssUseSecmod is true.                
            </comment>
            <comment line="187">
                Special init argument string for the NSS softtoken.
                 This is used when using the NSS softtoken directly without secmod mode.                
            </comment>
            <comment line="191">
                whether to use NSS trust attributes for the KeyStore of this provider
                 this option is for internal use by the SunPKCS11 code only and
                 works only for NSS providers created via the Secmod API                
            </comment>
            <comment line="481">
                Parsing helper methods                
            </comment>
            <comment line="630">
                individual entry parsing methods                
            </comment>
            <method name="ConfigurationException" type="constructor" line="981">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
        </class>
    </source>