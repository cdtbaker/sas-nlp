<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11.wrapper">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="PKCS11" line="59">
            <comment line="115">
                XXX                
            </comment>
            <comment line="197">
                Implementation of PKCS11 methods delegated to native pkcs11wrapper library                
            </comment>
            <comment line="199">
                General-purpose                
            </comment>
            <comment line="243">
                Slot and token management                
            </comment>
            <comment line="329">
                C_InitToken initializes a token.
                 (Slot and token management)
                
                 @param slotID ID of the token&apos;s slot
                         (PKCS#11 param: CK_SLOT_ID slotID)
                 @param pPin the SO&apos;s initial PIN and the length in bytes of the PIN
                         (PKCS#11 param: CK_CHAR_PTR pPin, CK_ULONG ulPinLen)
                 @param pLabel 32-byte token label (blank padded)
                         (PKCS#11 param: CK_UTF8CHAR_PTR pLabel)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="343">
                public native void C_InitToken(long slotID, char[] pPin, char[] pLabel) throws PKCS11Exception;                
            </comment>
            <comment line="346">
                C_InitPIN initializes the normal user&apos;s PIN.
                 (Slot and token management)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param pPin the normal user&apos;s PIN and the length in bytes of the PIN
                         (PKCS#11 param: CK_CHAR_PTR pPin, CK_ULONG ulPinLen)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="358">
                public native void C_InitPIN(long hSession, char[] pPin) throws PKCS11Exception;                
            </comment>
            <comment line="361">
                C_SetPIN modifies the PIN of the user who is logged in.
                 (Slot and token management)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param pOldPin the old PIN and the length of the old PIN
                         (PKCS#11 param: CK_CHAR_PTR pOldPin, CK_ULONG ulOldLen)
                 @param pNewPin the new PIN and the length of the new PIN
                         (PKCS#11 param: CK_CHAR_PTR pNewPin, CK_ULONG ulNewLen)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="375">
                public native void C_SetPIN(long hSession, char[] pOldPin, char[] pNewPin) throws PKCS11Exception;                
            </comment>
            <comment line="379">
                Session management                
            </comment>
            <comment line="419">
                C_CloseAllSessions closes all sessions with a token.
                 (Session management)
                
                 @param slotID the ID of the token&apos;s slot
                         (PKCS#11 param: CK_SLOT_ID slotID)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="429">
                public native void C_CloseAllSessions(long slotID) throws PKCS11Exception;                
            </comment>
            <comment line="447">
                C_GetOperationState obtains the state of the cryptographic operation
                 in a session.
                 (Session management)
                
                 @param hSession session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @return the state and the state length
                         (PKCS#11 param: CK_BYTE_PTR pOperationState,
                                         CK_ULONG_PTR pulOperationStateLen)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions (result &lt;&gt; null)                
            </comment>
            <comment line="461">
                public native byte[] C_GetOperationState(long hSession) throws PKCS11Exception;                
            </comment>
            <comment line="464">
                C_SetOperationState restores the state of the cryptographic
                 operation in a session.
                 (Session management)
                
                 @param hSession session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param pOperationState the state and the state length
                         (PKCS#11 param: CK_BYTE_PTR pOperationState,
                                         CK_ULONG ulOperationStateLen)
                 @param hEncryptionKey endecryption key
                         (PKCS#11 param: CK_OBJECT_HANDLE hEncryptionKey)
                 @param hAuthenticationKey signverify key
                         (PKCS#11 param: CK_OBJECT_HANDLE hAuthenticationKey)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="482">
                public native void C_SetOperationState(long hSession, byte[] pOperationState, long hEncryptionKey, long hAuthenticationKey) throws PKCS11Exception;                
            </comment>
            <comment line="516">
                Object management                
            </comment>
            <comment line="574">
                C_GetObjectSize gets the size of an object in bytes.
                 (Object management)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param hObject the object&apos;s handle
                         (PKCS#11 param: CK_OBJECT_HANDLE hObject)
                 @return the size of the object
                         (PKCS#11 param: CK_ULONG_PTR pulSize)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="588">
                public native long C_GetObjectSize(long hSession, long hObject) throws PKCS11Exception;                
            </comment>
            <comment line="681">
                Encryption and decryption                
            </comment>
            <comment line="830">
                Message digesting                
            </comment>
            <comment line="849">
                note that C_DigestSingle does not exist in PKCS#11
                 we combined the C_DigestInit and C_Digest into a single function
                 to save on Java&lt;-&gt;C transitions and save 5-10% on small digests
                 this made the C_Digest method redundant, it has been removed                
            </comment>
            <comment line="920">
                Signing and MACing                
            </comment>
            <comment line="1036">
                Verifying signatures and MACs                
            </comment>
            <comment line="1148">
                Dual-function cryptographic operations                
            </comment>
            <comment line="1152">
                C_DigestEncryptUpdate continues a multiple-part digesting
                 and encryption operation.
                 (Dual-function cryptographic operations)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param pPart the data part to digest and to encrypt and the data&apos;s length
                         (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)
                 @return the digested and encrypted data part and the data part&apos;s length
                         (PKCS#11 param: CK_BYTE_PTR pEncryptedPart,
                                         CK_ULONG_PTR pulEncryptedPartLen)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions (pPart &lt;&gt; null)
                 @postconditions                
            </comment>
            <comment line="1168">
                public native byte[] C_DigestEncryptUpdate(long hSession, byte[] pPart) throws PKCS11Exception;                
            </comment>
            <comment line="1171">
                C_DecryptDigestUpdate continues a multiple-part decryption and
                 digesting operation.
                 (Dual-function cryptographic operations)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param pEncryptedPart the encrypted data part to decrypt and to digest
                         and encrypted data part&apos;s length
                         (PKCS#11 param: CK_BYTE_PTR pEncryptedPart,
                                         CK_ULONG ulEncryptedPartLen)
                 @return the decrypted and digested data part and the data part&apos;s length
                         (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG_PTR pulPartLen)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions (pEncryptedPart &lt;&gt; null)
                 @postconditions                
            </comment>
            <comment line="1188">
                public native byte[] C_DecryptDigestUpdate(long hSession, byte[] pEncryptedPart) throws PKCS11Exception;                
            </comment>
            <comment line="1191">
                C_SignEncryptUpdate continues a multiple-part signing and
                 encryption operation.
                 (Dual-function cryptographic operations)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param pPart the data part to sign and to encrypt and the data part&apos;s
                         length
                         (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)
                 @return the signed and encrypted data part and the data part&apos;s length
                         (PKCS#11 param: CK_BYTE_PTR pEncryptedPart,
                                         CK_ULONG_PTR pulEncryptedPartLen)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions (pPart &lt;&gt; null)
                 @postconditions                
            </comment>
            <comment line="1208">
                public native byte[] C_SignEncryptUpdate(long hSession, byte[] pPart) throws PKCS11Exception;                
            </comment>
            <comment line="1211">
                C_DecryptVerifyUpdate continues a multiple-part decryption and
                 verify operation.
                 (Dual-function cryptographic operations)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @param pEncryptedPart the encrypted data part to decrypt and to verify
                         and the data part&apos;s length
                         (PKCS#11 param: CK_BYTE_PTR pEncryptedPart,
                                         CK_ULONG ulEncryptedPartLen)
                 @return the decrypted and verified data part and the data part&apos;s length
                         (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG_PTR pulPartLen)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions (pEncryptedPart &lt;&gt; null)
                 @postconditions                
            </comment>
            <comment line="1228">
                public native byte[] C_DecryptVerifyUpdate(long hSession, byte[] pEncryptedPart) throws PKCS11Exception;                
            </comment>
            <comment line="1232">
                Key management                
            </comment>
            <comment line="1364">
                Random number generation                
            </comment>
            <comment line="1401">
                Parallel function management                
            </comment>
            <comment line="1405">
                C_GetFunctionStatus is a legacy function; it obtains an
                 updated status of a function running in parallel with an
                 application.
                 (Parallel function management)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="1417">
                public native void C_GetFunctionStatus(long hSession) throws PKCS11Exception;                
            </comment>
            <comment line="1420">
                C_CancelFunction is a legacy function; it cancels a function
                 running in parallel.
                 (Parallel function management)
                
                 @param hSession the session&apos;s handle
                         (PKCS#11 param: CK_SESSION_HANDLE hSession)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions
                 @postconditions                
            </comment>
            <comment line="1431">
                public native void C_CancelFunction(long hSession) throws PKCS11Exception;                
            </comment>
            <comment line="1435">
                Functions added in for Cryptoki Version 2.01 or later                
            </comment>
            <comment line="1439">
                C_WaitForSlotEvent waits for a slot event (token insertion,
                 removal, etc.) to occur.
                 (General-purpose)
                
                 @param flags blockingnonblocking flag
                         (PKCS#11 param: CK_FLAGS flags)
                 @param pReserved reserved. Should be null
                         (PKCS#11 param: CK_VOID_PTR pReserved)
                 @return the slot ID where the event occured
                         (PKCS#11 param: CK_SLOT_ID_PTR pSlot)
                 @exception PKCS11Exception If function returns other value than CKR_OK.
                 @preconditions (pRserved == null)
                 @postconditions                
            </comment>
            <comment line="1454">
                public native long C_WaitForSlotEvent(long flags, Object pRserved) throws PKCS11Exception;                
            </comment>
            <comment line="1476">
                PKCS11 subclass that has all methods synchronized and delegating to the
                 parent. Used for tokens that only support single threaded access                
            </comment>
            <javadoc line="59">
                This is the default implementation of the PKCS11 interface. IT connects to
                  the pkcs11wrapper.dll file, which is the native part of this library.
                  The strange and awkward looking initialization was chosen to avoid calling
                  loadLibrary from a static initialization block, because this would complicate
                  the use in applets.                
                <author>
                    Karl Scheibelhofer <Karl.Scheibelhofer@iaik.at>                    
                </author>
                <author>
                    Martin Schlaeffer <schlaeff@sbox.tugraz.at>                    
                </author>
                <invariants>
                    (pkcs11ModulePath_ <> null)                    
                </invariants>
            </javadoc>
            <declaration name="PKCS11_WRAPPER" type="String" line="72"/>
            <javadoc line="72">
                The name of the native part of the wrapper; i.e. the filename without
                  the extension (e.g. &quot;.DLL&quot; or &quot;.so&quot;).                
            </javadoc>
            <scope line="78">
                <anonymous_class line="82">
                    <method name="run" type="Object" line="83"/>
                </anonymous_class>
            </scope>
            <method name="loadNative" type="void" line="91">
                <comment line="93">
                    dummy method that can be called to make sure the native
                     portion has been loaded. actual loading happens in the
                     static initializer, hence this method is empty.                    
                </comment>
            </method>
            <declaration name="pkcs11ModulePath" type="String" line="97"/>
            <javadoc line="97">
                The PKCS#11 module to connect to. This is the PKCS#11 driver of the token;
                  e.g. pk2priv.dll.                
            </javadoc>
            <declaration name="pNativeData" type="long" line="103"/>
            <method name="initializeLibrary" type="void" line="105"/>
            <javadoc line="105">
                This method does the initialization of the native library. It is called
                  exactly once for this class.                
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="finalizeLibrary" type="void" line="115"/>
            <javadoc line="115">
                This method does the finalization of the native library. It is called
                  exactly once for this class. The library uses this method for a clean-up
                  of any resources.                
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <declaration name="moduleMap" type="Map&lt;String,PKCS11&gt;" line="125"/>
            <javadoc line="128">
                Connects to the PKCS#11 driver given. The filename must contain the
                  path, if the driver is not in the system&apos;s search path.                
                <param>
                    pkcs11ModulePath the PKCS#11 library path                    
                </param>
                <preconditions>
                    (pkcs11ModulePath <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="PKCS11" type="constructor" line="136">
                <params>
                    <param name="pkcs11ModulePath" type="String"/>
                    <param name="functionListName" type="String"/>
                </params>
            </method>
            <method name="getInstance" type="PKCS11" line="143">
                <params>
                    <param name="pkcs11ModulePath" type="String"/>
                    <param name="functionList" type="String"/>
                    <param name="pInitArgs" type="CK_C_INITIALIZE_ARGS"/>
                    <param name="omitInitialize" type="boolean"/>
                </params>
                <comment line="145">
                    we may only call C_Initialize once per native .so/.dll
                     so keep a cache using the (non-canonicalized!) path                    
                </comment>
                <comment line="159">
                    ignore already-initialized error code
                     rethrow all other errors                    
                </comment>
                <declaration name="pkcs11" type="PKCS11" line="146"/>
                <scope line="147">
                    <scope line="149"/>
                    <scope line="151"/>
                    <scope line="154">
                        <scope line="155"/>
                        <scope line="157">
                            <scope line="160"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="connect" type="void" line="170"/>
            <javadoc line="170">
                Connects this object to the specified PKCS#11 library. This method is for
                  internal use only.
                  Declared private, because incorrect handling may result in errors in the
                  native part.                
                <param>
                    pkcs11ModulePath The PKCS#11 library path.                    
                </param>
                <preconditions>
                    (pkcs11ModulePath <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="disconnect" type="void" line="182"/>
            <javadoc line="182">
                Disconnects the PKCS#11 library from this object. After calling this
                  method, this object is no longer connected to a native PKCS#11 module
                  and any subsequent calls to C_ methods will fail. This method is for
                  internal use only.
                  Declared private, because incorrect handling may result in errors in the
                  native part.                
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_Initialize" type="void" line="202"/>
            <javadoc line="202">
                C_Initialize initializes the Cryptoki library.
                  (General-purpose)                
                <param>
                    pInitArgs if pInitArgs is not NULL it gets casted to
                      CK_C_INITIALIZE_ARGS_PTR and dereferenced
                      (PKCS#11 param: CK_VOID_PTR pInitArgs)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_Finalize" type="void" line="215"/>
            <javadoc line="215">
                C_Finalize indicates that an application is done with the
                  Cryptoki library
                  (General-purpose)                
                <param>
                    pReserved is reserved. Should be NULL_PTR
                      (PKCS#11 param: CK_VOID_PTR pReserved)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pReserved == null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_GetInfo" type="CK_INFO" line="229"/>
            <javadoc line="229">
                C_GetInfo returns general information about Cryptoki.
                  (General-purpose)                
                <return>
                    the information.
                      (PKCS#11 param: CK_INFO_PTR pInfo)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_GetSlotList" type="long[]" line="246"/>
            <javadoc line="246">
                C_GetSlotList obtains a list of slots in the system.
                  (Slot and token management)                
                <param>
                    tokenPresent if true only Slot IDs with a token are returned
                      (PKCS#11 param: CK_BBOOL tokenPresent)                    
                </param>
                <return>
                    a long array of slot IDs and number of Slot IDs
                      (PKCS#11 param: CK_SLOT_ID_PTR pSlotList, CK_ULONG_PTR pulCount)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_GetSlotInfo" type="CK_SLOT_INFO" line="261"/>
            <javadoc line="261">
                C_GetSlotInfo obtains information about a particular slot in
                  the system.
                  (Slot and token management)                
                <param>
                    slotID the ID of the slot
                      (PKCS#11 param: CK_SLOT_ID slotID)                    
                </param>
                <return>
                    the slot information
                      (PKCS#11 param: CK_SLOT_INFO_PTR pInfo)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_GetTokenInfo" type="CK_TOKEN_INFO" line="277"/>
            <javadoc line="277">
                C_GetTokenInfo obtains information about a particular token
                  in the system.
                  (Slot and token management)                
                <param>
                    slotID ID of the token's slot
                      (PKCS#11 param: CK_SLOT_ID slotID)                    
                </param>
                <return>
                    the token information
                      (PKCS#11 param: CK_TOKEN_INFO_PTR pInfo)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_GetMechanismList" type="long[]" line="293"/>
            <javadoc line="293">
                C_GetMechanismList obtains a list of mechanism types
                  supported by a token.
                  (Slot and token management)                
                <param>
                    slotID ID of the token's slot
                      (PKCS#11 param: CK_SLOT_ID slotID)                    
                </param>
                <return>
                    a long array of mechanism types and number of mechanism types
                      (PKCS#11 param: CK_MECHANISM_TYPE_PTR pMechanismList,
                      CK_ULONG_PTR pulCount)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_GetMechanismInfo" type="CK_MECHANISM_INFO" line="310"/>
            <javadoc line="310">
                C_GetMechanismInfo obtains information about a particular
                  mechanism possibly supported by a token.
                  (Slot and token management)                
                <param>
                    slotID ID of the token's slot
                      (PKCS#11 param: CK_SLOT_ID slotID)                    
                </param>
                <param>
                    type type of mechanism
                      (PKCS#11 param: CK_MECHANISM_TYPE type)                    
                </param>
                <return>
                    the mechanism info
                      (PKCS#11 param: CK_MECHANISM_INFO_PTR pInfo)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_OpenSession" type="long" line="382"/>
            <javadoc line="382">
                C_OpenSession opens a session between an application and a
                  token.
                  (Session management)                
                <param>
                    slotID the slot's ID
                      (PKCS#11 param: CK_SLOT_ID slotID)                    
                </param>
                <param>
                    flags of CK_SESSION_INFO
                      (PKCS#11 param: CK_FLAGS flags)                    
                </param>
                <param>
                    pApplication passed to callback
                      (PKCS#11 param: CK_VOID_PTR pApplication)                    
                </param>
                <param>
                    Notify the callback function
                      (PKCS#11 param: CK_NOTIFY Notify)                    
                </param>
                <return>
                    the session handle
                      (PKCS#11 param: CK_SESSION_HANDLE_PTR phSession)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_CloseSession" type="void" line="404"/>
            <javadoc line="404">
                C_CloseSession closes a session between an application and a
                  token.
                  (Session management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_GetSessionInfo" type="CK_SESSION_INFO" line="431"/>
            <javadoc line="431">
                C_GetSessionInfo obtains information about the session.
                  (Session management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <return>
                    the session info
                      (PKCS#11 param: CK_SESSION_INFO_PTR pInfo)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_Login" type="void" line="484"/>
            <javadoc line="484">
                C_Login logs a user into a token.
                  (Session management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    userType the user type
                      (PKCS#11 param: CK_USER_TYPE userType)                    
                </param>
                <param>
                    pPin the user's PIN and the length of the PIN
                      (PKCS#11 param: CK_CHAR_PTR pPin, CK_ULONG ulPinLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_Logout" type="void" line="501"/>
            <javadoc line="501">
                C_Logout logs a user out from a token.
                  (Session management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_CreateObject" type="long" line="519"/>
            <javadoc line="519">
                C_CreateObject creates a new object.
                  (Object management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pTemplate the object's template and number of attributes in
                      template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <return>
                    the object's handle
                      (PKCS#11 param: CK_OBJECT_HANDLE_PTR phObject)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_CopyObject" type="long" line="537"/>
            <javadoc line="537">
                C_CopyObject copies an object, creating a new object for the
                  copy.
                  (Object management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    hObject the object's handle
                      (PKCS#11 param: CK_OBJECT_HANDLE hObject)                    
                </param>
                <param>
                    pTemplate the template for the new object and number of attributes
                      in template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <return>
                    the handle of the copy
                      (PKCS#11 param: CK_OBJECT_HANDLE_PTR phNewObject)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_DestroyObject" type="void" line="558"/>
            <javadoc line="558">
                C_DestroyObject destroys an object.
                  (Object management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    hObject the object's handle
                      (PKCS#11 param: CK_OBJECT_HANDLE hObject)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_GetAttributeValue" type="void" line="590"/>
            <javadoc line="590">
                C_GetAttributeValue obtains the value of one or more object
                  attributes. The template attributes also receive the values.
                  (Object management)
                  note: in PKCS#11 pTemplate and the result template are the same                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    hObject the object's handle
                      (PKCS#11 param: CK_OBJECT_HANDLE hObject)                    
                </param>
                <param>
                    pTemplate specifies the attributes and number of attributes to get
                      The template attributes also receive the values.
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pTemplate <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_SetAttributeValue" type="void" line="610"/>
            <javadoc line="610">
                C_SetAttributeValue modifies the value of one or more object
                  attributes
                  (Object management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    hObject the object's handle
                      (PKCS#11 param: CK_OBJECT_HANDLE hObject)                    
                </param>
                <param>
                    pTemplate specifies the attributes and values to get; number of
                      attributes in the template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pTemplate <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_FindObjectsInit" type="void" line="629"/>
            <javadoc line="629">
                C_FindObjectsInit initializes a search for token and session
                  objects that match a template.
                  (Object management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pTemplate the object's attribute values to match and the number of
                      attributes in search template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_FindObjects" type="long[]" line="646"/>
            <javadoc line="646">
                C_FindObjects continues a search for token and session
                  objects that match a template, obtaining additional object
                  handles.
                  (Object management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    ulMaxObjectCount the max. object handles to get
                      (PKCS#11 param: CK_ULONG ulMaxObjectCount)                    
                </param>
                <return>
                    the object's handles and the actual number of objects returned
                      (PKCS#11 param: CK_ULONG_PTR pulObjectCount)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_FindObjectsFinal" type="void" line="665"/>
            <javadoc line="665">
                C_FindObjectsFinal finishes a search for token and session
                  objects.
                  (Object management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_EncryptInit" type="void" line="684"/>
            <javadoc line="684">
                C_EncryptInit initializes an encryption operation.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the encryption mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hKey the handle of the encryption key
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_Encrypt" type="int" line="701"/>
            <javadoc line="701">
                C_Encrypt encrypts single-part data.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pData the data to get encrypted and the data's length
                      (PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)                    
                </param>
                <return>
                    the encrypted data and the encrypted data's length
                      (PKCS#11 param: CK_BYTE_PTR pEncryptedData,
                      CK_ULONG_PTR pulEncryptedDataLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pData <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_EncryptUpdate" type="int" line="719"/>
            <javadoc line="719">
                C_EncryptUpdate continues a multiple-part encryption
                  operation.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pPart the data part to get encrypted and the data part's length
                      (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)                    
                </param>
                <return>
                    the encrypted data part and the encrypted data part's length
                      (PKCS#11 param: CK_BYTE_PTR pEncryptedPart,
                      CK_ULONG_PTR pulEncryptedPartLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pPart <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_EncryptFinal" type="int" line="738"/>
            <javadoc line="738">
                C_EncryptFinal finishes a multiple-part encryption
                  operation.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <return>
                    the last encrypted data part and the last data part's length
                      (PKCS#11 param: CK_BYTE_PTR pLastEncryptedPart,
                      CK_ULONG_PTR pulLastEncryptedPartLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_DecryptInit" type="void" line="755"/>
            <javadoc line="755">
                C_DecryptInit initializes a decryption operation.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the decryption mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hKey the handle of the decryption key
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_Decrypt" type="int" line="772"/>
            <javadoc line="772">
                C_Decrypt decrypts encrypted data in a single part.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pEncryptedData the encrypted data to get decrypted and the
                      encrypted data's length
                      (PKCS#11 param: CK_BYTE_PTR pEncryptedData,
                      CK_ULONG ulEncryptedDataLen)                    
                </param>
                <return>
                    the decrypted data and the data's length
                      (PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG_PTR pulDataLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pEncryptedPart <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_DecryptUpdate" type="int" line="791"/>
            <javadoc line="791">
                C_DecryptUpdate continues a multiple-part decryption
                  operation.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pEncryptedPart the encrypted data part to get decrypted and the
                      encrypted data part's length
                      (PKCS#11 param: CK_BYTE_PTR pEncryptedPart,
                      CK_ULONG ulEncryptedPartLen)                    
                </param>
                <return>
                    the decrypted data part and the data part's length
                      (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG_PTR pulPartLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pEncryptedPart <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_DecryptFinal" type="int" line="811"/>
            <javadoc line="811">
                C_DecryptFinal finishes a multiple-part decryption
                  operation.
                  (Encryption and decryption)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <return>
                    the last decrypted data part and the last data part's length
                      (PKCS#11 param: CK_BYTE_PTR pLastPart,
                      CK_ULONG_PTR pulLastPartLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_DigestInit" type="void" line="833"/>
            <javadoc line="833">
                C_DigestInit initializes a message-digesting operation.
                  (Message digesting)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the digesting mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_DigestSingle" type="int" line="852"/>
            <javadoc line="852">
                C_Digest digests data in a single part.
                  (Message digesting)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    data the data to get digested and the data's length
                      (PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)                    
                </param>
                <return>
                    the message digest and the length of the message digest
                      (PKCS#11 param: CK_BYTE_PTR pDigest, CK_ULONG_PTR pulDigestLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (data <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_DigestUpdate" type="void" line="869"/>
            <javadoc line="869">
                C_DigestUpdate continues a multiple-part message-digesting
                  operation.
                  (Message digesting)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pPart the data to get digested and the data's length
                      (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pPart <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_DigestKey" type="void" line="885"/>
            <javadoc line="885">
                C_DigestKey continues a multi-part message-digesting
                  operation, by digesting the value of a secret key as part of
                  the data already digested.
                  (Message digesting)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    hKey the handle of the secret key to be digested
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_DigestFinal" type="int" line="902"/>
            <javadoc line="902">
                C_DigestFinal finishes a multiple-part message-digesting
                  operation.
                  (Message digesting)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <return>
                    the message digest and the length of the message digest
                      (PKCS#11 param: CK_BYTE_PTR pDigest, CK_ULONG_PTR pulDigestLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_SignInit" type="void" line="923"/>
            <javadoc line="923">
                C_SignInit initializes a signature (private key encryption)
                  operation, where the signature is (will be) an appendix to
                  the data, and plaintext cannot be recovered from the
                  signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the signature mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hKey the handle of the signature key
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_Sign" type="byte[]" line="943"/>
            <javadoc line="943">
                C_Sign signs (encrypts with private key) data in a single
                  part, where the signature is (will be) an appendix to the
                  data, and plaintext cannot be recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pData the data to sign and the data's length
                      (PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)                    
                </param>
                <return>
                    the signature and the signature's length
                      (PKCS#11 param: CK_BYTE_PTR pSignature,
                      CK_ULONG_PTR pulSignatureLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pData <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_SignUpdate" type="void" line="963"/>
            <javadoc line="963">
                C_SignUpdate continues a multiple-part signature operation,
                  where the signature is (will be) an appendix to the data,
                  and plaintext cannot be recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pPart the data part to sign and the data part's length
                      (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pPart <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_SignFinal" type="byte[]" line="980"/>
            <javadoc line="980">
                C_SignFinal finishes a multiple-part signature operation,
                  returning the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <return>
                    the signature and the signature's length
                      (PKCS#11 param: CK_BYTE_PTR pSignature,
                      CK_ULONG_PTR pulSignatureLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_SignRecoverInit" type="void" line="997"/>
            <javadoc line="997">
                C_SignRecoverInit initializes a signature operation, where
                  the data can be recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the signature mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hKey the handle of the signature key
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_SignRecover" type="int" line="1015"/>
            <javadoc line="1015">
                C_SignRecover signs data in a single operation, where the
                  data can be recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pData the data to sign and the data's length
                      (PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)                    
                </param>
                <return>
                    the signature and the signature's length
                      (PKCS#11 param: CK_BYTE_PTR pSignature,
                      CK_ULONG_PTR pulSignatureLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pData <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_VerifyInit" type="void" line="1039"/>
            <javadoc line="1039">
                C_VerifyInit initializes a verification operation, where the
                  signature is an appendix to the data, and plaintext cannot
                  cannot be recovered from the signature (e.g. DSA).
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the verification mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hKey the handle of the verification key
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_Verify" type="void" line="1058"/>
            <javadoc line="1058">
                C_Verify verifies a signature in a single-part operation,
                  where the signature is an appendix to the data, and plaintext
                  cannot be recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pData the signed data and the signed data's length
                      (PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)                    
                </param>
                <param>
                    pSignature the signature to verify and the signature's length
                      (PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pData <> null) and (pSignature <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_VerifyUpdate" type="void" line="1077"/>
            <javadoc line="1077">
                C_VerifyUpdate continues a multiple-part verification
                  operation, where the signature is an appendix to the data,
                  and plaintext cannot be recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pPart the signed data part and the signed data part's length
                      (PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pPart <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_VerifyFinal" type="void" line="1094"/>
            <javadoc line="1094">
                C_VerifyFinal finishes a multiple-part verification
                  operation, checking the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pSignature the signature to verify and the signature's length
                      (PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pSignature <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_VerifyRecoverInit" type="void" line="1110"/>
            <javadoc line="1110">
                C_VerifyRecoverInit initializes a signature verification
                  operation, where the data is recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the verification mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hKey the handle of the verification key
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_VerifyRecover" type="int" line="1128"/>
            <javadoc line="1128">
                C_VerifyRecover verifies a signature in a single-part
                  operation, where the data is recovered from the signature.
                  (Signing and MACing)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pSignature the signature to verify and the signature's length
                      (PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen)                    
                </param>
                <return>
                    the recovered data and the recovered data's length
                      (PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG_PTR pulDataLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pSignature <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_GenerateKey" type="long" line="1235"/>
            <javadoc line="1235">
                C_GenerateKey generates a secret key, creating a new key
                  object.
                  (Key management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the key generation mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    pTemplate the template for the new key and the number of
                      attributes in the template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <return>
                    the handle of the new key
                      (PKCS#11 param: CK_OBJECT_HANDLE_PTR phKey)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_GenerateKeyPair" type="long[]" line="1256"/>
            <javadoc line="1256">
                C_GenerateKeyPair generates a public-key/private-key pair,
                  creating new key objects.
                  (Key management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the key generation mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    pPublicKeyTemplate the template for the new public key and the
                      number of attributes in the template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pPublicKeyTemplate,
                      CK_ULONG ulPublicKeyAttributeCount)                    
                </param>
                <param>
                    pPrivateKeyTemplate the template for the new private key and the
                      number of attributes in the template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pPrivateKeyTemplate
                      CK_ULONG ulPrivateKeyAttributeCount)                    
                </param>
                <return>
                    a long array with exactly two elements and the public key handle
                      as the first element and the private key handle as the second
                      element
                      (PKCS#11 param: CK_OBJECT_HANDLE_PTR phPublicKey,
                      CK_OBJECT_HANDLE_PTR phPrivateKey)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pMechanism <> null)                    
                </preconditions>
                <postconditions>
                    (result <> null) and (result.length == 2)                    
                </postconditions>
            </javadoc>
            <method name="C_WrapKey" type="byte[]" line="1289"/>
            <javadoc line="1289">
                C_WrapKey wraps (i.e., encrypts) a key.
                  (Key management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the wrapping mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hWrappingKey the handle of the wrapping key
                      (PKCS#11 param: CK_OBJECT_HANDLE hWrappingKey)                    
                </param>
                <param>
                    hKey the handle of the key to be wrapped
                      (PKCS#11 param: CK_OBJECT_HANDLE hKey)                    
                </param>
                <return>
                    the wrapped key and the length of the wrapped key
                      (PKCS#11 param: CK_BYTE_PTR pWrappedKey,
                      CK_ULONG_PTR pulWrappedKeyLen)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                    (result <> null)                    
                </postconditions>
            </javadoc>
            <method name="C_UnwrapKey" type="long" line="1311"/>
            <javadoc line="1311">
                C_UnwrapKey unwraps (decrypts) a wrapped key, creating a new
                  key object.
                  (Key management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the unwrapping mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hUnwrappingKey the handle of the unwrapping key
                      (PKCS#11 param: CK_OBJECT_HANDLE hUnwrappingKey)                    
                </param>
                <param>
                    pWrappedKey the wrapped key to unwrap and the wrapped key's length
                      (PKCS#11 param: CK_BYTE_PTR pWrappedKey, CK_ULONG ulWrappedKeyLen)                    
                </param>
                <param>
                    pTemplate the template for the new key and the number of
                      attributes in the template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <return>
                    the handle of the unwrapped key
                      (PKCS#11 param: CK_OBJECT_HANDLE_PTR phKey)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pWrappedKey <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_DeriveKey" type="long" line="1338"/>
            <javadoc line="1338">
                C_DeriveKey derives a key from a base key, creating a new key
                  object.
                  (Key management)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pMechanism the key derivation mechanism
                      (PKCS#11 param: CK_MECHANISM_PTR pMechanism)                    
                </param>
                <param>
                    hBaseKey the handle of the base key
                      (PKCS#11 param: CK_OBJECT_HANDLE hBaseKey)                    
                </param>
                <param>
                    pTemplate the template for the new key and the number of
                      attributes in the template
                      (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)                    
                </param>
                <return>
                    the handle of the derived key
                      (PKCS#11 param: CK_OBJECT_HANDLE_PTR phKey)                    
                </return>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_SeedRandom" type="void" line="1367"/>
            <javadoc line="1367">
                C_SeedRandom mixes additional seed material into the token&apos;s
                  random number generator.
                  (Random number generation)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    pSeed the seed material and the seed material's length
                      (PKCS#11 param: CK_BYTE_PTR pSeed, CK_ULONG ulSeedLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (pSeed <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="C_GenerateRandom" type="void" line="1383"/>
            <javadoc line="1383">
                C_GenerateRandom generates random data.
                  (Random number generation)                
                <param>
                    hSession the session's handle
                      (PKCS#11 param: CK_SESSION_HANDLE hSession)                    
                </param>
                <param>
                    RandomData receives the random data and the length of RandomData
                      is the length of random data to be generated
                      (PKCS#11 param: CK_BYTE_PTR pRandomData, CK_ULONG ulRandomLen)                    
                </param>
                <exception>
                    PKCS11Exception If function returns other value than CKR_OK.                    
                </exception>
                <preconditions>
                    (randomData <> null)                    
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <javadoc line="1455">
                Returns the string representation of this object.                
                <return>
                    The string representation of object                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1460"/>
            <javadoc line="1464">
                Calls disconnect() to cleanup the native part of the wrapper. Once this
                  method is called, this object cannot be used any longer. Any subsequent
                  call to a C_ method will result in a runtime exception.                
                <exception>
                    Throwable If finalization fails.                    
                </exception>
            </javadoc>
            <method name="finalize" type="void" line="1471"/>
            <class name="SynchronizedPKCS11" line="1477">
                <extends class="PKCS11"/>
                <method name="SynchronizedPKCS11" type="constructor" line="1479">
                    <params>
                        <param name="pkcs11ModulePath" type="String"/>
                        <param name="functionListName" type="String"/>
                    </params>
                </method>
                <method name="C_Initialize" type="void" line="1483">
                    <params>
                        <param name="pInitArgs" type="Object"/>
                    </params>
                </method>
                <method name="C_Finalize" type="void" line="1487">
                    <params>
                        <param name="pReserved" type="Object"/>
                    </params>
                </method>
                <method name="C_GetInfo" type="CK_INFO" line="1491"/>
                <method name="C_GetSlotList" type="long[]" line="1495">
                    <params>
                        <param name="tokenPresent" type="boolean"/>
                    </params>
                </method>
                <method name="C_GetSlotInfo" type="CK_SLOT_INFO" line="1499">
                    <params>
                        <param name="slotID" type="long"/>
                    </params>
                </method>
                <method name="C_GetTokenInfo" type="CK_TOKEN_INFO" line="1503">
                    <params>
                        <param name="slotID" type="long"/>
                    </params>
                </method>
                <method name="C_GetMechanismList" type="long[]" line="1507">
                    <params>
                        <param name="slotID" type="long"/>
                    </params>
                </method>
                <method name="C_GetMechanismInfo" type="CK_MECHANISM_INFO" line="1511">
                    <params>
                        <param name="slotID" type="long"/>
                        <param name="type" type="long"/>
                    </params>
                </method>
                <method name="C_OpenSession" type="long" line="1515">
                    <params>
                        <param name="slotID" type="long"/>
                        <param name="flags" type="long"/>
                        <param name="pApplication" type="Object"/>
                        <param name="Notify" type="CK_NOTIFY"/>
                    </params>
                </method>
                <method name="C_CloseSession" type="void" line="1519">
                    <params>
                        <param name="hSession" type="long"/>
                    </params>
                </method>
                <method name="C_GetSessionInfo" type="CK_SESSION_INFO" line="1523">
                    <params>
                        <param name="hSession" type="long"/>
                    </params>
                </method>
                <method name="C_Login" type="void" line="1527">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="userType" type="long"/>
                        <param name="pPin" type="char[]"/>
                    </params>
                </method>
                <method name="C_Logout" type="void" line="1531">
                    <params>
                        <param name="hSession" type="long"/>
                    </params>
                </method>
                <method name="C_CreateObject" type="long" line="1535">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_CopyObject" type="long" line="1539">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="hObject" type="long"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_DestroyObject" type="void" line="1543">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="hObject" type="long"/>
                    </params>
                </method>
                <method name="C_GetAttributeValue" type="void" line="1547">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="hObject" type="long"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_SetAttributeValue" type="void" line="1551">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="hObject" type="long"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_FindObjectsInit" type="void" line="1555">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_FindObjects" type="long[]" line="1559">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="ulMaxObjectCount" type="long"/>
                    </params>
                </method>
                <method name="C_FindObjectsFinal" type="void" line="1563">
                    <params>
                        <param name="hSession" type="long"/>
                    </params>
                </method>
                <method name="C_EncryptInit" type="void" line="1567">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_Encrypt" type="int" line="1571">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOfs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_EncryptUpdate" type="int" line="1575">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="directIn" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="directOut" type="long"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOfs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_EncryptFinal" type="int" line="1579">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="directOut" type="long"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOfs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_DecryptInit" type="void" line="1583">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_Decrypt" type="int" line="1587">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOfs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_DecryptUpdate" type="int" line="1591">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="directIn" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="directOut" type="long"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOfs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_DecryptFinal" type="int" line="1595">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="directOut" type="long"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOfs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_DigestInit" type="void" line="1599">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                    </params>
                </method>
                <method name="C_DigestSingle" type="int" line="1603">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="digest" type="byte[]"/>
                        <param name="digestOfs" type="int"/>
                        <param name="digestLen" type="int"/>
                    </params>
                </method>
                <method name="C_DigestUpdate" type="void" line="1607">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="directIn" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="C_DigestKey" type="void" line="1611">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_DigestFinal" type="int" line="1615">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pDigest" type="byte[]"/>
                        <param name="digestOfs" type="int"/>
                        <param name="digestLen" type="int"/>
                    </params>
                </method>
                <method name="C_SignInit" type="void" line="1619">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_Sign" type="byte[]" line="1623">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pData" type="byte[]"/>
                    </params>
                </method>
                <method name="C_SignUpdate" type="void" line="1627">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="directIn" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="C_SignFinal" type="byte[]" line="1631">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="expectedLen" type="int"/>
                    </params>
                </method>
                <method name="C_SignRecoverInit" type="void" line="1635">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_SignRecover" type="int" line="1639">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOufs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_VerifyInit" type="void" line="1643">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_Verify" type="void" line="1647">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pData" type="byte[]"/>
                        <param name="pSignature" type="byte[]"/>
                    </params>
                </method>
                <method name="C_VerifyUpdate" type="void" line="1651">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="directIn" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="C_VerifyFinal" type="void" line="1655">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pSignature" type="byte[]"/>
                    </params>
                </method>
                <method name="C_VerifyRecoverInit" type="void" line="1659">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_VerifyRecover" type="int" line="1663">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="in" type="byte[]"/>
                        <param name="inOfs" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOufs" type="int"/>
                        <param name="outLen" type="int"/>
                    </params>
                </method>
                <method name="C_GenerateKey" type="long" line="1667">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_GenerateKeyPair" type="long[]" line="1674">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="pPublicKeyTemplate" type="CK_ATTRIBUTE[]"/>
                        <param name="pPrivateKeyTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_WrapKey" type="byte[]" line="1678">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hWrappingKey" type="long"/>
                        <param name="hKey" type="long"/>
                    </params>
                </method>
                <method name="C_UnwrapKey" type="long" line="1684">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hUnwrappingKey" type="long"/>
                        <param name="pWrappedKey" type="byte[]"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_DeriveKey" type="long" line="1689">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pMechanism" type="CK_MECHANISM"/>
                        <param name="hBaseKey" type="long"/>
                        <param name="pTemplate" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="C_SeedRandom" type="void" line="1693">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="pSeed" type="byte[]"/>
                    </params>
                </method>
                <method name="C_GenerateRandom" type="void" line="1697">
                    <params>
                        <param name="hSession" type="long"/>
                        <param name="randomData" type="byte[]"/>
                    </params>
                </method>
            </class>
        </class>
    </source>