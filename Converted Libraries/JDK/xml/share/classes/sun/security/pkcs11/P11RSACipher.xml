<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec"/>
        <import package="java.util.Locale"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.pkcs11.TemplateManager"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="P11RSACipher" line="11">
            <extends class="CipherSpi"/>
            <javadoc line="11">
                RSA Cipher implementation class. We currently only support
                  PKCS#1 v1.5 padding on top of CKM_RSA_PKCS.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="PKCS1_MIN_PADDING_LENGTH" type="int" line="18"/>
            <declaration name="B0" type="byte[]" line="19"/>
            <declaration name="MODE_ENCRYPT" type="int" line="20"/>
            <declaration name="MODE_DECRYPT" type="int" line="21"/>
            <declaration name="MODE_SIGN" type="int" line="22"/>
            <declaration name="MODE_VERIFY" type="int" line="23"/>
            <declaration name="PAD_NONE" type="int" line="24"/>
            <declaration name="PAD_PKCS1" type="int" line="25"/>
            <declaration name="token" type="Token" line="26"/>
            <declaration name="algorithm" type="String" line="27"/>
            <declaration name="mechanism" type="long" line="28"/>
            <declaration name="session" type="Session" line="29"/>
            <declaration name="mode" type="int" line="30"/>
            <declaration name="padType" type="int" line="31"/>
            <declaration name="buffer" type="byte[]" line="32"/>
            <declaration name="bufOfs" type="int" line="33"/>
            <declaration name="p11Key" type="P11Key" line="34"/>
            <declaration name="initialized" type="boolean" line="35"/>
            <declaration name="maxInputSize" type="int" line="36"/>
            <declaration name="outputSize" type="int" line="37"/>
            <method name="P11RSACipher" type="constructor" line="38">
                <params>
                    <param name="token" type="Token"/>
                    <param name="algorithm" type="String"/>
                    <param name="mechanism" type="long"/>
                </params>
            </method>
            <method name="engineSetMode" type="void" line="44">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="45"/>
            </method>
            <method name="engineSetPadding" type="void" line="49">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <declaration name="lowerPadding" type="String" line="50"/>
                <scope line="51"/>
                <scope line="54"/>
                <scope line="57"/>
            </method>
            <method name="engineGetBlockSize" type="int" line="61"/>
            <method name="engineGetOutputSize" type="int" line="64">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="67"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="70"/>
            <method name="engineInit" type="void" line="73">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="76">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="77"/>
            </method>
            <method name="engineInit" type="void" line="82">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="83"/>
            </method>
            <method name="implInit" type="void" line="88">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encrypt" type="boolean" line="91"/>
                <scope line="92"/>
                <scope line="95"/>
                <scope line="98">
                    <scope line="99"/>
                </scope>
                <scope line="104">
                    <scope line="105"/>
                </scope>
                <scope line="110"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
                <declaration name="n" type="int" line="122"/>
                <scope line="126"/>
                <scope line="129"/>
            </method>
            <method name="cancelOperation" type="void" line="133">
                <scope line="135"/>
                <scope line="139"/>
                <scope line="142"/>
                <scope line="146">
                    <declaration name="p11" type="PKCS11" line="147"/>
                    <declaration name="inLen" type="int" line="148"/>
                    <declaration name="outLen" type="int" line="149"/>
                    <declaration name="tmpBuffer" type="byte[]" line="158"/>
                </scope>
                <scope line="168"/>
            </method>
            <method name="ensureInitialized" type="void" line="171">
                <scope line="173"/>
            </method>
            <method name="initialize" type="void" line="177">
                <scope line="178"/>
                <declaration name="p11" type="PKCS11" line="181"/>
                <declaration name="ckMechanism" type="CK_MECHANISM" line="182"/>
            </method>
            <method name="implUpdate" type="void" line="202">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <scope line="203"/>
                <scope line="206"/>
                <scope line="209"/>
                <scope line="212"/>
            </method>
            <method name="implDoFinal" type="int" line="219">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                    <param name="outLen" type="int"/>
                </params>
                <scope line="220"/>
                <scope line="223">
                    <declaration name="p11" type="PKCS11" line="225"/>
                    <declaration name="n" type="int" line="226"/>
                    <declaration name="tmpBuffer" type="byte[]" line="235"/>
                    <scope line="238"/>
                </scope>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="260">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="int" line="264">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="byte[]" line="268">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <declaration name="n" type="int" line="270"/>
                <declaration name="out" type="byte[]" line="271"/>
            </method>
            <method name="engineDoFinal" type="int" line="275">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
            </method>
            <method name="doFinal" type="byte[]" line="279">
                <declaration name="t" type="byte[]" line="280"/>
                <declaration name="n" type="int" line="281"/>
                <declaration name="out" type="byte[]" line="282"/>
            </method>
            <method name="engineWrap" type="byte[]" line="286">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="keyAlg" type="String" line="287"/>
                <declaration name="sKey" type="P11Key" line="288"/>
                <scope line="289"/>
                <scope line="292">
                    <declaration name="toBeWrappedKey" type="byte[]" line="293"/>
                    <scope line="294"/>
                    <scope line="299"/>
                    <scope line="302"/>
                    <scope line="305"/>
                </scope>
                <declaration name="s" type="Session" line="309"/>
                <scope line="310"/>
                <scope line="314"/>
                <scope line="317"/>
            </method>
            <method name="engineUnwrap" type="Key" line="321">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="322">
                    <declaration name="s" type="Session" line="323"/>
                    <scope line="324">
                        <declaration name="keyType" type="long" line="326"/>
                        <declaration name="attributes" type="CK_ATTRIBUTE[]" line="327"/>
                        <declaration name="keyID" type="long" line="329"/>
                    </scope>
                    <scope line="332"/>
                    <scope line="335"/>
                </scope>
                <scope line="340"/>
                <scope line="344">
                    <declaration name="encoded" type="byte[]" line="345"/>
                </scope>
                <scope line="348"/>
                <scope line="351"/>
            </method>
            <method name="engineGetKeySize" type="int" line="355">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="n" type="int" line="356"/>
            </method>
        </class>
        <class name="ConstructKeys" line="360">
            <javadoc line="361">
                Construct a public key from its encoding.                
                <param>
                    encodedKey the encoding of a public key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the encodedKey is for.                    
                </param>
                <return>
                    a public key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPublicKey" type="PublicKey" line="367">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="368">
                    <declaration name="keyFactory" type="KeyFactory" line="369"/>
                    <declaration name="keySpec" type="X509EncodedKeySpec" line="370"/>
                </scope>
                <scope line="373"/>
                <scope line="376"/>
            </method>
            <javadoc line="380">
                Construct a private key from its encoding.                
                <param>
                    encodedKey the encoding of a private key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <return>
                    a private key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPrivateKey" type="PrivateKey" line="386">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="387">
                    <declaration name="keyFactory" type="KeyFactory" line="388"/>
                    <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="389"/>
                </scope>
                <scope line="392"/>
                <scope line="395"/>
            </method>
            <javadoc line="399">
                Construct a secret key from its encoding.                
                <param>
                    encodedKey the encoding of a secret key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the secret key is for.                    
                </param>
                <return>
                    a secret key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructSecretKey" type="SecretKey" line="405">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
            </method>
            <method name="constructKey" type="Key" line="408">
                <params>
                    <param name="encoding" type="byte[]"/>
                    <param name="keyAlgorithm" type="String"/>
                    <param name="keyType" type="int"/>
                </params>
            </method>
        </class>
    </source>