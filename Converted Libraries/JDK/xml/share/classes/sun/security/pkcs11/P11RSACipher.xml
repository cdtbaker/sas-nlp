<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec"/>
        <import package="java.util.Locale"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.pkcs11.TemplateManager"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="P11RSACipher" line="41">
            <extends class="CipherSpi"/>
            <comment line="51">
                minimum length of PKCS#1 v1.5 padding                
            </comment>
            <comment line="54">
                constant byte[] of length 0                
            </comment>
            <comment line="57">
                mode constant for public key encryption                
            </comment>
            <comment line="59">
                mode constant for private key decryption                
            </comment>
            <comment line="61">
                mode constant for private key encryption (signing)                
            </comment>
            <comment line="63">
                mode constant for public key decryption (verifying)                
            </comment>
            <comment line="66">
                padding type constant for NoPadding                
            </comment>
            <comment line="68">
                padding type constant for PKCS1Padding                
            </comment>
            <comment line="71">
                token instance                
            </comment>
            <comment line="74">
                algorithm name (always &quot;RSA&quot;)                
            </comment>
            <comment line="77">
                mechanism id                
            </comment>
            <comment line="80">
                associated session, if any                
            </comment>
            <comment line="83">
                mode, one of MODE_* above                
            </comment>
            <comment line="86">
                padding, one of PAD_* above                
            </comment>
            <comment line="92">
                key, if init() was called                
            </comment>
            <comment line="95">
                flag indicating whether an operation is initialized                
            </comment>
            <comment line="98">
                maximum input data size allowed                
            </comment>
            <comment line="99">
                for decryption, this is the length of the key                
            </comment>
            <comment line="100">
                for encryption, length of the key minus minimum padding length                
            </comment>
            <comment line="103">
                maximum output size. this is the length of the key                
            </comment>
            <comment line="114">
                modes do not make sense for RSA, but allow ECB                
            </comment>
            <comment line="115">
                see JCE spec                
            </comment>
            <comment line="134">
                return 0 as block size, we are not a block cipher                
            </comment>
            <comment line="135">
                see JCE spec                
            </comment>
            <comment line="140">
                return the output size                
            </comment>
            <comment line="141">
                see JCE spec                
            </comment>
            <comment line="146">
                no IV, return null                
            </comment>
            <comment line="147">
                see JCE spec                
            </comment>
            <comment line="152">
                no parameters, return null                
            </comment>
            <comment line="153">
                see JCE spec                
            </comment>
            <comment line="158">
                see JCE spec                
            </comment>
            <comment line="164">
                see JCE spec                
            </comment>
            <comment line="175">
                see JCE spec                
            </comment>
            <comment line="371">
                see JCE spec                
            </comment>
            <comment line="377">
                see JCE spec                
            </comment>
            <comment line="384">
                see JCE spec                
            </comment>
            <comment line="394">
                see JCE spec                
            </comment>
            <comment line="411">
                see JCE spec                
            </comment>
            <comment line="452">
                see JCE spec                
            </comment>
            <comment line="497">
                see JCE spec                
            </comment>
            <javadoc line="41">
                RSA Cipher implementation class. We currently only support
                  PKCS#1 v1.5 padding on top of CKM_RSA_PKCS.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="PKCS1_MIN_PADDING_LENGTH" type="int" line="51"/>
            <declaration name="B0" type="byte[]" line="54"/>
            <declaration name="MODE_ENCRYPT" type="int" line="57"/>
            <declaration name="MODE_DECRYPT" type="int" line="59"/>
            <declaration name="MODE_SIGN" type="int" line="61"/>
            <declaration name="MODE_VERIFY" type="int" line="63"/>
            <declaration name="PAD_NONE" type="int" line="66"/>
            <declaration name="PAD_PKCS1" type="int" line="68"/>
            <declaration name="token" type="Token" line="71"/>
            <declaration name="algorithm" type="String" line="74"/>
            <declaration name="mechanism" type="long" line="77"/>
            <declaration name="session" type="Session" line="80"/>
            <declaration name="mode" type="int" line="83"/>
            <declaration name="padType" type="int" line="86"/>
            <declaration name="buffer" type="byte[]" line="88"/>
            <declaration name="bufOfs" type="int" line="89"/>
            <declaration name="p11Key" type="P11Key" line="92"/>
            <declaration name="initialized" type="boolean" line="95"/>
            <declaration name="maxInputSize" type="int" line="100"/>
            <declaration name="outputSize" type="int" line="103"/>
            <method name="P11RSACipher" type="constructor" line="106">
                <params>
                    <param name="token" type="Token"/>
                    <param name="algorithm" type="String"/>
                    <param name="mechanism" type="long"/>
                </params>
            </method>
            <method name="engineSetMode" type="void" line="115">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="116"/>
            </method>
            <method name="engineSetPadding" type="void" line="122">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <declaration name="lowerPadding" type="String" line="123"/>
                <scope line="124"/>
                <scope line="126"/>
                <scope line="128"/>
            </method>
            <method name="engineGetBlockSize" type="int" line="135"/>
            <method name="engineGetOutputSize" type="int" line="141">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="147"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="153"/>
            <method name="engineInit" type="void" line="159">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="166">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="167"/>
            </method>
            <method name="engineInit" type="void" line="177">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="178"/>
            </method>
            <method name="implInit" type="void" line="185">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                </params>
                <comment line="198">
                    No further setup needed for C_Wrap(). We&apos;ll initialize later if                    
                </comment>
                <comment line="199">
                    we can&apos;t use C_Wrap().                    
                </comment>
                <comment line="206">
                    No further setup needed for C_Unwrap(). We&apos;ll initialize later                    
                </comment>
                <comment line="207">
                    if we can&apos;t use C_Unwrap().                    
                </comment>
                <declaration name="encrypt" type="boolean" line="188"/>
                <scope line="189"/>
                <scope line="191"/>
                <scope line="193">
                    <scope line="194"/>
                </scope>
                <scope line="201">
                    <scope line="202"/>
                </scope>
                <scope line="209"/>
                <scope line="212"/>
                <scope line="214"/>
                <scope line="216"/>
                <declaration name="n" type="int" line="219"/>
                <scope line="224"/>
                <scope line="226"/>
            </method>
            <method name="cancelOperation" type="void" line="231">
                <comment line="270">
                    XXX ensure this always works, ignore error                    
                </comment>
                <scope line="233"/>
                <scope line="237"/>
                <scope line="240"/>
                <scope line="244">
                    <declaration name="p11" type="PKCS11" line="245"/>
                    <declaration name="inLen" type="int" line="246"/>
                    <declaration name="outLen" type="int" line="247"/>
                    <declaration name="tmpBuffer" type="byte[]" line="258"/>
                </scope>
                <scope line="269"/>
            </method>
            <method name="ensureInitialized" type="void" line="274">
                <scope line="276"/>
            </method>
            <method name="initialize" type="void" line="281">
                <scope line="282"/>
                <declaration name="p11" type="PKCS11" line="285"/>
                <declaration name="ckMechanism" type="CK_MECHANISM" line="286"/>
            </method>
            <method name="implUpdate" type="void" line="307">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <scope line="308"/>
                <scope line="310"/>
                <scope line="313"/>
                <scope line="316"/>
            </method>
            <method name="implDoFinal" type="int" line="325">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                    <param name="outLen" type="int"/>
                </params>
                <scope line="326"/>
                <scope line="330">
                    <declaration name="p11" type="PKCS11" line="332"/>
                    <declaration name="n" type="int" line="333"/>
                    <declaration name="tmpBuffer" type="byte[]" line="344"/>
                    <scope line="347"/>
                </scope>
                <scope line="361"/>
                <scope line="364"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="371">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="int" line="378">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="byte[]" line="385">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <declaration name="n" type="int" line="387"/>
                <declaration name="out" type="byte[]" line="388"/>
            </method>
            <method name="engineDoFinal" type="int" line="396">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
            </method>
            <method name="doFinal" type="byte[]" line="402">
                <declaration name="t" type="byte[]" line="403"/>
                <declaration name="n" type="int" line="404"/>
                <declaration name="out" type="byte[]" line="405"/>
            </method>
            <method name="engineWrap" type="byte[]" line="412">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="416">
                    The conversion may fail, e.g. trying to wrap an AES key on                    
                </comment>
                <comment line="417">
                    a token that does not support AES, or when the key size is                    
                </comment>
                <comment line="418">
                    not within the range supported by the token.                    
                </comment>
                <comment line="426">
                    Directly encrypt the key encoding when key conversion failed                    
                </comment>
                <comment line="432">
                    should not occur                    
                </comment>
                <comment line="435">
                    Restore original mode                    
                </comment>
                <declaration name="keyAlg" type="String" line="413"/>
                <declaration name="sKey" type="P11Key" line="414"/>
                <scope line="415"/>
                <scope line="420">
                    <declaration name="toBeWrappedKey" type="byte[]" line="421"/>
                    <scope line="422"/>
                    <scope line="429"/>
                    <scope line="431"/>
                    <scope line="434"/>
                </scope>
                <declaration name="s" type="Session" line="439"/>
                <scope line="440"/>
                <scope line="444"/>
                <scope line="446"/>
            </method>
            <method name="engineUnwrap" type="Key" line="453">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="455">
                    the instance variable &quot;session&quot; has been initialized for                    
                </comment>
                <comment line="456">
                    decrypt mode, so use a local variable instead.                    
                </comment>
                <comment line="478">
                    XXX implement unwrap using C_Unwrap() for all keys                    
                </comment>
                <comment line="488">
                    should not occur                    
                </comment>
                <comment line="491">
                    should not occur, handled with length check above                    
                </comment>
                <scope line="454">
                    <declaration name="s" type="Session" line="457"/>
                    <scope line="458">
                        <declaration name="keyType" type="long" line="460"/>
                        <declaration name="attributes" type="CK_ATTRIBUTE[]" line="461"/>
                        <declaration name="keyID" type="long" line="467"/>
                    </scope>
                    <scope line="472"/>
                    <scope line="474"/>
                </scope>
                <scope line="480"/>
                <scope line="484">
                    <declaration name="encoded" type="byte[]" line="485"/>
                </scope>
                <scope line="487"/>
                <scope line="490"/>
            </method>
            <method name="engineGetKeySize" type="int" line="497">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="n" type="int" line="498"/>
            </method>
        </class>
        <class name="ConstructKeys" line="503">
            <comment line="51">
                minimum length of PKCS#1 v1.5 padding                
            </comment>
            <comment line="54">
                constant byte[] of length 0                
            </comment>
            <comment line="57">
                mode constant for public key encryption                
            </comment>
            <comment line="59">
                mode constant for private key decryption                
            </comment>
            <comment line="61">
                mode constant for private key encryption (signing)                
            </comment>
            <comment line="63">
                mode constant for public key decryption (verifying)                
            </comment>
            <comment line="66">
                padding type constant for NoPadding                
            </comment>
            <comment line="68">
                padding type constant for PKCS1Padding                
            </comment>
            <comment line="71">
                token instance                
            </comment>
            <comment line="74">
                algorithm name (always &quot;RSA&quot;)                
            </comment>
            <comment line="77">
                mechanism id                
            </comment>
            <comment line="80">
                associated session, if any                
            </comment>
            <comment line="83">
                mode, one of MODE_* above                
            </comment>
            <comment line="86">
                padding, one of PAD_* above                
            </comment>
            <comment line="92">
                key, if init() was called                
            </comment>
            <comment line="95">
                flag indicating whether an operation is initialized                
            </comment>
            <comment line="98">
                maximum input data size allowed                
            </comment>
            <comment line="99">
                for decryption, this is the length of the key                
            </comment>
            <comment line="100">
                for encryption, length of the key minus minimum padding length                
            </comment>
            <comment line="103">
                maximum output size. this is the length of the key                
            </comment>
            <comment line="114">
                modes do not make sense for RSA, but allow ECB                
            </comment>
            <comment line="115">
                see JCE spec                
            </comment>
            <comment line="134">
                return 0 as block size, we are not a block cipher                
            </comment>
            <comment line="135">
                see JCE spec                
            </comment>
            <comment line="140">
                return the output size                
            </comment>
            <comment line="141">
                see JCE spec                
            </comment>
            <comment line="146">
                no IV, return null                
            </comment>
            <comment line="147">
                see JCE spec                
            </comment>
            <comment line="152">
                no parameters, return null                
            </comment>
            <comment line="153">
                see JCE spec                
            </comment>
            <comment line="158">
                see JCE spec                
            </comment>
            <comment line="164">
                see JCE spec                
            </comment>
            <comment line="175">
                see JCE spec                
            </comment>
            <comment line="371">
                see JCE spec                
            </comment>
            <comment line="377">
                see JCE spec                
            </comment>
            <comment line="384">
                see JCE spec                
            </comment>
            <comment line="394">
                see JCE spec                
            </comment>
            <comment line="411">
                see JCE spec                
            </comment>
            <comment line="452">
                see JCE spec                
            </comment>
            <comment line="497">
                see JCE spec                
            </comment>
            <javadoc line="504">
                Construct a public key from its encoding.                
                <param>
                    encodedKey the encoding of a public key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the encodedKey is for.                    
                </param>
                <return>
                    a public key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPublicKey" type="PublicKey" line="515">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="516">
                    <declaration name="keyFactory" type="KeyFactory" line="517"/>
                    <declaration name="keySpec" type="X509EncodedKeySpec" line="519"/>
                </scope>
                <scope line="521"/>
                <scope line="526"/>
            </method>
            <javadoc line="531">
                Construct a private key from its encoding.                
                <param>
                    encodedKey the encoding of a private key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <return>
                    a private key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPrivateKey" type="PrivateKey" line="542">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <scope line="543">
                    <declaration name="keyFactory" type="KeyFactory" line="544"/>
                    <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="546"/>
                </scope>
                <scope line="548"/>
                <scope line="553"/>
            </method>
            <javadoc line="558">
                Construct a secret key from its encoding.                
                <param>
                    encodedKey the encoding of a secret key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the secret key is for.                    
                </param>
                <return>
                    a secret key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructSecretKey" type="SecretKey" line="568">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
            </method>
            <method name="constructKey" type="Key" line="573">
                <params>
                    <param name="encoding" type="byte[]"/>
                    <param name="keyAlgorithm" type="String"/>
                    <param name="keyType" type="int"/>
                </params>
            </method>
        </class>
    </source>