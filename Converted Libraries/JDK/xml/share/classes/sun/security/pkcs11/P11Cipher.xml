<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Locale"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.nio.ch.DirectBuffer"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="P11Cipher" line="41">
            <extends class="CipherSpi"/>
            <comment line="58">
                mode constant for ECB mode                
            </comment>
            <comment line="60">
                mode constant for CBC mode                
            </comment>
            <comment line="62">
                mode constant for CTR mode                
            </comment>
            <comment line="65">
                padding constant for NoPadding                
            </comment>
            <comment line="67">
                padding constant for PKCS5Padding                
            </comment>
            <comment line="120">
                token instance                
            </comment>
            <comment line="123">
                algorithm name                
            </comment>
            <comment line="126">
                name of the key algorithm, e.g. DES instead of algorithm DES/CBC/...                
            </comment>
            <comment line="129">
                mechanism id                
            </comment>
            <comment line="132">
                associated session, if any                
            </comment>
            <comment line="135">
                key, if init() was called                
            </comment>
            <comment line="138">
                flag indicating whether an operation is initialized                
            </comment>
            <comment line="141">
                falg indicating encrypt or decrypt mode                
            </comment>
            <comment line="144">
                mode, one of MODE_* above (MODE_ECB for stream ciphers)                
            </comment>
            <comment line="147">
                block size, 0 for stream ciphers                
            </comment>
            <comment line="150">
                padding type, on of PAD_* above (PAD_NONE for stream ciphers)                
            </comment>
            <comment line="153">
                when the padding is requested but unsupported by the native mechanism,
                 we use the following to do padding and necessary data buffering.
                 padding object which generate padding and unpad the decrypted data                
            </comment>
            <comment line="157">
                buffer for holding back the block which contains padding bytes                
            </comment>
            <comment line="161">
                original IV, if in MODE_CBC or MODE_CTR                
            </comment>
            <comment line="164">
                number of bytes buffered internally by the native mechanism and padBuffer
                 if we do the padding                
            </comment>
            <comment line="225">
                see JCE spec                
            </comment>
            <comment line="250">
                see JCE spec                
            </comment>
            <comment line="255">
                see JCE spec                
            </comment>
            <comment line="260">
                see JCE spec                
            </comment>
            <comment line="265">
                see JCE spec                
            </comment>
            <comment line="284">
                see JCE spec                
            </comment>
            <comment line="294">
                see JCE spec                
            </comment>
            <comment line="312">
                see JCE spec                
            </comment>
            <comment line="332">
                actual init() implementation                
            </comment>
            <comment line="443">
                if update(inLen) is called, how big does the output buffer have to be?                
            </comment>
            <comment line="457">
                if doFinal(inLen) is called, how big does the output buffer have to be?                
            </comment>
            <comment line="471">
                reset the states to the pre-initialized values                
            </comment>
            <comment line="481">
                see JCE spec                
            </comment>
            <comment line="493">
                see JCE spec                
            </comment>
            <comment line="500">
                see JCE spec                
            </comment>
            <comment line="507">
                see JCE spec                
            </comment>
            <comment line="520">
                see JCE spec                
            </comment>
            <comment line="533">
                see JCE spec                
            </comment>
            <comment line="855">
                see JCE spec                
            </comment>
            <comment line="862">
                see JCE spec                
            </comment>
            <comment line="870">
                see JCE spec                
            </comment>
            <javadoc line="41">
                Cipher implementation class. This class currently supports
                  DES, DESede, AES, ARCFOUR, and Blowfish.
                  This class is designed to support ECB, CBC, CTR with NoPadding
                  and ECB, CBC with PKCS5Padding. It will use its own padding impl
                  if the native mechanism does not support padding.
                  Note that PKCS#11 currently only supports ECB, CBC, and CTR.
                  There are no provisions for other modes such as CFB, OFB, and PCBC.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MODE_ECB" type="int" line="58"/>
            <declaration name="MODE_CBC" type="int" line="60"/>
            <declaration name="MODE_CTR" type="int" line="62"/>
            <declaration name="PAD_NONE" type="int" line="65"/>
            <declaration name="PAD_PKCS5" type="int" line="67"/>
            <interface name="Padding">
                <comment line="71">
                    ENC: format the specified buffer with padding bytes and return the
                     actual padding length                    
                </comment>
                <comment line="75">
                    DEC: return the length of trailing padding bytes given the specified
                     padded data                    
                </comment>
                <method name="setPaddingBytes" type="int" line="72"/>
                <method name="unpad" type="int" line="76"/>
            </interface>
            <class name="PKCS5Padding" line="80">
                <comment line="71">
                    ENC: format the specified buffer with padding bytes and return the
                     actual padding length                    
                </comment>
                <comment line="75">
                    DEC: return the length of trailing padding bytes given the specified
                     padded data                    
                </comment>
                <implements interface="Padding"/>
                <declaration name="blockSize" type="int" line="82"/>
                <method name="PKCS5Padding" type="constructor" line="85">
                    <params>
                        <param name="blockSize" type="int"/>
                    </params>
                    <scope line="86"/>
                </method>
                <method name="setPaddingBytes" type="int" line="93">
                    <params>
                        <param name="paddingBuffer" type="byte[]"/>
                        <param name="padLen" type="int"/>
                    </params>
                </method>
                <method name="unpad" type="int" line="99">
                    <params>
                        <param name="paddedData" type="byte[]"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="109">
                        sanity check padding bytes                        
                    </comment>
                    <scope line="100"/>
                    <declaration name="padValue" type="byte" line="104"/>
                    <scope line="105"/>
                    <declaration name="padStartIndex" type="int" line="109"/>
                    <scope line="110">
                        <scope line="111"/>
                    </scope>
                </method>
            </class>
            <declaration name="token" type="Token" line="120"/>
            <declaration name="algorithm" type="String" line="123"/>
            <declaration name="keyAlgorithm" type="String" line="126"/>
            <declaration name="mechanism" type="long" line="129"/>
            <declaration name="session" type="Session" line="132"/>
            <declaration name="p11Key" type="P11Key" line="135"/>
            <declaration name="initialized" type="boolean" line="138"/>
            <declaration name="encrypt" type="boolean" line="141"/>
            <declaration name="blockMode" type="int" line="144"/>
            <declaration name="blockSize" type="int" line="147"/>
            <declaration name="paddingType" type="int" line="150"/>
            <declaration name="paddingObj" type="Padding" line="155"/>
            <declaration name="padBuffer" type="byte[]" line="157"/>
            <declaration name="padBufferLen" type="int" line="158"/>
            <declaration name="iv" type="byte[]" line="161"/>
            <declaration name="bytesBuffered" type="int" line="165"/>
            <method name="P11Cipher" type="constructor" line="168">
                <params>
                    <param name="token" type="Token"/>
                    <param name="algorithm" type="String"/>
                    <param name="mechanism" type="long"/>
                </params>
                <comment line="183">
                    DES, DESede, Blowfish                    
                </comment>
                <comment line="195">
                    should not happen                    
                </comment>
                <declaration name="algoParts" type="String" line="174"/>
                <scope line="177"/>
                <scope line="180"/>
                <scope line="182"/>
                <declaration name="defPadding" type="String" line="188"/>
                <declaration name="paddingStr" type="String" line="189"/>
                <scope line="191"/>
                <scope line="193"/>
            </method>
            <method name="engineSetMode" type="void" line="199">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <comment line="201">
                    Disallow change of mode for now since currently it&apos;s explicitly
                     defined in transformation strings                    
                </comment>
            </method>
            <method name="parseMode" type="int" line="205">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <declaration name="result" type="int" line="207"/>
                <scope line="208"/>
                <scope line="210">
                    <scope line="211"/>
                </scope>
                <scope line="216"/>
                <scope line="218"/>
            </method>
            <method name="engineSetPadding" type="void" line="226">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <comment line="241">
                    no native padding support; use our own padding impl                    
                </comment>
                <scope line="230"/>
                <scope line="232">
                    <scope line="233"/>
                    <scope line="239"/>
                </scope>
                <scope line="244"/>
            </method>
            <method name="engineGetBlockSize" type="int" line="250"/>
            <method name="engineGetOutputSize" type="int" line="255">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="260"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="265">
                <comment line="278">
                    NoSuchAlgorithmException, NoSuchProviderException
                     InvalidParameterSpecException                    
                </comment>
                <scope line="266"/>
                <declaration name="ivSpec" type="IvParameterSpec" line="269"/>
                <scope line="270">
                    <declaration name="params" type="AlgorithmParameters" line="271"/>
                </scope>
                <scope line="276"/>
            </method>
            <method name="engineInit" type="void" line="285">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="286"/>
                <scope line="288"/>
            </method>
            <method name="engineInit" type="void" line="296">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="ivValue" type="byte[]" line="297"/>
                <scope line="298">
                    <scope line="299"/>
                    <declaration name="ivSpec" type="IvParameterSpec" line="303"/>
                </scope>
                <scope line="305"/>
            </method>
            <method name="engineInit" type="void" line="314">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="ivValue" type="byte[]" line="315"/>
                <scope line="316">
                    <scope line="317">
                        <declaration name="ivSpec" type="IvParameterSpec" line="318"/>
                    </scope>
                    <scope line="321"/>
                </scope>
                <scope line="325"/>
            </method>
            <method name="implInit" type="void" line="334">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="iv" type="byte[]"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="348">
                    ECB or stream cipher                    
                </comment>
                <comment line="358">
                    MODE_CBC or MODE_CTR                    
                </comment>
                <comment line="367">
                    generate random IV                    
                </comment>
                <scope line="347">
                    <scope line="348">
                        <scope line="349"/>
                        <scope line="352"/>
                    </scope>
                </scope>
                <scope line="357">
                    <scope line="358">
                        <scope line="359">
                            <declaration name="exMsg" type="String" line="360"/>
                        </scope>
                        <scope line="367"/>
                    </scope>
                    <scope line="372">
                        <scope line="373"/>
                    </scope>
                </scope>
                <scope line="381"/>
                <scope line="383"/>
            </method>
            <method name="cancelOperation" type="void" line="388">
                <comment line="397">
                    cancel operation by finishing it                    
                </comment>
                <scope line="389"/>
                <scope line="393"/>
                <declaration name="bufLen" type="int" line="397"/>
                <declaration name="buffer" type="byte[]" line="398"/>
                <scope line="399">
                    <scope line="400"/>
                    <scope line="402"/>
                </scope>
                <scope line="405"/>
                <scope line="407"/>
            </method>
            <method name="ensureInitialized" type="void" line="412">
                <scope line="413"/>
            </method>
            <method name="initialize" type="void" line="418">
                <comment line="434">
                    release session when initialization failed                    
                </comment>
                <scope line="419"/>
                <declaration name="mechParams" type="CK_MECHANISM" line="422"/>
                <scope line="426">
                    <scope line="427"/>
                    <scope line="429"/>
                </scope>
                <scope line="432"/>
            </method>
            <method name="updateLength" type="int" line="443">
                <params>
                    <param name="inLen" type="int"/>
                </params>
                <comment line="451">
                    minus the number of bytes in the last incomplete block.                    
                </comment>
                <scope line="444"/>
                <declaration name="result" type="int" line="448"/>
                <scope line="449"/>
            </method>
            <method name="doFinalLength" type="int" line="457">
                <params>
                    <param name="inLen" type="int"/>
                </params>
                <comment line="465">
                    add the number of bytes to make the last block complete.                    
                </comment>
                <scope line="458"/>
                <declaration name="result" type="int" line="462"/>
                <scope line="463"/>
            </method>
            <method name="reset" type="void" line="471">
                <scope line="475"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="481">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <comment line="488">
                    convert since the output length is calculated by updateLength()                    
                </comment>
                <scope line="482">
                    <declaration name="out" type="byte[]" line="483"/>
                    <declaration name="n" type="int" line="484"/>
                </scope>
                <scope line="486"/>
            </method>
            <method name="engineUpdate" type="int" line="494">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <declaration name="outLen" type="int" line="495"/>
            </method>
            <method name="engineUpdate" type="int" line="502">
                <params>
                    <param name="inBuffer" type="ByteBuffer"/>
                    <param name="outBuffer" type="ByteBuffer"/>
                </params>
            </method>
            <method name="engineDoFinal" type="byte[]" line="508">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <comment line="515">
                    convert since the output length is calculated by doFinalLength()                    
                </comment>
                <scope line="509">
                    <declaration name="out" type="byte[]" line="510"/>
                    <declaration name="n" type="int" line="511"/>
                </scope>
                <scope line="513"/>
            </method>
            <method name="engineDoFinal" type="int" line="522">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <declaration name="n" type="int" line="523"/>
                <scope line="524"/>
            </method>
            <method name="engineDoFinal" type="int" line="536">
                <params>
                    <param name="inBuffer" type="ByteBuffer"/>
                    <param name="outBuffer" type="ByteBuffer"/>
                </params>
                <declaration name="n" type="int" line="537"/>
            </method>
            <method name="implUpdate" type="int" line="543">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                    <param name="outLen" type="int"/>
                </params>
                <comment line="558">
                    NSS throws up when called with data not in multiple
                     of blocks. Try to work around this by holding the
                     extra data in padBuffer.                    
                </comment>
                <comment line="587">
                    update &apos;padBuffer&apos; if using our own padding impl.                    
                </comment>
                <scope line="544"/>
                <scope line="547">
                    <declaration name="k" type="int" line="549"/>
                    <scope line="550"/>
                    <scope line="553">
                        <declaration name="newPadBufferLen" type="int" line="554"/>
                        <scope line="555">
                            <scope line="556">
                                <scope line="560">
                                    <declaration name="bufCapacity" type="int" line="561"/>
                                    <scope line="562"/>
                                    <scope line="566"/>
                                </scope>
                            </scope>
                            <scope line="577"/>
                        </scope>
                        <scope line="582"/>
                        <scope line="587"/>
                    </scope>
                </scope>
                <scope line="593">
                    <scope line="594"/>
                </scope>
            </method>
            <method name="implUpdate" type="int" line="604">
                <params>
                    <param name="inBuffer" type="ByteBuffer"/>
                    <param name="outBuffer" type="ByteBuffer"/>
                </params>
                <comment line="661">
                    NSS throws up when called with data not in multiple
                     of blocks. Try to work around this by holding the
                     extra data in padBuffer.                    
                </comment>
                <comment line="697">
                    update &apos;padBuffer&apos; if using our own padding impl.                    
                </comment>
                <comment line="711">
                    Reset input buffer to its original position for                    
                </comment>
                <declaration name="inLen" type="int" line="605"/>
                <scope line="606"/>
                <declaration name="outLen" type="int" line="610"/>
                <scope line="611"/>
                <declaration name="origPos" type="int" line="614"/>
                <scope line="615">
                    <declaration name="inAddr" type="long" line="618"/>
                    <declaration name="inOfs" type="int" line="619"/>
                    <declaration name="inArray" type="byte[]" line="620"/>
                    <scope line="622"/>
                    <scope line="625"/>
                    <declaration name="outAddr" type="long" line="630"/>
                    <declaration name="outOfs" type="int" line="631"/>
                    <declaration name="outArray" type="byte[]" line="632"/>
                    <scope line="633"/>
                    <scope line="636">
                        <scope line="637"/>
                        <scope line="640"/>
                    </scope>
                    <declaration name="k" type="int" line="645"/>
                    <scope line="646">
                        <scope line="647"/>
                        <scope line="650"/>
                    </scope>
                    <scope line="656">
                        <declaration name="newPadBufferLen" type="int" line="657"/>
                        <scope line="658">
                            <scope line="659">
                                <scope line="663">
                                    <declaration name="bufCapacity" type="int" line="664"/>
                                    <scope line="665"/>
                                    <scope line="669"/>
                                </scope>
                            </scope>
                            <scope line="680"/>
                        </scope>
                        <scope line="685">
                            <scope line="686"/>
                            <scope line="689"/>
                        </scope>
                        <scope line="697"/>
                    </scope>
                    <scope line="703"/>
                    <scope line="705"/>
                </scope>
                <scope line="709">
                    <scope line="712"/>
                </scope>
            </method>
            <method name="implDoFinal" type="int" line="723">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                    <param name="outLen" type="int"/>
                </params>
                <declaration name="requiredOutLen" type="int" line="724"/>
                <scope line="725"/>
                <scope line="728">
                    <declaration name="k" type="int" line="730"/>
                    <scope line="731">
                        <scope line="732">
                            <declaration name="actualPadLen" type="int" line="733"/>
                        </scope>
                    </scope>
                    <scope line="741">
                        <scope line="742">
                            <scope line="743"/>
                            <declaration name="actualPadLen" type="int" line="750"/>
                        </scope>
                        <scope line="753"/>
                    </scope>
                </scope>
                <scope line="759"/>
                <scope line="762"/>
            </method>
            <method name="implDoFinal" type="int" line="769">
                <params>
                    <param name="outBuffer" type="ByteBuffer"/>
                </params>
                <declaration name="outLen" type="int" line="770"/>
                <declaration name="requiredOutLen" type="int" line="771"/>
                <scope line="772"/>
                <scope line="776">
                    <declaration name="outAddr" type="long" line="779"/>
                    <declaration name="outArray" type="byte[]" line="780"/>
                    <declaration name="outOfs" type="int" line="781"/>
                    <scope line="782"/>
                    <scope line="785">
                        <scope line="786"/>
                        <scope line="789"/>
                    </scope>
                    <declaration name="k" type="int" line="794"/>
                    <scope line="796">
                        <scope line="797">
                            <declaration name="actualPadLen" type="int" line="798"/>
                        </scope>
                    </scope>
                    <scope line="806">
                        <scope line="807">
                            <scope line="808"/>
                            <declaration name="actualPadLen" type="int" line="816"/>
                        </scope>
                        <scope line="820"/>
                    </scope>
                    <scope line="827"/>
                    <scope line="829"/>
                </scope>
                <scope line="833"/>
                <scope line="836"/>
            </method>
            <method name="handleException" type="void" line="842">
                <params>
                    <param name="e" type="PKCS11Exception"/>
                </params>
                <declaration name="errorCode" type="long" line="843"/>
                <scope line="844"/>
                <scope line="848"/>
            </method>
            <method name="engineWrap" type="byte[]" line="856">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="858">
                    XXX key wrapping                    
                </comment>
            </method>
            <method name="engineUnwrap" type="Key" line="864">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
                <comment line="866">
                    XXX key unwrapping                    
                </comment>
            </method>
            <method name="engineGetKeySize" type="int" line="871">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="n" type="int" line="872"/>
            </method>
            <method name="bufferInputBytes" type="void" line="877">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="bufferInputBytes" type="void" line="883">
                <params>
                    <param name="inBuffer" type="ByteBuffer"/>
                    <param name="len" type="int"/>
                </params>
            </method>
        </class>
    </source>