<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.io"/>
        <import package="java.lang.ref"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.interfaces"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.rsa.RSAPublicKeyImpl"/>
        <import package="sun.security.internal.interfaces.TlsMasterSecret"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <import package="sun.security.util.DerValue"/>
        <class name="P11Key" line="50">
            <comment line="71">
                type of key, one of (PUBLIC, PRIVATE, SECRET)                
            </comment>
            <comment line="74">
                token instance                
            </comment>
            <comment line="77">
                algorithm name, returned by getAlgorithm(), etc.                
            </comment>
            <comment line="80">
                key id                
            </comment>
            <comment line="83">
                effective key length of the key, e.g. 56 for a DES key                
            </comment>
            <comment line="86">
                flags indicating whether the key is a token object, sensitive, extractable                
            </comment>
            <comment line="89">
                phantom reference notification clean up for session keys                
            </comment>
            <comment line="123">
                see JCA spec                
            </comment>
            <comment line="129">
                see JCA spec                
            </comment>
            <comment line="300">
                we assume that all components of public keys are always accessible                
            </comment>
            <comment line="372">
                class for sensitive and unextractable private keys                
            </comment>
            <comment line="454">
                RSA CRT private key                
            </comment>
            <comment line="564">
                RSA non-CRT private key                
            </comment>
            <comment line="1095">
                handle to the native key                
            </comment>
            <implements interface="Key"/>
            <javadoc line="50">
                Key implementation classes.
                  In PKCS#11, the components of private and secret keys may or may not
                  be accessible. If they are, we use the algorithm specific key classes
                  (e.g. DSAPrivateKey) for compatibility with existing applications.
                  If the components are not accessible, we use a generic class that
                  only implements PrivateKey (or SecretKey). Whether the components of a
                  key are extractable is automatically determined when the key object is
                  created.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="PUBLIC" type="String" line="66"/>
            <declaration name="PRIVATE" type="String" line="67"/>
            <declaration name="SECRET" type="String" line="68"/>
            <declaration name="type" type="String" line="71"/>
            <declaration name="token" type="Token" line="74"/>
            <declaration name="algorithm" type="String" line="77"/>
            <declaration name="keyID" type="long" line="80"/>
            <declaration name="keyLength" type="int" line="83"/>
            <declaration name="tokenObject" type="boolean" line="86"/>
            <declaration name="sessionKeyRef" type="SessionKeyRef" line="89"/>
            <method name="P11Key" type="constructor" line="92">
                <params>
                    <param name="type" type="String"/>
                    <param name="session" type="Session"/>
                    <param name="keyID" type="long"/>
                    <param name="algorithm" type="String"/>
                    <param name="keyLength" type="int"/>
                    <param name="attributes" type="CK_ATTRIBUTE[]"/>
                </params>
                <declaration name="tokenObject" type="boolean" line="98"/>
                <declaration name="sensitive" type="boolean" line="99"/>
                <declaration name="extractable" type="boolean" line="100"/>
                <declaration name="n" type="int" line="101"/>
                <scope line="102">
                    <declaration name="attr" type="CK_ATTRIBUTE" line="103"/>
                    <scope line="104"/>
                    <scope line="106"/>
                    <scope line="108"/>
                </scope>
                <scope line="115"/>
                <scope line="117"/>
            </method>
            <method name="getAlgorithm" type="String" line="123"/>
            <method name="getEncoded" type="byte[]" line="129">
                <declaration name="b" type="byte[]" line="130"/>
            </method>
            <method name="getEncodedInternal" type="byte[]" line="134"/>
            <method name="equals" type="boolean" line="136">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="141">
                    equals() should never throw exceptions                    
                </comment>
                <comment line="150">
                    no encoding, key only equal to itself
                     XXX getEncoded() for unextractable keys will change that                    
                </comment>
                <scope line="137"/>
                <scope line="141"/>
                <scope line="144"/>
                <declaration name="thisFormat" type="String" line="147"/>
                <scope line="148"/>
                <declaration name="other" type="Key" line="153"/>
                <scope line="154"/>
                <declaration name="thisEnc" type="byte[]" line="157"/>
                <declaration name="otherEnc" type="byte[]" line="158"/>
                <scope line="159"/>
                <scope line="161"/>
            </method>
            <method name="hashCode" type="int" line="167">
                <comment line="169">
                    hashCode() should never throw exceptions                    
                </comment>
                <scope line="169"/>
                <declaration name="b1" type="byte[]" line="172"/>
                <scope line="173"/>
                <declaration name="r" type="int" line="176"/>
                <scope line="177"/>
            </method>
            <method name="writeReplace" type="Object" line="183">
                <comment line="194">
                    XXX short term serialization for unextractable keys                    
                </comment>
                <declaration name="type" type="KeyRep.Type" line="184"/>
                <declaration name="format" type="String" line="185"/>
                <scope line="186"/>
                <scope line="188"/>
                <scope line="190"/>
                <scope line="192"/>
            </method>
            <method name="toString" type="String" line="200">
                <declaration name="s1" type="String" line="202"/>
                <scope line="206"/>
                <scope line="208"/>
            </method>
            <method name="keyLength" type="int" line="215"/>
            <method name="isPublic" type="boolean" line="219"/>
            <method name="isPrivate" type="boolean" line="223"/>
            <method name="isSecret" type="boolean" line="227"/>
            <method name="fetchAttributes" type="void" line="231">
                <params>
                    <param name="attributes" type="CK_ATTRIBUTE[]"/>
                </params>
                <declaration name="tempSession" type="Session" line="232"/>
                <scope line="233"/>
                <scope line="236"/>
                <scope line="238"/>
            </method>
            <declaration name="A0" type="CK_ATTRIBUTE[]" line="243"/>
            <method name="getAttributes" type="CK_ATTRIBUTE[]" line="246">
                <params>
                    <param name="session" type="Session"/>
                    <param name="keyID" type="long"/>
                    <param name="knownAttributes" type="CK_ATTRIBUTE[]"/>
                    <param name="desiredAttributes" type="CK_ATTRIBUTE[]"/>
                </params>
                <comment line="252">
                    For each desired attribute, check to see if we have the value
                     available already. If everything is here, we save a native call.                    
                </comment>
                <comment line="258">
                    break inner for loop                    
                </comment>
                <comment line="262">
                    nothing found, need to call C_GetAttributeValue()                    
                </comment>
                <comment line="264">
                    clear values copied from knownAttributes                    
                </comment>
                <comment line="273">
                    break loop, goto return                    
                </comment>
                <scope line="247"/>
                <scope line="250">
                    <declaration name="attr" type="CK_ATTRIBUTE" line="253"/>
                    <scope line="254">
                        <scope line="255"/>
                    </scope>
                    <scope line="260">
                        <scope line="262"/>
                        <scope line="266"/>
                        <scope line="269"/>
                    </scope>
                </scope>
            </method>
            <method name="secretKey" type="SecretKey" line="279">
                <params>
                    <param name="session" type="Session"/>
                    <param name="keyID" type="long"/>
                    <param name="algorithm" type="String"/>
                    <param name="keyLength" type="int"/>
                    <param name="attributes" type="CK_ATTRIBUTE[]"/>
                </params>
            </method>
            <method name="masterSecretKey" type="SecretKey" line="289">
                <params>
                    <param name="session" type="Session"/>
                    <param name="keyID" type="long"/>
                    <param name="algorithm" type="String"/>
                    <param name="keyLength" type="int"/>
                    <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    <param name="major" type="int"/>
                    <param name="minor" type="int"/>
                </params>
            </method>
            <method name="publicKey" type="PublicKey" line="301">
                <params>
                    <param name="session" type="Session"/>
                    <param name="keyID" type="long"/>
                    <param name="algorithm" type="String"/>
                    <param name="keyLength" type="int"/>
                    <param name="attributes" type="CK_ATTRIBUTE[]"/>
                </params>
                <scope line="302"/>
                <scope line="305"/>
                <scope line="308"/>
                <scope line="311"/>
                <scope line="314"/>
            </method>
            <method name="privateKey" type="PrivateKey" line="321">
                <params>
                    <param name="session" type="Session"/>
                    <param name="keyID" type="long"/>
                    <param name="algorithm" type="String"/>
                    <param name="keyLength" type="int"/>
                    <param name="attributes" type="CK_ATTRIBUTE[]"/>
                </params>
                <comment line="333">
                    XXX better test for RSA CRT keys (single getAttributes() call)
                     we need to determine whether this is a CRT key
                     see if we can obtain the public exponent
                     this should also be readable for sensitive/extractable keys                    
                </comment>
                <comment line="346">
                    ignore, assume not available                    
                </comment>
                <scope line="327"/>
                <scope line="330">
                    <scope line="331">
                        <declaration name="attrs2" type="CK_ATTRIBUTE[]" line="336"/>
                        <declaration name="crtKey" type="boolean" line="339"/>
                        <scope line="340"/>
                        <scope line="344"/>
                        <scope line="348"/>
                        <scope line="351"/>
                    </scope>
                    <scope line="355"/>
                    <scope line="358"/>
                    <scope line="361"/>
                    <scope line="364"/>
                </scope>
            </method>
            <class name="P11PrivateKey" line="372">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="PrivateKey"/>
                <method name="P11PrivateKey" type="constructor" line="375">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="getFormat" type="String" line="379"/>
                <method name="getEncodedInternal" type="byte[]" line="383"/>
            </class>
            <class name="P11SecretKey" line="389">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="SecretKey"/>
                <declaration name="encoded" type="byte[]" line="390"/>
                <method name="P11SecretKey" type="constructor" line="392">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="getFormat" type="String" line="395">
                    <scope line="397"/>
                    <scope line="399"/>
                </method>
                <method name="getEncodedInternal" type="byte[]" line="403">
                    <scope line="405"/>
                    <declaration name="b" type="byte[]" line="408"/>
                    <scope line="409">
                        <scope line="410">
                            <scope line="412">
                                <declaration name="tempSession" type="Session" line="413"/>
                                <scope line="414">
                                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="416"/>
                                </scope>
                                <scope line="422"/>
                                <scope line="424"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="P11TlsMasterSecretKey" line="435">
                <extends class="P11SecretKey"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="TlsMasterSecret"/>
                <declaration name="majorVersion" type="int" line="437"/>
                <method name="P11TlsMasterSecretKey" type="constructor" line="439">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                        <param name="major" type="int"/>
                        <param name="minor" type="int"/>
                    </params>
                </method>
                <method name="getMajorVersion" type="int" line="444"/>
                <method name="getMinorVersion" type="int" line="448"/>
            </class>
            <class name="P11RSAPrivateKey" line="454">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="RSAPrivateCrtKey"/>
                <declaration name="n" type="BigInteger" line="456"/>
                <declaration name="encoded" type="byte[]" line="457"/>
                <method name="P11RSAPrivateKey" type="constructor" line="459">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="462">
                    <scope line="464"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="467"/>
                </method>
                <method name="getFormat" type="String" line="487"/>
                <method name="getEncodedInternal" type="byte[]" line="491">
                    <comment line="497">
                        XXX make constructor in SunRsaSign provider public
                         and call it directly                        
                    </comment>
                    <scope line="493">
                        <scope line="495">
                            <declaration name="factory" type="KeyFactory" line="498"/>
                            <declaration name="newKey" type="Key" line="500"/>
                        </scope>
                        <scope line="502"/>
                    </scope>
                </method>
                <method name="getModulus" type="BigInteger" line="508"/>
                <method name="getPublicExponent" type="BigInteger" line="512"/>
                <method name="getPrivateExponent" type="BigInteger" line="516"/>
                <method name="getPrimeP" type="BigInteger" line="520"/>
                <method name="getPrimeQ" type="BigInteger" line="524"/>
                <method name="getPrimeExponentP" type="BigInteger" line="528"/>
                <method name="getPrimeExponentQ" type="BigInteger" line="532"/>
                <method name="getCrtCoefficient" type="BigInteger" line="536"/>
                <method name="toString" type="String" line="540">
                    <declaration name="sb" type="StringBuilder" line="542"/>
                </method>
            </class>
            <class name="P11RSAPrivateNonCRTKey" line="564">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="RSAPrivateKey"/>
                <declaration name="n" type="BigInteger" line="566"/>
                <declaration name="encoded" type="byte[]" line="567"/>
                <method name="P11RSAPrivateNonCRTKey" type="constructor" line="569">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="572">
                    <scope line="574"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="577"/>
                </method>
                <method name="getFormat" type="String" line="585"/>
                <method name="getEncodedInternal" type="byte[]" line="589">
                    <comment line="595">
                        XXX make constructor in SunRsaSign provider public
                         and call it directly                        
                    </comment>
                    <scope line="591">
                        <scope line="593">
                            <declaration name="factory" type="KeyFactory" line="596"/>
                            <declaration name="newKey" type="Key" line="598"/>
                        </scope>
                        <scope line="600"/>
                    </scope>
                </method>
                <method name="getModulus" type="BigInteger" line="606"/>
                <method name="getPrivateExponent" type="BigInteger" line="610"/>
                <method name="toString" type="String" line="614">
                    <declaration name="sb" type="StringBuilder" line="616"/>
                </method>
            </class>
            <class name="P11RSAPublicKey" line="625">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="RSAPublicKey"/>
                <declaration name="n" type="BigInteger" line="627"/>
                <declaration name="encoded" type="byte[]" line="628"/>
                <method name="P11RSAPublicKey" type="constructor" line="630">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="633">
                    <scope line="635"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="638"/>
                </method>
                <method name="getFormat" type="String" line="646"/>
                <method name="getEncodedInternal" type="byte[]" line="650">
                    <scope line="652">
                        <scope line="654"/>
                        <scope line="656"/>
                    </scope>
                </method>
                <method name="getModulus" type="BigInteger" line="662"/>
                <method name="getPublicExponent" type="BigInteger" line="666"/>
                <method name="toString" type="String" line="670"/>
            </class>
            <class name="P11DSAPublicKey" line="677">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="DSAPublicKey"/>
                <declaration name="y" type="BigInteger" line="679"/>
                <declaration name="params" type="DSAParams" line="680"/>
                <declaration name="encoded" type="byte[]" line="681"/>
                <method name="P11DSAPublicKey" type="constructor" line="683">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="686">
                    <scope line="688"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="691"/>
                </method>
                <method name="getFormat" type="String" line="705"/>
                <method name="getEncodedInternal" type="byte[]" line="709">
                    <scope line="711">
                        <scope line="713">
                            <declaration name="key" type="Key" line="714"/>
                        </scope>
                        <scope line="717"/>
                    </scope>
                </method>
                <method name="getY" type="BigInteger" line="723"/>
                <method name="getParams" type="DSAParams" line="727"/>
                <method name="toString" type="String" line="731"/>
            </class>
            <class name="P11DSAPrivateKey" line="738">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="DSAPrivateKey"/>
                <declaration name="x" type="BigInteger" line="740"/>
                <declaration name="params" type="DSAParams" line="741"/>
                <declaration name="encoded" type="byte[]" line="742"/>
                <method name="P11DSAPrivateKey" type="constructor" line="744">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="747">
                    <scope line="749"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="752"/>
                </method>
                <method name="getFormat" type="String" line="766"/>
                <method name="getEncodedInternal" type="byte[]" line="770">
                    <scope line="772">
                        <scope line="774">
                            <declaration name="key" type="Key" line="775"/>
                        </scope>
                        <scope line="778"/>
                    </scope>
                </method>
                <method name="getX" type="BigInteger" line="784"/>
                <method name="getParams" type="DSAParams" line="788"/>
                <method name="toString" type="String" line="792"/>
            </class>
            <class name="P11DHPrivateKey" line="799">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="DHPrivateKey"/>
                <declaration name="x" type="BigInteger" line="801"/>
                <declaration name="params" type="DHParameterSpec" line="802"/>
                <declaration name="encoded" type="byte[]" line="803"/>
                <method name="P11DHPrivateKey" type="constructor" line="805">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="808">
                    <scope line="810"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="813"/>
                </method>
                <method name="getFormat" type="String" line="825"/>
                <method name="getEncodedInternal" type="byte[]" line="829">
                    <scope line="831">
                        <scope line="833">
                            <declaration name="spec" type="DHPrivateKeySpec" line="834"/>
                            <declaration name="kf" type="KeyFactory" line="836"/>
                            <declaration name="key" type="Key" line="838"/>
                        </scope>
                        <scope line="840"/>
                    </scope>
                </method>
                <method name="getX" type="BigInteger" line="846"/>
                <method name="getParams" type="DHParameterSpec" line="850"/>
                <method name="toString" type="String" line="854"/>
            </class>
            <class name="P11DHPublicKey" line="861">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="DHPublicKey"/>
                <declaration name="y" type="BigInteger" line="863"/>
                <declaration name="params" type="DHParameterSpec" line="864"/>
                <declaration name="encoded" type="byte[]" line="865"/>
                <method name="P11DHPublicKey" type="constructor" line="867">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="870">
                    <scope line="872"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="875"/>
                </method>
                <method name="getFormat" type="String" line="887"/>
                <method name="getEncodedInternal" type="byte[]" line="891">
                    <scope line="893">
                        <scope line="895">
                            <declaration name="spec" type="DHPublicKeySpec" line="896"/>
                            <declaration name="kf" type="KeyFactory" line="898"/>
                            <declaration name="key" type="Key" line="900"/>
                        </scope>
                        <scope line="902"/>
                    </scope>
                </method>
                <method name="getY" type="BigInteger" line="908"/>
                <method name="getParams" type="DHParameterSpec" line="912"/>
                <method name="toString" type="String" line="916"/>
            </class>
            <class name="P11ECPrivateKey" line="923">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="ECPrivateKey"/>
                <declaration name="s" type="BigInteger" line="925"/>
                <declaration name="params" type="ECParameterSpec" line="926"/>
                <declaration name="encoded" type="byte[]" line="927"/>
                <method name="P11ECPrivateKey" type="constructor" line="929">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="932">
                    <scope line="934"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="937"/>
                    <scope line="943"/>
                    <scope line="946"/>
                </method>
                <method name="getFormat" type="String" line="950"/>
                <method name="getEncodedInternal" type="byte[]" line="954">
                    <scope line="956">
                        <scope line="958">
                            <declaration name="key" type="Key" line="959"/>
                        </scope>
                        <scope line="961"/>
                    </scope>
                </method>
                <method name="getS" type="BigInteger" line="967"/>
                <method name="getParams" type="ECParameterSpec" line="971"/>
                <method name="toString" type="String" line="975"/>
            </class>
            <class name="P11ECPublicKey" line="983">
                <extends class="P11Key"/>
                <comment line="379">
                    XXX temporary encoding for serialization purposes                    
                </comment>
                <implements interface="ECPublicKey"/>
                <declaration name="w" type="ECPoint" line="985"/>
                <declaration name="params" type="ECParameterSpec" line="986"/>
                <declaration name="encoded" type="byte[]" line="987"/>
                <method name="P11ECPublicKey" type="constructor" line="989">
                    <params>
                        <param name="session" type="Session"/>
                        <param name="keyID" type="long"/>
                        <param name="algorithm" type="String"/>
                        <param name="keyLength" type="int"/>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="fetchValues" type="void" line="992">
                    <comment line="1008">
                        An uncompressed EC point may be in either of two formats.
                         First try the OCTET STRING encoding:
                           04 &lt;length&gt; 04 &lt;X-coordinate&gt; &lt;Y-coordinate&gt;
                        
                         Otherwise try the raw encoding:
                           04 &lt;X-coordinate&gt; &lt;Y-coordinate&gt;                        
                    </comment>
                    <comment line="1028">
                        Failover                        
                    </comment>
                    <scope line="994"/>
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="997"/>
                    <scope line="1003">
                        <declaration name="ecKey" type="byte[]" line="1015"/>
                        <scope line="1017">
                            <declaration name="wECPoint" type="DerValue" line="1018"/>
                        </scope>
                        <scope line="1026"/>
                    </scope>
                    <scope line="1031"/>
                </method>
                <method name="getFormat" type="String" line="1035"/>
                <method name="getEncodedInternal" type="byte[]" line="1039">
                    <scope line="1041">
                        <scope line="1043">
                            <declaration name="key" type="Key" line="1044"/>
                        </scope>
                        <scope line="1046"/>
                    </scope>
                </method>
                <method name="getW" type="ECPoint" line="1052"/>
                <method name="getParams" type="ECParameterSpec" line="1056"/>
                <method name="toString" type="String" line="1060"/>
            </class>
        </class>
        <class name="SessionKeyRef" line="1075">
            <extends class="PhantomReference">
                <type_params>
                    <type_param name="P11Key"/>
                </type_params>
            </extends>
            <comment line="71">
                type of key, one of (PUBLIC, PRIVATE, SECRET)                
            </comment>
            <comment line="74">
                token instance                
            </comment>
            <comment line="77">
                algorithm name, returned by getAlgorithm(), etc.                
            </comment>
            <comment line="80">
                key id                
            </comment>
            <comment line="83">
                effective key length of the key, e.g. 56 for a DES key                
            </comment>
            <comment line="86">
                flags indicating whether the key is a token object, sensitive, extractable                
            </comment>
            <comment line="89">
                phantom reference notification clean up for session keys                
            </comment>
            <comment line="123">
                see JCA spec                
            </comment>
            <comment line="129">
                see JCA spec                
            </comment>
            <comment line="300">
                we assume that all components of public keys are always accessible                
            </comment>
            <comment line="372">
                class for sensitive and unextractable private keys                
            </comment>
            <comment line="454">
                RSA CRT private key                
            </comment>
            <comment line="564">
                RSA non-CRT private key                
            </comment>
            <comment line="1095">
                handle to the native key                
            </comment>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="SessionKeyRef"/>
                </type_params>
            </implements>
            <declaration name="refQueue" type="ReferenceQueue&lt;P11Key&gt;" line="1077"/>
            <declaration name="refList" type="Set&lt;SessionKeyRef&gt;" line="1079"/>
            <method name="referenceQueue" type="ReferenceQueue<P11Key>" line="1082"/>
            <method name="drainRefQueueBounded" type="void" line="1086">
                <scope line="1087">
                    <declaration name="next" type="SessionKeyRef" line="1088"/>
                </scope>
            </method>
            <declaration name="keyID" type="long" line="1095"/>
            <declaration name="session" type="Session" line="1096"/>
            <method name="SessionKeyRef" type="constructor" line="1098">
                <params>
                    <param name="key" type="P11Key"/>
                    <param name="keyID" type="long"/>
                    <param name="session" type="Session"/>
                </params>
                <comment line="1105">
                    TBD: run at some interval and not every time?                    
                </comment>
            </method>
            <method name="dispose" type="void" line="1108">
                <comment line="1117">
                    ignore                    
                </comment>
                <scope line="1110">
                    <declaration name="newSession" type="Session" line="1111"/>
                    <scope line="1112"/>
                    <scope line="1115"/>
                    <scope line="1117"/>
                </scope>
            </method>
            <method name="compareTo" type="int" line="1125">
                <params>
                    <param name="other" type="SessionKeyRef"/>
                </params>
                <scope line="1126"/>
                <scope line="1128"/>
            </method>
        </class>
    </source>