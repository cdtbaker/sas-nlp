<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.interfaces"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.pkcs11.TemplateManager"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="P11KeyAgreement" line="41">
            <extends class="KeyAgreementSpi"/>
            <comment line="51">
                token instance                
            </comment>
            <comment line="54">
                algorithm name                
            </comment>
            <comment line="57">
                mechanism id                
            </comment>
            <comment line="60">
                private key, if initialized                
            </comment>
            <comment line="63">
                other sides public value (&quot;y&quot;), if doPhase() already called                
            </comment>
            <comment line="66">
                length of the secret to be derived                
            </comment>
            <comment line="69">
                KeyAgreement from SunJCE as fallback for &gt; 2 party agreement                
            </comment>
            <comment line="79">
                see JCE spec                
            </comment>
            <comment line="91">
                see JCE spec                
            </comment>
            <comment line="102">
                see JCE spec                
            </comment>
            <comment line="174">
                see JCE spec                
            </comment>
            <comment line="212">
                see JCE spec                
            </comment>
            <comment line="229">
                see JCE spec                
            </comment>
            <javadoc line="41">
                KeyAgreement implementation class. This class currently supports
                  DH.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="token" type="Token" line="51"/>
            <declaration name="algorithm" type="String" line="54"/>
            <declaration name="mechanism" type="long" line="57"/>
            <declaration name="privateKey" type="P11Key" line="60"/>
            <declaration name="publicValue" type="BigInteger" line="63"/>
            <declaration name="secretLen" type="int" line="66"/>
            <declaration name="multiPartyAgreement" type="KeyAgreement" line="69"/>
            <method name="P11KeyAgreement" type="constructor" line="71">
                <params>
                    <param name="token" type="Token"/>
                    <param name="algorithm" type="String"/>
                    <param name="mechanism" type="long"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="80">
                <params>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="81"/>
            </method>
            <method name="engineInit" type="void" line="93">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="94"/>
            </method>
            <method name="engineDoPhase" type="Key" line="103">
                <params>
                    <param name="key" type="Key"/>
                    <param name="lastPhase" type="boolean"/>
                </params>
                <comment line="110">
                    PKCS#11 only allows key agreement between 2 parties                    
                </comment>
                <comment line="111">
                    JCE allows &gt;= 2 parties. To support that case (for compatibility                    
                </comment>
                <comment line="112">
                    and to pass JCK), fall back to SunJCE in this case.                    
                </comment>
                <comment line="113">
                    NOTE that we initialize using the P11Key, which will fail if it                    
                </comment>
                <comment line="114">
                    is sensitive/unextractable. However, this is not an issue in the                    
                </comment>
                <comment line="115">
                    compatibility configuration, which is all we are targeting here.                    
                </comment>
                <comment line="142">
                    normally, DH PublicKeys will always implement DHPublicKey                    
                </comment>
                <comment line="143">
                    just in case not, attempt conversion                    
                </comment>
                <comment line="155">
                    if parameters of private key are accessible, verify that                    
                </comment>
                <comment line="156">
                    they match parameters of public key                    
                </comment>
                <comment line="157">
                    XXX p and g should always be readable, even if the key is sensitive                    
                </comment>
                <comment line="168">
                    length of the secret is length of key                    
                </comment>
                <scope line="104"/>
                <scope line="107"/>
                <scope line="116">
                    <scope line="117">
                        <scope line="118"/>
                        <scope line="122"/>
                    </scope>
                </scope>
                <scope line="130"/>
                <declaration name="p" type="BigInteger" line="134"/>
                <scope line="135">
                    <declaration name="dhKey" type="DHPublicKey" line="136"/>
                    <declaration name="params" type="DHParameterSpec" line="138"/>
                </scope>
                <scope line="141">
                    <declaration name="kf" type="P11DHKeyFactory" line="144"/>
                    <scope line="145">
                        <declaration name="spec" type="DHPublicKeySpec" line="146"/>
                    </scope>
                    <scope line="151"/>
                </scope>
                <scope line="158">
                    <declaration name="dhKey" type="DHPrivateKey" line="159"/>
                    <declaration name="params" type="DHParameterSpec" line="160"/>
                    <scope line="162"/>
                </scope>
            </method>
            <method name="engineGenerateSecret" type="byte[]" line="174">
                <comment line="201">
                    trim leading 0x00 bytes per JCE convention                    
                </comment>
                <scope line="175">
                    <declaration name="val" type="byte[]" line="176"/>
                </scope>
                <scope line="180"/>
                <declaration name="session" type="Session" line="183"/>
                <scope line="184">
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="186"/>
                    <declaration name="keyID" type="long" line="192"/>
                    <declaration name="secret" type="byte[]" line="199"/>
                </scope>
                <scope line="203"/>
                <scope line="205"/>
            </method>
            <method name="engineGenerateSecret" type="int" line="213">
                <params>
                    <param name="sharedSecret" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="214">
                    <declaration name="n" type="int" line="215"/>
                </scope>
                <scope line="219"/>
                <declaration name="secret" type="byte[]" line="223"/>
            </method>
            <method name="engineGenerateSecret" type="SecretKey" line="231">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="241">
                    For now, only perform native derivation for TlsPremasterSecret                    
                </comment>
                <comment line="242">
                    as that is required for FIPS compliance.                    
                </comment>
                <comment line="243">
                    For other algorithms, there are unresolved issues regarding                    
                </comment>
                <comment line="244">
                    how this should work in JCE plus a Solaris truncation bug.                    
                </comment>
                <comment line="245">
                    (bug not yet filed).                    
                </comment>
                <comment line="249">
                    Maintain compatibility for SunJCE:                    
                </comment>
                <comment line="250">
                    verify secret length is sensible for algorithm / truncate                    
                </comment>
                <comment line="251">
                    return generated key itself if possible                    
                </comment>
                <scope line="232">
                    <declaration name="key" type="SecretKey" line="233"/>
                </scope>
                <scope line="237"/>
                <scope line="240"/>
                <declaration name="secret" type="byte[]" line="248"/>
                <declaration name="keyLen" type="int" line="252"/>
                <scope line="253"/>
                <scope line="255"/>
                <scope line="257"/>
                <scope line="259"/>
                <scope line="261"/>
                <scope line="265"/>
                <scope line="269">
                    <scope line="270"/>
                </scope>
            </method>
            <method name="nativeGenerateSecret" type="SecretKey" line="279">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="304">
                    Workaround for Solaris bug 6318543.                    
                </comment>
                <comment line="305">
                    Strip leading zeroes ourselves if possible (key not sensitive).                    
                </comment>
                <comment line="306">
                    This should be removed once the Solaris fix is available                    
                </comment>
                <comment line="307">
                    as here we always retrieve the CKA_VALUE even for tokens                    
                </comment>
                <comment line="308">
                    that do not have that bug.                    
                </comment>
                <scope line="280"/>
                <declaration name="keyType" type="long" line="283"/>
                <declaration name="session" type="Session" line="284"/>
                <scope line="285">
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="287"/>
                    <declaration name="keyID" type="long" line="293"/>
                    <declaration name="lenAttributes" type="CK_ATTRIBUTE[]" line="296"/>
                    <declaration name="keyLen" type="int" line="300"/>
                    <declaration name="key" type="SecretKey" line="301"/>
                    <scope line="303">
                        <declaration name="keyBytes" type="byte[]" line="309"/>
                        <declaration name="newBytes" type="byte[]" line="310"/>
                        <scope line="311"/>
                    </scope>
                </scope>
                <scope line="316"/>
                <scope line="318"/>
            </method>
        </class>
    </source>