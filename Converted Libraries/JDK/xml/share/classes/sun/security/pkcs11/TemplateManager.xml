<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="TemplateManager" line="6">
            <javadoc line="6">
                TemplateManager class.
                  Not all PKCS#11 tokens are created equal. One token may require that one
                  value is specified when creating a certain type of object. Another token
                  may require a different value. Yet another token may only work if the
                  attribute is not specified at all.
                  In order to allow an application to work unmodified with all those
                  different tokens, the SunPKCS11 provider makes the attributes that are
                  specified and their value configurable. Hence, only the SunPKCS11
                  configuration file has to be tweaked at deployment time to allow all
                  existing applications to be used.
                  The template manager is responsible for reading the attribute configuration
                  information and to make it available to the various internal components
                  of the SunPKCS11 provider.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="24"/>
            <declaration name="O_ANY" type="String" line="25"/>
            <declaration name="O_IMPORT" type="String" line="26"/>
            <declaration name="O_GENERATE" type="String" line="27"/>
            <class name="KeyAndTemplate" line="28">
                <declaration name="key" type="TemplateKey" line="29"/>
                <declaration name="template" type="Template" line="30"/>
                <method name="KeyAndTemplate" type="constructor" line="31">
                    <params>
                        <param name="key" type="TemplateKey"/>
                        <param name="template" type="Template"/>
                    </params>
                </method>
            </class>
            <declaration name="primitiveTemplates" type="List&amp;lt;KeyAndTemplate&amp;gt;" line="36"/>
            <declaration name="compositeTemplates" type="Map&amp;lt;TemplateKey,Template&amp;gt;" line="37"/>
            <method name="TemplateManager" type="constructor" line="38"/>
            <method name="addTemplate" type="void" line="42">
                <params>
                    <param name="op" type="String"/>
                    <param name="objectClass" type="long"/>
                    <param name="keyAlgorithm" type="long"/>
                    <param name="attrs" type="CK_ATTRIBUTE[]"/>
                </params>
                <declaration name="key" type="TemplateKey" line="43"/>
                <declaration name="template" type="Template" line="44"/>
                <scope line="45"/>
            </method>
            <method name="getTemplate" type="Template" line="50">
                <params>
                    <param name="key" type="TemplateKey"/>
                </params>
                <declaration name="template" type="Template" line="51"/>
                <scope line="52"/>
            </method>
            <method name="getAttributes" type="CK_ATTRIBUTE[]" line="58">
                <params>
                    <param name="op" type="String"/>
                    <param name="type" type="long"/>
                    <param name="alg" type="long"/>
                    <param name="attrs" type="CK_ATTRIBUTE[]"/>
                </params>
                <declaration name="key" type="TemplateKey" line="59"/>
                <declaration name="template" type="Template" line="60"/>
                <declaration name="newAttrs" type="CK_ATTRIBUTE[]" line="61"/>
                <scope line="62"/>
            </method>
            <method name="buildCompositeTemplate" type="Template" line="67">
                <params>
                    <param name="key" type="TemplateKey"/>
                </params>
                <declaration name="comp" type="Template" line="68"/>
                <scope line="69">
                    <scope line="70"/>
                </scope>
            </method>
            <class name="TemplateKey" line="76">
                <javadoc line="76">
                    Nested class representing a template identifier.                    
                </javadoc>
                <declaration name="operation" type="String" line="80"/>
                <declaration name="keyType" type="long" line="81"/>
                <declaration name="keyAlgorithm" type="long" line="82"/>
                <method name="TemplateKey" type="constructor" line="83">
                    <params>
                        <param name="operation" type="String"/>
                        <param name="keyType" type="long"/>
                        <param name="keyAlgorithm" type="long"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="88">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="89"/>
                    <scope line="92"/>
                    <declaration name="other" type="TemplateKey" line="95"/>
                    <declaration name="match" type="boolean" line="96"/>
                </method>
                <method name="hashCode" type="int" line="99"/>
                <method name="appliesTo" type="boolean" line="102">
                    <params>
                        <param name="key" type="TemplateKey"/>
                    </params>
                    <scope line="103">
                        <scope line="104">
                            <scope line="105"/>
                        </scope>
                    </scope>
                </method>
                <method name="toString" type="String" line="112"/>
            </class>
            <class name="Template" line="116">
                <javadoc line="116">
                    Nested class representing template attributes.                    
                </javadoc>
                <declaration name="A0" type="CK_ATTRIBUTE[]" line="120"/>
                <declaration name="attributes" type="CK_ATTRIBUTE[]" line="121"/>
                <method name="Template" type="constructor" line="122"/>
                <method name="Template" type="constructor" line="125">
                    <params>
                        <param name="attributes" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <method name="add" type="void" line="128">
                    <params>
                        <param name="template" type="Template"/>
                    </params>
                </method>
                <method name="getAttributes" type="CK_ATTRIBUTE[]" line="131">
                    <params>
                        <param name="attrs" type="CK_ATTRIBUTE[]"/>
                    </params>
                </method>
                <javadoc line="134">
                    Combine two sets of attributes. The second set has precedence
                      over the first and overrides its settings.                    
                </javadoc>
                <method name="combine" type="CK_ATTRIBUTE[]" line="138">
                    <params>
                        <param name="attrs1" type="CK_ATTRIBUTE[]"/>
                        <param name="attrs2" type="CK_ATTRIBUTE[]"/>
                    </params>
                    <declaration name="attrs" type="List&amp;lt;CK_ATTRIBUTE&amp;gt;" line="139"/>
                    <scope line="140">
                        <scope line="141"/>
                    </scope>
                    <scope line="145">
                        <declaration name="type" type="long" line="146"/>
                        <scope line="147">
                            <scope line="148"/>
                        </scope>
                        <scope line="152"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="158"/>
            </class>
        </class>
    </source>