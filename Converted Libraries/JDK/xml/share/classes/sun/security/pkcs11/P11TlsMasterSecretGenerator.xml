<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.internal.spec.TlsMasterSecretParameterSpec"/>
        <import package="sun.security.pkcs11.TemplateManager"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="P11TlsMasterSecretGenerator" line="40">
            <extends class="KeyGeneratorSpi"/>
            <comment line="52">
                token instance                
            </comment>
            <comment line="55">
                algorithm name                
            </comment>
            <comment line="58">
                mechanism id                
            </comment>
            <javadoc line="40">
                KeyGenerator for the SSL/TLS master secret.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="MSG" type="String" line="48"/>
            <declaration name="token" type="Token" line="52"/>
            <declaration name="algorithm" type="String" line="55"/>
            <declaration name="mechanism" type="long" line="58"/>
            <declaration name="spec" type="TlsMasterSecretParameterSpec" line="60"/>
            <declaration name="p11Key" type="P11Key" line="61"/>
            <declaration name="version" type="int" line="63"/>
            <method name="P11TlsMasterSecretGenerator" type="constructor" line="66">
                <params>
                    <param name="token" type="Token"/>
                    <param name="algorithm" type="String"/>
                    <param name="mechanism" type="long"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="73">
                <params>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="78">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="84">
                    algorithm should be either TlsRsaPremasterSecret or TlsPremasterSecret,                    
                </comment>
                <comment line="85">
                    but we omit the check                    
                </comment>
                <comment line="96">
                    We assume the token supports the required mechanism. If it does not,                    
                </comment>
                <comment line="97">
                    generateKey() will fail and the failover should take care of us.                    
                </comment>
                <scope line="79"/>
                <declaration name="key" type="SecretKey" line="83"/>
                <scope line="86"/>
                <scope line="88"/>
                <scope line="92"/>
            </method>
            <method name="engineInit" type="void" line="100">
                <params>
                    <param name="keysize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineGenerateKey" type="SecretKey" line="104">
                <comment line="115">
                    Note: we use DH for all non-RSA premaster secrets. That includes                    
                </comment>
                <comment line="116">
                    Kerberos. That should not be a problem because master secret                    
                </comment>
                <comment line="117">
                    calculation is always a straightforward application of the                    
                </comment>
                <comment line="118">
                    TLS PRF (or the SSL equivalent).                    
                </comment>
                <comment line="119">
                    The only thing special about RSA master secret calculation is                    
                </comment>
                <comment line="120">
                    that it extracts the version numbers from the premaster secret.                    
                </comment>
                <scope line="105"/>
                <declaration name="ckVersion" type="CK_VERSION" line="109"/>
                <scope line="110"/>
                <scope line="114"/>
                <declaration name="clientRandom" type="byte[]" line="125"/>
                <declaration name="serverRandom" type="byte[]" line="126"/>
                <declaration name="random" type="CK_SSL3_RANDOM_DATA" line="127"/>
                <declaration name="params" type="CK_SSL3_MASTER_KEY_DERIVE_PARAMS" line="129"/>
                <declaration name="session" type="Session" line="132"/>
                <scope line="133">
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="135"/>
                    <declaration name="keyID" type="long" line="137"/>
                    <declaration name="major" type="int" line="139"/>
                    <scope line="141"/>
                    <scope line="144"/>
                    <declaration name="key" type="SecretKey" line="148"/>
                </scope>
                <scope line="151"/>
                <scope line="153"/>
            </method>
        </class>
    </source>