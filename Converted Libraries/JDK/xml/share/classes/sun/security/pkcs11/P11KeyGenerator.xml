<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto"/>
        <import package="sun.security.pkcs11.TemplateManager"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="P11KeyGenerator" line="8">
            <extends class="KeyGeneratorSpi"/>
            <javadoc line="8">
                KeyGenerator implementation class. This class currently supports
                  DES, DESede, AES, ARCFOUR, and Blowfish.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="token" type="Token" line="15"/>
            <declaration name="algorithm" type="String" line="16"/>
            <declaration name="mechanism" type="long" line="17"/>
            <declaration name="keySize" type="int" line="18"/>
            <declaration name="significantKeySize" type="int" line="19"/>
            <declaration name="keyType" type="long" line="20"/>
            <declaration name="supportBothKeySizes" type="boolean" line="21"/>
            <javadoc line="22">
                Utility method for checking if the specified key size is valid
                  and within the supported range. Return the significant key size
                  upon successful validation.                
                <param>
                    keyGenMech the PKCS#11 key generation mechanism.                    
                </param>
                <param>
                    keySize the to-be-checked key size for this mechanism.                    
                </param>
                <param>
                    token token which provides this mechanism.                    
                </param>
                <return>
                    the significant key size (in bits) corresponding to the
                      specified key size.                    
                </return>
                <throws>
                    InvalidParameterException if the specified key size is invalid.                    
                </throws>
                <throws>
                    ProviderException if this mechanism isn't supported by SunPKCS11
                      or underlying native impl.                    
                </throws>
            </javadoc>
            <method name="checkKeySize" type="int" line="35">
                <params>
                    <param name="keyGenMech" type="long"/>
                    <param name="keySize" type="int"/>
                    <param name="token" type="Token"/>
                </params>
                <declaration name="sigKeySize" type="int" line="36"/>
                <scope line="39"/>
                <scope line="46"/>
                <scope line="49"/>
                <scope line="52"/>
                <declaration name="info" type="CK_MECHANISM_INFO" line="57"/>
                <scope line="58"/>
                <scope line="61"/>
                <scope line="64"/>
                <declaration name="minKeySize" type="int" line="67"/>
                <declaration name="maxKeySize" type="int" line="68"/>
                <scope line="69"/>
                <scope line="74"/>
                <scope line="77">
                    <scope line="78"/>
                </scope>
            </method>
            <method name="P11KeyGenerator" type="constructor" line="86">
                <params>
                    <param name="token" type="Token"/>
                    <param name="algorithm" type="String"/>
                    <param name="mechanism" type="long"/>
                </params>
                <scope line="91"/>
            </method>
            <method name="setDefaultKeySize" type="void" line="96">
                <scope line="125"/>
                <scope line="128"/>
            </method>
            <method name="engineInit" type="void" line="132">
                <params>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="136">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="139">
                <params>
                    <param name="keySize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="newSignificantKeySize" type="int" line="141"/>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="148">
                    <declaration name="newMechanism" type="long" line="149"/>
                    <scope line="150">
                        <scope line="151"/>
                        <scope line="155"/>
                    </scope>
                </scope>
            </method>
            <method name="engineGenerateKey" type="SecretKey" line="163">
                <declaration name="session" type="Session" line="164"/>
                <scope line="165">
                    <declaration name="attributes" type="CK_ATTRIBUTE[]" line="167"/>
                    <declaration name="keyID" type="long" line="179"/>
                </scope>
                <scope line="182"/>
                <scope line="185"/>
            </method>
        </class>
    </source>