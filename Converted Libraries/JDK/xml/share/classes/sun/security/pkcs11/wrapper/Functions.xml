<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11.wrapper">
        <import package="java.math.BigInteger"/>
        <import package="java.util"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="Functions" line="5">
            <javadoc line="5">
                This class contains onyl static methods. It is the place for all functions
                  that are used by several classes in this package.                
                <author>
                    Karl Scheibelhofer &lt;Karl.Scheibelhofer@iaik.at&gt;                    
                </author>
                <author>
                    Martin Schlaeffer &lt;schlaeff@sbox.tugraz.at&gt;                    
                </author>
            </javadoc>
            <declaration name="mechNames" type="Map&amp;lt;Integer,String&amp;gt;" line="12"/>
            <declaration name="mechIds" type="Map&amp;lt;String,Integer&amp;gt;" line="13"/>
            <declaration name="keyNames" type="Map&amp;lt;Integer,String&amp;gt;" line="14"/>
            <declaration name="keyIds" type="Map&amp;lt;String,Integer&amp;gt;" line="15"/>
            <declaration name="attributeNames" type="Map&amp;lt;Integer,String&amp;gt;" line="16"/>
            <declaration name="attributeIds" type="Map&amp;lt;String,Integer&amp;gt;" line="17"/>
            <declaration name="objectClassNames" type="Map&amp;lt;Integer,String&amp;gt;" line="18"/>
            <declaration name="objectClassIds" type="Map&amp;lt;String,Integer&amp;gt;" line="19"/>
            <declaration name="HEX_DIGITS" type="char[]" line="20"/>
            <javadoc line="20">
                For converting numbers to their hex presentation.                
            </javadoc>
            <javadoc line="24">
                Converts a long value to a hexadecimal String of length 16. Includes
                  leading zeros if necessary.                
                <param>
                    value The long value to be converted.                    
                </param>
                <return>
                    The hexadecimal string representation of the long value.                    
                </return>
            </javadoc>
            <method name="toFullHexString" type="String" line="30">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="currentValue" type="long" line="31"/>
                <declaration name="stringBuffer" type="StringBuffer" line="32"/>
                <scope line="33">
                    <declaration name="currentDigit" type="int" line="34"/>
                </scope>
            </method>
            <javadoc line="40">
                Converts a int value to a hexadecimal String of length 8. Includes
                  leading zeros if necessary.                
                <param>
                    value The int value to be converted.                    
                </param>
                <return>
                    The hexadecimal string representation of the int value.                    
                </return>
            </javadoc>
            <method name="toFullHexString" type="String" line="46">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="currentValue" type="int" line="47"/>
                <declaration name="stringBuffer" type="StringBuffer" line="48"/>
                <scope line="49">
                    <declaration name="currentDigit" type="int" line="50"/>
                </scope>
            </method>
            <javadoc line="56">
                converts a long value to a hexadecimal String                
                <param>
                    value the long value to be converted                    
                </param>
                <return>
                    the hexadecimal string representation of the long value                    
                </return>
            </javadoc>
            <method name="toHexString" type="String" line="61">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="64">
                Converts a byte array to a hexadecimal String. Each byte is presented by
                  its two digit hex-code; 0x0A -&gt; &quot;0a&quot;, 0x00 -&gt; &quot;00&quot;. No leading &quot;0x&quot; is
                  included in the result.                
                <param>
                    value the byte array to be converted                    
                </param>
                <return>
                    the hexadecimal string representation of the byte array                    
                </return>
            </javadoc>
            <method name="toHexString" type="String" line="71">
                <params>
                    <param name="value" type="byte[]"/>
                </params>
                <scope line="72"/>
                <declaration name="buffer" type="StringBuffer" line="75"/>
                <declaration name="single" type="int" line="76"/>
                <scope line="77">
                    <scope line="79"/>
                </scope>
            </method>
            <javadoc line="86">
                converts a long value to a binary String                
                <param>
                    value the long value to be converted                    
                </param>
                <return>
                    the binary string representation of the long value                    
                </return>
            </javadoc>
            <method name="toBinaryString" type="String" line="91">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="94">
                converts a byte array to a binary String                
                <param>
                    value the byte array to be converted                    
                </param>
                <return>
                    the binary string representation of the byte array                    
                </return>
            </javadoc>
            <method name="toBinaryString" type="String" line="99">
                <params>
                    <param name="value" type="byte[]"/>
                </params>
                <declaration name="helpBigInteger" type="BigInteger" line="100"/>
            </method>
            <class name="Flags" line="103">
                <declaration name="flagIds" type="long[]" line="104"/>
                <declaration name="flagNames" type="String[]" line="105"/>
                <method name="Flags" type="constructor" line="106">
                    <params>
                        <param name="flagIds" type="long[]"/>
                        <param name="flagNames" type="String[]"/>
                    </params>
                    <scope line="107"/>
                </method>
                <method name="toString" type="String" line="113">
                    <params>
                        <param name="val" type="long"/>
                    </params>
                    <declaration name="sb" type="StringBuilder" line="114"/>
                    <declaration name="first" type="boolean" line="115"/>
                    <scope line="116">
                        <scope line="117">
                            <scope line="118"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <declaration name="slotInfoFlags" type="Flags" line="128"/>
            <javadoc line="129">
                converts the long value flags to a SlotInfoFlag string                
                <param>
                    flags the flags to be converted                    
                </param>
                <return>
                    the SlotInfoFlag string representation of the flags                    
                </return>
            </javadoc>
            <method name="slotInfoFlagsToString" type="String" line="134">
                <params>
                    <param name="flags" type="long"/>
                </params>
            </method>
            <declaration name="tokenInfoFlags" type="Flags" line="137"/>
            <javadoc line="138">
                converts long value flags to a TokenInfoFlag string                
                <param>
                    flags the flags to be converted                    
                </param>
                <return>
                    the TokenInfoFlag string representation of the flags                    
                </return>
            </javadoc>
            <method name="tokenInfoFlagsToString" type="String" line="143">
                <params>
                    <param name="flags" type="long"/>
                </params>
            </method>
            <declaration name="sessionInfoFlags" type="Flags" line="146"/>
            <javadoc line="147">
                converts the long value flags to a SessionInfoFlag string                
                <param>
                    flags the flags to be converted                    
                </param>
                <return>
                    the SessionInfoFlag string representation of the flags                    
                </return>
            </javadoc>
            <method name="sessionInfoFlagsToString" type="String" line="152">
                <params>
                    <param name="flags" type="long"/>
                </params>
            </method>
            <javadoc line="155">
                converts the long value state to a SessionState string                
                <param>
                    state the state to be converted                    
                </param>
                <return>
                    the SessionState string representation of the state                    
                </return>
            </javadoc>
            <method name="sessionStateToString" type="String" line="160">
                <params>
                    <param name="state" type="long"/>
                </params>
                <declaration name="name" type="String" line="161"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
                <scope line="174"/>
                <scope line="177"/>
            </method>
            <declaration name="mechanismInfoFlags" type="Flags" line="182"/>
            <javadoc line="183">
                converts the long value flags to a MechanismInfoFlag string                
                <param>
                    flags the flags to be converted                    
                </param>
                <return>
                    the MechanismInfoFlag string representation of the flags                    
                </return>
            </javadoc>
            <method name="mechanismInfoFlagsToString" type="String" line="188">
                <params>
                    <param name="flags" type="long"/>
                </params>
            </method>
            <method name="getName" type="String" line="191">
                <params>
                    <param name="nameMap" type="Map&lt;Integer,String&gt;"/>
                    <param name="id" type="long"/>
                </params>
                <declaration name="name" type="String" line="192"/>
                <scope line="193"/>
                <scope line="196"/>
            </method>
            <method name="getId" type="long" line="201">
                <params>
                    <param name="idMap" type="Map&lt;String,Integer&gt;"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="mech" type="Integer" line="202"/>
                <scope line="203"/>
            </method>
            <method name="getMechanismName" type="String" line="208">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="getMechanismId" type="long" line="211">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getKeyName" type="String" line="214">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="getKeyId" type="long" line="217">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getAttributeName" type="String" line="220">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="getAttributeId" type="long" line="223">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getObjectClassName" type="String" line="226">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="getObjectClassId" type="long" line="229">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="232">
                Check the given arrays for equalitiy. This method considers both arrays as
                  equal, if both are &lt;code&gt;null&lt;/code&gt; or both have the same length and
                  contain exactly the same byte values.                
                <param>
                    array1 The first array.                    
                </param>
                <param>
                    array2 The second array.                    
                </param>
                <return>
                    True, if both arrays are &lt;code&gt;null&lt;/code&gt; or both have the same
                      length and contain exactly the same byte values. False, otherwise.                    
                </return>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="equals" type="boolean" line="243">
                <params>
                    <param name="array1" type="byte[]"/>
                    <param name="array2" type="byte[]"/>
                </params>
            </method>
            <javadoc line="246">
                Check the given arrays for equalitiy. This method considers both arrays as
                  equal, if both are &lt;code&gt;null&lt;/code&gt; or both have the same length and
                  contain exactly the same char values.                
                <param>
                    array1 The first array.                    
                </param>
                <param>
                    array2 The second array.                    
                </param>
                <return>
                    True, if both arrays are &lt;code&gt;null&lt;/code&gt; or both have the same
                      length and contain exactly the same char values. False, otherwise.                    
                </return>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="equals" type="boolean" line="257">
                <params>
                    <param name="array1" type="char[]"/>
                    <param name="array2" type="char[]"/>
                </params>
            </method>
            <javadoc line="260">
                Check the given dates for equalitiy. This method considers both dates as
                  equal, if both are &lt;code&gt;null&lt;/code&gt; or both contain exactly the same char
                  values.                
                <param>
                    date1 The first date.                    
                </param>
                <param>
                    date2 The second date.                    
                </param>
                <return>
                    True, if both dates are &lt;code&gt;null&lt;/code&gt; or both contain the same
                      char values. False, otherwise.                    
                </return>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="equals" type="boolean" line="271">
                <params>
                    <param name="date1" type="CK_DATE"/>
                    <param name="date2" type="CK_DATE"/>
                </params>
                <declaration name="equal" type="boolean" line="272"/>
                <scope line="273"/>
                <scope line="276"/>
                <scope line="279"/>
            </method>
            <javadoc line="284">
                Calculate a hash code for the given byte array.                
                <param>
                    array The byte array.                    
                </param>
                <return>
                    A hash code for the given array.                    
                </return>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="hashCode" type="int" line="291">
                <params>
                    <param name="array" type="byte[]"/>
                </params>
                <declaration name="hash" type="int" line="292"/>
                <scope line="293">
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="300">
                Calculate a hash code for the given char array.                
                <param>
                    array The char array.                    
                </param>
                <return>
                    A hash code for the given array.                    
                </return>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="hashCode" type="int" line="307">
                <params>
                    <param name="array" type="char[]"/>
                </params>
                <declaration name="hash" type="int" line="308"/>
                <scope line="309">
                    <scope line="310"/>
                </scope>
            </method>
            <javadoc line="316">
                Calculate a hash code for the given date object.                
                <param>
                    date The date object.                    
                </param>
                <return>
                    A hash code for the given date.                    
                </return>
                <preconditions>
                                        
                </preconditions>
                <postconditions>
                                        
                </postconditions>
            </javadoc>
            <method name="hashCode" type="int" line="323">
                <params>
                    <param name="date" type="CK_DATE"/>
                </params>
                <declaration name="hash" type="int" line="324"/>
                <scope line="325">
                    <scope line="326"/>
                    <scope line="332"/>
                    <scope line="336"/>
                </scope>
            </method>
            <method name="addMapping" type="void" line="343">
                <params>
                    <param name="nameMap" type="Map&lt;Integer,String&gt;"/>
                    <param name="idMap" type="Map&lt;String,Integer&gt;"/>
                    <param name="id" type="long"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="344"/>
                <declaration name="intId" type="Integer" line="347"/>
                <scope line="348"/>
                <scope line="351"/>
            </method>
            <method name="addMech" type="void" line="355">
                <params>
                    <param name="id" type="long"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="addKeyType" type="void" line="358">
                <params>
                    <param name="id" type="long"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="addAttribute" type="void" line="361">
                <params>
                    <param name="id" type="long"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="addObjectClass" type="void" line="364">
                <params>
                    <param name="id" type="long"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <scope line="367"/>
        </class>
    </source>