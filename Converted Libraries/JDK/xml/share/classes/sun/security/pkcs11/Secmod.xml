<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="Secmod" line="9">
            <javadoc line="9">
                The Secmod class defines the interface to the native NSS
                  library and the configuration information it stores in its
                  secmod.db file.
                  &lt;p&gt;Example code:
                  &lt;pre&gt;
                  Secmod secmod = Secmod.getInstance();
                  if (secmod.isInitialized() == false) {
                  secmod.initialize(&quot;/home/myself/.mozilla&quot;, &quot;/usr/sfw/lib/mozilla&quot;);
                  }
                  Provider p = secmod.getModule(ModuleType.KEYSTORE).getProvider();
                  KeyStore ks = KeyStore.getInstance(&quot;PKCS11&quot;, p);
                  ks.load(null, password);
                  &lt;/pre&gt;                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="27"/>
            <declaration name="INSTANCE" type="Secmod" line="28"/>
            <scope line="29"/>
            <declaration name="NSS_LIB_NAME" type="String" line="33"/>
            <declaration name="SOFTTOKEN_LIB_NAME" type="String" line="34"/>
            <declaration name="TRUST_LIB_NAME" type="String" line="35"/>
            <declaration name="nssHandle" type="long" line="36"/>
            <declaration name="supported" type="boolean" line="37"/>
            <declaration name="modules" type="List&amp;lt;Module&amp;gt;" line="38"/>
            <declaration name="configDir" type="String" line="39"/>
            <declaration name="nssLibDir" type="String" line="40"/>
            <method name="Secmod" type="constructor" line="41"/>
            <javadoc line="43">
                Return the singleton Secmod instance.                
            </javadoc>
            <method name="getInstance" type="Secmod" line="46"/>
            <method name="isLoaded" type="boolean" line="49">
                <scope line="50">
                    <scope line="52"/>
                </scope>
            </method>
            <method name="fetchVersions" type="void" line="58"/>
            <javadoc line="61">
                Test whether this Secmod has been initialized. Returns true
                  if NSS has been initialized using either the initialize() method
                  or by directly calling the native NSS APIs. The latter may be
                  the case if the current process contains components that use
                  NSS directly.                
                <throws>
                    IOException if an incompatible version of NSS
                      has been loaded                    
                </throws>
            </javadoc>
            <method name="isInitialized" type="boolean" line="70">
                <scope line="71"/>
                <scope line="74"/>
            </method>
            <method name="getConfigDir" type="String" line="79"/>
            <method name="getLibDir" type="String" line="82"/>
            <javadoc line="85">
                Initialize this Secmod.                
                <param>
                    configDir the directory containing the NSS configuration
                      files such as secmod.db                    
                </param>
                <param>
                    nssLibDir the directory containing the NSS libraries
                      (libnss3.so or nss3.dll) or null if the library is on
                      the system default shared library path                    
                </param>
                <throws>
                    IOException if NSS has already been initialized,
                      the specified directories are invalid, or initialization
                      fails for any other reason                    
                </throws>
            </javadoc>
            <method name="initialize" type="void" line="96">
                <params>
                    <param name="configDir" type="String"/>
                    <param name="nssLibDir" type="String"/>
                </params>
            </method>
            <method name="initialize" type="void" line="99">
                <params>
                    <param name="dbMode" type="DbMode"/>
                    <param name="configDir" type="String"/>
                    <param name="nssLibDir" type="String"/>
                </params>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="106"/>
                <declaration name="platformLibName" type="String" line="109"/>
                <declaration name="platformPath" type="String" line="110"/>
                <scope line="111"/>
                <scope line="114">
                    <declaration name="base" type="File" line="115"/>
                    <scope line="116"/>
                    <declaration name="platformFile" type="File" line="119"/>
                    <scope line="120"/>
                </scope>
                <scope line="125">
                    <declaration name="configBase" type="File" line="126"/>
                    <scope line="127"/>
                    <declaration name="secmodFile" type="File" line="130"/>
                    <scope line="131"/>
                </scope>
                <scope line="139"/>
                <declaration name="initok" type="boolean" line="143"/>
                <scope line="145"/>
            </method>
            <javadoc line="151">
                Return an immutable list of all available modules.                
                <throws>
                    IllegalStateException if this Secmod is misconfigured
                      or not initialized                    
                </throws>
            </javadoc>
            <method name="getModules" type="List&lt;Module&gt;" line="156">
                <scope line="157">
                    <scope line="158"/>
                </scope>
                <scope line="162"/>
                <scope line="165">
                    <declaration name="modules" type="List&amp;lt;Module&amp;gt;" line="166"/>
                </scope>
            </method>
            <method name="getDigest" type="byte[]" line="171">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="172">
                    <declaration name="md" type="MessageDigest" line="173"/>
                </scope>
                <scope line="176"/>
            </method>
            <method name="isTrusted" type="boolean" line="180">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="trustType" type="TrustType"/>
                </params>
                <declaration name="bytes" type="Bytes" line="181"/>
                <declaration name="attr" type="TrustAttributes" line="182"/>
                <scope line="183">
                    <scope line="185"/>
                </scope>
            </method>
            <method name="getModuleTrust" type="TrustAttributes" line="191">
                <params>
                    <param name="type" type="ModuleType"/>
                    <param name="bytes" type="Bytes"/>
                </params>
                <declaration name="module" type="Module" line="192"/>
                <declaration name="t" type="TrustAttributes" line="193"/>
            </method>
            <declaration name="ModuleType" type="enum" line="196"/>
            <javadoc line="196">
                Constants describing the different types of NSS modules.
                  For this API, NSS modules are classified as either one
                  of the internal modules delivered as part of NSS or
                  as an external module provided by a 3rd party.                
            </javadoc>
            <scope line="202"/>
            <javadoc line="228">
                Returns the first module of the specified type. If no such
                  module exists, this method returns null.                
                <throws>
                    IllegalStateException if this Secmod is misconfigured
                      or not initialized                    
                </throws>
            </javadoc>
            <method name="getModule" type="Module" line="234">
                <params>
                    <param name="type" type="ModuleType"/>
                </params>
                <scope line="235">
                    <scope line="236"/>
                </scope>
            </method>
            <declaration name="TEMPLATE_EXTERNAL" type="String" line="242"/>
            <declaration name="TEMPLATE_TRUSTANCHOR" type="String" line="243"/>
            <declaration name="TEMPLATE_CRYPTO" type="String" line="244"/>
            <declaration name="TEMPLATE_KEYSTORE" type="String" line="245"/>
            <declaration name="TEMPLATE_FIPS" type="String" line="246"/>
            <class name="Module" line="247">
                <javadoc line="247">
                    A representation of one PKCS#11 slot in a PKCS#11 module.                    
                </javadoc>
                <declaration name="libraryName" type="String" line="251"/>
                <declaration name="commonName" type="String" line="252"/>
                <declaration name="slot" type="int" line="253"/>
                <declaration name="type" type="ModuleType" line="254"/>
                <declaration name="config" type="String" line="255"/>
                <declaration name="provider" type="SunPKCS11" line="256"/>
                <declaration name="trust" type="Map&amp;lt;Bytes,TrustAttributes&amp;gt;" line="257"/>
                <method name="Module" type="constructor" line="258">
                    <params>
                        <param name="libraryDir" type="String"/>
                        <param name="libraryName" type="String"/>
                        <param name="commonName" type="String"/>
                        <param name="fips" type="boolean"/>
                        <param name="slot" type="int"/>
                    </params>
                    <declaration name="type" type="ModuleType" line="259"/>
                    <scope line="260">
                        <scope line="262"/>
                        <scope line="265">
                            <scope line="267"/>
                        </scope>
                    </scope>
                    <scope line="272">
                        <scope line="273"/>
                        <scope line="276"/>
                        <scope line="279"/>
                    </scope>
                </method>
                <method name="initConfiguration" type="void" line="289"/>
                <javadoc line="310">
                    Get the configuration for this module. This is a string
                      in the SunPKCS11 configuration format. It can be
                      customized with additional options and then made
                      current using the setConfiguration() method.                    
                </javadoc>
                <method name="getConfiguration" type="String" line="316"/>
                <javadoc line="319">
                    Set the configuration for this module.                    
                    <throws>
                        IllegalStateException if the associated provider
                          instance has already been created.                        
                    </throws>
                </javadoc>
                <method name="setConfiguration" type="void" line="324">
                    <params>
                        <param name="config" type="String"/>
                    </params>
                    <scope line="325"/>
                </method>
                <javadoc line="330">
                    Return the pathname of the native library that implements
                      this module. For example, /usr/lib/libpkcs11.so.                    
                </javadoc>
                <method name="getLibraryName" type="String" line="334"/>
                <javadoc line="337">
                    Returns the type of this module.                    
                </javadoc>
                <method name="getType" type="ModuleType" line="340"/>
                <javadoc line="343">
                    Returns the provider instance that is associated with this
                      module. The first call to this method creates the provider
                      instance.                    
                </javadoc>
                <method name="getProvider" type="Provider" line="348">
                    <scope line="349"/>
                </method>
                <method name="hasInitializedProvider" type="boolean" line="354"/>
                <method name="setProvider" type="void" line="357">
                    <params>
                        <param name="p" type="SunPKCS11"/>
                    </params>
                    <scope line="358"/>
                </method>
                <method name="newProvider" type="SunPKCS11" line="363">
                    <scope line="364">
                        <declaration name="in" type="InputStream" line="365"/>
                    </scope>
                    <scope line="368"/>
                </method>
                <method name="setTrust" type="void" line="372">
                    <params>
                        <param name="token" type="Token"/>
                        <param name="cert" type="X509Certificate"/>
                    </params>
                    <declaration name="bytes" type="Bytes" line="373"/>
                    <declaration name="attr" type="TrustAttributes" line="374"/>
                    <scope line="375"/>
                    <scope line="379">
                        <scope line="380"/>
                    </scope>
                </method>
                <method name="getTrust" type="TrustAttributes" line="385">
                    <params>
                        <param name="hash" type="Bytes"/>
                    </params>
                    <scope line="386">
                        <scope line="387">
                            <declaration name="p" type="SunPKCS11" line="388"/>
                            <scope line="389"/>
                            <scope line="392"/>
                            <scope line="395"/>
                        </scope>
                    </scope>
                </method>
                <method name="toString" type="String" line="402"/>
            </class>
            <declaration name="TrustType" type="enum" line="406"/>
            <javadoc line="406">
                Constants representing NSS trust categories.                
            </javadoc>
            <scope line="409"/>
            <declaration name="DbMode" type="enum" line="425"/>
            <javadoc line="421">
                Trusted for email protection                
            </javadoc>
            <scope line="425"/>
            <method name="DbMode" type="constructor" line="426">
                <params>
                    <param name="functionName" type="String"/>
                </params>
            </method>
        </class>
        <class name="KeyStoreLoadParameter" line="430">
            <implements interface="LoadStoreParameter"/>
            <javadoc line="430">
                A LoadStoreParameter for use with the NSS Softtoken or
                  NSS TrustAnchor KeyStores.
                  &lt;p&gt;
                  It allows the set of trusted certificates that are returned by
                  the KeyStore to be specified.                
            </javadoc>
            <declaration name="trustType" type="TrustType" line="438"/>
            <declaration name="protection" type="ProtectionParameter" line="439"/>
            <method name="KeyStoreLoadParameter" type="constructor" line="440">
                <params>
                    <param name="trustType" type="TrustType"/>
                    <param name="password" type="char[]"/>
                </params>
            </method>
            <method name="KeyStoreLoadParameter" type="constructor" line="443">
                <params>
                    <param name="trustType" type="TrustType"/>
                    <param name="prot" type="ProtectionParameter"/>
                </params>
                <scope line="444"/>
            </method>
            <method name="getProtectionParameter" type="ProtectionParameter" line="450"/>
            <method name="getTrustType" type="TrustType" line="453"/>
        </class>
        <class name="TrustAttributes" line="457">
            <declaration name="handle" type="long" line="458"/>
            <declaration name="clientAuth" type="long" line="459"/>
            <declaration name="shaHash" type="byte[]" line="460"/>
            <method name="TrustAttributes" type="constructor" line="461">
                <params>
                    <param name="token" type="Token"/>
                    <param name="cert" type="X509Certificate"/>
                    <param name="bytes" type="Bytes"/>
                    <param name="trustValue" type="long"/>
                </params>
                <declaration name="session" type="Session" line="462"/>
                <scope line="463">
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="465"/>
                </scope>
                <scope line="473"/>
                <scope line="476"/>
            </method>
            <method name="TrustAttributes" type="constructor" line="480">
                <params>
                    <param name="token" type="Token"/>
                    <param name="session" type="Session"/>
                    <param name="handle" type="long"/>
                </params>
                <declaration name="attrs" type="CK_ATTRIBUTE[]" line="482"/>
                <declaration name="c" type="long" line="489"/>
                <scope line="490"/>
                <scope line="494"/>
            </method>
            <method name="getHash" type="Bytes" line="499"/>
            <method name="isTrusted" type="boolean" line="502">
                <params>
                    <param name="type" type="TrustType"/>
                </params>
            </method>
            <method name="isTrusted" type="boolean" line="518">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
        </class>
        <class name="Bytes" line="522">
            <declaration name="b" type="byte[]" line="523"/>
            <method name="Bytes" type="constructor" line="524">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="527"/>
            <method name="equals" type="boolean" line="530">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="531"/>
                <scope line="534"/>
                <declaration name="other" type="Bytes" line="537"/>
            </method>
            <scope line="-1"/>
            <method name="getTrust" type="Map&lt;Bytes,TrustAttributes&gt;" line="541">
                <params>
                    <param name="provider" type="SunPKCS11"/>
                </params>
                <declaration name="trustMap" type="Map&amp;lt;Bytes,TrustAttributes&amp;gt;" line="542"/>
                <declaration name="token" type="Token" line="543"/>
                <declaration name="session" type="Session" line="544"/>
                <scope line="545">
                    <declaration name="MAX_NUM" type="int" line="547"/>
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="548"/>
                    <declaration name="handles" type="long[]" line="550"/>
                    <scope line="553">
                        <declaration name="trust" type="TrustAttributes" line="554"/>
                    </scope>
                </scope>
                <scope line="558"/>
            </method>
            <method name="nssGetLibraryHandle" type="long" line="563"/>
            <method name="nssLoadLibrary" type="long" line="564"/>
            <method name="nssVersionCheck" type="boolean" line="565"/>
            <method name="nssInit" type="boolean" line="566"/>
            <method name="nssGetModuleList" type="Object" line="567"/>
        </class>
    </source>