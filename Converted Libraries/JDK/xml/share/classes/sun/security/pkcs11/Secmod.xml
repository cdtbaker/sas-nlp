<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs11">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="sun.security.pkcs11.wrapper"/>
        <import package="sun.security.pkcs11.wrapper.PKCS11Constants"/>
        <class name="Secmod" line="38">
            <comment line="76">
                handle to be passed to the native code, 0 means not initialized                
            </comment>
            <comment line="79">
                whether this is a supported version of NSS                
            </comment>
            <comment line="82">
                list of the modules                
            </comment>
            <javadoc line="38">
                The Secmod class defines the interface to the native NSS
                  library and the configuration information it stores in its
                  secmod.db file.
                  &lt;p&gt;Example code:
                  &lt;pre&gt;
                  Secmod secmod = Secmod.getInstance();
                  if (secmod.isInitialized() == false) {
                  secmod.initialize(&quot;/home/myself/.mozilla&quot;, &quot;/usr/sfw/lib/mozilla&quot;);
                  }
                  Provider p = secmod.getModule(ModuleType.KEYSTORE).getProvider();
                  KeyStore ks = KeyStore.getInstance(&quot;PKCS11&quot;, p);
                  ks.load(null, password);
                  &lt;/pre&gt;                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="60"/>
            <declaration name="INSTANCE" type="Secmod" line="62"/>
            <scope line="64"/>
            <declaration name="NSS_LIB_NAME" type="String" line="69"/>
            <declaration name="SOFTTOKEN_LIB_NAME" type="String" line="71"/>
            <declaration name="TRUST_LIB_NAME" type="String" line="73"/>
            <declaration name="nssHandle" type="long" line="76"/>
            <declaration name="supported" type="boolean" line="79"/>
            <declaration name="modules" type="List&lt;Module&gt;" line="82"/>
            <declaration name="configDir" type="String" line="84"/>
            <declaration name="nssLibDir" type="String" line="86"/>
            <method name="Secmod" type="constructor" line="88">
                <comment line="90">
                    empty                    
                </comment>
            </method>
            <javadoc line="92">
                Return the singleton Secmod instance.                
            </javadoc>
            <method name="getInstance" type="Secmod" line="95"/>
            <method name="isLoaded" type="boolean" line="99">
                <scope line="100">
                    <scope line="102"/>
                </scope>
            </method>
            <method name="fetchVersions" type="void" line="109"/>
            <javadoc line="113">
                Test whether this Secmod has been initialized. Returns true
                  if NSS has been initialized using either the initialize() method
                  or by directly calling the native NSS APIs. The latter may be
                  the case if the current process contains components that use
                  NSS directly.                
                <throws>
                    IOException if an incompatible version of NSS
                      has been loaded                    
                </throws>
            </javadoc>
            <method name="isInitialized" type="boolean" line="123">
                <comment line="125">
                    NSS does not allow us to check if it is initialized already
                     assume that if it is loaded it is also initialized                    
                </comment>
                <scope line="126"/>
                <scope line="129"/>
            </method>
            <method name="getConfigDir" type="String" line="137"/>
            <method name="getLibDir" type="String" line="141"/>
            <javadoc line="145">
                Initialize this Secmod.                
                <param>
                    configDir the directory containing the NSS configuration
                      files such as secmod.db                    
                </param>
                <param>
                    nssLibDir the directory containing the NSS libraries
                      (libnss3.so or nss3.dll) or null if the library is on
                      the system default shared library path                    
                </param>
                <throws>
                    IOException if NSS has already been initialized,
                      the specified directories are invalid, or initialization
                      fails for any other reason                    
                </throws>
            </javadoc>
            <method name="initialize" type="void" line="159">
                <params>
                    <param name="configDir" type="String"/>
                    <param name="nssLibDir" type="String"/>
                </params>
            </method>
            <method name="initialize" type="void" line="164">
                <params>
                    <param name="dbMode" type="DbMode"/>
                    <param name="configDir" type="String"/>
                    <param name="nssLibDir" type="String"/>
                </params>
                <scope line="165"/>
                <scope line="169"/>
                <scope line="172"/>
                <declaration name="platformLibName" type="String" line="175"/>
                <declaration name="platformPath" type="String" line="176"/>
                <scope line="177"/>
                <scope line="179">
                    <declaration name="base" type="File" line="180"/>
                    <scope line="181"/>
                    <declaration name="platformFile" type="File" line="184"/>
                    <scope line="185"/>
                </scope>
                <scope line="191">
                    <declaration name="configBase" type="File" line="192"/>
                    <scope line="193"/>
                    <declaration name="secmodFile" type="File" line="196"/>
                    <scope line="197"/>
                </scope>
                <scope line="206"/>
                <declaration name="initok" type="boolean" line="213"/>
                <scope line="215"/>
            </method>
            <javadoc line="223">
                Return an immutable list of all available modules.                
                <throws>
                    IllegalStateException if this Secmod is misconfigured
                      or not initialized                    
                </throws>
            </javadoc>
            <method name="getModules" type="List<Module>" line="229">
                <comment line="236">
                    IOException if misconfigured                    
                </comment>
                <scope line="230">
                    <scope line="231"/>
                </scope>
                <scope line="234"/>
                <scope line="238">
                    <declaration name="modules" type="List&lt;Module&gt;" line="239"/>
                </scope>
            </method>
            <method name="getDigest" type="byte[]" line="246">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="247">
                    <declaration name="md" type="MessageDigest" line="248"/>
                </scope>
                <scope line="250"/>
            </method>
            <method name="isTrusted" type="boolean" line="255">
                <params>
                    <param name="cert" type="X509Certificate"/>
                    <param name="trustType" type="TrustType"/>
                </params>
                <declaration name="bytes" type="Bytes" line="256"/>
                <declaration name="attr" type="TrustAttributes" line="257"/>
                <scope line="258">
                    <scope line="260"/>
                </scope>
            </method>
            <method name="getModuleTrust" type="TrustAttributes" line="267">
                <params>
                    <param name="type" type="ModuleType"/>
                    <param name="bytes" type="Bytes"/>
                </params>
                <declaration name="module" type="Module" line="268"/>
                <declaration name="t" type="TrustAttributes" line="269"/>
            </method>
            <javadoc line="273">
                Constants describing the different types of NSS modules.
                  For this API, NSS modules are classified as either one
                  of the internal modules delivered as part of NSS or
                  as an external module provided by a 3rd party.                
            </javadoc>
            <javadoc line="280">
                The NSS Softtoken crypto module. This is the first
                  slot of the softtoken object.
                  This module provides
                  implementations for cryptographic algorithms but no KeyStore.                
            </javadoc>
            <javadoc line="287">
                The NSS Softtoken KeyStore module. This is the second
                  slot of the softtoken object.
                  This module provides
                  implementations for cryptographic algorithms (after login)
                  and the KeyStore.                
            </javadoc>
            <javadoc line="295">
                The NSS Softtoken module in FIPS mode. Note that in FIPS mode the
                  softtoken presents only one slot, not separate CRYPTO and KEYSTORE
                  slots as in non-FIPS mode.                
            </javadoc>
            <javadoc line="301">
                The NSS builtin trust anchor module. This is the
                  NSSCKBI object. It provides no crypto functions.                
            </javadoc>
            <javadoc line="306">
                An external module.                
            </javadoc>
            <javadoc line="312">
                Returns the first module of the specified type. If no such
                  module exists, this method returns null.                
                <throws>
                    IllegalStateException if this Secmod is misconfigured
                      or not initialized                    
                </throws>
            </javadoc>
            <method name="getModule" type="Module" line="319">
                <params>
                    <param name="type" type="ModuleType"/>
                </params>
                <scope line="320">
                    <scope line="321"/>
                </scope>
            </method>
            <declaration name="TEMPLATE_EXTERNAL" type="String" line="328"/>
            <declaration name="TEMPLATE_TRUSTANCHOR" type="String" line="333"/>
            <declaration name="TEMPLATE_CRYPTO" type="String" line="340"/>
            <declaration name="TEMPLATE_KEYSTORE" type="String" line="346"/>
            <declaration name="TEMPLATE_FIPS" type="String" line="352"/>
            <class name="Module" line="358">
                <comment line="363">
                    path of the native library                    
                </comment>
                <comment line="365">
                    descriptive name used by NSS                    
                </comment>
                <comment line="373">
                    trust attributes. Used for the KEYSTORE and TRUSTANCHOR modules only                    
                </comment>
                <javadoc line="358">
                    A representation of one PKCS#11 slot in a PKCS#11 module.                    
                </javadoc>
                <declaration name="libraryName" type="String" line="363"/>
                <declaration name="commonName" type="String" line="365"/>
                <declaration name="slot" type="int" line="366"/>
                <declaration name="type" type="ModuleType" line="367"/>
                <declaration name="config" type="String" line="369"/>
                <declaration name="provider" type="SunPKCS11" line="370"/>
                <declaration name="trust" type="Map&lt;Bytes,TrustAttributes&gt;" line="373"/>
                <method name="Module" type="constructor" line="376">
                    <params>
                        <param name="libraryDir" type="String"/>
                        <param name="libraryName" type="String"/>
                        <param name="commonName" type="String"/>
                        <param name="fips" type="boolean"/>
                        <param name="slot" type="int"/>
                    </params>
                    <comment line="381">
                        must be softtoken                        
                    </comment>
                    <declaration name="type" type="ModuleType" line="377"/>
                    <scope line="379">
                        <scope line="382"/>
                        <scope line="384">
                            <scope line="386"/>
                        </scope>
                    </scope>
                    <scope line="391">
                        <scope line="393"/>
                        <scope line="395"/>
                        <scope line="398"/>
                    </scope>
                </method>
                <method name="initConfiguration" type="void" line="410"/>
                <javadoc line="433">
                    Get the configuration for this module. This is a string
                      in the SunPKCS11 configuration format. It can be
                      customized with additional options and then made
                      current using the setConfiguration() method.                    
                </javadoc>
                <method name="getConfiguration" type="String" line="440"/>
                <javadoc line="444">
                    Set the configuration for this module.                    
                    <throws>
                        IllegalStateException if the associated provider
                          instance has already been created.                        
                    </throws>
                </javadoc>
                <method name="setConfiguration" type="void" line="451">
                    <params>
                        <param name="config" type="String"/>
                    </params>
                    <scope line="452"/>
                </method>
                <javadoc line="458">
                    Return the pathname of the native library that implements
                      this module. For example, /usr/lib/libpkcs11.so.                    
                </javadoc>
                <method name="getLibraryName" type="String" line="462"/>
                <javadoc line="466">
                    Returns the type of this module.                    
                </javadoc>
                <method name="getType" type="ModuleType" line="469"/>
                <javadoc line="473">
                    Returns the provider instance that is associated with this
                      module. The first call to this method creates the provider
                      instance.                    
                </javadoc>
                <method name="getProvider" type="Provider" line="479">
                    <scope line="480"/>
                </method>
                <method name="hasInitializedProvider" type="boolean" line="486"/>
                <method name="setProvider" type="void" line="490">
                    <params>
                        <param name="p" type="SunPKCS11"/>
                    </params>
                    <scope line="491"/>
                </method>
                <method name="newProvider" type="SunPKCS11" line="497">
                    <comment line="503">
                        XXX                        
                    </comment>
                    <scope line="498">
                        <declaration name="in" type="InputStream" line="499"/>
                    </scope>
                    <scope line="501"/>
                </method>
                <method name="setTrust" type="void" line="507">
                    <params>
                        <param name="token" type="Token"/>
                        <param name="cert" type="X509Certificate"/>
                    </params>
                    <comment line="515">
                        does it already have the correct trust settings?                        
                    </comment>
                    <comment line="517">
                        XXX not yet implemented                        
                    </comment>
                    <declaration name="bytes" type="Bytes" line="508"/>
                    <declaration name="attr" type="TrustAttributes" line="509"/>
                    <scope line="510"/>
                    <scope line="513">
                        <scope line="515"/>
                    </scope>
                </method>
                <method name="getTrust" type="TrustAttributes" line="522">
                    <params>
                        <param name="hash" type="Bytes"/>
                    </params>
                    <comment line="525">
                        If provider is not set, create a temporary provider to
                         retrieve the trust information. This can happen if we need
                         to get the trust information for the trustanchor module
                         because we need to look for user customized settings in the
                         keystore module (which may not have a provider created yet).
                         Creating a temporary provider and then dropping it on the
                         floor immediately is flawed, but it&apos;s the best we can do
                         for now.                        
                    </comment>
                    <scope line="523">
                        <scope line="532">
                            <declaration name="p" type="SunPKCS11" line="533"/>
                            <scope line="534"/>
                            <scope line="537"/>
                            <scope line="539"/>
                        </scope>
                    </scope>
                </method>
                <method name="toString" type="String" line="547"/>
            </class>
            <javadoc line="554">
                Constants representing NSS trust categories.                
            </javadoc>
            <javadoc line="558">
                Trusted for all purposes                
            </javadoc>
            <javadoc line="560">
                Trusted for SSL client authentication                
            </javadoc>
            <javadoc line="562">
                Trusted for SSL server authentication                
            </javadoc>
            <javadoc line="564">
                Trusted for code signing                
            </javadoc>
            <javadoc line="566">
                Trusted for email protection                
            </javadoc>
            <declaration name="functionName" type="String" line="575"/>
            <method name="DbMode" type="constructor" line="576">
                <params>
                    <param name="functionName" type="String"/>
                </params>
            </method>
            <class name="KeyStoreLoadParameter" line="581">
                <comment line="363">
                    path of the native library                    
                </comment>
                <comment line="365">
                    descriptive name used by NSS                    
                </comment>
                <comment line="373">
                    trust attributes. Used for the KEYSTORE and TRUSTANCHOR modules only                    
                </comment>
                <implements interface="LoadStoreParameter"/>
                <javadoc line="581">
                    A LoadStoreParameter for use with the NSS Softtoken or
                      NSS TrustAnchor KeyStores.
                      &lt;p&gt;
                      It allows the set of trusted certificates that are returned by
                      the KeyStore to be specified.                    
                </javadoc>
                <declaration name="trustType" type="TrustType" line="589"/>
                <declaration name="protection" type="ProtectionParameter" line="590"/>
                <method name="KeyStoreLoadParameter" type="constructor" line="591">
                    <params>
                        <param name="trustType" type="TrustType"/>
                        <param name="password" type="char[]"/>
                    </params>
                </method>
                <method name="KeyStoreLoadParameter" type="constructor" line="595">
                    <params>
                        <param name="trustType" type="TrustType"/>
                        <param name="prot" type="ProtectionParameter"/>
                    </params>
                    <scope line="596"/>
                </method>
                <method name="getProtectionParameter" type="ProtectionParameter" line="602"/>
                <method name="getTrustType" type="TrustType" line="605"/>
            </class>
            <class name="TrustAttributes" line="610">
                <comment line="363">
                    path of the native library                    
                </comment>
                <comment line="365">
                    descriptive name used by NSS                    
                </comment>
                <comment line="373">
                    trust attributes. Used for the KEYSTORE and TRUSTANCHOR modules only                    
                </comment>
                <declaration name="handle" type="long" line="611"/>
                <declaration name="clientAuth" type="long" line="612"/>
                <declaration name="shaHash" type="byte[]" line="613"/>
                <method name="TrustAttributes" type="constructor" line="614">
                    <params>
                        <param name="token" type="Token"/>
                        <param name="cert" type="X509Certificate"/>
                        <param name="bytes" type="Bytes"/>
                        <param name="trustValue" type="long"/>
                    </params>
                    <comment line="619">
                        XXX use KeyStore TrustType settings to determine which
                         attributes to set                        
                    </comment>
                    <comment line="632">
                        XXX per PKCS#11 spec, the serial number should be in ASN.1                        
                    </comment>
                    <declaration name="session" type="Session" line="615"/>
                    <scope line="616">
                        <declaration name="attrs" type="CK_ATTRIBUTE[]" line="620"/>
                    </scope>
                    <scope line="639"/>
                    <scope line="641"/>
                </method>
                <method name="TrustAttributes" type="constructor" line="646">
                    <params>
                        <param name="token" type="Token"/>
                        <param name="session" type="Session"/>
                        <param name="handle" type="long"/>
                    </params>
                    <comment line="670">
                        trust anchor module does not support this attribute                        
                    </comment>
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="648"/>
                    <declaration name="c" type="long" line="664"/>
                    <scope line="665"/>
                    <scope line="668"/>
                </method>
                <method name="getHash" type="Bytes" line="674"/>
                <method name="isTrusted" type="boolean" line="677">
                    <params>
                        <param name="type" type="TrustType"/>
                    </params>
                </method>
                <method name="isTrusted" type="boolean" line="697">
                    <params>
                        <param name="l" type="long"/>
                    </params>
                    <comment line="699">
                        XXX CKT_TRUSTED?                        
                    </comment>
                </method>
            </class>
            <class name="Bytes" line="704">
                <comment line="363">
                    path of the native library                    
                </comment>
                <comment line="365">
                    descriptive name used by NSS                    
                </comment>
                <comment line="373">
                    trust attributes. Used for the KEYSTORE and TRUSTANCHOR modules only                    
                </comment>
                <declaration name="b" type="byte[]" line="705"/>
                <method name="Bytes" type="constructor" line="706">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="709"/>
                <method name="equals" type="boolean" line="712">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="713"/>
                    <scope line="716"/>
                    <declaration name="other" type="Bytes" line="719"/>
                </method>
            </class>
            <method name="getTrust" type="Map<Bytes,TrustAttributes>" line="725">
                <params>
                    <param name="provider" type="SunPKCS11"/>
                </params>
                <declaration name="trustMap" type="Map&lt;Bytes,TrustAttributes&gt;" line="726"/>
                <declaration name="token" type="Token" line="727"/>
                <declaration name="session" type="Session" line="728"/>
                <scope line="729">
                    <declaration name="MAX_NUM" type="int" line="731"/>
                    <declaration name="attrs" type="CK_ATTRIBUTE[]" line="732"/>
                    <declaration name="handles" type="long[]" line="736"/>
                    <scope line="740">
                        <declaration name="trust" type="TrustAttributes" line="741"/>
                    </scope>
                </scope>
                <scope line="744"/>
            </method>
            <method name="nssGetLibraryHandle" type="long" line="750"/>
            <method name="nssLoadLibrary" type="long" line="752"/>
            <method name="nssVersionCheck" type="boolean" line="754"/>
            <method name="nssInit" type="boolean" line="756"/>
            <method name="nssGetModuleList" type="Object" line="758"/>
        </class>
    </source>