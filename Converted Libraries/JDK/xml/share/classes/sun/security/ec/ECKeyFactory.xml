<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ec">
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <class name="ECKeyFactory" line="32">
            <extends class="KeyFactorySpi"/>
            <comment line="55">
                Used by translateKey() and the SunPKCS11 provider                
            </comment>
            <comment line="58">
                Internal provider object we can obtain the KeyFactory and                
            </comment>
            <comment line="59">
                AlgorithmParameters from. Used by ECParameters and AlgorithmId.                
            </comment>
            <comment line="60">
                This can go away once we have EC always available in the SUN provider.                
            </comment>
            <comment line="61">
                Used by ECParameters and AlgorithmId.                
            </comment>
            <comment line="155">
                see JCA doc                
            </comment>
            <comment line="167">
                see JCA doc                
            </comment>
            <comment line="179">
                internal implementation of translateKey() for public keys. See JCA doc                
            </comment>
            <comment line="200">
                internal implementation of translateKey() for private keys. See JCA doc                
            </comment>
            <comment line="220">
                internal implementation of generatePublic. See JCA doc                
            </comment>
            <comment line="238">
                internal implementation of generatePrivate. See JCA doc                
            </comment>
            <javadoc line="32">
                KeyFactory for EC keys. Keys must be instances of PublicKey or PrivateKey
                  and getAlgorithm() must return &quot;EC&quot;. For such keys, it supports conversion
                  between the following:
                  For public keys:
                  . PublicKey with an X.509 encoding
                  . ECPublicKey
                  . ECPublicKeySpec
                  . X509EncodedKeySpec
                  For private keys:
                  . PrivateKey with a PKCS#8 encoding
                  . ECPrivateKey
                  . ECPrivateKeySpec
                  . PKCS8EncodedKeySpec                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="INSTANCE" type="KeyFactory" line="55"/>
            <declaration name="ecInternalProvider" type="Provider" line="61"/>
            <scope line="63">
                <anonymous_class line="64"/>
                <declaration name="p" type="Provider" line="64"/>
                <anonymous_class line="65">
                    <method name="run" type="Void" line="66"/>
                </anonymous_class>
                <scope line="73"/>
                <scope line="75"/>
            </scope>
            <method name="ECKeyFactory" type="constructor" line="81">
                <comment line="82">
                    empty                    
                </comment>
            </method>
            <javadoc line="85">
                Static method to convert Key into a useable instance of
                  ECPublicKey or ECPrivateKey. Check the key and convert it
                  to a Sun key if necessary. If the key is not an EC key
                  or cannot be used, throw an InvalidKeyException.
                  The difference between this method and engineTranslateKey() is that
                  we do not convert keys of other providers that are already an
                  instance of ECPublicKey or ECPrivateKey.
                  To be used by future Java ECDSA and ECDH implementations.                
            </javadoc>
            <method name="toECKey" type="ECKey" line="97">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="98">
                    <declaration name="ecKey" type="ECKey" line="99"/>
                </scope>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Check that the given EC key is valid.                
            </javadoc>
            <method name="checkKey" type="void" line="110">
                <params>
                    <param name="key" type="ECKey"/>
                </params>
                <comment line="111">
                    check for subinterfaces, omit additional checks for our keys                    
                </comment>
                <comment line="123">
                    ECKey does not extend Key, so we need to do a cast                    
                </comment>
                <comment line="128">
                    XXX further sanity checks about whether this key uses supported                    
                </comment>
                <comment line="129">
                    fields, point formats, etc. would go here                    
                </comment>
                <scope line="112">
                    <scope line="113"/>
                </scope>
                <scope line="116">
                    <scope line="117"/>
                </scope>
                <scope line="120"/>
                <declaration name="keyAlg" type="String" line="124"/>
                <scope line="125"/>
            </method>
            <javadoc line="132">
                Translate an EC key into a Sun EC key. If conversion is
                  not possible, throw an InvalidKeyException.
                  See also JCA doc.                
            </javadoc>
            <method name="engineTranslateKey" type="Key" line="137">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <scope line="138"/>
                <declaration name="keyAlg" type="String" line="141"/>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="147"/>
                <scope line="149"/>
            </method>
            <method name="engineGeneratePublic" type="PublicKey" line="156">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="157"/>
                <scope line="159"/>
                <scope line="161"/>
            </method>
            <method name="engineGeneratePrivate" type="PrivateKey" line="168">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="169"/>
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <method name="implTranslatePublicKey" type="PublicKey" line="180">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <scope line="181">
                    <scope line="182"/>
                    <declaration name="ecKey" type="ECPublicKey" line="185"/>
                </scope>
                <scope line="190">
                    <declaration name="encoded" type="byte[]" line="191"/>
                </scope>
                <scope line="193"/>
            </method>
            <method name="implTranslatePrivateKey" type="PrivateKey" line="201">
                <params>
                    <param name="key" type="PrivateKey"/>
                </params>
                <scope line="202">
                    <scope line="203"/>
                    <declaration name="ecKey" type="ECPrivateKey" line="206"/>
                </scope>
                <scope line="211"/>
                <scope line="213"/>
            </method>
            <method name="implGeneratePublic" type="PublicKey" line="221">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="222">
                    <declaration name="x509Spec" type="X509EncodedKeySpec" line="223"/>
                </scope>
                <scope line="225">
                    <declaration name="ecSpec" type="ECPublicKeySpec" line="226"/>
                </scope>
                <scope line="231"/>
            </method>
            <method name="implGeneratePrivate" type="PrivateKey" line="239">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="240">
                    <declaration name="pkcsSpec" type="PKCS8EncodedKeySpec" line="241"/>
                </scope>
                <scope line="243">
                    <declaration name="ecSpec" type="ECPrivateKeySpec" line="244"/>
                </scope>
                <scope line="246"/>
            </method>
            <method name="engineGetKeySpec" type="T" line="253">
                <params>
                    <param name="key" type="Key"/>
                    <param name="keySpec" type="Class<T>"/>
                </params>
                <comment line="255">
                    convert key to one of our keys                    
                </comment>
                <comment line="256">
                    this also verifies that the key is a valid EC key and ensures                    
                </comment>
                <comment line="257">
                    that the encoding is X.509/PKCS#8 for public/private keys                    
                </comment>
                <comment line="291">
                    should not occur, caught in engineTranslateKey()                    
                </comment>
                <scope line="254"/>
                <scope line="259"/>
                <scope line="262">
                    <declaration name="ecKey" type="ECPublicKey" line="263"/>
                    <scope line="264"/>
                    <scope line="269"/>
                    <scope line="271"/>
                </scope>
                <scope line="276">
                    <scope line="277"/>
                    <scope line="279">
                        <declaration name="ecKey" type="ECPrivateKey" line="280"/>
                    </scope>
                    <scope line="285"/>
                </scope>
                <scope line="290"/>
            </method>
        </class>
    </source>