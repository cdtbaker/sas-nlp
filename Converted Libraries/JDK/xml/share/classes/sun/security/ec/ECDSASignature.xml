<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ec">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="sun.security.jca.JCAUtil"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <class name="ECDSASignature" line="12">
            <extends class="SignatureSpi"/>
            <javadoc line="12">
                ECDSA signature implementation. This class currently supports the
                  following algorithm names:
                  . &quot;NONEwithECDSA&quot;
                  . &quot;SHA1withECDSA&quot;
                  . &quot;SHA256withECDSA&quot;
                  . &quot;SHA384withECDSA&quot;
                  . &quot;SHA512withECDSA&quot;                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="messageDigest" type="MessageDigest" line="23"/>
            <declaration name="random" type="SecureRandom" line="24"/>
            <declaration name="needsReset" type="boolean" line="25"/>
            <declaration name="privateKey" type="ECPrivateKey" line="26"/>
            <declaration name="publicKey" type="ECPublicKey" line="27"/>
            <javadoc line="28">
                Constructs a new ECDSASignature. Used by Raw subclass.                
                <exception>
                    ProviderException if the native ECC library is unavailable.                    
                </exception>
            </javadoc>
            <method name="ECDSASignature" type="constructor" line="32"/>
            <javadoc line="35">
                Constructs a new ECDSASignature. Used by subclasses.                
            </javadoc>
            <method name="ECDSASignature" type="constructor" line="38">
                <params>
                    <param name="digestName" type="String"/>
                </params>
                <scope line="39"/>
                <scope line="42"/>
            </method>
            <class name="Raw" line="47">
                <extends class="ECDSASignature"/>
                <declaration name="RAW_ECDSA_MAX" type="int" line="48"/>
                <declaration name="precomputedDigest" type="byte[]" line="49"/>
                <declaration name="offset" type="int" line="50"/>
                <method name="Raw" type="constructor" line="51"/>
                <method name="engineUpdate" type="void" line="54">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                    <scope line="55"/>
                </method>
                <method name="engineUpdate" type="void" line="61">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="62"/>
                </method>
                <method name="engineUpdate" type="void" line="69">
                    <params>
                        <param name="byteBuffer" type="ByteBuffer"/>
                    </params>
                    <declaration name="len" type="int" line="70"/>
                    <scope line="71"/>
                    <scope line="74"/>
                </method>
                <method name="resetDigest" type="void" line="81"/>
                <method name="getDigestValue" type="byte[]" line="84">
                    <scope line="85"/>
                    <declaration name="result" type="byte[]" line="88"/>
                </method>
            </class>
            <class name="SHA1" line="94">
                <extends class="ECDSASignature"/>
                <method name="SHA1" type="constructor" line="95"/>
            </class>
            <class name="SHA256" line="99">
                <extends class="ECDSASignature"/>
                <method name="SHA256" type="constructor" line="100"/>
            </class>
            <class name="SHA384" line="104">
                <extends class="ECDSASignature"/>
                <method name="SHA384" type="constructor" line="105"/>
            </class>
            <class name="SHA512" line="109">
                <extends class="ECDSASignature"/>
                <method name="SHA512" type="constructor" line="110"/>
            </class>
            <method name="engineInitVerify" type="void" line="114">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
            </method>
            <method name="engineInitSign" type="void" line="119">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
            </method>
            <method name="engineInitSign" type="void" line="122">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="128">
                Resets the message digest if needed.                
            </javadoc>
            <method name="resetDigest" type="void" line="131">
                <scope line="132">
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                Returns the message digest value.                
            </javadoc>
            <method name="getDigestValue" type="byte[]" line="142"/>
            <method name="engineUpdate" type="void" line="146">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="150">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="154">
                <params>
                    <param name="byteBuffer" type="ByteBuffer"/>
                </params>
                <declaration name="len" type="int" line="155"/>
                <scope line="156"/>
            </method>
            <method name="engineSign" type="byte[]" line="162">
                <declaration name="s" type="byte[]" line="163"/>
                <declaration name="params" type="ECParameterSpec" line="164"/>
                <declaration name="encodedParams" type="byte[]" line="165"/>
                <declaration name="keySize" type="int" line="166"/>
                <declaration name="seed" type="byte[]" line="167"/>
                <scope line="168"/>
                <scope line="172"/>
                <scope line="175"/>
            </method>
            <method name="engineVerify" type="boolean" line="179">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <declaration name="w" type="byte[]" line="180"/>
                <declaration name="params" type="ECParameterSpec" line="181"/>
                <declaration name="encodedParams" type="byte[]" line="182"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <method name="engineSetParameter" type="void" line="196">
                <params>
                    <param name="param" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="engineGetParameter" type="Object" line="199">
                <params>
                    <param name="param" type="String"/>
                </params>
            </method>
            <method name="encodeSignature" type="byte[]" line="202">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <scope line="203">
                    <declaration name="n" type="int" line="204"/>
                    <declaration name="bytes" type="byte[]" line="205"/>
                    <declaration name="r" type="BigInteger" line="207"/>
                    <declaration name="s" type="BigInteger" line="209"/>
                    <declaration name="out" type="DerOutputStream" line="210"/>
                    <declaration name="result" type="DerValue" line="213"/>
                </scope>
                <scope line="216"/>
            </method>
            <method name="decodeSignature" type="byte[]" line="220">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <scope line="221">
                    <declaration name="in" type="DerInputStream" line="222"/>
                    <declaration name="values" type="DerValue[]" line="223"/>
                    <declaration name="r" type="BigInteger" line="224"/>
                    <declaration name="s" type="BigInteger" line="225"/>
                    <declaration name="rBytes" type="byte[]" line="226"/>
                    <declaration name="sBytes" type="byte[]" line="227"/>
                    <declaration name="k" type="int" line="228"/>
                    <declaration name="result" type="byte[]" line="229"/>
                </scope>
                <scope line="234"/>
            </method>
            <method name="trimZeroes" type="byte[]" line="238">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="i" type="int" line="239"/>
                <scope line="240"/>
                <scope line="243"/>
                <declaration name="t" type="byte[]" line="246"/>
            </method>
            <method name="signDigest" type="byte[]" line="250"/>
            <javadoc line="250">
                Signs the digest using the private key.                
                <param>
                    digest the digest to be signed.                    
                </param>
                <param>
                    s the private key&apos;s S value.                    
                </param>
                <param>
                    encodedParams the curve&apos;s DER encoded object identifier.                    
                </param>
                <param>
                    seed the random seed.                    
                </param>
                <return>
                    byte[] the signature.                    
                </return>
            </javadoc>
            <method name="verifySignedDigest" type="boolean" line="259"/>
            <javadoc line="259">
                Verifies the signed digest using the public key.                
                <param>
                    signedDigest the signature to be verified. It is encoded
                      as a concatenation of the key&apos;s R and S values.                    
                </param>
                <param>
                    digest the digest to be used.                    
                </param>
                <param>
                    w the public key&apos;s W point (in uncompressed form).                    
                </param>
                <param>
                    encodedParams the curve&apos;s DER encoded object identifier.                    
                </param>
                <return>
                    boolean true if the signature is successfully verified.                    
                </return>
            </javadoc>
        </class>
    </source>