<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ec">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec"/>
        <import package="sun.security.jca.JCAUtil"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <class name="ECDSASignature" line="41">
            <extends class="SignatureSpi"/>
            <comment line="56">
                message digest implementation we use                
            </comment>
            <comment line="59">
                supplied entropy                
            </comment>
            <comment line="62">
                flag indicating whether the digest has been reset                
            </comment>
            <comment line="65">
                private key, if initialized for signing                
            </comment>
            <comment line="68">
                public key, if initialized for verifying                
            </comment>
            <comment line="92">
                Nested class for NONEwithECDSA signatures                
            </comment>
            <comment line="162">
                Nested class for SHA1withECDSA signatures                
            </comment>
            <comment line="169">
                Nested class for SHA256withECDSA signatures                
            </comment>
            <comment line="176">
                Nested class for SHA384withECDSA signatures                
            </comment>
            <comment line="183">
                Nested class for SHA512withECDSA signatures                
            </comment>
            <comment line="190">
                initialize for verification. See JCA doc                
            </comment>
            <comment line="202">
                initialize for signing. See JCA doc                
            </comment>
            <comment line="209">
                initialize for signing. See JCA doc                
            </comment>
            <comment line="242">
                update the signature with the plaintext data. See JCA doc                
            </comment>
            <comment line="249">
                update the signature with the plaintext data. See JCA doc                
            </comment>
            <comment line="257">
                update the signature with the plaintext data. See JCA doc                
            </comment>
            <comment line="269">
                sign the data and return the signature. See JCA doc                
            </comment>
            <comment line="294">
                verify the data and return the result. See JCA doc                
            </comment>
            <comment line="318">
                set parameter, not supported. See JCA doc                
            </comment>
            <comment line="325">
                get parameter, not supported. See JCA doc                
            </comment>
            <comment line="332">
                Convert the concatenation of R and S into their DER encoding                
            </comment>
            <comment line="357">
                Convert the DER encoding of R and S into a concatenation of R and S                
            </comment>
            <comment line="382">
                trim leading (most significant) zeroes from the result                
            </comment>
            <javadoc line="41">
                ECDSA signature implementation. This class currently supports the
                  following algorithm names:
                  . &quot;NONEwithECDSA&quot;
                  . &quot;SHA1withECDSA&quot;
                  . &quot;SHA256withECDSA&quot;
                  . &quot;SHA384withECDSA&quot;
                  . &quot;SHA512withECDSA&quot;                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="messageDigest" type="MessageDigest" line="56"/>
            <declaration name="random" type="SecureRandom" line="59"/>
            <declaration name="needsReset" type="boolean" line="62"/>
            <declaration name="privateKey" type="ECPrivateKey" line="65"/>
            <declaration name="publicKey" type="ECPublicKey" line="68"/>
            <javadoc line="70">
                Constructs a new ECDSASignature. Used by Raw subclass.                
                <exception>
                    ProviderException if the native ECC library is unavailable.                    
                </exception>
            </javadoc>
            <method name="ECDSASignature" type="constructor" line="75"/>
            <javadoc line="79">
                Constructs a new ECDSASignature. Used by subclasses.                
            </javadoc>
            <method name="ECDSASignature" type="constructor" line="82">
                <params>
                    <param name="digestName" type="String"/>
                </params>
                <scope line="83"/>
                <scope line="85"/>
            </method>
            <class name="Raw" line="92">
                <extends class="ECDSASignature"/>
                <comment line="95">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="105">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="115">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="127">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="147">
                    Returns the precomputed message digest value.                    
                </comment>
                <declaration name="RAW_ECDSA_MAX" type="int" line="95"/>
                <declaration name="precomputedDigest" type="byte[]" line="97"/>
                <declaration name="offset" type="int" line="98"/>
                <method name="Raw" type="constructor" line="100"/>
                <method name="engineUpdate" type="void" line="106">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                    <scope line="107"/>
                </method>
                <method name="engineUpdate" type="void" line="117">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="118"/>
                </method>
                <method name="engineUpdate" type="void" line="128">
                    <params>
                        <param name="byteBuffer" type="ByteBuffer"/>
                    </params>
                    <declaration name="len" type="int" line="129"/>
                    <scope line="130"/>
                    <scope line="133"/>
                </method>
                <method name="resetDigest" type="void" line="142"/>
                <method name="getDigestValue" type="byte[]" line="148">
                    <scope line="149"/>
                    <declaration name="result" type="byte[]" line="153"/>
                </method>
            </class>
            <class name="SHA1" line="162">
                <extends class="ECDSASignature"/>
                <comment line="95">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="105">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="115">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="127">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="147">
                    Returns the precomputed message digest value.                    
                </comment>
                <method name="SHA1" type="constructor" line="163"/>
            </class>
            <class name="SHA256" line="169">
                <extends class="ECDSASignature"/>
                <comment line="95">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="105">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="115">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="127">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="147">
                    Returns the precomputed message digest value.                    
                </comment>
                <method name="SHA256" type="constructor" line="170"/>
            </class>
            <class name="SHA384" line="176">
                <extends class="ECDSASignature"/>
                <comment line="95">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="105">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="115">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="127">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="147">
                    Returns the precomputed message digest value.                    
                </comment>
                <method name="SHA384" type="constructor" line="177"/>
            </class>
            <class name="SHA512" line="183">
                <extends class="ECDSASignature"/>
                <comment line="95">
                    the longest supported digest is 512 bits (SHA-512)                    
                </comment>
                <comment line="105">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="115">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="127">
                    Stores the precomputed message digest value.                    
                </comment>
                <comment line="147">
                    Returns the precomputed message digest value.                    
                </comment>
                <method name="SHA512" type="constructor" line="184"/>
            </class>
            <method name="engineInitVerify" type="void" line="192">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
                <comment line="196">
                    Should check that the supplied key is appropriate for signature
                     algorithm (e.g. P-256 for SHA256withECDSA)                    
                </comment>
            </method>
            <method name="engineInitSign" type="void" line="204">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                </params>
            </method>
            <method name="engineInitSign" type="void" line="211">
                <params>
                    <param name="privateKey" type="PrivateKey"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="215">
                    Should check that the supplied key is appropriate for signature
                     algorithm (e.g. P-256 for SHA256withECDSA)                    
                </comment>
            </method>
            <javadoc line="221">
                Resets the message digest if needed.                
            </javadoc>
            <method name="resetDigest" type="void" line="224">
                <scope line="225">
                    <scope line="226"/>
                </scope>
            </method>
            <javadoc line="233">
                Returns the message digest value.                
            </javadoc>
            <method name="getDigestValue" type="byte[]" line="236"/>
            <method name="engineUpdate" type="void" line="243">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="251">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="258">
                <params>
                    <param name="byteBuffer" type="ByteBuffer"/>
                </params>
                <declaration name="len" type="int" line="259"/>
                <scope line="260"/>
            </method>
            <method name="engineSign" type="byte[]" line="270">
                <comment line="274">
                    DER OID                    
                </comment>
                <comment line="277">
                    seed is twice the key size (in bytes) plus 1                    
                </comment>
                <declaration name="s" type="byte[]" line="271"/>
                <declaration name="params" type="ECParameterSpec" line="272"/>
                <declaration name="encodedParams" type="byte[]" line="273"/>
                <declaration name="keySize" type="int" line="274"/>
                <declaration name="seed" type="byte[]" line="277"/>
                <scope line="278"/>
                <scope line="283"/>
                <scope line="288"/>
            </method>
            <method name="engineVerify" type="boolean" line="295">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <comment line="300">
                    DER OID                    
                </comment>
                <comment line="304">
                    instanceof ECPublicKey                    
                </comment>
                <declaration name="w" type="byte[]" line="297"/>
                <declaration name="params" type="ECParameterSpec" line="298"/>
                <declaration name="encodedParams" type="byte[]" line="299"/>
                <scope line="301"/>
                <scope line="303"/>
                <scope line="307"/>
                <scope line="312"/>
            </method>
            <method name="engineSetParameter" type="void" line="320">
                <params>
                    <param name="param" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="engineGetParameter" type="Object" line="327">
                <params>
                    <param name="param" type="String"/>
                </params>
            </method>
            <method name="encodeSignature" type="byte[]" line="332">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <scope line="334">
                    <declaration name="n" type="int" line="336"/>
                    <declaration name="bytes" type="byte[]" line="337"/>
                    <declaration name="r" type="BigInteger" line="339"/>
                    <declaration name="s" type="BigInteger" line="341"/>
                    <declaration name="out" type="DerOutputStream" line="343"/>
                    <declaration name="result" type="DerValue" line="346"/>
                </scope>
                <scope line="351"/>
            </method>
            <method name="decodeSignature" type="byte[]" line="357">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
                <comment line="365">
                    trim leading zeroes                    
                </comment>
                <comment line="369">
                    r and s each occupy half the array                    
                </comment>
                <scope line="359">
                    <declaration name="in" type="DerInputStream" line="360"/>
                    <declaration name="values" type="DerValue[]" line="361"/>
                    <declaration name="r" type="BigInteger" line="362"/>
                    <declaration name="s" type="BigInteger" line="363"/>
                    <declaration name="rBytes" type="byte[]" line="365"/>
                    <declaration name="sBytes" type="byte[]" line="366"/>
                    <declaration name="k" type="int" line="367"/>
                    <declaration name="result" type="byte[]" line="369"/>
                </scope>
                <scope line="376"/>
            </method>
            <method name="trimZeroes" type="byte[]" line="382">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="i" type="int" line="383"/>
                <scope line="384"/>
                <scope line="387"/>
                <declaration name="t" type="byte[]" line="390"/>
            </method>
            <method name="signDigest" type="byte[]" line="395"/>
            <javadoc line="395">
                Signs the digest using the private key.                
                <param>
                    digest the digest to be signed.                    
                </param>
                <param>
                    s the private key's S value.                    
                </param>
                <param>
                    encodedParams the curve's DER encoded object identifier.                    
                </param>
                <param>
                    seed the random seed.                    
                </param>
                <return>
                    byte[] the signature.                    
                </return>
            </javadoc>
            <method name="verifySignedDigest" type="boolean" line="408"/>
            <javadoc line="408">
                Verifies the signed digest using the public key.                
                <param>
                    signedDigest the signature to be verified. It is encoded
                      as a concatenation of the key's R and S values.                    
                </param>
                <param>
                    digest the digest to be used.                    
                </param>
                <param>
                    w the public key's W point (in uncompressed form).                    
                </param>
                <param>
                    encodedParams the curve's DER encoded object identifier.                    
                </param>
                <return>
                    boolean true if the signature is successfully verified.                    
                </return>
            </javadoc>
        </class>
    </source>