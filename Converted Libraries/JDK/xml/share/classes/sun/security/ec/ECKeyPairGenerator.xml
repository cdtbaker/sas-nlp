<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.ec">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.ECGenParameterSpec"/>
        <import package="java.security.spec.ECParameterSpec"/>
        <import package="java.security.spec.ECPoint"/>
        <import package="sun.security.ec.NamedCurve"/>
        <import package="sun.security.ec.ECParameters"/>
        <import package="sun.security.ec.ECPrivateKeyImpl"/>
        <import package="sun.security.ec.ECPublicKeyImpl"/>
        <import package="sun.security.jca.JCAUtil"/>
        <class name="ECKeyPairGenerator" line="41">
            <extends class="KeyPairGeneratorSpi"/>
            <comment line="50">
                min bits (see ecc_impl.h)                
            </comment>
            <comment line="51">
                max bits (see ecc_impl.h)                
            </comment>
            <comment line="54">
                used to seed the keypair generator                
            </comment>
            <comment line="57">
                size of the key to generate, KEY_SIZE_MIN &lt;= keySize &lt;= KEY_SIZE_MAX                
            </comment>
            <comment line="60">
                parameters specified via init, if any                
            </comment>
            <comment line="71">
                initialize the generator. See JCA doc                
            </comment>
            <comment line="84">
                second initialize method. See JCA doc                
            </comment>
            <comment line="111">
                generate the keypair. See JCA doc                
            </comment>
            <comment line="163">
                Generates the keypair and returns a 2-element array of handles.
                 The first handle points to the private key, the second to the public key.                
            </comment>
            <comment line="170">
                Extracts the encoded key data using the supplied handle.                
            </comment>
            <javadoc line="41">
                EC keypair generator.
                  Standard algorithm, minimum key length is 112 bits, maximum is 571 bits.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="KEY_SIZE_MIN" type="int" line="49"/>
            <declaration name="KEY_SIZE_MAX" type="int" line="50"/>
            <declaration name="KEY_SIZE_DEFAULT" type="int" line="51"/>
            <declaration name="random" type="SecureRandom" line="54"/>
            <declaration name="keySize" type="int" line="57"/>
            <declaration name="params" type="AlgorithmParameterSpec" line="60"/>
            <javadoc line="62">
                Constructs a new ECKeyPairGenerator.                
            </javadoc>
            <method name="ECKeyPairGenerator" type="constructor" line="65">
                <comment line="66">
                    initialize to default in case the app does not call initialize()                    
                </comment>
            </method>
            <method name="initialize" type="void" line="72">
                <params>
                    <param name="keySize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="76"/>
            </method>
            <method name="initialize" type="void" line="86">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="88">
                    <scope line="90"/>
                </scope>
                <scope line="94">
                    <declaration name="name" type="String" line="95"/>
                    <scope line="97"/>
                </scope>
                <scope line="101"/>
            </method>
            <method name="generateKeyPair" type="KeyPair" line="112">
                <comment line="117">
                    seed is twice the key size (in bytes) plus 1                    
                </comment>
                <comment line="128">
                    The &apos;params&apos; object supplied above is equivalent to the native                    
                </comment>
                <comment line="129">
                    one so there is no need to fetch it.                    
                </comment>
                <comment line="131">
                    handles[0] points to the native private key                    
                </comment>
                <comment line="137">
                    handles[1] points to the native public key                    
                </comment>
                <declaration name="encodedParams" type="byte[]" line="114"/>
                <declaration name="seed" type="byte[]" line="118"/>
                <scope line="119"/>
                <scope line="124">
                    <declaration name="handles" type="long[]" line="126"/>
                    <declaration name="s" type="BigInteger" line="132"/>
                    <declaration name="privateKey" type="PrivateKey" line="134"/>
                    <declaration name="w" type="ECPoint" line="138"/>
                    <declaration name="publicKey" type="PublicKey" line="140"/>
                </scope>
                <scope line="145"/>
            </method>
            <method name="checkKeySize" type="void" line="150">
                <params>
                    <param name="keySize" type="int"/>
                </params>
                <scope line="151"/>
                <scope line="155"/>
            </method>
            <method name="generateECKeyPair" type="long[]" line="166"/>
            <method name="getEncodedBytes" type="byte[]" line="172"/>
        </class>
    </source>