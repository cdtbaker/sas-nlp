<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs">
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security"/>
        <import package="java.util.ArrayList"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.x509.KeyUsageExtension"/>
        <import package="sun.security.x509.PKIXExtensions"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="SignerInfo" line="42">
            <comment line="214">
                Returns the (user) certificate pertaining to this SignerInfo.                
            </comment>
            <comment line="223">
                Returns the certificate chain pertaining to this SignerInfo.                
            </comment>
            <comment line="277">
                Returns null if verify fails, this signerInfo if                
            </comment>
            <comment line="408">
                                
            </comment>
            <implements interface="DerEncoder"/>
            <javadoc line="42">
                A SignerInfo, as defined in PKCS#7&apos;s signedData type.                
                <author>
                    Benjamin Renaud                    
                </author>
            </javadoc>
            <declaration name="version" type="BigInteger" line="49"/>
            <declaration name="issuerName" type="X500Name" line="50"/>
            <declaration name="certificateSerialNumber" type="BigInteger" line="51"/>
            <declaration name="digestAlgorithmId" type="AlgorithmId" line="52"/>
            <declaration name="digestEncryptionAlgorithmId" type="AlgorithmId" line="53"/>
            <declaration name="encryptedDigest" type="byte[]" line="54"/>
            <declaration name="authenticatedAttributes" type="PKCS9Attributes" line="56"/>
            <declaration name="unauthenticatedAttributes" type="PKCS9Attributes" line="57"/>
            <method name="SignerInfo" type="constructor" line="63">
                <params>
                    <param name="issuerName" type="X500Name"/>
                    <param name="serial" type="BigInteger"/>
                    <param name="digestAlgorithmId" type="AlgorithmId"/>
                    <param name="digestEncryptionAlgorithmId" type="AlgorithmId"/>
                    <param name="encryptedDigest" type="byte[]"/>
                </params>
            </method>
            <method name="SignerInfo" type="constructor" line="78">
                <params>
                    <param name="issuerName" type="X500Name"/>
                    <param name="serial" type="BigInteger"/>
                    <param name="digestAlgorithmId" type="AlgorithmId"/>
                    <param name="authenticatedAttributes" type="PKCS9Attributes"/>
                    <param name="digestEncryptionAlgorithmId" type="AlgorithmId"/>
                    <param name="encryptedDigest" type="byte[]"/>
                    <param name="unauthenticatedAttributes" type="PKCS9Attributes"/>
                </params>
            </method>
            <javadoc line="89">
                Parses a PKCS#7 signer info.                
            </javadoc>
            <method name="SignerInfo" type="constructor" line="94">
                <params>
                    <param name="derin" type="DerInputStream"/>
                </params>
            </method>
            <javadoc line="98">
                Parses a PKCS#7 signer info.
                  &lt;p&gt;This constructor is used only for backwards compatibility with
                  PKCS#7 blocks that were generated using JDK1.1.x.                
                <param>
                    derin the ASN.1 encoding of the signer info.                    
                </param>
                <param>
                    oldStyle flag indicating whether or not the given signer info
                      is encoded according to JDK1.1.x.                    
                </param>
            </javadoc>
            <method name="SignerInfo" type="constructor" line="110">
                <params>
                    <param name="derin" type="DerInputStream"/>
                    <param name="oldStyle" type="boolean"/>
                </params>
                <comment line="112">
                    version                    
                </comment>
                <comment line="115">
                    issuerAndSerialNumber                    
                </comment>
                <comment line="122">
                    digestAlgorithmId                    
                </comment>
                <comment line="127">
                    authenticatedAttributes                    
                </comment>
                <comment line="129">
                    In JDK1.1.x, the authenticatedAttributes are always present,
                     encoded as an empty Set (Set of length zero)                    
                </comment>
                <comment line="133">
                    check if set of auth attributes (implicit tag) is provided
                     (auth attributes are OPTIONAL)                    
                </comment>
                <comment line="140">
                    digestEncryptionAlgorithmId - little RSA naming scheme -
                     signature == encryption...                    
                </comment>
                <comment line="146">
                    encryptedDigest                    
                </comment>
                <comment line="149">
                    unauthenticatedAttributes                    
                </comment>
                <comment line="151">
                    In JDK1.1.x, the unauthenticatedAttributes are always present,
                     encoded as an empty Set (Set of length zero)                    
                </comment>
                <comment line="155">
                    check if set of unauth attributes (implicit tag) is provided
                     (unauth attributes are OPTIONAL)                    
                </comment>
                <comment line="160">
                    ignore unsupported attrs                    
                </comment>
                <comment line="164">
                    all done                    
                </comment>
                <declaration name="issuerAndSerialNumber" type="DerValue[]" line="115"/>
                <declaration name="issuerBytes" type="byte[]" line="116"/>
                <declaration name="tmp" type="DerValue" line="122"/>
                <scope line="127"/>
                <scope line="131">
                    <scope line="134"/>
                </scope>
                <scope line="149"/>
                <scope line="153">
                    <scope line="157"/>
                </scope>
                <scope line="164"/>
            </method>
            <method name="encode" type="void" line="169">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="174">
                DER encode this object onto an output stream.
                  Implements the &lt;code&gt;DerEncoder&lt;/code&gt; interface.                
                <param>
                    outthe output stream on which to write the DER encoding.                    
                </param>
                <exception>
                    IOException on encoding error.                    
                </exception>
            </javadoc>
            <method name="derEncode" type="void" line="183">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="194">
                    encode authenticated attributes if there are any                    
                </comment>
                <comment line="202">
                    encode unauthenticated attributes if there are any                    
                </comment>
                <declaration name="seq" type="DerOutputStream" line="184"/>
                <declaration name="issuerAndSerialNumber" type="DerOutputStream" line="186"/>
                <declaration name="tmp" type="DerOutputStream" line="205"/>
            </method>
            <method name="getCertificate" type="X509Certificate" line="218">
                <params>
                    <param name="block" type="PKCS7"/>
                </params>
            </method>
            <method name="getCertificateChain" type="ArrayList<X509Certificate>" line="227">
                <params>
                    <param name="block" type="PKCS7"/>
                </params>
                <comment line="250">
                    next cert in chain found                    
                </comment>
                <comment line="252">
                    if selected cert is self-signed, we&apos;re done
                     constructing the chain                    
                </comment>
                <declaration name="userCert" type="X509Certificate" line="228"/>
                <declaration name="certList" type="ArrayList&lt;X509Certificate&gt;" line="233"/>
                <declaration name="pkcsCerts" type="X509Certificate[]" line="236"/>
                <scope line="238"/>
                <declaration name="issuer" type="Principal" line="242"/>
                <declaration name="start" type="int" line="243"/>
                <scope line="244">
                    <declaration name="match" type="boolean" line="245"/>
                    <declaration name="i" type="int" line="246"/>
                    <scope line="247">
                        <scope line="248">
                            <scope line="254"/>
                            <scope line="256">
                                <declaration name="tmpCert" type="X509Certificate" line="258"/>
                            </scope>
                        </scope>
                        <scope line="265"/>
                    </scope>
                </scope>
            </method>
            <method name="verify" type="SignerInfo" line="279">
                <params>
                    <param name="block" type="PKCS7"/>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="293">
                    if there are authenticate attributes, get the message
                     digest and compare it with the digest of data                    
                </comment>
                <comment line="299">
                    first, check content type                    
                </comment>
                <comment line="305">
                    contentType does not match, bad SignerInfo                    
                </comment>
                <comment line="307">
                    now, check message digest                    
                </comment>
                <comment line="312">
                    fail if there is no message digest                    
                </comment>
                <comment line="325">
                    message digest attribute matched
                     digest of original data                    
                </comment>
                <comment line="328">
                    the data actually signed is the DER encoding of
                     the authenticated attributes (tagged with
                     the &quot;SET OF&quot; tag, not 0xA0).                    
                </comment>
                <comment line="334">
                    put together digest algorithm and encryption algorithm
                     to form signing algorithm                    
                </comment>
                <comment line="339">
                    Workaround: sometimes the encryptionAlgname is actually
                     a signature name                    
                </comment>
                <comment line="357">
                    Make sure that if the usage of the key in the certificate is
                     restricted, it can be used for digital signatures.
                     XXX We may want to check for additional extensions in the
                     future.                    
                </comment>
                <comment line="365">
                    We don&apos;t care whether or not this extension was marked
                     critical in the certificate.
                     We&apos;re interested only in its value (i.e., the bits set)
                     and treat the extension as critical.                    
                </comment>
                <scope line="281">
                    <declaration name="content" type="ContentInfo" line="283"/>
                    <scope line="284"/>
                    <declaration name="digestAlgname" type="String" line="288"/>
                    <declaration name="dataSigned" type="byte[]" line="290"/>
                    <scope line="294"/>
                    <scope line="296">
                        <declaration name="contentType" type="ObjectIdentifier" line="299"/>
                        <declaration name="messageDigest" type="byte[]" line="307"/>
                        <declaration name="md" type="MessageDigest" line="314"/>
                        <declaration name="computedMessageDigest" type="byte[]" line="315"/>
                        <scope line="319"/>
                    </scope>
                    <declaration name="encryptionAlgname" type="String" line="335"/>
                    <declaration name="tmp" type="String" line="340"/>
                    <declaration name="algname" type="String" line="342"/>
                    <declaration name="sig" type="Signature" line="345"/>
                    <declaration name="cert" type="X509Certificate" line="346"/>
                    <scope line="348"/>
                    <scope line="351"/>
                    <declaration name="keyUsageBits" type="boolean[]" line="360"/>
                    <scope line="361">
                        <declaration name="keyUsage" type="KeyUsageExtension" line="362"/>
                        <scope line="363"/>
                        <scope line="369"/>
                        <declaration name="digSigAllowed" type="boolean" line="374"/>
                        <declaration name="nonRepuAllowed" type="boolean" line="377"/>
                        <scope line="380"/>
                    </scope>
                    <declaration name="key" type="PublicKey" line="387"/>
                    <scope line="392"/>
                </scope>
                <scope line="396"/>
                <scope line="400"/>
            </method>
            <method name="verify" type="SignerInfo" line="409">
                <params>
                    <param name="block" type="PKCS7"/>
                </params>
            </method>
            <method name="getVersion" type="BigInteger" line="414"/>
            <method name="getIssuerName" type="X500Name" line="418"/>
            <method name="getCertificateSerialNumber" type="BigInteger" line="422"/>
            <method name="getDigestAlgorithmId" type="AlgorithmId" line="426"/>
            <method name="getAuthenticatedAttributes" type="PKCS9Attributes" line="430"/>
            <method name="getDigestEncryptionAlgorithmId" type="AlgorithmId" line="434"/>
            <method name="getEncryptedDigest" type="byte[]" line="438"/>
            <method name="getUnauthenticatedAttributes" type="PKCS9Attributes" line="442"/>
            <method name="toString" type="String" line="446">
                <declaration name="hexDump" type="HexDumpEncoder" line="447"/>
                <declaration name="out" type="String" line="449"/>
                <scope line="456"/>
                <scope line="465"/>
            </method>
        </class>
    </source>