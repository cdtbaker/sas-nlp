<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Date"/>
        <import package="java.util.Hashtable"/>
        <import package="sun.security.x509.CertificateExtensions"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.util.DerEncoder"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.util.DerInputStream"/>
        <import package="sun.security.util.DerOutputStream"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="PKCS9Attribute" line="16">
            <implements interface="DerEncoder"/>
            <javadoc line="16">
                Class supporting any PKCS9 attributes.
                  Supports DER decoding and access to attribute values, but not
                  DER encoding or setting of values.
                  &lt;a name=&quot;classTable&quot;&gt;&lt;h3&gt;Type/Class Table&lt;/h3&gt;&lt;/a&gt;
                  The following table shows the correspondence between
                  PKCS9 attribute types and value component classes.
                  &lt;P&gt;
                  &lt;TABLE BORDER CELLPADDING=8 ALIGN=CENTER&gt;
                  &lt;TR&gt;
                  &lt;TH&gt;Object Identifier&lt;/TH&gt;
                  &lt;TH&gt;Attribute Name&lt;/TH&gt;
                  &lt;TH&gt;Type&lt;/TH&gt;
                  &lt;TH&gt;Value Class&lt;/TH&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.1&lt;/TD&gt;
                  &lt;TD&gt;EmailAddress&lt;/TD&gt;
                  &lt;TD&gt;Multi-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;String[]&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.2&lt;/TD&gt;
                  &lt;TD&gt;UnstructuredName&lt;/TD&gt;
                  &lt;TD&gt;Multi-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;String[]&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.3&lt;/TD&gt;
                  &lt;TD&gt;ContentType&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;ObjectIdentifier&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.4&lt;/TD&gt;
                  &lt;TD&gt;MessageDigest&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.5&lt;/TD&gt;
                  &lt;TD&gt;SigningTime&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.6&lt;/TD&gt;
                  &lt;TD&gt;Countersignature&lt;/TD&gt;
                  &lt;TD&gt;Multi-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;SignerInfo[]&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.7&lt;/TD&gt;
                  &lt;TD&gt;ChallengePassword&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;String&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.8&lt;/TD&gt;
                  &lt;TD&gt;UnstructuredAddress&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;&lt;code&gt;String&lt;/code&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.9&lt;/TD&gt;
                  &lt;TD&gt;ExtendedCertificateAttributes&lt;/TD&gt;
                  &lt;TD&gt;Multi-valued&lt;/TD&gt;
                  &lt;TD&gt;(not supported)&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.10&lt;/TD&gt;
                  &lt;TD&gt;IssuerAndSerialNumber&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;(not supported)&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.{11,12}&lt;/TD&gt;
                  &lt;TD&gt;RSA DSI proprietary&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;(not supported)&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.13&lt;/TD&gt;
                  &lt;TD&gt;S/MIME unused assignment&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;(not supported)&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.14&lt;/TD&gt;
                  &lt;TD&gt;ExtensionRequest&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;CertificateExtensions&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.15&lt;/TD&gt;
                  &lt;TD&gt;SMIMECapability&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;(not supported)&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.16.2.12&lt;/TD&gt;
                  &lt;TD&gt;SigningCertificate&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;SigningCertificateInfo&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;1.2.840.113549.1.9.16.2.14&lt;/TD&gt;
                  &lt;TD&gt;SignatureTimestampToken&lt;/TD&gt;
                  &lt;TD&gt;Single-valued&lt;/TD&gt;
                  &lt;TD&gt;byte[]&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;                
                <author>
                    Douglas Hoover                    
                </author>
            </javadoc>
            <declaration name="debug" type="Debug" line="131"/>
            <declaration name="PKCS9_OIDS" type="ObjectIdentifier[]" line="132"/>
            <javadoc line="132">
                Array of attribute OIDs defined in PKCS9, by number.                
            </javadoc>
            <scope line="136">
                <scope line="137"/>
            </scope>
            <declaration name="EMAIL_ADDRESS_OID" type="ObjectIdentifier" line="143"/>
            <declaration name="UNSTRUCTURED_NAME_OID" type="ObjectIdentifier" line="144"/>
            <declaration name="CONTENT_TYPE_OID" type="ObjectIdentifier" line="145"/>
            <declaration name="MESSAGE_DIGEST_OID" type="ObjectIdentifier" line="146"/>
            <declaration name="SIGNING_TIME_OID" type="ObjectIdentifier" line="147"/>
            <declaration name="COUNTERSIGNATURE_OID" type="ObjectIdentifier" line="148"/>
            <declaration name="CHALLENGE_PASSWORD_OID" type="ObjectIdentifier" line="149"/>
            <declaration name="UNSTRUCTURED_ADDRESS_OID" type="ObjectIdentifier" line="150"/>
            <declaration name="EXTENDED_CERTIFICATE_ATTRIBUTES_OID" type="ObjectIdentifier" line="151"/>
            <declaration name="ISSUER_SERIALNUMBER_OID" type="ObjectIdentifier" line="152"/>
            <declaration name="EXTENSION_REQUEST_OID" type="ObjectIdentifier" line="153"/>
            <declaration name="SMIME_CAPABILITY_OID" type="ObjectIdentifier" line="154"/>
            <declaration name="SIGNING_CERTIFICATE_OID" type="ObjectIdentifier" line="155"/>
            <declaration name="SIGNATURE_TIMESTAMP_TOKEN_OID" type="ObjectIdentifier" line="156"/>
            <declaration name="EMAIL_ADDRESS_STR" type="String" line="157"/>
            <declaration name="UNSTRUCTURED_NAME_STR" type="String" line="158"/>
            <declaration name="CONTENT_TYPE_STR" type="String" line="159"/>
            <declaration name="MESSAGE_DIGEST_STR" type="String" line="160"/>
            <declaration name="SIGNING_TIME_STR" type="String" line="161"/>
            <declaration name="COUNTERSIGNATURE_STR" type="String" line="162"/>
            <declaration name="CHALLENGE_PASSWORD_STR" type="String" line="163"/>
            <declaration name="UNSTRUCTURED_ADDRESS_STR" type="String" line="164"/>
            <declaration name="EXTENDED_CERTIFICATE_ATTRIBUTES_STR" type="String" line="165"/>
            <declaration name="ISSUER_SERIALNUMBER_STR" type="String" line="166"/>
            <declaration name="RSA_PROPRIETARY_STR" type="String" line="167"/>
            <declaration name="SMIME_SIGNING_DESC_STR" type="String" line="168"/>
            <declaration name="EXTENSION_REQUEST_STR" type="String" line="169"/>
            <declaration name="SMIME_CAPABILITY_STR" type="String" line="170"/>
            <declaration name="SIGNING_CERTIFICATE_STR" type="String" line="171"/>
            <declaration name="SIGNATURE_TIMESTAMP_TOKEN_STR" type="String" line="172"/>
            <declaration name="NAME_OID_TABLE" type="Hashtable&lt;String,ObjectIdentifier&gt;" line="173"/>
            <javadoc line="173">
                Hashtable mapping names and variant names of supported
                  attributes to their OIDs. This table contains all name forms
                  that occur in PKCS9, in lower case.                
            </javadoc>
            <scope line="179"/>
            <declaration name="OID_NAME_TABLE" type="Hashtable&lt;ObjectIdentifier,String&gt;" line="198"/>
            <javadoc line="198">
                Hashtable mapping attribute OIDs defined in PKCS9 to the
                  corresponding attribute value type.                
            </javadoc>
            <scope line="203"/>
            <declaration name="PKCS9_VALUE_TAGS" type="Byte[][]" line="222"/>
            <javadoc line="222">
                Acceptable ASN.1 tags for DER encodings of values of PKCS9
                  attributes, by index in &lt;code&gt;PKCS9_OIDS&lt;/code&gt;.
                  Sets of acceptable tags are represented as arrays.                
            </javadoc>
            <declaration name="VALUE_CLASSES" type="Class[]" line="228"/>
            <scope line="229">
                <scope line="230">
                    <declaration name="str" type="Class" line="231"/>
                </scope>
                <scope line="251"/>
            </scope>
            <declaration name="SINGLE_VALUED" type="boolean[]" line="255"/>
            <javadoc line="255">
                Array indicating which PKCS9 attributes are single-valued,
                  by index in &lt;code&gt;PKCS9_OIDS&lt;/code&gt;.                
            </javadoc>
            <declaration name="index" type="int" line="260"/>
            <javadoc line="260">
                The OID of this attribute is &lt;code&gt;PKCS9_OIDS[index]&lt;/code&gt;.                
            </javadoc>
            <declaration name="value" type="Object" line="264"/>
            <javadoc line="264">
                Value set of this attribute.  Its class is given by
                  &lt;code&gt;VALUE_CLASSES[index]&lt;/code&gt;.                
            </javadoc>
            <javadoc line="269">
                Construct an attribute object from the attribute&apos;s OID and
                  value.  If the attribute is single-valued, provide only one
                  value.  If the attribute is multi-valued, provide an array
                  containing all the values.
                  Arrays of length zero are accepted, though probably useless.
                  &lt;P&gt; The
                  &lt;a href=#classTable&gt;table&lt;/a&gt; gives the class that &lt;code&gt;value&lt;/code&gt;
                  must have for a given attribute.                
            </javadoc>
            <method name="PKCS9Attribute" type="constructor" line="279">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="282">
                Construct an attribute object from the attribute&apos;s name and
                  value.  If the attribute is single-valued, provide only one
                  value.  If the attribute is multi-valued, provide an array
                  containing all the values.
                  Arrays of length zero are accepted, though probably useless.
                  &lt;P&gt; The
                  &lt;a href=#classTable&gt;table&lt;/a&gt; gives the class that &lt;code&gt;value&lt;/code&gt;
                  must have for a given attribute. Reasonable variants of these
                  attributes are accepted; in particular, case does not matter.                
                <exception>
                    IllegalArgumentExceptionif the <code>name</code> is not recognized of the
                      <code>value</code> has the wrong type.                    
                </exception>
            </javadoc>
            <method name="PKCS9Attribute" type="constructor" line="295">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="oid" type="ObjectIdentifier" line="296"/>
            </method>
            <method name="init" type="void" line="300">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="306">
                Construct a PKCS9Attribute from its encoding on an input
                  stream.                
                <param>
                    val the DerValue representing the DER encoding of the attribute.                    
                </param>
                <exception>
                    IOException on parsing error.                    
                </exception>
            </javadoc>
            <method name="PKCS9Attribute" type="constructor" line="312">
                <params>
                    <param name="derVal" type="DerValue"/>
                </params>
                <declaration name="derIn" type="DerInputStream" line="313"/>
                <declaration name="val" type="DerValue[]" line="314"/>
                <declaration name="oid" type="ObjectIdentifier" line="317"/>
                <scope line="319">
                    <scope line="320"/>
                </scope>
                <declaration name="elems" type="DerValue[]" line="325"/>
                <declaration name="tag" type="Byte" line="327"/>
                <scope line="328"/>
                <scope line="336">
                    <declaration name="values" type="String[]" line="337"/>
                </scope>
                <scope line="352">
                    <declaration name="values" type="SignerInfo[]" line="353"/>
                </scope>
            </method>
            <javadoc line="384">
                Write the DER encoding of this attribute to an output stream.
                  &lt;P&gt; N.B.: This method always encodes values of
                  ChallengePassword and UnstructuredAddress attributes as ASN.1
                  &lt;code&gt;PrintableString&lt;/code&gt;s, without checking whether they
                  should be encoded as &lt;code&gt;T61String&lt;/code&gt;s.                
            </javadoc>
            <method name="derEncode" type="void" line="391">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="temp" type="DerOutputStream" line="392"/>
                <scope line="397">
                    <declaration name="values" type="String[]" line="398"/>
                    <declaration name="temps" type="DerOutputStream[]" line="399"/>
                    <scope line="400"/>
                </scope>
                <scope line="408">
                    <declaration name="temp2" type="DerOutputStream" line="409"/>
                </scope>
                <scope line="415">
                    <declaration name="temp2" type="DerOutputStream" line="416"/>
                </scope>
                <scope line="422">
                    <declaration name="temp2" type="DerOutputStream" line="423"/>
                </scope>
                <scope line="432">
                    <declaration name="temp2" type="DerOutputStream" line="433"/>
                </scope>
                <scope line="439">
                    <declaration name="values" type="String[]" line="440"/>
                    <declaration name="temps" type="DerOutputStream[]" line="441"/>
                    <scope line="442"/>
                </scope>
                <scope line="459">
                    <declaration name="temp2" type="DerOutputStream" line="460"/>
                    <declaration name="exts" type="CertificateExtensions" line="461"/>
                    <scope line="462"/>
                    <scope line="465"/>
                </scope>
                <declaration name="derOut" type="DerOutputStream" line="480"/>
            </method>
            <javadoc line="484">
                Get the value of this attribute.  If the attribute is
                  single-valued, return just the one value.  If the attribute is
                  multi-valued, return an array containing all the values.
                  It is possible for this array to be of length 0.
                  &lt;P&gt; The
                  &lt;a href=#classTable&gt;table&lt;/a&gt; gives the class of the value returned,
                  depending on the type of this attribute.                
            </javadoc>
            <method name="getValue" type="Object" line="493"/>
            <javadoc line="496">
                Show whether this attribute is single-valued.                
            </javadoc>
            <method name="isSingleValued" type="boolean" line="499"/>
            <javadoc line="502">
                Return the OID of this attribute.                
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="505"/>
            <javadoc line="508">
                Return the name of this attribute.                
            </javadoc>
            <method name="getName" type="String" line="511"/>
            <javadoc line="514">
                Return the OID for a given attribute name or null if we don&apos;t recognize
                  the name.                
            </javadoc>
            <method name="getOID" type="ObjectIdentifier" line="518">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="521">
                Return the attribute name for a given OID or null if we don&apos;t recognize
                  the oid.                
            </javadoc>
            <method name="getName" type="String" line="525">
                <params>
                    <param name="oid" type="ObjectIdentifier"/>
                </params>
            </method>
            <javadoc line="528">
                Returns a string representation of this attribute.                
            </javadoc>
            <method name="toString" type="String" line="531">
                <declaration name="buf" type="StringBuffer" line="532"/>
                <scope line="536">
                    <scope line="537">
                        <declaration name="hexDump" type="HexDumpEncoder" line="538"/>
                    </scope>
                    <scope line="541"/>
                </scope>
                <scope line="547">
                    <declaration name="first" type="boolean" line="548"/>
                    <declaration name="values" type="Object[]" line="549"/>
                    <scope line="550"/>
                </scope>
            </method>
            <javadoc line="558">
                Beginning the search at &lt;code&gt;start&lt;/code&gt;, find the first
                  index &lt;code&gt;i&lt;/code&gt; such that &lt;code&gt;a[i] = obj&lt;/code&gt;.                
                <return>
                    the index, if found, and -1 otherwise.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="563">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="a" type="Object[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="564"/>
            </method>
            <javadoc line="569">
                Throw an exception when there are multiple values for
                  a single-valued attribute.                
            </javadoc>
            <method name="throwSingleValuedException" type="void" line="573"/>
            <javadoc line="576">
                Throw an exception when the tag on a value encoding is
                  wrong for the attribute whose value it is.                
            </javadoc>
            <method name="throwTagException" type="void" line="580">
                <params>
                    <param name="tag" type="Byte"/>
                </params>
                <declaration name="expectedTags" type="Byte[]" line="581"/>
                <declaration name="msg" type="StringBuffer" line="582"/>
                <scope line="591"/>
            </method>
        </class>
    </source>