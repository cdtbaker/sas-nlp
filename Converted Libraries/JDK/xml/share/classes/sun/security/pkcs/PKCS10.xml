<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.IOException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.Signature"/>
        <import package="java.security.SignatureException"/>
        <import package="java.security.PublicKey"/>
        <import package="sun.misc.BASE64Encoder"/>
        <import package="sun.security.util"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.x509.X509Key"/>
        <import package="sun.security.x509.X500Name"/>
        <class name="PKCS10" line="48">
            <comment line="354">
                signed                
            </comment>
            <javadoc line="48">
                A PKCS #10 certificate request is created and sent to a Certificate
                  Authority, which then creates an X.509 certificate and returns it to
                  the entity that requested it. A certificate request basically consists
                  of the subject&apos;s X.500 name, public key, and optionally some attributes,
                  signed using the corresponding private key.
                  The ASN.1 syntax for a Certification Request is:
                  &lt;pre&gt;
                  CertificationRequest ::= SEQUENCE {
                  certificationRequestInfo CertificationRequestInfo,
                  signatureAlgorithm       SignatureAlgorithmIdentifier,
                  signature                Signature
                  }
                  SignatureAlgorithmIdentifier ::= AlgorithmIdentifier
                  Signature ::= BIT STRING
                  CertificationRequestInfo ::= SEQUENCE {
                  version                 Version,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  attributes [0] IMPLICIT Attributes
                  }
                  Attributes ::= SET OF Attribute
                  &lt;/pre&gt;                
                <author>
                    David Brownell                    
                </author>
                <author>
                    Amit Kapoor                    
                </author>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <javadoc line="80">
                Constructs an unsigned PKCS #10 certificate request.  Before this
                  request may be used, it must be encoded and signed.  Then it
                  must be retrieved in some conventional format (e.g. string).                
                <param>
                    publicKey the public key that should be placed
                      into the certificate generated by the CA.                    
                </param>
            </javadoc>
            <method name="PKCS10" type="constructor" line="88">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                </params>
            </method>
            <javadoc line="93">
                Constructs an unsigned PKCS #10 certificate request.  Before this
                  request may be used, it must be encoded and signed.  Then it
                  must be retrieved in some conventional format (e.g. string).                
                <param>
                    publicKey the public key that should be placed
                      into the certificate generated by the CA.                    
                </param>
                <param>
                    attributes additonal set of PKCS10 attributes requested
                      for in the certificate.                    
                </param>
            </javadoc>
            <method name="PKCS10" type="constructor" line="103">
                <params>
                    <param name="publicKey" type="PublicKey"/>
                    <param name="attributes" type="PKCS10Attributes"/>
                </params>
            </method>
            <javadoc line="108">
                Parses an encoded, signed PKCS #10 certificate request, verifying
                  the request&apos;s signature as it does so.  This constructor would
                  typically be used by a Certificate Authority, from which a new
                  certificate would then be constructed.                
                <param>
                    data the DER-encoded PKCS #10 request.                    
                </param>
                <exception>
                    IOException for low level errors reading the data                    
                </exception>
                <exception>
                    SignatureException when the signature is invalid                    
                </exception>
                <exception>
                    NoSuchAlgorithmException when the signature
                      algorithm is not supported in this environment                    
                </exception>
            </javadoc>
            <method name="PKCS10" type="constructor" line="121">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="130">
                                        
                </comment>
                <comment line="131">
                    Outer sequence:  request, signature algorithm, signature.                    
                </comment>
                <comment line="132">
                    Parse, and prepare to verify later.                    
                </comment>
                <comment line="133">
                                        
                </comment>
                <comment line="140">
                    reusing this variable                    
                </comment>
                <comment line="144">
                                        
                </comment>
                <comment line="145">
                    Inner sequence:  version, name, key, attributes                    
                </comment>
                <comment line="146">
                                        
                </comment>
                <comment line="157">
                    Cope with a somewhat common illegal PKCS #10 format                    
                </comment>
                <comment line="166">
                                        
                </comment>
                <comment line="167">
                    OK, we parsed it all ... validate the signature using the                    
                </comment>
                <comment line="168">
                    key and signature algorithm we found.                    
                </comment>
                <comment line="169">
                                        
                </comment>
                <declaration name="in" type="DerInputStream" line="122"/>
                <declaration name="seq" type="DerValue[]" line="123"/>
                <declaration name="id" type="AlgorithmId" line="124"/>
                <declaration name="sigData" type="byte[]" line="125"/>
                <declaration name="sig" type="Signature" line="126"/>
                <declaration name="serial" type="BigInteger" line="147"/>
                <declaration name="val" type="DerValue" line="148"/>
                <scope line="170"/>
                <scope line="176"/>
            </method>
            <javadoc line="181">
                Create the signed certificate request.  This will later be
                  retrieved in either string or binary format.                
                <param>
                    subject identifies the signer (by X.500 name).                    
                </param>
                <param>
                    signature private key and signing algorithm to use.                    
                </param>
                <exception>
                    IOException on errors.                    
                </exception>
                <exception>
                    CertificateException on certificate handling errors.                    
                </exception>
                <exception>
                    SignatureException on signature handling errors.                    
                </exception>
            </javadoc>
            <method name="encodeAndSign" type="void" line="192">
                <params>
                    <param name="subject" type="X500Name"/>
                    <param name="signature" type="Signature"/>
                </params>
                <comment line="202">
                    Encode cert request info, wrap in a sequence for signing                    
                </comment>
                <comment line="206">
                    PKCS #10 v1.0                    
                </comment>
                <comment line="207">
                    X.500 name                    
                </comment>
                <comment line="208">
                    public key                    
                </comment>
                <comment line="212">
                    wrap it!                    
                </comment>
                <comment line="216">
                    Sign it ...                    
                </comment>
                <comment line="223">
                    Build guts of SIGNED macro                    
                </comment>
                <comment line="232">
                    sig algorithm                    
                </comment>
                <comment line="233">
                    sig                    
                </comment>
                <comment line="235">
                    Wrap those guts in a sequence                    
                </comment>
                <declaration name="out" type="DerOutputStream" line="193"/>
                <declaration name="certificateRequestInfo" type="byte[]" line="194"/>
                <declaration name="sig" type="byte[]" line="195"/>
                <declaration name="algId" type="AlgorithmId" line="226"/>
                <scope line="227"/>
                <scope line="229"/>
            </method>
            <javadoc line="243">
                Returns the subject&apos;s name.                
            </javadoc>
            <method name="getSubjectName" type="X500Name" line="246"/>
            <javadoc line="248">
                Returns the subject&apos;s public key.                
            </javadoc>
            <method name="getSubjectPublicKeyInfo" type="PublicKey" line="252"/>
            <javadoc line="254">
                Returns the additional attributes requested.                
            </javadoc>
            <method name="getAttributes" type="PKCS10Attributes" line="258"/>
            <javadoc line="260">
                Returns the encoded and signed certificate request as a
                  DER-encoded byte array.                
                <return>
                    the certificate request, or null if encodeAndSign()
                      has not yet been called.                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="267"/>
            <javadoc line="274">
                Prints an E-Mailable version of the certificate request on the print
                  stream passed.  The format is a common base64 encoded one, supported
                  by most Certificate Authorities because Netscape web servers have
                  used this for some time.  Some certificate authorities expect some
                  more information, in particular contact information for the web
                  server administrator.                
                <param>
                    out the print stream where the certificate request
                      will be printed.                    
                </param>
                <exception>
                    IOException when an output operation failed                    
                </exception>
                <exception>
                    SignatureException when the certificate request was
                      not yet signed.                    
                </exception>
            </javadoc>
            <method name="print" type="void" line="289">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="encoder" type="BASE64Encoder" line="293"/>
            </method>
            <javadoc line="300">
                Provides a short description of this request.                
            </javadoc>
            <method name="toString" type="String" line="303"/>
            <javadoc line="311">
                Compares this object for equality with the specified
                  object. If the &lt;code&gt;other&lt;/code&gt; object is an
                  &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;PKCS10&lt;/code&gt;, then
                  its encoded form is retrieved and compared with the
                  encoded form of this certificate request.                
                <param>
                    other the object to test for equality with this object.                    
                </param>
                <return>
                    true iff the encoded forms of the two certificate
                      requests match, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="322">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <comment line="327">
                    not signed yet                    
                </comment>
                <declaration name="otherEncoded" type="byte[]" line="329"/>
            </method>
            <javadoc line="336">
                Returns a hashcode value for this certificate request from its
                  encoded form.                
                <return>
                    the hashcode value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="342">
                <declaration name="retval" type="int" line="343"/>
            </method>
            <declaration name="subject" type="X500Name" line="350"/>
            <declaration name="subjectPublicKeyInfo" type="PublicKey" line="351"/>
            <declaration name="attributeSet" type="PKCS10Attributes" line="352"/>
            <declaration name="encoded" type="byte[]" line="353"/>
        </class>
    </source>