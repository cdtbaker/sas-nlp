<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.security.pkcs">
        <import package="java.io"/>
        <import package="java.util.Properties"/>
        <import package="java.math"/>
        <import package="java.security.Key"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.Security"/>
        <import package="java.security.Provider"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.x509"/>
        <import package="sun.security.util"/>
        <class name="PKCS8Key" line="18">
            <implements interface="PrivateKey"/>
            <javadoc line="18">
                Holds a PKCS#8 key, for example a private key                
                <author>
                    Dave Brownell                    
                </author>
                <author>
                    Benjamin Renaud                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <javadoc line="24">
                use serialVersionUID from JDK 1.1. for interoperability                
            </javadoc>
            <declaration name="algid" type="AlgorithmId" line="28"/>
            <declaration name="key" type="byte[]" line="29"/>
            <declaration name="encodedKey" type="byte[]" line="30"/>
            <declaration name="version" type="BigInteger" line="31"/>
            <javadoc line="32">
                Default constructor.  The key constructed must have its key
                  and algorithm initialized before it may be used, for example
                  by using &lt;code&gt;decode&lt;/code&gt;.                
            </javadoc>
            <method name="PKCS8Key" type="constructor" line="37"/>
            <method name="PKCS8Key" type="constructor" line="39">
                <params>
                    <param name="algid" type="AlgorithmId"/>
                    <param name="key" type="byte"/>
                </params>
            </method>
            <method name="parse" type="PKCS8Key" line="44">
                <params>
                    <param name="in" type="DerValue"/>
                </params>
                <declaration name="key" type="PrivateKey" line="45"/>
            </method>
            <javadoc line="50">
                Construct PKCS#8 subject public key from a DER value.  If
                  the runtime environment is configured with a specific class for
                  this kind of key, a subclass is returned.  Otherwise, a generic
                  PKCS8Key object is returned.
                  &lt;P&gt;This mechanism gurantees that keys (and algorithms) may be
                  freely manipulated and transferred, without risk of losing
                  information.  Also, when a key (or algorithm) needs some special
                  handling, that specific need can be accomodated.                
                <param>
                    in the DER-encoded SubjectPublicKeyInfo value                    
                </param>
                <exception>
                    IOException on data format errors                    
                </exception>
            </javadoc>
            <method name="parseKey" type="PrivateKey" line="62">
                <params>
                    <param name="in" type="DerValue"/>
                </params>
                <declaration name="algorithm" type="AlgorithmId" line="63"/>
                <declaration name="privKey" type="PrivateKey" line="64"/>
                <declaration name="parsedVersion" type="BigInteger" line="66"/>
                <scope line="67"/>
                <scope line="71"/>
                <scope line="74"/>
            </method>
            <javadoc line="80">
                Parse the key bits.  This may be redefined by subclasses to take
                  advantage of structure within the key.  For example, RSA public
                  keys encapsulate two unsigned integers (modulus and exponent) as
                  DER values within the &lt;code&gt;key&lt;/code&gt; bits; Diffie-Hellman and
                  DSS/DSA keys encapsulate a single unsigned integer.
                  &lt;P&gt;This function is called when creating PKCS#8 SubjectPublicKeyInfo
                  values using the PKCS8Key member functions, such as &lt;code&gt;parse&lt;/code&gt;
                  and &lt;code&gt;decode&lt;/code&gt;.                
                <exception>
                    IOException if a parsing error occurs.                    
                </exception>
                <exception>
                    InvalidKeyException if the key encoding is invalid.                    
                </exception>
            </javadoc>
            <method name="parseKeyBits" type="void" line="92"/>
            <method name="buildPKCS8Key" type="PrivateKey" line="95">
                <params>
                    <param name="algid" type="AlgorithmId"/>
                    <param name="key" type="byte[]"/>
                </params>
                <declaration name="pkcs8EncodedKeyStream" type="DerOutputStream" line="96"/>
                <declaration name="pkcs8KeySpec" type="PKCS8EncodedKeySpec" line="98"/>
                <scope line="99">
                    <declaration name="keyFac" type="KeyFactory" line="100"/>
                </scope>
                <scope line="103"/>
                <scope line="105"/>
                <declaration name="classname" type="String" line="107"/>
                <scope line="108">
                    <declaration name="props" type="Properties" line="109"/>
                    <declaration name="keytype" type="String" line="110"/>
                    <declaration name="sunProvider" type="Provider" line="111"/>
                    <scope line="115"/>
                    <declaration name="keyClass" type="Class" line="118"/>
                    <scope line="119"/>
                    <scope line="122">
                        <declaration name="cl" type="ClassLoader" line="123"/>
                        <scope line="124"/>
                    </scope>
                    <declaration name="inst" type="Object" line="128"/>
                    <declaration name="result" type="PKCS8Key" line="129"/>
                    <scope line="131"/>
                </scope>
                <scope line="139"/>
                <scope line="141"/>
                <scope line="143"/>
                <declaration name="result" type="PKCS8Key" line="146"/>
            </method>
            <javadoc line="151">
                Returns the algorithm to be used with this key.                
            </javadoc>
            <method name="getAlgorithm" type="String" line="154"/>
            <javadoc line="157">
                Returns the algorithm ID to be used with this key.                
            </javadoc>
            <method name="getAlgorithmId" type="AlgorithmId" line="160"/>
            <javadoc line="163">
                PKCS#8 sequence on the DER output stream.                
            </javadoc>
            <method name="encode" type="void" line="166">
                <params>
                    <param name="out" type="DerOutputStream"/>
                </params>
            </method>
            <javadoc line="169">
                Returns the DER-encoded form of the key as a byte array.                
            </javadoc>
            <method name="getEncoded" type="byte[]" line="172">
                <declaration name="result" type="byte[]" line="173"/>
                <scope line="174"/>
                <scope line="177"/>
            </method>
            <javadoc line="181">
                Returns the format for this key: &quot;PKCS#8&quot;                
            </javadoc>
            <method name="getFormat" type="String" line="184"/>
            <javadoc line="187">
                Returns the DER-encoded form of the key as a byte array.                
                <exception>
                    InvalidKeyException if an encoding error occurs.                    
                </exception>
            </javadoc>
            <method name="encode" type="byte[]" line="191">
                <scope line="192">
                    <scope line="193">
                        <declaration name="out" type="DerOutputStream" line="194"/>
                    </scope>
                    <scope line="199"/>
                </scope>
            </method>
            <method name="toString" type="String" line="205">
                <declaration name="encoder" type="HexDumpEncoder" line="206"/>
            </method>
            <javadoc line="209">
                Initialize an PKCS8Key object from an input stream.  The data
                  on that input stream must be encoded using DER, obeying the
                  PKCS#8 format: a sequence consisting of a version, an algorithm
                  ID and a bit string which holds the key.  (That bit string is
                  often used to encapsulate another DER encoded sequence.)
                  &lt;P&gt;Subclasses should not normally redefine this method; they should
                  instead provide a &lt;code&gt;parseKeyBits&lt;/code&gt; method to parse any
                  fields inside the &lt;code&gt;key&lt;/code&gt; member.                
                <param>
                    in an input stream with a DER-encoded PKCS#8
                      SubjectPublicKeyInfo value                    
                </param>
                <exception>
                    InvalidKeyException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="decode" type="void" line="222">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="val" type="DerValue" line="223"/>
                <scope line="224">
                    <declaration name="version" type="BigInteger" line="227"/>
                    <scope line="228"/>
                    <scope line="234"/>
                </scope>
                <scope line="237"/>
            </method>
            <method name="decode" type="void" line="241">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                </params>
            </method>
            <method name="writeReplace" type="Object" line="244"/>
            <javadoc line="247">
                Serialization read ... PKCS#8 keys serialize as
                  themselves, and they&apos;re parsed when they get read back.                
            </javadoc>
            <method name="readObject" type="void" line="251">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <method name="encode" type="void" line="260">
                <params>
                    <param name="out" type="DerOutputStream"/>
                    <param name="algid" type="AlgorithmId"/>
                    <param name="key" type="byte[]"/>
                </params>
                <declaration name="tmp" type="DerOutputStream" line="261"/>
            </method>
            <javadoc line="267">
                Compares two private keys. This returns false if the object with which
                  to compare is not of type &lt;code&gt;Key&lt;/code&gt;.
                  Otherwise, the encoding of this key object is compared with the
                  encoding of the given key object.                
                <param>
                    object the object with which to compare                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this key has the same encoding as the
                      object argument; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="276">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="277"/>
                <scope line="280">
                    <declaration name="b1" type="byte[]" line="281"/>
                    <scope line="282"/>
                    <scope line="285"/>
                    <declaration name="b2" type="byte[]" line="288"/>
                    <declaration name="i" type="int" line="289"/>
                    <scope line="291">
                        <scope line="292"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="300">
                Calculates a hash code value for this object. Objects
                  which are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="304">
                <declaration name="retval" type="int" line="305"/>
                <declaration name="b1" type="byte[]" line="306"/>
                <scope line="307"/>
            </method>
        </class>
    </source>