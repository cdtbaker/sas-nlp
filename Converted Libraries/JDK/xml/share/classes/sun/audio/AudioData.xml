<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.audio">
        <import package="java.io"/>
        <import package="javax.sound.sampled"/>
        <class name="AudioData" line="32">
            <comment line="43">
                the idea here is that the AudioData object encapsulates the
                 data you need to play an audio clip based on a defined set
                 of data.  to do this, you require the audio data (a byte
                 array rather than an arbitrary input stream) and a format
                 object.                
            </comment>
            <comment line="61">
                bigendian (irrelevant for 8-bit data)                
            </comment>
            <comment line="63">
                carry forth the format array amusement                
            </comment>
            <javadoc line="32">
                A clip of audio data. This data can be used to construct an
                  AudioDataStream, which can be played. &lt;p&gt;                
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <see>
                    AudioDataStream                    
                </see>
                <see>
                    AudioPlayer                    
                </see>
            </javadoc>
            <declaration name="DEFAULT_FORMAT" type="AudioFormat" line="53"/>
            <declaration name="format" type="AudioFormat" line="62"/>
            <declaration name="buffer" type="byte" line="63"/>
            <javadoc line="65">
                Constructor                
            </javadoc>
            <method name="AudioData" type="constructor" line="68">
                <params>
                    <param name="buffer" type="byte"/>
                </params>
                <comment line="71">
                    if we cannot extract valid format information, we resort to assuming the data will be 8k mono u-law                    
                </comment>
                <comment line="72">
                    in order to provide maximal backwards compatibility....                    
                </comment>
                <comment line="75">
                    okay, we need to extract the format and the byte buffer of data                    
                </comment>
                <comment line="80">
                    $$fb 2002-10-27: buffer contains the file header now!                    
                </comment>
                <comment line="82">
                    use default format                    
                </comment>
                <comment line="84">
                    use default format                    
                </comment>
                <scope line="76">
                    <declaration name="ais" type="AudioInputStream" line="77"/>
                </scope>
                <scope line="81"/>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Non-public constructor; this is the one we use in ADS and CADS
                  constructors.                
            </javadoc>
            <method name="AudioData" type="constructor" line="93">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="buffer" type="byte[]"/>
                </params>
            </method>
        </class>
    </source>