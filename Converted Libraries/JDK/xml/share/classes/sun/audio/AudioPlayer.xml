<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.audio">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="AudioPlayer" line="39">
            <extends class="Thread"/>
            <javadoc line="39">
                This class provides an interface to play audio streams.
                  To play an audio stream use:
                  &lt;pre&gt;
                  AudioPlayer.player.start(audiostream);
                  &lt;/pre&gt;
                  To stop playing an audio stream use:
                  &lt;pre&gt;
                  AudioPlayer.player.stop(audiostream);
                  &lt;/pre&gt;
                  To play an audio stream from a URL use:
                  &lt;pre&gt;
                  AudioStream audiostream = new AudioStream(url.openStream());
                  AudioPlayer.player.start(audiostream);
                  &lt;/pre&gt;
                  To play a continuous sound you first have to
                  create an AudioData instance and use it to construct a
                  ContinuousAudioDataStream.
                  For example:
                  &lt;pre&gt;
                  AudioData data = new AudioStream(url.openStream()).getData();
                  ContinuousAudioDataStream audiostream = new ContinuousAudioDataStream(data);
                  AudioPlayer.player.start(audiostream);
                  &lt;/pre&gt;                
                <see>
                    AudioData                    
                </see>
                <see>
                    AudioDataStream                    
                </see>
                <see>
                    AudioDevice                    
                </see>
                <see>
                    AudioStream                    
                </see>
                <author>
                    Arthur van Hoff, Thomas Ball                    
                </author>
            </javadoc>
            <declaration name="devAudio" type="AudioDevice" line="75"/>
            <declaration name="DEBUG" type="boolean" line="76"/>
            <declaration name="player" type="AudioPlayer" line="78"/>
            <javadoc line="78">
                The default audio player. This audio player is initialized
                  automatically.                
            </javadoc>
            <method name="getAudioThreadGroup" type="ThreadGroup" line="84">
                <scope line="86"/>
                <declaration name="g" type="ThreadGroup" line="87"/>
                <scope line="89"/>
            </method>
            <javadoc line="95">
                Create an AudioPlayer thread in a privileged block.                
            </javadoc>
            <method name="getAudioPlayer" type="AudioPlayer" line="99">
                <scope line="101"/>
                <declaration name="audioPlayer" type="AudioPlayer" line="102"/>
                <anonymous_class line="103">
                    <method name="run" type="Object" line="104">
                        <declaration name="t" type="Thread" line="105"/>
                    </method>
                </anonymous_class>
                <declaration name="action" type="PrivilegedAction" line="103"/>
            </method>
            <javadoc line="116">
                Construct an AudioPlayer.                
            </javadoc>
            <method name="AudioPlayer" type="constructor" line="119">
                <scope line="122"/>
                <scope line="125"/>
            </method>
            <javadoc line="129">
                Start playing a stream. The stream will continue to play
                  until the stream runs out of data, or it is stopped.                
                <see>
                    AudioPlayer#stop                    
                </see>
            </javadoc>
            <method name="start" type="void" line="134">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="136"/>
                <scope line="142"/>
            </method>
            <javadoc line="147">
                Stop playing a stream. The stream will stop playing,
                  nothing happens if the stream wasn&apos;t playing in the
                  first place.                
                <see>
                    AudioPlayer#start                    
                </see>
            </javadoc>
            <method name="stop" type="void" line="153">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="155"/>
                <scope line="160"/>
            </method>
            <javadoc line="165">
                Main mixing loop. This is called automatically when the AudioPlayer
                  is created.                
            </javadoc>
            <method name="run" type="void" line="169">
                <comment line="172">
                    $$jb: 06.24.99: With the JS API, mixing is no longer done by AudioPlayer
                     or AudioDevice ... it&apos;s done by the API itself, so this bit of legacy
                     code does nothing.
                     $$jb: 10.21.99: But it appears that some legacy applications
                     check to see if this thread is alive or not, so we need to spin here.                    
                </comment>
                <comment line="185">
                    wait();                    
                </comment>
                <comment line="188">
                    interrupted                    
                </comment>
                <scope line="178"/>
                <scope line="181">
                    <scope line="182"/>
                    <scope line="185"/>
                </scope>
                <scope line="190"/>
            </method>
        </class>
    </source>