<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.applet">
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.security"/>
        <import package="java.lang.reflect"/>
        <import package="sun.awt.AWTSecurityManager"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.security.provider"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="AppletSecurity" line="49">
            <extends class="AWTSecurityManager"/>
            <comment line="58">
                URLClassLoader.acc                
            </comment>
            <comment line="61">
                AccessControlContext.context;                
            </comment>
            <comment line="84">
                Cache to store known restricted packages                
            </comment>
            <comment line="322">
                checkAwtEventQueueAccess()                
            </comment>
            <comment line="340">
                getThreadGroup()                
            </comment>
            <javadoc line="49">
                This class defines an applet security policy                
            </javadoc>
            <declaration name="mainAppContext" type="AppContext" line="55"/>
            <declaration name="facc" type="Field" line="58"/>
            <declaration name="fcontext" type="Field" line="61"/>
            <scope line="63">
                <scope line="64"/>
                <scope line="69"/>
            </scope>
            <javadoc line="75">
                Construct and initialize.                
            </javadoc>
            <method name="AppletSecurity" type="constructor" line="78"/>
            <declaration name="restrictedPackages" type="HashSet" line="84"/>
            <javadoc line="86">
                Reset from Properties                
            </javadoc>
            <method name="reset" type="void" line="90">
                <comment line="91">
                    Clear cache                    
                </comment>
                <comment line="97">
                    Enumerate system properties                    
                </comment>
                <comment line="112">
                    Cache restricted packages                    
                </comment>
                <anonymous_class line="94">
                    <method name="run" type="Object" line="96">
                        <comment line="97">
                            Enumerate system properties                            
                        </comment>
                        <comment line="112">
                            Cache restricted packages                            
                        </comment>
                        <declaration name="e" type="Enumeration" line="98"/>
                        <scope line="101">
                            <declaration name="name" type="String" line="102"/>
                            <scope line="105">
                                <declaration name="value" type="String" line="106"/>
                                <scope line="109">
                                    <declaration name="pkg" type="String" line="110"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="122">
                get the current (first) instance of an AppletClassLoader on the stack.                
            </javadoc>
            <method name="currentAppletClassLoader" type="AppletClassLoader" line="126">
                <comment line="127">
                    try currentClassLoader first                    
                </comment>
                <comment line="133">
                    if that fails, get all the classes on the stack and check them.                    
                </comment>
                <comment line="141">
                    fix bug # 6433620 the logic here is : try to find URLClassLoader from
                     class context, check its AccessControlContext to see if
                     AppletClassLoader is in stack when it&apos;s created. for this kind of
                     URLClassLoader, return the AppContext assocated with the
                     AppletClassLoader.                    
                </comment>
                <comment line="190">
                    if that fails, try the context class loader                    
                </comment>
                <comment line="195">
                    no AppletClassLoaders on the stack                    
                </comment>
                <declaration name="loader" type="ClassLoader" line="128"/>
                <declaration name="context" type="Class[]" line="134"/>
                <scope line="135"/>
                <scope line="148">
                    <declaration name="currentLoader" type="ClassLoader" line="149"/>
                    <scope line="151">
                        <anonymous_class line="152">
                            <method name="run" type="Object" line="153">
                                <declaration name="acc" type="AccessControlContext" line="155"/>
                                <declaration name="pds" type="ProtectionDomain[]" line="156"/>
                                <scope line="158">
                                    <scope line="160"/>
                                    <scope line="165"/>
                                </scope>
                                <scope line="168"/>
                                <scope line="172">
                                    <declaration name="cl" type="ClassLoader" line="173"/>
                                    <scope line="175"/>
                                </scope>
                            </method>
                        </anonymous_class>
                        <scope line="184"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="199">
                Returns true if this threadgroup is in the applet&apos;s own thread
                  group. This will return false if there is no current class
                  loader.                
            </javadoc>
            <method name="inThreadGroup" type="boolean" line="204">
                <params>
                    <param name="g" type="ThreadGroup"/>
                </params>
            </method>
            <javadoc line="211">
                Returns true of the threadgroup of thread is in the applet&apos;s
                  own threadgroup.                
            </javadoc>
            <method name="inThreadGroup" type="boolean" line="215">
                <params>
                    <param name="thread" type="Thread"/>
                </params>
            </method>
            <javadoc line="219">
                Applets are not allowed to manipulate threads outside
                  applet thread groups. However a terminated thread no longer belongs
                  to any group.                
            </javadoc>
            <method name="checkAccess" type="void" line="224">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <comment line="225">
                    When multiple applets is reloaded simultaneously, there will be
                     multiple invocations to this method from plugin&apos;s SecurityManager.
                     This method should not be synchronized to avoid deadlock when
                     a page with multiple applets is reloaded                    
                </comment>
                <scope line="230"/>
            </method>
            <declaration name="inThreadGroupCheck" type="boolean" line="235"/>
            <javadoc line="237">
                Applets are not allowed to manipulate thread groups outside
                  applet thread groups.                
            </javadoc>
            <method name="checkAccess" type="void" line="241">
                <params>
                    <param name="g" type="ThreadGroup"/>
                </params>
                <comment line="243">
                    if we are in a recursive check, it is because                    
                </comment>
                <comment line="244">
                    inThreadGroup is calling appletLoader.getThreadGroup                    
                </comment>
                <comment line="245">
                    in that case, only do the super check, as appletLoader                    
                </comment>
                <comment line="246">
                    has a begin/endPrivileged                    
                </comment>
                <scope line="242"/>
                <scope line="248">
                    <scope line="249">
                        <scope line="251"/>
                    </scope>
                    <scope line="254"/>
                </scope>
            </method>
            <javadoc line="261">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to access the package specified by
                  the argument.
                  &lt;p&gt;
                  This method is used by the &lt;code&gt;loadClass&lt;/code&gt; method of class
                  loaders.
                  &lt;p&gt;
                  The &lt;code&gt;checkPackageAccess&lt;/code&gt; method for class
                  &lt;code&gt;SecurityManager&lt;/code&gt;  calls
                  &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;accessClassInPackage.&quot;+pkg)&lt;/code&gt;
                  permission.                
                <param>
                    pkg   the package name.                    
                </param>
                <exception>
                    SecurityException  if the caller does not have
                      permission to access the specified package.                    
                </exception>
                <see>
                    java.lang.ClassLoader#loadClass(java.lang.String,boolean)                    
                </see>
            </javadoc>
            <method name="checkPackageAccess" type="void" line="280">
                <params>
                    <param name="pkgname" type="String"/>
                </params>
                <comment line="282">
                    first see if the VM-wide policy allows access to this package                    
                </comment>
                <comment line="285">
                    now check the list of restricted packages                    
                </comment>
                <comment line="290">
                    Prevent matching &quot;sun&quot; and &quot;sunir&quot; even if they                    
                </comment>
                <comment line="291">
                    starts with similar beginning characters                    
                </comment>
                <comment line="292">
                                        
                </comment>
                <scope line="287">
                    <declaration name="pkg" type="String" line="288"/>
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="301">
                Tests if a client can get access to the AWT event queue.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;AWTPermission(&quot;accessEventQueue&quot;)&lt;/code&gt; permission.                
                <since>
                    JDK1.1                    
                </since>
                <exception>
                    SecurityException  if the caller does not have
                      permission to accesss the AWT event queue.                    
                </exception>
            </javadoc>
            <method name="checkAwtEventQueueAccess" type="void" line="311">
                <comment line="316">
                    If we&apos;re about to allow access to the main EventQueue,                    
                </comment>
                <comment line="317">
                    and anything untrusted is on the class context stack,                    
                </comment>
                <comment line="318">
                    disallow access.                    
                </comment>
                <declaration name="appContext" type="AppContext" line="312"/>
                <declaration name="appletClassLoader" type="AppletClassLoader" line="313"/>
                <scope line="315"/>
            </method>
            <javadoc line="323">
                Returns the thread group of the applet. We consult the classloader
                  if there is one.                
            </javadoc>
            <method name="getThreadGroup" type="ThreadGroup" line="327">
                <comment line="328">
                    If any applet code is on the execution stack, we return
                    that applet&apos;s ThreadGroup.  Otherwise, we use the default                    
                </comment>
                <declaration name="appletLoader" type="AppletClassLoader" line="331"/>
                <declaration name="loaderGroup" type="ThreadGroup" line="332"/>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <javadoc line="341">
                Get the AppContext corresponding to the current context.
                  The default implementation returns null, but this method
                  may be overridden by various SecurityManagers
                  (e.g. AppletSecurity) to index AppContext objects by the
                  calling context.                
                <return>
                    the AppContext corresponding to the current context.                    
                </return>
                <see>
                    sun.awt.AppContext                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <since>
                    JDK1.2.1                    
                </since>
            </javadoc>
            <method name="getAppContext" type="AppContext" line="353">
                <comment line="361">
                    context == null when some thread in applet thread group                    
                </comment>
                <comment line="362">
                    has not been destroyed in AppContext.dispose()                    
                </comment>
                <declaration name="appletLoader" type="AppletClassLoader" line="354"/>
                <scope line="356"/>
                <scope line="358">
                    <declaration name="context" type="AppContext" line="359"/>
                    <scope line="363"/>
                </scope>
            </method>
        </class>
    </source>