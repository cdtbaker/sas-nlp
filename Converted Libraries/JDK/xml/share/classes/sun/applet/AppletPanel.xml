<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.applet">
        <import package="java.applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.MemoryImageSource"/>
        <import package="java.io"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.JarURLConnection"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.URL"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.security"/>
        <import package="java.util"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Locale"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.EmbeddedFrame"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.misc.MessageUtils"/>
        <import package="sun.misc.PerformanceLogger"/>
        <import package="sun.misc.Queue"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="AppletPanel" line="56">
            <extends class="Panel"/>
            <comment line="86">
                                
            </comment>
            <comment line="96">
                                
            </comment>
            <comment line="99">
                sent to a (distant) parent to indicate that the applet is being
                 loaded or as completed loading                
            </comment>
            <comment line="146">
                                
            </comment>
            <comment line="161">
                Creates a thread to run the applet. This method is called
                 each time an applet is loaded and reloaded.                
            </comment>
            <comment line="659">
                Fix for BugTraq ID 4041703.
                 Set the focus to a reasonable default for an Applet.                
            </comment>
            <comment line="1203">
                Flag to indicate if applet is targeted for JDK 1.1.                
            </comment>
            <comment line="1206">
                Flag to indicate if applet is targeted for JDK 1.2.                
            </comment>
            <implements interface="AppletStub"/>
            <implements interface="Runnable"/>
            <javadoc line="56">
                Applet panel class. The panel manages and manipulates the
                  applet as it is being loaded. It forks a separate thread in a new
                  thread group to call the applet&apos;s init(), start(), stop(), and
                  destroy() methods.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="applet" type="Applet" line="67"/>
            <javadoc line="67">
                The applet (if loaded).                
            </javadoc>
            <declaration name="doInit" type="boolean" line="72"/>
            <javadoc line="72">
                Applet will allow initialization.  Should be
                  set to false if loading a serialized applet
                  that was pickled in the init=true state.                
            </javadoc>
            <declaration name="loader" type="AppletClassLoader" line="80"/>
            <javadoc line="80">
                The classloader for the applet.                
            </javadoc>
            <declaration name="APPLET_DISPOSE" type="int" line="86"/>
            <declaration name="APPLET_LOAD" type="int" line="87"/>
            <declaration name="APPLET_INIT" type="int" line="88"/>
            <declaration name="APPLET_START" type="int" line="89"/>
            <declaration name="APPLET_STOP" type="int" line="90"/>
            <declaration name="APPLET_DESTROY" type="int" line="91"/>
            <declaration name="APPLET_QUIT" type="int" line="92"/>
            <declaration name="APPLET_ERROR" type="int" line="93"/>
            <declaration name="APPLET_RESIZE" type="int" line="96"/>
            <declaration name="APPLET_LOADING" type="int" line="101"/>
            <declaration name="APPLET_LOADING_COMPLETED" type="int" line="102"/>
            <declaration name="status" type="int" line="104"/>
            <javadoc line="104">
                The current status. One of:
                  APPLET_DISPOSE,
                  APPLET_LOAD,
                  APPLET_INIT,
                  APPLET_START,
                  APPLET_STOP,
                  APPLET_DESTROY,
                  APPLET_ERROR.                
            </javadoc>
            <declaration name="handler" type="Thread" line="116"/>
            <javadoc line="116">
                The thread for the applet.                
            </javadoc>
            <declaration name="defaultAppletSize" type="Dimension" line="122"/>
            <javadoc line="122">
                The initial applet size.                
            </javadoc>
            <declaration name="currentAppletSize" type="Dimension" line="127"/>
            <javadoc line="127">
                The current applet size.                
            </javadoc>
            <declaration name="mu" type="MessageUtils" line="132"/>
            <declaration name="loaderThread" type="Thread" line="134"/>
            <javadoc line="134">
                The thread to use during applet loading                
            </javadoc>
            <declaration name="loadAbortRequest" type="boolean" line="140"/>
            <javadoc line="140">
                Flag to indicate that a loading has been cancelled                
            </javadoc>
            <method name="getCode" type="String" line="146"/>
            <method name="getJarFiles" type="String" line="147"/>
            <method name="getSerializedObject" type="String" line="148"/>
            <method name="getWidth" type="int" line="150"/>
            <method name="getHeight" type="int" line="151"/>
            <method name="hasInitialFocus" type="boolean" line="152"/>
            <declaration name="threadGroupNumber" type="int" line="154"/>
            <method name="setupAppletAppContext" type="void" line="156">
                <comment line="157">
                    do nothing                    
                </comment>
            </method>
            <method name="createAppletThread" type="void" line="164">
                <comment line="165">
                    Create a thread group for the applet, and start a new                    
                </comment>
                <comment line="166">
                    thread to load the applet.                    
                </comment>
                <comment line="169">
                    Keep this puppy around!                    
                </comment>
                <comment line="171">
                    4668479: Option to turn off codebase lookup in AppletClassLoader                    
                </comment>
                <comment line="172">
                    during resource requests. [stanley.ho]                    
                </comment>
                <comment line="184">
                    set the context class loader for this thread                    
                </comment>
                <declaration name="nm" type="String" line="167"/>
                <declaration name="param" type="String" line="173"/>
                <declaration name="appletGroup" type="ThreadGroup" line="181"/>
                <anonymous_class line="185">
                    <method name="run" type="Object" line="186"/>
                </anonymous_class>
            </method>
            <method name="joinAppletThread" type="void" line="194">
                <scope line="195"/>
            </method>
            <method name="release" type="void" line="201">
                <scope line="202"/>
            </method>
            <javadoc line="208">
                Construct an applet viewer and start the applet.                
            </javadoc>
            <method name="init" type="void" line="211">
                <comment line="213">
                    Get the width (if any)                    
                </comment>
                <comment line="217">
                    Get the height (if any)                    
                </comment>
                <comment line="222">
                    Turn on the error flag and let TagAppletPanel                    
                </comment>
                <comment line="223">
                    do the right thing.                    
                </comment>
                <scope line="212"/>
                <scope line="221"/>
            </method>
            <javadoc line="235">
                Minimum size                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="238"/>
            <javadoc line="243">
                Preferred size                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="246"/>
            <declaration name="listeners" type="AppletListener" line="251"/>
            <declaration name="queue" type="Queue" line="253"/>
            <javadoc line="253">
                AppletEvent Queue                
            </javadoc>
            <method name="addAppletListener" type="void" line="259">
                <params>
                    <param name="l" type="AppletListener"/>
                </params>
            </method>
            <method name="removeAppletListener" type="void" line="263">
                <params>
                    <param name="l" type="AppletListener"/>
                </params>
            </method>
            <javadoc line="267">
                Dispatch event to the listeners..                
            </javadoc>
            <method name="dispatchAppletEvent" type="void" line="270">
                <params>
                    <param name="id" type="int"/>
                    <param name="argument" type="Object"/>
                </params>
                <comment line="271">
                    System.out.println(&quot;SEND= &quot; + id);                    
                </comment>
                <scope line="272">
                    <declaration name="evt" type="AppletEvent" line="273"/>
                </scope>
            </method>
            <javadoc line="278">
                Send an event. Queue it for execution by the handler thread.                
            </javadoc>
            <method name="sendEvent" type="void" line="281">
                <params>
                    <param name="id" type="int"/>
                </params>
                <comment line="284">
                    System.out.println(&quot;SEND0= &quot; + id);                    
                </comment>
                <comment line="293">
                    Let the applet event handler exit                    
                </comment>
                <comment line="297">
                    AppletClassLoader.release() must be called by a Thread                    
                </comment>
                <comment line="298">
                    not within the applet&apos;s ThreadGroup                    
                </comment>
                <scope line="282">
                    <scope line="283"/>
                    <declaration name="eventId" type="Integer" line="287"/>
                </scope>
                <scope line="291">
                    <scope line="292"/>
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="305">
                Get an event from the queue.                
            </javadoc>
            <method name="getNextEvent" type="AppletEvent" line="308">
                <scope line="309"/>
                <declaration name="eventId" type="Integer" line="312"/>
            </method>
            <method name="emptyEventQueue" type="boolean" line="316"/>
            <javadoc line="323">
                This kludge is specific to get over AccessControlException thrown during
                  Applet.stop() or destroy() when static thread is suspended.  Set a flag
                  in AppletClassLoader to indicate that an
                  AccessControlException for RuntimePermission &quot;modifyThread&quot; or
                  &quot;modifyThreadGroup&quot; had occurred.                
            </javadoc>
            <method name="setExceptionStatus" type="void" line="330">
                <params>
                    <param name="e" type="AccessControlException"/>
                </params>
                <declaration name="p" type="Permission" line="331"/>
                <scope line="332">
                    <scope line="333"/>
                </scope>
            </method>
            <javadoc line="341">
                Execute applet events.
                  Here is the state transition diagram
                  Note: (XXX) is the action
                  APPLET_XXX is the state
                  (applet code loaded) --&gt; APPLET_LOAD -- (applet init called)--&gt; APPLET_INIT -- (
                  applet start called) --&gt; APPLET_START -- (applet stop called) --&gt;APPLET_STOP --(applet
                  destroyed called) --&gt; APPLET_DESTROY --&gt;(applet gets disposed) --&gt;
                  APPLET_DISPOSE --&gt;....
                  In the legacy lifecycle model. The applet gets loaded, inited and started. So it stays
                  in the APPLET_START state unless the applet goes away(refresh page or leave the page).
                  So the applet stop method called and the applet enters APPLET_STOP state. Then if the applet
                  is revisited, it will call applet start method and enter the APPLET_START state and stay there.
                  In the modern lifecycle model. When the applet first time visited, it is same as legacy lifecycle
                  model. However, when the applet page goes away. It calls applet stop method and enters APPLET_STOP
                  state and then applet destroyed method gets called and enters APPLET_DESTROY state.
                  This code is also called by AppletViewer. In AppletViewer &quot;Restart&quot; menu, the applet is jump from
                  APPLET_STOP to APPLET_DESTROY and to APPLET_INIT .
                  Also, the applet can jump from APPLET_INIT state to APPLET_DESTROY (in Netscape/Mozilla case).
                  Same as APPLET_LOAD to
                  APPLET_DISPOSE since all of this are triggered by browser.                
            </javadoc>
            <method name="run" type="void" line="370">
                <comment line="374">
                    if we are in the loader thread, cause                    
                </comment>
                <comment line="375">
                    loading to occur.  We may exit this with                    
                </comment>
                <comment line="376">
                    status being APPLET_DISPOSE, APPLET_ERROR,                    
                </comment>
                <comment line="377">
                    or APPLET_LOAD                    
                </comment>
                <comment line="392">
                    showAppletStatus(&quot;EVENT = &quot; + evt.getID());                    
                </comment>
                <comment line="399">
                    This complexity allows loading of applets to be                    
                </comment>
                <comment line="400">
                    interruptable.  The actual thread loading runs                    
                </comment>
                <comment line="401">
                    in a separate thread, so it can be interrupted                    
                </comment>
                <comment line="402">
                    without harming the applet thread.                    
                </comment>
                <comment line="403">
                    So that we don&apos;t have to worry about                    
                </comment>
                <comment line="404">
                    concurrency issues, the main applet thread waits                    
                </comment>
                <comment line="405">
                    until the loader thread terminates.                    
                </comment>
                <comment line="406">
                    (one way or another).                    
                </comment>
                <comment line="408">
                    REMIND: do we want a name?                    
                </comment>
                <comment line="409">
                    System.out.println(&quot;------------------- loading applet&quot;);                    
                </comment>
                <comment line="412">
                    we get to go to sleep while this runs                    
                </comment>
                <comment line="416">
                    REMIND: issue an error -- this case should never                    
                </comment>
                <comment line="417">
                    occur.                    
                </comment>
                <comment line="422">
                    AppletViewer &quot;Restart&quot; will jump from destroy method to                    
                </comment>
                <comment line="423">
                    init, that is why we need to check status w/ APPLET_DESTROY                    
                </comment>
                <comment line="437">
                    Need the default(fallback) font to be created in this AppContext                    
                </comment>
                <comment line="445">
                    allow restarts                    
                </comment>
                <comment line="447">
                    Validate the applet in event dispatch thread                    
                </comment>
                <comment line="448">
                    to avoid deadlock.                    
                </comment>
                <comment line="476">
                    Validate and show the applet in event dispatch thread                    
                </comment>
                <comment line="477">
                    to avoid deadlock.                    
                </comment>
                <comment line="487">
                    Fix for BugTraq ID 4041703.                    
                </comment>
                <comment line="488">
                    Set the default focus for an applet.                    
                </comment>
                <comment line="511">
                    Hide the applet in event dispatch thread                    
                </comment>
                <comment line="512">
                    to avoid deadlock.                    
                </comment>
                <comment line="529">
                    During Applet.stop(), any AccessControlException on an involved Class remains in                    
                </comment>
                <comment line="530">
                    the &quot;memory&quot; of the AppletClassLoader.  If the same instance of the ClassLoader is                    
                </comment>
                <comment line="531">
                    reused, the same exception will occur during class loading.  Set the AppletClassLoader&apos;s                    
                </comment>
                <comment line="532">
                    exceptionStatusSet flag to allow recognition of what had happened                    
                </comment>
                <comment line="533">
                    when reusing AppletClassLoader object.                    
                </comment>
                <comment line="538">
                    rethrow exception to be handled as it normally would be.                    
                </comment>
                <comment line="551">
                    During Applet.destroy(), any AccessControlException on an involved Class remains in                    
                </comment>
                <comment line="552">
                    the &quot;memory&quot; of the AppletClassLoader.  If the same instance of the ClassLoader is                    
                </comment>
                <comment line="553">
                    reused, the same exception will occur during class loading.  Set the AppletClassLoader&apos;s                    
                </comment>
                <comment line="554">
                    exceptionStatusSet flag to allow recognition of what had happened                    
                </comment>
                <comment line="555">
                    when reusing AppletClassLoader object.                    
                </comment>
                <comment line="560">
                    rethrow exception to be handled as it normally would be.                    
                </comment>
                <declaration name="curThread" type="Thread" line="372"/>
                <scope line="373"/>
                <declaration name="disposed" type="boolean" line="382"/>
                <scope line="383">
                    <declaration name="evt" type="AppletEvent" line="384"/>
                    <scope line="385"/>
                    <scope line="387"/>
                    <scope line="393">
                        <scope line="396"/>
                        <scope line="407"/>
                        <scope line="415"/>
                        <scope line="424"/>
                        <scope line="429">
                            <scope line="430"/>
                        </scope>
                        <declaration name="f" type="Font" line="438"/>
                        <scope line="441"/>
                        <scope line="449">
                            <declaration name="p" type="AppletPanel" line="450"/>
                            <anonymous_class line="452">
                                <method name="run" type="void" line="453"/>
                            </anonymous_class>
                        </scope>
                        <scope line="458"/>
                        <scope line="460"/>
                        <scope line="468">
                            <scope line="469"/>
                            <scope line="478">
                                <declaration name="p" type="AppletPanel" line="479"/>
                                <declaration name="a" type="Applet" line="480"/>
                                <anonymous_class line="482">
                                    <method name="run" type="void" line="483">
                                        <comment line="487">
                                            Fix for BugTraq ID 4041703.                                            
                                        </comment>
                                        <comment line="488">
                                            Set the default focus for an applet.                                            
                                        </comment>
                                    </method>
                                </anonymous_class>
                            </scope>
                            <scope line="494"/>
                            <scope line="496"/>
                        </scope>
                        <scope line="505"/>
                        <scope line="513">
                            <declaration name="a" type="Applet" line="514"/>
                            <anonymous_class line="516">
                                <method name="run" type="void" line="518"/>
                            </anonymous_class>
                        </scope>
                        <scope line="523"/>
                        <scope line="525"/>
                        <scope line="534"/>
                        <scope line="536"/>
                        <scope line="545"/>
                        <scope line="556"/>
                        <scope line="558"/>
                        <scope line="567"/>
                        <scope line="574">
                            <declaration name="a" type="Applet" line="575"/>
                            <anonymous_class line="578">
                                <method name="run" type="void" line="580"/>
                            </anonymous_class>
                        </scope>
                        <scope line="586"/>
                        <scope line="589"/>
                    </scope>
                    <scope line="599">
                        <scope line="601"/>
                        <scope line="604"/>
                    </scope>
                    <scope line="608"/>
                    <scope line="611">
                        <scope line="613"/>
                        <scope line="616"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="625">
                Gets most recent focus owner component associated with the given window.
                  It does that without calling Window.getMostRecentFocusOwner since it
                  provides its own logic contradicting with setDefautlFocus. Instead, it
                  calls KeyboardFocusManager directly.                
            </javadoc>
            <method name="getMostRecentFocusOwnerForWindow" type="Component" line="631">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <comment line="639">
                    Must never happen                    
                </comment>
                <comment line="646">
                    Meth refers static method                    
                </comment>
                <comment line="650">
                    Must never happen                    
                </comment>
                <comment line="654">
                    Will get here if exception was thrown or meth is null                    
                </comment>
                <anonymous_class line="632">
                    <method name="run" type="Object" line="633">
                        <comment line="639">
                            Must never happen                            
                        </comment>
                        <declaration name="meth" type="Method" line="634"/>
                        <scope line="635"/>
                        <scope line="638"/>
                    </method>
                </anonymous_class>
                <declaration name="meth" type="Method" line="632"/>
                <scope line="645">
                    <scope line="647"/>
                    <scope line="649"/>
                </scope>
            </method>
            <method name="setDefaultFocus" type="void" line="662">
                <comment line="683">
                    EmbeddedFrame might have focus before the applet was added.                    
                </comment>
                <comment line="684">
                    Thus after its activation the most recent focus owner will be                    
                </comment>
                <comment line="685">
                    restored. We need the applet&apos;s initial focusabled component to                    
                </comment>
                <comment line="686">
                    be focused here.                    
                </comment>
                <declaration name="toFocus" type="Component" line="663"/>
                <declaration name="parent" type="Container" line="664"/>
                <scope line="666">
                    <scope line="667">
                        <scope line="669"/>
                    </scope>
                    <scope line="673"/>
                </scope>
                <scope line="679">
                    <scope line="680"/>
                </scope>
            </method>
            <javadoc line="691">
                Load the applet into memory.
                  Runs in a seperate (and interruptible) thread from the rest of the
                  applet event processing so that it can be gracefully interrupted from
                  things like HotJava.                
            </javadoc>
            <method name="runLoader" type="void" line="697">
                <comment line="705">
                    REMIND -- might be cool to visually indicate loading here --                    
                </comment>
                <comment line="706">
                    maybe do animation?                    
                </comment>
                <comment line="709">
                    Create a class loader                    
                </comment>
                <comment line="712">
                    Load the archives if present.                    
                </comment>
                <comment line="713">
                    REMIND - this probably should be done in a separate thread,                    
                </comment>
                <comment line="714">
                    or at least the additional archives (epll).                    
                </comment>
                <comment line="718">
                    setup applet AppContext                    
                </comment>
                <comment line="719">
                    this must be called before loadJarFiles                    
                </comment>
                <comment line="742">
                    sbb -- I added a return here                    
                </comment>
                <comment line="759">
                    notify that loading is no longer going on                    
                </comment>
                <comment line="763">
                    Fixed #4508194: NullPointerException thrown during                    
                </comment>
                <comment line="764">
                    quick page switch                    
                </comment>
                <comment line="765">
                                        
                </comment>
                <comment line="768">
                    Stick it in the frame                    
                </comment>
                <scope line="698"/>
                <declaration name="code" type="String" line="716"/>
                <scope line="722"/>
                <scope line="725"/>
                <scope line="731"/>
                <scope line="737"/>
                <scope line="744"/>
                <scope line="749"/>
                <scope line="753"/>
                <scope line="758"/>
                <scope line="767"/>
            </method>
            <method name="createApplet" type="Applet" line="778">
                <params>
                    <param name="loader" type="AppletClassLoader"/>
                </params>
                <comment line="784">
                    return null;                    
                </comment>
                <comment line="798">
                    serName is not null;                    
                </comment>
                <comment line="810">
                    skip over the first init                    
                </comment>
                <comment line="813">
                    Determine the JDK level that the applet targets.                    
                </comment>
                <comment line="814">
                    This is critical for enabling certain backward                    
                </comment>
                <comment line="815">
                    compatibility switch if an applet is a JDK 1.1                    
                </comment>
                <comment line="816">
                    applet. [stanley.ho]                    
                </comment>
                <comment line="821">
                    APPLET_ERROR?                    
                </comment>
                <comment line="823">
                    REMIND: This may not be exactly the right thing: the                    
                </comment>
                <comment line="824">
                    status is set by the stop button and not necessarily                    
                </comment>
                <comment line="825">
                    here.                    
                </comment>
                <comment line="828">
                    resignal interrupt                    
                </comment>
                <declaration name="serName" type="String" line="779"/>
                <declaration name="code" type="String" line="780"/>
                <scope line="782"/>
                <scope line="787">
                    <declaration name="msg" type="String" line="788"/>
                </scope>
                <scope line="794"/>
                <scope line="797">
                    <anonymous_class line="801">
                        <method name="run" type="Object" line="802"/>
                    </anonymous_class>
                    <declaration name="is" type="InputStream" line="799"/>
                    <declaration name="ois" type="ObjectInputStream" line="806"/>
                    <declaration name="serObject" type="Object" line="808"/>
                </scope>
                <scope line="819">
                    <scope line="820"/>
                    <scope line="827"/>
                </scope>
            </method>
            <method name="loadJarFiles" type="void" line="836">
                <params>
                    <param name="loader" type="AppletClassLoader"/>
                </params>
                <comment line="837">
                    Load the archives if present.                    
                </comment>
                <comment line="838">
                    REMIND - this probably should be done in a separate thread,                    
                </comment>
                <comment line="839">
                    or at least the additional archives (epll).                    
                </comment>
                <comment line="849">
                    bad archive name                    
                </comment>
                <declaration name="jarFiles" type="String" line="840"/>
                <scope line="842">
                    <declaration name="st" type="StringTokenizer" line="843"/>
                    <scope line="844">
                        <declaration name="tok" type="String" line="845"/>
                        <scope line="846"/>
                        <scope line="848"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="856">
                Request that the loading of the applet be stopped.                
            </javadoc>
            <method name="stopLoading" type="void" line="859">
                <comment line="860">
                    REMIND: fill in the body                    
                </comment>
                <comment line="862">
                    System.out.println(&quot;Interrupting applet loader thread: &quot; + loaderThread);                    
                </comment>
                <scope line="861"/>
                <scope line="864"/>
            </method>
            <method name="okToLoad" type="boolean" line="870"/>
            <method name="clearLoadAbortRequest" type="void" line="874"/>
            <method name="setLoadAbortRequest" type="void" line="878"/>
            <method name="setLoaderThread" type="void" line="883">
                <params>
                    <param name="loaderThread" type="Thread"/>
                </params>
            </method>
            <javadoc line="887">
                Return true when the applet has been started.                
            </javadoc>
            <method name="isActive" type="boolean" line="890"/>
            <declaration name="appEvtQ" type="EventQueue" line="895"/>
            <javadoc line="896">
                Is called when the applet wants to be resized.                
            </javadoc>
            <method name="appletResize" type="void" line="899">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="currentSize" type="Dimension" line="902"/>
                <scope line="905">
                    <declaration name="appCtxt" type="AppContext" line="906"/>
                </scope>
                <declaration name="ap" type="AppletPanel" line="911"/>
                <scope line="912">
                    <anonymous_class line="914">
                        <method name="run" type="void" line="915">
                            <scope line="917"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="setBounds" type="void" line="925">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="getApplet" type="Applet" line="931"/>
            <javadoc line="935">
                Status line. Called by the AppletPanel to provide
                  feedback on the Applet&apos;s state.                
            </javadoc>
            <method name="showAppletStatus" type="void" line="939">
                <params>
                    <param name="status" type="String"/>
                </params>
            </method>
            <method name="showAppletStatus" type="void" line="943">
                <params>
                    <param name="status" type="String"/>
                    <param name="arg" type="Object"/>
                </params>
            </method>
            <method name="showAppletStatus" type="void" line="946">
                <params>
                    <param name="status" type="String"/>
                    <param name="arg1" type="Object"/>
                    <param name="arg2" type="Object"/>
                </params>
            </method>
            <javadoc line="950">
                Called by the AppletPanel to print to the log.                
            </javadoc>
            <method name="showAppletLog" type="void" line="953">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="showAppletLog" type="void" line="957">
                <params>
                    <param name="msg" type="String"/>
                    <param name="arg" type="Object"/>
                </params>
            </method>
            <javadoc line="961">
                Called by the AppletPanel to provide
                  feedback when an exception has happened.                
            </javadoc>
            <method name="showAppletException" type="void" line="965">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <javadoc line="970">
                Get caching key for classloader cache                
            </javadoc>
            <method name="getClassLoaderCacheKey" type="String" line="974">
                <comment line="975">
                    Fixed #4501142: Classlaoder sharing policy doesn&apos;t
                     take &quot;archive&quot; into account. This will be overridden
                     by Java Plug-in.                     [stanleyh]                    
                </comment>
            </method>
            <declaration name="classloaders" type="HashMap" line="983"/>
            <javadoc line="983">
                The class loaders                
            </javadoc>
            <javadoc line="988">
                Flush a class loader.                
            </javadoc>
            <method name="flushClassLoader" type="void" line="991">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="995">
                Flush all class loaders.                
            </javadoc>
            <method name="flushClassLoaders" type="void" line="998"/>
            <javadoc line="1002">
                This method actually creates an AppletClassLoader.
                  It can be override by subclasses (such as the Plug-in)
                  to provide different classloaders.                
            </javadoc>
            <method name="createClassLoader" type="AppletClassLoader" line="1008">
                <params>
                    <param name="codebase" type="URL"/>
                </params>
            </method>
            <javadoc line="1012">
                Get a class loader. Create in a restricted context                
            </javadoc>
            <method name="getClassLoader" type="AppletClassLoader" line="1015">
                <params>
                    <param name="codebase" type="URL"/>
                    <param name="key" type="String"/>
                </params>
                <comment line="1024">
                    Should the creation of the classloader be
                     within the class synchronized block?  Since
                     this class is used by the plugin, take care
                     to avoid deadlocks, or specialize
                     AppletPanel within the plugin.  It may take
                     an arbitrary amount of time to create a
                     class loader (involving getting Jar files
                     etc.) and may block unrelated applets from
                     finishing createAppletThread (due to the
                     class synchronization). If
                     createAppletThread does not finish quickly,
                     the applet cannot process other messages,
                     particularly messages such as destroy
                     (which timeout when called from the browser).                    
                </comment>
                <declaration name="c" type="AppletClassLoader" line="1016"/>
                <scope line="1017">
                    <declaration name="acc" type="AccessControlContext" line="1018"/>
                    <anonymous_class line="1021">
                        <method name="run" type="Object" line="1022">
                            <comment line="1024">
                                Should the creation of the classloader be
                                 within the class synchronized block?  Since
                                 this class is used by the plugin, take care
                                 to avoid deadlocks, or specialize
                                 AppletPanel within the plugin.  It may take
                                 an arbitrary amount of time to create a
                                 class loader (involving getting Jar files
                                 etc.) and may block unrelated applets from
                                 finishing createAppletThread (due to the
                                 class synchronization). If
                                 createAppletThread does not finish quickly,
                                 the applet cannot process other messages,
                                 particularly messages such as destroy
                                 (which timeout when called from the browser).                                
                            </comment>
                            <declaration name="ac" type="AppletClassLoader" line="1023"/>
                            <scope line="1039">
                                <declaration name="res" type="AppletClassLoader" line="1040"/>
                                <scope line="1042"/>
                                <scope line="1045"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="1055">
                get the context for the AppletClassLoader we are creating.
                  the context is granted permission to create the class loader,
                  connnect to the codebase, and whatever else the policy grants
                  to all codebases.                
            </javadoc>
            <method name="getAccessControlContext" type="AccessControlContext" line="1061">
                <params>
                    <param name="codebase" type="URL"/>
                </params>
                <comment line="1079">
                    XXX: this is needed to be able to create the classloader itself!                    
                </comment>
                <anonymous_class line="1064">
                    <method name="run" type="Object" line="1065">
                        <declaration name="p" type="Policy" line="1066"/>
                        <scope line="1067"/>
                        <scope line="1070"/>
                    </method>
                </anonymous_class>
                <declaration name="perms" type="PermissionCollection" line="1063"/>
                <declaration name="p" type="Permission" line="1083"/>
                <declaration name="urlConnection" type="java.net.URLConnection" line="1084"/>
                <scope line="1085"/>
                <scope line="1088"/>
                <scope line="1095">
                    <declaration name="path" type="String" line="1097"/>
                    <declaration name="endIndex" type="int" line="1099"/>
                    <scope line="1101">
                        <scope line="1104"/>
                    </scope>
                </scope>
                <scope line="1110">
                    <declaration name="locUrl" type="URL" line="1111"/>
                    <scope line="1112"/>
                    <declaration name="host" type="String" line="1115"/>
                </scope>
                <declaration name="domain" type="ProtectionDomain" line="1121"/>
                <declaration name="acc" type="AccessControlContext" line="1124"/>
            </method>
            <method name="getAppletHandlerThread" type="Thread" line="1130"/>
            <method name="getAppletWidth" type="int" line="1134"/>
            <method name="getAppletHeight" type="int" line="1138"/>
            <method name="changeFrameAppContext" type="void" line="1143">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="newAppContext" type="AppContext"/>
                </params>
                <comment line="1144">
                    Fixed #4754451: Applet can have methods running on main                    
                </comment>
                <comment line="1145">
                    thread event queue.                    
                </comment>
                <comment line="1146">
                                        
                </comment>
                <comment line="1147">
                    The cause of this bug is that the frame of the applet                    
                </comment>
                <comment line="1148">
                    is created in main thread group. Thus, when certain                    
                </comment>
                <comment line="1149">
                    AWT/Swing events are generated, the events will be                    
                </comment>
                <comment line="1150">
                    dispatched through the wrong event dispatch thread.                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1152">
                    To fix this, we rearrange the AppContext with the frame,                    
                </comment>
                <comment line="1153">
                    so the proper event queue will be looked up.                    
                </comment>
                <comment line="1154">
                                        
                </comment>
                <comment line="1155">
                    Swing also maintains a Frame list for the AppContext,                    
                </comment>
                <comment line="1156">
                    so we will have to rearrange it as well.                    
                </comment>
                <comment line="1158">
                    Check if frame&apos;s AppContext has already been set properly                    
                </comment>
                <comment line="1164">
                    Synchronization on Window.class is needed for locking the                    
                </comment>
                <comment line="1165">
                    critical section of the window list in AppContext.                    
                </comment>
                <comment line="1169">
                    Remove frame from the Window list in wrong AppContext                    
                </comment>
                <comment line="1171">
                    Lookup current frame&apos;s AppContext                    
                </comment>
                <comment line="1180">
                    Remove frame from wrong AppContext                    
                </comment>
                <comment line="1186">
                    Put the frame into the applet&apos;s AppContext map                    
                </comment>
                <comment line="1189">
                    Insert frame into the Window list in the applet&apos;s AppContext map                    
                </comment>
                <comment line="1196">
                    use the same weakRef here as it is used elsewhere                    
                </comment>
                <declaration name="oldAppContext" type="AppContext" line="1159"/>
                <scope line="1167">
                    <declaration name="weakRef" type="WeakReference" line="1168"/>
                    <scope line="1170">
                        <declaration name="windowList" type="Vector&lt;WeakReference&lt;Window&gt;&gt;" line="1172"/>
                        <scope line="1173">
                            <scope line="1174">
                                <scope line="1175"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1190">
                        <declaration name="windowList" type="Vector&lt;WeakReference&lt;Window&gt;&gt;" line="1191"/>
                        <scope line="1192"/>
                    </scope>
                </scope>
            </method>
            <declaration name="jdk11Applet" type="boolean" line="1203"/>
            <declaration name="jdk12Applet" type="boolean" line="1206"/>
            <javadoc line="1208">
                Determine JDK level of an applet.                
            </javadoc>
            <method name="findAppletJDKLevel" type="void" line="1212">
                <params>
                    <param name="applet" type="Applet"/>
                </params>
                <comment line="1213">
                    To determine the JDK level of an applet, the                    
                </comment>
                <comment line="1214">
                    most reliable way is to check the major version                    
                </comment>
                <comment line="1215">
                    of the applet class file.                    
                </comment>
                <comment line="1217">
                    synchronized on applet class object, so calling from                    
                </comment>
                <comment line="1218">
                    different instances of the same applet will be                    
                </comment>
                <comment line="1219">
                    serialized.                    
                </comment>
                <comment line="1223">
                    Determine if the JDK level of an applet has been                    
                </comment>
                <comment line="1224">
                    checked before.                    
                </comment>
                <comment line="1228">
                    if applet JDK level has been checked before, retrieve                    
                </comment>
                <comment line="1229">
                    value and return.                    
                </comment>
                <comment line="1238">
                    first convert any &apos;.&apos; to &apos;/&apos;                    
                </comment>
                <comment line="1241">
                    append .class                    
                </comment>
                <comment line="1255">
                    Read the first 8 bytes of the class file                    
                </comment>
                <comment line="1259">
                    return if the header is not read in entirely                    
                </comment>
                <comment line="1260">
                    for some reasons.                    
                </comment>
                <comment line="1268">
                    Check major version in class file header                    
                </comment>
                <comment line="1271">
                    Major version in class file is as follows:                    
                </comment>
                <comment line="1272">
                    45 - JDK 1.1                    
                </comment>
                <comment line="1273">
                    46 - JDK 1.2                    
                </comment>
                <comment line="1274">
                    47 - JDK 1.3                    
                </comment>
                <comment line="1275">
                    48 - JDK 1.4                    
                </comment>
                <comment line="1276">
                    49 - JDK 1.5                    
                </comment>
                <comment line="1282">
                    Store applet JDK level in AppContext for later lookup,                    
                </comment>
                <comment line="1283">
                    e.g. page switch.                    
                </comment>
                <declaration name="appletClass" type="Class" line="1220"/>
                <scope line="1222">
                    <declaration name="jdk11Target" type="Boolean" line="1225"/>
                    <declaration name="jdk12Target" type="Boolean" line="1226"/>
                    <scope line="1230"/>
                    <declaration name="name" type="String" line="1236"/>
                    <declaration name="resourceName" type="String" line="1242"/>
                    <declaration name="is" type="InputStream" line="1244"/>
                    <declaration name="classHeader" type="byte[]" line="1245"/>
                    <scope line="1247">
                        <anonymous_class line="1249">
                            <method name="run" type="Object" line="1250"/>
                        </anonymous_class>
                        <declaration name="byteRead" type="int" line="1256"/>
                    </scope>
                    <scope line="1264"/>
                    <declaration name="major_version" type="int" line="1269"/>
                </scope>
            </method>
            <javadoc line="1289">
                Return true if applet is targeted to JDK 1.1.                
            </javadoc>
            <method name="isJDK11Applet" type="boolean" line="1292"/>
            <javadoc line="1296">
                Return true if applet is targeted to JDK1.2.                
            </javadoc>
            <method name="isJDK12Applet" type="boolean" line="1299"/>
            <javadoc line="1303">
                Read short from byte array.                
            </javadoc>
            <method name="readShort" type="int" line="1306">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="hi" type="int" line="1307"/>
                <declaration name="lo" type="int" line="1308"/>
            </method>
            <method name="readByte" type="int" line="1312">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <declaration name="amh" type="AppletMessageHandler" line="1317"/>
        </class>
    </source>