<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.applet">
        <import package="java.applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.MemoryImageSource"/>
        <import package="java.io"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.JarURLConnection"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.URL"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.security"/>
        <import package="java.util"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Locale"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.EmbeddedFrame"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.misc.MessageUtils"/>
        <import package="sun.misc.PerformanceLogger"/>
        <import package="sun.misc.Queue"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="AppletPanel" line="29">
            <extends class="Panel"/>
            <implements interface="AppletStub"/>
            <implements interface="Runnable"/>
            <javadoc line="29">
                Applet panel class. The panel manages and manipulates the
                  applet as it is being loaded. It forks a separate thread in a new
                  thread group to call the applet&apos;s init(), start(), stop(), and
                  destroy() methods.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="applet" type="Applet" line="37"/>
            <javadoc line="37">
                The applet (if loaded).                
            </javadoc>
            <declaration name="doInit" type="boolean" line="41"/>
            <javadoc line="41">
                Applet will allow initialization.  Should be
                  set to false if loading a serialized applet
                  that was pickled in the init=true state.                
            </javadoc>
            <declaration name="loader" type="AppletClassLoader" line="47"/>
            <javadoc line="47">
                The classloader for the applet.                
            </javadoc>
            <declaration name="APPLET_DISPOSE" type="int" line="51"/>
            <declaration name="APPLET_LOAD" type="int" line="52"/>
            <declaration name="APPLET_INIT" type="int" line="53"/>
            <declaration name="APPLET_START" type="int" line="54"/>
            <declaration name="APPLET_STOP" type="int" line="55"/>
            <declaration name="APPLET_DESTROY" type="int" line="56"/>
            <declaration name="APPLET_QUIT" type="int" line="57"/>
            <declaration name="APPLET_ERROR" type="int" line="58"/>
            <declaration name="APPLET_RESIZE" type="int" line="59"/>
            <declaration name="APPLET_LOADING" type="int" line="60"/>
            <declaration name="APPLET_LOADING_COMPLETED" type="int" line="61"/>
            <declaration name="status" type="int" line="62"/>
            <javadoc line="62">
                The current status. One of:
                  APPLET_DISPOSE,
                  APPLET_LOAD,
                  APPLET_INIT,
                  APPLET_START,
                  APPLET_STOP,
                  APPLET_DESTROY,
                  APPLET_ERROR.                
            </javadoc>
            <declaration name="handler" type="Thread" line="73"/>
            <javadoc line="73">
                The thread for the applet.                
            </javadoc>
            <declaration name="defaultAppletSize" type="Dimension" line="77"/>
            <javadoc line="77">
                The initial applet size.                
            </javadoc>
            <declaration name="currentAppletSize" type="Dimension" line="81"/>
            <javadoc line="81">
                The current applet size.                
            </javadoc>
            <declaration name="mu" type="MessageUtils" line="85"/>
            <declaration name="loaderThread" type="Thread" line="86"/>
            <javadoc line="86">
                The thread to use during applet loading                
            </javadoc>
            <declaration name="loadAbortRequest" type="boolean" line="90"/>
            <javadoc line="90">
                Flag to indicate that a loading has been cancelled                
            </javadoc>
            <method name="getCode" type="String" line="94"/>
            <method name="getJarFiles" type="String" line="95"/>
            <method name="getSerializedObject" type="String" line="96"/>
            <method name="getWidth" type="int" line="97"/>
            <method name="getHeight" type="int" line="98"/>
            <method name="hasInitialFocus" type="boolean" line="99"/>
            <declaration name="threadGroupNumber" type="int" line="100"/>
            <method name="setupAppletAppContext" type="void" line="101"/>
            <method name="createAppletThread" type="void" line="103">
                <declaration name="nm" type="String" line="104"/>
                <declaration name="param" type="String" line="107"/>
                <declaration name="appletGroup" type="ThreadGroup" line="110"/>
                <anonymous_class line="112">
                    <method name="run" type="Object" line="113"/>
                </anonymous_class>
            </method>
            <method name="joinAppletThread" type="void" line="121">
                <scope line="122"/>
            </method>
            <method name="release" type="void" line="127">
                <scope line="128"/>
            </method>
            <javadoc line="133">
                Construct an applet viewer and start the applet.                
            </javadoc>
            <method name="init" type="void" line="136">
                <scope line="137"/>
                <scope line="143"/>
            </method>
            <javadoc line="152">
                Minimum size                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="155"/>
            <javadoc line="158">
                Preferred size                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="161"/>
            <declaration name="listeners" type="AppletListener" line="164"/>
            <declaration name="queue" type="Queue" line="165"/>
            <javadoc line="165">
                AppletEvent Queue                
            </javadoc>
            <method name="addAppletListener" type="void" line="169">
                <params>
                    <param name="l" type="AppletListener"/>
                </params>
            </method>
            <method name="removeAppletListener" type="void" line="172">
                <params>
                    <param name="l" type="AppletListener"/>
                </params>
            </method>
            <javadoc line="175">
                Dispatch event to the listeners..                
            </javadoc>
            <method name="dispatchAppletEvent" type="void" line="178">
                <params>
                    <param name="id" type="int"/>
                    <param name="argument" type="Object"/>
                </params>
                <scope line="179">
                    <declaration name="evt" type="AppletEvent" line="180"/>
                </scope>
            </method>
            <javadoc line="184">
                Send an event. Queue it for execution by the handler thread.                
            </javadoc>
            <method name="sendEvent" type="void" line="187">
                <params>
                    <param name="id" type="int"/>
                </params>
                <scope line="188">
                    <scope line="189"/>
                    <declaration name="eventId" type="Integer" line="192"/>
                </scope>
                <scope line="196">
                    <scope line="197"/>
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="206">
                Get an event from the queue.                
            </javadoc>
            <method name="getNextEvent" type="AppletEvent" line="209">
                <scope line="210"/>
                <declaration name="eventId" type="Integer" line="213"/>
            </method>
            <method name="emptyEventQueue" type="boolean" line="216"/>
            <javadoc line="220">
                This kludge is specific to get over AccessControlException thrown during
                  Applet.stop() or destroy() when static thread is suspended.  Set a flag
                  in AppletClassLoader to indicate that an
                  AccessControlException for RuntimePermission &quot;modifyThread&quot; or
                  &quot;modifyThreadGroup&quot; had occurred.                
            </javadoc>
            <method name="setExceptionStatus" type="void" line="227">
                <params>
                    <param name="e" type="AccessControlException"/>
                </params>
                <declaration name="p" type="Permission" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="236">
                Execute applet events.
                  Here is the state transition diagram
                  Note: (XXX) is the action
                  APPLET_XXX is the state
                  (applet code loaded) --&gt; APPLET_LOAD -- (applet init called)--&gt; APPLET_INIT -- (
                  applet start called) --&gt; APPLET_START -- (applet stop called) --&gt;APPLET_STOP --(applet
                  destroyed called) --&gt; APPLET_DESTROY --&gt;(applet gets disposed) --&gt;
                  APPLET_DISPOSE --&gt;....
                  In the legacy lifecycle model. The applet gets loaded, inited and started. So it stays
                  in the APPLET_START state unless the applet goes away(refresh page or leave the page).
                  So the applet stop method called and the applet enters APPLET_STOP state. Then if the applet
                  is revisited, it will call applet start method and enter the APPLET_START state and stay there.
                  In the modern lifecycle model. When the applet first time visited, it is same as legacy lifecycle
                  model. However, when the applet page goes away. It calls applet stop method and enters APPLET_STOP
                  state and then applet destroyed method gets called and enters APPLET_DESTROY state.
                  This code is also called by AppletViewer. In AppletViewer &quot;Restart&quot; menu, the applet is jump from
                  APPLET_STOP to APPLET_DESTROY and to APPLET_INIT .
                  Also, the applet can jump from APPLET_INIT state to APPLET_DESTROY (in Netscape/Mozilla case).
                  Same as APPLET_LOAD to
                  APPLET_DISPOSE since all of this are triggered by browser.                
            </javadoc>
            <method name="run" type="void" line="258">
                <declaration name="curThread" type="Thread" line="259"/>
                <scope line="260"/>
                <declaration name="disposed" type="boolean" line="264"/>
                <scope line="265">
                    <declaration name="evt" type="AppletEvent" line="266"/>
                    <scope line="267"/>
                    <scope line="270"/>
                    <scope line="274">
                        <scope line="277"/>
                        <scope line="280"/>
                        <scope line="286"/>
                        <scope line="290"/>
                        <scope line="295">
                            <scope line="296"/>
                        </scope>
                        <declaration name="f" type="Font" line="302"/>
                        <scope line="303"/>
                        <scope line="307">
                            <declaration name="p" type="AppletPanel" line="308"/>
                            <anonymous_class line="309">
                                <method name="run" type="void" line="310"/>
                            </anonymous_class>
                        </scope>
                        <scope line="316"/>
                        <scope line="318"/>
                        <scope line="324">
                            <scope line="325"/>
                            <scope line="331">
                                <declaration name="p" type="AppletPanel" line="332"/>
                                <declaration name="a" type="Applet" line="333"/>
                                <anonymous_class line="334">
                                    <method name="run" type="void" line="335"/>
                                </anonymous_class>
                            </scope>
                            <scope line="343"/>
                            <scope line="345"/>
                        </scope>
                        <scope line="352"/>
                        <scope line="357">
                            <declaration name="a" type="Applet" line="358"/>
                            <anonymous_class line="359">
                                <method name="run" type="void" line="360"/>
                            </anonymous_class>
                        </scope>
                        <scope line="366"/>
                        <scope line="368"/>
                        <scope line="370"/>
                        <scope line="373"/>
                        <scope line="380"/>
                        <scope line="385"/>
                        <scope line="388"/>
                        <scope line="395"/>
                        <scope line="400">
                            <declaration name="a" type="Applet" line="401"/>
                            <anonymous_class line="402">
                                <method name="run" type="void" line="403"/>
                            </anonymous_class>
                        </scope>
                        <scope line="409"/>
                        <scope line="411"/>
                    </scope>
                    <scope line="421">
                        <scope line="423"/>
                        <scope line="426"/>
                    </scope>
                    <scope line="431"/>
                    <scope line="435">
                        <scope line="437"/>
                        <scope line="440"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="448">
                Gets most recent focus owner component associated with the given window.
                  It does that without calling Window.getMostRecentFocusOwner since it
                  provides its own logic contradicting with setDefautlFocus. Instead, it
                  calls KeyboardFocusManager directly.                
            </javadoc>
            <method name="getMostRecentFocusOwnerForWindow" type="Component" line="454">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <anonymous_class line="455">
                    <method name="run" type="Object" line="456">
                        <declaration name="meth" type="Method" line="457"/>
                        <scope line="458"/>
                        <scope line="462"/>
                    </method>
                </anonymous_class>
                <declaration name="meth" type="Method" line="455"/>
                <scope line="469">
                    <scope line="470"/>
                    <scope line="473"/>
                </scope>
            </method>
            <method name="setDefaultFocus" type="void" line="479">
                <declaration name="toFocus" type="Component" line="480"/>
                <declaration name="parent" type="Container" line="481"/>
                <scope line="482">
                    <scope line="483">
                        <scope line="485"/>
                    </scope>
                    <scope line="489"/>
                </scope>
                <scope line="493">
                    <scope line="494"/>
                </scope>
            </method>
            <javadoc line="500">
                Load the applet into memory.
                  Runs in a seperate (and interruptible) thread from the rest of the
                  applet event processing so that it can be gracefully interrupted from
                  things like HotJava.                
            </javadoc>
            <method name="runLoader" type="void" line="506">
                <scope line="507"/>
                <declaration name="code" type="String" line="514"/>
                <scope line="516"/>
                <scope line="520"/>
                <scope line="527"/>
                <scope line="534"/>
                <scope line="541"/>
                <scope line="547"/>
                <scope line="552"/>
                <scope line="558"/>
                <scope line="561"/>
            </method>
            <method name="createApplet" type="Applet" line="569">
                <params>
                    <param name="loader" type="AppletClassLoader"/>
                </params>
                <declaration name="serName" type="String" line="570"/>
                <declaration name="code" type="String" line="571"/>
                <scope line="572"/>
                <scope line="576">
                    <declaration name="msg" type="String" line="577"/>
                </scope>
                <scope line="583"/>
                <scope line="587">
                    <anonymous_class line="588">
                        <method name="run" type="Object" line="589"/>
                    </anonymous_class>
                    <declaration name="is" type="InputStream" line="588"/>
                    <declaration name="ois" type="ObjectInputStream" line="594"/>
                    <declaration name="serObject" type="Object" line="595"/>
                </scope>
                <scope line="600">
                    <scope line="601"/>
                    <scope line="606"/>
                </scope>
            </method>
            <method name="loadJarFiles" type="void" line="613">
                <params>
                    <param name="loader" type="AppletClassLoader"/>
                </params>
                <declaration name="jarFiles" type="String" line="614"/>
                <scope line="615">
                    <declaration name="st" type="StringTokenizer" line="616"/>
                    <scope line="617">
                        <declaration name="tok" type="String" line="618"/>
                        <scope line="619"/>
                        <scope line="622"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="628">
                Request that the loading of the applet be stopped.                
            </javadoc>
            <method name="stopLoading" type="void" line="631">
                <scope line="632"/>
                <scope line="635"/>
            </method>
            <method name="okToLoad" type="boolean" line="639"/>
            <method name="clearLoadAbortRequest" type="void" line="642"/>
            <method name="setLoadAbortRequest" type="void" line="645"/>
            <method name="setLoaderThread" type="void" line="648">
                <params>
                    <param name="loaderThread" type="Thread"/>
                </params>
            </method>
            <javadoc line="651">
                Return true when the applet has been started.                
            </javadoc>
            <method name="isActive" type="boolean" line="654"/>
            <declaration name="appEvtQ" type="EventQueue" line="657"/>
            <javadoc line="658">
                Is called when the applet wants to be resized.                
            </javadoc>
            <method name="appletResize" type="void" line="661">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="currentSize" type="Dimension" line="664"/>
                <scope line="665">
                    <declaration name="appCtxt" type="AppContext" line="666"/>
                </scope>
                <declaration name="ap" type="AppletPanel" line="669"/>
                <scope line="670">
                    <anonymous_class line="671">
                        <method name="run" type="void" line="672">
                            <scope line="673"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="setBounds" type="void" line="681">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="getApplet" type="Applet" line="686"/>
            <javadoc line="689">
                Status line. Called by the AppletPanel to provide
                  feedback on the Applet&apos;s state.                
            </javadoc>
            <method name="showAppletStatus" type="void" line="693">
                <params>
                    <param name="status" type="String"/>
                </params>
            </method>
            <method name="showAppletStatus" type="void" line="696">
                <params>
                    <param name="status" type="String"/>
                    <param name="arg" type="Object"/>
                </params>
            </method>
            <method name="showAppletStatus" type="void" line="699">
                <params>
                    <param name="status" type="String"/>
                    <param name="arg1" type="Object"/>
                    <param name="arg2" type="Object"/>
                </params>
            </method>
            <javadoc line="702">
                Called by the AppletPanel to print to the log.                
            </javadoc>
            <method name="showAppletLog" type="void" line="705">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="showAppletLog" type="void" line="708">
                <params>
                    <param name="msg" type="String"/>
                    <param name="arg" type="Object"/>
                </params>
            </method>
            <javadoc line="711">
                Called by the AppletPanel to provide
                  feedback when an exception has happened.                
            </javadoc>
            <method name="showAppletException" type="void" line="715">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <javadoc line="719">
                Get caching key for classloader cache                
            </javadoc>
            <method name="getClassLoaderCacheKey" type="String" line="722"/>
            <declaration name="classloaders" type="HashMap" line="725"/>
            <javadoc line="725">
                The class loaders                
            </javadoc>
            <javadoc line="729">
                Flush a class loader.                
            </javadoc>
            <method name="flushClassLoader" type="void" line="732">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="735">
                Flush all class loaders.                
            </javadoc>
            <method name="flushClassLoaders" type="void" line="738"/>
            <javadoc line="741">
                This method actually creates an AppletClassLoader.
                  It can be override by subclasses (such as the Plug-in)
                  to provide different classloaders.                
            </javadoc>
            <method name="createClassLoader" type="AppletClassLoader" line="746">
                <params>
                    <param name="codebase" type="URL"/>
                </params>
            </method>
            <javadoc line="749">
                Get a class loader. Create in a restricted context                
            </javadoc>
            <method name="getClassLoader" type="AppletClassLoader" line="752">
                <params>
                    <param name="codebase" type="URL"/>
                    <param name="key" type="String"/>
                </params>
                <declaration name="c" type="AppletClassLoader" line="753"/>
                <scope line="754">
                    <declaration name="acc" type="AccessControlContext" line="755"/>
                    <anonymous_class line="756">
                        <method name="run" type="Object" line="757">
                            <declaration name="ac" type="AppletClassLoader" line="758"/>
                            <scope line="759">
                                <declaration name="res" type="AppletClassLoader" line="760"/>
                                <scope line="761"/>
                                <scope line="765"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="775">
                get the context for the AppletClassLoader we are creating.
                  the context is granted permission to create the class loader,
                  connnect to the codebase, and whatever else the policy grants
                  to all codebases.                
            </javadoc>
            <method name="getAccessControlContext" type="AccessControlContext" line="781">
                <params>
                    <param name="codebase" type="URL"/>
                </params>
                <anonymous_class line="782">
                    <method name="run" type="Object" line="783">
                        <declaration name="p" type="Policy" line="784"/>
                        <scope line="785"/>
                        <scope line="788"/>
                    </method>
                </anonymous_class>
                <declaration name="perms" type="PermissionCollection" line="782"/>
                <declaration name="p" type="Permission" line="796"/>
                <declaration name="urlConnection" type="java.net.URLConnection" line="797"/>
                <scope line="798"/>
                <scope line="802"/>
                <scope line="806">
                    <declaration name="path" type="String" line="807"/>
                    <declaration name="endIndex" type="int" line="808"/>
                    <scope line="809">
                        <scope line="811"/>
                    </scope>
                </scope>
                <scope line="817">
                    <declaration name="locUrl" type="URL" line="818"/>
                    <scope line="819"/>
                    <declaration name="host" type="String" line="822"/>
                </scope>
                <declaration name="domain" type="ProtectionDomain" line="825"/>
                <declaration name="acc" type="AccessControlContext" line="826"/>
            </method>
            <method name="getAppletHandlerThread" type="Thread" line="829"/>
            <method name="getAppletWidth" type="int" line="832"/>
            <method name="getAppletHeight" type="int" line="835"/>
            <method name="changeFrameAppContext" type="void" line="838">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="newAppContext" type="AppContext"/>
                </params>
                <declaration name="oldAppContext" type="AppContext" line="839"/>
                <scope line="841">
                    <declaration name="weakRef" type="WeakReference" line="842"/>
                    <scope line="843">
                        <declaration name="windowList" type="Vector&lt;WeakReference&lt;Window&gt;&gt;" line="844"/>
                        <scope line="845">
                            <scope line="846">
                                <scope line="847"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="856">
                        <declaration name="windowList" type="Vector&lt;WeakReference&lt;Window&gt;&gt;" line="857"/>
                        <scope line="858"/>
                    </scope>
                </scope>
            </method>
            <declaration name="jdk11Applet" type="boolean" line="866"/>
            <declaration name="jdk12Applet" type="boolean" line="867"/>
            <javadoc line="868">
                Determine JDK level of an applet.                
            </javadoc>
            <method name="findAppletJDKLevel" type="void" line="871">
                <params>
                    <param name="applet" type="Applet"/>
                </params>
                <declaration name="appletClass" type="Class" line="872"/>
                <scope line="873">
                    <declaration name="jdk11Target" type="Boolean" line="874"/>
                    <declaration name="jdk12Target" type="Boolean" line="875"/>
                    <scope line="876"/>
                    <declaration name="name" type="String" line="881"/>
                    <declaration name="resourceName" type="String" line="883"/>
                    <declaration name="is" type="InputStream" line="884"/>
                    <declaration name="classHeader" type="byte[]" line="885"/>
                    <scope line="886">
                        <anonymous_class line="887">
                            <method name="run" type="Object" line="888"/>
                        </anonymous_class>
                        <declaration name="byteRead" type="int" line="893"/>
                    </scope>
                    <scope line="897"/>
                    <declaration name="major_version" type="int" line="900"/>
                </scope>
            </method>
            <javadoc line="907">
                Return true if applet is targeted to JDK 1.1.                
            </javadoc>
            <method name="isJDK11Applet" type="boolean" line="910"/>
            <javadoc line="913">
                Return true if applet is targeted to JDK1.2.                
            </javadoc>
            <method name="isJDK12Applet" type="boolean" line="916"/>
            <javadoc line="919">
                Read short from byte array.                
            </javadoc>
            <method name="readShort" type="int" line="922">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="hi" type="int" line="923"/>
                <declaration name="lo" type="int" line="924"/>
            </method>
            <method name="readByte" type="int" line="927">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <declaration name="amh" type="AppletMessageHandler" line="930"/>
        </class>
    </source>