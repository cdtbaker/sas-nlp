<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.applet">
        <import package="java.lang.NullPointerException"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.URLConnection"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.IOException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.CodeSource"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.misc.IOUtils"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="AppletClassLoader" line="58">
            <extends class="URLClassLoader"/>
            <comment line="65">
                                
            </comment>
            <comment line="66">
                                
            </comment>
            <comment line="76">
                Creates a new AppletClassLoader for the specified base URL.                
            </comment>
            <comment line="99">
                Returns the applet code base URL.                
            </comment>
            <comment line="106">
                Returns the URLs used for loading classes and resources.                
            </comment>
            <comment line="117">
                Adds the specified JAR file to the search path of loaded JAR files.
                 Changed modifier to protected in order to be able to overwrite addJar()
                 in PluginClassLoader.java                
            </comment>
            <comment line="137">
                Override loadClass so that class loading errors can be caught in
                 order to print better error messages.                
            </comment>
            <comment line="166">
                Finds the applet class with the specified name. First searches
                 loaded JAR files then the applet code base for the class.                
            </comment>
            <comment line="314">
                Returns the contents of the specified URL as an array of bytes.                
            </comment>
            <comment line="343">
                Object for synchronization around getResourceAsStream()                
            </comment>
            <comment line="347">
                Flag to indicate getResourceAsStream() is in call                
            </comment>
            <comment line="444">
                Finds the applet resource with the specified name. First checks
                 loaded JAR files then the applet code base for the resource.                
            </comment>
            <comment line="554">
                Returns an enumeration of all the applet resources with the specified
                 name. First checks loaded JAR files then the applet code base for all
                 available resources.                
            </comment>
            <comment line="599">
                Load and resolve the file specified by the applet tag CODE
                 attribute. The argument can either be the relative path
                 of the class file itself or just the name of the class.                
            </comment>
            <comment line="637">
                The threadgroup that the applets loaded by this classloader live
                 in. In the sun. implementation of applets, the security manager&apos;s
                 (AppletSecurity) getThreadGroup returns the thread group of the
                 first applet on the stack, which is the applet&apos;s thread group.                
            </comment>
            <comment line="684">
                Get the AppContext, if any, corresponding to this AppletClassLoader.                
            </comment>
            <comment line="749">
                reset classloader&apos;s AppContext and ThreadGroup
                 This method is for subclass PluginClassLoader to
                 reset superclass&apos;s AppContext and ThreadGroup but do
                 not dispose the AppContext. PluginClassLoader does not
                 use UsageCount to decide whether to dispose AppContext
                
                 @return previous AppContext                
            </comment>
            <comment line="772">
                Hash map to store applet compatibility info                
            </comment>
            <comment line="829">
                Prints a class loading error message.                
            </comment>
            <comment line="872">
                run()                
            </comment>
            <javadoc line="58">
                This class defines the class loader for loading applet classes and
                  resources. It extends URLClassLoader to search the applet code base
                  for the class or resource after checking any loaded JAR files.                
            </javadoc>
            <declaration name="base" type="URL" line="64"/>
            <declaration name="codesource" type="CodeSource" line="65"/>
            <declaration name="acc" type="AccessControlContext" line="66"/>
            <declaration name="exceptionStatus" type="boolean" line="67"/>
            <declaration name="threadGroupSynchronizer" type="Object" line="69"/>
            <declaration name="grabReleaseSynchronizer" type="Object" line="70"/>
            <declaration name="codebaseLookup" type="boolean" line="72"/>
            <declaration name="allowRecursiveDirectoryRead" type="boolean" line="73"/>
            <method name="AppletClassLoader" type="constructor" line="78">
                <params>
                    <param name="base" type="URL"/>
                </params>
            </method>
            <method name="disableRecursiveDirectoryRead" type="void" line="86"/>
            <javadoc line="91">
                Set the codebase lookup flag.                
            </javadoc>
            <method name="setCodebaseLookup" type="void" line="94">
                <params>
                    <param name="codebaseLookup" type="boolean"/>
                </params>
            </method>
            <method name="getBaseURL" type="URL" line="101"/>
            <method name="getURLs" type="URL[]" line="108">
                <declaration name="jars" type="URL[]" line="109"/>
                <declaration name="urls" type="URL[]" line="110"/>
            </method>
            <method name="addJar" type="void" line="121">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="129">
                    DEBUG                    
                </comment>
                <comment line="130">
                    URL[] urls = getURLs();                    
                </comment>
                <comment line="131">
                    for (int i = 0; i &lt; urls.length; i++) {                    
                </comment>
                <comment line="132">
                    System.out.println(&quot;url[&quot; + i + &quot;] = &quot; + urls[i]);                    
                </comment>
                <comment line="133">
                    }                    
                </comment>
                <declaration name="url" type="URL" line="122"/>
                <scope line="123"/>
                <scope line="125"/>
            </method>
            <method name="loadClass" type="Class" line="142">
                <params>
                    <param name="name" type="String"/>
                    <param name="resolve" type="boolean"/>
                </params>
                <comment line="143">
                    First check if we have permission to access the package. This                    
                </comment>
                <comment line="144">
                    should go away once we&apos;ve added support for exported packages.                    
                </comment>
                <comment line="154">
                    printError(name, e.getException());                    
                </comment>
                <comment line="157">
                    printError(name, e);                    
                </comment>
                <comment line="160">
                    printError(name, e);                    
                </comment>
                <declaration name="i" type="int" line="145"/>
                <scope line="146">
                    <declaration name="sm" type="SecurityManager" line="147"/>
                </scope>
                <scope line="151"/>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="159"/>
            </method>
            <method name="findClass" type="Class" line="169">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="178">
                    check loaded JAR files                    
                </comment>
                <comment line="184">
                    Otherwise, try loading the class from the code base URL                    
                </comment>
                <comment line="186">
                    4668479: Option to turn off codebase lookup in AppletClassLoader                    
                </comment>
                <comment line="187">
                    during resource requests. [stanley.ho]                    
                </comment>
                <comment line="191">
                    final String path = name.replace(&apos;.&apos;, &apos;/&apos;).concat(&quot;.class&quot;).concat(cookie);                    
                </comment>
                <comment line="201">
                    Make sure the codebase won&apos;t be modified                    
                </comment>
                <declaration name="index" type="int" line="171"/>
                <declaration name="cookie" type="String" line="172"/>
                <scope line="173"/>
                <scope line="179"/>
                <scope line="181"/>
                <declaration name="encodedName" type="String" line="192"/>
                <declaration name="path" type="String" line="193"/>
                <scope line="194">
                    <anonymous_class line="196">
                        <method name="run" type="Object" line="197">
                            <comment line="201">
                                Make sure the codebase won&apos;t be modified                                
                            </comment>
                            <scope line="198">
                                <declaration name="finalURL" type="URL" line="199"/>
                                <scope line="204"/>
                                <scope line="207"/>
                            </scope>
                            <scope line="210"/>
                        </method>
                    </anonymous_class>
                    <declaration name="b" type="byte[]" line="195"/>
                    <scope line="216"/>
                    <scope line="218"/>
                </scope>
                <scope line="221"/>
            </method>
            <javadoc line="226">
                Returns the permissions for the given codesource object.
                  The implementation of this method first calls super.getPermissions,
                  to get the permissions
                  granted by the super class, and then adds additional permissions
                  based on the URL of the codesource.
                  &lt;p&gt;
                  If the protocol is &quot;file&quot;
                  and the path specifies a file, permission is granted to read all files
                  and (recursively) all files and subdirectories contained in
                  that directory. This is so applets with a codebase of
                  file:/blah/some.jar can read in file:/blah/, which is needed to
                  be backward compatible. We also add permission to connect back to
                  the &quot;localhost&quot;.                
                <param>
                    codesource the codesource                    
                </param>
                <return>
                    the permissions granted to the codesource                    
                </return>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="245">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
                <comment line="278">
                    grant codebase recursive read permission                    
                </comment>
                <comment line="279">
                    this should only be granted to non-UNC file URL codebase and                    
                </comment>
                <comment line="280">
                    the codesource path must either be a directory, or a file                    
                </comment>
                <comment line="281">
                    that ends with .jar or .zip                    
                </comment>
                <declaration name="perms" type="PermissionCollection" line="246"/>
                <declaration name="url" type="URL" line="248"/>
                <declaration name="path" type="String" line="250"/>
                <declaration name="p" type="Permission" line="251"/>
                <scope line="253"/>
                <scope line="255"/>
                <scope line="259"/>
                <scope line="261"/>
                <scope line="266">
                    <declaration name="rawPath" type="String" line="267"/>
                    <scope line="268">
                        <declaration name="endIndex" type="int" line="269"/>
                        <scope line="270"/>
                    </scope>
                    <declaration name="f" type="File" line="276"/>
                    <declaration name="isDirectory" type="boolean" line="277"/>
                    <scope line="284">
                        <declaration name="bperm" type="Permission" line="286"/>
                        <scope line="287"/>
                        <scope line="289"/>
                        <scope line="292">
                            <declaration name="bpath" type="String" line="293"/>
                            <scope line="294"/>
                        </scope>
                        <scope line="299">
                            <declaration name="bpath" type="String" line="300"/>
                            <scope line="302"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getBytes" type="byte[]" line="316">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="327">
                    Fixed #4507227: Slow performance to load                    
                </comment>
                <comment line="328">
                    class and resources. [stanleyh]                    
                </comment>
                <comment line="329">
                                        
                </comment>
                <comment line="330">
                    Use buffered input stream [stanleyh]                    
                </comment>
                <declaration name="uc" type="URLConnection" line="317"/>
                <scope line="318">
                    <declaration name="huc" type="java.net.HttpURLConnection" line="319"/>
                    <declaration name="code" type="int" line="320"/>
                    <scope line="321"/>
                </scope>
                <declaration name="len" type="int" line="325"/>
                <declaration name="in" type="InputStream" line="331"/>
                <declaration name="b" type="byte[]" line="333"/>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <declaration name="syncResourceAsStream" type="Object" line="343"/>
            <declaration name="syncResourceAsStreamFromJar" type="Object" line="344"/>
            <declaration name="resourceAsStreamInCall" type="boolean" line="347"/>
            <declaration name="resourceAsStreamFromJarInCall" type="boolean" line="348"/>
            <javadoc line="350">
                Returns an input stream for reading the specified resource.
                  The search order is described in the documentation for {@link #getResource(String)}.&lt;p&gt;                
                <param>
                    name the resource name                    
                </param>
                <return>
                    an input stream for reading the resource, or <code>null</code>
                      if the resource could not be found                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="362">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="372">
                    Fixed #4507227: Slow performance to load                    
                </comment>
                <comment line="373">
                    class and resources. [stanleyh]                    
                </comment>
                <comment line="374">
                                        
                </comment>
                <comment line="375">
                    The following is used to avoid calling                    
                </comment>
                <comment line="376">
                    AppletClassLoader.findResource() in                    
                </comment>
                <comment line="377">
                    super.getResourceAsStream(). Otherwise,                    
                </comment>
                <comment line="378">
                    unnecessary connection will be made.                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="384">
                    Call super class                    
                </comment>
                <comment line="390">
                    4668479: Option to turn off codebase lookup in AppletClassLoader                    
                </comment>
                <comment line="391">
                    during resource requests. [stanley.ho]                    
                </comment>
                <comment line="394">
                    If resource cannot be obtained,                    
                </comment>
                <comment line="395">
                    try to download it from codebase                    
                </comment>
                <scope line="364"/>
                <scope line="369">
                    <declaration name="is" type="InputStream" line="370"/>
                    <scope line="381"/>
                    <scope line="393">
                        <declaration name="url" type="URL" line="396"/>
                    </scope>
                </scope>
                <scope line="403"/>
            </method>
            <javadoc line="409">
                Returns an input stream for reading the specified resource from the
                  the loaded jar files.
                  The search order is described in the documentation for {@link #getResource(String)}.&lt;p&gt;                
                <param>
                    name the resource name                    
                </param>
                <return>
                    an input stream for reading the resource, or <code>null</code>
                      if the resource could not be found                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getResourceAsStreamFromJar" type="InputStream" line="421">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="431">
                    Call super class                    
                </comment>
                <scope line="423"/>
                <scope line="427">
                    <declaration name="is" type="InputStream" line="428"/>
                    <scope line="429"/>
                </scope>
                <scope line="437"/>
            </method>
            <method name="findResource" type="URL" line="447">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="448">
                    check loaded JAR files                    
                </comment>
                <comment line="451">
                    6215746:  Disable META-INF/* lookup from codebase in                    
                </comment>
                <comment line="452">
                    applet/plugin classloader. [stanley.ho]                    
                </comment>
                <comment line="456">
                    4668479: Option to turn off codebase lookup in AppletClassLoader                    
                </comment>
                <comment line="457">
                    during resource requests. [stanley.ho]                    
                </comment>
                <comment line="463">
                    #4805170, if it is a call from Applet.getImage()                    
                </comment>
                <comment line="464">
                    we should check for the image only in the archives                    
                </comment>
                <comment line="474">
                    Fixed #4507227: Slow performance to load                    
                </comment>
                <comment line="475">
                    class and resources. [stanleyh]                    
                </comment>
                <comment line="476">
                                        
                </comment>
                <comment line="477">
                    Check if getResourceAsStream is called.                    
                </comment>
                <comment line="478">
                                        
                </comment>
                <comment line="486">
                    If getResourceAsStream is called, don&apos;t                    
                </comment>
                <comment line="487">
                    trigger the following code. Otherwise,                    
                </comment>
                <comment line="488">
                    unnecessary connection will be made.                    
                </comment>
                <comment line="489">
                                        
                </comment>
                <comment line="492">
                    otherwise, try the code base                    
                </comment>
                <comment line="495">
                    check if resource exists                    
                </comment>
                <comment line="499">
                    all exceptions, including security exceptions, are caught                    
                </comment>
                <declaration name="url" type="URL" line="449"/>
                <scope line="462">
                    <declaration name="insideGetResourceAsStreamFromJar" type="boolean" line="465"/>
                    <scope line="466"/>
                    <scope line="470"/>
                    <declaration name="insideGetResourceAsStream" type="boolean" line="479"/>
                    <scope line="482"/>
                    <scope line="491">
                        <scope line="493"/>
                        <scope line="498"/>
                    </scope>
                </scope>
            </method>
            <method name="resourceExists" type="boolean" line="508">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="509">
                    Check if the resource exists.                    
                </comment>
                <comment line="510">
                    It almost works to just try to do an openConnection() but                    
                </comment>
                <comment line="511">
                    HttpURLConnection will return true on HTTP_BAD_REQUEST                    
                </comment>
                <comment line="512">
                    when the requested name ends in &quot;.html&quot;, &quot;.htm&quot;, and &quot;.txt&quot;                    
                </comment>
                <comment line="513">
                    and we want to be able to handle these                    
                </comment>
                <comment line="514">
                                        
                </comment>
                <comment line="515">
                    Also, cannot just open a connection for things like FileURLConnection,                    
                </comment>
                <comment line="516">
                    because they succeed when connecting to a nonexistent file.                    
                </comment>
                <comment line="517">
                    So, in those cases we open and close an input stream.                    
                </comment>
                <comment line="525">
                    To reduce overhead, using http HEAD method instead of GET method                    
                </comment>
                <comment line="536">
                    Fix for #4182052 - stanleyh
                    
                     The same connection should be reused to avoid multiple
                     HTTP connections                    
                </comment>
                <comment line="543">
                    our best guess for the other cases                    
                </comment>
                <declaration name="ok" type="boolean" line="518"/>
                <scope line="519">
                    <declaration name="conn" type="URLConnection" line="520"/>
                    <scope line="521">
                        <declaration name="hconn" type="java.net.HttpURLConnection" line="522"/>
                        <declaration name="code" type="int" line="528"/>
                        <scope line="529"/>
                        <scope line="532"/>
                    </scope>
                    <scope line="535">
                        <declaration name="is" type="InputStream" line="544"/>
                    </scope>
                </scope>
                <scope line="547"/>
            </method>
            <method name="findResources" type="Enumeration" line="558">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="562">
                    6215746:  Disable META-INF/* lookup from codebase in                    
                </comment>
                <comment line="563">
                    applet/plugin classloader. [stanley.ho]                    
                </comment>
                <comment line="567">
                    4668479: Option to turn off codebase lookup in AppletClassLoader                    
                </comment>
                <comment line="568">
                    during resource requests. [stanley.ho]                    
                </comment>
                <declaration name="e" type="Enumeration" line="560"/>
                <declaration name="u" type="URL" line="572"/>
                <scope line="573"/>
                <declaration name="url" type="URL" line="577"/>
                <anonymous_class line="578">
                    <declaration name="done" type="boolean" line="579"/>
                    <method name="nextElement" type="Object" line="580">
                        <scope line="581">
                            <scope line="582"/>
                            <scope line="586"/>
                        </scope>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="592"/>
                </anonymous_class>
            </method>
            <method name="loadCode" type="Class" line="603">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="604">
                    first convert any &apos;/&apos; or native file separator to .                    
                </comment>
                <comment line="608">
                    deal with URL rewriting                    
                </comment>
                <comment line="616">
                    save that name for later                    
                </comment>
                <comment line="618">
                    then strip off any suffixes                    
                </comment>
                <comment line="628">
                    then if it didn&apos;t end with .java or .class, or in the                    
                </comment>
                <comment line="629">
                    really pathological case of a class named class or java                    
                </comment>
                <declaration name="cookie" type="String" line="609"/>
                <declaration name="index" type="int" line="610"/>
                <scope line="611"/>
                <declaration name="fullName" type="String" line="617"/>
                <scope line="619"/>
                <scope line="622"/>
                <scope line="626"/>
            </method>
            <declaration name="threadGroup" type="AppletThreadGroup" line="642"/>
            <declaration name="appContext" type="AppContext" line="643"/>
            <method name="getThreadGroup" type="ThreadGroup" line="645">
                <comment line="651">
                    threadGroup.setDaemon(true);                    
                </comment>
                <comment line="652">
                    threadGroup is now destroyed by AppContext.dispose()                    
                </comment>
                <comment line="654">
                    Create the new AppContext from within a Thread belonging                    
                </comment>
                <comment line="655">
                    to the newly created ThreadGroup, and wait for the                    
                </comment>
                <comment line="656">
                    creation to complete before returning from this method.                    
                </comment>
                <comment line="659">
                    Since this thread will later be used to launch the                    
                </comment>
                <comment line="660">
                    applet&apos;s AWT-event dispatch thread and we want the applet                    
                </comment>
                <comment line="661">
                    code executing the AWT callbacks to use their own class                    
                </comment>
                <comment line="662">
                    loader rather than the system class loader, explicitly                    
                </comment>
                <comment line="663">
                    set the context class loader to the AppletClassLoader.                    
                </comment>
                <scope line="646">
                    <scope line="647">
                        <anonymous_class line="648">
                            <method name="run" type="Object" line="649">
                                <comment line="651">
                                    threadGroup.setDaemon(true);                                    
                                </comment>
                                <comment line="652">
                                    threadGroup is now destroyed by AppContext.dispose()                                    
                                </comment>
                                <comment line="654">
                                    Create the new AppContext from within a Thread belonging                                    
                                </comment>
                                <comment line="655">
                                    to the newly created ThreadGroup, and wait for the                                    
                                </comment>
                                <comment line="656">
                                    creation to complete before returning from this method.                                    
                                </comment>
                                <comment line="659">
                                    Since this thread will later be used to launch the                                    
                                </comment>
                                <comment line="660">
                                    applet&apos;s AWT-event dispatch thread and we want the applet                                    
                                </comment>
                                <comment line="661">
                                    code executing the AWT callbacks to use their own class                                    
                                </comment>
                                <comment line="662">
                                    loader rather than the system class loader, explicitly                                    
                                </comment>
                                <comment line="663">
                                    set the context class loader to the AppletClassLoader.                                    
                                </comment>
                                <declaration name="creatorThread" type="AppContextCreator" line="657"/>
                                <scope line="667">
                                    <scope line="668">
                                        <scope line="669"/>
                                    </scope>
                                </scope>
                                <scope line="673"/>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <method name="getAppContext" type="AppContext" line="686"/>
            <declaration name="usageCount" type="int" line="690"/>
            <javadoc line="692">
                Grab this AppletClassLoader and its ThreadGroup/AppContext, so they
                  won&apos;t be destroyed.                
            </javadoc>
            <method name="grab" type="void" line="696">
                <comment line="700">
                    Make sure ThreadGroup/AppContext exist                    
                </comment>
                <scope line="697"/>
            </method>
            <method name="setExceptionStatus" type="void" line="704"/>
            <method name="getExceptionStatus" type="boolean" line="709"/>
            <javadoc line="713">
                Release this AppletClassLoader and its ThreadGroup/AppContext.
                  If nothing else has grabbed this AppletClassLoader, its ThreadGroup
                  and AppContext will be destroyed.
                  Because this method may destroy the AppletClassLoader&apos;s ThreadGroup,
                  this method should NOT be called from within the AppletClassLoader&apos;s
                  ThreadGroup.
                  Changed modifier to protected in order to be able to overwrite this
                  function in PluginClassLoader.java                
            </javadoc>
            <method name="release" type="void" line="725">
                <comment line="739">
                    Dispose appContext outside any sync block to                    
                </comment>
                <comment line="740">
                    prevent potential deadlock.                    
                </comment>
                <comment line="743">
                    nuke the world!                    
                </comment>
                <declaration name="tempAppContext" type="AppContext" line="727"/>
                <scope line="729">
                    <scope line="730"/>
                    <scope line="732">
                        <scope line="733"/>
                    </scope>
                </scope>
                <scope line="741">
                    <scope line="742"/>
                    <scope line="744"/>
                </scope>
            </method>
            <method name="resetAppContext" type="AppContext" line="757">
                <comment line="761">
                    Store app context in temp variable                    
                </comment>
                <declaration name="tempAppContext" type="AppContext" line="758"/>
                <scope line="760"/>
            </method>
            <declaration name="jdk11AppletInfo" type="HashMap" line="772"/>
            <declaration name="jdk12AppletInfo" type="HashMap" line="773"/>
            <javadoc line="775">
                Set applet target level as JDK 1.1.                
                <param>
                    clazz Applet class.                    
                </param>
                <param>
                    bool true if JDK is targeted for JDK 1.1;
                      false otherwise.                    
                </param>
            </javadoc>
            <method name="setJDK11Target" type="void" line="783">
                <params>
                    <param name="clazz" type="Class"/>
                    <param name="bool" type="boolean"/>
                </params>
            </method>
            <javadoc line="787">
                Set applet target level as JDK 1.2.                
                <param>
                    clazz Applet class.                    
                </param>
                <param>
                    bool true if JDK is targeted for JDK 1.2;
                      false otherwise.                    
                </param>
            </javadoc>
            <method name="setJDK12Target" type="void" line="795">
                <params>
                    <param name="clazz" type="Class"/>
                    <param name="bool" type="boolean"/>
                </params>
            </method>
            <javadoc line="799">
                Determine if applet is targeted for JDK 1.1.                
                <param>
                    applet Applet class.                    
                </param>
                <return>
                    TRUE if applet is targeted for JDK 1.1;
                      FALSE if applet is not;
                      null if applet is unknown.                    
                </return>
            </javadoc>
            <method name="isJDK11Target" type="Boolean" line="808">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
            </method>
            <javadoc line="812">
                Determine if applet is targeted for JDK 1.2.                
                <param>
                    applet Applet class.                    
                </param>
                <return>
                    TRUE if applet is targeted for JDK 1.2;
                      FALSE if applet is not;
                      null if applet is unknown.                    
                </return>
            </javadoc>
            <method name="isJDK12Target" type="Boolean" line="821">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
            </method>
            <declaration name="mh" type="AppletMessageHandler" line="825"/>
            <method name="printError" type="void" line="831">
                <params>
                    <param name="name" type="String"/>
                    <param name="e" type="Throwable"/>
                </params>
                <declaration name="s" type="String" line="832"/>
                <scope line="833"/>
                <scope line="835"/>
                <scope line="837"/>
                <scope line="839"/>
                <scope line="841"/>
                <scope line="844"/>
            </method>
        </class>
        <class name="AppContextCreator" line="856">
            <extends class="Thread"/>
            <comment line="65">
                                
            </comment>
            <comment line="66">
                                
            </comment>
            <comment line="76">
                Creates a new AppletClassLoader for the specified base URL.                
            </comment>
            <comment line="99">
                Returns the applet code base URL.                
            </comment>
            <comment line="106">
                Returns the URLs used for loading classes and resources.                
            </comment>
            <comment line="117">
                Adds the specified JAR file to the search path of loaded JAR files.
                 Changed modifier to protected in order to be able to overwrite addJar()
                 in PluginClassLoader.java                
            </comment>
            <comment line="137">
                Override loadClass so that class loading errors can be caught in
                 order to print better error messages.                
            </comment>
            <comment line="166">
                Finds the applet class with the specified name. First searches
                 loaded JAR files then the applet code base for the class.                
            </comment>
            <comment line="314">
                Returns the contents of the specified URL as an array of bytes.                
            </comment>
            <comment line="343">
                Object for synchronization around getResourceAsStream()                
            </comment>
            <comment line="347">
                Flag to indicate getResourceAsStream() is in call                
            </comment>
            <comment line="444">
                Finds the applet resource with the specified name. First checks
                 loaded JAR files then the applet code base for the resource.                
            </comment>
            <comment line="554">
                Returns an enumeration of all the applet resources with the specified
                 name. First checks loaded JAR files then the applet code base for all
                 available resources.                
            </comment>
            <comment line="599">
                Load and resolve the file specified by the applet tag CODE
                 attribute. The argument can either be the relative path
                 of the class file itself or just the name of the class.                
            </comment>
            <comment line="637">
                The threadgroup that the applets loaded by this classloader live
                 in. In the sun. implementation of applets, the security manager&apos;s
                 (AppletSecurity) getThreadGroup returns the thread group of the
                 first applet on the stack, which is the applet&apos;s thread group.                
            </comment>
            <comment line="684">
                Get the AppContext, if any, corresponding to this AppletClassLoader.                
            </comment>
            <comment line="749">
                reset classloader&apos;s AppContext and ThreadGroup
                 This method is for subclass PluginClassLoader to
                 reset superclass&apos;s AppContext and ThreadGroup but do
                 not dispose the AppContext. PluginClassLoader does not
                 use UsageCount to decide whether to dispose AppContext
                
                 @return previous AppContext                
            </comment>
            <comment line="772">
                Hash map to store applet compatibility info                
            </comment>
            <comment line="829">
                Prints a class loading error message.                
            </comment>
            <comment line="872">
                run()                
            </comment>
            <declaration name="syncObject" type="Object" line="857"/>
            <declaration name="appContext" type="AppContext" line="858"/>
            <declaration name="created" type="boolean" line="859"/>
            <method name="AppContextCreator" type="constructor" line="861">
                <params>
                    <param name="group" type="ThreadGroup"/>
                </params>
            </method>
            <method name="run" type="void" line="865">
                <scope line="868"/>
            </method>
        </class>
    </source>