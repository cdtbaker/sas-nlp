<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.applet">
        <import package="java.lang.NullPointerException"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.URLConnection"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.IOException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.CodeSource"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.misc.IOUtils"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="AppletClassLoader" line="31">
            <extends class="URLClassLoader"/>
            <javadoc line="31">
                This class defines the class loader for loading applet classes and
                  resources. It extends URLClassLoader to search the applet code base
                  for the class or resource after checking any loaded JAR files.                
            </javadoc>
            <declaration name="base" type="URL" line="37"/>
            <declaration name="codesource" type="CodeSource" line="38"/>
            <declaration name="acc" type="AccessControlContext" line="39"/>
            <declaration name="exceptionStatus" type="boolean" line="40"/>
            <declaration name="threadGroupSynchronizer" type="Object" line="41"/>
            <declaration name="grabReleaseSynchronizer" type="Object" line="42"/>
            <declaration name="codebaseLookup" type="boolean" line="43"/>
            <declaration name="allowRecursiveDirectoryRead" type="boolean" line="44"/>
            <method name="AppletClassLoader" type="constructor" line="45">
                <params>
                    <param name="base" type="URL"/>
                </params>
            </method>
            <method name="disableRecursiveDirectoryRead" type="void" line="51"/>
            <javadoc line="54">
                Set the codebase lookup flag.                
            </javadoc>
            <method name="setCodebaseLookup" type="void" line="57">
                <params>
                    <param name="codebaseLookup" type="boolean"/>
                </params>
            </method>
            <method name="getBaseURL" type="URL" line="60"/>
            <method name="getURLs" type="URL[]" line="63">
                <declaration name="jars" type="URL[]" line="64"/>
                <declaration name="urls" type="URL[]" line="65"/>
            </method>
            <method name="addJar" type="void" line="70">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="url" type="URL" line="71"/>
                <scope line="72"/>
                <scope line="75"/>
            </method>
            <method name="loadClass" type="Class" line="80">
                <params>
                    <param name="name" type="String"/>
                    <param name="resolve" type="boolean"/>
                </params>
                <declaration name="i" type="int" line="81"/>
                <scope line="82">
                    <declaration name="sm" type="SecurityManager" line="83"/>
                </scope>
                <scope line="86"/>
                <scope line="89"/>
                <scope line="92"/>
                <scope line="95"/>
            </method>
            <method name="findClass" type="Class" line="99">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="index" type="int" line="100"/>
                <declaration name="cookie" type="String" line="101"/>
                <scope line="102"/>
                <scope line="106"/>
                <scope line="109"/>
                <declaration name="encodedName" type="String" line="112"/>
                <declaration name="path" type="String" line="113"/>
                <scope line="114">
                    <anonymous_class line="115">
                        <method name="run" type="Object" line="116">
                            <scope line="117">
                                <declaration name="finalURL" type="URL" line="118"/>
                                <scope line="119"/>
                                <scope line="122"/>
                            </scope>
                            <scope line="126"/>
                        </method>
                    </anonymous_class>
                    <declaration name="b" type="byte[]" line="115"/>
                    <scope line="132"/>
                    <scope line="135"/>
                </scope>
                <scope line="139"/>
            </method>
            <javadoc line="143">
                Returns the permissions for the given codesource object.
                  The implementation of this method first calls super.getPermissions,
                  to get the permissions
                  granted by the super class, and then adds additional permissions
                  based on the URL of the codesource.
                  &lt;p&gt;
                  If the protocol is &quot;file&quot;
                  and the path specifies a file, permission is granted to read all files
                  and (recursively) all files and subdirectories contained in
                  that directory. This is so applets with a codebase of
                  file:/blah/some.jar can read in file:/blah/, which is needed to
                  be backward compatible. We also add permission to connect back to
                  the &quot;localhost&quot;.                
                <param>
                    codesource the codesource                    
                </param>
                <return>
                    the permissions granted to the codesource                    
                </return>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="160">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
                <declaration name="perms" type="PermissionCollection" line="161"/>
                <declaration name="url" type="URL" line="162"/>
                <declaration name="path" type="String" line="163"/>
                <declaration name="p" type="Permission" line="164"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
                <scope line="174"/>
                <scope line="178">
                    <declaration name="rawPath" type="String" line="179"/>
                    <scope line="180">
                        <declaration name="endIndex" type="int" line="181"/>
                        <scope line="182"/>
                    </scope>
                    <declaration name="f" type="File" line="187"/>
                    <declaration name="isDirectory" type="boolean" line="188"/>
                    <scope line="189">
                        <declaration name="bperm" type="Permission" line="190"/>
                        <scope line="191"/>
                        <scope line="194"/>
                        <scope line="197">
                            <declaration name="bpath" type="String" line="198"/>
                            <scope line="199"/>
                        </scope>
                        <scope line="204">
                            <declaration name="bpath" type="String" line="205"/>
                            <scope line="207"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getBytes" type="byte[]" line="216">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="uc" type="URLConnection" line="217"/>
                <scope line="218">
                    <declaration name="huc" type="java.net.HttpURLConnection" line="219"/>
                    <declaration name="code" type="int" line="220"/>
                    <scope line="221"/>
                </scope>
                <declaration name="len" type="int" line="225"/>
                <declaration name="in" type="InputStream" line="226"/>
                <declaration name="b" type="byte[]" line="227"/>
                <scope line="228"/>
                <scope line="231"/>
            </method>
            <declaration name="syncResourceAsStream" type="Object" line="236"/>
            <declaration name="syncResourceAsStreamFromJar" type="Object" line="237"/>
            <declaration name="resourceAsStreamInCall" type="boolean" line="238"/>
            <declaration name="resourceAsStreamFromJarInCall" type="boolean" line="239"/>
            <javadoc line="240">
                Returns an input stream for reading the specified resource.
                  The search order is described in the documentation for {@link #getResource(String)}.&lt;p&gt;                
                <param>
                    name the resource name                    
                </param>
                <return>
                    an input stream for reading the resource, or <code>null</code>
                      if the resource could not be found                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="248">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="249"/>
                <scope line="252">
                    <declaration name="is" type="InputStream" line="253"/>
                    <scope line="254"/>
                    <scope line="259">
                        <declaration name="url" type="URL" line="260"/>
                    </scope>
                </scope>
                <scope line="265"/>
            </method>
            <javadoc line="269">
                Returns an input stream for reading the specified resource from the
                  the loaded jar files.
                  The search order is described in the documentation for {@link #getResource(String)}.&lt;p&gt;                
                <param>
                    name the resource name                    
                </param>
                <return>
                    an input stream for reading the resource, or <code>null</code>
                      if the resource could not be found                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getResourceAsStreamFromJar" type="InputStream" line="278">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="279"/>
                <scope line="282">
                    <declaration name="is" type="InputStream" line="283"/>
                    <scope line="284"/>
                </scope>
                <scope line="291"/>
            </method>
            <method name="findResource" type="URL" line="295">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="url" type="URL" line="296"/>
                <scope line="299">
                    <declaration name="insideGetResourceAsStreamFromJar" type="boolean" line="300"/>
                    <scope line="301"/>
                    <scope line="304"/>
                    <declaration name="insideGetResourceAsStream" type="boolean" line="307"/>
                    <scope line="308"/>
                    <scope line="311">
                        <scope line="312"/>
                        <scope line="316"/>
                    </scope>
                </scope>
            </method>
            <method name="resourceExists" type="boolean" line="323">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="ok" type="boolean" line="324"/>
                <scope line="325">
                    <declaration name="conn" type="URLConnection" line="326"/>
                    <scope line="327">
                        <declaration name="hconn" type="java.net.HttpURLConnection" line="328"/>
                        <declaration name="code" type="int" line="330"/>
                        <scope line="331"/>
                        <scope line="334"/>
                    </scope>
                    <scope line="338">
                        <declaration name="is" type="InputStream" line="339"/>
                    </scope>
                </scope>
                <scope line="343"/>
            </method>
            <method name="findResources" type="Enumeration" line="348">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="e" type="Enumeration" line="349"/>
                <declaration name="u" type="URL" line="352"/>
                <scope line="353"/>
                <declaration name="url" type="URL" line="356"/>
                <anonymous_class line="357">
                    <declaration name="done" type="boolean" line="358"/>
                    <method name="nextElement" type="Object" line="359">
                        <scope line="360">
                            <scope line="361"/>
                            <scope line="365"/>
                        </scope>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="371"/>
                </anonymous_class>
            </method>
            <method name="loadCode" type="Class" line="377">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="cookie" type="String" line="380"/>
                <declaration name="index" type="int" line="381"/>
                <scope line="382"/>
                <declaration name="fullName" type="String" line="386"/>
                <scope line="387"/>
                <scope line="390"/>
                <scope line="394"/>
            </method>
            <declaration name="threadGroup" type="AppletThreadGroup" line="399"/>
            <declaration name="appContext" type="AppContext" line="400"/>
            <method name="getThreadGroup" type="ThreadGroup" line="401">
                <scope line="402">
                    <scope line="403">
                        <anonymous_class line="404">
                            <method name="run" type="Object" line="405">
                                <declaration name="creatorThread" type="AppContextCreator" line="407"/>
                                <scope line="410">
                                    <scope line="411">
                                        <scope line="412"/>
                                    </scope>
                                </scope>
                                <scope line="417"/>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <method name="getAppContext" type="AppContext" line="428"/>
            <declaration name="usageCount" type="int" line="431"/>
            <javadoc line="432">
                Grab this AppletClassLoader and its ThreadGroup/AppContext, so they
                  won&apos;t be destroyed.                
            </javadoc>
            <method name="grab" type="void" line="436">
                <scope line="437"/>
            </method>
            <method name="setExceptionStatus" type="void" line="442"/>
            <method name="getExceptionStatus" type="boolean" line="445"/>
            <javadoc line="448">
                Release this AppletClassLoader and its ThreadGroup/AppContext.
                  If nothing else has grabbed this AppletClassLoader, its ThreadGroup
                  and AppContext will be destroyed.
                  Because this method may destroy the AppletClassLoader&apos;s ThreadGroup,
                  this method should NOT be called from within the AppletClassLoader&apos;s
                  ThreadGroup.
                  Changed modifier to protected in order to be able to overwrite this
                  function in PluginClassLoader.java                
            </javadoc>
            <method name="release" type="void" line="458">
                <declaration name="tempAppContext" type="AppContext" line="459"/>
                <scope line="460">
                    <scope line="461"/>
                    <scope line="464">
                        <scope line="465"/>
                    </scope>
                </scope>
                <scope line="470">
                    <scope line="471"/>
                    <scope line="474"/>
                </scope>
            </method>
            <method name="resetAppContext" type="AppContext" line="478">
                <declaration name="tempAppContext" type="AppContext" line="479"/>
                <scope line="480"/>
            </method>
            <declaration name="jdk11AppletInfo" type="HashMap" line="488"/>
            <declaration name="jdk12AppletInfo" type="HashMap" line="489"/>
            <javadoc line="490">
                Set applet target level as JDK 1.1.                
                <param>
                    clazz Applet class.                    
                </param>
                <param>
                    bool true if JDK is targeted for JDK 1.1;
                      false otherwise.                    
                </param>
            </javadoc>
            <method name="setJDK11Target" type="void" line="496">
                <params>
                    <param name="clazz" type="Class"/>
                    <param name="bool" type="boolean"/>
                </params>
            </method>
            <javadoc line="499">
                Set applet target level as JDK 1.2.                
                <param>
                    clazz Applet class.                    
                </param>
                <param>
                    bool true if JDK is targeted for JDK 1.2;
                      false otherwise.                    
                </param>
            </javadoc>
            <method name="setJDK12Target" type="void" line="505">
                <params>
                    <param name="clazz" type="Class"/>
                    <param name="bool" type="boolean"/>
                </params>
            </method>
            <javadoc line="508">
                Determine if applet is targeted for JDK 1.1.                
                <param>
                    applet Applet class.                    
                </param>
                <return>
                    TRUE if applet is targeted for JDK 1.1;
                      FALSE if applet is not;
                      null if applet is unknown.                    
                </return>
            </javadoc>
            <method name="isJDK11Target" type="Boolean" line="515">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
            </method>
            <javadoc line="518">
                Determine if applet is targeted for JDK 1.2.                
                <param>
                    applet Applet class.                    
                </param>
                <return>
                    TRUE if applet is targeted for JDK 1.2;
                      FALSE if applet is not;
                      null if applet is unknown.                    
                </return>
            </javadoc>
            <method name="isJDK12Target" type="Boolean" line="525">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
            </method>
            <declaration name="mh" type="AppletMessageHandler" line="528"/>
            <method name="printError" type="void" line="529">
                <params>
                    <param name="name" type="String"/>
                    <param name="e" type="Throwable"/>
                </params>
                <declaration name="s" type="String" line="530"/>
                <scope line="531"/>
                <scope line="534"/>
                <scope line="537"/>
                <scope line="540"/>
                <scope line="543"/>
                <scope line="546"/>
            </method>
        </class>
        <class name="AppContextCreator" line="551">
            <extends class="Thread"/>
            <declaration name="syncObject" type="Object" line="552"/>
            <declaration name="appContext" type="AppContext" line="553"/>
            <declaration name="created" type="boolean" line="554"/>
            <method name="AppContextCreator" type="constructor" line="555">
                <params>
                    <param name="group" type="ThreadGroup"/>
                </params>
            </method>
            <method name="run" type="void" line="558">
                <scope line="561"/>
            </method>
        </class>
    </source>