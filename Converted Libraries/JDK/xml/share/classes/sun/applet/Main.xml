<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.applet">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Vector"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="Main" line="42">
            <comment line="73">
                i18n                
            </comment>
            <comment line="90">
                This is used in init().  Getting rid of this is desirable but depends
                 on whether the property that uses it is necessary/standard.                
            </comment>
            <javadoc line="42">
                The main entry point into AppletViewer.                
            </javadoc>
            <declaration name="theUserPropertiesFile" type="File" line="46"/>
            <javadoc line="46">
                The file which contains all of the AppletViewer specific properties.                
            </javadoc>
            <declaration name="avDefaultUserProps" type="String[][]" line="51"/>
            <javadoc line="51">
                The default key/value pairs for the required user-specific properties.                
            </javadoc>
            <scope line="64">
                <declaration name="userHome" type="File" line="65"/>
            </scope>
            <declaration name="amh" type="AppletMessageHandler" line="73"/>
            <declaration name="debugFlag" type="boolean" line="75"/>
            <javadoc line="75">
                Member variables set according to options passed in to AppletViewer.                
            </javadoc>
            <declaration name="helpFlag" type="boolean" line="79"/>
            <declaration name="encoding" type="String" line="80"/>
            <declaration name="noSecurityFlag" type="boolean" line="81"/>
            <declaration name="cmdLineTestFlag" type="boolean" line="82"/>
            <declaration name="urlList" type="Vector" line="84"/>
            <javadoc line="84">
                The list of valid URLs passed in to AppletViewer.                
            </javadoc>
            <declaration name="theVersion" type="String" line="91"/>
            <javadoc line="93">
                The main entry point into AppletViewer.                
            </javadoc>
            <method name="main" type="void" line="96">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="101">
                    Exit immediately if we got some sort of error along the way.
                     For debugging purposes, if we have passed in &quot;-XcmdLineTest&quot; we
                     force a premature exit.                    
                </comment>
                <declaration name="m" type="Main" line="97"/>
                <declaration name="ret" type="int" line="98"/>
            </method>
            <method name="run" type="int" line="107">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="109">
                    DECODE ARGS                    
                </comment>
                <comment line="128">
                    CHECK ARGUMENTS                    
                </comment>
                <comment line="140">
                    START A DEBUG SESSION
                     Given the current architecture, we will end up decoding the
                     arguments again, but at least we are guaranteed to have
                     arguments which are valid.                    
                </comment>
                <comment line="147">
                    INSTALL THE SECURITY MANAGER (if necessary)                    
                </comment>
                <comment line="151">
                    LAUNCH APPLETVIEWER FOR EACH URL                    
                </comment>
                <comment line="154">
                    XXX 5/17 this parsing method should be changed/fixed so that
                     it doesn&apos;t do both parsing of the html file and launching of
                     the AppletPanel                    
                </comment>
                <scope line="109">
                    <scope line="110"/>
                    <scope line="114">
                        <declaration name="j" type="int" line="115"/>
                        <scope line="116"/>
                    </scope>
                </scope>
                <scope line="122"/>
                <scope line="128"/>
                <scope line="133"/>
                <scope line="138"/>
                <scope line="151">
                    <scope line="152"/>
                    <scope line="157"/>
                </scope>
            </method>
            <method name="usage" type="void" line="165"/>
            <javadoc line="169">
                Decode a single argument in an array and return the number of elements
                  used.                
                <param>
                    args The array of arguments.                    
                </param>
                <param>
                    i    The argument to decode.                    
                </param>
                <return>
                    The number of array elements used when the argument was
                      decoded.                    
                </return>
                <exception>
                    ParseExceptionThrown when there is a problem with something in the
                      argument array.                    
                </exception>
            </javadoc>
            <method name="decodeArg" type="int" line="181">
                <params>
                    <param name="args" type="String[]"/>
                    <param name="i" type="int"/>
                </params>
                <comment line="198">
                    This is an undocumented (and, in the future, unsupported)
                     flag which prevents AppletViewer from installing its own
                     SecurityManager.                    
                </comment>
                <comment line="209">
                    This is an internal flag which should be used for command-line
                     testing.  It instructs AppletViewer to force a premature exit
                     immediately after the applet has been launched.                    
                </comment>
                <comment line="217">
                    we found what we hope is a url                    
                </comment>
                <declaration name="arg" type="String" line="182"/>
                <declaration name="argc" type="int" line="183"/>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="207"/>
                <scope line="213"/>
                <scope line="215">
                    <declaration name="url" type="URL" line="217"/>
                    <scope line="218"/>
                </scope>
            </method>
            <javadoc line="226">
                Following the relevant RFC, construct a valid URL based on the passed in
                  string.                
                <param>
                    url  a string which represents either a relative or absolute URL.                    
                </param>
                <return>
                    a URL when the passed in string can be interpreted according
                      to the RFC, &lt;code&gt;null&lt;/code&gt; otherwise.                    
                </return>
                <exception>
                    ParseExceptionThrown when we are unable to construct a proper URL from the
                      passed in string.                    
                </exception>
            </javadoc>
            <method name="parseURL" type="URL" line="237">
                <params>
                    <param name="url" type="String"/>
                </params>
                <comment line="240">
                    prefix of the urls with &apos;file&apos; scheme                    
                </comment>
                <comment line="246">
                    appletviewer accepts only unencoded filesystem paths                    
                </comment>
                <comment line="252">
                    relative file URL, like this &quot;file:index.html&quot;
                     ensure that this file URL is absolute
                     ParseUtil.fileToEncodedURL should be done last (see 6329251)                    
                </comment>
                <comment line="259">
                    appletviewer accepts only encoded urls                    
                </comment>
                <declaration name="u" type="URL" line="238"/>
                <declaration name="prefix" type="String" line="240"/>
                <scope line="242">
                    <scope line="244"/>
                    <scope line="250">
                        <declaration name="path" type="String" line="254"/>
                    </scope>
                    <scope line="257"/>
                </scope>
                <scope line="261"/>
            </method>
            <javadoc line="269">
                Invoke the debugger with the arguments passed in to appletviewer.                
                <param>
                    args The arguments passed into the debugger.                    
                </param>
                <return>
                    &lt;code&gt;0&lt;/code&gt; if the debugger is invoked successfully,
                      &lt;code&gt;1&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="invokeDebugger" type="int" line="276">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="278">
                    CONSTRUCT THE COMMAND LINE                    
                </comment>
                <comment line="282">
                    Add a -classpath argument that prevents
                     the debugger from launching appletviewer with the default of
                     &quot;.&quot;. appletviewer&apos;s classpath should never contain valid
                     classes since they will result in security exceptions.
                     Ideally, the classpath should be set to &quot;&quot;, but the VM won&apos;t
                     allow an empty classpath, so a phony directory name is used.                    
                </comment>
                <comment line="292">
                    Appletviewer&apos;s main class is the debuggee                    
                </comment>
                <comment line="295">
                    Append all the of the original appletviewer arguments,
                     leaving out the &quot;-debug&quot; option.                    
                </comment>
                <comment line="303">
                    LAUNCH THE DEBUGGER
                     Reflection is used for two reasons:
                     1) The debugger classes are on classpath and thus must be loaded
                     by the application class loader. (Currently, appletviewer are
                     loaded through the boot class path out of rt.jar.)
                     2) Reflection removes any build dependency between appletviewer
                     and jdb.                    
                </comment>
                <declaration name="newArgs" type="String[]" line="278"/>
                <declaration name="current" type="int" line="279"/>
                <declaration name="phonyDir" type="String" line="287"/>
                <scope line="296">
                    <scope line="297"/>
                </scope>
                <scope line="309">
                    <declaration name="c" type="Class" line="310"/>
                    <declaration name="m" type="Method" line="312"/>
                </scope>
                <scope line="315"/>
                <scope line="318"/>
                <scope line="321"/>
                <scope line="324"/>
            </method>
            <method name="init" type="void" line="331">
                <comment line="333">
                    GET APPLETVIEWER USER-SPECIFIC PROPERTIES                    
                </comment>
                <comment line="336">
                    ADD OTHER RANDOM PROPERTIES
                     XXX 5/18 need to revisit why these are here, is there some
                     standard for what is available?                    
                </comment>
                <comment line="340">
                    Standard browser properties                    
                </comment>
                <comment line="346">
                    Define which packages can be extended by applets
                     XXX 5/19 probably not needed, not checked in AppletSecurity                    
                </comment>
                <comment line="351">
                    Define which properties can be read by applets.
                     A property named by &quot;key&quot; can be read only when its twin
                     property &quot;key.applet&quot; is true.  The following ten properties
                     are open by default.  Any other property can be explicitly
                     opened up by the browser user by calling appletviewer with
                     -J-Dkey.applet=true                    
                </comment>
                <comment line="368">
                    Read in the System properties.  If something is going to be
                     over-written, warn about it.                    
                </comment>
                <comment line="380">
                    INSTALL THE PROPERTY LIST                    
                </comment>
                <comment line="383">
                    Create and install the security manager                    
                </comment>
                <comment line="390">
                    REMIND: Create and install a socket factory!                    
                </comment>
                <declaration name="avProps" type="Properties" line="333"/>
                <declaration name="sysProps" type="Properties" line="369"/>
                <scope line="370">
                    <declaration name="key" type="String" line="371"/>
                    <declaration name="val" type="String" line="372"/>
                    <declaration name="oldVal" type="String" line="373"/>
                </scope>
                <scope line="383"/>
                <scope line="385"/>
            </method>
            <javadoc line="392">
                Read the AppletViewer user-specific properties.  Typically, these
                  properties should reside in the file $USER/.appletviewer.  If this file
                  does not exist, one will be created.  Information for this file will
                  be gleaned from $USER/.hotjava/properties.  If that file does not exist,
                  then default values will be used.                
                <return>
                    A Properties object containing all of the AppletViewer
                      user-specific properties.                    
                </return>
            </javadoc>
            <method name="getAVProps" type="Properties" line="402">
                <comment line="408">
                    we must have already done the conversion                    
                </comment>
                <comment line="410">
                    just read the file                    
                </comment>
                <comment line="413">
                    send out warning and use defaults                    
                </comment>
                <comment line="419">
                    create the $USER/.appletviewer file                    
                </comment>
                <comment line="421">
                    see if $USER/.hotjava/properties exists                    
                </comment>
                <comment line="426">
                    just read the file                    
                </comment>
                <comment line="429">
                    send out warning and use defaults                    
                </comment>
                <comment line="435">
                    SAVE THE FILE                    
                </comment>
                <declaration name="avProps" type="Properties" line="403"/>
                <declaration name="dotAV" type="File" line="405"/>
                <scope line="406">
                    <scope line="408"/>
                    <scope line="411"/>
                </scope>
                <scope line="417">
                    <declaration name="userHome" type="File" line="421"/>
                    <declaration name="dotHJ" type="File" line="422"/>
                    <scope line="424"/>
                    <scope line="427"/>
                    <scope line="435">
                        <declaration name="out" type="FileOutputStream" line="436"/>
                    </scope>
                    <scope line="439"/>
                </scope>
            </method>
            <javadoc line="447">
                Set the AppletViewer user-specific properties to be the default values.                
                <return>
                    A Properties object containing all of the AppletViewer
                      user-specific properties, set to the default values.                    
                </return>
            </javadoc>
            <method name="setDefaultAVProps" type="Properties" line="453">
                <declaration name="avProps" type="Properties" line="454"/>
                <scope line="455"/>
            </method>
            <javadoc line="462">
                Given a file, find only the properties that are setable by AppletViewer.                
                <param>
                    inFile A Properties file from which we select the properties of
                      interest.                    
                </param>
                <return>
                    A Properties object containing all of the AppletViewer
                      user-specific properties.                    
                </return>
            </javadoc>
            <method name="getAVProps" type="Properties" line="470">
                <params>
                    <param name="inFile" type="File"/>
                </params>
                <comment line="474">
                    read the file                    
                </comment>
                <comment line="485">
                    pick off the properties we care about                    
                </comment>
                <comment line="489">
                    the property exists in the file, so replace the default                    
                </comment>
                <comment line="492">
                    just use the default                    
                </comment>
                <declaration name="avProps" type="Properties" line="471"/>
                <declaration name="tmpProps" type="Properties" line="474"/>
                <scope line="475">
                    <declaration name="in" type="FileInputStream" line="476"/>
                </scope>
                <scope line="479"/>
                <scope line="485">
                    <declaration name="value" type="String" line="486"/>
                    <scope line="487"/>
                    <scope line="490"/>
                </scope>
            </method>
            <javadoc line="499">
                Methods for easier i18n handling.                
            </javadoc>
            <method name="lookup" type="String" line="503">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="lookup" type="String" line="507">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg0" type="String"/>
                </params>
            </method>
            <method name="lookup" type="String" line="511">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg0" type="String"/>
                    <param name="arg1" type="String"/>
                </params>
            </method>
            <method name="lookup" type="String" line="516">
                <params>
                    <param name="key" type="String"/>
                    <param name="arg0" type="String"/>
                    <param name="arg1" type="String"/>
                    <param name="arg2" type="String"/>
                </params>
            </method>
            <class name="ParseException" line="520">
                <extends class="RuntimeException"/>
                <method name="ParseException" type="constructor" line="522">
                    <params>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="ParseException" type="constructor" line="526">
                    <params>
                        <param name="t" type="Throwable"/>
                    </params>
                </method>
                <declaration name="t" type="Throwable" line="531"/>
            </class>
        </class>
    </source>