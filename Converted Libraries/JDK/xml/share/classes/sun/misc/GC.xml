<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.SortedSet"/>
        <import package="java.util.TreeSet"/>
        <class name="GC" line="6">
            <javadoc line="6">
                Support for garbage-collection latency requests.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="GC" type="constructor" line="12"/>
            <declaration name="NO_TARGET" type="long" line="14"/>
            <declaration name="latencyTarget" type="long" line="15"/>
            <declaration name="daemon" type="Thread" line="16"/>
            <class name="LatencyLock" line="17">
                <extends class="Object"/>
            </class>
            <declaration name="lock" type="Object" line="19"/>
            <method name="maxObjectInspectionAge" type="long" line="20"/>
            <javadoc line="20">
                Returns the maximum &lt;em&gt;object-inspection age&lt;/em&gt;, which is the number
                  of real-time milliseconds that have elapsed since the
                  least-recently-inspected heap object was last inspected by the garbage
                  collector.
                  &lt;p&gt; For simple stop-the-world collectors this value is just the time
                  since the most recent collection.  For generational collectors it is the
                  time since the oldest generation was most recently collected.  Other
                  collectors are free to return a pessimistic estimate of the elapsed
                  time, or simply the time since the last full collection was performed.
                  &lt;p&gt; Note that in the presence of reference objects, a given object that
                  is no longer strongly reachable may have to be inspected multiple times
                  before it can be reclaimed.                
            </javadoc>
            <class name="Daemon" line="35">
                <extends class="Thread"/>
                <method name="run" type="void" line="36">
                    <scope line="37">
                        <declaration name="l" type="long" line="38"/>
                        <scope line="39">
                            <scope line="41"/>
                            <declaration name="d" type="long" line="45"/>
                            <scope line="46"/>
                            <scope line="50"/>
                            <scope line="53"/>
                        </scope>
                    </scope>
                </method>
                <method name="Daemon" type="constructor" line="59">
                    <params>
                        <param name="tg" type="ThreadGroup"/>
                    </params>
                </method>
                <method name="create" type="void" line="62">
                    <anonymous_class line="63">
                        <method name="run" type="Void" line="64">
                            <declaration name="tg" type="ThreadGroup" line="65"/>
                            <declaration name="d" type="Daemon" line="67"/>
                        </method>
                    </anonymous_class>
                    <declaration name="pa" type="PrivilegedAction&lt;Void&gt;" line="63"/>
                </method>
            </class>
            <method name="setLatencyTarget" type="void" line="79">
                <params>
                    <param name="ms" type="long"/>
                </params>
                <scope line="81"/>
                <scope line="84"/>
            </method>
            <class name="LatencyRequest" line="88">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="LatencyRequest"/>
                    </type_params>
                </implements>
                <javadoc line="88">
                    Represents an active garbage-collection latency request.  Instances of
                      this class are created by the &lt;code&gt;{@link #requestLatency}&lt;/code&gt;
                      method.  Given a request, the only interesting operation is that of
                      cancellation.                    
                </javadoc>
                <declaration name="counter" type="long" line="95"/>
                <declaration name="requests" type="SortedSet&lt;LatencyRequest&gt;" line="96"/>
                <method name="adjustLatencyIfNeeded" type="void" line="97">
                    <scope line="98">
                        <scope line="99"/>
                    </scope>
                    <scope line="103">
                        <declaration name="r" type="LatencyRequest" line="104"/>
                        <scope line="105"/>
                    </scope>
                </method>
                <declaration name="latency" type="long" line="110"/>
                <declaration name="id" type="long" line="111"/>
                <method name="LatencyRequest" type="constructor" line="112">
                    <params>
                        <param name="ms" type="long"/>
                    </params>
                    <scope line="113"/>
                    <scope line="117">
                        <scope line="119"/>
                    </scope>
                </method>
                <javadoc line="126">
                    Cancels this latency request.                    
                    <throws>
                        IllegalStateExceptionIf this request has already been cancelled                        
                    </throws>
                </javadoc>
                <method name="cancel" type="void" line="130">
                    <scope line="131">
                        <scope line="132"/>
                        <scope line="135"/>
                    </scope>
                </method>
                <method name="compareTo" type="int" line="143">
                    <params>
                        <param name="r" type="LatencyRequest"/>
                    </params>
                    <declaration name="d" type="long" line="144"/>
                </method>
                <method name="toString" type="String" line="148"/>
            </class>
            <javadoc line="152">
                Makes a new request for a garbage-collection latency of the given
                  number of real-time milliseconds.  A low-priority daemon thread makes a
                  best effort to ensure that the maximum object-inspection age never
                  exceeds the smallest of the currently active requests.                
                <param>
                    latencyThe requested latency                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the given <code>latency</code> is non-positive                    
                </throws>
            </javadoc>
            <method name="requestLatency" type="LatencyRequest" line="160">
                <params>
                    <param name="latency" type="long"/>
                </params>
            </method>
            <javadoc line="163">
                Returns the current smallest garbage-collection latency request, or zero
                  if there are no active requests.                
            </javadoc>
            <method name="currentLatencyTarget" type="long" line="167">
                <declaration name="t" type="long" line="168"/>
            </method>
        </class>
    </source>