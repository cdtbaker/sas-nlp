<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.SortedSet"/>
        <import package="java.util.TreeSet"/>
        <class name="GC" line="34">
            <comment line="44">
                                
            </comment>
            <comment line="47">
                Latency-target value indicating that there&apos;s no active target                
            </comment>
            <comment line="51">
                The current latency target, or NO_TARGET if there is no target                
            </comment>
            <comment line="55">
                The daemon thread that implements the latency-target mechanism,
                 or null if there is presently no daemon thread                
            </comment>
            <comment line="60">
                The lock object for the latencyTarget and daemon fields.  The daemon
                 thread, if it exists, waits on this lock for notification that the
                 latency target has changed.                
            </comment>
            <comment line="151">
                Sets the latency target to the given value.
                 Must be invoked while holding the lock.                
            </comment>
            <javadoc line="34">
                Support for garbage-collection latency requests.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="GC" type="constructor" line="43"/>
            <declaration name="NO_TARGET" type="long" line="48"/>
            <declaration name="latencyTarget" type="long" line="52"/>
            <declaration name="daemon" type="Thread" line="57"/>
            <class name="LatencyLock" line="63">
                <extends class="Object"/>
                <comment line="130">
                                        
                </comment>
                <comment line="177">
                                        
                </comment>
                <comment line="180">
                                        
                </comment>
                <comment line="183">
                    Examine the request set and reset the latency target if necessary.
                     Must be invoked while holding the lock.                    
                </comment>
                <comment line="199">
                    The requested latency, or NO_TARGET
                     if this request has been cancelled                    
                </comment>
                <comment line="204">
                                        
                </comment>
            </class>
            <declaration name="lock" type="Object" line="64"/>
            <method name="maxObjectInspectionAge" type="long" line="67"/>
            <javadoc line="67">
                Returns the maximum &lt;em&gt;object-inspection age&lt;/em&gt;, which is the number
                  of real-time milliseconds that have elapsed since the
                  least-recently-inspected heap object was last inspected by the garbage
                  collector.
                  &lt;p&gt; For simple stop-the-world collectors this value is just the time
                  since the most recent collection.  For generational collectors it is the
                  time since the oldest generation was most recently collected.  Other
                  collectors are free to return a pessimistic estimate of the elapsed
                  time, or simply the time since the last full collection was performed.
                  &lt;p&gt; Note that in the presence of reference objects, a given object that
                  is no longer strongly reachable may have to be inspected multiple times
                  before it can be reclaimed.                
            </javadoc>
            <class name="Daemon" line="86">
                <extends class="Thread"/>
                <comment line="130">
                                        
                </comment>
                <comment line="177">
                                        
                </comment>
                <comment line="180">
                                        
                </comment>
                <comment line="183">
                    Examine the request set and reset the latency target if necessary.
                     Must be invoked while holding the lock.                    
                </comment>
                <comment line="199">
                    The requested latency, or NO_TARGET
                     if this request has been cancelled                    
                </comment>
                <comment line="204">
                                        
                </comment>
                <method name="run" type="void" line="88">
                    <comment line="96">
                                                
                    </comment>
                    <comment line="103">
                        Do a full collection.  There is a remote possibility
                         that a full collection will occurr between the time
                         we sample the inspection age and the time the GC
                         actually starts, but this is sufficiently unlikely
                         that it doesn&apos;t seem worth the more expensive JVM
                         interface that would be required.                        
                    </comment>
                    <comment line="114">
                        Wait for the latency period to expire,
                         or for notification that the period has changed                        
                    </comment>
                    <scope line="89">
                        <declaration name="l" type="long" line="90"/>
                        <scope line="91">
                            <scope line="94"/>
                            <declaration name="d" type="long" line="100"/>
                            <scope line="101"/>
                            <scope line="116"/>
                            <scope line="118"/>
                        </scope>
                    </scope>
                </method>
                <method name="Daemon" type="constructor" line="125">
                    <params>
                        <param name="tg" type="ThreadGroup"/>
                    </params>
                </method>
                <method name="create" type="void" line="130">
                    <anonymous_class line="131">
                        <method name="run" type="Void" line="132">
                            <declaration name="tg" type="ThreadGroup" line="133"/>
                            <declaration name="d" type="Daemon" line="137"/>
                        </method>
                    </anonymous_class>
                    <declaration name="pa" type="PrivilegedAction&lt;Void&gt;" line="131"/>
                </method>
            </class>
            <method name="setLatencyTarget" type="void" line="153">
                <params>
                    <param name="ms" type="long"/>
                </params>
                <comment line="157">
                                        
                </comment>
                <comment line="160">
                    Notify the existing daemon thread
                     that the lateency target has changed                    
                </comment>
                <scope line="155"/>
                <scope line="158"/>
            </method>
            <class name="LatencyRequest" line="167">
                <comment line="130">
                                        
                </comment>
                <comment line="177">
                                        
                </comment>
                <comment line="180">
                                        
                </comment>
                <comment line="183">
                    Examine the request set and reset the latency target if necessary.
                     Must be invoked while holding the lock.                    
                </comment>
                <comment line="199">
                    The requested latency, or NO_TARGET
                     if this request has been cancelled                    
                </comment>
                <comment line="204">
                                        
                </comment>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="LatencyRequest"/>
                    </type_params>
                </implements>
                <javadoc line="167">
                    Represents an active garbage-collection latency request.  Instances of
                      this class are created by the &lt;code&gt;{@link #requestLatency}&lt;/code&gt;
                      method.  Given a request, the only interesting operation is that of
                      cancellation.                    
                </javadoc>
                <declaration name="counter" type="long" line="177"/>
                <declaration name="requests" type="SortedSet&lt;LatencyRequest&gt;" line="180"/>
                <method name="adjustLatencyIfNeeded" type="void" line="185">
                    <scope line="186">
                        <scope line="187"/>
                    </scope>
                    <scope line="190">
                        <declaration name="r" type="LatencyRequest" line="191"/>
                        <scope line="192"/>
                    </scope>
                </method>
                <declaration name="latency" type="long" line="201"/>
                <declaration name="id" type="long" line="204"/>
                <method name="LatencyRequest" type="constructor" line="206">
                    <params>
                        <param name="ms" type="long"/>
                    </params>
                    <scope line="207"/>
                    <scope line="212">
                        <scope line="214"/>
                    </scope>
                </method>
                <javadoc line="222">
                    Cancels this latency request.                    
                    <throws>
                        IllegalStateExceptionIf this request has already been cancelled                        
                    </throws>
                </javadoc>
                <method name="cancel" type="void" line="228">
                    <scope line="229">
                        <scope line="230"/>
                        <scope line="234"/>
                    </scope>
                </method>
                <method name="compareTo" type="int" line="244">
                    <params>
                        <param name="r" type="LatencyRequest"/>
                    </params>
                    <declaration name="d" type="long" line="245"/>
                </method>
                <method name="toString" type="String" line="250"/>
            </class>
            <javadoc line="258">
                Makes a new request for a garbage-collection latency of the given
                  number of real-time milliseconds.  A low-priority daemon thread makes a
                  best effort to ensure that the maximum object-inspection age never
                  exceeds the smallest of the currently active requests.                
                <param>
                    latencyThe requested latency                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the given &lt;code&gt;latency&lt;/code&gt; is non-positive                    
                </throws>
            </javadoc>
            <method name="requestLatency" type="LatencyRequest" line="270">
                <params>
                    <param name="latency" type="long"/>
                </params>
            </method>
            <javadoc line="275">
                Returns the current smallest garbage-collection latency request, or zero
                  if there are no active requests.                
            </javadoc>
            <method name="currentLatencyTarget" type="long" line="279">
                <declaration name="t" type="long" line="280"/>
            </method>
        </class>
    </source>