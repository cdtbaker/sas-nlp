<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.OutputStream"/>
        <import package="java.io.PushbackInputStream"/>
        <import package="java.io.PrintStream"/>
        <class name="BASE64Decoder" line="5">
            <extends class="CharacterDecoder"/>
            <javadoc line="5">
                This class implements a BASE64 Character decoder as specified in RFC1521.
                  This RFC is part of the MIME specification which is published by the
                  Internet Engineering Task Force (IETF). Unlike some other encoding
                  schemes there is nothing in this encoding that tells the decoder
                  where a buffer starts or stops, so to use it you will need to isolate
                  your encoded data into a single chunk and then feed them this decoder.
                  The simplest way to do that is to read all of the encoded data into a
                  string and then use:
                  &lt;pre&gt;
                  byte    mydata[];
                  BASE64Decoder base64 = new BASE64Decoder();
                  mydata = base64.decodeBuffer(bufferString);
                  &lt;/pre&gt;
                  This will decode the String in &lt;i&gt;bufferString&lt;/i&gt; and give you an array
                  of bytes in the array &lt;i&gt;myData&lt;/i&gt;.
                  On errors, this class throws a CEFormatException with the following detail
                  strings:
                  &lt;pre&gt;
                  &quot;BASE64Decoder: Not enough bytes for an atom.&quot;
                  &lt;/pre&gt;                
                <author>
                    Chuck McManis                    
                </author>
                <see>
                    CharacterEncoder                    
                </see>
                <see>
                    BASE64Decoder                    
                </see>
            </javadoc>
            <javadoc line="31">
                This class has 4 bytes per atom                
            </javadoc>
            <method name="bytesPerAtom" type="int" line="34"/>
            <javadoc line="37">
                Any multiple of 4 will do, 72 might be common                
            </javadoc>
            <method name="bytesPerLine" type="int" line="40"/>
            <declaration name="pem_array" type="char" line="43"/>
            <javadoc line="43">
                This character array provides the character to value map
                  based on RFC1521.                
            </javadoc>
            <declaration name="pem_convert_array" type="byte" line="48"/>
            <scope line="49">
                <scope line="50"/>
                <scope line="53"/>
            </scope>
            <declaration name="decode_buffer" type="byte" line="57"/>
            <javadoc line="58">
                Decode one BASE64 atom into 1, 2, or 3 bytes of data.                
            </javadoc>
            <method name="decodeAtom" type="void" line="61">
                <params>
                    <param name="inStream" type="PushbackInputStream"/>
                    <param name="outStream" type="OutputStream"/>
                    <param name="rem" type="int"/>
                </params>
                <declaration name="i" type="int" line="62"/>
                <declaration name="a" type="byte" line="63"/>
                <scope line="64"/>
                <scope line="67">
                    <scope line="69"/>
                </scope>
                <scope line="76"/>
                <scope line="79"/>
                <scope line="82"/>
            </method>
        </class>
    </source>