<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <class name="Timer" line="2">
            <javadoc line="2">
                A Timer object is used by algorithms that require timed events.
                  For example, in an animation loop, a timer would help in
                  determining when to change frames.
                  A timer has an interval which determines when it &quot;ticks&quot;;
                  that is, a timer delays for the specified interval and then
                  it calls the owner&apos;s tick() method.
                  Here&apos;s an example of creating a timer with a 5 sec interval:
                  &lt;pre&gt;
                  class Main implements Timeable {
                  public void tick(Timer timer) {
                  System.out.println(&quot;tick&quot;);
                  }
                  public static void main(String args[]) {
                  (new Timer(this, 5000)).cont();
                  }
                  }
                  &lt;/pre&gt;
                  A timer can be stopped, continued, or reset at any time.
                  A timer&apos;s state is not stopped while it&apos;s calling the
                  owner&apos;s tick() method.
                  A timer can be regular or irregular.  If in regular mode,
                  a timer ticks at the specified interval, regardless of
                  how long the owner&apos;s tick() method takes.  While the timer
                  is running, no ticks are ever discarded.  That means that if
                  the owner&apos;s tick() method takes longer than the interval,
                  the ticks that would have occurred are delivered immediately.
                  In irregular mode, a timer starts delaying for exactly
                  the specified interval only after the tick() method returns.
                  Synchronization issues: do not hold the timer&apos;s monitor
                  while calling any of the Timer operations below otherwise
                  the Timer class will deadlock.                
                <author>
                    Patrick Chan                    
                </author>
            </javadoc>
            <declaration name="owner" type="Timeable" line="37"/>
            <javadoc line="37">
                This is the owner of the timer.  Its tick method is
                  called when the timer ticks.                
            </javadoc>
            <declaration name="interval" type="long" line="42"/>
            <declaration name="sleepUntil" type="long" line="43"/>
            <declaration name="remainingTime" type="long" line="44"/>
            <declaration name="regular" type="boolean" line="45"/>
            <declaration name="stopped" type="boolean" line="46"/>
            <declaration name="next" type="Timer" line="47"/>
            <declaration name="timerThread" type="TimerThread" line="48"/>
            <javadoc line="49">
                Creates a timer object that is owned by &apos;owner&apos; and
                  with the interval &apos;interval&apos; milliseconds.  The new timer
                  object is stopped and is regular.  getRemainingTime()
                  return &apos;interval&apos; at this point.  getStopTime() returns
                  the time this object was created.                
                <param>
                    owner    owner of the timer object                    
                </param>
                <param>
                    interval interval of the timer in milliseconds                    
                </param>
            </javadoc>
            <method name="Timer" type="constructor" line="58">
                <params>
                    <param name="owner" type="Timeable"/>
                    <param name="interval" type="long"/>
                </params>
                <scope line="65">
                    <scope line="66"/>
                </scope>
            </method>
            <javadoc line="71">
                Returns true if this timer is stopped.                
            </javadoc>
            <method name="isStopped" type="boolean" line="74"/>
            <javadoc line="77">
                Stops the timer.  The amount of time the timer has already
                  delayed is saved so if the timer is continued, it will only
                  delay for the amount of time remaining.
                  Note that even after stopping a timer, one more tick may
                  still occur.
                  This method is MT-safe; i.e. it is synchronized but for
                  implementation reasons, the synchronized modifier cannot
                  be included in the method declaration.                
            </javadoc>
            <method name="stop" type="void" line="87">
                <declaration name="now" type="long" line="88"/>
                <scope line="89">
                    <scope line="90">
                        <scope line="91"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="100">
                Continue the timer.  The next tick will come at getRemainingTime()
                  milliseconds later.  If the timer is not stopped, this
                  call will be a no-op.
                  This method is MT-safe; i.e. it is synchronized but for
                  implementation reasons, the synchronized modifier cannot
                  be included in the method declaration.                
            </javadoc>
            <method name="cont" type="void" line="108">
                <scope line="109">
                    <scope line="110">
                        <scope line="111"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="119">
                Resets the timer&apos;s remaining time to the timer&apos;s interval.
                  If the timer&apos;s running state is not altered.                
            </javadoc>
            <method name="reset" type="void" line="123">
                <scope line="124">
                    <scope line="125"/>
                </scope>
            </method>
            <javadoc line="130">
                Returns the time at which the timer was last stopped.  The
                  return value is valid only if the timer is stopped.                
            </javadoc>
            <method name="getStopTime" type="long" line="134"/>
            <javadoc line="137">
                Returns the timer&apos;s interval.                
            </javadoc>
            <method name="getInterval" type="long" line="140"/>
            <javadoc line="143">
                Changes the timer&apos;s interval.  The new interval setting
                  does not take effect until after the next tick.
                  This method does not alter the remaining time or the
                  running state of the timer.                
                <param>
                    interval new interval of the timer in milliseconds                    
                </param>
            </javadoc>
            <method name="setInterval" type="void" line="150">
                <params>
                    <param name="interval" type="long"/>
                </params>
            </method>
            <javadoc line="153">
                Returns the remaining time before the timer&apos;s next tick.
                  The return value is valid only if timer is stopped.                
            </javadoc>
            <method name="getRemainingTime" type="long" line="157"/>
            <javadoc line="160">
                Sets the remaining time before the timer&apos;s next tick.
                  This method does not alter the timer&apos;s running state.
                  This method is MT-safe; i.e. it is synchronized but for
                  implementation reasons, the synchronized modifier cannot
                  be included in the method declaration.                
                <param>
                    time new remaining time in milliseconds.                    
                </param>
            </javadoc>
            <method name="setRemainingTime" type="void" line="168">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="169">
                    <scope line="170">
                        <scope line="171"/>
                        <scope line="174"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                In regular mode, a timer ticks at the specified interval,
                  regardless of how long the owner&apos;s tick() method takes.
                  While the timer is running, no ticks are ever discarded.
                  That means that if the owner&apos;s tick() method takes longer
                  than the interval, the ticks that would have occurred are
                  delivered immediately.
                  In irregular mode, a timer starts delaying for exactly
                  the specified interval only after the tick() method returns.                
            </javadoc>
            <method name="setRegular" type="void" line="192">
                <params>
                    <param name="regular" type="boolean"/>
                </params>
            </method>
            <method name="getTimerThread" type="Thread" line="195"/>
        </class>
        <class name="TimerThread" line="199">
            <extends class="Thread"/>
            <declaration name="debug" type="boolean" line="200"/>
            <declaration name="timerThread" type="TimerThread" line="201"/>
            <declaration name="notified" type="boolean" line="202"/>
            <method name="TimerThread" type="constructor" line="203"/>
            <method name="run" type="void" line="208">
                <scope line="209">
                    <declaration name="delay" type="long" line="210"/>
                    <scope line="211">
                        <scope line="212"/>
                        <scope line="215"/>
                    </scope>
                    <scope line="220">
                        <scope line="221"/>
                        <scope line="224"/>
                    </scope>
                    <scope line="227">
                        <declaration name="timer" type="Timer" line="228"/>
                        <declaration name="thr" type="TimerTickThread" line="230"/>
                        <scope line="231">
                            <declaration name="delta" type="long" line="232"/>
                            <scope line="234"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="timerQueue" type="Timer" line="241"/>
            <method name="enqueue" type="void" line="242">
                <params>
                    <param name="timer" type="Timer"/>
                </params>
                <declaration name="prev" type="Timer" line="243"/>
                <declaration name="cur" type="Timer" line="244"/>
                <scope line="245"/>
                <scope line="251">
                    <scope line="252"/>
                </scope>
                <scope line="260">
                    <declaration name="now" type="long" line="261"/>
                    <scope line="264">
                        <declaration name="delta" type="long" line="265"/>
                    </scope>
                </scope>
            </method>
            <method name="dequeue" type="boolean" line="272">
                <params>
                    <param name="timer" type="Timer"/>
                </params>
                <declaration name="prev" type="Timer" line="273"/>
                <declaration name="cur" type="Timer" line="274"/>
                <scope line="275"/>
                <scope line="279">
                    <scope line="280"/>
                </scope>
                <scope line="285"/>
                <scope line="290"/>
                <scope line="294">
                    <declaration name="now" type="long" line="295"/>
                    <scope line="298">
                        <declaration name="delta" type="long" line="299"/>
                    </scope>
                </scope>
            </method>
            <method name="requeue" type="void" line="307">
                <params>
                    <param name="timer" type="Timer"/>
                </params>
                <scope line="308">
                    <declaration name="now" type="long" line="309"/>
                    <scope line="310"/>
                    <scope line="313"/>
                </scope>
                <scope line="318"/>
            </method>
        </class>
        <class name="TimerTickThread" line="323">
            <extends class="Thread"/>
            <declaration name="MAX_POOL_SIZE" type="int" line="324"/>
            <declaration name="curPoolSize" type="int" line="325"/>
            <declaration name="pool" type="TimerTickThread" line="326"/>
            <declaration name="next" type="TimerTickThread" line="327"/>
            <declaration name="timer" type="Timer" line="328"/>
            <declaration name="lastSleepUntil" type="long" line="329"/>
            <method name="call" type="TimerTickThread" line="330">
                <params>
                    <param name="timer" type="Timer"/>
                    <param name="sleepUntil" type="long"/>
                </params>
                <declaration name="thread" type="TimerTickThread" line="331"/>
                <scope line="332"/>
                <scope line="338">
                    <scope line="342"/>
                </scope>
            </method>
            <method name="returnToPool" type="boolean" line="348">
                <scope line="349">
                    <scope line="350"/>
                </scope>
                <scope line="358">
                    <scope line="359">
                        <scope line="360"/>
                        <scope line="363"/>
                    </scope>
                </scope>
                <scope line="367"/>
            </method>
            <method name="run" type="void" line="372">
                <scope line="373">
                    <scope line="375">
                        <scope line="376">
                            <scope line="377"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>