<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.util.Hashtable"/>
        <class name="Signal" line="29">
            <comment line="82">
                                
            </comment>
            <comment line="202">
                                
            </comment>
            <comment line="221">
                                
            </comment>
            <comment line="223">
                Registers a native signal handler, and returns the old handler.
                 Handler values:
                   0     default handler
                   1     ignore the signal
                   2     call back to Signal.dispatch
                   other arbitrary native signal handlers                
            </comment>
            <comment line="231">
                                
            </comment>
            <javadoc line="29">
                This class provides ANSI/ISO C signal support. A Java program can register
                  signal handlers for the current process. There are two restrictions:
                  &lt;ul&gt;
                  &lt;li&gt;
                  Java code cannot register a handler for signals that are already used
                  by the Java VM implementation. The &lt;code&gt;Signal.handle&lt;/code&gt;
                  function raises an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if such an attempt
                  is made.
                  &lt;li&gt;
                  When &lt;code&gt;Signal.handle&lt;/code&gt; is called, the VM internally registers a
                  special C signal handler. There is no way to force the Java signal handler
                  to run synchronously before the C signal handler returns. Instead, when the
                  VM receives a signal, the special C signal handler creates a new thread
                  (at priority &lt;code&gt;Thread.MAX_PRIORITY&lt;/code&gt;) to
                  run the registered Java signal handler. The C signal handler immediately
                  returns. Note that because the Java signal handler runs in a newly created
                  thread, it may not actually be executed until some time after the C signal
                  handler returns.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Signal objects are created based on their names. For example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  new Signal(&quot;INT&quot;);
                  &lt;/blockquote&gt;&lt;/pre&gt;
                  constructs a signal object corresponding to &lt;code&gt;SIGINT&lt;/code&gt;, which is
                  typically produced when the user presses &lt;code&gt;Ctrl-C&lt;/code&gt; at the command line.
                  The &lt;code&gt;Signal&lt;/code&gt; constructor throws &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  when it is passed an unknown signal.
                  &lt;p&gt;
                  This is an example of how Java code handles &lt;code&gt;SIGINT&lt;/code&gt;:
                  &lt;blockquote&gt;&lt;pre&gt;
                  SignalHandler handler = new SignalHandler () {
                  public void handle(Signal sig) {
                  ... // handle SIGINT
                  }
                  };
                  Signal.handle(new Signal(&quot;INT&quot;), handler);
                  &lt;/blockquote&gt;&lt;/pre&gt;                
                <author>
                    Sheng Liang                    
                </author>
                <author>
                    Bill Shannon                    
                </author>
                <see>
                    sun.misc.SignalHandler                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="handlers" type="Hashtable" line="75"/>
            <declaration name="signals" type="Hashtable" line="76"/>
            <declaration name="number" type="int" line="78"/>
            <declaration name="name" type="String" line="79"/>
            <method name="getNumber" type="int" line="82"/>
            <javadoc line="86">
                Returns the signal name.                
                <return>
                    the name of the signal.                    
                </return>
                <see>
                    sun.misc.Signal#Signal(String name)                    
                </see>
            </javadoc>
            <method name="getName" type="String" line="92"/>
            <javadoc line="96">
                Compares the equality of two &lt;code&gt;Signal&lt;/code&gt; objects.                
                <param>
                    other the object to compare with.                    
                </param>
                <return>
                    whether two &lt;code&gt;Signal&lt;/code&gt; objects are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="102">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="103"/>
                <scope line="106"/>
                <declaration name="other1" type="Signal" line="109"/>
            </method>
            <javadoc line="113">
                Returns a hashcode for this Signal.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="118"/>
            <javadoc line="122">
                Returns a string representation of this signal. For example, &quot;SIGINT&quot;
                  for an object constructed using &lt;code&gt;new Signal (&quot;INT&quot;)&lt;/code&gt;.                
                <return>
                    a string representation of the signal                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="128"/>
            <javadoc line="132">
                Constructs a signal from its name.                
                <param>
                    name the name of the signal.                    
                </param>
                <exception>
                    IllegalArgumentException unknown signal                    
                </exception>
                <see>
                    sun.misc.Signal#getName()                    
                </see>
            </javadoc>
            <method name="Signal" type="constructor" line="139">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="142"/>
            </method>
            <javadoc line="147">
                Registers a signal handler.                
                <param>
                    sig a signal                    
                </param>
                <param>
                    handler the handler to be registered with the given signal.                    
                </param>
                <result>
                    the old handler                    
                </result>
                <exception>
                    IllegalArgumentException the signal is in use by the VM                    
                </exception>
                <see>
                    sun.misc.Signal#raise(Signal sig)                    
                </see>
                <see>
                    sun.misc.SignalHandler                    
                </see>
                <see>
                    sun.misc.SignalHandler#SIG_DFL                    
                </see>
                <see>
                    sun.misc.SignalHandler#SIG_IGN                    
                </see>
            </javadoc>
            <method name="handle" type="SignalHandler" line="161">
                <params>
                    <param name="sig" type="Signal"/>
                    <param name="handler" type="SignalHandler"/>
                </params>
                <declaration name="newH" type="long" line="162"/>
                <declaration name="oldH" type="long" line="164"/>
                <scope line="165"/>
                <scope line="170">
                    <declaration name="oldHandler" type="SignalHandler" line="171"/>
                    <scope line="173"/>
                    <scope line="176"/>
                    <scope line="178"/>
                    <scope line="180"/>
                    <scope line="182"/>
                </scope>
            </method>
            <javadoc line="188">
                Raises a signal in the current process.                
                <param>
                    sig a signal                    
                </param>
                <see>
                    sun.misc.Signal#handle(Signal sig,SignalHandler handler)                    
                </see>
            </javadoc>
            <method name="raise" type="void" line="194">
                <params>
                    <param name="sig" type="Signal"/>
                </params>
                <scope line="195"/>
            </method>
            <method name="dispatch" type="void" line="202">
                <params>
                    <param name="number" type="int"/>
                </params>
                <comment line="209">
                    Don&apos;t bother to reset the priority. Signal handler will
                     run at maximum priority inherited from the VM signal
                     dispatch thread.
                     Thread.currentThread().setPriority(Thread.NORM_PRIORITY);                    
                </comment>
                <declaration name="sig" type="Signal" line="203"/>
                <declaration name="handler" type="SignalHandler" line="204"/>
                <anonymous_class line="206">
                    <method name="run" type="void" line="207">
                        <comment line="209">
                            Don&apos;t bother to reset the priority. Signal handler will
                             run at maximum priority inherited from the VM signal
                             dispatch thread.
                             Thread.currentThread().setPriority(Thread.NORM_PRIORITY);                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="runnable" type="Runnable" line="206"/>
                <scope line="215"/>
            </method>
            <method name="findSignal" type="int" line="221"/>
            <method name="handle0" type="long" line="229"/>
            <method name="raise0" type="void" line="231"/>
        </class>
    </source>