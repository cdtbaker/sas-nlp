<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <class name="Lock" line="2">
            <javadoc line="2">
                The Lock class provides a simple, useful interface to a lock.
                  Unlike monitors which synchronize access to an object, locks
                  synchronize access to an arbitrary set of resources (objects,
                  methods, variables, etc.). &lt;p&gt;
                  The programmer using locks must be responsible for clearly defining
                  the semantics of their use and should handle deadlock avoidance in
                  the face of exceptions. &lt;p&gt;
                  For example, if you want to protect a set of method invocations with
                  a lock, and one of the methods may throw an exception, you must be
                  prepared to release the lock similarly to the following example:
                  &lt;pre&gt;
                  class SomeClass {
                  Lock myLock = new Lock();
                  void someMethod() {
                  myLock.lock();
                  try {
                  StartOperation();
                  ContinueOperation();
                  EndOperation();
                  } finally {
                  myLock.unlock();
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <author>
                    Peter King                    
                </author>
            </javadoc>
            <declaration name="locked" type="boolean" line="31"/>
            <javadoc line="32">
                Create a lock, which is initially not locked.                
            </javadoc>
            <method name="Lock" type="constructor" line="35"/>
            <javadoc line="37">
                Acquire the lock.  If someone else has the lock, wait until it
                  has been freed, and then try to acquire it again.  This method
                  will not return until the lock has been acquired.                
                <exception>
                    java.lang.InterruptedException if any thread has
                      interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="lock" type="void" line="44">
                <scope line="45"/>
            </method>
            <javadoc line="50">
                Release the lock.  If someone else is waiting for the lock, the
                  will be notitified so they can try to acquire the lock again.                
            </javadoc>
            <method name="unlock" type="void" line="54"/>
        </class>
    </source>