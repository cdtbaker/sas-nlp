<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.IOException"/>
        <class name="UUEncoder" line="32">
            <extends class="CharacterEncoder"/>
            <javadoc line="32">
                This class implements a Berkeley uu character encoder. This encoder
                  was made famous by uuencode program.
                  The basic character coding is algorithmic, taking 6 bits of binary
                  data and adding it to an ASCII &apos; &apos; (space) character. This converts
                  these six bits into a printable representation. Note that it depends
                  on the ASCII character encoding standard for english. Groups of three
                  bytes are converted into 4 characters by treating the three bytes
                  a four 6 bit groups, group 1 is byte 1&apos;s most significant six bits,
                  group 2 is byte 1&apos;s least significant two bits plus byte 2&apos;s four
                  most significant bits. etc.
                  In this encoding, the buffer prefix is:
                  &lt;pre&gt;
                  begin [mode] [filename]
                  &lt;/pre&gt;
                  This is followed by one or more lines of the form:
                  &lt;pre&gt;
                  (len)(data)(data)(data) ...
                  &lt;/pre&gt;
                  where (len) is the number of bytes on this line. Note that groupings
                  are always four characters, even if length is not a multiple of three
                  bytes. When less than three characters are encoded, the values of the
                  last remaining bytes is undefined and should be ignored.
                  The last line of data in a uuencoded file is represented by a single
                  space character. This is translated by the decoding engine to a line
                  length of zero. This is immediately followed by a line which contains
                  the word &apos;end[newline]&apos;                
                <author>
                    Chuck McManis                    
                </author>
                <see>
                    CharacterEncoder                    
                </see>
                <see>
                    UUDecoder                    
                </see>
            </javadoc>
            <declaration name="bufferName" type="String" line="70"/>
            <javadoc line="70">
                This name is stored in the begin line.                
            </javadoc>
            <declaration name="mode" type="int" line="75"/>
            <javadoc line="75">
                Represents UNIX(tm) mode bits. Generally three octal digits representing
                  read, write, and execute permission of the owner, group owner, and
                  others. They should be interpreted as the bit groups:
                  (owner) (group) (others)
                  rwx      rwx     rwx    (r = read, w = write, x = execute)
                  By default these are set to 644 (UNIX rw-r--r-- permissions).                
            </javadoc>
            <javadoc line="87">
                Default - buffer begin line will be:
                  &lt;pre&gt;
                  begin 644 encoder.buf
                  &lt;/pre&gt;                
            </javadoc>
            <method name="UUEncoder" type="constructor" line="93"/>
            <javadoc line="98">
                Specifies a name for the encoded buffer, begin line will be:
                  &lt;pre&gt;
                  begin 644 [FNAME]
                  &lt;/pre&gt;                
            </javadoc>
            <method name="UUEncoder" type="constructor" line="104">
                <params>
                    <param name="fname" type="String"/>
                </params>
            </method>
            <javadoc line="109">
                Specifies a name and mode for the encoded buffer, begin line will be:
                  &lt;pre&gt;
                  begin [MODE] [FNAME]
                  &lt;/pre&gt;                
            </javadoc>
            <method name="UUEncoder" type="constructor" line="115">
                <params>
                    <param name="fname" type="String"/>
                    <param name="newMode" type="int"/>
                </params>
            </method>
            <javadoc line="120">
                number of bytes per atom in uuencoding is 3                
            </javadoc>
            <method name="bytesPerAtom" type="int" line="121"/>
            <javadoc line="125">
                number of bytes per line in uuencoding is 45                
            </javadoc>
            <method name="bytesPerLine" type="int" line="126"/>
            <javadoc line="130">
                encodeAtom - take three bytes and encodes them into 4 characters
                  If len is less than 3 then remaining bytes are filled with &apos;1&apos;.
                  This insures that the last line won&apos;t end in spaces and potentiallly
                  be truncated.                
            </javadoc>
            <method name="encodeAtom" type="void" line="137">
                <params>
                    <param name="outStream" type="OutputStream"/>
                    <param name="data" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="a" type="byte" line="138"/>
                <declaration name="c1" type="int" line="139"/>
                <scope line="142"/>
                <scope line="145"/>
            </method>
            <javadoc line="160">
                Encode the line prefix which consists of the single character. The
                  lenght is added to the value of &apos; &apos; (32 decimal) and printed.                
            </javadoc>
            <method name="encodeLinePrefix" type="void" line="165">
                <params>
                    <param name="outStream" type="OutputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="170">
                The line suffix for uuencoded files is simply a new line.                
            </javadoc>
            <method name="encodeLineSuffix" type="void" line="173">
                <params>
                    <param name="outStream" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="177">
                encodeBufferPrefix writes the begin line to the output stream.                
            </javadoc>
            <method name="encodeBufferPrefix" type="void" line="180">
                <params>
                    <param name="a" type="OutputStream"/>
                </params>
                <scope line="183"/>
                <scope line="185"/>
            </method>
            <javadoc line="191">
                encodeBufferSuffix writes the single line containing space (&apos; &apos;) and
                  the line containing the word &apos;end&apos; to the output stream.                
            </javadoc>
            <method name="encodeBufferSuffix" type="void" line="195">
                <params>
                    <param name="a" type="OutputStream"/>
                </params>
            </method>
        </class>
    </source>