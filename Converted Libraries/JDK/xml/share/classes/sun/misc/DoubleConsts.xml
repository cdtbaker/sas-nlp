<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <class name="DoubleConsts" line="2">
            <javadoc line="2">
                This class contains additional constants documenting limits of the
                  &lt;code&gt;double&lt;/code&gt; type.                
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <javadoc line="8">
                Don&apos;t let anyone instantiate this class.                
            </javadoc>
            <method name="DoubleConsts" type="constructor" line="11"/>
            <declaration name="POSITIVE_INFINITY" type="double" line="13"/>
            <declaration name="NEGATIVE_INFINITY" type="double" line="14"/>
            <declaration name="NaN" type="double" line="15"/>
            <declaration name="MAX_VALUE" type="double" line="16"/>
            <declaration name="MIN_VALUE" type="double" line="17"/>
            <declaration name="MIN_NORMAL" type="double" line="18"/>
            <javadoc line="18">
                A constant holding the smallest positive normal value of type
                  &lt;code&gt;double&lt;/code&gt;, 2&lt;sup&gt;-1022&lt;/sup&gt;.  It is equal to the
                  value returned by
                  &lt;code&gt;Double.longBitsToDouble(0x0010000000000000L)&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="SIGNIFICAND_WIDTH" type="int" line="26"/>
            <javadoc line="26">
                The number of logical bits in the significand of a
                  &lt;code&gt;double&lt;/code&gt; number, including the implicit bit.                
            </javadoc>
            <declaration name="MAX_EXPONENT" type="int" line="31"/>
            <javadoc line="31">
                Maximum exponent a finite &lt;code&gt;double&lt;/code&gt; number may have.
                  It is equal to the value returned by
                  &lt;code&gt;Math.ilogb(Double.MAX_VALUE)&lt;/code&gt;.                
            </javadoc>
            <declaration name="MIN_EXPONENT" type="int" line="37"/>
            <javadoc line="37">
                Minimum exponent a normalized &lt;code&gt;double&lt;/code&gt; number may
                  have.  It is equal to the value returned by
                  &lt;code&gt;Math.ilogb(Double.MIN_NORMAL)&lt;/code&gt;.                
            </javadoc>
            <declaration name="MIN_SUB_EXPONENT" type="int" line="43"/>
            <javadoc line="43">
                The exponent the smallest positive &lt;code&gt;double&lt;/code&gt;
                  subnormal value would have if it could be normalized.  It is
                  equal to the value returned by
                  &lt;code&gt;FpUtils.ilogb(Double.MIN_VALUE)&lt;/code&gt;.                
            </javadoc>
            <declaration name="EXP_BIAS" type="int" line="50"/>
            <javadoc line="50">
                Bias used in representing a &lt;code&gt;double&lt;/code&gt; exponent.                
            </javadoc>
            <declaration name="SIGN_BIT_MASK" type="long" line="54"/>
            <javadoc line="54">
                Bit mask to isolate the sign bit of a &lt;code&gt;double&lt;/code&gt;.                
            </javadoc>
            <declaration name="EXP_BIT_MASK" type="long" line="58"/>
            <javadoc line="58">
                Bit mask to isolate the exponent field of a
                  &lt;code&gt;double&lt;/code&gt;.                
            </javadoc>
            <declaration name="SIGNIF_BIT_MASK" type="long" line="63"/>
            <javadoc line="63">
                Bit mask to isolate the significand field of a
                  &lt;code&gt;double&lt;/code&gt;.                
            </javadoc>
            <scope line="68"/>
        </class>
    </source>