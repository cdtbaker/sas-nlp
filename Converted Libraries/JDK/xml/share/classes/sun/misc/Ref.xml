<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.lang.ref.SoftReference"/>
        <class name="Ref" line="30">
            <javadoc line="30">
                A &quot;Ref&quot; is an indirect reference to an object that the garbage collector
                  knows about.  An application should override the reconstitute() method with one
                  that will construct the object based on information in the Ref, often by
                  reading from a file.  The get() method retains a cache of the result of the last call to
                  reconstitute() in the Ref.  When space gets tight, the garbage collector
                  will clear old Ref cache entries when there are no other pointers to the
                  object.  In normal usage, Ref will always be subclassed.  The subclass will add the
                  instance variables necessary for the reconstitute() method to work.  It will also add a
                  constructor to set them up, and write a version of reconstitute().                
                <deprecated>
                    This class has been replaced by
                      &lt;code&gt;java.util.SoftReference&lt;/code&gt;.                    
                </deprecated>
                <see>
                    java.util.SoftReference                    
                </see>
            </javadoc>
            <declaration name="soft" type="SoftReference" line="51"/>
            <javadoc line="53">
                Returns a pointer to the object referenced by this Ref.  If the object
                  has been thrown away by the garbage collector, it will be
                  reconstituted. This method does everything necessary to ensure that the garbage
                  collector throws things away in Least Recently Used(LRU) order.  Applications should
                  never override this method. The get() method effectively caches calls to
                  reconstitute().                
            </javadoc>
            <method name="get" type="Object" line="61">
                <declaration name="t" type="Object" line="62"/>
                <scope line="63"/>
            </method>
            <method name="reconstitute" type="Object" line="70"/>
            <javadoc line="70">
                Returns a pointer to the object referenced by this Ref by
                  reconstituting it from some external source (such as a file).  This method should not
                  bother with caching since the method get() will deal with that.
                  &lt;p&gt;
                  In normal usage, Ref will always be subclassed.  The subclass will add
                  the instance variables necessary for reconstitute() to work.  It will
                  also add a constructor to set them up, and write a version of
                  reconstitute().                
            </javadoc>
            <javadoc line="82">
                Flushes the cached object.  Forces the next invocation of get() to
                  invoke reconstitute().                
            </javadoc>
            <method name="flush" type="void" line="86">
                <declaration name="s" type="SoftReference" line="87"/>
            </method>
            <javadoc line="92">
                Sets the thing to the specified object.                
                <param>
                    thing the specified object                    
                </param>
            </javadoc>
            <method name="setThing" type="void" line="96">
                <params>
                    <param name="thing" type="Object"/>
                </params>
            </method>
            <javadoc line="101">
                Checks to see what object is being pointed at by this Ref and returns it.                
            </javadoc>
            <method name="check" type="Object" line="104">
                <declaration name="s" type="SoftReference" line="105"/>
            </method>
            <javadoc line="110">
                Constructs a new Ref.                
            </javadoc>
            <method name="Ref" type="constructor" line="113"/>
            <javadoc line="115">
                Constructs a new Ref that initially points to thing.                
            </javadoc>
            <method name="Ref" type="constructor" line="118">
                <params>
                    <param name="thing" type="Object"/>
                </params>
            </method>
        </class>
    </source>