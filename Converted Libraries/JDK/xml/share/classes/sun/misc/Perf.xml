<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <class name="Perf" line="33">
            <comment line="60">
                prevent instantiation                
            </comment>
            <javadoc line="33">
                The Perf class provides the ability to attach to an instrumentation
                  buffer maintained by a Java virtual machine. The instrumentation
                  buffer may be for the Java virtual machine running the methods of
                  this class or it may be for another Java virtual machine on the
                  same system.
                  &lt;p&gt;
                  In addition, this class provides methods to create instrumentation
                  objects in the instrumentation buffer for the Java virtual machine
                  that is running these methods. It also contains methods for acquiring
                  the value of a platform specific high resolution clock for time
                  stamp and interval measurement purposes.                
                <author>
                    Brian Doherty                    
                </author>
                <since>
                    1.4.2                    
                </since>
                <see>
                    #getPerf                    
                </see>
                <see>
                    sun.misc.Perf$GetPerfAction                    
                </see>
                <see>
                    java.nio.ByteBuffer                    
                </see>
            </javadoc>
            <declaration name="instance" type="Perf" line="54"/>
            <declaration name="PERF_MODE_RO" type="int" line="56"/>
            <declaration name="PERF_MODE_RW" type="int" line="57"/>
            <method name="Perf" type="constructor" line="59"/>
            <class name="GetPerfAction" line="61">
                <implements interface="PrivilegedAction">
                    <type_params>
                        <type_param name="Perf"/>
                    </type_params>
                </implements>
                <javadoc line="61">
                    The GetPerfAction class is a convenience class for acquiring access
                      to the singleton Perf instance using the
                      &lt;code&gt;AccessController.doPrivileged()&lt;/code&gt; method.
                      &lt;p&gt;
                      An instance of this class can be used as the argument to
                      &lt;code&gt;AccessController.doPrivileged(PrivilegedAction)&lt;/code&gt;.
                      &lt;p&gt; Here is a suggested idiom for use of this class:
                      &lt;blockquote&gt;&lt;pre&gt;
                      class MyTrustedClass {
                      private static final Perf perf =
                      AccessController.doPrivileged(new Perf.GetPerfAction&lt;Perf&gt;());
                      ...
                      }
                      &lt;/pre&gt;&lt;/blockquote&gt;
                      &lt;p&gt;
                      In the presence of a security manager, the &lt;code&gt;MyTrustedClass&lt;/code&gt;
                      class in the above example will need to be granted the
                      &lt;em&gt;&quot;sun.misc.Perf.getPerf&quot;&lt;/em&gt; &lt;code&gt;RuntimePermission&lt;/code&gt;
                      permission in order to successfully acquire the singleton Perf instance.
                      &lt;p&gt;
                      Please note that the &lt;em&gt;&quot;sun.misc.Perf.getPerf&quot;&lt;/em&gt; permission
                      is not a JDK specified permission.                    
                    <see>
                        java.security.AccessController#doPrivileged(PrivilegedAction)                        
                    </see>
                    <see>
                        java.lang.RuntimePermission                        
                    </see>
                </javadoc>
                <javadoc line="91">
                    Run the &lt;code&gt;Perf.getPerf()&lt;/code&gt; method in a privileged context.                    
                    <see>
                        #getPerf                        
                    </see>
                </javadoc>
                <method name="run" type="Perf" line="96"/>
            </class>
            <javadoc line="101">
                Return a reference to the singleton Perf instance.
                  &lt;p&gt;
                  The getPerf() method returns the singleton instance of the Perf
                  class. The returned object provides the caller with the capability
                  for accessing the instrumentation buffer for this or another local
                  Java virtual machine.
                  &lt;p&gt;
                  If a security manager is installed, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a &lt;code&gt;RuntimePermission&lt;/code&gt; with a target
                  of &lt;em&gt;&quot;sun.misc.Perf.getPerf&quot;&lt;/em&gt;. A security exception will result
                  if the caller has not been granted this permission.
                  &lt;p&gt;
                  Access to the returned &lt;code&gt;Perf&lt;/code&gt; object should be protected
                  by its caller and not passed on to untrusted code. This object can
                  be used to attach to the instrumentation buffer provided by this Java
                  virtual machine or for those of other Java virtual machines running
                  on the same system. The instrumentation buffer may contain senstitive
                  information. API&apos;s built on top of this interface may want to provide
                  finer grained access control to the contents of individual
                  instrumentation objects contained within the buffer.
                  &lt;p&gt;
                  Please note that the &lt;em&gt;&quot;sun.misc.Perf.getPerf&quot;&lt;/em&gt; permission
                  is not a JDK specified permission.                
                <return>
                    A reference to the singleton Perf instance.                    
                </return>
                <throws>
                    AccessControlException  if a security manager exists and
                      its <code>checkPermission</code> method doesn't allow
                      access to the <em>"sun.misc.Perf.getPerf"</em> target.                    
                </throws>
                <see>
                    java.lang.RuntimePermission                    
                </see>
                <see>
                    #attach                    
                </see>
            </javadoc>
            <method name="getPerf" type="Perf" line="134">
                <declaration name="security" type="SecurityManager" line="135"/>
                <scope line="136">
                    <declaration name="perm" type="Permission" line="137"/>
                </scope>
            </method>
            <javadoc line="144">
                Attach to the instrumentation buffer for the specified Java virtual
                  machine.
                  &lt;p&gt;
                  This method will attach to the instrumentation buffer for the
                  specified virtual machine. It returns a &lt;code&gt;ByteBuffer&lt;/code&gt; object
                  that is initialized to access the instrumentation buffer for the
                  indicated Java virtual machine. The &lt;code&gt;lvmid&lt;/code&gt; parameter is
                  a integer value that uniquely identifies the target local Java virtual
                  machine. It is typically, but not necessarily, the process id of
                  the target Java virtual machine.
                  &lt;p&gt;
                  If the &lt;code&gt;lvmid&lt;/code&gt; identifies a Java virtual machine different
                  from the one running this method, then the coherency characteristics
                  of the buffer are implementation dependent. Implementations that do
                  not support named, coherent, shared memory may return a
                  &lt;code&gt;ByteBuffer&lt;/code&gt; object that contains only a snap shot of the
                  data in the instrumentation buffer. Implementations that support named,
                  coherent, shared memory, may return a &lt;code&gt;ByteBuffer&lt;/code&gt; object
                  that will be changing dynamically over time as the target Java virtual
                  machine updates its mapping of this buffer.
                  &lt;p&gt;
                  If the &lt;code&gt;lvmid&lt;/code&gt; is 0 or equal to the actual &lt;code&gt;lvmid&lt;/code&gt;
                  for the Java virtual machine running this method, then the returned
                  &lt;code&gt;ByteBuffer&lt;/code&gt; object will always be coherent and dynamically
                  changing.
                  &lt;p&gt;
                  The attach mode specifies the access permissions requested for the
                  instrumentation buffer of the target virtual machine. The permitted
                  access permissions are:
                  &lt;p&gt;
                  &lt;bl&gt;
                  &lt;li&gt;&quot;r&quot;  - Read only access. This Java virtual machine has only
                  read access to the instrumentation buffer for the target Java
                  virtual machine.
                  &lt;li&gt;&quot;rw&quot;  - Read/Write access. This Java virtual machine has read and
                  write access to the instrumentation buffer for the target Java virtual
                  machine. This mode is currently not supported and is reserved for
                  future enhancements.
                  &lt;/bl&gt;                
                <param>
                    lvmid            an integer that uniquely identifies the
                      target local Java virtual machine.                    
                </param>
                <param>
                    mode             a string indicating the attach mode.                    
                </param>
                <return>
                    ByteBuffer       a direct allocated byte buffer                    
                </return>
                <throws>
                    IllegalArgumentException  The lvmid or mode was invalid.                    
                </throws>
                <throws>
                    IOException      An I/O error occurred while trying to acquire
                      the instrumentation buffer.                    
                </throws>
                <throws>
                    OutOfMemoryError The instrumentation buffer could not be mapped
                      into the virtual machine's address space.                    
                </throws>
                <see>
                    java.nio.ByteBuffer                    
                </see>
            </javadoc>
            <method name="attach" type="ByteBuffer" line="198">
                <params>
                    <param name="lvmid" type="int"/>
                    <param name="mode" type="String"/>
                </params>
                <scope line="199"/>
                <scope line="202"/>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Attach to the instrumentation buffer for the specified Java virtual
                  machine owned by the given user.
                  &lt;p&gt;
                  This method behaves just as the &lt;code&gt;attach(int lvmid, String mode)
                  &lt;/code&gt; method, except that it only searches for Java virtual machines
                  owned by the specified user.                
                <param>
                    user             A <code>String</code> object containing the
                      name of the user that owns the target Java
                      virtual machine.                    
                </param>
                <param>
                    lvmid            an integer that uniquely identifies the
                      target local Java virtual machine.                    
                </param>
                <param>
                    mode             a string indicating the attach mode.                    
                </param>
                <return>
                    ByteBuffer       a direct allocated byte buffer                    
                </return>
                <throws>
                    IllegalArgumentException  The lvmid or mode was invalid.                    
                </throws>
                <throws>
                    IOException      An I/O error occurred while trying to acquire
                      the instrumentation buffer.                    
                </throws>
                <throws>
                    OutOfMemoryError The instrumentation buffer could not be mapped
                      into the virtual machine's address space.                    
                </throws>
                <see>
                    java.nio.ByteBuffer                    
                </see>
            </javadoc>
            <method name="attach" type="ByteBuffer" line="234">
                <params>
                    <param name="user" type="String"/>
                    <param name="lvmid" type="int"/>
                    <param name="mode" type="String"/>
                </params>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="241"/>
            </method>
            <javadoc line="246">
                Call the implementation specific attach method.
                  &lt;p&gt;
                  This method calls into the Java virtual machine to perform the platform
                  specific attach method. Buffers returned from this method are
                  internally managed as &lt;code&gt;PhantomRefereces&lt;/code&gt; to provide for
                  guaranteed, secure release of the native resources.                
                <param>
                    user             A <code>String</code> object containing the
                      name of the user that owns the target Java
                      virtual machine.                    
                </param>
                <param>
                    lvmid            an integer that uniquely identifies the
                      target local Java virtual machine.                    
                </param>
                <param>
                    mode             a string indicating the attach mode.                    
                </param>
                <return>
                    ByteBuffer       a direct allocated byte buffer                    
                </return>
                <throws>
                    IllegalArgumentException  The lvmid or mode was invalid.                    
                </throws>
                <throws>
                    IOException      An I/O error occurred while trying to acquire
                      the instrumentation buffer.                    
                </throws>
                <throws>
                    OutOfMemoryError The instrumentation buffer could not be mapped
                      into the virtual machine's address space.                    
                </throws>
            </javadoc>
            <method name="attachImpl" type="ByteBuffer" line="269">
                <params>
                    <param name="user" type="String"/>
                    <param name="lvmid" type="int"/>
                    <param name="mode" type="int"/>
                </params>
                <comment line="273">
                    The native instrumentation buffer for this Java virtual                    
                </comment>
                <comment line="274">
                    machine is never unmapped.                    
                </comment>
                <comment line="278">
                    This is an instrumentation buffer for another Java virtual                    
                </comment>
                <comment line="279">
                    machine with native resources that need to be managed. We                    
                </comment>
                <comment line="280">
                    create a duplicate of the native ByteBuffer and manage it                    
                </comment>
                <comment line="281">
                    with a Cleaner object (PhantomReference). When the duplicate                    
                </comment>
                <comment line="282">
                    becomes only phantomly reachable, the native resources will                    
                </comment>
                <comment line="283">
                    be released.                    
                </comment>
                <comment line="292">
                    avoid crashing the reference handler thread,                    
                </comment>
                <comment line="293">
                    but provide for some diagnosability                    
                </comment>
                <declaration name="b" type="ByteBuffer" line="270"/>
                <scope line="272"/>
                <scope line="277">
                    <declaration name="dup" type="ByteBuffer" line="285"/>
                    <anonymous_class line="286">
                        <method name="run" type="void" line="287">
                            <comment line="292">
                                avoid crashing the reference handler thread,                                
                            </comment>
                            <comment line="293">
                                but provide for some diagnosability                                
                            </comment>
                            <scope line="288"/>
                            <scope line="291"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="attach" type="ByteBuffer" line="302"/>
            <javadoc line="302">
                Native method to perform the implementation specific attach mechanism.
                  &lt;p&gt;
                  The implementation of this method may return distinct or identical
                  &lt;code&gt;ByteBuffer&lt;/code&gt; objects for two distinct calls requesting
                  attachment to the same Java virtual machine.
                  &lt;p&gt;
                  For the Sun HotSpot JVM, two distinct calls to attach to the same
                  target Java virtual machine will result in two distinct ByteBuffer
                  objects returned by this method. This may change in a future release.                
                <param>
                    user             A <code>String</code> object containing the
                      name of the user that owns the target Java
                      virtual machine.                    
                </param>
                <param>
                    lvmid            an integer that uniquely identifies the
                      target local Java virtual machine.                    
                </param>
                <param>
                    mode             a string indicating the attach mode.                    
                </param>
                <return>
                    ByteBuffer       a direct allocated byte buffer                    
                </return>
                <throws>
                    IllegalArgumentException  The lvmid or mode was invalid.                    
                </throws>
                <throws>
                    IOException      An I/O error occurred while trying to acquire
                      the instrumentation buffer.                    
                </throws>
                <throws>
                    OutOfMemoryError The instrumentation buffer could not be mapped
                      into the virtual machine's address space.                    
                </throws>
            </javadoc>
            <method name="detach" type="void" line="329"/>
            <javadoc line="329">
                Native method to perform the implementation specific detach mechanism.
                  &lt;p&gt;
                  If this method is passed a &lt;code&gt;ByteBuffer&lt;/code&gt; object that is
                  not created by the &lt;code&gt;attach&lt;/code&gt; method, then the results of
                  this method are undefined, with unpredictable and potentially damaging
                  effects to the Java virtual machine. To prevent accidental or malicious
                  use of this method, all native ByteBuffer created by the &lt;code&gt;
                  attach&lt;/code&gt; method are managed internally as PhantomReferences
                  and resources are freed by the system.
                  &lt;p&gt;
                  If this method is passed a &lt;code&gt;ByteBuffer&lt;/code&gt; object created
                  by the &lt;code&gt;attach&lt;/code&gt; method with a lvmid for the Java virtual
                  machine running this method (lvmid=0, for example), then the detach
                  request is silently ignored.                
                <param>
                    ByteBuffer  A direct allocated byte buffer created by the
                      <code>attach</code> method.                    
                </param>
                <see>
                    java.nio.ByteBuffer                    
                </see>
                <see>
                    #attach                    
                </see>
            </javadoc>
            <method name="createLong" type="ByteBuffer" line="352"/>
            <javadoc line="352">
                Create a &lt;code&gt;long&lt;/code&gt; scalar entry in the instrumentation buffer
                  with the given variability characteristic, units, and initial value.
                  &lt;p&gt;
                  Access to the instrument is provided through the returned &lt;code&gt;
                  ByteBuffer&lt;/code&gt; object. Typically, this object should be wrapped
                  with &lt;code&gt;LongBuffer&lt;/code&gt; view object.                
                <param>
                    variability the variability characteristic for this entry.                    
                </param>
                <param>
                    units       the units for this entry.                    
                </param>
                <param>
                    name        the name of this entry.                    
                </param>
                <param>
                    value       the initial value for this entry.                    
                </param>
                <return>
                    ByteBuffer  a direct allocated ByteBuffer object that
                      allows write access to a native memory location
                      containing a <code>long</code> value.
                      see sun.misc.perf.Variability
                      see sun.misc.perf.Units                    
                </return>
                <see>
                    java.nio.ByteBuffer                    
                </see>
            </javadoc>
            <javadoc line="375">
                Create a &lt;code&gt;String&lt;/code&gt; entry in the instrumentation buffer with
                  the given variability characteristic, units, and initial value.
                  &lt;p&gt;
                  The maximum length of the &lt;code&gt;String&lt;/code&gt; stored in this string
                  instrument is given in by &lt;code&gt;maxLength&lt;/code&gt; parameter. Updates
                  to this instrument with &lt;code&gt;String&lt;/code&gt; values with lengths greater
                  than &lt;code&gt;maxLength&lt;/code&gt; will be truncated to &lt;code&gt;maxLength&lt;/code&gt;.
                  The truncated value will be terminated by a null character.
                  &lt;p&gt;
                  The underlying implementation may further limit the length of the
                  value, but will continue to preserve the null terminator.
                  &lt;p&gt;
                  Access to the instrument is provided through the returned &lt;code&gt;
                  ByteBuffer&lt;/code&gt; object.                
                <param>
                    variability the variability characteristic for this entry.                    
                </param>
                <param>
                    units       the units for this entry.                    
                </param>
                <param>
                    name        the name of this entry.                    
                </param>
                <param>
                    value       the initial value for this entry.                    
                </param>
                <param>
                    maxLength   the maximum string length for this string
                      instrument.                    
                </param>
                <return>
                    ByteBuffer  a direct allocated ByteBuffer that allows
                      write access to a native memory location
                      containing a <code>long</code> value.
                      see sun.misc.perf.Variability
                      see sun.misc.perf.Units                    
                </return>
                <see>
                    java.nio.ByteBuffer                    
                </see>
            </javadoc>
            <method name="createString" type="ByteBuffer" line="407">
                <params>
                    <param name="name" type="String"/>
                    <param name="variability" type="int"/>
                    <param name="units" type="int"/>
                    <param name="value" type="String"/>
                    <param name="maxLength" type="int"/>
                </params>
                <declaration name="v" type="byte[]" line="408"/>
                <declaration name="v1" type="byte[]" line="409"/>
            </method>
            <javadoc line="415">
                Create a &lt;code&gt;String&lt;/code&gt; entry in the instrumentation buffer with
                  the given variability characteristic, units, and initial value.
                  &lt;p&gt;
                  The maximum length of the &lt;code&gt;String&lt;/code&gt; stored in this string
                  instrument is implied by the length of the &lt;code&gt;value&lt;/code&gt; parameter.
                  Subsequent updates to the value of this instrument will be truncated
                  to this implied maximum length. The truncated value will be terminated
                  by a null character.
                  &lt;p&gt;
                  The underlying implementation may further limit the length of the
                  initial or subsequent value, but will continue to preserve the null
                  terminator.
                  &lt;p&gt;
                  Access to the instrument is provided through the returned &lt;code&gt;
                  ByteBuffer&lt;/code&gt; object.                
                <param>
                    variability the variability characteristic for this entry.                    
                </param>
                <param>
                    units       the units for this entry.                    
                </param>
                <param>
                    name        the name of this entry.                    
                </param>
                <param>
                    value       the initial value for this entry.                    
                </param>
                <return>
                    ByteBuffer  a direct allocated ByteBuffer that allows
                      write access to a native memory location
                      containing a <code>long</code> value.
                      see sun.misc.perf.Variability
                      see sun.misc.perf.Units                    
                </return>
                <see>
                    java.nio.ByteBuffer                    
                </see>
            </javadoc>
            <method name="createString" type="ByteBuffer" line="446">
                <params>
                    <param name="name" type="String"/>
                    <param name="variability" type="int"/>
                    <param name="units" type="int"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="v" type="byte[]" line="447"/>
                <declaration name="v1" type="byte[]" line="448"/>
            </method>
            <method name="createByteArray" type="ByteBuffer" line="454"/>
            <javadoc line="454">
                Create a &lt;code&gt;byte&lt;/code&gt; vector entry in the instrumentation buffer
                  with the given variability characteristic, units, and initial value.
                  &lt;p&gt;
                  The &lt;code&gt;maxLength&lt;/code&gt; parameter limits the size of the byte
                  array instrument such that the initial or subsequent updates beyond
                  this length are silently ignored. No special handling of truncated
                  updates is provided.
                  &lt;p&gt;
                  The underlying implementation may further limit the length of the
                  length of the initial or subsequent value.
                  &lt;p&gt;
                  Access to the instrument is provided through the returned &lt;code&gt;
                  ByteBuffer&lt;/code&gt; object.                
                <param>
                    variability the variability characteristic for this entry.                    
                </param>
                <param>
                    units       the units for this entry.                    
                </param>
                <param>
                    name        the name of this entry.                    
                </param>
                <param>
                    value       the initial value for this entry.                    
                </param>
                <param>
                    maxLength   the maximum length of this byte array.                    
                </param>
                <return>
                    ByteBuffer  a direct allocated byte buffer that allows
                      write access to a native memory location
                      containing a <code>long</code> value.
                      see sun.misc.perf.Variability
                      see sun.misc.perf.Units                    
                </return>
                <see>
                    java.nio.ByteBuffer                    
                </see>
            </javadoc>
            <javadoc line="487">
                convert string to an array of UTF-8 bytes                
            </javadoc>
            <method name="getBytes" type="byte[]" line="491">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="498">
                    ignore, UTF-8 encoding is always known                    
                </comment>
                <declaration name="bytes" type="byte[]" line="492"/>
                <scope line="494"/>
                <scope line="497"/>
            </method>
            <method name="highResCounter" type="long" line="504"/>
            <javadoc line="504">
                Return the value of the High Resolution Counter.
                  The High Resolution Counter returns the number of ticks since
                  since the start of the Java virtual machine. The resolution of
                  the counter is machine dependent and can be determined from the
                  value return by the {@link #highResFrequency} method.                
                <return>
                    the number of ticks of machine dependent resolution since
                      the start of the Java virtual machine.                    
                </return>
                <see>
                    #highResFrequency                    
                </see>
                <see>
                    java.lang.System#currentTimeMillis()                    
                </see>
            </javadoc>
            <method name="highResFrequency" type="long" line="520"/>
            <javadoc line="520">
                Returns the frequency of the High Resolution Counter, in ticks per
                  second.
                  This value can be used to convert the value of the High Resolution
                  Counter, as returned from a call to the {@link #highResCounter} method,
                  into the number of seconds since the start of the Java virtual machine.                
                <return>
                    the frequency of the High Resolution Counter.                    
                </return>
                <see>
                    #highResCounter                    
                </see>
            </javadoc>
            <method name="registerNatives" type="void" line="533"/>
            <scope line="535"/>
        </class>
    </source>