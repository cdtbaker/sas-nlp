<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.net.URL"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <class name="Service" line="42">
            <javadoc line="42">
                A simple service-provider lookup mechanism.  A &lt;i&gt;service&lt;/i&gt; is a
                  well-known set of interfaces and (usually abstract) classes.  A &lt;i&gt;service
                  provider&lt;/i&gt; is a specific implementation of a service.  The classes in a
                  provider typically implement the interfaces and subclass the classes defined
                  in the service itself.  Service providers may be installed in an
                  implementation of the Java platform in the form of extensions, that is, jar
                  files placed into any of the usual extension directories.  Providers may
                  also be made available by adding them to the applet or application class
                  path or by some other platform-specific means.
                  &lt;p&gt; In this lookup mechanism a service is represented by an interface or an
                  abstract class.  (A concrete class may be used, but this is not
                  recommended.)  A provider of a given service contains one or more concrete
                  classes that extend this &lt;i&gt;service class&lt;/i&gt; with data and code specific to
                  the provider.  This &lt;i&gt;provider class&lt;/i&gt; will typically not be the entire
                  provider itself but rather a proxy that contains enough information to
                  decide whether the provider is able to satisfy a particular request together
                  with code that can create the actual provider on demand.  The details of
                  provider classes tend to be highly service-specific; no single class or
                  interface could possibly unify them, so no such class has been defined.  The
                  only requirement enforced here is that provider classes must have a
                  zero-argument constructor so that they may be instantiated during lookup.
                  &lt;p&gt; A service provider identifies itself by placing a provider-configuration
                  file in the resource directory &lt;tt&gt;META-INF/services&lt;/tt&gt;.  The file&apos;s name
                  should consist of the fully-qualified name of the abstract service class.
                  The file should contain a list of fully-qualified concrete provider-class
                  names, one per line.  Space and tab characters surrounding each name, as
                  well as blank lines, are ignored.  The comment character is &lt;tt&gt;&apos;#&apos;&lt;/tt&gt;
                  (&lt;tt&gt;0x23&lt;/tt&gt;); on each line all characters following the first comment
                  character are ignored.  The file must be encoded in UTF-8.
                  &lt;p&gt; If a particular concrete provider class is named in more than one
                  configuration file, or is named in the same configuration file more than
                  once, then the duplicates will be ignored.  The configuration file naming a
                  particular provider need not be in the same jar file or other distribution
                  unit as the provider itself.  The provider must be accessible from the same
                  class loader that was initially queried to locate the configuration file;
                  note that this is not necessarily the class loader that found the file.
                  &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; Suppose we have a service class named
                  &lt;tt&gt;java.io.spi.CharCodec&lt;/tt&gt;.  It has two abstract methods:
                  &lt;pre&gt;
                  public abstract CharEncoder getEncoder(String encodingName);
                  public abstract CharDecoder getDecoder(String encodingName);
                  &lt;/pre&gt;
                  Each method returns an appropriate object or &lt;tt&gt;null&lt;/tt&gt; if it cannot
                  translate the given encoding.  Typical &lt;tt&gt;CharCodec&lt;/tt&gt; providers will
                  support more than one encoding.
                  &lt;p&gt; If &lt;tt&gt;sun.io.StandardCodec&lt;/tt&gt; is a provider of the &lt;tt&gt;CharCodec&lt;/tt&gt;
                  service then its jar file would contain the file
                  &lt;tt&gt;META-INF/services/java.io.spi.CharCodec&lt;/tt&gt;.  This file would contain
                  the single line:
                  &lt;pre&gt;
                  sun.io.StandardCodec    # Standard codecs for the platform
                  &lt;/pre&gt;
                  To locate an encoder for a given encoding name, the internal I/O code would
                  do something like this:
                  &lt;pre&gt;
                  CharEncoder getEncoder(String encodingName) {
                  Iterator ps = Service.providers(CharCodec.class);
                  while (ps.hasNext()) {
                  CharCodec cc = (CharCodec)ps.next();
                  CharEncoder ce = cc.getEncoder(encodingName);
                  if (ce != null)
                  return ce;
                  }
                  return null;
                  }
                  &lt;/pre&gt;
                  The provider-lookup mechanism always executes in the security context of the
                  caller.  Trusted system code should typically invoke the methods in this
                  class from within a privileged security context.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="prefix" type="String" line="130"/>
            <method name="Service" type="constructor" line="132"/>
            <method name="fail" type="void" line="136">
                <params>
                    <param name="service" type="Class"/>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
                <declaration name="sce" type="ServiceConfigurationError" line="137"/>
            </method>
            <method name="fail" type="void" line="145">
                <params>
                    <param name="service" type="Class"/>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="fail" type="void" line="151">
                <params>
                    <param name="service" type="Class"/>
                    <param name="u" type="URL"/>
                    <param name="line" type="int"/>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <javadoc line="155">
                Parse a single line from the given configuration file, adding the name
                  on the line to both the names list and the returned set iff the name is
                  not already a member of the returned set.                
            </javadoc>
            <method name="parseLine" type="int" line="163">
                <params>
                    <param name="service" type="Class"/>
                    <param name="u" type="URL"/>
                    <param name="r" type="BufferedReader"/>
                    <param name="lc" type="int"/>
                    <param name="names" type="List"/>
                    <param name="returned" type="Set"/>
                </params>
                <declaration name="ln" type="String" line="164"/>
                <scope line="165"/>
                <declaration name="ci" type="int" line="168"/>
                <declaration name="n" type="int" line="171"/>
                <scope line="172">
                    <declaration name="cp" type="int" line="175"/>
                    <scope line="178"/>
                    <scope line="183"/>
                </scope>
            </method>
            <javadoc line="191">
                Parse the content of the given URL as a provider-configuration file.                
                <param>
                    serviceThe service class for which providers are being sought;
                      used to construct error detail strings                    
                </param>
                <param>
                    urlThe URL naming the configuration file to be parsed                    
                </param>
                <param>
                    returnedA Set containing the names of provider classes that have already
                      been returned.  This set will be updated to contain the names
                      that will be yielded from the returned &lt;tt&gt;Iterator&lt;/tt&gt;.                    
                </param>
                <return>
                    A (possibly empty) &lt;tt&gt;Iterator&lt;/tt&gt; that will yield the
                      provider-class names in the given configuration file that are
                      not yet members of the returned set                    
                </return>
                <throws>
                    ServiceConfigurationErrorIf an I/O error occurs while reading from the given URL, or
                      if a configuration-file format error is detected                    
                </throws>
            </javadoc>
            <method name="parse" type="Iterator" line="216">
                <params>
                    <param name="service" type="Class"/>
                    <param name="u" type="URL"/>
                    <param name="returned" type="Set"/>
                </params>
                <declaration name="in" type="InputStream" line="217"/>
                <declaration name="r" type="BufferedReader" line="218"/>
                <declaration name="names" type="ArrayList" line="219"/>
                <scope line="220">
                    <declaration name="lc" type="int" line="223"/>
                </scope>
                <scope line="225"/>
                <scope line="227">
                    <scope line="228"/>
                    <scope line="231"/>
                </scope>
            </method>
            <class name="LazyIterator" line="239">
                <implements interface="Iterator"/>
                <javadoc line="239">
                    Private inner class implementing fully-lazy provider lookup                    
                </javadoc>
                <declaration name="service" type="Class" line="244"/>
                <declaration name="loader" type="ClassLoader" line="245"/>
                <declaration name="configs" type="Enumeration" line="246"/>
                <declaration name="pending" type="Iterator" line="247"/>
                <declaration name="returned" type="Set" line="248"/>
                <declaration name="nextName" type="String" line="249"/>
                <method name="LazyIterator" type="constructor" line="251">
                    <params>
                        <param name="service" type="Class"/>
                        <param name="loader" type="ClassLoader"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="256">
                    <scope line="257"/>
                    <scope line="260">
                        <scope line="261">
                            <declaration name="fullName" type="String" line="262"/>
                        </scope>
                        <scope line="267"/>
                    </scope>
                    <scope line="271">
                        <scope line="272"/>
                    </scope>
                </method>
                <method name="next" type="Object" line="281">
                    <comment line="298">
                                                
                    </comment>
                    <scope line="282"/>
                    <declaration name="cn" type="String" line="285"/>
                    <scope line="287"/>
                    <scope line="289"/>
                    <scope line="292"/>
                </method>
                <method name="remove" type="void" line="300"/>
            </class>
            <javadoc line="307">
                Locates and incrementally instantiates the available providers of a
                  given service using the given class loader.
                  &lt;p&gt; This method transforms the name of the given service class into a
                  provider-configuration filename as described above and then uses the
                  &lt;tt&gt;getResources&lt;/tt&gt; method of the given class loader to find all
                  available files with that name.  These files are then read and parsed to
                  produce a list of provider-class names.  The iterator that is returned
                  uses the given class loader to lookup and then instantiate each element
                  of the list.
                  &lt;p&gt; Because it is possible for extensions to be installed into a running
                  Java virtual machine, this method may return different results each time
                  it is invoked. &lt;p&gt;                
                <param>
                    serviceThe service&apos;s abstract service class                    
                </param>
                <param>
                    loaderThe class loader to be used to load provider-configuration files
                      and instantiate provider classes, or &lt;tt&gt;null&lt;/tt&gt; if the system
                      class loader (or, failing that the bootstrap class loader) is to
                      be used                    
                </param>
                <return>
                    An &lt;tt&gt;Iterator&lt;/tt&gt; that yields provider objects for the given
                      service, in some arbitrary order.  The iterator will throw a
                      &lt;tt&gt;ServiceConfigurationError&lt;/tt&gt; if a provider-configuration
                      file violates the specified format or if a provider class cannot
                      be found and instantiated.                    
                </return>
                <throws>
                    ServiceConfigurationErrorIf a provider-configuration file violates the specified format
                      or names a provider class that cannot be found and instantiated                    
                </throws>
                <see>
                    #providers(java.lang.Class)                    
                </see>
                <see>
                    #installedProviders(java.lang.Class)                    
                </see>
            </javadoc>
            <method name="providers" type="Iterator" line="347">
                <params>
                    <param name="service" type="Class"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="352">
                Locates and incrementally instantiates the available providers of a
                  given service using the context class loader.  This convenience method
                  is equivalent to
                  &lt;pre&gt;
                  ClassLoader cl = Thread.currentThread().getContextClassLoader();
                  return Service.providers(service, cl);
                  &lt;/pre&gt;                
                <param>
                    serviceThe service&apos;s abstract service class                    
                </param>
                <return>
                    An &lt;tt&gt;Iterator&lt;/tt&gt; that yields provider objects for the given
                      service, in some arbitrary order.  The iterator will throw a
                      &lt;tt&gt;ServiceConfigurationError&lt;/tt&gt; if a provider-configuration
                      file violates the specified format or if a provider class cannot
                      be found and instantiated.                    
                </return>
                <throws>
                    ServiceConfigurationErrorIf a provider-configuration file violates the specified format
                      or names a provider class that cannot be found and instantiated                    
                </throws>
                <see>
                    #providers(java.lang.Class,java.lang.ClassLoader)                    
                </see>
            </javadoc>
            <method name="providers" type="Iterator" line="379">
                <params>
                    <param name="service" type="Class"/>
                </params>
                <declaration name="cl" type="ClassLoader" line="380"/>
            </method>
            <javadoc line="385">
                Locates and incrementally instantiates the available providers of a
                  given service using the extension class loader.  This convenience method
                  simply locates the extension class loader, call it
                  &lt;tt&gt;extClassLoader&lt;/tt&gt;, and then does
                  &lt;pre&gt;
                  return Service.providers(service, extClassLoader);
                  &lt;/pre&gt;
                  If the extension class loader cannot be found then the system class
                  loader is used; if there is no system class loader then the bootstrap
                  class loader is used.                
                <param>
                    serviceThe service&apos;s abstract service class                    
                </param>
                <return>
                    An &lt;tt&gt;Iterator&lt;/tt&gt; that yields provider objects for the given
                      service, in some arbitrary order.  The iterator will throw a
                      &lt;tt&gt;ServiceConfigurationError&lt;/tt&gt; if a provider-configuration
                      file violates the specified format or if a provider class cannot
                      be found and instantiated.                    
                </return>
                <throws>
                    ServiceConfigurationErrorIf a provider-configuration file violates the specified format
                      or names a provider class that cannot be found and instantiated                    
                </throws>
                <see>
                    #providers(java.lang.Class,java.lang.ClassLoader)                    
                </see>
            </javadoc>
            <method name="installedProviders" type="Iterator" line="416">
                <params>
                    <param name="service" type="Class"/>
                </params>
                <declaration name="cl" type="ClassLoader" line="417"/>
                <declaration name="prev" type="ClassLoader" line="418"/>
                <scope line="419"/>
            </method>
        </class>
    </source>