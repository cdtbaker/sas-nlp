<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.util.Dictionary"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="CacheEntry" line="32">
            <extends class="Ref"/>
            <javadoc line="32">
                Caches the collision list.                
            </javadoc>
            <declaration name="hash" type="int" line="36"/>
            <declaration name="key" type="Object" line="37"/>
            <declaration name="next" type="CacheEntry" line="38"/>
            <method name="reconstitute" type="Object" line="39"/>
        </class>
        <class name="Cache" line="44">
            <extends class="Dictionary"/>
            <javadoc line="44">
                The Cache class. Maps keys to values. Any object can be used as
                  a key and/or value.  This is very similar to the Hashtable
                  class, except that after putting an object into the Cache,
                  it is not guaranteed that a subsequent get will return it.
                  The Cache will automatically remove entries if memory is
                  getting tight and if the entry is not referenced from outside
                  the Cache.&lt;p&gt;
                  To sucessfully store and retrieve objects from a hash table the
                  object used as the key must implement the hashCode() and equals()
                  methods.&lt;p&gt;
                  This example creates a Cache of numbers. It uses the names of
                  the numbers as keys:
                  &lt;pre&gt;
                  Cache numbers = new Cache();
                  numbers.put(&quot;one&quot;, new Integer(1));
                  numbers.put(&quot;two&quot;, new Integer(1));
                  numbers.put(&quot;three&quot;, new Integer(1));
                  &lt;/pre&gt;
                  To retrieve a number use:
                  &lt;pre&gt;
                  Integer n = (Integer)numbers.get(&quot;two&quot;);
                  if (n != null) {
                  System.out.println(&quot;two = &quot; + n);
                  }
                  &lt;/pre&gt;                
                <see>
                    java.lang.Object#hashCode                    
                </see>
                <see>
                    java.lang.Object#equals                    
                </see>
                <see>
                    sun.misc.Ref                    
                </see>
            </javadoc>
            <declaration name="table" type="CacheEntry" line="79"/>
            <javadoc line="79">
                The hash table data.                
            </javadoc>
            <declaration name="count" type="int" line="84"/>
            <javadoc line="84">
                The total number of entries in the hash table.                
            </javadoc>
            <declaration name="threshold" type="int" line="89"/>
            <javadoc line="89">
                Rehashes the table when count exceeds this threshold.                
            </javadoc>
            <declaration name="loadFactor" type="float" line="94"/>
            <javadoc line="94">
                The load factor for the hashtable.                
            </javadoc>
            <method name="init" type="void" line="99">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
                <scope line="100"/>
            </method>
            <javadoc line="108">
                Constructs a new, empty Cache with the specified initial
                  capacity and the specified load factor.                
                <param>
                    initialCapacity the initial number of buckets                    
                </param>
                <param>
                    loadFactor a number between 0.0 and 1.0, it defines
                      the threshold for rehashing the Cache into
                      a bigger one.                    
                </param>
                <exception>
                    IllegalArgumentException If the initial capacity
                      is less than or equal to zero.                    
                </exception>
                <exception>
                    IllegalArgumentException If the load factor is
                      less than or equal to zero.                    
                </exception>
            </javadoc>
            <method name="Cache" type="constructor" line="120">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="124">
                Constructs a new, empty Cache with the specified initial
                  capacity.                
                <param>
                    initialCapacity the initial number of buckets                    
                </param>
            </javadoc>
            <method name="Cache" type="constructor" line="129">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="133">
                Constructs a new, empty Cache. A default capacity and load factor
                  is used. Note that the Cache will automatically grow when it gets
                  full.                
            </javadoc>
            <method name="Cache" type="constructor" line="138">
                <comment line="142">
                    This should never happen                    
                </comment>
                <scope line="139"/>
                <scope line="141"/>
            </method>
            <javadoc line="147">
                Returns the number of elements contained within the Cache.                
            </javadoc>
            <method name="size" type="int" line="150"/>
            <javadoc line="154">
                Returns true if the Cache contains no elements.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="157"/>
            <javadoc line="161">
                Returns an enumeration of the Cache&apos;s keys.                
                <see>
                    Cache#elements                    
                </see>
                <see>
                    Enumeration                    
                </see>
            </javadoc>
            <method name="keys" type="Enumeration" line="166"/>
            <javadoc line="170">
                Returns an enumeration of the elements. Use the Enumeration methods
                  on the returned object to fetch the elements sequentially.                
                <see>
                    Cache#keys                    
                </see>
                <see>
                    Enumeration                    
                </see>
            </javadoc>
            <method name="elements" type="Enumeration" line="176"/>
            <javadoc line="180">
                Gets the object associated with the specified key in the Cache.                
                <param>
                    key the key in the hash table                    
                </param>
                <returns>
                    the element for the key or null if the key
                      is not defined in the hash table.                    
                </returns>
                <see>
                    Cache#put                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="187">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="tab" type="CacheEntry" line="188"/>
                <declaration name="hash" type="int" line="189"/>
                <declaration name="index" type="int" line="190"/>
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="199">
                Rehashes the contents of the table into a bigger table.
                  This is method is called automatically when the Cache&apos;s
                  size exceeds the threshold.                
            </javadoc>
            <method name="rehash" type="void" line="204">
                <comment line="214">
                    System.out.println(&quot;rehash old=&quot; + oldCapacity + &quot;, new=&quot; +                    
                </comment>
                <comment line="215">
                    newCapacity + &quot;, thresh=&quot; + threshold + &quot;, count=&quot; + count);                    
                </comment>
                <comment line="226">
                                        
                </comment>
                <declaration name="oldCapacity" type="int" line="205"/>
                <declaration name="oldTable" type="CacheEntry" line="206"/>
                <declaration name="newCapacity" type="int" line="208"/>
                <declaration name="newTable" type="CacheEntry" line="209"/>
                <scope line="217">
                    <scope line="218">
                        <declaration name="e" type="CacheEntry" line="219"/>
                        <scope line="221">
                            <declaration name="index" type="int" line="222"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="231">
                Puts the specified element into the Cache, using the specified
                  key.  The element may be retrieved by doing a get() with the same
                  key.  The key and the element cannot be null.                
                <param>
                    key the specified hashtable key                    
                </param>
                <param>
                    value the specified element                    
                </param>
                <return>
                    the old value of the key, or null if it did not have one.                    
                </return>
                <exception>
                    NullPointerException If the value of the specified
                      element is null.                    
                </exception>
                <see>
                    Cache#get                    
                </see>
            </javadoc>
            <method name="put" type="Object" line="242">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="243">
                    Make sure the value is not null                    
                </comment>
                <comment line="247">
                    Makes sure the key is not already in the cache.                    
                </comment>
                <comment line="258">
                                        
                </comment>
                <comment line="262">
                    Rehash the table if the threshold is exceeded                    
                </comment>
                <comment line="266">
                    Creates the new entry.                    
                </comment>
                <scope line="244"/>
                <declaration name="tab" type="CacheEntry" line="248"/>
                <declaration name="hash" type="int" line="249"/>
                <declaration name="index" type="int" line="250"/>
                <declaration name="ne" type="CacheEntry" line="251"/>
                <scope line="252">
                    <scope line="253">
                        <declaration name="old" type="Object" line="254"/>
                    </scope>
                </scope>
                <scope line="261"/>
                <scope line="267"/>
            </method>
            <javadoc line="279">
                Removes the element corresponding to the key. Does nothing if the
                  key is not present.                
                <param>
                    key the key that needs to be removed                    
                </param>
                <return>
                    the value of key, or null if the key was not found.                    
                </return>
            </javadoc>
            <method name="remove" type="Object" line="285">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="tab" type="CacheEntry" line="286"/>
                <declaration name="hash" type="int" line="287"/>
                <declaration name="index" type="int" line="288"/>
                <scope line="289">
                    <scope line="290">
                        <scope line="291"/>
                        <scope line="293"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="CacheEnumerator" line="304">
            <implements interface="Enumeration"/>
            <javadoc line="304">
                A Cache enumerator class.  This class should remain opaque
                  to the client. It will use the Enumeration interface.                
            </javadoc>
            <declaration name="keys" type="boolean" line="309"/>
            <declaration name="index" type="int" line="310"/>
            <declaration name="table" type="CacheEntry" line="311"/>
            <declaration name="entry" type="CacheEntry" line="312"/>
            <method name="CacheEnumerator" type="constructor" line="314">
                <params>
                    <param name="table" type="CacheEntry"/>
                    <param name="keys" type="boolean"/>
                </params>
            </method>
            <method name="hasMoreElements" type="boolean" line="320">
                <scope line="321"/>
            </method>
            <method name="nextElement" type="Object" line="332">
                <scope line="333">
                    <scope line="336">
                        <declaration name="e" type="CacheEntry" line="337"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>