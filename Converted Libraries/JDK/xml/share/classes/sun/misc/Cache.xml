<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.util.Dictionary"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="CacheEntry" line="5">
            <extends class="Ref"/>
            <javadoc line="5">
                Caches the collision list.                
            </javadoc>
            <declaration name="hash" type="int" line="9"/>
            <declaration name="key" type="Object" line="10"/>
            <declaration name="next" type="CacheEntry" line="11"/>
            <method name="reconstitute" type="Object" line="12"/>
        </class>
        <class name="Cache" line="16">
            <extends class="Dictionary"/>
            <javadoc line="16">
                The Cache class. Maps keys to values. Any object can be used as
                  a key and/or value.  This is very similar to the Hashtable
                  class, except that after putting an object into the Cache,
                  it is not guaranteed that a subsequent get will return it.
                  The Cache will automatically remove entries if memory is
                  getting tight and if the entry is not referenced from outside
                  the Cache.&lt;p&gt;
                  To sucessfully store and retrieve objects from a hash table the
                  object used as the key must implement the hashCode() and equals()
                  methods.&lt;p&gt;
                  This example creates a Cache of numbers. It uses the names of
                  the numbers as keys:
                  &lt;pre&gt;
                  Cache numbers = new Cache();
                  numbers.put(&quot;one&quot;, new Integer(1));
                  numbers.put(&quot;two&quot;, new Integer(1));
                  numbers.put(&quot;three&quot;, new Integer(1));
                  &lt;/pre&gt;
                  To retrieve a number use:
                  &lt;pre&gt;
                  Integer n = (Integer)numbers.get(&quot;two&quot;);
                  if (n != null) {
                  System.out.println(&quot;two = &quot; + n);
                  }
                  &lt;/pre&gt;                
                <see>
                    java.lang.Object#hashCode                    
                </see>
                <see>
                    java.lang.Object#equals                    
                </see>
                <see>
                    sun.misc.Ref                    
                </see>
            </javadoc>
            <declaration name="table" type="CacheEntry" line="47"/>
            <javadoc line="47">
                The hash table data.                
            </javadoc>
            <declaration name="count" type="int" line="51"/>
            <javadoc line="51">
                The total number of entries in the hash table.                
            </javadoc>
            <declaration name="threshold" type="int" line="55"/>
            <javadoc line="55">
                Rehashes the table when count exceeds this threshold.                
            </javadoc>
            <declaration name="loadFactor" type="float" line="59"/>
            <javadoc line="59">
                The load factor for the hashtable.                
            </javadoc>
            <method name="init" type="void" line="63">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
                <scope line="64"/>
            </method>
            <javadoc line="71">
                Constructs a new, empty Cache with the specified initial
                  capacity and the specified load factor.                
                <param>
                    initialCapacity the initial number of buckets                    
                </param>
                <param>
                    loadFactor a number between 0.0 and 1.0, it defines
                      the threshold for rehashing the Cache into
                      a bigger one.                    
                </param>
                <exception>
                    IllegalArgumentException If the initial capacity
                      is less than or equal to zero.                    
                </exception>
                <exception>
                    IllegalArgumentException If the load factor is
                      less than or equal to zero.                    
                </exception>
            </javadoc>
            <method name="Cache" type="constructor" line="83">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="86">
                Constructs a new, empty Cache with the specified initial
                  capacity.                
                <param>
                    initialCapacity the initial number of buckets                    
                </param>
            </javadoc>
            <method name="Cache" type="constructor" line="91">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                Constructs a new, empty Cache. A default capacity and load factor
                  is used. Note that the Cache will automatically grow when it gets
                  full.                
            </javadoc>
            <method name="Cache" type="constructor" line="99">
                <scope line="100"/>
                <scope line="103"/>
            </method>
            <javadoc line="107">
                Returns the number of elements contained within the Cache.                
            </javadoc>
            <method name="size" type="int" line="110"/>
            <javadoc line="113">
                Returns true if the Cache contains no elements.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="116"/>
            <javadoc line="119">
                Returns an enumeration of the Cache&apos;s keys.                
                <see>
                    Cache#elements                    
                </see>
                <see>
                    Enumeration                    
                </see>
            </javadoc>
            <method name="keys" type="Enumeration" line="124"/>
            <javadoc line="127">
                Returns an enumeration of the elements. Use the Enumeration methods
                  on the returned object to fetch the elements sequentially.                
                <see>
                    Cache#keys                    
                </see>
                <see>
                    Enumeration                    
                </see>
            </javadoc>
            <method name="elements" type="Enumeration" line="133"/>
            <javadoc line="136">
                Gets the object associated with the specified key in the Cache.                
                <param>
                    key the key in the hash table                    
                </param>
                <returns>
                    the element for the key or null if the key
                      is not defined in the hash table.                    
                </returns>
                <see>
                    Cache#put                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="143">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="tab" type="CacheEntry" line="144"/>
                <declaration name="hash" type="int" line="145"/>
                <declaration name="index" type="int" line="146"/>
                <scope line="147">
                    <scope line="148"/>
                </scope>
            </method>
            <javadoc line="154">
                Rehashes the contents of the table into a bigger table.
                  This is method is called automatically when the Cache&apos;s
                  size exceeds the threshold.                
            </javadoc>
            <method name="rehash" type="void" line="159">
                <declaration name="oldCapacity" type="int" line="160"/>
                <declaration name="oldTable" type="CacheEntry" line="161"/>
                <declaration name="newCapacity" type="int" line="162"/>
                <declaration name="newTable" type="CacheEntry" line="163"/>
                <scope line="166">
                    <scope line="167">
                        <declaration name="e" type="CacheEntry" line="168"/>
                        <scope line="170">
                            <declaration name="index" type="int" line="171"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="179">
                Puts the specified element into the Cache, using the specified
                  key.  The element may be retrieved by doing a get() with the same
                  key.  The key and the element cannot be null.                
                <param>
                    key the specified hashtable key                    
                </param>
                <param>
                    value the specified element                    
                </param>
                <return>
                    the old value of the key, or null if it did not have one.                    
                </return>
                <exception>
                    NullPointerException If the value of the specified
                      element is null.                    
                </exception>
                <see>
                    Cache#get                    
                </see>
            </javadoc>
            <method name="put" type="Object" line="190">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="191"/>
                <declaration name="tab" type="CacheEntry" line="194"/>
                <declaration name="hash" type="int" line="195"/>
                <declaration name="index" type="int" line="196"/>
                <declaration name="ne" type="CacheEntry" line="197"/>
                <scope line="198">
                    <scope line="199">
                        <declaration name="old" type="Object" line="200"/>
                    </scope>
                </scope>
                <scope line="206"/>
                <scope line="210"/>
            </method>
            <javadoc line="221">
                Removes the element corresponding to the key. Does nothing if the
                  key is not present.                
                <param>
                    key the key that needs to be removed                    
                </param>
                <return>
                    the value of key, or null if the key was not found.                    
                </return>
            </javadoc>
            <method name="remove" type="Object" line="227">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="tab" type="CacheEntry" line="228"/>
                <declaration name="hash" type="int" line="229"/>
                <declaration name="index" type="int" line="230"/>
                <scope line="231">
                    <scope line="232">
                        <scope line="233"/>
                        <scope line="236"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="CacheEnumerator" line="246">
            <implements interface="Enumeration"/>
            <javadoc line="246">
                A Cache enumerator class.  This class should remain opaque
                  to the client. It will use the Enumeration interface.                
            </javadoc>
            <declaration name="keys" type="boolean" line="251"/>
            <declaration name="index" type="int" line="252"/>
            <declaration name="table" type="CacheEntry" line="253"/>
            <declaration name="entry" type="CacheEntry" line="254"/>
            <method name="CacheEnumerator" type="constructor" line="255">
                <params>
                    <param name="table" type="CacheEntry"/>
                    <param name="keys" type="boolean"/>
                </params>
            </method>
            <method name="hasMoreElements" type="boolean" line="260">
                <scope line="261"/>
            </method>
            <method name="nextElement" type="Object" line="268">
                <scope line="269">
                    <scope line="271">
                        <declaration name="e" type="CacheEntry" line="272"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>