<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.lang.Thread.State"/>
        <import package="java.util.Properties"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <class name="VM" line="34">
            <comment line="37">
                The following methods used to be native methods that instruct
                 the VM to selectively suspend certain threads in low-memory
                 situations. They are inherently dangerous and not implementable
                 on native threads. We removed them in JDK 1.2. The skeletons
                 remain so that existing applications that use these methods
                 will still work.                
            </comment>
            <comment line="63">
                Causes any suspended threadgroups to be resumed.                
            </comment>
            <comment line="70">
                Causes threadgroups no longer marked suspendable to be resumed.                
            </comment>
            <comment line="76">
                                
            </comment>
            <comment line="108">
                Not supported in 1.2 because these will have to be exported as
                 JVM functions, and we are not sure we want do that. Leaving
                 here so it can be easily resurrected -- just remove the 
                 comments.                
            </comment>
            <comment line="115">
                Resume Java profiling.  All profiling data is added to any
                 earlier profiling, unless &lt;code&gt;resetJavaProfiler&lt;code&gt; is
                 called in between.  If profiling was not started from the
                 command line, &lt;code&gt;resumeJavaProfiler&lt;code&gt; will start it.
                 &lt;p&gt;
                
                 NOTE: Profiling must be enabled from the command line for a
                 java.prof report to be automatically generated on exit; if not,
                 writeJavaProfilerReport must be invoked to write a report.
                
                 @see     resetJavaProfiler
                 @see     writeJavaProfilerReport                
            </comment>
            <comment line="130">
                public native static void resumeJavaProfiler();                
            </comment>
            <comment line="132">
                Suspend Java profiling.                
            </comment>
            <comment line="135">
                public native static void suspendJavaProfiler();                
            </comment>
            <comment line="137">
                Initialize Java profiling.  Any accumulated profiling
                 information is discarded.                
            </comment>
            <comment line="141">
                public native static void resetJavaProfiler();                
            </comment>
            <comment line="152">
                Invoked by by System.initializeSystemClass just before returning.                
            </comment>
            <comment line="153">
                Subsystems that are invoked during initialization can check this                
            </comment>
            <comment line="154">
                property in order to avoid doing things that should wait until the                
            </comment>
            <comment line="155">
                application class loader has been set up.                
            </comment>
            <comment line="156">
                                
            </comment>
            <comment line="165">
                A user-settable upper limit on the maximum amount of allocatable direct                
            </comment>
            <comment line="166">
                buffer memory.  This value may be changed during VM initialization if                
            </comment>
            <comment line="167">
                &quot;java&quot; is launched with &quot;-XX:MaxDirectMemorySize=&lt;size&gt;&quot;.                
            </comment>
            <comment line="168">
                                
            </comment>
            <comment line="169">
                The initial value of this field is arbitrary; during JRE initialization                
            </comment>
            <comment line="170">
                it will be reset to the value specified on the command line, if any,                
            </comment>
            <comment line="171">
                otherwise to Runtime.getRuntime.maxDirectMemory().                
            </comment>
            <comment line="172">
                                
            </comment>
            <comment line="175">
                Returns the maximum amount of allocatable direct buffer memory.                
            </comment>
            <comment line="176">
                The directMemory variable is initialized during system initialization                
            </comment>
            <comment line="177">
                in the saveAndRemoveProperties method.                
            </comment>
            <comment line="178">
                                
            </comment>
            <comment line="183">
                User-controllable flag that determines if direct buffers should be page                
            </comment>
            <comment line="184">
                aligned. The &quot;-XX:+PageAlignDirectMemory&quot; option can be used to force                
            </comment>
            <comment line="185">
                buffers, allocated by ByteBuffer.allocateDirect, to be page aligned.                
            </comment>
            <comment line="188">
                Returns {@code true} if the direct buffers should be page aligned. This                
            </comment>
            <comment line="189">
                variable is initialized by saveAndRemoveProperties.                
            </comment>
            <comment line="194">
                A user-settable boolean to determine whether ClassLoader.loadClass should                
            </comment>
            <comment line="195">
                accept array syntax.  This value may be changed during VM initialization                
            </comment>
            <comment line="196">
                via the system property &quot;sun.lang.ClassLoader.allowArraySyntax&quot;.                
            </comment>
            <comment line="197">
                                
            </comment>
            <comment line="198">
                The default for 1.5 is &quot;true&quot;, array syntax is allowed.  In 1.6, the                
            </comment>
            <comment line="199">
                default will be &quot;false&quot;.  The presence of this system property to                
            </comment>
            <comment line="200">
                control array syntax allows applications the ability to preview this new                
            </comment>
            <comment line="201">
                behaviour.                
            </comment>
            <comment line="202">
                                
            </comment>
            <comment line="206">
                The allowArraySyntax boolean is initialized during system initialization                
            </comment>
            <comment line="207">
                in the saveAndRemoveProperties method.                
            </comment>
            <comment line="208">
                                
            </comment>
            <comment line="209">
                It is initialized based on the value of the system property                
            </comment>
            <comment line="210">
                &quot;sun.lang.ClassLoader.allowArraySyntax&quot;.  If the system property is not                
            </comment>
            <comment line="211">
                provided, the default for 1.5 is &quot;true&quot;.  In 1.6, the default will be                
            </comment>
            <comment line="212">
                &quot;false&quot;.  If the system property is provided, then the value of                
            </comment>
            <comment line="213">
                allowArraySyntax will be equal to &quot;true&quot; if Boolean.parseBoolean()                
            </comment>
            <comment line="214">
                returns &quot;true&quot;.   Otherwise, the field will be set to &quot;false&quot;.                
            </comment>
            <comment line="215">
                                
            </comment>
            <comment line="239">
                TODO: the Property Management needs to be refactored and                
            </comment>
            <comment line="240">
                the appropriate prop keys need to be accessible to the                
            </comment>
            <comment line="241">
                calling classes to avoid duplication of keys.                
            </comment>
            <comment line="244">
                Save a private copy of the system properties and remove                
            </comment>
            <comment line="245">
                the system properties that are not intended for public access.                
            </comment>
            <comment line="246">
                                
            </comment>
            <comment line="247">
                This method can only be invoked during system initialization.                
            </comment>
            <comment line="295">
                Initialize any miscellenous operating system settings that need to be                
            </comment>
            <comment line="296">
                set for the class libraries.                
            </comment>
            <comment line="297">
                                
            </comment>
            <comment line="304">
                                
            </comment>
            <comment line="307">
                                
            </comment>
            <comment line="310">
                Gets the number of objects pending for finalization.
                
                 @return the number of objects pending for finalization.                
            </comment>
            <comment line="319">
                Gets the peak number of objects pending for finalization.
                
                 @return the peak number of objects pending for finalization.                
            </comment>
            <comment line="328">
                Add &lt;tt&gt;n&lt;tt&gt; to the objects pending for finalization count.
                
                 @param n an integer value to be added to the objects pending
                 for finalization count                
            </comment>
            <comment line="364">
                The threadStatus field is set by the VM at state transition
                 in the hotspot implementation. Its value is set according to
                 the JVM TI specification GetThreadState function.                
            </comment>
            <declaration name="suspended" type="boolean" line="43"/>
            <javadoc line="45">
                @deprecated                
            </javadoc>
            <method name="threadsSuspended" type="boolean" line="47"/>
            <method name="allowThreadSuspension" type="boolean" line="51">
                <params>
                    <param name="g" type="ThreadGroup"/>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="55">
                @deprecated                
            </javadoc>
            <method name="suspendThreads" type="boolean" line="57"/>
            <javadoc line="63">
                @deprecated                
            </javadoc>
            <method name="unsuspendThreads" type="void" line="65"/>
            <javadoc line="70">
                @deprecated                
            </javadoc>
            <method name="unsuspendSomeThreads" type="void" line="72"/>
            <declaration name="STATE_GREEN" type="int" line="77"/>
            <javadoc line="77">
                @deprecated                
            </javadoc>
            <declaration name="STATE_YELLOW" type="int" line="81"/>
            <javadoc line="81">
                @deprecated                
            </javadoc>
            <declaration name="STATE_RED" type="int" line="85"/>
            <javadoc line="85">
                @deprecated                
            </javadoc>
            <javadoc line="89">
                @deprecated                
            </javadoc>
            <method name="getState" type="int" line="91"/>
            <javadoc line="95">
                @deprecated                
            </javadoc>
            <method name="registerVMNotification" type="void" line="97">
                <params>
                    <param name="n" type="VMNotification"/>
                </params>
            </method>
            <javadoc line="99">
                @deprecated                
            </javadoc>
            <method name="asChange" type="void" line="101">
                <params>
                    <param name="as_old" type="int"/>
                    <param name="as_new" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                @deprecated                
            </javadoc>
            <method name="asChange_otherthread" type="void" line="105">
                <params>
                    <param name="as_old" type="int"/>
                    <param name="as_new" type="int"/>
                </params>
            </method>
            <declaration name="booted" type="boolean" line="142"/>
            <javadoc line="142">
                Write the current profiling contents to the file &quot;java.prof&quot;.
                  If the file already exists, it will be overwritten.                
            </javadoc>
            <method name="booted" type="void" line="156"/>
            <method name="isBooted" type="boolean" line="160"/>
            <declaration name="directMemory" type="long" line="172"/>
            <method name="maxDirectMemory" type="long" line="178"/>
            <declaration name="pageAlignDirectMemory" type="boolean" line="185"/>
            <method name="isDirectMemoryPageAligned" type="boolean" line="189"/>
            <declaration name="defaultAllowArraySyntax" type="boolean" line="202"/>
            <declaration name="allowArraySyntax" type="boolean" line="203"/>
            <method name="allowArraySyntax" type="boolean" line="215"/>
            <javadoc line="219">
                Returns the system property of the specified key saved at
                  system initialization time.  This method should only be used
                  for the system properties that are not changed during runtime.
                  It accesses a private copy of the system properties so
                  that user&apos;s locking of the system properties object will not
                  cause the library to deadlock.
                  Note that the saved system properties do not include
                  the ones set by sun.misc.Version.init().                
            </javadoc>
            <method name="getSavedProperty" type="String" line="231">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <declaration name="savedProps" type="Properties" line="241"/>
            <method name="saveAndRemoveProperties" type="void" line="247">
                <params>
                    <param name="props" type="Properties"/>
                </params>
                <comment line="253">
                    Set the maximum amount of direct memory.  This value is controlled                    
                </comment>
                <comment line="254">
                    by the vm option -XX:MaxDirectMemorySize=&lt;size&gt;.                    
                </comment>
                <comment line="255">
                    The maximum amount of allocatable direct buffer memory (in bytes)                    
                </comment>
                <comment line="256">
                    from the system property sun.nio.MaxDirectMemorySize set by the VM.                    
                </comment>
                <comment line="257">
                    The system property will be removed.                    
                </comment>
                <comment line="261">
                    -XX:MaxDirectMemorySize not given, take default                    
                </comment>
                <comment line="270">
                    Check if direct buffers should be page aligned                    
                </comment>
                <comment line="275">
                    Set a boolean to determine whether ClassLoader.loadClass accepts                    
                </comment>
                <comment line="276">
                    array syntax.  This value is controlled by the system property                    
                </comment>
                <comment line="277">
                    &quot;sun.lang.ClassLoader.allowArraySyntax&quot;.                    
                </comment>
                <comment line="283">
                    Remove other private system properties                    
                </comment>
                <comment line="284">
                    used by java.lang.Integer.IntegerCache                    
                </comment>
                <comment line="287">
                    used by java.util.zip.ZipFile                    
                </comment>
                <comment line="290">
                    used by sun.launcher.LauncherHelper                    
                </comment>
                <declaration name="s" type="String" line="258"/>
                <scope line="259">
                    <scope line="260"/>
                    <scope line="263">
                        <declaration name="l" type="long" line="264"/>
                    </scope>
                </scope>
            </method>
            <method name="initializeOSEnvironment" type="void" line="297">
                <scope line="298"/>
            </method>
            <declaration name="finalRefCount" type="int" line="304"/>
            <declaration name="peakFinalRefCount" type="int" line="307"/>
            <method name="getFinalRefCount" type="int" line="314"/>
            <method name="getPeakFinalRefCount" type="int" line="323"/>
            <method name="addFinalRefCount" type="void" line="333">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="334">
                    The caller must hold lock to synchronize the update.                    
                </comment>
                <scope line="337"/>
            </method>
            <javadoc line="342">
                Returns Thread.State for the given threadStatus                
            </javadoc>
            <method name="toThreadState" type="Thread.State" line="345">
                <params>
                    <param name="threadStatus" type="int"/>
                </params>
                <scope line="346"/>
                <scope line="348"/>
                <scope line="350"/>
                <scope line="352"/>
                <scope line="354"/>
                <scope line="356"/>
                <scope line="358"/>
            </method>
            <declaration name="JVMTI_THREAD_STATE_ALIVE" type="int" line="367"/>
            <declaration name="JVMTI_THREAD_STATE_TERMINATED" type="int" line="368"/>
            <declaration name="JVMTI_THREAD_STATE_RUNNABLE" type="int" line="369"/>
            <declaration name="JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER" type="int" line="370"/>
            <declaration name="JVMTI_THREAD_STATE_WAITING_INDEFINITELY" type="int" line="371"/>
            <declaration name="JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT" type="int" line="372"/>
            <scope line="374"/>
            <method name="initialize" type="void" line="377"/>
        </class>
    </source>