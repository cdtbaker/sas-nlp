<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.util"/>
        <import package="java.util.jar.JarFile"/>
        <import package="sun.misc.JarIndex"/>
        <import package="sun.misc.InvalidJarIndexException"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="java.util.zip.ZipEntry"/>
        <import package="java.util.jar.JarEntry"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.util.jar.Attributes"/>
        <import package="java.util.jar.Attributes.Name"/>
        <import package="java.net.JarURLConnection"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLConnection"/>
        <import package="java.net.HttpURLConnection"/>
        <import package="java.net.URLStreamHandler"/>
        <import package="java.net.URLStreamHandlerFactory"/>
        <import package="java.io"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlException"/>
        <import package="java.security.CodeSigner"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.cert.Certificate"/>
        <import package="sun.misc.FileURLMapper"/>
        <import package="sun.net.util.URLUtil"/>
        <class name="URLClassPath" line="56">
            <comment line="75">
                                
            </comment>
            <comment line="78">
                                
            </comment>
            <comment line="81">
                                
            </comment>
            <comment line="84">
                                
            </comment>
            <comment line="87">
                                
            </comment>
            <comment line="90">
                                
            </comment>
            <comment line="298">
                Returns the Loader at the specified position in the URL search
                 path. The URLs are opened and expanded as needed. Returns null
                 if the specified index is out of range.                
            </comment>
            <comment line="347">
                Returns the Loader for the specified base URL.                
            </comment>
            <comment line="372">
                Pushes the specified URLs onto the list of unopened URLs.                
            </comment>
            <comment line="413">
                Check whether the resource URL should be returned.
                 Return null on security check failure.
                 Called by java.net.URLClassLoader.                
            </comment>
            <comment line="428">
                Check whether the resource URL should be returned.
                 Throw exception on failure.
                 Called internally within this file.                
            </comment>
            <comment line="585">
                Inner class used to represent a Loader of resources from a JAR URL.                
            </comment>
            <comment line="1003">
                Inner class used to represent a loader of classes and resources
                 from a file URL that refers to a directory.                
            </comment>
            <javadoc line="56">
                This class is used to maintain a search path of URLs for loading classes
                  and resources from both JAR files and directories.                
                <author>
                    David Connelly                    
                </author>
            </javadoc>
            <declaration name="USER_AGENT_JAVA_VERSION" type="String" line="63"/>
            <declaration name="JAVA_VERSION" type="String" line="64"/>
            <declaration name="DEBUG" type="boolean" line="65"/>
            <scope line="67"/>
            <declaration name="path" type="ArrayList&lt;URL&gt;" line="75"/>
            <declaration name="urls" type="Stack&lt;URL&gt;" line="78"/>
            <declaration name="loaders" type="ArrayList&lt;Loader&gt;" line="81"/>
            <declaration name="lmap" type="HashMap&lt;String,Loader&gt;" line="84"/>
            <declaration name="jarHandler" type="URLStreamHandler" line="87"/>
            <declaration name="closed" type="boolean" line="90"/>
            <javadoc line="92">
                Creates a new URLClassPath for the given URLs. The URLs will be
                  searched in the order specified for classes and resources. A URL
                  ending with a &apos;/&apos; is assumed to refer to a directory. Otherwise,
                  the URL is assumed to refer to a JAR file.                
                <param>
                    urls the directory and JAR file URLs to search for classes
                      and resources                    
                </param>
                <param>
                    factory the URLStreamHandlerFactory to use when creating new URLs                    
                </param>
            </javadoc>
            <method name="URLClassPath" type="constructor" line="102">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="factory" type="URLStreamHandlerFactory"/>
                </params>
                <scope line="103"/>
                <scope line="107"/>
            </method>
            <method name="URLClassPath" type="constructor" line="112">
                <params>
                    <param name="urls" type="URL[]"/>
                </params>
            </method>
            <method name="closeLoaders" type="List<IOException>" line="116">
                <scope line="117"/>
                <declaration name="result" type="List&lt;IOException&gt;" line="120"/>
                <scope line="121">
                    <scope line="122"/>
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="132">
                Appends the specified URL to the search path of directory and JAR
                  file URLs from which to load classes and resources.
                  &lt;p&gt;
                  If the URL specified is null or is already in the list of
                  URLs, then invoking this method has no effect.                
            </javadoc>
            <method name="addURL" type="void" line="139">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <scope line="142"/>
            </method>
            <javadoc line="151">
                Returns the original search path of URLs.                
            </javadoc>
            <method name="getURLs" type="URL[]" line="154">
                <scope line="155"/>
            </method>
            <javadoc line="160">
                Finds the resource with the specified name on the URL search path
                  or null if not found or security check fails.                
                <param>
                    name      the name of the resource                    
                </param>
                <param>
                    check     whether to perform a security check                    
                </param>
                <return>
                    a &lt;code&gt;URL&lt;/code&gt; for the resource, or &lt;code&gt;null&lt;/code&gt;
                      if the resource could not be found.                    
                </return>
            </javadoc>
            <method name="findResource" type="URL" line="169">
                <params>
                    <param name="name" type="String"/>
                    <param name="check" type="boolean"/>
                </params>
                <declaration name="loader" type="Loader" line="170"/>
                <scope line="171">
                    <declaration name="url" type="URL" line="172"/>
                    <scope line="173"/>
                </scope>
            </method>
            <javadoc line="180">
                Finds the first Resource on the URL search path which has the specified
                  name. Returns null if no Resource could be found.                
                <param>
                    name the name of the Resource                    
                </param>
                <param>
                    check     whether to perform a security check                    
                </param>
                <return>
                    the Resource, or null if not found                    
                </return>
            </javadoc>
            <method name="getResource" type="Resource" line="188">
                <params>
                    <param name="name" type="String"/>
                    <param name="check" type="boolean"/>
                </params>
                <scope line="189"/>
                <declaration name="loader" type="Loader" line="193"/>
                <scope line="194">
                    <declaration name="res" type="Resource" line="195"/>
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="203">
                Finds all resources on the URL search path with the given name.
                  Returns an enumeration of the URL objects.                
                <param>
                    name the resource name                    
                </param>
                <return>
                    an Enumeration of all the urls having the specified name                    
                </return>
            </javadoc>
            <method name="findResources" type="Enumeration<URL>" line="211">
                <params>
                    <param name="name" type="String"/>
                    <param name="check" type="boolean"/>
                </params>
                <anonymous_class line="212">
                    <declaration name="index" type="int" line="213"/>
                    <declaration name="url" type="URL" line="214"/>
                    <method name="next" type="boolean" line="216">
                        <scope line="217"/>
                        <scope line="219">
                            <declaration name="loader" type="Loader" line="220"/>
                            <scope line="221">
                                <scope line="223"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="231"/>
                    <method name="nextElement" type="URL" line="235">
                        <scope line="236"/>
                        <declaration name="u" type="URL" line="239"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getResource" type="Resource" line="246">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="250">
                Finds all resources on the URL search path with the given name.
                  Returns an enumeration of the Resource objects.                
                <param>
                    name the resource name                    
                </param>
                <return>
                    an Enumeration of all the resources having the specified name                    
                </return>
            </javadoc>
            <method name="getResources" type="Enumeration<Resource>" line="258">
                <params>
                    <param name="name" type="String"/>
                    <param name="check" type="boolean"/>
                </params>
                <anonymous_class line="259">
                    <declaration name="index" type="int" line="260"/>
                    <declaration name="res" type="Resource" line="261"/>
                    <method name="next" type="boolean" line="263">
                        <scope line="264"/>
                        <scope line="266">
                            <declaration name="loader" type="Loader" line="267"/>
                            <scope line="268">
                                <scope line="270"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="hasMoreElements" type="boolean" line="278"/>
                    <method name="nextElement" type="Resource" line="282">
                        <scope line="283"/>
                        <declaration name="r" type="Resource" line="286"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getResources" type="Enumeration<Resource>" line="293">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getLoader" type="Loader" line="302">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="307">
                    Expand URL search path until the request can be satisfied
                     or the URL stack is empty.                    
                </comment>
                <comment line="310">
                    Pop the next URL from the URL stack                    
                </comment>
                <comment line="319">
                    Skip this URL if it already has a Loader. (Loader
                     may be null in the case where URL has not been opened
                     but is referenced by a JAR index.)                    
                </comment>
                <comment line="326">
                    Otherwise, create a new Loader for the URL.                    
                </comment>
                <comment line="330">
                    If the loader defines a local class path then add the
                     URLs to the list of URLs to be opened.                    
                </comment>
                <comment line="337">
                    Silently ignore for now...                    
                </comment>
                <comment line="340">
                    Finally, add the Loader to the search path.                    
                </comment>
                <scope line="303"/>
                <scope line="308">
                    <declaration name="url" type="URL" line="310"/>
                    <scope line="311">
                        <scope line="312"/>
                        <scope line="314"/>
                    </scope>
                    <declaration name="urlNoFragString" type="String" line="321"/>
                    <scope line="322"/>
                    <declaration name="loader" type="Loader" line="326"/>
                    <scope line="327">
                        <declaration name="urls" type="URL[]" line="331"/>
                        <scope line="332"/>
                    </scope>
                    <scope line="335"/>
                </scope>
            </method>
            <method name="getLoader" type="Loader" line="349">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <scope line="350">
                    <anonymous_class line="352">
                        <method name="run" type="Loader" line="353">
                            <declaration name="file" type="String" line="354"/>
                            <scope line="355">
                                <scope line="356"/>
                                <scope line="358"/>
                            </scope>
                            <scope line="361"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="366"/>
            </method>
            <method name="push" type="void" line="374">
                <params>
                    <param name="us" type="URL[]"/>
                </params>
                <scope line="375">
                    <scope line="376"/>
                </scope>
            </method>
            <javadoc line="382">
                Convert class path specification into an array of file URLs.
                  The path of the file is encoded before conversion into URL
                  form so that reserved characters can safely appear in the path.                
            </javadoc>
            <method name="pathToURLs" type="URL[]" line="388">
                <params>
                    <param name="path" type="String"/>
                </params>
                <comment line="398">
                    use the non-canonicalized filename                    
                </comment>
                <declaration name="st" type="StringTokenizer" line="389"/>
                <declaration name="urls" type="URL[]" line="390"/>
                <declaration name="count" type="int" line="391"/>
                <scope line="392">
                    <declaration name="f" type="File" line="393"/>
                    <scope line="394"/>
                    <scope line="396"/>
                    <scope line="399"/>
                    <scope line="401"/>
                </scope>
                <scope line="404">
                    <declaration name="tmp" type="URL[]" line="405"/>
                </scope>
            </method>
            <method name="checkURL" type="URL" line="417">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <scope line="418"/>
                <scope line="420"/>
            </method>
            <method name="check" type="void" line="432">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="442">
                    fallback to checkRead/checkConnect for pre 1.2
                     security managers                    
                </comment>
                <declaration name="security" type="SecurityManager" line="433"/>
                <scope line="434">
                    <declaration name="urlConnection" type="URLConnection" line="435"/>
                    <declaration name="perm" type="Permission" line="436"/>
                    <scope line="437">
                        <scope line="438"/>
                        <scope line="440">
                            <scope line="444"/>
                            <scope line="448">
                                <declaration name="locUrl" type="URL" line="449"/>
                                <scope line="450"/>
                            </scope>
                            <scope line="455"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="Loader" line="463">
                <comment line="470">
                    if this points to a jar file                    
                </comment>
                <comment line="472">
                    Creates a new Loader for the specified URL.                    
                </comment>
                <comment line="479">
                    Returns the base URL for this Loader.                    
                </comment>
                <comment line="558">
                    Returns the Resource for the specified name, or null if not
                     found or the caller does not have the permission to get the
                     resource.                    
                </comment>
                <comment line="567">
                    close this loader and release all resources
                     method overridden in sub-classes                    
                </comment>
                <comment line="577">
                    Returns the local class path for this loader, or null if none.                    
                </comment>
                <comment line="597">
                    Creates a new JarLoader for the specified URL referring to
                     a JAR file.                    
                </comment>
                <comment line="714">
                    Returns the index of this JarLoader if it exists.                    
                </comment>
                <comment line="726">
                    Creates the resource and if the check flag is set to true, checks if
                     is its okay to return the resource.                    
                </comment>
                <comment line="766">
                    Returns true iff atleast one resource in the jar file has the same
                     package name as that of the specified resource name.                    
                </comment>
                <comment line="792">
                    Returns the URL for a resource with the specified name                    
                </comment>
                <comment line="803">
                    Returns the JAR Resource for the specified name.                    
                </comment>
                <comment line="829">
                    Version of getResource() that tracks the jar files that have been
                     visited by linking through the index files. This helper method uses
                     a HashSet to store the URLs of jar files that have been searched and
                     uses it to avoid going into an infinite loop, looking for a
                     non-existent resource                    
                </comment>
                <comment line="948">
                    Returns the JAR file local class path, or null if none.                    
                </comment>
                <comment line="977">
                    parse the standard extension dependencies                    
                </comment>
                <comment line="984">
                    Parses value of the Class-Path manifest attribute and returns
                     an array of URLs relative to the specified base URL.                    
                </comment>
                <comment line="1008">
                                        
                </comment>
                <comment line="1021">
                    Returns the URL for a resource with the specified name                    
                </comment>
                <implements interface="Closeable"/>
                <javadoc line="463">
                    Inner class used to represent a loader of resources and classes
                      from a base URL.                    
                </javadoc>
                <declaration name="base" type="URL" line="468"/>
                <declaration name="jarfile" type="JarFile" line="469"/>
                <method name="Loader" type="constructor" line="474">
                    <params>
                        <param name="url" type="URL"/>
                    </params>
                </method>
                <method name="getBaseURL" type="URL" line="481"/>
                <method name="findResource" type="URL" line="485">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                    </params>
                    <comment line="499">
                        For a HTTP connection we use the HEAD method to
                         check if the resource exists.                        
                    </comment>
                    <comment line="511">
                        our best guess for the other cases                        
                    </comment>
                    <declaration name="url" type="URL" line="486"/>
                    <scope line="487"/>
                    <scope line="489"/>
                    <scope line="493">
                        <scope line="494"/>
                        <declaration name="uc" type="URLConnection" line="502"/>
                        <scope line="503">
                            <declaration name="hconn" type="HttpURLConnection" line="504"/>
                            <scope line="506"/>
                        </scope>
                        <scope line="509">
                            <declaration name="is" type="InputStream" line="511"/>
                        </scope>
                    </scope>
                    <scope line="515"/>
                </method>
                <method name="getResource" type="Resource" line="520">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                    </params>
                    <comment line="536">
                        Need to remember the jar file so it can be closed
                         in a hurry.                        
                    </comment>
                    <declaration name="url" type="URL" line="521"/>
                    <scope line="522"/>
                    <scope line="524"/>
                    <declaration name="uc" type="URLConnection" line="527"/>
                    <scope line="528">
                        <scope line="529"/>
                        <declaration name="in" type="InputStream" line="533"/>
                        <scope line="534">
                            <declaration name="juc" type="JarURLConnection" line="538"/>
                        </scope>
                    </scope>
                    <scope line="541"/>
                    <anonymous_class line="544">
                        <method name="getName" type="String" line="545"/>
                        <method name="getURL" type="URL" line="546"/>
                        <method name="getCodeSourceURL" type="URL" line="547"/>
                        <method name="getInputStream" type="InputStream" line="548"/>
                        <method name="getContentLength" type="int" line="551"/>
                    </anonymous_class>
                </method>
                <method name="getResource" type="Resource" line="562">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="close" type="void" line="570">
                    <scope line="571"/>
                </method>
                <method name="getClassPath" type="URL[]" line="579"/>
            </class>
            <class name="JarLoader" line="587">
                <extends class="Loader"/>
                <comment line="470">
                    if this points to a jar file                    
                </comment>
                <comment line="472">
                    Creates a new Loader for the specified URL.                    
                </comment>
                <comment line="479">
                    Returns the base URL for this Loader.                    
                </comment>
                <comment line="558">
                    Returns the Resource for the specified name, or null if not
                     found or the caller does not have the permission to get the
                     resource.                    
                </comment>
                <comment line="567">
                    close this loader and release all resources
                     method overridden in sub-classes                    
                </comment>
                <comment line="577">
                    Returns the local class path for this loader, or null if none.                    
                </comment>
                <comment line="597">
                    Creates a new JarLoader for the specified URL referring to
                     a JAR file.                    
                </comment>
                <comment line="714">
                    Returns the index of this JarLoader if it exists.                    
                </comment>
                <comment line="726">
                    Creates the resource and if the check flag is set to true, checks if
                     is its okay to return the resource.                    
                </comment>
                <comment line="766">
                    Returns true iff atleast one resource in the jar file has the same
                     package name as that of the specified resource name.                    
                </comment>
                <comment line="792">
                    Returns the URL for a resource with the specified name                    
                </comment>
                <comment line="803">
                    Returns the JAR Resource for the specified name.                    
                </comment>
                <comment line="829">
                    Version of getResource() that tracks the jar files that have been
                     visited by linking through the index files. This helper method uses
                     a HashSet to store the URLs of jar files that have been searched and
                     uses it to avoid going into an infinite loop, looking for a
                     non-existent resource                    
                </comment>
                <comment line="948">
                    Returns the JAR file local class path, or null if none.                    
                </comment>
                <comment line="977">
                    parse the standard extension dependencies                    
                </comment>
                <comment line="984">
                    Parses value of the Class-Path manifest attribute and returns
                     an array of URLs relative to the specified base URL.                    
                </comment>
                <comment line="1008">
                                        
                </comment>
                <comment line="1021">
                    Returns the URL for a resource with the specified name                    
                </comment>
                <declaration name="jar" type="JarFile" line="588"/>
                <declaration name="csu" type="URL" line="589"/>
                <declaration name="index" type="JarIndex" line="590"/>
                <declaration name="metaIndex" type="MetaIndex" line="591"/>
                <declaration name="handler" type="URLStreamHandler" line="592"/>
                <declaration name="lmap" type="HashMap&lt;String,Loader&gt;" line="593"/>
                <declaration name="closed" type="boolean" line="594"/>
                <method name="JarLoader" type="constructor" line="603">
                    <params>
                        <param name="url" type="URL"/>
                        <param name="jarHandler" type="URLStreamHandler"/>
                        <param name="loaderMap" type="HashMap<String,Loader>"/>
                    </params>
                    <comment line="618">
                        If the meta index is found but the file is not
                         installed, set metaIndex to null. A typical
                         senario is charsets.jar which won&apos;t be installed
                         when the user is running in certain locale environment.
                         The side effect of null metaIndex will cause
                         ensureOpen get called so that IOException is thrown.                        
                    </comment>
                    <comment line="629">
                        metaIndex is null when either there is no such jar file
                         entry recorded in meta-index file or such jar file is
                         missing in JRE. See bug 6340399.                        
                    </comment>
                    <scope line="609"/>
                    <scope line="611">
                        <declaration name="fileName" type="String" line="612"/>
                        <scope line="613">
                            <declaration name="f" type="File" line="615"/>
                            <scope line="623"/>
                        </scope>
                        <scope line="631"/>
                    </scope>
                </method>
                <method name="close" type="void" line="638">
                    <comment line="640">
                        closing is synchronized at higher level                        
                    </comment>
                    <comment line="643">
                        in case not already open.                        
                    </comment>
                    <scope line="640"/>
                </method>
                <method name="getJarFile" type="JarFile" line="648"/>
                <method name="isOptimizable" type="boolean" line="652">
                    <params>
                        <param name="url" type="URL"/>
                    </params>
                </method>
                <method name="ensureOpen" type="void" line="656">
                    <comment line="672">
                        Add all the dependent URLs to the lmap so that loaders
                         will not be created for them by URLClassPath.getLoader(int)
                         if the same URL occurs later on the main class path.  We set
                         Loader to null here to avoid creating a Loader for each
                         URL until we actually need to try to load something from them.                        
                    </comment>
                    <comment line="680">
                        If a non-null loader already exists, leave it alone.                        
                    </comment>
                    <scope line="657">
                        <scope line="658">
                            <anonymous_class line="660">
                                <method name="run" type="Void" line="661">
                                    <comment line="672">
                                        Add all the dependent URLs to the lmap so that loaders
                                         will not be created for them by URLClassPath.getLoader(int)
                                         if the same URL occurs later on the main class path.  We set
                                         Loader to null here to avoid creating a Loader for each
                                         URL until we actually need to try to load something from them.                                        
                                    </comment>
                                    <comment line="680">
                                        If a non-null loader already exists, leave it alone.                                        
                                    </comment>
                                    <scope line="662"/>
                                    <scope line="669">
                                        <declaration name="jarfiles" type="String[]" line="670"/>
                                        <scope line="676">
                                            <scope line="677">
                                                <declaration name="jarURL" type="URL" line="678"/>
                                                <declaration name="urlNoFragString" type="String" line="680"/>
                                                <scope line="681"/>
                                            </scope>
                                            <scope line="684"/>
                                        </scope>
                                    </scope>
                                </method>
                            </anonymous_class>
                        </scope>
                        <scope line="693"/>
                    </scope>
                </method>
                <method name="getJarFile" type="JarFile" line="699">
                    <params>
                        <param name="url" type="URL"/>
                    </params>
                    <comment line="701">
                        Optimize case where url refers to a local jar file                        
                    </comment>
                    <scope line="701">
                        <declaration name="p" type="FileURLMapper" line="702"/>
                        <scope line="703"/>
                    </scope>
                    <declaration name="uc" type="URLConnection" line="708"/>
                </method>
                <method name="getIndex" type="JarIndex" line="716">
                    <scope line="717"/>
                    <scope line="719"/>
                </method>
                <method name="checkResource" type="Resource" line="730">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                        <param name="entry" type="JarEntry"/>
                    </params>
                    <comment line="741">
                        throw new IllegalArgumentException(&quot;name&quot;);                        
                    </comment>
                    <declaration name="url" type="URL" line="732"/>
                    <scope line="733">
                        <scope line="735"/>
                    </scope>
                    <scope line="738"/>
                    <scope line="741"/>
                    <scope line="743"/>
                    <anonymous_class line="747">
                        <method name="getName" type="String" line="748"/>
                        <method name="getURL" type="URL" line="749"/>
                        <method name="getCodeSourceURL" type="URL" line="750"/>
                        <method name="getInputStream" type="InputStream" line="752"/>
                        <method name="getContentLength" type="int" line="754"/>
                        <method name="getManifest" type="Manifest" line="756"/>
                        <method name="getCertificates" type="Certificate[]" line="758"/>
                        <method name="getCodeSigners" type="CodeSigner[]" line="760"/>
                    </anonymous_class>
                </method>
                <method name="validIndex" type="boolean" line="769">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="packageName" type="String" line="770"/>
                    <declaration name="pos" type="int" line="771"/>
                    <scope line="772"/>
                    <declaration name="entryName" type="String" line="776"/>
                    <declaration name="entry" type="ZipEntry" line="777"/>
                    <declaration name="enum_" type="Enumeration&lt;JarEntry&gt;" line="778"/>
                    <scope line="779">
                        <scope line="784"/>
                    </scope>
                </method>
                <method name="findResource" type="URL" line="794">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                    </params>
                    <declaration name="rsc" type="Resource" line="795"/>
                    <scope line="796"/>
                </method>
                <method name="getResource" type="Resource" line="805">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                    </params>
                    <scope line="806">
                        <scope line="807"/>
                    </scope>
                    <scope line="812"/>
                    <scope line="814"/>
                    <declaration name="entry" type="JarEntry" line="817"/>
                    <declaration name="visited" type="HashSet&lt;String&gt;" line="824"/>
                </method>
                <method name="getResource" type="Resource" line="836">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                        <param name="visited" type="Set<String>"/>
                    </params>
                    <comment line="845">
                        If there no jar files in the index that can potential contain
                         this resource then return immediately.                        
                    </comment>
                    <comment line="854">
                                                
                    </comment>
                    <comment line="864">
                        no loader has been set up for this jar file
                         before                        
                    </comment>
                    <comment line="875">
                        this newly opened jar file has its own index,
                         merge it into the parent&apos;s index, taking into
                         account the relative path.                        
                    </comment>
                    <comment line="886">
                                                
                    </comment>
                    <comment line="896">
                        Note that the addition of the url to the list of visited
                         jars incorporates a check for presence in the hashmap                        
                    </comment>
                    <comment line="911">
                        Verify that at least one other resource with the
                         same package name as the lookedup resource is
                         present in the new jar                        
                    </comment>
                    <comment line="916">
                                                
                    </comment>
                    <comment line="921">
                        If newLoader is the current loader or if it is a
                         loader that has already been searched or if the new
                         loader does not have an index then skip it
                         and move on to the next loader.                        
                    </comment>
                    <comment line="931">
                        Process the index of the new loader                        
                    </comment>
                    <comment line="938">
                        Get the list of jar files again as the list could have grown
                         due to merging of index files.                        
                    </comment>
                    <comment line="942">
                        If the count is unchanged, we are done.                        
                    </comment>
                    <declaration name="res" type="Resource" line="838"/>
                    <declaration name="jarFiles" type="Object[]" line="839"/>
                    <declaration name="done" type="boolean" line="840"/>
                    <declaration name="count" type="int" line="841"/>
                    <declaration name="jarFilesList" type="LinkedList" line="842"/>
                    <scope line="850">
                        <declaration name="size" type="int" line="852"/>
                        <scope line="854">
                            <declaration name="jarName" type="String" line="855"/>
                            <declaration name="newLoader" type="JarLoader" line="856"/>
                            <declaration name="url" type="URL" line="857"/>
                            <scope line="859">
                                <declaration name="urlNoFragString" type="String" line="861"/>
                                <scope line="862">
                                    <anonymous_class line="867">
                                        <method name="run" type="JarLoader" line="868"/>
                                    </anonymous_class>
                                    <declaration name="newIndex" type="JarIndex" line="878"/>
                                    <scope line="879">
                                        <declaration name="pos" type="int" line="880"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="888"/>
                            <scope line="890"/>
                            <declaration name="visitedURL" type="boolean" line="898"/>
                            <scope line="899">
                                <scope line="900"/>
                                <scope line="902"/>
                                <declaration name="entry" type="JarEntry" line="905"/>
                                <scope line="906"/>
                                <scope line="914"/>
                            </scope>
                            <scope line="926"/>
                            <scope line="933"/>
                        </scope>
                    </scope>
                </method>
                <method name="getClassPath" type="URL[]" line="950">
                    <comment line="962">
                        Only get manifest when necessary                        
                    </comment>
                    <scope line="951"/>
                    <scope line="955"/>
                    <scope line="961">
                        <declaration name="man" type="Manifest" line="962"/>
                        <scope line="963">
                            <declaration name="attr" type="Attributes" line="964"/>
                            <scope line="965">
                                <declaration name="value" type="String" line="966"/>
                                <scope line="967"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="parseExtensionsDependencies" type="void" line="979"/>
                <method name="parseClassPath" type="URL[]" line="989">
                    <params>
                        <param name="base" type="URL"/>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="st" type="StringTokenizer" line="990"/>
                    <declaration name="urls" type="URL[]" line="991"/>
                    <declaration name="i" type="int" line="992"/>
                    <scope line="993">
                        <declaration name="path" type="String" line="994"/>
                    </scope>
                </method>
            </class>
            <class name="FileLoader" line="1006">
                <extends class="Loader"/>
                <comment line="470">
                    if this points to a jar file                    
                </comment>
                <comment line="472">
                    Creates a new Loader for the specified URL.                    
                </comment>
                <comment line="479">
                    Returns the base URL for this Loader.                    
                </comment>
                <comment line="558">
                    Returns the Resource for the specified name, or null if not
                     found or the caller does not have the permission to get the
                     resource.                    
                </comment>
                <comment line="567">
                    close this loader and release all resources
                     method overridden in sub-classes                    
                </comment>
                <comment line="577">
                    Returns the local class path for this loader, or null if none.                    
                </comment>
                <comment line="597">
                    Creates a new JarLoader for the specified URL referring to
                     a JAR file.                    
                </comment>
                <comment line="714">
                    Returns the index of this JarLoader if it exists.                    
                </comment>
                <comment line="726">
                    Creates the resource and if the check flag is set to true, checks if
                     is its okay to return the resource.                    
                </comment>
                <comment line="766">
                    Returns true iff atleast one resource in the jar file has the same
                     package name as that of the specified resource name.                    
                </comment>
                <comment line="792">
                    Returns the URL for a resource with the specified name                    
                </comment>
                <comment line="803">
                    Returns the JAR Resource for the specified name.                    
                </comment>
                <comment line="829">
                    Version of getResource() that tracks the jar files that have been
                     visited by linking through the index files. This helper method uses
                     a HashSet to store the URLs of jar files that have been searched and
                     uses it to avoid going into an infinite loop, looking for a
                     non-existent resource                    
                </comment>
                <comment line="948">
                    Returns the JAR file local class path, or null if none.                    
                </comment>
                <comment line="977">
                    parse the standard extension dependencies                    
                </comment>
                <comment line="984">
                    Parses value of the Class-Path manifest attribute and returns
                     an array of URLs relative to the specified base URL.                    
                </comment>
                <comment line="1008">
                                        
                </comment>
                <comment line="1021">
                    Returns the URL for a resource with the specified name                    
                </comment>
                <declaration name="dir" type="File" line="1008"/>
                <method name="FileLoader" type="constructor" line="1010">
                    <params>
                        <param name="url" type="URL"/>
                    </params>
                    <scope line="1012"/>
                    <declaration name="path" type="String" line="1015"/>
                </method>
                <method name="findResource" type="URL" line="1023">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                    </params>
                    <declaration name="rsc" type="Resource" line="1024"/>
                    <scope line="1025"/>
                </method>
                <method name="getResource" type="Resource" line="1031">
                    <params>
                        <param name="name" type="String"/>
                        <param name="check" type="boolean"/>
                    </params>
                    <comment line="1039">
                        requested resource had ../..&apos;s in path                        
                    </comment>
                    <comment line="1051">
                                                
                    </comment>
                    <declaration name="url" type="URL" line="1032"/>
                    <scope line="1033">
                        <declaration name="normalizedBase" type="URL" line="1034"/>
                        <scope line="1037"/>
                        <declaration name="file" type="File" line="1045"/>
                        <scope line="1046">
                            <scope line="1049"/>
                        </scope>
                        <scope line="1053"/>
                        <scope line="1057">
                            <anonymous_class line="1058">
                                <method name="getName" type="String" line="1059"/>
                                <method name="getURL" type="URL" line="1060"/>
                                <method name="getCodeSourceURL" type="URL" line="1061"/>
                                <method name="getInputStream" type="InputStream" line="1063"/>
                                <method name="getContentLength" type="int" line="1065"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                    <scope line="1068"/>
                </method>
            </class>
        </class>
    </source>