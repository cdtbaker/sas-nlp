<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <class name="ConditionLock" line="28">
            <extends class="Lock"/>
            <javadoc line="28">
                ConditionLock is a Lock with a built in state variable.  This class
                  provides the ability to wait for the state variable to be set to a
                  desired value and then acquire the lock.&lt;p&gt;
                  The lockWhen() and unlockWith() methods can be safely intermixed
                  with the lock() and unlock() methods. However if there is a thread
                  waiting for the state variable to become a particular value and you
                  simply call Unlock(), that thread will not be able to acquire the
                  lock until the state variable equals its desired value. &lt;p&gt;                
                <author>
                    Peter King                    
                </author>
            </javadoc>
            <declaration name="state" type="int" line="43"/>
            <javadoc line="45">
                Creates a ConditionLock.                
            </javadoc>
            <method name="ConditionLock" type="constructor" line="48"/>
            <javadoc line="51">
                Creates a ConditionLock in an initialState.                
            </javadoc>
            <method name="ConditionLock" type="constructor" line="54">
                <params>
                    <param name="initialState" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Acquires the lock when the state variable equals the desired state.                
                <param>
                    desiredState the desired state                    
                </param>
                <exception>
                    java.lang.InterruptedException if any thread has
                      interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="lockWhen" type="void" line="67">
                <params>
                    <param name="desiredState" type="int"/>
                </params>
                <scope line="68"/>
            </method>
            <javadoc line="74">
                Releases the lock, and sets the state to a new value.                
                <param>
                    newState the new state                    
                </param>
            </javadoc>
            <method name="unlockWith" type="void" line="78">
                <params>
                    <param name="newState" type="int"/>
                </params>
            </method>
        </class>
    </source>