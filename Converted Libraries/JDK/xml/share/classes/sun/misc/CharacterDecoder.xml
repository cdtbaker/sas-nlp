<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.OutputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.PushbackInputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="CharacterDecoder" line="36">
            <javadoc line="36">
                This class defines the decoding half of character encoders.
                  A character decoder is an algorithim for transforming 8 bit
                  binary data that has been encoded into text by a character
                  encoder, back into original binary form.
                  The character encoders, in general, have been structured
                  around a central theme that binary data can be encoded into
                  text that has the form:
                  &lt;pre&gt;
                  [Buffer Prefix]
                  [Line Prefix][encoded data atoms][Line Suffix]
                  [Buffer Suffix]
                  &lt;/pre&gt;
                  Of course in the simplest encoding schemes, the buffer has no
                  distinct prefix of suffix, however all have some fixed relationship
                  between the text in an &apos;atom&apos; and the binary data itself.
                  In the CharacterEncoder and CharacterDecoder classes, one complete
                  chunk of data is referred to as a &lt;i&gt;buffer&lt;/i&gt;. Encoded buffers
                  are all text, and decoded buffers (sometimes just referred to as
                  buffers) are binary octets.
                  To create a custom decoder, you must, at a minimum,  overide three
                  abstract methods in this class.
                  &lt;DL&gt;
                  &lt;DD&gt;bytesPerAtom which tells the decoder how many bytes to
                  expect from decodeAtom
                  &lt;DD&gt;decodeAtom which decodes the bytes sent to it as text.
                  &lt;DD&gt;bytesPerLine which tells the encoder the maximum number of
                  bytes per line.
                  &lt;/DL&gt;
                  In general, the character decoders return error in the form of a
                  CEFormatException. The syntax of the detail string is
                  &lt;pre&gt;
                  DecoderClassName: Error message.
                  &lt;/pre&gt;
                  Several useful decoders have already been written and are
                  referenced in the See Also list below.                
                <author>
                    Chuck McManis                    
                </author>
                <see>
                    CEFormatException                    
                </see>
                <see>
                    CharacterEncoder                    
                </see>
                <see>
                    UCDecoder                    
                </see>
                <see>
                    UUDecoder                    
                </see>
                <see>
                    BASE64Decoder                    
                </see>
            </javadoc>
            <method name="bytesPerAtom" type="int" line="90"/>
            <javadoc line="90">
                Return the number of bytes per atom of decoding                
            </javadoc>
            <method name="bytesPerLine" type="int" line="93"/>
            <javadoc line="93">
                Return the maximum number of bytes that can be encoded per line                
            </javadoc>
            <javadoc line="96">
                decode the beginning of the buffer, by default this is a NOP.                
            </javadoc>
            <method name="decodeBufferPrefix" type="void" line="97">
                <params>
                    <param name="aStream" type="PushbackInputStream"/>
                    <param name="bStream" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="99">
                decode the buffer suffix, again by default it is a NOP.                
            </javadoc>
            <method name="decodeBufferSuffix" type="void" line="100">
                <params>
                    <param name="aStream" type="PushbackInputStream"/>
                    <param name="bStream" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="102">
                This method should return, if it knows, the number of bytes
                  that will be decoded. Many formats such as uuencoding provide
                  this information. By default we return the maximum bytes that
                  could have been encoded on the line.                
            </javadoc>
            <method name="decodeLinePrefix" type="int" line="108">
                <params>
                    <param name="aStream" type="PushbackInputStream"/>
                    <param name="bStream" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="112">
                This method post processes the line, if there are error detection
                  or correction codes in a line, they are generally processed by
                  this method. The simplest version of this method looks for the
                  (newline) character.                
            </javadoc>
            <method name="decodeLineSuffix" type="void" line="118">
                <params>
                    <param name="aStream" type="PushbackInputStream"/>
                    <param name="bStream" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="120">
                This method does an actual decode. It takes the decoded bytes and
                  writes them to the OutputStream. The integer &lt;i&gt;l&lt;/i&gt; tells the
                  method how many bytes are required. This is always &lt;= bytesPerAtom().                
            </javadoc>
            <method name="decodeAtom" type="void" line="125">
                <params>
                    <param name="aStream" type="PushbackInputStream"/>
                    <param name="bStream" type="OutputStream"/>
                    <param name="l" type="int"/>
                </params>
            </method>
            <javadoc line="129">
                This method works around the bizarre semantics of BufferedInputStream&apos;s
                  read method.                
            </javadoc>
            <method name="readFully" type="int" line="134">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="buffer" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="135">
                    <declaration name="q" type="int" line="136"/>
                </scope>
            </method>
            <javadoc line="144">
                Decode the text from the InputStream and write the decoded
                  octets to the OutputStream. This method runs until the stream
                  is exhausted.                
                <exception>
                    CEFormatException An error has occured while decoding                    
                </exception>
                <exception>
                    CEStreamExhausted The input stream is unexpectedly out of data                    
                </exception>
            </javadoc>
            <method name="decodeBuffer" type="void" line="151">
                <params>
                    <param name="aStream" type="InputStream"/>
                    <param name="bStream" type="OutputStream"/>
                </params>
                <declaration name="i" type="int" line="152"/>
                <declaration name="totalBytes" type="int" line="153"/>
                <declaration name="ps" type="PushbackInputStream" line="155"/>
                <scope line="157">
                    <declaration name="length" type="int" line="158"/>
                    <scope line="160">
                        <scope line="162"/>
                        <scope line="166"/>
                        <scope line="169"/>
                    </scope>
                    <scope line="174"/>
                </scope>
            </method>
            <javadoc line="181">
                Alternate decode interface that takes a String containing the encoded
                  buffer and returns a byte array containing the data.                
                <exception>
                    CEFormatException An error has occured while decoding                    
                </exception>
            </javadoc>
            <method name="decodeBuffer" type="byte" line="186">
                <params>
                    <param name="inputString" type="String"/>
                </params>
                <declaration name="inputBuffer" type="byte" line="187"/>
                <declaration name="inStream" type="ByteArrayInputStream" line="188"/>
                <declaration name="outStream" type="ByteArrayOutputStream" line="189"/>
            </method>
            <javadoc line="198">
                Decode the contents of the inputstream into a buffer.                
            </javadoc>
            <method name="decodeBuffer" type="byte" line="201">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="outStream" type="ByteArrayOutputStream" line="202"/>
            </method>
            <javadoc line="207">
                Decode the contents of the String into a ByteBuffer.                
            </javadoc>
            <method name="decodeBufferToByteBuffer" type="ByteBuffer" line="211">
                <params>
                    <param name="inputString" type="String"/>
                </params>
            </method>
            <javadoc line="215">
                Decode the contents of the inputStream into a ByteBuffer.                
            </javadoc>
            <method name="decodeBufferToByteBuffer" type="ByteBuffer" line="219">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
        </class>
    </source>