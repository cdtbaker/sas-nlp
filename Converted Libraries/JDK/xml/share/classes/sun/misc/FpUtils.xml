<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="sun.misc.FloatConsts"/>
        <import package="sun.misc.DoubleConsts"/>
        <class name="FpUtils" line="4">
            <javadoc line="4">
                The class {@code FpUtils} contains static utility methods for
                  manipulating and inspecting {@code float} and{@code double} floating-point numbers.  These methods include
                  functionality recommended or required by the IEEE 754
                  floating-point standard.                
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <javadoc line="12">
                Don&apos;t let anyone instantiate this class.                
            </javadoc>
            <method name="FpUtils" type="constructor" line="15"/>
            <declaration name="twoToTheDoubleScaleUp" type="double" line="17"/>
            <declaration name="twoToTheDoubleScaleDown" type="double" line="18"/>
            <javadoc line="19">
                Returns unbiased exponent of a {@code double}.                
            </javadoc>
            <method name="getExponent" type="int" line="22">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="25">
                Returns unbiased exponent of a {@code float}.                
            </javadoc>
            <method name="getExponent" type="int" line="28">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="31">
                Returns a floating-point power of two in the normal range.                
            </javadoc>
            <method name="powerOfTwoD" type="double" line="34">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="38">
                Returns a floating-point power of two in the normal range.                
            </javadoc>
            <method name="powerOfTwoF" type="float" line="41">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Returns the first floating-point argument with the sign of the
                  second floating-point argument.  Note that unlike the {@link FpUtils#copySign(double,double) copySign} method, this method
                  does not require NaN {@code sign} arguments to be treated
                  as positive values; implementations are permitted to treat some
                  NaN arguments as positive and other NaN arguments as negative
                  to allow greater performance.                
                <param>
                    magnitude  the parameter providing the magnitude of the result                    
                </param>
                <param>
                    sign   the parameter providing the sign of the result                    
                </param>
                <return>
                    a value with the magnitude of {@code magnitude}and the sign of {@code sign}.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="rawCopySign" type="double" line="57">
                <params>
                    <param name="magnitude" type="double"/>
                    <param name="sign" type="double"/>
                </params>
            </method>
            <javadoc line="60">
                Returns the first floating-point argument with the sign of the
                  second floating-point argument.  Note that unlike the {@link FpUtils#copySign(float,float) copySign} method, this method
                  does not require NaN {@code sign} arguments to be treated
                  as positive values; implementations are permitted to treat some
                  NaN arguments as positive and other NaN arguments as negative
                  to allow greater performance.                
                <param>
                    magnitude  the parameter providing the magnitude of the result                    
                </param>
                <param>
                    sign   the parameter providing the sign of the result                    
                </param>
                <return>
                    a value with the magnitude of {@code magnitude}and the sign of {@code sign}.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="rawCopySign" type="float" line="72">
                <params>
                    <param name="magnitude" type="float"/>
                    <param name="sign" type="float"/>
                </params>
            </method>
            <javadoc line="75">
                Returns {@code true} if the argument is a finite
                  floating-point value; returns {@code false} otherwise (for
                  NaN and infinity arguments).                
                <param>
                    d the {@code double} value to be tested                    
                </param>
                <return>
                    {@code true} if the argument is a finite
                      floating-point value, {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isFinite" type="boolean" line="83">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="86">
                Returns {@code true} if the argument is a finite
                  floating-point value; returns {@code false} otherwise (for
                  NaN and infinity arguments).                
                <param>
                    f the {@code float} value to be tested                    
                </param>
                <return>
                    {@code true} if the argument is a finite
                      floating-point value, {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isFinite" type="boolean" line="94">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="97">
                Returns {@code true} if the specified number is infinitely
                  large in magnitude, {@code false} otherwise.
                  &lt;p&gt;Note that this method is equivalent to the {@link Double#isInfinite(double) Double.isInfinite} method; the
                  functionality is included in this class for convenience.                
                <param>
                    d   the value to be tested.                    
                </param>
                <return>
                    {@code true} if the value of the argument is positive
                      infinity or negative infinity; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="106">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="109">
                Returns {@code true} if the specified number is infinitely
                  large in magnitude, {@code false} otherwise.
                  &lt;p&gt;Note that this method is equivalent to the {@link Float#isInfinite(float) Float.isInfinite} method; the
                  functionality is included in this class for convenience.                
                <param>
                    f   the value to be tested.                    
                </param>
                <return>
                    {@code true} if the argument is positive infinity or
                      negative infinity; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="118">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="121">
                Returns {@code true} if the specified number is a
                  Not-a-Number (NaN) value, {@code false} otherwise.
                  &lt;p&gt;Note that this method is equivalent to the {@link Double#isNaN(double) Double.isNaN} method; the functionality is
                  included in this class for convenience.                
                <param>
                    d   the value to be tested.                    
                </param>
                <return>
                    {@code true} if the value of the argument is NaN;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="129">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="132">
                Returns {@code true} if the specified number is a
                  Not-a-Number (NaN) value, {@code false} otherwise.
                  &lt;p&gt;Note that this method is equivalent to the {@link Float#isNaN(float) Float.isNaN} method; the functionality is
                  included in this class for convenience.                
                <param>
                    f   the value to be tested.                    
                </param>
                <return>
                    {@code true} if the argument is NaN;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="140">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="143">
                Returns {@code true} if the unordered relation holds
                  between the two arguments.  When two floating-point values are
                  unordered, one value is neither less than, equal to, nor
                  greater than the other.  For the unordered relation to be true,
                  at least one argument must be a {@code NaN}.                
                <param>
                    arg1      the first argument                    
                </param>
                <param>
                    arg2      the second argument                    
                </param>
                <return>
                    {@code true} if at least one argument is a NaN,{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isUnordered" type="boolean" line="153">
                <params>
                    <param name="arg1" type="double"/>
                    <param name="arg2" type="double"/>
                </params>
            </method>
            <javadoc line="156">
                Returns {@code true} if the unordered relation holds
                  between the two arguments.  When two floating-point values are
                  unordered, one value is neither less than, equal to, nor
                  greater than the other.  For the unordered relation to be true,
                  at least one argument must be a {@code NaN}.                
                <param>
                    arg1      the first argument                    
                </param>
                <param>
                    arg2      the second argument                    
                </param>
                <return>
                    {@code true} if at least one argument is a NaN,{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isUnordered" type="boolean" line="166">
                <params>
                    <param name="arg1" type="float"/>
                    <param name="arg2" type="float"/>
                </params>
            </method>
            <javadoc line="169">
                Returns unbiased exponent of a {@code double}; for
                  subnormal values, the number is treated as if it were
                  normalized.  That is for all finite, non-zero, positive numbers
                  &lt;i&gt;x&lt;/i&gt;, &lt;code&gt;scalb(&lt;i&gt;x&lt;/i&gt;, -ilogb(&lt;i&gt;x&lt;/i&gt;))&lt;/code&gt; is
                  always in the range [1, 2).
                  &lt;p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is 2&lt;sup&gt;30&lt;/sup&gt;.
                  &lt;li&gt; If the argument is infinite, then the result is 2&lt;sup&gt;28&lt;/sup&gt;.
                  &lt;li&gt; If the argument is zero, then the result is -(2&lt;sup&gt;28&lt;/sup&gt;).
                  &lt;/ul&gt;                
                <param>
                    d floating-point number whose exponent is to be extracted                    
                </param>
                <return>
                    unbiased exponent of the argument.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="ilogb" type="int" line="186">
                <params>
                    <param name="d" type="double"/>
                </params>
                <declaration name="exponent" type="int" line="187"/>
                <scope line="193"/>
                <scope line="196">
                    <declaration name="transducer" type="long" line="197"/>
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="213">
                Returns unbiased exponent of a {@code float}; for
                  subnormal values, the number is treated as if it were
                  normalized.  That is for all finite, non-zero, positive numbers
                  &lt;i&gt;x&lt;/i&gt;, &lt;code&gt;scalb(&lt;i&gt;x&lt;/i&gt;, -ilogb(&lt;i&gt;x&lt;/i&gt;))&lt;/code&gt; is
                  always in the range [1, 2).
                  &lt;p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is 2&lt;sup&gt;30&lt;/sup&gt;.
                  &lt;li&gt; If the argument is infinite, then the result is 2&lt;sup&gt;28&lt;/sup&gt;.
                  &lt;li&gt; If the argument is zero, then the result is -(2&lt;sup&gt;28&lt;/sup&gt;).
                  &lt;/ul&gt;                
                <param>
                    f floating-point number whose exponent is to be extracted                    
                </param>
                <return>
                    unbiased exponent of the argument.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="ilogb" type="int" line="230">
                <params>
                    <param name="f" type="float"/>
                </params>
                <declaration name="exponent" type="int" line="231"/>
                <scope line="237"/>
                <scope line="240">
                    <declaration name="transducer" type="int" line="241"/>
                    <scope line="244"/>
                </scope>
            </method>
            <javadoc line="257">
                Return {@code d} &amp;times;
                  2&lt;sup&gt;{@code scale_factor}&lt;/sup&gt; rounded as if performed
                  by a single correctly rounded floating-point multiply to a
                  member of the double value set.  See section 4.2.3 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;
                  for a discussion of floating-point
                  value sets.  If the exponent of the result is between the{@code double}&apos;s minimum exponent and maximum exponent,
                  the answer is calculated exactly.  If the exponent of the
                  result would be larger than {@code doubles}&apos;s maximum
                  exponent, an infinity is returned.  Note that if the result is
                  subnormal, precision may be lost; that is, when {@code scalb(x,
                  n)} is subnormal, {@code scalb(scalb(x, n), -n)} may
                  not equal &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has
                  the same sign as {@code d}.
                  &lt;p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the first argument is NaN, NaN is returned.
                  &lt;li&gt; If the first argument is infinite, then an infinity of the
                  same sign is returned.
                  &lt;li&gt; If the first argument is zero, then a zero of the same
                  sign is returned.
                  &lt;/ul&gt;                
                <param>
                    d number to be scaled by a power of two.                    
                </param>
                <param>
                    scale_factor power of 2 used to scale {@code d}                    
                </param>
                <return>
                    {@code d  }2&lt;sup&gt;{@code scale_factor}&lt;/sup&gt;                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="scalb" type="double" line="286">
                <params>
                    <param name="d" type="double"/>
                    <param name="scale_factor" type="int"/>
                </params>
                <declaration name="MAX_SCALE" type="int" line="287"/>
                <declaration name="exp_adjust" type="int" line="288"/>
                <declaration name="scale_increment" type="int" line="289"/>
                <declaration name="exp_delta" type="double" line="290"/>
                <scope line="291"/>
                <scope line="296"/>
                <declaration name="t" type="int" line="301"/>
                <scope line="305"/>
            </method>
            <javadoc line="311">
                Return {@code f} &amp;times;
                  2&lt;sup&gt;{@code scale_factor}&lt;/sup&gt; rounded as if performed
                  by a single correctly rounded floating-point multiply to a
                  member of the float value set.  See section 4.2.3 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;
                  for a discussion of floating-point
                  value sets. If the exponent of the result is between the{@code float}&apos;s minimum exponent and maximum exponent, the
                  answer is calculated exactly.  If the exponent of the result
                  would be larger than {@code float}&apos;s maximum exponent, an
                  infinity is returned.  Note that if the result is subnormal,
                  precision may be lost; that is, when {@code scalb(x, n)}is subnormal, {@code scalb(scalb(x, n), -n)} may not equal
                  &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has the same
                  sign as {@code f}.
                  &lt;p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the first argument is NaN, NaN is returned.
                  &lt;li&gt; If the first argument is infinite, then an infinity of the
                  same sign is returned.
                  &lt;li&gt; If the first argument is zero, then a zero of the same
                  sign is returned.
                  &lt;/ul&gt;                
                <param>
                    f number to be scaled by a power of two.                    
                </param>
                <param>
                    scale_factor power of 2 used to scale {@code f}                    
                </param>
                <return>
                    {@code f  }2&lt;sup&gt;{@code scale_factor}&lt;/sup&gt;                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="scalb" type="float" line="339">
                <params>
                    <param name="f" type="float"/>
                    <param name="scale_factor" type="int"/>
                </params>
                <declaration name="MAX_SCALE" type="int" line="340"/>
            </method>
            <javadoc line="344">
                Returns the floating-point number adjacent to the first
                  argument in the direction of the second argument.  If both
                  arguments compare as equal the second argument is returned.
                  &lt;p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is a NaN, then NaN is returned.
                  &lt;li&gt; If both arguments are signed zeros, {@code direction}is returned unchanged (as implied by the requirement of
                  returning the second argument if the arguments compare as
                  equal).
                  &lt;li&gt; If {@code start} is
                  &amp;plusmn;{@code Double.MIN_VALUE} and {@code direction}has a value such that the result should have a smaller
                  magnitude, then a zero with the same sign as {@code start}is returned.
                  &lt;li&gt; If {@code start} is infinite and{@code direction} has a value such that the result should
                  have a smaller magnitude, {@code Double.MAX_VALUE} with the
                  same sign as {@code start} is returned.
                  &lt;li&gt; If {@code start} is equal to &amp;plusmn;{@code Double.MAX_VALUE} and {@code direction} has a
                  value such that the result should have a larger magnitude, an
                  infinity with same sign as {@code start} is returned.
                  &lt;/ul&gt;                
                <param>
                    start     starting floating-point value                    
                </param>
                <param>
                    direction value indicating which of{@code start}&apos;s neighbors or {@code start} should
                      be returned                    
                </param>
                <return>
                    The floating-point number adjacent to {@code start} in the
                      direction of {@code direction}.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="nextAfter" type="double" line="372">
                <params>
                    <param name="start" type="double"/>
                    <param name="direction" type="double"/>
                </params>
            </method>
            <javadoc line="393">
                Returns the floating-point number adjacent to the first
                  argument in the direction of the second argument.  If both
                  arguments compare as equal, the second argument is returned.
                  &lt;p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is a NaN, then NaN is returned.
                  &lt;li&gt; If both arguments are signed zeros, a {@code float}zero with the same sign as {@code direction} is returned
                  (as implied by the requirement of returning the second argument
                  if the arguments compare as equal).
                  &lt;li&gt; If {@code start} is
                  &amp;plusmn;{@code Float.MIN_VALUE} and {@code direction}has a value such that the result should have a smaller
                  magnitude, then a zero with the same sign as {@code start}is returned.
                  &lt;li&gt; If {@code start} is infinite and{@code direction} has a value such that the result should
                  have a smaller magnitude, {@code Float.MAX_VALUE} with the
                  same sign as {@code start} is returned.
                  &lt;li&gt; If {@code start} is equal to &amp;plusmn;{@code Float.MAX_VALUE} and {@code direction} has a
                  value such that the result should have a larger magnitude, an
                  infinity with same sign as {@code start} is returned.
                  &lt;/ul&gt;                
                <param>
                    start     starting floating-point value                    
                </param>
                <param>
                    direction value indicating which of{@code start}&apos;s neighbors or {@code start} should
                      be returned                    
                </param>
                <return>
                    The floating-point number adjacent to {@code start} in the
                      direction of {@code direction}.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="nextAfter" type="float" line="421">
                <params>
                    <param name="start" type="float"/>
                    <param name="direction" type="double"/>
                </params>
            </method>
            <javadoc line="442">
                Returns the floating-point value adjacent to {@code d} in
                  the direction of positive infinity.  This method is
                  semantically equivalent to {@code nextAfter(d,
                  Double.POSITIVE_INFINITY)}; however, a {@code nextUp}implementation may run faster than its equivalent{@code nextAfter} call.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, the result is NaN.
                  &lt;li&gt; If the argument is positive infinity, the result is
                  positive infinity.
                  &lt;li&gt; If the argument is zero, the result is{@code Double.MIN_VALUE}&lt;/ul&gt;                
                <param>
                    d  starting floating-point value                    
                </param>
                <return>
                    The adjacent floating-point value closer to positive
                      infinity.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="nextUp" type="double" line="458">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="460"/>
            </method>
            <javadoc line="465">
                Returns the floating-point value adjacent to {@code f} in
                  the direction of positive infinity.  This method is
                  semantically equivalent to {@code nextAfter(f,
                  Double.POSITIVE_INFINITY)}; however, a {@code nextUp}implementation may run faster than its equivalent{@code nextAfter} call.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, the result is NaN.
                  &lt;li&gt; If the argument is positive infinity, the result is
                  positive infinity.
                  &lt;li&gt; If the argument is zero, the result is{@code Float.MIN_VALUE}&lt;/ul&gt;                
                <param>
                    f  starting floating-point value                    
                </param>
                <return>
                    The adjacent floating-point value closer to positive
                      infinity.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="nextUp" type="float" line="481">
                <params>
                    <param name="f" type="float"/>
                </params>
                <scope line="483"/>
            </method>
            <javadoc line="488">
                Returns the floating-point value adjacent to {@code d} in
                  the direction of negative infinity.  This method is
                  semantically equivalent to {@code nextAfter(d,
                  Double.NEGATIVE_INFINITY)}; however, a{@code nextDown} implementation may run faster than its
                  equivalent {@code nextAfter} call.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, the result is NaN.
                  &lt;li&gt; If the argument is negative infinity, the result is
                  negative infinity.
                  &lt;li&gt; If the argument is zero, the result is{@code -Double.MIN_VALUE}&lt;/ul&gt;                
                <param>
                    d  starting floating-point value                    
                </param>
                <return>
                    The adjacent floating-point value closer to negative
                      infinity.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="nextDown" type="double" line="505">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="507"/>
            </method>
            <javadoc line="512">
                Returns the floating-point value adjacent to {@code f} in
                  the direction of negative infinity.  This method is
                  semantically equivalent to {@code nextAfter(f,
                  Float.NEGATIVE_INFINITY)}; however, a{@code nextDown} implementation may run faster than its
                  equivalent {@code nextAfter} call.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, the result is NaN.
                  &lt;li&gt; If the argument is negative infinity, the result is
                  negative infinity.
                  &lt;li&gt; If the argument is zero, the result is{@code -Float.MIN_VALUE}&lt;/ul&gt;                
                <param>
                    f  starting floating-point value                    
                </param>
                <return>
                    The adjacent floating-point value closer to negative
                      infinity.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="nextDown" type="double" line="529">
                <params>
                    <param name="f" type="float"/>
                </params>
                <scope line="531"/>
            </method>
            <javadoc line="536">
                Returns the first floating-point argument with the sign of the
                  second floating-point argument.  For this method, a NaN{@code sign} argument is always treated as if it were
                  positive.                
                <param>
                    magnitude  the parameter providing the magnitude of the result                    
                </param>
                <param>
                    sign   the parameter providing the sign of the result                    
                </param>
                <return>
                    a value with the magnitude of {@code magnitude}and the sign of {@code sign}.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="copySign" type="double" line="546">
                <params>
                    <param name="magnitude" type="double"/>
                    <param name="sign" type="double"/>
                </params>
            </method>
            <javadoc line="549">
                Returns the first floating-point argument with the sign of the
                  second floating-point argument.  For this method, a NaN{@code sign} argument is always treated as if it were
                  positive.                
                <param>
                    magnitude  the parameter providing the magnitude of the result                    
                </param>
                <param>
                    sign   the parameter providing the sign of the result                    
                </param>
                <return>
                    a value with the magnitude of {@code magnitude}and the sign of {@code sign}.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="copySign" type="float" line="558">
                <params>
                    <param name="magnitude" type="float"/>
                    <param name="sign" type="float"/>
                </params>
            </method>
            <javadoc line="561">
                Returns the size of an ulp of the argument.  An ulp of a{@code double} value is the positive distance between this
                  floating-point value and the {@code double} value next
                  larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
                  &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive or negative infinity, then the
                  result is positive infinity.
                  &lt;li&gt; If the argument is positive or negative zero, then the result is{@code Double.MIN_VALUE}.
                  &lt;li&gt; If the argument is &amp;plusmn;{@code Double.MAX_VALUE}, then
                  the result is equal to 2&lt;sup&gt;971&lt;/sup&gt;.
                  &lt;/ul&gt;                
                <param>
                    d the floating-point value whose ulp is to be returned                    
                </param>
                <return>
                    the size of an ulp of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="ulp" type="double" line="580">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="598">
                Returns the size of an ulp of the argument.  An ulp of a{@code float} value is the positive distance between this
                  floating-point value and the {@code float} value next
                  larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
                  &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive or negative infinity, then the
                  result is positive infinity.
                  &lt;li&gt; If the argument is positive or negative zero, then the result is{@code Float.MIN_VALUE}.
                  &lt;li&gt; If the argument is &amp;plusmn;{@code Float.MAX_VALUE}, then
                  the result is equal to 2&lt;sup&gt;104&lt;/sup&gt;.
                  &lt;/ul&gt;                
                <param>
                    f the floating-point value whose ulp is to be returned                    
                </param>
                <return>
                    the size of an ulp of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="ulp" type="float" line="617">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="635">
                Returns the signum function of the argument; zero if the argument
                  is zero, 1.0 if the argument is greater than zero, -1.0 if the
                  argument is less than zero.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive zero or negative zero, then the
                  result is the same as the argument.
                  &lt;/ul&gt;                
                <param>
                    d the floating-point value whose signum is to be returned                    
                </param>
                <return>
                    the signum function of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="signum" type="double" line="650">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="653">
                Returns the signum function of the argument; zero if the argument
                  is zero, 1.0f if the argument is greater than zero, -1.0f if the
                  argument is less than zero.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive zero or negative zero, then the
                  result is the same as the argument.
                  &lt;/ul&gt;                
                <param>
                    f the floating-point value whose signum is to be returned                    
                </param>
                <return>
                    the signum function of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="signum" type="float" line="668">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
        </class>
    </source>