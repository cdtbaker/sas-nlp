<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Map"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="ProxyGenerator" line="43">
            <comment line="55">
                In the comments below, &quot;JVMS&quot; refers to The Java Virtual Machine
                 Specification Second Edition and &quot;JLS&quot; refers to the original
                 version of The Java Language Specification, unless otherwise
                 specified.                
            </comment>
            <comment line="62">
                                
            </comment>
            <comment line="66">
                beginning of constants copied from
                 sun.tools.java.RuntimeConstants (which no longer exists):                
            </comment>
            <comment line="71">
                                
            </comment>
            <comment line="85">
                                
            </comment>
            <comment line="88">
                private static final int ACC_PROTECTED              = 0x00000004;                
            </comment>
            <comment line="91">
                private static final int ACC_SYNCHRONIZED           = 0x00000020;                
            </comment>
            <comment line="92">
                private static final int ACC_VOLATILE               = 0x00000040;                
            </comment>
            <comment line="93">
                private static final int ACC_TRANSIENT              = 0x00000080;                
            </comment>
            <comment line="94">
                private static final int ACC_NATIVE                 = 0x00000100;                
            </comment>
            <comment line="95">
                private static final int ACC_INTERFACE              = 0x00000200;                
            </comment>
            <comment line="96">
                private static final int ACC_ABSTRACT               = 0x00000400;                
            </comment>
            <comment line="98">
                private static final int ACC_STRICT                 = 0x00000800;                
            </comment>
            <comment line="100">
                                
            </comment>
            <comment line="101">
                private static final int opc_nop                    = 0;                
            </comment>
            <comment line="103">
                private static final int opc_iconst_m1              = 2;                
            </comment>
            <comment line="105">
                private static final int opc_iconst_1               = 4;                
            </comment>
            <comment line="106">
                private static final int opc_iconst_2               = 5;                
            </comment>
            <comment line="107">
                private static final int opc_iconst_3               = 6;                
            </comment>
            <comment line="108">
                private static final int opc_iconst_4               = 7;                
            </comment>
            <comment line="109">
                private static final int opc_iconst_5               = 8;                
            </comment>
            <comment line="110">
                private static final int opc_lconst_0               = 9;                
            </comment>
            <comment line="111">
                private static final int opc_lconst_1               = 10;                
            </comment>
            <comment line="112">
                private static final int opc_fconst_0               = 11;                
            </comment>
            <comment line="113">
                private static final int opc_fconst_1               = 12;                
            </comment>
            <comment line="114">
                private static final int opc_fconst_2               = 13;                
            </comment>
            <comment line="115">
                private static final int opc_dconst_0               = 14;                
            </comment>
            <comment line="116">
                private static final int opc_dconst_1               = 15;                
            </comment>
            <comment line="121">
                private static final int opc_ldc2_w                 = 20;                
            </comment>
            <comment line="128">
                private static final int opc_iload_1                = 27;                
            </comment>
            <comment line="129">
                private static final int opc_iload_2                = 28;                
            </comment>
            <comment line="130">
                private static final int opc_iload_3                = 29;                
            </comment>
            <comment line="132">
                private static final int opc_lload_1                = 31;                
            </comment>
            <comment line="133">
                private static final int opc_lload_2                = 32;                
            </comment>
            <comment line="134">
                private static final int opc_lload_3                = 33;                
            </comment>
            <comment line="136">
                private static final int opc_fload_1                = 35;                
            </comment>
            <comment line="137">
                private static final int opc_fload_2                = 36;                
            </comment>
            <comment line="138">
                private static final int opc_fload_3                = 37;                
            </comment>
            <comment line="140">
                private static final int opc_dload_1                = 39;                
            </comment>
            <comment line="141">
                private static final int opc_dload_2                = 40;                
            </comment>
            <comment line="142">
                private static final int opc_dload_3                = 41;                
            </comment>
            <comment line="144">
                private static final int opc_aload_1                = 43;                
            </comment>
            <comment line="145">
                private static final int opc_aload_2                = 44;                
            </comment>
            <comment line="146">
                private static final int opc_aload_3                = 45;                
            </comment>
            <comment line="147">
                private static final int opc_iaload                 = 46;                
            </comment>
            <comment line="148">
                private static final int opc_laload                 = 47;                
            </comment>
            <comment line="149">
                private static final int opc_faload                 = 48;                
            </comment>
            <comment line="150">
                private static final int opc_daload                 = 49;                
            </comment>
            <comment line="151">
                private static final int opc_aaload                 = 50;                
            </comment>
            <comment line="152">
                private static final int opc_baload                 = 51;                
            </comment>
            <comment line="153">
                private static final int opc_caload                 = 52;                
            </comment>
            <comment line="154">
                private static final int opc_saload                 = 53;                
            </comment>
            <comment line="155">
                private static final int opc_istore                 = 54;                
            </comment>
            <comment line="156">
                private static final int opc_lstore                 = 55;                
            </comment>
            <comment line="157">
                private static final int opc_fstore                 = 56;                
            </comment>
            <comment line="158">
                private static final int opc_dstore                 = 57;                
            </comment>
            <comment line="160">
                private static final int opc_istore_0               = 59;                
            </comment>
            <comment line="161">
                private static final int opc_istore_1               = 60;                
            </comment>
            <comment line="162">
                private static final int opc_istore_2               = 61;                
            </comment>
            <comment line="163">
                private static final int opc_istore_3               = 62;                
            </comment>
            <comment line="164">
                private static final int opc_lstore_0               = 63;                
            </comment>
            <comment line="165">
                private static final int opc_lstore_1               = 64;                
            </comment>
            <comment line="166">
                private static final int opc_lstore_2               = 65;                
            </comment>
            <comment line="167">
                private static final int opc_lstore_3               = 66;                
            </comment>
            <comment line="168">
                private static final int opc_fstore_0               = 67;                
            </comment>
            <comment line="169">
                private static final int opc_fstore_1               = 68;                
            </comment>
            <comment line="170">
                private static final int opc_fstore_2               = 69;                
            </comment>
            <comment line="171">
                private static final int opc_fstore_3               = 70;                
            </comment>
            <comment line="172">
                private static final int opc_dstore_0               = 71;                
            </comment>
            <comment line="173">
                private static final int opc_dstore_1               = 72;                
            </comment>
            <comment line="174">
                private static final int opc_dstore_2               = 73;                
            </comment>
            <comment line="175">
                private static final int opc_dstore_3               = 74;                
            </comment>
            <comment line="177">
                private static final int opc_astore_1               = 76;                
            </comment>
            <comment line="178">
                private static final int opc_astore_2               = 77;                
            </comment>
            <comment line="179">
                private static final int opc_astore_3               = 78;                
            </comment>
            <comment line="180">
                private static final int opc_iastore                = 79;                
            </comment>
            <comment line="181">
                private static final int opc_lastore                = 80;                
            </comment>
            <comment line="182">
                private static final int opc_fastore                = 81;                
            </comment>
            <comment line="183">
                private static final int opc_dastore                = 82;                
            </comment>
            <comment line="185">
                private static final int opc_bastore                = 84;                
            </comment>
            <comment line="186">
                private static final int opc_castore                = 85;                
            </comment>
            <comment line="187">
                private static final int opc_sastore                = 86;                
            </comment>
            <comment line="189">
                private static final int opc_pop2                   = 88;                
            </comment>
            <comment line="191">
                private static final int opc_dup_x1                 = 90;                
            </comment>
            <comment line="192">
                private static final int opc_dup_x2                 = 91;                
            </comment>
            <comment line="193">
                private static final int opc_dup2                   = 92;                
            </comment>
            <comment line="194">
                private static final int opc_dup2_x1                = 93;                
            </comment>
            <comment line="195">
                private static final int opc_dup2_x2                = 94;                
            </comment>
            <comment line="196">
                private static final int opc_swap                   = 95;                
            </comment>
            <comment line="197">
                private static final int opc_iadd                   = 96;                
            </comment>
            <comment line="198">
                private static final int opc_ladd                   = 97;                
            </comment>
            <comment line="199">
                private static final int opc_fadd                   = 98;                
            </comment>
            <comment line="200">
                private static final int opc_dadd                   = 99;                
            </comment>
            <comment line="201">
                private static final int opc_isub                   = 100;                
            </comment>
            <comment line="202">
                private static final int opc_lsub                   = 101;                
            </comment>
            <comment line="203">
                private static final int opc_fsub                   = 102;                
            </comment>
            <comment line="204">
                private static final int opc_dsub                   = 103;                
            </comment>
            <comment line="205">
                private static final int opc_imul                   = 104;                
            </comment>
            <comment line="206">
                private static final int opc_lmul                   = 105;                
            </comment>
            <comment line="207">
                private static final int opc_fmul                   = 106;                
            </comment>
            <comment line="208">
                private static final int opc_dmul                   = 107;                
            </comment>
            <comment line="209">
                private static final int opc_idiv                   = 108;                
            </comment>
            <comment line="210">
                private static final int opc_ldiv                   = 109;                
            </comment>
            <comment line="211">
                private static final int opc_fdiv                   = 110;                
            </comment>
            <comment line="212">
                private static final int opc_ddiv                   = 111;                
            </comment>
            <comment line="213">
                private static final int opc_irem                   = 112;                
            </comment>
            <comment line="214">
                private static final int opc_lrem                   = 113;                
            </comment>
            <comment line="215">
                private static final int opc_frem                   = 114;                
            </comment>
            <comment line="216">
                private static final int opc_drem                   = 115;                
            </comment>
            <comment line="217">
                private static final int opc_ineg                   = 116;                
            </comment>
            <comment line="218">
                private static final int opc_lneg                   = 117;                
            </comment>
            <comment line="219">
                private static final int opc_fneg                   = 118;                
            </comment>
            <comment line="220">
                private static final int opc_dneg                   = 119;                
            </comment>
            <comment line="221">
                private static final int opc_ishl                   = 120;                
            </comment>
            <comment line="222">
                private static final int opc_lshl                   = 121;                
            </comment>
            <comment line="223">
                private static final int opc_ishr                   = 122;                
            </comment>
            <comment line="224">
                private static final int opc_lshr                   = 123;                
            </comment>
            <comment line="225">
                private static final int opc_iushr                  = 124;                
            </comment>
            <comment line="226">
                private static final int opc_lushr                  = 125;                
            </comment>
            <comment line="227">
                private static final int opc_iand                   = 126;                
            </comment>
            <comment line="228">
                private static final int opc_land                   = 127;                
            </comment>
            <comment line="229">
                private static final int opc_ior                    = 128;                
            </comment>
            <comment line="230">
                private static final int opc_lor                    = 129;                
            </comment>
            <comment line="231">
                private static final int opc_ixor                   = 130;                
            </comment>
            <comment line="232">
                private static final int opc_lxor                   = 131;                
            </comment>
            <comment line="233">
                private static final int opc_iinc                   = 132;                
            </comment>
            <comment line="234">
                private static final int opc_i2l                    = 133;                
            </comment>
            <comment line="235">
                private static final int opc_i2f                    = 134;                
            </comment>
            <comment line="236">
                private static final int opc_i2d                    = 135;                
            </comment>
            <comment line="237">
                private static final int opc_l2i                    = 136;                
            </comment>
            <comment line="238">
                private static final int opc_l2f                    = 137;                
            </comment>
            <comment line="239">
                private static final int opc_l2d                    = 138;                
            </comment>
            <comment line="240">
                private static final int opc_f2i                    = 139;                
            </comment>
            <comment line="241">
                private static final int opc_f2l                    = 140;                
            </comment>
            <comment line="242">
                private static final int opc_f2d                    = 141;                
            </comment>
            <comment line="243">
                private static final int opc_d2i                    = 142;                
            </comment>
            <comment line="244">
                private static final int opc_d2l                    = 143;                
            </comment>
            <comment line="245">
                private static final int opc_d2f                    = 144;                
            </comment>
            <comment line="246">
                private static final int opc_i2b                    = 145;                
            </comment>
            <comment line="247">
                private static final int opc_i2c                    = 146;                
            </comment>
            <comment line="248">
                private static final int opc_i2s                    = 147;                
            </comment>
            <comment line="249">
                private static final int opc_lcmp                   = 148;                
            </comment>
            <comment line="250">
                private static final int opc_fcmpl                  = 149;                
            </comment>
            <comment line="251">
                private static final int opc_fcmpg                  = 150;                
            </comment>
            <comment line="252">
                private static final int opc_dcmpl                  = 151;                
            </comment>
            <comment line="253">
                private static final int opc_dcmpg                  = 152;                
            </comment>
            <comment line="254">
                private static final int opc_ifeq                   = 153;                
            </comment>
            <comment line="255">
                private static final int opc_ifne                   = 154;                
            </comment>
            <comment line="256">
                private static final int opc_iflt                   = 155;                
            </comment>
            <comment line="257">
                private static final int opc_ifge                   = 156;                
            </comment>
            <comment line="258">
                private static final int opc_ifgt                   = 157;                
            </comment>
            <comment line="259">
                private static final int opc_ifle                   = 158;                
            </comment>
            <comment line="260">
                private static final int opc_if_icmpeq              = 159;                
            </comment>
            <comment line="261">
                private static final int opc_if_icmpne              = 160;                
            </comment>
            <comment line="262">
                private static final int opc_if_icmplt              = 161;                
            </comment>
            <comment line="263">
                private static final int opc_if_icmpge              = 162;                
            </comment>
            <comment line="264">
                private static final int opc_if_icmpgt              = 163;                
            </comment>
            <comment line="265">
                private static final int opc_if_icmple              = 164;                
            </comment>
            <comment line="266">
                private static final int opc_if_acmpeq              = 165;                
            </comment>
            <comment line="267">
                private static final int opc_if_acmpne              = 166;                
            </comment>
            <comment line="268">
                private static final int opc_goto                   = 167;                
            </comment>
            <comment line="269">
                private static final int opc_jsr                    = 168;                
            </comment>
            <comment line="270">
                private static final int opc_ret                    = 169;                
            </comment>
            <comment line="271">
                private static final int opc_tableswitch            = 170;                
            </comment>
            <comment line="272">
                private static final int opc_lookupswitch           = 171;                
            </comment>
            <comment line="282">
                private static final int opc_putfield               = 181;                
            </comment>
            <comment line="288">
                private static final int opc_newarray               = 188;                
            </comment>
            <comment line="290">
                private static final int opc_arraylength            = 190;                
            </comment>
            <comment line="293">
                private static final int opc_instanceof             = 193;                
            </comment>
            <comment line="294">
                private static final int opc_monitorenter           = 194;                
            </comment>
            <comment line="295">
                private static final int opc_monitorexit            = 195;                
            </comment>
            <comment line="297">
                private static final int opc_multianewarray         = 197;                
            </comment>
            <comment line="298">
                private static final int opc_ifnull                 = 198;                
            </comment>
            <comment line="299">
                private static final int opc_ifnonnull              = 199;                
            </comment>
            <comment line="300">
                private static final int opc_goto_w                 = 200;                
            </comment>
            <comment line="301">
                private static final int opc_jsr_w                  = 201;                
            </comment>
            <comment line="303">
                end of constants copied from sun.tools.java.RuntimeConstants                
            </comment>
            <comment line="347">
                                
            </comment>
            <comment line="1249">
                =============== Code Generation Utility Methods ===============                
            </comment>
            <comment line="1253">
                The following methods generate code for the load or store operation
                 indicated by their name for the given local variable.  The code is
                 written to the supplied stream.                
            </comment>
            <comment line="1289">
                private void code_istore(int lvar, DataOutputStream out)                
            </comment>
            <comment line="1290">
                throws IOException                
            </comment>
            <comment line="1291">
                {                
            </comment>
            <comment line="1292">
                codeLocalLoadStore(lvar, opc_istore, opc_istore_0, out);                
            </comment>
            <comment line="1293">
                }                
            </comment>
            <comment line="1295">
                private void code_lstore(int lvar, DataOutputStream out)                
            </comment>
            <comment line="1296">
                throws IOException                
            </comment>
            <comment line="1297">
                {                
            </comment>
            <comment line="1298">
                codeLocalLoadStore(lvar, opc_lstore, opc_lstore_0, out);                
            </comment>
            <comment line="1299">
                }                
            </comment>
            <comment line="1301">
                private void code_fstore(int lvar, DataOutputStream out)                
            </comment>
            <comment line="1302">
                throws IOException                
            </comment>
            <comment line="1303">
                {                
            </comment>
            <comment line="1304">
                codeLocalLoadStore(lvar, opc_fstore, opc_fstore_0, out);                
            </comment>
            <comment line="1305">
                }                
            </comment>
            <comment line="1307">
                private void code_dstore(int lvar, DataOutputStream out)                
            </comment>
            <comment line="1308">
                throws IOException                
            </comment>
            <comment line="1309">
                {                
            </comment>
            <comment line="1310">
                codeLocalLoadStore(lvar, opc_dstore, opc_dstore_0, out);                
            </comment>
            <comment line="1311">
                }                
            </comment>
            <comment line="1407">
                ==================== General Utility Methods ====================                
            </comment>
            <javadoc line="43">
                ProxyGenerator contains the code to generate a dynamic proxy class
                  for the java.lang.reflect.Proxy API.
                  The external interfaces to ProxyGenerator is the static
                  &quot;generateProxyClass&quot; method.                
                <author>
                    Peter Jones                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="CLASSFILE_MAJOR_VERSION" type="int" line="62"/>
            <declaration name="CLASSFILE_MINOR_VERSION" type="int" line="63"/>
            <declaration name="CONSTANT_UTF8" type="int" line="71"/>
            <declaration name="CONSTANT_UNICODE" type="int" line="72"/>
            <declaration name="CONSTANT_INTEGER" type="int" line="73"/>
            <declaration name="CONSTANT_FLOAT" type="int" line="74"/>
            <declaration name="CONSTANT_LONG" type="int" line="75"/>
            <declaration name="CONSTANT_DOUBLE" type="int" line="76"/>
            <declaration name="CONSTANT_CLASS" type="int" line="77"/>
            <declaration name="CONSTANT_STRING" type="int" line="78"/>
            <declaration name="CONSTANT_FIELD" type="int" line="79"/>
            <declaration name="CONSTANT_METHOD" type="int" line="80"/>
            <declaration name="CONSTANT_INTERFACEMETHOD" type="int" line="81"/>
            <declaration name="CONSTANT_NAMEANDTYPE" type="int" line="82"/>
            <declaration name="ACC_PUBLIC" type="int" line="85"/>
            <declaration name="ACC_PRIVATE" type="int" line="86"/>
            <declaration name="ACC_STATIC" type="int" line="88"/>
            <declaration name="ACC_FINAL" type="int" line="89"/>
            <declaration name="ACC_SUPER" type="int" line="96"/>
            <declaration name="opc_aconst_null" type="int" line="101"/>
            <declaration name="opc_iconst_0" type="int" line="103"/>
            <declaration name="opc_bipush" type="int" line="116"/>
            <declaration name="opc_sipush" type="int" line="117"/>
            <declaration name="opc_ldc" type="int" line="118"/>
            <declaration name="opc_ldc_w" type="int" line="119"/>
            <declaration name="opc_iload" type="int" line="121"/>
            <declaration name="opc_lload" type="int" line="122"/>
            <declaration name="opc_fload" type="int" line="123"/>
            <declaration name="opc_dload" type="int" line="124"/>
            <declaration name="opc_aload" type="int" line="125"/>
            <declaration name="opc_iload_0" type="int" line="126"/>
            <declaration name="opc_lload_0" type="int" line="130"/>
            <declaration name="opc_fload_0" type="int" line="134"/>
            <declaration name="opc_dload_0" type="int" line="138"/>
            <declaration name="opc_aload_0" type="int" line="142"/>
            <declaration name="opc_astore" type="int" line="158"/>
            <declaration name="opc_astore_0" type="int" line="175"/>
            <declaration name="opc_aastore" type="int" line="183"/>
            <declaration name="opc_pop" type="int" line="187"/>
            <declaration name="opc_dup" type="int" line="189"/>
            <declaration name="opc_ireturn" type="int" line="272"/>
            <declaration name="opc_lreturn" type="int" line="273"/>
            <declaration name="opc_freturn" type="int" line="274"/>
            <declaration name="opc_dreturn" type="int" line="275"/>
            <declaration name="opc_areturn" type="int" line="276"/>
            <declaration name="opc_return" type="int" line="277"/>
            <declaration name="opc_getstatic" type="int" line="278"/>
            <declaration name="opc_putstatic" type="int" line="279"/>
            <declaration name="opc_getfield" type="int" line="280"/>
            <declaration name="opc_invokevirtual" type="int" line="282"/>
            <declaration name="opc_invokespecial" type="int" line="283"/>
            <declaration name="opc_invokestatic" type="int" line="284"/>
            <declaration name="opc_invokeinterface" type="int" line="285"/>
            <declaration name="opc_new" type="int" line="286"/>
            <declaration name="opc_anewarray" type="int" line="288"/>
            <declaration name="opc_athrow" type="int" line="290"/>
            <declaration name="opc_checkcast" type="int" line="291"/>
            <declaration name="opc_wide" type="int" line="295"/>
            <declaration name="superclassName" type="String" line="304"/>
            <javadoc line="304">
                name of the superclass of proxy classes                
            </javadoc>
            <declaration name="handlerFieldName" type="String" line="307"/>
            <javadoc line="307">
                name of field for storing a proxy instance&apos;s invocation handler                
            </javadoc>
            <declaration name="saveGeneratedFiles" type="boolean" line="310"/>
            <javadoc line="310">
                debugging flag for saving generated class files                
            </javadoc>
            <javadoc line="316">
                Generate a proxy class given a name and a list of proxy interfaces.                
            </javadoc>
            <method name="generateProxyClass" type="byte[]" line="321">
                <params>
                    <param name="name" type="String"/>
                    <param name="interfaces" type="Class[]"/>
                </params>
                <declaration name="gen" type="ProxyGenerator" line="322"/>
                <declaration name="classFile" type="byte[]" line="323"/>
                <scope line="325">
                    <anonymous_class line="327">
                        <method name="run" type="Void" line="328">
                            <scope line="329">
                                <declaration name="file" type="FileOutputStream" line="330"/>
                            </scope>
                            <scope line="335"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <declaration name="hashCodeMethod" type="Method" line="347"/>
            <declaration name="equalsMethod" type="Method" line="348"/>
            <declaration name="toStringMethod" type="Method" line="349"/>
            <scope line="350">
                <scope line="351"/>
                <scope line="356"/>
            </scope>
            <declaration name="className" type="String" line="361"/>
            <javadoc line="361">
                name of proxy class                
            </javadoc>
            <declaration name="interfaces" type="Class[]" line="364"/>
            <javadoc line="364">
                proxy interfaces                
            </javadoc>
            <declaration name="cp" type="ConstantPool" line="367"/>
            <javadoc line="367">
                constant pool of class being generated                
            </javadoc>
            <declaration name="fields" type="List&lt;FieldInfo&gt;" line="370"/>
            <javadoc line="370">
                FieldInfo struct for each field of generated class                
            </javadoc>
            <declaration name="methods" type="List&lt;MethodInfo&gt;" line="373"/>
            <javadoc line="373">
                MethodInfo struct for each method of generated class                
            </javadoc>
            <declaration name="proxyMethods" type="Map&lt;String,List&lt;ProxyMethod&gt;&gt;" line="376"/>
            <javadoc line="376">
                maps method signature string to list of ProxyMethod objects for
                  proxy methods with that signature                
            </javadoc>
            <declaration name="proxyMethodCount" type="int" line="383"/>
            <javadoc line="383">
                count of ProxyMethod objects added to proxyMethods                
            </javadoc>
            <javadoc line="386">
                Construct a ProxyGenerator to generate a proxy class with the
                  specified name and for the given interfaces.
                  A ProxyGenerator object contains the state for the ongoing
                  generation of a particular proxy class.                
            </javadoc>
            <method name="ProxyGenerator" type="constructor" line="393">
                <params>
                    <param name="className" type="String"/>
                    <param name="interfaces" type="Class[]"/>
                </params>
            </method>
            <javadoc line="398">
                Generate a class file for the proxy class.  This method drives the
                  class file generation process.                
            </javadoc>
            <method name="generateClassFile" type="byte[]" line="402">
                <comment line="404">
                    ============================================================
                     Step 1: Assemble ProxyMethod objects for all methods to
                     generate proxy dispatching code for.                    
                </comment>
                <comment line="409">
                    Record that proxy methods are needed for the hashCode, equals,
                     and toString methods of java.lang.Object.  This is done before
                     the methods from the proxy interfaces so that the methods from
                     java.lang.Object take precedence over duplicate methods in the
                     proxy interfaces.                    
                </comment>
                <comment line="420">
                    Now record all of the methods from the proxy interfaces, giving
                     earlier interfaces precedence over later ones with duplicate
                     methods.                    
                </comment>
                <comment line="432">
                    For each set of proxy methods with the same signature,
                     verify that the methods&apos; return types are compatible.                    
                </comment>
                <comment line="440">
                    ============================================================
                     Step 2: Assemble FieldInfo and MethodInfo structs for all of
                     fields and methods in the class we are generating.                    
                </comment>
                <comment line="450">
                    add static field for method&apos;s Method object                    
                </comment>
                <comment line="455">
                    generate code for proxy method and add it                    
                </comment>
                <comment line="473">
                    ============================================================
                     Step 3: Write the final class file.                    
                </comment>
                <comment line="477">
                    Make sure that constant pool indexes are reserved for the
                     following items before starting to write the final class file.                    
                </comment>
                <comment line="487">
                    Disallow new constant pool additions beyond this point, since
                     we are about to write the final constant pool table.                    
                </comment>
                <comment line="497">
                    Write all the items of the &quot;ClassFile&quot; structure.
                     See JVMS section 4.1.                    
                </comment>
                <comment line="501">
                    u4 magic;                    
                </comment>
                <comment line="503">
                    u2 minor_version;                    
                </comment>
                <comment line="505">
                    u2 major_version;                    
                </comment>
                <comment line="508">
                    (write constant pool)                    
                </comment>
                <comment line="510">
                    u2 access_flags;                    
                </comment>
                <comment line="512">
                    u2 this_class;                    
                </comment>
                <comment line="514">
                    u2 super_class;                    
                </comment>
                <comment line="517">
                    u2 interfaces_count;                    
                </comment>
                <comment line="519">
                    u2 interfaces[interfaces_count];                    
                </comment>
                <comment line="525">
                    u2 fields_count;                    
                </comment>
                <comment line="527">
                    field_info fields[fields_count];                    
                </comment>
                <comment line="532">
                    u2 methods_count;                    
                </comment>
                <comment line="534">
                    method_info methods[methods_count];                    
                </comment>
                <comment line="539">
                    u2 attributes_count;                    
                </comment>
                <comment line="540">
                    (no ClassFile attributes for proxy classes)                    
                </comment>
                <scope line="425">
                    <declaration name="methods" type="Method[]" line="426"/>
                    <scope line="427"/>
                </scope>
                <scope line="436"/>
                <scope line="444">
                    <scope line="447">
                        <scope line="448"/>
                    </scope>
                </scope>
                <scope line="462"/>
                <scope line="466"/>
                <scope line="469"/>
                <scope line="483"/>
                <declaration name="bout" type="ByteArrayOutputStream" line="493"/>
                <declaration name="dout" type="DataOutputStream" line="494"/>
                <scope line="496">
                    <scope line="520"/>
                    <scope line="528"/>
                    <scope line="535"/>
                </scope>
                <scope line="542"/>
            </method>
            <javadoc line="549">
                Add another method to be proxied, either by creating a new
                  ProxyMethod object or augmenting an old one for a duplicate
                  method.
                  &quot;fromClass&quot; indicates the proxy interface that the method was
                  found through, which may be different from (a subinterface of)
                  the method&apos;s &quot;declaring class&quot;.  Note that the first Method
                  object passed for a given name and descriptor identifies the
                  Method object (and thus the declaring class) that will be
                  passed to the invocation handler&apos;s &quot;invoke&quot; method for a given
                  set of duplicate methods.                
            </javadoc>
            <method name="addProxyMethod" type="void" line="562">
                <params>
                    <param name="m" type="Method"/>
                    <param name="fromClass" type="Class"/>
                </params>
                <comment line="573">
                    Found a match: reduce exception types to the
                     greatest set of exceptions that can thrown
                     compatibly with the throws clauses of both
                     overridden methods.                    
                </comment>
                <declaration name="name" type="String" line="563"/>
                <declaration name="parameterTypes" type="Class[]" line="564"/>
                <declaration name="returnType" type="Class" line="565"/>
                <declaration name="exceptionTypes" type="Class[]" line="566"/>
                <declaration name="sig" type="String" line="568"/>
                <declaration name="sigmethods" type="List&lt;ProxyMethod&gt;" line="569"/>
                <scope line="570">
                    <scope line="571">
                        <scope line="572">
                            <declaration name="legalExceptions" type="List&lt;Class&lt;?&gt;&gt;" line="579"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="590"/>
            </method>
            <javadoc line="598">
                For a given set of proxy methods with the same signature, check
                  that their return types are compatible according to the Proxy
                  specification.
                  Specifically, if there is more than one such method, then all
                  of the return types must be reference types, and there must be
                  one return type that is assignable to each of the rest of them.                
            </javadoc>
            <method name="checkReturnTypes" type="void" line="607">
                <params>
                    <param name="methods" type="List<ProxyMethod>"/>
                </params>
                <comment line="608">
                    If there is only one method with a given signature, there
                     cannot be a conflict.  This is the only case in which a
                     primitive (or void) return type is allowed.                    
                </comment>
                <comment line="617">
                    List of return types that are not yet known to be
                     assignable from (&quot;covered&quot; by) any of the others.                    
                </comment>
                <comment line="636">
                    Compare the new return type to the existing uncovered
                     return types.                    
                </comment>
                <comment line="644">
                    If an existing uncovered return type is assignable
                     to this new one, then we can forget the new one.                    
                </comment>
                <comment line="653">
                    If the new return type is assignable to an existing
                     uncovered one, then should replace the existing one
                     with the new one (or just forget the existing one,
                     if the new one has already be put in the list).                    
                </comment>
                <comment line="660">
                    (we can assume that each return type is unique)                    
                </comment>
                <comment line="670">
                    If we got through the list of existing uncovered return
                     types without an assignability relationship, then add
                     the new return type to the list of uncovered ones.                    
                </comment>
                <comment line="680">
                    We shouldn&apos;t end up with more than one return type that is
                     not assignable from any of the others.                    
                </comment>
                <scope line="613"/>
                <declaration name="uncoveredReturnTypes" type="LinkedList&lt;Class&lt;?&gt;&gt;" line="621"/>
                <scope line="624">
                    <declaration name="newReturnType" type="Class&lt;?&gt;" line="625"/>
                    <scope line="626"/>
                    <declaration name="added" type="boolean" line="634"/>
                    <declaration name="liter" type="ListIterator&lt;Class&lt;?&gt;&gt;" line="640"/>
                    <scope line="641">
                        <declaration name="uncoveredReturnType" type="Class&lt;?&gt;" line="642"/>
                        <scope line="648"/>
                        <scope line="659">
                            <scope line="661"/>
                            <scope line="664"/>
                        </scope>
                    </scope>
                    <scope line="675"/>
                </scope>
                <scope line="684">
                    <declaration name="pm" type="ProxyMethod" line="685"/>
                </scope>
            </method>
            <class name="FieldInfo" line="693">
                <javadoc line="693">
                    A FieldInfo object contains information about a particular field
                      in the class being generated.  The class mirrors the data items of
                      the &quot;field_info&quot; structure of the class file format (see JVMS 4.5).                    
                </javadoc>
                <declaration name="accessFlags" type="int" line="699"/>
                <declaration name="name" type="String" line="700"/>
                <declaration name="descriptor" type="String" line="701"/>
                <method name="FieldInfo" type="constructor" line="703">
                    <params>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                        <param name="accessFlags" type="int"/>
                    </params>
                    <comment line="708">
                        Make sure that constant pool indexes are reserved for the
                         following items before starting to write the final class file.                        
                    </comment>
                </method>
                <method name="write" type="void" line="716">
                    <params>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <comment line="717">
                        Write all the items of the &quot;field_info&quot; structure.
                         See JVMS section 4.5.                        
                    </comment>
                    <comment line="721">
                        u2 access_flags;                        
                    </comment>
                    <comment line="723">
                        u2 name_index;                        
                    </comment>
                    <comment line="725">
                        u2 descriptor_index;                        
                    </comment>
                    <comment line="727">
                        u2 attributes_count;                        
                    </comment>
                    <comment line="728">
                        (no field_info attributes for proxy classes)                        
                    </comment>
                </method>
            </class>
            <class name="ExceptionTableEntry" line="732">
                <javadoc line="732">
                    An ExceptionTableEntry object holds values for the data items of
                      an entry in the &quot;exception_table&quot; item of the &quot;Code&quot; attribute of
                      &quot;method_info&quot; structures (see JVMS 4.7.3).                    
                </javadoc>
                <declaration name="startPc" type="short" line="738"/>
                <declaration name="endPc" type="short" line="739"/>
                <declaration name="handlerPc" type="short" line="740"/>
                <declaration name="catchType" type="short" line="741"/>
                <method name="ExceptionTableEntry" type="constructor" line="745">
                    <params>
                        <param name="startPc" type="short"/>
                        <param name="endPc" type="short"/>
                        <param name="handlerPc" type="short"/>
                        <param name="catchType" type="short"/>
                    </params>
                </method>
            </class>
            <class name="MethodInfo" line="753">
                <javadoc line="753">
                    A MethodInfo object contains information about a particular method
                      in the class being generated.  This class mirrors the data items of
                      the &quot;method_info&quot; structure of the class file format (see JVMS 4.6).                    
                </javadoc>
                <declaration name="accessFlags" type="int" line="759"/>
                <declaration name="name" type="String" line="760"/>
                <declaration name="descriptor" type="String" line="761"/>
                <declaration name="maxStack" type="short" line="762"/>
                <declaration name="maxLocals" type="short" line="763"/>
                <declaration name="code" type="ByteArrayOutputStream" line="764"/>
                <declaration name="exceptionTable" type="List&lt;ExceptionTableEntry&gt;" line="765"/>
                <declaration name="declaredExceptions" type="short[]" line="767"/>
                <method name="MethodInfo" type="constructor" line="769">
                    <params>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                        <param name="accessFlags" type="int"/>
                    </params>
                    <comment line="774">
                        Make sure that constant pool indexes are reserved for the
                         following items before starting to write the final class file.                        
                    </comment>
                </method>
                <method name="write" type="void" line="784">
                    <params>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <comment line="785">
                        Write all the items of the &quot;method_info&quot; structure.
                         See JVMS section 4.6.                        
                    </comment>
                    <comment line="789">
                        u2 access_flags;                        
                    </comment>
                    <comment line="791">
                        u2 name_index;                        
                    </comment>
                    <comment line="793">
                        u2 descriptor_index;                        
                    </comment>
                    <comment line="795">
                        u2 attributes_count;                        
                    </comment>
                    <comment line="796">
                        (two method_info attributes:)                        
                    </comment>
                    <comment line="798">
                        Write &quot;Code&quot; attribute. See JVMS section 4.7.3.                        
                    </comment>
                    <comment line="800">
                        u2 attribute_name_index;                        
                    </comment>
                    <comment line="802">
                        u4 attribute_length;                        
                    </comment>
                    <comment line="804">
                        u2 max_stack;                        
                    </comment>
                    <comment line="806">
                        u2 max_locals;                        
                    </comment>
                    <comment line="808">
                        u2 code_length;                        
                    </comment>
                    <comment line="810">
                        u1 code[code_length];                        
                    </comment>
                    <comment line="812">
                        u2 exception_table_length;                        
                    </comment>
                    <comment line="815">
                        u2 start_pc;                        
                    </comment>
                    <comment line="817">
                        u2 end_pc;                        
                    </comment>
                    <comment line="819">
                        u2 handler_pc;                        
                    </comment>
                    <comment line="821">
                        u2 catch_type;                        
                    </comment>
                    <comment line="824">
                        u2 attributes_count;                        
                    </comment>
                    <comment line="827">
                        write &quot;Exceptions&quot; attribute.  See JVMS section 4.7.4.                        
                    </comment>
                    <comment line="829">
                        u2 attribute_name_index;                        
                    </comment>
                    <comment line="831">
                        u4 attributes_length;                        
                    </comment>
                    <comment line="833">
                        u2 number_of_exceptions;                        
                    </comment>
                    <comment line="835">
                        u2 exception_index_table[number_of_exceptions];                        
                    </comment>
                    <scope line="814"/>
                    <scope line="836"/>
                </method>
            </class>
            <class name="ProxyMethod" line="843">
                <javadoc line="843">
                    A ProxyMethod object represents a proxy method in the proxy class
                      being generated: a method whose implementation will encode and
                      dispatch invocations to the proxy instance&apos;s invocation handler.                    
                </javadoc>
                <declaration name="methodName" type="String" line="850"/>
                <declaration name="parameterTypes" type="Class[]" line="851"/>
                <declaration name="returnType" type="Class" line="852"/>
                <declaration name="exceptionTypes" type="Class[]" line="853"/>
                <declaration name="fromClass" type="Class" line="854"/>
                <declaration name="methodFieldName" type="String" line="855"/>
                <method name="ProxyMethod" type="constructor" line="860">
                    <params>
                        <param name="methodName" type="String"/>
                        <param name="parameterTypes" type="Class[]"/>
                        <param name="returnType" type="Class"/>
                        <param name="exceptionTypes" type="Class[]"/>
                        <param name="fromClass" type="Class"/>
                    </params>
                </method>
                <javadoc line="869">
                    Return a MethodInfo object for this method, including generating
                      the code and exception table entry.                    
                </javadoc>
                <method name="generateMethod" type="MethodInfo" line="873">
                    <declaration name="desc" type="String" line="874"/>
                    <declaration name="minfo" type="MethodInfo" line="875"/>
                    <declaration name="parameterSlot" type="int[]" line="878"/>
                    <declaration name="nextSlot" type="int" line="879"/>
                    <scope line="880"/>
                    <declaration name="localSlot0" type="int" line="884"/>
                    <declaration name="pc" type="short" line="885"/>
                    <declaration name="out" type="DataOutputStream" line="887"/>
                    <scope line="903">
                        <scope line="910"/>
                    </scope>
                    <scope line="920"/>
                    <scope line="934"/>
                    <scope line="940"/>
                    <declaration name="catchList" type="List&lt;Class&lt;?&gt;&gt;" line="947"/>
                    <scope line="948">
                        <scope line="950"/>
                    </scope>
                    <scope line="982"/>
                    <scope line="989"/>
                </method>
                <javadoc line="997">
                    Generate code for wrapping an argument of the given type
                      whose value can be found at the specified local variable
                      index, in order for it to be passed (as an Object) to the
                      invocation handler&apos;s &quot;invoke&quot; method.  The code is written
                      to the supplied stream.                    
                </javadoc>
                <method name="codeWrapArgument" type="void" line="1007">
                    <params>
                        <param name="type" type="Class"/>
                        <param name="slot" type="int"/>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <scope line="1008">
                        <declaration name="prim" type="PrimitiveTypeInfo" line="1009"/>
                        <scope line="1016"/>
                        <scope line="1018"/>
                        <scope line="1020"/>
                        <scope line="1022"/>
                        <scope line="1024"/>
                    </scope>
                    <scope line="1033"/>
                </method>
                <javadoc line="1039">
                    Generate code for unwrapping a return value of the given
                      type from the invocation handler&apos;s &quot;invoke&quot; method (as type
                      Object) to its correct type.  The code is written to the
                      supplied stream.                    
                </javadoc>
                <method name="codeUnwrapReturnValue" type="void" line="1047">
                    <params>
                        <param name="type" type="Class"/>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <scope line="1048">
                        <declaration name="prim" type="PrimitiveTypeInfo" line="1049"/>
                        <scope line="1064"/>
                        <scope line="1066"/>
                        <scope line="1068"/>
                        <scope line="1070"/>
                        <scope line="1072"/>
                    </scope>
                    <scope line="1076"/>
                </method>
                <javadoc line="1085">
                    Generate code for initializing the static field that stores
                      the Method object for this proxy method.  The code is written
                      to the supplied stream.                    
                </javadoc>
                <method name="codeFieldInitialization" type="void" line="1092">
                    <params>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <scope line="1102">
                        <scope line="1108">
                            <declaration name="prim" type="PrimitiveTypeInfo" line="1109"/>
                        </scope>
                        <scope line="1116"/>
                    </scope>
                </method>
            </class>
            <javadoc line="1137">
                Generate the constructor method for the proxy class.                
            </javadoc>
            <method name="generateConstructor" type="MethodInfo" line="1140">
                <declaration name="minfo" type="MethodInfo" line="1141"/>
                <declaration name="out" type="DataOutputStream" line="1145"/>
            </method>
            <javadoc line="1165">
                Generate the static initializer method for the proxy class.                
            </javadoc>
            <method name="generateStaticInitializer" type="MethodInfo" line="1168">
                <declaration name="minfo" type="MethodInfo" line="1169"/>
                <declaration name="localSlot0" type="int" line="1172"/>
                <declaration name="pc" type="short" line="1173"/>
                <declaration name="out" type="DataOutputStream" line="1175"/>
                <scope line="1177">
                    <scope line="1178"/>
                </scope>
                <scope line="1236"/>
            </method>
            <method name="code_iload" type="void" line="1260">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_lload" type="void" line="1266">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_fload" type="void" line="1272">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_dload" type="void" line="1278">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_aload" type="void" line="1284">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_astore" type="void" line="1314">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <javadoc line="1318">
                Generate code for a load or store instruction for the given local
                  variable.  The code is written to the supplied stream.
                  &quot;opcode&quot; indicates the opcode form of the desired load or store
                  instruction that takes an explicit local variable index, and
                  &quot;opcode_0&quot; indicates the corresponding form of the instruction
                  with the implicit index 0.                
            </javadoc>
            <method name="codeLocalLoadStore" type="void" line="1330">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="opcode" type="int"/>
                    <param name="opcode_0" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
                <comment line="1338">
                    Use the &quot;wide&quot; instruction modifier for local variable
                     indexes that do not fit into an unsigned byte.                    
                </comment>
                <scope line="1332"/>
                <scope line="1334"/>
                <scope line="1337"/>
            </method>
            <javadoc line="1348">
                Generate code for an &quot;ldc&quot; instruction for the given constant pool
                  index (the &quot;ldc_w&quot; instruction is used if the index does not fit
                  into an unsigned byte).  The code is written to the supplied stream.                
            </javadoc>
            <method name="code_ldc" type="void" line="1355">
                <params>
                    <param name="index" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
                <scope line="1357"/>
                <scope line="1360"/>
            </method>
            <javadoc line="1366">
                Generate code to push a constant integer value on to the operand
                  stack, using the &quot;iconst_&lt;i&gt;&quot;, &quot;bipush&quot;, or &quot;sipush&quot; instructions
                  depending on the size of the value.  The code is written to the
                  supplied stream.                
            </javadoc>
            <method name="code_ipush" type="void" line="1374">
                <params>
                    <param name="value" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
                <scope line="1375"/>
                <scope line="1377"/>
                <scope line="1380"/>
                <scope line="1383"/>
            </method>
            <javadoc line="1388">
                Generate code to invoke the Class.forName with the name of the given
                  class to get its Class object at runtime.  The code is written to
                  the supplied stream.  Note that the code generated by this method
                  may caused the checked ClassNotFoundException to be thrown.                
            </javadoc>
            <method name="codeClassForName" type="void" line="1396">
                <params>
                    <param name="cl" type="Class"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <javadoc line="1410">
                Convert a fully qualified class name that uses &apos;.&apos; as the package
                  separator, the external representation used by the Java language
                  and APIs, to a fully qualified class name that uses &apos;/&apos; as the
                  package separator, the representation used in the class file
                  format (see JVMS section 4.2).                
            </javadoc>
            <method name="dotToSlash" type="String" line="1417">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1421">
                Return the &quot;method descriptor&quot; string for a method with the given
                  parameter types and return type.  See JVMS section 4.3.3.                
            </javadoc>
            <method name="getMethodDescriptor" type="String" line="1427">
                <params>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="returnType" type="Class"/>
                </params>
            </method>
            <javadoc line="1432">
                Return the list of &quot;parameter descriptor&quot; strings enclosed in
                  parentheses corresponding to the given parameter types (in other
                  words, a method descriptor without a return descriptor).  This
                  string is useful for constructing string keys for methods without
                  regard to their return type.                
            </javadoc>
            <method name="getParameterDescriptors" type="String" line="1439">
                <params>
                    <param name="parameterTypes" type="Class[]"/>
                </params>
                <declaration name="desc" type="StringBuilder" line="1440"/>
                <scope line="1441"/>
            </method>
            <javadoc line="1448">
                Return the &quot;field type&quot; string for the given type, appropriate for
                  a field descriptor, a parameter descriptor, or a return descriptor
                  other than &quot;void&quot;.  See JVMS section 4.3.2.                
            </javadoc>
            <method name="getFieldType" type="String" line="1453">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <comment line="1457">
                    According to JLS 20.3.2, the getName() method on Class does
                     return the VM type descriptor format for array classes (only);
                     using that should be quicker than the otherwise obvious code:
                    
                         return &quot;[&quot; + getTypeDescriptor(type.getComponentType());                    
                </comment>
                <scope line="1454"/>
                <scope line="1456"/>
                <scope line="1465"/>
            </method>
            <javadoc line="1470">
                Returns a human-readable string representing the signature of a
                  method with the given name and parameter types.                
            </javadoc>
            <method name="getFriendlyMethodSignature" type="String" line="1476">
                <params>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class[]"/>
                </params>
                <declaration name="sig" type="StringBuilder" line="1477"/>
                <scope line="1479">
                    <scope line="1480"/>
                    <declaration name="parameterType" type="Class" line="1483"/>
                    <declaration name="dimensions" type="int" line="1484"/>
                    <scope line="1485"/>
                    <scope line="1490"/>
                </scope>
            </method>
            <javadoc line="1498">
                Return the number of abstract &quot;words&quot;, or consecutive local variable
                  indexes, required to contain a value of the given type.  See JVMS
                  section 3.6.1.
                  Note that the original version of the JVMS contained a definition of
                  this abstract notion of a &quot;word&quot; in section 3.4, but that definition
                  was removed for the second edition.                
            </javadoc>
            <method name="getWordsPerType" type="int" line="1507">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="1508"/>
                <scope line="1510"/>
            </method>
            <javadoc line="1515">
                Add to the given list all of the types in the &quot;from&quot; array that
                  are not already contained in the list and are assignable to at
                  least one of the types in the &quot;with&quot; array.
                  This method is useful for computing the greatest common set of
                  declared exceptions from duplicate methods inherited from
                  different interfaces.                
            </javadoc>
            <method name="collectCompatibleTypes" type="void" line="1527">
                <params>
                    <param name="from" type="Class<?>[]"/>
                    <param name="with" type="Class<?>[]"/>
                    <param name="list" type="List<Class<?>>"/>
                </params>
                <scope line="1528">
                    <scope line="1529">
                        <scope line="1530">
                            <scope line="1531"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1540">
                Given the exceptions declared in the throws clause of a proxy method,
                  compute the exceptions that need to be caught from the invocation
                  handler&apos;s invoke method and rethrown intact in the method&apos;s
                  implementation before catching other Throwables and wrapping them
                  in UndeclaredThrowableExceptions.
                  The exceptions to be caught are returned in a List object.  Each
                  exception in the returned list is guaranteed to not be a subclass of
                  any of the other exceptions in the list, so the catch blocks for
                  these exceptions may be generated in any order relative to each other.
                  Error and RuntimeException are each always contained by the returned
                  list (if none of their superclasses are contained), since those
                  unchecked exceptions should always be rethrown intact, and thus their
                  subclasses will never appear in the returned list.
                  The returned List will be empty if java.lang.Throwable is in the
                  given list of declared exceptions, indicating that no exceptions
                  need to be caught.                
            </javadoc>
            <method name="computeUniqueCatchList" type="List<Class<?>>" line="1561">
                <params>
                    <param name="exceptions" type="Class<?>[]"/>
                </params>
                <comment line="1563">
                    unique exceptions to catch                    
                </comment>
                <comment line="1565">
                    always catch/rethrow these                    
                </comment>
                <comment line="1572">
                    If Throwable is declared to be thrown by the proxy method,
                     then no catch blocks are necessary, because the invoke
                     can, at most, throw Throwable anyway.                    
                </comment>
                <comment line="1580">
                    Ignore types that cannot be thrown by the invoke method.                    
                </comment>
                <comment line="1585">
                    Compare this exception against the current list of
                     exceptions that need to be caught:                    
                </comment>
                <comment line="1592">
                    if a superclass of this exception is already on
                     the list to catch, then ignore this one and continue;                    
                </comment>
                <comment line="1598">
                    if a subclass of this exception is on the list
                     to catch, then remove it;                    
                </comment>
                <comment line="1604">
                    else continue comparing.                    
                </comment>
                <comment line="1607">
                    This exception is unique (so far): add it to the list to catch.                    
                </comment>
                <declaration name="uniqueList" type="List&lt;Class&lt;?&gt;&gt;" line="1562"/>
                <scope line="1569">
                    <declaration name="ex" type="Class&lt;?&gt;" line="1570"/>
                    <scope line="1571"/>
                    <scope line="1579"/>
                    <scope line="1589">
                        <declaration name="ex2" type="Class&lt;?&gt;" line="1590"/>
                        <scope line="1591"/>
                        <scope line="1597"/>
                        <scope line="1603"/>
                    </scope>
                </scope>
            </method>
            <class name="PrimitiveTypeInfo" line="1613">
                <javadoc line="1613">
                    A PrimitiveTypeInfo object contains assorted information about
                      a primitive type in its public fields.  The struct for a particular
                      primitive type can be obtained using the static &quot;get&quot; method.                    
                </javadoc>
                <declaration name="baseTypeString" type="String" line="1620"/>
                <javadoc line="1620">
                    &quot;base type&quot; used in various descriptors (see JVMS section 4.3.2)                    
                </javadoc>
                <declaration name="wrapperClassName" type="String" line="1623"/>
                <javadoc line="1623">
                    name of corresponding wrapper class                    
                </javadoc>
                <declaration name="wrapperValueOfDesc" type="String" line="1626"/>
                <javadoc line="1626">
                    method descriptor for wrapper class &quot;valueOf&quot; factory method                    
                </javadoc>
                <declaration name="unwrapMethodName" type="String" line="1629"/>
                <javadoc line="1629">
                    name of wrapper class method for retrieving primitive value                    
                </javadoc>
                <declaration name="unwrapMethodDesc" type="String" line="1632"/>
                <javadoc line="1632">
                    descriptor of same method                    
                </javadoc>
                <declaration name="table" type="Map&lt;Class,PrimitiveTypeInfo&gt;" line="1635"/>
                <scope line="1637"/>
                <method name="add" type="void" line="1648">
                    <params>
                        <param name="primitiveClass" type="Class"/>
                        <param name="wrapperClass" type="Class"/>
                    </params>
                </method>
                <method name="PrimitiveTypeInfo" type="constructor" line="1653">
                    <params>
                        <param name="primitiveClass" type="Class"/>
                        <param name="wrapperClass" type="Class"/>
                    </params>
                </method>
                <method name="get" type="PrimitiveTypeInfo" line="1666">
                    <params>
                        <param name="cl" type="Class"/>
                    </params>
                </method>
            </class>
            <class name="ConstantPool" line="1672">
                <javadoc line="1672">
                    A ConstantPool object represents the constant pool of a class file
                      being generated.  This representation of a constant pool is designed
                      specifically for use by ProxyGenerator; in particular, it assumes
                      that constant pool entries will not need to be resorted (for example,
                      by their type, as the Java compiler does), so that the final index
                      value can be assigned and used when an entry is first created.
                      Note that new entries cannot be created after the constant pool has
                      been written to a class file.  To prevent such logic errors, a
                      ConstantPool instance can be marked &quot;read only&quot;, so that further
                      attempts to add new entries will fail with a runtime exception.
                      See JVMS section 4.4 for more information about the constant pool
                      of a class file.                    
                </javadoc>
                <declaration name="pool" type="List&lt;Entry&gt;" line="1690"/>
                <javadoc line="1690">
                    list of constant pool entries, in constant pool index order.
                      This list is used when writing the constant pool to a stream
                      and for assigning the next index value.  Note that element 0
                      of this list corresponds to constant pool index 1.                    
                </javadoc>
                <declaration name="map" type="Map&lt;Object,Short&gt;" line="1699"/>
                <javadoc line="1699">
                    maps constant pool data of all types to constant pool indexes.
                      This map is used to look up the index of an existing entry for
                      values of all types.                    
                </javadoc>
                <declaration name="readOnly" type="boolean" line="1707"/>
                <javadoc line="1707">
                    true if no new constant pool entries may be added                    
                </javadoc>
                <javadoc line="1710">
                    Get or assign the index for a CONSTANT_Utf8 entry.                    
                </javadoc>
                <method name="getUtf8" type="short" line="1713">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <scope line="1714"/>
                </method>
                <javadoc line="1720">
                    Get or assign the index for a CONSTANT_Integer entry.                    
                </javadoc>
                <method name="getInteger" type="short" line="1723">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="1727">
                    Get or assign the index for a CONSTANT_Float entry.                    
                </javadoc>
                <method name="getFloat" type="short" line="1730">
                    <params>
                        <param name="f" type="float"/>
                    </params>
                </method>
                <javadoc line="1734">
                    Get or assign the index for a CONSTANT_Class entry.                    
                </javadoc>
                <method name="getClass" type="short" line="1737">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="utf8Index" type="short" line="1738"/>
                </method>
                <javadoc line="1743">
                    Get or assign the index for a CONSTANT_String entry.                    
                </javadoc>
                <method name="getString" type="short" line="1746">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="utf8Index" type="short" line="1747"/>
                </method>
                <javadoc line="1752">
                    Get or assign the index for a CONSTANT_FieldRef entry.                    
                </javadoc>
                <method name="getFieldRef" type="short" line="1757">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="classIndex" type="short" line="1758"/>
                    <declaration name="nameAndTypeIndex" type="short" line="1759"/>
                </method>
                <javadoc line="1764">
                    Get or assign the index for a CONSTANT_MethodRef entry.                    
                </javadoc>
                <method name="getMethodRef" type="short" line="1769">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="classIndex" type="short" line="1770"/>
                    <declaration name="nameAndTypeIndex" type="short" line="1771"/>
                </method>
                <javadoc line="1776">
                    Get or assign the index for a CONSTANT_InterfaceMethodRef entry.                    
                </javadoc>
                <method name="getInterfaceMethodRef" type="short" line="1781">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="classIndex" type="short" line="1782"/>
                    <declaration name="nameAndTypeIndex" type="short" line="1783"/>
                </method>
                <javadoc line="1788">
                    Get or assign the index for a CONSTANT_NameAndType entry.                    
                </javadoc>
                <method name="getNameAndType" type="short" line="1791">
                    <params>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="nameIndex" type="short" line="1792"/>
                    <declaration name="descriptorIndex" type="short" line="1793"/>
                </method>
                <javadoc line="1798">
                    Set this ConstantPool instance to be &quot;read only&quot;.
                      After this method has been called, further requests to get
                      an index for a non-existent entry will cause an InternalError
                      to be thrown instead of creating of the entry.                    
                </javadoc>
                <method name="setReadOnly" type="void" line="1805"/>
                <javadoc line="1809">
                    Write this constant pool to a stream as part of
                      the class file format.
                      This consists of writing the &quot;constant_pool_count&quot; and
                      &quot;constant_pool[]&quot; items of the &quot;ClassFile&quot; structure, as
                      described in JVMS section 4.1.                    
                </javadoc>
                <method name="write" type="void" line="1817">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <comment line="1820">
                        constant_pool_count: number of entries plus one                        
                    </comment>
                    <declaration name="dataOut" type="DataOutputStream" line="1818"/>
                    <scope line="1823"/>
                </method>
                <javadoc line="1828">
                    Add a new constant pool entry and return its index.                    
                </javadoc>
                <method name="addEntry" type="short" line="1831">
                    <params>
                        <param name="entry" type="Entry"/>
                    </params>
                    <comment line="1833">
                        Note that this way of determining the index of the
                         added entry is wrong if this pool supports
                         CONSTANT_Long or CONSTANT_Double entries.                        
                    </comment>
                    <scope line="1838"/>
                </method>
                <javadoc line="1845">
                    Get or assign the index for an entry of a type that contains
                      a direct value.  The type of the given object determines the
                      type of the desired entry as follows:
                      java.lang.String        CONSTANT_Utf8
                      java.lang.Integer       CONSTANT_Integer
                      java.lang.Float         CONSTANT_Float
                      java.lang.Long          CONSTANT_Long
                      java.lang.Double        CONSTANT_DOUBLE                    
                </javadoc>
                <method name="getValue" type="short" line="1856">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <declaration name="index" type="Short" line="1857"/>
                    <scope line="1858"/>
                    <scope line="1860">
                        <scope line="1861"/>
                        <declaration name="i" type="short" line="1865"/>
                    </scope>
                </method>
                <javadoc line="1871">
                    Get or assign the index for an entry of a type that contains
                      references to other constant pool entries.                    
                </javadoc>
                <method name="getIndirect" type="short" line="1875">
                    <params>
                        <param name="e" type="IndirectEntry"/>
                    </params>
                    <declaration name="index" type="Short" line="1876"/>
                    <scope line="1877"/>
                    <scope line="1879">
                        <scope line="1880"/>
                        <declaration name="i" type="short" line="1883"/>
                    </scope>
                </method>
                <class name="Entry" line="1889">
                    <javadoc line="1889">
                        Entry is the abstact superclass of all constant pool entry types
                          that can be stored in the &quot;pool&quot; list; its purpose is to define a
                          common method for writing constant pool entries to a class file.                        
                    </javadoc>
                    <method name="write" type="void" line="1895"/>
                </class>
                <class name="ValueEntry" line="1899">
                    <extends class="Entry"/>
                    <javadoc line="1899">
                        ValueEntry represents a constant pool entry of a type that
                          contains a direct value (see the comments for the &quot;getValue&quot;
                          method for a list of such types).
                          ValueEntry objects are not used as keys for their entries in the
                          Map &quot;map&quot;, so no useful hashCode or equals methods are defined.                        
                    </javadoc>
                    <declaration name="value" type="Object" line="1908"/>
                    <method name="ValueEntry" type="constructor" line="1910">
                        <params>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="write" type="void" line="1914">
                        <params>
                            <param name="out" type="DataOutputStream"/>
                        </params>
                        <scope line="1915"/>
                        <scope line="1918"/>
                        <scope line="1921"/>
                        <scope line="1924"/>
                        <scope line="1927"/>
                        <scope line="1930"/>
                    </method>
                </class>
                <class name="IndirectEntry" line="1936">
                    <extends class="Entry"/>
                    <javadoc line="1936">
                        IndirectEntry represents a constant pool entry of a type that
                          references other constant pool entries, i.e., the following types:
                          CONSTANT_Class, CONSTANT_String, CONSTANT_Fieldref,
                          CONSTANT_Methodref, CONSTANT_InterfaceMethodref, and
                          CONSTANT_NameAndType.
                          Each of these entry types contains either one or two indexes of
                          other constant pool entries.
                          IndirectEntry objects are used as the keys for their entries in
                          the Map &quot;map&quot;, so the hashCode and equals methods are overridden
                          to allow matching.                        
                    </javadoc>
                    <declaration name="tag" type="int" line="1952"/>
                    <declaration name="index0" type="short" line="1953"/>
                    <declaration name="index1" type="short" line="1954"/>
                    <javadoc line="1956">
                        Construct an IndirectEntry for a constant pool entry type
                          that contains one index of another entry.                        
                    </javadoc>
                    <method name="IndirectEntry" type="constructor" line="1960">
                        <params>
                            <param name="tag" type="int"/>
                            <param name="index" type="short"/>
                        </params>
                    </method>
                    <javadoc line="1966">
                        Construct an IndirectEntry for a constant pool entry type
                          that contains two indexes for other entries.                        
                    </javadoc>
                    <method name="IndirectEntry" type="constructor" line="1970">
                        <params>
                            <param name="tag" type="int"/>
                            <param name="index0" type="short"/>
                            <param name="index1" type="short"/>
                        </params>
                    </method>
                    <method name="write" type="void" line="1976">
                        <params>
                            <param name="out" type="DataOutputStream"/>
                        </params>
                        <comment line="1979">
                            If this entry type contains two indexes, write
                             out the second, too.                            
                        </comment>
                        <scope line="1987"/>
                    </method>
                    <method name="hashCode" type="int" line="1992"/>
                    <method name="equals" type="boolean" line="1996">
                        <params>
                            <param name="obj" type="Object"/>
                        </params>
                        <scope line="1997">
                            <declaration name="other" type="IndirectEntry" line="1998"/>
                            <scope line="2001"/>
                        </scope>
                    </method>
                </class>
            </class>
        </class>
    </source>