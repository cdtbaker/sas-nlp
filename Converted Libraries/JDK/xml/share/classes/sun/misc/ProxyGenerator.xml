<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Map"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="ProxyGenerator" line="16">
            <javadoc line="16">
                ProxyGenerator contains the code to generate a dynamic proxy class
                  for the java.lang.reflect.Proxy API.
                  The external interfaces to ProxyGenerator is the static
                  &quot;generateProxyClass&quot; method.                
                <author>
                    Peter Jones                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="CLASSFILE_MAJOR_VERSION" type="int" line="25"/>
            <declaration name="CLASSFILE_MINOR_VERSION" type="int" line="26"/>
            <declaration name="CONSTANT_UTF8" type="int" line="27"/>
            <declaration name="CONSTANT_UNICODE" type="int" line="28"/>
            <declaration name="CONSTANT_INTEGER" type="int" line="29"/>
            <declaration name="CONSTANT_FLOAT" type="int" line="30"/>
            <declaration name="CONSTANT_LONG" type="int" line="31"/>
            <declaration name="CONSTANT_DOUBLE" type="int" line="32"/>
            <declaration name="CONSTANT_CLASS" type="int" line="33"/>
            <declaration name="CONSTANT_STRING" type="int" line="34"/>
            <declaration name="CONSTANT_FIELD" type="int" line="35"/>
            <declaration name="CONSTANT_METHOD" type="int" line="36"/>
            <declaration name="CONSTANT_INTERFACEMETHOD" type="int" line="37"/>
            <declaration name="CONSTANT_NAMEANDTYPE" type="int" line="38"/>
            <declaration name="ACC_PUBLIC" type="int" line="39"/>
            <declaration name="ACC_PRIVATE" type="int" line="40"/>
            <declaration name="ACC_STATIC" type="int" line="41"/>
            <declaration name="ACC_FINAL" type="int" line="42"/>
            <declaration name="ACC_SUPER" type="int" line="43"/>
            <declaration name="opc_aconst_null" type="int" line="44"/>
            <declaration name="opc_iconst_0" type="int" line="45"/>
            <declaration name="opc_bipush" type="int" line="46"/>
            <declaration name="opc_sipush" type="int" line="47"/>
            <declaration name="opc_ldc" type="int" line="48"/>
            <declaration name="opc_ldc_w" type="int" line="49"/>
            <declaration name="opc_iload" type="int" line="50"/>
            <declaration name="opc_lload" type="int" line="51"/>
            <declaration name="opc_fload" type="int" line="52"/>
            <declaration name="opc_dload" type="int" line="53"/>
            <declaration name="opc_aload" type="int" line="54"/>
            <declaration name="opc_iload_0" type="int" line="55"/>
            <declaration name="opc_lload_0" type="int" line="56"/>
            <declaration name="opc_fload_0" type="int" line="57"/>
            <declaration name="opc_dload_0" type="int" line="58"/>
            <declaration name="opc_aload_0" type="int" line="59"/>
            <declaration name="opc_astore" type="int" line="60"/>
            <declaration name="opc_astore_0" type="int" line="61"/>
            <declaration name="opc_aastore" type="int" line="62"/>
            <declaration name="opc_pop" type="int" line="63"/>
            <declaration name="opc_dup" type="int" line="64"/>
            <declaration name="opc_ireturn" type="int" line="65"/>
            <declaration name="opc_lreturn" type="int" line="66"/>
            <declaration name="opc_freturn" type="int" line="67"/>
            <declaration name="opc_dreturn" type="int" line="68"/>
            <declaration name="opc_areturn" type="int" line="69"/>
            <declaration name="opc_return" type="int" line="70"/>
            <declaration name="opc_getstatic" type="int" line="71"/>
            <declaration name="opc_putstatic" type="int" line="72"/>
            <declaration name="opc_getfield" type="int" line="73"/>
            <declaration name="opc_invokevirtual" type="int" line="74"/>
            <declaration name="opc_invokespecial" type="int" line="75"/>
            <declaration name="opc_invokestatic" type="int" line="76"/>
            <declaration name="opc_invokeinterface" type="int" line="77"/>
            <declaration name="opc_new" type="int" line="78"/>
            <declaration name="opc_anewarray" type="int" line="79"/>
            <declaration name="opc_athrow" type="int" line="80"/>
            <declaration name="opc_checkcast" type="int" line="81"/>
            <declaration name="opc_wide" type="int" line="82"/>
            <declaration name="superclassName" type="String" line="83"/>
            <javadoc line="83">
                name of the superclass of proxy classes                
            </javadoc>
            <declaration name="handlerFieldName" type="String" line="87"/>
            <javadoc line="87">
                name of field for storing a proxy instance&apos;s invocation handler                
            </javadoc>
            <declaration name="saveGeneratedFiles" type="boolean" line="91"/>
            <javadoc line="91">
                debugging flag for saving generated class files                
            </javadoc>
            <javadoc line="95">
                Generate a proxy class given a name and a list of proxy interfaces.                
            </javadoc>
            <method name="generateProxyClass" type="byte[]" line="98">
                <params>
                    <param name="name" type="String"/>
                    <param name="interfaces" type="Class[]"/>
                </params>
                <declaration name="gen" type="ProxyGenerator" line="99"/>
                <declaration name="classFile" type="byte[]" line="100"/>
                <scope line="101">
                    <anonymous_class line="102">
                        <method name="run" type="Void" line="103">
                            <scope line="104">
                                <declaration name="file" type="FileOutputStream" line="105"/>
                            </scope>
                            <scope line="110"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <declaration name="hashCodeMethod" type="Method" line="119"/>
            <declaration name="equalsMethod" type="Method" line="120"/>
            <declaration name="toStringMethod" type="Method" line="121"/>
            <scope line="122">
                <scope line="123"/>
                <scope line="128"/>
            </scope>
            <declaration name="className" type="String" line="132"/>
            <javadoc line="132">
                name of proxy class                
            </javadoc>
            <declaration name="interfaces" type="Class[]" line="136"/>
            <javadoc line="136">
                proxy interfaces                
            </javadoc>
            <declaration name="cp" type="ConstantPool" line="140"/>
            <javadoc line="140">
                constant pool of class being generated                
            </javadoc>
            <declaration name="fields" type="List&lt;FieldInfo&gt;" line="144"/>
            <javadoc line="144">
                FieldInfo struct for each field of generated class                
            </javadoc>
            <declaration name="methods" type="List&lt;MethodInfo&gt;" line="148"/>
            <javadoc line="148">
                MethodInfo struct for each method of generated class                
            </javadoc>
            <declaration name="proxyMethods" type="Map&lt;String,List&lt;ProxyMethod&gt;&gt;" line="152"/>
            <javadoc line="152">
                maps method signature string to list of ProxyMethod objects for
                  proxy methods with that signature                
            </javadoc>
            <declaration name="proxyMethodCount" type="int" line="157"/>
            <javadoc line="157">
                count of ProxyMethod objects added to proxyMethods                
            </javadoc>
            <javadoc line="161">
                Construct a ProxyGenerator to generate a proxy class with the
                  specified name and for the given interfaces.
                  A ProxyGenerator object contains the state for the ongoing
                  generation of a particular proxy class.                
            </javadoc>
            <method name="ProxyGenerator" type="constructor" line="167">
                <params>
                    <param name="className" type="String"/>
                    <param name="interfaces" type="Class[]"/>
                </params>
            </method>
            <javadoc line="171">
                Generate a class file for the proxy class.  This method drives the
                  class file generation process.                
            </javadoc>
            <method name="generateClassFile" type="byte[]" line="175">
                <scope line="179">
                    <declaration name="methods" type="Method[]" line="180"/>
                    <scope line="181"/>
                </scope>
                <scope line="185"/>
                <scope line="188">
                    <scope line="190">
                        <scope line="191"/>
                    </scope>
                </scope>
                <scope line="198"/>
                <scope line="201"/>
                <scope line="204"/>
                <scope line="209"/>
                <declaration name="bout" type="ByteArrayOutputStream" line="213"/>
                <declaration name="dout" type="DataOutputStream" line="214"/>
                <scope line="215">
                    <scope line="224"/>
                    <scope line="228"/>
                    <scope line="232"/>
                </scope>
                <scope line="237"/>
            </method>
            <javadoc line="242">
                Add another method to be proxied, either by creating a new
                  ProxyMethod object or augmenting an old one for a duplicate
                  method.
                  &quot;fromClass&quot; indicates the proxy interface that the method was
                  found through, which may be different from (a subinterface of)
                  the method&apos;s &quot;declaring class&quot;.  Note that the first Method
                  object passed for a given name and descriptor identifies the
                  Method object (and thus the declaring class) that will be
                  passed to the invocation handler&apos;s &quot;invoke&quot; method for a given
                  set of duplicate methods.                
            </javadoc>
            <method name="addProxyMethod" type="void" line="254">
                <params>
                    <param name="m" type="Method"/>
                    <param name="fromClass" type="Class"/>
                </params>
                <declaration name="name" type="String" line="255"/>
                <declaration name="parameterTypes" type="Class[]" line="256"/>
                <declaration name="returnType" type="Class" line="257"/>
                <declaration name="exceptionTypes" type="Class[]" line="258"/>
                <declaration name="sig" type="String" line="259"/>
                <declaration name="sigmethods" type="List&lt;ProxyMethod&gt;" line="260"/>
                <scope line="261">
                    <scope line="262">
                        <scope line="263">
                            <declaration name="legalExceptions" type="List&lt;Class&lt;?&gt;&gt;" line="264"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="273"/>
            </method>
            <javadoc line="279">
                For a given set of proxy methods with the same signature, check
                  that their return types are compatible according to the Proxy
                  specification.
                  Specifically, if there is more than one such method, then all
                  of the return types must be reference types, and there must be
                  one return type that is assignable to each of the rest of them.                
            </javadoc>
            <method name="checkReturnTypes" type="void" line="287">
                <params>
                    <param name="methods" type="List<ProxyMethod>"/>
                </params>
            </method>
            <class name="FieldInfo" line="324">
                <javadoc line="324">
                    A FieldInfo object contains information about a particular field
                      in the class being generated.  The class mirrors the data items of
                      the &quot;field_info&quot; structure of the class file format (see JVMS 4.5).                    
                </javadoc>
                <declaration name="accessFlags" type="int" line="330"/>
                <declaration name="name" type="String" line="331"/>
                <declaration name="descriptor" type="String" line="332"/>
                <method name="FieldInfo" type="constructor" line="333">
                    <params>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                        <param name="accessFlags" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="340">
                    <params>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                </method>
            </class>
            <class name="ExceptionTableEntry" line="347">
                <javadoc line="347">
                    An ExceptionTableEntry object holds values for the data items of
                      an entry in the &quot;exception_table&quot; item of the &quot;Code&quot; attribute of
                      &quot;method_info&quot; structures (see JVMS 4.7.3).                    
                </javadoc>
                <declaration name="startPc" type="short" line="353"/>
                <declaration name="endPc" type="short" line="354"/>
                <declaration name="handlerPc" type="short" line="355"/>
                <declaration name="catchType" type="short" line="356"/>
                <method name="ExceptionTableEntry" type="constructor" line="357">
                    <params>
                        <param name="startPc" type="short"/>
                        <param name="endPc" type="short"/>
                        <param name="handlerPc" type="short"/>
                        <param name="catchType" type="short"/>
                    </params>
                </method>
            </class>
            <class name="MethodInfo" line="364">
                <javadoc line="364">
                    A MethodInfo object contains information about a particular method
                      in the class being generated.  This class mirrors the data items of
                      the &quot;method_info&quot; structure of the class file format (see JVMS 4.6).                    
                </javadoc>
                <declaration name="accessFlags" type="int" line="370"/>
                <declaration name="name" type="String" line="371"/>
                <declaration name="descriptor" type="String" line="372"/>
                <declaration name="maxStack" type="short" line="373"/>
                <declaration name="maxLocals" type="short" line="374"/>
                <declaration name="code" type="ByteArrayOutputStream" line="375"/>
                <declaration name="exceptionTable" type="List&lt;ExceptionTableEntry&gt;" line="376"/>
                <declaration name="declaredExceptions" type="short[]" line="377"/>
                <method name="MethodInfo" type="constructor" line="378">
                    <params>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                        <param name="accessFlags" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="387">
                    <params>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <scope line="399"/>
                    <scope line="409"/>
                </method>
            </class>
            <class name="ProxyMethod" line="414">
                <javadoc line="414">
                    A ProxyMethod object represents a proxy method in the proxy class
                      being generated: a method whose implementation will encode and
                      dispatch invocations to the proxy instance&apos;s invocation handler.                    
                </javadoc>
                <declaration name="methodName" type="String" line="420"/>
                <declaration name="parameterTypes" type="Class[]" line="421"/>
                <declaration name="returnType" type="Class" line="422"/>
                <declaration name="exceptionTypes" type="Class[]" line="423"/>
                <declaration name="fromClass" type="Class" line="424"/>
                <declaration name="methodFieldName" type="String" line="425"/>
                <method name="ProxyMethod" type="constructor" line="426">
                    <params>
                        <param name="methodName" type="String"/>
                        <param name="parameterTypes" type="Class[]"/>
                        <param name="returnType" type="Class"/>
                        <param name="exceptionTypes" type="Class[]"/>
                        <param name="fromClass" type="Class"/>
                    </params>
                </method>
                <javadoc line="434">
                    Return a MethodInfo object for this method, including generating
                      the code and exception table entry.                    
                </javadoc>
                <method name="generateMethod" type="MethodInfo" line="438">
                    <declaration name="desc" type="String" line="439"/>
                    <declaration name="minfo" type="MethodInfo" line="440"/>
                    <declaration name="parameterSlot" type="int[]" line="441"/>
                    <declaration name="nextSlot" type="int" line="442"/>
                    <scope line="443"/>
                    <declaration name="localSlot0" type="int" line="447"/>
                    <declaration name="pc" type="short" line="448"/>
                    <declaration name="out" type="DataOutputStream" line="449"/>
                    <scope line="456">
                        <scope line="460"/>
                    </scope>
                    <scope line="467"/>
                    <scope line="474"/>
                    <scope line="478"/>
                    <declaration name="catchList" type="List&lt;Class&lt;?&gt;&gt;" line="482"/>
                    <scope line="483">
                        <scope line="484"/>
                    </scope>
                    <scope line="499"/>
                    <scope line="505"/>
                </method>
                <javadoc line="510">
                    Generate code for wrapping an argument of the given type
                      whose value can be found at the specified local variable
                      index, in order for it to be passed (as an Object) to the
                      invocation handler&apos;s &quot;invoke&quot; method.  The code is written
                      to the supplied stream.                    
                </javadoc>
                <method name="codeWrapArgument" type="void" line="517">
                    <params>
                        <param name="type" type="Class"/>
                        <param name="slot" type="int"/>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <scope line="518">
                        <declaration name="prim" type="PrimitiveTypeInfo" line="519"/>
                        <scope line="520"/>
                        <scope line="523"/>
                        <scope line="526"/>
                        <scope line="529"/>
                        <scope line="532"/>
                    </scope>
                    <scope line="538"/>
                </method>
                <javadoc line="542">
                    Generate code for unwrapping a return value of the given
                      type from the invocation handler&apos;s &quot;invoke&quot; method (as type
                      Object) to its correct type.  The code is written to the
                      supplied stream.                    
                </javadoc>
                <method name="codeUnwrapReturnValue" type="void" line="548">
                    <params>
                        <param name="type" type="Class"/>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <scope line="549">
                        <declaration name="prim" type="PrimitiveTypeInfo" line="550"/>
                        <scope line="555"/>
                        <scope line="558"/>
                        <scope line="561"/>
                        <scope line="564"/>
                        <scope line="567"/>
                    </scope>
                    <scope line="571"/>
                </method>
                <javadoc line="577">
                    Generate code for initializing the static field that stores
                      the Method object for this proxy method.  The code is written
                      to the supplied stream.                    
                </javadoc>
                <method name="codeFieldInitialization" type="void" line="582">
                    <params>
                        <param name="out" type="DataOutputStream"/>
                    </params>
                    <scope line="588">
                        <scope line="591">
                            <declaration name="prim" type="PrimitiveTypeInfo" line="592"/>
                        </scope>
                        <scope line="596"/>
                    </scope>
                </method>
            </class>
            <javadoc line="607">
                Generate the constructor method for the proxy class.                
            </javadoc>
            <method name="generateConstructor" type="MethodInfo" line="610">
                <declaration name="minfo" type="MethodInfo" line="611"/>
                <declaration name="out" type="DataOutputStream" line="612"/>
            </method>
            <javadoc line="623">
                Generate the static initializer method for the proxy class.                
            </javadoc>
            <method name="generateStaticInitializer" type="MethodInfo" line="626">
                <declaration name="minfo" type="MethodInfo" line="627"/>
                <declaration name="localSlot0" type="int" line="628"/>
                <declaration name="pc" type="short" line="629"/>
                <declaration name="out" type="DataOutputStream" line="630"/>
                <scope line="631">
                    <scope line="632"/>
                </scope>
                <scope line="661"/>
            </method>
            <method name="code_iload" type="void" line="669">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_lload" type="void" line="672">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_fload" type="void" line="675">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_dload" type="void" line="678">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_aload" type="void" line="681">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <method name="code_astore" type="void" line="684">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <javadoc line="687">
                Generate code for a load or store instruction for the given local
                  variable.  The code is written to the supplied stream.
                  &quot;opcode&quot; indicates the opcode form of the desired load or store
                  instruction that takes an explicit local variable index, and
                  &quot;opcode_0&quot; indicates the corresponding form of the instruction
                  with the implicit index 0.                
            </javadoc>
            <method name="codeLocalLoadStore" type="void" line="695">
                <params>
                    <param name="lvar" type="int"/>
                    <param name="opcode" type="int"/>
                    <param name="opcode_0" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <javadoc line="710">
                Generate code for an &quot;ldc&quot; instruction for the given constant pool
                  index (the &quot;ldc_w&quot; instruction is used if the index does not fit
                  into an unsigned byte).  The code is written to the supplied stream.                
            </javadoc>
            <method name="code_ldc" type="void" line="715">
                <params>
                    <param name="index" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <javadoc line="726">
                Generate code to push a constant integer value on to the operand
                  stack, using the &quot;iconst_&lt;i&gt;&quot;, &quot;bipush&quot;, or &quot;sipush&quot; instructions
                  depending on the size of the value.  The code is written to the
                  supplied stream.                
            </javadoc>
            <method name="code_ipush" type="void" line="732">
                <params>
                    <param name="value" type="int"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
                <scope line="733"/>
                <scope line="736"/>
                <scope line="740"/>
                <scope line="744"/>
            </method>
            <javadoc line="748">
                Generate code to invoke the Class.forName with the name of the given
                  class to get its Class object at runtime.  The code is written to
                  the supplied stream.  Note that the code generated by this method
                  may caused the checked ClassNotFoundException to be thrown.                
            </javadoc>
            <method name="codeClassForName" type="void" line="754">
                <params>
                    <param name="cl" type="Class"/>
                    <param name="out" type="DataOutputStream"/>
                </params>
            </method>
            <javadoc line="759">
                Convert a fully qualified class name that uses &apos;.&apos; as the package
                  separator, the external representation used by the Java language
                  and APIs, to a fully qualified class name that uses &apos;/&apos; as the
                  package separator, the representation used in the class file
                  format (see JVMS section 4.2).                
            </javadoc>
            <method name="dotToSlash" type="String" line="766">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="769">
                Return the &quot;method descriptor&quot; string for a method with the given
                  parameter types and return type.  See JVMS section 4.3.3.                
            </javadoc>
            <method name="getMethodDescriptor" type="String" line="773">
                <params>
                    <param name="parameterTypes" type="Class[]"/>
                    <param name="returnType" type="Class"/>
                </params>
            </method>
            <javadoc line="776">
                Return the list of &quot;parameter descriptor&quot; strings enclosed in
                  parentheses corresponding to the given parameter types (in other
                  words, a method descriptor without a return descriptor).  This
                  string is useful for constructing string keys for methods without
                  regard to their return type.                
            </javadoc>
            <method name="getParameterDescriptors" type="String" line="783">
                <params>
                    <param name="parameterTypes" type="Class[]"/>
                </params>
                <declaration name="desc" type="StringBuilder" line="784"/>
                <scope line="785"/>
            </method>
            <javadoc line="791">
                Return the &quot;field type&quot; string for the given type, appropriate for
                  a field descriptor, a parameter descriptor, or a return descriptor
                  other than &quot;void&quot;.  See JVMS section 4.3.2.                
            </javadoc>
            <method name="getFieldType" type="String" line="796">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="797"/>
                <scope line="800"/>
                <scope line="803"/>
            </method>
            <javadoc line="807">
                Returns a human-readable string representing the signature of a
                  method with the given name and parameter types.                
            </javadoc>
            <method name="getFriendlyMethodSignature" type="String" line="811">
                <params>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class[]"/>
                </params>
                <declaration name="sig" type="StringBuilder" line="812"/>
                <scope line="814">
                    <scope line="815"/>
                    <declaration name="parameterType" type="Class" line="818"/>
                    <declaration name="dimensions" type="int" line="819"/>
                    <scope line="820"/>
                    <scope line="825"/>
                </scope>
            </method>
            <javadoc line="832">
                Return the number of abstract &quot;words&quot;, or consecutive local variable
                  indexes, required to contain a value of the given type.  See JVMS
                  section 3.6.1.
                  Note that the original version of the JVMS contained a definition of
                  this abstract notion of a &quot;word&quot; in section 3.4, but that definition
                  was removed for the second edition.                
            </javadoc>
            <method name="getWordsPerType" type="int" line="840">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <scope line="841"/>
                <scope line="844"/>
            </method>
            <javadoc line="848">
                Add to the given list all of the types in the &quot;from&quot; array that
                  are not already contained in the list and are assignable to at
                  least one of the types in the &quot;with&quot; array.
                  This method is useful for computing the greatest common set of
                  declared exceptions from duplicate methods inherited from
                  different interfaces.                
            </javadoc>
            <method name="collectCompatibleTypes" type="void" line="856">
                <params>
                    <param name="from" type="Class<?>[]"/>
                    <param name="with" type="Class<?>[]"/>
                    <param name="list" type="List<Class<?>>"/>
                </params>
                <scope line="857">
                    <scope line="858">
                        <scope line="859">
                            <scope line="860"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="868">
                Given the exceptions declared in the throws clause of a proxy method,
                  compute the exceptions that need to be caught from the invocation
                  handler&apos;s invoke method and rethrown intact in the method&apos;s
                  implementation before catching other Throwables and wrapping them
                  in UndeclaredThrowableExceptions.
                  The exceptions to be caught are returned in a List object.  Each
                  exception in the returned list is guaranteed to not be a subclass of
                  any of the other exceptions in the list, so the catch blocks for
                  these exceptions may be generated in any order relative to each other.
                  Error and RuntimeException are each always contained by the returned
                  list (if none of their superclasses are contained), since those
                  unchecked exceptions should always be rethrown intact, and thus their
                  subclasses will never appear in the returned list.
                  The returned List will be empty if java.lang.Throwable is in the
                  given list of declared exceptions, indicating that no exceptions
                  need to be caught.                
            </javadoc>
            <method name="computeUniqueCatchList" type="List<Class<?>>" line="886">
                <params>
                    <param name="exceptions" type="Class<?>[]"/>
                </params>
                <declaration name="uniqueList" type="List&lt;Class&lt;?&gt;&gt;" line="887"/>
                <scope line="890">
                    <declaration name="ex" type="Class&lt;?&gt;" line="891"/>
                    <scope line="892"/>
                    <scope line="896"/>
                    <scope line="899">
                        <declaration name="ex2" type="Class&lt;?&gt;" line="900"/>
                        <scope line="901"/>
                        <scope line="904"/>
                        <scope line="907"/>
                    </scope>
                </scope>
            </method>
            <class name="PrimitiveTypeInfo" line="915">
                <javadoc line="915">
                    A PrimitiveTypeInfo object contains assorted information about
                      a primitive type in its public fields.  The struct for a particular
                      primitive type can be obtained using the static &quot;get&quot; method.                    
                </javadoc>
                <declaration name="baseTypeString" type="String" line="921"/>
                <javadoc line="921">
                    &quot;base type&quot; used in various descriptors (see JVMS section 4.3.2)                    
                </javadoc>
                <declaration name="wrapperClassName" type="String" line="925"/>
                <javadoc line="925">
                    name of corresponding wrapper class                    
                </javadoc>
                <declaration name="wrapperValueOfDesc" type="String" line="929"/>
                <javadoc line="929">
                    method descriptor for wrapper class &quot;valueOf&quot; factory method                    
                </javadoc>
                <declaration name="unwrapMethodName" type="String" line="933"/>
                <javadoc line="933">
                    name of wrapper class method for retrieving primitive value                    
                </javadoc>
                <declaration name="unwrapMethodDesc" type="String" line="937"/>
                <javadoc line="937">
                    descriptor of same method                    
                </javadoc>
                <declaration name="table" type="Map&lt;Class,PrimitiveTypeInfo&gt;" line="941"/>
                <scope line="942"/>
                <method name="add" type="void" line="952">
                    <params>
                        <param name="primitiveClass" type="Class"/>
                        <param name="wrapperClass" type="Class"/>
                    </params>
                </method>
                <method name="PrimitiveTypeInfo" type="constructor" line="955">
                    <params>
                        <param name="primitiveClass" type="Class"/>
                        <param name="wrapperClass" type="Class"/>
                    </params>
                </method>
                <method name="get" type="PrimitiveTypeInfo" line="963">
                    <params>
                        <param name="cl" type="Class"/>
                    </params>
                </method>
            </class>
            <class name="ConstantPool" line="967">
                <javadoc line="967">
                    A ConstantPool object represents the constant pool of a class file
                      being generated.  This representation of a constant pool is designed
                      specifically for use by ProxyGenerator; in particular, it assumes
                      that constant pool entries will not need to be resorted (for example,
                      by their type, as the Java compiler does), so that the final index
                      value can be assigned and used when an entry is first created.
                      Note that new entries cannot be created after the constant pool has
                      been written to a class file.  To prevent such logic errors, a
                      ConstantPool instance can be marked &quot;read only&quot;, so that further
                      attempts to add new entries will fail with a runtime exception.
                      See JVMS section 4.4 for more information about the constant pool
                      of a class file.                    
                </javadoc>
                <declaration name="pool" type="List&lt;Entry&gt;" line="982"/>
                <javadoc line="982">
                    list of constant pool entries, in constant pool index order.
                      This list is used when writing the constant pool to a stream
                      and for assigning the next index value.  Note that element 0
                      of this list corresponds to constant pool index 1.                    
                </javadoc>
                <declaration name="map" type="Map&lt;Object,Short&gt;" line="989"/>
                <javadoc line="989">
                    maps constant pool data of all types to constant pool indexes.
                      This map is used to look up the index of an existing entry for
                      values of all types.                    
                </javadoc>
                <declaration name="readOnly" type="boolean" line="995"/>
                <javadoc line="995">
                    true if no new constant pool entries may be added                    
                </javadoc>
                <javadoc line="999">
                    Get or assign the index for a CONSTANT_Utf8 entry.                    
                </javadoc>
                <method name="getUtf8" type="short" line="1002">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <scope line="1003"/>
                </method>
                <javadoc line="1008">
                    Get or assign the index for a CONSTANT_Integer entry.                    
                </javadoc>
                <method name="getInteger" type="short" line="1011">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="1014">
                    Get or assign the index for a CONSTANT_Float entry.                    
                </javadoc>
                <method name="getFloat" type="short" line="1017">
                    <params>
                        <param name="f" type="float"/>
                    </params>
                </method>
                <javadoc line="1020">
                    Get or assign the index for a CONSTANT_Class entry.                    
                </javadoc>
                <method name="getClass" type="short" line="1023">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="utf8Index" type="short" line="1024"/>
                </method>
                <javadoc line="1027">
                    Get or assign the index for a CONSTANT_String entry.                    
                </javadoc>
                <method name="getString" type="short" line="1030">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="utf8Index" type="short" line="1031"/>
                </method>
                <javadoc line="1034">
                    Get or assign the index for a CONSTANT_FieldRef entry.                    
                </javadoc>
                <method name="getFieldRef" type="short" line="1037">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="classIndex" type="short" line="1038"/>
                    <declaration name="nameAndTypeIndex" type="short" line="1039"/>
                </method>
                <javadoc line="1042">
                    Get or assign the index for a CONSTANT_MethodRef entry.                    
                </javadoc>
                <method name="getMethodRef" type="short" line="1045">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="classIndex" type="short" line="1046"/>
                    <declaration name="nameAndTypeIndex" type="short" line="1047"/>
                </method>
                <javadoc line="1050">
                    Get or assign the index for a CONSTANT_InterfaceMethodRef entry.                    
                </javadoc>
                <method name="getInterfaceMethodRef" type="short" line="1053">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="classIndex" type="short" line="1054"/>
                    <declaration name="nameAndTypeIndex" type="short" line="1055"/>
                </method>
                <javadoc line="1058">
                    Get or assign the index for a CONSTANT_NameAndType entry.                    
                </javadoc>
                <method name="getNameAndType" type="short" line="1061">
                    <params>
                        <param name="name" type="String"/>
                        <param name="descriptor" type="String"/>
                    </params>
                    <declaration name="nameIndex" type="short" line="1062"/>
                    <declaration name="descriptorIndex" type="short" line="1063"/>
                </method>
                <javadoc line="1066">
                    Set this ConstantPool instance to be &quot;read only&quot;.
                      After this method has been called, further requests to get
                      an index for a non-existent entry will cause an InternalError
                      to be thrown instead of creating of the entry.                    
                </javadoc>
                <method name="setReadOnly" type="void" line="1072"/>
                <javadoc line="1075">
                    Write this constant pool to a stream as part of
                      the class file format.
                      This consists of writing the &quot;constant_pool_count&quot; and
                      &quot;constant_pool[]&quot; items of the &quot;ClassFile&quot; structure, as
                      described in JVMS section 4.1.                    
                </javadoc>
                <method name="write" type="void" line="1082">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <declaration name="dataOut" type="DataOutputStream" line="1083"/>
                    <scope line="1085"/>
                </method>
                <javadoc line="1089">
                    Add a new constant pool entry and return its index.                    
                </javadoc>
                <method name="addEntry" type="short" line="1092">
                    <params>
                        <param name="entry" type="Entry"/>
                    </params>
                    <scope line="1094"/>
                </method>
                <javadoc line="1099">
                    Get or assign the index for an entry of a type that contains
                      a direct value.  The type of the given object determines the
                      type of the desired entry as follows:
                      java.lang.String        CONSTANT_Utf8
                      java.lang.Integer       CONSTANT_Integer
                      java.lang.Float         CONSTANT_Float
                      java.lang.Long          CONSTANT_Long
                      java.lang.Double        CONSTANT_DOUBLE                    
                </javadoc>
                <method name="getValue" type="short" line="1109">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <declaration name="index" type="Short" line="1110"/>
                    <scope line="1111"/>
                    <scope line="1114">
                        <scope line="1115"/>
                        <declaration name="i" type="short" line="1118"/>
                    </scope>
                </method>
                <javadoc line="1123">
                    Get or assign the index for an entry of a type that contains
                      references to other constant pool entries.                    
                </javadoc>
                <method name="getIndirect" type="short" line="1127">
                    <params>
                        <param name="e" type="IndirectEntry"/>
                    </params>
                    <declaration name="index" type="Short" line="1128"/>
                    <scope line="1129"/>
                    <scope line="1132">
                        <scope line="1133"/>
                        <declaration name="i" type="short" line="1136"/>
                    </scope>
                </method>
                <class name="Entry" line="1141">
                    <javadoc line="1141">
                        Entry is the abstact superclass of all constant pool entry types
                          that can be stored in the &quot;pool&quot; list; its purpose is to define a
                          common method for writing constant pool entries to a class file.                        
                    </javadoc>
                    <method name="write" type="void" line="1147"/>
                </class>
                <class name="ValueEntry" line="1149">
                    <extends class="Entry"/>
                    <javadoc line="1149">
                        ValueEntry represents a constant pool entry of a type that
                          contains a direct value (see the comments for the &quot;getValue&quot;
                          method for a list of such types).
                          ValueEntry objects are not used as keys for their entries in the
                          Map &quot;map&quot;, so no useful hashCode or equals methods are defined.                        
                    </javadoc>
                    <declaration name="value" type="Object" line="1157"/>
                    <method name="ValueEntry" type="constructor" line="1158">
                        <params>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="write" type="void" line="1161">
                        <params>
                            <param name="out" type="DataOutputStream"/>
                        </params>
                        <scope line="1162"/>
                        <scope line="1166"/>
                        <scope line="1170"/>
                        <scope line="1174"/>
                        <scope line="1178"/>
                        <scope line="1182"/>
                    </method>
                </class>
                <class name="IndirectEntry" line="1187">
                    <extends class="Entry"/>
                    <javadoc line="1187">
                        IndirectEntry represents a constant pool entry of a type that
                          references other constant pool entries, i.e., the following types:
                          CONSTANT_Class, CONSTANT_String, CONSTANT_Fieldref,
                          CONSTANT_Methodref, CONSTANT_InterfaceMethodref, and
                          CONSTANT_NameAndType.
                          Each of these entry types contains either one or two indexes of
                          other constant pool entries.
                          IndirectEntry objects are used as the keys for their entries in
                          the Map &quot;map&quot;, so the hashCode and equals methods are overridden
                          to allow matching.                        
                    </javadoc>
                    <declaration name="tag" type="int" line="1200"/>
                    <declaration name="index0" type="short" line="1201"/>
                    <declaration name="index1" type="short" line="1202"/>
                    <javadoc line="1203">
                        Construct an IndirectEntry for a constant pool entry type
                          that contains one index of another entry.                        
                    </javadoc>
                    <method name="IndirectEntry" type="constructor" line="1207">
                        <params>
                            <param name="tag" type="int"/>
                            <param name="index" type="short"/>
                        </params>
                    </method>
                    <javadoc line="1212">
                        Construct an IndirectEntry for a constant pool entry type
                          that contains two indexes for other entries.                        
                    </javadoc>
                    <method name="IndirectEntry" type="constructor" line="1216">
                        <params>
                            <param name="tag" type="int"/>
                            <param name="index0" type="short"/>
                            <param name="index1" type="short"/>
                        </params>
                    </method>
                    <method name="write" type="void" line="1221">
                        <params>
                            <param name="out" type="DataOutputStream"/>
                        </params>
                        <scope line="1224"/>
                    </method>
                    <method name="hashCode" type="int" line="1228"/>
                    <method name="equals" type="boolean" line="1231">
                        <params>
                            <param name="obj" type="Object"/>
                        </params>
                        <scope line="1232">
                            <declaration name="other" type="IndirectEntry" line="1233"/>
                            <scope line="1234"/>
                        </scope>
                    </method>
                </class>
            </class>
        </class>
    </source>