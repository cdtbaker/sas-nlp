<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.InputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="CharacterEncoder" line="9">
            <javadoc line="9">
                This class defines the encoding half of character encoders.
                  A character encoder is an algorithim for transforming 8 bit binary
                  data into text (generally 7 bit ASCII or 8 bit ISO-Latin-1 text)
                  for transmition over text channels such as e-mail and network news.
                  The character encoders have been structured around a central theme
                  that, in general, the encoded text has the form:
                  &lt;pre&gt;
                  [Buffer Prefix]
                  [Line Prefix][encoded data atoms][Line Suffix]
                  [Buffer Suffix]
                  &lt;/pre&gt;
                  In the CharacterEncoder and CharacterDecoder classes, one complete
                  chunk of data is referred to as a &lt;i&gt;buffer&lt;/i&gt;. Encoded buffers
                  are all text, and decoded buffers (sometimes just referred to as
                  buffers) are binary octets.
                  To create a custom encoder, you must, at a minimum,  overide three
                  abstract methods in this class.
                  &lt;DL&gt;
                  &lt;DD&gt;bytesPerAtom which tells the encoder how many bytes to
                  send to encodeAtom
                  &lt;DD&gt;encodeAtom which encodes the bytes sent to it as text.
                  &lt;DD&gt;bytesPerLine which tells the encoder the maximum number of
                  bytes per line.
                  &lt;/DL&gt;
                  Several useful encoders have already been written and are
                  referenced in the See Also list below.                
                <author>
                    Chuck McManis                    
                </author>
                <see>
                    CharacterDecoder;                    
                </see>
                <see>
                    UCEncoder                    
                </see>
                <see>
                    UUEncoder                    
                </see>
                <see>
                    BASE64Encoder                    
                </see>
            </javadoc>
            <declaration name="pStream" type="PrintStream" line="43"/>
            <javadoc line="43">
                Stream that understands &quot;printing&quot;                
            </javadoc>
            <method name="bytesPerAtom" type="int" line="47"/>
            <javadoc line="47">
                Return the number of bytes per atom of encoding                
            </javadoc>
            <method name="bytesPerLine" type="int" line="51"/>
            <javadoc line="51">
                Return the number of bytes that can be encoded per line                
            </javadoc>
            <javadoc line="55">
                Encode the prefix for the entire buffer. By default is simply
                  opens the PrintStream for use by the other functions.                
            </javadoc>
            <method name="encodeBufferPrefix" type="void" line="59">
                <params>
                    <param name="aStream" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="62">
                Encode the suffix for the entire buffer.                
            </javadoc>
            <method name="encodeBufferSuffix" type="void" line="65">
                <params>
                    <param name="aStream" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="67">
                Encode the prefix that starts every output line.                
            </javadoc>
            <method name="encodeLinePrefix" type="void" line="70">
                <params>
                    <param name="aStream" type="OutputStream"/>
                    <param name="aLength" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Encode the suffix that ends every output line. By default
                  this method just prints a &lt;newline&gt; into the output stream.                
            </javadoc>
            <method name="encodeLineSuffix" type="void" line="76">
                <params>
                    <param name="aStream" type="OutputStream"/>
                </params>
            </method>
            <method name="encodeAtom" type="void" line="79"/>
            <javadoc line="79">
                Encode one &quot;atom&quot; of information into characters.                
            </javadoc>
            <javadoc line="83">
                This method works around the bizarre semantics of BufferedInputStream&apos;s
                  read method.                
            </javadoc>
            <method name="readFully" type="int" line="87">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="buffer" type="byte"/>
                </params>
                <scope line="88">
                    <declaration name="q" type="int" line="89"/>
                </scope>
            </method>
            <javadoc line="95">
                Encode bytes from the input stream, and write them as text characters
                  to the output stream. This method will run until it exhausts the
                  input stream, but does not print the line suffix for a final
                  line that is shorter than bytesPerLine().                
            </javadoc>
            <method name="encode" type="void" line="101">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                </params>
                <declaration name="j" type="int" line="102"/>
                <declaration name="numBytes" type="int" line="103"/>
                <declaration name="tmpbuffer" type="byte" line="104"/>
                <scope line="106">
                    <scope line="108"/>
                    <scope line="112">
                        <scope line="113"/>
                        <scope line="116"/>
                    </scope>
                    <scope line="120"/>
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="129">
                Encode the buffer in &lt;i&gt;aBuffer&lt;/i&gt; and write the encoded
                  result to the OutputStream &lt;i&gt;aStream&lt;/i&gt;.                
            </javadoc>
            <method name="encode" type="void" line="133">
                <params>
                    <param name="aBuffer" type="byte"/>
                    <param name="aStream" type="OutputStream"/>
                </params>
                <declaration name="inStream" type="ByteArrayInputStream" line="134"/>
            </method>
            <javadoc line="137">
                A &apos;streamless&apos; version of encode that simply takes a buffer of
                  bytes and returns a string containing the encoded buffer.                
            </javadoc>
            <method name="encode" type="String" line="141">
                <params>
                    <param name="aBuffer" type="byte"/>
                </params>
                <declaration name="outStream" type="ByteArrayOutputStream" line="142"/>
                <declaration name="inStream" type="ByteArrayInputStream" line="143"/>
                <declaration name="retVal" type="String" line="144"/>
                <scope line="145"/>
                <scope line="149"/>
            </method>
            <javadoc line="154">
                Return a byte array from the remaining bytes in this ByteBuffer.
                  &lt;P&gt;
                  The ByteBuffer&apos;s position will be advanced to ByteBuffer&apos;s limit.
                  &lt;P&gt;
                  To avoid an extra copy, the implementation will attempt to return the
                  byte array backing the ByteBuffer.  If this is not possible, a
                  new byte array will be created.                
            </javadoc>
            <method name="getBytes" type="byte[]" line="163">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <declaration name="buf" type="byte[]" line="164"/>
                <scope line="165">
                    <declaration name="tmp" type="byte[]" line="166"/>
                    <scope line="167"/>
                </scope>
                <scope line="172"/>
            </method>
            <javadoc line="178">
                Encode the &lt;i&gt;aBuffer&lt;/i&gt; ByteBuffer and write the encoded
                  result to the OutputStream &lt;i&gt;aStream&lt;/i&gt;.
                  &lt;P&gt;
                  The ByteBuffer&apos;s position will be advanced to ByteBuffer&apos;s limit.                
            </javadoc>
            <method name="encode" type="void" line="184">
                <params>
                    <param name="aBuffer" type="ByteBuffer"/>
                    <param name="aStream" type="OutputStream"/>
                </params>
                <declaration name="buf" type="byte[]" line="185"/>
            </method>
            <javadoc line="188">
                A &apos;streamless&apos; version of encode that simply takes a ByteBuffer
                  and returns a string containing the encoded buffer.
                  &lt;P&gt;
                  The ByteBuffer&apos;s position will be advanced to ByteBuffer&apos;s limit.                
            </javadoc>
            <method name="encode" type="String" line="194">
                <params>
                    <param name="aBuffer" type="ByteBuffer"/>
                </params>
                <declaration name="buf" type="byte[]" line="195"/>
            </method>
            <javadoc line="198">
                Encode bytes from the input stream, and write them as text characters
                  to the output stream. This method will run until it exhausts the
                  input stream. It differs from encode in that it will add the
                  line at the end of a final line that is shorter than bytesPerLine().                
            </javadoc>
            <method name="encodeBuffer" type="void" line="204">
                <params>
                    <param name="inStream" type="InputStream"/>
                    <param name="outStream" type="OutputStream"/>
                </params>
                <declaration name="j" type="int" line="205"/>
                <declaration name="numBytes" type="int" line="206"/>
                <declaration name="tmpbuffer" type="byte" line="207"/>
                <scope line="209">
                    <scope line="211"/>
                    <scope line="215">
                        <scope line="216"/>
                        <scope line="219"/>
                    </scope>
                    <scope line="224"/>
                </scope>
            </method>
            <javadoc line="230">
                Encode the buffer in &lt;i&gt;aBuffer&lt;/i&gt; and write the encoded
                  result to the OutputStream &lt;i&gt;aStream&lt;/i&gt;.                
            </javadoc>
            <method name="encodeBuffer" type="void" line="234">
                <params>
                    <param name="aBuffer" type="byte"/>
                    <param name="aStream" type="OutputStream"/>
                </params>
                <declaration name="inStream" type="ByteArrayInputStream" line="235"/>
            </method>
            <javadoc line="238">
                A &apos;streamless&apos; version of encode that simply takes a buffer of
                  bytes and returns a string containing the encoded buffer.                
            </javadoc>
            <method name="encodeBuffer" type="String" line="242">
                <params>
                    <param name="aBuffer" type="byte"/>
                </params>
                <declaration name="outStream" type="ByteArrayOutputStream" line="243"/>
                <declaration name="inStream" type="ByteArrayInputStream" line="244"/>
                <scope line="245"/>
                <scope line="248"/>
            </method>
            <javadoc line="253">
                Encode the &lt;i&gt;aBuffer&lt;/i&gt; ByteBuffer and write the encoded
                  result to the OutputStream &lt;i&gt;aStream&lt;/i&gt;.
                  &lt;P&gt;
                  The ByteBuffer&apos;s position will be advanced to ByteBuffer&apos;s limit.                
            </javadoc>
            <method name="encodeBuffer" type="void" line="259">
                <params>
                    <param name="aBuffer" type="ByteBuffer"/>
                    <param name="aStream" type="OutputStream"/>
                </params>
                <declaration name="buf" type="byte[]" line="260"/>
            </method>
            <javadoc line="263">
                A &apos;streamless&apos; version of encode that simply takes a ByteBuffer
                  and returns a string containing the encoded buffer.
                  &lt;P&gt;
                  The ByteBuffer&apos;s position will be advanced to ByteBuffer&apos;s limit.                
            </javadoc>
            <method name="encodeBuffer" type="String" line="269">
                <params>
                    <param name="aBuffer" type="ByteBuffer"/>
                </params>
                <declaration name="buf" type="byte[]" line="270"/>
            </method>
        </class>
    </source>