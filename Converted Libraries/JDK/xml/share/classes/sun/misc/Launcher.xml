<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FilePermission"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLClassLoader"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URLStreamHandler"/>
        <import package="java.net.URLStreamHandlerFactory"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.Permissions"/>
        <import package="java.security.Permission"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.security.CodeSource"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="Launcher" line="52">
            <comment line="113">
                Returns the class loader used to launch the main application.                
            </comment>
            <comment line="120">
                The class loader used for loading installed extensions.                
            </comment>
            <comment line="468">
                The stream handler factory for loading system protocol handlers.                
            </comment>
            <comment line="493">
                use serialVersionUID from JDK 1.2.2 for interoperability                
            </comment>
            <javadoc line="52">
                This class is used by the system to launch the main application.
                  Launcher                
            </javadoc>
            <declaration name="factory" type="URLStreamHandlerFactory" line="56"/>
            <declaration name="launcher" type="Launcher" line="57"/>
            <declaration name="bootClassPath" type="String" line="58"/>
            <method name="getLauncher" type="Launcher" line="61"/>
            <declaration name="loader" type="ClassLoader" line="65"/>
            <method name="Launcher" type="constructor" line="67">
                <comment line="69">
                    Create the extension class loader                    
                </comment>
                <comment line="78">
                    Now create the class loader to use to launch the application                    
                </comment>
                <comment line="86">
                    Also set the context class loader for the primordial thread.                    
                </comment>
                <comment line="89">
                    Finally, install a security manager if requested                    
                </comment>
                <declaration name="extcl" type="ClassLoader" line="69"/>
                <scope line="70"/>
                <scope line="72"/>
                <scope line="78"/>
                <scope line="80"/>
                <declaration name="s" type="String" line="89"/>
                <scope line="90">
                    <declaration name="sm" type="SecurityManager" line="91"/>
                    <scope line="92"/>
                    <scope line="94">
                        <scope line="95"/>
                        <scope line="97"/>
                        <scope line="98"/>
                        <scope line="99"/>
                        <scope line="100"/>
                    </scope>
                    <scope line="103"/>
                    <scope line="105"/>
                </scope>
            </method>
            <method name="getClassLoader" type="ClassLoader" line="115"/>
            <class name="ExtClassLoader" line="122">
                <extends class="URLClassLoader"/>
                <comment line="161">
                    Creates a new ExtClassLoader for the specified directories.                    
                </comment>
                <comment line="203">
                    Searches the installed extension directories for the specified
                     library name. For each extension directory, we first look for
                     the native library in the subdirectory whose name is the value
                     of the system property &lt;code&gt;os.arch&lt;code&gt;. Failing that, we
                     look in the extension directory itself.                    
                </comment>
                <comment line="289">
                    Creates a new AppClassLoader                    
                </comment>
                <scope line="124"/>
                <javadoc line="128">
                    create an ExtClassLoader. The ExtClassLoader is created
                      within a context that limits which files it can read                    
                </javadoc>
                <method name="getExtClassLoader" type="ExtClassLoader" line="133">
                    <comment line="138">
                        Prior implementations of this doPrivileged() block supplied
                         aa synthesized ACC via a call to the private method
                         ExtClassLoader.getContext().                        
                    </comment>
                    <declaration name="dirs" type="File[]" line="134"/>
                    <scope line="136">
                        <anonymous_class line="142">
                            <method name="run" type="ExtClassLoader" line="143">
                                <declaration name="len" type="int" line="144"/>
                                <scope line="145"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="151"/>
                </method>
                <method name="addExtURL" type="void" line="156">
                    <params>
                        <param name="url" type="URL"/>
                    </params>
                </method>
                <method name="ExtClassLoader" type="constructor" line="163">
                    <params>
                        <param name="dirs" type="File[]"/>
                    </params>
                </method>
                <method name="getExtDirs" type="File[]" line="167">
                    <declaration name="s" type="String" line="168"/>
                    <declaration name="dirs" type="File[]" line="169"/>
                    <scope line="170">
                        <declaration name="st" type="StringTokenizer" line="171"/>
                        <declaration name="count" type="int" line="173"/>
                        <scope line="175"/>
                    </scope>
                    <scope line="178"/>
                </method>
                <method name="getExtURLs" type="URL[]" line="184">
                    <params>
                        <param name="dirs" type="File[]"/>
                    </params>
                    <declaration name="urls" type="Vector&lt;URL&gt;" line="185"/>
                    <scope line="186">
                        <declaration name="files" type="String[]" line="187"/>
                        <scope line="188">
                            <scope line="189">
                                <scope line="190">
                                    <declaration name="f" type="File" line="191"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="ua" type="URL[]" line="197"/>
                </method>
                <method name="findLibrary" type="String" line="209">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <comment line="215">
                        Get the ext directory from the URL                        
                    </comment>
                    <comment line="218">
                        Look in architecture-specific subdirectory first
                         Read from the saved system properties to avoid deadlock                        
                    </comment>
                    <comment line="227">
                        Then check the extension directory                        
                    </comment>
                    <declaration name="urls" type="URL[]" line="211"/>
                    <declaration name="prevDir" type="File" line="212"/>
                    <scope line="213">
                        <declaration name="dir" type="File" line="215"/>
                        <scope line="216">
                            <declaration name="arch" type="String" line="219"/>
                            <scope line="220">
                                <declaration name="file" type="File" line="221"/>
                                <scope line="222"/>
                            </scope>
                            <declaration name="file" type="File" line="227"/>
                            <scope line="228"/>
                        </scope>
                    </scope>
                </method>
                <method name="getContext" type="AccessControlContext" line="239">
                    <params>
                        <param name="dirs" type="File[]"/>
                    </params>
                    <declaration name="perms" type="PathPermissions" line="240"/>
                    <declaration name="domain" type="ProtectionDomain" line="243"/>
                    <declaration name="acc" type="AccessControlContext" line="248"/>
                </method>
            </class>
            <class name="AppClassLoader" line="255">
                <extends class="URLClassLoader"/>
                <comment line="161">
                    Creates a new ExtClassLoader for the specified directories.                    
                </comment>
                <comment line="203">
                    Searches the installed extension directories for the specified
                     library name. For each extension directory, we first look for
                     the native library in the subdirectory whose name is the value
                     of the system property &lt;code&gt;os.arch&lt;code&gt;. Failing that, we
                     look in the extension directory itself.                    
                </comment>
                <comment line="289">
                    Creates a new AppClassLoader                    
                </comment>
                <javadoc line="255">
                    The class loader used for loading from java.class.path.
                      runs in a restricted security context.                    
                </javadoc>
                <scope line="261"/>
                <method name="getAppClassLoader" type="ClassLoader" line="267">
                    <params>
                        <param name="extcl" type="ClassLoader"/>
                    </params>
                    <comment line="272">
                        Note: on bugid 4256530
                         Prior implementations of this doPrivileged() block supplied
                         a rather restrictive ACC via a call to the private method
                         AppClassLoader.getContext(). This proved overly restrictive
                         when loading  classes. Specifically it prevent
                         accessClassInPackage.sun.* grants from being honored.                        
                    </comment>
                    <declaration name="s" type="String" line="268"/>
                    <declaration name="path" type="File[]" line="269"/>
                    <anonymous_class line="279">
                        <method name="run" type="AppClassLoader" line="280">
                            <declaration name="urls" type="URL[]" line="281"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="AppClassLoader" type="constructor" line="291">
                    <params>
                        <param name="urls" type="URL[]"/>
                        <param name="parent" type="ClassLoader"/>
                    </params>
                </method>
                <javadoc line="295">
                    Override loadClass so we can checkPackageAccess.                    
                </javadoc>
                <method name="loadClass" type="Class" line="300">
                    <params>
                        <param name="name" type="String"/>
                        <param name="resolve" type="boolean"/>
                    </params>
                    <declaration name="i" type="int" line="301"/>
                    <scope line="302">
                        <declaration name="sm" type="SecurityManager" line="303"/>
                        <scope line="304"/>
                    </scope>
                </method>
                <javadoc line="311">
                    allow any classes loaded from classpath to exit the VM.                    
                </javadoc>
                <method name="getPermissions" type="PermissionCollection" line="315">
                    <params>
                        <param name="codesource" type="CodeSource"/>
                    </params>
                    <declaration name="perms" type="PermissionCollection" line="316"/>
                </method>
                <javadoc line="321">
                    This class loader supports dynamic additions to the class path
                      at runtime.                    
                    <see>
                        java.lang.instrument.Instrumentation#appendToSystemClassPathSearch                        
                    </see>
                </javadoc>
                <method name="appendToClassPathForInstrumentation" type="void" line="327">
                    <params>
                        <param name="path" type="String"/>
                    </params>
                    <comment line="331">
                        addURL is a no-op if path already contains the URL                        
                    </comment>
                </method>
                <javadoc line="334">
                    create a context that can read any directories (recursively)
                      mentioned in the class path. In the case of a jar, it has to
                      be the directory containing the jar, not just the jar, as jar
                      files might refer to other jar files.                    
                </javadoc>
                <method name="getContext" type="AccessControlContext" line="343">
                    <params>
                        <param name="cp" type="File[]"/>
                    </params>
                    <declaration name="perms" type="PathPermissions" line="344"/>
                    <declaration name="domain" type="ProtectionDomain" line="347"/>
                    <declaration name="acc" type="AccessControlContext" line="352"/>
                </method>
            </class>
            <class name="BootClassPathHolder" line="359">
                <comment line="161">
                    Creates a new ExtClassLoader for the specified directories.                    
                </comment>
                <comment line="203">
                    Searches the installed extension directories for the specified
                     library name. For each extension directory, we first look for
                     the native library in the subdirectory whose name is the value
                     of the system property &lt;code&gt;os.arch&lt;code&gt;. Failing that, we
                     look in the extension directory itself.                    
                </comment>
                <comment line="289">
                    Creates a new AppClassLoader                    
                </comment>
                <declaration name="bcp" type="URLClassPath" line="360"/>
                <scope line="361">
                    <declaration name="urls" type="URL[]" line="362"/>
                    <scope line="363">
                        <anonymous_class line="365">
                            <method name="run" type="URL[]" line="366">
                                <comment line="373">
                                    Negative test used to properly handle
                                     nonexistent jars on boot class path                                    
                                </comment>
                                <declaration name="classPath" type="File[]" line="367"/>
                                <declaration name="len" type="int" line="368"/>
                                <declaration name="seenDirs" type="Set&lt;File&gt;" line="369"/>
                                <scope line="370">
                                    <declaration name="curEntry" type="File" line="371"/>
                                    <scope line="374"/>
                                    <scope line="377"/>
                                </scope>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="385"/>
                </scope>
            </class>
            <method name="getBootstrapClassPath" type="URLClassPath" line="392"/>
            <method name="pathToURLs" type="URL[]" line="396">
                <params>
                    <param name="path" type="File[]"/>
                </params>
                <comment line="402">
                    DEBUG
                    for (int i = 0; i &lt; urls.length; i++) {
                      System.out.println(&quot;urls[&quot; + i + &quot;] = &quot; + &apos;&quot;&apos; + urls[i] + &apos;&quot;&apos;);
                    }                    
                </comment>
                <declaration name="urls" type="URL[]" line="397"/>
                <scope line="398"/>
            </method>
            <method name="getClassPath" type="File[]" line="408">
                <params>
                    <param name="cp" type="String"/>
                </params>
                <comment line="414">
                    Count the number of separators first                    
                </comment>
                <comment line="421">
                    Now scan for each path component                    
                </comment>
                <comment line="426">
                    empty path component translates to &quot;.&quot;                    
                </comment>
                <comment line="431">
                    Make sure we include the last path component                    
                </comment>
                <comment line="437">
                    Trim array to correct size                    
                </comment>
                <comment line="446">
                    DEBUG
                    for (int i = 0; i &lt; path.length; i++) {
                      System.out.println(&quot;path[&quot; + i + &quot;] = &quot; + &apos;&quot;&apos; + path[i] + &apos;&quot;&apos;);
                    }                    
                </comment>
                <declaration name="path" type="File[]" line="409"/>
                <scope line="410">
                    <declaration name="count" type="int" line="411"/>
                    <declaration name="pos" type="int" line="412"/>
                    <scope line="414"/>
                    <scope line="421">
                        <scope line="422"/>
                        <scope line="424"/>
                    </scope>
                    <scope line="431"/>
                    <scope line="433"/>
                    <scope line="437">
                        <declaration name="tmp" type="File[]" line="438"/>
                    </scope>
                </scope>
                <scope line="442"/>
            </method>
            <declaration name="fileHandler" type="URLStreamHandler" line="452"/>
            <method name="getFileURL" type="URL" line="454">
                <params>
                    <param name="file" type="File"/>
                </params>
                <comment line="463">
                    Should never happen since we specify the protocol...                    
                </comment>
                <scope line="455"/>
                <scope line="457"/>
                <scope line="459"/>
                <scope line="461"/>
            </method>
            <class name="Factory" line="470">
                <comment line="161">
                    Creates a new ExtClassLoader for the specified directories.                    
                </comment>
                <comment line="203">
                    Searches the installed extension directories for the specified
                     library name. For each extension directory, we first look for
                     the native library in the subdirectory whose name is the value
                     of the system property &lt;code&gt;os.arch&lt;code&gt;. Failing that, we
                     look in the extension directory itself.                    
                </comment>
                <comment line="289">
                    Creates a new AppClassLoader                    
                </comment>
                <implements interface="URLStreamHandlerFactory"/>
                <declaration name="PREFIX" type="String" line="471"/>
                <method name="createURLStreamHandler" type="URLStreamHandler" line="473">
                    <params>
                        <param name="protocol" type="String"/>
                    </params>
                    <declaration name="name" type="String" line="474"/>
                    <scope line="475">
                        <declaration name="c" type="Class" line="476"/>
                    </scope>
                    <scope line="478"/>
                    <scope line="480"/>
                    <scope line="482"/>
                </method>
            </class>
        </class>
        <class name="PathPermissions" line="491">
            <extends class="PermissionCollection"/>
            <comment line="113">
                Returns the class loader used to launch the main application.                
            </comment>
            <comment line="120">
                The class loader used for loading installed extensions.                
            </comment>
            <comment line="468">
                The stream handler factory for loading system protocol handlers.                
            </comment>
            <comment line="493">
                use serialVersionUID from JDK 1.2.2 for interoperability                
            </comment>
            <declaration name="serialVersionUID" type="long" line="493"/>
            <declaration name="path" type="File" line="495"/>
            <declaration name="perms" type="Permissions" line="496"/>
            <declaration name="codeBase" type="URL" line="498"/>
            <method name="PathPermissions" type="constructor" line="501">
                <params>
                    <param name="path" type="File"/>
                </params>
            </method>
            <method name="getCodeBase" type="URL" line="508"/>
            <method name="add" type="void" line="512">
                <params>
                    <param name="permission" type="java.security.Permission"/>
                </params>
            </method>
            <method name="init" type="void" line="517">
                <comment line="524">
                    this is needed to be able to create the classloader itself!                    
                </comment>
                <comment line="527">
                    add permission to read any &quot;java.*&quot; property                    
                </comment>
                <comment line="560">
                    XXX?                    
                </comment>
                <anonymous_class line="530">
                    <method name="run" type="Void" line="531">
                        <comment line="560">
                            XXX?                            
                        </comment>
                        <scope line="532">
                            <declaration name="f" type="File" line="533"/>
                            <declaration name="path" type="String" line="534"/>
                            <scope line="535"/>
                            <scope line="537"/>
                            <scope line="540"/>
                            <scope line="543">
                                <scope line="544"/>
                                <scope line="547"/>
                            </scope>
                            <scope line="552">
                                <declaration name="endIndex" type="int" line="553"/>
                                <scope line="554"/>
                                <scope line="558"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="implies" type="boolean" line="568">
                <params>
                    <param name="permission" type="java.security.Permission"/>
                </params>
            </method>
            <method name="elements" type="java.util.Enumeration<Permission>" line="574">
                <scope line="577"/>
            </method>
            <method name="toString" type="String" line="582"/>
        </class>
    </source>