<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io.File"/>
        <import package="java.io.FilenameFilter"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.util.jar.Attributes"/>
        <import package="java.util.jar.Attributes.Name"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="ExtensionDependency" line="47">
            <comment line="73">
                                
            </comment>
            <comment line="126">
                Check for all declared required extensions in the jar file
                 manifest.                
            </comment>
            <comment line="182">
                &lt;p&gt;
                 Check that a particular dependency on an extension is satisfied.
                 &lt;p&gt;
                 @param extensionName is the key used for the attributes in the manifest
                 @param attr is the attributes of the manifest file
                
                 @return true if the dependency is satisfied by the installed extensions                
            </comment>
            <comment line="204">
                &lt;p&gt;
                 Check if a particular extension is part of the currently installed
                 extensions.
                 &lt;p&gt;
                 @param extensionName is the key for the attributes in the manifest
                 @param attr is the attributes of the manifest
                
                 @return true if the requested extension is already installed                
            </comment>
            <comment line="262">
                &lt;p&gt;
                 Check if the requested extension described by the attributes
                 in the manifest under the key extensionName is compatible with
                 the jar file.
                 &lt;p&gt;
                
                 @param extensionName key in the attibute list
                 @param attr manifest file attributes
                 @param file installed extension jar file to compare the requested
                 extension against.                
            </comment>
            <comment line="337">
                &lt;p&gt;
                 An required extension is missing, if an ExtensionInstallationProvider is
                 registered, delegate the installation of that particular extension to it.
                 &lt;p&gt;
                
                 @param reqInfo Missing extension information
                 @param instInfo Older installed version information
                
                 @return true if the installation is successful                
            </comment>
            <comment line="454">
                &lt;p&gt;
                 Scan the directories and return all files installed in those
                 &lt;p&gt;
                 @param dirs list of directories to scan
                
                 @return the list of files installed in all the directories                
            </comment>
            <comment line="481">
                &lt;p&gt;
                 @return the list of installed extensions jar files
                 &lt;p&gt;                
            </comment>
            <comment line="501">
                &lt;p&gt;
                 Add the newly installed jar file to the extension class loader.
                 &lt;p&gt;
                
                 @param cl the current installed extension class loader
                
                 @return true if successful                
            </comment>
            <comment line="554">
                True to display all debug and trace messages                
            </comment>
            <javadoc line="47">
                &lt;p&gt;
                  This class checks dependent extensions a particular jar file may have
                  declared through its manifest attributes.
                  &lt;/p&gt;
                  Jar file declared dependent extensions through the extension-list
                  attribute. The extension-list contains a list of keys used to
                  fetch the other attributes describing the required extension.
                  If key is the extension key declared in the extension-list
                  attribute, the following describing attribute can be found in
                  the manifest :
                  key-Extension-Name:  (Specification package name)
                  key-Specification-Version: (Specification-Version)
                  key-Implementation-Version: (Implementation-Version)
                  key-Implementation-Vendor-Id: (Imlementation-Vendor-Id)
                  key-Implementation-Version: (Implementation version)
                  key-Implementation-URL: (URL to download the requested extension)
                  &lt;p&gt;
                  This class also maintain versioning consistency of installed
                  extensions dependencies declared in jar file manifest.
                  &lt;/p&gt;                
                <author>
                    Jerome Dochez                    
                </author>
            </javadoc>
            <declaration name="providers" type="Vector" line="73"/>
            <javadoc line="75">
                &lt;p&gt;
                  Register an ExtensionInstallationProvider. The provider is responsible
                  for handling the installation (upgrade) of any missing extensions.
                  &lt;/p&gt;                
                <param>
                    eip ExtensionInstallationProvider implementation                    
                </param>
            </javadoc>
            <method name="addExtensionInstallationProvider" type="void" line="84">
                <params>
                    <param name="eip" type="ExtensionInstallationProvider"/>
                </params>
                <scope line="85"/>
            </method>
            <javadoc line="91">
                &lt;p&gt;
                  Unregister a previously installed installation provider
                  &lt;/p&gt;                
            </javadoc>
            <method name="removeExtensionInstallationProvider" type="void" line="98">
                <params>
                    <param name="eip" type="ExtensionInstallationProvider"/>
                </params>
            </method>
            <javadoc line="102">
                &lt;p&gt;
                  Checks the dependencies of the jar file on installed extension.
                  &lt;/p&gt;                
                <param>
                    jarFile containing the attriutes declaring the dependencies                    
                </param>
            </javadoc>
            <method name="checkExtensionsDependencies" type="boolean" line="109">
                <params>
                    <param name="jar" type="JarFile"/>
                </params>
                <comment line="112">
                    no need to bother, nobody is registered to install missing
                     extensions                    
                </comment>
                <scope line="110"/>
                <scope line="116">
                    <declaration name="extDep" type="ExtensionDependency" line="117"/>
                </scope>
                <scope line="119"/>
            </method>
            <method name="checkExtensions" type="boolean" line="131">
                <params>
                    <param name="jar" type="JarFile"/>
                </params>
                <comment line="141">
                    The applet does not define a manifest file, so
                     we just assume all dependencies are satisfied.                    
                </comment>
                <comment line="149">
                    Let&apos;s get the list of declared dependencies                    
                </comment>
                <comment line="153">
                    Iterate over all declared dependencies                    
                </comment>
                <comment line="158">
                    Sanity Check                    
                </comment>
                <declaration name="man" type="Manifest" line="132"/>
                <scope line="133"/>
                <scope line="135"/>
                <scope line="139"/>
                <declaration name="result" type="boolean" line="145"/>
                <declaration name="attr" type="Attributes" line="146"/>
                <scope line="147">
                    <declaration name="value" type="String" line="149"/>
                    <scope line="150">
                        <declaration name="st" type="StringTokenizer" line="151"/>
                        <scope line="153">
                            <declaration name="extensionName" type="String" line="154"/>
                            <declaration name="extName" type="String" line="158"/>
                            <scope line="160"/>
                            <scope line="166">
                                <scope line="167"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="173"/>
                </scope>
            </method>
            <method name="checkExtension" type="boolean" line="193">
                <params>
                    <param name="extensionName" type="String"/>
                    <param name="attr" type="Attributes"/>
                </params>
                <declaration name="reqInfo" type="ExtensionInfo" line="199"/>
            </method>
            <method name="checkExtensionAgainstInstalled" type="boolean" line="216">
                <params>
                    <param name="extensionName" type="String"/>
                    <param name="attr" type="Attributes"/>
                </params>
                <comment line="221">
                    Extension already installed, just check against this one                    
                </comment>
                <comment line="233">
                    Not sure if extension is already installed, so check all the
                     installed extension jar files to see if we get a match                    
                </comment>
                <comment line="239">
                    Get the list of installed extension jar files so we can
                     compare the installed versus the requested extension                    
                </comment>
                <comment line="255">
                    let&apos;s continue with the next installed extension                    
                </comment>
                <declaration name="fExtension" type="File" line="217"/>
                <scope line="219">
                    <scope line="221"/>
                    <scope line="224"/>
                    <scope line="226"/>
                </scope>
                <scope line="231">
                    <declaration name="installedExts" type="File[]" line="235"/>
                    <scope line="237"/>
                    <scope line="241"/>
                    <scope line="246">
                        <scope line="247"/>
                        <scope line="250"/>
                        <scope line="252"/>
                    </scope>
                </scope>
            </method>
            <method name="checkExtensionAgainst" type="boolean" line="279">
                <params>
                    <param name="extensionName" type="String"/>
                    <param name="attr" type="Attributes"/>
                    <param name="file" type="File"/>
                </params>
                <comment line="285">
                    Load the jar file ...                    
                </comment>
                <comment line="304">
                    Construct the extension information object                    
                </comment>
                <comment line="327">
                    everything else                    
                </comment>
                <declaration name="man" type="Manifest" line="285"/>
                <scope line="286">
                    <anonymous_class line="288">
                        <method name="run" type="Manifest" line="290">
                            <declaration name="jarFile" type="JarFile" line="293"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="297"/>
                <declaration name="reqInfo" type="ExtensionInfo" line="304"/>
                <declaration name="isCompatible" type="int" line="307"/>
                <declaration name="instInfo" type="ExtensionInfo" line="308"/>
                <scope line="310">
                    <declaration name="instAttr" type="Attributes" line="311"/>
                    <scope line="312"/>
                </scope>
            </method>
            <method name="installExtension" type="boolean" line="350">
                <params>
                    <param name="reqInfo" type="ExtensionInfo"/>
                    <param name="instInfo" type="ExtensionInfo"/>
                </params>
                <comment line="362">
                    delegate the installation to the provider                    
                </comment>
                <comment line="372">
                    We have tried all of our providers, noone could install this
                     extension, we just return failure at this point                    
                </comment>
                <declaration name="currentProviders" type="Vector" line="352"/>
                <scope line="353"/>
                <scope line="356">
                    <declaration name="eip" type="ExtensionInstallationProvider" line="357"/>
                    <scope line="360">
                        <scope line="362">
                            <declaration name="cl" type="Launcher.ExtClassLoader" line="364"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="377">
                &lt;p&gt;
                  Checks if the extension, that is specified in the extension-list in
                  the applet jar manifest, is already installed (i.e. exists in the
                  extension directory).
                  &lt;/p&gt;                
                <param>
                    extensionName extension name in the extension-list                    
                </param>
                <return>
                    the extension if it exists in the extension directory                    
                </return>
            </javadoc>
            <method name="checkExtensionExists" type="File" line="388">
                <params>
                    <param name="extensionName" type="String"/>
                </params>
                <comment line="390">
                    Function added to fix bug 4504166                    
                </comment>
                <comment line="401">
                    Search the extension directories for the extension that is specified
                     in the attribute extension-list in the applet jar manifest                    
                </comment>
                <declaration name="extName" type="String" line="390"/>
                <declaration name="fileExt" type="String[]" line="391"/>
                <anonymous_class line="394">
                    <method name="run" type="File" line="395">
                        <comment line="401">
                            Search the extension directories for the extension that is specified
                             in the attribute extension-list in the applet jar manifest                            
                        </comment>
                        <scope line="396">
                            <declaration name="fExtension" type="File" line="397"/>
                            <declaration name="dirs" type="File[]" line="398"/>
                            <scope line="402">
                                <scope line="403">
                                    <scope line="404"/>
                                    <scope line="406"/>
                                    <scope line="410"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="417"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="425">
                &lt;p&gt;                
                <return>
                    the java.ext.dirs property as a list of directory
                      &lt;/p&gt;                    
                </return>
            </javadoc>
            <method name="getExtDirs" type="File[]" line="430">
                <declaration name="s" type="String" line="431"/>
                <declaration name="dirs" type="File[]" line="434"/>
                <scope line="435">
                    <declaration name="st" type="StringTokenizer" line="436"/>
                    <declaration name="count" type="int" line="438"/>
                    <scope line="441"/>
                </scope>
                <scope line="445"/>
            </method>
            <method name="getExtFiles" type="File[]" line="461">
                <params>
                    <param name="dirs" type="File[]"/>
                </params>
                <declaration name="urls" type="Vector&lt;File&gt;" line="462"/>
                <scope line="463">
                    <declaration name="files" type="String[]" line="464"/>
                    <scope line="465">
                        <scope line="467">
                            <declaration name="f" type="File" line="468"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ua" type="File[]" line="474"/>
            </method>
            <method name="getInstalledExtensions" type="File[]" line="485">
                <anonymous_class line="487">
                    <method name="run" type="File[]" line="488">
                        <scope line="489"/>
                        <scope line="491"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="addNewExtensionsToClassLoader" type="Boolean" line="509">
                <params>
                    <param name="cl" type="Launcher.ExtClassLoader"/>
                </params>
                <comment line="549">
                    let&apos;s continue with the next installed extension                    
                </comment>
                <scope line="510">
                    <declaration name="installedExts" type="File[]" line="511"/>
                    <scope line="512">
                        <declaration name="instFile" type="File" line="513"/>
                        <anonymous_class line="515">
                            <method name="run" type="URL" line="516">
                                <scope line="517"/>
                                <scope line="519"/>
                            </method>
                        </anonymous_class>
                        <declaration name="instURL" type="URL" line="514"/>
                        <scope line="525">
                            <declaration name="urls" type="URL[]" line="526"/>
                            <declaration name="found" type="boolean" line="527"/>
                            <scope line="528">
                                <scope line="532"/>
                            </scope>
                            <scope line="537"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="544"/>
                <scope line="546"/>
            </method>
            <declaration name="DEBUG" type="boolean" line="554"/>
            <method name="debug" type="void" line="556">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="557"/>
            </method>
            <method name="debugException" type="void" line="562">
                <params>
                    <param name="e" type="Throwable"/>
                </params>
                <scope line="563"/>
            </method>
        </class>
    </source>