<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.AbstractMap"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Set"/>
        <import package="java.util.AbstractSet"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="SoftCache" line="11">
            <extends class="AbstractMap"/>
            <implements interface="Map"/>
            <javadoc line="11">
                A memory-sensitive implementation of the &lt;code&gt;Map&lt;/code&gt; interface.
                  &lt;p&gt; A &lt;code&gt;SoftCache&lt;/code&gt; object uses {@link java.lang.ref.SoftReferencesoft references} to implement a memory-sensitive hash map.  If the garbage
                  collector determines at a certain point in time that a value object in a
                  &lt;code&gt;SoftCache&lt;/code&gt; entry is no longer strongly reachable, then it may
                  remove that entry in order to release the memory occupied by the value
                  object.  All &lt;code&gt;SoftCache&lt;/code&gt; objects are guaranteed to be completely
                  cleared before the virtual machine will throw an
                  &lt;code&gt;OutOfMemoryError&lt;/code&gt;.  Because of this automatic clearing feature,
                  the behavior of this class is somewhat different from that of other
                  &lt;code&gt;Map&lt;/code&gt; implementations.
                  &lt;p&gt; Both null values and the null key are supported.  This class has the
                  same performance characteristics as the &lt;code&gt;HashMap&lt;/code&gt; class, and has
                  the same efficiency parameters of &lt;em&gt;initial capacity&lt;/em&gt; and &lt;em&gt;load
                  factor&lt;/em&gt;.
                  &lt;p&gt; Like most collection classes, this class is not synchronized.  A
                  synchronized &lt;code&gt;SoftCache&lt;/code&gt; may be constructed using the
                  &lt;code&gt;Collections.synchronizedMap&lt;/code&gt; method.
                  &lt;p&gt; In typical usage this class will be subclassed and the &lt;code&gt;fill&lt;/code&gt;
                  method will be overridden.  When the &lt;code&gt;get&lt;/code&gt; method is invoked on a
                  key for which there is no mapping in the cache, it will in turn invoke the
                  &lt;code&gt;fill&lt;/code&gt; method on that key in an attempt to construct a
                  corresponding value.  If the &lt;code&gt;fill&lt;/code&gt; method returns such a value
                  then the cache will be updated and the new value will be returned.  Thus,
                  for example, a simple URL-content cache can be constructed as follows:
                  &lt;pre&gt;
                  public class URLCache extends SoftCache {
                  protected Object fill(Object key) {
                  return ((URL)key).getContent();
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; The behavior of the &lt;code&gt;SoftCache&lt;/code&gt; class depends in part upon
                  the actions of the garbage collector, so several familiar (though not
                  required) &lt;code&gt;Map&lt;/code&gt; invariants do not hold for this class.  &lt;p&gt;
                  Because entries are removed from a &lt;code&gt;SoftCache&lt;/code&gt; in response to
                  dynamic advice from the garbage collector, a &lt;code&gt;SoftCache&lt;/code&gt; may
                  behave as though an unknown thread is silently removing entries.  In
                  particular, even if you synchronize on a &lt;code&gt;SoftCache&lt;/code&gt; instance and
                  invoke none of its mutator methods, it is possible for the &lt;code&gt;size&lt;/code&gt;
                  method to return smaller values over time, for the &lt;code&gt;isEmpty&lt;/code&gt;
                  method to return &lt;code&gt;false&lt;/code&gt; and then &lt;code&gt;true&lt;/code&gt;, for the
                  &lt;code&gt;containsKey&lt;/code&gt; method to return &lt;code&gt;true&lt;/code&gt; and later
                  &lt;code&gt;false&lt;/code&gt; for a given key, for the &lt;code&gt;get&lt;/code&gt; method to
                  return a value for a given key but later return &lt;code&gt;null&lt;/code&gt;, for the
                  &lt;code&gt;put&lt;/code&gt; method to return &lt;code&gt;null&lt;/code&gt; and the
                  &lt;code&gt;remove&lt;/code&gt; method to return &lt;code&gt;false&lt;/code&gt; for a key that
                  previously appeared to be in the map, and for successive examinations of the
                  key set, the value set, and the entry set to yield successively smaller
                  numbers of elements.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
                <see>
                    java.util.HashMap                    
                </see>
                <see>
                    java.lang.ref.SoftReference                    
                </see>
            </javadoc>
            <class name="ValueCell" line="67">
                <extends class="SoftReference"/>
                <declaration name="INVALID_KEY" type="Object" line="68"/>
                <declaration name="dropped" type="int" line="69"/>
                <declaration name="key" type="Object" line="70"/>
                <method name="ValueCell" type="constructor" line="71">
                    <params>
                        <param name="key" type="Object"/>
                        <param name="value" type="Object"/>
                        <param name="queue" type="ReferenceQueue"/>
                    </params>
                </method>
                <method name="create" type="ValueCell" line="75">
                    <params>
                        <param name="key" type="Object"/>
                        <param name="value" type="Object"/>
                        <param name="queue" type="ReferenceQueue"/>
                    </params>
                </method>
                <method name="strip" type="Object" line="79">
                    <params>
                        <param name="val" type="Object"/>
                        <param name="drop" type="boolean"/>
                    </params>
                    <declaration name="vc" type="ValueCell" line="81"/>
                    <declaration name="o" type="Object" line="82"/>
                </method>
                <method name="isValid" type="boolean" line="86"/>
                <method name="drop" type="void" line="89"/>
            </class>
            <declaration name="hash" type="Map" line="95"/>
            <declaration name="queue" type="ReferenceQueue" line="96"/>
            <method name="processQueue" type="void" line="97">
                <declaration name="vc" type="ValueCell" line="98"/>
                <scope line="99"/>
            </method>
            <javadoc line="104">
                Construct a new, empty &lt;code&gt;SoftCache&lt;/code&gt; with the given
                  initial capacity and the given load factor.                
                <param>
                    initialCapacity  The initial capacity of the cache                    
                </param>
                <param>
                    loadFactor       A number between 0.0 and 1.0                    
                </param>
                <throws>
                    IllegalArgumentException  If the initial capacity is less than
                      or equal to zero, or if the load
                      factor is less than zero                    
                </throws>
            </javadoc>
            <method name="SoftCache" type="constructor" line="113">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="116">
                Construct a new, empty &lt;code&gt;SoftCache&lt;/code&gt; with the given
                  initial capacity and the default load factor.                
                <param>
                    initialCapacity  The initial capacity of the cache                    
                </param>
                <throws>
                    IllegalArgumentException  If the initial capacity is less than
                      or equal to zero                    
                </throws>
            </javadoc>
            <method name="SoftCache" type="constructor" line="123">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="126">
                Construct a new, empty &lt;code&gt;SoftCache&lt;/code&gt; with the default
                  capacity and the default load factor.                
            </javadoc>
            <method name="SoftCache" type="constructor" line="130"/>
            <javadoc line="133">
                Return the number of key-value mappings in this cache.  The time
                  required by this operation is linear in the size of the map.                
            </javadoc>
            <method name="size" type="int" line="137"/>
            <javadoc line="140">
                Return &lt;code&gt;true&lt;/code&gt; if this cache contains no key-value mappings.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="143"/>
            <javadoc line="146">
                Return &lt;code&gt;true&lt;/code&gt; if this cache contains a mapping for the
                  specified key.  If there is no mapping for the key, this method will not
                  attempt to construct one by invoking the &lt;code&gt;fill&lt;/code&gt; method.                
                <param>
                    key   The key whose presence in the cache is to be tested                    
                </param>
            </javadoc>
            <method name="containsKey" type="boolean" line="152">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="155">
                Create a value object for the given &lt;code&gt;key&lt;/code&gt;.  This method is
                  invoked by the &lt;code&gt;get&lt;/code&gt; method when there is no entry for
                  &lt;code&gt;key&lt;/code&gt;.  If this method returns a non-&lt;code&gt;null&lt;/code&gt; value,
                  then the cache will be updated to map &lt;code&gt;key&lt;/code&gt; to that value,
                  and that value will be returned by the &lt;code&gt;get&lt;/code&gt; method.
                  &lt;p&gt; The default implementation of this method simply returns
                  &lt;code&gt;null&lt;/code&gt; for every &lt;code&gt;key&lt;/code&gt; value.  A subclass may
                  override this method to provide more useful behavior.                
                <param>
                    key  The key for which a value is to be computed                    
                </param>
                <return>
                    A value for <code>key</code>, or <code>null</code> if one
                      could not be computed                    
                </return>
                <see>
                    #get                    
                </see>
            </javadoc>
            <method name="fill" type="Object" line="169">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="172">
                Return the value to which this cache maps the specified
                  &lt;code&gt;key&lt;/code&gt;.  If the cache does not presently contain a value for
                  this key, then invoke the &lt;code&gt;fill&lt;/code&gt; method in an attempt to
                  compute such a value.  If that method returns a non-&lt;code&gt;null&lt;/code&gt;
                  value, then update the cache and return the new value.  Otherwise,
                  return &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Note that because this method may update the cache, it is considered
                  a mutator and may cause &lt;code&gt;ConcurrentModificationException&lt;/code&gt;s to
                  be thrown if invoked while an iterator is in use.                
                <param>
                    key  The key whose associated value, if any, is to be returned                    
                </param>
                <see>
                    #fill                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="185">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="v" type="Object" line="187"/>
                <scope line="188">
                    <scope line="190"/>
                </scope>
            </method>
            <javadoc line="197">
                Update this cache so that the given &lt;code&gt;key&lt;/code&gt; maps to the given
                  &lt;code&gt;value&lt;/code&gt;.  If the cache previously contained a mapping for
                  &lt;code&gt;key&lt;/code&gt; then that mapping is replaced and the old value is
                  returned.                
                <param>
                    key    The key that is to be mapped to the given
                      <code>value</code>                    
                </param>
                <param>
                    value  The value to which the given <code>key</code> is to be
                      mapped                    
                </param>
                <return>
                    The previous value to which this key was mapped, or
                      <code>null</code> if if there was no mapping for the key                    
                </return>
            </javadoc>
            <method name="put" type="Object" line="209">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="vc" type="ValueCell" line="211"/>
            </method>
            <javadoc line="214">
                Remove the mapping for the given &lt;code&gt;key&lt;/code&gt; from this cache, if
                  present.                
                <param>
                    key  The key whose mapping is to be removed                    
                </param>
                <return>
                    The value to which this key was mapped, or <code>null</code> if
                      there was no mapping for the key                    
                </return>
            </javadoc>
            <method name="remove" type="Object" line="221">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="225">
                Remove all mappings from this cache.                
            </javadoc>
            <method name="clear" type="void" line="228"/>
            <method name="valEquals" type="boolean" line="232">
                <params>
                    <param name="o1" type="Object"/>
                    <param name="o2" type="Object"/>
                </params>
            </method>
            <class name="Entry" line="235">
                <implements interface="Map.Entry"/>
                <declaration name="ent" type="Map.Entry" line="236"/>
                <declaration name="value" type="Object" line="237"/>
                <method name="Entry" type="constructor" line="238">
                    <params>
                        <param name="ent" type="Map.Entry"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="getKey" type="Object" line="242"/>
                <method name="getValue" type="Object" line="245"/>
                <method name="setValue" type="Object" line="248">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="251">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry" line="253"/>
                </method>
                <method name="hashCode" type="int" line="256">
                    <declaration name="k" type="Object" line="257"/>
                </method>
            </class>
            <class name="EntrySet" line="261">
                <extends class="AbstractSet"/>
                <declaration name="hashEntries" type="Set" line="262"/>
                <method name="iterator" type="Iterator" line="263">
                    <anonymous_class line="264">
                        <declaration name="hashIterator" type="Iterator" line="265"/>
                        <declaration name="next" type="Entry" line="266"/>
                        <method name="hasNext" type="boolean" line="267">
                            <scope line="268">
                                <declaration name="ent" type="Map.Entry" line="269"/>
                                <declaration name="vc" type="ValueCell" line="270"/>
                                <declaration name="v" type="Object" line="271"/>
                                <scope line="272"/>
                            </scope>
                        </method>
                        <method name="next" type="Object" line="280">
                            <declaration name="e" type="Entry" line="282"/>
                        </method>
                        <method name="remove" type="void" line="286"/>
                    </anonymous_class>
                </method>
                <method name="isEmpty" type="boolean" line="292"/>
                <method name="size" type="int" line="295">
                    <declaration name="j" type="int" line="296"/>
                </method>
                <method name="remove" type="boolean" line="300">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <declaration name="entrySet" type="Set" line="306"/>
            <javadoc line="307">
                Return a &lt;code&gt;Set&lt;/code&gt; view of the mappings in this cache.                
            </javadoc>
            <method name="entrySet" type="Set" line="310"/>
        </class>
    </source>