<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="sun.reflect.ConstantPool"/>
        <import package="sun.reflect.annotation.AnnotationType"/>
        <import package="sun.nio.ch.Interruptible"/>
        <interface name="JavaLangAccess">
            <method name="getConstantPool" type="ConstantPool" line="6"/>
            <javadoc line="6">
                Return the constant pool for a class.                
            </javadoc>
            <method name="setAnnotationType" type="void" line="10"/>
            <javadoc line="10">
                Set the AnnotationType instance corresponding to this class.
                  (This method only applies to annotation types.)                
            </javadoc>
            <method name="getAnnotationType" type="AnnotationType" line="15"/>
            <javadoc line="15">
                Get the AnnotationType instance corresponding to this class.
                  (This method only applies to annotation types.)                
            </javadoc>
            <method name="getEnumConstantsShared" type="E[]" line="20"/>
            <javadoc line="20">
                Returns the elements of an enum class or null if the
                  Class object does not represent an enum type;
                  the result is uncloned, cached, and shared by all callers.                
            </javadoc>
            <method name="blockedOn" type="void" line="26"/>
            <javadoc line="26">
                Set thread&apos;s blocker field.                
            </javadoc>
            <method name="registerShutdownHook" type="void" line="30"/>
            <javadoc line="30">
                Registers a shutdown hook.
                  It is expected that this method with registerShutdownInProgress=true
                  is only used to register DeleteOnExitHook since the first file
                  may be added to the delete on exit list by the application shutdown
                  hooks.                
                <params>
                    slot  the slot in the shutdown hook array, whose element
                      will be invoked in order during shutdown                    
                </params>
                <params>
                    registerShutdownInProgress true to allow the hook
                      to be registered even if the shutdown is in progress.                    
                </params>
                <params>
                    hook  the hook to be registered                    
                </params>
                <throw>
                    IllegalStateException if shutdown is in progress and
                      the slot is not valid to register.                    
                </throw>
            </javadoc>
            <method name="getStackTraceDepth" type="int" line="45"/>
            <javadoc line="45">
                Returns the number of stack frames represented by the given throwable.                
            </javadoc>
            <method name="getStackTraceElement" type="StackTraceElement" line="49"/>
            <javadoc line="49">
                Returns the ith StackTraceElement for the given throwable.                
            </javadoc>
        </interface>
    </source>