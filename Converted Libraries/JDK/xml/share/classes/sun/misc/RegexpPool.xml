<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.io"/>
        <class name="RegexpPool" line="29">
            <javadoc line="29">
                A class to represent a pool of regular expressions.  A string
                  can be matched against the whole pool all at once.  It is much
                  faster than doing individual regular expression matches one-by-one.                
                <see>
                    java.misc.RegexpTarget                    
                </see>
                <author>
                    James Gosling                    
                </author>
            </javadoc>
            <declaration name="prefixMachine" type="RegexpNode" line="39"/>
            <declaration name="suffixMachine" type="RegexpNode" line="40"/>
            <declaration name="BIG" type="int" line="41"/>
            <declaration name="lastDepth" type="int" line="42"/>
            <method name="RegexpPool" type="constructor" line="44"/>
            <javadoc line="47">
                Add a regular expression to the pool of regular expressions.                
                <param>
                    re  The regular expression to add to the pool.
                      For now, only handles strings that either begin or end with
                      a &apos;&apos;.                    
                </param>
                <param>
                    ret The object to be returned when this regular expression is
                      matched.  If ret is an instance of the RegexpTarget class, ret.found
                      is called with the string fragment that matched the &apos;&apos; as its
                      parameter.                    
                </param>
                <exception>
                    REException error                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="58">
                <params>
                    <param name="re" type="String"/>
                    <param name="ret" type="Object"/>
                </params>
            </method>
            <javadoc line="62">
                Replace the target for the regular expression with a different
                  target.                
                <param>
                    re  The regular expression to be replaced in the pool.
                      For now, only handles strings that either begin or end with
                      a &apos;&apos;.                    
                </param>
                <param>
                    ret The object to be returned when this regular expression is
                      matched.  If ret is an instance of the RegexpTarget class, ret.found
                      is called with the string fragment that matched the &apos;&apos; as its
                      parameter.                    
                </param>
            </javadoc>
            <method name="replace" type="void" line="74">
                <params>
                    <param name="re" type="String"/>
                    <param name="ret" type="Object"/>
                </params>
                <comment line="79">
                    should never occur if replace is true                    
                </comment>
                <scope line="75"/>
                <scope line="77"/>
            </method>
            <javadoc line="82">
                Delete the regular expression and its target.                
                <param>
                    re The regular expression to be deleted from the pool.
                      must begin or end with a &apos;&apos;                    
                </param>
                <return>
                    target - the old target.                    
                </return>
            </javadoc>
            <method name="delete" type="Object" line="88">
                <params>
                    <param name="re" type="String"/>
                </params>
                <comment line="104">
                                        
                </comment>
                <comment line="115">
                                        
                </comment>
                <comment line="125">
                    delete only if there is an exact match                    
                </comment>
                <declaration name="o" type="Object" line="89"/>
                <declaration name="p" type="RegexpNode" line="90"/>
                <declaration name="best" type="RegexpNode" line="91"/>
                <declaration name="len" type="int" line="92"/>
                <declaration name="i" type="int" line="93"/>
                <declaration name="prefix" type="boolean" line="94"/>
                <scope line="104">
                    <scope line="106"/>
                </scope>
                <scope line="116">
                    <scope line="117"/>
                </scope>
                <scope line="125">
                    <scope line="126"/>
                </scope>
                <scope line="131">
                    <scope line="132"/>
                </scope>
            </method>
            <javadoc line="140">
                Search for a match to a string &amp; return the object associated
                  with it with the match.  When multiple regular expressions
                  would match the string, the best match is returned first.
                  The next best match is returned the next time matchNext is
                  called.                
                <param>
                    s    The string to match against the regular expressions
                      in the pool.                    
                </param>
                <return>
                    null on failure, otherwise the object associated with
                      the regular expression when it was added to the pool.
                      If the object is an instance of RegexpTarget, then
                      the return value is the result from calling
                      return.found(string_that_matched_wildcard).                    
                </return>
            </javadoc>
            <method name="match" type="Object" line="153">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="157">
                Identical to match except that it will only find matches to
                  regular expressions that were added to the pool &lt;i&gt;after&lt;/i&gt;
                  the last regular expression that matched in the last call
                  to match() or matchNext()                
            </javadoc>
            <method name="matchNext" type="Object" line="161">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="add" type="void" line="165">
                <params>
                    <param name="re" type="String"/>
                    <param name="ret" type="Object"/>
                    <param name="replace" type="boolean"/>
                </params>
                <declaration name="len" type="int" line="166"/>
                <declaration name="p" type="RegexpNode" line="167"/>
                <scope line="168"/>
                <scope line="172">
                    <declaration name="exact" type="boolean" line="173"/>
                </scope>
            </method>
            <method name="matchAfter" type="Object" line="191">
                <params>
                    <param name="s" type="String"/>
                    <param name="lastMatchDepth" type="int"/>
                </params>
                <comment line="201">
                                        
                </comment>
                <comment line="214">
                                        
                </comment>
                <declaration name="p" type="RegexpNode" line="192"/>
                <declaration name="best" type="RegexpNode" line="193"/>
                <declaration name="bst" type="int" line="194"/>
                <declaration name="bend" type="int" line="195"/>
                <declaration name="len" type="int" line="196"/>
                <declaration name="i" type="int" line="197"/>
                <scope line="201">
                    <scope line="203"/>
                </scope>
                <scope line="215">
                    <scope line="216"/>
                </scope>
                <declaration name="o" type="Object" line="224"/>
            </method>
            <javadoc line="230">
                Resets the pool so that the next call to matchNext looks
                  at all regular expressions in the pool.  match(s); is equivalent
                  to reset(); matchNext(s);
                  &lt;p&gt;&lt;b&gt;Multithreading note:&lt;/b&gt; reset/nextMatch leave state in the
                  regular expression pool.  If multiple threads could be using this
                  pool this way, they should be syncronized to avoid race hazards.
                  match() was done in such a way that there are no such race
                  hazards: multiple threads can be matching in the same pool
                  simultaneously.                
            </javadoc>
            <method name="reset" type="void" line="239"/>
            <javadoc line="243">
                Print this pool to standard output                
            </javadoc>
            <method name="print" type="void" line="244">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="246"/>
                <scope line="251"/>
            </method>
        </class>
        <class name="RegexpNode" line="261">
            <declaration name="c" type="char" line="262"/>
            <declaration name="firstchild" type="RegexpNode" line="263"/>
            <declaration name="nextsibling" type="RegexpNode" line="264"/>
            <declaration name="depth" type="int" line="265"/>
            <declaration name="exact" type="boolean" line="266"/>
            <declaration name="result" type="Object" line="267"/>
            <declaration name="re" type="String" line="268"/>
            <method name="RegexpNode" type="constructor" line="270"/>
            <method name="RegexpNode" type="constructor" line="274">
                <params>
                    <param name="C" type="char"/>
                    <param name="depth" type="int"/>
                </params>
            </method>
            <method name="add" type="RegexpNode" line="278">
                <params>
                    <param name="C" type="char"/>
                </params>
                <declaration name="p" type="RegexpNode" line="279"/>
                <scope line="282"/>
            </method>
            <method name="find" type="RegexpNode" line="294">
                <params>
                    <param name="C" type="char"/>
                </params>
            </method>
            <method name="print" type="void" line="302">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="303">
                    <declaration name="p" type="RegexpNode" line="304"/>
                    <scope line="306"/>
                </scope>
                <scope line="313"/>
            </method>
        </class>
    </source>