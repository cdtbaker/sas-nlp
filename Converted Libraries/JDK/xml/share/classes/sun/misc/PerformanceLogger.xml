<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.util.Vector"/>
        <import package="java.io.FileWriter"/>
        <import package="java.io.File"/>
        <import package="java.io.OutputStreamWriter"/>
        <import package="java.io.Writer"/>
        <class name="PerformanceLogger" line="36">
            <comment line="76">
                Timing values of global interest                
            </comment>
            <comment line="77">
                VM start                
            </comment>
            <javadoc line="36">
                This class is intended to be a central place for the jdk to
                  log timing events of interest.  There is pre-defined event
                  of startTime, as well as a general
                  mechanism of setting aribtrary times in an array.
                  All unreserved times in the array can be used by callers
                  in application-defined situations.  The caller is responsible
                  for setting and getting all times and for doing whatever
                  analysis is interesting; this class is merely a central container
                  for those timing values.
                  Note that, due to the variables in this class being static,
                  use of particular time values by multiple applets will cause
                  confusing results.  For example, if plugin runs two applets
                  simultaneously, the initTime for those applets will collide
                  and the results may be undefined.
                  &lt;P&gt;
                  To automatically track startup performance in an app or applet,
                  use the command-line parameter sun.perflog as follows:&lt;BR&gt;
                  -Dsun.perflog[=file:&lt;filename&gt;]
                  &lt;BR&gt;
                  where simply using the parameter with no value will enable output
                  to the console and a value of &quot;file:&lt;filename&gt;&quot; will cause
                  that given filename to be created and used for all output.
                  &lt;P&gt;
                  By default, times are measured using System.currentTimeMillis().  To use
                  System.nanoTime() instead, add the command-line parameter:&lt;BR&gt;
                  -Dsun.perflog.nano=true
                  &lt;BR&gt;
                  &lt;P&gt;
                  &lt;B&gt;Warning: Use at your own risk!&lt;/B&gt;
                  This class is intended for internal testing
                  purposes only and may be removed at any time.  More
                  permanent monitoring and profiling APIs are expected to be
                  developed for future releases and this class will cease to
                  exist once those APIs are in place.                
                <author>
                    Chet Haase                    
                </author>
            </javadoc>
            <declaration name="START_INDEX" type="int" line="76"/>
            <declaration name="LAST_RESERVED" type="int" line="77"/>
            <declaration name="perfLoggingOn" type="boolean" line="79"/>
            <declaration name="useNanoTime" type="boolean" line="80"/>
            <declaration name="times" type="Vector&lt;TimeData&gt;" line="81"/>
            <declaration name="logFileName" type="String" line="82"/>
            <declaration name="logWriter" type="Writer" line="83"/>
            <declaration name="baseTime" type="long" line="84"/>
            <scope line="86">
                <declaration name="perfLoggingProp" type="String" line="87"/>
                <scope line="90">
                    <declaration name="perfNanoProp" type="String" line="94"/>
                    <scope line="97"/>
                    <scope line="102"/>
                    <scope line="105">
                        <scope line="106">
                            <anonymous_class line="108">
                                <method name="run" type="Void" line="109">
                                    <scope line="110">
                                        <declaration name="logFile" type="File" line="111"/>
                                    </scope>
                                    <scope line="114"/>
                                </method>
                            </anonymous_class>
                        </scope>
                    </scope>
                    <scope line="124"/>
                </scope>
                <scope line="130"/>
            </scope>
            <javadoc line="135">
                Returns status of whether logging is enabled or not.  This is
                  provided as a convenience method so that users do not have to
                  perform the same GetPropertyAction check as above to determine whether
                  to enable performance logging.                
            </javadoc>
            <method name="loggingEnabled" type="boolean" line="141"/>
            <class name="TimeData" line="146">
                <javadoc line="146">
                    Internal class used to store time/message data together.                    
                </javadoc>
                <declaration name="message" type="String" line="150"/>
                <declaration name="time" type="long" line="151"/>
                <method name="TimeData" type="constructor" line="153">
                    <params>
                        <param name="message" type="String"/>
                        <param name="time" type="long"/>
                    </params>
                </method>
                <method name="getMessage" type="String" line="158"/>
                <method name="getTime" type="long" line="162"/>
            </class>
            <javadoc line="167">
                Return the current time, in millis or nanos as appropriate                
            </javadoc>
            <method name="getCurrentTime" type="long" line="170">
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <javadoc line="178">
                Sets the start time.  Ideally, this is the earliest time available
                  during the startup of a Java applet or application.  This time is
                  later used to analyze the difference between the initial startup
                  time and other events in the system (such as an applet&apos;s init time).                
            </javadoc>
            <method name="setStartTime" type="void" line="184">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="185">
                    <declaration name="nowTime" type="long" line="186"/>
                </scope>
            </method>
            <javadoc line="191">
                Sets the base time, output can then
                  be displayed as offsets from the base time;.                
            </javadoc>
            <method name="setBaseTime" type="void" line="195">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                Sets the start time.
                  This version of the method is
                  given the time to log, instead of expecting this method to
                  get the time itself.  This is done in case the time was
                  recorded much earlier than this method was called.                
            </javadoc>
            <method name="setStartTime" type="void" line="208">
                <params>
                    <param name="message" type="String"/>
                    <param name="time" type="long"/>
                </params>
                <scope line="209"/>
            </method>
            <javadoc line="214">
                Gets the start time, which should be the time when
                  the java process started, prior to the VM actually being
                  loaded.                
            </javadoc>
            <method name="getStartTime" type="long" line="219">
                <scope line="220"/>
                <scope line="222"/>
            </method>
            <javadoc line="227">
                Sets the value of a given time and returns the index of the
                  slot that that time was stored in.                
            </javadoc>
            <method name="setTime" type="int" line="231">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="232">
                    <declaration name="nowTime" type="long" line="233"/>
                </scope>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Sets the value of a given time and returns the index of the
                  slot that that time was stored in.
                  This version of the method is
                  given the time to log, instead of expecting this method to
                  get the time itself.  This is done in case the time was
                  recorded much earlier than this method was called.                
            </javadoc>
            <method name="setTime" type="int" line="248">
                <params>
                    <param name="message" type="String"/>
                    <param name="time" type="long"/>
                </params>
                <comment line="251">
                    times is already synchronized, but we need to ensure that
                     the size used in times.set() is the same used when returning
                     the index of that operation.                    
                </comment>
                <scope line="249">
                    <scope line="253"/>
                </scope>
                <scope line="257"/>
            </method>
            <javadoc line="262">
                Returns time at given index.                
            </javadoc>
            <method name="getTimeAtIndex" type="long" line="265">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="266"/>
                <scope line="268"/>
            </method>
            <javadoc line="273">
                Returns message at given index.                
            </javadoc>
            <method name="getMessageAtIndex" type="String" line="276">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="277"/>
                <scope line="279"/>
            </method>
            <javadoc line="284">
                Outputs all data to parameter-specified Writer object                
            </javadoc>
            <method name="outputLog" type="void" line="287">
                <params>
                    <param name="writer" type="Writer"/>
                </params>
                <scope line="288">
                    <scope line="289">
                        <scope line="290">
                            <scope line="291">
                                <declaration name="td" type="TimeData" line="292"/>
                                <scope line="293"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="301"/>
                </scope>
            </method>
            <javadoc line="308">
                Outputs all data to whatever location the user specified
                  via sun.perflog command-line parameter.                
            </javadoc>
            <method name="outputLog" type="void" line="312"/>
        </class>
    </source>