<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.misc">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.nio.LongBuffer"/>
        <import package="java.security.AccessController"/>
        <class name="PerfCounter" line="6">
            <javadoc line="6">
                Performance counter support for internal JRE classes.
                  This class defines a fixed list of counters for the platform
                  to use as an interim solution until RFE# 6209222 is implemented.
                  The perf counters will be created in the jvmstat perf buffer
                  that the HotSpot VM creates. The default size is 32K and thus
                  the number of counters is bounded.  You can alter the size
                  with -XX:PerfDataMemorySize=&lt;bytes&gt; option. If there is
                  insufficient memory in the jvmstat perf buffer, the C heap memory
                  will be used and thus the application will continue to run if
                  the counters added exceeds the buffer size but the counters
                  will be missing.
                  See HotSpot jvmstat implementation for certain circumstances
                  that the jvmstat perf buffer is not supported.                
            </javadoc>
            <declaration name="perf" type="Perf" line="22"/>
            <declaration name="V_Constant" type="int" line="23"/>
            <declaration name="V_Monotonic" type="int" line="24"/>
            <declaration name="V_Variable" type="int" line="25"/>
            <declaration name="U_None" type="int" line="26"/>
            <declaration name="name" type="String" line="27"/>
            <declaration name="lb" type="LongBuffer" line="28"/>
            <method name="PerfCounter" type="constructor" line="29">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="bb" type="ByteBuffer" line="31"/>
            </method>
            <method name="newPerfCounter" type="PerfCounter" line="35">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="newConstantPerfCounter" type="PerfCounter" line="38">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="c" type="PerfCounter" line="39"/>
            </method>
            <javadoc line="42">
                Returns the current value of the perf counter.                
            </javadoc>
            <method name="get" type="long" line="45"/>
            <javadoc line="48">
                Sets the value of the perf counter to the given newValue.                
            </javadoc>
            <method name="set" type="void" line="51">
                <params>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="54">
                Adds the given value to the perf counter.                
            </javadoc>
            <method name="add" type="void" line="57">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="res" type="long" line="58"/>
            </method>
            <javadoc line="61">
                Increments the perf counter with 1.                
            </javadoc>
            <method name="increment" type="void" line="64"/>
            <javadoc line="67">
                Adds the given interval to the perf counter.                
            </javadoc>
            <method name="addTime" type="void" line="70">
                <params>
                    <param name="interval" type="long"/>
                </params>
            </method>
            <javadoc line="73">
                Adds the elapsed time from the given start time (ns) to the perf counter.                
            </javadoc>
            <method name="addElapsedTimeFrom" type="void" line="76">
                <params>
                    <param name="startTime" type="long"/>
                </params>
            </method>
            <method name="toString" type="String" line="79"/>
            <class name="CoreCounters" line="82">
                <declaration name="pdt" type="PerfCounter" line="83"/>
                <declaration name="lc" type="PerfCounter" line="84"/>
                <declaration name="lct" type="PerfCounter" line="85"/>
                <declaration name="rcbt" type="PerfCounter" line="86"/>
                <declaration name="zfc" type="PerfCounter" line="87"/>
                <declaration name="zfot" type="PerfCounter" line="88"/>
            </class>
            <class name="WindowsClientCounters" line="90">
                <declaration name="d3dAvailable" type="PerfCounter" line="91"/>
            </class>
            <javadoc line="93">
                Number of findClass calls                
            </javadoc>
            <method name="getFindClasses" type="PerfCounter" line="96"/>
            <javadoc line="99">
                Time (ns) spent in finding classes that includes
                  lookup and read class bytes and defineClass                
            </javadoc>
            <method name="getFindClassTime" type="PerfCounter" line="103"/>
            <javadoc line="106">
                Time (ns) spent in finding classes                
            </javadoc>
            <method name="getReadClassBytesTime" type="PerfCounter" line="109"/>
            <javadoc line="112">
                Time (ns) spent in the parent delegation to
                  the parent of the defining class loader                
            </javadoc>
            <method name="getParentDelegationTime" type="PerfCounter" line="116"/>
            <javadoc line="119">
                Number of zip files opened.                
            </javadoc>
            <method name="getZipFileCount" type="PerfCounter" line="122"/>
            <javadoc line="125">
                Time (ns) spent in opening the zip files that
                  includes building the entries hash table                
            </javadoc>
            <method name="getZipFileOpenTime" type="PerfCounter" line="129"/>
            <javadoc line="132">
                D3D graphic pipeline available                
            </javadoc>
            <method name="getD3DAvailable" type="PerfCounter" line="135"/>
        </class>
    </source>