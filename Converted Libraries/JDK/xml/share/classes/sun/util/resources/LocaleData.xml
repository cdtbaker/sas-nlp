<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util.resources">
        <import package="java.io.File"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.util.LocaleDataMetaInfo"/>
        <class name="LocaleData" line="54">
            <comment line="220">
                Returns true if the non European resources jar file exists in jre
                 extension directory.
                 @returns true if the jar file is there. Otherwise, returns false.                
            </comment>
            <comment line="246">
                This method gets the locale string list from LocaleDataMetaInfo class and
                 then contructs the Locale array based on the locale string returned above.
                 @returns the Locale array for the supported locale of JRE.                
            </comment>
            <javadoc line="54">
                Provides information about and access to resource bundles in the
                  sun.text.resources and sun.util.resources package.                
                <author>
                    Asmus Freytag                    
                </author>
                <author>
                    Mark Davis                    
                </author>
            </javadoc>
            <declaration name="localeDataJarName" type="String" line="64"/>
            <class name="AvailableLocales" line="66">
                <comment line="151">
                                        
                </comment>
                <comment line="159">
                    This method overrides the default implementation to search
                     from a prebaked locale string list to determin the candidate
                     locale list.
                    
                     @param baseName the resource bundle base name.
                            locale   the requested locale for the resource bundle.
                     @returns a list of candidate locales to search from.
                     @exception NullPointerException if baseName or locale is null.                    
                </comment>
                <comment line="203">
                    Overrides &quot;getFallbackLocale&quot; to return null so
                     that the fallback locale will be null.
                     @param baseName the resource bundle base name.
                            locale   the requested locale for the resource bundle.
                     @return null for the fallback locale.
                     @exception NullPointerException if baseName or locale is null.                    
                </comment>
                <javadoc line="66">
                    Lazy load available locales.                    
                </javadoc>
                <declaration name="localeList" type="Locale[]" line="70"/>
            </class>
            <javadoc line="73">
                Returns a list of the installed locales. Currently, this simply returns
                  the list of locales for which a sun.text.resources.FormatData bundle
                  exists. This bundle family happens to be the one with the broadest
                  locale coverage in the JRE.                
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="79"/>
            <javadoc line="83">
                Gets a calendar data resource bundle, using privileges
                  to allow accessing a sun. package.                
            </javadoc>
            <method name="getCalendarData" type="ResourceBundle" line="87">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="91">
                Gets a currency names resource bundle, using privileges
                  to allow accessing a sun. package.                
            </javadoc>
            <method name="getCurrencyNames" type="OpenListResourceBundle" line="95">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="99">
                Gets a locale names resource bundle, using privileges
                  to allow accessing a sun. package.                
            </javadoc>
            <method name="getLocaleNames" type="OpenListResourceBundle" line="103">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="107">
                Gets a time zone names resource bundle, using privileges
                  to allow accessing a sun. package.                
            </javadoc>
            <method name="getTimeZoneNames" type="OpenListResourceBundle" line="111">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="115">
                Gets a collation data resource bundle, using privileges
                  to allow accessing a sun. package.                
            </javadoc>
            <method name="getCollationData" type="ResourceBundle" line="119">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="123">
                Gets a date format data resource bundle, using privileges
                  to allow accessing a sun. package.                
            </javadoc>
            <method name="getDateFormatData" type="ResourceBundle" line="127">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="131">
                Gets a number format data resource bundle, using privileges
                  to allow accessing a sun. package.                
            </javadoc>
            <method name="getNumberFormatData" type="ResourceBundle" line="135">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="getBundle" type="ResourceBundle" line="139">
                <params>
                    <param name="baseName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <anonymous_class line="140">
                    <method name="run" type="Object" line="141"/>
                </anonymous_class>
            </method>
            <class name="LocaleDataResourceBundleControl" line="149">
                <extends class="ResourceBundle.Control"/>
                <comment line="151">
                                        
                </comment>
                <comment line="159">
                    This method overrides the default implementation to search
                     from a prebaked locale string list to determin the candidate
                     locale list.
                    
                     @param baseName the resource bundle base name.
                            locale   the requested locale for the resource bundle.
                     @returns a list of candidate locales to search from.
                     @exception NullPointerException if baseName or locale is null.                    
                </comment>
                <comment line="203">
                    Overrides &quot;getFallbackLocale&quot; to return null so
                     that the fallback locale will be null.
                     @param baseName the resource bundle base name.
                            locale   the requested locale for the resource bundle.
                     @return null for the fallback locale.
                     @exception NullPointerException if baseName or locale is null.                    
                </comment>
                <declaration name="rbControlInstance" type="LocaleDataResourceBundleControl" line="151"/>
                <method name="getRBControlInstance" type="LocaleDataResourceBundleControl" line="154"/>
                <method name="getCandidateLocales" type="List<Locale>" line="169">
                    <params>
                        <param name="baseName" type="String"/>
                        <param name="locale" type="Locale"/>
                    </params>
                    <comment line="171">
                                                
                    </comment>
                    <comment line="190">
                        Every locale string in the locale string list returned from
                        the above getSupportedLocaleString is enclosed
                        within two white spaces so that we could check some locale
                        such as &quot;en&quot;.                        
                    </comment>
                    <declaration name="candidates" type="List&lt;Locale&gt;" line="170"/>
                    <declaration name="localeString" type="String" line="172"/>
                    <scope line="174"/>
                    <scope line="178">
                        <declaration name="loc" type="Locale" line="179"/>
                        <declaration name="lstr" type="String" line="180"/>
                        <scope line="181"/>
                        <scope line="183">
                            <declaration name="idx" type="int" line="185"/>
                            <scope line="186"/>
                        </scope>
                        <scope line="195"/>
                    </scope>
                </method>
                <method name="getFallbackLocale" type="Locale" line="211">
                    <params>
                        <param name="baseName" type="String"/>
                        <param name="locale" type="Locale"/>
                    </params>
                    <scope line="212"/>
                </method>
            </class>
            <method name="isNonEuroLangSupported" type="boolean" line="224">
                <comment line="231">
                    Peek at the installed extension directory to see if
                    localedata.jar is installed or not.                    
                </comment>
                <declaration name="sep" type="String" line="225"/>
                <declaration name="localeDataJar" type="String" line="226"/>
                <declaration name="f" type="File" line="234"/>
                <anonymous_class line="236">
                    <method name="run" type="Boolean" line="237"/>
                </anonymous_class>
                <declaration name="isNonEuroResJarExist" type="boolean" line="235"/>
            </method>
            <method name="createLocaleList" type="Locale[]" line="251">
                <comment line="259">
                                        
                </comment>
                <declaration name="supportedLocaleString" type="String" line="252"/>
                <scope line="255"/>
                <declaration name="barIndex" type="int" line="260"/>
                <declaration name="localeStringTokenizer" type="StringTokenizer" line="261"/>
                <scope line="262"/>
                <scope line="266"/>
                <declaration name="locales" type="Locale[]" line="271"/>
                <scope line="272">
                    <declaration name="currentToken" type="String" line="273"/>
                    <scope line="274"/>
                    <scope line="276"/>
                    <scope line="278"/>
                </scope>
            </method>
        </class>
    </source>