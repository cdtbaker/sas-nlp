<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util.logging">
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.StringWriter"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.Date"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.misc.JavaLangAccess"/>
        <import package="sun.misc.SharedSecrets"/>
        <class name="PlatformLogger" line="16">
            <javadoc line="16">
                Platform logger provides an API for the JRE components to log
                  messages.  This enables the runtime components to eliminate the
                  static dependency of the logging facility and also defers the
                  java.util.logging initialization until it is enabled.
                  In addition, the PlatformLogger API can be used if the logging
                  module does not exist.
                  If the logging facility is not enabled, the platform loggers
                  will output log messages per the default logging configuration
                  (see below). In this implementation, it does not log the
                  the stack frame information issuing the log message.
                  When the logging facility is enabled (at startup or runtime),
                  the java.util.logging.Logger will be created for each platform
                  logger and all log messages will be forwarded to the Logger
                  to handle.
                  Logging facility is &quot;enabled&quot; when one of the following
                  conditions is met:
                  1) a system property &quot;java.util.logging.config.class&quot; or
                  &quot;java.util.logging.config.file&quot; is set
                  2) java.util.logging.LogManager or java.util.logging.Logger
                  is referenced that will trigger the logging initialization.
                  Default logging configuration:
                  global logging level = INFO
                  handlers = java.util.logging.ConsoleHandler
                  java.util.logging.ConsoleHandler.level = INFO
                  java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
                  Limitation:
                  &lt;JAVA_HOME&gt;/lib/logging.properties is the system-wide logging
                  configuration defined in the specification and read in the
                  default case to configure any java.util.logging.Logger instances.
                  Platform loggers will not detect if &lt;JAVA_HOME&gt;/lib/logging.properties
                  is modified. In other words, unless the java.util.logging API
                  is used at runtime or the logging system properties is set,
                  the platform loggers will use the default setting described above.
                  The platform loggers are designed for JDK developers use and
                  this limitation can be workaround with setting
                  -Djava.util.logging.config.file system property.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="OFF" type="int" line="56"/>
            <declaration name="SEVERE" type="int" line="57"/>
            <declaration name="WARNING" type="int" line="58"/>
            <declaration name="INFO" type="int" line="59"/>
            <declaration name="CONFIG" type="int" line="60"/>
            <declaration name="FINE" type="int" line="61"/>
            <declaration name="FINER" type="int" line="62"/>
            <declaration name="FINEST" type="int" line="63"/>
            <declaration name="ALL" type="int" line="64"/>
            <declaration name="defaultLevel" type="int" line="65"/>
            <declaration name="loggingEnabled" type="boolean" line="66"/>
            <scope line="67">
                <anonymous_class line="68">
                    <method name="run" type="Boolean" line="69">
                        <declaration name="cname" type="String" line="70"/>
                        <declaration name="fname" type="String" line="71"/>
                    </method>
                </anonymous_class>
            </scope>
            <declaration name="loggers" type="Map&amp;lt;String,WeakReference&amp;lt;PlatformLogger&amp;gt;&amp;gt;" line="77"/>
            <javadoc line="78">
                Returns a PlatformLogger of a given name.                
            </javadoc>
            <method name="getLogger" type="PlatformLogger" line="81">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="log" type="PlatformLogger" line="82"/>
                <declaration name="ref" type="WeakReference&amp;lt;PlatformLogger&amp;gt;" line="83"/>
                <scope line="84"/>
                <scope line="87"/>
            </method>
            <javadoc line="93">
                Initialize java.util.logging.Logger objects for all platform loggers.
                  This method is called from LogManager.readPrimordialConfiguration().                
            </javadoc>
            <method name="redirectPlatformLoggers" type="void" line="97">
                <scope line="100">
                    <declaration name="ref" type="WeakReference&amp;lt;PlatformLogger&amp;gt;" line="101"/>
                    <declaration name="plog" type="PlatformLogger" line="102"/>
                    <scope line="103"/>
                </scope>
            </method>
            <javadoc line="108">
                Creates a new JavaLogger that the platform logger uses                
            </javadoc>
            <method name="newJavaLogger" type="void" line="111"/>
            <declaration name="logger" type="LoggerProxy" line="114"/>
            <method name="PlatformLogger" type="constructor" line="115">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="123">
                A convenience method to test if the logger is turned off.
                  (i.e. its level is OFF).                
            </javadoc>
            <method name="isEnabled" type="boolean" line="127"/>
            <javadoc line="130">
                Gets the name for this platform logger.                
            </javadoc>
            <method name="getName" type="String" line="133"/>
            <javadoc line="136">
                Returns true if a message of the given level would actually
                  be logged by this logger.                
            </javadoc>
            <method name="isLoggable" type="boolean" line="140">
                <params>
                    <param name="level" type="int"/>
                </params>
            </method>
            <javadoc line="143">
                Gets the current log level.  Returns 0 if the current effective level
                  is not set (equivalent to Logger.getLevel() returns null).                
            </javadoc>
            <method name="getLevel" type="int" line="147"/>
            <javadoc line="150">
                Sets the log level.                
            </javadoc>
            <method name="setLevel" type="void" line="153">
                <params>
                    <param name="newLevel" type="int"/>
                </params>
            </method>
            <javadoc line="156">
                Logs a SEVERE message.                
            </javadoc>
            <method name="severe" type="void" line="159">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="severe" type="void" line="162">
                <params>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="severe" type="void" line="165">
                <params>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <javadoc line="168">
                Logs a WARNING message.                
            </javadoc>
            <method name="warning" type="void" line="171">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="warning" type="void" line="174">
                <params>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="warning" type="void" line="177">
                <params>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <javadoc line="180">
                Logs an INFO message.                
            </javadoc>
            <method name="info" type="void" line="183">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="info" type="void" line="186">
                <params>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="info" type="void" line="189">
                <params>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <javadoc line="192">
                Logs a CONFIG message.                
            </javadoc>
            <method name="config" type="void" line="195">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="config" type="void" line="198">
                <params>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="config" type="void" line="201">
                <params>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <javadoc line="204">
                Logs a FINE message.                
            </javadoc>
            <method name="fine" type="void" line="207">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="fine" type="void" line="210">
                <params>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="fine" type="void" line="213">
                <params>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <javadoc line="216">
                Logs a FINER message.                
            </javadoc>
            <method name="finer" type="void" line="219">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="finer" type="void" line="222">
                <params>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="finer" type="void" line="225">
                <params>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <javadoc line="228">
                Logs a FINEST message.                
            </javadoc>
            <method name="finest" type="void" line="231">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="finest" type="void" line="234">
                <params>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="finest" type="void" line="237">
                <params>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <class name="LoggerProxy" line="240">
                <javadoc line="240">
                    Default platform logging support - output messages to
                      System.err - equivalent to ConsoleHandler with SimpleFormatter.                    
                </javadoc>
                <declaration name="defaultStream" type="PrintStream" line="245"/>
                <declaration name="name" type="String" line="246"/>
                <declaration name="levelValue" type="int" line="247"/>
                <declaration name="effectiveLevel" type="int" line="248"/>
                <method name="LoggerProxy" type="constructor" line="249">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="LoggerProxy" type="constructor" line="252">
                    <params>
                        <param name="name" type="String"/>
                        <param name="level" type="int"/>
                    </params>
                </method>
                <method name="isEnabled" type="boolean" line="256"/>
                <method name="getLevel" type="int" line="259"/>
                <method name="setLevel" type="void" line="262">
                    <params>
                        <param name="newLevel" type="int"/>
                    </params>
                </method>
                <method name="doLog" type="void" line="266">
                    <params>
                        <param name="level" type="int"/>
                        <param name="msg" type="String"/>
                    </params>
                    <scope line="267"/>
                </method>
                <method name="doLog" type="void" line="272">
                    <params>
                        <param name="level" type="int"/>
                        <param name="msg" type="String"/>
                        <param name="thrown" type="Throwable"/>
                    </params>
                    <scope line="273"/>
                </method>
                <method name="doLog" type="void" line="278">
                    <params>
                        <param name="level" type="int"/>
                        <param name="msg" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                    <scope line="279"/>
                    <declaration name="newMsg" type="String" line="282"/>
                </method>
                <method name="isLoggable" type="boolean" line="285">
                    <params>
                        <param name="level" type="int"/>
                    </params>
                    <scope line="286"/>
                </method>
                <method name="formatMessage" type="String" line="291">
                    <params>
                        <param name="format" type="String"/>
                        <param name="parameters" type="Object"/>
                    </params>
                    <scope line="292">
                        <scope line="293"/>
                        <scope line="296"/>
                    </scope>
                    <scope line="301"/>
                </method>
                <declaration name="formatString" type="String" line="305"/>
                <declaration name="date" type="Date" line="306"/>
                <method name="format" type="String" line="307">
                    <params>
                        <param name="level" type="int"/>
                        <param name="msg" type="String"/>
                        <param name="thrown" type="Throwable"/>
                    </params>
                    <declaration name="throwable" type="String" line="309"/>
                    <scope line="310">
                        <declaration name="sw" type="StringWriter" line="311"/>
                        <declaration name="pw" type="PrintWriter" line="312"/>
                    </scope>
                </method>
                <method name="getCallerInfo" type="String" line="320">
                    <declaration name="sourceClassName" type="String" line="321"/>
                    <declaration name="sourceMethodName" type="String" line="322"/>
                    <declaration name="access" type="JavaLangAccess" line="323"/>
                    <declaration name="throwable" type="Throwable" line="324"/>
                    <declaration name="depth" type="int" line="325"/>
                    <declaration name="logClassName" type="String" line="326"/>
                    <declaration name="lookingForLogger" type="boolean" line="327"/>
                    <scope line="328">
                        <declaration name="frame" type="StackTraceElement" line="329"/>
                        <declaration name="cname" type="String" line="330"/>
                        <scope line="331">
                            <scope line="332"/>
                        </scope>
                        <scope line="336">
                            <scope line="337"/>
                        </scope>
                    </scope>
                    <scope line="344"/>
                    <scope line="347"/>
                </method>
            </class>
            <class name="JavaLogger" line="352">
                <extends class="LoggerProxy"/>
                <javadoc line="352">
                    JavaLogger forwards all the calls to its corresponding
                      java.util.logging.Logger object.                    
                </javadoc>
                <declaration name="levelObjects" type="Map&amp;lt;Integer,Object&amp;gt;" line="357"/>
                <scope line="358">
                    <scope line="359"/>
                </scope>
                <method name="getLevelObjects" type="void" line="363">
                    <declaration name="levelArray" type="int[]" line="364"/>
                    <scope line="365">
                        <declaration name="level" type="Object" line="366"/>
                    </scope>
                </method>
                <declaration name="javaLogger" type="Object" line="370"/>
                <method name="JavaLogger" type="constructor" line="371">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="JavaLogger" type="constructor" line="374">
                    <params>
                        <param name="name" type="String"/>
                        <param name="level" type="int"/>
                    </params>
                    <scope line="377"/>
                </method>
                <javadoc line="381">
                    Let Logger.log() do the filtering since if the level of a
                      platform logger is altered directly from
                      java.util.logging.Logger.setLevel(), the levelValue will
                      not be updated.                    
                </javadoc>
                <method name="doLog" type="void" line="387">
                    <params>
                        <param name="level" type="int"/>
                        <param name="msg" type="String"/>
                    </params>
                </method>
                <method name="doLog" type="void" line="390">
                    <params>
                        <param name="level" type="int"/>
                        <param name="msg" type="String"/>
                        <param name="t" type="Throwable"/>
                    </params>
                </method>
                <method name="doLog" type="void" line="393">
                    <params>
                        <param name="level" type="int"/>
                        <param name="msg" type="String"/>
                        <param name="params" type="Object"/>
                    </params>
                    <declaration name="len" type="int" line="394"/>
                    <declaration name="sparams" type="Object[]" line="395"/>
                    <scope line="396"/>
                </method>
                <method name="isEnabled" type="boolean" line="401">
                    <declaration name="level" type="Object" line="402"/>
                </method>
                <method name="getLevel" type="int" line="405">
                    <declaration name="level" type="Object" line="406"/>
                    <scope line="407">
                        <scope line="408">
                            <scope line="409"/>
                        </scope>
                    </scope>
                </method>
                <method name="setLevel" type="void" line="416">
                    <params>
                        <param name="newLevel" type="int"/>
                    </params>
                </method>
                <method name="isLoggable" type="boolean" line="420">
                    <params>
                        <param name="level" type="int"/>
                    </params>
                </method>
            </class>
            <method name="getLevelName" type="String" line="424">
                <params>
                    <param name="level" type="int"/>
                </params>
            </method>
        </class>
    </source>