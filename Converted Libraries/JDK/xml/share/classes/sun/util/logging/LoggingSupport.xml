<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util.logging">
        <import package="java.lang.reflect.Field"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Date"/>
        <class name="LoggingSupport" line="6">
            <javadoc line="6">
                Internal API to support JRE implementation to detect if the java.util.logging
                  support is available but with no dependency on the java.util.logging
                  classes.  This LoggingSupport class provides several static methods to
                  access the java.util.logging functionality that requires the caller
                  to ensure that the logging support is {@linkplain #isAvailable available}before invoking it.                
                <see>
                    sun.util.logging.PlatformLogger if you want to log messages even
                      if the logging support is not available                    
                </see>
            </javadoc>
            <method name="LoggingSupport" type="constructor" line="16"/>
            <declaration name="proxy" type="LoggingProxy" line="18"/>
            <anonymous_class line="18">
                <method name="run" type="LoggingProxy" line="19">
                    <scope line="20">
                        <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="21"/>
                        <declaration name="f" type="Field" line="22"/>
                    </scope>
                    <scope line="26"/>
                    <scope line="29"/>
                    <scope line="32"/>
                </method>
            </anonymous_class>
            <javadoc line="38">
                Returns true if java.util.logging support is available.                
            </javadoc>
            <method name="isAvailable" type="boolean" line="41"/>
            <method name="ensureAvailable" type="void" line="44"/>
            <method name="getLoggerNames" type="java.util.List&lt;String&gt;" line="47"/>
            <method name="getLoggerLevel" type="String" line="51">
                <params>
                    <param name="loggerName" type="String"/>
                </params>
            </method>
            <method name="setLoggerLevel" type="void" line="55">
                <params>
                    <param name="loggerName" type="String"/>
                    <param name="levelName" type="String"/>
                </params>
            </method>
            <method name="getParentLoggerName" type="String" line="59">
                <params>
                    <param name="loggerName" type="String"/>
                </params>
            </method>
            <method name="getLogger" type="Object" line="63">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getLevel" type="Object" line="67">
                <params>
                    <param name="logger" type="Object"/>
                </params>
            </method>
            <method name="setLevel" type="void" line="71">
                <params>
                    <param name="logger" type="Object"/>
                    <param name="newLevel" type="Object"/>
                </params>
            </method>
            <method name="isLoggable" type="boolean" line="75">
                <params>
                    <param name="logger" type="Object"/>
                    <param name="level" type="Object"/>
                </params>
            </method>
            <method name="log" type="void" line="79">
                <params>
                    <param name="logger" type="Object"/>
                    <param name="level" type="Object"/>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="log" type="void" line="83">
                <params>
                    <param name="logger" type="Object"/>
                    <param name="level" type="Object"/>
                    <param name="msg" type="String"/>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <method name="log" type="void" line="87">
                <params>
                    <param name="logger" type="Object"/>
                    <param name="level" type="Object"/>
                    <param name="msg" type="String"/>
                    <param name="params" type="Object"/>
                </params>
            </method>
            <method name="parseLevel" type="Object" line="91">
                <params>
                    <param name="levelName" type="String"/>
                </params>
            </method>
            <method name="getLevelName" type="String" line="95">
                <params>
                    <param name="level" type="Object"/>
                </params>
            </method>
            <declaration name="DEFAULT_FORMAT" type="String" line="99"/>
            <declaration name="FORMAT_PROP_KEY" type="String" line="100"/>
            <method name="getSimpleFormat" type="String" line="101"/>
            <method name="getSimpleFormat" type="String" line="104">
                <params>
                    <param name="useProxy" type="boolean"/>
                </params>
                <anonymous_class line="105">
                    <method name="run" type="String" line="106"/>
                </anonymous_class>
                <declaration name="format" type="String" line="105"/>
                <scope line="111"/>
                <scope line="114">
                    <scope line="115"/>
                    <scope line="118"/>
                </scope>
                <scope line="122"/>
            </method>
        </class>
    </source>