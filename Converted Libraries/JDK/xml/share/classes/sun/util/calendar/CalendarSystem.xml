<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util.calendar">
        <import package="java.lang.reflect.Field"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.Set"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.util.concurrent.ConcurrentMap"/>
        <class name="CalendarSystem" line="39">
            <comment line="78">
                ///////////////////// Calendar Factory Methods /////////////////////////                
            </comment>
            <comment line="82">
                Map of calendar names and calendar class names                
            </comment>
            <comment line="85">
                Map of calendar names and CalendarSystem instances                
            </comment>
            <comment line="181">
                ////////////////////////////// Calendar API //////////////////////////////////                
            </comment>
            <comment line="261">
                no setter                
            </comment>
            <javadoc line="39">
                &lt;code&gt;CalendarSystem&lt;/code&gt; is an abstract class that defines the
                  programming interface to deal with calendar date and time.
                  &lt;p&gt;&lt;code&gt;CalendarSystem&lt;/code&gt; instances are singletons. For
                  example, there exists only one Gregorian calendar instance in the
                  Java runtime environment. A singleton instance can be obtained
                  calling one of the static factory methods.
                  &lt;h4&gt;CalendarDate&lt;/h4&gt;
                  &lt;p&gt;For the methods in a &lt;code&gt;CalendarSystem&lt;/code&gt; that manipulate
                  a &lt;code&gt;CalendarDate&lt;/code&gt;, &lt;code&gt;CalendarDate&lt;/code&gt;s that have
                  been created by the &lt;code&gt;CalendarSystem&lt;/code&gt; must be
                  specified. Otherwise, the methods throw an exception. This is
                  because, for example, a Chinese calendar date can&apos;t be understood
                  by the Hebrew calendar system.
                  &lt;h4&gt;Calendar names&lt;/h4&gt;
                  Each calendar system has a unique name to be identified. The Java
                  runtime in this release supports the following calendar systems.
                  &lt;pre&gt;
                  Name          Calendar System
                  ---------------------------------------
                  gregorian     Gregorian Calendar
                  julian        Julian Calendar
                  japanese      Japanese Imperial Calendar
                  &lt;/pre&gt;                
                <see>
                    CalendarDate                    
                </see>
                <author>
                    Masayoshi Okutsu                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="initialized" type="boolean" line="79"/>
            <declaration name="names" type="ConcurrentMap&lt;String,String&gt;" line="82"/>
            <declaration name="calendars" type="ConcurrentMap&lt;String,CalendarSystem&gt;" line="85"/>
            <declaration name="PACKAGE_NAME" type="String" line="87"/>
            <declaration name="namePairs" type="String[]" line="89"/>
            <method name="initNames" type="void" line="101">
                <comment line="105">
                    Associate a calendar name with its class name and the
                     calendar class name with its date class name.                    
                </comment>
                <declaration name="nameMap" type="ConcurrentMap&lt;String,String&gt;" line="102"/>
                <declaration name="clName" type="StringBuilder" line="106"/>
                <scope line="107">
                    <declaration name="cl" type="String" line="109"/>
                </scope>
                <scope line="112">
                    <scope line="113"/>
                </scope>
            </method>
            <declaration name="GREGORIAN_INSTANCE" type="Gregorian" line="121"/>
            <javadoc line="123">
                Returns the singleton instance of the &lt;code&gt;Gregorian&lt;/code&gt;
                  calendar system.                
                <return>
                    the <code>Gregorian</code> instance                    
                </return>
            </javadoc>
            <method name="getGregorianCalendar" type="Gregorian" line="129"/>
            <javadoc line="133">
                Returns a &lt;code&gt;CalendarSystem&lt;/code&gt; specified by the calendar
                  name. The calendar name has to be one of the supported calendar
                  names.                
                <param>
                    calendarName the calendar name                    
                </param>
                <return>
                    the <code>CalendarSystem</code> specified by
                      <code>calendarName</code>, or null if there is no
                      <code>CalendarSystem</code> associated with the given calendar name.                    
                </return>
            </javadoc>
            <method name="forName" type="CalendarSystem" line="143">
                <params>
                    <param name="calendarName" type="String"/>
                </params>
                <comment line="160">
                    Unknown calendar name                    
                </comment>
                <comment line="164">
                    Create the specific kind of local Gregorian calendar system                    
                </comment>
                <scope line="144"/>
                <scope line="148"/>
                <declaration name="cal" type="CalendarSystem" line="152"/>
                <scope line="153"/>
                <declaration name="className" type="String" line="157"/>
                <scope line="158"/>
                <scope line="162"/>
                <scope line="165">
                    <scope line="166">
                        <declaration name="cl" type="Class" line="167"/>
                    </scope>
                    <scope line="169"/>
                </scope>
                <scope line="173"/>
                <declaration name="cs" type="CalendarSystem" line="176"/>
            </method>
            <method name="getName" type="String" line="182"/>
            <javadoc line="182">
                Returns the name of this calendar system.                
            </javadoc>
            <method name="getCalendarDate" type="CalendarDate" line="187"/>
            <method name="getCalendarDate" type="CalendarDate" line="189"/>
            <javadoc line="189">
                Calculates calendar fields from the specified number of
                  milliseconds since the Epoch, January 1, 1970 00:00:00 UTC
                  (Gregorian). This method doesn&apos;t check overflow or underflow
                  when adjusting the millisecond value (representing UTC) with
                  the time zone offsets (i.e., the GMT offset and amount of
                  daylight saving).                
                <param>
                    millis the offset value in milliseconds from January 1,
                      1970 00:00:00 UTC (Gregorian).                    
                </param>
                <return>
                    a <code>CalendarDate</code> instance that contains the
                      calculated calendar field values.                    
                </return>
            </javadoc>
            <method name="getCalendarDate" type="CalendarDate" line="204"/>
            <method name="getCalendarDate" type="CalendarDate" line="206"/>
            <method name="newCalendarDate" type="CalendarDate" line="208"/>
            <javadoc line="208">
                Constructs a &lt;code&gt;CalendarDate&lt;/code&gt; that is specific to this
                  calendar system. All calendar fields have their initial
                  values. The {@link TimeZone#getDefault() default time zone} is
                  set to the instance.                
                <return>
                    a <code>CalendarDate</code> instance that contains the initial
                      calendar field values.                    
                </return>
            </javadoc>
            <method name="newCalendarDate" type="CalendarDate" line="219"/>
            <method name="getTime" type="long" line="221"/>
            <javadoc line="221">
                Returns the number of milliseconds since the Epoch, January 1,
                  1970 00:00:00 UTC (Gregorian), represented by the specified
                  &lt;code&gt;CalendarDate&lt;/code&gt;.                
                <param>
                    date the <code>CalendarDate</code> from which the time
                      value is calculated                    
                </param>
                <return>
                    the number of milliseconds since the Epoch.                    
                </return>
            </javadoc>
            <method name="getYearLength" type="int" line="232"/>
            <javadoc line="232">
                Returns the length in days of the specified year by
                  &lt;code&gt;date&lt;/code&gt;. This method does not perform the
                  normalization with the specified &lt;code&gt;CalendarDate&lt;/code&gt;. The
                  &lt;code&gt;CalendarDate&lt;/code&gt; must be normalized to get a correct
                  value.                
            </javadoc>
            <method name="getYearLengthInMonths" type="int" line="241"/>
            <javadoc line="241">
                Returns the number of months of the specified year. This method
                  does not perform the normalization with the specified
                  &lt;code&gt;CalendarDate&lt;/code&gt;. The &lt;code&gt;CalendarDate&lt;/code&gt; must
                  be normalized to get a correct value.                
            </javadoc>
            <method name="getMonthLength" type="int" line="249"/>
            <javadoc line="249">
                Returns the length in days of the month specified by the calendar
                  date. This method does not perform the normalization with the
                  specified calendar date. The &lt;code&gt;CalendarDate&lt;/code&gt; must
                  be normalized to get a correct value.                
                <param>
                    date the date from which the month value is obtained                    
                </param>
                <return>
                    the number of days in the month                    
                </return>
                <exception>
                    IllegalArgumentException if the specified calendar date
                      doesn't have a valid month value in this calendar system.                    
                </exception>
            </javadoc>
            <method name="getWeekLength" type="int" line="262"/>
            <javadoc line="262">
                Returns the length in days of a week in this calendar
                  system. If this calendar system has multiple radix weeks, this
                  method returns only one of them.                
            </javadoc>
            <method name="getEra" type="Era" line="269"/>
            <javadoc line="269">
                Returns the &lt;code&gt;Era&lt;/code&gt; designated by the era name that
                  has to be known to this calendar system. If no Era is
                  applicable to this calendar system, null is returned.                
                <param>
                    eraName the name of the era                    
                </param>
                <return>
                    the <code>Era</code> designated by
                      <code>eraName</code>, or <code>null</code> if no Era is
                      applicable to this calendar system or the specified era name is
                      not known to this calendar system.                    
                </return>
            </javadoc>
            <method name="getEras" type="Era[]" line="282"/>
            <javadoc line="282">
                Returns valid &lt;code&gt;Era&lt;/code&gt;s of this calendar system. The
                  return value is sorted in the descendant order. (i.e., the first
                  element of the returned array is the oldest era.) If no era is
                  applicable to this calendar system, &lt;code&gt;null&lt;/code&gt; is returned.                
                <return>
                    an array of valid <code>Era</code>s, or
                      <code>null</code> if no era is applicable to this calendar
                      system.                    
                </return>
            </javadoc>
            <method name="setEra" type="void" line="294"/>
            <javadoc line="294">
                @throws IllegalArgumentException if the specified era name is
                  unknown to this calendar system.                
                <see>
                    Era                    
                </see>
            </javadoc>
            <method name="getNthDayOfWeek" type="CalendarDate" line="301"/>
            <javadoc line="301">
                Returns a &lt;code&gt;CalendarDate&lt;/code&gt; of the n-th day of week
                  which is on, after or before the specified date. For example, the
                  first Sunday in April 2002 (Gregorian) can be obtained as
                  below:
                  &lt;pre&gt;&lt;code&gt;
                  Gregorian cal = CalendarSystem.getGregorianCalendar();
                  CalendarDate date = cal.newCalendarDate();
                  date.setDate(2004, cal.APRIL, 1);
                  CalendarDate firstSun = cal.getNthDayOfWeek(1, cal.SUNDAY, date);
                  // firstSun represents April 4, 2004.
                  &lt;/code&gt;&lt;/pre&gt;
                  This method returns a new &lt;code&gt;CalendarDate&lt;/code&gt; instance
                  and doesn&apos;t modify the original date.                
                <param>
                    nth specifies the n-th one. A positive number specifies
                      <em>on or after</em> the <code>date</code>. A non-positive number
                      specifies <em>on or before</em> the <code>date</code>.                    
                </param>
                <param>
                    dayOfWeek the day of week                    
                </param>
                <param>
                    date the date                    
                </param>
                <return>
                    the date of the nth <code>dayOfWeek</code> after
                      or before the specified <code>CalendarDate</code>                    
                </return>
            </javadoc>
            <method name="setTimeOfDay" type="CalendarDate" line="329"/>
            <method name="validate" type="boolean" line="331"/>
            <javadoc line="331">
                Checks whether the calendar fields specified by &lt;code&gt;date&lt;/code&gt;
                  represents a valid date and time in this calendar system. If the
                  given date is valid, &lt;code&gt;date&lt;/code&gt; is marked as &lt;em&gt;normalized&lt;/em&gt;.                
                <param>
                    date the <code>CalendarDate</code> to be validated                    
                </param>
                <return>
                    <code>true</code> if all the calendar fields are consistent,
                      otherwise, <code>false</code> is returned.                    
                </return>
                <exception>
                    NullPointerException if the specified
                      <code>date</code> is <code>null</code>                    
                </exception>
            </javadoc>
            <method name="normalize" type="boolean" line="344"/>
            <javadoc line="344">
                Normalizes calendar fields in the specified
                  &lt;code&gt;date&lt;/code&gt;. Also all {@link CalendarDate#FIELD_UNDEFINEDundefined} fields are set to correct values. The actual
                  normalization process is calendar system dependent.                
                <param>
                    date the calendar date to be validated                    
                </param>
                <return>
                    <code>true</code> if all fields have been normalized;
                      <code>false</code> otherwise.                    
                </return>
                <exception>
                    NullPointerException if the specified
                      <code>date</code> is <code>null</code>                    
                </exception>
            </javadoc>
        </class>
    </source>