<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util.calendar">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Date"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.SimpleTimeZone"/>
        <import package="java.util.TimeZone"/>
        <class name="ZoneInfo" line="14">
            <extends class="TimeZone"/>
            <javadoc line="14">
                &lt;code&gt;ZoneInfo&lt;/code&gt; is an implementation subclass of {@link java.util.TimeZone TimeZone} that represents GMT offsets and
                  daylight saving time transitions of a time zone.
                  &lt;p&gt;
                  The daylight saving time transitions are described in the {@link #transitions transitions} table consisting of a chronological
                  sequence of transitions of GMT offset and/or daylight saving time
                  changes. Since all transitions are represented in UTC, in theory,
                  &lt;code&gt;ZoneInfo&lt;/code&gt; can be used with any calendar systems except
                  for the {@link #getOffset(int,int,int,int,int,int) getOffset}method that takes Gregorian calendar date fields.
                  &lt;p&gt;
                  This table covers transitions from 1900 until 2037 (as of version
                  1.4), Before 1900, it assumes that there was no daylight saving
                  time and the &lt;code&gt;getOffset&lt;/code&gt; methods always return the{@link #getRawOffset} value. No Local Mean Time is supported. If a
                  specified date is beyond the transition table and this time zone is
                  supposed to observe daylight saving time in 2037, it delegates
                  operations to a {@link java.util.SimpleTimeZone SimpleTimeZone}object created using the daylight saving time schedule as of 2037.
                  &lt;p&gt;
                  The date items, transitions, GMT offset(s), etc. are read from a database
                  file. See {@link ZoneInfoFile} for details.                
                <see>
                    java.util.SimpleTimeZone                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="UTC_TIME" type="int" line="37"/>
            <declaration name="STANDARD_TIME" type="int" line="38"/>
            <declaration name="WALL_TIME" type="int" line="39"/>
            <declaration name="OFFSET_MASK" type="long" line="40"/>
            <declaration name="DST_MASK" type="long" line="41"/>
            <declaration name="DST_NSHIFT" type="int" line="42"/>
            <declaration name="ABBR_MASK" type="long" line="43"/>
            <declaration name="TRANSITION_NSHIFT" type="int" line="44"/>
            <declaration name="USE_OLDMAPPING" type="boolean" line="45"/>
            <scope line="46">
                <declaration name="oldmapping" type="String" line="47"/>
            </scope>
            <declaration name="gcal" type="CalendarSystem" line="50"/>
            <declaration name="rawOffset" type="int" line="51"/>
            <javadoc line="51">
                The raw GMT offset in milliseconds between this zone and GMT.
                  Negative offsets are to the west of Greenwich.  To obtain local
                  &lt;em&gt;standard&lt;/em&gt; time, add the offset to GMT time.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rawOffsetDiff" type="int" line="58"/>
            <javadoc line="58">
                Difference in milliseconds from the original GMT offset in case
                  the raw offset value has been modified by calling {@link #setRawOffset}. The initial value is 0.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="checksum" type="int" line="64"/>
            <javadoc line="64">
                A CRC32 value of all pairs of transition time (in milliseconds
                  in &lt;code&gt;long&lt;/code&gt;) in local time and its GMT offset (in
                  seconds in &lt;code&gt;int&lt;/code&gt;) in the chronological order. Byte
                  values of each &lt;code&gt;long&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; are taken
                  in the big endian order (i.e., MSB to LSB).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="dstSavings" type="int" line="73"/>
            <javadoc line="73">
                The amount of time in milliseconds saved during daylight saving
                  time. If &lt;code&gt;useDaylight&lt;/code&gt; is false, this value is 0.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="transitions" type="long[]" line="79"/>
            <javadoc line="79">
                This array describes transitions of GMT offsets of this time
                  zone, including both raw offset changes and daylight saving
                  time changes.
                  A long integer consists of four bit fields.
                  &lt;ul&gt;
                  &lt;li&gt;The most significant 52-bit field represents transition
                  time in milliseconds from Gregorian January 1 1970, 00:00:00
                  GMT.&lt;/li&gt;
                  &lt;li&gt;The next 4-bit field is reserved and must be 0.&lt;/li&gt;
                  &lt;li&gt;The next 4-bit field is an index value to {@link #offsetsoffsets[]} for the amount of daylight saving at the
                  transition. If this value is zero, it means that no daylight
                  saving, not the index value zero.&lt;/li&gt;
                  &lt;li&gt;The least significant 4-bit field is an index value to{@link #offsets offsets[]} for &lt;em&gt;total&lt;/em&gt; GMT offset at the
                  transition.&lt;/li&gt;
                  &lt;/ul&gt;
                  If this time zone doesn&apos;t observe daylight saving time and has
                  never changed any GMT offsets in the past, this value is null.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="offsets" type="int[]" line="100"/>
            <javadoc line="100">
                This array holds all unique offset values in
                  milliseconds. Index values to this array are stored in the
                  transitions array elements.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="simpleTimeZoneParams" type="int[]" line="107"/>
            <javadoc line="107">
                SimpleTimeZone parameter values. It has to have either 8 for{@link java.util.SimpleTimeZone#SimpleTimeZone(int,String,int,int,int,int,int,int,int,int,int) the
                  11-argument SimpleTimeZone constructor} or 10 for {@link java.util.SimpleTimeZone#SimpleTimeZone(int,String,int,int,int,int,int,int,int,int,int,int,int) the
                  13-argument SimpleTimeZone constructor} parameters.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="willGMTOffsetChange" type="boolean" line="114"/>
            <javadoc line="114">
                True if the raw GMT offset value would change after the time
                  zone data has been generated; false, otherwise. The default
                  value is false.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="dirty" type="boolean" line="121"/>
            <javadoc line="121">
                True if the object has been modified after its instantiation.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="125"/>
            <javadoc line="126">
                A constructor.                
            </javadoc>
            <method name="ZoneInfo" type="constructor" line="129"/>
            <javadoc line="131">
                A Constructor for CustomID.                
            </javadoc>
            <method name="ZoneInfo" type="constructor" line="134">
                <params>
                    <param name="ID" type="String"/>
                    <param name="rawOffset" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Constructs a ZoneInfo instance.                
                <param>
                    ID time zone name                    
                </param>
                <param>
                    rawOffset GMT offset in milliseconds                    
                </param>
                <param>
                    dstSavings daylight saving value in milliseconds or 0
                      (zero) if this time zone doesn&apos;t observe Daylight Saving Time.                    
                </param>
                <param>
                    checksum CRC32 value with all transitions table entry
                      values                    
                </param>
                <param>
                    transitions transition table                    
                </param>
                <param>
                    offsets offset value table                    
                </param>
                <param>
                    simpleTimeZoneParams parameter values for constructing
                      SimpleTimeZone                    
                </param>
                <param>
                    willGMTOffsetChange the value of willGMTOffsetChange                    
                </param>
            </javadoc>
            <method name="ZoneInfo" type="constructor" line="151">
                <params>
                    <param name="ID" type="String"/>
                    <param name="rawOffset" type="int"/>
                    <param name="dstSavings" type="int"/>
                    <param name="checksum" type="int"/>
                    <param name="transitions" type="long[]"/>
                    <param name="offsets" type="int[]"/>
                    <param name="simpleTimeZoneParams" type="int[]"/>
                    <param name="willGMTOffsetChange" type="boolean"/>
                </params>
            </method>
            <javadoc line="161">
                Returns the difference in milliseconds between local time and UTC
                  of given time, taking into account both the raw offset and the
                  effect of daylight savings.                
                <param>
                    date the milliseconds in UTC                    
                </param>
                <return>
                    the milliseconds to add to UTC to get local wall time                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="168">
                <params>
                    <param name="date" type="long"/>
                </params>
            </method>
            <method name="getOffsets" type="int" line="171">
                <params>
                    <param name="utc" type="long"/>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
            <method name="getOffsetsByStandard" type="int" line="174">
                <params>
                    <param name="standard" type="long"/>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
            <method name="getOffsetsByWall" type="int" line="177">
                <params>
                    <param name="wall" type="long"/>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
            <method name="getOffsets" type="int" line="180">
                <params>
                    <param name="date" type="long"/>
                    <param name="offsets" type="int[]"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="181">
                    <declaration name="offset" type="int" line="182"/>
                    <scope line="183"/>
                </scope>
                <declaration name="index" type="int" line="190"/>
                <scope line="191">
                    <declaration name="offset" type="int" line="192"/>
                    <scope line="193"/>
                </scope>
                <scope line="199">
                    <declaration name="val" type="long" line="200"/>
                    <declaration name="offset" type="int" line="201"/>
                    <scope line="202">
                        <declaration name="dst" type="int" line="203"/>
                        <declaration name="save" type="int" line="204"/>
                    </scope>
                </scope>
                <declaration name="tz" type="SimpleTimeZone" line="210"/>
                <scope line="211">
                    <declaration name="rawoffset" type="int" line="212"/>
                    <declaration name="msec" type="long" line="213"/>
                    <scope line="214"/>
                    <declaration name="dstoffset" type="int" line="217"/>
                    <scope line="218"/>
                    <scope line="221"/>
                </scope>
                <declaration name="offset" type="int" line="227"/>
                <scope line="228"/>
            </method>
            <method name="getTransitionIndex" type="int" line="234">
                <params>
                    <param name="date" type="long"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="low" type="int" line="235"/>
                <declaration name="high" type="int" line="236"/>
                <scope line="237">
                    <declaration name="mid" type="int" line="238"/>
                    <declaration name="val" type="long" line="239"/>
                    <declaration name="midVal" type="long" line="240"/>
                    <scope line="241"/>
                    <scope line="244">
                        <declaration name="dstIndex" type="int" line="245"/>
                        <scope line="246"/>
                    </scope>
                    <scope line="250"/>
                    <scope line="253"/>
                    <scope line="256"/>
                </scope>
                <scope line="260"/>
            </method>
            <javadoc line="265">
                Returns the difference in milliseconds between local time and
                  UTC, taking into account both the raw offset and the effect of
                  daylight savings, for the specified date and time.  This method
                  assumes that the start and end month are distinct.  This method
                  assumes a Gregorian calendar for calculations.
                  &lt;p&gt;
                  &lt;em&gt;Note: In general, clients should use{@link Calendar#ZONE_OFFSET Calendar.get(ZONE_OFFSET)} +{@link Calendar#DST_OFFSET Calendar.get(DST_OFFSET)}instead of calling this method.&lt;/em&gt;                
                <param>
                    era       The era of the given date. The value must be either
                      GregorianCalendar.AD or GregorianCalendar.BC.                    
                </param>
                <param>
                    year      The year in the given date.                    
                </param>
                <param>
                    month     The month in the given date. Month is 0-based. e.g.,
                      0 for January.                    
                </param>
                <param>
                    day       The day-in-month of the given date.                    
                </param>
                <param>
                    dayOfWeek The day-of-week of the given date.                    
                </param>
                <param>
                    millis    The milliseconds in day in &lt;em&gt;standard&lt;/em&gt; local time.                    
                </param>
                <return>
                    The milliseconds to add to UTC to get local time.                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="283">
                <params>
                    <param name="era" type="int"/>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="day" type="int"/>
                    <param name="dayOfWeek" type="int"/>
                    <param name="milliseconds" type="int"/>
                </params>
                <scope line="284"/>
                <scope line="287"/>
                <scope line="290"/>
                <declaration name="date" type="CalendarDate" line="293"/>
                <scope line="295"/>
                <scope line="298"/>
                <scope line="301"/>
                <declaration name="dateInMillis" type="long" line="304"/>
            </method>
            <javadoc line="308">
                Sets the base time zone offset from GMT. This operation
                  modifies all the transitions of this ZoneInfo object, including
                  historical ones, if applicable.                
                <param>
                    offsetMillis the base time zone offset to GMT.                    
                </param>
                <see>
                    getRawOffset                    
                </see>
            </javadoc>
            <method name="setRawOffset" type="void" line="315">
                <params>
                    <param name="offsetMillis" type="int"/>
                </params>
                <scope line="316"/>
                <scope line="320"/>
            </method>
            <javadoc line="325">
                Returns the GMT offset of the current date. This GMT offset
                  value is not modified during Daylight Saving Time.                
                <return>
                    the GMT offset value in milliseconds to add to UTC time
                      to get local standard time                    
                </return>
            </javadoc>
            <method name="getRawOffset" type="int" line="331">
                <scope line="332"/>
                <declaration name="offsets" type="int[]" line="335"/>
            </method>
            <method name="isDirty" type="boolean" line="339"/>
            <method name="getLastRawOffset" type="int" line="342"/>
            <javadoc line="345">
                Queries if this time zone uses Daylight Saving Time in the last known rule.                
            </javadoc>
            <method name="useDaylightTime" type="boolean" line="348"/>
            <method name="observesDaylightTime" type="boolean" line="351">
                <scope line="352"/>
                <scope line="355"/>
                <declaration name="utc" type="long" line="358"/>
                <declaration name="index" type="int" line="359"/>
                <scope line="360"/>
                <scope line="363">
                    <scope line="364"/>
                </scope>
            </method>
            <javadoc line="370">
                Queries if the specified date is in Daylight Saving Time.                
            </javadoc>
            <method name="inDaylightTime" type="boolean" line="373">
                <params>
                    <param name="date" type="Date"/>
                </params>
                <scope line="374"/>
                <scope line="377"/>
                <declaration name="utc" type="long" line="380"/>
                <declaration name="index" type="int" line="381"/>
                <scope line="382"/>
                <scope line="385"/>
                <declaration name="tz" type="SimpleTimeZone" line="388"/>
                <scope line="389"/>
            </method>
            <javadoc line="394">
                Returns the amount of time in milliseconds that the clock is advanced
                  during daylight saving time is in effect in its last daylight saving time rule.                
                <return>
                    the number of milliseconds the time is advanced with respect to
                      standard time when daylight saving time is in effect.                    
                </return>
            </javadoc>
            <method name="getDSTSavings" type="int" line="400"/>
            <javadoc line="403">
                Returns a string representation of this time zone.                
                <return>
                    the string                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="407"/>
            <javadoc line="410">
                Gets all available IDs supported in the Java run-time.                
                <return>
                    an array of time zone IDs.                    
                </return>
            </javadoc>
            <method name="getAvailableIDs" type="String[]" line="414">
                <declaration name="idList" type="List&amp;lt;String&amp;gt;" line="415"/>
                <declaration name="excluded" type="List&amp;lt;String&amp;gt;" line="416"/>
                <scope line="417">
                    <declaration name="list" type="List&amp;lt;String&amp;gt;" line="418"/>
                </scope>
                <declaration name="ids" type="String[]" line="423"/>
            </method>
            <javadoc line="426">
                Gets all available IDs that have the same value as the
                  specified raw GMT offset.                
                <param>
                    rawOffset the GMT offset in milliseconds. This
                      value should not include any daylight saving time.                    
                </param>
                <return>
                    an array of time zone IDs.                    
                </return>
            </javadoc>
            <method name="getAvailableIDs" type="String[]" line="433">
                <params>
                    <param name="rawOffset" type="int"/>
                </params>
                <declaration name="result" type="String[]" line="434"/>
                <declaration name="matched" type="List&amp;lt;String&amp;gt;" line="435"/>
                <declaration name="IDs" type="List&amp;lt;String&amp;gt;" line="436"/>
                <declaration name="rawOffsets" type="int[]" line="437"/>
                <scope line="438">
                    <scope line="439">
                        <declaration name="indices" type="byte[]" line="440"/>
                        <scope line="441">
                            <scope line="442">
                                <scope line="444"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="excluded" type="List&amp;lt;String&amp;gt;" line="452"/>
                <scope line="453">
                    <scope line="454">
                        <declaration name="zi" type="TimeZone" line="455"/>
                        <scope line="456"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="465">
                Gets the ZoneInfo for the given ID.                
                <param>
                    ID the ID for a ZoneInfo. See TimeZone for detail.                    
                </param>
                <return>
                    the specified ZoneInfo object, or null if there is no
                      time zone of the ID.                    
                </return>
            </javadoc>
            <method name="getTimeZone" type="TimeZone" line="471">
                <params>
                    <param name="ID" type="String"/>
                </params>
                <declaration name="givenID" type="String" line="472"/>
                <scope line="473">
                    <declaration name="compatibleID" type="String" line="474"/>
                    <scope line="475"/>
                </scope>
                <declaration name="zi" type="ZoneInfo" line="480"/>
                <scope line="481">
                    <scope line="482">
                        <declaration name="map" type="Map&amp;lt;String,String&amp;gt;" line="483"/>
                        <declaration name="alias" type="String" line="484"/>
                        <scope line="485">
                            <scope line="487"/>
                        </scope>
                    </scope>
                    <scope line="495"/>
                </scope>
                <scope line="498"/>
            </method>
            <declaration name="lastRule" type="SimpleTimeZone" line="503"/>
            <javadoc line="504">
                Returns a SimpleTimeZone object representing the last GMT
                  offset and DST schedule or null if this time zone doesn&apos;t
                  observe DST.                
            </javadoc>
            <method name="getLastRule" type="SimpleTimeZone" line="509">
                <scope line="510"/>
            </method>
            <javadoc line="515">
                Returns a SimpleTimeZone object that represents the last
                  known daylight saving time rules.                
                <return>
                    a SimpleTimeZone object or null if this time zone
                      doesn&apos;t observe DST.                    
                </return>
            </javadoc>
            <method name="getLastRuleInstance" type="SimpleTimeZone" line="521">
                <scope line="522"/>
                <scope line="525"/>
            </method>
            <javadoc line="530">
                Returns a copy of this &lt;code&gt;ZoneInfo&lt;/code&gt;.                
            </javadoc>
            <method name="clone" type="Object" line="533">
                <declaration name="zi" type="ZoneInfo" line="534"/>
            </method>
            <javadoc line="538">
                Returns a hash code value calculated from the GMT offset and
                  transitions.                
                <return>
                    a hash code of this time zone                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="543"/>
            <javadoc line="546">
                Compares the equity of two ZoneInfo objects.                
                <param>
                    obj the object to be compared with                    
                </param>
                <return>
                    true if given object is same as this ZoneInfo object,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="552">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="553"/>
                <scope line="556"/>
                <declaration name="that" type="ZoneInfo" line="559"/>
            </method>
            <javadoc line="562">
                Returns true if this zone has the same raw GMT offset value and
                  transition table as another zone info. If the specified
                  TimeZone object is not a ZoneInfo instance, this method returns
                  true if the specified TimeZone object has the same raw GMT
                  offset value with no daylight saving time.                
                <param>
                    other the ZoneInfo object to be compared with                    
                </param>
                <return>
                    true if the given &lt;code&gt;TimeZone&lt;/code&gt; has the same
                      GMT offset and transition information; false, otherwise.                    
                </return>
            </javadoc>
            <method name="hasSameRules" type="boolean" line="572">
                <params>
                    <param name="other" type="TimeZone"/>
                </params>
                <scope line="573"/>
                <scope line="576"/>
                <scope line="579">
                    <scope line="580"/>
                    <scope line="583"/>
                </scope>
                <scope line="588"/>
            </method>
            <declaration name="aliasTable" type="SoftReference&amp;lt;Map&amp;gt;" line="593"/>
            <javadoc line="594">
                Returns a Map from alias time zone IDs to their standard
                  time zone IDs.                
                <return>
                    the Map that holds the mappings from alias time zone IDs
                      to their standard time zone IDs, or null if
                      &lt;code&gt;ZoneInfoMappings&lt;/code&gt; file is not available.                    
                </return>
            </javadoc>
            <method name="getAliasTable" type="Map&lt;String,String&gt;" line="601">
                <declaration name="aliases" type="Map&amp;lt;String,String&amp;gt;" line="602"/>
                <declaration name="cache" type="SoftReference&amp;lt;Map&amp;gt;" line="603"/>
                <scope line="604">
                    <scope line="606"/>
                </scope>
                <scope line="611"/>
            </method>
            <method name="readObject" type="void" line="616">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>