<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util.calendar">
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.nio.file.FileSystems"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <class name="ZoneInfoFile" line="16">
            <javadoc line="16">
                &lt;code&gt;ZoneInfoFile&lt;/code&gt; reads Zone information files in the
                  &amp;lt;java.home&amp;gt;/lib/zi directory and provides time zone
                  information in the form of a {@link ZoneInfo} object. Also, it
                  reads the ZoneInfoMappings file to obtain time zone IDs information
                  that is used by the {@link ZoneInfo} class. The directory layout
                  and data file formats are as follows.
                  &lt;p&gt;&lt;strong&gt;Directory layout&lt;/strong&gt;&lt;p&gt;
                  All zone data files and ZoneInfoMappings are put under the
                  &amp;lt;java.home&amp;gt;/lib/zi directory. A path name for a given time
                  zone ID is a concatenation of &amp;lt;java.home&amp;gt;/lib/zi/ and the
                  time zone ID. (The file separator is replaced with the platform
                  dependent value. e.g., &apos;\&apos; for Win32.) An example layout will look
                  like as follows.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  &amp;lt;java.home&amp;gt;/lib/zi/Africa/Addis_Ababa
                  /Africa/Dakar
                  /America/Los_Angeles
                  /Asia/Singapore
                  /EET
                  /Europe/Oslo
                  /GMT
                  /Pacific/Galapagos
                  ...
                  /ZoneInfoMappings
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  A zone data file has specific information of each zone.
                  &lt;code&gt;ZoneInfoMappings&lt;/code&gt; has global information of zone IDs so
                  that the information can be obtained without instantiating all time
                  zones.
                  &lt;p&gt;&lt;strong&gt;File format&lt;/strong&gt;&lt;p&gt;
                  Two binary-file formats based on a simple Tag-Length-Value format are used
                  to describe TimeZone information. The generic format of a data file is:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  DataFile {
                  u1              magic[7];
                  u1              version;
                  data_item       data[];
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  where &lt;code&gt;magic&lt;/code&gt; is a magic number identifying a file
                  format, &lt;code&gt;version&lt;/code&gt; is the format version number, and
                  &lt;code&gt;data&lt;/code&gt; is one or more &lt;code&gt;data_item&lt;/code&gt;s. The
                  &lt;code&gt;data_item&lt;/code&gt; structure is:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  data_item {
                  u1              tag;
                  u2              length;
                  u1              value[length];
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  where &lt;code&gt;tag&lt;/code&gt; indicates the data type of the item,
                  &lt;code&gt;length&lt;/code&gt; is a byte count of the following
                  &lt;code&gt;value&lt;/code&gt; that is the content of item data.
                  &lt;p&gt;
                  All data is stored in the big-endian order. There is no boundary
                  alignment between date items.
                  &lt;p&gt;&lt;strong&gt;1. ZoneInfo data file&lt;/strong&gt;&lt;p&gt;
                  Each ZoneInfo data file consists of the following members.
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  ZoneInfoDataFile {
                  u1              magic[7];
                  u1              version;
                  SET OF&lt;sup&gt;1&lt;/sup&gt; {
                  transition            transitions&lt;sup&gt;2&lt;/sup&gt;;
                  offset_table          offsets&lt;sup&gt;2&lt;/sup&gt;;
                  simpletimezone        stzparams&lt;sup&gt;2&lt;/sup&gt;;
                  raw_offset            rawoffset;
                  dstsaving             dst;
                  checksum              crc32;
                  gmtoffsetwillchange   gmtflag&lt;sup&gt;2&lt;/sup&gt;;
                  }
                  }
                  1: an unordered collection of zero or one occurrences of each item
                  2: optional item
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;code&gt;magic&lt;/code&gt; is a byte-string constant identifying the
                  ZoneInfo data file.  This field must be &lt;code&gt;&quot;javazi&amp;#92;0&quot;&lt;/code&gt;
                  defined as {@link #JAVAZI_LABEL}.
                  &lt;p&gt;
                  &lt;code&gt;version&lt;/code&gt; is the version number of the file format. This
                  will be used for compatibility check. This field must be
                  &lt;code&gt;0x01&lt;/code&gt; in this version.
                  &lt;p&gt;
                  &lt;code&gt;transition&lt;/code&gt;, &lt;code&gt;offset_table&lt;/code&gt; and
                  &lt;code&gt;simpletimezone&lt;/code&gt; have information of time transition
                  from the past to the future.  Therefore, these structures don&apos;t
                  exist if the zone didn&apos;t change zone names and haven&apos;t applied DST in
                  the past, and haven&apos;t planned to apply it.  (e.g. Asia/Tokyo zone)
                  &lt;p&gt;
                  &lt;code&gt;raw_offset&lt;/code&gt;, &lt;code&gt;dstsaving&lt;/code&gt; and &lt;code&gt;checksum&lt;/code&gt;
                  exist in every zoneinfo file. They are used by TimeZone.class indirectly.
                  &lt;p&gt;&lt;strong&gt;1.1 &lt;code&gt;transition&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;&lt;a name=&quot;transition&quot;&gt;&lt;/a&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  transition {
                  u1      tag;              // 0x04 : constant
                  u2      length;           // byte length of whole values
                  s8      value[length/8];  // transitions in `long&apos;
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  See {@link ZoneInfo#transitions ZoneInfo.transitions} about the value.
                  &lt;p&gt;&lt;strong&gt;1.2 &lt;code&gt;offset_table&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  offset_table {
                  u1      tag;              // 0x05 : constant
                  u2      length;           // byte length of whole values
                  s4      value[length/4];  // offset values in `int&apos;
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;1.3 &lt;code&gt;simpletimezone&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  See {@link ZoneInfo#simpleTimeZoneParams ZoneInfo.simpleTimeZoneParams}about the value.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  simpletimezone {
                  u1      tag;              // 0x06 : constant
                  u2      length;           // byte length of whole values
                  s4      value[length/4];  // SimpleTimeZone parameters
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  See {@link ZoneInfo#offsets ZoneInfo.offsets} about the value.
                  &lt;p&gt;&lt;strong&gt;1.4 &lt;code&gt;raw_offset&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  raw_offset {
                  u1      tag;              // 0x01 : constant
                  u2      length;           // must be 4.
                  s4      value;            // raw GMT offset [millisecond]
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  See {@link ZoneInfo#rawOffset ZoneInfo.rawOffset} about the value.
                  &lt;p&gt;&lt;strong&gt;1.5 &lt;code&gt;dstsaving&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  Value has dstSaving in seconds.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  dstsaving {
                  u1      tag;              // 0x02 : constant
                  u2      length;           // must be 2.
                  s2      value;            // DST save value [second]
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  See {@link ZoneInfo#dstSavings ZoneInfo.dstSavings} about value.
                  &lt;p&gt;&lt;strong&gt;1.6 &lt;code&gt;checksum&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  checksum {
                  u1      tag;              // 0x03 : constant
                  u2      length;           // must be 4.
                  s4      value;            // CRC32 value of transitions
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  See {@link ZoneInfo#checksum ZoneInfo.checksum}.
                  &lt;p&gt;&lt;strong&gt;1.7 &lt;code&gt;gmtoffsetwillchange&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  This record has a flag value for {@link ZoneInfo#rawOffsetWillChange}.
                  If this record is not present in a zoneinfo file, 0 is assumed for
                  the value.
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  gmtoffsetwillchange {
                  u1      tag;             // 0x07 : constant
                  u2      length;          // must be 1.
                  u1      value;           // 1: if the GMT raw offset will change
                  // in the future, 0, otherwise.
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;2. ZoneInfoMappings file&lt;/strong&gt;&lt;p&gt;
                  The ZoneInfoMappings file consists of the following members.
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  ZoneInfoMappings {
                  u1      magic[7];
                  u1      version;
                  SET OF {
                  versionName                   version;
                  zone_id_table                 zoneIDs;
                  raw_offset_table              rawoffsets;
                  raw_offset_index_table        rawoffsetindices;
                  alias_table                   aliases;
                  excluded_list                 excludedList;
                  }
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;code&gt;magic&lt;/code&gt; is a byte-string constant which has the file type.
                  This field must be &lt;code&gt;&quot;javazm&amp;#92;0&quot;&lt;/code&gt; defined as {@link #JAVAZM_LABEL}.
                  &lt;p&gt;
                  &lt;code&gt;version&lt;/code&gt; is the version number of this file
                  format. This will be used for compatibility check. This field must
                  be &lt;code&gt;0x01&lt;/code&gt; in this version.
                  &lt;p&gt;
                  &lt;code&gt;versionName&lt;/code&gt; shows which version of Olson&apos;s data has been used
                  to generate this ZoneInfoMappings. (e.g. &lt;code&gt;tzdata2000g&lt;/code&gt;) &lt;br&gt;
                  This field is for trouble-shooting and isn&apos;t usually used in runtime.
                  &lt;p&gt;
                  &lt;code&gt;zone_id_table&lt;/code&gt;, &lt;code&gt;raw_offset_index_table&lt;/code&gt; and
                  &lt;code&gt;alias_table&lt;/code&gt; are general information of supported
                  zones.
                  &lt;p&gt;&lt;strong&gt;2.1 &lt;code&gt;zone_id_table&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  The list of zone IDs included in the zi database. The list does
                  &lt;em&gt;not&lt;/em&gt; include zone IDs, if any, listed in excludedList.
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  zone_id_table {
                  u1      tag;              // 0x40 : constant
                  u2      length;           // byte length of whole values
                  u2      zone_id_count;
                  zone_id value[zone_id_count];
                  }
                  zone_id {
                  u1      byte_length;      // byte length of id
                  u1      id[byte_length];  // zone name string
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;2.2 &lt;code&gt;raw_offset_table&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  raw_offset_table {
                  u1      tag;              // 0x41 : constant
                  u2      length;           // byte length of whole values
                  s4      value[length/4];  // raw GMT offset in milliseconds
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;2.3 &lt;code&gt;raw_offset_index_table&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  raw_offset_index_table {
                  u1      tag;              // 0x42 : constant
                  u2      length;           // byte length of whole values
                  u1      value[length];
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;2.4 &lt;code&gt;alias_table&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  alias_table {
                  u1      tag;              // 0x43 : constant
                  u2      length;           // byte length of whole values
                  u2      nentries;         // number of id-pairs
                  id_pair value[nentries];
                  }
                  id_pair {
                  zone_id aliasname;
                  zone_id ID;
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;2.5 &lt;code&gt;versionName&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  versionName {
                  u1      tag;              // 0x44 : constant
                  u2      length;           // byte length of whole values
                  u1      value[length];
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;&lt;strong&gt;2.6 &lt;code&gt;excludeList&lt;/code&gt; structure&lt;/strong&gt;&lt;p&gt;
                  The list of zone IDs whose zones will change their GMT offsets
                  (a.k.a. raw offsets) some time in the future. Those IDs must be
                  added to the list of zone IDs for getAvailableIDs(). Also they must
                  be examined for getAvailableIDs(int) to determine the
                  &lt;em&gt;current&lt;/em&gt; GMT offsets.
                  &lt;br&gt;
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  excluded_list {
                  u1      tag;              // 0x45 : constant
                  u2      length;           // byte length of whole values
                  u2      nentries;         // number of zone_ids
                  zone_id value[nentries];  // excluded zone IDs
                  }
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="JAVAZI_LABEL" type="byte[]" line="318"/>
            <javadoc line="318">
                The magic number for the ZoneInfo data file format.                
            </javadoc>
            <declaration name="JAVAZI_LABEL_LENGTH" type="int" line="322"/>
            <declaration name="JAVAZI_VERSION" type="byte" line="323"/>
            <javadoc line="323">
                The ZoneInfo data file format version number. Must increase
                  one when any incompatible change has been made.                
            </javadoc>
            <declaration name="TAG_RawOffset" type="byte" line="328"/>
            <javadoc line="328">
                Raw offset data item tag.                
            </javadoc>
            <declaration name="TAG_LastDSTSaving" type="byte" line="332"/>
            <javadoc line="332">
                Known last Daylight Saving Time save value data item tag.                
            </javadoc>
            <declaration name="TAG_CRC32" type="byte" line="336"/>
            <javadoc line="336">
                Checksum data item tag.                
            </javadoc>
            <declaration name="TAG_Transition" type="byte" line="340"/>
            <javadoc line="340">
                Transition data item tag.                
            </javadoc>
            <declaration name="TAG_Offset" type="byte" line="344"/>
            <javadoc line="344">
                Offset table data item tag.                
            </javadoc>
            <declaration name="TAG_SimpleTimeZone" type="byte" line="348"/>
            <javadoc line="348">
                SimpleTimeZone parameters data item tag.                
            </javadoc>
            <declaration name="TAG_GMTOffsetWillChange" type="byte" line="352"/>
            <javadoc line="352">
                Raw GMT offset will change in the future.                
            </javadoc>
            <declaration name="JAVAZM_FILE_NAME" type="String" line="356"/>
            <javadoc line="356">
                The ZoneInfoMappings file name.                
            </javadoc>
            <declaration name="JAVAZM_LABEL" type="byte[]" line="360"/>
            <javadoc line="360">
                The magic number for the ZoneInfoMappings file format.                
            </javadoc>
            <declaration name="JAVAZM_LABEL_LENGTH" type="int" line="364"/>
            <declaration name="JAVAZM_VERSION" type="byte" line="365"/>
            <javadoc line="365">
                The ZoneInfoMappings file format version number. Must increase
                  one when any incompatible change has been made.                
            </javadoc>
            <declaration name="TAG_ZoneIDs" type="byte" line="370"/>
            <javadoc line="370">
                Time zone IDs data item tag.                
            </javadoc>
            <declaration name="TAG_RawOffsets" type="byte" line="374"/>
            <javadoc line="374">
                Raw GMT offsets table data item tag.                
            </javadoc>
            <declaration name="TAG_RawOffsetIndices" type="byte" line="378"/>
            <javadoc line="378">
                Indices to the raw GMT offset table data item tag.                
            </javadoc>
            <declaration name="TAG_ZoneAliases" type="byte" line="382"/>
            <javadoc line="382">
                Time zone aliases table data item tag.                
            </javadoc>
            <declaration name="TAG_TZDataVersion" type="byte" line="386"/>
            <javadoc line="386">
                Olson&apos;s public zone information version tag.                
            </javadoc>
            <declaration name="TAG_ExcludedZones" type="byte" line="390"/>
            <javadoc line="390">
                Excluded zones item tag. (Added in Mustang)                
            </javadoc>
            <declaration name="zoneInfoObjects" type="Map&amp;lt;String,ZoneInfo&amp;gt;" line="394"/>
            <declaration name="ziDir" type="String" line="395"/>
            <anonymous_class line="395">
                <method name="run" type="String" line="396">
                    <declaration name="zi" type="String" line="397"/>
                    <scope line="398"/>
                    <scope line="401"/>
                </method>
            </anonymous_class>
            <javadoc line="407">
                Converts the given time zone ID to a platform dependent path
                  name. For example, &quot;America/Los_Angeles&quot; is converted to
                  &quot;America\Los_Angeles&quot; on Win32.                
                <return>
                    a modified ID replacing &apos;/&apos; with {@link java.io.File#separatorChar File.separatorChar} if needed.                    
                </return>
            </javadoc>
            <method name="getFileName" type="String" line="413">
                <params>
                    <param name="ID" type="String"/>
                </params>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                Gets a ZoneInfo with the given GMT offset. The object
                  has its ID in the format of GMT{+|-}hh:mm.                
                <param>
                    originalId the given custom id (before normalized such as &quot;GMT+9&quot;)                    
                </param>
                <param>
                    gmtOffset GMT offset &lt;em&gt;in milliseconds&lt;/em&gt;                    
                </param>
                <return>
                    a ZoneInfo constructed with the given GMT offset                    
                </return>
            </javadoc>
            <method name="getCustomTimeZone" type="ZoneInfo" line="426">
                <params>
                    <param name="originalId" type="String"/>
                    <param name="gmtOffset" type="int"/>
                </params>
                <declaration name="id" type="String" line="427"/>
                <declaration name="zi" type="ZoneInfo" line="428"/>
                <scope line="429">
                    <scope line="432"/>
                </scope>
            </method>
            <method name="toCustomID" type="String" line="438">
                <params>
                    <param name="gmtOffset" type="int"/>
                </params>
                <declaration name="sign" type="char" line="439"/>
                <declaration name="offset" type="int" line="440"/>
                <scope line="441"/>
                <scope line="444"/>
                <declaration name="hh" type="int" line="448"/>
                <declaration name="mm" type="int" line="449"/>
                <declaration name="buf" type="char[]" line="450"/>
                <scope line="451"/>
                <scope line="455"/>
            </method>
            <javadoc line="461">
                @return a ZoneInfo instance created for the specified id, or
                  null if there is no time zone data file found for the specified
                  id.                
            </javadoc>
            <method name="getZoneInfo" type="ZoneInfo" line="466">
                <params>
                    <param name="id" type="String"/>
                </params>
                <declaration name="zi" type="ZoneInfo" line="467"/>
                <scope line="468">
                    <scope line="470"/>
                </scope>
            </method>
            <method name="getFromCache" type="ZoneInfo" line="477">
                <params>
                    <param name="id" type="String"/>
                </params>
                <scope line="478"/>
            </method>
            <method name="addToCache" type="ZoneInfo" line="483">
                <params>
                    <param name="id" type="String"/>
                    <param name="zi" type="ZoneInfo"/>
                </params>
                <scope line="484"/>
                <scope line="487">
                    <declaration name="zone" type="ZoneInfo" line="488"/>
                    <scope line="489"/>
                </scope>
            </method>
            <method name="createZoneInfo" type="ZoneInfo" line="496">
                <params>
                    <param name="id" type="String"/>
                </params>
                <declaration name="buf" type="byte[]" line="497"/>
                <scope line="498"/>
                <declaration name="index" type="int" line="501"/>
                <declaration name="filesize" type="int" line="502"/>
                <declaration name="rawOffset" type="int" line="503"/>
                <declaration name="dstSavings" type="int" line="504"/>
                <declaration name="checksum" type="int" line="505"/>
                <declaration name="willGMTOffsetChange" type="boolean" line="506"/>
                <declaration name="transitions" type="long[]" line="507"/>
                <declaration name="offsets" type="int[]" line="508"/>
                <declaration name="simpleTimeZoneParams" type="int[]" line="509"/>
                <scope line="510">
                    <scope line="511">
                        <scope line="512"/>
                    </scope>
                    <scope line="517"/>
                    <scope line="521">
                        <declaration name="tag" type="byte" line="522"/>
                        <declaration name="len" type="int" line="523"/>
                        <scope line="524"/>
                        <scope line="529">
                            <declaration name="val" type="int" line="530"/>
                        </scope>
                        <scope line="538">
                            <declaration name="val" type="short" line="539"/>
                        </scope>
                        <scope line="545">
                            <declaration name="val" type="int" line="546"/>
                        </scope>
                        <scope line="554">
                            <declaration name="n" type="int" line="555"/>
                            <scope line="557">
                                <declaration name="val" type="long" line="558"/>
                            </scope>
                        </scope>
                        <scope line="571">
                            <declaration name="n" type="int" line="572"/>
                            <scope line="574">
                                <declaration name="val" type="int" line="575"/>
                            </scope>
                        </scope>
                        <scope line="584">
                            <scope line="585"/>
                            <declaration name="n" type="int" line="589"/>
                            <scope line="591">
                                <declaration name="val" type="int" line="592"/>
                            </scope>
                        </scope>
                        <scope line="601">
                            <scope line="602"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="615"/>
                <scope line="619"/>
            </method>
            <declaration name="zoneIDs" type="SoftReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;" line="625"/>
            <method name="getZoneIDs" type="List&lt;String&gt;" line="626">
                <declaration name="ids" type="List&amp;lt;String&amp;gt;" line="627"/>
                <declaration name="cache" type="SoftReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;" line="628"/>
                <scope line="629">
                    <scope line="631"/>
                </scope>
                <declaration name="buf" type="byte[]" line="635"/>
                <declaration name="index" type="int" line="637"/>
                <declaration name="filesize" type="int" line="638"/>
                <scope line="639">
                    <scope line="640">
                        <declaration name="tag" type="byte" line="641"/>
                        <declaration name="len" type="int" line="642"/>
                        <scope line="645">
                            <declaration name="n" type="int" line="646"/>
                            <scope line="648">
                                <declaration name="m" type="byte" line="649"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="661"/>
            </method>
            <javadoc line="667">
                @return an alias table in HashMap where a key is an alias ID
                  (e.g., &quot;PST&quot;) and its value is a real time zone ID (e.g.,
                  &quot;America/Los_Angeles&quot;).                
            </javadoc>
            <method name="getZoneAliases" type="Map&lt;String,String&gt;" line="672">
                <declaration name="buf" type="byte[]" line="673"/>
                <declaration name="index" type="int" line="674"/>
                <declaration name="filesize" type="int" line="675"/>
                <declaration name="aliases" type="Map&amp;lt;String,String&amp;gt;" line="676"/>
                <scope line="677">
                    <scope line="678">
                        <declaration name="tag" type="byte" line="679"/>
                        <declaration name="len" type="int" line="680"/>
                        <scope line="683">
                            <declaration name="n" type="int" line="684"/>
                            <scope line="686">
                                <declaration name="m" type="byte" line="687"/>
                                <declaration name="name" type="String" line="688"/>
                                <declaration name="realName" type="String" line="691"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="703"/>
            </method>
            <declaration name="excludedIDs" type="SoftReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;" line="709"/>
            <declaration name="hasNoExcludeList" type="boolean" line="710"/>
            <javadoc line="711">
                @return a List of zone IDs for zones that will change their GMT
                  offsets in some future time.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getExcludedZones" type="List&lt;String&gt;" line="716">
                <scope line="717"/>
                <declaration name="excludeList" type="List&amp;lt;String&amp;gt;" line="720"/>
                <declaration name="cache" type="SoftReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;" line="721"/>
                <scope line="722">
                    <scope line="724"/>
                </scope>
                <declaration name="buf" type="byte[]" line="728"/>
                <declaration name="index" type="int" line="729"/>
                <declaration name="filesize" type="int" line="730"/>
                <scope line="731">
                    <scope line="732">
                        <declaration name="tag" type="byte" line="733"/>
                        <declaration name="len" type="int" line="734"/>
                        <scope line="737">
                            <declaration name="n" type="int" line="738"/>
                            <scope line="740">
                                <declaration name="m" type="byte" line="741"/>
                                <declaration name="name" type="String" line="742"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="754"/>
                <scope line="758"/>
                <scope line="761"/>
            </method>
            <declaration name="rawOffsetIndices" type="SoftReference&amp;lt;byte[]&amp;gt;" line="766"/>
            <method name="getRawOffsetIndices" type="byte[]" line="767">
                <declaration name="indices" type="byte[]" line="768"/>
                <declaration name="cache" type="SoftReference&amp;lt;byte[]&amp;gt;" line="769"/>
                <scope line="770">
                    <scope line="772"/>
                </scope>
                <declaration name="buf" type="byte[]" line="776"/>
                <declaration name="index" type="int" line="777"/>
                <declaration name="filesize" type="int" line="778"/>
                <scope line="779">
                    <scope line="780">
                        <declaration name="tag" type="byte" line="781"/>
                        <declaration name="len" type="int" line="782"/>
                        <scope line="785">
                            <scope line="787"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="798"/>
            </method>
            <declaration name="rawOffsets" type="SoftReference&amp;lt;int[]&amp;gt;" line="804"/>
            <method name="getRawOffsets" type="int[]" line="805">
                <declaration name="offsets" type="int[]" line="806"/>
                <declaration name="cache" type="SoftReference&amp;lt;int[]&amp;gt;" line="807"/>
                <scope line="808">
                    <scope line="810"/>
                </scope>
                <declaration name="buf" type="byte[]" line="814"/>
                <declaration name="index" type="int" line="815"/>
                <declaration name="filesize" type="int" line="816"/>
                <scope line="817">
                    <scope line="818">
                        <declaration name="tag" type="byte" line="819"/>
                        <declaration name="len" type="int" line="820"/>
                        <scope line="823">
                            <declaration name="n" type="int" line="824"/>
                            <scope line="826">
                                <declaration name="val" type="int" line="827"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="841"/>
            </method>
            <declaration name="zoneInfoMappings" type="SoftReference&amp;lt;byte[]&amp;gt;" line="847"/>
            <method name="getZoneInfoMappings" type="byte[]" line="848">
                <declaration name="data" type="byte[]" line="849"/>
                <declaration name="cache" type="SoftReference&amp;lt;byte[]&amp;gt;" line="850"/>
                <scope line="851">
                    <scope line="853"/>
                </scope>
                <scope line="858"/>
                <declaration name="index" type="int" line="861"/>
                <scope line="862">
                    <scope line="863"/>
                </scope>
                <scope line="868"/>
            </method>
            <javadoc line="875">
                Reads the specified file under &amp;lt;java.home&amp;gt;/lib/zi into a buffer.                
                <return>
                    the buffer, or null if any I/O error occurred.                    
                </return>
            </javadoc>
            <method name="readZoneInfoFile" type="byte[]" line="879">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <declaration name="buffer" type="byte[]" line="880"/>
                <scope line="881">
                    <anonymous_class line="882">
                        <method name="run" type="Object" line="883">
                            <declaration name="file" type="File" line="884"/>
                            <scope line="885"/>
                            <declaration name="path" type="String" line="889"/>
                            <declaration name="buf" type="byte[]" line="890"/>
                            <scope line="891">
                                <declaration name="filesize" type="int" line="892"/>
                                <scope line="893">
                                    <declaration name="fis" type="FileInputStream" line="894"/>
                                    <scope line="896">
                                        <scope line="897"/>
                                    </scope>
                                    <scope line="901"/>
                                </scope>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="911">
                    <declaration name="ex" type="Exception" line="912"/>
                    <scope line="913"/>
                </scope>
            </method>
        </class>
    </source>