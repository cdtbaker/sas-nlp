<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util.calendar">
        <import package="java.util.Locale"/>
        <import package="java.util.TimeZone"/>
        <class name="AbstractCalendar" line="31">
            <extends class="CalendarSystem"/>
            <comment line="51">
                The constants assume no leap seconds support.                
            </comment>
            <comment line="57">
                The number of days between January 1, 1 and January 1, 1970 (Gregorian)                
            </comment>
            <javadoc line="31">
                The &lt;code&gt;AbstractCalendar&lt;/code&gt; class provides a framework for
                  implementing a concrete calendar system.
                  &lt;p&gt;&lt;a name=&quot;fixed_date&quot;&gt;&lt;/a&gt;&lt;B&gt;Fixed Date&lt;/B&gt;&lt;br&gt;
                  For implementing a concrete calendar system, each calendar must
                  have the common date numbering, starting from midnight the onset of
                  Monday, January 1, 1 (Gregorian). It is called a &lt;I&gt;fixed date&lt;/I&gt;
                  in this class. January 1, 1 (Gregorian) is fixed date 1. (See
                  Nachum Dershowitz and Edward M. Reingold, &lt;I&gt;CALENDRICAL
                  CALCULATION The Millennium Edition&lt;/I&gt;, Section 1.2 for details.)                
                <author>
                    Masayoshi Okutsu                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="SECOND_IN_MILLIS" type="int" line="51"/>
            <declaration name="MINUTE_IN_MILLIS" type="int" line="52"/>
            <declaration name="HOUR_IN_MILLIS" type="int" line="53"/>
            <declaration name="DAY_IN_MILLIS" type="int" line="54"/>
            <declaration name="EPOCH_OFFSET" type="int" line="57"/>
            <declaration name="eras" type="Era[]" line="59"/>
            <method name="AbstractCalendar" type="constructor" line="61"/>
            <method name="getEra" type="Era" line="64">
                <params>
                    <param name="eraName" type="String"/>
                </params>
                <scope line="65">
                    <scope line="66">
                        <scope line="67"/>
                    </scope>
                </scope>
            </method>
            <method name="getEras" type="Era[]" line="75">
                <declaration name="e" type="Era[]" line="76"/>
                <scope line="77"/>
            </method>
            <method name="setEra" type="void" line="84">
                <params>
                    <param name="date" type="CalendarDate"/>
                    <param name="eraName" type="String"/>
                </params>
                <comment line="87">
                    should report an error???                    
                </comment>
                <scope line="85"/>
                <scope line="88">
                    <declaration name="e" type="Era" line="89"/>
                    <scope line="90"/>
                </scope>
            </method>
            <method name="setEras" type="void" line="98">
                <params>
                    <param name="eras" type="Era[]"/>
                </params>
            </method>
            <method name="getCalendarDate" type="CalendarDate" line="102"/>
            <method name="getCalendarDate" type="CalendarDate" line="106">
                <params>
                    <param name="millis" type="long"/>
                </params>
            </method>
            <method name="getCalendarDate" type="CalendarDate" line="110">
                <params>
                    <param name="millis" type="long"/>
                    <param name="zone" type="TimeZone"/>
                </params>
                <declaration name="date" type="CalendarDate" line="111"/>
            </method>
            <method name="getCalendarDate" type="CalendarDate" line="115">
                <params>
                    <param name="millis" type="long"/>
                    <param name="date" type="CalendarDate"/>
                </params>
                <comment line="117">
                    time of day                    
                </comment>
                <comment line="120">
                    fixed date                    
                </comment>
                <comment line="122">
                    adjust to local time if `date&apos; has time zone.                    
                </comment>
                <comment line="134">
                    We need to calculate the given millis and time zone
                     offset separately for java.util.GregorianCalendar
                     compatibility. (i.e., millis + zoneOffset could cause
                     overflow or underflow, which must be avoided.) Usually
                     days should be 0 and ms is in the range of -13:00 to
                     +14:00. However, we need to deal with extreme cases.                    
                </comment>
                <comment line="150">
                    at most ms is (DAY_IN_MILLIS - 1) * 2.                    
                </comment>
                <comment line="154">
                    at most ms is (1 - DAY_IN_MILLIS) * 2. Adding one
                     DAY_IN_MILLIS results in still negative.                    
                </comment>
                <comment line="162">
                    convert to fixed date (offset from Jan. 1, 1 (Gregorian))                    
                </comment>
                <comment line="165">
                    calculate date fields from the fixed date                    
                </comment>
                <comment line="168">
                    calculate time fields from the time of day                    
                </comment>
                <declaration name="ms" type="int" line="116"/>
                <declaration name="zoneOffset" type="int" line="117"/>
                <declaration name="saving" type="int" line="118"/>
                <declaration name="days" type="long" line="119"/>
                <declaration name="zi" type="TimeZone" line="122"/>
                <scope line="123">
                    <declaration name="offsets" type="int[]" line="124"/>
                    <scope line="125"/>
                    <scope line="127"/>
                </scope>
                <scope line="148"/>
                <scope line="152">
                    <scope line="155"/>
                </scope>
            </method>
            <method name="getTime" type="long" line="174">
                <params>
                    <param name="date" type="CalendarDate"/>
                </params>
                <comment line="184">
                    adjust time zone and daylight saving                    
                </comment>
                <comment line="187">
                    1) 2:30am during starting-DST transition is
                        intrepreted as 2:30am ST
                     2) 5:00pm during DST is still interpreted as 5:00pm ST
                     3) 1:30am during ending-DST transition is interpreted
                        as 1:30am ST (after transition)                    
                </comment>
                <comment line="199">
                    1) 2:30am during starting-DST transition is
                        intrepreted as 3:30am DT
                     2) 5:00pm during DST is intrepreted as 5:00pm DT
                     3) 1:30am during ending-DST transition is interpreted
                        as 1:30am DT/0:30am ST (before transition)                    
                </comment>
                <declaration name="gd" type="long" line="175"/>
                <declaration name="ms" type="long" line="176"/>
                <declaration name="zoneOffset" type="int" line="177"/>
                <declaration name="zi" type="TimeZone" line="178"/>
                <scope line="179">
                    <scope line="180"/>
                    <declaration name="offsets" type="int[]" line="184"/>
                    <scope line="185">
                        <scope line="191"/>
                        <scope line="194"/>
                    </scope>
                    <scope line="197">
                        <scope line="203"/>
                        <scope line="205"/>
                    </scope>
                </scope>
            </method>
            <method name="getTimeOfDay" type="long" line="215">
                <params>
                    <param name="date" type="CalendarDate"/>
                </params>
                <declaration name="fraction" type="long" line="216"/>
                <scope line="217"/>
            </method>
            <method name="getTimeOfDayValue" type="long" line="225">
                <params>
                    <param name="date" type="CalendarDate"/>
                </params>
                <declaration name="fraction" type="long" line="226"/>
            </method>
            <method name="setTimeOfDay" type="CalendarDate" line="236">
                <params>
                    <param name="cdate" type="CalendarDate"/>
                    <param name="fraction" type="int"/>
                </params>
                <comment line="255">
                    If this time of day setting doesn&apos;t affect the date,
                     then restore the normalized state.                    
                </comment>
                <scope line="237"/>
                <declaration name="normalizedState" type="boolean" line="240"/>
                <declaration name="time" type="int" line="241"/>
                <declaration name="hours" type="int" line="242"/>
                <declaration name="minutes" type="int" line="244"/>
                <declaration name="seconds" type="int" line="246"/>
                <scope line="253"/>
            </method>
            <javadoc line="261">
                Returns 7 in this default implementation.                
                <return>
                    7                    
                </return>
            </javadoc>
            <method name="getWeekLength" type="int" line="266"/>
            <method name="isLeapYear" type="boolean" line="270"/>
            <method name="getNthDayOfWeek" type="CalendarDate" line="272">
                <params>
                    <param name="nth" type="int"/>
                    <param name="dayOfWeek" type="int"/>
                    <param name="date" type="CalendarDate"/>
                </params>
                <declaration name="ndate" type="CalendarDate" line="273"/>
                <declaration name="fd" type="long" line="275"/>
                <declaration name="nfd" type="long" line="276"/>
                <scope line="277"/>
                <scope line="279"/>
            </method>
            <javadoc line="286">
                Returns a date of the given day of week before the given fixed
                  date.                
                <param>
                    fixedDate the fixed date                    
                </param>
                <param>
                    dayOfWeek the day of week                    
                </param>
                <return>
                    the calculated date                    
                </return>
            </javadoc>
            <method name="getDayOfWeekDateBefore" type="long" line="294">
                <params>
                    <param name="fixedDate" type="long"/>
                    <param name="dayOfWeek" type="int"/>
                </params>
            </method>
            <javadoc line="298">
                Returns a date of the given day of week that is closest to and
                  after the given fixed date.                
                <param>
                    fixedDate the fixed date                    
                </param>
                <param>
                    dayOfWeek the day of week                    
                </param>
                <return>
                    the calculated date                    
                </return>
            </javadoc>
            <method name="getDayOfWeekDateAfter" type="long" line="306">
                <params>
                    <param name="fixedDate" type="long"/>
                    <param name="dayOfWeek" type="int"/>
                </params>
            </method>
            <javadoc line="310">
                Returns a date of the given day of week on or before the given fixed
                  date.                
                <param>
                    fixedDate the fixed date                    
                </param>
                <param>
                    dayOfWeek the day of week                    
                </param>
                <return>
                    the calculated date                    
                </return>
            </javadoc>
            <method name="getDayOfWeekDateOnOrBefore" type="long" line="319">
                <params>
                    <param name="fixedDate" type="long"/>
                    <param name="dayOfWeek" type="int"/>
                </params>
                <comment line="319">
                    public for java.util.GregorianCalendar                    
                </comment>
                <declaration name="fd" type="long" line="320"/>
                <scope line="321"/>
            </method>
            <method name="getFixedDate" type="long" line="327"/>
            <javadoc line="327">
                Returns the fixed date calculated with the specified calendar
                  date. If the specified date is not normalized, its date fields
                  are normalized.                
                <param>
                    date a <code>CalendarDate</code> with which the fixed
                      date is calculated                    
                </param>
                <return>
                    the calculated fixed date                    
                </return>
                <see>
                    AbstractCalendar.html#fixed_date                    
                </see>
            </javadoc>
            <method name="getCalendarDateFromFixedDate" type="void" line="339"/>
            <javadoc line="339">
                Calculates calendar fields from the specified fixed date. This
                  method stores the calculated calendar field values in the specified
                  &lt;code&gt;CalendarDate&lt;/code&gt;.                
                <param>
                    date a <code>CalendarDate</code> to stored the
                      calculated calendar fields.                    
                </param>
                <param>
                    fixedDate a fixed date to calculate calendar fields                    
                </param>
                <see>
                    AbstractCalendar.html#fixed_date                    
                </see>
            </javadoc>
            <method name="validateTime" type="boolean" line="352">
                <params>
                    <param name="date" type="CalendarDate"/>
                </params>
                <comment line="363">
                    TODO: Leap second support.                    
                </comment>
                <declaration name="t" type="int" line="353"/>
                <scope line="354"/>
                <scope line="358"/>
                <scope line="363"/>
                <scope line="367"/>
            </method>
            <method name="normalizeTime" type="int" line="374">
                <params>
                    <param name="date" type="CalendarDate"/>
                </params>
                <comment line="385">
                    mod(fraction, DAY_IN_MILLIS)                    
                </comment>
                <declaration name="fraction" type="long" line="375"/>
                <declaration name="days" type="long" line="376"/>
                <scope line="378"/>
                <scope line="381">
                    <scope line="383"/>
                </scope>
                <scope line="387"/>
            </method>
        </class>
    </source>