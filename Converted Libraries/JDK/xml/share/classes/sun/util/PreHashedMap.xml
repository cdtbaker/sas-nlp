<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.util">
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.AbstractMap"/>
        <import package="java.util.AbstractSet"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="PreHashedMap" line="36">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <extends class="AbstractMap">
                <type_params>
                    <type_param name="String"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <comment line="130">
                @SuppressWarnings(&quot;unchecked&quot;)                
            </comment>
            <javadoc line="36">
                A precomputed hash map.
                  &lt;p&gt; Subclasses of this class are of the following form:
                  &lt;blockquote&gt;&lt;pre&gt;
                  class FooMap
                  extends sun.util.PreHashedMap&amp;lt;String&amp;gt;
                  {
                  private FooMap() {
                  super(ROWS, SIZE, SHIFT, MASK);
                  }
                  protected void init(Object[] ht) {
                  ht[0] = new Object[] { &quot;key-1&quot;, value_1 };
                  ht[1] = new Object[] { &quot;key-2&quot;, value_2,
                  new Object { &quot;key-3&quot;, value_3 } };
                  ...
                  }
                  }&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The &lt;tt&gt;init&lt;/tt&gt; method is invoked by the &lt;tt&gt;PreHashedMap&lt;/tt&gt;
                  constructor with an object array long enough for the map&apos;s rows.  The method
                  must construct the hash chain for each row and store it in the appropriate
                  element of the array.
                  &lt;p&gt; Each entry in the map is represented by a unique hash-chain node.  The
                  final node of a hash chain is a two-element object array whose first element
                  is the entry&apos;s key and whose second element is the entry&apos;s value.  A
                  non-final node of a hash chain is a three-element object array whose first
                  two elements are the entry&apos;s key and value and whose third element is the
                  next node in the chain.
                  &lt;p&gt; Instances of this class are mutable and are not safe for concurrent
                  access.  They may be made immutable and thread-safe via the appropriate
                  methods in the {@link java.util.Collections} utility class.
                  &lt;p&gt; In the JDK build, subclasses of this class are typically created via the
                  &lt;tt&gt;Hasher&lt;/tt&gt; program in the &lt;tt&gt;make/tools/Hasher&lt;/tt&gt; directory.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.5                    
                </since>
                <see>
                    java.util.AbstractMap                    
                </see>
            </javadoc>
            <declaration name="rows" type="int" line="88"/>
            <declaration name="size" type="int" line="89"/>
            <declaration name="shift" type="int" line="90"/>
            <declaration name="mask" type="int" line="91"/>
            <declaration name="ht" type="Object[]" line="92"/>
            <javadoc line="94">
                Creates a new map.
                  &lt;p&gt; This constructor invokes the {@link #init init} method, passing it a
                  newly-constructed row array that is &lt;tt&gt;rows&lt;/tt&gt; elements long.                
                <param>
                    rowsThe number of rows in the map                    
                </param>
                <param>
                    sizeThe number of entries in the map                    
                </param>
                <param>
                    shiftThe value by which hash codes are right-shifted                    
                </param>
                <param>
                    maskThe value with which hash codes are masked after being shifted                    
                </param>
            </javadoc>
            <method name="PreHashedMap" type="constructor" line="109">
                <params>
                    <param name="rows" type="int"/>
                    <param name="size" type="int"/>
                    <param name="shift" type="int"/>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="118"/>
            <javadoc line="118">
                Initializes this map.
                  &lt;p&gt; This method must construct the map&apos;s hash chains and store them into
                  the appropriate elements of the given hash-table row array.                
                <param>
                    rowsThe row array to be initialized                    
                </param>
            </javadoc>
            <method name="toV" type="V" line="130">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="get" type="V" line="134">
                <params>
                    <param name="k" type="Object"/>
                </params>
                <declaration name="h" type="int" line="135"/>
                <declaration name="a" type="Object[]" line="136"/>
                <scope line="138"/>
            </method>
            <javadoc line="147">
                @throws UnsupportedOperationExceptionIf the given key is not part of this map&apos;s initial key set                
            </javadoc>
            <method name="put" type="V" line="151">
                <params>
                    <param name="k" type="String"/>
                    <param name="v" type="V"/>
                </params>
                <declaration name="h" type="int" line="152"/>
                <declaration name="a" type="Object[]" line="153"/>
                <scope line="156">
                    <scope line="157">
                        <declaration name="ov" type="V" line="158"/>
                    </scope>
                </scope>
            </method>
            <method name="keySet" type="Set<String>" line="168">
                <anonymous_class line="169">
                    <method name="size" type="int" line="171"/>
                    <method name="iterator" type="Iterator<String>" line="175">
                        <anonymous_class line="176">
                            <declaration name="i" type="int" line="177"/>
                            <declaration name="a" type="Object[]" line="178"/>
                            <declaration name="cur" type="String" line="179"/>
                            <method name="findNext" type="boolean" line="181">
                                <scope line="182">
                                    <scope line="183"/>
                                </scope>
                                <scope line="194">
                                    <scope line="195"/>
                                </scope>
                            </method>
                            <method name="hasNext" type="boolean" line="205"/>
                            <method name="next" type="String" line="211">
                                <scope line="212"/>
                                <declaration name="s" type="String" line="216"/>
                            </method>
                            <method name="remove" type="void" line="221"/>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <method name="entrySet" type="Set<Map.Entry<String,V>>" line="230">
                <anonymous_class line="231">
                    <method name="size" type="int" line="233"/>
                    <method name="iterator" type="Iterator<Map.Entry<String,V>>" line="237">
                        <anonymous_class line="238">
                            <declaration name="i" type="Iterator&lt;String&gt;" line="239"/>
                            <method name="hasNext" type="boolean" line="241"/>
                            <method name="next" type="Map.Entry<String,V>" line="245">
                                <anonymous_class line="246">
                                    <declaration name="k" type="String" line="247"/>
                                    <method name="getKey" type="String" line="248"/>
                                    <method name="getValue" type="V" line="249"/>
                                    <method name="hashCode" type="int" line="250">
                                        <declaration name="v" type="V" line="251"/>
                                    </method>
                                    <method name="equals" type="boolean" line="257">
                                        <params>
                                            <param name="ob" type="Object"/>
                                        </params>
                                        <declaration name="that" type="Map.Entry&lt;String,V&gt;" line="262"/>
                                    </method>
                                    <method name="setValue" type="V" line="274">
                                        <params>
                                            <param name="v" type="V"/>
                                        </params>
                                    </method>
                                </anonymous_class>
                            </method>
                            <method name="remove" type="void" line="280"/>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>