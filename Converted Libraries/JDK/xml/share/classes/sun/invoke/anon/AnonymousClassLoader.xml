<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.anon">
        <import package="java.io.IOException"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="sun.misc.IOUtils"/>
        <class name="AnonymousClassLoader" line="33">
            <comment line="77">
                Note: Do not refactor the calls to checkHostClass unless you                
            </comment>
            <comment line="78">
                also adjust this constant:                
            </comment>
            <comment line="252">
                ignore two warnings on this line:                
            </comment>
            <comment line="254">
                preceding line requires that this class be on the boot class path                
            </comment>
            <javadoc line="33">
                Anonymous class loader.  Will load any valid classfile, producing
                  a {@link Class} metaobject, without installing that class in the
                  system dictionary.  Therefore, {@link Class#forName(String)} will never
                  produce a reference to an anonymous class.
                  &lt;p&gt;
                  The access permissions of the anonymous class are borrowed from
                  a &lt;em&gt;host class&lt;/em&gt;.  The new class behaves as if it were an
                  inner class of the host class.  It can access the host&apos;s private
                  members, if the creator of the class loader has permission to
                  do so (or to create accessible reflective objects).
                  &lt;p&gt;
                  When the anonymous class is loaded, elements of its constant pool
                  can be patched to new values.  This provides a hook to pre-resolve
                  named classes in the constant pool to other classes, including
                  anonymous ones.  Also, string constants can be pre-resolved to
                  any reference.  (The verifier treats non-string, non-class reference
                  constants as plain objects.)
                  &lt;p&gt;
                  Why include the patching function?  It makes some use cases much easier.
                  Second, the constant pool needed some internal patching anyway,
                  to anonymize the loaded class itself.  Finally, if you are going
                  to use this seriously, you&apos;ll want to build anonymous classes
                  on top of pre-existing anonymous classes, and that requires patching.
                  &lt;p&gt;%%% TO-DO:
                  &lt;ul&gt;
                  &lt;li&gt;needs better documentation&lt;/li&gt;
                  &lt;li&gt;needs more security work (for safe delegation)&lt;/li&gt;
                  &lt;li&gt;needs a clearer story about error processing&lt;/li&gt;
                  &lt;li&gt;patch member references also (use &apos;;&apos; as delimiter char)&lt;/li&gt;
                  &lt;li&gt;patch method references to (conforming) method handles&lt;/li&gt;
                  &lt;/ul&gt;                
                <author>
                    jrose                    
                </author>
                <author>
                    Remi Forax                    
                </author>
                <see>
                    <a href="http://blogs.sun.com/jrose/entry/anonymous_classes_in_the_vm">
                           http://blogs.sun.com/jrose/entry/anonymous_classes_in_the_vm</a>                    
                </see>
            </javadoc>
            <declaration name="hostClass" type="Class&lt;?&gt;" line="74"/>
            <declaration name="CHC_CALLERS" type="int" line="78"/>
            <method name="AnonymousClassLoader" type="constructor" line="80"/>
            <method name="AnonymousClassLoader" type="constructor" line="83">
                <params>
                    <param name="hostClass" type="Class<?>"/>
                </params>
            </method>
            <method name="getTopLevelClass" type="Class<?>" line="87">
                <params>
                    <param name="clazz" type="Class<?>"/>
                </params>
                <scope line="89"/>
            </method>
            <method name="checkHostClass" type="Class<?>" line="95">
                <params>
                    <param name="hostClass" type="Class<?>"/>
                </params>
                <comment line="96">
                    called only from the constructor                    
                </comment>
                <comment line="97">
                    does a context-sensitive check on caller class                    
                </comment>
                <comment line="98">
                    CC[0..3] = {Reflection, this.checkHostClass, this.&lt;init&gt;, caller}                    
                </comment>
                <comment line="102">
                    called from the JVM directly                    
                </comment>
                <comment line="104">
                    anything central will do                    
                </comment>
                <comment line="109">
                    default value is caller itself                    
                </comment>
                <comment line="111">
                    anonymous class will access hostClass on behalf of caller                    
                </comment>
                <comment line="115">
                    caller can always nominate itself to grant caller&apos;s own access rights                    
                </comment>
                <comment line="118">
                    normalize caller and callee to their top-level classes:                    
                </comment>
                <comment line="126">
                    caller is trusted code, so accept the proposed hostClass                    
                </comment>
                <comment line="130">
                    %%% should do something with doPrivileged, because trusted                    
                </comment>
                <comment line="131">
                    code should have a way to execute on behalf of                    
                </comment>
                <comment line="132">
                    partially-trusted clients                    
                </comment>
                <comment line="134">
                    Does the caller have the right to access the private                    
                </comment>
                <comment line="135">
                    members of the callee?  If not, raise an error.                    
                </comment>
                <declaration name="caller" type="Class&lt;?&gt;" line="99"/>
                <scope line="101"/>
                <declaration name="callee" type="Class&lt;?&gt;" line="112"/>
                <declaration name="callerCL" type="ClassLoader" line="124"/>
                <scope line="125"/>
                <declaration name="ACC_PRIVATE" type="int" line="136"/>
                <scope line="137"/>
                <scope line="139"/>
            </method>
            <method name="loadClass" type="Class<?>" line="146">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
                <comment line="148">
                    no JVM support; try to fake an approximation                    
                </comment>
                <scope line="147">
                    <scope line="149"/>
                    <scope line="151"/>
                </scope>
            </method>
            <method name="loadClass" type="Class<?>" line="158">
                <params>
                    <param name="classPatch" type="ConstantPoolPatch"/>
                </params>
                <comment line="160">
                    no JVM support; try to fake an approximation                    
                </comment>
                <comment line="164">
                    Convert class names (this late in the game)                    
                </comment>
                <comment line="165">
                    to use slash &apos;/&apos; instead of dot &apos;.&apos;.                    
                </comment>
                <comment line="166">
                    Java likes dots, but the JVM likes slashes.                    
                </comment>
                <comment line="183">
                    When/if the JVM supports these patches,                    
                </comment>
                <comment line="184">
                    we&apos;ll probably need to reformat them also.                    
                </comment>
                <comment line="185">
                    Meanwhile, let the class loader create the error.                    
                </comment>
                <scope line="159"/>
                <declaration name="patches" type="Object[]" line="163"/>
                <scope line="167">
                    <declaration name="value" type="Object" line="168"/>
                    <scope line="169">
                        <declaration name="tag" type="byte" line="170"/>
                        <scope line="173"/>
                    </scope>
                </scope>
            </method>
            <method name="loadClass" type="Class<?>" line="193">
                <params>
                    <param name="classFile" type="byte[]"/>
                    <param name="patchArray" type="Object[]"/>
                </params>
                <scope line="194"/>
                <scope line="198"/>
            </method>
            <method name="throwReflectedException" type="void" line="204">
                <params>
                    <param name="ex" type="Exception"/>
                </params>
                <scope line="205">
                    <declaration name="tex" type="Throwable" line="206"/>
                </scope>
                <scope line="211"/>
            </method>
            <method name="fakeLoadClass" type="Class<?>" line="216">
                <params>
                    <param name="classPatch" type="ConstantPoolPatch"/>
                </params>
                <comment line="217">
                    Implementation:                    
                </comment>
                <comment line="218">
                    1. Make up a new name nobody has used yet.                    
                </comment>
                <comment line="219">
                    2. Inspect the tail-header of the class to find the this_class index.                    
                </comment>
                <comment line="220">
                    3. Patch the CONSTANT_Class for this_class to the new name.                    
                </comment>
                <comment line="221">
                    4. Add other CP entries required by (e.g.) string patches.                    
                </comment>
                <comment line="222">
                    5. Flatten Class constants down to their names, making sure that                    
                </comment>
                <comment line="223">
                    the host class loader can pick them up again accurately.                    
                </comment>
                <comment line="224">
                    6. Generate the edited class file bytes.                    
                </comment>
                <comment line="225">
                                        
                </comment>
                <comment line="226">
                    Potential limitations:                    
                </comment>
                <comment line="227">
                    * The class won&apos;t be truly anonymous, and may interfere with others.                    
                </comment>
                <comment line="228">
                    * Flattened class constants might not work, because of loader issues.                    
                </comment>
                <comment line="229">
                    * Pseudo-string constants will not flatten down to real strings.                    
                </comment>
                <comment line="230">
                    * Method handles will (of course) fail to flatten to linkage strings.                    
                </comment>
                <declaration name="cpArray" type="Object[]" line="232"/>
                <scope line="233"/>
                <scope line="235"/>
                <declaration name="thisClassIndex" type="int" line="238"/>
                <declaration name="thisClassName" type="String" line="239"/>
                <scope line="240"/>
                <declaration name="classFile" type="byte[]" line="244"/>
            </method>
            <declaration name="fakeNameCounter" type="int" line="249"/>
            <declaration name="unsafe" type="sun.misc.Unsafe" line="252"/>
            <declaration name="defineAnonymousClass" type="Method" line="255"/>
            <scope line="256">
                <declaration name="dac" type="Method" line="257"/>
                <declaration name="unsafeClass" type="Class&lt;? extends sun.misc.Unsafe&gt;" line="258"/>
                <scope line="259"/>
                <scope line="264"/>
            </scope>
            <method name="noJVMSupport" type="void" line="270"/>
            <method name="loadClassInternal" type="Class<?>" line="275"/>
            <method name="readClassFile" type="byte[]" line="279">
                <params>
                    <param name="templateClass" type="Class<?>"/>
                </params>
                <declaration name="templateName" type="String" line="280"/>
                <declaration name="lastDot" type="int" line="281"/>
                <declaration name="url" type="java.net.URL" line="282"/>
                <declaration name="connection" type="java.net.URLConnection" line="283"/>
                <declaration name="contentLength" type="int" line="284"/>
            </method>
        </class>
    </source>