<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.anon">
        <import package="java.io.IOException"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="sun.misc.IOUtils"/>
        <class name="AnonymousClassLoader" line="6">
            <javadoc line="6">
                Anonymous class loader.  Will load any valid classfile, producing
                  a {@link Class} metaobject, without installing that class in the
                  system dictionary.  Therefore, {@link Class#forName(String)} will never
                  produce a reference to an anonymous class.
                  &lt;p&gt;
                  The access permissions of the anonymous class are borrowed from
                  a &lt;em&gt;host class&lt;/em&gt;.  The new class behaves as if it were an
                  inner class of the host class.  It can access the host&apos;s private
                  members, if the creator of the class loader has permission to
                  do so (or to create accessible reflective objects).
                  &lt;p&gt;
                  When the anonymous class is loaded, elements of its constant pool
                  can be patched to new values.  This provides a hook to pre-resolve
                  named classes in the constant pool to other classes, including
                  anonymous ones.  Also, string constants can be pre-resolved to
                  any reference.  (The verifier treats non-string, non-class reference
                  constants as plain objects.)
                  &lt;p&gt;
                  Why include the patching function?  It makes some use cases much easier.
                  Second, the constant pool needed some internal patching anyway,
                  to anonymize the loaded class itself.  Finally, if you are going
                  to use this seriously, you&apos;ll want to build anonymous classes
                  on top of pre-existing anonymous classes, and that requires patching.
                  &lt;p&gt;%%% TO-DO:
                  &lt;ul&gt;
                  &lt;li&gt;needs better documentation&lt;/li&gt;
                  &lt;li&gt;needs more security work (for safe delegation)&lt;/li&gt;
                  &lt;li&gt;needs a clearer story about error processing&lt;/li&gt;
                  &lt;li&gt;patch member references also (use &apos;;&apos; as delimiter char)&lt;/li&gt;
                  &lt;li&gt;patch method references to (conforming) method handles&lt;/li&gt;
                  &lt;/ul&gt;                
                <author>
                    jrose                    
                </author>
                <author>
                    Remi Forax                    
                </author>
                <see>
                    <a href="http://blogs.sun.com/jrose/entry/anonymous_classes_in_the_vm">
                           http://blogs.sun.com/jrose/entry/anonymous_classes_in_the_vm</a>                    
                </see>
            </javadoc>
            <declaration name="hostClass" type="Class&lt;?&gt;" line="44"/>
            <declaration name="CHC_CALLERS" type="int" line="45"/>
            <method name="AnonymousClassLoader" type="constructor" line="46"/>
            <method name="AnonymousClassLoader" type="constructor" line="49">
                <params>
                    <param name="hostClass" type="Class<?>"/>
                </params>
            </method>
            <method name="getTopLevelClass" type="Class<?>" line="52">
                <params>
                    <param name="clazz" type="Class<?>"/>
                </params>
                <scope line="53"/>
            </method>
            <method name="checkHostClass" type="Class<?>" line="58">
                <params>
                    <param name="hostClass" type="Class<?>"/>
                </params>
                <declaration name="caller" type="Class&lt;?&gt;" line="59"/>
                <scope line="60"/>
                <declaration name="callee" type="Class&lt;?&gt;" line="65"/>
                <declaration name="callerCL" type="ClassLoader" line="70"/>
                <scope line="71"/>
                <declaration name="ACC_PRIVATE" type="int" line="74"/>
                <scope line="75"/>
                <scope line="78"/>
            </method>
            <method name="loadClass" type="Class<?>" line="83">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
                <scope line="84">
                    <scope line="85"/>
                    <scope line="88"/>
                </scope>
            </method>
            <method name="loadClass" type="Class<?>" line="94">
                <params>
                    <param name="classPatch" type="ConstantPoolPatch"/>
                </params>
                <scope line="95"/>
                <declaration name="patches" type="Object[]" line="98"/>
                <scope line="99">
                    <declaration name="value" type="Object" line="100"/>
                    <scope line="101">
                        <declaration name="tag" type="byte" line="102"/>
                        <scope line="105"/>
                    </scope>
                </scope>
            </method>
            <method name="loadClass" type="Class<?>" line="120">
                <params>
                    <param name="classFile" type="byte[]"/>
                    <param name="patchArray" type="Object[]"/>
                </params>
                <scope line="121"/>
                <scope line="124"/>
            </method>
            <method name="throwReflectedException" type="void" line="129">
                <params>
                    <param name="ex" type="Exception"/>
                </params>
                <scope line="130">
                    <declaration name="tex" type="Throwable" line="131"/>
                </scope>
                <scope line="135"/>
            </method>
            <method name="fakeLoadClass" type="Class<?>" line="139">
                <params>
                    <param name="classPatch" type="ConstantPoolPatch"/>
                </params>
                <declaration name="cpArray" type="Object[]" line="141"/>
                <scope line="142"/>
                <scope line="145"/>
                <declaration name="thisClassIndex" type="int" line="148"/>
                <declaration name="thisClassName" type="String" line="149"/>
                <scope line="150"/>
                <declaration name="classFile" type="byte[]" line="154"/>
            </method>
            <declaration name="fakeNameCounter" type="int" line="157"/>
            <declaration name="unsafe" type="sun.misc.Unsafe" line="158"/>
            <declaration name="defineAnonymousClass" type="Method" line="159"/>
            <scope line="160">
                <declaration name="dac" type="Method" line="161"/>
                <declaration name="unsafeClass" type="Class&lt;? extends sun.misc.Unsafe&gt;" line="162"/>
                <scope line="163"/>
                <scope line="166"/>
            </scope>
            <method name="noJVMSupport" type="void" line="171"/>
            <method name="loadClassInternal" type="Class<?>" line="174"/>
            <method name="readClassFile" type="byte[]" line="175">
                <params>
                    <param name="templateClass" type="Class<?>"/>
                </params>
                <declaration name="templateName" type="String" line="176"/>
                <declaration name="lastDot" type="int" line="177"/>
                <declaration name="url" type="java.net.URL" line="178"/>
                <declaration name="connection" type="java.net.URLConnection" line="179"/>
                <declaration name="contentLength" type="int" line="180"/>
            </method>
        </class>
    </source>