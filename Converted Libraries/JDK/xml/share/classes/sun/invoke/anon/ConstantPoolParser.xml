<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.anon">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.nio.BufferUnderflowException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.invoke.anon.ConstantPoolVisitor"/>
        <class name="ConstantPoolParser" line="7">
            <javadoc line="7">
                A constant pool parser.                
            </javadoc>
            <declaration name="classFile" type="byte[]" line="11"/>
            <declaration name="tags" type="byte[]" line="12"/>
            <declaration name="firstHeader" type="char[]" line="13"/>
            <declaration name="endOffset" type="int" line="14"/>
            <declaration name="secondHeader" type="char[]" line="15"/>
            <declaration name="charArray" type="char[]" line="16"/>
            <javadoc line="17">
                Creates a constant pool parser.                
                <param>
                    classFile an array of bytes containing a class.                    
                </param>
                <throws>
                    InvalidConstantPoolFormatException if the header of the class has errors.                    
                </throws>
            </javadoc>
            <method name="ConstantPoolParser" type="constructor" line="22">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
            </method>
            <javadoc line="27">
                Create a constant pool parser by loading the bytecodes of the
                  class taken as argument.                
                <param>
                    templateClass the class to parse.                    
                </param>
                <throws>
                    IOException raised if an I/O occurs when loading
                      the bytecode of the template class.                    
                </throws>
                <throws>
                    InvalidConstantPoolFormatException if the header of the class has errors.                    
                </throws>
                <see>
                    #ConstantPoolParser(byte[])                    
                </see>
                <see>
                    AnonymousClassLoader#readClassFile(Class)                    
                </see>
            </javadoc>
            <method name="ConstantPoolParser" type="constructor" line="37">
                <params>
                    <param name="templateClass" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="40">
                Creates an empty patch to patch the class file
                  used by the current parser.                
                <return>
                    a new class patch.                    
                </return>
            </javadoc>
            <method name="createPatch" type="ConstantPoolPatch" line="45"/>
            <javadoc line="48">
                Report the tag of the indicated CP entry.                
                <param>
                    index                    
                </param>
                <return>
                    one of {@link ConstantPoolVisitor#CONSTANT_Utf8}, etc.                    
                </return>
            </javadoc>
            <method name="getTag" type="byte" line="53">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Report the length of the constant pool.                
            </javadoc>
            <method name="getLength" type="int" line="60"/>
            <javadoc line="63">
                Report the offset, within the class file, of the start of the constant pool.                
            </javadoc>
            <method name="getStartOffset" type="int" line="66"/>
            <javadoc line="69">
                Report the offset, within the class file, of the end of the constant pool.                
            </javadoc>
            <method name="getEndOffset" type="int" line="72"/>
            <javadoc line="76">
                Report the CP index of this class&apos;s own name.                
            </javadoc>
            <method name="getThisClassIndex" type="int" line="79"/>
            <javadoc line="83">
                Report the total size of the class file.                
            </javadoc>
            <method name="getTailLength" type="int" line="86"/>
            <javadoc line="89">
                Write the head (header plus constant pool)
                  of the class file to the indicated stream.                
            </javadoc>
            <method name="writeHead" type="void" line="93">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="96">
                Write the head (header plus constant pool)
                  of the class file to the indicated stream,
                  incorporating the non-null entries of the given array
                  as patches.                
            </javadoc>
            <method name="writePatchedHead" type="void" line="102">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="patchArray" type="Object[]"/>
                </params>
            </method>
            <javadoc line="105">
                Write the tail (everything after the constant pool)
                  of the class file to the indicated stream.                
            </javadoc>
            <method name="writeTail" type="void" line="109">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <method name="parseHeader" type="char[]" line="112">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
                <declaration name="result" type="char[]" line="113"/>
                <declaration name="buffer" type="ByteBuffer" line="114"/>
                <declaration name="magic" type="int" line="116"/>
                <declaration name="len" type="int" line="118"/>
            </method>
            <javadoc line="122">
                Parse the constant pool of the class
                  calling a method visit each time a constant pool entry is parsed.
                  The order of the calls to visit is not guaranteed to be the same
                  than the order of the constant pool entry in the bytecode array.                
                <param>
                    visitor                    
                </param>
                <throws>
                    InvalidConstantPoolFormatException                    
                </throws>
            </javadoc>
            <method name="parse" type="void" line="130">
                <params>
                    <param name="visitor" type="ConstantPoolVisitor"/>
                </params>
                <declaration name="buffer" type="ByteBuffer" line="131"/>
                <declaration name="values" type="Object[]" line="133"/>
                <scope line="134"/>
                <scope line="137"/>
                <scope line="140">
                    <scope line="143"/>
                </scope>
            </method>
            <method name="getCharArray" type="char[]" line="149">
                <params>
                    <param name="utfLength" type="int"/>
                </params>
            </method>
            <method name="parseConstantPool" type="void" line="153">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="values" type="Object[]"/>
                    <param name="visitor" type="ConstantPoolVisitor"/>
                </params>
                <scope line="154">
                    <declaration name="tag" type="byte" line="155"/>
                    <declaration name="utfLen" type="int" line="160"/>
                    <declaration name="value" type="String" line="161"/>
                </scope>
            </method>
            <method name="resolveConstantPool" type="void" line="199">
                <params>
                    <param name="values" type="Object[]"/>
                    <param name="visitor" type="ConstantPoolVisitor"/>
                </params>
                <scope line="200">
                    <scope line="203">
                        <declaration name="value" type="Object" line="204"/>
                        <declaration name="array" type="int[]" line="206"/>
                        <declaration name="tag" type="byte" line="207"/>
                        <declaration name="stringBody" type="String" line="210"/>
                        <scope line="215">
                            <declaration name="className" type="String" line="216"/>
                        </scope>
                        <scope line="223">
                            <declaration name="memberName" type="String" line="224"/>
                            <declaration name="signature" type="String" line="225"/>
                        </scope>
                        <scope line="233">
                            <declaration name="className" type="Object" line="234"/>
                            <declaration name="nameAndType" type="Object" line="235"/>
                            <scope line="236"/>
                            <declaration name="nameAndTypeArray" type="String[]" line="241"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getUnsignedByte" type="int" line="252">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                </params>
            </method>
            <method name="getUnsignedShort" type="int" line="255">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                </params>
                <declaration name="b1" type="int" line="256"/>
                <declaration name="b2" type="int" line="257"/>
            </method>
            <method name="getUTF8" type="String" line="260">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="utfLen" type="int"/>
                    <param name="charArray" type="char[]"/>
                </params>
                <declaration name="utfLimit" type="int" line="261"/>
                <declaration name="index" type="int" line="262"/>
                <scope line="263">
                    <declaration name="c" type="int" line="264"/>
                    <scope line="265"/>
                </scope>
            </method>
            <method name="getUTF8Extended" type="String" line="273">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="utfLimit" type="int"/>
                    <param name="charArray" type="char[]"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="c" type="int" line="274"/>
                <scope line="275"/>
            </method>
        </class>
    </source>