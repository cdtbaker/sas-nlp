<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.anon">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.nio.BufferUnderflowException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.invoke.anon.ConstantPoolVisitor"/>
        <class name="ConstantPoolParser" line="35">
            <comment line="41">
                maghi, maglo, minor, major, cplen                
            </comment>
            <comment line="43">
                these are filled in on first parse:                
            </comment>
            <comment line="45">
                flags, this_class, super_class, intlen                
            </comment>
            <comment line="47">
                used to decode UTF8 array                
            </comment>
            <javadoc line="35">
                A constant pool parser.                
            </javadoc>
            <declaration name="classFile" type="byte[]" line="38"/>
            <declaration name="tags" type="byte[]" line="39"/>
            <declaration name="firstHeader" type="char[]" line="40"/>
            <declaration name="endOffset" type="int" line="43"/>
            <declaration name="secondHeader" type="char[]" line="44"/>
            <declaration name="charArray" type="char[]" line="47"/>
            <javadoc line="49">
                Creates a constant pool parser.                
                <param>
                    classFile an array of bytes containing a class.                    
                </param>
                <throws>
                    InvalidConstantPoolFormatException if the header of the class has errors.                    
                </throws>
            </javadoc>
            <method name="ConstantPoolParser" type="constructor" line="53">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
            </method>
            <javadoc line="59">
                Create a constant pool parser by loading the bytecodes of the
                  class taken as argument.                
                <param>
                    templateClass the class to parse.                    
                </param>
                <throws>
                    IOException raised if an I/O occurs when loading
                      the bytecode of the template class.                    
                </throws>
                <throws>
                    InvalidConstantPoolFormatException if the header of the class has errors.                    
                </throws>
                <see>
                    #ConstantPoolParser(byte[])                    
                </see>
                <see>
                    AnonymousClassLoader#readClassFile(Class)                    
                </see>
            </javadoc>
            <method name="ConstantPoolParser" type="constructor" line="71">
                <params>
                    <param name="templateClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="75">
                Creates an empty patch to patch the class file
                  used by the current parser.                
                <return>
                    a new class patch.                    
                </return>
            </javadoc>
            <method name="createPatch" type="ConstantPoolPatch" line="79"/>
            <javadoc line="83">
                Report the tag of the indicated CP entry.                
                <param>
                    index                    
                </param>
                <return>
                    one of {@link ConstantPoolVisitor#CONSTANT_Utf8}, etc.                    
                </return>
            </javadoc>
            <method name="getTag" type="byte" line="87">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="89">
                    trigger an exception if we haven&apos;t parsed yet                    
                </comment>
            </method>
            <javadoc line="92">
                Report the length of the constant pool.                
            </javadoc>
            <method name="getLength" type="int" line="93"/>
            <javadoc line="97">
                Report the offset, within the class file, of the start of the constant pool.                
            </javadoc>
            <method name="getStartOffset" type="int" line="98"/>
            <javadoc line="102">
                Report the offset, within the class file, of the end of the constant pool.                
            </javadoc>
            <method name="getEndOffset" type="int" line="103"/>
            <javadoc line="109">
                Report the CP index of this class&apos;s own name.                
            </javadoc>
            <method name="getThisClassIndex" type="int" line="110">
                <comment line="112">
                    provoke exception if not yet parsed                    
                </comment>
            </method>
            <javadoc line="115">
                Report the total size of the class file.                
            </javadoc>
            <method name="getTailLength" type="int" line="116"/>
            <javadoc line="120">
                Write the head (header plus constant pool)
                  of the class file to the indicated stream.                
            </javadoc>
            <method name="writeHead" type="void" line="123">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="127">
                Write the head (header plus constant pool)
                  of the class file to the indicated stream,
                  incorporating the non-null entries of the given array
                  as patches.                
            </javadoc>
            <method name="writePatchedHead" type="void" line="132">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="patchArray" type="Object[]"/>
                </params>
                <comment line="134">
                    this will be useful to partially emulate the class loader on old JVMs                    
                </comment>
            </method>
            <javadoc line="137">
                Write the tail (everything after the constant pool)
                  of the class file to the indicated stream.                
            </javadoc>
            <method name="writeTail" type="void" line="140">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <method name="parseHeader" type="char[]" line="144">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
                <comment line="153">
                    skip major, minor version                    
                </comment>
                <declaration name="result" type="char[]" line="145"/>
                <declaration name="buffer" type="ByteBuffer" line="146"/>
                <declaration name="magic" type="int" line="149"/>
                <declaration name="len" type="int" line="153"/>
            </method>
            <javadoc line="159">
                Parse the constant pool of the class
                  calling a method visit each time a constant pool entry is parsed.
                  The order of the calls to visit is not guaranteed to be the same
                  than the order of the constant pool entry in the bytecode array.                
                <param>
                    visitor                    
                </param>
                <throws>
                    InvalidConstantPoolFormatException                    
                </throws>
            </javadoc>
            <method name="parse" type="void" line="168">
                <params>
                    <param name="visitor" type="ConstantPoolVisitor"/>
                </params>
                <comment line="171">
                    skip header                    
                </comment>
                <declaration name="buffer" type="ByteBuffer" line="169"/>
                <declaration name="values" type="Object[]" line="172"/>
                <scope line="173"/>
                <scope line="175"/>
                <scope line="178">
                    <scope line="181"/>
                </scope>
            </method>
            <method name="getCharArray" type="char[]" line="188">
                <params>
                    <param name="utfLength" type="int"/>
                </params>
            </method>
            <method name="parseConstantPool" type="void" line="194">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="values" type="Object[]"/>
                    <param name="visitor" type="ConstantPoolVisitor"/>
                </params>
                <comment line="225">
                    fall through:                    
                </comment>
                <comment line="231">
                    fall through:                    
                </comment>
                <comment line="232">
                    fall through:                    
                </comment>
                <comment line="233">
                    fall through:                    
                </comment>
                <scope line="195">
                    <declaration name="tag" type="byte" line="196"/>
                    <declaration name="utfLen" type="int" line="201"/>
                    <declaration name="value" type="String" line="202"/>
                </scope>
            </method>
            <method name="resolveConstantPool" type="void" line="243">
                <params>
                    <param name="values" type="Object[]"/>
                    <param name="visitor" type="ConstantPoolVisitor"/>
                </params>
                <comment line="245">
                    clean out the int[] values, which are temporary                    
                </comment>
                <comment line="250">
                    System.out.println(&quot;CP resolve pass: &quot;+beg+&quot;..&quot;+end);                    
                </comment>
                <comment line="265">
                    use the external form favored by Class.forName:                    
                </comment>
                <comment line="279">
                    fall through:                    
                </comment>
                <comment line="280">
                    fall through:                    
                </comment>
                <comment line="286">
                    one more pass is needed                    
                </comment>
                <scope line="247">
                    <scope line="250">
                        <declaration name="value" type="Object" line="251"/>
                        <declaration name="array" type="int[]" line="254"/>
                        <declaration name="tag" type="byte" line="255"/>
                        <declaration name="stringBody" type="String" line="258"/>
                        <scope line="262">
                            <declaration name="className" type="String" line="263"/>
                        </scope>
                        <scope line="270">
                            <declaration name="memberName" type="String" line="271"/>
                            <declaration name="signature" type="String" line="272"/>
                        </scope>
                        <scope line="280">
                            <declaration name="className" type="Object" line="281"/>
                            <declaration name="nameAndType" type="Object" line="282"/>
                            <scope line="284"/>
                            <declaration name="nameAndTypeArray" type="String[]" line="290"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getUnsignedByte" type="int" line="306">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                </params>
            </method>
            <method name="getUnsignedShort" type="int" line="310">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                </params>
                <declaration name="b1" type="int" line="311"/>
                <declaration name="b2" type="int" line="312"/>
            </method>
            <method name="getUTF8" type="String" line="316">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="utfLen" type="int"/>
                    <param name="charArray" type="char[]"/>
                </params>
                <declaration name="utfLimit" type="int" line="317"/>
                <declaration name="index" type="int" line="318"/>
                <scope line="319">
                    <declaration name="c" type="int" line="320"/>
                    <scope line="321"/>
                </scope>
            </method>
            <method name="getUTF8Extended" type="String" line="330">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="utfLimit" type="int"/>
                    <param name="charArray" type="char[]"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="337">
                                        
                </comment>
                <comment line="341">
                                        
                </comment>
                <comment line="350">
                                        
                </comment>
                <comment line="361">
                                        
                </comment>
                <comment line="366">
                    The number of chars produced may be less than utflen                    
                </comment>
                <declaration name="c" type="int" line="331"/>
                <scope line="332"/>
            </method>
        </class>
    </source>