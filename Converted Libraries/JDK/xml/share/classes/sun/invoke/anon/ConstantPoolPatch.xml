<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.anon">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.IdentityHashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.invoke.anon.ConstantPoolVisitor"/>
        <class name="ConstantPoolPatch" line="37">
            <javadoc line="37">
                A class and its patched constant pool.
                  This class allow to modify (patch) a constant pool
                  by changing the value of its entry.
                  Entry are referenced using index that can be get
                  by parsing the constant pool using{@link ConstantPoolParser#parse(ConstantPoolVisitor)}.                
                <see>
                    ConstantPoolVisitor                    
                </see>
                <see>
                    ConstantPoolParser#createPatch()                    
                </see>
            </javadoc>
            <declaration name="outer" type="ConstantPoolParser" line="49"/>
            <declaration name="patchArray" type="Object[]" line="50"/>
            <method name="ConstantPoolPatch" type="constructor" line="52">
                <params>
                    <param name="outer" type="ConstantPoolParser"/>
                </params>
            </method>
            <javadoc line="57">
                Create a {@link ConstantPoolParser} and
                  a {@link ConstantPoolPatch} in one step.
                  Equivalent to {@code new ConstantPoolParser(classFile).createPatch()}.                
                <param>
                    classFile an array of bytes containing a class.                    
                </param>
                <see>
                    #ConstantPoolParser(Class)                    
                </see>
            </javadoc>
            <method name="ConstantPoolPatch" type="constructor" line="64">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
            </method>
            <javadoc line="68">
                Create a {@link ConstantPoolParser} and
                  a {@link ConstantPoolPatch} in one step.
                  Equivalent to {@code new ConstantPoolParser(templateClass).createPatch()}.                
                <param>
                    templateClass the class to parse.                    
                </param>
                <see>
                    #ConstantPoolParser(Class)                    
                </see>
            </javadoc>
            <method name="ConstantPoolPatch" type="constructor" line="75">
                <params>
                    <param name="templateClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="80">
                Creates a patch from an existing patch.
                  All changes are copied from that patch.                
                <param>
                    patch a patch                    
                </param>
                <see>
                    ConstantPoolParser#createPatch()                    
                </see>
            </javadoc>
            <method name="ConstantPoolPatch" type="constructor" line="86">
                <params>
                    <param name="patch" type="ConstantPoolPatch"/>
                </params>
            </method>
            <javadoc line="91">
                Which parser built this patch?                
            </javadoc>
            <method name="getParser" type="ConstantPoolParser" line="92"/>
            <javadoc line="96">
                Report the tag at the given index in the constant pool.                
            </javadoc>
            <method name="getTag" type="byte" line="97">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="101">
                Report the current patch at the given index of the constant pool.
                  Null means no patch will be made.
                  To observe the unpatched entry at the given index, use{@link #getParser()}{@code .}@link ConstantPoolParser#parse(ConstantPoolVisitor)}                
            </javadoc>
            <method name="getPatch" type="Object" line="106">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="value" type="Object" line="107"/>
            </method>
            <javadoc line="124">
                Clear all patches.                
            </javadoc>
            <method name="clear" type="void" line="125"/>
            <javadoc line="129">
                Clear one patch.                
            </javadoc>
            <method name="clear" type="void" line="130">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="134">
                Produce the patches as an array.                
            </javadoc>
            <method name="getPatches" type="Object[]" line="135"/>
            <javadoc line="139">
                Produce the original constant pool as an array.                
            </javadoc>
            <method name="getOriginalCP" type="Object[]" line="140"/>
            <javadoc line="144">
                Walk the constant pool, applying patches using the given map.                
                <param>
                    utf8Map Utf8 strings to modify, if encountered                    
                </param>
                <param>
                    classMap Classes (or their names) to modify, if encountered                    
                </param>
                <param>
                    valueMap Constant values to modify, if encountered                    
                </param>
                <param>
                    deleteUsedEntries if true, delete map entries that are used                    
                </param>
            </javadoc>
            <method name="putPatches" type="void" line="154">
                <params>
                    <param name="utf8Map" type="Map<String,String>"/>
                    <param name="classMap" type="Map<String,Object>"/>
                    <param name="valueMap" type="Map<Object,Object>"/>
                    <param name="deleteUsedEntries" type="boolean"/>
                </params>
                <declaration name="usedUtf8Keys" type="HashSet&lt;String&gt;" line="155"/>
                <declaration name="usedClassKeys" type="HashSet&lt;String&gt;" line="156"/>
                <declaration name="usedValueKeys" type="HashSet&lt;Object&gt;" line="157"/>
                <scope line="158"/>
                <scope line="162"/>
                <anonymous_class line="168">
                    <method name="visitUTF8" type="void" line="171">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="utf8" type="String"/>
                        </params>
                    </method>
                    <method name="visitConstantValue" type="void" line="177">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="visitConstantString" type="void" line="183">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="name" type="String"/>
                            <param name="nameIndex" type="int"/>
                        </params>
                        <scope line="184"/>
                        <scope line="187"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getOriginalCP" type="Object[]" line="200">
                <params>
                    <param name="startIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="tagMask" type="int"/>
                </params>
                <declaration name="cpArray" type="Object[]" line="201"/>
                <anonymous_class line="202">
                    <method name="show" type="void" line="204">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="visitUTF8" type="void" line="211">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="utf8" type="String"/>
                        </params>
                    </method>
                    <method name="visitConstantValue" type="void" line="216">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="visitConstantString" type="void" line="223">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="String"/>
                            <param name="j" type="int"/>
                        </params>
                    </method>
                    <method name="visitMemberRef" type="void" line="231">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="className" type="String"/>
                            <param name="memberName" type="String"/>
                            <param name="signature" type="String"/>
                            <param name="j" type="int"/>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                    <method name="visitDescriptor" type="void" line="238">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="memberName" type="String"/>
                            <param name="signature" type="String"/>
                            <param name="j" type="int"/>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="245">
                Write the head (header plus constant pool)
                  of the patched class file to the indicated stream.                
            </javadoc>
            <method name="writeHead" type="void" line="248">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="252">
                Write the tail (everything after the constant pool)
                  of the patched class file to the indicated stream.                
            </javadoc>
            <method name="writeTail" type="void" line="255">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <method name="checkConstantTag" type="void" line="259">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="checkTag" type="void" line="271">
                <params>
                    <param name="index" type="int"/>
                    <param name="putTag" type="byte"/>
                </params>
                <declaration name="tag" type="byte" line="272"/>
            </method>
            <method name="checkTagMask" type="void" line="280">
                <params>
                    <param name="index" type="int"/>
                    <param name="tagBitMask" type="int"/>
                </params>
                <declaration name="tag" type="byte" line="281"/>
                <declaration name="tagBit" type="int" line="282"/>
            </method>
            <method name="checkMemberName" type="void" line="289">
                <params>
                    <param name="memberName" type="String"/>
                </params>
            </method>
            <javadoc line="294">
                Set the entry of the constant pool indexed by index to
                  a new string.                
                <param>
                    index an index to a constant pool entry containing a{@link ConstantPoolVisitor#CONSTANT_Utf8} value.                    
                </param>
                <param>
                    utf8 a string                    
                </param>
                <see>
                    ConstantPoolVisitor#visitUTF8(int,byte,String)                    
                </see>
            </javadoc>
            <method name="putUTF8" type="void" line="303">
                <params>
                    <param name="index" type="int"/>
                    <param name="utf8" type="String"/>
                </params>
                <scope line="304"/>
            </method>
            <javadoc line="309">
                Set the entry of the constant pool indexed by index to
                  a new value, depending on its dynamic type.                
                <param>
                    index an index to a constant pool entry containing a
                      one of the following structures:{@link ConstantPoolVisitor#CONSTANT_Integer},{@link ConstantPoolVisitor#CONSTANT_Float},{@link ConstantPoolVisitor#CONSTANT_Long},{@link ConstantPoolVisitor#CONSTANT_Double},{@link ConstantPoolVisitor#CONSTANT_String}, or{@link ConstantPoolVisitor#CONSTANT_Class}                    
                </param>
                <param>
                    value a boxed int, float, long or double; or a string or class object                    
                </param>
                <throws>
                    IllegalArgumentException if the type of the constant does not
                      match the constant pool entry type,
                      as reported by {@link #getTag(int)}                    
                </throws>
                <see>
                    #putConstantValue(int,byte,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantValue(int,byte,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantString(int,byte,String,int)                    
                </see>
            </javadoc>
            <method name="putConstantValue" type="void" line="329">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="330"/>
                <declaration name="tag" type="byte" line="331"/>
            </method>
            <javadoc line="337">
                Set the entry of the constant pool indexed by index to
                  a new value.                
                <param>
                    index an index to a constant pool entry matching the given tag                    
                </param>
                <param>
                    tag one of the following values:{@link ConstantPoolVisitor#CONSTANT_Integer},{@link ConstantPoolVisitor#CONSTANT_Float},{@link ConstantPoolVisitor#CONSTANT_Long},{@link ConstantPoolVisitor#CONSTANT_Double},{@link ConstantPoolVisitor#CONSTANT_String}, or{@link ConstantPoolVisitor#CONSTANT_Class}                    
                </param>
                <param>
                    value a boxed number, string, or class object                    
                </param>
                <throws>
                    IllegalArgumentException if the type of the constant does not
                      match the constant pool entry type, or if a class name contains
                      &apos;/&apos; or &apos;;&apos;                    
                </throws>
                <see>
                    #putConstantValue(int,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantValue(int,byte,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantString(int,byte,String,int)                    
                </see>
            </javadoc>
            <method name="putConstantValue" type="void" line="357">
                <params>
                    <param name="index" type="int"/>
                    <param name="tag" type="byte"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="364">
                    the JVM accepts any object as a patch for a string                    
                </comment>
                <comment line="366">
                    make sure the incoming value is the right type                    
                </comment>
                <scope line="358"/>
                <scope line="360"/>
                <scope line="362"/>
                <scope line="364"/>
            </method>
            <javadoc line="372">
                Set the entry of the constant pool indexed by index to
                  a new {@link ConstantPoolVisitor#CONSTANT_NameAndType} value.                
                <param>
                    index an index to a constant pool entry containing a{@link ConstantPoolVisitor#CONSTANT_NameAndType} value.                    
                </param>
                <param>
                    memberName a memberName                    
                </param>
                <param>
                    signature a signature                    
                </param>
                <throws>
                    IllegalArgumentException if memberName contains the character &apos;;&apos;                    
                </throws>
                <see>
                    ConstantPoolVisitor#visitDescriptor(int,byte,String,String,int,int)                    
                </see>
            </javadoc>
            <method name="putDescriptor" type="void" line="383">
                <params>
                    <param name="index" type="int"/>
                    <param name="memberName" type="String"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="389">
                Set the entry of the constant pool indexed by index to
                  a new {@link ConstantPoolVisitor#CONSTANT_Fieldref},{@link ConstantPoolVisitor#CONSTANT_Methodref}, or{@link ConstantPoolVisitor#CONSTANT_InterfaceMethodref} value.                
                <param>
                    index an index to a constant pool entry containing a member reference                    
                </param>
                <param>
                    className a class name                    
                </param>
                <param>
                    memberName a field or method name                    
                </param>
                <param>
                    signature a field or method signature                    
                </param>
                <throws>
                    IllegalArgumentException if memberName contains the character &apos;;&apos;
                      or signature is not a correct signature                    
                </throws>
                <see>
                    ConstantPoolVisitor#visitMemberRef(int,byte,String,String,String,int,int)                    
                </see>
            </javadoc>
            <method name="putMemberRef" type="void" line="404">
                <params>
                    <param name="index" type="int"/>
                    <param name="tag" type="byte"/>
                    <param name="className" type="String"/>
                    <param name="memberName" type="String"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <declaration name="CONSTANT_MemberRef_MASK" type="int" line="414"/>
            <declaration name="CONSTANT_VALUE_CLASS_TAG" type="Map&lt;Class&lt;?&gt;,Byte&gt;" line="419"/>
            <declaration name="CONSTANT_VALUE_CLASS" type="Class[]" line="421"/>
            <scope line="422">
                <declaration name="values" type="Object[][]" line="423"/>
                <scope line="431">
                    <declaration name="cls" type="Class&lt;?&gt;" line="432"/>
                    <declaration name="tag" type="Byte" line="433"/>
                </scope>
            </scope>
            <method name="classForTag" type="Class<?>" line="439">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <method name="tagForConstant" type="byte" line="445">
                <params>
                    <param name="cls" type="Class<?>"/>
                </params>
                <declaration name="tag" type="Byte" line="446"/>
            </method>
            <method name="checkClassName" type="void" line="450">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="addSemis" type="String" line="455">
                <params>
                    <param name="name" type="String"/>
                    <param name="names" type="String"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="456"/>
                <scope line="458"/>
                <declaration name="res" type="String" line="461"/>
            </method>
            <method name="stripSemis" type="String[]" line="469">
                <params>
                    <param name="count" type="int"/>
                    <param name="string" type="String"/>
                </params>
                <comment line="475">
                    yuck                    
                </comment>
                <declaration name="res" type="String[]" line="470"/>
                <declaration name="pos" type="int" line="471"/>
                <scope line="472">
                    <declaration name="pos2" type="int" line="473"/>
                </scope>
            </method>
            <method name="toString" type="String" line="482">
                <declaration name="buf" type="StringBuilder" line="483"/>
                <declaration name="origCP" type="Object[]" line="485"/>
                <scope line="486">
                    <scope line="488"/>
                    <scope line="490">
                        <scope line="491"/>
                        <scope line="493"/>
                    </scope>
                    <declaration name="orig" type="Object" line="497"/>
                </scope>
            </method>
        </class>
    </source>