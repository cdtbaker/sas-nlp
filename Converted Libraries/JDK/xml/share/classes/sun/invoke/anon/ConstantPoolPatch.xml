<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.anon">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.IdentityHashMap"/>
        <import package="java.util.Map"/>
        <import package="sun.invoke.anon.ConstantPoolVisitor"/>
        <class name="ConstantPoolPatch" line="9">
            <javadoc line="9">
                A class and its patched constant pool.
                  This class allow to modify (patch) a constant pool
                  by changing the value of its entry.
                  Entry are referenced using index that can be get
                  by parsing the constant pool using{@link ConstantPoolParser#parse(ConstantPoolVisitor)}.                
                <see>
                    ConstantPoolVisitor                    
                </see>
                <see>
                    ConstantPoolParser#createPatch()                    
                </see>
            </javadoc>
            <declaration name="outer" type="ConstantPoolParser" line="19"/>
            <declaration name="patchArray" type="Object[]" line="20"/>
            <method name="ConstantPoolPatch" type="constructor" line="21">
                <params>
                    <param name="outer" type="ConstantPoolParser"/>
                </params>
            </method>
            <javadoc line="25">
                Create a {@link ConstantPoolParser} and
                  a {@link ConstantPoolPatch} in one step.
                  Equivalent to {@code new ConstantPoolParser(classFile).createPatch()}.                
                <param>
                    classFile an array of bytes containing a class.                    
                </param>
                <see>
                    #ConstantPoolParser(Class)                    
                </see>
            </javadoc>
            <method name="ConstantPoolPatch" type="constructor" line="32">
                <params>
                    <param name="classFile" type="byte[]"/>
                </params>
            </method>
            <javadoc line="35">
                Create a {@link ConstantPoolParser} and
                  a {@link ConstantPoolPatch} in one step.
                  Equivalent to {@code new ConstantPoolParser(templateClass).createPatch()}.                
                <param>
                    templateClass the class to parse.                    
                </param>
                <see>
                    #ConstantPoolParser(Class)                    
                </see>
            </javadoc>
            <method name="ConstantPoolPatch" type="constructor" line="42">
                <params>
                    <param name="templateClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="45">
                Creates a patch from an existing patch.
                  All changes are copied from that patch.                
                <param>
                    patch a patch                    
                </param>
                <see>
                    ConstantPoolParser#createPatch()                    
                </see>
            </javadoc>
            <method name="ConstantPoolPatch" type="constructor" line="51">
                <params>
                    <param name="patch" type="ConstantPoolPatch"/>
                </params>
            </method>
            <javadoc line="55">
                Which parser built this patch?                
            </javadoc>
            <method name="getParser" type="ConstantPoolParser" line="58"/>
            <javadoc line="61">
                Report the tag at the given index in the constant pool.                
            </javadoc>
            <method name="getTag" type="byte" line="64">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Report the current patch at the given index of the constant pool.
                  Null means no patch will be made.
                  To observe the unpatched entry at the given index, use{@link #getParser()}{@code .}@link ConstantPoolParser#parse(ConstantPoolVisitor)}                
            </javadoc>
            <method name="getPatch" type="Object" line="72">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="value" type="Object" line="73"/>
            </method>
            <javadoc line="87">
                Clear all patches.                
            </javadoc>
            <method name="clear" type="void" line="90"/>
            <javadoc line="93">
                Clear one patch.                
            </javadoc>
            <method name="clear" type="void" line="96">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Produce the patches as an array.                
            </javadoc>
            <method name="getPatches" type="Object[]" line="102"/>
            <javadoc line="105">
                Produce the original constant pool as an array.                
            </javadoc>
            <method name="getOriginalCP" type="Object[]" line="108"/>
            <javadoc line="111">
                Walk the constant pool, applying patches using the given map.                
                <param>
                    utf8Map Utf8 strings to modify, if encountered                    
                </param>
                <param>
                    classMap Classes (or their names) to modify, if encountered                    
                </param>
                <param>
                    valueMap Constant values to modify, if encountered                    
                </param>
                <param>
                    deleteUsedEntries if true, delete map entries that are used                    
                </param>
            </javadoc>
            <method name="putPatches" type="void" line="118">
                <params>
                    <param name="utf8Map" type="Map<String,String>"/>
                    <param name="classMap" type="Map<String,Object>"/>
                    <param name="valueMap" type="Map<Object,Object>"/>
                    <param name="deleteUsedEntries" type="boolean"/>
                </params>
                <declaration name="usedUtf8Keys" type="HashSet&lt;String&gt;" line="119"/>
                <declaration name="usedClassKeys" type="HashSet&lt;String&gt;" line="120"/>
                <declaration name="usedValueKeys" type="HashSet&lt;Object&gt;" line="121"/>
                <scope line="122"/>
                <scope line="127"/>
                <anonymous_class line="132">
                    <method name="visitUTF8" type="void" line="133">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="utf8" type="String"/>
                        </params>
                    </method>
                    <method name="visitConstantValue" type="void" line="137">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="visitConstantString" type="void" line="141">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="name" type="String"/>
                            <param name="nameIndex" type="int"/>
                        </params>
                        <scope line="142"/>
                        <scope line="146"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getOriginalCP" type="Object[]" line="157">
                <params>
                    <param name="startIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="tagMask" type="int"/>
                </params>
                <declaration name="cpArray" type="Object[]" line="158"/>
                <anonymous_class line="159">
                    <method name="show" type="void" line="160">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="visitUTF8" type="void" line="165">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="utf8" type="String"/>
                        </params>
                    </method>
                    <method name="visitConstantValue" type="void" line="168">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="visitConstantString" type="void" line="172">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="value" type="String"/>
                            <param name="j" type="int"/>
                        </params>
                    </method>
                    <method name="visitMemberRef" type="void" line="175">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="className" type="String"/>
                            <param name="memberName" type="String"/>
                            <param name="signature" type="String"/>
                            <param name="j" type="int"/>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                    <method name="visitDescriptor" type="void" line="178">
                        <params>
                            <param name="index" type="int"/>
                            <param name="tag" type="byte"/>
                            <param name="memberName" type="String"/>
                            <param name="signature" type="String"/>
                            <param name="j" type="int"/>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="185">
                Write the head (header plus constant pool)
                  of the patched class file to the indicated stream.                
            </javadoc>
            <method name="writeHead" type="void" line="189">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="192">
                Write the tail (everything after the constant pool)
                  of the patched class file to the indicated stream.                
            </javadoc>
            <method name="writeTail" type="void" line="196">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <method name="checkConstantTag" type="void" line="199">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="checkTag" type="void" line="203">
                <params>
                    <param name="index" type="int"/>
                    <param name="putTag" type="byte"/>
                </params>
                <declaration name="tag" type="byte" line="204"/>
            </method>
            <method name="checkTagMask" type="void" line="207">
                <params>
                    <param name="index" type="int"/>
                    <param name="tagBitMask" type="int"/>
                </params>
                <declaration name="tag" type="byte" line="208"/>
                <declaration name="tagBit" type="int" line="209"/>
            </method>
            <method name="checkMemberName" type="void" line="212">
                <params>
                    <param name="memberName" type="String"/>
                </params>
            </method>
            <javadoc line="215">
                Set the entry of the constant pool indexed by index to
                  a new string.                
                <param>
                    index an index to a constant pool entry containing a{@link ConstantPoolVisitor#CONSTANT_Utf8} value.                    
                </param>
                <param>
                    utf8 a string                    
                </param>
                <see>
                    ConstantPoolVisitor#visitUTF8(int,byte,String)                    
                </see>
            </javadoc>
            <method name="putUTF8" type="void" line="222">
                <params>
                    <param name="index" type="int"/>
                    <param name="utf8" type="String"/>
                </params>
                <scope line="223"/>
            </method>
            <javadoc line="230">
                Set the entry of the constant pool indexed by index to
                  a new value, depending on its dynamic type.                
                <param>
                    index an index to a constant pool entry containing a
                      one of the following structures:{@link ConstantPoolVisitor#CONSTANT_Integer},{@link ConstantPoolVisitor#CONSTANT_Float},{@link ConstantPoolVisitor#CONSTANT_Long},{@link ConstantPoolVisitor#CONSTANT_Double},{@link ConstantPoolVisitor#CONSTANT_String}, or{@link ConstantPoolVisitor#CONSTANT_Class}                    
                </param>
                <param>
                    value a boxed int, float, long or double; or a string or class object                    
                </param>
                <throws>
                    IllegalArgumentException if the type of the constant does not
                      match the constant pool entry type,
                      as reported by {@link #getTag(int)}                    
                </throws>
                <see>
                    #putConstantValue(int,byte,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantValue(int,byte,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantString(int,byte,String,int)                    
                </see>
            </javadoc>
            <method name="putConstantValue" type="void" line="243">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="244"/>
                <declaration name="tag" type="byte" line="248"/>
            </method>
            <javadoc line="253">
                Set the entry of the constant pool indexed by index to
                  a new value.                
                <param>
                    index an index to a constant pool entry matching the given tag                    
                </param>
                <param>
                    tag one of the following values:{@link ConstantPoolVisitor#CONSTANT_Integer},{@link ConstantPoolVisitor#CONSTANT_Float},{@link ConstantPoolVisitor#CONSTANT_Long},{@link ConstantPoolVisitor#CONSTANT_Double},{@link ConstantPoolVisitor#CONSTANT_String}, or{@link ConstantPoolVisitor#CONSTANT_Class}                    
                </param>
                <param>
                    value a boxed number, string, or class object                    
                </param>
                <throws>
                    IllegalArgumentException if the type of the constant does not
                      match the constant pool entry type, or if a class name contains
                      '/' or ';'                    
                </throws>
                <see>
                    #putConstantValue(int,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantValue(int,byte,Object)                    
                </see>
                <see>
                    ConstantPoolVisitor#visitConstantString(int,byte,String,int)                    
                </see>
            </javadoc>
            <method name="putConstantValue" type="void" line="266">
                <params>
                    <param name="index" type="int"/>
                    <param name="tag" type="byte"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="267"/>
                <scope line="272"/>
                <scope line="275"/>
                <scope line="277"/>
            </method>
            <javadoc line="283">
                Set the entry of the constant pool indexed by index to
                  a new {@link ConstantPoolVisitor#CONSTANT_NameAndType} value.                
                <param>
                    index an index to a constant pool entry containing a{@link ConstantPoolVisitor#CONSTANT_NameAndType} value.                    
                </param>
                <param>
                    memberName a memberName                    
                </param>
                <param>
                    signature a signature                    
                </param>
                <throws>
                    IllegalArgumentException if memberName contains the character ';'                    
                </throws>
                <see>
                    ConstantPoolVisitor#visitDescriptor(int,byte,String,String,int,int)                    
                </see>
            </javadoc>
            <method name="putDescriptor" type="void" line="292">
                <params>
                    <param name="index" type="int"/>
                    <param name="memberName" type="String"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="297">
                Set the entry of the constant pool indexed by index to
                  a new {@link ConstantPoolVisitor#CONSTANT_Fieldref},{@link ConstantPoolVisitor#CONSTANT_Methodref}, or{@link ConstantPoolVisitor#CONSTANT_InterfaceMethodref} value.                
                <param>
                    index an index to a constant pool entry containing a member reference                    
                </param>
                <param>
                    className a class name                    
                </param>
                <param>
                    memberName a field or method name                    
                </param>
                <param>
                    signature a field or method signature                    
                </param>
                <throws>
                    IllegalArgumentException if memberName contains the character ';'
                      or signature is not a correct signature                    
                </throws>
                <see>
                    ConstantPoolVisitor#visitMemberRef(int,byte,String,String,String,int,int)                    
                </see>
            </javadoc>
            <method name="putMemberRef" type="void" line="308">
                <params>
                    <param name="index" type="int"/>
                    <param name="tag" type="byte"/>
                    <param name="className" type="String"/>
                    <param name="memberName" type="String"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <declaration name="CONSTANT_MemberRef_MASK" type="int" line="316"/>
            <declaration name="CONSTANT_VALUE_CLASS_TAG" type="Map&lt;Class&lt;?&gt;,Byte&gt;" line="317"/>
            <declaration name="CONSTANT_VALUE_CLASS" type="Class[]" line="318"/>
            <scope line="319">
                <declaration name="values" type="Object[][]" line="320"/>
                <scope line="321">
                    <declaration name="cls" type="Class&lt;?&gt;" line="322"/>
                    <declaration name="tag" type="Byte" line="323"/>
                </scope>
            </scope>
            <method name="classForTag" type="Class<?>" line="328">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <method name="tagForConstant" type="byte" line="332">
                <params>
                    <param name="cls" type="Class<?>"/>
                </params>
                <declaration name="tag" type="Byte" line="333"/>
            </method>
            <method name="checkClassName" type="void" line="336">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="addSemis" type="String" line="339">
                <params>
                    <param name="name" type="String"/>
                    <param name="names" type="String"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="340"/>
                <scope line="342"/>
                <declaration name="res" type="String" line="345"/>
            </method>
            <method name="stripSemis" type="String[]" line="351">
                <params>
                    <param name="count" type="int"/>
                    <param name="string" type="String"/>
                </params>
                <declaration name="res" type="String[]" line="352"/>
                <declaration name="pos" type="int" line="353"/>
                <scope line="354">
                    <declaration name="pos2" type="int" line="355"/>
                </scope>
            </method>
            <method name="toString" type="String" line="363">
                <declaration name="buf" type="StringBuilder" line="364"/>
                <declaration name="origCP" type="Object[]" line="366"/>
                <scope line="367">
                    <scope line="369"/>
                    <scope line="372">
                        <scope line="373"/>
                        <scope line="376"/>
                    </scope>
                    <declaration name="orig" type="Object" line="380"/>
                </scope>
            </method>
        </class>
    </source>