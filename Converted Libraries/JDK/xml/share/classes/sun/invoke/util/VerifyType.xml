<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.util">
        <import package="java.lang.invoke.MethodType"/>
        <import package="sun.invoke.empty.Empty"/>
        <class name="VerifyType" line="4">
            <javadoc line="4">
                This class centralizes information about the JVM verifier
                  and its requirements about type correctness.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <method name="VerifyType" type="constructor" line="10"/>
            <javadoc line="12">
                True if a value can be stacked as the source type and unstacked as the
                  destination type, without violating the JVM&apos;s type consistency.                
                <param>
                    call the type of a stacked value                    
                </param>
                <param>
                    recv the type by which we'd like to treat it                    
                </param>
                <return>
                    whether the retyping can be done without motion or reformatting                    
                </return>
            </javadoc>
            <method name="isNullConversion" type="boolean" line="19">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <declaration name="sw" type="Wrapper" line="28"/>
                <declaration name="dw" type="Wrapper" line="30"/>
            </method>
            <javadoc line="36">
                Specialization of isNullConversion to reference types.                
                <param>
                    call the type of a stacked value                    
                </param>
                <param>
                    recv the reference type by which we'd like to treat it                    
                </param>
                <return>
                    whether the retyping can be done without a cast                    
                </return>
            </javadoc>
            <method name="isNullReferenceConversion" type="boolean" line="42">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="48">
                Is the given type java.lang.Null or an equivalent null-only type?                
            </javadoc>
            <method name="isNullType" type="boolean" line="51">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <declaration name="NULL_CLASS" type="Class&lt;?&gt;" line="55"/>
            <scope line="56">
                <declaration name="nullClass" type="Class&lt;?&gt;" line="57"/>
                <scope line="58"/>
                <scope line="61"/>
            </scope>
            <javadoc line="65">
                True if a method handle can receive a call under a slightly different
                  method type, without moving or reformatting any stack elements.                
                <param>
                    call the type of call being made                    
                </param>
                <param>
                    recv the type of the method handle receiving the call                    
                </param>
                <return>
                    whether the retyping can be done without motion or reformatting                    
                </return>
            </javadoc>
            <method name="isNullConversion" type="boolean" line="72">
                <params>
                    <param name="call" type="MethodType"/>
                    <param name="recv" type="MethodType"/>
                </params>
                <declaration name="len" type="int" line="74"/>
            </method>
            <javadoc line="79">
                Determine if the JVM verifier allows a value of type call to be
                  passed to a formal parameter (or return variable) of type recv.
                  Returns 1 if the verifier allows the types to match without conversion.
                  Returns -1 if the types can be made to match by a JVM-supported adapter.
                  Cases supported are:
                  &lt;ul&gt;&lt;li&gt;checkcast
                  &lt;/li&gt;&lt;li&gt;conversion between any two integral types (but not floats)
                  &lt;/li&gt;&lt;li&gt;unboxing from a wrapper to its corresponding primitive type
                  &lt;/li&gt;&lt;li&gt;conversion in either direction between float and double
                  &lt;/li&gt;&lt;/ul&gt;
                  (Autoboxing is not supported here; it must be done via Java code.)
                  Returns 0 otherwise.                
            </javadoc>
            <method name="canPassUnchecked" type="int" line="93">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <scope line="95">
                    <declaration name="sw" type="Wrapper" line="99"/>
                    <declaration name="dw" type="Wrapper" line="100"/>
                    <scope line="101"/>
                    <scope line="106"/>
                    <scope line="110"/>
                </scope>
                <scope line="114"/>
            </method>
            <method name="canPassRaw" type="int" line="120">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <scope line="121">
                    <declaration name="sw" type="Wrapper" line="126"/>
                    <declaration name="dw" type="Wrapper" line="127"/>
                </scope>
                <scope line="132"/>
            </method>
            <method name="isSpreadArgType" type="boolean" line="138">
                <params>
                    <param name="spreadArg" type="Class<?>"/>
                </params>
            </method>
            <method name="spreadArgElementType" type="Class<?>" line="141">
                <params>
                    <param name="spreadArg" type="Class<?>"/>
                    <param name="i" type="int"/>
                </params>
            </method>
        </class>
    </source>