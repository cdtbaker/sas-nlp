<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.util">
        <import package="java.lang.invoke.MethodType"/>
        <import package="sun.invoke.empty.Empty"/>
        <class name="VerifyType" line="31">
            <comment line="39">
                cannot instantiate                
            </comment>
            <comment line="126">
                TO DO: isRawConversion                
            </comment>
            <javadoc line="31">
                This class centralizes information about the JVM verifier
                  and its requirements about type correctness.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <method name="VerifyType" type="constructor" line="38"/>
            <javadoc line="40">
                True if a value can be stacked as the source type and unstacked as the
                  destination type, without violating the JVM&apos;s type consistency.                
                <param>
                    call the type of a stacked value                    
                </param>
                <param>
                    recv the type by which we'd like to treat it                    
                </param>
                <return>
                    whether the retyping can be done without motion or reformatting                    
                </return>
            </javadoc>
            <method name="isNullConversion" type="boolean" line="48">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <comment line="51">
                    Verifier allows any interface to be treated as Object:                    
                </comment>
                <comment line="54">
                    check again                    
                </comment>
                <comment line="55">
                    drop any return value                    
                </comment>
                <comment line="59">
                    Verifier allows an int to carry byte, short, char, or even boolean:                    
                </comment>
                <declaration name="sw" type="Wrapper" line="59"/>
                <declaration name="dw" type="Wrapper" line="61"/>
            </method>
            <javadoc line="68">
                Specialization of isNullConversion to reference types.                
                <param>
                    call the type of a stacked value                    
                </param>
                <param>
                    recv the reference type by which we'd like to treat it                    
                </param>
                <return>
                    whether the retyping can be done without a cast                    
                </return>
            </javadoc>
            <method name="isNullReferenceConversion" type="boolean" line="75">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <comment line="78">
                    verifier allows this                    
                </comment>
            </method>
            <javadoc line="82">
                Is the given type java.lang.Null or an equivalent null-only type?                
            </javadoc>
            <method name="isNullType" type="boolean" line="85">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <comment line="89">
                    This one may also be used as a null type.
                     TO DO: Decide if we really want to legitimize it here.
                     Probably we do, unless java.lang.Null really makes it into Java 7
                    || type == Void.class
                     Locally known null-only class:                    
                </comment>
            </method>
            <declaration name="NULL_CLASS" type="Class&lt;?&gt;" line="96"/>
            <scope line="97">
                <declaration name="nullClass" type="Class&lt;?&gt;" line="98"/>
                <scope line="99"/>
                <scope line="101"/>
            </scope>
            <javadoc line="107">
                True if a method handle can receive a call under a slightly different
                  method type, without moving or reformatting any stack elements.                
                <param>
                    call the type of call being made                    
                </param>
                <param>
                    recv the type of the method handle receiving the call                    
                </param>
                <return>
                    whether the retyping can be done without motion or reformatting                    
                </return>
            </javadoc>
            <method name="isNullConversion" type="boolean" line="115">
                <params>
                    <param name="call" type="MethodType"/>
                    <param name="recv" type="MethodType"/>
                </params>
                <declaration name="len" type="int" line="117"/>
            </method>
            <javadoc line="127">
                Determine if the JVM verifier allows a value of type call to be
                  passed to a formal parameter (or return variable) of type recv.
                  Returns 1 if the verifier allows the types to match without conversion.
                  Returns -1 if the types can be made to match by a JVM-supported adapter.
                  Cases supported are:
                  &lt;ul&gt;&lt;li&gt;checkcast
                  &lt;/li&gt;&lt;li&gt;conversion between any two integral types (but not floats)
                  &lt;/li&gt;&lt;li&gt;unboxing from a wrapper to its corresponding primitive type
                  &lt;/li&gt;&lt;li&gt;conversion in either direction between float and double
                  &lt;/li&gt;&lt;/ul&gt;
                  (Autoboxing is not supported here; it must be done via Java code.)
                  Returns 0 otherwise.                
            </javadoc>
            <method name="canPassUnchecked" type="int" line="141">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <comment line="148">
                    Return anything to a caller expecting void.
                     This is a property of the implementation, which links
                     return values via a register rather than via a stack push.
                     This makes it possible to ignore cleanly.                    
                </comment>
                <comment line="154">
                    void-to-something?                    
                </comment>
                <comment line="156">
                    Cannot pass a reference to any primitive type (exc. void).                    
                </comment>
                <comment line="162">
                    truncation may be required                    
                </comment>
                <comment line="164">
                    sign elimination may be required                    
                </comment>
                <comment line="169">
                    floating conversion may be required                    
                </comment>
                <comment line="171">
                    other primitive conversions NYI                    
                </comment>
                <comment line="173">
                    all fixed-point conversions are supported                    
                </comment>
                <comment line="177">
                    Cannot pass a primitive to any reference type.
                     (Maybe allow null.class?)                    
                </comment>
                <comment line="182">
                    Handle reference types in the rest of the block:                    
                </comment>
                <comment line="184">
                    The verifier treats interfaces exactly like Object.                    
                </comment>
                <comment line="186">
                    pass any reference to object or an arb. interface                    
                </comment>
                <comment line="188">
                    else it&apos;s a definite &quot;maybe&quot; (cast is required)                    
                </comment>
                <scope line="145">
                    <declaration name="sw" type="Wrapper" line="157"/>
                    <declaration name="dw" type="Wrapper" line="158"/>
                    <scope line="159"/>
                    <scope line="166"/>
                    <scope line="171"/>
                </scope>
                <scope line="175"/>
            </method>
            <method name="canPassRaw" type="int" line="191">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <comment line="195">
                    As above, return anything to a caller expecting void.                    
                </comment>
                <comment line="198">
                    Special permission for raw conversions: allow a void
                     to be captured as a garbage int.
                     Caller promises that the actual value will be disregarded.                    
                </comment>
                <comment line="203">
                    Special permission for raw conversions: allow a null
                     to be reinterpreted as anything.  For objects, it is safe,
                     and for primitives you get a garbage value (probably zero).                    
                </comment>
                <comment line="212">
                    can do a reinterpret-cast on a stacked primitive                    
                </comment>
                <comment line="214">
                    can drop an outgoing int value                    
                </comment>
                <comment line="220">
                    Both references.                    
                </comment>
                <scope line="192">
                    <declaration name="sw" type="Wrapper" line="208"/>
                    <declaration name="dw" type="Wrapper" line="209"/>
                </scope>
                <scope line="215"/>
            </method>
            <method name="isSpreadArgType" type="boolean" line="225">
                <params>
                    <param name="spreadArg" type="Class<?>"/>
                </params>
            </method>
            <method name="spreadArgElementType" type="Class<?>" line="228">
                <params>
                    <param name="spreadArg" type="Class<?>"/>
                    <param name="i" type="int"/>
                </params>
            </method>
        </class>
    </source>