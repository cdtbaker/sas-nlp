<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.util">
        <import package="java.lang.invoke.MethodHandle"/>
        <import package="java.lang.invoke.MethodHandles"/>
        <import package="java.lang.invoke.MethodHandles.Lookup"/>
        <import package="java.lang.invoke.MethodType"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.EnumMap"/>
        <import package="java.util.List"/>
        <class name="ValueConversions" line="40">
            <comment line="43">
                Do not adjust this except for special platforms:                
            </comment>
            <comment line="67">
                / Converting references to values.                
            </comment>
            <comment line="69">
                There are several levels of this unboxing conversions:
                   no conversions:  exactly Integer.valueOf, etc.
                   implicit conversions sanctioned by JLS 5.1.2, etc.
                   explicit conversions as allowed by explicitCastArguments                
            </comment>
            <comment line="122">
                / Converting references to &quot;raw&quot; values.
                / A raw primitive value is always an int or long.                
            </comment>
            <comment line="216">
                / Primitive conversions                
            </comment>
            <comment line="241">
                / Converting primitives to references                
            </comment>
            <comment line="275">
                / Converting raw primitives to references                
            </comment>
            <comment line="301">
                a raw void value is (arbitrarily) a garbage int                
            </comment>
            <comment line="386">
                / Kludges for when raw values get accidentally boxed.                
            </comment>
            <comment line="490">
                / Width-changing conversions between int and long.                
            </comment>
            <comment line="508">
                / Constant functions                
            </comment>
            <comment line="580">
                / Converting references to references.                
            </comment>
            <comment line="687">
                Varargs methods need to be in a separately initialized class, to bootstrapping problems.                
            </comment>
            <comment line="777">
                / Float/non-float conversions.                
            </comment>
            <comment line="786">
                narrow double to integral type                
            </comment>
            <comment line="806">
                narrow float to integral type                
            </comment>
            <comment line="826">
                widen integral type to double                
            </comment>
            <comment line="846">
                widen integral type to float                
            </comment>
            <comment line="938">
                / Collection of multiple arguments.                
            </comment>
            <comment line="1024">
                mh-fill versions of the above:                
            </comment>
            <comment line="1029">
                using Integer pos instead of int pos to avoid bootstrapping problems                
            </comment>
            <comment line="1109">
                filler(N).invoke(a, arg0..arg[N-1]) fills a[0]..a[N-1]                
            </comment>
            <comment line="1143">
                Type-polymorphic version of varargs maker.                
            </comment>
            <comment line="1180">
                List version of varargs maker.                
            </comment>
            <declaration name="THIS_CLASS" type="Class&lt;?&gt;" line="41"/>
            <declaration name="MAX_ARITY" type="int" line="43"/>
            <scope line="44">
                <declaration name="values" type="Object[]" line="45"/>
                <anonymous_class line="46">
                    <method name="run" type="Void" line="47"/>
                </anonymous_class>
            </scope>
            <declaration name="IMPL_LOOKUP" type="Lookup" line="55"/>
            <method name="newWrapperCaches" type="EnumMap<Wrapper,MethodHandle>[]" line="57">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="61">
                    unchecked warning expected here                    
                </comment>
                <declaration name="caches" type="EnumMap&lt;Wrapper,MethodHandle&gt;[]" line="58"/>
            </method>
            <method name="unboxInteger" type="int" line="73">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxByte" type="byte" line="79">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxShort" type="short" line="85">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxBoolean" type="boolean" line="91">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxCharacter" type="char" line="97">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxLong" type="long" line="103">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxFloat" type="float" line="109">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxDouble" type="double" line="115">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxByteRaw" type="int" line="124">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxShortRaw" type="int" line="128">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxBooleanRaw" type="int" line="132">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxCharacterRaw" type="int" line="136">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxFloatRaw" type="int" line="140">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxDoubleRaw" type="long" line="144">
                <params>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
            </method>
            <method name="unboxType" type="MethodType" line="148">
                <params>
                    <param name="wrap" type="Wrapper"/>
                    <param name="raw" type="boolean"/>
                </params>
            </method>
            <declaration name="UNBOX_CONVERSIONS" type="EnumMap&lt;Wrapper,MethodHandle&gt;[]" line="152"/>
            <method name="unbox" type="MethodHandle" line="155">
                <params>
                    <param name="wrap" type="Wrapper"/>
                    <param name="raw" type="boolean"/>
                    <param name="cast" type="boolean"/>
                </params>
                <comment line="162">
                    slow path                    
                </comment>
                <comment line="169">
                    these guys don&apos;t need separate raw channels                    
                </comment>
                <comment line="177">
                    look up the method                    
                </comment>
                <declaration name="cache" type="EnumMap&lt;Wrapper,MethodHandle&gt;" line="156"/>
                <declaration name="mh" type="MethodHandle" line="157"/>
                <scope line="158"/>
                <scope line="172"/>
                <declaration name="name" type="String" line="177"/>
                <declaration name="type" type="MethodType" line="178"/>
                <scope line="179"/>
                <scope line="181"/>
                <scope line="184"/>
            </method>
            <method name="unboxCast" type="MethodHandle" line="193">
                <params>
                    <param name="type" type="Wrapper"/>
                </params>
            </method>
            <method name="unboxRaw" type="MethodHandle" line="197">
                <params>
                    <param name="type" type="Wrapper"/>
                </params>
            </method>
            <method name="unbox" type="MethodHandle" line="201">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <method name="unboxCast" type="MethodHandle" line="205">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <method name="unboxRaw" type="MethodHandle" line="209">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <declaration name="ZERO_INT" type="Integer" line="213"/>
            <method name="primitiveConversion" type="Number" line="216">
                <params>
                    <param name="wrap" type="Wrapper"/>
                    <param name="x" type="Object"/>
                    <param name="cast" type="boolean"/>
                </params>
                <comment line="218">
                    Maybe merge this code with Wrapper.convert/cast.                    
                </comment>
                <comment line="231">
                    this will fail with the required ClassCastException:                    
                </comment>
                <comment line="236">
                    this will fail with the required ClassCastException:                    
                </comment>
                <declaration name="res" type="Number" line="218"/>
                <scope line="219"/>
                <scope line="223"/>
                <scope line="225"/>
                <scope line="227"/>
                <scope line="229"/>
                <declaration name="xwrap" type="Wrapper" line="233"/>
            </method>
            <method name="boxInteger" type="Integer" line="242">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="boxByte" type="Byte" line="246">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <method name="boxShort" type="Short" line="250">
                <params>
                    <param name="x" type="short"/>
                </params>
            </method>
            <method name="boxBoolean" type="Boolean" line="254">
                <params>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <method name="boxCharacter" type="Character" line="258">
                <params>
                    <param name="x" type="char"/>
                </params>
            </method>
            <method name="boxLong" type="Long" line="262">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <method name="boxFloat" type="Float" line="266">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="boxDouble" type="Double" line="270">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="boxByteRaw" type="Byte" line="276">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="boxShortRaw" type="Short" line="280">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="boxBooleanRaw" type="Boolean" line="284">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="boxCharacterRaw" type="Character" line="288">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="boxFloatRaw" type="Float" line="292">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="boxDoubleRaw" type="Double" line="296">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <method name="boxVoidRaw" type="Void" line="301">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="boxType" type="MethodType" line="305">
                <params>
                    <param name="wrap" type="Wrapper"/>
                    <param name="raw" type="boolean"/>
                </params>
                <comment line="307">
                    be exact, since return casts are hard to compose                    
                </comment>
                <declaration name="boxType" type="Class&lt;?&gt;" line="307"/>
            </method>
            <method name="rawWrapper" type="Wrapper" line="311">
                <params>
                    <param name="wrap" type="Wrapper"/>
                    <param name="raw" type="boolean"/>
                </params>
            </method>
            <declaration name="BOX_CONVERSIONS" type="EnumMap&lt;Wrapper,MethodHandle&gt;[]" line="316"/>
            <method name="box" type="MethodHandle" line="319">
                <params>
                    <param name="wrap" type="Wrapper"/>
                    <param name="exact" type="boolean"/>
                    <param name="raw" type="boolean"/>
                </params>
                <comment line="326">
                    slow path                    
                </comment>
                <comment line="334">
                    these guys don&apos;t need separate raw channels                    
                </comment>
                <comment line="342">
                    look up the method                    
                </comment>
                <declaration name="cache" type="EnumMap&lt;Wrapper,MethodHandle&gt;" line="320"/>
                <declaration name="mh" type="MethodHandle" line="321"/>
                <scope line="322"/>
                <scope line="337"/>
                <declaration name="name" type="String" line="342"/>
                <declaration name="type" type="MethodType" line="343"/>
                <scope line="344">
                    <scope line="345"/>
                    <scope line="347"/>
                </scope>
                <scope line="350"/>
                <scope line="353"/>
            </method>
            <method name="box" type="MethodHandle" line="361">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <comment line="364">
                    e.g., boxShort(short)Short if exact,
                     e.g., boxShort(short)Object if !exact                    
                </comment>
                <declaration name="exact" type="boolean" line="362"/>
            </method>
            <method name="boxRaw" type="MethodHandle" line="368">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <comment line="371">
                    e.g., boxShortRaw(int)Short if exact
                     e.g., boxShortRaw(int)Object if !exact                    
                </comment>
                <declaration name="exact" type="boolean" line="369"/>
            </method>
            <method name="box" type="MethodHandle" line="375">
                <params>
                    <param name="type" type="Wrapper"/>
                </params>
                <declaration name="exact" type="boolean" line="376"/>
            </method>
            <method name="boxRaw" type="MethodHandle" line="380">
                <params>
                    <param name="type" type="Wrapper"/>
                </params>
                <declaration name="exact" type="boolean" line="381"/>
            </method>
            <method name="unboxRawInteger" type="int" line="387">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxRawInteger" type="Integer" line="394">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxRawByte" type="Byte" line="401">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxRawShort" type="Short" line="406">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxRawBoolean" type="Boolean" line="411">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxRawCharacter" type="Character" line="416">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxRawFloat" type="Float" line="421">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxRawLong" type="Long" line="426">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <comment line="428">
                    never a rebox                    
                </comment>
            </method>
            <method name="reboxRawDouble" type="Double" line="430">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="reboxType" type="MethodType" line="435">
                <params>
                    <param name="wrap" type="Wrapper"/>
                </params>
                <declaration name="boxType" type="Class&lt;?&gt;" line="436"/>
            </method>
            <declaration name="REBOX_CONVERSIONS" type="EnumMap&lt;Wrapper,MethodHandle&gt;[]" line="440"/>
            <javadoc line="443">
                Because we normalize primitive types to reduce the number of signatures,
                  primitives are sometimes manipulated under an &quot;erased&quot; type,
                  either int (for types other than long/double) or long (for all types).
                  When the erased primitive value is then boxed into an Integer or Long,
                  the final boxed primitive is sometimes required.  This transformation
                  is called a &quot;rebox&quot;.  It takes an Integer or Long and produces some
                  other boxed value, typed (inexactly) as an Object                
            </javadoc>
            <method name="rebox" type="MethodHandle" line="452">
                <params>
                    <param name="wrap" type="Wrapper"/>
                </params>
                <comment line="459">
                    slow path                    
                </comment>
                <comment line="470">
                    look up the method                    
                </comment>
                <declaration name="cache" type="EnumMap&lt;Wrapper,MethodHandle&gt;" line="453"/>
                <declaration name="mh" type="MethodHandle" line="454"/>
                <scope line="455"/>
                <scope line="465"/>
                <declaration name="name" type="String" line="470"/>
                <declaration name="type" type="MethodType" line="471"/>
                <scope line="472"/>
                <scope line="475"/>
                <scope line="478"/>
            </method>
            <method name="rebox" type="MethodHandle" line="485">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <method name="widenInt" type="long" line="491">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="widenBoxedInt" type="Long" line="495">
                <params>
                    <param name="x" type="Integer"/>
                </params>
            </method>
            <method name="narrowLong" type="int" line="499">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <method name="narrowBoxedLong" type="Integer" line="503">
                <params>
                    <param name="x" type="Long"/>
                </params>
            </method>
            <method name="ignore" type="void" line="509">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <comment line="511">
                    no value to return; this is an unbox of null                    
                </comment>
            </method>
            <method name="empty" type="void" line="514"/>
            <method name="zeroObject" type="Object" line="518"/>
            <method name="zeroInteger" type="int" line="522"/>
            <method name="zeroLong" type="long" line="526"/>
            <method name="zeroFloat" type="float" line="530"/>
            <method name="zeroDouble" type="double" line="534"/>
            <declaration name="CONSTANT_FUNCTIONS" type="EnumMap&lt;Wrapper,MethodHandle&gt;[]" line="538"/>
            <method name="zeroConstantFunction" type="MethodHandle" line="541">
                <params>
                    <param name="wrap" type="Wrapper"/>
                </params>
                <comment line="548">
                    slow path                    
                </comment>
                <comment line="568">
                    use the raw method                    
                </comment>
                <declaration name="cache" type="EnumMap&lt;Wrapper,MethodHandle&gt;" line="542"/>
                <declaration name="mh" type="MethodHandle" line="543"/>
                <scope line="544"/>
                <declaration name="type" type="MethodType" line="548"/>
                <scope line="555"/>
                <scope line="557"/>
                <scope line="562"/>
                <declaration name="rawWrap" type="Wrapper" line="568"/>
                <scope line="569"/>
                <scope line="572"/>
            </method>
            <javadoc line="581">
                Value-killing function.                
                <param>
                    x an arbitrary reference value                    
                </param>
                <return>
                    a null                    
                </return>
            </javadoc>
            <method name="alwaysNull" type="Object" line="586">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="590">
                Value-killing function.                
                <param>
                    x an arbitrary reference value                    
                </param>
                <return>
                    a zero                    
                </return>
            </javadoc>
            <method name="alwaysZero" type="int" line="595">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="599">
                Identity function.                
                <param>
                    x an arbitrary reference value                    
                </param>
                <return>
                    the same value x                    
                </return>
            </javadoc>
            <method name="identity" type="T" line="604">
                <params>
                    <param name="x" type="T"/>
                </params>
            </method>
            <javadoc line="608">
                Identity function on ints.                
                <param>
                    x an arbitrary int value                    
                </param>
                <return>
                    the same value x                    
                </return>
            </javadoc>
            <method name="identity" type="int" line="613">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="identity" type="byte" line="617">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <method name="identity" type="short" line="621">
                <params>
                    <param name="x" type="short"/>
                </params>
            </method>
            <method name="identity" type="boolean" line="625">
                <params>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <method name="identity" type="char" line="629">
                <params>
                    <param name="x" type="char"/>
                </params>
            </method>
            <javadoc line="633">
                Identity function on longs.                
                <param>
                    x an arbitrary long value                    
                </param>
                <return>
                    the same value x                    
                </return>
            </javadoc>
            <method name="identity" type="long" line="638">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <method name="identity" type="float" line="642">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="identity" type="double" line="646">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="650">
                Identity function, with reference cast.                
                <param>
                    t an arbitrary reference type                    
                </param>
                <param>
                    x an arbitrary reference value                    
                </param>
                <return>
                    the same value x                    
                </return>
            </javadoc>
            <method name="castReference" type="T" line="656">
                <params>
                    <param name="t" type="Class<? extends T>"/>
                    <param name="x" type="U"/>
                </params>
            </method>
            <declaration name="IDENTITY" type="MethodHandle" line="660"/>
            <scope line="661">
                <scope line="662">
                    <declaration name="idType" type="MethodType" line="663"/>
                    <declaration name="castType" type="MethodType" line="664"/>
                    <declaration name="alwaysZeroType" type="MethodType" line="665"/>
                    <declaration name="ignoreType" type="MethodType" line="666"/>
                    <declaration name="zeroObjectType" type="MethodType" line="667"/>
                </scope>
                <scope line="679">
                    <declaration name="err" type="Error" line="680"/>
                </scope>
            </scope>
            <class name="LazyStatics" line="687">
                <declaration name="COPY_AS_REFERENCE_ARRAY" type="MethodHandle" line="688"/>
                <scope line="689">
                    <scope line="690"/>
                    <scope line="695">
                        <declaration name="err" type="Error" line="696"/>
                    </scope>
                </scope>
            </class>
            <declaration name="WRAPPER_CASTS" type="EnumMap&lt;Wrapper,MethodHandle&gt;[]" line="703"/>
            <javadoc line="706">
                Return a method that casts its sole argument (an Object) to the given type
                  and returns it as the given type (if exact is true), or as plain Object (if erase is true).                
            </javadoc>
            <method name="cast" type="MethodHandle" line="709">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <comment line="731">
                    mh = AdapterMethodHandle.makeRetypeRaw(IMPL_TOKEN, xmt, mh);                    
                </comment>
                <declaration name="exact" type="boolean" line="710"/>
                <declaration name="mh" type="MethodHandle" line="712"/>
                <declaration name="wrap" type="Wrapper" line="713"/>
                <declaration name="cache" type="EnumMap&lt;Wrapper,MethodHandle&gt;" line="714"/>
                <scope line="715"/>
                <scope line="727">
                    <declaration name="xmt" type="MethodType" line="728"/>
                </scope>
            </method>
            <method name="identity" type="MethodHandle" line="737"/>
            <method name="identity" type="MethodHandle" line="741">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <comment line="743">
                    This stuff has been moved into MethodHandles:                    
                </comment>
            </method>
            <method name="identity" type="MethodHandle" line="746">
                <params>
                    <param name="wrap" type="Wrapper"/>
                </params>
                <comment line="753">
                    slow path                    
                </comment>
                <comment line="763">
                    #(){} : #()void                    
                </comment>
                <declaration name="cache" type="EnumMap&lt;Wrapper,MethodHandle&gt;" line="747"/>
                <declaration name="mh" type="MethodHandle" line="748"/>
                <scope line="749"/>
                <declaration name="type" type="MethodType" line="753"/>
                <scope line="756"/>
                <scope line="758"/>
                <scope line="761"/>
                <scope line="764"/>
                <scope line="769"/>
            </method>
            <method name="doubleToFloat" type="float" line="778">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="floatToDouble" type="double" line="781">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="doubleToLong" type="long" line="786">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="doubleToInt" type="int" line="789">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="doubleToShort" type="short" line="792">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="doubleToChar" type="char" line="795">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="doubleToByte" type="byte" line="798">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="doubleToBoolean" type="boolean" line="801">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="floatToLong" type="long" line="806">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="floatToInt" type="int" line="809">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="floatToShort" type="short" line="812">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="floatToChar" type="char" line="815">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="floatToByte" type="byte" line="818">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="floatToBoolean" type="boolean" line="821">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <method name="longToDouble" type="double" line="826">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <method name="intToDouble" type="double" line="829">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="shortToDouble" type="double" line="832">
                <params>
                    <param name="x" type="short"/>
                </params>
            </method>
            <method name="charToDouble" type="double" line="835">
                <params>
                    <param name="x" type="char"/>
                </params>
            </method>
            <method name="byteToDouble" type="double" line="838">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <method name="booleanToDouble" type="double" line="841">
                <params>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <method name="longToFloat" type="float" line="846">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <method name="intToFloat" type="float" line="849">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="shortToFloat" type="float" line="852">
                <params>
                    <param name="x" type="short"/>
                </params>
            </method>
            <method name="charToFloat" type="float" line="855">
                <params>
                    <param name="x" type="char"/>
                </params>
            </method>
            <method name="byteToFloat" type="float" line="858">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <method name="booleanToFloat" type="float" line="861">
                <params>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <method name="toBoolean" type="boolean" line="865">
                <params>
                    <param name="x" type="byte"/>
                </params>
                <comment line="867">
                    see javadoc for MethodHandles.explicitCastArguments                    
                </comment>
            </method>
            <method name="fromBoolean" type="byte" line="869">
                <params>
                    <param name="x" type="boolean"/>
                </params>
                <comment line="871">
                    see javadoc for MethodHandles.explicitCastArguments                    
                </comment>
            </method>
            <declaration name="CONVERT_FLOAT_FUNCTIONS" type="EnumMap&lt;Wrapper,MethodHandle&gt;[]" line="874"/>
            <method name="convertFloatFunction" type="MethodHandle" line="877">
                <params>
                    <param name="wrap" type="Wrapper"/>
                    <param name="toFloat" type="boolean"/>
                    <param name="doubleSize" type="boolean"/>
                </params>
                <comment line="884">
                    slow path                    
                </comment>
                <declaration name="cache" type="EnumMap&lt;Wrapper,MethodHandle&gt;" line="878"/>
                <declaration name="mh" type="MethodHandle" line="879"/>
                <scope line="880"/>
                <declaration name="fwrap" type="Wrapper" line="884"/>
                <declaration name="fix" type="Class&lt;?&gt;" line="885"/>
                <declaration name="flt" type="Class&lt;?&gt;" line="886"/>
                <declaration name="src" type="Class&lt;?&gt;" line="887"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="888"/>
                <declaration name="type" type="MethodType" line="890"/>
                <scope line="899"/>
                <scope line="901"/>
                <scope line="906"/>
            </method>
            <method name="convertFromFloat" type="MethodHandle" line="916">
                <params>
                    <param name="fixType" type="Class<?>"/>
                </params>
                <declaration name="wrap" type="Wrapper" line="917"/>
            </method>
            <method name="convertFromDouble" type="MethodHandle" line="920">
                <params>
                    <param name="fixType" type="Class<?>"/>
                </params>
                <declaration name="wrap" type="Wrapper" line="921"/>
            </method>
            <method name="convertToFloat" type="MethodHandle" line="924">
                <params>
                    <param name="fixType" type="Class<?>"/>
                </params>
                <declaration name="wrap" type="Wrapper" line="925"/>
            </method>
            <method name="convertToDouble" type="MethodHandle" line="928">
                <params>
                    <param name="fixType" type="Class<?>"/>
                </params>
                <declaration name="wrap" type="Wrapper" line="929"/>
            </method>
            <method name="capitalize" type="String" line="933">
                <params>
                    <param name="x" type="String"/>
                </params>
            </method>
            <method name="convertArrayElements" type="Object" line="939">
                <params>
                    <param name="arrayType" type="Class<?>"/>
                    <param name="array" type="Object"/>
                </params>
                <declaration name="src" type="Class&lt;?&gt;" line="940"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="941"/>
                <declaration name="sw" type="Wrapper" line="943"/>
                <declaration name="dw" type="Wrapper" line="944"/>
                <declaration name="length" type="int" line="945"/>
                <scope line="946">
                    <declaration name="a" type="Object[]" line="947"/>
                    <declaration name="res" type="Object" line="951"/>
                </scope>
                <declaration name="res" type="Object[]" line="956"/>
                <scope line="957"/>
                <scope line="959"/>
                <declaration name="a" type="Object" line="964"/>
            </method>
            <method name="findCollector" type="MethodHandle" line="969">
                <params>
                    <param name="name" type="String"/>
                    <param name="nargs" type="int"/>
                    <param name="rtype" type="Class<?>"/>
                    <param name="ptypes" type="Class<?>"/>
                </params>
                <declaration name="type" type="MethodType" line="970"/>
                <scope line="973"/>
                <scope line="975"/>
            </method>
            <declaration name="NO_ARGS_ARRAY" type="Object[]" line="980"/>
            <method name="makeArray" type="Object[]" line="981">
                <params>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="982"/>
            <method name="array" type="Object[]" line="984">
                <params>
                    <param name="a0" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="986">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="988">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="990">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="993">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="996">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="999">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="1002">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="1006">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                    <param name="a8" type="Object"/>
                </params>
            </method>
            <method name="array" type="Object[]" line="1010">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                    <param name="a8" type="Object"/>
                    <param name="a9" type="Object"/>
                </params>
            </method>
            <method name="makeArrays" type="MethodHandle[]" line="1011">
                <comment line="1019">
                    current number of methods                    
                </comment>
                <declaration name="mhs" type="ArrayList&lt;MethodHandle&gt;" line="1012"/>
                <scope line="1013">
                    <declaration name="mh" type="MethodHandle" line="1014"/>
                </scope>
            </method>
            <declaration name="ARRAYS" type="MethodHandle[]" line="1021"/>
            <method name="newArray" type="Object[]" line="1024">
                <params>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="fillWithArguments" type="void" line="1025">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="int"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1030">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1032">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1034">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1036">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1039">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1042">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1045">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1048">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1052">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                    <param name="a8" type="Object"/>
                </params>
            </method>
            <method name="fillArray" type="Object[]" line="1056">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="pos" type="Integer"/>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                    <param name="a8" type="Object"/>
                    <param name="a9" type="Object"/>
                </params>
            </method>
            <method name="makeFillArrays" type="MethodHandle[]" line="1057">
                <comment line="1060">
                    there is no empty fill; at least a0 is required                    
                </comment>
                <comment line="1066">
                    current number of methods                    
                </comment>
                <declaration name="mhs" type="ArrayList&lt;MethodHandle&gt;" line="1058"/>
                <scope line="1060">
                    <declaration name="mh" type="MethodHandle" line="1061"/>
                </scope>
            </method>
            <declaration name="FILL_ARRAYS" type="MethodHandle[]" line="1068"/>
            <method name="copyAsReferenceArray" type="Object[]" line="1070">
                <params>
                    <param name="arrayType" type="Class<? extends Object[]>"/>
                    <param name="a" type="Object"/>
                </params>
            </method>
            <method name="copyAsPrimitiveArray" type="Object" line="1073">
                <params>
                    <param name="w" type="Wrapper"/>
                    <param name="boxes" type="Object"/>
                </params>
                <declaration name="a" type="Object" line="1074"/>
            </method>
            <javadoc line="1079">
                Return a method handle that takes the indicated number of Object
                  arguments and returns an Object array of them, as if for varargs.                
            </javadoc>
            <method name="varargsArray" type="MethodHandle" line="1082">
                <params>
                    <param name="nargs" type="int"/>
                </params>
                <comment line="1088">
                    identity function produces result                    
                </comment>
                <declaration name="mh" type="MethodHandle" line="1083"/>
                <declaration name="producer" type="MethodHandle" line="1087"/>
            </method>
            <method name="buildVarargsArray" type="MethodHandle" line="1091">
                <params>
                    <param name="producer" type="MethodHandle"/>
                    <param name="nargs" type="int"/>
                </params>
                <comment line="1093">
                    Build up the result mh as a sequence of fills like this:
                       producer(fill(fill(fill(newArray(23),0,x1..x10),10,x11..x20),20,x21..x23))
                     The various fill(_,10*I,___*[J]) are reusable.                    
                </comment>
                <declaration name="filler" type="MethodHandle" line="1095"/>
                <declaration name="mh" type="MethodHandle" line="1096"/>
            </method>
            <method name="buildNewArray" type="MethodHandle" line="1103">
                <params>
                    <param name="nargs" type="int"/>
                </params>
            </method>
            <declaration name="FILLERS" type="MethodHandle[]" line="1107"/>
            <method name="filler" type="MethodHandle" line="1109">
                <params>
                    <param name="nargs" type="int"/>
                </params>
                <declaration name="filler" type="MethodHandle" line="1110"/>
            </method>
            <method name="buildFiller" type="MethodHandle" line="1114">
                <params>
                    <param name="nargs" type="int"/>
                </params>
                <comment line="1124">
                    build some precursors from left to right                    
                </comment>
                <comment line="1128">
                    recursive fill                    
                </comment>
                <comment line="1130">
                    [leftLen..nargs-1]                    
                </comment>
                <comment line="1132">
                    Combine the two fills: right(left(newArray(nargs), x1..x20), x21..x23)                    
                </comment>
                <comment line="1133">
                    identity function produces result                    
                </comment>
                <declaration name="CHUNK" type="int" line="1117"/>
                <declaration name="rightLen" type="int" line="1118"/>
                <declaration name="leftLen" type="int" line="1119"/>
                <scope line="1120">
                    <scope line="1122"/>
                </scope>
                <declaration name="leftFill" type="MethodHandle" line="1127"/>
                <declaration name="rightFill" type="MethodHandle" line="1128"/>
                <declaration name="mh" type="MethodHandle" line="1132"/>
                <scope line="1135"/>
            </method>
            <declaration name="TYPED_COLLECTORS" type="ClassValue&lt;MethodHandle[]&gt;" line="1143"/>
            <anonymous_class line="1144">
                <method name="computeValue" type="MethodHandle[]" line="1145">
                    <params>
                        <param name="type" type="Class<?>"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="1150">
                Return a method handle that takes the indicated number of
                  typed arguments and returns an array of them.
                  The type argument is the array type.                
            </javadoc>
            <method name="varargsArray" type="MethodHandle" line="1154">
                <params>
                    <param name="arrayType" type="Class<?>"/>
                    <param name="nargs" type="int"/>
                </params>
                <comment line="1158">
                    FIXME: Need more special casing and caching here.                    
                </comment>
                <comment line="1161">
                    other cases:  primitive arrays, subtypes of Object[]                    
                </comment>
                <declaration name="elemType" type="Class&lt;?&gt;" line="1155"/>
                <declaration name="cache" type="MethodHandle" line="1161"/>
                <declaration name="mh" type="MethodHandle" line="1162"/>
                <declaration name="producer" type="MethodHandle" line="1164"/>
            </method>
            <method name="buildArrayProducer" type="MethodHandle" line="1171">
                <params>
                    <param name="arrayType" type="Class<?>"/>
                </params>
                <declaration name="elemType" type="Class&lt;?&gt;" line="1172"/>
            </method>
            <declaration name="NO_ARGS_LIST" type="List&lt;Object&gt;" line="1181"/>
            <method name="makeList" type="List<Object>" line="1182">
                <params>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1183"/>
            <method name="list" type="List<Object>" line="1185">
                <params>
                    <param name="a0" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1187">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1189">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1191">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1194">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1197">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1200">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1203">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1207">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                    <param name="a8" type="Object"/>
                </params>
            </method>
            <method name="list" type="List<Object>" line="1211">
                <params>
                    <param name="a0" type="Object"/>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                    <param name="a3" type="Object"/>
                    <param name="a4" type="Object"/>
                    <param name="a5" type="Object"/>
                    <param name="a6" type="Object"/>
                    <param name="a7" type="Object"/>
                    <param name="a8" type="Object"/>
                    <param name="a9" type="Object"/>
                </params>
            </method>
            <method name="makeLists" type="MethodHandle[]" line="1212">
                <comment line="1220">
                    current number of methods                    
                </comment>
                <declaration name="mhs" type="ArrayList&lt;MethodHandle&gt;" line="1213"/>
                <scope line="1214">
                    <declaration name="mh" type="MethodHandle" line="1215"/>
                </scope>
            </method>
            <declaration name="LISTS" type="MethodHandle[]" line="1222"/>
            <javadoc line="1224">
                Return a method handle that takes the indicated number of Object
                  arguments and returns a List.                
            </javadoc>
            <method name="varargsList" type="MethodHandle" line="1227">
                <params>
                    <param name="nargs" type="int"/>
                </params>
                <declaration name="mh" type="MethodHandle" line="1228"/>
            </method>
            <method name="buildVarargsList" type="MethodHandle" line="1234">
                <params>
                    <param name="nargs" type="int"/>
                </params>
            </method>
        </class>
    </source>