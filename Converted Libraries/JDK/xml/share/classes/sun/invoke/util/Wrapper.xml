<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.invoke.util">
        <class name="Format" line="24">
            <declaration name="SLOT_SHIFT" type="int" line="25"/>
            <declaration name="SIGNED" type="int" line="26"/>
            <declaration name="SLOT_MASK" type="int" line="27"/>
            <method name="format" type="int" line="28">
                <params>
                    <param name="kind" type="int"/>
                    <param name="size" type="int"/>
                    <param name="slots" type="int"/>
                </params>
            </method>
            <declaration name="INT" type="int" line="35"/>
            <method name="signed" type="int" line="36">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="unsigned" type="int" line="39">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="floating" type="int" line="42">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="other" type="int" line="45">
                <params>
                    <param name="slots" type="int"/>
                </params>
            </method>
            <scope line="-1"/>
            <javadoc line="49">
                How many bits are in the wrapped value?  Returns 0 for OBJECT or VOID.                
            </javadoc>
            <method name="bitWidth" type="int" line="52"/>
            <javadoc line="55">
                How many JVM stack slots occupied by the wrapped value?  Returns 0 for VOID.                
            </javadoc>
            <method name="stackSlots" type="int" line="58"/>
            <javadoc line="61">
                Does the wrapped value occupy a single JVM stack slot?                
            </javadoc>
            <method name="isSingleWord" type="boolean" line="64"/>
            <javadoc line="67">
                Does the wrapped value occupy two JVM stack slots?                
            </javadoc>
            <method name="isDoubleWord" type="boolean" line="70"/>
            <javadoc line="73">
                Is the wrapped type numeric (not void or object)?                
            </javadoc>
            <method name="isNumeric" type="boolean" line="76"/>
            <javadoc line="79">
                Is the wrapped type a primitive other than float, double, or void?                
            </javadoc>
            <method name="isIntegral" type="boolean" line="82"/>
            <javadoc line="85">
                Is the wrapped type one of int, boolean, byte, char, or short?                
            </javadoc>
            <method name="isSubwordOrInt" type="boolean" line="88"/>
            <method name="isSigned" type="boolean" line="91"/>
            <method name="isUnsigned" type="boolean" line="94"/>
            <javadoc line="97">
                Is the wrapped type either float or double?                
            </javadoc>
            <method name="isFloating" type="boolean" line="100"/>
            <javadoc line="103">
                Is the wrapped type either void or a reference?                
            </javadoc>
            <method name="isOther" type="boolean" line="106"/>
            <javadoc line="109">
                Does the JLS 5.1.2 allow a variable of this wrapper&apos;s
                  primitive type to be assigned from a value of the given wrapper&apos;s primitive type?
                  Cases:
                  &lt;ul&gt;
                  &lt;li&gt;unboxing followed by widening primitive conversion
                  &lt;li&gt;any type converted to {@code void} (i.e., dropping a method call&apos;s value)
                  &lt;li&gt;boxing conversion followed by widening reference conversion to {@code Object}&lt;/ul&gt;
                  These are the cases allowed by MethodHandle.asType.                
            </javadoc>
            <method name="isConvertibleFrom" type="boolean" line="119">
                <params>
                    <param name="source" type="Wrapper"/>
                </params>
                <scope line="121"/>
                <declaration name="floatOrSigned" type="boolean" line="124"/>
                <scope line="125"/>
            </method>
            <scope line="134"/>
            <method name="checkConvertibleFrom" type="boolean" line="137">
                <scope line="138">
                    <scope line="141"/>
                    <scope line="145"/>
                    <scope line="149"/>
                    <scope line="153">
                        <scope line="154">
                            <scope line="157"/>
                        </scope>
                    </scope>
                    <scope line="163">
                        <scope line="164">
                            <scope line="167"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="176">
                Produce a zero value for the given wrapper type.
                  This will be a numeric zero for a number or character,
                  false for a boolean, and null for a reference or void.
                  The common thread is that this is what is contained
                  in a default-initialized variable of the given primitive
                  type.  (For void, it is what a reflective method returns
                  instead of no value at all.)                
            </javadoc>
            <method name="zero" type="Object" line="185"/>
            <javadoc line="188">
                Produce a zero value for the given wrapper type T.
                  The optional argument must a type compatible with this wrapper.
                  Equivalent to {@code this.cast(this.zero(), type)}.                
            </javadoc>
            <method name="zero" type="T" line="193">
                <params>
                    <param name="type" type="Class<T>"/>
                </params>
            </method>
            <javadoc line="196">
                Return the wrapper that wraps values of the given type.
                  The type may be {@code Object}, meaning the {@code OBJECT} wrapper.
                  Otherwise, the type must be a primitive.                
                <throws>
                    IllegalArgumentException for unexpected types                    
                </throws>
            </javadoc>
            <method name="forPrimitiveType" type="Wrapper" line="202">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <declaration name="w" type="Wrapper" line="203"/>
            </method>
            <method name="findPrimitiveType" type="Wrapper" line="208">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <declaration name="w" type="Wrapper" line="209"/>
                <scope line="210"/>
            </method>
            <javadoc line="215">
                Return the wrapper that wraps values into the given wrapper type.
                  If it is {@code Object}, return {@code OBJECT}.
                  Otherwise, it must be a wrapper type.
                  The type must not be a primitive type.                
                <throws>
                    IllegalArgumentException for unexpected types                    
                </throws>
            </javadoc>
            <method name="forWrapperType" type="Wrapper" line="222">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <declaration name="w" type="Wrapper" line="223"/>
            </method>
            <method name="findWrapperType" type="Wrapper" line="228">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <declaration name="w" type="Wrapper" line="229"/>
                <scope line="230"/>
            </method>
            <javadoc line="235">
                Return the wrapper that corresponds to the given bytecode
                  signature character.  Return {@code OBJECT} for the character &apos;L&apos;.                
                <throws>
                    IllegalArgumentException for any non-signature character or {@code '['}.                    
                </throws>
            </javadoc>
            <method name="forBasicType" type="Wrapper" line="240">
                <params>
                    <param name="type" type="char"/>
                </params>
                <declaration name="w" type="Wrapper" line="241"/>
                <scope line="242"/>
            </method>
            <javadoc line="248">
                Return the wrapper for the given type, if it is
                  a primitive type, else return {@code OBJECT}.                
            </javadoc>
            <method name="forBasicType" type="Wrapper" line="252">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <declaration name="FROM_PRIM" type="Wrapper[]" line="256"/>
            <declaration name="FROM_WRAP" type="Wrapper[]" line="257"/>
            <declaration name="FROM_CHAR" type="Wrapper[]" line="258"/>
            <method name="hashPrim" type="int" line="259">
                <params>
                    <param name="x" type="Class<?>"/>
                </params>
                <declaration name="xn" type="String" line="260"/>
            </method>
            <method name="hashWrap" type="int" line="264">
                <params>
                    <param name="x" type="Class<?>"/>
                </params>
                <declaration name="xn" type="String" line="265"/>
                <declaration name="offset" type="int" line="266"/>
            </method>
            <method name="hashChar" type="int" line="271">
                <params>
                    <param name="x" type="char"/>
                </params>
            </method>
            <scope line="274">
                <scope line="275">
                    <declaration name="pi" type="int" line="276"/>
                    <declaration name="wi" type="int" line="277"/>
                    <declaration name="ci" type="int" line="278"/>
                </scope>
            </scope>
            <javadoc line="287">
                What is the primitive type wrapped by this wrapper?                
            </javadoc>
            <method name="primitiveType" type="Class<?>" line="290"/>
            <javadoc line="293">
                What is the wrapper type for this wrapper?                
            </javadoc>
            <method name="wrapperType" type="Class<?>" line="296"/>
            <javadoc line="299">
                What is the wrapper type for this wrapper?
                  Otherwise, the example type must be the wrapper type,
                  or the corresponding primitive type.
                  (For {@code OBJECT}, the example type can be any non-primitive,
                  and is normalized to {@code Object.class}.)
                  The resulting class type has the same type parameter.                
            </javadoc>
            <method name="wrapperType" type="Class<T>" line="307">
                <params>
                    <param name="exampleType" type="Class<T>"/>
                </params>
                <scope line="308"/>
                <scope line="311"/>
            </method>
            <method name="newClassCastException" type="ClassCastException" line="316">
                <params>
                    <param name="actual" type="Class<?>"/>
                    <param name="expected" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="319">
                If {@code type} is a primitive type, return the corresponding
                  wrapper type, else return {@code type} unchanged.                
            </javadoc>
            <method name="asWrapperType" type="Class<T>" line="323">
                <params>
                    <param name="type" type="Class<T>"/>
                </params>
                <scope line="324"/>
            </method>
            <javadoc line="329">
                If {@code type} is a wrapper type, return the corresponding
                  primitive type, else return {@code type} unchanged.                
            </javadoc>
            <method name="asPrimitiveType" type="Class<T>" line="333">
                <params>
                    <param name="type" type="Class<T>"/>
                </params>
                <declaration name="w" type="Wrapper" line="334"/>
                <scope line="335"/>
            </method>
            <javadoc line="340">
                Query:  Is the given type a wrapper, such as {@code Integer} or {@code Void}?                
            </javadoc>
            <method name="isWrapperType" type="boolean" line="343">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="346">
                Query:  Is the given type a primitive, such as {@code int} or {@code void}?                
            </javadoc>
            <method name="isPrimitiveType" type="boolean" line="349">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="352">
                What is the bytecode signature character for this type?
                  All non-primitives, including array types, report as &apos;L&apos;, the signature character for references.                
            </javadoc>
            <method name="basicTypeChar" type="char" line="356">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="360">
                What is the bytecode signature character for this wrapper&apos;s
                  primitive type?                
            </javadoc>
            <method name="basicTypeChar" type="char" line="364"/>
            <javadoc line="367">
                What is the simple name of the wrapper type?                
            </javadoc>
            <method name="simpleName" type="String" line="370"/>
            <javadoc line="373">
                Cast a wrapped value to the given type, which may be either a primitive or wrapper type.
                  The given target type must be this wrapper&apos;s primitive or wrapper type.
                  If this wrapper is OBJECT, the target type may also be an interface, perform no runtime check.
                  Performs standard primitive conversions, including truncation and float conversions.
                  The given type must be compatible with this wrapper.  That is, it must either
                  be the wrapper type (or a subtype, in the case of {@code OBJECT}) or else
                  it must be the wrapper&apos;s primitive type.
                  Primitive conversions are only performed if the given type is itself a primitive.                
                <throws>
                    ClassCastException if the given type is not compatible with this wrapper                    
                </throws>
            </javadoc>
            <method name="cast" type="T" line="384">
                <params>
                    <param name="x" type="Object"/>
                    <param name="type" type="Class<T>"/>
                </params>
            </method>
            <javadoc line="387">
                Convert a wrapped value to the given type.
                  The given target type must be this wrapper&apos;s primitive or wrapper type.
                  This is equivalent to {@link #cast}, except that it refuses to perform
                  narrowing primitive conversions.                
            </javadoc>
            <method name="convert" type="T" line="393">
                <params>
                    <param name="x" type="Object"/>
                    <param name="type" type="Class<T>"/>
                </params>
            </method>
            <method name="convert" type="T" line="396">
                <params>
                    <param name="x" type="Object"/>
                    <param name="type" type="Class<T>"/>
                    <param name="isCast" type="boolean"/>
                </params>
            </method>
            <javadoc line="417">
                Cast a reference type to another reference type.
                  If the target type is an interface, perform no runtime check.
                  (This loophole is safe, and is allowed by the JVM verifier.)
                  If the target type is a primitive, change it to a wrapper.                
            </javadoc>
            <method name="forceType" type="Class<T>" line="423">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="exampleType" type="Class<T>"/>
                </params>
                <declaration name="z" type="boolean" line="424"/>
                <declaration name="result" type="Class&lt;T&gt;" line="427"/>
            </method>
            <javadoc line="430">
                Wrap a value in this wrapper&apos;s type.
                  Performs standard primitive conversions, including truncation and float conversions.
                  Performs returns the unchanged reference for {@code OBJECT}.
                  Returns null for {@code VOID}.
                  Returns a zero value for a null input.                
                <throws>
                    ClassCastException if this wrapper is numeric and the operand
                      is not a number, character, boolean, or null                    
                </throws>
            </javadoc>
            <method name="wrap" type="Object" line="439">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <declaration name="xn" type="Number" line="446"/>
            </method>
            <javadoc line="467">
                Wrap a value (an int or smaller value) in this wrapper&apos;s type.
                  Performs standard primitive conversions, including truncation and float conversions.
                  Produces an {@code Integer} for {@code OBJECT}, although the exact type
                  of the operand is not known.
                  Returns null for {@code VOID}.                
            </javadoc>
            <method name="wrap" type="Object" line="474">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="500">
                Wrap a value (a long or smaller value) in this wrapper&apos;s type.
                  Does not perform floating point conversion.
                  Produces a {@code Long} for {@code OBJECT}, although the exact type
                  of the operand is not known.
                  Returns null for {@code VOID}.                
            </javadoc>
            <method name="wrapRaw" type="Object" line="507">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="519">
                Produce bitwise value which encodes the given wrapped value.
                  Does not perform floating point conversion.
                  Returns zero for {@code VOID}.                
            </javadoc>
            <method name="unwrapRaw" type="long" line="524">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="549">
                Report what primitive type holds this guy&apos;s raw value.                
            </javadoc>
            <method name="rawPrimitiveType" type="Class<?>" line="552"/>
            <javadoc line="555">
                Report, as a wrapper, what primitive type holds this guy&apos;s raw value.
                  Returns self for INT, LONG, OBJECT; returns LONG for DOUBLE,
                  else returns INT.                
            </javadoc>
            <method name="rawPrimitive" type="Wrapper" line="560"/>
            <method name="numberValue" type="Number" line="574">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="boolValue" type="boolean" line="580">
                <params>
                    <param name="bits" type="long"/>
                </params>
            </method>
            <method name="newIllegalArgumentException" type="RuntimeException" line="584">
                <params>
                    <param name="message" type="String"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="newIllegalArgumentException" type="RuntimeException" line="587">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <method name="makeArray" type="Object" line="590">
                <params>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="arrayType" type="Class<?>" line="593"/>
            <method name="copyArrayUnboxing" type="void" line="596">
                <params>
                    <param name="values" type="Object[]"/>
                    <param name="vpos" type="int"/>
                    <param name="a" type="Object"/>
                    <param name="apos" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="598">
                    <declaration name="value" type="Object" line="599"/>
                </scope>
            </method>
            <method name="copyArrayBoxing" type="void" line="604">
                <params>
                    <param name="a" type="Object"/>
                    <param name="apos" type="int"/>
                    <param name="values" type="Object[]"/>
                    <param name="vpos" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="606">
                    <declaration name="value" type="Object" line="607"/>
                </scope>
            </method>
        </class>
    </source>