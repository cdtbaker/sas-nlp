<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dialog"/>
        <import package="java.awt.FlowLayout"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GridBagLayout"/>
        <import package="java.awt.GridBagConstraints"/>
        <import package="java.awt.GridLayout"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.FocusListener"/>
        <import package="java.awt.event.ItemEvent"/>
        <import package="java.awt.event.ItemListener"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URI"/>
        <import package="java.net.URL"/>
        <import package="java.text.DecimalFormat"/>
        <import package="java.util.Locale"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.Vector"/>
        <import package="javax.print"/>
        <import package="javax.print.attribute"/>
        <import package="javax.print.attribute.standard"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.border.EmptyBorder"/>
        <import package="javax.swing.border.TitledBorder"/>
        <import package="javax.swing.event.ChangeEvent"/>
        <import package="javax.swing.event.ChangeListener"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.event.DocumentListener"/>
        <import package="javax.swing.event.PopupMenuEvent"/>
        <import package="javax.swing.event.PopupMenuListener"/>
        <import package="javax.swing.text.NumberFormatter"/>
        <import package="sun.print.SunPageSelection"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.net.URISyntaxException"/>
        <class name="ServiceDialog" line="77">
            <extends class="JDialog"/>
            <implements interface="ActionListener"/>
            <javadoc line="77">
                A class which implements a cross-platform print dialog.                
                <author>
                    Chris Campbell                    
                </author>
            </javadoc>
            <declaration name="WAITING" type="int" line="84"/>
            <javadoc line="84">
                Waiting print status (user response pending).                
            </javadoc>
            <declaration name="APPROVE" type="int" line="89"/>
            <javadoc line="89">
                Approve print status (user activated &quot;Print&quot; or &quot;OK&quot;).                
            </javadoc>
            <declaration name="CANCEL" type="int" line="94"/>
            <javadoc line="94">
                Cancel print status (user activated &quot;Cancel&quot;);                
            </javadoc>
            <declaration name="strBundle" type="String" line="99"/>
            <declaration name="panelInsets" type="Insets" line="100"/>
            <declaration name="compInsets" type="Insets" line="101"/>
            <declaration name="messageRB" type="ResourceBundle" line="103"/>
            <declaration name="tpTabs" type="JTabbedPane" line="104"/>
            <declaration name="btnCancel" type="JButton" line="105"/>
            <declaration name="services" type="PrintService[]" line="106"/>
            <declaration name="defaultServiceIndex" type="int" line="107"/>
            <declaration name="asOriginal" type="PrintRequestAttributeSet" line="108"/>
            <declaration name="asCurrent" type="HashPrintRequestAttributeSet" line="109"/>
            <declaration name="psCurrent" type="PrintService" line="110"/>
            <declaration name="docFlavor" type="DocFlavor" line="111"/>
            <declaration name="status" type="int" line="112"/>
            <declaration name="jfc" type="ValidatingFileChooser" line="114"/>
            <declaration name="pnlGeneral" type="GeneralPanel" line="116"/>
            <declaration name="pnlPageSetup" type="PageSetupPanel" line="117"/>
            <declaration name="pnlAppearance" type="AppearancePanel" line="118"/>
            <declaration name="isAWT" type="boolean" line="120"/>
            <scope line="123"/>
            <javadoc line="128">
                Constructor for the &quot;standard&quot; print dialog (containing all relevant
                  tabs)                
            </javadoc>
            <method name="ServiceDialog" type="constructor" line="139">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="services" type="PrintService[]"/>
                    <param name="defaultServiceIndex" type="int"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                    <param name="dialog" type="Dialog"/>
                </params>
            </method>
            <javadoc line="147">
                Constructor for the &quot;standard&quot; print dialog (containing all relevant
                  tabs)                
            </javadoc>
            <method name="ServiceDialog" type="constructor" line="158">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="services" type="PrintService[]"/>
                    <param name="defaultServiceIndex" type="int"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                    <param name="frame" type="Frame"/>
                </params>
            </method>
            <javadoc line="165">
                Initialize print dialog.                
            </javadoc>
            <method name="initPrintDialog" type="void" line="173">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="services" type="PrintService[]"/>
                    <param name="defaultServiceIndex" type="int"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <declaration name="pages" type="SunPageSelection" line="180"/>
                <scope line="182"/>
                <declaration name="c" type="Container" line="186"/>
                <declaration name="gkey" type="String" line="192"/>
                <declaration name="gmnemonic" type="int" line="193"/>
                <declaration name="pkey" type="String" line="198"/>
                <declaration name="pmnemonic" type="int" line="199"/>
                <declaration name="akey" type="String" line="204"/>
                <declaration name="amnemonic" type="int" line="205"/>
                <declaration name="pnlSouth" type="JPanel" line="214"/>
                <anonymous_class line="223">
                    <method name="windowClosing" type="void" line="224">
                        <params>
                            <param name="event" type="WindowEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="235">
                Constructor for the solitary &quot;page setup&quot; dialog                
            </javadoc>
            <method name="ServiceDialog" type="constructor" line="244">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="ps" type="PrintService"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                    <param name="dialog" type="Dialog"/>
                </params>
            </method>
            <javadoc line="249">
                Constructor for the solitary &quot;page setup&quot; dialog                
            </javadoc>
            <method name="ServiceDialog" type="constructor" line="258">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="ps" type="PrintService"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                    <param name="frame" type="Frame"/>
                </params>
            </method>
            <javadoc line="264">
                Initialize &quot;page setup&quot; dialog                
            </javadoc>
            <method name="initPageDialog" type="void" line="271">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="ps" type="PrintService"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <declaration name="c" type="Container" line="277"/>
                <declaration name="pnlSouth" type="JPanel" line="285"/>
                <anonymous_class line="294">
                    <method name="windowClosing" type="void" line="295">
                        <params>
                            <param name="event" type="WindowEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="306">
                Performs Cancel when Esc key is pressed.                
            </javadoc>
            <method name="handleEscKey" type="void" line="309">
                <params>
                    <param name="btnCancel" type="JButton"/>
                </params>
                <anonymous_class line="310">
                    <method name="actionPerformed" type="void" line="311">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="cancelKeyAction" type="Action" line="310"/>
                <declaration name="cancelKeyStroke" type="KeyStroke" line="315"/>
                <declaration name="inputMap" type="InputMap" line="317"/>
                <declaration name="actionMap" type="ActionMap" line="319"/>
                <scope line="321"/>
            </method>
            <javadoc line="328">
                Returns the current status of the dialog (whether the user has selected
                  the &quot;Print&quot; or &quot;Cancel&quot; button)                
            </javadoc>
            <method name="getStatus" type="int" line="332"/>
            <javadoc line="336">
                Returns an AttributeSet based on whether or not the user cancelled the
                  dialog.  If the user selected &quot;Print&quot; we return their new selections,
                  otherwise we return the attributes that were passed in initially.                
            </javadoc>
            <method name="getAttributes" type="PrintRequestAttributeSet" line="341">
                <scope line="342"/>
                <scope line="344"/>
            </method>
            <javadoc line="349">
                Returns a PrintService based on whether or not the user cancelled the
                  dialog.  If the user selected &quot;Print&quot; we return the user&apos;s selection
                  for the PrintService, otherwise we return null.                
            </javadoc>
            <method name="getPrintService" type="PrintService" line="354">
                <scope line="355"/>
                <scope line="357"/>
            </method>
            <javadoc line="362">
                Sets the current status flag for the dialog and disposes it (thus
                  returning control of the parent frame back to the user)                
            </javadoc>
            <method name="dispose" type="void" line="366">
                <params>
                    <param name="status" type="int"/>
                </params>
            </method>
            <method name="actionPerformed" type="void" line="372">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="source" type="Object" line="373"/>
                <declaration name="approved" type="boolean" line="374"/>
                <scope line="376">
                    <scope line="379">
                        <scope line="380"/>
                        <scope line="382"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="391">
                Displays a JFileChooser that allows the user to select the destination
                  for &quot;Print To File&quot;                
            </javadoc>
            <method name="showFileChooser" type="boolean" line="395">
                <comment line="403">
                    &quot;dst&quot; should not be null. The following code                    
                </comment>
                <comment line="404">
                    is only added to safeguard against a possible                    
                </comment>
                <comment line="405">
                    buggy implementation of a PrintService having a                    
                </comment>
                <comment line="406">
                    null default Destination.                    
                </comment>
                <comment line="421">
                    all manner of runtime exceptions possible                    
                </comment>
                <declaration name="dstCategory" type="Class" line="396"/>
                <declaration name="dst" type="Destination" line="398"/>
                <scope line="399">
                    <scope line="401">
                        <scope line="407">
                            <scope line="408"/>
                            <scope line="410"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="fileDest" type="File" line="416"/>
                <scope line="417">
                    <scope line="418"/>
                    <scope line="420"/>
                </scope>
                <scope line="424"/>
                <declaration name="jfc" type="ValidatingFileChooser" line="428"/>
                <declaration name="returnVal" type="int" line="433"/>
                <scope line="434">
                    <scope line="437"/>
                    <scope line="439"/>
                </scope>
                <scope line="442"/>
            </method>
            <javadoc line="449">
                Updates each of the top level panels                
            </javadoc>
            <method name="updatePanels" type="void" line="452"/>
            <javadoc line="458">
                Initialize ResourceBundle                
            </javadoc>
            <method name="initResource" type="void" line="461">
                <anonymous_class line="463">
                    <method name="run" type="Object" line="464">
                        <scope line="465"/>
                        <scope line="468"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="477">
                Returns message string from resource                
            </javadoc>
            <method name="getMsg" type="String" line="480">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="481"/>
                <scope line="483"/>
            </method>
            <javadoc line="489">
                Returns mnemonic character from resource                
            </javadoc>
            <method name="getMnemonic" type="char" line="492">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="str" type="String" line="493"/>
                <scope line="494"/>
                <scope line="496"/>
            </method>
            <javadoc line="501">
                Returns the mnemonic as a KeyEvent.VK constant from the resource.                
            </javadoc>
            <method name="getVKMnemonic" type="int" line="504">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="str" type="String" line="505"/>
                <scope line="506">
                    <scope line="507"/>
                    <scope line="509"/>
                </scope>
            </method>
            <javadoc line="514">
                Returns URL for image resource                
            </javadoc>
            <method name="getImageResource" type="URL" line="517">
                <params>
                    <param name="key" type="String"/>
                </params>
                <anonymous_class line="519">
                    <method name="run" type="Object" line="520">
                        <declaration name="url" type="URL" line="521"/>
                    </method>
                </anonymous_class>
                <declaration name="url" type="URL" line="518"/>
                <scope line="527"/>
            </method>
            <javadoc line="535">
                Creates a new JButton and sets its text, mnemonic, and ActionListener                
            </javadoc>
            <method name="createButton" type="JButton" line="538">
                <params>
                    <param name="key" type="String"/>
                    <param name="al" type="ActionListener"/>
                </params>
                <declaration name="btn" type="JButton" line="539"/>
            </method>
            <javadoc line="546">
                Creates a new JButton and sets its text, and ActionListener                
            </javadoc>
            <method name="createExitButton" type="JButton" line="549">
                <params>
                    <param name="key" type="String"/>
                    <param name="al" type="ActionListener"/>
                </params>
                <declaration name="str" type="String" line="550"/>
                <declaration name="btn" type="JButton" line="551"/>
            </method>
            <javadoc line="557">
                Creates a new JCheckBox and sets its text, mnemonic, and ActionListener                
            </javadoc>
            <method name="createCheckBox" type="JCheckBox" line="560">
                <params>
                    <param name="key" type="String"/>
                    <param name="al" type="ActionListener"/>
                </params>
                <declaration name="cb" type="JCheckBox" line="561"/>
            </method>
            <javadoc line="568">
                Creates a new JRadioButton and sets its text, mnemonic,
                  and ActionListener                
            </javadoc>
            <method name="createRadioButton" type="JRadioButton" line="574">
                <params>
                    <param name="key" type="String"/>
                    <param name="al" type="ActionListener"/>
                </params>
                <declaration name="rb" type="JRadioButton" line="575"/>
            </method>
            <javadoc line="582">
                Creates a  pop-up dialog for &quot;no print service&quot;                
            </javadoc>
            <method name="showNoPrintService" type="void" line="586">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <declaration name="dlgFrame" type="Frame" line="587"/>
            </method>
            <javadoc line="593">
                Sets the constraints for the GridBagLayout and adds the Component
                  to the given Container                
            </javadoc>
            <method name="addToGB" type="void" line="600">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="cont" type="Container"/>
                    <param name="gridbag" type="GridBagLayout"/>
                    <param name="constraints" type="GridBagConstraints"/>
                </params>
            </method>
            <javadoc line="605">
                Adds the AbstractButton to both the given ButtonGroup and Container                
            </javadoc>
            <method name="addToBG" type="void" line="610">
                <params>
                    <param name="button" type="AbstractButton"/>
                    <param name="cont" type="Container"/>
                    <param name="bg" type="ButtonGroup"/>
                </params>
            </method>
            <class name="GeneralPanel" line="618">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <javadoc line="618">
                    The &quot;General&quot; tab.  Includes the controls for PrintService,
                      PageRange, and Copies/Collate.                    
                </javadoc>
                <declaration name="pnlPrintService" type="PrintServicePanel" line="624"/>
                <declaration name="pnlPrintRange" type="PrintRangePanel" line="625"/>
                <declaration name="pnlCopies" type="CopiesPanel" line="626"/>
                <method name="GeneralPanel" type="constructor" line="628">
                    <declaration name="gridbag" type="GridBagLayout" line="631"/>
                    <declaration name="c" type="GridBagConstraints" line="632"/>
                </method>
                <method name="isPrintToFileRequested" type="boolean" line="654"/>
                <method name="updateInfo" type="void" line="658"/>
            </class>
            <class name="PrintServicePanel" line="665">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <implements interface="ItemListener"/>
                <implements interface="PopupMenuListener"/>
                <declaration name="strTitle" type="String" line="668"/>
                <declaration name="printToFilePermission" type="FilePermission" line="669"/>
                <declaration name="btnProperties" type="JButton" line="670"/>
                <declaration name="cbPrintToFile" type="JCheckBox" line="671"/>
                <declaration name="cbName" type="JComboBox" line="672"/>
                <declaration name="lblType" type="JLabel" line="673"/>
                <declaration name="uiFactory" type="ServiceUIFactory" line="674"/>
                <declaration name="changedService" type="boolean" line="675"/>
                <declaration name="filePermission" type="boolean" line="676"/>
                <method name="PrintServicePanel" type="constructor" line="678">
                    <declaration name="gridbag" type="GridBagLayout" line="683"/>
                    <declaration name="c" type="GridBagConstraints" line="684"/>
                    <declaration name="psnames" type="String[]" line="689"/>
                    <scope line="690"/>
                    <declaration name="lblName" type="JLabel" line="702"/>
                </method>
                <method name="isPrintToFileSelected" type="boolean" line="737"/>
                <method name="addLabel" type="JLabel" line="743">
                    <params>
                        <param name="text" type="String"/>
                        <param name="gridbag" type="GridBagLayout"/>
                        <param name="c" type="GridBagConstraints"/>
                    </params>
                    <declaration name="label" type="JLabel" line="748"/>
                </method>
                <method name="actionPerformed" type="void" line="754">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="766">
                        REMIND: may want to notify the user why we&apos;re                        
                    </comment>
                    <comment line="767">
                        disabling the button                        
                    </comment>
                    <declaration name="source" type="Object" line="755"/>
                    <scope line="757">
                        <scope line="758">
                            <declaration name="dialog" type="JDialog" line="759"/>
                            <scope line="763"/>
                            <scope line="765"/>
                        </scope>
                    </scope>
                </method>
                <method name="itemStateChanged" type="void" line="774">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                    <comment line="786">
                        to preserve the state of Print To File                        
                    </comment>
                    <comment line="796">
                        &quot;dest&quot; should not be null. The following code                        
                    </comment>
                    <comment line="797">
                        is only added to safeguard against a possible                        
                    </comment>
                    <comment line="798">
                        buggy implementation of a PrintService having a                        
                    </comment>
                    <comment line="799">
                        null default Destination.                        
                    </comment>
                    <scope line="775">
                        <declaration name="index" type="int" line="776"/>
                        <scope line="778">
                            <scope line="779">
                                <declaration name="dest" type="Destination" line="784"/>
                                <scope line="789">
                                    <scope line="791"/>
                                    <scope line="793">
                                        <scope line="800">
                                            <scope line="801"/>
                                            <scope line="804"/>
                                        </scope>
                                        <scope line="808"/>
                                    </scope>
                                </scope>
                                <scope line="812"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="popupMenuWillBecomeVisible" type="void" line="820">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                </method>
                <method name="popupMenuWillBecomeInvisible" type="void" line="824">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                    <scope line="825"/>
                </method>
                <method name="popupMenuCanceled" type="void" line="831">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                </method>
                <javadoc line="834">
                    We disable the &quot;Print To File&quot; checkbox if this returns false                    
                </javadoc>
                <method name="allowedToPrintToFile" type="boolean" line="837">
                    <scope line="838"/>
                    <scope line="841"/>
                </method>
                <javadoc line="846">
                    Break this out as it may be useful when we allow API to
                      specify printing to a file. In that case its probably right
                      to throw a SecurityException if the permission is not granted.                    
                </javadoc>
                <method name="throwPrintToFile" type="void" line="851">
                    <declaration name="security" type="SecurityManager" line="852"/>
                    <scope line="853">
                        <scope line="854"/>
                    </scope>
                </method>
                <method name="updateInfo" type="void" line="862">
                    <comment line="869">
                        setup Destination (print-to-file) widgets                        
                    </comment>
                    <comment line="881">
                        setup PrintService information widgets                        
                    </comment>
                    <declaration name="dstCategory" type="Class" line="863"/>
                    <declaration name="dstSupported" type="boolean" line="864"/>
                    <declaration name="dstSelected" type="boolean" line="865"/>
                    <declaration name="dstAllowed" type="boolean" line="866"/>
                    <scope line="870"/>
                    <declaration name="dst" type="Destination" line="873"/>
                    <scope line="874"/>
                    <declaration name="type" type="Attribute" line="882"/>
                    <scope line="883"/>
                    <declaration name="status" type="Attribute" line="886"/>
                    <scope line="888"/>
                    <declaration name="info" type="Attribute" line="891"/>
                    <scope line="892"/>
                </method>
            </class>
            <class name="PrintRangePanel" line="899">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <implements interface="FocusListener"/>
                <declaration name="strTitle" type="String" line="902"/>
                <declaration name="prAll" type="PageRanges" line="903"/>
                <declaration name="rbAll" type="JRadioButton" line="904"/>
                <declaration name="tfRangeFrom" type="JFormattedTextField" line="905"/>
                <declaration name="lblRangeTo" type="JLabel" line="906"/>
                <declaration name="prSupported" type="boolean" line="907"/>
                <method name="PrintRangePanel" type="constructor" line="909">
                    <comment line="930">
                        Selection never seemed to work so I&apos;m commenting this part.                        
                    </comment>
                    <comment line="931">
                        if (isAWT) {
                        JPanel pnlMiddle  =
                        new JPanel(new FlowLayout(FlowLayout.LEADING));
                        rbSelect =
                        createRadioButton(&quot;radiobutton.selection&quot;, this);
                        bg.add(rbSelect);
                        pnlMiddle.add(rbSelect);
                        addToGB(pnlMiddle, this, gridbag, c);
                        }                        
                    </comment>
                    <declaration name="gridbag" type="GridBagLayout" line="912"/>
                    <declaration name="c" type="GridBagConstraints" line="913"/>
                    <declaration name="bg" type="ButtonGroup" line="922"/>
                    <declaration name="pnlTop" type="JPanel" line="923"/>
                    <declaration name="pnlBottom" type="JPanel" line="943"/>
                    <declaration name="format" type="DecimalFormat" line="947"/>
                    <declaration name="nf" type="NumberFormatter" line="954"/>
                    <declaration name="nfto" type="NumberFormatter" line="972"/>
                    <scope line="973"/>
                    <scope line="975"/>
                </method>
                <method name="actionPerformed" type="void" line="988">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="989"/>
                    <declaration name="select" type="SunPageSelection" line="990"/>
                    <scope line="994"/>
                    <scope line="996"/>
                    <scope line="1000"/>
                    <scope line="1005"/>
                </method>
                <method name="focusLost" type="void" line="1010">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="1011"/>
                    <scope line="1013"/>
                </method>
                <method name="focusGained" type="void" line="1018">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="setupRangeWidgets" type="void" line="1020">
                    <declaration name="rangeEnabled" type="boolean" line="1021"/>
                </method>
                <method name="updateRangeAttribute" type="void" line="1027">
                    <declaration name="strFrom" type="String" line="1028"/>
                    <declaration name="strTo" type="String" line="1029"/>
                    <declaration name="min" type="int" line="1031"/>
                    <declaration name="max" type="int" line="1032"/>
                    <scope line="1034"/>
                    <scope line="1036"/>
                    <scope line="1040"/>
                    <scope line="1042"/>
                    <scope line="1046"/>
                    <scope line="1051"/>
                    <declaration name="pr" type="PageRanges" line="1056"/>
                </method>
                <method name="updateInfo" type="void" line="1060">
                    <comment line="1095">
                        Comment this for now -  rbSelect is not initialized                        
                    </comment>
                    <comment line="1096">
                        because Selection button is not added.                        
                    </comment>
                    <comment line="1097">
                        See PrintRangePanel above.                        
                    </comment>
                    <comment line="1099">
                        rbSelect.setSelected(true);                        
                    </comment>
                    <comment line="1100">
                        RANGE                        
                    </comment>
                    <declaration name="prCategory" type="Class" line="1061"/>
                    <scope line="1065"/>
                    <declaration name="select" type="SunPageSelection" line="1069"/>
                    <declaration name="min" type="int" line="1070"/>
                    <declaration name="max" type="int" line="1071"/>
                    <declaration name="pr" type="PageRanges" line="1073"/>
                    <scope line="1074">
                        <scope line="1075">
                            <declaration name="members" type="int[][]" line="1078"/>
                            <scope line="1080"/>
                        </scope>
                    </scope>
                    <scope line="1087"/>
                    <scope line="1092"/>
                    <scope line="1094"/>
                    <scope line="1100"/>
                </method>
            </class>
            <class name="CopiesPanel" line="1111">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <implements interface="ChangeListener"/>
                <declaration name="strTitle" type="String" line="1114"/>
                <declaration name="snModel" type="SpinnerNumberModel" line="1115"/>
                <declaration name="spinCopies" type="JSpinner" line="1116"/>
                <declaration name="lblCopies" type="JLabel" line="1117"/>
                <declaration name="cbCollate" type="JCheckBox" line="1118"/>
                <declaration name="scSupported" type="boolean" line="1119"/>
                <method name="CopiesPanel" type="constructor" line="1121">
                    <comment line="1142">
                        REMIND                        
                    </comment>
                    <declaration name="gridbag" type="GridBagLayout" line="1124"/>
                    <declaration name="c" type="GridBagConstraints" line="1125"/>
                </method>
                <method name="actionPerformed" type="void" line="1153">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="1154"/>
                    <scope line="1156"/>
                </method>
                <method name="stateChanged" type="void" line="1161">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
                <method name="updateCollateCB" type="void" line="1167">
                    <declaration name="num" type="int" line="1168"/>
                    <scope line="1169"/>
                    <scope line="1171"/>
                </method>
                <method name="updateInfo" type="void" line="1176">
                    <comment line="1183">
                        setup Copies spinner                        
                    </comment>
                    <comment line="1221">
                        setup Collate checkbox                        
                    </comment>
                    <declaration name="cpCategory" type="Class" line="1177"/>
                    <declaration name="csCategory" type="Class" line="1178"/>
                    <declaration name="scCategory" type="Class" line="1179"/>
                    <declaration name="cpSupported" type="boolean" line="1180"/>
                    <scope line="1184"/>
                    <declaration name="cs" type="CopiesSupported" line="1187"/>
                    <scope line="1190"/>
                    <declaration name="cp" type="Copies" line="1193"/>
                    <scope line="1194">
                        <scope line="1196"/>
                    </scope>
                    <declaration name="members" type="int[][]" line="1203"/>
                    <declaration name="min" type="int" line="1204"/>
                    <scope line="1205"/>
                    <scope line="1208"/>
                    <declaration name="value" type="int" line="1215"/>
                    <scope line="1216"/>
                    <scope line="1222"/>
                    <declaration name="sc" type="SheetCollate" line="1225"/>
                    <scope line="1226">
                        <scope line="1228"/>
                    </scope>
                </method>
            </class>
            <class name="PageSetupPanel" line="1240">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <javadoc line="1240">
                    The &quot;Page Setup&quot; tab.  Includes the controls for MediaSource/MediaTray,
                      OrientationRequested, and Sides.                    
                </javadoc>
                <declaration name="pnlMedia" type="MediaPanel" line="1246"/>
                <declaration name="pnlOrientation" type="OrientationPanel" line="1247"/>
                <declaration name="pnlMargins" type="MarginsPanel" line="1248"/>
                <method name="PageSetupPanel" type="constructor" line="1250">
                    <declaration name="gridbag" type="GridBagLayout" line="1253"/>
                    <declaration name="c" type="GridBagConstraints" line="1254"/>
                </method>
                <method name="updateInfo" type="void" line="1278"/>
            </class>
            <class name="MarginsPanel" line="1285">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <implements interface="FocusListener"/>
                <declaration name="strTitle" type="String" line="1288"/>
                <declaration name="leftMargin" type="JFormattedTextField" line="1289"/>
                <declaration name="lblLeft" type="JLabel" line="1291"/>
                <declaration name="units" type="int" line="1292"/>
                <declaration name="lmVal" type="float" line="1294"/>
                <declaration name="lmObj" type="Float" line="1296"/>
                <method name="MarginsPanel" type="constructor" line="1298">
                    <comment line="1384">
                        add an invisible spacing component.                        
                    </comment>
                    <declaration name="gridbag" type="GridBagLayout" line="1301"/>
                    <declaration name="c" type="GridBagConstraints" line="1302"/>
                    <declaration name="unitsKey" type="String" line="1311"/>
                    <declaration name="defaultCountry" type="String" line="1312"/>
                    <scope line="1316"/>
                    <declaration name="unitsMsg" type="String" line="1320"/>
                    <declaration name="format" type="DecimalFormat" line="1322"/>
                    <scope line="1323"/>
                    <scope line="1326"/>
                    <declaration name="nf" type="NumberFormatter" line="1336"/>
                </method>
                <method name="actionPerformed" type="void" line="1409">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="1410"/>
                </method>
                <method name="focusLost" type="void" line="1414">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="1415"/>
                </method>
                <method name="focusGained" type="void" line="1419">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="updateMargins" type="void" line="1426">
                    <params>
                        <param name="source" type="Object"/>
                    </params>
                    <comment line="1459">
                                                
                    </comment>
                    <scope line="1427"/>
                    <scope line="1429">
                        <declaration name="tf" type="JFormattedTextField" line="1430"/>
                        <declaration name="val" type="Float" line="1431"/>
                        <scope line="1432"/>
                        <scope line="1435"/>
                        <scope line="1438"/>
                        <scope line="1441"/>
                        <scope line="1444"/>
                    </scope>
                    <declaration name="lmTmpObj" type="Float" line="1449"/>
                    <declaration name="rmTmpObj" type="Float" line="1450"/>
                    <declaration name="tmTmpObj" type="Float" line="1451"/>
                    <declaration name="bmTmpObj" type="Float" line="1452"/>
                    <declaration name="lm" type="float" line="1454"/>
                    <declaration name="rm" type="float" line="1455"/>
                    <declaration name="tm" type="float" line="1456"/>
                    <declaration name="bm" type="float" line="1457"/>
                    <declaration name="orCategory" type="Class" line="1460"/>
                    <declaration name="or" type="OrientationRequested" line="1461"/>
                    <scope line="1464"/>
                    <declaration name="tmp" type="float" line="1469"/>
                    <scope line="1470"/>
                    <scope line="1473"/>
                    <scope line="1479"/>
                    <declaration name="mpa" type="MediaPrintableArea" line="1486"/>
                    <scope line="1487"/>
                    <scope line="1497">
                        <scope line="1499"/>
                        <scope line="1501"/>
                    </scope>
                </method>
                <method name="validateMargins" type="MediaPrintableArea" line="1522">
                    <params>
                        <param name="lm" type="float"/>
                        <param name="rm" type="float"/>
                        <param name="tm" type="float"/>
                        <param name="bm" type="float"/>
                    </params>
                    <declaration name="mpaCategory" type="Class" line="1524"/>
                    <declaration name="mpa" type="MediaPrintableArea" line="1525"/>
                    <declaration name="mpaMax" type="MediaPrintableArea" line="1526"/>
                    <declaration name="mediaSize" type="MediaSize" line="1527"/>
                    <declaration name="media" type="Media" line="1529"/>
                    <scope line="1530"/>
                    <scope line="1533">
                        <declaration name="msn" type="MediaSizeName" line="1534"/>
                    </scope>
                    <scope line="1537"/>
                    <scope line="1541">
                        <declaration name="tmpASet" type="PrintRequestAttributeSet" line="1542"/>
                        <declaration name="values" type="Object" line="1546"/>
                        <scope line="1551"/>
                    </scope>
                    <scope line="1556"/>
                    <declaration name="wid" type="float" line="1563"/>
                    <declaration name="hgt" type="float" line="1564"/>
                    <declaration name="pax" type="float" line="1565"/>
                    <declaration name="pay" type="float" line="1566"/>
                    <declaration name="paw" type="float" line="1567"/>
                    <declaration name="pah" type="float" line="1568"/>
                    <scope line="1572"/>
                    <scope line="1574"/>
                </method>
                <method name="updateInfo" type="void" line="1592">
                    <comment line="1648">
                        At this point we now know as best we can :-
                         - the media size
                         - the maximum corresponding printable area
                         - the media printable area specified by the client, if any.
                         The next step is to create a default MPA if none was specified.
                         1&quot; margins are used unless they are disproportionately
                         large compared to the size of the media.                        
                    </comment>
                    <comment line="1691">
                        If the paper is set to something which is too small to                        
                    </comment>
                    <comment line="1692">
                        accommodate a specified printable area, perhaps carried                        
                    </comment>
                    <comment line="1693">
                        over from a larger paper, the adjustment that needs to be                        
                    </comment>
                    <comment line="1694">
                        performed should seem the most natural from a user&apos;s viewpoint.                        
                    </comment>
                    <comment line="1695">
                        Since the user is specifying margins, then we are biased                        
                    </comment>
                    <comment line="1696">
                        towards keeping the margins as close to what is specified as                        
                    </comment>
                    <comment line="1697">
                        possible, shrinking or growing the printable area.                        
                    </comment>
                    <comment line="1698">
                        But the API uses printable area, so you need to know the                        
                    </comment>
                    <comment line="1699">
                        media size in which the margins were previously interpreted,                        
                    </comment>
                    <comment line="1700">
                        or at least have a record of the margins.                        
                    </comment>
                    <comment line="1701">
                        In the case that this is the creation of this UI we do not                        
                    </comment>
                    <comment line="1702">
                        have this record, so we are somewhat reliant on the client                        
                    </comment>
                    <comment line="1703">
                        to supply a reasonable default                        
                    </comment>
                    <comment line="1710">
                        margins impossible, but maintain P.A if can                        
                    </comment>
                    <comment line="1714">
                        try to centre the printable area.                        
                    </comment>
                    <comment line="1763">
                        We now have a valid printable area.
                         Turn it into margins, using the mediaSize                        
                    </comment>
                    <comment line="1776">
                        Now we know the values to use, we need to assign them
                         to the fields appropriate for the orientation.
                         Note: if orientation changes this method must be called.                        
                    </comment>
                    <scope line="1594"/>
                    <declaration name="mpaCategory" type="Class" line="1606"/>
                    <declaration name="mpa" type="MediaPrintableArea" line="1607"/>
                    <declaration name="mpaMax" type="MediaPrintableArea" line="1609"/>
                    <declaration name="mediaSize" type="MediaSize" line="1610"/>
                    <declaration name="media" type="Media" line="1612"/>
                    <scope line="1613"/>
                    <scope line="1616">
                        <declaration name="msn" type="MediaSizeName" line="1617"/>
                    </scope>
                    <scope line="1620"/>
                    <scope line="1624">
                        <declaration name="tmpASet" type="PrintRequestAttributeSet" line="1625"/>
                        <declaration name="values" type="Object" line="1629"/>
                        <scope line="1634"/>
                        <scope line="1637"/>
                    </scope>
                    <scope line="1641"/>
                    <declaration name="wid" type="float" line="1658"/>
                    <declaration name="hgt" type="float" line="1659"/>
                    <declaration name="maxMarginRatio" type="float" line="1660"/>
                    <declaration name="xMgn" type="float" line="1661"/>
                    <scope line="1662"/>
                    <scope line="1664"/>
                    <scope line="1667"/>
                    <scope line="1669"/>
                    <scope line="1673"/>
                    <declaration name="pax" type="float" line="1679"/>
                    <declaration name="pay" type="float" line="1680"/>
                    <declaration name="paw" type="float" line="1681"/>
                    <declaration name="pah" type="float" line="1682"/>
                    <declaration name="paxMax" type="float" line="1683"/>
                    <declaration name="payMax" type="float" line="1684"/>
                    <declaration name="pawMax" type="float" line="1685"/>
                    <declaration name="pahMax" type="float" line="1686"/>
                    <declaration name="invalid" type="boolean" line="1689"/>
                    <scope line="1706">
                        <scope line="1709">
                            <scope line="1711"/>
                        </scope>
                        <scope line="1716"/>
                        <scope line="1720">
                            <scope line="1721"/>
                        </scope>
                        <scope line="1725"/>
                    </scope>
                    <scope line="1730"/>
                    <scope line="1734"/>
                    <scope line="1738"/>
                    <scope line="1742"/>
                    <scope line="1747"/>
                    <scope line="1752"/>
                    <scope line="1758"/>
                    <declaration name="orCategory" type="Class" line="1780"/>
                    <declaration name="or" type="OrientationRequested" line="1781"/>
                    <scope line="1784"/>
                    <declaration name="tmp" type="Float" line="1789"/>
                    <scope line="1791"/>
                    <scope line="1794"/>
                    <scope line="1800"/>
                </method>
            </class>
            <class name="MediaPanel" line="1815">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ItemListener"/>
                <declaration name="strTitle" type="String" line="1817"/>
                <declaration name="lblSize" type="JLabel" line="1818"/>
                <declaration name="cbSize" type="JComboBox" line="1819"/>
                <declaration name="sizes" type="Vector" line="1820"/>
                <declaration name="sources" type="Vector" line="1821"/>
                <declaration name="pnlMargins" type="MarginsPanel" line="1822"/>
                <method name="MediaPanel" type="constructor" line="1824">
                    <declaration name="gridbag" type="GridBagLayout" line="1827"/>
                    <declaration name="c" type="GridBagConstraints" line="1828"/>
                </method>
                <method name="getMediaName" type="String" line="1859">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                    <comment line="1861">
                        replace characters that would be invalid in                        
                    </comment>
                    <comment line="1862">
                        a resource key with valid characters                        
                    </comment>
                    <scope line="1860">
                        <declaration name="newkey" type="String" line="1863"/>
                    </scope>
                    <scope line="1867"/>
                </method>
                <method name="itemStateChanged" type="void" line="1872">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                    <comment line="1904">
                        Non-default paper size, so need to store tray
                         as SunAlternateMedia                        
                    </comment>
                    <comment line="1918">
                        orientation affects display of margins.                        
                    </comment>
                    <declaration name="source" type="Object" line="1873"/>
                    <scope line="1875">
                        <scope line="1876">
                            <declaration name="index" type="int" line="1877"/>
                            <scope line="1879">
                                <scope line="1882">
                                    <declaration name="src" type="int" line="1883"/>
                                    <declaration name="mt" type="MediaTray" line="1884"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1889">
                            <declaration name="index" type="int" line="1890"/>
                            <scope line="1892">
                                <declaration name="newTray" type="MediaTray" line="1894"/>
                                <declaration name="m" type="Media" line="1895"/>
                                <scope line="1896"/>
                                <scope line="1898">
                                    <declaration name="msn" type="MediaSizeName" line="1899"/>
                                    <declaration name="def" type="Media" line="1900"/>
                                    <scope line="1901"/>
                                    <scope line="1903"/>
                                </scope>
                            </scope>
                            <scope line="1910">
                                <scope line="1912">
                                    <declaration name="size" type="int" line="1913"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1919"/>
                    </scope>
                </method>
                <method name="addMediaListener" type="void" line="1927">
                    <params>
                        <param name="pnl" type="MarginsPanel"/>
                    </params>
                </method>
                <method name="updateInfo" type="void" line="1930">
                    <comment line="1984">
                        initialize size selection to default                        
                    </comment>
                    <declaration name="mdCategory" type="Class" line="1931"/>
                    <declaration name="amCategory" type="Class" line="1932"/>
                    <declaration name="mediaSupported" type="boolean" line="1933"/>
                    <scope line="1944">
                        <declaration name="values" type="Object" line="1947"/>
                        <scope line="1952">
                            <declaration name="media" type="Media[]" line="1953"/>
                            <scope line="1955">
                                <declaration name="medium" type="Media" line="1956"/>
                                <scope line="1958"/>
                                <scope line="1961"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="msSupported" type="boolean" line="1969"/>
                    <scope line="1973"/>
                    <scope line="1976"/>
                    <scope line="1980">
                        <declaration name="medium" type="Media" line="1982"/>
                        <declaration name="defMedia" type="Media" line="1985"/>
                        <scope line="1986"/>
                        <scope line="1992">
                            <scope line="1996">
                                <scope line="1997"/>
                            </scope>
                            <scope line="2001"/>
                        </scope>
                        <scope line="2005">
                            <scope line="2006">
                                <declaration name="ms" type="MediaSizeName" line="2007"/>
                            </scope>
                            <scope line="2009">
                                <declaration name="mt" type="MediaTray" line="2010"/>
                            </scope>
                        </scope>
                        <scope line="2013"/>
                        <declaration name="alt" type="SunAlternateMedia" line="2018"/>
                        <scope line="2019">
                            <declaration name="md" type="Media" line="2020"/>
                            <scope line="2021">
                                <declaration name="mt" type="MediaTray" line="2022"/>
                            </scope>
                        </scope>
                        <declaration name="selIndex" type="int" line="2027"/>
                        <scope line="2028"/>
                        <scope line="2033">
                            <declaration name="mt" type="MediaTray" line="2034"/>
                            <scope line="2035"/>
                            <scope line="2037"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="OrientationPanel" line="2049">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <declaration name="strTitle" type="String" line="2052"/>
                <declaration name="rbPortrait" type="IconRadioButton" line="2053"/>
                <declaration name="pnlMargins" type="MarginsPanel" line="2055"/>
                <method name="OrientationPanel" type="constructor" line="2057">
                    <declaration name="gridbag" type="GridBagLayout" line="2060"/>
                    <declaration name="c" type="GridBagConstraints" line="2061"/>
                    <declaration name="bg" type="ButtonGroup" line="2071"/>
                </method>
                <method name="actionPerformed" type="void" line="2094">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="2106">
                        orientation affects display of margins.                        
                    </comment>
                    <declaration name="source" type="Object" line="2095"/>
                    <scope line="2097"/>
                    <scope line="2099"/>
                    <scope line="2101"/>
                    <scope line="2103"/>
                    <scope line="2107"/>
                </method>
                <method name="addOrientationListener" type="void" line="2113">
                    <params>
                        <param name="pnl" type="MarginsPanel"/>
                    </params>
                </method>
                <method name="updateInfo" type="void" line="2117">
                    <comment line="2165">
                        need to validate if default is not supported                        
                    </comment>
                    <comment line="2177">
                        get the first in the list                        
                    </comment>
                    <comment line="2195">
                        if (or == OrientationRequested.REVERSE_LANDSCAPE)                        
                    </comment>
                    <declaration name="orCategory" type="Class" line="2118"/>
                    <declaration name="pSupported" type="boolean" line="2119"/>
                    <declaration name="lSupported" type="boolean" line="2120"/>
                    <declaration name="rpSupported" type="boolean" line="2121"/>
                    <declaration name="rlSupported" type="boolean" line="2122"/>
                    <scope line="2124"/>
                    <scope line="2128">
                        <declaration name="values" type="Object" line="2129"/>
                        <scope line="2134">
                            <declaration name="ovalues" type="OrientationRequested[]" line="2135"/>
                            <scope line="2138">
                                <declaration name="value" type="OrientationRequested" line="2139"/>
                                <scope line="2141"/>
                                <scope line="2143"/>
                                <scope line="2145"/>
                                <scope line="2147"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="or" type="OrientationRequested" line="2160"/>
                    <scope line="2162">
                        <scope line="2167">
                            <declaration name="values" type="Object" line="2169"/>
                            <scope line="2173">
                                <declaration name="orValues" type="OrientationRequested[]" line="2174"/>
                                <scope line="2176"/>
                            </scope>
                        </scope>
                        <scope line="2183"/>
                    </scope>
                    <scope line="2189"/>
                    <scope line="2191"/>
                    <scope line="2193"/>
                    <scope line="2195"/>
                </method>
            </class>
            <class name="AppearancePanel" line="2203">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <javadoc line="2203">
                    The &quot;Appearance&quot; tab.  Includes the controls for Chromaticity,
                      PrintQuality, JobPriority, JobName, and other related job attributes.                    
                </javadoc>
                <declaration name="pnlChromaticity" type="ChromaticityPanel" line="2209"/>
                <declaration name="pnlQuality" type="QualityPanel" line="2210"/>
                <declaration name="pnlJobAttributes" type="JobAttributesPanel" line="2211"/>
                <declaration name="pnlSides" type="SidesPanel" line="2212"/>
                <method name="AppearancePanel" type="constructor" line="2214">
                    <declaration name="gridbag" type="GridBagLayout" line="2217"/>
                    <declaration name="c" type="GridBagConstraints" line="2218"/>
                </method>
                <method name="updateInfo" type="void" line="2245"/>
            </class>
            <class name="ChromaticityPanel" line="2253">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <declaration name="strTitle" type="String" line="2256"/>
                <declaration name="rbMonochrome" type="JRadioButton" line="2257"/>
                <method name="ChromaticityPanel" type="constructor" line="2259">
                    <declaration name="gridbag" type="GridBagLayout" line="2262"/>
                    <declaration name="c" type="GridBagConstraints" line="2263"/>
                    <declaration name="bg" type="ButtonGroup" line="2272"/>
                </method>
                <method name="actionPerformed" type="void" line="2282">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="2285">
                        REMIND: use isSameAs if we move to a IconRB in the future                        
                    </comment>
                    <declaration name="source" type="Object" line="2283"/>
                    <scope line="2286"/>
                    <scope line="2288"/>
                </method>
                <method name="updateInfo" type="void" line="2293">
                    <comment line="2337">
                        if (ch == Chromaticity.COLOR)                        
                    </comment>
                    <declaration name="chCategory" type="Class" line="2294"/>
                    <declaration name="monoSupported" type="boolean" line="2295"/>
                    <declaration name="colorSupported" type="boolean" line="2296"/>
                    <scope line="2298"/>
                    <scope line="2302">
                        <declaration name="values" type="Object" line="2303"/>
                        <scope line="2308">
                            <declaration name="cvalues" type="Chromaticity[]" line="2309"/>
                            <scope line="2311">
                                <declaration name="value" type="Chromaticity" line="2312"/>
                                <scope line="2314"/>
                                <scope line="2316"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="ch" type="Chromaticity" line="2327"/>
                    <scope line="2328">
                        <scope line="2330"/>
                    </scope>
                    <scope line="2335"/>
                    <scope line="2337"/>
                </method>
            </class>
            <class name="QualityPanel" line="2343">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <declaration name="strTitle" type="String" line="2346"/>
                <declaration name="rbDraft" type="JRadioButton" line="2347"/>
                <method name="QualityPanel" type="constructor" line="2349">
                    <declaration name="gridbag" type="GridBagLayout" line="2352"/>
                    <declaration name="c" type="GridBagConstraints" line="2353"/>
                    <declaration name="bg" type="ButtonGroup" line="2362"/>
                </method>
                <method name="actionPerformed" type="void" line="2375">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="2376"/>
                    <scope line="2378"/>
                    <scope line="2380"/>
                    <scope line="2382"/>
                </method>
                <method name="updateInfo" type="void" line="2387">
                    <comment line="2437">
                        if (pq == PrintQuality.HIGH)                        
                    </comment>
                    <declaration name="pqCategory" type="Class" line="2388"/>
                    <declaration name="draftSupported" type="boolean" line="2389"/>
                    <declaration name="normalSupported" type="boolean" line="2390"/>
                    <declaration name="highSupported" type="boolean" line="2391"/>
                    <scope line="2393"/>
                    <scope line="2398">
                        <declaration name="values" type="Object" line="2399"/>
                        <scope line="2404">
                            <declaration name="qvalues" type="PrintQuality[]" line="2405"/>
                            <scope line="2407">
                                <declaration name="value" type="PrintQuality" line="2408"/>
                                <scope line="2410"/>
                                <scope line="2412"/>
                                <scope line="2414"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="pq" type="PrintQuality" line="2425"/>
                    <scope line="2426">
                        <scope line="2428"/>
                    </scope>
                    <scope line="2433"/>
                    <scope line="2435"/>
                    <scope line="2437"/>
                </method>
            </class>
            <class name="SidesPanel" line="2444">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <declaration name="strTitle" type="String" line="2447"/>
                <declaration name="rbOneSide" type="IconRadioButton" line="2448"/>
                <method name="SidesPanel" type="constructor" line="2450">
                    <declaration name="gridbag" type="GridBagLayout" line="2453"/>
                    <declaration name="c" type="GridBagConstraints" line="2454"/>
                    <declaration name="bg" type="ButtonGroup" line="2464"/>
                </method>
                <method name="actionPerformed" type="void" line="2483">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="2484"/>
                    <scope line="2486"/>
                    <scope line="2488"/>
                    <scope line="2490"/>
                </method>
                <method name="updateInfo" type="void" line="2495">
                    <comment line="2539">
                        if (sd == Sides.DUPLEX)                        
                    </comment>
                    <declaration name="sdCategory" type="Class" line="2496"/>
                    <declaration name="osSupported" type="boolean" line="2497"/>
                    <declaration name="tSupported" type="boolean" line="2498"/>
                    <declaration name="dSupported" type="boolean" line="2499"/>
                    <scope line="2501">
                        <declaration name="values" type="Object" line="2502"/>
                        <scope line="2507">
                            <declaration name="svalues" type="Sides[]" line="2508"/>
                            <scope line="2510">
                                <declaration name="value" type="Sides" line="2511"/>
                                <scope line="2513"/>
                                <scope line="2515"/>
                                <scope line="2517"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="sd" type="Sides" line="2527"/>
                    <scope line="2528">
                        <scope line="2530"/>
                    </scope>
                    <scope line="2535"/>
                    <scope line="2537"/>
                    <scope line="2539"/>
                </method>
            </class>
            <class name="JobAttributesPanel" line="2547">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <implements interface="ChangeListener"/>
                <implements interface="FocusListener"/>
                <declaration name="strTitle" type="String" line="2550"/>
                <declaration name="lblPriority" type="JLabel" line="2551"/>
                <declaration name="spinPriority" type="JSpinner" line="2552"/>
                <declaration name="snModel" type="SpinnerNumberModel" line="2553"/>
                <declaration name="cbJobSheets" type="JCheckBox" line="2554"/>
                <declaration name="tfJobName" type="JTextField" line="2555"/>
                <method name="JobAttributesPanel" type="constructor" line="2557">
                    <comment line="2582">
                        REMIND                        
                    </comment>
                    <declaration name="gridbag" type="GridBagLayout" line="2560"/>
                    <declaration name="c" type="GridBagConstraints" line="2561"/>
                    <declaration name="pnlTop" type="JPanel" line="2574"/>
                    <declaration name="jmnemonic" type="char" line="2596"/>
                    <declaration name="umnemonic" type="char" line="2612"/>
                </method>
                <method name="actionPerformed" type="void" line="2626">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="2627"/>
                    <scope line="2629"/>
                </method>
                <method name="stateChanged" type="void" line="2634">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="2638">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="2639"/>
                    <scope line="2641"/>
                    <scope line="2644"/>
                </method>
                <method name="focusGained" type="void" line="2650">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="updateInfo" type="void" line="2652">
                    <comment line="2662">
                        setup JobSheets checkbox                        
                    </comment>
                    <comment line="2676">
                        setup JobPriority spinner                        
                    </comment>
                    <comment line="2695">
                        setup JobName text field                        
                    </comment>
                    <comment line="2710">
                        setup RequestingUserName text field                        
                    </comment>
                    <declaration name="jsCategory" type="Class" line="2653"/>
                    <declaration name="jpCategory" type="Class" line="2654"/>
                    <declaration name="jnCategory" type="Class" line="2655"/>
                    <declaration name="unCategory" type="Class" line="2656"/>
                    <declaration name="jsSupported" type="boolean" line="2657"/>
                    <declaration name="jpSupported" type="boolean" line="2658"/>
                    <declaration name="jnSupported" type="boolean" line="2659"/>
                    <declaration name="unSupported" type="boolean" line="2660"/>
                    <scope line="2663"/>
                    <declaration name="js" type="JobSheets" line="2666"/>
                    <scope line="2667">
                        <scope line="2669"/>
                    </scope>
                    <scope line="2677"/>
                    <declaration name="jp" type="JobPriority" line="2680"/>
                    <scope line="2681">
                        <scope line="2683"/>
                    </scope>
                    <declaration name="value" type="int" line="2687"/>
                    <scope line="2688"/>
                    <scope line="2696"/>
                    <declaration name="jn" type="JobName" line="2699"/>
                    <scope line="2700">
                        <scope line="2702"/>
                    </scope>
                    <scope line="2711"/>
                    <declaration name="un" type="RequestingUserName" line="2714"/>
                    <scope line="2715">
                        <scope line="2717"/>
                    </scope>
                </method>
            </class>
            <class name="IconRadioButton" line="2730">
                <extends class="JPanel"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <javadoc line="2730">
                    A special widget that groups a JRadioButton with an associated icon,
                      placed to the left of the radio button.                    
                </javadoc>
                <declaration name="rb" type="JRadioButton" line="2736"/>
                <declaration name="lbl" type="JLabel" line="2737"/>
                <method name="IconRadioButton" type="constructor" line="2741">
                    <params>
                        <param name="key" type="String"/>
                        <param name="img" type="String"/>
                        <param name="selected" type="boolean"/>
                        <param name="bg" type="ButtonGroup"/>
                        <param name="al" type="ActionListener"/>
                    </params>
                    <declaration name="imgURL" type="URL" line="2743"/>
                    <anonymous_class line="2745">
                        <method name="run" type="Object" line="2746">
                            <declaration name="icon" type="Icon" line="2747"/>
                        </method>
                    </anonymous_class>
                    <declaration name="icon" type="Icon" line="2744"/>
                </method>
                <method name="addActionListener" type="void" line="2759">
                    <params>
                        <param name="al" type="ActionListener"/>
                    </params>
                </method>
                <method name="isSameAs" type="boolean" line="2763">
                    <params>
                        <param name="source" type="Object"/>
                    </params>
                </method>
                <method name="setEnabled" type="void" line="2767">
                    <params>
                        <param name="enabled" type="boolean"/>
                    </params>
                </method>
                <method name="isSelected" type="boolean" line="2772"/>
                <method name="setSelected" type="void" line="2776">
                    <params>
                        <param name="selected" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="ValidatingFileChooser" line="2781">
                <extends class="JFileChooser"/>
                <comment line="1294">
                    storage for the last margin values calculated, -ve is uninitialised                    
                </comment>
                <comment line="1296">
                    storage for margins as objects mapped into orientation for display                    
                </comment>
                <comment line="1422">
                    Get the numbers, use to create a MPA.
                     If its valid, accept it and update the attribute set.
                     If its not valid, then reject it and call updateInfo()
                     to re-establish the previous entries.                    
                </comment>
                <comment line="1512">
                    This method either accepts the values and creates a new
                     MediaPrintableArea, or does nothing.
                     It should not attempt to create a printable area from anything
                     other than the exact values passed in.
                     But REMINDTBD: it would be user friendly to replace margins the
                     user entered but are out of bounds with the minimum.
                     At that point this method will need to take responsibility for
                     updating the &quot;stored&quot; values and the UI.                    
                </comment>
                <comment line="1580">
                    This is complex as a MediaPrintableArea is valid only within
                     a particular context of media size.
                     So we need a MediaSize as well as a MediaPrintableArea.
                     MediaSize can be obtained from MediaSizeName.
                     If the application specifies a MediaPrintableArea, we accept it
                     to the extent its valid for the Media they specify. If they
                     don&apos;t specify a Media, then the default is assumed.
                    
                     If an application doesn&apos;t define a MediaPrintableArea, we need to
                     create a suitable one, this is created using the specified (or
                     default) Media and default 1 inch margins. This is validated
                     against the paper in case this is too large for tiny media.                    
                </comment>
                <comment line="1927">
                                        
                </comment>
                <comment line="2113">
                                        
                </comment>
                <javadoc line="2781">
                    Similar in functionality to the default JFileChooser, except this
                      chooser will pop up a &quot;Do you want to overwrite...&quot; dialog if the
                      user selects a file that already exists.                    
                </javadoc>
                <method name="approveSelection" type="void" line="2787">
                    <comment line="2819">
                        There is already file read/write access so at this point                        
                    </comment>
                    <comment line="2820">
                        only delete access is denied.  Just ignore it because in                        
                    </comment>
                    <comment line="2821">
                        most cases the file created in createNewFile gets                        
                    </comment>
                    <comment line="2822">
                        overwritten anyway.                        
                    </comment>
                    <declaration name="selected" type="File" line="2788"/>
                    <declaration name="exists" type="boolean" line="2789"/>
                    <scope line="2791"/>
                    <scope line="2793"/>
                    <scope line="2797">
                        <declaration name="val" type="int" line="2798"/>
                        <scope line="2803"/>
                    </scope>
                    <scope line="2808">
                        <scope line="2809"/>
                    </scope>
                    <scope line="2812"/>
                    <scope line="2818"/>
                    <declaration name="pFile" type="File" line="2824"/>
                    <scope line="2828"/>
                </method>
            </class>
        </class>
    </source>