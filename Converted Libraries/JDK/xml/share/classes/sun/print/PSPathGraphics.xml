<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Area"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="sun.awt.image.ByteComponentRaster"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="java.awt.print.PrinterJob"/>
        <class name="PSPathGraphics" line="23">
            <extends class="PathGraphics"/>
            <javadoc line="23">
                This class converts paths into PostScript
                  by breaking all graphics into fills and
                  clips of paths.                
            </javadoc>
            <declaration name="DEFAULT_USER_RES" type="int" line="29"/>
            <javadoc line="29">
                For a drawing application the initial user space
                  resolution is 72dpi.                
            </javadoc>
            <method name="PSPathGraphics" type="constructor" line="34">
                <params>
                    <param name="graphics" type="Graphics2D"/>
                    <param name="printerJob" type="PrinterJob"/>
                    <param name="painter" type="Printable"/>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="pageIndex" type="int"/>
                    <param name="canRedraw" type="boolean"/>
                </params>
            </method>
            <javadoc line="37">
                Creates a new &lt;code&gt;Graphics&lt;/code&gt; object that is
                  a copy of this &lt;code&gt;Graphics&lt;/code&gt; object.                
                <return>
                    a new graphics context that is a copy of
                      this graphics context.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="create" type="Graphics" line="44"/>
            <javadoc line="47">
                Override the inherited implementation of fill
                  so that we can generate PostScript in user space
                  rather than device space.                
            </javadoc>
            <method name="fill" type="void" line="52">
                <params>
                    <param name="s" type="Shape"/>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="55">
                Draws the text given by the specified string, using this
                  graphics context&apos;s current font and color. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.                
                <param>
                    str      the string to be drawn.                    
                </param>
                <param>
                    x        the <i>x</i> coordinate.                    
                </param>
                <param>
                    y        the <i>y</i> coordinate.                    
                </param>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawString" type="void" line="67">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="70">
                Renders the text specified by the specified &lt;code&gt;String&lt;/code&gt;,
                  using the current &lt;code&gt;Font&lt;/code&gt; and &lt;code&gt;Paint&lt;/code&gt; attributes
                  in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  The baseline of the first character is at position
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in the User Space.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;, &lt;code&gt;Paint&lt;/code&gt;, &lt;code&gt;Font&lt;/code&gt; and
                  &lt;code&gt;Composite&lt;/code&gt; attributes. For characters in script systems
                  such as Hebrew and Arabic, the glyphs can be rendered from right to
                  left, in which case the coordinate supplied is the location of the
                  leftmost character on the baseline.                
                <param>
                    s the <code>String</code> to be rendered                    
                </param>
                <param>
                    x,&nbsp;y the coordinates where the <code>String</code>
                      should be rendered                    
                </param>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    java.awt.Graphics#setFont                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="92">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="canDrawStringToWidth" type="boolean" line="95"/>
            <method name="platformFontCount" type="int" line="98">
                <params>
                    <param name="font" type="Font"/>
                    <param name="str" type="String"/>
                </params>
                <declaration name="psPrinterJob" type="PSPrinterJob" line="99"/>
            </method>
            <method name="drawString" type="void" line="102">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="w" type="float"/>
                </params>
                <scope line="103"/>
                <scope line="106">
                    <declaration name="layout" type="TextLayout" line="107"/>
                </scope>
                <declaration name="oldFont" type="Font" line="111"/>
                <scope line="112"/>
                <scope line="115"/>
                <declaration name="drawnWithPS" type="boolean" line="118"/>
                <declaration name="translateX" type="float" line="119"/>
                <declaration name="fontisTransformed" type="boolean" line="120"/>
                <scope line="121">
                    <declaration name="fontTx" type="AffineTransform" line="122"/>
                    <declaration name="transformType" type="int" line="123"/>
                    <scope line="124"/>
                </scope>
                <declaration name="directToPS" type="boolean" line="132"/>
                <scope line="133">
                    <declaration name="psPrinterJob" type="PSPrinterJob" line="134"/>
                    <scope line="135">
                        <scope line="136"/>
                        <scope line="139">
                            <scope line="140"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="150">
                    <scope line="151"/>
                </scope>
                <scope line="157"/>
            </method>
            <javadoc line="161">
                The various &lt;code&gt;drawImage()&lt;/code&gt; methods for
                  &lt;code&gt;WPathGraphics&lt;/code&gt; are all decomposed
                  into an invocation of &lt;code&gt;drawImageToPlatform&lt;/code&gt;.
                  The portion of the passed in image defined by
                  &lt;code&gt;srcX, srcY, srcWidth, and srcHeight&lt;/code&gt;
                  is transformed by the supplied AffineTransform and
                  drawn using PS to the printer context.                
                <param>
                    img     The image to be drawn.
                      This method does nothing if <code>img</code> is null.                    
                </param>
                <param>
                    xform   Used to tranform the image before drawing.
                      This can be null.                    
                </param>
                <param>
                    bgcolor This color is drawn where the image has transparent
                      pixels. If this parameter is null then the
                      pixels already in the destination should show
                      through.                    
                </param>
                <param>
                    srcX    With srcY this defines the upper-left corner
                      of the portion of the image to be drawn.                    
                </param>
                <param>
                    srcY    With srcX this defines the upper-left corner
                      of the portion of the image to be drawn.                    
                </param>
                <param>
                    srcWidth    The width of the portion of the image to
                      be drawn.                    
                </param>
                <param>
                    srcHeight   The height of the portion of the image to
                      be drawn.                    
                </param>
                <param>
                    handlingTransparency if being recursively called to
                      print opaque region of transparent image                    
                </param>
            </javadoc>
            <method name="drawImageToPlatform" type="boolean" line="188">
                <params>
                    <param name="image" type="Image"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="srcWidth" type="int"/>
                    <param name="srcHeight" type="int"/>
                    <param name="handlingTransparency" type="boolean"/>
                </params>
                <declaration name="img" type="BufferedImage" line="189"/>
                <scope line="190"/>
                <declaration name="psPrinterJob" type="PSPrinterJob" line="193"/>
                <declaration name="fullTransform" type="AffineTransform" line="194"/>
                <scope line="195"/>
                <declaration name="fullMatrix" type="double[]" line="199"/>
                <declaration name="unitVectorX" type="Point2D.Float" line="201"/>
                <declaration name="unitVectorY" type="Point2D.Float" line="202"/>
                <declaration name="origin" type="Point2D.Float" line="205"/>
                <declaration name="scaleX" type="double" line="206"/>
                <declaration name="scaleY" type="double" line="207"/>
                <declaration name="devResX" type="double" line="208"/>
                <declaration name="devResY" type="double" line="209"/>
                <declaration name="devScaleX" type="double" line="210"/>
                <declaration name="devScaleY" type="double" line="211"/>
                <declaration name="transformType" type="int" line="212"/>
                <declaration name="clampScale" type="boolean" line="213"/>
                <scope line="214"/>
                <scope line="218">
                    <declaration name="rotTransform" type="AffineTransform" line="219"/>
                    <declaration name="srcRect" type="Rectangle2D.Float" line="220"/>
                    <declaration name="rotShape" type="Shape" line="221"/>
                    <declaration name="rotBounds" type="Rectangle2D" line="222"/>
                    <declaration name="boundsWidth" type="int" line="224"/>
                    <declaration name="boundsHeight" type="int" line="225"/>
                    <scope line="226">
                        <declaration name="drawOpaque" type="boolean" line="227"/>
                        <scope line="228">
                            <scope line="230">
                                <scope line="231">
                                    <scope line="232"/>
                                </scope>
                                <scope line="236"/>
                            </scope>
                            <scope line="240"/>
                        </scope>
                        <scope line="244"/>
                        <scope line="247"/>
                        <scope line="250">
                            <declaration name="tx" type="AffineTransform" line="252"/>
                            <declaration name="rect" type="Rectangle2D.Float" line="253"/>
                            <declaration name="shape" type="Shape" line="254"/>
                            <declaration name="region" type="Rectangle2D" line="255"/>
                            <declaration name="w" type="int" line="257"/>
                            <declaration name="h" type="int" line="258"/>
                            <declaration name="nbytes" type="int" line="259"/>
                            <declaration name="maxBytes" type="int" line="260"/>
                            <declaration name="origDpi" type="double" line="261"/>
                            <declaration name="dpi" type="int" line="262"/>
                            <declaration name="scaleFactor" type="double" line="263"/>
                            <declaration name="maxSFX" type="double" line="264"/>
                            <declaration name="maxSFY" type="double" line="265"/>
                            <declaration name="maxSF" type="double" line="266"/>
                            <declaration name="minDpi" type="int" line="267"/>
                            <scope line="269"/>
                            <scope line="274"/>
                        </scope>
                        <scope line="281">
                            <declaration name="deepImage" type="BufferedImage" line="282"/>
                            <declaration name="imageGraphics" type="Graphics2D" line="283"/>
                            <scope line="287"/>
                            <declaration name="holdClip" type="Shape" line="291"/>
                            <declaration name="oldClip" type="Shape" line="292"/>
                            <declaration name="sat" type="AffineTransform" line="293"/>
                            <declaration name="imgClip" type="Shape" line="294"/>
                            <declaration name="imgArea" type="Area" line="295"/>
                            <declaration name="oldArea" type="Area" line="296"/>
                            <declaration name="scaledBounds" type="Rectangle2D.Float" line="299"/>
                            <declaration name="tile" type="ByteComponentRaster" line="300"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="309">
                Redraw a rectanglular area using a proxy graphics
                  To do this we need to know the rectangular area to redraw and
                  the transform &amp; clip in effect at the time of the original drawImage                
            </javadoc>
            <method name="redrawRegion" type="void" line="314">
                <params>
                    <param name="region" type="Rectangle2D"/>
                    <param name="scaleX" type="double"/>
                    <param name="scaleY" type="double"/>
                    <param name="savedClip" type="Shape"/>
                    <param name="savedTransform" type="AffineTransform"/>
                </params>
                <declaration name="psPrinterJob" type="PSPrinterJob" line="315"/>
                <declaration name="painter" type="Printable" line="316"/>
                <declaration name="pageFormat" type="PageFormat" line="317"/>
                <declaration name="pageIndex" type="int" line="318"/>
                <declaration name="deepImage" type="BufferedImage" line="319"/>
                <declaration name="g" type="Graphics2D" line="320"/>
                <declaration name="proxy" type="ProxyGraphics2D" line="321"/>
                <declaration name="sourceResX" type="float" line="326"/>
                <declaration name="sourceResY" type="float" line="327"/>
                <declaration name="scaledBounds" type="Rectangle2D.Float" line="335"/>
                <declaration name="tile" type="ByteComponentRaster" line="336"/>
            </method>
            <method name="deviceFill" type="void" line="339">
                <params>
                    <param name="pathIter" type="PathIterator"/>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="psPrinterJob" type="PSPrinterJob" line="340"/>
            </method>
            <method name="deviceFrameRect" type="void" line="343">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <method name="deviceDrawLine" type="void" line="346">
                <params>
                    <param name="xBegin" type="int"/>
                    <param name="yBegin" type="int"/>
                    <param name="xEnd" type="int"/>
                    <param name="yEnd" type="int"/>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <method name="deviceFillRect" type="void" line="349">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <method name="deviceClip" type="void" line="352">
                <params>
                    <param name="pathIter" type="PathIterator"/>
                </params>
            </method>
        </class>
    </source>