<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.io.FilePermission"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Dialog"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Area"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.print.Book"/>
        <import package="java.awt.print.Pageable"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Paper"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterAbortException"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="java.awt.Window"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Locale"/>
        <import package="sun.awt.image.ByteInterleavedRaster"/>
        <import package="javax.print.Doc"/>
        <import package="javax.print.DocFlavor"/>
        <import package="javax.print.DocPrintJob"/>
        <import package="javax.print.PrintException"/>
        <import package="javax.print.PrintService"/>
        <import package="javax.print.PrintServiceLookup"/>
        <import package="javax.print.ServiceUI"/>
        <import package="javax.print.StreamPrintService"/>
        <import package="javax.print.StreamPrintServiceFactory"/>
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.AttributeSet"/>
        <import package="javax.print.attribute.HashPrintRequestAttributeSet"/>
        <import package="javax.print.attribute.PrintRequestAttributeSet"/>
        <import package="javax.print.attribute.Size2DSyntax"/>
        <import package="javax.print.attribute.standard.Chromaticity"/>
        <import package="javax.print.attribute.standard.Copies"/>
        <import package="javax.print.attribute.standard.Destination"/>
        <import package="javax.print.attribute.standard.DialogTypeSelection"/>
        <import package="javax.print.attribute.standard.Fidelity"/>
        <import package="javax.print.attribute.standard.JobName"/>
        <import package="javax.print.attribute.standard.JobSheets"/>
        <import package="javax.print.attribute.standard.Media"/>
        <import package="javax.print.attribute.standard.MediaPrintableArea"/>
        <import package="javax.print.attribute.standard.MediaSize"/>
        <import package="javax.print.attribute.standard.MediaSizeName"/>
        <import package="javax.print.attribute.standard.OrientationRequested"/>
        <import package="javax.print.attribute.standard.PageRanges"/>
        <import package="javax.print.attribute.standard.PrinterState"/>
        <import package="javax.print.attribute.standard.PrinterStateReason"/>
        <import package="javax.print.attribute.standard.PrinterStateReasons"/>
        <import package="javax.print.attribute.standard.PrinterIsAcceptingJobs"/>
        <import package="javax.print.attribute.standard.RequestingUserName"/>
        <import package="javax.print.attribute.standard.SheetCollate"/>
        <import package="javax.print.attribute.standard.Sides"/>
        <import package="sun.print.PageableDoc"/>
        <import package="sun.print.ServiceDialog"/>
        <import package="sun.print.SunPrinterJobService"/>
        <import package="sun.print.SunPageSelection"/>
        <class name="RasterPrinterJob" line="72">
            <extends class="PrinterJob"/>
            <javadoc line="72">
                A class which rasterizes a printer job.                
                <author>
                    Richard Blanchard                    
                </author>
            </javadoc>
            <declaration name="PRINTER" type="int" line="77"/>
            <declaration name="FILE" type="int" line="78"/>
            <declaration name="STREAM" type="int" line="79"/>
            <declaration name="MAX_BAND_SIZE" type="int" line="80"/>
            <javadoc line="80">
                Maximum amount of memory in bytes to use for the
                  buffered image &quot;band&quot;. 4Mb is a compromise between
                  limiting the number of bands on hi-res printers and
                  not using too much of the Java heap or causing paging
                  on systems with little RAM.                
            </javadoc>
            <declaration name="DPI" type="float" line="88"/>
            <declaration name="FORCE_PIPE_PROP" type="String" line="89"/>
            <javadoc line="89">
                Useful mainly for debugging, this system property
                  can be used to force the printing code to print
                  using a particular pipeline. The two currently
                  supported values are FORCE_RASTER and FORCE_PDL.                
            </javadoc>
            <declaration name="FORCE_RASTER" type="String" line="96"/>
            <javadoc line="96">
                When the system property FORCE_PIPE_PROP has this value
                  then each page of a print job will be rendered through
                  the raster pipeline.                
            </javadoc>
            <declaration name="FORCE_PDL" type="String" line="102"/>
            <javadoc line="102">
                When the system property FORCE_PIPE_PROP has this value
                  then each page of a print job will be rendered through
                  the PDL pipeline.                
            </javadoc>
            <declaration name="SHAPE_TEXT_PROP" type="String" line="108"/>
            <javadoc line="108">
                When the system property SHAPE_TEXT_PROP has this value
                  then text is always rendered as a shape, and no attempt is made
                  to match the font through GDI                
            </javadoc>
            <declaration name="forcePDL" type="boolean" line="114"/>
            <javadoc line="114">
                values obtained from System properties in static initialiser block                
            </javadoc>
            <declaration name="forceRaster" type="boolean" line="118"/>
            <declaration name="shapeTextProp" type="boolean" line="119"/>
            <scope line="120">
                <declaration name="forceStr" type="String" line="121"/>
                <scope line="122">
                    <scope line="123"/>
                    <scope line="126"/>
                </scope>
                <declaration name="shapeTextStr" type="String" line="130"/>
                <scope line="131"/>
            </scope>
            <declaration name="cachedBandWidth" type="int" line="135"/>
            <javadoc line="135">
                Used to minimise GC &amp; reallocation of band when printing                
            </javadoc>
            <declaration name="cachedBandHeight" type="int" line="139"/>
            <declaration name="cachedBand" type="BufferedImage" line="140"/>
            <declaration name="mNumCopies" type="int" line="141"/>
            <javadoc line="141">
                The number of book copies to be printed.                
            </javadoc>
            <declaration name="mCollate" type="boolean" line="145"/>
            <javadoc line="145">
                Collation effects the order of the pages printed
                  when multiple copies are requested. For two copies
                  of a three page document the page order is:
                  mCollate true: 1, 2, 3, 1, 2, 3
                  mCollate false: 1, 1, 2, 2, 3, 3                
            </javadoc>
            <declaration name="mFirstPage" type="int" line="153"/>
            <javadoc line="153">
                The zero based indices of the first and last
                  pages to be printed. If &apos;mFirstPage&apos; is
                  UNDEFINED_PAGE_NUM then the first page to
                  be printed is page 0. If &apos;mLastPage&apos; is
                  UNDEFINED_PAGE_NUM then the last page to
                  be printed is the last one in the book.                
            </javadoc>
            <declaration name="mLastPage" type="int" line="162"/>
            <declaration name="previousPaper" type="Paper" line="163"/>
            <javadoc line="163">
                The previous print stream Paper
                  Used to check if the paper size has changed such that the
                  implementation needs to emit the new paper size information
                  into the print stream.
                  Since we do our own rotation, and the margins aren&apos;t relevant,
                  Its strictly the dimensions of the paper that we will check.                
            </javadoc>
            <declaration name="mDocument" type="Pageable" line="172"/>
            <javadoc line="172">
                The document to be printed. It is initialized to an
                  empty (zero pages) book.                
            </javadoc>
            <declaration name="mDocName" type="String" line="177"/>
            <javadoc line="177">
                The name of the job being printed.                
            </javadoc>
            <declaration name="performingPrinting" type="boolean" line="181"/>
            <javadoc line="181">
                Printing cancellation flags                
            </javadoc>
            <declaration name="userCancelled" type="boolean" line="185"/>
            <declaration name="printToFilePermission" type="FilePermission" line="186"/>
            <javadoc line="186">
                Print to file permission variables.                
            </javadoc>
            <declaration name="redrawList" type="ArrayList" line="190"/>
            <javadoc line="190">
                List of areas &amp; the graphics state for redrawing                
            </javadoc>
            <declaration name="copiesAttr" type="int" line="194"/>
            <declaration name="jobNameAttr" type="String" line="195"/>
            <declaration name="userNameAttr" type="String" line="196"/>
            <declaration name="pageRangesAttr" type="PageRanges" line="197"/>
            <declaration name="sidesAttr" type="Sides" line="198"/>
            <declaration name="destinationAttr" type="String" line="199"/>
            <declaration name="noJobSheet" type="boolean" line="200"/>
            <declaration name="mDestType" type="int" line="201"/>
            <declaration name="mDestination" type="String" line="202"/>
            <declaration name="collateAttReq" type="boolean" line="203"/>
            <declaration name="landscapeRotates270" type="boolean" line="204"/>
            <javadoc line="204">
                Device rotation flag, if it support 270, this is set to true;                
            </javadoc>
            <declaration name="attributes" type="PrintRequestAttributeSet" line="208"/>
            <javadoc line="208">
                attributes used by no-args page and print dialog and print method to
                  communicate state                
            </javadoc>
            <class name="GraphicsState" line="213">
                <javadoc line="213">
                    Class to keep state information for redrawing areas
                      &quot;region&quot; is an area at as a high a resolution as possible.
                      The redrawing code needs to look at sx, sy to calculate the scale
                      to device resolution.                    
                </javadoc>
                <declaration name="region" type="Rectangle2D" line="220"/>
                <declaration name="theClip" type="Shape" line="221"/>
                <declaration name="theTransform" type="AffineTransform" line="222"/>
                <declaration name="sx" type="double" line="223"/>
                <declaration name="sy" type="double" line="224"/>
            </class>
            <declaration name="myService" type="PrintService" line="226"/>
            <javadoc line="226">
                Service for this job                
            </javadoc>
            <method name="RasterPrinterJob" type="constructor" line="230"/>
            <method name="getXRes" type="double" line="232"/>
            <javadoc line="232">
                Returns the resolution in dots per inch across the width
                  of the page.                
            </javadoc>
            <method name="getYRes" type="double" line="237"/>
            <javadoc line="237">
                Returns the resolution in dots per inch down the height
                  of the page.                
            </javadoc>
            <method name="getPhysicalPrintableX" type="double" line="242"/>
            <javadoc line="242">
                Must be obtained from the current printer.
                  Value is in device pixels.
                  Not adjusted for orientation of the paper.                
            </javadoc>
            <method name="getPhysicalPrintableY" type="double" line="248"/>
            <javadoc line="248">
                Must be obtained from the current printer.
                  Value is in device pixels.
                  Not adjusted for orientation of the paper.                
            </javadoc>
            <method name="getPhysicalPrintableWidth" type="double" line="254"/>
            <javadoc line="254">
                Must be obtained from the current printer.
                  Value is in device pixels.
                  Not adjusted for orientation of the paper.                
            </javadoc>
            <method name="getPhysicalPrintableHeight" type="double" line="260"/>
            <javadoc line="260">
                Must be obtained from the current printer.
                  Value is in device pixels.
                  Not adjusted for orientation of the paper.                
            </javadoc>
            <method name="getPhysicalPageWidth" type="double" line="266"/>
            <javadoc line="266">
                Must be obtained from the current printer.
                  Value is in device pixels.
                  Not adjusted for orientation of the paper.                
            </javadoc>
            <method name="getPhysicalPageHeight" type="double" line="272"/>
            <javadoc line="272">
                Must be obtained from the current printer.
                  Value is in device pixels.
                  Not adjusted for orientation of the paper.                
            </javadoc>
            <method name="startPage" type="void" line="278"/>
            <javadoc line="278">
                Begin a new page.                
            </javadoc>
            <method name="endPage" type="void" line="282"/>
            <javadoc line="282">
                End a page.                
            </javadoc>
            <method name="printBand" type="void" line="286"/>
            <javadoc line="286">
                Prints the contents of the array of ints, &apos;data&apos;
                  to the current page. The band is placed at the
                  location (x, y) in device coordinates on the
                  page. The width and height of the band is
                  specified by the caller.                
            </javadoc>
            <javadoc line="294">
                save graphics state of a PathGraphics for later redrawing
                  of part of page represented by the region in that state                
            </javadoc>
            <method name="saveState" type="void" line="298">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="clip" type="Shape"/>
                    <param name="region" type="Rectangle2D"/>
                    <param name="sx" type="double"/>
                    <param name="sy" type="double"/>
                </params>
                <declaration name="gstate" type="GraphicsState" line="299"/>
            </method>
            <method name="lookupDefaultPrintService" type="PrintService" line="307">
                <declaration name="service" type="PrintService" line="308"/>
                <scope line="309"/>
                <scope line="312">
                    <declaration name="services" type="PrintService[]" line="313"/>
                    <scope line="314"/>
                </scope>
            </method>
            <javadoc line="320">
                Returns the service (printer) for this printer job.
                  Implementations of this class which do not support print services
                  may return null;                
                <return>
                    the service for this printer job.                    
                </return>
            </javadoc>
            <method name="getPrintService" type="PrintService" line="326">
                <scope line="327">
                    <declaration name="svc" type="PrintService" line="328"/>
                    <scope line="329">
                        <scope line="330"/>
                        <scope line="334"/>
                    </scope>
                    <scope line="337">
                        <declaration name="svcs" type="PrintService[]" line="338"/>
                        <scope line="339">
                            <scope line="340"/>
                            <scope line="344"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="351">
                Associate this PrinterJob with a new PrintService.
                  Throws &lt;code&gt;PrinterException&lt;/code&gt; if the specified service
                  cannot support the &lt;code&gt;Pageable&lt;/code&gt; and
                  &lt;code&gt;Printable&lt;/code&gt; interfaces necessary to support 2D printing.                
                <param>
                    a print service which supports 2D printing.                    
                </param>
                <throws>
                    PrinterException if the specified service does not support
                      2D printing or no longer available.                    
                </throws>
            </javadoc>
            <method name="setPrintService" type="void" line="360">
                <params>
                    <param name="service" type="PrintService"/>
                </params>
                <scope line="361"/>
                <scope line="364"/>
                <scope line="367">
                    <declaration name="prnState" type="PrinterState" line="368"/>
                    <scope line="369">
                        <declaration name="prnStateReasons" type="PrinterStateReasons" line="370"/>
                        <scope line="371"/>
                    </scope>
                    <scope line="375"/>
                    <scope line="378"/>
                </scope>
            </method>
            <method name="updatePageAttributes" type="void" line="383">
                <params>
                    <param name="service" type="PrintService"/>
                    <param name="page" type="PageFormat"/>
                </params>
                <scope line="384"/>
                <declaration name="x" type="float" line="387"/>
                <declaration name="y" type="float" line="388"/>
                <declaration name="mediaList" type="Media[]" line="389"/>
                <declaration name="media" type="Media" line="390"/>
                <scope line="391"/>
                <scope line="394"/>
                <scope line="396"/>
                <declaration name="orient" type="OrientationRequested" line="399"/>
                <scope line="410"/>
                <scope line="413"/>
                <declaration name="ix" type="float" line="417"/>
                <declaration name="iw" type="float" line="418"/>
                <declaration name="iy" type="float" line="419"/>
                <declaration name="ih" type="float" line="420"/>
                <scope line="423"/>
                <scope line="426"/>
            </method>
            <javadoc line="429">
                Display a dialog to the user allowing the modification of a
                  PageFormat instance.
                  The &lt;code&gt;page&lt;/code&gt; argument is used to initialize controls
                  in the page setup dialog.
                  If the user cancels the dialog, then the method returns the
                  original &lt;code&gt;page&lt;/code&gt; object unmodified.
                  If the user okays the dialog then the method returns a new
                  PageFormat object with the indicated changes.
                  In either case the original &lt;code&gt;page&lt;/code&gt; object will
                  not be modified.                
                <param>
                    page    the default PageFormat presented to the user
                      for modification                    
                </param>
                <return>
                    the original <code>page</code> object if the dialog
                      is cancelled, or a new PageFormat object containing
                      the format indicated by the user if the dialog is
                      acknowledged                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="pageDialog" type="PageFormat" line="451">
                <params>
                    <param name="page" type="PageFormat"/>
                </params>
                <scope line="452"/>
                <declaration name="gc" type="GraphicsConfiguration" line="455"/>
                <anonymous_class line="456">
                    <method name="run" type="Object" line="457">
                        <declaration name="service" type="PrintService" line="458"/>
                        <scope line="459"/>
                    </method>
                </anonymous_class>
                <declaration name="service" type="PrintService" line="456"/>
                <scope line="467"/>
                <declaration name="newPage" type="PageFormat" line="471"/>
                <scope line="472"/>
                <scope line="475"/>
            </method>
            <javadoc line="479">
                return a PageFormat corresponding to the updated attributes,
                  or null if the user cancelled the dialog.                
            </javadoc>
            <method name="pageDialog" type="PageFormat" line="483">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <scope line="484"/>
                <declaration name="gc" type="GraphicsConfiguration" line="487"/>
                <declaration name="bounds" type="Rectangle" line="488"/>
                <declaration name="x" type="int" line="489"/>
                <declaration name="y" type="int" line="490"/>
                <anonymous_class line="491">
                    <method name="run" type="Object" line="492">
                        <declaration name="service" type="PrintService" line="493"/>
                        <scope line="494"/>
                    </method>
                </anonymous_class>
                <declaration name="service" type="PrintService" line="491"/>
                <scope line="502"/>
                <declaration name="pageDialog" type="ServiceDialog" line="505"/>
                <scope line="507">
                    <declaration name="newas" type="PrintRequestAttributeSet" line="508"/>
                    <declaration name="amCategory" type="Class" line="509"/>
                    <scope line="510"/>
                    <declaration name="page" type="PageFormat" line="514"/>
                    <declaration name="orient" type="OrientationRequested" line="515"/>
                    <declaration name="pfOrient" type="int" line="516"/>
                    <scope line="517">
                        <scope line="518"/>
                        <scope line="521"/>
                    </scope>
                    <declaration name="media" type="Media" line="526"/>
                    <scope line="527"/>
                    <scope line="530"/>
                    <declaration name="size" type="MediaSize" line="533"/>
                    <scope line="534"/>
                    <declaration name="paper" type="Paper" line="537"/>
                    <declaration name="dim" type="float" line="538"/>
                    <declaration name="w" type="double" line="539"/>
                    <declaration name="h" type="double" line="540"/>
                    <declaration name="area" type="MediaPrintableArea" line="542"/>
                    <declaration name="ix" type="double" line="543"/>
                    <scope line="544"/>
                    <scope line="550">
                        <scope line="551"/>
                        <scope line="555"/>
                        <scope line="559"/>
                        <scope line="563"/>
                    </scope>
                </scope>
                <scope line="572"/>
            </method>
            <javadoc line="576">
                Presents the user a dialog for changing properties of the
                  print job interactively.
                  The services browsable here are determined by the type of
                  service currently installed.
                  If the application installed a StreamPrintService on this
                  PrinterJob, only the available StreamPrintService (factories) are
                  browsable.                
                <param>
                    attributes to store changed properties.                    
                </param>
                <return>
                    false if the user cancels the dialog and true otherwise.                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="printDialog" type="boolean" line="590">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <scope line="591"/>
                <declaration name="dlg" type="DialogTypeSelection" line="594"/>
                <scope line="595">
                    <scope line="597"/>
                    <scope line="601"/>
                    <declaration name="ret" type="boolean" line="603"/>
                </scope>
                <declaration name="gc" type="GraphicsConfiguration" line="607"/>
                <anonymous_class line="608">
                    <method name="run" type="Object" line="609">
                        <declaration name="service" type="PrintService" line="610"/>
                        <scope line="611"/>
                    </method>
                </anonymous_class>
                <declaration name="service" type="PrintService" line="608"/>
                <scope line="619"/>
                <declaration name="services" type="PrintService[]" line="622"/>
                <declaration name="spsFactories" type="StreamPrintServiceFactory[]" line="623"/>
                <scope line="624">
                    <scope line="627"/>
                </scope>
                <scope line="631">
                    <anonymous_class line="632">
                        <method name="run" type="Object" line="633">
                            <declaration name="services" type="PrintService[]" line="634"/>
                        </method>
                    </anonymous_class>
                    <scope line="639"/>
                </scope>
                <declaration name="bounds" type="Rectangle" line="644"/>
                <declaration name="x" type="int" line="645"/>
                <declaration name="y" type="int" line="646"/>
                <declaration name="newService" type="PrintService" line="647"/>
                <scope line="648"/>
                <scope line="651"/>
                <scope line="654"/>
                <scope line="657">
                    <scope line="658"/>
                    <scope line="661"/>
                </scope>
            </method>
            <javadoc line="667">
                Presents the user a dialog for changing properties of the
                  print job interactively.                
                <returns>
                    false if the user cancels the dialog and
                      true otherwise.                    
                </returns>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="printDialog" type="boolean" line="676">
                <scope line="677"/>
                <declaration name="attributes" type="PrintRequestAttributeSet" line="680"/>
                <declaration name="doPrint" type="boolean" line="683"/>
                <scope line="684">
                    <declaration name="jobName" type="JobName" line="685"/>
                    <scope line="686"/>
                    <declaration name="copies" type="Copies" line="689"/>
                    <scope line="690"/>
                    <declaration name="dest" type="Destination" line="693"/>
                    <scope line="694">
                        <scope line="695"/>
                        <scope line="699">
                            <declaration name="ps" type="PrintService" line="701"/>
                            <scope line="702">
                                <declaration name="defaultDest" type="Destination" line="703"/>
                                <scope line="704"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="710">
                        <declaration name="ps" type="PrintService" line="712"/>
                        <scope line="713"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="720">
                The pages in the document to be printed by this PrinterJob
                  are drawn by the Printable object &apos;painter&apos;. The PageFormat
                  for each page is the default page format.                
                <param>
                    Printable Called to render each page of the document.                    
                </param>
            </javadoc>
            <method name="setPrintable" type="void" line="726">
                <params>
                    <param name="painter" type="Printable"/>
                </params>
            </method>
            <javadoc line="729">
                The pages in the document to be printed by this PrinterJob
                  are drawn by the Printable object &apos;painter&apos;. The PageFormat
                  of each page is &apos;format&apos;.                
                <param>
                    Printable Called to render each page of the document.                    
                </param>
                <param>
                    PageFormat The size and orientation of each page to
                      be printed.                    
                </param>
            </javadoc>
            <method name="setPrintable" type="void" line="737">
                <params>
                    <param name="painter" type="Printable"/>
                    <param name="format" type="PageFormat"/>
                </params>
            </method>
            <javadoc line="741">
                The pages in the document to be printed are held by the
                  Pageable instance &apos;document&apos;. &apos;document&apos; will be queried
                  for the number of pages as well as the PageFormat and
                  Printable for each page.                
                <param>
                    Pageable The document to be printed. It may not be null.                    
                </param>
                <exception>
                    NullPointerException the Pageable passed in was null.                    
                </exception>
                <see>
                    PageFormat                    
                </see>
                <see>
                    Printable                    
                </see>
            </javadoc>
            <method name="setPageable" type="void" line="751">
                <params>
                    <param name="document" type="Pageable"/>
                </params>
                <scope line="752"/>
                <scope line="755"/>
            </method>
            <method name="initPrinter" type="void" line="759"/>
            <method name="isSupportedValue" type="boolean" line="762">
                <params>
                    <param name="attrval" type="Attribute"/>
                    <param name="attrset" type="PrintRequestAttributeSet"/>
                </params>
                <declaration name="ps" type="PrintService" line="763"/>
            </method>
            <method name="setAttributes" type="void" line="766">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <declaration name="service" type="PrintService" line="775"/>
                <scope line="776"/>
                <declaration name="fidelity" type="boolean" line="779"/>
                <declaration name="attrFidelity" type="Fidelity" line="780"/>
                <scope line="781"/>
                <scope line="784">
                    <declaration name="unsupported" type="AttributeSet" line="785"/>
                    <scope line="786"/>
                </scope>
                <declaration name="collateAttr" type="SheetCollate" line="790"/>
                <scope line="791"/>
                <scope line="795"/>
                <scope line="799"/>
                <scope line="802">
                    <scope line="803">
                        <declaration name="range" type="int[][]" line="804"/>
                    </scope>
                    <scope line="807"/>
                </scope>
                <declaration name="copies" type="Copies" line="811"/>
                <scope line="812"/>
                <scope line="816"/>
                <declaration name="destination" type="Destination" line="819"/>
                <scope line="820">
                    <scope line="821"/>
                    <scope line="824">
                        <declaration name="defaultDest" type="Destination" line="825"/>
                        <scope line="826"/>
                    </scope>
                </scope>
                <declaration name="jobSheets" type="JobSheets" line="831"/>
                <scope line="832"/>
                <declaration name="jobName" type="JobName" line="835"/>
                <scope line="836"/>
                <scope line="840"/>
                <declaration name="userName" type="RequestingUserName" line="843"/>
                <scope line="844"/>
                <scope line="847">
                    <scope line="848"/>
                    <scope line="851"/>
                </scope>
                <declaration name="media" type="Media" line="855"/>
                <declaration name="orientReq" type="OrientationRequested" line="856"/>
                <declaration name="mpa" type="MediaPrintableArea" line="857"/>
                <scope line="858">
                    <declaration name="pageable" type="Pageable" line="859"/>
                    <declaration name="printable" type="Printable" line="860"/>
                    <declaration name="pf" type="PageFormat" line="861"/>
                    <declaration name="paper" type="Paper" line="862"/>
                    <scope line="863">
                        <declaration name="mpaVals" type="Object" line="864"/>
                        <scope line="865"/>
                    </scope>
                    <scope line="869">
                        <declaration name="orient" type="int" line="870"/>
                        <scope line="871"/>
                        <scope line="874"/>
                        <scope line="877"/>
                    </scope>
                    <scope line="882">
                        <scope line="883">
                            <declaration name="msn" type="MediaSizeName" line="884"/>
                            <declaration name="msz" type="MediaSize" line="885"/>
                            <scope line="886">
                                <declaration name="paperWid" type="float" line="887"/>
                                <declaration name="paperHgt" type="float" line="888"/>
                                <scope line="890"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="896">
                        <declaration name="printableArea" type="float[]" line="897"/>
                        <scope line="898"/>
                    </scope>
                </scope>
                <scope line="907"/>
            </method>
            <method name="spoolToService" type="void" line="911">
                <params>
                    <param name="psvc" type="PrintService"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <scope line="912"/>
                <declaration name="job" type="DocPrintJob" line="915"/>
                <declaration name="doc" type="Doc" line="916"/>
                <scope line="917"/>
                <scope line="920"/>
                <scope line="923"/>
            </method>
            <javadoc line="927">
                Prints a set of pages.                
                <exception>
                    java.awt.print.PrinterException an error in the print system
                      caused the job to be aborted                    
                </exception>
                <see>
                    java.awt.print.Book                    
                </see>
                <see>
                    java.awt.print.Pageable                    
                </see>
                <see>
                    java.awt.print.Printable                    
                </see>
            </javadoc>
            <method name="print" type="void" line="935"/>
            <declaration name="debugPrint" type="boolean" line="938"/>
            <method name="debug_println" type="void" line="939">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="940"/>
            </method>
            <method name="print" type="void" line="944">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <declaration name="psvc" type="PrintService" line="945"/>
                <scope line="947"/>
                <declaration name="prnState" type="PrinterState" line="950"/>
                <scope line="951">
                    <declaration name="prnStateReasons" type="PrinterStateReasons" line="952"/>
                    <scope line="953"/>
                </scope>
                <scope line="957"/>
                <scope line="960">
                    <scope line="962">
                        <declaration name="f" type="File" line="963"/>
                        <scope line="964">
                            <scope line="965"/>
                        </scope>
                        <scope line="969"/>
                        <scope line="972"/>
                        <declaration name="pFile" type="File" line="974"/>
                        <scope line="975"/>
                    </scope>
                </scope>
                <scope line="980"/>
                <declaration name="numCollatedCopies" type="int" line="985"/>
                <declaration name="numNonCollatedCopies" type="int" line="986"/>
                <declaration name="numPages" type="int" line="988"/>
                <scope line="989"/>
                <declaration name="firstPage" type="int" line="992"/>
                <declaration name="lastPage" type="int" line="993"/>
                <scope line="994">
                    <declaration name="totalPages" type="int" line="995"/>
                    <scope line="996"/>
                </scope>
                <scope line="1000">
                    <scope line="1001"/>
                    <scope line="1006"/>
                    <declaration name="rangeIsSelected" type="boolean" line="1009"/>
                    <scope line="1010">
                        <declaration name="pages" type="SunPageSelection" line="1011"/>
                        <scope line="1012"/>
                    </scope>
                    <scope line="1017">
                        <scope line="1018">
                            <scope line="1019">
                                <declaration name="nexti" type="int" line="1020"/>
                                <scope line="1021"/>
                                <scope line="1024"/>
                            </scope>
                            <scope line="1028">
                                <scope line="1029"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1037"/>
                </scope>
                <scope line="1041">
                    <scope line="1043">
                        <scope line="1044"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1052">
                updates a Paper object to reflect the current printer&apos;s selected
                  paper size and imageable area for that paper size.
                  Default implementation copies settings from the original, applies
                  applies some validity checks, changes them only if they are
                  clearly unreasonable, then sets them into the new Paper.
                  Subclasses are expected to override this method to make more
                  informed decisons.                
            </javadoc>
            <method name="validatePaper" type="void" line="1061">
                <params>
                    <param name="origPaper" type="Paper"/>
                    <param name="newPaper" type="Paper"/>
                </params>
                <scope line="1062"/>
                <scope line="1065">
                    <declaration name="wid" type="double" line="1066"/>
                    <declaration name="hgt" type="double" line="1067"/>
                    <declaration name="ix" type="double" line="1068"/>
                    <declaration name="iy" type="double" line="1069"/>
                    <declaration name="iw" type="double" line="1070"/>
                    <declaration name="ih" type="double" line="1071"/>
                    <declaration name="defaultPaper" type="Paper" line="1072"/>
                    <scope line="1079"/>
                    <scope line="1082"/>
                    <scope line="1085"/>
                    <scope line="1088"/>
                </scope>
            </method>
            <javadoc line="1095">
                The passed in PageFormat will be copied and altered to describe
                  the default page size and orientation of the PrinterJob&apos;s
                  current printer.
                  Platform subclasses which can access the actual default paper size
                  for a printer may override this method.                
            </javadoc>
            <method name="defaultPage" type="PageFormat" line="1102">
                <params>
                    <param name="page" type="PageFormat"/>
                </params>
                <declaration name="newPage" type="PageFormat" line="1103"/>
                <declaration name="newPaper" type="Paper" line="1105"/>
                <declaration name="ptsPerInch" type="double" line="1106"/>
                <declaration name="w" type="double" line="1107"/>
                <declaration name="media" type="Media" line="1108"/>
                <declaration name="service" type="PrintService" line="1109"/>
                <scope line="1110">
                    <declaration name="size" type="MediaSize" line="1111"/>
                    <scope line="1113"/>
                </scope>
                <declaration name="defaultCountry" type="String" line="1122"/>
                <scope line="1123">
                    <declaration name="mmPerInch" type="double" line="1124"/>
                </scope>
            </method>
            <javadoc line="1133">
                The passed in PageFormat is cloned and altered to be usable on
                  the PrinterJob&apos;s current printer.                
            </javadoc>
            <method name="validatePage" type="PageFormat" line="1137">
                <params>
                    <param name="page" type="PageFormat"/>
                </params>
                <declaration name="newPage" type="PageFormat" line="1138"/>
                <declaration name="newPaper" type="Paper" line="1139"/>
            </method>
            <javadoc line="1144">
                Set the number of copies to be printed.                
            </javadoc>
            <method name="setCopies" type="void" line="1147">
                <params>
                    <param name="copies" type="int"/>
                </params>
            </method>
            <javadoc line="1150">
                Get the number of copies to be printed.                
            </javadoc>
            <method name="getCopies" type="int" line="1153"/>
            <method name="getCopiesInt" type="int" line="1156"/>
            <javadoc line="1159">
                Get the name of the printing user.
                  The caller must have security permission to read system properties.                
            </javadoc>
            <method name="getUserName" type="String" line="1163"/>
            <method name="getUserNameInt" type="String" line="1166">
                <scope line="1167"/>
                <scope line="1170">
                    <scope line="1171"/>
                    <scope line="1174"/>
                </scope>
            </method>
            <javadoc line="1179">
                Set the name of the document to be printed.
                  The document name can not be null.                
            </javadoc>
            <method name="setJobName" type="void" line="1183">
                <params>
                    <param name="jobName" type="String"/>
                </params>
                <scope line="1184"/>
                <scope line="1187"/>
            </method>
            <javadoc line="1191">
                Get the name of the document to be printed.                
            </javadoc>
            <method name="getJobName" type="String" line="1194"/>
            <method name="getJobNameInt" type="String" line="1197"/>
            <javadoc line="1200">
                Set the range of pages from a Book to be printed.
                  Both &apos;firstPage&apos; and &apos;lastPage&apos; are zero based
                  page indices. If either parameter is less than
                  zero then the page range is set to be from the
                  first page to the last.                
            </javadoc>
            <method name="setPageRange" type="void" line="1207">
                <params>
                    <param name="firstPage" type="int"/>
                    <param name="lastPage" type="int"/>
                </params>
                <scope line="1208"/>
                <scope line="1213"/>
            </method>
            <javadoc line="1218">
                Return the zero based index of the first page to
                  be printed in this job.                
            </javadoc>
            <method name="getFirstPage" type="int" line="1222"/>
            <javadoc line="1225">
                Return the zero based index of the last page to
                  be printed in this job.                
            </javadoc>
            <method name="getLastPage" type="int" line="1229"/>
            <javadoc line="1232">
                Set whether copies should be collated or not.
                  Two collated copies of a three page document
                  print in this order: 1, 2, 3, 1, 2, 3 while
                  uncollated copies print in this order:
                  1, 1, 2, 2, 3, 3.
                  This is set when request is using an attribute set.                
            </javadoc>
            <method name="setCollated" type="void" line="1240">
                <params>
                    <param name="collate" type="boolean"/>
                </params>
            </method>
            <javadoc line="1244">
                Return true if collated copies will be printed as determined
                  in an attribute set.                
            </javadoc>
            <method name="isCollated" type="boolean" line="1248"/>
            <method name="startDoc" type="void" line="1251"/>
            <javadoc line="1251">
                Called by the print() method at the start of
                  a print job.                
            </javadoc>
            <method name="endDoc" type="void" line="1256"/>
            <javadoc line="1256">
                Called by the print() method at the end of
                  a print job.                
            </javadoc>
            <method name="abortDoc" type="void" line="1261"/>
            <method name="cancelDoc" type="void" line="1262">
                <scope line="1264"/>
            </method>
            <javadoc line="1271">
                Returns how many times the entire book should
                  be printed by the PrintJob. If the printer
                  itself supports collation then this method
                  should return 1 indicating that the entire
                  book need only be printed once and the copies
                  will be collated and made in the printer.                
            </javadoc>
            <method name="getCollatedCopies" type="int" line="1279"/>
            <javadoc line="1282">
                Returns how many times each page in the book
                  should be consecutively printed by PrintJob.
                  If the printer makes copies itself then this
                  method should return 1.                
            </javadoc>
            <method name="getNoncollatedCopies" type="int" line="1288"/>
            <declaration name="deviceWidth" type="int" line="1291"/>
            <declaration name="defaultDeviceTransform" type="AffineTransform" line="1292"/>
            <declaration name="pgConfig" type="PrinterGraphicsConfig" line="1293"/>
            <method name="setGraphicsConfigInfo" type="void" line="1294">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="pw" type="double"/>
                    <param name="ph" type="double"/>
                </params>
                <declaration name="pt" type="Point2D.Double" line="1295"/>
                <scope line="1297"/>
            </method>
            <method name="getPrinterGraphicsConfig" type="PrinterGraphicsConfig" line="1304">
                <scope line="1305"/>
                <declaration name="deviceID" type="String" line="1308"/>
                <declaration name="service" type="PrintService" line="1309"/>
                <scope line="1310"/>
            </method>
            <javadoc line="1316">
                Print a page from the provided document.                
                <return>
                    int Printable.PAGE_EXISTS if the page existed and was drawn and
                      Printable.NO_SUCH_PAGE if the page did not exist.                    
                </return>
                <see>
                    java.awt.print.Printable                    
                </see>
            </javadoc>
            <method name="printPage" type="int" line="1322">
                <params>
                    <param name="document" type="Pageable"/>
                    <param name="pageIndex" type="int"/>
                </params>
                <declaration name="page" type="PageFormat" line="1323"/>
                <declaration name="origPage" type="PageFormat" line="1324"/>
                <declaration name="painter" type="Printable" line="1325"/>
                <scope line="1326"/>
                <scope line="1331">
                    <declaration name="pe" type="PrinterException" line="1332"/>
                </scope>
                <declaration name="paper" type="Paper" line="1336"/>
                <scope line="1337">
                    <declaration name="left" type="double" line="1338"/>
                    <declaration name="top" type="double" line="1339"/>
                    <declaration name="width" type="double" line="1340"/>
                    <declaration name="height" type="double" line="1341"/>
                    <scope line="1344"/>
                    <scope line="1347"/>
                </scope>
                <declaration name="xScale" type="double" line="1351"/>
                <declaration name="yScale" type="double" line="1352"/>
                <declaration name="deviceArea" type="Rectangle2D" line="1353"/>
                <declaration name="uniformTransform" type="AffineTransform" line="1354"/>
                <declaration name="scaleTransform" type="AffineTransform" line="1355"/>
                <declaration name="bandWidth" type="int" line="1357"/>
                <scope line="1358"/>
                <scope line="1361"/>
                <declaration name="deviceAreaHeight" type="int" line="1364"/>
                <scope line="1365"/>
                <declaration name="bandHeight" type="int" line="1368"/>
                <declaration name="deviceLeft" type="int" line="1369"/>
                <declaration name="deviceTop" type="int" line="1370"/>
                <declaration name="deviceTransform" type="AffineTransform" line="1371"/>
                <declaration name="pBand" type="BufferedImage" line="1375"/>
                <declaration name="peekGraphics" type="PeekGraphics" line="1376"/>
                <declaration name="pageFormatArea" type="Rectangle2D.Double" line="1377"/>
                <declaration name="pgAt" type="AffineTransform" line="1382"/>
                <declaration name="pageResult" type="int" line="1384"/>
                <scope line="1386">
                    <declaration name="thisPaper" type="Paper" line="1388"/>
                    <declaration name="paperChanged" type="boolean" line="1389"/>
                    <declaration name="pathGraphics" type="Graphics2D" line="1392"/>
                    <scope line="1393">
                        <declaration name="initialTx" type="AffineTransform" line="1399"/>
                        <scope line="1401">
                            <declaration name="gstate" type="GraphicsState" line="1402"/>
                        </scope>
                    </scope>
                    <scope line="1407">
                        <declaration name="band" type="BufferedImage" line="1408"/>
                        <scope line="1409"/>
                        <declaration name="bandGraphics" type="Graphics2D" line="1415"/>
                        <declaration name="clipArea" type="Rectangle2D.Double" line="1416"/>
                        <declaration name="painterGraphics" type="ProxyGraphics2D" line="1418"/>
                        <declaration name="clearGraphics" type="Graphics2D" line="1419"/>
                        <declaration name="tile" type="ByteInterleavedRaster" line="1421"/>
                        <declaration name="data" type="byte[]" line="1422"/>
                        <declaration name="deviceBottom" type="int" line="1423"/>
                        <declaration name="deviceAddressableX" type="int" line="1424"/>
                        <declaration name="deviceAddressableY" type="int" line="1425"/>
                        <scope line="1426">
                            <declaration name="clip" type="Rectangle" line="1433"/>
                            <scope line="1435">
                                <declaration name="bandX" type="int" line="1436"/>
                                <scope line="1437"/>
                                <declaration name="bandY" type="int" line="1441"/>
                                <scope line="1442"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1460">
                If a print job is in progress, print() has been
                  called but has not returned, then this signals
                  that the job should be cancelled and the next
                  chance. If there is no print job in progress then
                  this call does nothing.                
            </javadoc>
            <method name="cancel" type="void" line="1467">
                <scope line="1468">
                    <scope line="1469"/>
                </scope>
            </method>
            <javadoc line="1475">
                Returns true is a print job is ongoing but will
                  be cancelled and the next opportunity. false is
                  returned otherwise.                
            </javadoc>
            <method name="isCancelled" type="boolean" line="1480">
                <declaration name="cancelled" type="boolean" line="1481"/>
                <scope line="1482"/>
            </method>
            <javadoc line="1488">
                Return the Pageable describing the pages to be printed.                
            </javadoc>
            <method name="getPageable" type="Pageable" line="1491"/>
            <javadoc line="1494">
                Examine the metrics captured by the
                  &lt;code&gt;PeekGraphics&lt;/code&gt; instance and
                  if capable of directly converting this
                  print job to the printer&apos;s control language
                  or the native OS&apos;s graphics primitives, then
                  return a &lt;code&gt;PathGraphics&lt;/code&gt; to perform
                  that conversion. If there is not an object
                  capable of the conversion then return
                  &lt;code&gt;null&lt;/code&gt;. Returning &lt;code&gt;null&lt;/code&gt;
                  causes the print job to be rasterized.                
            </javadoc>
            <method name="createPathGraphics" type="Graphics2D" line="1506">
                <params>
                    <param name="graphics" type="PeekGraphics"/>
                    <param name="printerJob" type="PrinterJob"/>
                    <param name="painter" type="Printable"/>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="pageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1509">
                Create and return an object that will
                  gather and hold metrics about the print
                  job. This method is passed a &lt;code&gt;Graphics2D&lt;/code&gt;
                  object that can be used as a proxy for the
                  object gathering the print job matrics. The
                  method is also supplied with the instance
                  controlling the print job, &lt;code&gt;printerJob&lt;/code&gt;.                
            </javadoc>
            <method name="createPeekGraphics" type="PeekGraphics" line="1518">
                <params>
                    <param name="graphics" type="Graphics2D"/>
                    <param name="printerJob" type="PrinterJob"/>
                </params>
            </method>
            <javadoc line="1521">
                Configure the passed in Graphics2D so that
                  is contains the defined initial settings
                  for a print job. These settings are:
                  color:  black.
                  clip:   &lt;as passed in&gt;                
            </javadoc>
            <method name="initPrinterGraphics" type="void" line="1528">
                <params>
                    <param name="g" type="Graphics2D"/>
                    <param name="clip" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="1532">
                User dialogs should disable &quot;File&quot; buttons if this returns false.                
            </javadoc>
            <method name="checkAllowedToPrintToFile" type="boolean" line="1535">
                <scope line="1536"/>
                <scope line="1540"/>
            </method>
            <javadoc line="1544">
                Break this out as it may be useful when we allow API to
                  specify printing to a file. In that case its probably right
                  to throw a SecurityException if the permission is not granted                
            </javadoc>
            <method name="throwPrintToFile" type="void" line="1549">
                <declaration name="security" type="SecurityManager" line="1550"/>
                <scope line="1551">
                    <scope line="1552"/>
                </scope>
            </method>
            <method name="removeControlChars" type="String" line="1558">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="in_chars" type="char[]" line="1559"/>
                <declaration name="len" type="int" line="1560"/>
                <declaration name="out_chars" type="char[]" line="1561"/>
                <declaration name="pos" type="int" line="1562"/>
                <scope line="1563">
                    <declaration name="c" type="char" line="1564"/>
                    <scope line="1565"/>
                </scope>
                <scope line="1569"/>
                <scope line="1572"/>
            </method>
        </class>
    </source>