<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.print.Pageable"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Paper"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="java.awt.print.PrinterIOException"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="javax.print.DocFlavor"/>
        <import package="javax.print.PrintService"/>
        <import package="javax.print.StreamPrintService"/>
        <import package="javax.print.attribute.HashPrintRequestAttributeSet"/>
        <import package="javax.print.attribute.PrintRequestAttributeSet"/>
        <import package="javax.print.attribute.standard.Chromaticity"/>
        <import package="javax.print.attribute.standard.Copies"/>
        <import package="javax.print.attribute.standard.Destination"/>
        <import package="javax.print.attribute.standard.DialogTypeSelection"/>
        <import package="javax.print.attribute.standard.JobName"/>
        <import package="javax.print.attribute.standard.Sides"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.CharConversionException"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Properties"/>
        <import package="sun.awt.CharsetString"/>
        <import package="sun.awt.FontConfiguration"/>
        <import package="sun.awt.FontDescriptor"/>
        <import package="sun.awt.PlatformFont"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontUtilities"/>
        <import package="java.nio.charset"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.lang.reflect.Method"/>
        <class name="PSPrinterJob" line="61">
            <extends class="RasterPrinterJob"/>
            <javadoc line="61">
                A class which initiates and executes a PostScript printer job.                
                <author>
                    Richard Blanchard                    
                </author>
            </javadoc>
            <declaration name="FILL_EVEN_ODD" type="int" line="66"/>
            <javadoc line="66">
                Passed to the &lt;code&gt;setFillMode&lt;/code&gt;
                  method this value forces fills to be
                  done using the even-odd fill rule.                
            </javadoc>
            <declaration name="FILL_WINDING" type="int" line="72"/>
            <javadoc line="72">
                Passed to the &lt;code&gt;setFillMode&lt;/code&gt;
                  method this value forces fills to be
                  done using the non-zero winding rule.                
            </javadoc>
            <declaration name="MAX_PSSTR" type="int" line="78"/>
            <declaration name="RED_MASK" type="int" line="79"/>
            <declaration name="GREEN_MASK" type="int" line="80"/>
            <declaration name="BLUE_MASK" type="int" line="81"/>
            <declaration name="RED_SHIFT" type="int" line="82"/>
            <declaration name="GREEN_SHIFT" type="int" line="83"/>
            <declaration name="BLUE_SHIFT" type="int" line="84"/>
            <declaration name="LOWNIBBLE_MASK" type="int" line="85"/>
            <declaration name="HINIBBLE_MASK" type="int" line="86"/>
            <declaration name="HINIBBLE_SHIFT" type="int" line="87"/>
            <declaration name="hexDigits" type="byte" line="88"/>
            <declaration name="PS_XRES" type="int" line="89"/>
            <declaration name="PS_YRES" type="int" line="90"/>
            <declaration name="ADOBE_PS_STR" type="String" line="91"/>
            <declaration name="EOF_COMMENT" type="String" line="92"/>
            <declaration name="PAGE_COMMENT" type="String" line="93"/>
            <declaration name="READIMAGEPROC" type="String" line="94"/>
            <declaration name="COPIES" type="String" line="95"/>
            <declaration name="PAGE_SAVE" type="String" line="96"/>
            <declaration name="PAGE_RESTORE" type="String" line="97"/>
            <declaration name="SHOWPAGE" type="String" line="98"/>
            <declaration name="IMAGE_SAVE" type="String" line="99"/>
            <declaration name="IMAGE_STR" type="String" line="100"/>
            <declaration name="IMAGE_RESTORE" type="String" line="101"/>
            <declaration name="COORD_PREP" type="String" line="102"/>
            <declaration name="SetFontName" type="String" line="103"/>
            <declaration name="DrawStringName" type="String" line="104"/>
            <declaration name="EVEN_ODD_FILL_STR" type="String" line="105"/>
            <javadoc line="105">
                The PostScript invocation to fill a path using the
                  even-odd rule. (eofill)                
            </javadoc>
            <declaration name="WINDING_FILL_STR" type="String" line="110"/>
            <javadoc line="110">
                The PostScript invocation to fill a path using the
                  non-zero winding rule. (fill)                
            </javadoc>
            <declaration name="EVEN_ODD_CLIP_STR" type="String" line="115"/>
            <javadoc line="115">
                The PostScript to set the clip to be the current path
                  using the even odd rule. (eoclip)                
            </javadoc>
            <declaration name="WINDING_CLIP_STR" type="String" line="120"/>
            <javadoc line="120">
                The PostScript to set the clip to be the current path
                  using the non-zero winding rule. (clip)                
            </javadoc>
            <declaration name="MOVETO_STR" type="String" line="125"/>
            <javadoc line="125">
                Expecting two numbers on the PostScript stack, this
                  invocation moves the current pen position. (moveto)                
            </javadoc>
            <declaration name="LINETO_STR" type="String" line="130"/>
            <javadoc line="130">
                Expecting two numbers on the PostScript stack, this
                  invocation draws a PS line from the current pen
                  position to the point on the stack. (lineto)                
            </javadoc>
            <declaration name="CURVETO_STR" type="String" line="136"/>
            <javadoc line="136">
                This PostScript operator takes two control points
                  and an ending point and using the current pen
                  position as a starting point adds a bezier
                  curve to the current path. (curveto)                
            </javadoc>
            <declaration name="GRESTORE_STR" type="String" line="143"/>
            <javadoc line="143">
                The PostScript to pop a state off of the printer&apos;s
                  gstate stack. (grestore)                
            </javadoc>
            <declaration name="GSAVE_STR" type="String" line="148"/>
            <javadoc line="148">
                The PostScript to push a state on to the printer&apos;s
                  gstate stack. (gsave)                
            </javadoc>
            <declaration name="NEWPATH_STR" type="String" line="153"/>
            <javadoc line="153">
                Make the current PostScript path an empty path. (newpath)                
            </javadoc>
            <declaration name="CLOSEPATH_STR" type="String" line="157"/>
            <javadoc line="157">
                Close the current subpath by generating a line segment
                  from the current position to the start of the subpath. (closepath)                
            </javadoc>
            <declaration name="SETRGBCOLOR_STR" type="String" line="162"/>
            <javadoc line="162">
                Use the three numbers on top of the PS operator
                  stack to set the rgb color. (setrgbcolor)                
            </javadoc>
            <declaration name="SETGRAY_STR" type="String" line="167"/>
            <javadoc line="167">
                Use the top number on the stack to set the printer&apos;s
                  current gray value. (setgray)                
            </javadoc>
            <declaration name="mDestType" type="int" line="172"/>
            <declaration name="mDestination" type="String" line="173"/>
            <declaration name="mNoJobSheet" type="boolean" line="174"/>
            <declaration name="mOptions" type="String" line="175"/>
            <declaration name="mLastFont" type="Font" line="176"/>
            <declaration name="mLastColor" type="Color" line="177"/>
            <declaration name="mLastClip" type="Shape" line="178"/>
            <declaration name="mLastTransform" type="AffineTransform" line="179"/>
            <declaration name="epsPrinter" type="EPSPrinter" line="180"/>
            <declaration name="mCurMetrics" type="FontMetrics" line="181"/>
            <javadoc line="181">
                The metrics for the font currently set.                
            </javadoc>
            <declaration name="mPSStream" type="PrintStream" line="185"/>
            <javadoc line="185">
                The output stream to which the generated PostScript
                  is written.                
            </javadoc>
            <declaration name="spoolFile" type="File" line="190"/>
            <declaration name="mFillOpStr" type="String" line="191"/>
            <javadoc line="191">
                This string holds the PostScript operator to
                  be used to fill a path. It can be changed
                  by the &lt;code&gt;setFillMode&lt;/code&gt; method.                
            </javadoc>
            <declaration name="mClipOpStr" type="String" line="197"/>
            <javadoc line="197">
                This string holds the PostScript operator to
                  be used to clip to a path. It can be changed
                  by the &lt;code&gt;setFillMode&lt;/code&gt; method.                
            </javadoc>
            <declaration name="mGStateStack" type="ArrayList" line="203"/>
            <javadoc line="203">
                A stack that represents the PostScript gstate stack.                
            </javadoc>
            <declaration name="mPenX" type="float" line="207"/>
            <javadoc line="207">
                The x coordinate of the current pen position.                
            </javadoc>
            <declaration name="mPenY" type="float" line="211"/>
            <javadoc line="211">
                The y coordinate of the current pen position.                
            </javadoc>
            <declaration name="mStartPathX" type="float" line="215"/>
            <javadoc line="215">
                The x coordinate of the starting point of
                  the current subpath.                
            </javadoc>
            <declaration name="mStartPathY" type="float" line="220"/>
            <javadoc line="220">
                The y coordinate of the starting point of
                  the current subpath.                
            </javadoc>
            <declaration name="mFontProps" type="Properties" line="225"/>
            <javadoc line="225">
                An optional mapping of fonts to PostScript names.                
            </javadoc>
            <scope line="229">
                <anonymous_class line="230">
                    <method name="run" type="Object" line="231"/>
                </anonymous_class>
            </scope>
            <method name="initProps" type="Properties" line="238">
                <declaration name="jhome" type="String" line="239"/>
                <scope line="240">
                    <declaration name="ulocale" type="String" line="241"/>
                    <scope line="242">
                        <declaration name="f" type="File" line="243"/>
                        <scope line="244">
                            <scope line="246">
                                <scope line="248">
                                    <scope line="250"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="in" type="InputStream" line="256"/>
                        <declaration name="props" type="Properties" line="257"/>
                    </scope>
                    <scope line="262"/>
                </scope>
            </method>
            <method name="PSPrinterJob" type="constructor" line="268"/>
            <javadoc line="270">
                Presents the user a dialog for changing properties of the
                  print job interactively.                
                <returns>
                    false if the user cancels the dialog and
                      true otherwise.                    
                </returns>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="printDialog" type="boolean" line="279">
                <scope line="280"/>
                <scope line="283"/>
                <declaration name="doPrint" type="boolean" line="288"/>
                <declaration name="dts" type="DialogTypeSelection" line="289"/>
                <scope line="290"/>
                <scope line="295"/>
                <scope line="298">
                    <declaration name="jobName" type="JobName" line="299"/>
                    <scope line="300"/>
                    <declaration name="copies" type="Copies" line="303"/>
                    <scope line="304"/>
                    <declaration name="dest" type="Destination" line="307"/>
                    <scope line="308">
                        <scope line="309"/>
                        <scope line="313"/>
                    </scope>
                    <scope line="317">
                        <declaration name="pServ" type="PrintService" line="319"/>
                        <scope line="320"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="327">
                Invoked by the RasterPrinterJob super class
                  this method is called to mark the start of a
                  document.                
            </javadoc>
            <method name="startDoc" type="void" line="332">
                <declaration name="output" type="OutputStream" line="333"/>
                <scope line="334">
                    <scope line="335">
                        <declaration name="sps" type="StreamPrintService" line="336"/>
                        <scope line="338"/>
                        <scope line="342"/>
                    </scope>
                    <scope line="346">
                        <scope line="348"/>
                        <scope line="352">
                            <scope line="353"/>
                            <scope line="357"/>
                        </scope>
                        <scope line="361">
                            <declaration name="po" type="PrinterOpener" line="362"/>
                            <scope line="364"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="402"/>
                <scope line="416">
                    <declaration name="cnt" type="int" line="417"/>
                    <scope line="418"/>
                </scope>
                <scope line="428">
                    <declaration name="pageFormat" type="PageFormat" line="429"/>
                    <declaration name="paperHeight" type="double" line="430"/>
                    <declaration name="paperWidth" type="double" line="431"/>
                    <declaration name="pservice" type="PrintService" line="433"/>
                    <anonymous_class line="434">
                        <method name="run" type="Object" line="435">
                            <scope line="436">
                                <declaration name="psClass" type="Class" line="437"/>
                                <scope line="438">
                                    <declaration name="isPSMethod" type="Method" line="439"/>
                                </scope>
                            </scope>
                            <scope line="443"/>
                        </method>
                    </anonymous_class>
                    <declaration name="isPS" type="Boolean" line="434"/>
                    <scope line="449"/>
                    <scope line="455">
                        <scope line="456"/>
                        <scope line="459"/>
                    </scope>
                </scope>
            </method>
            <class name="PrinterOpener" line="467">
                <implements interface="java.security.PrivilegedAction"/>
                <declaration name="pex" type="PrinterException" line="468"/>
                <declaration name="result" type="OutputStream" line="469"/>
                <method name="run" type="Object" line="470">
                    <scope line="471"/>
                    <scope line="477"/>
                </method>
            </class>
            <class name="PrinterSpooler" line="483">
                <implements interface="java.security.PrivilegedAction"/>
                <declaration name="pex" type="PrinterException" line="484"/>
                <method name="run" type="Object" line="485">
                    <scope line="486">
                        <scope line="487"/>
                        <declaration name="fileName" type="String" line="491"/>
                        <declaration name="execCmd" type="String" line="492"/>
                        <declaration name="process" type="Process" line="493"/>
                    </scope>
                    <scope line="497"/>
                    <scope line="500"/>
                </method>
            </class>
            <javadoc line="506">
                Invoked if the application cancelled the printjob.                
            </javadoc>
            <method name="abortDoc" type="void" line="509">
                <scope line="510"/>
                <anonymous_class line="513">
                    <method name="run" type="Object" line="514">
                        <scope line="515"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="523">
                Invoked by the RasterPrintJob super class
                  this method is called after that last page
                  has been imaged.                
            </javadoc>
            <method name="endDoc" type="void" line="528">
                <scope line="529">
                    <scope line="532"/>
                </scope>
                <scope line="536">
                    <scope line="537"/>
                    <declaration name="spooler" type="PrinterSpooler" line="540"/>
                    <scope line="542"/>
                </scope>
            </method>
            <javadoc line="547">
                The RasterPrintJob super class calls this method
                  at the start of each page.                
            </javadoc>
            <method name="startPage" type="void" line="551">
                <params>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="painter" type="Printable"/>
                    <param name="index" type="int"/>
                    <param name="paperChanged" type="boolean"/>
                </params>
                <declaration name="paperHeight" type="double" line="552"/>
                <declaration name="paperWidth" type="double" line="553"/>
                <declaration name="pageNumber" type="int" line="554"/>
                <scope line="558">
                    <declaration name="pservice" type="PrintService" line="560"/>
                    <anonymous_class line="561">
                        <method name="run" type="Object" line="562">
                            <scope line="563">
                                <declaration name="psClass" type="Class" line="564"/>
                                <scope line="565">
                                    <declaration name="isPSMethod" type="Method" line="566"/>
                                </scope>
                            </scope>
                            <scope line="570"/>
                        </method>
                    </anonymous_class>
                    <declaration name="isPS" type="Boolean" line="561"/>
                    <scope line="576"/>
                </scope>
            </method>
            <javadoc line="584">
                The RastePrintJob super class calls this method
                  at the end of each page.                
            </javadoc>
            <method name="endPage" type="void" line="588">
                <params>
                    <param name="format" type="PageFormat"/>
                    <param name="painter" type="Printable"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="592">
                Convert the 24 bit BGR image buffer represented by
                  &lt;code&gt;image&lt;/code&gt; to PostScript. The image is drawn at
                  &lt;code&gt;(destX, destY)&lt;/code&gt; in device coordinates.
                  The image is scaled into a square of size
                  specified by &lt;code&gt;destWidth&lt;/code&gt; and
                  &lt;code&gt;destHeight&lt;/code&gt;. The portion of the
                  source image copied into that square is specified
                  by &lt;code&gt;srcX&lt;/code&gt;, &lt;code&gt;srcY&lt;/code&gt;,
                  &lt;code&gt;srcWidth&lt;/code&gt;, and srcHeight.                
            </javadoc>
            <method name="drawImageBGR" type="void" line="603">
                <params>
                    <param name="bgrData" type="byte[]"/>
                    <param name="destX" type="float"/>
                    <param name="destY" type="float"/>
                    <param name="destWidth" type="float"/>
                    <param name="destHeight" type="float"/>
                    <param name="srcX" type="float"/>
                    <param name="srcY" type="float"/>
                    <param name="srcWidth" type="float"/>
                    <param name="srcHeight" type="float"/>
                    <param name="srcBitMapWidth" type="int"/>
                    <param name="srcBitMapHeight" type="int"/>
                </params>
                <declaration name="intSrcWidth" type="int" line="606"/>
                <declaration name="intSrcHeight" type="int" line="607"/>
                <declaration name="psBytesPerRow" type="int" line="609"/>
                <scope line="610"/>
                <declaration name="index" type="int" line="616"/>
                <declaration name="rgbData" type="byte[]" line="617"/>
                <scope line="618">
                    <scope line="620">
                        <declaration name="encodedData" type="byte[]" line="623"/>
                        <declaration name="asciiData" type="byte[]" line="624"/>
                    </scope>
                </scope>
                <scope line="629"/>
            </method>
            <javadoc line="633">
                Prints the contents of the array of ints, &apos;data&apos;
                  to the current page. The band is placed at the
                  location (x, y) in device coordinates on the
                  page. The width and height of the band is
                  specified by the caller. Currently the data
                  is 24 bits per pixel in BGR format.                
            </javadoc>
            <method name="printBand" type="void" line="641">
                <params>
                    <param name="bgrData" type="byte[]"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="psBytesPerRow" type="int" line="643"/>
                <scope line="644"/>
                <declaration name="index" type="int" line="650"/>
                <declaration name="rgbData" type="byte[]" line="651"/>
                <scope line="652">
                    <scope line="653">
                        <declaration name="encodedData" type="byte[]" line="655"/>
                        <declaration name="asciiData" type="byte[]" line="656"/>
                    </scope>
                </scope>
                <scope line="661"/>
            </method>
            <javadoc line="666">
                Examine the metrics captured by the
                  &lt;code&gt;PeekGraphics&lt;/code&gt; instance and
                  if capable of directly converting this
                  print job to the printer&apos;s control language
                  or the native OS&apos;s graphics primitives, then
                  return a &lt;code&gt;PSPathGraphics&lt;/code&gt; to perform
                  that conversion. If there is not an object
                  capable of the conversion then return
                  &lt;code&gt;null&lt;/code&gt;. Returning &lt;code&gt;null&lt;/code&gt;
                  causes the print job to be rasterized.                
            </javadoc>
            <method name="createPathGraphics" type="Graphics2D" line="678">
                <params>
                    <param name="peekGraphics" type="PeekGraphics"/>
                    <param name="printerJob" type="PrinterJob"/>
                    <param name="painter" type="Printable"/>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="pageIndex" type="int"/>
                </params>
                <declaration name="pathGraphics" type="PSPathGraphics" line="679"/>
                <declaration name="metrics" type="PeekMetrics" line="680"/>
                <scope line="681"/>
                <scope line="684">
                    <declaration name="bufferedImage" type="BufferedImage" line="685"/>
                    <declaration name="bufferedGraphics" type="Graphics2D" line="686"/>
                    <declaration name="canRedraw" type="boolean" line="687"/>
                </scope>
            </method>
            <javadoc line="692">
                Intersect the gstate&apos;s current path with the
                  current clip and make the result the new clip.                
            </javadoc>
            <method name="selectClipPath" type="void" line="696"/>
            <method name="setClip" type="void" line="699">
                <params>
                    <param name="clip" type="Shape"/>
                </params>
            </method>
            <method name="setTransform" type="void" line="702">
                <params>
                    <param name="transform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="705">
                Set the current PostScript font.
                  Taken from outFont in PSPrintStream.                
            </javadoc>
            <method name="setFont" type="boolean" line="709">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <javadoc line="713">
                Given an array of CharsetStrings that make up a run
                  of text, this routine converts each CharsetString to
                  an index into our PostScript font list. If one or more
                  CharsetStrings can not be represented by a PostScript
                  font, then this routine will return a null array.                
            </javadoc>
            <method name="getPSFontIndexArray" type="int[]" line="720">
                <params>
                    <param name="font" type="Font"/>
                    <param name="charSet" type="CharsetString[]"/>
                </params>
                <declaration name="psFont" type="int[]" line="721"/>
                <scope line="722"/>
                <scope line="725">
                    <declaration name="cs" type="CharsetString" line="726"/>
                    <declaration name="fontCS" type="CharsetEncoder" line="727"/>
                    <declaration name="charsetName" type="String" line="728"/>
                    <scope line="729"/>
                    <scope line="732"/>
                    <scope line="735"/>
                    <declaration name="styleMask" type="int" line="738"/>
                    <declaration name="style" type="String" line="739"/>
                    <declaration name="fontName" type="String" line="740"/>
                    <declaration name="name" type="String" line="742"/>
                    <declaration name="psName" type="String" line="743"/>
                    <scope line="744">
                        <scope line="745"/>
                        <scope line="748"/>
                    </scope>
                    <scope line="752"/>
                </scope>
            </method>
            <method name="escapeParens" type="String" line="758">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="759"/>
                <scope line="762">
                    <declaration name="count" type="int" line="763"/>
                    <declaration name="pos" type="int" line="764"/>
                    <scope line="765"/>
                    <scope line="770"/>
                    <declaration name="inArr" type="char[]" line="774"/>
                    <declaration name="outArr" type="char[]" line="775"/>
                    <scope line="777">
                        <scope line="778"/>
                    </scope>
                </scope>
            </method>
            <method name="platformFontCount" type="int" line="786">
                <params>
                    <param name="font" type="Font"/>
                    <param name="str" type="String"/>
                </params>
                <scope line="787"/>
                <declaration name="acs" type="CharsetString[]" line="790"/>
                <scope line="791"/>
                <declaration name="psFonts" type="int[]" line="794"/>
            </method>
            <method name="textOut" type="boolean" line="797">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="mLastFont" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="width" type="float"/>
                </params>
                <declaration name="didText" type="boolean" line="798"/>
                <scope line="799"/>
                <scope line="802">
                    <scope line="805"/>
                    <declaration name="acs" type="CharsetString[]" line="808"/>
                    <scope line="809"/>
                    <declaration name="psFonts" type="int[]" line="812"/>
                    <scope line="813">
                        <scope line="814">
                            <declaration name="cs" type="CharsetString" line="815"/>
                            <declaration name="fontCS" type="CharsetEncoder" line="816"/>
                            <declaration name="nativeStr" type="StringBuffer" line="817"/>
                            <declaration name="strSeg" type="byte[]" line="818"/>
                            <declaration name="len" type="int" line="819"/>
                            <scope line="820">
                                <declaration name="bb" type="ByteBuffer" line="821"/>
                            </scope>
                            <scope line="826"/>
                            <scope line="829"/>
                            <declaration name="desiredWidth" type="float" line="832"/>
                            <scope line="833"/>
                            <scope line="836">
                                <declaration name="r2d" type="Rectangle2D" line="837"/>
                            </scope>
                            <scope line="840"/>
                            <scope line="844">
                                <declaration name="b" type="byte" line="845"/>
                                <declaration name="hexS" type="String" line="846"/>
                                <declaration name="length" type="int" line="847"/>
                                <scope line="848"/>
                                <scope line="851"/>
                                <scope line="854"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="865"/>
                </scope>
            </method>
            <javadoc line="871">
                Set the current path rule to be either
                  &lt;code&gt;FILL_EVEN_ODD&lt;/code&gt; (using the
                  even-odd file rule) or &lt;code&gt;FILL_WINDING&lt;/code&gt;
                  (using the non-zero winding rule.)                
            </javadoc>
            <method name="setFillMode" type="void" line="877">
                <params>
                    <param name="fillRule" type="int"/>
                </params>
            </method>
            <javadoc line="891">
                Set the printer&apos;s current color to be that
                  defined by &lt;code&gt;color&lt;/code&gt;                
            </javadoc>
            <method name="setColor" type="void" line="895">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="898">
                Fill the current path using the current fill mode
                  and color.                
            </javadoc>
            <method name="fillPath" type="void" line="902"/>
            <javadoc line="905">
                Called to mark the start of a new path.                
            </javadoc>
            <method name="beginPath" type="void" line="908"/>
            <javadoc line="914">
                Close the current subpath by appending a straight
                  line from the current point to the subpath&apos;s
                  starting point.                
            </javadoc>
            <method name="closeSubpath" type="void" line="919"/>
            <javadoc line="924">
                Generate PostScript to move the current pen
                  position to &lt;code&gt;(x, y)&lt;/code&gt;.                
            </javadoc>
            <method name="moveTo" type="void" line="928">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="935">
                Generate PostScript to draw a line from the
                  current pen position to &lt;code&gt;(x, y)&lt;/code&gt;.                
            </javadoc>
            <method name="lineTo" type="void" line="939">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="944">
                Add to the current path a bezier curve formed
                  by the current pen position and the method parameters
                  which are two control points and an ending
                  point.                
            </javadoc>
            <method name="bezierTo" type="void" line="950">
                <params>
                    <param name="control1x" type="float"/>
                    <param name="control1y" type="float"/>
                    <param name="control2x" type="float"/>
                    <param name="control2y" type="float"/>
                    <param name="endX" type="float"/>
                    <param name="endY" type="float"/>
                </params>
            </method>
            <method name="trunc" type="String" line="955">
                <params>
                    <param name="f" type="float"/>
                </params>
                <declaration name="af" type="float" line="956"/>
                <scope line="957"/>
            </method>
            <javadoc line="962">
                Return the x coordinate of the pen in the
                  current path.                
            </javadoc>
            <method name="getPenX" type="float" line="966"/>
            <javadoc line="969">
                Return the y coordinate of the pen in the
                  current path.                
            </javadoc>
            <method name="getPenY" type="float" line="973"/>
            <javadoc line="976">
                Return the x resolution of the coordinates
                  to be rendered.                
            </javadoc>
            <method name="getXRes" type="double" line="980"/>
            <javadoc line="983">
                Return the y resolution of the coordinates
                  to be rendered.                
            </javadoc>
            <method name="getYRes" type="double" line="987"/>
            <javadoc line="990">
                For PostScript the origin is in the upper-left of the
                  paper not at the imageable area corner.                
            </javadoc>
            <method name="getPhysicalPrintableX" type="double" line="994">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <javadoc line="997">
                For PostScript the origin is in the upper-left of the
                  paper not at the imageable area corner.                
            </javadoc>
            <method name="getPhysicalPrintableY" type="double" line="1001">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPrintableWidth" type="double" line="1004">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPrintableHeight" type="double" line="1007">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPageWidth" type="double" line="1010">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <method name="getPhysicalPageHeight" type="double" line="1013">
                <params>
                    <param name="p" type="Paper"/>
                </params>
            </method>
            <javadoc line="1016">
                Returns how many times each page in the book
                  should be consecutively printed by PrintJob.
                  If the printer makes copies itself then this
                  method should return 1.                
            </javadoc>
            <method name="getNoncollatedCopies" type="int" line="1022"/>
            <method name="getCollatedCopies" type="int" line="1025"/>
            <method name="printExecCmd" type="String[]" line="1028">
                <params>
                    <param name="printer" type="String"/>
                    <param name="options" type="String"/>
                    <param name="noJobSheet" type="boolean"/>
                    <param name="banner" type="String"/>
                    <param name="copies" type="int"/>
                    <param name="spoolFile" type="String"/>
                </params>
                <declaration name="PRINTER" type="int" line="1029"/>
                <declaration name="OPTIONS" type="int" line="1030"/>
                <declaration name="BANNER" type="int" line="1031"/>
                <declaration name="COPIES" type="int" line="1032"/>
                <declaration name="NOSHEET" type="int" line="1033"/>
                <declaration name="pFlags" type="int" line="1034"/>
                <declaration name="execCmd" type="String" line="1035"/>
                <declaration name="ncomps" type="int" line="1036"/>
                <declaration name="n" type="int" line="1037"/>
                <scope line="1038"/>
                <scope line="1042"/>
                <scope line="1046"/>
                <scope line="1050"/>
                <scope line="1054"/>
                <scope line="1058">
                    <scope line="1061"/>
                    <scope line="1064"/>
                    <scope line="1067"/>
                    <scope line="1070"/>
                    <scope line="1073"/>
                </scope>
                <scope line="1077">
                    <scope line="1082"/>
                    <scope line="1085"/>
                    <scope line="1088"/>
                    <scope line="1091"/>
                    <scope line="1094"/>
                </scope>
            </method>
            <method name="swapBGRtoRGB" type="int" line="1101">
                <params>
                    <param name="image" type="byte[]"/>
                    <param name="index" type="int"/>
                    <param name="dest" type="byte[]"/>
                </params>
                <declaration name="destIndex" type="int" line="1102"/>
                <scope line="1103"/>
            </method>
            <method name="makeCharsetName" type="String" line="1111">
                <params>
                    <param name="name" type="String"/>
                    <param name="chs" type="char[]"/>
                </params>
                <scope line="1112"/>
                <scope line="1115">
                    <scope line="1116">
                        <scope line="1117"/>
                    </scope>
                </scope>
                <scope line="1123">
                    <scope line="1124">
                        <scope line="1125"/>
                    </scope>
                </scope>
                <scope line="1131"/>
            </method>
            <method name="prepDrawing" type="void" line="1135">
                <scope line="1136"/>
                <scope line="1140"/>
            </method>
            <javadoc line="1146">
                Return the GState that is currently on top
                  of the GState stack. There should always be
                  a GState on top of the stack. If there isn&apos;t
                  then this method will throw an IndexOutOfBounds
                  exception.                
            </javadoc>
            <method name="getGState" type="GState" line="1153">
                <declaration name="count" type="int" line="1154"/>
            </method>
            <javadoc line="1157">
                Emit a PostScript gsave command and add a
                  new GState on to our stack which represents
                  the printer&apos;s gstate stack.                
            </javadoc>
            <method name="gsave" type="void" line="1162">
                <declaration name="oldGState" type="GState" line="1163"/>
            </method>
            <javadoc line="1167">
                Emit a PostScript grestore command and remove
                  a GState from our stack which represents the
                  printer&apos;s gstate stack.                
            </javadoc>
            <method name="grestore" type="void" line="1172">
                <declaration name="count" type="int" line="1173"/>
            </method>
            <javadoc line="1177">
                Return true if the current GState is the
                  outermost GState and therefore should not
                  be restored.                
            </javadoc>
            <method name="isOuterGState" type="boolean" line="1182"/>
            <class name="GState" line="1185">
                <javadoc line="1185">
                    A stack of GStates is maintained to model the printer&apos;s
                      gstate stack. Each GState holds information about
                      the current graphics attributes.                    
                </javadoc>
                <declaration name="mColor" type="Color" line="1191"/>
                <declaration name="mClip" type="Shape" line="1192"/>
                <declaration name="mFont" type="Font" line="1193"/>
                <declaration name="mTransform" type="AffineTransform" line="1194"/>
                <method name="GState" type="constructor" line="1195"/>
                <method name="GState" type="constructor" line="1201">
                    <params>
                        <param name="copyGState" type="GState"/>
                    </params>
                </method>
                <method name="canSetClip" type="boolean" line="1207">
                    <params>
                        <param name="clip" type="Shape"/>
                    </params>
                </method>
                <method name="emitPSClip" type="void" line="1210">
                    <params>
                        <param name="clip" type="Shape"/>
                    </params>
                    <scope line="1211">
                        <declaration name="saveFillOp" type="String" line="1212"/>
                        <declaration name="saveClipOp" type="String" line="1213"/>
                    </scope>
                </method>
                <method name="emitTransform" type="void" line="1221">
                    <params>
                        <param name="transform" type="AffineTransform"/>
                    </params>
                    <scope line="1222">
                        <declaration name="matrix" type="double[]" line="1223"/>
                    </scope>
                </method>
                <method name="emitPSColor" type="void" line="1229">
                    <params>
                        <param name="color" type="Color"/>
                    </params>
                    <scope line="1230">
                        <declaration name="rgb" type="float[]" line="1231"/>
                        <scope line="1232"/>
                        <scope line="1235"/>
                    </scope>
                </method>
                <method name="emitPSFont" type="void" line="1241">
                    <params>
                        <param name="psFontIndex" type="int"/>
                        <param name="fontSize" type="float"/>
                    </params>
                </method>
            </class>
            <javadoc line="1245">
                Given a Java2D &lt;code&gt;PathIterator&lt;/code&gt; instance,
                  this method translates that into a PostScript path..                
            </javadoc>
            <method name="convertToPSPath" type="void" line="1249">
                <params>
                    <param name="pathIter" type="PathIterator"/>
                </params>
                <declaration name="segment" type="float[]" line="1250"/>
                <declaration name="segmentType" type="int" line="1251"/>
                <declaration name="fillRule" type="int" line="1252"/>
                <scope line="1253"/>
                <scope line="1256"/>
                <scope line="1261">
                    <declaration name="lastX" type="float" line="1271"/>
                    <declaration name="lastY" type="float" line="1272"/>
                    <declaration name="c1x" type="float" line="1273"/>
                    <declaration name="c1y" type="float" line="1274"/>
                    <declaration name="c2x" type="float" line="1275"/>
                    <declaration name="c2y" type="float" line="1276"/>
                </scope>
            </method>
            <method name="deviceFill" type="void" line="1289">
                <params>
                    <param name="pathIter" type="PathIterator"/>
                    <param name="color" type="Color"/>
                    <param name="tx" type="AffineTransform"/>
                    <param name="clip" type="Shape"/>
                </params>
            </method>
            <method name="rlEncode" type="byte[]" line="1299">
                <params>
                    <param name="inArr" type="byte[]"/>
                </params>
                <declaration name="inIndex" type="int" line="1300"/>
                <declaration name="outIndex" type="int" line="1301"/>
                <declaration name="startIndex" type="int" line="1302"/>
                <declaration name="runLen" type="int" line="1303"/>
                <declaration name="outArr" type="byte[]" line="1304"/>
                <scope line="1305">
                    <scope line="1306"/>
                    <scope line="1310"/>
                    <scope line="1314"/>
                    <scope line="1320"/>
                    <scope line="1325"/>
                </scope>
                <declaration name="encodedData" type="byte[]" line="1331"/>
            </method>
            <method name="ascii85Encode" type="byte[]" line="1335">
                <params>
                    <param name="inArr" type="byte[]"/>
                </params>
                <declaration name="outArr" type="byte[]" line="1336"/>
                <declaration name="p1" type="long" line="1337"/>
                <declaration name="p2" type="long" line="1338"/>
                <declaration name="p3" type="long" line="1339"/>
                <declaration name="p4" type="long" line="1340"/>
                <declaration name="pling" type="byte" line="1341"/>
                <declaration name="i" type="int" line="1342"/>
                <declaration name="olen" type="int" line="1343"/>
                <declaration name="val" type="long" line="1344"/>
                <scope line="1345">
                    <scope line="1347"/>
                    <scope line="1350"/>
                </scope>
                <scope line="1363">
                    <declaration name="n" type="int" line="1364"/>
                    <scope line="1366"/>
                    <declaration name="append" type="int" line="1369"/>
                    <scope line="1370"/>
                    <declaration name="c" type="byte[]" line="1373"/>
                    <scope line="1384"/>
                </scope>
                <declaration name="retArr" type="byte[]" line="1390"/>
            </method>
            <class name="PluginPrinter" line="1394">
                <implements interface="Printable"/>
                <javadoc line="1394">
                    PluginPrinter generates EPSF wrapped with a header and trailer
                      comment. This conforms to the new requirements of Mozilla 1.7
                      and FireFox 1.5 and later. Earlier versions of these browsers
                      did not support plugin printing in the general sense (not just Java).
                      A notable limitation of these browsers is that they handle plugins
                      which would span page boundaries by scaling plugin content to fit on a
                      single page. This means white space is left at the bottom of the
                      previous page and its impossible to print these cases as they appear on
                      the web page. This is contrast to how the same browsers behave on
                      Windows where it renders as on-screen.
                      Cases where the content fits on a single page do work fine, and they
                      are the majority of cases.
                      The scaling that the browser specifies to make the plugin content fit
                      when it is larger than a single page can hold is non-uniform. It
                      scales the axis in which the content is too large just enough to
                      ensure it fits. For content which is extremely long this could lead
                      to noticeable distortion. However that is probably rare enough that
                      its not worth compensating for that here, but we can revisit that if
                      needed, and compensate by making the scale for the other axis the
                      same.                    
                </javadoc>
                <declaration name="epsPrinter" type="EPSPrinter" line="1417"/>
                <declaration name="applet" type="Component" line="1418"/>
                <declaration name="stream" type="PrintStream" line="1419"/>
                <declaration name="epsTitle" type="String" line="1420"/>
                <declaration name="bx" type="int" line="1421"/>
                <declaration name="width" type="int" line="1422"/>
                <javadoc line="1423">
                    This is called from the Java Plug-in to print an Applet&apos;s
                      contents as EPS to a postscript stream provided by the browser.                    
                    <param>
                        applet the applet component to print.                        
                    </param>
                    <param>
                        stream the print stream provided by the plug-in                        
                    </param>
                    <param>
                        x the x location of the applet panel in the browser window                        
                    </param>
                    <param>
                        y the y location of the applet panel in the browser window                        
                    </param>
                    <param>
                        w the width of the applet panel in the browser window                        
                    </param>
                    <param>
                        h the width of the applet panel in the browser window                        
                    </param>
                </javadoc>
                <method name="PluginPrinter" type="constructor" line="1433">
                    <params>
                        <param name="applet" type="Component"/>
                        <param name="stream" type="PrintStream"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="printPluginPSHeader" type="void" line="1445"/>
                <method name="printPluginApplet" type="void" line="1448">
                    <scope line="1449"/>
                    <scope line="1452"/>
                </method>
                <method name="printPluginPSTrailer" type="void" line="1455"/>
                <method name="printAll" type="void" line="1459"/>
                <method name="print" type="int" line="1464">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="pf" type="PageFormat"/>
                        <param name="pgIndex" type="int"/>
                    </params>
                    <scope line="1465"/>
                    <scope line="1468"/>
                </method>
            </class>
            <class name="EPSPrinter" line="1474">
                <implements interface="Pageable"/>
                <declaration name="pf" type="PageFormat" line="1475"/>
                <declaration name="job" type="PSPrinterJob" line="1476"/>
                <declaration name="llx" type="int" line="1477"/>
                <declaration name="printable" type="Printable" line="1478"/>
                <declaration name="stream" type="PrintStream" line="1479"/>
                <declaration name="epsTitle" type="String" line="1480"/>
                <method name="EPSPrinter" type="constructor" line="1481">
                    <params>
                        <param name="printable" type="Printable"/>
                        <param name="title" type="String"/>
                        <param name="stream" type="PrintStream"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="wid" type="int"/>
                        <param name="hgt" type="int"/>
                    </params>
                    <declaration name="p" type="Paper" line="1489"/>
                </method>
                <method name="print" type="void" line="1495">
                    <scope line="1509"/>
                    <scope line="1512">
                        <scope line="1513"/>
                        <scope line="1516"/>
                    </scope>
                    <scope line="1520"/>
                </method>
                <method name="getNumberOfPages" type="int" line="1527"/>
                <method name="getPageFormat" type="PageFormat" line="1530">
                    <params>
                        <param name="pgIndex" type="int"/>
                    </params>
                    <scope line="1531"/>
                    <scope line="1534"/>
                </method>
                <method name="getPrintable" type="Printable" line="1538">
                    <params>
                        <param name="pgIndex" type="int"/>
                    </params>
                    <scope line="1539"/>
                    <scope line="1542"/>
                </method>
            </class>
        </class>
    </source>