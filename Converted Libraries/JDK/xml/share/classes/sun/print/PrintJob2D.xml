<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.PrintJob"/>
        <import package="java.awt.JobAttributes"/>
        <import package="java.awt.JobAttributes"/>
        <import package="java.awt.PageAttributes"/>
        <import package="java.awt.PageAttributes"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Paper"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Properties"/>
        <import package="javax.print.PrintService"/>
        <import package="javax.print.attribute.HashPrintRequestAttributeSet"/>
        <import package="javax.print.attribute.PrintRequestAttributeSet"/>
        <import package="javax.print.attribute.ResolutionSyntax"/>
        <import package="javax.print.attribute.Size2DSyntax"/>
        <import package="javax.print.attribute.standard.Chromaticity"/>
        <import package="javax.print.attribute.standard.Copies"/>
        <import package="javax.print.attribute.standard.Destination"/>
        <import package="javax.print.attribute.standard.DialogTypeSelection"/>
        <import package="javax.print.attribute.standard.JobName"/>
        <import package="javax.print.attribute.standard.MediaSize"/>
        <import package="javax.print.attribute.standard.PrintQuality"/>
        <import package="javax.print.attribute.standard.PrinterResolution"/>
        <import package="javax.print.attribute.standard.SheetCollate"/>
        <import package="javax.print.attribute.standard.Sides"/>
        <import package="javax.print.attribute.standard.Media"/>
        <import package="javax.print.attribute.standard.OrientationRequested"/>
        <import package="javax.print.attribute.standard.MediaSizeName"/>
        <import package="javax.print.attribute.standard.PageRanges"/>
        <import package="sun.print.SunPageSelection"/>
        <import package="sun.print.SunMinMaxPage"/>
        <class name="PrintJob2D" line="77">
            <extends class="PrintJob"/>
            <comment line="118">
                This array maps the above array to the objects used by the
                 javax.print APIs                
            </comment>
            <comment line="156">
                widths and lengths in PostScript points (1/72 in.)                
            </comment>
            <comment line="215">
                Displays the native or cross-platform dialog and allows the
                 user to update job &amp; page attributes                
            </comment>
            <comment line="264">
                The following Strings are maintained for backward-compatibility with
                 Properties based print control.                
            </comment>
            <comment line="290">
                REMIND: needs implementation                
            </comment>
            <comment line="614">
                From JobAttributes we will copy job name and duplex printing
                 and destination.
                 The majority of the rest of the attributes are reflected
                 attributes.
                
                 From PageAttributes we copy color, media size, orientation,
                 origin type, resolution and print quality.
                 We use the media, orientation in creating the page format, and
                 the origin type to set its imageable area.
                
                 REMIND: Interpretation of resolution, additional media sizes.                
            </comment>
            <implements interface="Printable"/>
            <implements interface="Runnable"/>
            <javadoc line="77">
                A class which initiates and executes a print job using
                  the underlying PrinterJob graphics conversions.                
                <see>
                    Toolkit#getPrintJob                    
                </see>
            </javadoc>
            <declaration name="SIZES" type="MediaType" line="86"/>
            <declaration name="JAVAXSIZES" type="MediaSizeName" line="120"/>
            <declaration name="WIDTHS" type="int" line="156"/>
            <declaration name="LENGTHS" type="int" line="181"/>
            <declaration name="frame" type="Frame" line="208"/>
            <declaration name="docTitle" type="String" line="209"/>
            <declaration name="jobAttributes" type="JobAttributes" line="210"/>
            <declaration name="pageAttributes" type="PageAttributes" line="211"/>
            <declaration name="attributes" type="PrintRequestAttributeSet" line="212"/>
            <declaration name="printerJob" type="PrinterJob" line="219"/>
            <javadoc line="219">
                The PrinterJob being uses to implement the PrintJob.                
            </javadoc>
            <declaration name="pageFormat" type="PageFormat" line="224"/>
            <javadoc line="224">
                The size of the page being used for the PrintJob.                
            </javadoc>
            <declaration name="graphicsToBeDrawn" type="MessageQ" line="229"/>
            <javadoc line="229">
                The PrinterJob and the application run on different
                  threads and communicate through a pair of message
                  queues. This queue is the list of Graphics that
                  the PrinterJob has requested rendering for, but
                  for which the application has not yet called getGraphics().
                  In practice the length of this message queue is always
                  0 or 1.                
            </javadoc>
            <declaration name="graphicsDrawn" type="MessageQ" line="240"/>
            <javadoc line="240">
                Used to communicate between the application&apos;s thread
                  and the PrinterJob&apos;s thread this message queue holds
                  the list of Graphics into which the application has
                  finished drawing, but that have not yet been returned
                  to the PrinterJob thread. Again, in practice, the
                  length of this message queue is always 0 or 1.                
            </javadoc>
            <declaration name="currentGraphics" type="Graphics2D" line="250"/>
            <javadoc line="250">
                The last Graphics returned to the application via
                  getGraphics. This is the Graphics into which the
                  application is currently drawing.                
            </javadoc>
            <declaration name="pageIndex" type="int" line="257"/>
            <javadoc line="257">
                The zero based index of the page currently being rendered
                  by the application.                
            </javadoc>
            <declaration name="DEST_PROP" type="String" line="265"/>
            <declaration name="PRINTER" type="String" line="266"/>
            <declaration name="FILE" type="String" line="267"/>
            <declaration name="PRINTER_PROP" type="String" line="269"/>
            <declaration name="FILENAME_PROP" type="String" line="271"/>
            <declaration name="NUMCOPIES_PROP" type="String" line="273"/>
            <declaration name="OPTIONS_PROP" type="String" line="275"/>
            <declaration name="ORIENT_PROP" type="String" line="277"/>
            <declaration name="PORTRAIT" type="String" line="278"/>
            <declaration name="LANDSCAPE" type="String" line="279"/>
            <declaration name="PAPERSIZE_PROP" type="String" line="281"/>
            <declaration name="LETTER" type="String" line="282"/>
            <declaration name="LEGAL" type="String" line="283"/>
            <declaration name="EXECUTIVE" type="String" line="284"/>
            <declaration name="A4" type="String" line="285"/>
            <declaration name="props" type="Properties" line="287"/>
            <declaration name="options" type="String" line="289"/>
            <declaration name="printerJobThread" type="Thread" line="291"/>
            <javadoc line="291">
                The thread on which PrinterJob is running.
                  This is different than the applications thread.                
            </javadoc>
            <method name="PrintJob2D" type="constructor" line="298">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="props" type="Properties"/>
                </params>
            </method>
            <method name="PrintJob2D" type="constructor" line="309">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="jobAttributes" type="JobAttributes"/>
                    <param name="pageAttributes" type="PageAttributes"/>
                </params>
            </method>
            <method name="initPrintJob2D" type="void" line="315">
                <params>
                    <param name="frame" type="Frame"/>
                    <param name="doctitle" type="String"/>
                    <param name="jobAttributes" type="JobAttributes"/>
                    <param name="pageAttributes" type="PageAttributes"/>
                </params>
                <comment line="336">
                    Currently, we always reduce page ranges to xxx or xxx-xxx                    
                </comment>
                <comment line="347">
                    Verify that the cross feed and feed resolutions are the same                    
                </comment>
                <comment line="354">
                    Verify that the app has access to the file system                    
                </comment>
                <comment line="359">
                    check if given filename is valid                    
                </comment>
                <comment line="366">
                    check if this is a new file and if filename chars are valid
                     createNewFile returns false if file exists                    
                </comment>
                <comment line="375">
                    There is already file read/write access so at this point
                     only delete access is denied.  Just ignore it because in
                     most cases the file created in createNewFile gets overwritten
                     anyway.                    
                </comment>
                <declaration name="security" type="SecurityManager" line="317"/>
                <scope line="318"/>
                <scope line="324"/>
                <declaration name="pageRanges" type="int[][]" line="336"/>
                <declaration name="first" type="int" line="337"/>
                <declaration name="last" type="int" line="338"/>
                <declaration name="res" type="int[]" line="347"/>
                <scope line="348"/>
                <declaration name="dest" type="DestinationType" line="354"/>
                <scope line="355">
                    <declaration name="destStr" type="String" line="359"/>
                    <scope line="361">
                        <declaration name="f" type="File" line="363"/>
                        <scope line="364">
                            <scope line="367"/>
                        </scope>
                        <scope line="370"/>
                        <scope line="373"/>
                        <declaration name="pFile" type="File" line="380"/>
                        <scope line="384"/>
                    </scope>
                </scope>
            </method>
            <method name="printDialog" type="boolean" line="392">
                <comment line="427">
                    (d == DialogType.COMMON)                    
                </comment>
                <comment line="432">
                    Windows gives an option to install a service
                     when it detects there are no printers so
                     we make sure we get the updated print service.                    
                </comment>
                <comment line="467">
                    AWT uses 1/4&quot; borders by default                    
                </comment>
                <declaration name="proceedWithPrint" type="boolean" line="394"/>
                <scope line="397"/>
                <declaration name="d" type="DialogType" line="400"/>
                <declaration name="pServ" type="PrintService" line="401"/>
                <scope line="402"/>
                <declaration name="select" type="DefaultSelectionType" line="407"/>
                <scope line="409"/>
                <scope line="411"/>
                <scope line="413"/>
                <scope line="417"/>
                <scope line="421"/>
                <scope line="423">
                    <scope line="424"/>
                    <scope line="426"/>
                    <scope line="429">
                        <scope line="430">
                            <scope line="435"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="444">
                    <declaration name="jname" type="JobName" line="446"/>
                    <scope line="447"/>
                    <declaration name="media" type="Media" line="453"/>
                    <declaration name="mediaSize" type="MediaSize" line="454"/>
                    <scope line="455"/>
                    <declaration name="p" type="Paper" line="459"/>
                    <scope line="460"/>
                    <scope line="465"/>
                    <scope line="470"/>
                    <declaration name="orient" type="OrientationRequested" line="476"/>
                    <scope line="479"/>
                    <scope line="481"/>
                    <scope line="483"/>
                </scope>
            </method>
            <method name="updateAttributes" type="void" line="494">
                <comment line="545">
                    PageAttributes                    
                </comment>
                <comment line="570">
                    NORMAL                    
                </comment>
                <declaration name="c" type="Copies" line="495"/>
                <declaration name="sel" type="SunPageSelection" line="498"/>
                <scope line="500"/>
                <scope line="502"/>
                <scope line="504"/>
                <declaration name="dest" type="Destination" line="508"/>
                <scope line="509"/>
                <scope line="512"/>
                <declaration name="serv" type="PrintService" line="516"/>
                <scope line="517"/>
                <declaration name="range" type="PageRanges" line="521"/>
                <declaration name="members" type="int[][]" line="522"/>
                <declaration name="collation" type="SheetCollate" line="525"/>
                <scope line="527"/>
                <scope line="530"/>
                <declaration name="sides" type="Sides" line="535"/>
                <scope line="536"/>
                <scope line="538"/>
                <scope line="540"/>
                <declaration name="color" type="Chromaticity" line="546"/>
                <scope line="548"/>
                <scope line="550"/>
                <declaration name="orient" type="OrientationRequested" line="554"/>
                <scope line="556"/>
                <scope line="559"/>
                <declaration name="qual" type="PrintQuality" line="564"/>
                <scope line="565"/>
                <scope line="567"/>
                <scope line="569"/>
                <declaration name="msn" type="Media" line="573"/>
                <scope line="574">
                    <declaration name="mType" type="MediaType" line="575"/>
                    <scope line="577"/>
                </scope>
            </method>
            <method name="debugPrintAttributes" type="void" line="584">
                <params>
                    <param name="ja" type="boolean"/>
                    <param name="pa" type="boolean"/>
                </params>
                <scope line="585"/>
                <scope line="601"/>
            </method>
            <method name="copyAttributes" type="void" line="625">
                <params>
                    <param name="printServ" type="PrintService"/>
                </params>
                <comment line="636">
                    Search for the given printerName in the list of PrintServices                    
                </comment>
                <comment line="668">
                    defaultDest should not be null.  The following code
                     is only added to safeguard against a possible
                     buggy implementation of a PrintService having a
                     null default Destination.                    
                </comment>
                <comment line="677">
                    &apos;\\&apos; file separator is illegal character in opaque
                     part and causes URISyntaxException, so we replace
                     it with &apos;/&apos;                    
                </comment>
                <declaration name="pServ" type="PrintService" line="629"/>
                <declaration name="printerName" type="String" line="631"/>
                <scope line="633">
                    <declaration name="services" type="PrintService[]" line="636"/>
                    <scope line="637">
                        <scope line="638">
                            <scope line="639"/>
                        </scope>
                    </scope>
                    <scope line="645"/>
                </scope>
                <declaration name="dest" type="DestinationType" line="649"/>
                <scope line="651">
                    <declaration name="fileName" type="String" line="653"/>
                    <declaration name="defaultDest" type="Destination" line="655"/>
                    <scope line="657"/>
                    <scope line="659">
                        <declaration name="uri" type="URI" line="660"/>
                        <scope line="661">
                            <scope line="662">
                                <scope line="663"/>
                            </scope>
                            <scope line="666"/>
                        </scope>
                        <scope line="674">
                            <scope line="675"/>
                            <scope line="681"/>
                        </scope>
                        <scope line="684"/>
                    </scope>
                </scope>
                <declaration name="sType" type="SidesType" line="691"/>
                <scope line="692"/>
                <scope line="694"/>
                <scope line="696"/>
                <declaration name="hType" type="MultipleDocumentHandlingType" line="700"/>
                <scope line="703"/>
                <scope line="705"/>
                <scope line="714"/>
                <scope line="716"/>
                <scope line="722"/>
                <scope line="725"/>
                <declaration name="media" type="MediaType" line="730"/>
                <declaration name="msn" type="MediaSizeName" line="731"/>
                <scope line="732"/>
                <declaration name="qType" type="PrintQualityType" line="736"/>
                <scope line="738"/>
                <scope line="740"/>
                <scope line="742"/>
            </method>
            <javadoc line="747">
                Gets a Graphics object that will draw to the next page.
                  The page is sent to the printer when the graphics
                  object is disposed.  This graphics object will also implement
                  the PrintGraphics interface.                
                <see>
                    PrintGraphics                    
                </see>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="754">
                <comment line="762">
                    Thread should not be created after end has been called.
                     One way to detect this is if any of the graphics queue
                      has been closed.                    
                </comment>
                <comment line="767">
                    We start a thread on which the PrinterJob will run.
                     The PrinterJob will ask for pages on that thread
                     and will use a message queue to fulfill the application&apos;s
                     requests for a Graphics on the application&apos;s
                     thread.                    
                </comment>
                <comment line="780">
                    If the application has already been handed back
                     a graphics then we need to put that graphics into
                     the drawn queue so that the PrinterJob thread can
                     return to the print system.                    
                </comment>
                <comment line="790">
                    We&apos;ll block here until a new graphics becomes
                     available.                    
                </comment>
                <comment line="805">
                    In the PrintJob API, the origin is at the upper-
                     left of the imageable area when using the new &quot;printable&quot;
                     origin attribute, otherwise its the physical origin (for
                     backwards compatibility. We emulate this by createing
                     a PageFormat which matches and then performing the
                     translate to the origin. This is a no-op if physical
                     origin is specified.                    
                </comment>
                <comment line="816">
                                        
                </comment>
                <comment line="820">
                    The caller wants a Graphics instance but we do
                     not want them to make 2D calls. We can&apos;t hand
                     back a Graphics2D. The returned Graphics also
                     needs to implement PrintGraphics, so we wrap
                     the Graphics2D instance. The PrintJob API has
                     the application dispose of the Graphics so
                     we create a copy of the one returned by PrinterJob.                    
                </comment>
                <declaration name="printGraphics" type="Graphics" line="756"/>
                <scope line="758">
                    <scope line="764"/>
                </scope>
                <scope line="784"/>
                <scope line="795"/>
                <scope line="802">
                    <declaration name="awtScale" type="double" line="816"/>
                </scope>
            </method>
            <javadoc line="835">
                Returns the dimensions of the page in pixels.
                  The resolution of the page is chosen so that it
                  is similar to the screen resolution.
                  Except (since 1.3) when the application specifies a resolution.
                  In that case it it scaled accordingly.                
            </javadoc>
            <method name="getPageDimension" type="Dimension" line="842">
                <declaration name="wid" type="double" line="843"/>
                <scope line="845"/>
                <scope line="848"/>
            </method>
            <method name="getPageResolutionInternal" type="double" line="856">
                <comment line="862">
                                        
                </comment>
                <scope line="857">
                    <declaration name="res" type="int[]" line="858"/>
                    <scope line="859"/>
                    <scope line="861"/>
                </scope>
                <scope line="864"/>
            </method>
            <javadoc line="869">
                Returns the resolution of the page in pixels per inch.
                  Note that this doesn&apos;t have to correspond to the physical
                  resolution of the printer.                
            </javadoc>
            <method name="getPageResolution" type="int" line="874"/>
            <javadoc line="878">
                Returns true if the last page will be printed first.                
            </javadoc>
            <method name="lastPageFirst" type="boolean" line="881"/>
            <javadoc line="885">
                Ends the print job and does any necessary cleanup.                
            </javadoc>
            <method name="end" type="void" line="888">
                <comment line="891">
                    Prevent the PrinterJob thread from appending any more
                     graphics to the to-be-drawn queue                    
                </comment>
                <comment line="896">
                    If we have a currentGraphics it was the last one returned to the
                     PrintJob client. Append it to the drawn queue so that print()
                     will return allowing the page to be flushed.
                     This really ought to happen in dispose() but for whatever reason
                     that isn&apos;t how the old PrintJob worked even though its spec
                     said dispose() flushed the page.                    
                </comment>
                <comment line="908">
                    Wait for the PrinterJob.print() thread to terminate, ensuring
                     that RasterPrinterJob has made its end doc call, and resources
                     are released, files closed etc.                    
                </comment>
                <scope line="902"/>
                <scope line="911">
                    <scope line="912"/>
                    <scope line="914"/>
                </scope>
            </method>
            <javadoc line="919">
                Ends this print job once it is no longer referenced.                
                <see>
                    #end                    
                </see>
            </javadoc>
            <method name="finalize" type="void" line="923"/>
            <javadoc line="927">
                Prints the page at the specified index into the specified{@link Graphics} context in the specified
                  format.  A &lt;code&gt;PrinterJob&lt;/code&gt; calls the
                  &lt;code&gt;Printable&lt;/code&gt; interface to request that a page be
                  rendered into the context specified by
                  &lt;code&gt;graphics&lt;/code&gt;.  The format of the page to be drawn is
                  specified by &lt;code&gt;pageFormat&lt;/code&gt;.  The zero based index
                  of the requested page is specified by &lt;code&gt;pageIndex&lt;/code&gt;.
                  If the requested page does not exist then this method returns
                  NO_SUCH_PAGE; otherwise PAGE_EXISTS is returned.
                  The &lt;code&gt;Graphics&lt;/code&gt; class or subclass implements the{@link PrinterGraphics} interface to provide additional
                  information.  If the &lt;code&gt;Printable&lt;/code&gt; object
                  aborts the print job then it throws a {@link PrinterException}.                
                <param>
                    graphics the context into which the page is drawn                    
                </param>
                <param>
                    pageFormat the size and orientation of the page being drawn                    
                </param>
                <param>
                    pageIndex the zero based index of the page to be drawn                    
                </param>
                <return>
                    PAGE_EXISTS if the page is rendered successfully
                      or NO_SUCH_PAGE if <code>pageIndex</code> specifies a
                      non-existent page.                    
                </return>
                <exception>
                    java.awt.print.PrinterExceptionthrown when the print job is terminated.                    
                </exception>
            </javadoc>
            <method name="print" type="int" line="952">
                <params>
                    <param name="graphics" type="Graphics"/>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="pageIndex" type="int"/>
                </params>
                <comment line="957">
                    This method will be called by the PrinterJob on a thread other
                     that the application&apos;s thread. We hold on to the graphics
                     until we can rendevous with the application&apos;s thread and
                     hand over the graphics. The application then does all the
                     drawing. When the application is done drawing we rendevous
                     again with the PrinterJob thread and release the Graphics
                     so that it knows we are done.                    
                </comment>
                <comment line="966">
                    Add the graphics to the message queue of graphics to
                     be rendered. This is really a one slot queue. The
                     application&apos;s thread will come along and remove the
                     graphics from the queue when the app asks for a graphics.                    
                </comment>
                <comment line="973">
                    We now wait for the app&apos;s thread to finish drawing on
                     the Graphics. This thread will sleep until the application
                     release the graphics by placing it in the graphics drawn
                     message queue. If the application signals that it is
                     finished drawing the entire document then we&apos;ll get null
                     returned when we try and pop a finished graphic.                    
                </comment>
                <declaration name="result" type="int" line="954"/>
                <scope line="979"/>
                <scope line="981"/>
            </method>
            <method name="startPrinterJobThread" type="void" line="988"/>
            <method name="run" type="void" line="995">
                <comment line="1001">
                    REMIND: need to store this away and not rethrow it.                    
                </comment>
                <comment line="1004">
                    Close the message queues so that nobody is stuck
                     waiting for one.                    
                </comment>
                <scope line="997"/>
                <scope line="999"/>
            </method>
            <class name="MessageQ" line="1010">
                <declaration name="qid" type="String" line="1012"/>
                <declaration name="queue" type="ArrayList" line="1014"/>
                <method name="MessageQ" type="constructor" line="1016">
                    <params>
                        <param name="id" type="String"/>
                    </params>
                </method>
                <method name="closeWhenEmpty" type="void" line="1020">
                    <comment line="1027">
                        do nothing.                        
                    </comment>
                    <scope line="1022">
                        <scope line="1023"/>
                        <scope line="1025"/>
                    </scope>
                </method>
                <method name="close" type="void" line="1034"/>
                <method name="append" type="boolean" line="1039">
                    <params>
                        <param name="g" type="Graphics2D"/>
                    </params>
                    <declaration name="queued" type="boolean" line="1041"/>
                    <scope line="1043"/>
                </method>
                <method name="pop" type="Graphics2D" line="1052">
                    <comment line="1066">
                        do nothing.                        
                    </comment>
                    <declaration name="g" type="Graphics2D" line="1053"/>
                    <scope line="1055">
                        <scope line="1057"/>
                        <scope line="1061">
                            <scope line="1062"/>
                            <scope line="1064"/>
                        </scope>
                    </scope>
                </method>
                <method name="isClosed" type="boolean" line="1073"/>
            </class>
            <method name="getSize" type="int[]" line="1080">
                <params>
                    <param name="mType" type="MediaType"/>
                </params>
                <declaration name="dim" type="int[]" line="1081"/>
                <scope line="1085">
                    <scope line="1086"/>
                </scope>
            </method>
            <method name="mapMedia" type="MediaSizeName" line="1095">
                <params>
                    <param name="mType" type="MediaType"/>
                </params>
                <comment line="1099">
                    JAVAXSIZES.length and SIZES.length must be equal!
                     Attempt to recover by getting the smaller size.                    
                </comment>
                <comment line="1110">
                                        
                </comment>
                <comment line="1116">
                    add new created MediaSize to our static map
                     so it will be found when we call findMedia                    
                </comment>
                <declaration name="media" type="MediaSizeName" line="1096"/>
                <declaration name="length" type="int" line="1100"/>
                <scope line="1102">
                    <scope line="1103">
                        <scope line="1105"/>
                        <scope line="1108">
                            <declaration name="w" type="float" line="1112"/>
                            <declaration name="h" type="float" line="1113"/>
                            <scope line="1114"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="unMapMedia" type="MediaType" line="1128">
                <params>
                    <param name="mSize" type="MediaSizeName"/>
                </params>
                <comment line="1132">
                    JAVAXSIZES.length and SIZES.length must be equal!
                     Attempt to recover by getting the smaller size.                    
                </comment>
                <declaration name="media" type="MediaType" line="1129"/>
                <declaration name="length" type="int" line="1133"/>
                <scope line="1135">
                    <scope line="1136">
                        <scope line="1137"/>
                    </scope>
                </scope>
            </method>
            <method name="translateInputProps" type="void" line="1146">
                <scope line="1147"/>
                <declaration name="str" type="String" line="1151"/>
                <scope line="1154">
                    <scope line="1155"/>
                    <scope line="1157"/>
                </scope>
                <scope line="1162"/>
                <scope line="1166"/>
                <scope line="1170"/>
                <scope line="1177">
                    <scope line="1178"/>
                    <scope line="1181"/>
                </scope>
                <scope line="1187">
                    <scope line="1188"/>
                    <scope line="1190"/>
                    <scope line="1192"/>
                    <scope line="1194"/>
                </scope>
            </method>
            <method name="translateOutputProps" type="void" line="1200">
                <scope line="1201"/>
                <declaration name="str" type="String" line="1205"/>
                <scope line="1211"/>
                <scope line="1215"/>
                <declaration name="copies" type="int" line="1218"/>
                <scope line="1219"/>
                <scope line="1223"/>
                <declaration name="media" type="MediaType" line="1230"/>
                <scope line="1231"/>
                <scope line="1233"/>
                <scope line="1235"/>
                <scope line="1237"/>
                <scope line="1239"/>
            </method>
            <method name="throwPrintToFile" type="void" line="1245">
                <declaration name="security" type="SecurityManager" line="1246"/>
                <declaration name="printToFilePermission" type="FilePermission" line="1247"/>
                <scope line="1248">
                    <scope line="1249"/>
                </scope>
            </method>
        </class>
    </source>