<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.util.Map"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.RenderingHints.Key"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.BufferedImageOp"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.renderable.RenderContext"/>
        <import package="java.awt.image.renderable.RenderableImage"/>
        <import package="java.awt.print.PrinterGraphics"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <class name="ProxyGraphics2D" line="63">
            <extends class="Graphics2D"/>
            <comment line="112">
                                
            </comment>
            <comment line="1272">
                                
            </comment>
            <implements interface="PrinterGraphics"/>
            <declaration name="mGraphics" type="Graphics2D" line="65"/>
            <javadoc line="65">
                Drawing methods will be forwarded to this object.                
            </javadoc>
            <declaration name="mPrinterJob" type="PrinterJob" line="70"/>
            <javadoc line="70">
                The PrinterJob controlling the current printing.                
            </javadoc>
            <javadoc line="75">
                The new ProxyGraphics2D will forward all graphics
                  calls to &apos;graphics&apos;.                
            </javadoc>
            <method name="ProxyGraphics2D" type="constructor" line="79">
                <params>
                    <param name="graphics" type="Graphics2D"/>
                    <param name="printerJob" type="PrinterJob"/>
                </params>
            </method>
            <javadoc line="84">
                Return the Graphics2D object that does the drawing
                  for this instance.                
            </javadoc>
            <method name="getDelegate" type="Graphics2D" line="88"/>
            <javadoc line="92">
                Set the Graphics2D instance which will do the
                  drawing.                
            </javadoc>
            <method name="setDelegate" type="void" line="96">
                <params>
                    <param name="graphics" type="Graphics2D"/>
                </params>
            </method>
            <method name="getPrinterJob" type="PrinterJob" line="100"/>
            <javadoc line="104">
                Returns the device configuration associated with this Graphics2D.                
            </javadoc>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="107"/>
            <javadoc line="113">
                Creates a new &lt;code&gt;Graphics&lt;/code&gt; object that is
                  a copy of this &lt;code&gt;Graphics&lt;/code&gt; object.                
                <return>
                    a new graphics context that is a copy of
                      this graphics context.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="create" type="Graphics" line="120"/>
            <javadoc line="125">
                Translates the origin of the graphics context to the point
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in the current coordinate system.
                  Modifies this graphics context so that its new origin corresponds
                  to the point (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s
                  original coordinate system.  All coordinates used in subsequent
                  rendering operations on this graphics context will be relative
                  to this new origin.                
                <param>
                    x   the <i>x</i> coordinate.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate.                    
                </param>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="translate" type="void" line="137">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="141">
                Concatenates the current transform of this Graphics2D with a
                  translation transformation.
                  This is equivalent to calling transform(T), where T is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   1    0    tx  ]
                  [   0    1    ty  ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
            </javadoc>
            <method name="translate" type="void" line="152">
                <params>
                    <param name="tx" type="double"/>
                    <param name="ty" type="double"/>
                </params>
            </method>
            <javadoc line="156">
                Concatenates the current transform of this Graphics2D with a
                  rotation transformation.
                  This is equivalent to calling transform(R), where R is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    0   ]
                  [   sin(theta)     cos(theta)    0   ]
                  [       0              0         1   ]
                  &lt;/pre&gt;
                  Rotating with a positive angle theta rotates points on the positive
                  x axis toward the positive y axis.                
                <param>
                    theta The angle of rotation in radians.                    
                </param>
            </javadoc>
            <method name="rotate" type="void" line="170">
                <params>
                    <param name="theta" type="double"/>
                </params>
            </method>
            <javadoc line="174">
                Concatenates the current transform of this Graphics2D with a
                  translated rotation transformation.
                  This is equivalent to the following sequence of calls:
                  &lt;pre&gt;
                  translate(x, y);
                  rotate(theta);
                  translate(-x, -y);
                  &lt;/pre&gt;
                  Rotating with a positive angle theta rotates points on the positive
                  x axis toward the positive y axis.                
                <param>
                    theta The angle of rotation in radians.                    
                </param>
                <param>
                    x The x coordinate of the origin of the rotation                    
                </param>
                <param>
                    y The x coordinate of the origin of the rotation                    
                </param>
            </javadoc>
            <method name="rotate" type="void" line="189">
                <params>
                    <param name="theta" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="193">
                Concatenates the current transform of this Graphics2D with a
                  scaling transformation.
                  This is equivalent to calling transform(S), where S is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   sx   0    0   ]
                  [   0    sy   0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
            </javadoc>
            <method name="scale" type="void" line="204">
                <params>
                    <param name="sx" type="double"/>
                    <param name="sy" type="double"/>
                </params>
            </method>
            <javadoc line="208">
                Concatenates the current transform of this Graphics2D with a
                  shearing transformation.
                  This is equivalent to calling transform(SH), where SH is an
                  AffineTransform represented by the following matrix:
                  &lt;pre&gt;
                  [   1   shx   0   ]
                  [  shy   1    0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    shx The factor by which coordinates are shifted towards the
                      positive X axis direction according to their Y coordinate                    
                </param>
                <param>
                    shy The factor by which coordinates are shifted towards the
                      positive Y axis direction according to their X coordinate                    
                </param>
            </javadoc>
            <method name="shear" type="void" line="223">
                <params>
                    <param name="shx" type="double"/>
                    <param name="shy" type="double"/>
                </params>
            </method>
            <javadoc line="227">
                Gets this graphics context&apos;s current color.                
                <return>
                    this graphics context's current color.                    
                </return>
                <see>
                    java.awt.Color                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getColor" type="Color" line="234"/>
            <javadoc line="238">
                Sets this graphics context&apos;s current color to the specified
                  color. All subsequent graphics operations using this graphics
                  context use this specified color.                
                <param>
                    c   the new rendering color.                    
                </param>
                <see>
                    java.awt.Color                    
                </see>
                <see>
                    java.awt.Graphics#getColor                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setColor" type="void" line="247">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <javadoc line="251">
                Sets the paint mode of this graphics context to overwrite the
                  destination with this graphics context&apos;s current color.
                  This sets the logical pixel operation function to the paint or
                  overwrite mode.  All subsequent rendering operations will
                  overwrite the destination with the current color.                
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setPaintMode" type="void" line="259"/>
            <javadoc line="263">
                Sets the paint mode of this graphics context to alternate between
                  this graphics context&apos;s current color and the new specified color.
                  This specifies that logical pixel operations are performed in the
                  XOR mode, which alternates pixels between the current color and
                  a specified XOR color.
                  &lt;p&gt;
                  When drawing operations are performed, pixels which are the
                  current color are changed to the specified color, and vice versa.
                  &lt;p&gt;
                  Pixels that are of colors other than those two colors are changed
                  in an unpredictable but reversible manner; if the same figure is
                  drawn twice, then all pixels are restored to their original values.                
                <param>
                    c1 the XOR alternation color                    
                </param>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setXORMode" type="void" line="279">
                <params>
                    <param name="c1" type="Color"/>
                </params>
            </method>
            <javadoc line="283">
                Gets the current font.                
                <return>
                    this graphics context's current font.                    
                </return>
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    java.awt.Graphics#setFont                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getFont" type="Font" line="290"/>
            <javadoc line="294">
                Sets this graphics context&apos;s font to the specified font.
                  All subsequent text operations using this graphics context
                  use this font.                
                <param>
                    font   the font.                    
                </param>
                <see>
                    java.awt.Graphics#getFont                    
                </see>
                <see>
                    java.awt.Graphics#drawChars(java.lang.String,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#drawString(byte[],int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#drawBytes(char[],int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setFont" type="void" line="305">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <javadoc line="309">
                Gets the font metrics for the specified font.                
                <return>
                    the font metrics for the specified font.                    
                </return>
                <param>
                    f the specified font                    
                </param>
                <see>
                    java.awt.Graphics#getFont                    
                </see>
                <see>
                    java.awt.FontMetrics                    
                </see>
                <see>
                    java.awt.Graphics#getFontMetrics()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="318">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <javadoc line="322">
                Get the rendering context of the font
                  within this Graphics2D context.                
            </javadoc>
            <method name="getFontRenderContext" type="FontRenderContext" line="326"/>
            <javadoc line="330">
                Returns the bounding rectangle of the current clipping area.
                  The coordinates in the rectangle are relative to the coordinate
                  system origin of this graphics context.                
                <return>
                    the bounding rectangle of the current clipping area.                    
                </return>
                <see>
                    java.awt.Graphics#getClip                    
                </see>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#setClip(Shape)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getClipBounds" type="Rectangle" line="341"/>
            <javadoc line="346">
                Intersects the current clip with the specified rectangle.
                  The resulting clipping area is the intersection of the current
                  clipping area and the specified rectangle.
                  This method can only be used to make the current clip smaller.
                  To set the current clip larger, use any of the setClip methods.
                  Rendering operations have no effect outside of the clipping area.                
                <param>
                    x the x coordinate of the rectangle to intersect the clip with                    
                </param>
                <param>
                    y the y coordinate of the rectangle to intersect the clip with                    
                </param>
                <param>
                    width the width of the rectangle to intersect the clip with                    
                </param>
                <param>
                    height the height of the rectangle to intersect the clip with                    
                </param>
                <see>
                    #setClip(int,int,int,int)                    
                </see>
                <see>
                    #setClip(Shape)                    
                </see>
            </javadoc>
            <method name="clipRect" type="void" line="360">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="365">
                Sets the current clip to the rectangle specified by the given
                  coordinates.
                  Rendering operations have no effect outside of the clipping area.                
                <param>
                    x the <i>x</i> coordinate of the new clip rectangle.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the new clip rectangle.                    
                </param>
                <param>
                    width the width of the new clip rectangle.                    
                </param>
                <param>
                    height the height of the new clip rectangle.                    
                </param>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(Shape)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setClip" type="void" line="377">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="381">
                Gets the current clipping area.                
                <return>
                    a <code>Shape</code> object representing the
                      current clipping area.                    
                </return>
                <see>
                    java.awt.Graphics#getClipBounds                    
                </see>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#setClip(Shape)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getClip" type="Shape" line="391"/>
            <javadoc line="396">
                Sets the current clipping area to an arbitrary clip shape.
                  Not all objects which implement the &lt;code&gt;Shape&lt;/code&gt;
                  interface can be used to set the clip.  The only
                  &lt;code&gt;Shape&lt;/code&gt; objects which are guaranteed to be
                  supported are &lt;code&gt;Shape&lt;/code&gt; objects which are
                  obtained via the &lt;code&gt;getClip&lt;/code&gt; method and via
                  &lt;code&gt;Rectangle&lt;/code&gt; objects.                
                <see>
                    java.awt.Graphics#getClip()                    
                </see>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setClip" type="void" line="409">
                <params>
                    <param name="clip" type="Shape"/>
                </params>
            </method>
            <javadoc line="414">
                Copies an area of the component by a distance specified by
                  &lt;code&gt;dx&lt;/code&gt; and &lt;code&gt;dy&lt;/code&gt;. From the point specified
                  by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method
                  copies downwards and to the right.  To copy an area of the
                  component to the left or upwards, specify a negative value for
                  &lt;code&gt;dx&lt;/code&gt; or &lt;code&gt;dy&lt;/code&gt;.
                  If a portion of the source rectangle lies outside the bounds
                  of the component, or is obscured by another window or component,
                  &lt;code&gt;copyArea&lt;/code&gt; will be unable to copy the associated
                  pixels. The area that is omitted can be refreshed by calling
                  the component&apos;s &lt;code&gt;paint&lt;/code&gt; method.                
                <param>
                    x the <i>x</i> coordinate of the source rectangle.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the source rectangle.                    
                </param>
                <param>
                    width the width of the source rectangle.                    
                </param>
                <param>
                    height the height of the source rectangle.                    
                </param>
                <param>
                    dx the horizontal distance to copy the pixels.                    
                </param>
                <param>
                    dy the vertical distance to copy the pixels.                    
                </param>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="copyArea" type="void" line="435">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
            </method>
            <javadoc line="439">
                Draws a line, using the current color, between the points
                  &lt;code&gt;(x1,&amp;nbsp;y1)&lt;/code&gt; and &lt;code&gt;(x2,&amp;nbsp;y2)&lt;/code&gt;
                  in this graphics context&apos;s coordinate system.                
                <param>
                    x1  the first point's <i>x</i> coordinate.                    
                </param>
                <param>
                    y1  the first point's <i>y</i> coordinate.                    
                </param>
                <param>
                    x2  the second point's <i>x</i> coordinate.                    
                </param>
                <param>
                    y2  the second point's <i>y</i> coordinate.                    
                </param>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawLine" type="void" line="449">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
            </method>
            <javadoc line="454">
                Fills the specified rectangle.
                  The left and right edges of the rectangle are at
                  &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.
                  The top and bottom edges are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.
                  The resulting rectangle covers an area
                  &lt;code&gt;width&lt;/code&gt; pixels wide by
                  &lt;code&gt;height&lt;/code&gt; pixels tall.
                  The rectangle is filled using the graphics context&apos;s current color.                
                <param>
                    x   the <i>x</i> coordinate
                      of the rectangle to be filled.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate
                      of the rectangle to be filled.                    
                </param>
                <param>
                    width   the width of the rectangle to be filled.                    
                </param>
                <param>
                    height   the height of the rectangle to be filled.                    
                </param>
                <see>
                    java.awt.Graphics#fillRect                    
                </see>
                <see>
                    java.awt.Graphics#clearRect                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="fillRect" type="void" line="474">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="478">
                Clears the specified rectangle by filling it with the background
                  color of the current drawing surface. This operation does not
                  use the current paint mode.
                  &lt;p&gt;
                  Beginning with Java&amp;nbsp;1.1, the background color
                  of offscreen images may be system dependent. Applications should
                  use &lt;code&gt;setColor&lt;/code&gt; followed by &lt;code&gt;fillRect&lt;/code&gt; to
                  ensure that an offscreen image is cleared to a specific color.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to clear.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to clear.                    
                </param>
                <param>
                    width the width of the rectangle to clear.                    
                </param>
                <param>
                    height the height of the rectangle to clear.                    
                </param>
                <see>
                    java.awt.Graphics#fillRect(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#drawRect                    
                </see>
                <see>
                    java.awt.Graphics#setColor(java.awt.Color)                    
                </see>
                <see>
                    java.awt.Graphics#setPaintMode                    
                </see>
                <see>
                    java.awt.Graphics#setXORMode(java.awt.Color)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="clearRect" type="void" line="498">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="502">
                Draws an outlined round-cornered rectangle using this graphics
                  context&apos;s current color. The left and right edges of the rectangle
                  are at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&lt;/code&gt;,
                  respectively. The top and bottom edges of the rectangle are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&lt;/code&gt;.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    width the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height the height of the rectangle to be drawn.                    
                </param>
                <param>
                    arcWidth the horizontal diameter of the arc
                      at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter of the arc
                      at the four corners.                    
                </param>
                <see>
                    java.awt.Graphics#fillRoundRect                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawRoundRect" type="void" line="520">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <javadoc line="524">
                Fills the specified rounded corner rectangle with the current color.
                  The left and right edges of the rectangle
                  are at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;,
                  respectively. The top and bottom edges of the rectangle are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    width the width of the rectangle to be filled.                    
                </param>
                <param>
                    height the height of the rectangle to be filled.                    
                </param>
                <param>
                    arcWidth the horizontal diameter
                      of the arc at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter
                      of the arc at the four corners.                    
                </param>
                <see>
                    java.awt.Graphics#drawRoundRect                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="fillRoundRect" type="void" line="542">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <javadoc line="546">
                Draws the outline of an oval.
                  The result is a circle or ellipse that fits within the
                  rectangle specified by the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;,
                  &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The oval covers an area that is
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  and &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.                
                <param>
                    x the <i>x</i> coordinate of the upper left
                      corner of the oval to be drawn.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the upper left
                      corner of the oval to be drawn.                    
                </param>
                <param>
                    width the width of the oval to be drawn.                    
                </param>
                <param>
                    height the height of the oval to be drawn.                    
                </param>
                <see>
                    java.awt.Graphics#fillOval                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawOval" type="void" line="564">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="568">
                Fills an oval bounded by the specified rectangle with the
                  current color.                
                <param>
                    x the <i>x</i> coordinate of the upper left corner
                      of the oval to be filled.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the upper left corner
                      of the oval to be filled.                    
                </param>
                <param>
                    width the width of the oval to be filled.                    
                </param>
                <param>
                    height the height of the oval to be filled.                    
                </param>
                <see>
                    java.awt.Graphics#drawOval                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="fillOval" type="void" line="580">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="584">
                Draws the outline of a circular or elliptical arc
                  covering the specified rectangle.
                  &lt;p&gt;
                  The resulting arc begins at &lt;code&gt;startAngle&lt;/code&gt; and extends
                  for &lt;code&gt;arcAngle&lt;/code&gt; degrees, using the current color.
                  Angles are interpreted such that 0&amp;nbsp;degrees
                  is at the 3&amp;nbsp;o&apos;clock position.
                  A positive value indicates a counter-clockwise rotation
                  while a negative value indicates a clockwise rotation.
                  &lt;p&gt;
                  The center of the arc is the center of the rectangle whose origin
                  is (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) and whose size is specified by the
                  &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The resulting arc covers an area
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.                
                <param>
                    x the <i>x</i> coordinate of the
                      upper-left corner of the arc to be drawn.                    
                </param>
                <param>
                    y the <i>y</i>  coordinate of the
                      upper-left corner of the arc to be drawn.                    
                </param>
                <param>
                    width the width of the arc to be drawn.                    
                </param>
                <param>
                    height the height of the arc to be drawn.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    arcAngle the angular extent of the arc,
                      relative to the start angle.                    
                </param>
                <see>
                    java.awt.Graphics#fillArc                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawArc" type="void" line="615">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <javadoc line="619">
                Fills a circular or elliptical arc covering the specified rectangle.
                  &lt;p&gt;
                  The resulting arc begins at &lt;code&gt;startAngle&lt;/code&gt; and extends
                  for &lt;code&gt;arcAngle&lt;/code&gt; degrees.
                  Angles are interpreted such that 0&amp;nbsp;degrees
                  is at the 3&amp;nbsp;o&apos;clock position.
                  A positive value indicates a counter-clockwise rotation
                  while a negative value indicates a clockwise rotation.
                  &lt;p&gt;
                  The center of the arc is the center of the rectangle whose origin
                  is (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) and whose size is specified by the
                  &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The resulting arc covers an area
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.                
                <param>
                    x the <i>x</i> coordinate of the
                      upper-left corner of the arc to be filled.                    
                </param>
                <param>
                    y the <i>y</i>  coordinate of the
                      upper-left corner of the arc to be filled.                    
                </param>
                <param>
                    width the width of the arc to be filled.                    
                </param>
                <param>
                    height the height of the arc to be filled.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    arcAngle the angular extent of the arc,
                      relative to the start angle.                    
                </param>
                <see>
                    java.awt.Graphics#drawArc                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="fillArc" type="void" line="649">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <javadoc line="653">
                Draws a sequence of connected lines defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  Each pair of (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) coordinates defines a point.
                  The figure is not closed if the first point
                  differs from the last point.                
                <param>
                    xPoints an array of <i>x</i> points                    
                </param>
                <param>
                    yPoints an array of <i>y</i> points                    
                </param>
                <param>
                    nPoints the total number of points                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawPolyline" type="void" line="666">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <javadoc line="670">
                Draws a closed polygon defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  Each pair of (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) coordinates defines a point.
                  &lt;p&gt;
                  This method draws the polygon defined by &lt;code&gt;nPoint&lt;/code&gt; line
                  segments, where the first &lt;code&gt;nPoint&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;
                  line segments are line segments from
                  &lt;code&gt;(xPoints[i&amp;nbsp;-&amp;nbsp;1],&amp;nbsp;yPoints[i&amp;nbsp;-&amp;nbsp;1])&lt;/code&gt;
                  to &lt;code&gt;(xPoints[i],&amp;nbsp;yPoints[i])&lt;/code&gt;, for
                  1&amp;nbsp;&amp;le;&amp;nbsp;&lt;i&gt;i&lt;/i&gt;&amp;nbsp;&amp;le;&amp;nbsp;&lt;code&gt;nPoints&lt;/code&gt;.
                  The figure is automatically closed by drawing a line connecting
                  the final point to the first point, if those points are different.                
                <param>
                    xPoints   a an array of <code>x</code> coordinates.                    
                </param>
                <param>
                    yPoints   a an array of <code>y</code> coordinates.                    
                </param>
                <param>
                    nPoints   a the total number of points.                    
                </param>
                <see>
                    java.awt.Graphics#fillPolygon                    
                </see>
                <see>
                    java.awt.Graphics#drawPolyline                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawPolygon" type="void" line="691">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <javadoc line="695">
                Fills a closed polygon defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  &lt;p&gt;
                  This method draws the polygon defined by &lt;code&gt;nPoint&lt;/code&gt; line
                  segments, where the first &lt;code&gt;nPoint&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;
                  line segments are line segments from
                  &lt;code&gt;(xPoints[i&amp;nbsp;-&amp;nbsp;1],&amp;nbsp;yPoints[i&amp;nbsp;-&amp;nbsp;1])&lt;/code&gt;
                  to &lt;code&gt;(xPoints[i],&amp;nbsp;yPoints[i])&lt;/code&gt;, for
                  1&amp;nbsp;&amp;le;&amp;nbsp;&lt;i&gt;i&lt;/i&gt;&amp;nbsp;&amp;le;&amp;nbsp;&lt;code&gt;nPoints&lt;/code&gt;.
                  The figure is automatically closed by drawing a line connecting
                  the final point to the first point, if those points are different.
                  &lt;p&gt;
                  The area inside the polygon is defined using an
                  even-odd fill rule, also known as the alternating rule.                
                <param>
                    xPoints   a an array of <code>x</code> coordinates.                    
                </param>
                <param>
                    yPoints   a an array of <code>y</code> coordinates.                    
                </param>
                <param>
                    nPoints   a the total number of points.                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="fillPolygon" type="void" line="717">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <javadoc line="721">
                Draws the text given by the specified string, using this
                  graphics context&apos;s current font and color. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.                
                <param>
                    str      the string to be drawn.                    
                </param>
                <param>
                    x        the <i>x</i> coordinate.                    
                </param>
                <param>
                    y        the <i>y</i> coordinate.                    
                </param>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawString" type="void" line="733">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="737">
                Draws the text given by the specified iterator, using this
                  graphics context&apos;s current color. The iterator has to specify a font
                  for each character. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.
                  The rendering attributes applied include the clip, transform,
                  paint or color, and composite attributes.
                  For characters in script systems such as Hebrew and Arabic,
                  the glyphs may be draw from right to left, in which case the
                  coordinate supplied is the the location of the leftmost character
                  on the baseline.                
                <param>
                    iterator the iterator whose text is to be drawn                    
                </param>
                <param>
                    x,y the coordinates where the iterator's text should be drawn.                    
                </param>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="758">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="762">
                Draws the text given by the specified iterator, using this
                  graphics context&apos;s current color. The iterator has to specify a font
                  for each character. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.
                  The rendering attributes applied include the clip, transform,
                  paint or color, and composite attributes.
                  For characters in script systems such as Hebrew and Arabic,
                  the glyphs may be draw from right to left, in which case the
                  coordinate supplied is the the location of the leftmost character
                  on the baseline.                
                <param>
                    iterator the iterator whose text is to be drawn                    
                </param>
                <param>
                    x,y the coordinates where the iterator's text should be drawn.                    
                </param>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="783">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="787">
                Draws as much of the specified image as is currently available.
                  The image is drawn with its top-left corner at
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s coordinate
                  space. Transparent pixels in the image do not affect whatever
                  pixels are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  complete image has not yet been loaded, and it has not been dithered
                  and converted for the current output device.
                  &lt;p&gt;
                  If the image has not yet been completely loaded, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.                
                <param>
                    img the specified image to be drawn.                    
                </param>
                <param>
                    x   the <i>x</i> coordinate.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="813">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="818">
                Draws as much of the specified image as has already been scaled
                  to fit inside the specified rectangle.
                  &lt;p&gt;
                  The image is drawn inside the specified rectangle of this
                  graphics context&apos;s coordinate space, and is scaled if
                  necessary. Transparent pixels do not affect whatever pixels
                  are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  entire image has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the image observer by calling its &lt;code&gt;imageUpdate&lt;/code&gt; method.
                  &lt;p&gt;
                  A scaled version of an image will not necessarily be
                  available immediately just because an unscaled version of the
                  image has been constructed for this output device.  Each size of
                  the image may be cached separately and generated from the original
                  data in a separate image production sequence.                
                <param>
                    img    the specified image to be drawn.                    
                </param>
                <param>
                    x      the <i>x</i> coordinate.                    
                </param>
                <param>
                    y      the <i>y</i> coordinate.                    
                </param>
                <param>
                    width  the width of the rectangle.                    
                </param>
                <param>
                    height the height of the rectangle.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="854">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="859">
                Draws as much of the specified image as is currently available.
                  The image is drawn with its top-left corner at
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s coordinate
                  space.  Transparent pixels are drawn in the specified
                  background color.
                  &lt;p&gt;
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  complete image has not yet been loaded, and it has not been dithered
                  and converted for the current output device.
                  &lt;p&gt;
                  If the image has not yet been completely loaded, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.                
                <param>
                    img    the specified image to be drawn.                    
                </param>
                <param>
                    x      the <i>x</i> coordinate.                    
                </param>
                <param>
                    y      the <i>y</i> coordinate.                    
                </param>
                <param>
                    bgcolor the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="892">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="894"/>
                <declaration name="result" type="boolean" line="898"/>
                <scope line="900">
                    <declaration name="imageCopy" type="BufferedImage" line="901"/>
                </scope>
                <scope line="903"/>
            </method>
            <javadoc line="910">
                Draws as much of the specified image as has already been scaled
                  to fit inside the specified rectangle.
                  &lt;p&gt;
                  The image is drawn inside the specified rectangle of this
                  graphics context&apos;s coordinate space, and is scaled if
                  necessary. Transparent pixels are drawn in the specified
                  background color.
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  entire image has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  A scaled version of an image will not necessarily be
                  available immediately just because an unscaled version of the
                  image has been constructed for this output device.  Each size of
                  the image may be cached separately and generated from the original
                  data in a separate image production sequence.                
                <param>
                    img       the specified image to be drawn.                    
                </param>
                <param>
                    x         the <i>x</i> coordinate.                    
                </param>
                <param>
                    y         the <i>y</i> coordinate.                    
                </param>
                <param>
                    width     the width of the rectangle.                    
                </param>
                <param>
                    height    the height of the rectangle.                    
                </param>
                <param>
                    bgcolor   the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="952">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="954"/>
                <declaration name="result" type="boolean" line="958"/>
                <scope line="960">
                    <declaration name="imageCopy" type="BufferedImage" line="961"/>
                </scope>
                <scope line="963"/>
            </method>
            <javadoc line="971">
                Draws as much of the specified area of the specified image as is
                  currently available, scaling it on the fly to fit inside the
                  specified area of the destination drawable surface. Transparent pixels
                  do not affect whatever pixels are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  image area to be drawn has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  This method always uses the unscaled version of the image
                  to render the scaled rectangle and performs the required
                  scaling on the fly. It does not use a cached, scaled version
                  of the image for this operation. Scaling of the image from source
                  to destination is performed such that the first coordinate
                  of the source rectangle is mapped to the first coordinate of
                  the destination rectangle, and the second source coordinate is
                  mapped to the second destination coordinate. The subimage is
                  scaled and flipped as needed to preserve those mappings.                
                <param>
                    img the specified image to be drawn                    
                </param>
                <param>
                    dx1 the <i>x</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy1 the <i>y</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dx2 the <i>x</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy2 the <i>y</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    sx1 the <i>x</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy1 the <i>y</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sx2 the <i>x</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy2 the <i>y</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    observer object to be notified as more of the image is
                      scaled and converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="1021">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1027">
                Draws as much of the specified area of the specified image as is
                  currently available, scaling it on the fly to fit inside the
                  specified area of the destination drawable surface.
                  &lt;p&gt;
                  Transparent pixels are drawn in the specified background color.
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  image area to be drawn has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  This method always uses the unscaled version of the image
                  to render the scaled rectangle and performs the required
                  scaling on the fly. It does not use a cached, scaled version
                  of the image for this operation. Scaling of the image from source
                  to destination is performed such that the first coordinate
                  of the source rectangle is mapped to the first coordinate of
                  the destination rectangle, and the second source coordinate is
                  mapped to the second destination coordinate. The subimage is
                  scaled and flipped as needed to preserve those mappings.                
                <param>
                    img the specified image to be drawn                    
                </param>
                <param>
                    dx1 the <i>x</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy1 the <i>y</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dx2 the <i>x</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy2 the <i>y</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    sx1 the <i>x</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy1 the <i>y</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sx2 the <i>x</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy2 the <i>y</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    bgcolor the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer object to be notified as more of the image is
                      scaled and converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="1084">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="1086"/>
                <declaration name="result" type="boolean" line="1090"/>
                <scope line="1091">
                    <declaration name="imageCopy" type="BufferedImage" line="1092"/>
                </scope>
                <scope line="1097"/>
            </method>
            <javadoc line="1108">
                Return true if drawing &lt;code&gt;img&lt;/code&gt; will
                  invoke a Java2D bug (#4258675). The bug in question
                  occurs when a draw image call with a background color
                  parameter tries to render a sheared
                  or rotated image. The portions of the bounding
                  rectangle not covered by the sheared image
                  are incorrectly drawn with the background color.                
            </javadoc>
            <method name="needToCopyBgColorImage" type="boolean" line="1117">
                <params>
                    <param name="img" type="Image"/>
                </params>
                <declaration name="needToCopy" type="boolean" line="1119"/>
                <declaration name="transform" type="AffineTransform" line="1121"/>
            </method>
            <javadoc line="1128">
                Return a new &lt;code&gt;BufferedImage&lt;/code&gt;
                  that contains a copy of the provided
                  &lt;code&gt;Image&lt;/code&gt; where its
                  transparent pixels have been replaced by
                  &lt;code&gt;bgcolor&lt;/code&gt;. If the new
                  &lt;code&gt;BufferedImage&lt;/code&gt; can not be created,
                  probably because the original image has not
                  finished loading, then &lt;code&gt;null&lt;/code&gt; is
                  returned.                
            </javadoc>
            <method name="getBufferedImageCopy" type="BufferedImage" line="1139">
                <params>
                    <param name="img" type="Image"/>
                    <param name="bgcolor" type="Color"/>
                </params>
                <comment line="1151">
                    Try to minimize the depth of the BufferedImage
                     we are about to create by, if possible, making
                     it the same depth as the original image.                    
                </comment>
                <comment line="1164">
                    Copy the original image into the new buffer
                     without any transformations.
                     This will replace the transparent pixels
                     in the original with background color.                    
                </comment>
                <comment line="1173">
                    We couldn&apos;t get the width or height of the image
                     so just return null.                    
                </comment>
                <declaration name="imageCopy" type="BufferedImage" line="1141"/>
                <declaration name="width" type="int" line="1143"/>
                <declaration name="height" type="int" line="1144"/>
                <scope line="1146">
                    <declaration name="imageType" type="int" line="1148"/>
                    <scope line="1154">
                        <declaration name="bufImage" type="BufferedImage" line="1155"/>
                    </scope>
                    <scope line="1157"/>
                    <declaration name="g" type="Graphics" line="1168"/>
                </scope>
                <scope line="1175"/>
            </method>
            <javadoc line="1182">
                Draws an image, applying a transform from image space into user space
                  before drawing.
                  The transformation from user space into device space is done with
                  the current transform in the Graphics2D.
                  The given transformation is applied to the image before the
                  transform attribute in the Graphics2D state is applied.
                  The rendering attributes applied include the clip, transform,
                  and composite attributes. Note that the result is
                  undefined, if the given transform is noninvertible.                
                <param>
                    img The image to be drawn.                    
                </param>
                <param>
                    xform The transformation from image space into user space.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawRenderedImage" type="void" line="1201">
                <params>
                    <param name="img" type="RenderedImage"/>
                    <param name="xform" type="AffineTransform"/>
                </params>
            </method>
            <method name="drawRenderableImage" type="void" line="1208">
                <params>
                    <param name="img" type="RenderableImage"/>
                    <param name="xform" type="AffineTransform"/>
                </params>
                <scope line="1210"/>
                <declaration name="pipeTransform" type="AffineTransform" line="1214"/>
                <declaration name="concatTransform" type="AffineTransform" line="1215"/>
                <declaration name="reverseTransform" type="AffineTransform" line="1217"/>
                <declaration name="rc" type="RenderContext" line="1219"/>
                <scope line="1221"/>
                <scope line="1223"/>
                <declaration name="rendering" type="RenderedImage" line="1228"/>
            </method>
            <javadoc line="1232">
                Disposes of this graphics context and releases
                  any system resources that it is using.
                  A &lt;code&gt;Graphics&lt;/code&gt; object cannot be used after
                  &lt;code&gt;dispose&lt;/code&gt;has been called.
                  &lt;p&gt;
                  When a Java program runs, a large number of &lt;code&gt;Graphics&lt;/code&gt;
                  objects can be created within a short time frame.
                  Although the finalization process of the garbage collector
                  also disposes of the same system resources, it is preferable
                  to manually free the associated resources by calling this
                  method rather than to rely on a finalization process which
                  may not run to completion for a long period of time.
                  &lt;p&gt;
                  Graphics objects which are provided as arguments to the
                  &lt;code&gt;paint&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; methods
                  of components are automatically released by the system when
                  those methods return. For efficiency, programmers should
                  call &lt;code&gt;dispose&lt;/code&gt; when finished using
                  a &lt;code&gt;Graphics&lt;/code&gt; object only if it was created
                  directly from a component or another &lt;code&gt;Graphics&lt;/code&gt; object.                
                <see>
                    java.awt.Graphics#finalize                    
                </see>
                <see>
                    java.awt.Component#paint                    
                </see>
                <see>
                    java.awt.Component#update                    
                </see>
                <see>
                    java.awt.Component#getGraphics                    
                </see>
                <see>
                    java.awt.Graphics#create                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="dispose" type="void" line="1260"/>
            <javadoc line="1264">
                Empty finalizer as no clean up needed here.                
            </javadoc>
            <method name="finalize" type="void" line="1267"/>
            <javadoc line="1273">
                Strokes the outline of a Shape using the settings of the current
                  graphics state.  The rendering attributes applied include the
                  clip, transform, paint or color, composite and stroke attributes.                
                <param>
                    s The shape to be drawn.                    
                </param>
                <see>
                    #setStroke                    
                </see>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
                <see>
                    #setComposite                    
                </see>
            </javadoc>
            <method name="draw" type="void" line="1287">
                <params>
                    <param name="s" type="Shape"/>
                </params>
            </method>
            <javadoc line="1291">
                Draws an image, applying a transform from image space into user space
                  before drawing.
                  The transformation from user space into device space is done with
                  the current transform in the Graphics2D.
                  The given transformation is applied to the image before the
                  transform attribute in the Graphics2D state is applied.
                  The rendering attributes applied include the clip, transform,
                  and composite attributes. Note that the result is
                  undefined, if the given transform is noninvertible.                
                <param>
                    img The image to be drawn.                    
                </param>
                <param>
                    xform The transformation from image space into user space.                    
                </param>
                <param>
                    obs The image observer to be notified as more of the image
                      is converted.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1313">
                <params>
                    <param name="img" type="Image"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="obs" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1318">
                Draws a BufferedImage that is filtered with a BufferedImageOp.
                  The rendering attributes applied include the clip, transform
                  and composite attributes.  This is equivalent to:
                  &lt;pre&gt;
                  img1 = op.filter(img, null);
                  drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);
                  &lt;/pre&gt;                
                <param>
                    op The filter to be applied to the image before drawing.                    
                </param>
                <param>
                    img The BufferedImage to be drawn.                    
                </param>
                <param>
                    x,y The location in user space where the image should be drawn.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawImage" type="void" line="1338">
                <params>
                    <param name="img" type="BufferedImage"/>
                    <param name="op" type="BufferedImageOp"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="1344">
                Draws a string of text.
                  The rendering attributes applied include the clip, transform,
                  paint or color, font and composite attributes.                
                <param>
                    s The string to be drawn.                    
                </param>
                <param>
                    x,y The coordinates where the string should be drawn.                    
                </param>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    java.awt.Graphics#setFont                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="1361">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="1365">
                Draws a GlyphVector.
                  The rendering attributes applied include the clip, transform,
                  paint or color, and composite attributes.  The GlyphVector specifies
                  individual glyphs from a Font.                
                <param>
                    g The GlyphVector to be drawn.                    
                </param>
                <param>
                    x,y The coordinates where the glyphs should be drawn.                    
                </param>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawGlyphVector" type="void" line="1382">
                <params>
                    <param name="g" type="GlyphVector"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="1386">
                Fills the interior of a Shape using the settings of the current
                  graphics state. The rendering attributes applied include the
                  clip, transform, paint or color, and composite.                
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="fill" type="void" line="1398">
                <params>
                    <param name="s" type="Shape"/>
                </params>
            </method>
            <javadoc line="1402">
                Checks to see if the outline of a Shape intersects the specified
                  Rectangle in device space.
                  The rendering attributes taken into account include the
                  clip, transform, and stroke attributes.                
                <param>
                    rect The area in device space to check for a hit.                    
                </param>
                <param>
                    s The shape to check for a hit.                    
                </param>
                <param>
                    onStroke Flag to choose between testing the stroked or
                      the filled shape.                    
                </param>
                <return>
                    True if there is a hit, false otherwise.                    
                </return>
                <see>
                    #setStroke                    
                </see>
                <see>
                    #fill                    
                </see>
                <see>
                    #draw                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="hit" type="boolean" line="1422">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="s" type="Shape"/>
                    <param name="onStroke" type="boolean"/>
                </params>
            </method>
            <javadoc line="1427">
                Sets the Composite in the current graphics state. Composite is used
                  in all drawing methods such as drawImage, drawString, draw,
                  and fill.  It specifies how new pixels are to be combined with
                  the existing pixels on the graphics device in the rendering process.                
                <param>
                    comp The Composite object to be used for drawing.                    
                </param>
                <see>
                    java.awt.Graphics#setXORMode                    
                </see>
                <see>
                    java.awt.Graphics#setPaintMode                    
                </see>
                <see>
                    AlphaComposite                    
                </see>
            </javadoc>
            <method name="setComposite" type="void" line="1437">
                <params>
                    <param name="comp" type="Composite"/>
                </params>
            </method>
            <javadoc line="1442">
                Sets the Paint in the current graphics state.                
                <param>
                    paint The Paint object to be used to generate color in
                      the rendering process.                    
                </param>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    GradientPaint                    
                </see>
                <see>
                    TexturePaint                    
                </see>
            </javadoc>
            <method name="setPaint" type="void" line="1450">
                <params>
                    <param name="paint" type="Paint"/>
                </params>
            </method>
            <javadoc line="1454">
                Sets the Stroke in the current graphics state.                
                <param>
                    s The Stroke object to be used to stroke a Shape in
                      the rendering process.                    
                </param>
                <see>
                    BasicStroke                    
                </see>
            </javadoc>
            <method name="setStroke" type="void" line="1460">
                <params>
                    <param name="s" type="Stroke"/>
                </params>
            </method>
            <javadoc line="1464">
                Sets the preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <param>
                    hintCategory The category of hint to be set.                    
                </param>
                <param>
                    hintValue The value indicating preferences for the specified
                      hint category.                    
                </param>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="setRenderingHint" type="void" line="1473">
                <params>
                    <param name="hintCategory" type="Key"/>
                    <param name="hintValue" type="Object"/>
                </params>
            </method>
            <javadoc line="1477">
                Returns the preferences for the rendering algorithms.                
                <param>
                    hintCategory The category of hint to be set.                    
                </param>
                <return>
                    The preferences for rendering algorithms.                    
                </return>
                <see>
                    RenderingHings                    
                </see>
            </javadoc>
            <method name="getRenderingHint" type="Object" line="1483">
                <params>
                    <param name="hintCategory" type="Key"/>
                </params>
            </method>
            <javadoc line="1487">
                Sets the preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <param>
                    hints The rendering hints to be set                    
                </param>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="setRenderingHints" type="void" line="1494">
                <params>
                    <param name="hints" type="Map<?,?>"/>
                </params>
            </method>
            <javadoc line="1498">
                Adds a number of preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <param>
                    hints The rendering hints to be set                    
                </param>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="addRenderingHints" type="void" line="1505">
                <params>
                    <param name="hints" type="Map<?,?>"/>
                </params>
            </method>
            <javadoc line="1509">
                Gets the preferences for the rendering algorithms.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.                
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="1515"/>
            <javadoc line="1519">
                Composes a Transform object with the transform in this
                  Graphics2D according to the rule last-specified-first-applied.
                  If the currrent transform is Cx, the result of composition
                  with Tx is a new transform Cx&apos;.  Cx&apos; becomes the current
                  transform for this Graphics2D.
                  Transforming a point p by the updated transform Cx&apos; is
                  equivalent to first transforming p by Tx and then transforming
                  the result by the original transform Cx.  In other words,
                  Cx&apos;(p) = Cx(Tx(p)).
                  A copy of the Tx is made, if necessary, so further
                  modifications to Tx do not affect rendering.                
                <param>
                    Tx The Transform object to be composed with the current
                      transform.                    
                </param>
                <see>
                    #setTransform                    
                </see>
                <see>
                    TransformChain                    
                </see>
                <see>
                    AffineTransform                    
                </see>
            </javadoc>
            <method name="transform" type="void" line="1537">
                <params>
                    <param name="Tx" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="1541">
                Sets the Transform in the current graphics state.                
                <param>
                    Tx The Transform object to be used in the rendering process.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    TransformChain                    
                </see>
                <see>
                    AffineTransform                    
                </see>
            </javadoc>
            <method name="setTransform" type="void" line="1548">
                <params>
                    <param name="Tx" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="1552">
                Returns the current Transform in the Graphics2D state.                
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="1557"/>
            <javadoc line="1561">
                Returns the current Paint in the Graphics2D state.                
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
            </javadoc>
            <method name="getPaint" type="Paint" line="1566"/>
            <javadoc line="1570">
                Returns the current Composite in the Graphics2D state.                
                <see>
                    #setComposite                    
                </see>
            </javadoc>
            <method name="getComposite" type="Composite" line="1574"/>
            <javadoc line="1578">
                Sets the background color in this context used for clearing a region.
                  When Graphics2D is constructed for a component, the backgroung color is
                  inherited from the component. Setting the background color in the
                  Graphics2D context only affects the subsequent clearRect() calls and
                  not the background color of the component. To change the background
                  of the component, use appropriate methods of the component.                
                <param>
                    color The background color that should be used in
                      subsequent calls to clearRect().                    
                </param>
                <see>
                    getBackground                    
                </see>
                <see>
                    Graphics.clearRect()                    
                </see>
            </javadoc>
            <method name="setBackground" type="void" line="1590">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="1594">
                Returns the background color used for clearing a region.                
                <see>
                    setBackground                    
                </see>
            </javadoc>
            <method name="getBackground" type="Color" line="1598"/>
            <javadoc line="1602">
                Returns the current Stroke in the Graphics2D state.                
                <see>
                    setStroke                    
                </see>
            </javadoc>
            <method name="getStroke" type="Stroke" line="1606"/>
            <javadoc line="1610">
                Intersects the current clip with the interior of the specified Shape
                  and sets the current clip to the resulting intersection.
                  The indicated shape is transformed with the current transform in the
                  Graphics2D state before being intersected with the current clip.
                  This method is used to make the current clip smaller.
                  To make the clip larger, use any setClip method.                
                <param>
                    s The Shape to be intersected with the current clip.                    
                </param>
            </javadoc>
            <method name="clip" type="void" line="1619">
                <params>
                    <param name="s" type="Shape"/>
                </params>
            </method>
        </class>
    </source>