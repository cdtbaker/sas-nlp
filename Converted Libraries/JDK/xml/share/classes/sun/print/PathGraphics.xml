<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.print">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Hashtable"/>
        <import package="sun.font.CharToGlyphMapper"/>
        <import package="sun.font.CompositeFont"/>
        <import package="sun.font.Font2D"/>
        <import package="sun.font.Font2DHandle"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.font.FontUtilities"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Polygon"/>
        <import package="java.awt.Shape"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Arc2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.RoundRectangle2D"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.BufferedImageOp"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="sun.awt.image.ByteComponentRaster"/>
        <import package="sun.awt.image.ToolkitImage"/>
        <import package="sun.awt.image.SunWritableRaster"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="java.awt.print.PrinterGraphics"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="java.util.Map"/>
        <class name="PathGraphics" line="52">
            <extends class="ProxyGraphics2D"/>
            <declaration name="mPainter" type="Printable" line="53"/>
            <declaration name="mPageFormat" type="PageFormat" line="54"/>
            <declaration name="mPageIndex" type="int" line="55"/>
            <declaration name="mCanRedraw" type="boolean" line="56"/>
            <declaration name="printingGlyphVector" type="boolean" line="57"/>
            <method name="PathGraphics" type="constructor" line="58">
                <params>
                    <param name="graphics" type="Graphics2D"/>
                    <param name="printerJob" type="PrinterJob"/>
                    <param name="painter" type="Printable"/>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="pageIndex" type="int"/>
                    <param name="canRedraw" type="boolean"/>
                </params>
            </method>
            <javadoc line="65">
                Return the Printable instance responsible for drawing
                  into this Graphics.                
            </javadoc>
            <method name="getPrintable" type="Printable" line="69"/>
            <javadoc line="72">
                Return the PageFormat associated with this page of
                  Graphics.                
            </javadoc>
            <method name="getPageFormat" type="PageFormat" line="76"/>
            <javadoc line="79">
                Return the page index associated with this Graphics.                
            </javadoc>
            <method name="getPageIndex" type="int" line="82"/>
            <javadoc line="85">
                Return true if we are allowed to ask the application
                  to redraw portions of the page. In general, with the
                  PrinterJob API, the application can be asked to do a
                  redraw. When PrinterJob is emulating PrintJob then we
                  can not.                
            </javadoc>
            <method name="canDoRedraws" type="boolean" line="92"/>
            <method name="redrawRegion" type="void" line="95"/>
            <javadoc line="95">
                Redraw a rectanglular area using a proxy graphics                
            </javadoc>
            <javadoc line="99">
                Draws a line, using the current color, between the points
                  &lt;code&gt;(x1,&amp;nbsp;y1)&lt;/code&gt; and &lt;code&gt;(x2,&amp;nbsp;y2)&lt;/code&gt;
                  in this graphics context&apos;s coordinate system.                
                <param>
                    x1  the first point's <i>x</i> coordinate.                    
                </param>
                <param>
                    y1  the first point's <i>y</i> coordinate.                    
                </param>
                <param>
                    x2  the second point's <i>x</i> coordinate.                    
                </param>
                <param>
                    y2  the second point's <i>y</i> coordinate.                    
                </param>
            </javadoc>
            <method name="drawLine" type="void" line="108">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
                <declaration name="paint" type="Paint" line="109"/>
                <scope line="110">
                    <declaration name="deviceTransform" type="AffineTransform" line="111"/>
                    <scope line="112"/>
                </scope>
                <scope line="117"/>
            </method>
            <javadoc line="121">
                Draws the outline of the specified rectangle.
                  The left and right edges of the rectangle are at
                  &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&lt;/code&gt;.
                  The top and bottom edges are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&lt;/code&gt;.
                  The rectangle is drawn using the graphics context&apos;s current color.                
                <param>
                    x   the <i>x</i> coordinate
                      of the rectangle to be drawn.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate
                      of the rectangle to be drawn.                    
                </param>
                <param>
                    width   the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height   the height of the rectangle to be drawn.                    
                </param>
                <see>
                    java.awt.Graphics#fillRect                    
                </see>
                <see>
                    java.awt.Graphics#clearRect                    
                </see>
            </javadoc>
            <method name="drawRect" type="void" line="137">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="paint" type="Paint" line="138"/>
                <scope line="139">
                    <declaration name="deviceTransform" type="AffineTransform" line="140"/>
                    <scope line="141"/>
                </scope>
                <scope line="146"/>
            </method>
            <javadoc line="150">
                Fills the specified rectangle.
                  The left and right edges of the rectangle are at
                  &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.
                  The top and bottom edges are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.
                  The resulting rectangle covers an area
                  &lt;code&gt;width&lt;/code&gt; pixels wide by
                  &lt;code&gt;height&lt;/code&gt; pixels tall.
                  The rectangle is filled using the graphics context&apos;s current color.                
                <param>
                    x   the <i>x</i> coordinate
                      of the rectangle to be filled.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate
                      of the rectangle to be filled.                    
                </param>
                <param>
                    width   the width of the rectangle to be filled.                    
                </param>
                <param>
                    height   the height of the rectangle to be filled.                    
                </param>
                <see>
                    java.awt.Graphics#clearRect                    
                </see>
                <see>
                    java.awt.Graphics#drawRect                    
                </see>
            </javadoc>
            <method name="fillRect" type="void" line="169">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="paint" type="Paint" line="170"/>
                <scope line="171">
                    <declaration name="deviceTransform" type="AffineTransform" line="172"/>
                    <scope line="173"/>
                </scope>
                <scope line="178"/>
            </method>
            <javadoc line="182">
                Clears the specified rectangle by filling it with the background
                  color of the current drawing surface. This operation does not
                  use the current paint mode.
                  &lt;p&gt;
                  Beginning with Java&amp;nbsp;1.1, the background color
                  of offscreen images may be system dependent. Applications should
                  use &lt;code&gt;setColor&lt;/code&gt; followed by &lt;code&gt;fillRect&lt;/code&gt; to
                  ensure that an offscreen image is cleared to a specific color.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to clear.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to clear.                    
                </param>
                <param>
                    width the width of the rectangle to clear.                    
                </param>
                <param>
                    height the height of the rectangle to clear.                    
                </param>
                <see>
                    java.awt.Graphics#fillRect(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#drawRect                    
                </see>
                <see>
                    java.awt.Graphics#setColor(java.awt.Color)                    
                </see>
                <see>
                    java.awt.Graphics#setPaintMode                    
                </see>
                <see>
                    java.awt.Graphics#setXORMode(java.awt.Color)                    
                </see>
            </javadoc>
            <method name="clearRect" type="void" line="201">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="204">
                Draws an outlined round-cornered rectangle using this graphics
                  context&apos;s current color. The left and right edges of the rectangle
                  are at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&lt;/code&gt;,
                  respectively. The top and bottom edges of the rectangle are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&lt;/code&gt;.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    width the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height the height of the rectangle to be drawn.                    
                </param>
                <param>
                    arcWidth the horizontal diameter of the arc
                      at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter of the arc
                      at the four corners.                    
                </param>
                <see>
                    java.awt.Graphics#fillRoundRect                    
                </see>
            </javadoc>
            <method name="drawRoundRect" type="void" line="220">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <javadoc line="223">
                Fills the specified rounded corner rectangle with the current color.
                  The left and right edges of the rectangle
                  are at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;,
                  respectively. The top and bottom edges of the rectangle are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    width the width of the rectangle to be filled.                    
                </param>
                <param>
                    height the height of the rectangle to be filled.                    
                </param>
                <param>
                    arcWidth the horizontal diameter
                      of the arc at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter
                      of the arc at the four corners.                    
                </param>
                <see>
                    java.awt.Graphics#drawRoundRect                    
                </see>
            </javadoc>
            <method name="fillRoundRect" type="void" line="239">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <javadoc line="242">
                Draws the outline of an oval.
                  The result is a circle or ellipse that fits within the
                  rectangle specified by the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;,
                  &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The oval covers an area that is
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  and &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.                
                <param>
                    x the <i>x</i> coordinate of the upper left
                      corner of the oval to be drawn.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the upper left
                      corner of the oval to be drawn.                    
                </param>
                <param>
                    width the width of the oval to be drawn.                    
                </param>
                <param>
                    height the height of the oval to be drawn.                    
                </param>
                <see>
                    java.awt.Graphics#fillOval                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawOval" type="void" line="260">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="263">
                Fills an oval bounded by the specified rectangle with the
                  current color.                
                <param>
                    x the <i>x</i> coordinate of the upper left corner
                      of the oval to be filled.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the upper left corner
                      of the oval to be filled.                    
                </param>
                <param>
                    width the width of the oval to be filled.                    
                </param>
                <param>
                    height the height of the oval to be filled.                    
                </param>
                <see>
                    java.awt.Graphics#drawOval                    
                </see>
            </javadoc>
            <method name="fillOval" type="void" line="274">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="277">
                Draws the outline of a circular or elliptical arc
                  covering the specified rectangle.
                  &lt;p&gt;
                  The resulting arc begins at &lt;code&gt;startAngle&lt;/code&gt; and extends
                  for &lt;code&gt;arcAngle&lt;/code&gt; degrees, using the current color.
                  Angles are interpreted such that 0&amp;nbsp;degrees
                  is at the 3&amp;nbsp;o&apos;clock position.
                  A positive value indicates a counter-clockwise rotation
                  while a negative value indicates a clockwise rotation.
                  &lt;p&gt;
                  The center of the arc is the center of the rectangle whose origin
                  is (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) and whose size is specified by the
                  &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The resulting arc covers an area
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.
                  &lt;p&gt;
                  The angles are specified relative to the non-square extents of
                  the bounding rectangle such that 45 degrees always falls on the
                  line from the center of the ellipse to the upper right corner of
                  the bounding rectangle. As a result, if the bounding rectangle is
                  noticeably longer in one axis than the other, the angles to the
                  start and end of the arc segment will be skewed farther along the
                  longer axis of the bounds.                
                <param>
                    x the <i>x</i> coordinate of the
                      upper-left corner of the arc to be drawn.                    
                </param>
                <param>
                    y the <i>y</i>  coordinate of the
                      upper-left corner of the arc to be drawn.                    
                </param>
                <param>
                    width the width of the arc to be drawn.                    
                </param>
                <param>
                    height the height of the arc to be drawn.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    arcAngle the angular extent of the arc,
                      relative to the start angle.                    
                </param>
                <see>
                    java.awt.Graphics#fillArc                    
                </see>
            </javadoc>
            <method name="drawArc" type="void" line="314">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <javadoc line="317">
                Fills a circular or elliptical arc covering the specified rectangle.
                  &lt;p&gt;
                  The resulting arc begins at &lt;code&gt;startAngle&lt;/code&gt; and extends
                  for &lt;code&gt;arcAngle&lt;/code&gt; degrees.
                  Angles are interpreted such that 0&amp;nbsp;degrees
                  is at the 3&amp;nbsp;o&apos;clock position.
                  A positive value indicates a counter-clockwise rotation
                  while a negative value indicates a clockwise rotation.
                  &lt;p&gt;
                  The center of the arc is the center of the rectangle whose origin
                  is (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) and whose size is specified by the
                  &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The resulting arc covers an area
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.
                  &lt;p&gt;
                  The angles are specified relative to the non-square extents of
                  the bounding rectangle such that 45 degrees always falls on the
                  line from the center of the ellipse to the upper right corner of
                  the bounding rectangle. As a result, if the bounding rectangle is
                  noticeably longer in one axis than the other, the angles to the
                  start and end of the arc segment will be skewed farther along the
                  longer axis of the bounds.                
                <param>
                    x the <i>x</i> coordinate of the
                      upper-left corner of the arc to be filled.                    
                </param>
                <param>
                    y the <i>y</i>  coordinate of the
                      upper-left corner of the arc to be filled.                    
                </param>
                <param>
                    width the width of the arc to be filled.                    
                </param>
                <param>
                    height the height of the arc to be filled.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    arcAngle the angular extent of the arc,
                      relative to the start angle.                    
                </param>
                <see>
                    java.awt.Graphics#drawArc                    
                </see>
            </javadoc>
            <method name="fillArc" type="void" line="353">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="arcAngle" type="int"/>
                </params>
            </method>
            <javadoc line="356">
                Draws a sequence of connected lines defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  Each pair of (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) coordinates defines a point.
                  The figure is not closed if the first point
                  differs from the last point.                
                <param>
                    xPoints an array of <i>x</i> points                    
                </param>
                <param>
                    yPoints an array of <i>y</i> points                    
                </param>
                <param>
                    nPoints the total number of points                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawPolyline" type="void" line="368">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
                <declaration name="fromX" type="float" line="369"/>
                <declaration name="fromY" type="float" line="370"/>
                <declaration name="toX" type="float" line="371"/>
                <declaration name="toY" type="float" line="372"/>
                <scope line="373">
                    <scope line="376"/>
                </scope>
            </method>
            <javadoc line="385">
                Draws a closed polygon defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  Each pair of (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) coordinates defines a point.
                  &lt;p&gt;
                  This method draws the polygon defined by &lt;code&gt;nPoint&lt;/code&gt; line
                  segments, where the first &lt;code&gt;nPoint&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;
                  line segments are line segments from
                  &lt;code&gt;(xPoints[i&amp;nbsp;-&amp;nbsp;1],&amp;nbsp;yPoints[i&amp;nbsp;-&amp;nbsp;1])&lt;/code&gt;
                  to &lt;code&gt;(xPoints[i],&amp;nbsp;yPoints[i])&lt;/code&gt;, for
                  1&amp;nbsp;&amp;le;&amp;nbsp;&lt;i&gt;i&lt;/i&gt;&amp;nbsp;&amp;le;&amp;nbsp;&lt;code&gt;nPoints&lt;/code&gt;.
                  The figure is automatically closed by drawing a line connecting
                  the final point to the first point, if those points are different.                
                <param>
                    xPoints   a an array of <code>x</code> coordinates.                    
                </param>
                <param>
                    yPoints   a an array of <code>y</code> coordinates.                    
                </param>
                <param>
                    nPoints   a the total number of points.                    
                </param>
                <see>
                    java.awt.Graphics#fillPolygon                    
                </see>
                <see>
                    java.awt.Graphics#drawPolyline                    
                </see>
            </javadoc>
            <method name="drawPolygon" type="void" line="404">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <javadoc line="407">
                Draws the outline of a polygon defined by the specified
                  &lt;code&gt;Polygon&lt;/code&gt; object.                
                <param>
                    p the polygon to draw.                    
                </param>
                <see>
                    java.awt.Graphics#fillPolygon                    
                </see>
                <see>
                    java.awt.Graphics#drawPolyline                    
                </see>
            </javadoc>
            <method name="drawPolygon" type="void" line="414">
                <params>
                    <param name="p" type="Polygon"/>
                </params>
            </method>
            <javadoc line="417">
                Fills a closed polygon defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  &lt;p&gt;
                  This method draws the polygon defined by &lt;code&gt;nPoint&lt;/code&gt; line
                  segments, where the first &lt;code&gt;nPoint&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;
                  line segments are line segments from
                  &lt;code&gt;(xPoints[i&amp;nbsp;-&amp;nbsp;1],&amp;nbsp;yPoints[i&amp;nbsp;-&amp;nbsp;1])&lt;/code&gt;
                  to &lt;code&gt;(xPoints[i],&amp;nbsp;yPoints[i])&lt;/code&gt;, for
                  1&amp;nbsp;&amp;le;&amp;nbsp;&lt;i&gt;i&lt;/i&gt;&amp;nbsp;&amp;le;&amp;nbsp;&lt;code&gt;nPoints&lt;/code&gt;.
                  The figure is automatically closed by drawing a line connecting
                  the final point to the first point, if those points are different.
                  &lt;p&gt;
                  The area inside the polygon is defined using an
                  even-odd fill rule, also known as the alternating rule.                
                <param>
                    xPoints   a an array of <code>x</code> coordinates.                    
                </param>
                <param>
                    yPoints   a an array of <code>y</code> coordinates.                    
                </param>
                <param>
                    nPoints   a the total number of points.                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
            </javadoc>
            <method name="fillPolygon" type="void" line="437">
                <params>
                    <param name="xPoints" type="int"/>
                    <param name="yPoints" type="int"/>
                    <param name="nPoints" type="int"/>
                </params>
            </method>
            <javadoc line="440">
                Fills the polygon defined by the specified Polygon object with
                  the graphics context&apos;s current color.
                  &lt;p&gt;
                  The area inside the polygon is defined using an
                  even-odd fill rule, also known as the alternating rule.                
                <param>
                    p the polygon to fill.                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
            </javadoc>
            <method name="fillPolygon" type="void" line="449">
                <params>
                    <param name="p" type="Polygon"/>
                </params>
            </method>
            <javadoc line="452">
                Draws the text given by the specified string, using this
                  graphics context&apos;s current font and color. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.                
                <param>
                    str      the string to be drawn.                    
                </param>
                <param>
                    x        the <i>x</i> coordinate.                    
                </param>
                <param>
                    y        the <i>y</i> coordinate.                    
                </param>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawString" type="void" line="464">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="drawString" type="void" line="467">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="468"/>
                <declaration name="layout" type="TextLayout" line="471"/>
            </method>
            <method name="drawString" type="void" line="474">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="font" type="Font"/>
                    <param name="frc" type="FontRenderContext"/>
                    <param name="w" type="float"/>
                </params>
                <declaration name="layout" type="TextLayout" line="475"/>
                <declaration name="textShape" type="Shape" line="476"/>
            </method>
            <javadoc line="479">
                Draws the text given by the specified iterator, using this
                  graphics context&apos;s current color. The iterator has to specify a font
                  for each character. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.                
                <param>
                    iterator the iterator whose text is to be drawn                    
                </param>
                <param>
                    x        the <i>x</i> coordinate.                    
                </param>
                <param>
                    y        the <i>y</i> coordinate.                    
                </param>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="491">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="drawString" type="void" line="494">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <scope line="495"/>
                <declaration name="layout" type="TextLayout" line="498"/>
            </method>
            <javadoc line="501">
                Draws a GlyphVector.
                  The rendering attributes applied include the clip, transform,
                  paint or color, and composite attributes.  The GlyphVector specifies
                  individual glyphs from a Font.                
                <param>
                    g The GlyphVector to be drawn.                    
                </param>
                <param>
                    x,y The coordinates where the glyphs should be drawn.                    
                </param>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawGlyphVector" type="void" line="516">
                <params>
                    <param name="g" type="GlyphVector"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <declaration name="fontMapRef" type="SoftReference&lt;Hashtable&lt;Font2DHandle,Object&gt;&gt;" line="532"/>
            <method name="platformFontCount" type="int" line="533">
                <params>
                    <param name="font" type="Font"/>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="536">
                Default implementation returns false.
                  Callers of this method must always be prepared for this,
                  and delegate to outlines or some other solution.                
            </javadoc>
            <method name="printGlyphVector" type="boolean" line="541">
                <params>
                    <param name="gv" type="GlyphVector"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <method name="printedSimpleGlyphVector" type="boolean" line="544">
                <params>
                    <param name="g" type="GlyphVector"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
                <declaration name="flags" type="int" line="545"/>
                <scope line="546"/>
                <declaration name="font" type="Font" line="549"/>
                <declaration name="font2D" type="Font2D" line="550"/>
                <scope line="551"/>
                <declaration name="fontMap" type="Hashtable&lt;Font2DHandle,Object&gt;" line="554"/>
                <scope line="555">
                    <scope line="557"/>
                </scope>
                <declaration name="numGlyphs" type="int" line="562"/>
                <declaration name="glyphCodes" type="int[]" line="563"/>
                <declaration name="glyphToCharMap" type="char[]" line="564"/>
                <declaration name="mapArray" type="char[][]" line="565"/>
                <declaration name="cf" type="CompositeFont" line="566"/>
                <scope line="567">
                    <scope line="568">
                        <declaration name="numSlots" type="int" line="570"/>
                        <scope line="572"/>
                        <scope line="576">
                            <declaration name="slot" type="int" line="577"/>
                            <scope line="578"/>
                            <scope line="581">
                                <declaration name="slotFont" type="Font2D" line="582"/>
                                <declaration name="map" type="char[]" line="583"/>
                                <scope line="584"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="591">
                        <scope line="593"/>
                    </scope>
                </scope>
                <declaration name="chars" type="char[]" line="599"/>
                <scope line="600">
                    <scope line="601">
                        <declaration name="gc" type="int" line="602"/>
                        <declaration name="map" type="char[]" line="603"/>
                        <scope line="605"/>
                        <declaration name="ch" type="char" line="608"/>
                        <scope line="609"/>
                        <scope line="612"/>
                        <scope line="615"/>
                        <scope line="618"/>
                        <scope line="621"/>
                    </scope>
                </scope>
                <scope line="626">
                    <scope line="627">
                        <declaration name="gc" type="int" line="628"/>
                        <declaration name="ch" type="char" line="629"/>
                        <scope line="630"/>
                        <scope line="633"/>
                        <scope line="636"/>
                        <scope line="639"/>
                        <scope line="642"/>
                    </scope>
                </scope>
                <declaration name="gvFrc" type="FontRenderContext" line="647"/>
                <declaration name="gv2" type="GlyphVector" line="648"/>
                <scope line="649"/>
                <declaration name="glyphCodes2" type="int[]" line="652"/>
                <scope line="653">
                    <scope line="654"/>
                </scope>
                <declaration name="g2dFrc" type="FontRenderContext" line="658"/>
                <declaration name="compatibleFRC" type="boolean" line="659"/>
                <scope line="660">
                    <declaration name="gvAT" type="AffineTransform" line="661"/>
                    <declaration name="g2dAT" type="AffineTransform" line="662"/>
                    <declaration name="gvMatrix" type="double[]" line="663"/>
                    <declaration name="g2dMatrix" type="double[]" line="664"/>
                    <scope line="668">
                        <scope line="669"/>
                    </scope>
                </scope>
                <declaration name="str" type="String" line="675"/>
                <declaration name="numFonts" type="int" line="676"/>
                <scope line="677"/>
                <declaration name="positions" type="float[]" line="680"/>
                <declaration name="noPositionAdjustments" type="boolean" line="681"/>
                <declaration name="gvAdvancePt" type="Point2D" line="682"/>
                <declaration name="gvAdvanceX" type="float" line="683"/>
                <declaration name="layoutAffectsAdvance" type="boolean" line="684"/>
                <scope line="685">
                    <declaration name="map" type="Map&lt;TextAttribute,?&gt;" line="686"/>
                    <declaration name="o" type="Object" line="687"/>
                    <declaration name="tracking" type="boolean" line="688"/>
                    <scope line="689"/>
                    <scope line="692">
                        <declaration name="bounds" type="Rectangle2D" line="693"/>
                        <declaration name="strAdvanceX" type="float" line="694"/>
                        <scope line="695"/>
                    </scope>
                </scope>
                <scope line="700"/>
                <scope line="704"/>
                <scope line="708"/>
                <scope line="711"/>
                <scope line="714">
                    <declaration name="s" type="String" line="715"/>
                </scope>
            </method>
            <method name="samePositions" type="boolean" line="720">
                <params>
                    <param name="gv" type="GlyphVector"/>
                    <param name="gvcodes" type="int[]"/>
                    <param name="origCodes" type="int[]"/>
                    <param name="origPositions" type="float[]"/>
                </params>
                <declaration name="numGlyphs" type="int" line="721"/>
                <declaration name="gvpos" type="float[]" line="722"/>
                <scope line="723"/>
                <scope line="726">
                    <scope line="727"/>
                </scope>
            </method>
            <method name="canDrawStringToWidth" type="boolean" line="733"/>
            <method name="getGlyphToCharMapForFont" type="char[]" line="736">
                <params>
                    <param name="font2D" type="Font2D"/>
                </params>
                <declaration name="numGlyphs" type="int" line="737"/>
                <declaration name="missingGlyph" type="int" line="738"/>
                <declaration name="glyphToCharMap" type="char[]" line="739"/>
                <declaration name="glyph" type="int" line="740"/>
                <scope line="741"/>
                <scope line="744">
                    <scope line="745"/>
                    <scope line="749"/>
                </scope>
            </method>
            <javadoc line="755">
                Strokes the outline of a Shape using the settings of the current
                  graphics state.  The rendering attributes applied include the
                  clip, transform, paint or color, composite and stroke attributes.                
                <param>
                    s The shape to be drawn.                    
                </param>
                <see>
                    #setStroke                    
                </see>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
                <see>
                    #setComposite                    
                </see>
            </javadoc>
            <method name="draw" type="void" line="769">
                <params>
                    <param name="s" type="Shape"/>
                </params>
            </method>
            <javadoc line="772">
                Fills the interior of a Shape using the settings of the current
                  graphics state. The rendering attributes applied include the
                  clip, transform, paint or color, and composite.                
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="fill" type="void" line="784">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <declaration name="paint" type="Paint" line="785"/>
                <scope line="786"/>
                <scope line="789"/>
            </method>
            <method name="fill" type="void" line="793">
                <params>
                    <param name="s" type="Shape"/>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="deviceTransform" type="AffineTransform" line="794"/>
                <scope line="795"/>
            </method>
            <method name="deviceFill" type="void" line="800"/>
            <javadoc line="800">
                Fill the path defined by &lt;code&gt;pathIter&lt;/code&gt;
                  with the specified color.
                  The path is provided in device coordinates.                
            </javadoc>
            <method name="deviceClip" type="void" line="806"/>
            <method name="deviceFrameRect" type="void" line="807"/>
            <method name="deviceDrawLine" type="void" line="808"/>
            <method name="deviceFillRect" type="void" line="809"/>
            <method name="getBufferedImage" type="BufferedImage" line="810">
                <params>
                    <param name="img" type="Image"/>
                </params>
                <scope line="811"/>
                <scope line="814"/>
                <scope line="817"/>
                <scope line="820"/>
            </method>
            <javadoc line="824">
                Return true if the BufferedImage argument has non-opaque
                  bits in it and therefore can not be directly rendered by
                  GDI. Return false if the image is opaque. If this function
                  can not tell for sure whether the image has transparent
                  pixels then it assumes that it does.                
            </javadoc>
            <method name="hasTransparentPixels" type="boolean" line="831">
                <params>
                    <param name="bufferedImage" type="BufferedImage"/>
                </params>
                <declaration name="colorModel" type="ColorModel" line="832"/>
                <declaration name="hasTransparency" type="boolean" line="833"/>
                <scope line="834">
                    <scope line="835">
                        <declaration name="db" type="DataBuffer" line="836"/>
                        <declaration name="sm" type="SampleModel" line="837"/>
                        <scope line="838">
                            <declaration name="psm" type="SinglePixelPackedSampleModel" line="839"/>
                            <declaration name="int_data" type="int[]" line="840"/>
                            <declaration name="x" type="int" line="841"/>
                            <declaration name="y" type="int" line="842"/>
                            <declaration name="w" type="int" line="843"/>
                            <declaration name="h" type="int" line="844"/>
                            <declaration name="stride" type="int" line="845"/>
                            <declaration name="hastranspixel" type="boolean" line="846"/>
                            <scope line="847">
                                <declaration name="yoff" type="int" line="848"/>
                                <scope line="849">
                                    <scope line="850"/>
                                </scope>
                                <scope line="855"/>
                            </scope>
                            <scope line="859"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isBitmaskTransparency" type="boolean" line="867">
                <params>
                    <param name="bufferedImage" type="BufferedImage"/>
                </params>
                <declaration name="colorModel" type="ColorModel" line="868"/>
            </method>
            <method name="drawBitmaskImage" type="boolean" line="871">
                <params>
                    <param name="bufferedImage" type="BufferedImage"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="srcWidth" type="int"/>
                    <param name="srcHeight" type="int"/>
                </params>
                <declaration name="colorModel" type="ColorModel" line="872"/>
                <declaration name="icm" type="IndexColorModel" line="873"/>
                <declaration name="pixels" type="int[]" line="874"/>
                <scope line="875"/>
                <scope line="878"/>
                <scope line="881"/>
                <scope line="884"/>
                <scope line="887"/>
                <scope line="890"/>
                <declaration name="subImage" type="BufferedImage" line="893"/>
                <declaration name="raster" type="Raster" line="894"/>
                <declaration name="transpixel" type="int" line="895"/>
                <declaration name="alphas" type="byte[]" line="896"/>
                <scope line="898"/>
                <declaration name="rw" type="int" line="901"/>
                <declaration name="rh" type="int" line="902"/>
                <scope line="903"/>
                <declaration name="right" type="int" line="906"/>
                <scope line="907"/>
                <scope line="911"/>
                <scope line="915"/>
                <scope line="919"/>
                <scope line="924">
                    <declaration name="startx" type="int" line="925"/>
                    <scope line="927">
                        <scope line="928">
                            <scope line="929"/>
                        </scope>
                        <scope line="937"/>
                    </scope>
                    <scope line="941"/>
                </scope>
            </method>
            <method name="drawImageToPlatform" type="boolean" line="950"/>
            <javadoc line="950">
                The various &lt;code&gt;drawImage()&lt;/code&gt; methods for
                  &lt;code&gt;PathGraphics&lt;/code&gt; are all decomposed
                  into an invocation of &lt;code&gt;drawImageToPlatform&lt;/code&gt;.
                  The portion of the passed in image defined by
                  &lt;code&gt;srcX, srcY, srcWidth, and srcHeight&lt;/code&gt;
                  is transformed by the supplied AffineTransform and
                  drawn using PS to the printer context.                
                <param>
                    img     The image to be drawn.
                      This method does nothing if <code>img</code> is null.                    
                </param>
                <param>
                    xform   Used to tranform the image before drawing.
                      This can be null.                    
                </param>
                <param>
                    bgcolor This color is drawn where the image has transparent
                      pixels. If this parameter is null then the
                      pixels already in the destination should show
                      through.                    
                </param>
                <param>
                    srcX    With srcY this defines the upper-left corner
                      of the portion of the image to be drawn.                    
                </param>
                <param>
                    srcY    With srcX this defines the upper-left corner
                      of the portion of the image to be drawn.                    
                </param>
                <param>
                    srcWidth    The width of the portion of the image to
                      be drawn.                    
                </param>
                <param>
                    srcHeight   The height of the portion of the image to
                      be drawn.                    
                </param>
                <param>
                    handlingTransparency if being recursively called to
                      print opaque region of transparent image                    
                </param>
            </javadoc>
            <javadoc line="978">
                Draws as much of the specified image as is currently available.
                  The image is drawn with its top-left corner at
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s coordinate
                  space. Transparent pixels in the image do not affect whatever
                  pixels are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  complete image has not yet been loaded, and it has not been dithered
                  and converted for the current output device.
                  &lt;p&gt;
                  If the image has not yet been completely loaded, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.                
                <param>
                    img the specified image to be drawn.                    
                </param>
                <param>
                    x   the <i>x</i> coordinate.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="1003">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1006">
                Draws as much of the specified image as has already been scaled
                  to fit inside the specified rectangle.
                  &lt;p&gt;
                  The image is drawn inside the specified rectangle of this
                  graphics context&apos;s coordinate space, and is scaled if
                  necessary. Transparent pixels do not affect whatever pixels
                  are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  entire image has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the image observer by calling its &lt;code&gt;imageUpdate&lt;/code&gt; method.
                  &lt;p&gt;
                  A scaled version of an image will not necessarily be
                  available immediately just because an unscaled version of the
                  image has been constructed for this output device.  Each size of
                  the image may be cached separately and generated from the original
                  data in a separate image production sequence.                
                <param>
                    img    the specified image to be drawn.                    
                </param>
                <param>
                    x      the <i>x</i> coordinate.                    
                </param>
                <param>
                    y      the <i>y</i> coordinate.                    
                </param>
                <param>
                    width  the width of the rectangle.                    
                </param>
                <param>
                    height the height of the rectangle.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="1040">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <method name="drawImage" type="boolean" line="1043">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="1044"/>
                <declaration name="result" type="boolean" line="1047"/>
                <declaration name="srcWidth" type="int" line="1048"/>
                <declaration name="srcHeight" type="int" line="1049"/>
                <scope line="1050"/>
                <scope line="1053"/>
            </method>
            <javadoc line="1058">
                Draws as much of the specified image as has already been scaled
                  to fit inside the specified rectangle.
                  &lt;p&gt;
                  The image is drawn inside the specified rectangle of this
                  graphics context&apos;s coordinate space, and is scaled if
                  necessary. Transparent pixels are drawn in the specified
                  background color.
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  entire image has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  A scaled version of an image will not necessarily be
                  available immediately just because an unscaled version of the
                  image has been constructed for this output device.  Each size of
                  the image may be cached separately and generated from the original
                  data in a separate image production sequence.                
                <param>
                    img       the specified image to be drawn.
                      This method does nothing if <code>img</code> is null.                    
                </param>
                <param>
                    x         the <i>x</i> coordinate.                    
                </param>
                <param>
                    y         the <i>y</i> coordinate.                    
                </param>
                <param>
                    width     the width of the rectangle.                    
                </param>
                <param>
                    height    the height of the rectangle.                    
                </param>
                <param>
                    bgcolor   the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="1098">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="1099"/>
                <declaration name="result" type="boolean" line="1102"/>
                <declaration name="srcWidth" type="int" line="1103"/>
                <declaration name="srcHeight" type="int" line="1104"/>
                <scope line="1105"/>
                <scope line="1108"/>
            </method>
            <javadoc line="1113">
                Draws as much of the specified area of the specified image as is
                  currently available, scaling it on the fly to fit inside the
                  specified area of the destination drawable surface. Transparent pixels
                  do not affect whatever pixels are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  image area to be drawn has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  This method always uses the unscaled version of the image
                  to render the scaled rectangle and performs the required
                  scaling on the fly. It does not use a cached, scaled version
                  of the image for this operation. Scaling of the image from source
                  to destination is performed such that the first coordinate
                  of the source rectangle is mapped to the first coordinate of
                  the destination rectangle, and the second source coordinate is
                  mapped to the second destination coordinate. The subimage is
                  scaled and flipped as needed to preserve those mappings.                
                <param>
                    img the specified image to be drawn                    
                </param>
                <param>
                    dx1 the <i>x</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy1 the <i>y</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dx2 the <i>x</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy2 the <i>y</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    sx1 the <i>x</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy1 the <i>y</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sx2 the <i>x</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy2 the <i>y</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    observer object to be notified as more of the image is
                      scaled and converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="1160">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1163">
                Draws as much of the specified area of the specified image as is
                  currently available, scaling it on the fly to fit inside the
                  specified area of the destination drawable surface.
                  &lt;p&gt;
                  Transparent pixels are drawn in the specified background color.
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  image area to be drawn has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that draws the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  This method always uses the unscaled version of the image
                  to render the scaled rectangle and performs the required
                  scaling on the fly. It does not use a cached, scaled version
                  of the image for this operation. Scaling of the image from source
                  to destination is performed such that the first coordinate
                  of the source rectangle is mapped to the first coordinate of
                  the destination rectangle, and the second source coordinate is
                  mapped to the second destination coordinate. The subimage is
                  scaled and flipped as needed to preserve those mappings.                
                <param>
                    img the specified image to be drawn
                      This method does nothing if <code>img</code> is null.                    
                </param>
                <param>
                    dx1 the <i>x</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy1 the <i>y</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dx2 the <i>x</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy2 the <i>y</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    sx1 the <i>x</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy1 the <i>y</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sx2 the <i>x</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy2 the <i>y</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    bgcolor the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer object to be notified as more of the image is
                      scaled and converted.                    
                </param>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="1217">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
                <scope line="1218"/>
                <declaration name="imgWidth" type="int" line="1221"/>
                <declaration name="imgHeight" type="int" line="1222"/>
                <scope line="1223"/>
                <declaration name="srcWidth" type="int" line="1226"/>
                <declaration name="srcHeight" type="int" line="1227"/>
                <declaration name="scalex" type="float" line="1228"/>
                <declaration name="scaley" type="float" line="1229"/>
                <declaration name="xForm" type="AffineTransform" line="1230"/>
                <declaration name="tmp" type="int" line="1231"/>
                <scope line="1232"/>
                <scope line="1237"/>
                <scope line="1242"/>
                <scope line="1245"/>
                <scope line="1248"/>
                <scope line="1251"/>
                <scope line="1254"/>
                <scope line="1257"/>
                <scope line="1260"/>
                <scope line="1263"/>
                <scope line="1268"/>
            </method>
            <javadoc line="1273">
                Draws an image, applying a transform from image space into user space
                  before drawing.
                  The transformation from user space into device space is done with
                  the current transform in the Graphics2D.
                  The given transformation is applied to the image before the
                  transform attribute in the Graphics2D state is applied.
                  The rendering attributes applied include the clip, transform,
                  and composite attributes. Note that the result is
                  undefined, if the given transform is noninvertible.                
                <param>
                    img The image to be drawn.
                      This method does nothing if <code>img</code> is null.                    
                </param>
                <param>
                    xform The transformation from image space into user space.                    
                </param>
                <param>
                    obs The image observer to be notified as more of the image
                      is converted.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1294">
                <params>
                    <param name="img" type="Image"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="obs" type="ImageObserver"/>
                </params>
                <scope line="1295"/>
                <declaration name="result" type="boolean" line="1298"/>
                <declaration name="srcWidth" type="int" line="1299"/>
                <declaration name="srcHeight" type="int" line="1300"/>
                <scope line="1301"/>
                <scope line="1304"/>
            </method>
            <javadoc line="1309">
                Draws a BufferedImage that is filtered with a BufferedImageOp.
                  The rendering attributes applied include the clip, transform
                  and composite attributes.  This is equivalent to:
                  &lt;pre&gt;
                  img1 = op.filter(img, null);
                  drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);
                  &lt;/pre&gt;                
                <param>
                    op The filter to be applied to the image before drawing.                    
                </param>
                <param>
                    img The BufferedImage to be drawn.
                      This method does nothing if <code>img</code> is null.                    
                </param>
                <param>
                    x,y The location in user space where the image should be drawn.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawImage" type="void" line="1327">
                <params>
                    <param name="img" type="BufferedImage"/>
                    <param name="op" type="BufferedImageOp"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="1328"/>
                <declaration name="srcWidth" type="int" line="1331"/>
                <declaration name="srcHeight" type="int" line="1332"/>
                <scope line="1333"/>
                <scope line="1336"/>
                <scope line="1339">
                    <declaration name="xform" type="AffineTransform" line="1340"/>
                </scope>
            </method>
            <javadoc line="1344">
                Draws an image, applying a transform from image space into user space
                  before drawing.
                  The transformation from user space into device space is done with
                  the current transform in the Graphics2D.
                  The given transformation is applied to the image before the
                  transform attribute in the Graphics2D state is applied.
                  The rendering attributes applied include the clip, transform,
                  and composite attributes. Note that the result is
                  undefined, if the given transform is noninvertible.                
                <param>
                    img The image to be drawn.
                      This method does nothing if <code>img</code> is null.                    
                </param>
                <param>
                    xform The transformation from image space into user space.                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawRenderedImage" type="void" line="1363">
                <params>
                    <param name="img" type="RenderedImage"/>
                    <param name="xform" type="AffineTransform"/>
                </params>
                <scope line="1364"/>
                <declaration name="bufferedImage" type="BufferedImage" line="1367"/>
                <declaration name="srcWidth" type="int" line="1368"/>
                <declaration name="srcHeight" type="int" line="1369"/>
                <scope line="1370"/>
                <scope line="1373"/>
                <scope line="1376">
                    <declaration name="imageGraphics" type="Graphics2D" line="1378"/>
                </scope>
            </method>
        </class>
    </source>