<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <class name="AbstractPoller" line="7">
            <implements interface="Runnable"/>
            <javadoc line="7">
                Base implementation of background poller thread used in watch service
                  implementations. A poller thread waits on events from the file system and
                  also services &quot;requests&quot; from clients to register for new events or cancel
                  existing registrations.                
            </javadoc>
            <declaration name="requestList" type="LinkedList&amp;lt;Request&amp;gt;" line="14"/>
            <declaration name="shutdown" type="boolean" line="15"/>
            <method name="AbstractPoller" type="constructor" line="16"/>
            <javadoc line="20">
                Starts the poller thread                
            </javadoc>
            <method name="start" type="void" line="23">
                <declaration name="thisRunnable" type="Runnable" line="24"/>
                <anonymous_class line="25">
                    <method name="run" type="Object" line="26">
                        <declaration name="thr" type="Thread" line="27"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="wakeup" type="void" line="35"/>
            <javadoc line="35">
                Wakeup poller thread so that it can service pending requests                
            </javadoc>
            <method name="implRegister" type="Object" line="39"/>
            <javadoc line="39">
                Executed by poller thread to register directory for changes                
            </javadoc>
            <method name="implCancelKey" type="void" line="43"/>
            <javadoc line="43">
                Executed by poller thread to cancel key                
            </javadoc>
            <method name="implCloseAll" type="void" line="47"/>
            <javadoc line="47">
                Executed by poller thread to shutdown and cancel all keys                
            </javadoc>
            <javadoc line="51">
                Requests, and waits on, poller thread to register given file.                
            </javadoc>
            <method name="register" type="WatchKey" line="54">
                <params>
                    <param name="dir" type="Path"/>
                    <param name="events" type="WatchEvent.Kind&lt;?&gt;[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
                <declaration name="eventSet" type="Set&amp;lt;WatchEvent.Kind&amp;lt;?&amp;gt;&amp;gt;" line="57"/>
                <scope line="58">
                    <scope line="59"/>
                    <scope line="63"/>
                </scope>
            </method>
            <javadoc line="72">
                Cancels, and waits on, poller thread to cancel given key.                
            </javadoc>
            <method name="cancel" type="void" line="75">
                <params>
                    <param name="key" type="WatchKey"/>
                </params>
                <scope line="76"/>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Shutdown poller thread                
            </javadoc>
            <method name="close" type="void" line="86"/>
            <declaration name="RequestType" type="enum" line="89"/>
            <javadoc line="89">
                Types of request that the poller thread must handle                
            </javadoc>
            <scope line="92"/>
            <class name="Request" line="93">
                <javadoc line="93">
                    Encapsulates a request (command) to the poller thread.                    
                </javadoc>
                <declaration name="type" type="RequestType" line="97"/>
                <declaration name="params" type="Object[]" line="98"/>
                <declaration name="completed" type="boolean" line="99"/>
                <declaration name="result" type="Object" line="100"/>
                <method name="Request" type="constructor" line="101">
                    <params>
                        <param name="type" type="RequestType"/>
                        <param name="params" type="Object"/>
                    </params>
                </method>
                <method name="type" type="RequestType" line="105"/>
                <method name="parameters" type="Object[]" line="108"/>
                <method name="release" type="void" line="111">
                    <params>
                        <param name="result" type="Object"/>
                    </params>
                    <scope line="112"/>
                </method>
                <javadoc line="118">
                    Await completion of the request. The return value is the result of
                      the request.                    
                </javadoc>
                <method name="awaitResult" type="Object" line="122">
                    <scope line="123">
                        <scope line="124">
                            <scope line="125"/>
                            <scope line="128"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="135">
                Enqueues request to poller thread and waits for result                
            </javadoc>
            <method name="invoke" type="Object" line="138">
                <params>
                    <param name="type" type="RequestType"/>
                    <param name="params" type="Object"/>
                </params>
                <declaration name="req" type="Request" line="139"/>
                <scope line="140">
                    <scope line="141"/>
                </scope>
                <declaration name="result" type="Object" line="147"/>
            </method>
            <javadoc line="152">
                Invoked by poller thread to process all pending requests                
                <return>
                    true if poller thread should shutdown                    
                </return>
            </javadoc>
            <method name="processRequests" type="boolean" line="156">
                <scope line="157">
                    <declaration name="req" type="Request" line="158"/>
                    <scope line="159">
                        <scope line="160"/>
                        <scope line="165">
                            <declaration name="params" type="Object[]" line="166"/>
                            <declaration name="path" type="Path" line="167"/>
                            <declaration name="events" type="Set&amp;lt;? extends WatchEvent.Kind&amp;lt;?&amp;gt;&amp;gt;" line="168"/>
                            <declaration name="modifiers" type="WatchEvent.Modifier[]" line="169"/>
                        </scope>
                        <scope line="174">
                            <declaration name="params" type="Object[]" line="175"/>
                            <declaration name="key" type="WatchKey" line="176"/>
                        </scope>
                        <scope line="182"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>