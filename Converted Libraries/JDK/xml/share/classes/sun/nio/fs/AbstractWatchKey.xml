<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.util"/>
        <class name="AbstractWatchKey" line="31">
            <comment line="54">
                reference to watcher                
            </comment>
            <comment line="57">
                reference to the original directory                
            </comment>
            <comment line="60">
                key state                
            </comment>
            <comment line="63">
                pending events                
            </comment>
            <comment line="66">
                maps a context to the last event for the context (iff the last queued                
            </comment>
            <comment line="67">
                event for the context is an ENTRY_MODIFY event).                
            </comment>
            <implements interface="WatchKey"/>
            <javadoc line="31">
                Base implementation class for watch keys.                
            </javadoc>
            <declaration name="MAX_EVENT_LIST_SIZE" type="int" line="37"/>
            <javadoc line="37">
                Maximum size of event list (in the future this may be tunable)                
            </javadoc>
            <declaration name="OVERFLOW_EVENT" type="Event&lt;Object&gt;" line="42"/>
            <javadoc line="42">
                Special event to signal overflow                
            </javadoc>
            <javadoc line="48">
                Possible key states                
            </javadoc>
            <declaration name="watcher" type="AbstractWatchService" line="54"/>
            <declaration name="dir" type="Path" line="57"/>
            <declaration name="state" type="State" line="60"/>
            <declaration name="events" type="List&lt;WatchEvent&lt;?&gt;&gt;" line="63"/>
            <declaration name="lastModifyEvents" type="Map&lt;Object,WatchEvent&lt;?&gt;&gt;" line="67"/>
            <method name="AbstractWatchKey" type="constructor" line="69">
                <params>
                    <param name="dir" type="Path"/>
                    <param name="watcher" type="AbstractWatchService"/>
                </params>
            </method>
            <method name="watcher" type="AbstractWatchService" line="77"/>
            <javadoc line="81">
                Return the original watchable (Path)                
            </javadoc>
            <method name="watchable" type="Path" line="85"/>
            <javadoc line="89">
                Enqueues this key to the watch service                
            </javadoc>
            <method name="signal" type="void" line="92">
                <scope line="93">
                    <scope line="94"/>
                </scope>
            </method>
            <javadoc line="101">
                Adds the event to this key and signals it.                
            </javadoc>
            <method name="signalEvent" type="void" line="105">
                <params>
                    <param name="kind" type="WatchEvent.Kind<?>"/>
                    <param name="context" type="Object"/>
                </params>
                <comment line="110">
                    if the previous event is an OVERFLOW event or this is a                    
                </comment>
                <comment line="111">
                    repeated event then we simply increment the counter                    
                </comment>
                <comment line="121">
                    if this is a modify event and the last entry for the context                    
                </comment>
                <comment line="122">
                    is a modify event then we simply increment the count                    
                </comment>
                <comment line="132">
                    not a modify event so remove from the map as the                    
                </comment>
                <comment line="133">
                    last event will no longer be a modify event.                    
                </comment>
                <comment line="138">
                    if the list has reached the limit then drop pending events                    
                </comment>
                <comment line="139">
                    and queue an OVERFLOW event                    
                </comment>
                <comment line="147">
                    non-repeated event                    
                </comment>
                <comment line="153">
                    drop all pending events                    
                </comment>
                <declaration name="isModify" type="boolean" line="106"/>
                <scope line="107">
                    <declaration name="size" type="int" line="108"/>
                    <scope line="109">
                        <declaration name="prev" type="WatchEvent&lt;?&gt;" line="112"/>
                        <scope line="116"/>
                        <scope line="123">
                            <scope line="124">
                                <declaration name="ev" type="WatchEvent&lt;?&gt;" line="125"/>
                                <scope line="126"/>
                            </scope>
                            <scope line="131"/>
                        </scope>
                        <scope line="140"/>
                    </scope>
                    <declaration name="ev" type="Event&lt;Object&gt;" line="148"/>
                    <scope line="150"/>
                    <scope line="152"/>
                </scope>
            </method>
            <method name="pollEvents" type="List<WatchEvent<?>>" line="163">
                <scope line="164">
                    <declaration name="result" type="List&lt;WatchEvent&lt;?&gt;&gt;" line="165"/>
                </scope>
            </method>
            <method name="reset" type="boolean" line="173">
                <comment line="179">
                    pending events so re-queue key                    
                </comment>
                <scope line="174">
                    <scope line="175">
                        <scope line="176"/>
                        <scope line="178"/>
                    </scope>
                </scope>
            </method>
            <class name="Event" line="187">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <comment line="195">
                    synchronize on watch key to access/increment count                    
                </comment>
                <comment line="219">
                    for repeated events                    
                </comment>
                <implements interface="WatchEvent">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <javadoc line="187">
                    WatchEvent implementation                    
                </javadoc>
                <declaration name="kind" type="WatchEvent.Kind&lt;T&gt;" line="191"/>
                <declaration name="context" type="T" line="192"/>
                <declaration name="count" type="int" line="195"/>
                <method name="Event" type="constructor" line="197">
                    <params>
                        <param name="type" type="WatchEvent.Kind<T>"/>
                        <param name="context" type="T"/>
                    </params>
                </method>
                <method name="kind" type="WatchEvent.Kind<T>" line="204"/>
                <method name="context" type="T" line="209"/>
                <method name="count" type="int" line="214"/>
                <method name="increment" type="void" line="219"/>
            </class>
        </class>
    </source>