<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="com.sun.nio.file.SensitivityWatchEventModifier"/>
        <class name="PollingWatchService" line="12">
            <extends class="AbstractWatchService"/>
            <javadoc line="12">
                Simple WatchService implementation that uses periodic tasks to poll
                  registered directories for changes.  This implementation is for use on
                  operating systems that do not have native file change notification support.                
            </javadoc>
            <declaration name="map" type="Map&amp;lt;Object,PollingWatchKey&amp;gt;" line="18"/>
            <declaration name="scheduledExecutor" type="ScheduledExecutorService" line="19"/>
            <method name="PollingWatchService" type="constructor" line="20">
                <anonymous_class line="21">
                    <method name="newThread" type="Thread" line="22">
                        <params>
                            <param name="r" type="Runnable"/>
                        </params>
                        <declaration name="t" type="Thread" line="23"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="30">
                Register the given file with this watch service                
            </javadoc>
            <method name="register" type="WatchKey" line="33">
                <params>
                    <param name="path" type="Path"/>
                    <param name="events" type="WatchEvent.Kind&lt;?&gt;[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
                <declaration name="eventSet" type="Set&amp;lt;WatchEvent.Kind&amp;lt;?&amp;gt;&amp;gt;" line="35"/>
                <scope line="36">
                    <scope line="37"/>
                    <scope line="41"/>
                </scope>
                <declaration name="sensivity" type="SensitivityWatchEventModifier" line="48"/>
                <scope line="49">
                    <scope line="50">
                        <scope line="52"/>
                    </scope>
                </scope>
                <scope line="60">
                    <declaration name="s" type="SensitivityWatchEventModifier" line="61"/>
                    <anonymous_class line="62">
                        <method name="run" type="PollingWatchKey" line="63"/>
                    </anonymous_class>
                </scope>
                <scope line="69">
                    <declaration name="cause" type="Throwable" line="70"/>
                </scope>
            </method>
            <method name="doPrivilegedRegister" type="PollingWatchKey" line="75">
                <params>
                    <param name="path" type="Path"/>
                    <param name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;"/>
                    <param name="sensivity" type="SensitivityWatchEventModifier"/>
                </params>
                <declaration name="attrs" type="BasicFileAttributes" line="76"/>
                <scope line="77"/>
                <declaration name="fileKey" type="Object" line="80"/>
                <scope line="82">
                    <declaration name="watchKey" type="PollingWatchKey" line="84"/>
                    <scope line="85">
                        <scope line="87"/>
                        <scope line="91"/>
                    </scope>
                </scope>
            </method>
            <method name="implClose" type="void" line="99">
                <scope line="100">
                    <scope line="101">
                        <declaration name="watchKey" type="PollingWatchKey" line="102"/>
                    </scope>
                </scope>
                <anonymous_class line="108">
                    <method name="run" type="Void" line="109"/>
                </anonymous_class>
            </method>
            <class name="CacheEntry" line="116">
                <javadoc line="116">
                    Entry in directory cache to record file last-modified-time and tick-count                    
                </javadoc>
                <declaration name="lastModified" type="long" line="120"/>
                <declaration name="lastTickCount" type="int" line="121"/>
                <method name="CacheEntry" type="constructor" line="122">
                    <params>
                        <param name="lastModified" type="long"/>
                        <param name="lastTickCount" type="int"/>
                    </params>
                </method>
                <method name="lastTickCount" type="int" line="126"/>
                <method name="lastModified" type="long" line="129"/>
                <method name="update" type="void" line="132">
                    <params>
                        <param name="lastModified" type="long"/>
                        <param name="tickCount" type="int"/>
                    </params>
                </method>
            </class>
            <class name="PollingWatchKey" line="137">
                <extends class="AbstractWatchKey"/>
                <javadoc line="137">
                    WatchKey implementation that encapsulates a map of the entries of the
                      entries in the directory. Polling the key causes it to re-scan the
                      directory and queue keys when entries are added, modified, or deleted.                    
                </javadoc>
                <declaration name="fileKey" type="Object" line="143"/>
                <declaration name="events" type="Set&amp;lt;? extends WatchEvent.Kind&amp;lt;?&amp;gt;&amp;gt;" line="144"/>
                <declaration name="poller" type="ScheduledFuture&amp;lt;?&amp;gt;" line="145"/>
                <declaration name="valid" type="boolean" line="146"/>
                <declaration name="tickCount" type="int" line="147"/>
                <declaration name="entries" type="Map&amp;lt;Path,CacheEntry&amp;gt;" line="148"/>
                <method name="PollingWatchKey" type="constructor" line="149">
                    <params>
                        <param name="dir" type="Path"/>
                        <param name="watcher" type="PollingWatchService"/>
                        <param name="fileKey" type="Object"/>
                    </params>
                    <scope line="155">
                        <scope line="156">
                            <declaration name="lastModified" type="long" line="157"/>
                        </scope>
                    </scope>
                    <scope line="161"/>
                </method>
                <method name="fileKey" type="Object" line="165"/>
                <method name="isValid" type="boolean" line="168"/>
                <method name="invalidate" type="void" line="171"/>
                <method name="enable" type="void" line="174">
                    <params>
                        <param name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;"/>
                        <param name="period" type="long"/>
                    </params>
                    <scope line="175">
                        <anonymous_class line="177">
                            <method name="run" type="void" line="178"/>
                        </anonymous_class>
                        <declaration name="thunk" type="Runnable" line="177"/>
                    </scope>
                </method>
                <method name="disable" type="void" line="186">
                    <scope line="187"/>
                </method>
                <method name="cancel" type="void" line="191">
                    <scope line="193"/>
                </method>
                <javadoc line="198">
                    Polls the directory to detect for new files, modified files, or
                      deleted files.                    
                </javadoc>
                <method name="poll" type="void" line="202">
                    <scope line="203"/>
                    <declaration name="stream" type="DirectoryStream&amp;lt;Path&amp;gt;" line="207"/>
                    <scope line="208"/>
                    <scope line="211"/>
                    <scope line="216">
                        <scope line="217">
                            <declaration name="lastModified" type="long" line="218"/>
                            <scope line="219"/>
                            <scope line="222"/>
                            <declaration name="e" type="CacheEntry" line="225"/>
                            <scope line="226">
                                <scope line="228"/>
                                <scope line="232">
                                    <scope line="233"/>
                                </scope>
                            </scope>
                            <scope line="239">
                                <scope line="240"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="247"/>
                    <scope line="249">
                        <scope line="250"/>
                        <scope line="253"/>
                    </scope>
                    <declaration name="i" type="Iterator&amp;lt;Map.Entry&amp;lt;Path,CacheEntry&amp;gt;&amp;gt;" line="256"/>
                    <scope line="257">
                        <declaration name="mapEntry" type="Map.Entry&amp;lt;Path,CacheEntry&amp;gt;" line="258"/>
                        <declaration name="entry" type="CacheEntry" line="259"/>
                        <scope line="260">
                            <declaration name="name" type="Path" line="261"/>
                            <scope line="263"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>