<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="com.sun.nio.file.SensitivityWatchEventModifier"/>
        <class name="PollingWatchService" line="39">
            <extends class="AbstractWatchService"/>
            <comment line="49">
                map of registrations                
            </comment>
            <comment line="53">
                used to execute the periodic tasks that poll for changes                
            </comment>
            <comment line="142">
                registers directory returning a new key if not already registered or
                 existing key if already registered                
            </comment>
            <javadoc line="39">
                Simple WatchService implementation that uses periodic tasks to poll
                  registered directories for changes.  This implementation is for use on
                  operating systems that do not have native file change notification support.                
            </javadoc>
            <declaration name="map" type="Map&lt;Object,PollingWatchKey&gt;" line="49"/>
            <declaration name="scheduledExecutor" type="ScheduledExecutorService" line="53"/>
            <method name="PollingWatchService" type="constructor" line="55">
                <comment line="57">
                    TBD: Make the number of threads configurable                    
                </comment>
                <anonymous_class line="58">
                    <method name="newThread" type="Thread" line="60">
                        <params>
                            <param name="r" type="Runnable"/>
                        </params>
                        <declaration name="t" type="Thread" line="61"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="67">
                Register the given file with this watch service                
            </javadoc>
            <method name="register" type="WatchKey" line="75">
                <params>
                    <param name="path" type="Path"/>
                    <param name="events" type="WatchEvent.Kind<?>[]"/>
                    <param name="modifiers" type="WatchEvent.Modifier"/>
                </params>
                <comment line="77">
                    check events - CCE will be thrown if there are invalid elements                    
                </comment>
                <comment line="83">
                    standard events                    
                </comment>
                <comment line="92">
                    OVERFLOW is ignored                    
                </comment>
                <comment line="99">
                    null/unsupported                    
                </comment>
                <comment line="105">
                    A modifier may be used to specify the sensitivity level                    
                </comment>
                <comment line="119">
                    check if watch service is closed                    
                </comment>
                <comment line="123">
                    registration is done in privileged block as it requires the
                     attributes of the entries in the directory.                    
                </comment>
                <declaration name="eventSet" type="Set&lt;WatchEvent.Kind&lt;?&gt;&gt;" line="79"/>
                <scope line="81">
                    <scope line="86"/>
                    <scope line="92"/>
                </scope>
                <declaration name="sensivity" type="SensitivityWatchEventModifier" line="105"/>
                <scope line="106">
                    <scope line="107">
                        <scope line="110"/>
                    </scope>
                </scope>
                <scope line="124">
                    <declaration name="s" type="SensitivityWatchEventModifier" line="125"/>
                    <anonymous_class line="127">
                        <method name="run" type="PollingWatchKey" line="129"/>
                    </anonymous_class>
                </scope>
                <scope line="133">
                    <declaration name="cause" type="Throwable" line="134"/>
                </scope>
            </method>
            <method name="doPrivilegedRegister" type="PollingWatchKey" line="147">
                <params>
                    <param name="path" type="Path"/>
                    <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                    <param name="sensivity" type="SensitivityWatchEventModifier"/>
                </params>
                <comment line="149">
                    check file is a directory and get its file key if possible                    
                </comment>
                <comment line="158">
                    grab close lock to ensure that watch service cannot be closed                    
                </comment>
                <comment line="167">
                    new registration                    
                </comment>
                <comment line="171">
                    update to existing registration                    
                </comment>
                <declaration name="attrs" type="BasicFileAttributes" line="149"/>
                <scope line="150"/>
                <declaration name="fileKey" type="Object" line="153"/>
                <scope line="158">
                    <declaration name="watchKey" type="PollingWatchKey" line="162"/>
                    <scope line="163">
                        <scope line="165"/>
                        <scope line="169"/>
                    </scope>
                </scope>
            </method>
            <method name="implClose" type="void" line="181">
                <scope line="182">
                    <scope line="183">
                        <declaration name="watchKey" type="PollingWatchKey" line="184"/>
                    </scope>
                </scope>
                <anonymous_class line="190">
                    <method name="run" type="Void" line="192"/>
                </anonymous_class>
            </method>
            <class name="CacheEntry" line="199">
                <comment line="234">
                    current event set                    
                </comment>
                <comment line="237">
                    the result of the periodic task that causes this key to be polled                    
                </comment>
                <comment line="240">
                    indicates if the key is valid                    
                </comment>
                <comment line="243">
                    used to detect files that have been deleted                    
                </comment>
                <comment line="246">
                    map of entries in directory                    
                </comment>
                <comment line="284">
                    enables periodic polling                    
                </comment>
                <comment line="297">
                    disables periodic polling                    
                </comment>
                <javadoc line="199">
                    Entry in directory cache to record file last-modified-time and tick-count                    
                </javadoc>
                <declaration name="lastModified" type="long" line="203"/>
                <declaration name="lastTickCount" type="int" line="204"/>
                <method name="CacheEntry" type="constructor" line="206">
                    <params>
                        <param name="lastModified" type="long"/>
                        <param name="lastTickCount" type="int"/>
                    </params>
                </method>
                <method name="lastTickCount" type="int" line="211"/>
                <method name="lastModified" type="long" line="215"/>
                <method name="update" type="void" line="219">
                    <params>
                        <param name="lastModified" type="long"/>
                        <param name="tickCount" type="int"/>
                    </params>
                </method>
            </class>
            <class name="PollingWatchKey" line="225">
                <extends class="AbstractWatchKey"/>
                <comment line="234">
                    current event set                    
                </comment>
                <comment line="237">
                    the result of the periodic task that causes this key to be polled                    
                </comment>
                <comment line="240">
                    indicates if the key is valid                    
                </comment>
                <comment line="243">
                    used to detect files that have been deleted                    
                </comment>
                <comment line="246">
                    map of entries in directory                    
                </comment>
                <comment line="284">
                    enables periodic polling                    
                </comment>
                <comment line="297">
                    disables periodic polling                    
                </comment>
                <javadoc line="225">
                    WatchKey implementation that encapsulates a map of the entries of the
                      entries in the directory. Polling the key causes it to re-scan the
                      directory and queue keys when entries are added, modified, or deleted.                    
                </javadoc>
                <declaration name="fileKey" type="Object" line="231"/>
                <declaration name="events" type="Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt;" line="234"/>
                <declaration name="poller" type="ScheduledFuture&lt;?&gt;" line="237"/>
                <declaration name="valid" type="boolean" line="240"/>
                <declaration name="tickCount" type="int" line="243"/>
                <declaration name="entries" type="Map&lt;Path,CacheEntry&gt;" line="246"/>
                <method name="PollingWatchKey" type="constructor" line="250">
                    <params>
                        <param name="dir" type="Path"/>
                        <param name="watcher" type="PollingWatchService"/>
                        <param name="fileKey" type="Object"/>
                    </params>
                    <comment line="258">
                        get the initial entries in the directory                        
                    </comment>
                    <comment line="261">
                        don&apos;t follow links                        
                    </comment>
                    <scope line="258">
                        <scope line="259">
                            <declaration name="lastModified" type="long" line="261"/>
                        </scope>
                    </scope>
                    <scope line="265"/>
                </method>
                <method name="fileKey" type="Object" line="270"/>
                <method name="isValid" type="boolean" line="275"/>
                <method name="invalidate" type="void" line="279"/>
                <method name="enable" type="void" line="284">
                    <params>
                        <param name="events" type="Set<? extends WatchEvent.Kind<?>>"/>
                        <param name="period" type="long"/>
                    </params>
                    <comment line="287">
                        update the events                        
                    </comment>
                    <comment line="290">
                        create the periodic task                        
                    </comment>
                    <scope line="285">
                        <anonymous_class line="290">
                            <method name="run" type="void" line="290"/>
                        </anonymous_class>
                        <declaration name="thunk" type="Runnable" line="290"/>
                    </scope>
                </method>
                <method name="disable" type="void" line="297">
                    <scope line="298"/>
                </method>
                <method name="cancel" type="void" line="305">
                    <scope line="307"/>
                </method>
                <javadoc line="313">
                    Polls the directory to detect for new files, modified files, or
                      deleted files.                    
                </javadoc>
                <method name="poll" type="void" line="317">
                    <comment line="323">
                        update tick                        
                    </comment>
                    <comment line="326">
                        open directory                        
                    </comment>
                    <comment line="331">
                        directory is no longer accessible so cancel key                        
                    </comment>
                    <comment line="337">
                        iterate over all entries in directory                        
                    </comment>
                    <comment line="345">
                        unable to get attributes of entry. If file has just
                         been deleted then we&apos;ll report it as deleted on the
                         next poll                        
                    </comment>
                    <comment line="351">
                        lookup cache                        
                    </comment>
                    <comment line="354">
                        new file found                        
                    </comment>
                    <comment line="358">
                        queue ENTRY_CREATE if event enabled                        
                    </comment>
                    <comment line="363">
                        if ENTRY_CREATE is not enabled and ENTRY_MODIFY is
                         enabled then queue event to avoid missing out on
                         modifications to the file immediately after it is
                         created.                        
                    </comment>
                    <comment line="374">
                        check if file has changed                        
                    </comment>
                    <comment line="381">
                        entry in cache so update poll time                        
                    </comment>
                    <comment line="386">
                        ignore for now; if the directory is no longer accessible
                         then the key will be cancelled on the next poll                        
                    </comment>
                    <comment line="390">
                        close directory stream                        
                    </comment>
                    <comment line="394">
                        ignore                        
                    </comment>
                    <comment line="398">
                        iterate over cache to detect entries that have been deleted                        
                    </comment>
                    <comment line="405">
                        remove from map and queue delete event (if enabled)                        
                    </comment>
                    <scope line="318"/>
                    <declaration name="stream" type="DirectoryStream&lt;Path&gt;" line="326"/>
                    <scope line="327"/>
                    <scope line="329"/>
                    <scope line="337">
                        <scope line="338">
                            <declaration name="lastModified" type="long" line="339"/>
                            <scope line="340"/>
                            <scope line="343"/>
                            <declaration name="e" type="CacheEntry" line="351"/>
                            <scope line="352">
                                <scope line="358"/>
                                <scope line="361">
                                    <scope line="366"/>
                                </scope>
                            </scope>
                            <scope line="374">
                                <scope line="375"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="384"/>
                    <scope line="387">
                        <scope line="390"/>
                        <scope line="392"/>
                    </scope>
                    <declaration name="i" type="Iterator&lt;Map.Entry&lt;Path,CacheEntry&gt;&gt;" line="398"/>
                    <scope line="399">
                        <declaration name="mapEntry" type="Map.Entry&lt;Path,CacheEntry&gt;" line="400"/>
                        <declaration name="entry" type="CacheEntry" line="401"/>
                        <scope line="402">
                            <declaration name="name" type="Path" line="403"/>
                            <scope line="406"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>