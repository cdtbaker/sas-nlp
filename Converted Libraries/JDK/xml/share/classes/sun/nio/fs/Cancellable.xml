<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.fs">
        <import package="sun.misc.Unsafe"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <class name="Cancellable" line="31">
            <comment line="45">
                the following require lock when examining or changing                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="31">
                Base implementation of a task (typically native) that polls a memory location
                  during execution so that it may be aborted/cancelled before completion. The
                  task is executed by invoking the {@link runInterruptibly} method defined
                  here and cancelled by invoking Thread.interrupt.                
            </javadoc>
            <declaration name="unsafe" type="Unsafe" line="39"/>
            <declaration name="pollingAddress" type="long" line="41"/>
            <declaration name="lock" type="Object" line="42"/>
            <declaration name="completed" type="boolean" line="45"/>
            <declaration name="exception" type="Throwable" line="46"/>
            <method name="Cancellable" type="constructor" line="48"/>
            <javadoc line="53">
                Returns the memory address of a 4-byte int that should be polled to
                  detect cancellation.                
            </javadoc>
            <method name="addressToPollForCancel" type="long" line="57"/>
            <javadoc line="61">
                The value to write to the polled memory location to indicate that the
                  task has been cancelled. If this method is not overridden then it
                  defaults to MAX_VALUE.                
            </javadoc>
            <method name="cancelValue" type="int" line="66"/>
            <javadoc line="70">
                &quot;cancels&quot; the task by writing bits into memory location that it polled
                  by the task.                
            </javadoc>
            <method name="cancel" type="void" line="74">
                <scope line="75">
                    <scope line="76"/>
                </scope>
            </method>
            <javadoc line="82">
                Returns the exception thrown by the task or null if the task completed
                  successfully.                
            </javadoc>
            <method name="exception" type="Throwable" line="86">
                <scope line="87"/>
            </method>
            <method name="run" type="void" line="93">
                <scope line="94"/>
                <scope line="96">
                    <scope line="97"/>
                </scope>
                <scope line="100">
                    <scope line="101"/>
                </scope>
            </method>
            <method name="implRun" type="void" line="108"/>
            <javadoc line="108">
                The task body. This should periodically poll the memory location
                  to check for cancellation.                
            </javadoc>
            <javadoc line="114">
                Invokes the given task in its own thread. If this (meaning the current)
                  thread is interrupted then an attempt is make to cancel the background
                  thread by writing into the memory location that it polls cooperatively.                
            </javadoc>
            <method name="runInterruptibly" type="void" line="119">
                <params>
                    <param name="task" type="Cancellable"/>
                </params>
                <declaration name="t" type="Thread" line="120"/>
                <declaration name="cancelledByInterrupt" type="boolean" line="122"/>
                <scope line="123">
                    <scope line="124"/>
                    <scope line="126"/>
                </scope>
                <declaration name="exc" type="Throwable" line="133"/>
            </method>
        </class>
    </source>