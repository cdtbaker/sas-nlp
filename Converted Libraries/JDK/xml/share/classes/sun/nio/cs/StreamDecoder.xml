<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.cs">
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.nio.channels"/>
        <import package="java.nio.charset"/>
        <class name="StreamDecoder" line="36">
            <extends class="Reader"/>
            <comment line="50">
                In order to handle surrogates properly we must never try to produce                
            </comment>
            <comment line="51">
                fewer than two characters at a time.  If we&apos;re only asked to return one                
            </comment>
            <comment line="52">
                character then the other is saved here to be returned later.                
            </comment>
            <comment line="53">
                                
            </comment>
            <comment line="58">
                Factories for java.io.InputStreamReader                
            </comment>
            <comment line="90">
                Factory for java.nio.channels.Channels.newReader                
            </comment>
            <comment line="100">
                -- Public methods corresponding to those in InputStreamReader --                
            </comment>
            <comment line="102">
                All synchronization and state/argument checking is done in these public                
            </comment>
            <comment line="103">
                methods; the concrete stream-decoder subclasses defined below need not                
            </comment>
            <comment line="104">
                do any such checking.                
            </comment>
            <comment line="203">
                -- Charset-based stream decoder impl --                
            </comment>
            <comment line="205">
                In the early stages of the build we haven&apos;t yet built the NIO native                
            </comment>
            <comment line="206">
                code, so guard against that by catching the first UnsatisfiedLinkError                
            </comment>
            <comment line="207">
                and setting this flag so that later attempts fail quickly.                
            </comment>
            <comment line="208">
                                
            </comment>
            <comment line="226">
                Exactly one of these is non-null                
            </comment>
            <declaration name="MIN_BYTE_BUFFER_SIZE" type="int" line="39"/>
            <declaration name="DEFAULT_BYTE_BUFFER_SIZE" type="int" line="40"/>
            <declaration name="isOpen" type="boolean" line="42"/>
            <method name="ensureOpen" type="void" line="44"/>
            <declaration name="haveLeftoverChar" type="boolean" line="53"/>
            <declaration name="leftoverChar" type="char" line="54"/>
            <method name="forInputStreamReader" type="StreamDecoder" line="63">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="lock" type="Object"/>
                    <param name="charsetName" type="String"/>
                </params>
                <declaration name="csn" type="String" line="64"/>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <method name="forInputStreamReader" type="StreamDecoder" line="77">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="lock" type="Object"/>
                    <param name="cs" type="Charset"/>
                </params>
            </method>
            <method name="forInputStreamReader" type="StreamDecoder" line="84">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="lock" type="Object"/>
                    <param name="dec" type="CharsetDecoder"/>
                </params>
            </method>
            <method name="forDecoder" type="StreamDecoder" line="94">
                <params>
                    <param name="ch" type="ReadableByteChannel"/>
                    <param name="dec" type="CharsetDecoder"/>
                    <param name="minBufferCap" type="int"/>
                </params>
            </method>
            <method name="getEncoding" type="String" line="105"/>
            <method name="read" type="int" line="111"/>
            <method name="read0" type="int" line="115">
                <comment line="118">
                    Return the leftover char, if there is one                    
                </comment>
                <comment line="124">
                    Convert more bytes                    
                </comment>
                <comment line="133">
                    FALL THROUGH                    
                </comment>
                <scope line="116">
                    <scope line="119"/>
                    <declaration name="cb" type="char" line="125"/>
                    <declaration name="n" type="int" line="126"/>
                </scope>
            </method>
            <method name="read" type="int" line="143">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="158">
                    Copy the leftover char into the buffer                    
                </comment>
                <comment line="164">
                    Return now if this is all we can produce w/o blocking                    
                </comment>
                <comment line="169">
                    Treat single-character array reads just like read()                    
                </comment>
                <declaration name="off" type="int" line="144"/>
                <declaration name="len" type="int" line="145"/>
                <scope line="146">
                    <scope line="149"/>
                    <declaration name="n" type="int" line="155"/>
                    <scope line="157"/>
                    <scope line="168">
                        <declaration name="c" type="int" line="170"/>
                    </scope>
                </scope>
            </method>
            <method name="ready" type="boolean" line="181">
                <scope line="182"/>
            </method>
            <method name="close" type="void" line="188">
                <scope line="189"/>
            </method>
            <method name="isOpen" type="boolean" line="197"/>
            <declaration name="channelsAvailable" type="boolean" line="208"/>
            <method name="getChannel" type="FileChannel" line="210">
                <params>
                    <param name="in" type="FileInputStream"/>
                </params>
                <scope line="213"/>
                <scope line="215"/>
            </method>
            <declaration name="cs" type="Charset" line="221"/>
            <declaration name="decoder" type="CharsetDecoder" line="222"/>
            <declaration name="bb" type="ByteBuffer" line="223"/>
            <declaration name="in" type="InputStream" line="226"/>
            <declaration name="ch" type="ReadableByteChannel" line="227"/>
            <method name="StreamDecoder" type="constructor" line="229">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="lock" type="Object"/>
                    <param name="cs" type="Charset"/>
                </params>
            </method>
            <method name="StreamDecoder" type="constructor" line="236">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="lock" type="Object"/>
                    <param name="dec" type="CharsetDecoder"/>
                </params>
                <comment line="241">
                    This path disabled until direct buffers are faster                    
                </comment>
                <comment line="252">
                    So that bb is initially empty                    
                </comment>
                <scope line="242"/>
                <scope line="247"/>
            </method>
            <method name="StreamDecoder" type="constructor" line="255">
                <params>
                    <param name="ch" type="ReadableByteChannel"/>
                    <param name="dec" type="CharsetDecoder"/>
                    <param name="mbc" type="int"/>
                </params>
            </method>
            <method name="readBytes" type="int" line="268">
                <comment line="272">
                    Read from the channel                    
                </comment>
                <comment line="277">
                    Read from the input stream, and then update the buffer                    
                </comment>
                <comment line="292">
                    Flip even when an IOException is thrown,                    
                </comment>
                <comment line="293">
                    otherwise the stream will stutter                    
                </comment>
                <scope line="270">
                    <scope line="271">
                        <declaration name="n" type="int" line="273"/>
                    </scope>
                    <scope line="276">
                        <declaration name="lim" type="int" line="278"/>
                        <declaration name="pos" type="int" line="279"/>
                        <declaration name="rem" type="int" line="281"/>
                        <declaration name="n" type="int" line="283"/>
                    </scope>
                </scope>
                <scope line="291"/>
                <declaration name="rem" type="int" line="297"/>
            </method>
            <method name="implRead" type="int" line="302">
                <params>
                    <param name="cbuf" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="304">
                    In order to handle surrogate pairs, this method requires that                    
                </comment>
                <comment line="305">
                    the invoker attempt to read at least two characters.  Saving the                    
                </comment>
                <comment line="306">
                    extra character, if any, at a higher level is easier than trying                    
                </comment>
                <comment line="307">
                    to deal with it here.                    
                </comment>
                <comment line="312">
                    Ensure that cb[0] == cbuf[off]                    
                </comment>
                <comment line="324">
                    Block at most once                    
                </comment>
                <comment line="342">
                    ## Need to flush decoder                    
                </comment>
                <declaration name="cb" type="CharBuffer" line="310"/>
                <declaration name="eof" type="boolean" line="315"/>
                <scope line="316">
                    <declaration name="cr" type="CoderResult" line="317"/>
                    <scope line="318">
                        <declaration name="n" type="int" line="325"/>
                        <scope line="326"/>
                    </scope>
                    <scope line="334"/>
                </scope>
                <scope line="341"/>
                <scope line="346"/>
            </method>
            <method name="encodingName" type="String" line="354"/>
            <method name="inReady" type="boolean" line="360">
                <comment line="363">
                    ## RBC.available()?                    
                </comment>
                <scope line="361"/>
                <scope line="364"/>
            </method>
            <method name="implReady" type="boolean" line="369"/>
            <method name="implClose" type="void" line="373"/>
        </class>
    </source>