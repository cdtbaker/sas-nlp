<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.cs.ext">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetDecoder"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.nio.charset.CoderResult"/>
        <import package="sun.nio.cs.HistoricallyNamedCharset"/>
        <class name="SJIS" line="39">
            <extends class="Charset"/>
            <implements interface="HistoricallyNamedCharset"/>
            <method name="SJIS" type="constructor" line="44"/>
            <method name="historicalName" type="String" line="48"/>
            <method name="contains" type="boolean" line="52">
                <params>
                    <param name="cs" type="Charset"/>
                </params>
            </method>
            <method name="newDecoder" type="CharsetDecoder" line="59"/>
            <method name="newEncoder" type="CharsetEncoder" line="63">
                <comment line="66">
                    Need to force the replacement byte to 0x3f
                     because JIS_X_0208_Encoder defines its own
                     alternative 2 byte substitution to permit it
                     to exist as a self-standing Encoder                    
                </comment>
                <declaration name="replacementBytes" type="byte[]" line="70"/>
            </method>
            <class name="Decoder" line="74">
                <extends class="JIS_X_0208_Decoder"/>
                <comment line="102">
                    Make some protected methods public for use by JISAutoDetect                    
                </comment>
                <implements interface="DelegatableDecoder"/>
                <declaration name="jis0201" type="JIS_X_0201.Decoder" line="77"/>
                <method name="Decoder" type="constructor" line="79">
                    <params>
                        <param name="cs" type="Charset"/>
                    </params>
                </method>
                <method name="decodeSingle" type="char" line="84">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                    <comment line="86">
                        If the high bits are all off, it&apos;s ASCII == Unicode                        
                    </comment>
                    <scope line="86"/>
                </method>
                <method name="decodeDouble" type="char" line="92">
                    <params>
                        <param name="c1" type="int"/>
                        <param name="c2" type="int"/>
                    </params>
                    <declaration name="adjust" type="int" line="93"/>
                    <declaration name="rowOffset" type="int" line="94"/>
                    <declaration name="cellOffset" type="int" line="95"/>
                    <declaration name="b1" type="int" line="96"/>
                    <declaration name="b2" type="int" line="97"/>
                </method>
                <method name="decodeLoop" type="CoderResult" line="102">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                </method>
                <method name="implReset" type="void" line="105"/>
                <method name="implFlush" type="CoderResult" line="108">
                    <params>
                        <param name="out" type="CharBuffer"/>
                    </params>
                </method>
            </class>
            <class name="Encoder" line="113">
                <extends class="JIS_X_0208_Encoder"/>
                <comment line="102">
                    Make some protected methods public for use by JISAutoDetect                    
                </comment>
                <declaration name="jis0201" type="JIS_X_0201.Encoder" line="115"/>
                <declaration name="j0208Index1" type="short[]" line="117"/>
                <declaration name="j0208Index2" type="String[]" line="119"/>
                <method name="Encoder" type="constructor" line="122">
                    <params>
                        <param name="cs" type="Charset"/>
                    </params>
                </method>
                <method name="encodeSingle" type="int" line="127">
                    <params>
                        <param name="inputChar" type="char"/>
                    </params>
                    <comment line="131">
                        \u0000 - \u007F map straight through                        
                    </comment>
                    <declaration name="b" type="byte" line="128"/>
                </method>
                <method name="encodeDouble" type="int" line="140">
                    <params>
                        <param name="ch" type="char"/>
                    </params>
                    <comment line="145">
                        Zero value indicates this Unicode has no mapping to
                         JIS0208.
                         We bail here because the JIS -&gt; SJIS algorithm produces
                         bogus SJIS values for invalid JIS input.  Zero should be
                         the only invalid JIS value in our table.                        
                    </comment>
                    <comment line="153">
                        This algorithm for converting from JIS to SJIS comes from
                         Ken Lunde&apos;s &quot;Understanding Japanese Information Processing&quot;,
                         pg 163.                        
                    </comment>
                    <declaration name="offset" type="int" line="141"/>
                    <declaration name="pos" type="int" line="142"/>
                    <scope line="143"/>
                    <declaration name="c1" type="int" line="157"/>
                    <declaration name="c2" type="int" line="158"/>
                    <declaration name="rowOffset" type="int" line="159"/>
                    <declaration name="cellOffset" type="int" line="160"/>
                </method>
            </class>
        </class>
    </source>