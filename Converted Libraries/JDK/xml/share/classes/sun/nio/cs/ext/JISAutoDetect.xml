<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.cs.ext">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetDecoder"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.nio.charset.CoderResult"/>
        <import package="java.nio.charset.CharacterCodingException"/>
        <import package="java.nio.charset.MalformedInputException"/>
        <import package="sun.nio.cs.HistoricallyNamedCharset"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="java.lang.Character.UnicodeBlock"/>
        <class name="JISAutoDetect" line="14">
            <extends class="Charset"/>
            <implements interface="HistoricallyNamedCharset"/>
            <declaration name="EUCJP_MASK" type="int" line="15"/>
            <declaration name="SJIS2B_MASK" type="int" line="16"/>
            <declaration name="SJIS1B_MASK" type="int" line="17"/>
            <declaration name="EUCJP_KANA1_MASK" type="int" line="18"/>
            <declaration name="EUCJP_KANA2_MASK" type="int" line="19"/>
            <method name="JISAutoDetect" type="constructor" line="20"/>
            <method name="contains" type="boolean" line="23">
                <params>
                    <param name="cs" type="Charset"/>
                </params>
            </method>
            <method name="canEncode" type="boolean" line="26"/>
            <method name="newDecoder" type="CharsetDecoder" line="29"/>
            <method name="historicalName" type="String" line="32"/>
            <method name="newEncoder" type="CharsetEncoder" line="35"/>
            <javadoc line="38">
                accessor methods used to share byte masking tables
                  with the sun.io JISAutoDetect implementation                
            </javadoc>
            <method name="getByteMask1" type="byte[]" line="42"/>
            <method name="getByteMask2" type="byte[]" line="45"/>
            <method name="canBeSJIS1B" type="boolean" line="48">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="canBeEUCJP" type="boolean" line="51">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="canBeEUCKana" type="boolean" line="54">
                <params>
                    <param name="mask1" type="int"/>
                    <param name="mask2" type="int"/>
                </params>
            </method>
            <method name="looksLikeJapanese" type="boolean" line="57">
                <params>
                    <param name="cb" type="CharBuffer"/>
                </params>
                <declaration name="hiragana" type="int" line="58"/>
                <declaration name="katakana" type="int" line="59"/>
                <scope line="60">
                    <declaration name="c" type="char" line="61"/>
                </scope>
            </method>
            <class name="Decoder" line="67">
                <extends class="CharsetDecoder"/>
                <declaration name="SJISName" type="String" line="68"/>
                <declaration name="EUCJPName" type="String" line="69"/>
                <declaration name="detectedDecoder" type="DelegatableDecoder" line="70"/>
                <method name="Decoder" type="constructor" line="71">
                    <params>
                        <param name="cs" type="Charset"/>
                    </params>
                </method>
                <method name="isPlainASCII" type="boolean" line="74">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <method name="copyLeadingASCII" type="void" line="77">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                    <declaration name="start" type="int" line="78"/>
                    <declaration name="limit" type="int" line="79"/>
                    <declaration name="p" type="int" line="80"/>
                    <declaration name="b" type="byte" line="81"/>
                </method>
                <method name="decodeLoop" type="CoderResult" line="85">
                    <params>
                        <param name="cs" type="Charset"/>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                </method>
                <method name="decodeLoop" type="CoderResult" line="89">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                    <scope line="90">
                        <declaration name="cbufsiz" type="int" line="94"/>
                        <declaration name="sandbox" type="CharBuffer" line="95"/>
                        <declaration name="cs2022" type="Charset" line="96"/>
                        <declaration name="dd2022" type="DelegatableDecoder" line="97"/>
                        <declaration name="src2022" type="ByteBuffer" line="98"/>
                        <declaration name="res2022" type="CoderResult" line="99"/>
                        <declaration name="csEUCJ" type="Charset" line="101"/>
                        <declaration name="csSJIS" type="Charset" line="102"/>
                        <declaration name="ddEUCJ" type="DelegatableDecoder" line="103"/>
                        <declaration name="srcEUCJ" type="ByteBuffer" line="104"/>
                        <declaration name="resEUCJ" type="CoderResult" line="106"/>
                        <declaration name="ddSJIS" type="DelegatableDecoder" line="108"/>
                        <declaration name="srcSJIS" type="ByteBuffer" line="109"/>
                        <declaration name="sandboxSJIS" type="CharBuffer" line="110"/>
                        <declaration name="resSJIS" type="CoderResult" line="111"/>
                        <declaration name="guess" type="Charset" line="117"/>
                    </scope>
                </method>
                <method name="implReset" type="void" line="122"/>
                <method name="implFlush" type="CoderResult" line="125">
                    <params>
                        <param name="out" type="CharBuffer"/>
                    </params>
                </method>
                <method name="isAutoDetecting" type="boolean" line="129"/>
                <method name="isCharsetDetected" type="boolean" line="132"/>
                <method name="detectedCharset" type="Charset" line="135"/>
                <javadoc line="139">
                    Returned Shift_JIS Charset name is OS dependent                    
                </javadoc>
                <method name="getSJISName" type="String" line="142">
                    <declaration name="osName" type="String" line="143"/>
                </method>
                <javadoc line="148">
                    Returned EUC-JP Charset name is OS dependent                    
                </javadoc>
                <method name="getEUCJPName" type="String" line="151">
                    <declaration name="osName" type="String" line="152"/>
                </method>
                <declaration name="maskTable1" type="byte" line="156"/>
                <declaration name="maskTable2" type="byte" line="157"/>
            </class>
        </class>
    </source>