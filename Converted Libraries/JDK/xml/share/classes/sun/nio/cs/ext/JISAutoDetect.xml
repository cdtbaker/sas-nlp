<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.cs.ext">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetDecoder"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.nio.charset.CoderResult"/>
        <import package="java.nio.charset.CharacterCodingException"/>
        <import package="java.nio.charset.MalformedInputException"/>
        <import package="sun.nio.cs.HistoricallyNamedCharset"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="java.lang.Character.UnicodeBlock"/>
        <class name="JISAutoDetect" line="42">
            <extends class="Charset"/>
            <comment line="107">
                A heuristic algorithm for guessing if EUC-decoded text really
                 might be Japanese text.  Better heuristics are possible...                
            </comment>
            <implements interface="HistoricallyNamedCharset"/>
            <declaration name="EUCJP_MASK" type="int" line="47"/>
            <declaration name="SJIS2B_MASK" type="int" line="48"/>
            <declaration name="SJIS1B_MASK" type="int" line="49"/>
            <declaration name="EUCJP_KANA1_MASK" type="int" line="50"/>
            <declaration name="EUCJP_KANA2_MASK" type="int" line="51"/>
            <method name="JISAutoDetect" type="constructor" line="53"/>
            <method name="contains" type="boolean" line="57">
                <params>
                    <param name="cs" type="Charset"/>
                </params>
            </method>
            <method name="canEncode" type="boolean" line="64"/>
            <method name="newDecoder" type="CharsetDecoder" line="68"/>
            <method name="historicalName" type="String" line="72"/>
            <method name="newEncoder" type="CharsetEncoder" line="76"/>
            <javadoc line="80">
                accessor methods used to share byte masking tables
                  with the sun.io JISAutoDetect implementation                
            </javadoc>
            <method name="getByteMask1" type="byte[]" line="85"/>
            <method name="getByteMask2" type="byte[]" line="89"/>
            <method name="canBeSJIS1B" type="boolean" line="93">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="canBeEUCJP" type="boolean" line="97">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="canBeEUCKana" type="boolean" line="101">
                <params>
                    <param name="mask1" type="int"/>
                    <param name="mask2" type="int"/>
                </params>
            </method>
            <method name="looksLikeJapanese" type="boolean" line="108">
                <params>
                    <param name="cb" type="CharBuffer"/>
                </params>
                <comment line="110">
                    Fullwidth Hiragana                    
                </comment>
                <comment line="111">
                    Halfwidth Katakana                    
                </comment>
                <declaration name="hiragana" type="int" line="109"/>
                <declaration name="katakana" type="int" line="110"/>
                <scope line="111">
                    <declaration name="c" type="char" line="112"/>
                </scope>
            </method>
            <class name="Decoder" line="119">
                <extends class="CharsetDecoder"/>
                <comment line="270">
                    Mask tables - each entry indicates possibility of first or
                     second byte being SJIS or EUC_JP                    
                </comment>
                <declaration name="SJISName" type="String" line="121"/>
                <declaration name="EUCJPName" type="String" line="122"/>
                <declaration name="detectedDecoder" type="DelegatableDecoder" line="123"/>
                <method name="Decoder" type="constructor" line="125">
                    <params>
                        <param name="cs" type="Charset"/>
                    </params>
                </method>
                <method name="isPlainASCII" type="boolean" line="129">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <method name="copyLeadingASCII" type="void" line="133">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                    <declaration name="start" type="int" line="134"/>
                    <declaration name="limit" type="int" line="135"/>
                    <declaration name="p" type="int" line="136"/>
                    <declaration name="b" type="byte" line="137"/>
                </method>
                <method name="decodeLoop" type="CoderResult" line="144">
                    <params>
                        <param name="cs" type="Charset"/>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                </method>
                <method name="decodeLoop" type="CoderResult" line="149">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                    <comment line="154">
                        All ASCII?                        
                    </comment>
                    <comment line="160">
                        We need to perform double, not float, arithmetic; otherwise
                         we lose low order bits when src is larger than 2**24.                        
                    </comment>
                    <comment line="165">
                        First try ISO-2022-JP, since there is no ambiguity                        
                    </comment>
                    <comment line="174">
                        We must choose between EUC and SJIS                        
                    </comment>
                    <comment line="183">
                        If EUC decoding fails, must be SJIS                        
                    </comment>
                    <comment line="192">
                        If SJIS decoding fails, must be EUC                        
                    </comment>
                    <comment line="196">
                        From here on, we have some ambiguity, and must guess.                        
                    </comment>
                    <comment line="198">
                        We prefer input that does not appear to end mid-character.                        
                    </comment>
                    <comment line="205">
                        end-of-input is after the first byte of the first char?                        
                    </comment>
                    <comment line="209">
                        Use heuristic knowledge of typical Japanese text                        
                    </comment>
                    <scope line="150">
                        <declaration name="cbufsiz" type="int" line="161"/>
                        <declaration name="sandbox" type="CharBuffer" line="162"/>
                        <declaration name="cs2022" type="Charset" line="165"/>
                        <declaration name="dd2022" type="DelegatableDecoder" line="166"/>
                        <declaration name="src2022" type="ByteBuffer" line="168"/>
                        <declaration name="res2022" type="CoderResult" line="169"/>
                        <declaration name="csEUCJ" type="Charset" line="174"/>
                        <declaration name="csSJIS" type="Charset" line="175"/>
                        <declaration name="ddEUCJ" type="DelegatableDecoder" line="177"/>
                        <declaration name="srcEUCJ" type="ByteBuffer" line="179"/>
                        <declaration name="resEUCJ" type="CoderResult" line="181"/>
                        <declaration name="ddSJIS" type="DelegatableDecoder" line="186"/>
                        <declaration name="srcSJIS" type="ByteBuffer" line="188"/>
                        <declaration name="sandboxSJIS" type="CharBuffer" line="189"/>
                        <declaration name="resSJIS" type="CoderResult" line="190"/>
                        <declaration name="guess" type="Charset" line="210"/>
                    </scope>
                </method>
                <method name="implReset" type="void" line="217"/>
                <method name="implFlush" type="CoderResult" line="221">
                    <params>
                        <param name="out" type="CharBuffer"/>
                    </params>
                </method>
                <method name="isAutoDetecting" type="boolean" line="228"/>
                <method name="isCharsetDetected" type="boolean" line="232"/>
                <method name="detectedCharset" type="Charset" line="236"/>
                <javadoc line="242">
                    Returned Shift_JIS Charset name is OS dependent                    
                </javadoc>
                <method name="getSJISName" type="String" line="245">
                    <declaration name="osName" type="String" line="246"/>
                </method>
                <javadoc line="256">
                    Returned EUC-JP Charset name is OS dependent                    
                </javadoc>
                <method name="getEUCJPName" type="String" line="260">
                    <declaration name="osName" type="String" line="261"/>
                </method>
                <declaration name="maskTable1" type="byte" line="271"/>
                <declaration name="maskTable2" type="byte" line="338"/>
            </class>
        </class>
    </source>