<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.cs">
        <import package="java.nio.Buffer"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetDecoder"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.nio.charset.CoderResult"/>
        <import package="java.nio.charset.CodingErrorAction"/>
        <class name="UTF_8" line="57">
            <extends class="Unicode"/>
            <method name="UTF_8" type="constructor" line="59"/>
            <method name="historicalName" type="String" line="63"/>
            <method name="newDecoder" type="CharsetDecoder" line="67"/>
            <method name="newEncoder" type="CharsetEncoder" line="71"/>
            <method name="updatePositions" type="void" line="76">
                <params>
                    <param name="src" type="Buffer"/>
                    <param name="sp" type="int"/>
                    <param name="dst" type="Buffer"/>
                    <param name="dp" type="int"/>
                </params>
            </method>
            <class name="Decoder" line="81">
                <extends class="CharsetDecoder"/>
                <comment line="92">
                    [C2..DF] [80..BF]                    
                </comment>
                <comment line="97">
                    [E0]     [A0..BF] [80..BF]                    
                </comment>
                <comment line="98">
                    [E1..EF] [80..BF] [80..BF]                    
                </comment>
                <comment line="104">
                    [F0]     [90..BF] [80..BF] [80..BF]                    
                </comment>
                <comment line="105">
                    [F1..F3] [80..BF] [80..BF] [80..BF]                    
                </comment>
                <comment line="106">
                    [F4]     [80..8F] [80..BF] [80..BF]                    
                </comment>
                <comment line="107">
                    only check 80-be range here, the [0xf0,0x80...] and [0xf4,0x90-...]                    
                </comment>
                <comment line="108">
                    will be checked by Character.isSupplementaryCodePoint(uc)                    
                </comment>
                <comment line="368">
                    returns -1 if there is malformed byte(s) and the                    
                </comment>
                <comment line="369">
                    &quot;action&quot; for malformed input is not REPLACE.                    
                </comment>
                <comment line="625">
                    returns -1 if there is malformed char(s) and the                    
                </comment>
                <comment line="626">
                    &quot;action&quot; for malformed input is not REPLACE.                    
                </comment>
                <implements interface="ArrayDecoder"/>
                <method name="Decoder" type="constructor" line="83">
                    <params>
                        <param name="cs" type="Charset"/>
                    </params>
                </method>
                <method name="isNotContinuation" type="boolean" line="87">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="isMalformed2" type="boolean" line="92">
                    <params>
                        <param name="b1" type="int"/>
                        <param name="b2" type="int"/>
                    </params>
                </method>
                <method name="isMalformed3" type="boolean" line="98">
                    <params>
                        <param name="b1" type="int"/>
                        <param name="b2" type="int"/>
                        <param name="b3" type="int"/>
                    </params>
                </method>
                <method name="isMalformed4" type="boolean" line="108">
                    <params>
                        <param name="b2" type="int"/>
                        <param name="b3" type="int"/>
                        <param name="b4" type="int"/>
                    </params>
                </method>
                <method name="lookupN" type="CoderResult" line="114">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="n" type="int"/>
                    </params>
                    <scope line="115"/>
                </method>
                <method name="malformedN" type="CoderResult" line="122">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="nb" type="int"/>
                    </params>
                    <comment line="127">
                        5 bytes 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="133">
                        6 bytes 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="139">
                        always 1                        
                    </comment>
                    <comment line="143">
                        no need to lookup b3                        
                    </comment>
                    <comment line="147">
                        we don&apos;t care the speed here                        
                    </comment>
                    <declaration name="b1" type="int" line="125"/>
                    <scope line="126"/>
                    <scope line="132"/>
                    <declaration name="b2" type="int" line="143"/>
                </method>
                <method name="malformed" type="CoderResult" line="167">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="sp" type="int"/>
                        <param name="dst" type="CharBuffer"/>
                        <param name="dp" type="int"/>
                        <param name="nb" type="int"/>
                    </params>
                    <declaration name="cr" type="CoderResult" line="169"/>
                </method>
                <method name="malformed" type="CoderResult" line="176">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="mark" type="int"/>
                        <param name="nb" type="int"/>
                    </params>
                    <declaration name="cr" type="CoderResult" line="178"/>
                </method>
                <method name="xflow" type="CoderResult" line="184">
                    <params>
                        <param name="src" type="Buffer"/>
                        <param name="sp" type="int"/>
                        <param name="sl" type="int"/>
                        <param name="dst" type="Buffer"/>
                        <param name="dp" type="int"/>
                        <param name="nb" type="int"/>
                    </params>
                </method>
                <method name="xflow" type="CoderResult" line="190">
                    <params>
                        <param name="src" type="Buffer"/>
                        <param name="mark" type="int"/>
                        <param name="nb" type="int"/>
                    </params>
                    <declaration name="cr" type="CoderResult" line="191"/>
                </method>
                <method name="decodeArrayLoop" type="CoderResult" line="199">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                    <comment line="200">
                        This method is optimized for ASCII input.                        
                    </comment>
                    <comment line="210">
                        ASCII only loop                        
                    </comment>
                    <comment line="217">
                        1 byte, 7 bits: 0xxxxxxx                        
                    </comment>
                    <comment line="223">
                        2 bytes, 11 bits: 110xxxxx 10xxxxxx                        
                    </comment>
                    <comment line="235">
                        3 bytes, 16 bits: 1110xxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="251">
                        4 bytes, 21 bits: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="266">
                        shortest form check                        
                    </comment>
                    <declaration name="sa" type="byte[]" line="201"/>
                    <declaration name="sp" type="int" line="202"/>
                    <declaration name="sl" type="int" line="203"/>
                    <declaration name="da" type="char[]" line="205"/>
                    <declaration name="dp" type="int" line="206"/>
                    <declaration name="dl" type="int" line="207"/>
                    <declaration name="dlASCII" type="int" line="208"/>
                    <scope line="214">
                        <declaration name="b1" type="int" line="215"/>
                        <scope line="216"/>
                        <scope line="222">
                            <declaration name="b2" type="int" line="226"/>
                        </scope>
                        <scope line="234">
                            <declaration name="b2" type="int" line="238"/>
                            <declaration name="b3" type="int" line="239"/>
                        </scope>
                        <scope line="250">
                            <declaration name="b2" type="int" line="254"/>
                            <declaration name="b3" type="int" line="255"/>
                            <declaration name="b4" type="int" line="256"/>
                            <declaration name="uc" type="int" line="257"/>
                            <scope line="267"/>
                        </scope>
                    </scope>
                </method>
                <method name="decodeBufferLoop" type="CoderResult" line="281">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                    <comment line="287">
                        1 byte, 7 bits: 0xxxxxxx                        
                    </comment>
                    <comment line="289">
                        overflow                        
                    </comment>
                    <comment line="293">
                        2 bytes, 11 bits: 110xxxxx 10xxxxxx                        
                    </comment>
                    <comment line="305">
                        3 bytes, 16 bits: 1110xxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="321">
                        4 bytes, 21 bits: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="336">
                        shortest form check                        
                    </comment>
                    <declaration name="mark" type="int" line="282"/>
                    <declaration name="limit" type="int" line="283"/>
                    <scope line="284">
                        <declaration name="b1" type="int" line="285"/>
                        <scope line="286"/>
                        <scope line="292">
                            <declaration name="b2" type="int" line="296"/>
                        </scope>
                        <scope line="304">
                            <declaration name="b2" type="int" line="308"/>
                            <declaration name="b3" type="int" line="309"/>
                        </scope>
                        <scope line="320">
                            <declaration name="b2" type="int" line="324"/>
                            <declaration name="b3" type="int" line="325"/>
                            <declaration name="b4" type="int" line="326"/>
                            <declaration name="uc" type="int" line="327"/>
                            <scope line="337"/>
                        </scope>
                        <scope line="343"/>
                    </scope>
                </method>
                <method name="decodeLoop" type="CoderResult" line="352">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                        <param name="dst" type="CharBuffer"/>
                    </params>
                </method>
                <method name="getByteBuffer" type="ByteBuffer" line="360">
                    <params>
                        <param name="bb" type="ByteBuffer"/>
                        <param name="ba" type="byte[]"/>
                        <param name="sp" type="int"/>
                    </params>
                </method>
                <method name="decode" type="int" line="369">
                    <params>
                        <param name="sa" type="byte[]"/>
                        <param name="sp" type="int"/>
                        <param name="len" type="int"/>
                        <param name="da" type="char[]"/>
                    </params>
                    <comment line="373">
                        only necessary if malformed                        
                    </comment>
                    <comment line="375">
                        ASCII only optimized loop                        
                    </comment>
                    <comment line="382">
                        1 byte, 7 bits: 0xxxxxxx                        
                    </comment>
                    <comment line="385">
                        2 bytes, 11 bits: 110xxxxx 10xxxxxx                        
                    </comment>
                    <comment line="392">
                        malformedN(bb, 2) always returns 1                        
                    </comment>
                    <comment line="405">
                        3 bytes, 16 bits: 1110xxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="431">
                        4 bytes, 21 bits: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                        
                    </comment>
                    <comment line="445">
                        shortest form check                        
                    </comment>
                    <comment line="471">
                        leading byte for 5 or 6-byte, but don&apos;t have enough                        
                    </comment>
                    <comment line="472">
                        bytes in buffer to check. Consumed rest as malformed.                        
                    </comment>
                    <declaration name="sl" type="int" line="370"/>
                    <declaration name="dp" type="int" line="371"/>
                    <declaration name="dlASCII" type="int" line="372"/>
                    <declaration name="bb" type="ByteBuffer" line="373"/>
                    <scope line="379">
                        <declaration name="b1" type="int" line="380"/>
                        <scope line="381"/>
                        <scope line="384">
                            <scope line="386">
                                <declaration name="b2" type="int" line="387"/>
                                <scope line="388"/>
                                <scope line="393"/>
                            </scope>
                        </scope>
                        <scope line="404">
                            <scope line="406">
                                <declaration name="b2" type="int" line="407"/>
                                <declaration name="b3" type="int" line="408"/>
                                <scope line="409"/>
                                <scope line="416"/>
                            </scope>
                        </scope>
                        <scope line="430">
                            <scope line="432">
                                <declaration name="b2" type="int" line="433"/>
                                <declaration name="b3" type="int" line="434"/>
                                <declaration name="b4" type="int" line="435"/>
                                <declaration name="uc" type="int" line="436"/>
                                <scope line="446"/>
                                <scope line="453"/>
                            </scope>
                        </scope>
                        <scope line="463">
                            <declaration name="cr" type="CoderResult" line="469"/>
                            <scope line="470"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="Encoder" line="482">
                <extends class="CharsetEncoder"/>
                <comment line="92">
                    [C2..DF] [80..BF]                    
                </comment>
                <comment line="97">
                    [E0]     [A0..BF] [80..BF]                    
                </comment>
                <comment line="98">
                    [E1..EF] [80..BF] [80..BF]                    
                </comment>
                <comment line="104">
                    [F0]     [90..BF] [80..BF] [80..BF]                    
                </comment>
                <comment line="105">
                    [F1..F3] [80..BF] [80..BF] [80..BF]                    
                </comment>
                <comment line="106">
                    [F4]     [80..8F] [80..BF] [80..BF]                    
                </comment>
                <comment line="107">
                    only check 80-be range here, the [0xf0,0x80...] and [0xf4,0x90-...]                    
                </comment>
                <comment line="108">
                    will be checked by Character.isSupplementaryCodePoint(uc)                    
                </comment>
                <comment line="368">
                    returns -1 if there is malformed byte(s) and the                    
                </comment>
                <comment line="369">
                    &quot;action&quot; for malformed input is not REPLACE.                    
                </comment>
                <comment line="625">
                    returns -1 if there is malformed char(s) and the                    
                </comment>
                <comment line="626">
                    &quot;action&quot; for malformed input is not REPLACE.                    
                </comment>
                <implements interface="ArrayEncoder"/>
                <method name="Encoder" type="constructor" line="485">
                    <params>
                        <param name="cs" type="Charset"/>
                    </params>
                </method>
                <method name="canEncode" type="boolean" line="489">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <method name="isLegalReplacement" type="boolean" line="493">
                    <params>
                        <param name="repl" type="byte[]"/>
                    </params>
                </method>
                <method name="overflow" type="CoderResult" line="499">
                    <params>
                        <param name="src" type="CharBuffer"/>
                        <param name="sp" type="int"/>
                        <param name="dst" type="ByteBuffer"/>
                        <param name="dp" type="int"/>
                    </params>
                </method>
                <method name="overflow" type="CoderResult" line="504">
                    <params>
                        <param name="src" type="CharBuffer"/>
                        <param name="mark" type="int"/>
                    </params>
                </method>
                <declaration name="sgp" type="Surrogate.Parser" line="509"/>
                <method name="encodeArrayLoop" type="CoderResult" line="512">
                    <params>
                        <param name="src" type="CharBuffer"/>
                        <param name="dst" type="ByteBuffer"/>
                    </params>
                    <comment line="522">
                        ASCII only loop                        
                    </comment>
                    <comment line="528">
                        Have at most seven bits                        
                    </comment>
                    <comment line="533">
                        2 bytes, 11 bits                        
                    </comment>
                    <comment line="539">
                        Have a surrogate pair                        
                    </comment>
                    <comment line="553">
                        2 chars                        
                    </comment>
                    <comment line="555">
                        3 bytes, 16 bits                        
                    </comment>
                    <declaration name="sa" type="char[]" line="513"/>
                    <declaration name="sp" type="int" line="514"/>
                    <declaration name="sl" type="int" line="515"/>
                    <declaration name="da" type="byte[]" line="517"/>
                    <declaration name="dp" type="int" line="518"/>
                    <declaration name="dl" type="int" line="519"/>
                    <declaration name="dlASCII" type="int" line="520"/>
                    <scope line="525">
                        <declaration name="c" type="char" line="526"/>
                        <scope line="527"/>
                        <scope line="532"/>
                        <scope line="538">
                            <declaration name="uc" type="int" line="542"/>
                            <scope line="543"/>
                        </scope>
                        <scope line="554"/>
                    </scope>
                </method>
                <method name="encodeBufferLoop" type="CoderResult" line="570">
                    <params>
                        <param name="src" type="CharBuffer"/>
                        <param name="dst" type="ByteBuffer"/>
                    </params>
                    <comment line="575">
                        Have at most seven bits                        
                    </comment>
                    <comment line="580">
                        2 bytes, 11 bits                        
                    </comment>
                    <comment line="586">
                        Have a surrogate pair                        
                    </comment>
                    <comment line="600">
                        2 chars                        
                    </comment>
                    <comment line="602">
                        3 bytes, 16 bits                        
                    </comment>
                    <declaration name="mark" type="int" line="571"/>
                    <scope line="572">
                        <declaration name="c" type="char" line="573"/>
                        <scope line="574"/>
                        <scope line="579"/>
                        <scope line="585">
                            <declaration name="uc" type="int" line="589"/>
                            <scope line="590"/>
                        </scope>
                        <scope line="601"/>
                    </scope>
                </method>
                <method name="encodeLoop" type="CoderResult" line="617">
                    <params>
                        <param name="src" type="CharBuffer"/>
                        <param name="dst" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="encode" type="int" line="626">
                    <params>
                        <param name="sa" type="char[]"/>
                        <param name="sp" type="int"/>
                        <param name="len" type="int"/>
                        <param name="da" type="byte[]"/>
                    </params>
                    <comment line="631">
                        ASCII only optimized loop                        
                    </comment>
                    <comment line="638">
                        Have at most seven bits                        
                    </comment>
                    <comment line="641">
                        2 bytes, 11 bits                        
                    </comment>
                    <comment line="657">
                        2 chars                        
                    </comment>
                    <comment line="660">
                        3 bytes, 16 bits                        
                    </comment>
                    <declaration name="sl" type="int" line="627"/>
                    <declaration name="dp" type="int" line="628"/>
                    <declaration name="dlASCII" type="int" line="629"/>
                    <scope line="635">
                        <declaration name="c" type="char" line="636"/>
                        <scope line="637"/>
                        <scope line="640"/>
                        <scope line="644">
                            <declaration name="uc" type="int" line="647"/>
                            <scope line="648"/>
                            <scope line="652"/>
                        </scope>
                        <scope line="659"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>