<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.MappedByteBuffer"/>
        <import package="java.nio.channels"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.security.AccessController"/>
        <import package="sun.misc.Cleaner"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="FileChannelImpl" line="39">
            <extends class="FileChannel"/>
            <comment line="43">
                Memory allocation size for mapping buffers                
            </comment>
            <comment line="46">
                Used to make native read and write calls                
            </comment>
            <comment line="49">
                File descriptor                
            </comment>
            <comment line="52">
                File access mode (immutable)                
            </comment>
            <comment line="57">
                Required to prevent finalization of creating stream (immutable)                
            </comment>
            <comment line="60">
                Thread-safe set of IDs of native threads, for signalling                
            </comment>
            <comment line="63">
                Lock for operations involving position and size                
            </comment>
            <comment line="77">
                Used by FileInputStream.getChannel() and RandomAccessFile.getChannel()                
            </comment>
            <comment line="85">
                Used by FileOutputStream.getChannel                
            </comment>
            <comment line="99">
                -- Standard channel operations --                
            </comment>
            <comment line="235">
                -- Other operations --                
            </comment>
            <comment line="373">
                Assume at first that the underlying kernel supports sendfile();
                 set this to false if we find out later that it doesn&apos;t                
            </comment>
            <comment line="378">
                Assume that the underlying kernel sendfile() will work if the target
                 fd is a pipe; set this to false if we find out later that it doesn&apos;t                
            </comment>
            <comment line="383">
                Assume that the underlying kernel sendfile() will work if the target
                 fd is a file; set this to false if we find out later that it doesn&apos;t                
            </comment>
            <comment line="442">
                Maximum size to map when using a mapped buffer                
            </comment>
            <comment line="712">
                -- Memory-mapped buffers --                
            </comment>
            <comment line="910">
                -- Locks --                
            </comment>
            <comment line="914">
                keeps track of locks on this file                
            </comment>
            <comment line="917">
                indicates if file locks are maintained system-wide (as per spec)                
            </comment>
            <comment line="920">
                indicates if the disableSystemWideOverlappingFileLockCheck property
                 has been checked                
            </comment>
            <comment line="924">
                The lock list in J2SE 1.4/5.0 was local to each FileChannel instance so
                 the overlap check wasn&apos;t system wide when there were multiple channels to
                 the same file. This property is used to get 1.4/5.0 behavior if desired.                
            </comment>
            <comment line="1059">
                -- File lock support --                
            </comment>
            <comment line="1112">
                -- Native methods --                
            </comment>
            <comment line="1114">
                Creates a new mapping                
            </comment>
            <comment line="1118">
                Removes an existing mapping                
            </comment>
            <comment line="1121">
                Transfers from src to dst, or returns -2 if kernel can&apos;t do that                
            </comment>
            <comment line="1124">
                Sets or reports this file&apos;s position
                 If offset is -1, the current position is returned
                 otherwise the position is set to offset                
            </comment>
            <comment line="1129">
                Caches fieldIDs                
            </comment>
            <declaration name="allocationGranularity" type="long" line="43"/>
            <declaration name="nd" type="FileDispatcher" line="46"/>
            <declaration name="fd" type="FileDescriptor" line="49"/>
            <declaration name="writable" type="boolean" line="52"/>
            <declaration name="readable" type="boolean" line="53"/>
            <declaration name="append" type="boolean" line="54"/>
            <declaration name="parent" type="Object" line="57"/>
            <declaration name="threads" type="NativeThreadSet" line="60"/>
            <declaration name="positionLock" type="Object" line="63"/>
            <method name="FileChannelImpl" type="constructor" line="67">
                <params>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="readable" type="boolean"/>
                    <param name="writable" type="boolean"/>
                    <param name="append" type="boolean"/>
                    <param name="parent" type="Object"/>
                </params>
            </method>
            <method name="open" type="FileChannel" line="80">
                <params>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="readable" type="boolean"/>
                    <param name="writable" type="boolean"/>
                    <param name="parent" type="Object"/>
                </params>
            </method>
            <method name="open" type="FileChannel" line="88">
                <params>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="readable" type="boolean"/>
                    <param name="writable" type="boolean"/>
                    <param name="append" type="boolean"/>
                    <param name="parent" type="Object"/>
                </params>
            </method>
            <method name="ensureOpen" type="void" line="92"/>
            <method name="implCloseChannel" type="void" line="100">
                <comment line="102">
                    Release and invalidate any locks that we still hold                    
                </comment>
                <comment line="119">
                    Close the fd via the parent stream&apos;s close method.  The parent
                     will reinvoke our close method, which is defined in the
                     superclass AbstractInterruptibleChannel, but the isOpen logic in
                     that method will prevent this method from being reinvoked.                    
                </comment>
                <scope line="102">
                    <scope line="103">
                        <scope line="104">
                            <scope line="105"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="116"/>
                <scope line="124"/>
            </method>
            <method name="read" type="int" line="130">
                <params>
                    <param name="dst" type="ByteBuffer"/>
                </params>
                <scope line="134">
                    <declaration name="n" type="int" line="135"/>
                    <declaration name="ti" type="int" line="136"/>
                    <scope line="137">
                        <scope line="142"/>
                    </scope>
                    <scope line="146"/>
                </scope>
            </method>
            <method name="read" type="long" line="156">
                <params>
                    <param name="dsts" type="ByteBuffer[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="162">
                    <declaration name="n" type="long" line="163"/>
                    <declaration name="ti" type="int" line="164"/>
                    <scope line="165">
                        <scope line="170"/>
                    </scope>
                    <scope line="174"/>
                </scope>
            </method>
            <method name="write" type="int" line="182">
                <params>
                    <param name="src" type="ByteBuffer"/>
                </params>
                <scope line="186">
                    <declaration name="n" type="int" line="187"/>
                    <declaration name="ti" type="int" line="188"/>
                    <scope line="189">
                        <scope line="194"/>
                    </scope>
                    <scope line="198"/>
                </scope>
            </method>
            <method name="write" type="long" line="208">
                <params>
                    <param name="srcs" type="ByteBuffer[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="214">
                    <declaration name="n" type="long" line="215"/>
                    <declaration name="ti" type="int" line="216"/>
                    <scope line="217">
                        <scope line="222"/>
                    </scope>
                    <scope line="226"/>
                </scope>
            </method>
            <method name="position" type="long" line="236">
                <comment line="248">
                    in append-mode then position is advanced to end before writing                    
                </comment>
                <scope line="238">
                    <declaration name="p" type="long" line="239"/>
                    <declaration name="ti" type="int" line="240"/>
                    <scope line="241">
                        <scope line="246"/>
                    </scope>
                    <scope line="251"/>
                </scope>
            </method>
            <method name="position" type="FileChannel" line="259">
                <params>
                    <param name="newPosition" type="long"/>
                </params>
                <scope line="263">
                    <declaration name="p" type="long" line="264"/>
                    <declaration name="ti" type="int" line="265"/>
                    <scope line="266">
                        <scope line="271"/>
                    </scope>
                    <scope line="275"/>
                </scope>
            </method>
            <method name="size" type="long" line="283">
                <scope line="285">
                    <declaration name="s" type="long" line="286"/>
                    <declaration name="ti" type="int" line="287"/>
                    <scope line="288">
                        <scope line="293"/>
                    </scope>
                    <scope line="297"/>
                </scope>
            </method>
            <method name="truncate" type="FileChannel" line="305">
                <params>
                    <param name="size" type="long"/>
                </params>
                <comment line="324">
                    get current position                    
                </comment>
                <comment line="332">
                    truncate file                    
                </comment>
                <comment line="339">
                    set position to size if greater than size                    
                </comment>
                <scope line="313">
                    <declaration name="rv" type="int" line="314"/>
                    <declaration name="p" type="long" line="315"/>
                    <declaration name="ti" type="int" line="316"/>
                    <scope line="317">
                        <scope line="324"/>
                        <scope line="332"/>
                        <scope line="341"/>
                    </scope>
                    <scope line="345"/>
                </scope>
            </method>
            <method name="force" type="void" line="353">
                <params>
                    <param name="metaData" type="boolean"/>
                </params>
                <declaration name="rv" type="int" line="355"/>
                <declaration name="ti" type="int" line="356"/>
                <scope line="357">
                    <scope line="362"/>
                </scope>
                <scope line="365"/>
            </method>
            <declaration name="transferSupported" type="boolean" line="375"/>
            <declaration name="pipeSupported" type="boolean" line="380"/>
            <declaration name="fileSupported" type="boolean" line="385"/>
            <method name="transferToDirectly" type="long" line="390">
                <params>
                    <param name="position" type="long"/>
                    <param name="icount" type="int"/>
                    <param name="target" type="WritableByteChannel"/>
                </params>
                <comment line="401">
                    Direct transfer to pipe causes EINVAL on some configurations                    
                </comment>
                <comment line="410">
                    Not supported on some configurations                    
                </comment>
                <comment line="431">
                    Don&apos;t bother trying again                    
                </comment>
                <declaration name="targetFD" type="FileDescriptor" line="394"/>
                <scope line="395"/>
                <scope line="399"/>
                <declaration name="thisFDVal" type="int" line="407"/>
                <declaration name="targetFDVal" type="int" line="408"/>
                <declaration name="n" type="long" line="412"/>
                <declaration name="ti" type="int" line="413"/>
                <scope line="414">
                    <scope line="419"/>
                    <scope line="422"/>
                    <scope line="429"/>
                </scope>
                <scope line="435"/>
            </method>
            <declaration name="MAPPED_TRANSFER_SIZE" type="long" line="442"/>
            <method name="transferToTrustedChannel" type="long" line="447">
                <params>
                    <param name="position" type="long"/>
                    <param name="count" type="long"/>
                    <param name="target" type="WritableByteChannel"/>
                </params>
                <comment line="453">
                    Trusted target: Use a mapped buffer                    
                </comment>
                <comment line="460">
                    ## Bug: Closing this channel will not terminate the write                    
                </comment>
                <comment line="465">
                    one attempt to write to selectable channel                    
                </comment>
                <comment line="474">
                    target closed by interrupt as ClosedByInterruptException needs
                     to be thrown after closing this channel.                    
                </comment>
                <comment line="484">
                    Only throw exception if no bytes have been written                    
                </comment>
                <declaration name="isSelChImpl" type="boolean" line="448"/>
                <declaration name="remaining" type="long" line="453"/>
                <scope line="454">
                    <declaration name="size" type="long" line="455"/>
                    <scope line="456">
                        <declaration name="dbb" type="MappedByteBuffer" line="457"/>
                        <scope line="458">
                            <declaration name="n" type="int" line="460"/>
                            <scope line="463"/>
                        </scope>
                        <scope line="469"/>
                    </scope>
                    <scope line="472">
                        <scope line="476"/>
                        <scope line="478"/>
                    </scope>
                    <scope line="482"/>
                </scope>
            </method>
            <method name="transferToArbitraryChannel" type="long" line="495">
                <params>
                    <param name="position" type="long"/>
                    <param name="icount" type="int"/>
                    <param name="target" type="WritableByteChannel"/>
                </params>
                <comment line="497">
                    Untrusted target: Use a newly-erased buffer                    
                </comment>
                <comment line="500">
                    Total bytes written                    
                </comment>
                <comment line="510">
                    ## Bug: Will block writing target if this channel
                     ##      is asynchronously closed                    
                </comment>
                <declaration name="c" type="int" line="497"/>
                <declaration name="bb" type="ByteBuffer" line="498"/>
                <declaration name="tw" type="long" line="499"/>
                <declaration name="pos" type="long" line="500"/>
                <scope line="501">
                    <scope line="503">
                        <declaration name="nr" type="int" line="505"/>
                        <declaration name="nw" type="int" line="511"/>
                    </scope>
                </scope>
                <scope line="519"/>
                <scope line="523"/>
            </method>
            <method name="transferTo" type="long" line="531">
                <params>
                    <param name="position" type="long"/>
                    <param name="count" type="long"/>
                    <param name="target" type="WritableByteChannel"/>
                </params>
                <comment line="552">
                    Attempt a direct transfer, if the kernel supports it                    
                </comment>
                <comment line="556">
                    Attempt a mapped transfer, but only to trusted channel types                    
                </comment>
                <comment line="560">
                    Slow path for untrusted targets                    
                </comment>
                <declaration name="sz" type="long" line="542"/>
                <declaration name="icount" type="int" line="545"/>
                <declaration name="n" type="long" line="549"/>
            </method>
            <method name="transferFromFileChannel" type="long" line="566">
                <params>
                    <param name="src" type="FileChannelImpl"/>
                    <param name="position" type="long"/>
                    <param name="count" type="long"/>
                </params>
                <comment line="578">
                    ## Bug: Closing this channel will not terminate the write                    
                </comment>
                <comment line="587">
                    Only throw exception if no bytes have been written                    
                </comment>
                <scope line="569">
                    <declaration name="pos" type="long" line="570"/>
                    <declaration name="max" type="long" line="571"/>
                    <declaration name="remaining" type="long" line="573"/>
                    <declaration name="p" type="long" line="574"/>
                    <scope line="575">
                        <declaration name="size" type="long" line="576"/>
                        <declaration name="bb" type="MappedByteBuffer" line="578"/>
                        <scope line="579">
                            <declaration name="n" type="long" line="580"/>
                        </scope>
                        <scope line="585"/>
                        <scope line="590"/>
                    </scope>
                    <declaration name="nwritten" type="long" line="594"/>
                </scope>
            </method>
            <declaration name="TRANSFER_SIZE" type="int" line="600"/>
            <method name="transferFromArbitraryChannel" type="long" line="605">
                <params>
                    <param name="src" type="ReadableByteChannel"/>
                    <param name="position" type="long"/>
                    <param name="count" type="long"/>
                </params>
                <comment line="607">
                    Untrusted target: Use a newly-erased buffer                    
                </comment>
                <comment line="610">
                    Total bytes written                    
                </comment>
                <comment line="616">
                    ## Bug: Will block reading src if this channel
                     ##      is asynchronously closed                    
                </comment>
                <declaration name="c" type="int" line="607"/>
                <declaration name="bb" type="ByteBuffer" line="608"/>
                <declaration name="tw" type="long" line="609"/>
                <declaration name="pos" type="long" line="610"/>
                <scope line="611">
                    <scope line="613">
                        <declaration name="nr" type="int" line="617"/>
                        <declaration name="nw" type="int" line="621"/>
                    </scope>
                </scope>
                <scope line="629"/>
                <scope line="633"/>
            </method>
            <method name="transferFrom" type="long" line="641">
                <params>
                    <param name="src" type="ReadableByteChannel"/>
                    <param name="position" type="long"/>
                    <param name="count" type="long"/>
                </params>
            </method>
            <method name="read" type="int" line="658">
                <params>
                    <param name="dst" type="ByteBuffer"/>
                    <param name="position" type="long"/>
                </params>
                <declaration name="n" type="int" line="666"/>
                <declaration name="ti" type="int" line="667"/>
                <scope line="668">
                    <scope line="673"/>
                </scope>
                <scope line="677"/>
            </method>
            <method name="write" type="int" line="684">
                <params>
                    <param name="src" type="ByteBuffer"/>
                    <param name="position" type="long"/>
                </params>
                <declaration name="n" type="int" line="692"/>
                <declaration name="ti" type="int" line="693"/>
                <scope line="694">
                    <scope line="699"/>
                </scope>
                <scope line="703"/>
            </method>
            <class name="Unmapper" line="713">
                <comment line="717">
                    may be required to close file                    
                </comment>
                <comment line="720">
                    keep track of mapped buffer usage                    
                </comment>
                <comment line="1066">
                    synchronize on list for access                    
                </comment>
                <implements interface="Runnable"/>
                <declaration name="nd" type="NativeDispatcher" line="717"/>
                <declaration name="count" type="int" line="720"/>
                <declaration name="totalSize" type="long" line="721"/>
                <declaration name="totalCapacity" type="long" line="722"/>
                <declaration name="address" type="long" line="724"/>
                <declaration name="size" type="long" line="725"/>
                <declaration name="cap" type="int" line="726"/>
                <declaration name="fd" type="FileDescriptor" line="727"/>
                <method name="Unmapper" type="constructor" line="731">
                    <params>
                        <param name="address" type="long"/>
                        <param name="size" type="long"/>
                        <param name="cap" type="int"/>
                        <param name="fd" type="FileDescriptor"/>
                    </params>
                    <scope line="738"/>
                </method>
                <method name="run" type="void" line="745">
                    <comment line="752">
                        if this mapping has a valid file descriptor then we close it                        
                    </comment>
                    <comment line="757">
                        nothing we can do                        
                    </comment>
                    <scope line="752">
                        <scope line="753"/>
                        <scope line="755"/>
                    </scope>
                    <scope line="760"/>
                </method>
            </class>
            <method name="unmap" type="void" line="768">
                <params>
                    <param name="bb" type="MappedByteBuffer"/>
                </params>
                <declaration name="cl" type="Cleaner" line="769"/>
            </method>
            <declaration name="MAP_RO" type="int" line="774"/>
            <declaration name="MAP_RW" type="int" line="775"/>
            <declaration name="MAP_PV" type="int" line="776"/>
            <method name="map" type="MappedByteBuffer" line="780">
                <params>
                    <param name="mode" type="MapMode"/>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                </params>
                <comment line="811">
                    Extend file size                    
                </comment>
                <comment line="823">
                    a valid file descriptor is not required                    
                </comment>
                <comment line="835">
                    If no exception was thrown from map0, the address is valid                    
                </comment>
                <comment line="838">
                    An OutOfMemoryError may indicate that we&apos;ve exhausted memory
                     so force gc and re-attempt map                    
                </comment>
                <comment line="849">
                    After a second OOME, fail                    
                </comment>
                <comment line="854">
                    On Windows, and potentially other platforms, we need an open
                     file descriptor for some mapping operations.                    
                </comment>
                <declaration name="imode" type="int" line="790"/>
                <declaration name="addr" type="long" line="803"/>
                <declaration name="ti" type="int" line="804"/>
                <scope line="805">
                    <scope line="810">
                        <scope line="811"/>
                        <declaration name="rv" type="int" line="815"/>
                        <scope line="816"/>
                    </scope>
                    <scope line="820">
                        <declaration name="dummy" type="FileDescriptor" line="823"/>
                    </scope>
                    <declaration name="pagePosition" type="int" line="830"/>
                    <declaration name="mapPosition" type="long" line="831"/>
                    <declaration name="mapSize" type="long" line="832"/>
                    <scope line="833"/>
                    <scope line="836">
                        <scope line="840"/>
                        <scope line="842"/>
                        <scope line="845"/>
                        <scope line="847"/>
                    </scope>
                    <declaration name="mfd" type="FileDescriptor" line="855"/>
                    <scope line="856"/>
                    <scope line="858"/>
                    <declaration name="isize" type="int" line="865"/>
                    <declaration name="um" type="Unmapper" line="866"/>
                    <scope line="867"/>
                    <scope line="872"/>
                </scope>
                <scope line="878"/>
            </method>
            <javadoc line="884">
                Invoked by sun.management.ManagementFactoryHelper to create the management
                  interface for mapped buffers.                
            </javadoc>
            <method name="getMappedBufferPool" type="sun.misc.JavaNioAccess.BufferPool" line="888">
                <anonymous_class line="889">
                    <method name="getName" type="String" line="891"/>
                    <method name="getCount" type="long" line="895"/>
                    <method name="getTotalCapacity" type="long" line="899"/>
                    <method name="getMemoryUsed" type="long" line="903"/>
                </anonymous_class>
            </method>
            <declaration name="fileLockTable" type="FileLockTable" line="914"/>
            <declaration name="isSharedFileLockTable" type="boolean" line="917"/>
            <declaration name="propertyChecked" type="boolean" line="921"/>
            <method name="isSharedFileLockTable" type="boolean" line="926">
                <scope line="927">
                    <scope line="928">
                        <scope line="929">
                            <declaration name="value" type="String" line="930"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="fileLockTable" type="FileLockTable" line="941">
                <scope line="942">
                    <scope line="943">
                        <scope line="944">
                            <scope line="945">
                                <declaration name="ti" type="int" line="946"/>
                                <scope line="947"/>
                                <scope line="950"/>
                            </scope>
                            <scope line="953"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="lock" type="FileLock" line="964">
                <params>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                    <param name="shared" type="boolean"/>
                </params>
                <declaration name="fli" type="FileLockImpl" line="970"/>
                <declaration name="flt" type="FileLockTable" line="971"/>
                <declaration name="completed" type="boolean" line="973"/>
                <declaration name="ti" type="int" line="974"/>
                <scope line="975">
                    <declaration name="n" type="int" line="980"/>
                    <scope line="981"/>
                    <scope line="984">
                        <scope line="985">
                            <declaration name="fli2" type="FileLockImpl" line="987"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="994">
                    <scope line="998"/>
                    <scope line="1000"/>
                </scope>
            </method>
            <method name="tryLock" type="FileLock" line="1009">
                <params>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                    <param name="shared" type="boolean"/>
                </params>
                <declaration name="fli" type="FileLockImpl" line="1015"/>
                <declaration name="flt" type="FileLockTable" line="1016"/>
                <declaration name="result" type="int" line="1018"/>
                <declaration name="ti" type="int" line="1020"/>
                <scope line="1021">
                    <scope line="1022"/>
                    <scope line="1025"/>
                    <scope line="1029"/>
                    <scope line="1033">
                        <declaration name="fli2" type="FileLockImpl" line="1035"/>
                    </scope>
                </scope>
                <scope line="1041"/>
            </method>
            <method name="release" type="void" line="1046">
                <params>
                    <param name="fli" type="FileLockImpl"/>
                </params>
                <declaration name="ti" type="int" line="1047"/>
                <scope line="1048"/>
                <scope line="1051"/>
            </method>
            <class name="SimpleFileLockTable" line="1060">
                <extends class="FileLockTable"/>
                <comment line="717">
                    may be required to close file                    
                </comment>
                <comment line="720">
                    keep track of mapped buffer usage                    
                </comment>
                <comment line="1066">
                    synchronize on list for access                    
                </comment>
                <javadoc line="1060">
                    A simple file lock table that maintains a list of FileLocks obtained by a
                      FileChannel. Use to get 1.4/5.0 behaviour.                    
                </javadoc>
                <declaration name="lockList" type="List&lt;FileLock&gt;" line="1066"/>
                <method name="SimpleFileLockTable" type="constructor" line="1068"/>
                <method name="checkList" type="void" line="1073">
                    <params>
                        <param name="position" type="long"/>
                        <param name="size" type="long"/>
                    </params>
                    <scope line="1075">
                        <scope line="1076"/>
                    </scope>
                </method>
                <method name="add" type="void" line="1082">
                    <params>
                        <param name="fl" type="FileLock"/>
                    </params>
                    <scope line="1083"/>
                </method>
                <method name="remove" type="void" line="1089">
                    <params>
                        <param name="fl" type="FileLock"/>
                    </params>
                    <scope line="1090"/>
                </method>
                <method name="removeAll" type="List<FileLock>" line="1095">
                    <scope line="1096">
                        <declaration name="result" type="List&lt;FileLock&gt;" line="1097"/>
                    </scope>
                </method>
                <method name="replace" type="void" line="1103">
                    <params>
                        <param name="fl1" type="FileLock"/>
                        <param name="fl2" type="FileLock"/>
                    </params>
                    <scope line="1104"/>
                </method>
            </class>
            <method name="map0" type="long" line="1114"/>
            <method name="unmap0" type="int" line="1118"/>
            <method name="transferTo0" type="long" line="1121"/>
            <method name="position0" type="long" line="1126"/>
            <method name="initIDs" type="long" line="1129"/>
            <scope line="1131"/>
        </class>
    </source>