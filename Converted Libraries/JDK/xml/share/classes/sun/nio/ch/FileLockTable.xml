<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.lang.ref"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <class name="FileLockTable" line="35">
            <comment line="104">
                The system-wide map is a ConcurrentHashMap that is keyed on the FileKey.                
            </comment>
            <comment line="105">
                The map value is a list of file locks represented by FileLockReferences.                
            </comment>
            <comment line="106">
                All access to the list must be synchronized on the list.                
            </comment>
            <comment line="110">
                reference queue for cleared refs                
            </comment>
            <comment line="113">
                The connection to which this table is connected                
            </comment>
            <comment line="116">
                File key for the file that this channel is connected to                
            </comment>
            <comment line="248">
                Check for overlapping file locks                
            </comment>
            <comment line="260">
                Process the reference queue                
            </comment>
            <method name="FileLockTable" type="constructor" line="36"/>
            <javadoc line="39">
                Creates and returns a file lock table for a channel that is connected to
                  the a system-wide map of all file locks for the Java virtual machine.                
            </javadoc>
            <method name="newSharedFileLockTable" type="FileLockTable" line="46">
                <params>
                    <param name="channel" type="Channel"/>
                    <param name="fd" type="FileDescriptor"/>
                </params>
            </method>
            <method name="add" type="void" line="50"/>
            <javadoc line="50">
                Adds a file lock to the table.                
                <throws>
                    OverlappingFileLockException if the file lock overlaps
                      with an existing file lock in the table                    
                </throws>
            </javadoc>
            <method name="remove" type="void" line="58"/>
            <javadoc line="58">
                Remove an existing file lock from the table.                
            </javadoc>
            <method name="removeAll" type="List<FileLock>" line="63"/>
            <javadoc line="63">
                Removes all file locks from the table.                
                <return>
                    The list of file locks removed                    
                </return>
            </javadoc>
            <method name="replace" type="void" line="70"/>
            <javadoc line="70">
                Replaces an existing file lock in the table.                
            </javadoc>
        </class>
        <class name="SharedFileLockTable" line="77">
            <extends class="FileLockTable"/>
            <comment line="104">
                The system-wide map is a ConcurrentHashMap that is keyed on the FileKey.                
            </comment>
            <comment line="105">
                The map value is a list of file locks represented by FileLockReferences.                
            </comment>
            <comment line="106">
                All access to the list must be synchronized on the list.                
            </comment>
            <comment line="110">
                reference queue for cleared refs                
            </comment>
            <comment line="113">
                The connection to which this table is connected                
            </comment>
            <comment line="116">
                File key for the file that this channel is connected to                
            </comment>
            <comment line="248">
                Check for overlapping file locks                
            </comment>
            <comment line="260">
                Process the reference queue                
            </comment>
            <javadoc line="77">
                A file lock table that is over a system-wide map of all file locks.                
            </javadoc>
            <class name="FileLockReference" line="82">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="FileLock"/>
                    </type_params>
                </extends>
                <javadoc line="82">
                    A weak reference to a FileLock.
                      &lt;p&gt;
                      SharedFileLockTable uses a list of file lock references to avoid keeping the
                      FileLock (and FileChannel) alive.                    
                </javadoc>
                <declaration name="fileKey" type="FileKey" line="89"/>
                <method name="FileLockReference" type="constructor" line="93">
                    <params>
                        <param name="referent" type="FileLock"/>
                        <param name="queue" type="ReferenceQueue<FileLock>"/>
                        <param name="key" type="FileKey"/>
                    </params>
                </method>
                <method name="fileKey" type="FileKey" line="98"/>
            </class>
            <declaration name="lockMap" type="ConcurrentHashMap&lt;FileKey,List&lt;FileLockReference&gt;&gt;" line="106"/>
            <declaration name="queue" type="ReferenceQueue&lt;FileLock&gt;" line="110"/>
            <declaration name="channel" type="Channel" line="113"/>
            <declaration name="fileKey" type="FileKey" line="116"/>
            <method name="SharedFileLockTable" type="constructor" line="118">
                <params>
                    <param name="channel" type="Channel"/>
                    <param name="fd" type="FileDescriptor"/>
                </params>
            </method>
            <method name="add" type="void" line="124">
                <params>
                    <param name="fl" type="FileLock"/>
                </params>
                <comment line="129">
                    The key isn&apos;t in the map so we try to create it atomically                    
                </comment>
                <comment line="136">
                    we successfully created the key so we add the file lock                    
                </comment>
                <comment line="141">
                    someone else got there first                    
                </comment>
                <comment line="145">
                    There is already a key. It is possible that some other thread                    
                </comment>
                <comment line="146">
                    is removing it so we re-fetch the value from the map. If it                    
                </comment>
                <comment line="147">
                    hasn&apos;t changed then we check the list for overlapping locks                    
                </comment>
                <comment line="148">
                    and add the new lock to the list.                    
                </comment>
                <comment line="161">
                    process any stale entries pending in the reference queue                    
                </comment>
                <declaration name="list" type="List&lt;FileLockReference&gt;" line="125"/>
                <scope line="127">
                    <scope line="130">
                        <declaration name="prev" type="List&lt;FileLockReference&gt;" line="132"/>
                        <scope line="133">
                            <scope line="135"/>
                        </scope>
                    </scope>
                    <scope line="149">
                        <declaration name="current" type="List&lt;FileLockReference&gt;" line="150"/>
                        <scope line="151"/>
                    </scope>
                </scope>
            </method>
            <method name="removeKeyIfEmpty" type="void" line="165">
                <params>
                    <param name="fk" type="FileKey"/>
                    <param name="list" type="List<FileLockReference>"/>
                </params>
                <scope line="168"/>
            </method>
            <method name="remove" type="void" line="174">
                <params>
                    <param name="fl" type="FileLock"/>
                </params>
                <comment line="177">
                    the lock must exist so the list of locks must be present                    
                </comment>
                <declaration name="list" type="List&lt;FileLockReference&gt;" line="178"/>
                <scope line="181">
                    <declaration name="index" type="int" line="182"/>
                    <scope line="183">
                        <declaration name="ref" type="FileLockReference" line="184"/>
                        <declaration name="lock" type="FileLock" line="185"/>
                        <scope line="186"/>
                    </scope>
                </scope>
            </method>
            <method name="removeAll" type="List<FileLock>" line="198">
                <comment line="208">
                    remove locks obtained by this channel                    
                </comment>
                <comment line="210">
                    remove the lock from the list                    
                </comment>
                <comment line="214">
                    add to result                    
                </comment>
                <comment line="221">
                    once the lock list is empty we remove it from the map                    
                </comment>
                <declaration name="result" type="List&lt;FileLock&gt;" line="199"/>
                <declaration name="list" type="List&lt;FileLockReference&gt;" line="200"/>
                <scope line="201">
                    <scope line="202">
                        <declaration name="index" type="int" line="203"/>
                        <scope line="204">
                            <declaration name="ref" type="FileLockReference" line="205"/>
                            <declaration name="lock" type="FileLock" line="206"/>
                            <scope line="209"/>
                            <scope line="216"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="replace" type="void" line="229">
                <params>
                    <param name="fromLock" type="FileLock"/>
                    <param name="toLock" type="FileLock"/>
                </params>
                <comment line="230">
                    the lock must exist so there must be a list                    
                </comment>
                <declaration name="list" type="List&lt;FileLockReference&gt;" line="231"/>
                <scope line="234">
                    <scope line="235">
                        <declaration name="ref" type="FileLockReference" line="236"/>
                        <declaration name="lock" type="FileLock" line="237"/>
                        <scope line="238"/>
                    </scope>
                </scope>
            </method>
            <method name="checkList" type="void" line="250">
                <params>
                    <param name="list" type="List<FileLockReference>"/>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                </params>
                <scope line="252">
                    <declaration name="fl" type="FileLock" line="253"/>
                </scope>
            </method>
            <method name="removeStaleEntries" type="void" line="260">
                <declaration name="ref" type="FileLockReference" line="261"/>
                <scope line="262">
                    <declaration name="fk" type="FileKey" line="263"/>
                    <declaration name="list" type="List&lt;FileLockReference&gt;" line="264"/>
                    <scope line="265">
                        <scope line="266"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>