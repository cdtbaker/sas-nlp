<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.util.concurrent"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <class name="Invoker" line="6">
            <javadoc line="6">
                Defines static methods to invoke a completion handler or arbitrary task.                
            </javadoc>
            <method name="Invoker" type="constructor" line="10"/>
            <declaration name="maxHandlerInvokeCount" type="int" line="12"/>
            <class name="GroupAndInvokeCount" line="13">
                <declaration name="group" type="AsynchronousChannelGroupImpl" line="14"/>
                <declaration name="handlerInvokeCount" type="int" line="15"/>
                <method name="GroupAndInvokeCount" type="constructor" line="16">
                    <params>
                        <param name="group" type="AsynchronousChannelGroupImpl"/>
                    </params>
                </method>
                <method name="group" type="AsynchronousChannelGroupImpl" line="19"/>
                <method name="invokeCount" type="int" line="22"/>
                <method name="setInvokeCount" type="void" line="25">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <method name="resetInvokeCount" type="void" line="28"/>
                <method name="incrementInvokeCount" type="void" line="31"/>
            </class>
            <declaration name="myGroupAndInvokeCount" type="ThreadLocal&amp;lt;GroupAndInvokeCount&amp;gt;" line="35"/>
            <anonymous_class line="35">
                <method name="initialValue" type="GroupAndInvokeCount" line="36"/>
            </anonymous_class>
            <javadoc line="41">
                Binds this thread to the given group                
            </javadoc>
            <method name="bindToGroup" type="void" line="44">
                <params>
                    <param name="group" type="AsynchronousChannelGroupImpl"/>
                </params>
            </method>
            <javadoc line="47">
                Returns the GroupAndInvokeCount object for this thread.                
            </javadoc>
            <method name="getGroupAndInvokeCount" type="GroupAndInvokeCount" line="50"/>
            <javadoc line="53">
                Returns true if the current thread is in a channel group&apos;s thread pool                
            </javadoc>
            <method name="isBoundToAnyGroup" type="boolean" line="56"/>
            <javadoc line="59">
                Returns true if the current thread is in the given channel&apos;s thread
                  pool and we haven&apos;t exceeded the maximum number of handler frames on
                  the stack.                
            </javadoc>
            <method name="mayInvokeDirect" type="boolean" line="64">
                <params>
                    <param name="myGroupAndInvokeCount" type="GroupAndInvokeCount"/>
                    <param name="group" type="AsynchronousChannelGroupImpl"/>
                </params>
                <scope line="65"/>
            </method>
            <javadoc line="70">
                Invoke handler without checking the thread identity or number of handlers
                  on the thread stack.                
            </javadoc>
            <method name="invokeUnchecked" type="void" line="74">
                <params>
                    <param name="handler" type="CompletionHandler&lt;V,? super A&gt;"/>
                    <param name="attachment" type="A"/>
                    <param name="value" type="V"/>
                    <param name="exc" type="Throwable"/>
                </params>
                <scope line="75"/>
                <scope line="78"/>
            </method>
            <javadoc line="83">
                Invoke handler assuming thread identity already checked                
            </javadoc>
            <method name="invokeDirect" type="void" line="86">
                <params>
                    <param name="myGroupAndInvokeCount" type="GroupAndInvokeCount"/>
                    <param name="handler" type="CompletionHandler&lt;V,? super A&gt;"/>
                    <param name="attachment" type="A"/>
                    <param name="result" type="V"/>
                    <param name="exc" type="Throwable"/>
                </params>
            </method>
            <javadoc line="90">
                Invokes the handler. If the current thread is in the channel group&apos;s
                  thread pool then the handler is invoked directly, otherwise it is
                  invoked indirectly.                
            </javadoc>
            <method name="invoke" type="void" line="95">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="handler" type="CompletionHandler&lt;V,? super A&gt;"/>
                    <param name="attachment" type="A"/>
                    <param name="result" type="V"/>
                    <param name="exc" type="Throwable"/>
                </params>
                <declaration name="invokeDirect" type="boolean" line="96"/>
                <declaration name="identityOkay" type="boolean" line="97"/>
                <declaration name="thisGroupAndInvokeCount" type="GroupAndInvokeCount" line="98"/>
                <scope line="99">
                    <scope line="101"/>
                </scope>
                <scope line="105"/>
                <scope line="108">
                    <scope line="109"/>
                    <scope line="112">
                        <scope line="113"/>
                        <scope line="116"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="122">
                Invokes the handler indirectly via the channel group&apos;s thread pool.                
            </javadoc>
            <method name="invokeIndirectly" type="void" line="125">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="handler" type="CompletionHandler&lt;V,? super A&gt;"/>
                    <param name="attachment" type="A"/>
                    <param name="result" type="V"/>
                    <param name="exc" type="Throwable"/>
                </params>
                <scope line="126">
                    <anonymous_class line="127">
                        <method name="run" type="void" line="128">
                            <declaration name="thisGroupAndInvokeCount" type="GroupAndInvokeCount" line="129"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="136"/>
            </method>
            <javadoc line="140">
                Invokes the handler &quot;indirectly&quot; in the given Executor                
            </javadoc>
            <method name="invokeIndirectly" type="void" line="143">
                <params>
                    <param name="handler" type="CompletionHandler&lt;V,? super A&gt;"/>
                    <param name="attachment" type="A"/>
                    <param name="value" type="V"/>
                    <param name="exc" type="Throwable"/>
                    <param name="executor" type="Executor"/>
                </params>
                <scope line="144">
                    <anonymous_class line="145">
                        <method name="run" type="void" line="146"/>
                    </anonymous_class>
                </scope>
                <scope line="152"/>
            </method>
            <javadoc line="156">
                Invokes the given task on the thread pool associated with the given
                  channel. If the current thread is in the thread pool then the task is
                  invoked directly.                
            </javadoc>
            <method name="invokeOnThreadInThreadPool" type="void" line="161">
                <params>
                    <param name="channel" type="Groupable"/>
                    <param name="task" type="Runnable"/>
                </params>
                <declaration name="invokeDirect" type="boolean" line="162"/>
                <declaration name="thisGroupAndInvokeCount" type="GroupAndInvokeCount" line="163"/>
                <declaration name="targetGroup" type="AsynchronousChannelGroupImpl" line="164"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171">
                    <scope line="172"/>
                    <scope line="175"/>
                </scope>
                <scope line="179"/>
            </method>
            <javadoc line="183">
                Invoke handler with completed result. This method does not check the
                  thread identity or the number of handlers on the thread stack.                
            </javadoc>
            <method name="invokeUnchecked" type="void" line="187">
                <params>
                    <param name="future" type="PendingFuture&lt;V,A&gt;"/>
                </params>
            </method>
            <javadoc line="194">
                Invoke handler with completed result. If the current thread is in the
                  channel group&apos;s thread pool then the handler is invoked directly,
                  otherwise it is invoked indirectly.                
            </javadoc>
            <method name="invoke" type="void" line="199">
                <params>
                    <param name="future" type="PendingFuture&lt;V,A&gt;"/>
                </params>
            </method>
            <javadoc line="206">
                Invoke handler with completed result. The handler is invoked indirectly,
                  via the channel group&apos;s thread pool.                
            </javadoc>
            <method name="invokeIndirectly" type="void" line="210">
                <params>
                    <param name="future" type="PendingFuture&lt;V,A&gt;"/>
                </params>
            </method>
        </class>
    </source>