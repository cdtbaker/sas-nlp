<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.nio"/>
        <import package="java.nio.channels"/>
        <class name="DatagramSocketAdaptor" line="41">
            <extends class="DatagramSocket"/>
            <comment line="46">
                The channel being adapted                
            </comment>
            <comment line="49">
                Timeout &quot;option&quot; value for receives                
            </comment>
            <comment line="52">
                ## super will create a useless impl                
            </comment>
            <comment line="173">
                Must hold dc.blockingLock()                
            </comment>
            <comment line="374">
                A dummy implementation of DatagramSocketImpl that can be passed to the
                 DatagramSocket constructor so that no native resources are allocated in
                 super class.                
            </comment>
            <declaration name="dc" type="DatagramChannelImpl" line="46"/>
            <declaration name="timeout" type="int" line="49"/>
            <method name="DatagramSocketAdaptor" type="constructor" line="52">
                <params>
                    <param name="dc" type="DatagramChannelImpl"/>
                </params>
                <comment line="54">
                    Invoke the DatagramSocketAdaptor(SocketAddress) constructor,
                     passing a dummy DatagramSocketImpl object to aovid any native
                     resource allocation in super class and invoking our bind method
                     before the dc field is initialized.                    
                </comment>
            </method>
            <method name="create" type="DatagramSocket" line="61">
                <params>
                    <param name="dc" type="DatagramChannelImpl"/>
                </params>
                <scope line="62"/>
                <scope line="64"/>
            </method>
            <method name="connectInternal" type="void" line="71">
                <params>
                    <param name="remote" type="SocketAddress"/>
                </params>
                <declaration name="isa" type="InetSocketAddress" line="72"/>
                <declaration name="port" type="int" line="73"/>
                <scope line="80"/>
                <scope line="82"/>
            </method>
            <method name="bind" type="void" line="87">
                <params>
                    <param name="local" type="SocketAddress"/>
                </params>
                <scope line="88"/>
                <scope line="92"/>
            </method>
            <method name="connect" type="void" line="97">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <comment line="102">
                    Yes, j.n.DatagramSocket really does this                    
                </comment>
                <scope line="98"/>
                <scope line="100"/>
            </method>
            <method name="connect" type="void" line="105">
                <params>
                    <param name="remote" type="SocketAddress"/>
                </params>
            </method>
            <method name="disconnect" type="void" line="111">
                <scope line="112"/>
                <scope line="114"/>
            </method>
            <method name="isBound" type="boolean" line="119"/>
            <method name="isConnected" type="boolean" line="123"/>
            <method name="getInetAddress" type="InetAddress" line="127"/>
            <method name="getPort" type="int" line="133"/>
            <method name="send" type="void" line="139">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <comment line="151">
                    Legacy DatagramSocket will send in this case
                     and set address and port of the packet                    
                </comment>
                <comment line="159">
                    Target address may not match connected address                    
                </comment>
                <comment line="163">
                    Not connected so address must be valid or throw                    
                </comment>
                <scope line="140">
                    <scope line="143">
                        <scope line="144">
                            <declaration name="bb" type="ByteBuffer" line="145"/>
                            <scope line="148">
                                <scope line="149">
                                    <declaration name="isa" type="InetSocketAddress" line="152"/>
                                </scope>
                                <scope line="157"/>
                            </scope>
                            <scope line="161"/>
                        </scope>
                    </scope>
                    <scope line="166"/>
                </scope>
            </method>
            <method name="receive" type="SocketAddress" line="174">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <comment line="180">
                    Implement timeout with a selector                    
                </comment>
                <scope line="175"/>
                <declaration name="sk" type="SelectionKey" line="180"/>
                <declaration name="sel" type="Selector" line="181"/>
                <scope line="183">
                    <declaration name="n" type="int" line="184"/>
                    <declaration name="sender" type="SocketAddress" line="185"/>
                    <declaration name="to" type="long" line="190"/>
                    <scope line="191">
                        <declaration name="st" type="long" line="194"/>
                        <declaration name="ns" type="int" line="195"/>
                        <scope line="196"/>
                    </scope>
                </scope>
                <scope line="206"/>
            </method>
            <method name="receive" type="void" line="216">
                <params>
                    <param name="p" type="DatagramPacket"/>
                </params>
                <scope line="217">
                    <scope line="220">
                        <scope line="221">
                            <declaration name="bb" type="ByteBuffer" line="222"/>
                            <declaration name="sender" type="SocketAddress" line="225"/>
                        </scope>
                    </scope>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="getLocalAddress" type="InetAddress" line="235">
                <declaration name="local" type="SocketAddress" line="238"/>
                <declaration name="result" type="InetAddress" line="241"/>
                <declaration name="sm" type="SecurityManager" line="242"/>
                <scope line="243">
                    <scope line="244"/>
                    <scope line="246"/>
                </scope>
            </method>
            <method name="getLocalPort" type="int" line="253">
                <scope line="256">
                    <declaration name="local" type="SocketAddress" line="257"/>
                    <scope line="258"/>
                </scope>
                <scope line="261"/>
            </method>
            <method name="setSoTimeout" type="void" line="266">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="getSoTimeout" type="int" line="270"/>
            <method name="setBooleanOption" type="void" line="276">
                <params>
                    <param name="name" type="SocketOption<Boolean>"/>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="277"/>
                <scope line="279"/>
            </method>
            <method name="setIntOption" type="void" line="286">
                <params>
                    <param name="name" type="SocketOption<Integer>"/>
                    <param name="value" type="int"/>
                </params>
                <scope line="287"/>
                <scope line="289"/>
            </method>
            <method name="getBooleanOption" type="boolean" line="294">
                <params>
                    <param name="name" type="SocketOption<Boolean>"/>
                </params>
                <comment line="300">
                    keep compiler happy                    
                </comment>
                <scope line="295"/>
                <scope line="297"/>
            </method>
            <method name="getIntOption" type="int" line="303">
                <params>
                    <param name="name" type="SocketOption<Integer>"/>
                </params>
                <comment line="309">
                    keep compiler happy                    
                </comment>
                <scope line="304"/>
                <scope line="306"/>
            </method>
            <method name="setSendBufferSize" type="void" line="312">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="getSendBufferSize" type="int" line="318"/>
            <method name="setReceiveBufferSize" type="void" line="322">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="getReceiveBufferSize" type="int" line="328"/>
            <method name="setReuseAddress" type="void" line="332">
                <params>
                    <param name="on" type="boolean"/>
                </params>
            </method>
            <method name="getReuseAddress" type="boolean" line="336"/>
            <method name="setBroadcast" type="void" line="341">
                <params>
                    <param name="on" type="boolean"/>
                </params>
            </method>
            <method name="getBroadcast" type="boolean" line="345"/>
            <method name="setTrafficClass" type="void" line="349">
                <params>
                    <param name="tc" type="int"/>
                </params>
            </method>
            <method name="getTrafficClass" type="int" line="353"/>
            <method name="close" type="void" line="357">
                <scope line="358"/>
                <scope line="360"/>
            </method>
            <method name="isClosed" type="boolean" line="365"/>
            <method name="getChannel" type="DatagramChannel" line="369"/>
            <declaration name="dummyDatagramSocket" type="DatagramSocketImpl" line="378"/>
            <anonymous_class line="380">
                <method name="create" type="void" line="381"/>
                <method name="bind" type="void" line="383">
                    <params>
                        <param name="lport" type="int"/>
                        <param name="laddr" type="InetAddress"/>
                    </params>
                </method>
                <method name="send" type="void" line="385">
                    <params>
                        <param name="p" type="DatagramPacket"/>
                    </params>
                </method>
                <method name="peek" type="int" line="387">
                    <params>
                        <param name="i" type="InetAddress"/>
                    </params>
                </method>
                <method name="peekData" type="int" line="389">
                    <params>
                        <param name="p" type="DatagramPacket"/>
                    </params>
                </method>
                <method name="receive" type="void" line="391">
                    <params>
                        <param name="p" type="DatagramPacket"/>
                    </params>
                </method>
                <method name="setTTL" type="void" line="393">
                    <params>
                        <param name="ttl" type="byte"/>
                    </params>
                </method>
                <method name="getTTL" type="byte" line="395"/>
                <method name="setTimeToLive" type="void" line="397">
                    <params>
                        <param name="ttl" type="int"/>
                    </params>
                </method>
                <method name="getTimeToLive" type="int" line="399"/>
                <method name="join" type="void" line="401">
                    <params>
                        <param name="inetaddr" type="InetAddress"/>
                    </params>
                </method>
                <method name="leave" type="void" line="403">
                    <params>
                        <param name="inetaddr" type="InetAddress"/>
                    </params>
                </method>
                <method name="joinGroup" type="void" line="406">
                    <params>
                        <param name="mcastaddr" type="SocketAddress"/>
                        <param name="netIf" type="NetworkInterface"/>
                    </params>
                </method>
                <method name="leaveGroup" type="void" line="409">
                    <params>
                        <param name="mcastaddr" type="SocketAddress"/>
                        <param name="netIf" type="NetworkInterface"/>
                    </params>
                </method>
                <method name="close" type="void" line="411"/>
                <method name="getOption" type="Object" line="413">
                    <params>
                        <param name="optID" type="int"/>
                    </params>
                </method>
                <method name="setOption" type="void" line="415">
                    <params>
                        <param name="optID" type="int"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
            </anonymous_class>
        </class>
    </source>