<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.ByteBuffer"/>
        <import package="sun.misc"/>
        <class name="IOVecWrapper" line="32">
            <comment line="47">
                Miscellaneous constants                
            </comment>
            <comment line="52">
                The iovec array                
            </comment>
            <comment line="55">
                Number of elements in iovec array                
            </comment>
            <comment line="58">
                Buffers and position/remaining corresponding to elements in iovec array                
            </comment>
            <comment line="63">
                Shadow buffers for cases when original buffer is substituted                
            </comment>
            <comment line="66">
                Base address of this array                
            </comment>
            <comment line="69">
                Address size in bytes                
            </comment>
            <comment line="82">
                per thread IOVecWrapper                
            </comment>
            <javadoc line="32">
                Manipulates a native array of iovec structs on Solaris:
                  typedef struct iovec {
                  caddr_t  iov_base;
                  int      iov_len;
                  } iovec_t;                
                <author>
                    Mike McCloskey                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BASE_OFFSET" type="int" line="47"/>
            <declaration name="LEN_OFFSET" type="int" line="48"/>
            <declaration name="SIZE_IOVEC" type="int" line="49"/>
            <declaration name="vecArray" type="AllocatedNativeObject" line="52"/>
            <declaration name="size" type="int" line="55"/>
            <declaration name="buf" type="ByteBuffer[]" line="58"/>
            <declaration name="position" type="int[]" line="59"/>
            <declaration name="remaining" type="int[]" line="60"/>
            <declaration name="shadow" type="ByteBuffer[]" line="63"/>
            <declaration name="address" type="long" line="66"/>
            <declaration name="addressSize" type="int" line="69"/>
            <class name="Deallocator" line="71">
                <implements interface="Runnable"/>
                <declaration name="obj" type="AllocatedNativeObject" line="72"/>
                <method name="Deallocator" type="constructor" line="73">
                    <params>
                        <param name="obj" type="AllocatedNativeObject"/>
                    </params>
                </method>
                <method name="run" type="void" line="76"/>
            </class>
            <declaration name="cached" type="ThreadLocal&lt;IOVecWrapper&gt;" line="82"/>
            <method name="IOVecWrapper" type="constructor" line="85">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="get" type="IOVecWrapper" line="95">
                <params>
                    <param name="size" type="int"/>
                </params>
                <comment line="99">
                    not big enough; eagerly release memory                    
                </comment>
                <declaration name="wrapper" type="IOVecWrapper" line="96"/>
                <scope line="97"/>
                <scope line="102"/>
            </method>
            <method name="setBuffer" type="void" line="110">
                <params>
                    <param name="i" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                    <param name="pos" type="int"/>
                    <param name="rem" type="int"/>
                </params>
            </method>
            <method name="setShadow" type="void" line="116">
                <params>
                    <param name="i" type="int"/>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <method name="getBuffer" type="ByteBuffer" line="120">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getPosition" type="int" line="124">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getRemaining" type="int" line="128">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getShadow" type="ByteBuffer" line="132">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="clearRefs" type="void" line="136">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="putBase" type="void" line="141">
                <params>
                    <param name="i" type="int"/>
                    <param name="base" type="long"/>
                </params>
                <declaration name="offset" type="int" line="142"/>
            </method>
            <method name="putLen" type="void" line="149">
                <params>
                    <param name="i" type="int"/>
                    <param name="len" type="long"/>
                </params>
                <declaration name="offset" type="int" line="150"/>
            </method>
            <scope line="157"/>
        </class>
    </source>