<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.util.concurrent"/>
        <import package="java.io.IOException"/>
        <class name="PendingFuture" line="32">
            <type_params>
                <type_param name="V"/>
                <type_param name="A"/>
            </type_params>
            <comment line="46">
                true if result (or exception) is available                
            </comment>
            <comment line="51">
                latch for waiting (created lazily if needed)                
            </comment>
            <comment line="54">
                optional timer task that is cancelled when result becomes available                
            </comment>
            <comment line="57">
                optional context object                
            </comment>
            <comment line="118">
                creates latch if required; return true if caller needs to wait                
            </comment>
            <implements interface="Future">
                <type_params>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="32">
                A Future for a pending I/O operation. A PendingFuture allows for the
                  attachment of an additional arbitrary context object and a timer task.                
            </javadoc>
            <declaration name="CANCELLED" type="CancellationException" line="38"/>
            <declaration name="channel" type="AsynchronousChannel" line="41"/>
            <declaration name="handler" type="CompletionHandler&lt;V,? super A&gt;" line="42"/>
            <declaration name="attachment" type="A" line="43"/>
            <declaration name="haveResult" type="boolean" line="46"/>
            <declaration name="result" type="V" line="47"/>
            <declaration name="exc" type="Throwable" line="48"/>
            <declaration name="latch" type="CountDownLatch" line="51"/>
            <declaration name="timeoutTask" type="Future&lt;?&gt;" line="54"/>
            <declaration name="context" type="Object" line="57"/>
            <method name="PendingFuture" type="constructor" line="63">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                    <param name="attachment" type="A"/>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <method name="PendingFuture" type="constructor" line="73">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="handler" type="CompletionHandler<V,? super A>"/>
                    <param name="attachment" type="A"/>
                </params>
            </method>
            <method name="PendingFuture" type="constructor" line="79">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                </params>
            </method>
            <method name="PendingFuture" type="constructor" line="83">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <method name="channel" type="AsynchronousChannel" line="87"/>
            <method name="handler" type="CompletionHandler<V,? super A>" line="91"/>
            <method name="attachment" type="A" line="95"/>
            <method name="setContext" type="void" line="99">
                <params>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <method name="getContext" type="Object" line="103"/>
            <method name="setTimeoutTask" type="void" line="107">
                <params>
                    <param name="task" type="Future<?>"/>
                </params>
                <scope line="108">
                    <scope line="109"/>
                    <scope line="111"/>
                </scope>
            </method>
            <method name="prepareForWait" type="boolean" line="118">
                <scope line="119">
                    <scope line="120"/>
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="130">
                Sets the result, or a no-op if the result or exception is already set.                
            </javadoc>
            <method name="setResult" type="void" line="133">
                <params>
                    <param name="res" type="V"/>
                </params>
                <scope line="134"/>
            </method>
            <javadoc line="146">
                Sets the result, or a no-op if the result or exception is already set.                
            </javadoc>
            <method name="setFailure" type="void" line="149">
                <params>
                    <param name="x" type="Throwable"/>
                </params>
                <scope line="152"/>
            </method>
            <javadoc line="164">
                Sets the result                
            </javadoc>
            <method name="setResult" type="void" line="167">
                <params>
                    <param name="res" type="V"/>
                    <param name="x" type="Throwable"/>
                </params>
                <scope line="168"/>
                <scope line="170"/>
            </method>
            <method name="get" type="V" line="176">
                <scope line="177">
                    <declaration name="needToWait" type="boolean" line="178"/>
                </scope>
                <scope line="182"/>
            </method>
            <method name="get" type="V" line="193">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <scope line="194">
                    <declaration name="needToWait" type="boolean" line="195"/>
                </scope>
                <scope line="199"/>
            </method>
            <method name="exception" type="Throwable" line="207"/>
            <method name="value" type="V" line="211"/>
            <method name="isCancelled" type="boolean" line="216"/>
            <method name="isDone" type="boolean" line="221"/>
            <method name="cancel" type="boolean" line="226">
                <params>
                    <param name="mayInterruptIfRunning" type="boolean"/>
                </params>
                <comment line="229">
                    already completed                    
                </comment>
                <comment line="231">
                    notify channel                    
                </comment>
                <comment line="235">
                    set result and cancel timer                    
                </comment>
                <comment line="242">
                    close channel if forceful cancel                    
                </comment>
                <comment line="249">
                    release waiters                    
                </comment>
                <scope line="227"/>
                <scope line="243">
                    <scope line="244"/>
                    <scope line="246"/>
                </scope>
            </method>
        </class>
    </source>