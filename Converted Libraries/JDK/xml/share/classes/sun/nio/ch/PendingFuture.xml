<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.util.concurrent"/>
        <import package="java.io.IOException"/>
        <class name="PendingFuture" line="5">
            <type_params>
                <type_param name="V"/>
                <type_param name="A"/>
            </type_params>
            <implements interface="Future">
                <type_params>
                    <type_param name="V"/>
                </type_params>
            </implements>
            <javadoc line="5">
                A Future for a pending I/O operation. A PendingFuture allows for the
                  attachment of an additional arbitrary context object and a timer task.                
            </javadoc>
            <declaration name="CANCELLED" type="CancellationException" line="10"/>
            <declaration name="channel" type="AsynchronousChannel" line="11"/>
            <declaration name="handler" type="CompletionHandler&amp;lt;V,? super A&amp;gt;" line="12"/>
            <declaration name="attachment" type="A" line="13"/>
            <declaration name="haveResult" type="boolean" line="14"/>
            <declaration name="result" type="V" line="15"/>
            <declaration name="exc" type="Throwable" line="16"/>
            <declaration name="latch" type="CountDownLatch" line="17"/>
            <declaration name="timeoutTask" type="Future&amp;lt;?&amp;gt;" line="18"/>
            <declaration name="context" type="Object" line="19"/>
            <method name="PendingFuture" type="constructor" line="20">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="handler" type="CompletionHandler&lt;V,? super A&gt;"/>
                    <param name="attachment" type="A"/>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <method name="PendingFuture" type="constructor" line="26">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="handler" type="CompletionHandler&lt;V,? super A&gt;"/>
                    <param name="attachment" type="A"/>
                </params>
            </method>
            <method name="PendingFuture" type="constructor" line="31">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                </params>
            </method>
            <method name="PendingFuture" type="constructor" line="34">
                <params>
                    <param name="channel" type="AsynchronousChannel"/>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <method name="channel" type="AsynchronousChannel" line="37"/>
            <method name="handler" type="CompletionHandler&lt;V,? super A&gt;" line="40"/>
            <method name="attachment" type="A" line="43"/>
            <method name="setContext" type="void" line="46">
                <params>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <method name="getContext" type="Object" line="49"/>
            <method name="setTimeoutTask" type="void" line="52">
                <params>
                    <param name="task" type="Future&lt;?&gt;"/>
                </params>
                <scope line="53">
                    <scope line="54"/>
                    <scope line="57"/>
                </scope>
            </method>
            <method name="prepareForWait" type="boolean" line="62">
                <scope line="63">
                    <scope line="64"/>
                    <scope line="67"/>
                </scope>
            </method>
            <javadoc line="73">
                Sets the result, or a no-op if the result or exception is already set.                
            </javadoc>
            <method name="setResult" type="void" line="76">
                <params>
                    <param name="res" type="V"/>
                </params>
                <scope line="77"/>
            </method>
            <javadoc line="85">
                Sets the result, or a no-op if the result or exception is already set.                
            </javadoc>
            <method name="setFailure" type="void" line="88">
                <params>
                    <param name="x" type="Throwable"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="98">
                Sets the result                
            </javadoc>
            <method name="setResult" type="void" line="101">
                <params>
                    <param name="res" type="V"/>
                    <param name="x" type="Throwable"/>
                </params>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <method name="get" type="V" line="109">
                <scope line="110">
                    <declaration name="needToWait" type="boolean" line="111"/>
                </scope>
                <scope line="114"/>
            </method>
            <method name="get" type="V" line="120">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <scope line="121">
                    <declaration name="needToWait" type="boolean" line="122"/>
                </scope>
                <scope line="125"/>
            </method>
            <method name="exception" type="Throwable" line="131"/>
            <method name="value" type="V" line="134"/>
            <method name="isCancelled" type="boolean" line="137"/>
            <method name="isDone" type="boolean" line="140"/>
            <method name="cancel" type="boolean" line="143">
                <params>
                    <param name="mayInterruptIfRunning" type="boolean"/>
                </params>
                <scope line="144"/>
                <scope line="151">
                    <scope line="152"/>
                    <scope line="155"/>
                </scope>
            </method>
        </class>
    </source>