<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels.Channel"/>
        <import package="java.nio.channels.AsynchronousChannelGroup"/>
        <import package="java.nio.channels.spi.AsynchronousChannelProvider"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.util.Queue"/>
        <import package="java.util.concurrent"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <class name="AsynchronousChannelGroupImpl" line="15">
            <extends class="AsynchronousChannelGroup"/>
            <implements interface="Executor"/>
            <javadoc line="15">
                Base implementation of AsynchronousChannelGroup                
            </javadoc>
            <declaration name="internalThreadCount" type="int" line="19"/>
            <declaration name="pool" type="ThreadPool" line="20"/>
            <declaration name="threadCount" type="AtomicInteger" line="21"/>
            <declaration name="timeoutExecutor" type="ScheduledThreadPoolExecutor" line="22"/>
            <declaration name="taskQueue" type="Queue&amp;lt;Runnable&amp;gt;" line="23"/>
            <declaration name="shutdown" type="AtomicBoolean" line="24"/>
            <declaration name="shutdownNowLock" type="Object" line="25"/>
            <declaration name="terminateInitiated" type="boolean" line="26"/>
            <method name="AsynchronousChannelGroupImpl" type="constructor" line="27">
                <params>
                    <param name="provider" type="AsynchronousChannelProvider"/>
                    <param name="pool" type="ThreadPool"/>
                </params>
                <scope line="30"/>
                <scope line="33"/>
            </method>
            <method name="executor" type="ExecutorService" line="39"/>
            <method name="isFixedThreadPool" type="boolean" line="42"/>
            <method name="fixedThreadCount" type="int" line="45">
                <scope line="46"/>
                <scope line="49"/>
            </method>
            <method name="bindToGroup" type="Runnable" line="53">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <declaration name="thisGroup" type="AsynchronousChannelGroupImpl" line="54"/>
                <anonymous_class line="55">
                    <method name="run" type="void" line="56"/>
                </anonymous_class>
            </method>
            <method name="startInternalThread" type="void" line="63">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <anonymous_class line="64">
                    <method name="run" type="Void" line="65"/>
                </anonymous_class>
            </method>
            <method name="startThreads" type="void" line="72">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <scope line="73">
                    <scope line="74"/>
                </scope>
                <scope line="79">
                    <scope line="81">
                        <scope line="82"/>
                    </scope>
                    <scope line="87"/>
                </scope>
            </method>
            <method name="threadCount" type="int" line="91"/>
            <javadoc line="94">
                Invoked by tasks as they terminate                
            </javadoc>
            <method name="threadExit" type="int" line="97">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="replaceMe" type="boolean"/>
                </params>
                <scope line="98">
                    <scope line="99">
                        <scope line="100"/>
                        <scope line="103"/>
                    </scope>
                    <scope line="108"/>
                </scope>
            </method>
            <method name="executeOnHandlerTask" type="void" line="113"/>
            <javadoc line="113">
                Wakes up a thread waiting for I/O events to execute the given task.                
            </javadoc>
            <javadoc line="117">
                For a fixed thread pool the task is queued to a thread waiting on I/O
                  events. For other thread pools we simply submit the task to the thread
                  pool.                
            </javadoc>
            <method name="executeOnPooledThread" type="void" line="122">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <scope line="123"/>
                <scope line="126"/>
            </method>
            <method name="offerTask" type="void" line="130">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
            </method>
            <method name="pollTask" type="Runnable" line="133"/>
            <method name="schedule" type="Future&lt;?&gt;" line="136">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <scope line="137"/>
                <scope line="140">
                    <scope line="141"/>
                </scope>
            </method>
            <method name="isShutdown" type="boolean" line="147"/>
            <method name="isTerminated" type="boolean" line="150"/>
            <method name="isEmpty" type="boolean" line="153"/>
            <javadoc line="153">
                Returns true if there are no channels in the group                
            </javadoc>
            <method name="attachForeignChannel" type="Object" line="157"/>
            <javadoc line="157">
                Attaches a foreign channel to this group.                
            </javadoc>
            <method name="detachForeignChannel" type="void" line="161"/>
            <javadoc line="161">
                Detaches a foreign channel from this group.                
            </javadoc>
            <method name="closeAllChannels" type="void" line="165"/>
            <javadoc line="165">
                Closes all channels in the group                
            </javadoc>
            <method name="shutdownHandlerTasks" type="void" line="169"/>
            <javadoc line="169">
                Shutdown all tasks waiting for I/O events.                
            </javadoc>
            <method name="shutdownExecutors" type="void" line="173">
                <anonymous_class line="174">
                    <method name="run" type="Void" line="175"/>
                </anonymous_class>
            </method>
            <method name="shutdown" type="void" line="183">
                <scope line="184"/>
                <scope line="187"/>
                <scope line="190">
                    <scope line="191"/>
                </scope>
            </method>
            <method name="shutdownNow" type="void" line="198">
                <scope line="200">
                    <scope line="201"/>
                </scope>
            </method>
            <javadoc line="209">
                For use by AsynchronousFileChannel to release resources without shutting
                  down the thread pool.                
            </javadoc>
            <method name="detachFromThreadPool" type="void" line="213"/>
            <method name="awaitTermination" type="boolean" line="218">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="221">
                Executes the given command on one of the channel group&apos;s pooled threads.                
            </javadoc>
            <method name="execute" type="void" line="224">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="225"/>
                <scope line="226">
                    <declaration name="acc" type="AccessControlContext" line="227"/>
                    <declaration name="delegate" type="Runnable" line="228"/>
                    <anonymous_class line="229">
                        <method name="run" type="void" line="230">
                            <anonymous_class line="231">
                                <method name="run" type="Void" line="232"/>
                            </anonymous_class>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>