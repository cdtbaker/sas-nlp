<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels.Channel"/>
        <import package="java.nio.channels.AsynchronousChannelGroup"/>
        <import package="java.nio.channels.spi.AsynchronousChannelProvider"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.util.Queue"/>
        <import package="java.util.concurrent"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <class name="AsynchronousChannelGroupImpl" line="42">
            <extends class="AsynchronousChannelGroup"/>
            <comment line="50">
                number of internal threads handling I/O events when using an unbounded
                 thread pool. Internal threads do not dispatch to completion handlers.                
            </comment>
            <comment line="55">
                associated thread pool                
            </comment>
            <comment line="58">
                number of tasks running (including internal)                
            </comment>
            <comment line="61">
                associated Executor for timeouts                
            </comment>
            <comment line="64">
                task queue for when using a fixed thread pool. In that case, thread
                 waiting on I/O events must be awokon to poll tasks from this queue.                
            </comment>
            <comment line="68">
                group shutdown                
            </comment>
            <implements interface="Executor"/>
            <javadoc line="42">
                Base implementation of AsynchronousChannelGroup                
            </javadoc>
            <declaration name="internalThreadCount" type="int" line="51"/>
            <declaration name="pool" type="ThreadPool" line="55"/>
            <declaration name="threadCount" type="AtomicInteger" line="58"/>
            <declaration name="timeoutExecutor" type="ScheduledThreadPoolExecutor" line="61"/>
            <declaration name="taskQueue" type="Queue&lt;Runnable&gt;" line="65"/>
            <declaration name="shutdown" type="AtomicBoolean" line="68"/>
            <declaration name="shutdownNowLock" type="Object" line="69"/>
            <declaration name="terminateInitiated" type="boolean" line="70"/>
            <method name="AsynchronousChannelGroupImpl" type="constructor" line="74">
                <params>
                    <param name="provider" type="AsynchronousChannelProvider"/>
                    <param name="pool" type="ThreadPool"/>
                </params>
                <comment line="82">
                    not used                    
                </comment>
                <comment line="85">
                    use default thread factory as thread should not be visible to
                     application (it doesn&apos;t execute completion handlers).                    
                </comment>
                <scope line="78"/>
                <scope line="80"/>
            </method>
            <method name="executor" type="ExecutorService" line="91"/>
            <method name="isFixedThreadPool" type="boolean" line="95"/>
            <method name="fixedThreadCount" type="int" line="99">
                <scope line="100"/>
                <scope line="102"/>
            </method>
            <method name="bindToGroup" type="Runnable" line="107">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <declaration name="thisGroup" type="AsynchronousChannelGroupImpl" line="108"/>
                <anonymous_class line="109">
                    <method name="run" type="void" line="110"/>
                </anonymous_class>
            </method>
            <method name="startInternalThread" type="void" line="117">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <comment line="122">
                    internal threads should not be visible to application so
                     cannot use user-supplied thread factory                    
                </comment>
                <anonymous_class line="118">
                    <method name="run" type="Void" line="120">
                        <comment line="122">
                            internal threads should not be visible to application so
                             cannot use user-supplied thread factory                            
                        </comment>
                    </method>
                </anonymous_class>
            </method>
            <method name="startThreads" type="void" line="129">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <comment line="145">
                    nothing we can do                    
                </comment>
                <scope line="130">
                    <scope line="131"/>
                </scope>
                <scope line="136">
                    <scope line="138">
                        <scope line="139"/>
                    </scope>
                    <scope line="143"/>
                </scope>
            </method>
            <method name="threadCount" type="int" line="149"/>
            <javadoc line="153">
                Invoked by tasks as they terminate                
            </javadoc>
            <method name="threadExit" type="int" line="156">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="replaceMe" type="boolean"/>
                </params>
                <comment line="161">
                    submit new task to replace this thread                    
                </comment>
                <comment line="164">
                    replace internal thread                    
                </comment>
                <comment line="169">
                    unable to replace                    
                </comment>
                <scope line="157">
                    <scope line="158">
                        <scope line="159"/>
                        <scope line="162"/>
                    </scope>
                    <scope line="167"/>
                </scope>
            </method>
            <method name="executeOnHandlerTask" type="void" line="174"/>
            <javadoc line="174">
                Wakes up a thread waiting for I/O events to execute the given task.                
            </javadoc>
            <javadoc line="179">
                For a fixed thread pool the task is queued to a thread waiting on I/O
                  events. For other thread pools we simply submit the task to the thread
                  pool.                
            </javadoc>
            <method name="executeOnPooledThread" type="void" line="184">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <scope line="185"/>
                <scope line="187"/>
            </method>
            <method name="offerTask" type="void" line="192">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
            </method>
            <method name="pollTask" type="Runnable" line="196"/>
            <method name="schedule" type="Future<?>" line="200">
                <params>
                    <param name="task" type="Runnable"/>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
                <comment line="206">
                    no timeout scheduled as group is terminating                    
                </comment>
                <scope line="201"/>
                <scope line="203">
                    <scope line="204"/>
                </scope>
            </method>
            <method name="isShutdown" type="boolean" line="213"/>
            <method name="isTerminated" type="boolean" line="218"/>
            <method name="isEmpty" type="boolean" line="222"/>
            <javadoc line="222">
                Returns true if there are no channels in the group                
            </javadoc>
            <method name="attachForeignChannel" type="Object" line="227"/>
            <javadoc line="227">
                Attaches a foreign channel to this group.                
            </javadoc>
            <method name="detachForeignChannel" type="void" line="233"/>
            <javadoc line="233">
                Detaches a foreign channel from this group.                
            </javadoc>
            <method name="closeAllChannels" type="void" line="238"/>
            <javadoc line="238">
                Closes all channels in the group                
            </javadoc>
            <method name="shutdownHandlerTasks" type="void" line="243"/>
            <javadoc line="243">
                Shutdown all tasks waiting for I/O events.                
            </javadoc>
            <method name="shutdownExecutors" type="void" line="248">
                <anonymous_class line="249">
                    <method name="run" type="Void" line="250"/>
                </anonymous_class>
            </method>
            <method name="shutdown" type="void" line="259">
                <comment line="262">
                    already shutdown                    
                </comment>
                <comment line="265">
                    if there are channels in the group then shutdown will continue
                     when the last channel is closed                    
                </comment>
                <comment line="270">
                    initiate termination (acquire shutdownNowLock to ensure that other
                     threads invoking shutdownNow will block).                    
                </comment>
                <scope line="260"/>
                <scope line="266"/>
                <scope line="271">
                    <scope line="272"/>
                </scope>
            </method>
            <method name="shutdownNow" type="void" line="281">
                <scope line="283">
                    <scope line="284"/>
                </scope>
            </method>
            <javadoc line="293">
                For use by AsynchronousFileChannel to release resources without shutting
                  down the thread pool.                
            </javadoc>
            <method name="detachFromThreadPool" type="void" line="297"/>
            <method name="awaitTermination" type="boolean" line="308">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="312">
                Executes the given command on one of the channel group&apos;s pooled threads.                
            </javadoc>
            <method name="execute" type="void" line="316">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <comment line="320">
                    when a security manager is installed then the user&apos;s task
                     must be run with the current calling context                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="317"/>
                <scope line="318">
                    <declaration name="acc" type="AccessControlContext" line="321"/>
                    <declaration name="delegate" type="Runnable" line="322"/>
                    <anonymous_class line="323">
                        <method name="run" type="void" line="325">
                            <anonymous_class line="326">
                                <method name="run" type="Void" line="328"/>
                            </anonymous_class>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>