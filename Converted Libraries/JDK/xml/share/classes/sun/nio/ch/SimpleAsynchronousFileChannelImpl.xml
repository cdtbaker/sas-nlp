<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.nio.channels"/>
        <import package="java.util.concurrent"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <class name="SimpleAsynchronousFileChannelImpl" line="36">
            <extends class="AsynchronousFileChannelImpl"/>
            <comment line="45">
                lazy initialization of default thread pool for file I/O                
            </comment>
            <comment line="51">
                Used to make native read and write calls                
            </comment>
            <comment line="54">
                Thread-safe set of IDs of native threads, for signalling                
            </comment>
            <javadoc line="36">
                &quot;Portable&quot; implementation of AsynchronousFileChannel for use on operating
                  systems that don&apos;t support asynchronous file I/O.                
            </javadoc>
            <class name="DefaultExecutorHolder" line="45">
                <declaration name="defaultExecutor" type="ExecutorService" line="46"/>
            </class>
            <declaration name="nd" type="FileDispatcher" line="51"/>
            <declaration name="threads" type="NativeThreadSet" line="54"/>
            <method name="SimpleAsynchronousFileChannelImpl" type="constructor" line="61">
                <params>
                    <param name="fdObj" type="FileDescriptor"/>
                    <param name="reading" type="boolean"/>
                    <param name="writing" type="boolean"/>
                    <param name="executor" type="ExecutorService"/>
                </params>
            </method>
            <method name="open" type="AsynchronousFileChannel" line="69">
                <params>
                    <param name="fdo" type="FileDescriptor"/>
                    <param name="reading" type="boolean"/>
                    <param name="writing" type="boolean"/>
                    <param name="pool" type="ThreadPool"/>
                </params>
                <comment line="70">
                    Executor is either default or based on pool parameters                    
                </comment>
                <declaration name="executor" type="ExecutorService" line="71"/>
            </method>
            <method name="close" type="void" line="77">
                <comment line="78">
                    mark channel as closed                    
                </comment>
                <comment line="81">
                    already closed                    
                </comment>
                <comment line="83">
                    from this point on, if another thread invokes the begin() method                    
                </comment>
                <comment line="84">
                    then it will throw ClosedChannelException                    
                </comment>
                <comment line="87">
                    Invalidate and release any locks that we still hold                    
                </comment>
                <comment line="90">
                    signal any threads blocked on this channel                    
                </comment>
                <comment line="94">
                    wait until all async I/O operations have completely gracefully                    
                </comment>
                <comment line="97">
                    do nothing                    
                </comment>
                <comment line="102">
                    close file                    
                </comment>
                <scope line="79"/>
                <scope line="96"/>
                <scope line="98"/>
            </method>
            <method name="size" type="long" line="107">
                <declaration name="ti" type="int" line="108"/>
                <scope line="109">
                    <declaration name="n" type="long" line="110"/>
                    <scope line="111">
                        <scope line="113"/>
                    </scope>
                    <scope line="117"/>
                </scope>
                <scope line="120"/>
            </method>
            <method name="truncate" type="AsynchronousFileChannel" line="126">
                <params>
                    <param name="size" type="long"/>
                </params>
                <comment line="140">
                    truncate file if &apos;size&apos; less than current size                    
                </comment>
                <declaration name="ti" type="int" line="131"/>
                <scope line="132">
                    <declaration name="n" type="long" line="133"/>
                    <scope line="134">
                        <scope line="136"/>
                        <scope line="141">
                            <scope line="142"/>
                        </scope>
                    </scope>
                    <scope line="147"/>
                </scope>
                <scope line="150"/>
            </method>
            <method name="force" type="void" line="156">
                <params>
                    <param name="metaData" type="boolean"/>
                </params>
                <declaration name="ti" type="int" line="157"/>
                <scope line="158">
                    <declaration name="n" type="int" line="159"/>
                    <scope line="160">
                        <scope line="162"/>
                    </scope>
                    <scope line="165"/>
                </scope>
                <scope line="168"/>
            </method>
            <method name="implLock" type="Future<FileLock>" line="179">
                <params>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                    <param name="shared" type="boolean"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<FileLock,? super A>"/>
                </params>
                <comment line="185">
                    add to lock table                    
                </comment>
                <comment line="236">
                    rollback                    
                </comment>
                <declaration name="fli" type="FileLockImpl" line="186"/>
                <scope line="187">
                    <declaration name="exc" type="Throwable" line="188"/>
                </scope>
                <declaration name="result" type="PendingFuture&lt;FileLock,A&gt;" line="195"/>
                <anonymous_class line="197">
                    <method name="run" type="void" line="198">
                        <declaration name="exc" type="Throwable" line="199"/>
                        <declaration name="ti" type="int" line="201"/>
                        <scope line="202">
                            <declaration name="n" type="int" line="203"/>
                            <scope line="204">
                                <scope line="206"/>
                                <scope line="209"/>
                            </scope>
                            <scope line="212"/>
                            <scope line="217"/>
                        </scope>
                        <scope line="220"/>
                        <scope line="223"/>
                        <scope line="225"/>
                    </method>
                </anonymous_class>
                <declaration name="task" type="Runnable" line="197"/>
                <declaration name="executed" type="boolean" line="230"/>
                <scope line="231"/>
                <scope line="234">
                    <scope line="235"/>
                </scope>
            </method>
            <method name="tryLock" type="FileLock" line="246">
                <params>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                    <param name="shared" type="boolean"/>
                </params>
                <comment line="252">
                    add to lock table                    
                </comment>
                <comment line="267">
                    lock acquired                    
                </comment>
                <comment line="270">
                    locked by someone else                    
                </comment>
                <comment line="273">
                    should not get here                    
                </comment>
                <declaration name="fli" type="FileLockImpl" line="253"/>
                <declaration name="ti" type="int" line="257"/>
                <declaration name="gotLock" type="boolean" line="258"/>
                <scope line="259">
                    <declaration name="n" type="int" line="261"/>
                    <scope line="262"/>
                    <scope line="265"/>
                </scope>
                <scope line="275"/>
            </method>
            <method name="implRelease" type="void" line="284">
                <params>
                    <param name="fli" type="FileLockImpl"/>
                </params>
            </method>
            <method name="implRead" type="Future<Integer>" line="293">
                <params>
                    <param name="dst" type="ByteBuffer"/>
                    <param name="position" type="long"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<Integer,? super A>"/>
                </params>
                <comment line="301">
                    complete immediately if channel closed or no space remaining                    
                </comment>
                <scope line="302">
                    <declaration name="exc" type="Throwable" line="303"/>
                </scope>
                <declaration name="result" type="PendingFuture&lt;Integer,A&gt;" line="310"/>
                <anonymous_class line="312">
                    <method name="run" type="void" line="313">
                        <declaration name="n" type="int" line="314"/>
                        <declaration name="exc" type="Throwable" line="315"/>
                        <declaration name="ti" type="int" line="317"/>
                        <scope line="318">
                            <scope line="320"/>
                        </scope>
                        <scope line="325"/>
                        <scope line="329"/>
                        <scope line="333"/>
                        <scope line="335"/>
                    </method>
                </anonymous_class>
                <declaration name="task" type="Runnable" line="312"/>
            </method>
            <method name="implWrite" type="Future<Integer>" line="349">
                <params>
                    <param name="src" type="ByteBuffer"/>
                    <param name="position" type="long"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<Integer,? super A>"/>
                </params>
                <comment line="355">
                    complete immediately if channel is closed or no bytes remaining                    
                </comment>
                <scope line="356">
                    <declaration name="exc" type="Throwable" line="357"/>
                </scope>
                <declaration name="result" type="PendingFuture&lt;Integer,A&gt;" line="364"/>
                <anonymous_class line="366">
                    <method name="run" type="void" line="367">
                        <declaration name="n" type="int" line="368"/>
                        <declaration name="exc" type="Throwable" line="369"/>
                        <declaration name="ti" type="int" line="371"/>
                        <scope line="372">
                            <scope line="374"/>
                        </scope>
                        <scope line="379"/>
                        <scope line="383"/>
                        <scope line="387"/>
                        <scope line="389"/>
                    </method>
                </anonymous_class>
                <declaration name="task" type="Runnable" line="366"/>
            </method>
        </class>
    </source>