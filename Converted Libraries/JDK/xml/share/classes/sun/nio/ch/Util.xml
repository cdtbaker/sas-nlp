<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.reflect"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.MappedByteBuffer"/>
        <import package="java.nio.channels"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.misc.Cleaner"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="Util" line="43">
            <comment line="46">
                -- Caches --                
            </comment>
            <comment line="48">
                The number of temp buffers in our pool                
            </comment>
            <comment line="51">
                Per-thread cache of temporary direct buffers                
            </comment>
            <comment line="244">
                Per-thread cached selector                
            </comment>
            <comment line="247">
                Hold a reference to the selWrapper object to prevent it from                
            </comment>
            <comment line="248">
                being cleaned when the temporary selector wrapped is on lease.                
            </comment>
            <comment line="252">
                When finished, invoker must ensure that selector is empty                
            </comment>
            <comment line="253">
                by cancelling any related keys and explicitly releasing                
            </comment>
            <comment line="254">
                the selector by invoking releaseTemporarySelector()                
            </comment>
            <comment line="283">
                -- Random stuff --                
            </comment>
            <comment line="331">
                -- Unsafe access --                
            </comment>
            <comment line="460">
                -- Bug compatibility --                
            </comment>
            <comment line="477">
                -- Initialization --                
            </comment>
            <declaration name="TEMP_BUF_POOL_SIZE" type="int" line="48"/>
            <declaration name="bufferCache" type="ThreadLocal&lt;BufferCache&gt;" line="51"/>
            <anonymous_class line="53">
                <method name="initialValue" type="BufferCache" line="55"/>
            </anonymous_class>
            <class name="BufferCache" line="60">
                <comment line="65">
                    the array of buffers                    
                </comment>
                <comment line="68">
                    the number of buffers in the cache                    
                </comment>
                <comment line="71">
                    the index of the first valid buffer (undefined if count == 0)                    
                </comment>
                <javadoc line="60">
                    A simple cache of direct buffers.                    
                </javadoc>
                <declaration name="buffers" type="ByteBuffer[]" line="65"/>
                <declaration name="count" type="int" line="68"/>
                <declaration name="start" type="int" line="71"/>
                <method name="next" type="int" line="73">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="BufferCache" type="constructor" line="77"/>
                <javadoc line="81">
                    Removes and returns a buffer from the cache of at least the given
                      size (or null if no suitable buffer is found).                    
                </javadoc>
                <method name="get" type="ByteBuffer" line="85">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <comment line="87">
                        cache is empty                        
                    </comment>
                    <comment line="91">
                        search for suitable buffer (often the first buffer will do)                        
                    </comment>
                    <comment line="107">
                        move first element to here to avoid re-packing                        
                    </comment>
                    <comment line="111">
                        remove first element                        
                    </comment>
                    <comment line="116">
                        prepare the buffer and return it                        
                    </comment>
                    <declaration name="buffers" type="ByteBuffer[]" line="89"/>
                    <declaration name="buf" type="ByteBuffer" line="92"/>
                    <scope line="93">
                        <declaration name="i" type="int" line="95"/>
                        <scope line="96">
                            <declaration name="bb" type="ByteBuffer" line="97"/>
                            <scope line="100"/>
                        </scope>
                    </scope>
                </method>
                <method name="offerFirst" type="boolean" line="122">
                    <params>
                        <param name="buf" type="ByteBuffer"/>
                    </params>
                    <scope line="123"/>
                    <scope line="125"/>
                </method>
                <method name="offerLast" type="boolean" line="133">
                    <params>
                        <param name="buf" type="ByteBuffer"/>
                    </params>
                    <scope line="134"/>
                    <scope line="136">
                        <declaration name="next" type="int" line="137"/>
                    </scope>
                </method>
                <method name="isEmpty" type="boolean" line="144"/>
                <method name="removeFirst" type="ByteBuffer" line="148">
                    <declaration name="buf" type="ByteBuffer" line="150"/>
                </method>
            </class>
            <javadoc line="158">
                Returns a temporary buffer of at least the given size                
            </javadoc>
            <method name="getTemporaryDirectBuffer" type="ByteBuffer" line="161">
                <params>
                    <param name="size" type="int"/>
                </params>
                <comment line="167">
                    No suitable buffer in the cache so we need to allocate a new                    
                </comment>
                <comment line="168">
                    one. To avoid the cache growing then we remove the first                    
                </comment>
                <comment line="169">
                    buffer from the cache and free it.                    
                </comment>
                <declaration name="cache" type="BufferCache" line="162"/>
                <declaration name="buf" type="ByteBuffer" line="163"/>
                <scope line="164"/>
                <scope line="166">
                    <scope line="170"/>
                </scope>
            </method>
            <javadoc line="178">
                Releases a temporary buffer by returning to the cache or freeing it.                
            </javadoc>
            <method name="releaseTemporaryDirectBuffer" type="void" line="181">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="185">
                Releases a temporary buffer by returning to the cache or freeing it. If
                  returning to the cache then insert it at the start so that it is
                  likely to be returned by a subsequent call to getTemporaryDirectBuffer.                
            </javadoc>
            <method name="offerFirstTemporaryDirectBuffer" type="void" line="190">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
                <comment line="194">
                    cache is full                    
                </comment>
                <declaration name="cache" type="BufferCache" line="192"/>
                <scope line="193"/>
            </method>
            <javadoc line="199">
                Releases a temporary buffer by returning to the cache or freeing it. If
                  returning to the cache then insert it at the end. This makes it
                  suitable for scatter/gather operations where the buffers are returned to
                  cache in same order that they were obtained.                
            </javadoc>
            <method name="offerLastTemporaryDirectBuffer" type="void" line="205">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
                <comment line="209">
                    cache is full                    
                </comment>
                <declaration name="cache" type="BufferCache" line="207"/>
                <scope line="208"/>
            </method>
            <javadoc line="214">
                Frees the memory for the given direct buffer                
            </javadoc>
            <method name="free" type="void" line="217">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <class name="SelectorWrapper" line="221">
                <comment line="65">
                    the array of buffers                    
                </comment>
                <comment line="68">
                    the number of buffers in the cache                    
                </comment>
                <comment line="71">
                    the index of the first valid buffer (undefined if count == 0)                    
                </comment>
                <declaration name="sel" type="Selector" line="222"/>
                <method name="SelectorWrapper" type="constructor" line="223">
                    <params>
                        <param name="sel" type="Selector"/>
                    </params>
                </method>
                <class name="Closer" line="227">
                    <implements interface="Runnable"/>
                    <declaration name="sel" type="Selector" line="228"/>
                    <method name="Closer" type="constructor" line="229">
                        <params>
                            <param name="sel" type="Selector"/>
                        </params>
                    </method>
                    <method name="run" type="void" line="232">
                        <scope line="233"/>
                        <scope line="235"/>
                    </method>
                </class>
                <method name="get" type="Selector" line="240"/>
            </class>
            <declaration name="localSelector" type="ThreadLocal&lt;SoftReference&lt;SelectorWrapper&gt;&gt;" line="244"/>
            <declaration name="localSelectorWrapper" type="ThreadLocal&lt;SelectorWrapper&gt;" line="248"/>
            <method name="getTemporarySelector" type="Selector" line="256">
                <params>
                    <param name="sc" type="SelectableChannel"/>
                </params>
                <declaration name="ref" type="SoftReference&lt;SelectorWrapper&gt;" line="257"/>
                <declaration name="selWrapper" type="SelectorWrapper" line="258"/>
                <declaration name="sel" type="Selector" line="259"/>
                <scope line="263"/>
            </method>
            <method name="releaseTemporarySelector" type="void" line="274">
                <params>
                    <param name="sel" type="Selector"/>
                </params>
                <comment line="275">
                    Selector should be empty                    
                </comment>
                <comment line="276">
                    Flush cancelled keys                    
                </comment>
            </method>
            <method name="subsequence" type="ByteBuffer[]" line="284">
                <params>
                    <param name="bs" type="ByteBuffer[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="n" type="int" line="287"/>
                <declaration name="bs2" type="ByteBuffer[]" line="288"/>
            </method>
            <method name="ungrowableSet" type="Set<E>" line="294">
                <params>
                    <param name="s" type="Set<E>"/>
                </params>
                <anonymous_class line="295">
                    <method name="size" type="int" line="297"/>
                    <method name="isEmpty" type="boolean" line="298"/>
                    <method name="contains" type="boolean" line="299">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="toArray" type="Object[]" line="300"/>
                    <method name="toArray" type="T[]" line="301">
                        <params>
                            <param name="a" type="T[]"/>
                        </params>
                    </method>
                    <method name="toString" type="String" line="302"/>
                    <method name="iterator" type="Iterator<E>" line="303"/>
                    <method name="equals" type="boolean" line="304">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="hashCode" type="int" line="305"/>
                    <method name="clear" type="void" line="306"/>
                    <method name="remove" type="boolean" line="307">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="containsAll" type="boolean" line="309">
                        <params>
                            <param name="coll" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="removeAll" type="boolean" line="312">
                        <params>
                            <param name="coll" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="retainAll" type="boolean" line="315">
                        <params>
                            <param name="coll" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="add" type="boolean" line="319">
                        <params>
                            <param name="o" type="E"/>
                        </params>
                    </method>
                    <method name="addAll" type="boolean" line="322">
                        <params>
                            <param name="coll" type="Collection<? extends E>"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="unsafe" type="Unsafe" line="332"/>
            <method name="_get" type="byte" line="334">
                <params>
                    <param name="a" type="long"/>
                </params>
            </method>
            <method name="_put" type="void" line="338">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="erase" type="void" line="342">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
            </method>
            <method name="unsafe" type="Unsafe" line="346"/>
            <declaration name="pageSize" type="int" line="350"/>
            <method name="pageSize" type="int" line="352"/>
            <declaration name="directByteBufferConstructor" type="Constructor" line="358"/>
            <method name="initDBBConstructor" type="void" line="360">
                <anonymous_class line="361">
                    <method name="run" type="Void" line="362">
                        <scope line="363">
                            <declaration name="cl" type="Class&lt;?&gt;" line="364"/>
                            <declaration name="ctor" type="Constructor" line="365"/>
                        </scope>
                        <scope line="372"/>
                        <scope line="374"/>
                        <scope line="376"/>
                        <scope line="378"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="newMappedByteBuffer" type="MappedByteBuffer" line="388">
                <params>
                    <param name="size" type="int"/>
                    <param name="addr" type="long"/>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="unmapper" type="Runnable"/>
                </params>
                <declaration name="dbb" type="MappedByteBuffer" line="389"/>
                <scope line="392"/>
                <scope line="398"/>
                <scope line="400"/>
                <scope line="402"/>
            </method>
            <declaration name="directByteBufferRConstructor" type="Constructor" line="408"/>
            <method name="initDBBRConstructor" type="void" line="410">
                <anonymous_class line="411">
                    <method name="run" type="Void" line="412">
                        <scope line="413">
                            <declaration name="cl" type="Class&lt;?&gt;" line="414"/>
                            <declaration name="ctor" type="Constructor" line="415"/>
                        </scope>
                        <scope line="422"/>
                        <scope line="424"/>
                        <scope line="426"/>
                        <scope line="428"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="newMappedByteBufferR" type="MappedByteBuffer" line="438">
                <params>
                    <param name="size" type="int"/>
                    <param name="addr" type="long"/>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="unmapper" type="Runnable"/>
                </params>
                <declaration name="dbb" type="MappedByteBuffer" line="439"/>
                <scope line="442"/>
                <scope line="448"/>
                <scope line="450"/>
                <scope line="452"/>
            </method>
            <declaration name="bugLevel" type="String" line="461"/>
            <method name="atBugLevel" type="boolean" line="463">
                <params>
                    <param name="bl" type="String"/>
                </params>
                <scope line="464">
                    <declaration name="value" type="String" line="467"/>
                </scope>
            </method>
            <declaration name="loaded" type="boolean" line="478"/>
            <method name="load" type="void" line="480">
                <comment line="489">
                    IOUtil must be initialized; Its native methods are called from                    
                </comment>
                <comment line="490">
                    other places in native nio code so they must be set up.                    
                </comment>
                <scope line="481"/>
            </method>
        </class>
    </source>