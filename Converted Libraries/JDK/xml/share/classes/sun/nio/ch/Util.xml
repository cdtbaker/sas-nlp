<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.nio.ch">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.reflect"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.MappedByteBuffer"/>
        <import package="java.nio.channels"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.misc.Cleaner"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="Util" line="15">
            <declaration name="TEMP_BUF_POOL_SIZE" type="int" line="16"/>
            <declaration name="bufferCache" type="ThreadLocal&lt;BufferCache&gt;" line="17"/>
            <anonymous_class line="17">
                <method name="initialValue" type="BufferCache" line="18"/>
            </anonymous_class>
            <class name="BufferCache" line="23">
                <javadoc line="23">
                    A simple cache of direct buffers.                    
                </javadoc>
                <declaration name="buffers" type="ByteBuffer[]" line="27"/>
                <declaration name="count" type="int" line="28"/>
                <declaration name="start" type="int" line="29"/>
                <method name="next" type="int" line="30">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="BufferCache" type="constructor" line="33"/>
                <javadoc line="36">
                    Removes and returns a buffer from the cache of at least the given
                      size (or null if no suitable buffer is found).                    
                </javadoc>
                <method name="get" type="ByteBuffer" line="40">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <declaration name="buffers" type="ByteBuffer[]" line="42"/>
                    <declaration name="buf" type="ByteBuffer" line="43"/>
                    <scope line="44">
                        <declaration name="i" type="int" line="46"/>
                        <scope line="47">
                            <declaration name="bb" type="ByteBuffer" line="48"/>
                            <scope line="50"/>
                        </scope>
                    </scope>
                </method>
                <method name="offerFirst" type="boolean" line="65">
                    <params>
                        <param name="buf" type="ByteBuffer"/>
                    </params>
                    <scope line="66"/>
                    <scope line="69"/>
                </method>
                <method name="offerLast" type="boolean" line="76">
                    <params>
                        <param name="buf" type="ByteBuffer"/>
                    </params>
                    <scope line="77"/>
                    <scope line="80">
                        <declaration name="next" type="int" line="81"/>
                    </scope>
                </method>
                <method name="isEmpty" type="boolean" line="87"/>
                <method name="removeFirst" type="ByteBuffer" line="90"/>
            </class>
            <javadoc line="99">
                Returns a temporary buffer of at least the given size                
            </javadoc>
            <method name="getTemporaryDirectBuffer" type="ByteBuffer" line="102">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="cache" type="BufferCache" line="103"/>
                <declaration name="buf" type="ByteBuffer" line="104"/>
                <scope line="105"/>
                <scope line="108">
                    <scope line="109"/>
                </scope>
            </method>
            <javadoc line="116">
                Releases a temporary buffer by returning to the cache or freeing it.                
            </javadoc>
            <method name="releaseTemporaryDirectBuffer" type="void" line="119">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="122">
                Releases a temporary buffer by returning to the cache or freeing it. If
                  returning to the cache then insert it at the start so that it is
                  likely to be returned by a subsequent call to getTemporaryDirectBuffer.                
            </javadoc>
            <method name="offerFirstTemporaryDirectBuffer" type="void" line="127">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="134">
                Releases a temporary buffer by returning to the cache or freeing it. If
                  returning to the cache then insert it at the end. This makes it
                  suitable for scatter/gather operations where the buffers are returned to
                  cache in same order that they were obtained.                
            </javadoc>
            <method name="offerLastTemporaryDirectBuffer" type="void" line="140">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="147">
                Frees the memory for the given direct buffer                
            </javadoc>
            <method name="free" type="void" line="150">
                <params>
                    <param name="buf" type="ByteBuffer"/>
                </params>
            </method>
            <class name="SelectorWrapper" line="153">
                <declaration name="sel" type="Selector" line="154"/>
                <method name="SelectorWrapper" type="constructor" line="155">
                    <params>
                        <param name="sel" type="Selector"/>
                    </params>
                </method>
                <class name="Closer" line="159">
                    <implements interface="Runnable"/>
                    <declaration name="sel" type="Selector" line="160"/>
                    <method name="Closer" type="constructor" line="161">
                        <params>
                            <param name="sel" type="Selector"/>
                        </params>
                    </method>
                    <method name="run" type="void" line="164">
                        <scope line="165"/>
                        <scope line="168"/>
                    </method>
                </class>
                <method name="get" type="Selector" line="173"/>
            </class>
            <declaration name="localSelector" type="ThreadLocal&lt;SoftReference&lt;SelectorWrapper&gt;&gt;" line="177"/>
            <declaration name="localSelectorWrapper" type="ThreadLocal&lt;SelectorWrapper&gt;" line="178"/>
            <method name="getTemporarySelector" type="Selector" line="179">
                <params>
                    <param name="sc" type="SelectableChannel"/>
                </params>
                <declaration name="ref" type="SoftReference&lt;SelectorWrapper&gt;" line="180"/>
                <declaration name="selWrapper" type="SelectorWrapper" line="181"/>
                <declaration name="sel" type="Selector" line="182"/>
                <scope line="183"/>
            </method>
            <method name="releaseTemporarySelector" type="void" line="191">
                <params>
                    <param name="sel" type="Selector"/>
                </params>
            </method>
            <method name="subsequence" type="ByteBuffer[]" line="196">
                <params>
                    <param name="bs" type="ByteBuffer[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="n" type="int" line="198"/>
                <declaration name="bs2" type="ByteBuffer[]" line="199"/>
            </method>
            <method name="ungrowableSet" type="Set<E>" line="203">
                <params>
                    <param name="s" type="Set<E>"/>
                </params>
                <anonymous_class line="204">
                    <method name="size" type="int" line="205"/>
                    <method name="isEmpty" type="boolean" line="208"/>
                    <method name="contains" type="boolean" line="211">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="toArray" type="Object[]" line="214"/>
                    <method name="toArray" type="T[]" line="217">
                        <params>
                            <param name="a" type="T[]"/>
                        </params>
                    </method>
                    <method name="toString" type="String" line="220"/>
                    <method name="iterator" type="Iterator<E>" line="223"/>
                    <method name="equals" type="boolean" line="226">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="hashCode" type="int" line="229"/>
                    <method name="clear" type="void" line="232"/>
                    <method name="remove" type="boolean" line="235">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                    </method>
                    <method name="containsAll" type="boolean" line="238">
                        <params>
                            <param name="coll" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="removeAll" type="boolean" line="241">
                        <params>
                            <param name="coll" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="retainAll" type="boolean" line="244">
                        <params>
                            <param name="coll" type="Collection<?>"/>
                        </params>
                    </method>
                    <method name="add" type="boolean" line="247">
                        <params>
                            <param name="o" type="E"/>
                        </params>
                    </method>
                    <method name="addAll" type="boolean" line="250">
                        <params>
                            <param name="coll" type="Collection<? extends E>"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="unsafe" type="Unsafe" line="256"/>
            <method name="_get" type="byte" line="257">
                <params>
                    <param name="a" type="long"/>
                </params>
            </method>
            <method name="_put" type="void" line="260">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="erase" type="void" line="263">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
            </method>
            <method name="unsafe" type="Unsafe" line="266"/>
            <declaration name="pageSize" type="int" line="269"/>
            <method name="pageSize" type="int" line="270"/>
            <declaration name="directByteBufferConstructor" type="Constructor" line="274"/>
            <method name="initDBBConstructor" type="void" line="275">
                <anonymous_class line="276">
                    <method name="run" type="Void" line="277">
                        <scope line="278">
                            <declaration name="cl" type="Class&lt;?&gt;" line="279"/>
                            <declaration name="ctor" type="Constructor" line="280"/>
                        </scope>
                        <scope line="284"/>
                        <scope line="287"/>
                        <scope line="290"/>
                        <scope line="293"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="newMappedByteBuffer" type="MappedByteBuffer" line="301">
                <params>
                    <param name="size" type="int"/>
                    <param name="addr" type="long"/>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="unmapper" type="Runnable"/>
                </params>
                <declaration name="dbb" type="MappedByteBuffer" line="302"/>
                <scope line="304"/>
                <scope line="307"/>
                <scope line="310"/>
                <scope line="313"/>
            </method>
            <declaration name="directByteBufferRConstructor" type="Constructor" line="318"/>
            <method name="initDBBRConstructor" type="void" line="319">
                <anonymous_class line="320">
                    <method name="run" type="Void" line="321">
                        <scope line="322">
                            <declaration name="cl" type="Class&lt;?&gt;" line="323"/>
                            <declaration name="ctor" type="Constructor" line="324"/>
                        </scope>
                        <scope line="328"/>
                        <scope line="331"/>
                        <scope line="334"/>
                        <scope line="337"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="newMappedByteBufferR" type="MappedByteBuffer" line="345">
                <params>
                    <param name="size" type="int"/>
                    <param name="addr" type="long"/>
                    <param name="fd" type="FileDescriptor"/>
                    <param name="unmapper" type="Runnable"/>
                </params>
                <declaration name="dbb" type="MappedByteBuffer" line="346"/>
                <scope line="348"/>
                <scope line="351"/>
                <scope line="354"/>
                <scope line="357"/>
            </method>
            <declaration name="bugLevel" type="String" line="362"/>
            <method name="atBugLevel" type="boolean" line="363">
                <params>
                    <param name="bl" type="String"/>
                </params>
                <scope line="364">
                    <declaration name="value" type="String" line="366"/>
                </scope>
            </method>
            <declaration name="loaded" type="boolean" line="371"/>
            <method name="load" type="void" line="372">
                <scope line="373"/>
            </method>
        </class>
    </source>