<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text">
        <class name="IntHashtable" line="33">
            <comment line="144">
                =======================PRIVATES============================                
            </comment>
            <comment line="147">
                the tables have to have prime-number lengths. Rather than compute
                 primes, we just keep a table, with the current index we are using.                
            </comment>
            <comment line="151">
                highWaterFactor determines the maximum number of elements before
                 a rehash. Can be tuned for different performance/storage characteristics.                
            </comment>
            <comment line="156">
                lowWaterFactor determines the minimum number of elements before
                 a rehash. Can be tuned for different performance/storage characteristics.                
            </comment>
            <comment line="163">
                we use two arrays to minimize allocations                
            </comment>
            <comment line="264">
                This list is the result of buildList below. Can be tuned for different
                 performance/storage characteristics.                
            </comment>
            <javadoc line="33">
                Simple internal class for doing hash mapping. Much, much faster than the
                  standard Hashtable for integer to integer mappings,
                  and doesn&apos;t require object creation.&lt;br&gt;
                  If a key is not found, the defaultValue is returned.
                  Note: the keys are limited to values above Integer.MIN_VALUE+1.&lt;br&gt;                
            </javadoc>
            <method name="IntHashtable" type="constructor" line="41"/>
            <method name="IntHashtable" type="constructor" line="45">
                <params>
                    <param name="initialSize" type="int"/>
                </params>
            </method>
            <method name="size" type="int" line="49"/>
            <method name="isEmpty" type="boolean" line="53"/>
            <method name="put" type="void" line="57">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="int"/>
                </params>
                <comment line="63">
                    deleted or empty                    
                </comment>
                <comment line="67">
                    reset value                    
                </comment>
                <scope line="58"/>
                <declaration name="index" type="int" line="61"/>
                <scope line="62"/>
            </method>
            <method name="get" type="int" line="69">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <method name="remove" type="void" line="73">
                <params>
                    <param name="key" type="int"/>
                </params>
                <comment line="76">
                    neither deleted nor empty                    
                </comment>
                <comment line="77">
                    set to deleted                    
                </comment>
                <comment line="78">
                    set to default                    
                </comment>
                <declaration name="index" type="int" line="74"/>
                <scope line="75">
                    <scope line="79"/>
                </scope>
            </method>
            <method name="getDefaultValue" type="int" line="85"/>
            <method name="setDefaultValue" type="void" line="89">
                <params>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="94">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="other" type="IntHashtable" line="97"/>
                <scope line="98"/>
                <scope line="101">
                    <declaration name="key" type="int" line="102"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="109">
                <comment line="111">
                    NOTE:  This function isn&apos;t actually used anywhere in this package, but it&apos;s here
                     in case this class is ever used to make sure we uphold the invariants about
                     hashCode() and equals()                    
                </comment>
                <comment line="115">
                    WARNING:  This function hasn&apos;t undergone rigorous testing to make sure it actually
                     gives good distribution.  We&apos;ve eyeballed the results, and they appear okay, but
                     you copy this algorithm (or these seed and multiplier values) at your own risk.
                                                            --rtg 8/17/99                    
                </comment>
                <comment line="120">
                    an arbitrary seed value                    
                </comment>
                <comment line="121">
                    an arbitrary multiplier.                    
                </comment>
                <comment line="123">
                    this line just scrambles the bits as each value is added into the
                     has value.  This helps to make sure we affect all the bits and that
                     the same values in a different order will produce a different hash value                    
                </comment>
                <declaration name="result" type="int" line="119"/>
                <declaration name="scrambler" type="int" line="120"/>
                <scope line="121"/>
                <scope line="128"/>
            </method>
            <method name="clone" type="Object" line="136">
                <declaration name="result" type="IntHashtable" line="137"/>
            </method>
            <declaration name="defaultValue" type="int" line="144"/>
            <declaration name="primeIndex" type="int" line="148"/>
            <declaration name="HIGH_WATER_FACTOR" type="float" line="152"/>
            <declaration name="highWaterMark" type="int" line="153"/>
            <declaration name="LOW_WATER_FACTOR" type="float" line="157"/>
            <declaration name="lowWaterMark" type="int" line="158"/>
            <declaration name="count" type="int" line="160"/>
            <declaration name="values" type="int[]" line="163"/>
            <declaration name="keyList" type="int[]" line="164"/>
            <declaration name="EMPTY" type="int" line="166"/>
            <declaration name="DELETED" type="int" line="167"/>
            <declaration name="MAX_UNUSED" type="int" line="168"/>
            <method name="initialize" type="void" line="170">
                <params>
                    <param name="primeIndex" type="int"/>
                </params>
                <comment line="177">
                    throw new java.util.IllegalArgumentError();                    
                </comment>
                <scope line="171"/>
                <scope line="173"/>
                <declaration name="initialSize" type="int" line="179"/>
                <scope line="182"/>
            </method>
            <method name="rehash" type="void" line="191">
                <declaration name="oldValues" type="int[]" line="192"/>
                <declaration name="oldkeyList" type="int[]" line="193"/>
                <declaration name="newPrimeIndex" type="int" line="194"/>
                <scope line="195"/>
                <scope line="197"/>
                <scope line="201">
                    <declaration name="key" type="int" line="202"/>
                    <scope line="203"/>
                </scope>
            </method>
            <method name="putInternal" type="void" line="209">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="int"/>
                </params>
                <comment line="212">
                    deleted or empty                    
                </comment>
                <comment line="216">
                    reset value                    
                </comment>
                <declaration name="index" type="int" line="210"/>
                <scope line="211"/>
            </method>
            <method name="find" type="int" line="218">
                <params>
                    <param name="key" type="int"/>
                </params>
                <comment line="222">
                    assume invalid index                    
                </comment>
                <comment line="224">
                    positive only                    
                </comment>
                <comment line="225">
                    lazy evaluate                    
                </comment>
                <comment line="228">
                    quick check                    
                </comment>
                <comment line="230">
                    neither correct nor unused                    
                </comment>
                <comment line="231">
                    ignore                    
                </comment>
                <comment line="232">
                    empty, end o&apos; the line                    
                </comment>
                <comment line="234">
                    reset if had deleted slot                    
                </comment>
                <comment line="237">
                    remember first deleted                    
                </comment>
                <comment line="240">
                    lazy compute jump                    
                </comment>
                <comment line="248">
                    We&apos;ve searched all entries for the given key.                    
                </comment>
                <declaration name="firstDeleted" type="int" line="221"/>
                <declaration name="index" type="int" line="222"/>
                <declaration name="jump" type="int" line="224"/>
                <scope line="225">
                    <declaration name="tableHash" type="int" line="226"/>
                    <scope line="227"/>
                    <scope line="229"/>
                    <scope line="231">
                        <scope line="232"/>
                    </scope>
                    <scope line="236"/>
                    <scope line="239"/>
                    <scope line="246"/>
                </scope>
            </method>
            <method name="leastGreaterPrimeIndex" type="int" line="253">
                <params>
                    <param name="source" type="int"/>
                </params>
                <declaration name="i" type="int" line="254"/>
                <scope line="255">
                    <scope line="256"/>
                </scope>
            </method>
            <declaration name="PRIMES" type="int[]" line="265"/>
        </class>
    </source>