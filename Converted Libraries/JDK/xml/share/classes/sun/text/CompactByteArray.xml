<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text">
        <class name="CompactByteArray" line="42">
            <comment line="311">
                --------------------------------------------------------------                
            </comment>
            <comment line="312">
                package private                
            </comment>
            <comment line="313">
                --------------------------------------------------------------                
            </comment>
            <comment line="349">
                char -&gt; short (char parameterized short)                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="42">
                class CompactATypeArray : use only on primitive data types
                  Provides a compact way to store information that is indexed by Unicode
                  values, such as character properties, types, keyboard values, etc.This
                  is very useful when you have a block of Unicode data that contains
                  significant values while the rest of the Unicode data is unused in the
                  application or when you have a lot of redundance, such as where all 21,000
                  Han ideographs have the same value.  However, lookup is much faster than a
                  hash table.
                  A compact array of any primitive data type serves two purposes:
                  &lt;UL type = round&gt;
                  &lt;LI&gt;Fast access of the indexed values.
                  &lt;LI&gt;Smaller memory footprint.
                  &lt;/UL&gt;
                  A compact array is composed of a index array and value array.  The index
                  array contains the indicies of Unicode characters to the value array.                
                <see>
                    CompactIntArray                    
                </see>
                <see>
                    CompactShortArray                    
                </see>
                <author>
                    Helena Shih                    
                </author>
            </javadoc>
            <declaration name="UNICODECOUNT" type="int" line="65"/>
            <javadoc line="65">
                The total number of Unicode characters.                
            </javadoc>
            <javadoc line="70">
                Constructor for CompactByteArray.                
                <param>
                    defaultValue the default value of the compact array.                    
                </param>
            </javadoc>
            <method name="CompactByteArray" type="constructor" line="75">
                <params>
                    <param name="defaultValue" type="byte"/>
                </params>
                <declaration name="i" type="int" line="76"/>
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <javadoc line="90">
                Constructor for CompactByteArray.                
                <param>
                    indexArray the indicies of the compact array.                    
                </param>
                <param>
                    newValues the values of the compact array.                    
                </param>
                <exception>
                    IllegalArgumentException If index is out of range.                    
                </exception>
            </javadoc>
            <method name="CompactByteArray" type="constructor" line="98">
                <params>
                    <param name="indexArray" type="short"/>
                    <param name="newValues" type="byte"/>
                </params>
                <declaration name="i" type="int" line="99"/>
                <scope line="102">
                    <declaration name="index" type="short" line="103"/>
                </scope>
            </method>
            <javadoc line="112">
                Get the mapped value of a Unicode character.                
                <param>
                    index the character to get the mapped value with                    
                </param>
                <return>
                    the mapped value of the given character                    
                </return>
            </javadoc>
            <method name="elementAt" type="byte" line="118">
                <params>
                    <param name="index" type="char"/>
                </params>
            </method>
            <javadoc line="122">
                Set a new value for a Unicode character.
                  Set automatically expands the array if it is compacted.                
                <param>
                    index the character to set the mapped value with                    
                </param>
                <param>
                    value the new mapped value                    
                </param>
            </javadoc>
            <method name="setElementAt" type="void" line="129">
                <params>
                    <param name="index" type="char"/>
                    <param name="value" type="byte"/>
                </params>
            </method>
            <javadoc line="136">
                Set new values for a range of Unicode character.                
                <param>
                    start the starting offset o of the range                    
                </param>
                <param>
                    end the ending offset of the range                    
                </param>
                <param>
                    value the new mapped value                    
                </param>
            </javadoc>
            <method name="setElementAt" type="void" line="143">
                <params>
                    <param name="start" type="char"/>
                    <param name="end" type="char"/>
                    <param name="value" type="byte"/>
                </params>
                <declaration name="i" type="int" line="144"/>
                <scope line="145"/>
                <scope line="148"/>
            </method>
            <javadoc line="154">
                Compact the array.                
            </javadoc>
            <method name="compact" type="void" line="158">
                <comment line="168">
                    If no values in this block were set, we can just set its                    
                </comment>
                <comment line="169">
                    index to be the same as some other block with no values                    
                </comment>
                <comment line="170">
                    set, assuming we&apos;ve seen one yet.                    
                </comment>
                <comment line="185">
                    we didn&apos;t match, so copy &amp; update                    
                </comment>
                <comment line="193">
                    If this is the first untouched block we&apos;ve seen,                    
                </comment>
                <comment line="194">
                    remember its index.                    
                </comment>
                <comment line="200">
                    we are done compacting, so now make the array shorter                    
                </comment>
                <scope line="159">
                    <declaration name="limitCompacted" type="int" line="160"/>
                    <declaration name="iBlockStart" type="int" line="161"/>
                    <declaration name="iUntouched" type="short" line="162"/>
                    <scope line="164">
                        <declaration name="touched" type="boolean" line="166"/>
                        <scope line="167"/>
                        <scope line="172">
                            <declaration name="jBlockStart" type="int" line="173"/>
                            <declaration name="j" type="int" line="174"/>
                            <scope line="176">
                                <scope line="179"/>
                            </scope>
                            <scope line="184">
                                <scope line="192"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="newSize" type="int" line="201"/>
                    <declaration name="result" type="byte[]" line="202"/>
                </scope>
            </method>
            <javadoc line="210">
                Convenience utility to compare two arrays of doubles.                
                <param>
                    len the length to compare.
                      The start indices and start+len must be valid.                    
                </param>
            </javadoc>
            <method name="arrayRegionMatches" type="boolean" line="218">
                <params>
                    <param name="source" type="byte[]"/>
                    <param name="sourceStart" type="int"/>
                    <param name="target" type="byte[]"/>
                    <param name="targetStart" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sourceEnd" type="int" line="219"/>
                <declaration name="delta" type="int" line="220"/>
                <scope line="221"/>
            </method>
            <javadoc line="228">
                Remember that a specified block was &quot;touched&quot;, i.e. had a value set.
                  Untouched blocks can be skipped when compacting the array                
            </javadoc>
            <method name="touchBlock" type="void" line="232">
                <params>
                    <param name="i" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="236">
                Query whether a specified block was &quot;touched&quot;, i.e. had a value set.
                  Untouched blocks can be skipped when compacting the array                
            </javadoc>
            <method name="blockTouched" type="boolean" line="240">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="244">
                For internal use only.  Do not modify the result, the behavior of
                  modified results are undefined.                
            </javadoc>
            <method name="getIndexArray" type="short" line="248"/>
            <javadoc line="252">
                For internal use only.  Do not modify the result, the behavior of
                  modified results are undefined.                
            </javadoc>
            <method name="getStringArray" type="byte" line="256"/>
            <javadoc line="260">
                Overrides Cloneable                
            </javadoc>
            <method name="clone" type="Object" line="264">
                <scope line="265">
                    <declaration name="other" type="CompactByteArray" line="266"/>
                </scope>
                <scope line="271"/>
            </method>
            <javadoc line="276">
                Compares the equality of two compact array objects.                
                <param>
                    obj the compact array object to be compared with this.                    
                </param>
                <return>
                    true if the current compact array object is the same
                      as the compact array object obj; false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="282">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="284">
                    quick check                    
                </comment>
                <comment line="286">
                    same class?                    
                </comment>
                <comment line="290">
                    could be sped up later                    
                </comment>
                <comment line="294">
                    we made it through the guantlet.                    
                </comment>
                <declaration name="other" type="CompactByteArray" line="288"/>
                <scope line="289"/>
            </method>
            <javadoc line="297">
                Generates the hash code for the compact array object                
            </javadoc>
            <method name="hashCode" type="int" line="301">
                <declaration name="result" type="int" line="302"/>
                <declaration name="increment" type="int" line="303"/>
                <scope line="304"/>
            </method>
            <javadoc line="313">
                Expanding takes the array back to a 65536 element array.                
            </javadoc>
            <method name="expand" type="void" line="317">
                <declaration name="i" type="int" line="318"/>
                <scope line="319">
                    <declaration name="tempArray" type="byte[]" line="320"/>
                    <scope line="323">
                        <declaration name="value" type="byte" line="324"/>
                    </scope>
                    <scope line="328"/>
                </scope>
            </method>
            <method name="getArray" type="byte[]" line="338"/>
            <declaration name="BLOCKSHIFT" type="int" line="342"/>
            <declaration name="BLOCKCOUNT" type="int" line="343"/>
            <declaration name="INDEXSHIFT" type="int" line="344"/>
            <declaration name="INDEXCOUNT" type="int" line="345"/>
            <declaration name="BLOCKMASK" type="int" line="346"/>
            <declaration name="values" type="byte[]" line="348"/>
            <declaration name="indices" type="short" line="349"/>
            <declaration name="isCompact" type="boolean" line="350"/>
            <declaration name="hashes" type="int[]" line="351"/>
        </class>
    </source>