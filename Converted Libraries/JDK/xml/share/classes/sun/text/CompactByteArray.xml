<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text">
        <class name="CompactByteArray" line="2">
            <implements interface="Cloneable"/>
            <javadoc line="2">
                class CompactATypeArray : use only on primitive data types
                  Provides a compact way to store information that is indexed by Unicode
                  values, such as character properties, types, keyboard values, etc.This
                  is very useful when you have a block of Unicode data that contains
                  significant values while the rest of the Unicode data is unused in the
                  application or when you have a lot of redundance, such as where all 21,000
                  Han ideographs have the same value.  However, lookup is much faster than a
                  hash table.
                  A compact array of any primitive data type serves two purposes:
                  &lt;UL type = round&gt;
                  &lt;LI&gt;Fast access of the indexed values.
                  &lt;LI&gt;Smaller memory footprint.
                  &lt;/UL&gt;
                  A compact array is composed of a index array and value array.  The index
                  array contains the indicies of Unicode characters to the value array.                
                <see>
                    CompactIntArray                    
                </see>
                <see>
                    CompactShortArray                    
                </see>
                <author>
                    Helena Shih                    
                </author>
            </javadoc>
            <declaration name="UNICODECOUNT" type="int" line="23"/>
            <javadoc line="23">
                The total number of Unicode characters.                
            </javadoc>
            <javadoc line="27">
                Constructor for CompactByteArray.                
                <param>
                    defaultValue the default value of the compact array.                    
                </param>
            </javadoc>
            <method name="CompactByteArray" type="constructor" line="31">
                <params>
                    <param name="defaultValue" type="byte"/>
                </params>
                <declaration name="i" type="int" line="32"/>
                <scope line="36"/>
                <scope line="39"/>
            </method>
            <javadoc line="45">
                Constructor for CompactByteArray.                
                <param>
                    indexArray the indicies of the compact array.                    
                </param>
                <param>
                    newValues the values of the compact array.                    
                </param>
                <exception>
                    IllegalArgumentException If index is out of range.                    
                </exception>
            </javadoc>
            <method name="CompactByteArray" type="constructor" line="51">
                <params>
                    <param name="indexArray" type="short"/>
                    <param name="newValues" type="byte"/>
                </params>
                <declaration name="i" type="int" line="52"/>
                <scope line="54">
                    <declaration name="index" type="short" line="55"/>
                </scope>
            </method>
            <javadoc line="62">
                Get the mapped value of a Unicode character.                
                <param>
                    index the character to get the mapped value with                    
                </param>
                <return>
                    the mapped value of the given character                    
                </return>
            </javadoc>
            <method name="elementAt" type="byte" line="67">
                <params>
                    <param name="index" type="char"/>
                </params>
            </method>
            <javadoc line="70">
                Set a new value for a Unicode character.
                  Set automatically expands the array if it is compacted.                
                <param>
                    index the character to set the mapped value with                    
                </param>
                <param>
                    value the new mapped value                    
                </param>
            </javadoc>
            <method name="setElementAt" type="void" line="76">
                <params>
                    <param name="index" type="char"/>
                    <param name="value" type="byte"/>
                </params>
            </method>
            <javadoc line="81">
                Set new values for a range of Unicode character.                
                <param>
                    start the starting offset o of the range                    
                </param>
                <param>
                    end the ending offset of the range                    
                </param>
                <param>
                    value the new mapped value                    
                </param>
            </javadoc>
            <method name="setElementAt" type="void" line="87">
                <params>
                    <param name="start" type="char"/>
                    <param name="end" type="char"/>
                    <param name="value" type="byte"/>
                </params>
                <declaration name="i" type="int" line="88"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Compact the array.                
            </javadoc>
            <method name="compact" type="void" line="100">
                <scope line="101">
                    <declaration name="limitCompacted" type="int" line="102"/>
                    <declaration name="iBlockStart" type="int" line="103"/>
                    <declaration name="iUntouched" type="short" line="104"/>
                    <scope line="105">
                        <declaration name="touched" type="boolean" line="107"/>
                        <scope line="108"/>
                        <scope line="111">
                            <declaration name="jBlockStart" type="int" line="112"/>
                            <declaration name="j" type="int" line="113"/>
                            <scope line="114">
                                <scope line="115"/>
                            </scope>
                            <scope line="120">
                                <scope line="125"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="newSize" type="int" line="131"/>
                    <declaration name="result" type="byte[]" line="132"/>
                </scope>
            </method>
            <javadoc line="139">
                Convenience utility to compare two arrays of doubles.                
                <param>
                    len the length to compare.
                      The start indices and start+len must be valid.                    
                </param>
            </javadoc>
            <method name="arrayRegionMatches" type="boolean" line="144">
                <params>
                    <param name="source" type="byte[]"/>
                    <param name="sourceStart" type="int"/>
                    <param name="target" type="byte[]"/>
                    <param name="targetStart" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sourceEnd" type="int" line="145"/>
                <declaration name="delta" type="int" line="146"/>
                <scope line="147"/>
            </method>
            <javadoc line="152">
                Remember that a specified block was &quot;touched&quot;, i.e. had a value set.
                  Untouched blocks can be skipped when compacting the array                
            </javadoc>
            <method name="touchBlock" type="void" line="156">
                <params>
                    <param name="i" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                Query whether a specified block was &quot;touched&quot;, i.e. had a value set.
                  Untouched blocks can be skipped when compacting the array                
            </javadoc>
            <method name="blockTouched" type="boolean" line="163">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                For internal use only.  Do not modify the result, the behavior of
                  modified results are undefined.                
            </javadoc>
            <method name="getIndexArray" type="short" line="170"/>
            <javadoc line="173">
                For internal use only.  Do not modify the result, the behavior of
                  modified results are undefined.                
            </javadoc>
            <method name="getStringArray" type="byte" line="177"/>
            <javadoc line="180">
                Overrides Cloneable                
            </javadoc>
            <method name="clone" type="Object" line="183">
                <scope line="184">
                    <declaration name="other" type="CompactByteArray" line="185"/>
                </scope>
                <scope line="191"/>
            </method>
            <javadoc line="195">
                Compares the equality of two compact array objects.                
                <param>
                    obj the compact array object to be compared with this.                    
                </param>
                <return>
                    true if the current compact array object is the same
                      as the compact array object obj; false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="201">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="CompactByteArray" line="205"/>
                <scope line="206"/>
            </method>
            <javadoc line="211">
                Generates the hash code for the compact array object                
            </javadoc>
            <method name="hashCode" type="int" line="214">
                <declaration name="result" type="int" line="215"/>
                <declaration name="increment" type="int" line="216"/>
                <scope line="217"/>
            </method>
            <javadoc line="222">
                Expanding takes the array back to a 65536 element array.                
            </javadoc>
            <method name="expand" type="void" line="225">
                <declaration name="i" type="int" line="226"/>
                <scope line="227">
                    <declaration name="tempArray" type="byte[]" line="228"/>
                    <scope line="231">
                        <declaration name="value" type="byte" line="232"/>
                    </scope>
                    <scope line="236"/>
                </scope>
            </method>
            <method name="getArray" type="byte[]" line="244"/>
            <declaration name="BLOCKSHIFT" type="int" line="247"/>
            <declaration name="BLOCKCOUNT" type="int" line="248"/>
            <declaration name="INDEXSHIFT" type="int" line="249"/>
            <declaration name="INDEXCOUNT" type="int" line="250"/>
            <declaration name="BLOCKMASK" type="int" line="251"/>
            <declaration name="values" type="byte[]" line="252"/>
            <declaration name="indices" type="short" line="253"/>
            <declaration name="isCompact" type="boolean" line="254"/>
            <declaration name="hashes" type="int[]" line="255"/>
        </class>
    </source>