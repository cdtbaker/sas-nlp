<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.text.CharacterIterator"/>
        <import package="java.text.Normalizer"/>
        <class name="NormalizerBase" line="4">
            <implements interface="Cloneable"/>
            <javadoc line="4">
                Unicode Normalization
                  &lt;h2&gt;Unicode normalization API&lt;/h2&gt;
                  &lt;code&gt;normalize&lt;/code&gt; transforms Unicode text into an equivalent composed or
                  decomposed form, allowing for easier sorting and searching of text.
                  &lt;code&gt;normalize&lt;/code&gt; supports the standard normalization forms described in
                  &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr15/&quot; target=&quot;unicode&quot;&gt;
                  Unicode Standard Annex #15 &amp;mdash; Unicode Normalization Forms&lt;/a&gt;.
                  Characters with accents or other adornments can be encoded in
                  several different ways in Unicode.  For example, take the character A-acute.
                  In Unicode, this can be encoded as a single character (the
                  &quot;composed&quot; form):
                  &lt;p&gt;
                  00C1    LATIN CAPITAL LETTER A WITH ACUTE
                  &lt;/p&gt;
                  or as two separate characters (the &quot;decomposed&quot; form):
                  &lt;p&gt;
                  0041    LATIN CAPITAL LETTER A
                  0301    COMBINING ACUTE ACCENT
                  &lt;/p&gt;
                  To a user of your program, however, both of these sequences should be
                  treated as the same &quot;user-level&quot; character &quot;A with acute accent&quot;.  When you
                  are searching or comparing text, you must ensure that these two sequences are
                  treated equivalently.  In addition, you must handle characters with more than
                  one accent.  Sometimes the order of a character&apos;s combining accents is
                  significant, while in other cases accent sequences in different orders are
                  really equivalent.
                  Similarly, the string &quot;ffi&quot; can be encoded as three separate letters:
                  &lt;p&gt;
                  0066    LATIN SMALL LETTER F
                  0066    LATIN SMALL LETTER F
                  0069    LATIN SMALL LETTER I
                  &lt;/p&gt;
                  or as the single character
                  &lt;p&gt;
                  FB03    LATIN SMALL LIGATURE FFI
                  &lt;/p&gt;
                  The ffi ligature is not a distinct semantic character, and strictly speaking
                  it shouldn&apos;t be in Unicode at all, but it was included for compatibility
                  with existing character sets that already provided it.  The Unicode standard
                  identifies such characters by giving them &quot;compatibility&quot; decompositions
                  into the corresponding semantic characters.  When sorting and searching, you
                  will often want to use these mappings.
                  &lt;code&gt;normalize&lt;/code&gt; helps solve these problems by transforming text into
                  the canonical composed and decomposed forms as shown in the first example
                  above. In addition, you can have it perform compatibility decompositions so
                  that you can treat compatibility characters the same as their equivalents.
                  Finally, &lt;code&gt;normalize&lt;/code&gt; rearranges accents into the proper canonical
                  order, so that you do not have to worry about accent rearrangement on your
                  own.
                  Form FCD, &quot;Fast C or D&quot;, is also designed for collation.
                  It allows to work on strings that are not necessarily normalized
                  with an algorithm (like in collation) that works under &quot;canonical closure&quot;,
                  i.e., it treats precomposed characters and their decomposed equivalents the
                  same.
                  It is not a normalization form because it does not provide for uniqueness of
                  representation. Multiple strings may be canonically equivalent (their NFDs
                  are identical) and may all conform to FCD without being identical themselves.
                  The form is defined such that the &quot;raw decomposition&quot;, the recursive
                  canonical decomposition of each character, results in a string that is
                  canonically ordered. This means that precomposed characters are allowed for
                  as long as their decompositions do not need canonical reordering.
                  Its advantage for a process like collation is that all NFD and most NFC texts
                  - and many unnormalized texts - already conform to FCD and do not need to be
                  normalized (NFD) for such a process. The FCD quick check will return YES for
                  most strings in practice.
                  normalize(FCD) may be implemented with NFD.
                  For more details on FCD see the collation design document:
                  http://source.icu-project.org/repos/icu/icuhtml/trunk/design/collation/ICU_collation_design.htm
                  ICU collation performs either NFD or FCD normalization automatically if
                  normalization is turned on for the collator object. Beyond collation and
                  string search, normalized strings may be useful for string equivalence
                  comparisons, transliteration/transcription, unique representations, etc.
                  The W3C generally recommends to exchange texts in NFC.
                  Note also that most legacy character encodings use only precomposed forms and
                  often do not encode any combining marks by themselves. For conversion to such
                  character encodings the Unicode text needs to be normalized to NFC.
                  For more usage examples, see the Unicode Standard Annex.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <declaration name="buffer" type="char[]" line="85"/>
            <declaration name="bufferStart" type="int" line="86"/>
            <declaration name="bufferPos" type="int" line="87"/>
            <declaration name="bufferLimit" type="int" line="88"/>
            <declaration name="text" type="UCharacterIterator" line="89"/>
            <declaration name="mode" type="Mode" line="90"/>
            <declaration name="options" type="int" line="91"/>
            <declaration name="currentIndex" type="int" line="92"/>
            <declaration name="nextIndex" type="int" line="93"/>
            <declaration name="UNICODE_3_2" type="int" line="94"/>
            <javadoc line="94">
                Options bit set value to select Unicode 3.2 normalization
                  (except NormalizationCorrections).
                  At most one Unicode version can be selected at a time.                
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <declaration name="DONE" type="int" line="101"/>
            <javadoc line="101">
                Constant indicating that the end of the iteration has been reached.
                  This is guaranteed to have the same value as {@link UCharacterIterator#DONE}.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <class name="Mode" line="107">
                <javadoc line="107">
                    Constants for normalization modes.                    
                    <stable>
                        ICU 2.8                        
                    </stable>
                </javadoc>
                <declaration name="modeValue" type="int" line="112"/>
                <method name="Mode" type="constructor" line="113">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <javadoc line="116">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.6                        
                    </stable>
                </javadoc>
                <method name="normalize" type="int" line="120">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="srcStart" type="int"/>
                        <param name="srcLimit" type="int"/>
                        <param name="dest" type="char[]"/>
                        <param name="destStart" type="int"/>
                        <param name="destLimit" type="int"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                    <declaration name="srcLen" type="int" line="121"/>
                    <declaration name="destLen" type="int" line="122"/>
                    <scope line="123"/>
                </method>
                <javadoc line="129">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.6                        
                    </stable>
                </javadoc>
                <method name="normalize" type="int" line="133">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="srcStart" type="int"/>
                        <param name="srcLimit" type="int"/>
                        <param name="dest" type="char[]"/>
                        <param name="destStart" type="int"/>
                        <param name="destLimit" type="int"/>
                        <param name="options" type="int"/>
                    </params>
                </method>
                <javadoc line="136">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.6                        
                    </stable>
                </javadoc>
                <method name="normalize" type="String" line="140">
                    <params>
                        <param name="src" type="String"/>
                        <param name="options" type="int"/>
                    </params>
                </method>
                <javadoc line="143">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.8                        
                    </stable>
                </javadoc>
                <method name="getMinC" type="int" line="147"/>
                <javadoc line="150">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.8                        
                    </stable>
                </javadoc>
                <method name="getMask" type="int" line="154"/>
                <javadoc line="157">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.8                        
                    </stable>
                </javadoc>
                <method name="getPrevBoundary" type="IsPrevBoundary" line="161"/>
                <javadoc line="164">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.8                        
                    </stable>
                </javadoc>
                <method name="getNextBoundary" type="IsNextBoundary" line="168"/>
                <javadoc line="171">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.6                        
                    </stable>
                </javadoc>
                <method name="quickCheck" type="QuickCheckResult" line="175">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="start" type="int"/>
                        <param name="limit" type="int"/>
                        <param name="allowMaybe" type="boolean"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                    <scope line="176"/>
                </method>
                <javadoc line="181">
                    This method is used for method dispatch                    
                    <stable>
                        ICU 2.8                        
                    </stable>
                </javadoc>
                <method name="isNFSkippable" type="boolean" line="185">
                    <params>
                        <param name="c" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="NONE" type="Mode" line="189"/>
            <javadoc line="189">
                No decomposition/composition.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <declaration name="NFD" type="Mode" line="194"/>
            <javadoc line="194">
                Canonical decomposition.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <class name="NFDMode" line="199">
                <extends class="Mode"/>
                <method name="NFDMode" type="constructor" line="200">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <method name="normalize" type="int" line="203">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="srcStart" type="int"/>
                        <param name="srcLimit" type="int"/>
                        <param name="dest" type="char[]"/>
                        <param name="destStart" type="int"/>
                        <param name="destLimit" type="int"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                    <declaration name="trailCC" type="int[]" line="204"/>
                </method>
                <method name="normalize" type="String" line="207">
                    <params>
                        <param name="src" type="String"/>
                        <param name="options" type="int"/>
                    </params>
                </method>
                <method name="getMinC" type="int" line="210"/>
                <method name="getPrevBoundary" type="IsPrevBoundary" line="213"/>
                <method name="getNextBoundary" type="IsNextBoundary" line="216"/>
                <method name="getMask" type="int" line="219"/>
                <method name="quickCheck" type="QuickCheckResult" line="222">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="start" type="int"/>
                        <param name="limit" type="int"/>
                        <param name="allowMaybe" type="boolean"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                </method>
                <method name="isNFSkippable" type="boolean" line="225">
                    <params>
                        <param name="c" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="NFKD" type="Mode" line="229"/>
            <javadoc line="229">
                Compatibility decomposition.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <class name="NFKDMode" line="234">
                <extends class="Mode"/>
                <method name="NFKDMode" type="constructor" line="235">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <method name="normalize" type="int" line="238">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="srcStart" type="int"/>
                        <param name="srcLimit" type="int"/>
                        <param name="dest" type="char[]"/>
                        <param name="destStart" type="int"/>
                        <param name="destLimit" type="int"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                    <declaration name="trailCC" type="int[]" line="239"/>
                </method>
                <method name="normalize" type="String" line="242">
                    <params>
                        <param name="src" type="String"/>
                        <param name="options" type="int"/>
                    </params>
                </method>
                <method name="getMinC" type="int" line="245"/>
                <method name="getPrevBoundary" type="IsPrevBoundary" line="248"/>
                <method name="getNextBoundary" type="IsNextBoundary" line="251"/>
                <method name="getMask" type="int" line="254"/>
                <method name="quickCheck" type="QuickCheckResult" line="257">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="start" type="int"/>
                        <param name="limit" type="int"/>
                        <param name="allowMaybe" type="boolean"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                </method>
                <method name="isNFSkippable" type="boolean" line="260">
                    <params>
                        <param name="c" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="NFC" type="Mode" line="264"/>
            <javadoc line="264">
                Canonical decomposition followed by canonical composition.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <class name="NFCMode" line="269">
                <extends class="Mode"/>
                <method name="NFCMode" type="constructor" line="270">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <method name="normalize" type="int" line="273">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="srcStart" type="int"/>
                        <param name="srcLimit" type="int"/>
                        <param name="dest" type="char[]"/>
                        <param name="destStart" type="int"/>
                        <param name="destLimit" type="int"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                </method>
                <method name="normalize" type="String" line="276">
                    <params>
                        <param name="src" type="String"/>
                        <param name="options" type="int"/>
                    </params>
                </method>
                <method name="getMinC" type="int" line="279"/>
                <method name="getPrevBoundary" type="IsPrevBoundary" line="282"/>
                <method name="getNextBoundary" type="IsNextBoundary" line="285"/>
                <method name="getMask" type="int" line="288"/>
                <method name="quickCheck" type="QuickCheckResult" line="291">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="start" type="int"/>
                        <param name="limit" type="int"/>
                        <param name="allowMaybe" type="boolean"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                </method>
                <method name="isNFSkippable" type="boolean" line="294">
                    <params>
                        <param name="c" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="NFKC" type="Mode" line="298"/>
            <javadoc line="298">
                Compatibility decomposition followed by canonical composition.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <class name="NFKCMode" line="303">
                <extends class="Mode"/>
                <method name="NFKCMode" type="constructor" line="304">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <method name="normalize" type="int" line="307">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="srcStart" type="int"/>
                        <param name="srcLimit" type="int"/>
                        <param name="dest" type="char[]"/>
                        <param name="destStart" type="int"/>
                        <param name="destLimit" type="int"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                </method>
                <method name="normalize" type="String" line="310">
                    <params>
                        <param name="src" type="String"/>
                        <param name="options" type="int"/>
                    </params>
                </method>
                <method name="getMinC" type="int" line="313"/>
                <method name="getPrevBoundary" type="IsPrevBoundary" line="316"/>
                <method name="getNextBoundary" type="IsNextBoundary" line="319"/>
                <method name="getMask" type="int" line="322"/>
                <method name="quickCheck" type="QuickCheckResult" line="325">
                    <params>
                        <param name="src" type="char[]"/>
                        <param name="start" type="int"/>
                        <param name="limit" type="int"/>
                        <param name="allowMaybe" type="boolean"/>
                        <param name="nx" type="UnicodeSet"/>
                    </params>
                </method>
                <method name="isNFSkippable" type="boolean" line="328">
                    <params>
                        <param name="c" type="int"/>
                    </params>
                </method>
            </class>
            <class name="QuickCheckResult" line="332">
                <javadoc line="332">
                    Result values for quickCheck().
                      For details see Unicode Technical Report 15.                    
                    <stable>
                        ICU 2.8                        
                    </stable>
                </javadoc>
                <declaration name="resultValue" type="int" line="338"/>
                <method name="QuickCheckResult" type="constructor" line="339">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="NO" type="QuickCheckResult" line="343"/>
            <javadoc line="343">
                Indicates that string is not in the normalized format                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <declaration name="YES" type="QuickCheckResult" line="348"/>
            <javadoc line="348">
                Indicates that string is in the normalized format                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <declaration name="MAYBE" type="QuickCheckResult" line="353"/>
            <javadoc line="353">
                Indicates it cannot be determined if string is in the normalized
                  format without further thorough checks.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <javadoc line="359">
                Creates a new &lt;tt&gt;Normalizer&lt;/tt&gt; object for iterating over the
                  normalized form of a given string.
                  &lt;p&gt;
                  The &lt;tt&gt;options&lt;/tt&gt; parameter specifies which optional
                  &lt;tt&gt;Normalizer&lt;/tt&gt; features are to be enabled for this object.
                  &lt;p&gt;                
                <param>
                    str  The string to be normalized.  The normalization
                      will start at the beginning of the string.                    
                </param>
                <param>
                    mode The normalization mode.                    
                </param>
                <param>
                    opt Any optional features to be enabled.
                      Currently the only available option is {@link #UNICODE_3_2}.
                      If you want the default behavior corresponding to one of the
                      standard Unicode Normalization Forms, use 0 for this argument.                    
                </param>
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <method name="NormalizerBase" type="constructor" line="375">
                <params>
                    <param name="str" type="String"/>
                    <param name="mode" type="Mode"/>
                    <param name="opt" type="int"/>
                </params>
            </method>
            <javadoc line="380">
                Creates a new &lt;tt&gt;Normalizer&lt;/tt&gt; object for iterating over the
                  normalized form of the given text.
                  &lt;p&gt;                
                <param>
                    iter  The input text to be normalized.  The normalization
                      will start at the beginning of the string.                    
                </param>
                <param>
                    mode  The normalization mode.                    
                </param>
            </javadoc>
            <method name="NormalizerBase" type="constructor" line="388">
                <params>
                    <param name="iter" type="CharacterIterator"/>
                    <param name="mode" type="Mode"/>
                </params>
            </method>
            <javadoc line="391">
                Creates a new &lt;tt&gt;Normalizer&lt;/tt&gt; object for iterating over the
                  normalized form of the given text.
                  &lt;p&gt;                
                <param>
                    iter  The input text to be normalized.  The normalization
                      will start at the beginning of the string.                    
                </param>
                <param>
                    mode  The normalization mode.                    
                </param>
                <param>
                    opt Any optional features to be enabled.
                      Currently the only available option is {@link #UNICODE_3_2}.
                      If you want the default behavior corresponding to one of the
                      standard Unicode Normalization Forms, use 0 for this argument.                    
                </param>
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <method name="NormalizerBase" type="constructor" line="404">
                <params>
                    <param name="iter" type="CharacterIterator"/>
                    <param name="mode" type="Mode"/>
                    <param name="opt" type="int"/>
                </params>
            </method>
            <javadoc line="409">
                Clones this &lt;tt&gt;Normalizer&lt;/tt&gt; object.  All properties of this
                  object are duplicated in the new object, including the cloning of any{@link CharacterIterator} that was passed in to the constructor
                  or to {@link #setText(CharacterIterator) setText}.
                  However, the text storage underlying
                  the &lt;tt&gt;CharacterIterator&lt;/tt&gt; is not duplicated unless the
                  iterator&apos;s &lt;tt&gt;clone&lt;/tt&gt; method does so.                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="clone" type="Object" line="418">
                <scope line="419">
                    <declaration name="copy" type="NormalizerBase" line="420"/>
                    <scope line="422"/>
                </scope>
                <scope line="428"/>
            </method>
            <javadoc line="432">
                Compose a string.
                  The string will be composed to according the the specified mode.                
                <param>
                    str        The string to compose.                    
                </param>
                <param>
                    compat     If true the string will be composed accoding to
                      NFKC rules and if false will be composed according to
                      NFC rules.                    
                </param>
                <param>
                    options    The only recognized option is UNICODE_3_2                    
                </param>
                <return>
                    String    The composed string                    
                </return>
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <method name="compose" type="String" line="443">
                <params>
                    <param name="str" type="String"/>
                    <param name="compat" type="boolean"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="dest" type="char[]" line="444"/>
                <scope line="445">
                    <declaration name="mappedStr" type="String" line="446"/>
                </scope>
                <scope line="450"/>
                <declaration name="destSize" type="int" line="454"/>
                <declaration name="nx" type="UnicodeSet" line="455"/>
                <scope line="457"/>
                <scope line="460">
                    <scope line="462"/>
                    <scope line="465"/>
                </scope>
            </method>
            <declaration name="MAX_BUF_SIZE_COMPOSE" type="int" line="470"/>
            <declaration name="MAX_BUF_SIZE_DECOMPOSE" type="int" line="471"/>
            <javadoc line="472">
                Decompose a string.
                  The string will be decomposed to according the the specified mode.                
                <param>
                    str       The string to decompose.                    
                </param>
                <param>
                    compat    If true the string will be decomposed accoding to NFKD
                      rules and if false will be decomposed according to NFD
                      rules.                    
                </param>
                <return>
                    String   The decomposed string                    
                </return>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="decompose" type="String" line="482">
                <params>
                    <param name="str" type="String"/>
                    <param name="compat" type="boolean"/>
                </params>
            </method>
            <javadoc line="485">
                Decompose a string.
                  The string will be decomposed to according the the specified mode.                
                <param>
                    str     The string to decompose.                    
                </param>
                <param>
                    compat  If true the string will be decomposed accoding to NFKD
                      rules and if false will be decomposed according to NFD
                      rules.                    
                </param>
                <param>
                    options The normalization options, ORed together (0 for no options).                    
                </param>
                <return>
                    String The decomposed string                    
                </return>
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <method name="decompose" type="String" line="496">
                <params>
                    <param name="str" type="String"/>
                    <param name="compat" type="boolean"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="trailCC" type="int[]" line="497"/>
                <declaration name="destSize" type="int" line="498"/>
                <declaration name="nx" type="UnicodeSet" line="499"/>
                <declaration name="dest" type="char[]" line="500"/>
                <scope line="501">
                    <declaration name="mappedStr" type="String" line="502"/>
                    <scope line="504">
                        <scope line="506"/>
                        <scope line="509"/>
                    </scope>
                </scope>
                <scope line="514">
                    <scope line="516">
                        <scope line="518"/>
                        <scope line="521"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="527">
                Normalize a string.
                  The string will be normalized according the the specified normalization
                  mode and options.                
                <param>
                    src       The char array to compose.                    
                </param>
                <param>
                    srcStart  Start index of the source                    
                </param>
                <param>
                    srcLimit  Limit index of the source                    
                </param>
                <param>
                    dest      The char buffer to fill in                    
                </param>
                <param>
                    destStart Start index of the destination buffer                    
                </param>
                <param>
                    destLimit End index of the destination buffer                    
                </param>
                <param>
                    mode      The normalization mode; one of Normalizer.NONE,
                      Normalizer.NFD, Normalizer.NFC, Normalizer.NFKC,
                      Normalizer.NFKD, Normalizer.DEFAULT                    
                </param>
                <param>
                    options The normalization options, ORed together (0 for no options).                    
                </param>
                <return>
                    int      The total buffer size needed;if greater than length of
                      result, the output was truncated.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if the target capacity is
                      less than the required length                    
                </exception>
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <method name="normalize" type="int" line="547">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="dest" type="char[]"/>
                    <param name="destStart" type="int"/>
                    <param name="destLimit" type="int"/>
                    <param name="mode" type="Mode"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="length" type="int" line="548"/>
                <scope line="549"/>
                <scope line="552"/>
            </method>
            <javadoc line="556">
                Return the current character in the normalized text-&gt;                
                <return>
                    The codepoint as an int                    
                </return>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="current" type="int" line="561">
                <scope line="562"/>
                <scope line="565"/>
            </method>
            <javadoc line="569">
                Return the next character in the normalized text and advance
                  the iteration position by one.  If the end
                  of the text has already been reached, {@link #DONE} is returned.                
                <return>
                    The codepoint as an int                    
                </return>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="next" type="int" line="576">
                <scope line="577">
                    <declaration name="c" type="int" line="578"/>
                </scope>
                <scope line="582"/>
            </method>
            <javadoc line="586">
                Return the previous character in the normalized text and decrement
                  the iteration position by one.  If the beginning
                  of the text has already been reached, {@link #DONE} is returned.                
                <return>
                    The codepoint as an int                    
                </return>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="previous" type="int" line="593">
                <scope line="594">
                    <declaration name="c" type="int" line="595"/>
                </scope>
                <scope line="599"/>
            </method>
            <javadoc line="603">
                Reset the index to the beginning of the text.
                  This is equivalent to setIndexOnly(startIndex)).                
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="reset" type="void" line="608"/>
            <javadoc line="613">
                Set the iteration position in the input text that is being normalized,
                  without any immediate normalization.
                  After setIndexOnly(), getIndex() will return the same index that is
                  specified here.                
                <param>
                    index the desired index in the input text.                    
                </param>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="setIndexOnly" type="void" line="621">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="626">
                Set the iteration position in the input text that is being normalized
                  and return the first normalized character at that position.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; This method sets the position in the &lt;em&gt;input&lt;/em&gt; text,
                  while {@link #next} and {@link #previous} iterate through characters
                  in the normalized &lt;em&gt;output&lt;/em&gt;.  This means that there is not
                  necessarily a one-to-one correspondence between characters returned
                  by &lt;tt&gt;next&lt;/tt&gt; and &lt;tt&gt;previous&lt;/tt&gt; and the indices passed to and
                  returned from &lt;tt&gt;setIndex&lt;/tt&gt; and {@link #getIndex}.
                  &lt;p&gt;                
                <param>
                    index the desired index in the input text->                    
                </param>
                <return>
                    the first normalized character that is the result of iterating
                      forward starting at the given index.                    
                </return>
                <throws>
                    IllegalArgumentException if the given index is less than{@link #getBeginIndex} or greater than {@link #getEndIndex}.                    
                </throws>
                <return>
                    The codepoint as an int                    
                </return>
                <deprecated>
                    ICU 3.2                    
                </deprecated>
                <obsolete>
                    ICU 3.2                    
                </obsolete>
            </javadoc>
            <method name="setIndex" type="int" line="645">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="649">
                Retrieve the index of the start of the input text. This is the begin
                  index of the &lt;tt&gt;CharacterIterator&lt;/tt&gt; or the start (i.e. 0) of the
                  &lt;tt&gt;String&lt;/tt&gt; over which this &lt;tt&gt;Normalizer&lt;/tt&gt; is iterating                
                <deprecated>
                    ICU 2.2. Use startIndex() instead.                    
                </deprecated>
                <return>
                    The codepoint as an int                    
                </return>
                <see>
                    #startIndex                    
                </see>
            </javadoc>
            <method name="getBeginIndex" type="int" line="657"/>
            <javadoc line="660">
                Retrieve the index of the end of the input text.  This is the end index
                  of the &lt;tt&gt;CharacterIterator&lt;/tt&gt; or the length of the &lt;tt&gt;String&lt;/tt&gt;
                  over which this &lt;tt&gt;Normalizer&lt;/tt&gt; is iterating                
                <deprecated>
                    ICU 2.2. Use endIndex() instead.                    
                </deprecated>
                <return>
                    The codepoint as an int                    
                </return>
                <see>
                    #endIndex                    
                </see>
            </javadoc>
            <method name="getEndIndex" type="int" line="668"/>
            <javadoc line="671">
                Retrieve the current iteration position in the input text that is
                  being normalized.  This method is useful in applications such as
                  searching, where you need to be able to determine the position in
                  the input text that corresponds to a given normalized output character.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; This method sets the position in the &lt;em&gt;input&lt;/em&gt;, while{@link #next} and {@link #previous} iterate through characters in the
                  &lt;em&gt;output&lt;/em&gt;.  This means that there is not necessarily a one-to-one
                  correspondence between characters returned by &lt;tt&gt;next&lt;/tt&gt; and
                  &lt;tt&gt;previous&lt;/tt&gt; and the indices passed to and returned from
                  &lt;tt&gt;setIndex&lt;/tt&gt; and {@link #getIndex}.                
                <return>
                    The current iteration position                    
                </return>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="getIndex" type="int" line="685">
                <scope line="686"/>
                <scope line="689"/>
            </method>
            <javadoc line="693">
                Retrieve the index of the end of the input text-&gt;  This is the end index
                  of the &lt;tt&gt;CharacterIterator&lt;/tt&gt; or the length of the &lt;tt&gt;String&lt;/tt&gt;
                  over which this &lt;tt&gt;Normalizer&lt;/tt&gt; is iterating                
                <return>
                    The current iteration position                    
                </return>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="endIndex" type="int" line="700"/>
            <javadoc line="703">
                Set the normalization mode for this object.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;If the normalization mode is changed while iterating
                  over a string, calls to {@link #next} and {@link #previous} may
                  return previously buffers characters in the old normalization mode
                  until the iteration is able to re-sync at the next base character.
                  It is safest to call {@link #setText setText()}, {@link #first},{@link #last}, etc. after calling &lt;tt&gt;setMode&lt;/tt&gt;.
                  &lt;p&gt;                
                <param>
                    newMode the new mode for this <tt>Normalizer</tt>.
                      The supported modes are:
                      <ul>
                      <li>{@link #COMPOSE}        - Unicode canonical decompositiion
                      followed by canonical composition.
                      <li>{@link #COMPOSE_COMPAT} - Unicode compatibility decompositiion
                      follwed by canonical composition.
                      <li>{@link #DECOMP}         - Unicode canonical decomposition
                      <li>{@link #DECOMP_COMPAT}  - Unicode compatibility decomposition.
                      <li>{@link #NO_OP}          - Do nothing but return characters
                      from the underlying input text.
                      </ul>                    
                </param>
                <see>
                    #getMode                    
                </see>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="setMode" type="void" line="727">
                <params>
                    <param name="newMode" type="Mode"/>
                </params>
            </method>
            <javadoc line="730">
                Return the basic operation performed by this &lt;tt&gt;Normalizer&lt;/tt&gt;                
                <see>
                    #setMode                    
                </see>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="getMode" type="Mode" line="735"/>
            <javadoc line="738">
                Set the input text over which this &lt;tt&gt;Normalizer&lt;/tt&gt; will iterate.
                  The iteration position is set to the beginning of the input text-&gt;                
                <param>
                    newText   The new string to be normalized.                    
                </param>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="setText" type="void" line="744">
                <params>
                    <param name="newText" type="String"/>
                </params>
                <declaration name="newIter" type="UCharacterIterator" line="745"/>
                <scope line="746"/>
            </method>
            <javadoc line="752">
                Set the input text over which this &lt;tt&gt;Normalizer&lt;/tt&gt; will iterate.
                  The iteration position is set to the beginning of the input text-&gt;                
                <param>
                    newText   The new string to be normalized.                    
                </param>
                <stable>
                    ICU 2.8                    
                </stable>
            </javadoc>
            <method name="setText" type="void" line="758">
                <params>
                    <param name="newText" type="CharacterIterator"/>
                </params>
                <declaration name="newIter" type="UCharacterIterator" line="759"/>
                <scope line="760"/>
            </method>
            <method name="getPrevNorm32" type="long" line="767">
                <params>
                    <param name="src" type="UCharacterIterator"/>
                    <param name="minC" type="int"/>
                    <param name="mask" type="int"/>
                    <param name="chars" type="char[]"/>
                </params>
                <declaration name="norm32" type="long" line="768"/>
                <declaration name="ch" type="int" line="769"/>
                <scope line="770"/>
                <scope line="775"/>
                <scope line="778"/>
                <scope line="781"/>
                <scope line="785">
                    <scope line="787"/>
                    <scope line="790"/>
                </scope>
                <scope line="794"/>
            </method>
            <interface name="IsPrevBoundary">
                <method name="isPrevBoundary" type="boolean" line="800"/>
            </interface>
            <class name="IsPrevNFDSafe" line="802">
                <implements interface="IsPrevBoundary"/>
                <method name="isPrevBoundary" type="boolean" line="803">
                    <params>
                        <param name="src" type="UCharacterIterator"/>
                        <param name="minC" type="int"/>
                        <param name="ccOrQCMask" type="int"/>
                        <param name="chars" type="char[]"/>
                    </params>
                </method>
            </class>
            <class name="IsPrevTrueStarter" line="807">
                <implements interface="IsPrevBoundary"/>
                <method name="isPrevBoundary" type="boolean" line="808">
                    <params>
                        <param name="src" type="UCharacterIterator"/>
                        <param name="minC" type="int"/>
                        <param name="ccOrQCMask" type="int"/>
                        <param name="chars" type="char[]"/>
                    </params>
                    <declaration name="norm32" type="long" line="809"/>
                    <declaration name="decompQCMask" type="int" line="810"/>
                </method>
            </class>
            <method name="findPreviousIterationBoundary" type="int" line="816">
                <params>
                    <param name="src" type="UCharacterIterator"/>
                    <param name="obj" type="IsPrevBoundary"/>
                    <param name="minC" type="int"/>
                    <param name="mask" type="int"/>
                    <param name="buffer" type="char[]"/>
                    <param name="startIndex" type="int[]"/>
                </params>
                <declaration name="chars" type="char[]" line="817"/>
                <declaration name="isBoundary" type="boolean" line="818"/>
                <scope line="821">
                    <scope line="823">
                        <declaration name="newBuf" type="char[]" line="824"/>
                    </scope>
                    <scope line="831"/>
                    <scope line="834"/>
                </scope>
            </method>
            <method name="previous" type="int" line="840">
                <params>
                    <param name="src" type="UCharacterIterator"/>
                    <param name="dest" type="char[]"/>
                    <param name="destStart" type="int"/>
                    <param name="destLimit" type="int"/>
                    <param name="mode" type="Mode"/>
                    <param name="doNormalize" type="boolean"/>
                    <param name="pNeededToNormalize" type="boolean[]"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="isPreviousBoundary" type="IsPrevBoundary" line="841"/>
                <declaration name="destLength" type="int" line="842"/>
                <declaration name="mask" type="int" line="843"/>
                <declaration name="c" type="int" line="844"/>
                <declaration name="minC" type="char" line="845"/>
                <declaration name="destCapacity" type="int" line="846"/>
                <scope line="848"/>
                <scope line="854">
                    <scope line="856">
                        <scope line="858">
                            <scope line="860">
                                <scope line="861">
                                    <scope line="862"/>
                                </scope>
                                <scope line="868"/>
                            </scope>
                        </scope>
                        <scope line="873"/>
                    </scope>
                </scope>
                <declaration name="buffer" type="char[]" line="879"/>
                <declaration name="startIndex" type="int[]" line="880"/>
                <scope line="882">
                    <scope line="883">
                        <scope line="885"/>
                    </scope>
                    <scope line="889">
                        <scope line="890"/>
                    </scope>
                </scope>
            </method>
            <interface name="IsNextBoundary">
                <method name="isNextBoundary" type="boolean" line="898"/>
            </interface>
            <method name="getNextNorm32" type="long" line="900">
                <params>
                    <param name="src" type="UCharacterIterator"/>
                    <param name="minC" type="int"/>
                    <param name="mask" type="int"/>
                    <param name="chars" type="int[]"/>
                </params>
                <declaration name="norm32" type="long" line="901"/>
                <scope line="904"/>
                <scope line="908">
                    <scope line="909">
                        <scope line="911"/>
                        <scope line="914"/>
                    </scope>
                    <scope line="918"/>
                </scope>
            </method>
            <class name="IsNextNFDSafe" line="924">
                <implements interface="IsNextBoundary"/>
                <method name="isNextBoundary" type="boolean" line="925">
                    <params>
                        <param name="src" type="UCharacterIterator"/>
                        <param name="minC" type="int"/>
                        <param name="ccOrQCMask" type="int"/>
                        <param name="chars" type="int[]"/>
                    </params>
                </method>
            </class>
            <class name="IsNextTrueStarter" line="929">
                <implements interface="IsNextBoundary"/>
                <method name="isNextBoundary" type="boolean" line="930">
                    <params>
                        <param name="src" type="UCharacterIterator"/>
                        <param name="minC" type="int"/>
                        <param name="ccOrQCMask" type="int"/>
                        <param name="chars" type="int[]"/>
                    </params>
                    <declaration name="norm32" type="long" line="931"/>
                    <declaration name="decompQCMask" type="int" line="932"/>
                </method>
            </class>
            <method name="findNextIterationBoundary" type="int" line="938">
                <params>
                    <param name="src" type="UCharacterIterator"/>
                    <param name="obj" type="IsNextBoundary"/>
                    <param name="minC" type="int"/>
                    <param name="mask" type="int"/>
                    <param name="buffer" type="char[]"/>
                </params>
                <scope line="939"/>
                <declaration name="chars" type="int[]" line="942"/>
                <declaration name="bufferIndex" type="int" line="945"/>
                <scope line="946">
                    <scope line="947"/>
                    <scope line="950"/>
                </scope>
                <scope line="954">
                    <scope line="955"/>
                    <scope line="959">
                        <scope line="960">
                            <scope line="962"/>
                        </scope>
                        <scope line="966">
                            <declaration name="newBuf" type="char[]" line="967"/>
                            <scope line="971"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="next" type="int" line="979">
                <params>
                    <param name="src" type="UCharacterIterator"/>
                    <param name="dest" type="char[]"/>
                    <param name="destStart" type="int"/>
                    <param name="destLimit" type="int"/>
                    <param name="mode" type="NormalizerBase.Mode"/>
                    <param name="doNormalize" type="boolean"/>
                    <param name="pNeededToNormalize" type="boolean[]"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="isNextBoundary" type="IsNextBoundary" line="980"/>
                <declaration name="mask" type="int" line="981"/>
                <declaration name="bufferLength" type="int" line="982"/>
                <declaration name="c" type="int" line="983"/>
                <declaration name="minC" type="char" line="984"/>
                <declaration name="destCapacity" type="int" line="985"/>
                <declaration name="destLength" type="int" line="986"/>
                <scope line="987"/>
                <scope line="993">
                    <scope line="996">
                        <scope line="998">
                            <scope line="1000">
                                <scope line="1001">
                                    <scope line="1002"/>
                                </scope>
                                <scope line="1007"/>
                            </scope>
                        </scope>
                        <scope line="1012"/>
                    </scope>
                </scope>
                <declaration name="buffer" type="char[]" line="1018"/>
                <declaration name="startIndex" type="int[]" line="1019"/>
                <scope line="1021">
                    <scope line="1022">
                        <scope line="1024"/>
                    </scope>
                    <scope line="1028">
                        <scope line="1029"/>
                    </scope>
                </scope>
            </method>
            <method name="clearBuffer" type="void" line="1036"/>
            <method name="nextNormalize" type="boolean" line="1039"/>
            <method name="previousNormalize" type="boolean" line="1047"/>
            <method name="getCodePointAt" type="int" line="1056">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="1057">
                    <scope line="1058">
                        <scope line="1059"/>
                    </scope>
                    <scope line="1063">
                        <scope line="1064"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1071">
                Internal API                
                <internal>
                                        
                </internal>
            </javadoc>
            <method name="isNFSkippable" type="boolean" line="1075">
                <params>
                    <param name="c" type="int"/>
                    <param name="mode" type="Mode"/>
                </params>
            </method>
            <declaration name="UNICODE_3_2_0_ORIGINAL" type="int" line="1078"/>
            <declaration name="UNICODE_LATEST" type="int" line="1079"/>
            <javadoc line="1080">
                Creates a new &lt;tt&gt;Normalizer&lt;/tt&gt; object for iterating over the
                  normalized form of a given string.                
                <param>
                    str  The string to be normalized.  The normalization
                      will start at the beginning of the string.                    
                </param>
                <param>
                    mode The normalization mode.                    
                </param>
            </javadoc>
            <method name="NormalizerBase" type="constructor" line="1087">
                <params>
                    <param name="str" type="String"/>
                    <param name="mode" type="Mode"/>
                </params>
            </method>
            <javadoc line="1090">
                Normalizes a &lt;code&gt;String&lt;/code&gt; using the given normalization form.                
                <param>
                    str      the input string to be normalized.                    
                </param>
                <param>
                    form     the normalization form                    
                </param>
            </javadoc>
            <method name="normalize" type="String" line="1095">
                <params>
                    <param name="str" type="String"/>
                    <param name="form" type="Normalizer.Form"/>
                </params>
            </method>
            <javadoc line="1098">
                Normalizes a &lt;code&gt;String&lt;/code&gt; using the given normalization form.                
                <param>
                    str      the input string to be normalized.                    
                </param>
                <param>
                    form     the normalization form                    
                </param>
                <param>
                    options   the optional features to be enabled.                    
                </param>
            </javadoc>
            <method name="normalize" type="String" line="1104">
                <params>
                    <param name="str" type="String"/>
                    <param name="form" type="Normalizer.Form"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="len" type="int" line="1105"/>
                <declaration name="asciiOnly" type="boolean" line="1106"/>
                <scope line="1107">
                    <scope line="1108">
                        <scope line="1109"/>
                    </scope>
                </scope>
                <scope line="1115">
                    <declaration name="a" type="char[]" line="1116"/>
                    <scope line="1117">
                        <scope line="1118"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1136">
                Test if a string is in a given normalization form.
                  This is semantically equivalent to source.equals(normalize(source, mode)).
                  Unlike quickCheck(), this function returns a definitive result,
                  never a &quot;maybe&quot;.
                  For NFD, NFKD, and FCD, both functions work exactly the same.
                  For NFC and NFKC where quickCheck may return &quot;maybe&quot;, this function will
                  perform further tests to arrive at a true/false result.                
                <param>
                    str       the input string to be checked to see if it is normalized                    
                </param>
                <param>
                    form      the normalization form                    
                </param>
                <param>
                    options   the optional features to be enabled.                    
                </param>
            </javadoc>
            <method name="isNormalized" type="boolean" line="1148">
                <params>
                    <param name="str" type="String"/>
                    <param name="form" type="Normalizer.Form"/>
                </params>
            </method>
            <javadoc line="1151">
                Test if a string is in a given normalization form.
                  This is semantically equivalent to source.equals(normalize(source, mode)).
                  Unlike quickCheck(), this function returns a definitive result,
                  never a &quot;maybe&quot;.
                  For NFD, NFKD, and FCD, both functions work exactly the same.
                  For NFC and NFKC where quickCheck may return &quot;maybe&quot;, this function will
                  perform further tests to arrive at a true/false result.                
                <param>
                    str       the input string to be checked to see if it is normalized                    
                </param>
                <param>
                    form      the normalization form                    
                </param>
                <param>
                    options   the optional features to be enabled.                    
                </param>
            </javadoc>
            <method name="isNormalized" type="boolean" line="1163">
                <params>
                    <param name="str" type="String"/>
                    <param name="form" type="Normalizer.Form"/>
                    <param name="options" type="int"/>
                </params>
            </method>
        </class>
    </source>