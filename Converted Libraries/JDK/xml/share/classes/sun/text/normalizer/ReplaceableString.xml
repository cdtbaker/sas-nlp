<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <class name="ReplaceableString" line="40">
            <comment line="68">
                // for StringPrep                
            </comment>
            <comment line="102">
                // for StringPrep                
            </comment>
            <implements interface="Replaceable"/>
            <javadoc line="40">
                &lt;code&gt;ReplaceableString&lt;/code&gt; is an adapter class that implements the
                  &lt;code&gt;Replaceable&lt;/code&gt; API around an ordinary &lt;code&gt;StringBuffer&lt;/code&gt;.
                  &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This class does not support attributes and is not
                  intended for general use.  Most clients will need to implement{@link Replaceable} in their text representation class.
                  &lt;p&gt;Copyright &amp;copy; IBM Corporation 1999.  All rights reserved.                
                <see>
                    Replaceable                    
                </see>
                <author>
                    Alan Liu                    
                </author>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <declaration name="buf" type="StringBuffer" line="56"/>
            <javadoc line="58">
                Construct a new object with the given initial contents.                
                <param>
                    str initial contents                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="ReplaceableString" type="constructor" line="63">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="68">
                Construct a new object using &lt;code&gt;buf&lt;/code&gt; for internal
                  storage.  The contents of &lt;code&gt;buf&lt;/code&gt; at the time of
                  construction are used as the initial contents.  &lt;em&gt;Note!
                  Modifications to &lt;code&gt;buf&lt;/code&gt; will modify this object, and
                  vice versa.&lt;/em&gt;                
                <param>
                    buf object to be used as internal storage                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="ReplaceableString" type="constructor" line="77">
                <params>
                    <param name="buf" type="StringBuffer"/>
                </params>
            </method>
            <javadoc line="81">
                Return the number of characters contained in this object.
                  &lt;code&gt;Replaceable&lt;/code&gt; API.                
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="length" type="int" line="86"/>
            <javadoc line="90">
                Return the character at the given position in this object.
                  &lt;code&gt;Replaceable&lt;/code&gt; API.                
                <param>
                    offset offset into the contents, from 0 to
                      &lt;code&gt;length()&lt;/code&gt; - 1                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="charAt" type="char" line="97">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Copies characters from this object into the destination
                  character array.  The first character to be copied is at index
                  &lt;code&gt;srcStart&lt;/code&gt;; the last character to be copied is at
                  index &lt;code&gt;srcLimit-1&lt;/code&gt; (thus the total number of
                  characters to be copied is &lt;code&gt;srcLimit-srcStart&lt;/code&gt;). The
                  characters are copied into the subarray of &lt;code&gt;dst&lt;/code&gt;
                  starting at index &lt;code&gt;dstStart&lt;/code&gt; and ending at index
                  &lt;code&gt;dstStart + (srcLimit-srcStart) - 1&lt;/code&gt;.                
                <param>
                    srcStart the beginning index to copy, inclusive; &lt;code&gt;0
                      &lt;= start &lt;= limit&lt;/code&gt;.                    
                </param>
                <param>
                    srcLimit the ending index to copy, exclusive;
                      &lt;code&gt;start &lt;= limit &lt;= length()&lt;/code&gt;.                    
                </param>
                <param>
                    dst the destination array.                    
                </param>
                <param>
                    dstStart the start offset in the destination array.                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="getChars" type="void" line="120">
                <params>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="dst" type="char"/>
                    <param name="dstStart" type="int"/>
                </params>
            </method>
        </class>
    </source>