<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <class name="NormalizerImpl" line="7">
            <javadoc line="7">
                @author  Ram Viswanadha                
            </javadoc>
            <declaration name="IMPL" type="NormalizerImpl" line="11"/>
            <scope line="12">
                <scope line="13"/>
                <scope line="16"/>
            </scope>
            <declaration name="UNSIGNED_BYTE_MASK" type="int" line="20"/>
            <declaration name="UNSIGNED_INT_MASK" type="long" line="21"/>
            <declaration name="DATA_FILE_NAME" type="String" line="22"/>
            <declaration name="QC_NFC" type="int" line="23"/>
            <declaration name="QC_NFKC" type="int" line="24"/>
            <declaration name="QC_NFD" type="int" line="25"/>
            <declaration name="QC_NFKD" type="int" line="26"/>
            <declaration name="QC_ANY_NO" type="int" line="27"/>
            <declaration name="QC_MAYBE" type="int" line="28"/>
            <declaration name="QC_ANY_MAYBE" type="int" line="29"/>
            <declaration name="QC_MASK" type="int" line="30"/>
            <declaration name="COMBINES_FWD" type="int" line="31"/>
            <declaration name="COMBINES_BACK" type="int" line="32"/>
            <declaration name="COMBINES_ANY" type="int" line="33"/>
            <declaration name="CC_SHIFT" type="int" line="34"/>
            <declaration name="CC_MASK" type="int" line="35"/>
            <declaration name="EXTRA_SHIFT" type="int" line="36"/>
            <declaration name="MIN_SPECIAL" type="long" line="37"/>
            <declaration name="SURROGATES_TOP" type="long" line="38"/>
            <declaration name="MIN_HANGUL" type="long" line="39"/>
            <declaration name="JAMO_V_TOP" type="long" line="40"/>
            <declaration name="INDEX_TRIE_SIZE" type="int" line="41"/>
            <declaration name="INDEX_CHAR_COUNT" type="int" line="42"/>
            <declaration name="INDEX_COMBINE_DATA_COUNT" type="int" line="43"/>
            <declaration name="INDEX_MIN_NFC_NO_MAYBE" type="int" line="44"/>
            <declaration name="INDEX_MIN_NFKC_NO_MAYBE" type="int" line="45"/>
            <declaration name="INDEX_MIN_NFD_NO_MAYBE" type="int" line="46"/>
            <declaration name="INDEX_MIN_NFKD_NO_MAYBE" type="int" line="47"/>
            <declaration name="INDEX_FCD_TRIE_SIZE" type="int" line="48"/>
            <declaration name="INDEX_AUX_TRIE_SIZE" type="int" line="49"/>
            <declaration name="INDEX_TOP" type="int" line="50"/>
            <declaration name="AUX_UNSAFE_SHIFT" type="int" line="51"/>
            <declaration name="AUX_COMP_EX_SHIFT" type="int" line="52"/>
            <declaration name="AUX_NFC_SKIPPABLE_F_SHIFT" type="int" line="53"/>
            <declaration name="AUX_MAX_FNC" type="int" line="54"/>
            <declaration name="AUX_UNSAFE_MASK" type="int" line="55"/>
            <declaration name="AUX_FNC_MASK" type="int" line="56"/>
            <declaration name="AUX_COMP_EX_MASK" type="int" line="57"/>
            <declaration name="AUX_NFC_SKIP_F_MASK" type="long" line="58"/>
            <declaration name="MAX_BUFFER_SIZE" type="int" line="59"/>
            <class name="NormTrieImpl" line="60">
                <implements interface="Trie.DataManipulate"/>
                <javadoc line="60">
                                        
                </javadoc>
                <declaration name="normTrie" type="IntTrie" line="63"/>
                <javadoc line="64">
                    Called by com.ibm.icu.util.Trie to extract from a lead surrogate&apos;s
                      data the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        property data value for a surrogate from the trie, including
                          the folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
                <method name="getFoldingOffset" type="int" line="71">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
            </class>
            <class name="FCDTrieImpl" line="75">
                <implements interface="Trie.DataManipulate"/>
                <declaration name="fcdTrie" type="CharTrie" line="76"/>
                <javadoc line="77">
                    Called by com.ibm.icu.util.Trie to extract from a lead surrogate&apos;s
                      data the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        property data value for a surrogate from the trie, including
                          the folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
                <method name="getFoldingOffset" type="int" line="84">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
            </class>
            <class name="AuxTrieImpl" line="88">
                <implements interface="Trie.DataManipulate"/>
                <declaration name="auxTrie" type="CharTrie" line="89"/>
                <javadoc line="90">
                    Called by com.ibm.icu.util.Trie to extract from a lead surrogate&apos;s
                      data the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        property data value for a surrogate from the trie, including
                          the folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
                <method name="getFoldingOffset" type="int" line="97">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="fcdTrieImpl" type="FCDTrieImpl" line="101"/>
            <javadoc line="101">
                                
            </javadoc>
            <declaration name="normTrieImpl" type="NormTrieImpl" line="104"/>
            <declaration name="auxTrieImpl" type="AuxTrieImpl" line="105"/>
            <declaration name="indexes" type="int[]" line="106"/>
            <declaration name="combiningTable" type="char[]" line="107"/>
            <declaration name="extraData" type="char[]" line="108"/>
            <declaration name="isDataLoaded" type="boolean" line="109"/>
            <declaration name="isFormatVersion_2_1" type="boolean" line="110"/>
            <declaration name="isFormatVersion_2_2" type="boolean" line="111"/>
            <declaration name="unicodeVersion" type="byte[]" line="112"/>
            <declaration name="DATA_BUFFER_SIZE" type="int" line="113"/>
            <javadoc line="113">
                Default buffer size of datafile                
            </javadoc>
            <declaration name="MIN_WITH_LEAD_CC" type="int" line="117"/>
            <javadoc line="117">
                FCD check: everything below this code point is known to have a 0
                  lead combining class                
            </javadoc>
            <declaration name="DECOMP_FLAG_LENGTH_HAS_CC" type="int" line="122"/>
            <javadoc line="122">
                Bit 7 of the length byte for a decomposition string in extra data is
                  a flag indicating whether the decomposition string is
                  preceded by a 16-bit word with the leading and trailing cc
                  of the decomposition (like for A-umlaut);
                  if not, then both cc&apos;s are zero (like for compatibility ideographs).                
            </javadoc>
            <declaration name="DECOMP_LENGTH_MASK" type="int" line="130"/>
            <javadoc line="130">
                Bits 6..0 of the length byte contain the actual length.                
            </javadoc>
            <declaration name="BMP_INDEX_LENGTH" type="int" line="134"/>
            <javadoc line="134">
                Length of the BMP portion of the index (stage 1) array.                
            </javadoc>
            <declaration name="SURROGATE_BLOCK_BITS" type="int" line="138"/>
            <javadoc line="138">
                Number of bits of a trail surrogate that are used in index table
                  lookups.                
            </javadoc>
            <method name="getFromIndexesArr" type="int" line="143">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="146">
                Constructor                
                <exception>
                    thrown when data reading fails or data corrupted                    
                </exception>
            </javadoc>
            <method name="NormalizerImpl" type="constructor" line="150">
                <scope line="151">
                    <declaration name="i" type="InputStream" line="152"/>
                    <declaration name="b" type="BufferedInputStream" line="153"/>
                    <declaration name="reader" type="NormalizerDataReader" line="154"/>
                    <declaration name="normBytes" type="byte[]" line="156"/>
                    <declaration name="combiningTableTop" type="int" line="157"/>
                    <declaration name="extraDataTop" type="int" line="159"/>
                    <declaration name="fcdBytes" type="byte[]" line="161"/>
                    <declaration name="auxBytes" type="byte[]" line="162"/>
                    <declaration name="formatVersion" type="byte[]" line="171"/>
                </scope>
            </method>
            <declaration name="JAMO_L_BASE" type="int" line="178"/>
            <declaration name="JAMO_V_BASE" type="int" line="179"/>
            <declaration name="JAMO_T_BASE" type="int" line="180"/>
            <declaration name="HANGUL_BASE" type="int" line="181"/>
            <declaration name="JAMO_L_COUNT" type="int" line="182"/>
            <declaration name="JAMO_V_COUNT" type="int" line="183"/>
            <declaration name="JAMO_T_COUNT" type="int" line="184"/>
            <declaration name="HANGUL_COUNT" type="int" line="185"/>
            <method name="isHangulWithoutJamoT" type="boolean" line="186">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="isNorm32Regular" type="boolean" line="190">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="isNorm32LeadSurrogate" type="boolean" line="193">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="isNorm32HangulOrJamo" type="boolean" line="196">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="isJamoVTNorm32JamoV" type="boolean" line="199">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="getNorm32" type="long" line="202">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="getNorm32FromSurrogatePair" type="long" line="205">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="c2" type="char"/>
                </params>
            </method>
            <method name="getNorm32" type="long" line="208">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="getNorm32" type="long" line="211">
                <params>
                    <param name="p" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="norm32" type="long" line="212"/>
                <scope line="213"/>
            </method>
            <method name="getUnicodeVersion" type="VersionInfo" line="218"/>
            <method name="getFCD16" type="char" line="221">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="getFCD16FromSurrogatePair" type="char" line="224">
                <params>
                    <param name="fcd16" type="char"/>
                    <param name="c2" type="char"/>
                </params>
            </method>
            <method name="getFCD16" type="int" line="227">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="getExtraDataIndex" type="int" line="230">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <class name="DecomposeArgs" line="233">
                <declaration name="cc" type="int" line="234"/>
                <declaration name="trailCC" type="int" line="235"/>
                <declaration name="length" type="int" line="236"/>
            </class>
            <javadoc line="238">
                get the canonical or compatibility decomposition for one character                
                <return>
                    index into the extraData array                    
                </return>
            </javadoc>
            <method name="decompose" type="int" line="242">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="qcMask" type="int"/>
                    <param name="args" type="DecomposeArgs"/>
                </params>
                <declaration name="p" type="int" line="243"/>
                <scope line="245"/>
                <scope line="249">
                    <declaration name="bothCCs" type="char" line="250"/>
                </scope>
                <scope line="254"/>
            </method>
            <javadoc line="260">
                get the canonical decomposition for one character                
                <return>
                    index into the extraData array                    
                </return>
            </javadoc>
            <method name="decompose" type="int" line="264">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="args" type="DecomposeArgs"/>
                </params>
                <declaration name="p" type="int" line="265"/>
                <scope line="267">
                    <declaration name="bothCCs" type="char" line="268"/>
                </scope>
                <scope line="272"/>
            </method>
            <class name="NextCCArgs" line="278">
                <declaration name="source" type="char[]" line="279"/>
                <declaration name="next" type="int" line="280"/>
                <declaration name="limit" type="int" line="281"/>
                <declaration name="c" type="char" line="282"/>
                <declaration name="c2" type="char" line="283"/>
            </class>
            <method name="getNextCC" type="int" line="285">
                <params>
                    <param name="args" type="NextCCArgs"/>
                </params>
                <declaration name="norm32" type="long" line="286"/>
                <scope line="289"/>
                <scope line="293">
                    <scope line="294"/>
                    <scope line="297">
                        <scope line="298"/>
                        <scope line="302"/>
                    </scope>
                </scope>
            </method>
            <class name="PrevArgs" line="310">
                <declaration name="src" type="char[]" line="311"/>
                <declaration name="start" type="int" line="312"/>
                <declaration name="current" type="int" line="313"/>
                <declaration name="c" type="char" line="314"/>
                <declaration name="c2" type="char" line="315"/>
            </class>
            <method name="getPrevNorm32" type="long" line="317">
                <params>
                    <param name="args" type="PrevArgs"/>
                    <param name="minC" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="norm32" type="long" line="318"/>
                <scope line="321"/>
                <scope line="324"/>
                <scope line="327"/>
                <scope line="330">
                    <scope line="333"/>
                    <scope line="336"/>
                </scope>
                <scope line="340"/>
            </method>
            <method name="getPrevCC" type="int" line="345">
                <params>
                    <param name="args" type="PrevArgs"/>
                </params>
            </method>
            <method name="isNFDSafe" type="boolean" line="348">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="ccOrQCMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                </params>
                <scope line="349"/>
                <scope line="352">
                    <declaration name="args" type="DecomposeArgs" line="353"/>
                </scope>
                <scope line="357"/>
            </method>
            <method name="isTrueStarter" type="boolean" line="361">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="ccOrQCMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                </params>
                <scope line="362"/>
                <scope line="365">
                    <declaration name="p" type="int" line="366"/>
                    <declaration name="args" type="DecomposeArgs" line="367"/>
                    <scope line="369">
                        <declaration name="qcMask" type="int" line="370"/>
                        <scope line="371"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="378">
                simpler, single-character version of mergeOrdered() -
                  bubble-insert one single code point into the preceding string
                  which is already canonically ordered
                  (c, c2) may or may not yet have been inserted at src[current]..src[p]
                  it must be p=current+lengthof(c, c2) i.e. p=current+(c2==0 ? 1 : 2)
                  before: src[start]..src[current] is already ordered, and
                  src[current]..src[p]     may or may not hold (c, c2) but
                  must be exactly the same length as (c, c2)
                  after: src[start]..src[p] is ordered                
                <return>
                    the trailing combining class                    
                </return>
            </javadoc>
            <method name="insertOrdered" type="int" line="390">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="current" type="int"/>
                    <param name="p" type="int"/>
                    <param name="c" type="char"/>
                    <param name="c2" type="char"/>
                    <param name="cc" type="int"/>
                </params>
                <declaration name="back" type="int" line="391"/>
                <declaration name="r" type="int" line="392"/>
                <declaration name="prevCC" type="int" line="393"/>
                <scope line="394">
                    <declaration name="prevArgs" type="PrevArgs" line="396"/>
                    <scope line="402">
                        <scope line="405">
                            <scope line="408"/>
                        </scope>
                        <scope line="414"/>
                    </scope>
                </scope>
                <scope line="421"/>
            </method>
            <javadoc line="426">
                merge two UTF-16 string parts together
                  to canonically order (order by combining classes) their concatenation
                  the two strings may already be adjacent, so that the merging is done
                  in-place if the two strings are not adjacent, then the buffer holding the
                  first one must be large enough
                  the second string may or may not be ordered in itself
                  before: [start]..[current] is already ordered, and
                  [next]..[limit]    may be ordered in itself, but
                  is not in relation to [start..current[
                  after: [start..current+(limit-next)[ is ordered
                  the algorithm is a simple bubble-sort that takes the characters from
                  src[next++] and inserts them in correct combining class order into the
                  preceding part of the string
                  since this function is called much less often than the single-code point
                  insertOrdered(), it just uses that for easier maintenance                
                <return>
                    the trailing combining class                    
                </return>
            </javadoc>
            <method name="mergeOrdered" type="int" line="444">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="current" type="int"/>
                    <param name="data" type="char[]"/>
                    <param name="next" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="isOrdered" type="boolean"/>
                </params>
                <declaration name="r" type="int" line="445"/>
                <declaration name="cc" type="int" line="446"/>
                <declaration name="adjacent" type="boolean" line="447"/>
                <declaration name="ncArgs" type="NextCCArgs" line="449"/>
                <scope line="453">
                    <scope line="454">
                        <scope line="456">
                            <scope line="458"/>
                            <scope line="461">
                                <scope line="463"/>
                            </scope>
                            <scope line="467"/>
                            <scope line="470"/>
                        </scope>
                        <scope line="474"/>
                    </scope>
                </scope>
                <scope line="481"/>
                <scope line="484">
                    <scope line="485">
                        <scope line="486"/>
                    </scope>
                    <declaration name="prevArgs" type="PrevArgs" line="492"/>
                </scope>
            </method>
            <method name="mergeOrdered" type="int" line="499">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="current" type="int"/>
                    <param name="data" type="char[]"/>
                    <param name="next" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="quickCheck" type="NormalizerBase.QuickCheckResult" line="502">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="minNoMaybe" type="int"/>
                    <param name="qcMask" type="int"/>
                    <param name="options" type="int"/>
                    <param name="allowMaybe" type="boolean"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <declaration name="ccOrQCMask" type="int" line="503"/>
                <declaration name="norm32" type="long" line="504"/>
                <declaration name="c" type="char" line="505"/>
                <declaration name="cc" type="char" line="506"/>
                <declaration name="qcNorm32" type="long" line="507"/>
                <declaration name="result" type="NormalizerBase.QuickCheckResult" line="508"/>
                <declaration name="args" type="ComposePartArgs" line="509"/>
                <declaration name="buffer" type="char[]" line="510"/>
                <declaration name="start" type="int" line="511"/>
                <scope line="512"/>
                <scope line="518">
                    <scope line="519">
                        <scope line="520"/>
                        <scope line="523"/>
                    </scope>
                    <scope line="528">
                        <scope line="529"/>
                        <scope line="533"/>
                    </scope>
                    <scope line="538"/>
                    <scope line="541"/>
                    <scope line="545"/>
                    <scope line="550"/>
                    <scope line="554">
                        <scope line="555"/>
                        <scope line="558">
                            <declaration name="prevStarter" type="int" line="559"/>
                            <declaration name="decompQCMask" type="int" line="560"/>
                            <scope line="563"/>
                            <scope line="570"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="decompose" type="int" line="579">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="dest" type="char[]"/>
                    <param name="destStart" type="int"/>
                    <param name="destLimit" type="int"/>
                    <param name="compat" type="boolean"/>
                    <param name="outTrailCC" type="int[]"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <declaration name="buffer" type="char[]" line="580"/>
                <declaration name="prevSrc" type="int" line="581"/>
                <declaration name="norm32" type="long" line="582"/>
                <declaration name="ccOrQCMask" type="int" line="583"/>
                <declaration name="reorderStartIndex" type="int" line="584"/>
                <declaration name="c" type="char" line="585"/>
                <declaration name="cc" type="int" line="586"/>
                <declaration name="p" type="char[]" line="587"/>
                <declaration name="pStart" type="int" line="588"/>
                <declaration name="destIndex" type="int" line="589"/>
                <declaration name="srcIndex" type="int" line="590"/>
                <scope line="591"/>
                <scope line="595"/>
                <scope line="606">
                    <scope line="608"/>
                    <scope line="612">
                        <scope line="614"/>
                    </scope>
                    <scope line="620"/>
                    <scope line="624">
                        <scope line="625"/>
                        <scope line="630">
                            <scope line="637"/>
                            <scope line="641"/>
                        </scope>
                    </scope>
                    <scope line="648">
                        <scope line="649"/>
                        <scope line="653">
                            <scope line="654"/>
                            <scope line="659"/>
                        </scope>
                        <scope line="665"/>
                        <scope line="669"/>
                        <scope line="674">
                            <declaration name="arg" type="DecomposeArgs" line="675"/>
                            <scope line="681"/>
                        </scope>
                    </scope>
                    <scope line="689">
                        <declaration name="reorderSplit" type="int" line="690"/>
                        <scope line="691">
                            <scope line="692"/>
                            <scope line="696">
                                <scope line="698"/>
                            </scope>
                        </scope>
                        <scope line="703">
                            <scope line="704"/>
                            <scope line="708">
                                <scope line="709"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="716"/>
                    <scope line="720"/>
                </scope>
            </method>
            <class name="NextCombiningArgs" line="727">
                <declaration name="source" type="char[]" line="728"/>
                <declaration name="start" type="int" line="729"/>
                <declaration name="c" type="char" line="730"/>
                <declaration name="c2" type="char" line="731"/>
                <declaration name="combiningIndex" type="int" line="732"/>
                <declaration name="cc" type="char" line="733"/>
            </class>
            <method name="getNextCombining" type="int" line="735">
                <params>
                    <param name="args" type="NextCombiningArgs"/>
                    <param name="limit" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <declaration name="norm32" type="long" line="736"/>
                <declaration name="combineFlags" type="int" line="737"/>
                <scope line="743"/>
                <scope line="746">
                    <scope line="747"/>
                    <scope line="749"/>
                    <scope line="753">
                        <scope line="754"/>
                        <scope line="758"/>
                    </scope>
                    <scope line="763"/>
                    <scope line="768">
                        <declaration name="index" type="int" line="769"/>
                    </scope>
                </scope>
            </method>
            <method name="getCombiningIndexFromStarter" type="int" line="775">
                <params>
                    <param name="c" type="char"/>
                    <param name="c2" type="char"/>
                </params>
                <declaration name="norm32" type="long" line="776"/>
                <scope line="778"/>
            </method>
            <method name="combine" type="int" line="783">
                <params>
                    <param name="table" type="char[]"/>
                    <param name="tableStart" type="int"/>
                    <param name="combineBackIndex" type="int"/>
                    <param name="outValues" type="int[]"/>
                </params>
                <declaration name="key" type="int" line="784"/>
                <declaration name="value" type="int" line="785"/>
                <scope line="786"/>
                <scope line="789">
                    <scope line="791"/>
                </scope>
                <scope line="796">
                    <scope line="799">
                        <scope line="800"/>
                        <scope line="804"/>
                    </scope>
                    <scope line="809"/>
                </scope>
                <scope line="817"/>
            </method>
            <class name="RecomposeArgs" line="821">
                <declaration name="source" type="char[]" line="822"/>
                <declaration name="start" type="int" line="823"/>
                <declaration name="limit" type="int" line="824"/>
            </class>
            <method name="recompose" type="char" line="826">
                <params>
                    <param name="args" type="RecomposeArgs"/>
                    <param name="options" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <declaration name="remove" type="int" line="827"/>
                <declaration name="combineFlags" type="int" line="828"/>
                <declaration name="combineFwdIndex" type="int" line="829"/>
                <declaration name="result" type="int" line="830"/>
                <declaration name="prevCC" type="int" line="831"/>
                <declaration name="starterIsSupplementary" type="boolean" line="832"/>
                <declaration name="starter" type="int" line="833"/>
                <declaration name="outValues" type="int[]" line="834"/>
                <declaration name="ncArg" type="NextCombiningArgs" line="839"/>
                <scope line="843">
                    <scope line="848">
                        <scope line="849">
                            <scope line="850">
                                <scope line="854">
                                    <scope line="856">
                                        <scope line="859"/>
                                        <scope line="863"/>
                                        <scope line="866"/>
                                        <scope line="869">
                                            <scope line="870"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="877">
                                    <scope line="878">
                                        <scope line="880"/>
                                    </scope>
                                </scope>
                                <scope line="886">
                                    <scope line="889"/>
                                </scope>
                                <scope line="896">
                                    <scope line="897"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="905">
                            <scope line="910">
                                <scope line="911"/>
                                <scope line="914">
                                    <scope line="918"/>
                                </scope>
                            </scope>
                            <scope line="924"/>
                            <scope line="928">
                                <scope line="931"/>
                            </scope>
                            <scope line="937"/>
                            <scope line="940"/>
                            <scope line="943"/>
                        </scope>
                    </scope>
                    <scope line="950"/>
                    <scope line="953">
                        <scope line="954">
                            <scope line="955"/>
                            <scope line="959"/>
                        </scope>
                        <scope line="965"/>
                    </scope>
                    <scope line="969"/>
                </scope>
            </method>
            <method name="findPreviousStarter" type="int" line="974">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="current" type="int"/>
                    <param name="ccOrQCMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                    <param name="minNoMaybe" type="char"/>
                </params>
                <declaration name="norm32" type="long" line="975"/>
                <declaration name="args" type="PrevArgs" line="976"/>
                <scope line="980">
                    <scope line="982"/>
                </scope>
            </method>
            <method name="findNextStarter" type="int" line="988">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="qcMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                    <param name="minNoMaybe" type="char"/>
                </params>
                <declaration name="p" type="int" line="989"/>
                <declaration name="norm32" type="long" line="990"/>
                <declaration name="ccOrQCMask" type="int" line="991"/>
                <declaration name="c" type="char" line="992"/>
                <declaration name="decompArgs" type="DecomposeArgs" line="994"/>
                <scope line="995">
                    <scope line="996"/>
                    <scope line="1000"/>
                    <scope line="1004"/>
                    <scope line="1007">
                        <scope line="1008"/>
                        <scope line="1012"/>
                    </scope>
                    <scope line="1016"/>
                    <scope line="1019">
                        <scope line="1021"/>
                    </scope>
                </scope>
            </method>
            <class name="ComposePartArgs" line="1029">
                <declaration name="prevCC" type="int" line="1030"/>
                <declaration name="length" type="int" line="1031"/>
            </class>
            <method name="composePart" type="char[]" line="1033">
                <params>
                    <param name="args" type="ComposePartArgs"/>
                    <param name="prevStarter" type="int"/>
                    <param name="src" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="options" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <declaration name="recomposeLimit" type="int" line="1034"/>
                <declaration name="compat" type="boolean" line="1035"/>
                <declaration name="outTrailCC" type="int[]" line="1036"/>
                <declaration name="buffer" type="char[]" line="1037"/>
                <scope line="1038">
                    <scope line="1040"/>
                    <scope line="1043"/>
                </scope>
                <scope line="1048">
                    <declaration name="rcArgs" type="RecomposeArgs" line="1049"/>
                </scope>
            </method>
            <method name="composeHangul" type="boolean" line="1059">
                <params>
                    <param name="prev" type="char"/>
                    <param name="c" type="char"/>
                    <param name="norm32" type="long"/>
                    <param name="src" type="char[]"/>
                    <param name="srcIndex" type="int[]"/>
                    <param name="limit" type="int"/>
                    <param name="compat" type="boolean"/>
                    <param name="dest" type="char[]"/>
                    <param name="destIndex" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <declaration name="start" type="int" line="1060"/>
                <scope line="1061">
                    <scope line="1063">
                        <scope line="1065">
                            <declaration name="next" type="char" line="1066"/>
                            <scope line="1068"/>
                            <scope line="1072">
                                <scope line="1074">
                                    <declaration name="p" type="int" line="1075"/>
                                    <declaration name="dcArgs" type="DecomposeArgs" line="1076"/>
                                    <scope line="1078"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1085">
                            <scope line="1086"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1096">
                    <scope line="1098"/>
                </scope>
            </method>
            <method name="compose" type="int" line="1107">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="dest" type="char[]"/>
                    <param name="destStart" type="int"/>
                    <param name="destLimit" type="int"/>
                    <param name="options" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <declaration name="prevSrc" type="int" line="1108"/>
                <declaration name="norm32" type="long" line="1109"/>
                <declaration name="ccOrQCMask" type="int" line="1110"/>
                <declaration name="reorderStartIndex" type="int" line="1111"/>
                <declaration name="c" type="char" line="1112"/>
                <declaration name="cc" type="int" line="1113"/>
                <declaration name="ioIndex" type="int[]" line="1114"/>
                <declaration name="destIndex" type="int" line="1115"/>
                <declaration name="srcIndex" type="int" line="1116"/>
                <scope line="1117"/>
                <scope line="1121"/>
                <scope line="1131">
                    <scope line="1133"/>
                    <scope line="1137">
                        <scope line="1139"/>
                        <scope line="1145"/>
                    </scope>
                    <scope line="1150"/>
                    <scope line="1154">
                        <scope line="1158"/>
                    </scope>
                    <scope line="1168">
                        <scope line="1169"/>
                        <scope line="1173">
                            <scope line="1174"/>
                            <scope line="1179"/>
                        </scope>
                        <declaration name="args" type="ComposePartArgs" line="1185"/>
                        <scope line="1186"/>
                        <scope line="1189"/>
                        <scope line="1192">
                            <declaration name="p" type="char[]" line="1193"/>
                            <declaration name="decompQCMask" type="int" line="1194"/>
                            <scope line="1195"/>
                            <scope line="1198"/>
                            <scope line="1205"/>
                            <scope line="1210">
                                <declaration name="i" type="int" line="1211"/>
                                <scope line="1212"/>
                            </scope>
                            <scope line="1217"/>
                        </scope>
                    </scope>
                    <scope line="1224">
                        <scope line="1225">
                            <declaration name="reorderSplit" type="int" line="1226"/>
                        </scope>
                        <scope line="1230">
                            <scope line="1232"/>
                        </scope>
                    </scope>
                    <scope line="1238"/>
                </scope>
            </method>
            <method name="getCombiningClass" type="int" line="1245">
                <params>
                    <param name="c" type="int"/>
                </params>
                <declaration name="norm32" type="long" line="1246"/>
            </method>
            <method name="isFullCompositionExclusion" type="boolean" line="1250">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="1251">
                    <declaration name="aux" type="int" line="1252"/>
                </scope>
                <scope line="1255"/>
            </method>
            <method name="isCanonSafeStart" type="boolean" line="1259">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="1260">
                    <declaration name="aux" type="int" line="1261"/>
                </scope>
                <scope line="1264"/>
            </method>
            <method name="isNFSkippable" type="boolean" line="1268">
                <params>
                    <param name="c" type="int"/>
                    <param name="mode" type="NormalizerBase.Mode"/>
                    <param name="mask" type="long"/>
                </params>
                <declaration name="norm32" type="long" line="1269"/>
                <declaration name="aux" type="char" line="1271"/>
                <scope line="1273"/>
                <scope line="1276"/>
                <scope line="1279"/>
                <scope line="1282"/>
                <scope line="1285"/>
            </method>
            <method name="addPropertyStarts" type="UnicodeSet" line="1291">
                <params>
                    <param name="set" type="UnicodeSet"/>
                </params>
                <declaration name="c" type="int" line="1292"/>
                <declaration name="normIter" type="TrieIterator" line="1293"/>
                <declaration name="normResult" type="RangeValueIterator.Element" line="1294"/>
                <scope line="1295"/>
                <declaration name="fcdIter" type="TrieIterator" line="1298"/>
                <declaration name="fcdResult" type="RangeValueIterator.Element" line="1299"/>
                <scope line="1300"/>
                <scope line="1303">
                    <declaration name="auxIter" type="TrieIterator" line="1304"/>
                    <declaration name="auxResult" type="RangeValueIterator.Element" line="1305"/>
                    <scope line="1306"/>
                </scope>
                <scope line="1310"/>
            </method>
            <javadoc line="1317">
                Internal API, used in UCharacter.getIntPropertyValue().                
                <internal>
                                        
                </internal>
                <param>
                    c code point                    
                </param>
                <param>
                    modeValue numeric value compatible with Mode                    
                </param>
                <return>
                    numeric value compatible with QuickCheck                    
                </return>
            </javadoc>
            <method name="quickCheck" type="int" line="1324">
                <params>
                    <param name="c" type="int"/>
                    <param name="modeValue" type="int"/>
                </params>
                <declaration name="qcMask" type="int" line="1325"/>
                <declaration name="norm32" type="int" line="1326"/>
                <scope line="1327"/>
                <scope line="1330"/>
                <scope line="1333"/>
            </method>
            <method name="strCompare" type="int" line="1337">
                <params>
                    <param name="s1" type="char[]"/>
                    <param name="s1Start" type="int"/>
                    <param name="s1Limit" type="int"/>
                    <param name="s2" type="char[]"/>
                    <param name="s2Start" type="int"/>
                    <param name="s2Limit" type="int"/>
                    <param name="codePointOrder" type="boolean"/>
                </params>
                <declaration name="start1" type="int" line="1338"/>
                <declaration name="c1" type="char" line="1339"/>
                <declaration name="length1" type="int" line="1342"/>
                <declaration name="lengthResult" type="int" line="1345"/>
                <scope line="1346"/>
                <scope line="1350"/>
                <scope line="1354"/>
                <scope line="1358"/>
                <scope line="1361">
                    <scope line="1362"/>
                    <scope line="1367"/>
                </scope>
                <scope line="1375">
                    <scope line="1376"/>
                    <scope line="1378"/>
                    <scope line="1381"/>
                    <scope line="1383"/>
                </scope>
            </method>
            <declaration name="OPTIONS_NX_MASK" type="int" line="1389"/>
            <declaration name="OPTIONS_UNICODE_MASK" type="int" line="1390"/>
            <declaration name="OPTIONS_SETS_MASK" type="int" line="1391"/>
            <declaration name="nxCache" type="UnicodeSet[]" line="1392"/>
            <declaration name="NX_HANGUL" type="int" line="1393"/>
            <javadoc line="1393">
                Options bit 0, do not decompose Hangul syllables.                
                <draft>
                    ICU 2.6                    
                </draft>
            </javadoc>
            <declaration name="NX_CJK_COMPAT" type="int" line="1398"/>
            <javadoc line="1398">
                Options bit 1, do not decompose CJK compatibility characters.                
                <draft>
                    ICU 2.6                    
                </draft>
            </javadoc>
            <declaration name="BEFORE_PRI_29" type="int" line="1403"/>
            <javadoc line="1403">
                Options bit 8, use buggy recomposition described in
                  Unicode Public Review Issue #29
                  at http://www.unicode.org/review/resolved-pri.html#pri29
                  Used in IDNA implementation according to strict interpretation
                  of IDNA definition based on Unicode 3.2 which predates PRI #29.
                  See ICU4C unormimp.h                
                <draft>
                    ICU 3.2                    
                </draft>
            </javadoc>
            <declaration name="OPTIONS_COMPAT" type="int" line="1413"/>
            <javadoc line="1413">
                Options bit 12, for compatibility vs. canonical decomposition.                
            </javadoc>
            <declaration name="OPTIONS_COMPOSE_CONTIGUOUS" type="int" line="1417"/>
            <javadoc line="1417">
                Options bit 13, no discontiguous composition (FCC vs. NFC).                
            </javadoc>
            <method name="internalGetNXHangul" type="UnicodeSet" line="1421">
                <scope line="1422"/>
            </method>
            <method name="internalGetNXCJKCompat" type="UnicodeSet" line="1427">
                <scope line="1428">
                    <declaration name="set" type="UnicodeSet" line="1429"/>
                    <declaration name="it" type="UnicodeSetIterator" line="1432"/>
                    <declaration name="start" type="int" line="1433"/>
                    <declaration name="norm32" type="long" line="1434"/>
                    <scope line="1435">
                        <scope line="1438">
                            <scope line="1440"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="internalGetNXUnicode" type="UnicodeSet" line="1450">
                <params>
                    <param name="options" type="int"/>
                </params>
                <scope line="1452"/>
                <scope line="1455">
                    <declaration name="set" type="UnicodeSet" line="1456"/>
                </scope>
            </method>
            <method name="internalGetNX" type="UnicodeSet" line="1468">
                <params>
                    <param name="options" type="int"/>
                </params>
                <scope line="1470">
                    <scope line="1471"/>
                    <scope line="1474"/>
                    <scope line="1477"/>
                    <declaration name="set" type="UnicodeSet" line="1480"/>
                    <declaration name="other" type="UnicodeSet" line="1481"/>
                    <scope line="1483"/>
                    <scope line="1486"/>
                    <scope line="1489"/>
                </scope>
            </method>
            <method name="getNX" type="UnicodeSet" line="1496">
                <params>
                    <param name="options" type="int"/>
                </params>
                <scope line="1497"/>
                <scope line="1500"/>
            </method>
            <method name="nx_contains" type="boolean" line="1504">
                <params>
                    <param name="nx" type="UnicodeSet"/>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="nx_contains" type="boolean" line="1507">
                <params>
                    <param name="nx" type="UnicodeSet"/>
                    <param name="c" type="char"/>
                    <param name="c2" type="char"/>
                </params>
            </method>
            <javadoc line="1510">
                Get the canonical decomposition
                  sherman  for ComposedCharIter                
            </javadoc>
            <method name="getDecompose" type="int" line="1514">
                <params>
                    <param name="chars" type="int"/>
                    <param name="decomps" type="String"/>
                </params>
                <declaration name="args" type="DecomposeArgs" line="1515"/>
                <declaration name="length" type="int" line="1516"/>
                <declaration name="norm32" type="long" line="1517"/>
                <declaration name="ch" type="int" line="1518"/>
                <declaration name="index" type="int" line="1519"/>
                <declaration name="i" type="int" line="1520"/>
                <scope line="1521">
                    <scope line="1526"/>
                </scope>
            </method>
            <method name="needSingleQuotation" type="boolean" line="1534">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="canonicalDecomposeWithSingleQuotation" type="String" line="1537">
                <params>
                    <param name="string" type="String"/>
                </params>
                <declaration name="src" type="char[]" line="1538"/>
                <declaration name="srcIndex" type="int" line="1539"/>
                <declaration name="srcLimit" type="int" line="1540"/>
                <declaration name="dest" type="char[]" line="1541"/>
                <declaration name="destIndex" type="int" line="1542"/>
                <declaration name="destLimit" type="int" line="1543"/>
                <declaration name="buffer" type="char[]" line="1544"/>
                <declaration name="prevSrc" type="int" line="1545"/>
                <declaration name="norm32" type="long" line="1546"/>
                <declaration name="ccOrQCMask" type="int" line="1547"/>
                <declaration name="qcMask" type="int" line="1548"/>
                <declaration name="reorderStartIndex" type="int" line="1549"/>
                <declaration name="c" type="char" line="1550"/>
                <declaration name="minNoMaybe" type="char" line="1551"/>
                <declaration name="cc" type="int" line="1552"/>
                <declaration name="p" type="char[]" line="1553"/>
                <declaration name="pStart" type="int" line="1554"/>
                <scope line="1562">
                    <scope line="1564"/>
                    <scope line="1568">
                        <scope line="1570"/>
                    </scope>
                    <scope line="1576"/>
                    <scope line="1580"/>
                    <scope line="1584">
                        <scope line="1585"/>
                        <scope line="1590"/>
                    </scope>
                    <scope line="1596"/>
                    <scope line="1601">
                        <declaration name="arg" type="DecomposeArgs" line="1602"/>
                        <scope line="1608"/>
                    </scope>
                    <scope line="1615">
                        <declaration name="tmpBuf" type="char[]" line="1616"/>
                    </scope>
                    <scope line="1621">
                        <declaration name="reorderSplit" type="int" line="1622"/>
                        <scope line="1623">
                            <scope line="1624"/>
                            <scope line="1630"/>
                            <scope line="1634">
                                <scope line="1636"/>
                            </scope>
                        </scope>
                        <scope line="1641">
                            <scope line="1642">
                                <scope line="1647"/>
                            </scope>
                            <scope line="1652"/>
                            <scope line="1656">
                                <scope line="1657"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1665"/>
                </scope>
            </method>
            <declaration name="WITHOUT_CORRIGENDUM4_CORRECTIONS" type="int" line="1671"/>
            <declaration name="corrigendum4MappingTable" type="char[][]" line="1672"/>
            <method name="convert" type="String" line="1673">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="1674"/>
                <declaration name="ch" type="int" line="1677"/>
                <declaration name="dest" type="StringBuffer" line="1678"/>
                <declaration name="iter" type="UCharacterIterator" line="1679"/>
                <scope line="1680"/>
            </method>
        </class>
    </source>