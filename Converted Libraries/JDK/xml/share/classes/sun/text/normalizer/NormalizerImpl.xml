<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <class name="NormalizerImpl" line="45">
            <comment line="50">
                Static block for the class to initialize its own self                
            </comment>
            <comment line="67">
                This new implementation of the normalization code loads its data from
                 unorm.icu, which is generated with the gennorm tool.
                 The format of that file is described at the end of this file.                
            </comment>
            <comment line="74">
                norm32 value constants                
            </comment>
            <comment line="76">
                quick check flags 0..3 set mean &quot;no&quot; for their forms                
            </comment>
            <comment line="77">
                                
            </comment>
            <comment line="78">
                                
            </comment>
            <comment line="79">
                                
            </comment>
            <comment line="80">
                                
            </comment>
            <comment line="84">
                quick check flags 4..5 mean &quot;maybe&quot; for their forms;
                 test flags&gt;=QC_MAYBE                
            </comment>
            <comment line="95">
                UnicodeData.txt combining class in bits 15.                
            </comment>
            <comment line="98">
                16 bits for the index to UChars and other extra data                
            </comment>
            <comment line="101">
                                
            </comment>
            <comment line="105">
                private static final long  MIN_JAMO_V     =  (long)(0xfff20000 &amp; UNSIGNED_INT_MASK);                
            </comment>
            <comment line="109">
                                
            </comment>
            <comment line="110">
                                
            </comment>
            <comment line="112">
                                
            </comment>
            <comment line="114">
                                
            </comment>
            <comment line="116">
                                
            </comment>
            <comment line="118">
                                
            </comment>
            <comment line="120">
                                
            </comment>
            <comment line="122">
                                
            </comment>
            <comment line="124">
                                
            </comment>
            <comment line="126">
                                
            </comment>
            <comment line="128">
                                
            </comment>
            <comment line="132">
                                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="244">
                public utility                
            </comment>
            <comment line="249">
                protected constructor ---------------------------------------------                
            </comment>
            <comment line="309">
                                
            </comment>
            <comment line="311">
                                
            </comment>
            <comment line="313">
                                
            </comment>
            <comment line="314">
                                
            </comment>
            <comment line="315">
                                
            </comment>
            <comment line="329">
                                
            </comment>
            <comment line="331">
                                
            </comment>
            <comment line="336">
                                
            </comment>
            <comment line="341">
                                
            </comment>
            <comment line="346">
                Given norm32 for Jamo V or T,
                 is this a Jamo V?                
            </comment>
            <comment line="354">
                                
            </comment>
            <comment line="369">
                /CLOVER:OFF                
            </comment>
            <comment line="374">
                get a norm32 from text with complete code points
                 (like from decompositions)                
            </comment>
            <comment line="388">
                // for StringPrep                
            </comment>
            <comment line="483">
                get the combining class of (c, c2)= args.source[args.next++]
                 before: args.next&lt;args.limit  after: args.next&lt;=args.limit
                 if only one code unit is used, then c2==0                
            </comment>
            <comment line="524">
                read backwards and get norm32
                 return 0 if the character is &lt;minC
                 if c2!=0 then (c2, c) is a surrogate pair (reversed - c2 is first
                 surrogate but read second!)                
            </comment>
            <comment line="569">
                get the combining class of (c, c2)=--p
                 before: start&lt;p  after: start&lt;=p                
            </comment>
            <comment line="579">
                is this a safe boundary character for NFD?
                 (lead cc==0)                
            </comment>
            <comment line="602">
                is this (or does its decomposition begin with) a &quot;true starter&quot;?
                 (cc==0 and NFC_YES)                
            </comment>
            <comment line="633">
                                
            </comment>
            <comment line="924">
                ------------------------------------------------------                
            </comment>
            <comment line="925">
                make NFD &amp; NFKD                
            </comment>
            <comment line="926">
                ------------------------------------------------------                
            </comment>
            <comment line="1139">
                                
            </comment>
            <comment line="1150">
                                
            </comment>
            <comment line="1203">
                given a composition-result starter (c, c2) - which means its cc==0,
                 it combines forward, it has extra data, its norm32!=0,
                 it is not a Hangul or Jamo,
                 get just its combineFwdIndex
                
                 norm32(c) is special if and only if c2!=0                
            </comment>
            <comment line="1221">
                Find the recomposition result for
                 a forward-combining character
                 (specified with a pointer to its part of the combiningTable[])
                 and a backward-combining character
                 (specified with its combineBackIndex).
                
                 If these two characters combine, then set (value, value2)
                 with the code unit(s) of the composition character.
                
                 Return value:
                 0    do not combine
                 1    combine
                 &gt;1   combine, and the composition is a forward-combining starter
                
                 See unormimp.h for a description of the composition table format.                
            </comment>
            <comment line="1298">
                recompose the characters in [p..limit[
                 (which is in NFD - decomposed and canonically ordered),
                 adjust limit, and return the trailing cc
                
                 since for NFKC we may get Jamos in decompositions, we need to
                 recompose those too
                
                 note that recomposition never lengthens the text:
                 any character consists of either one or two code units;
                 a composition may contain at most one more code unit than the original
                 starter, while the combining mark that is removed has at least one code
                 unit                
            </comment>
            <comment line="1544">
                find the last true starter between src[start]....src[current] going                
            </comment>
            <comment line="1545">
                backwards and return its index                
            </comment>
            <comment line="1565">
                find the first true starter in [src..limit[ and return the
                 pointer to it                
            </comment>
            <comment line="1636">
                                
            </comment>
            <comment line="1743">
                public static int compose(char[] src, char[] dest,boolean compat, UnicodeSet nx){
                return compose(src,0,src.length,dest,0,dest.length,compat, nx);
                }                
            </comment>
            <comment line="2047">
                                
            </comment>
            <comment line="2241">
                Status of tailored normalization
                
                 This was done initially for investigation on Unicode public review issue 7
                 (http:www.unicode.orgreview). See Jitterbug 2481.
                 While the UTC at meeting #94 (2003mar) did not take up the issue, this is
                 a permanent feature in ICU 2.6 in support of IDNA which requires true
                 Unicode 3.2 normalization.
                 (NormalizationCorrections are rolled into IDNA mapping tables.)
                
                 Tailored normalization as implemented here allows to &quot;normalize less&quot;
                 than full Unicode normalization would.
                 Based internally on a UnicodeSet of code points that are
                 &quot;excluded from normalization&quot;, the normalization functions leave those
                 code points alone (&quot;inert&quot;). This means that tailored normalization
                 still transforms text into a canonically equivalent form.
                 It does not add decompositions to code points that do not have any or
                 change decomposition results.
                
                 Any function that searches for a safe boundary has not been touched,
                 which means that these functions will be over-pessimistic when
                 exclusions are applied.
                 This should not matter because subsequent checks and normalizations
                 do apply the exclusions; only a little more of the text may be processed
                 than necessary under exclusions.
                
                 Normalization exclusions have the following effect on excluded code points c:
                 - c is not decomposed
                 - c is not a composition target
                 - c does not combine forward or backward for composition
                   except that this is not implemented for Jamo
                 - c is treated as having a combining class of 0                
            </comment>
            <comment line="2275">
                Constants for the bit fields in the options bit set parameter.
                 These need not be public.
                 A user only needs to know the currently assigned values.
                 The number and positions of reserved bits per field can remain private.                
            </comment>
            <comment line="2284">
                private static final int OPTIONS_UNICODE_SHIFT=5;                
            </comment>
            <comment line="2287">
                                
            </comment>
            <comment line="2313">
                The following options are used only in some composition functions.
                 They use bits 12 and up to preserve lower bits for the available options
                 space in unorm_compare() -
                 see documentation for UNORM_COMPARE_NORM_OPTIONS_SHIFT.                
            </comment>
            <comment line="2325">
                                
            </comment>
            <comment line="2327">
                Normalization exclusion UnicodeSets are used for tailored normalization;
                 see the comment near the beginning of this file.
                
                 By specifying one or several sets of code points,
                 those code points become inert for normalization.                
            </comment>
            <comment line="2405">
                                
            </comment>
            <comment line="2460">
                                
            </comment>
            <comment line="2495">
                ------------------------------------------------------                
            </comment>
            <comment line="2496">
                special method for Collation                
            </comment>
            <comment line="2497">
                ------------------------------------------------------                
            </comment>
            <comment line="2671">
                ------------------------------------------------------                
            </comment>
            <comment line="2672">
                mapping method for IDNA/StringPrep                
            </comment>
            <comment line="2673">
                ------------------------------------------------------                
            </comment>
            <comment line="2675">
                Normalization using NormalizerBase.UNICODE_3_2 option supports Unicode
                 3.2 normalization with Corrigendum 4 corrections. However, normalization
                 without the corrections is necessary for IDNAStringPrep support.
                 This method is called when NormalizerBase.UNICODE_3_2_0_ORIGINAL option
                 (= sun.text.Normalizer.UNICODE_3_2) is used and normalizes five
                 characters in Corrigendum 4 before normalization in order to avoid
                 incorrect normalization.
                 For the Corrigendum 4 issue, refer
                   http:www.unicode.orgversionscorrigendum4.html                
            </comment>
            <comment line="2687">
                Option used in NormalizerBase.UNICODE_3_2_0_ORIGINAL.                
            </comment>
            <comment line="2697">
                0x2F9BF                
            </comment>
            <comment line="2699">
                Removing Corrigendum 4 fix
                 @return normalized text                
            </comment>
            <javadoc line="45">
                @author  Ram Viswanadha                
            </javadoc>
            <declaration name="IMPL" type="NormalizerImpl" line="50"/>
            <scope line="53">
                <scope line="55"/>
                <scope line="59"/>
            </scope>
            <declaration name="UNSIGNED_BYTE_MASK" type="int" line="64"/>
            <declaration name="UNSIGNED_INT_MASK" type="long" line="65"/>
            <declaration name="DATA_FILE_NAME" type="String" line="71"/>
            <declaration name="QC_NFC" type="int" line="76"/>
            <declaration name="QC_NFKC" type="int" line="77"/>
            <declaration name="QC_NFD" type="int" line="78"/>
            <declaration name="QC_NFKD" type="int" line="79"/>
            <declaration name="QC_ANY_NO" type="int" line="81"/>
            <declaration name="QC_MAYBE" type="int" line="86"/>
            <declaration name="QC_ANY_MAYBE" type="int" line="87"/>
            <declaration name="QC_MASK" type="int" line="89"/>
            <declaration name="COMBINES_FWD" type="int" line="91"/>
            <declaration name="COMBINES_BACK" type="int" line="92"/>
            <declaration name="COMBINES_ANY" type="int" line="93"/>
            <declaration name="CC_SHIFT" type="int" line="95"/>
            <declaration name="CC_MASK" type="int" line="96"/>
            <declaration name="EXTRA_SHIFT" type="int" line="98"/>
            <declaration name="MIN_SPECIAL" type="long" line="101"/>
            <declaration name="SURROGATES_TOP" type="long" line="102"/>
            <declaration name="MIN_HANGUL" type="long" line="103"/>
            <declaration name="JAMO_V_TOP" type="long" line="105"/>
            <declaration name="INDEX_TRIE_SIZE" type="int" line="110"/>
            <declaration name="INDEX_CHAR_COUNT" type="int" line="112"/>
            <declaration name="INDEX_COMBINE_DATA_COUNT" type="int" line="114"/>
            <declaration name="INDEX_MIN_NFC_NO_MAYBE" type="int" line="116"/>
            <declaration name="INDEX_MIN_NFKC_NO_MAYBE" type="int" line="118"/>
            <declaration name="INDEX_MIN_NFD_NO_MAYBE" type="int" line="120"/>
            <declaration name="INDEX_MIN_NFKD_NO_MAYBE" type="int" line="122"/>
            <declaration name="INDEX_FCD_TRIE_SIZE" type="int" line="124"/>
            <declaration name="INDEX_AUX_TRIE_SIZE" type="int" line="126"/>
            <declaration name="INDEX_TOP" type="int" line="128"/>
            <declaration name="AUX_UNSAFE_SHIFT" type="int" line="133"/>
            <declaration name="AUX_COMP_EX_SHIFT" type="int" line="134"/>
            <declaration name="AUX_NFC_SKIPPABLE_F_SHIFT" type="int" line="135"/>
            <declaration name="AUX_MAX_FNC" type="int" line="137"/>
            <declaration name="AUX_UNSAFE_MASK" type="int" line="138"/>
            <declaration name="AUX_FNC_MASK" type="int" line="139"/>
            <declaration name="AUX_COMP_EX_MASK" type="int" line="140"/>
            <declaration name="AUX_NFC_SKIP_F_MASK" type="long" line="141"/>
            <declaration name="MAX_BUFFER_SIZE" type="int" line="143"/>
            <class name="NormTrieImpl" line="145">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <implements interface="Trie.DataManipulate"/>
                <javadoc line="145">
                                        
                </javadoc>
                <declaration name="normTrie" type="IntTrie" line="149"/>
                <javadoc line="150">
                    Called by com.ibm.icu.util.Trie to extract from a lead surrogate&apos;s
                      data the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        property data value for a surrogate from the trie, including
                          the folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
                <method name="getFoldingOffset" type="int" line="158">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <comment line="157">
                                                
                    </comment>
                </method>
            </class>
            <class name="FCDTrieImpl" line="165">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <implements interface="Trie.DataManipulate"/>
                <declaration name="fcdTrie" type="CharTrie" line="166"/>
                <javadoc line="167">
                    Called by com.ibm.icu.util.Trie to extract from a lead surrogate&apos;s
                      data the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        property data value for a surrogate from the trie, including
                          the folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
                <method name="getFoldingOffset" type="int" line="175">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <comment line="174">
                                                
                    </comment>
                </method>
            </class>
            <class name="AuxTrieImpl" line="180">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <implements interface="Trie.DataManipulate"/>
                <declaration name="auxTrie" type="CharTrie" line="181"/>
                <javadoc line="182">
                    Called by com.ibm.icu.util.Trie to extract from a lead surrogate&apos;s
                      data the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        property data value for a surrogate from the trie, including
                          the folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
                <method name="getFoldingOffset" type="int" line="190">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <comment line="189">
                                                
                    </comment>
                </method>
            </class>
            <declaration name="fcdTrieImpl" type="FCDTrieImpl" line="195"/>
            <javadoc line="195">
                                
            </javadoc>
            <declaration name="normTrieImpl" type="NormTrieImpl" line="199"/>
            <declaration name="auxTrieImpl" type="AuxTrieImpl" line="200"/>
            <declaration name="indexes" type="int[]" line="201"/>
            <declaration name="combiningTable" type="char[]" line="202"/>
            <declaration name="extraData" type="char[]" line="203"/>
            <declaration name="isDataLoaded" type="boolean" line="205"/>
            <declaration name="isFormatVersion_2_1" type="boolean" line="206"/>
            <declaration name="isFormatVersion_2_2" type="boolean" line="207"/>
            <declaration name="unicodeVersion" type="byte[]" line="208"/>
            <declaration name="DATA_BUFFER_SIZE" type="int" line="210"/>
            <javadoc line="210">
                Default buffer size of datafile                
            </javadoc>
            <declaration name="MIN_WITH_LEAD_CC" type="int" line="215"/>
            <javadoc line="215">
                FCD check: everything below this code point is known to have a 0
                  lead combining class                
            </javadoc>
            <declaration name="DECOMP_FLAG_LENGTH_HAS_CC" type="int" line="222"/>
            <javadoc line="222">
                Bit 7 of the length byte for a decomposition string in extra data is
                  a flag indicating whether the decomposition string is
                  preceded by a 16-bit word with the leading and trailing cc
                  of the decomposition (like for A-umlaut);
                  if not, then both cc&apos;s are zero (like for compatibility ideographs).                
            </javadoc>
            <declaration name="DECOMP_LENGTH_MASK" type="int" line="230"/>
            <javadoc line="230">
                Bits 6..0 of the length byte contain the actual length.                
            </javadoc>
            <declaration name="BMP_INDEX_LENGTH" type="int" line="235"/>
            <javadoc line="235">
                Length of the BMP portion of the index (stage 1) array.                
            </javadoc>
            <declaration name="SURROGATE_BLOCK_BITS" type="int" line="237"/>
            <javadoc line="237">
                Number of bits of a trail surrogate that are used in index table
                  lookups.                
            </javadoc>
            <method name="getFromIndexesArr" type="int" line="244">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="250">
                Constructor                
                <exception>
                    thrown when data reading fails or data corrupted                    
                </exception>
            </javadoc>
            <method name="NormalizerImpl" type="constructor" line="254">
                <comment line="255">
                    data should be loaded only once                    
                </comment>
                <comment line="258">
                    jar access                    
                </comment>
                <comment line="263">
                    read the indexes                    
                </comment>
                <comment line="281">
                    load the rest of the data data and initialize the data members                    
                </comment>
                <comment line="288">
                    we reached here without any exceptions so the data is fully                    
                </comment>
                <comment line="289">
                    loaded set the variable to true                    
                </comment>
                <comment line="292">
                    get the data format version                    
                </comment>
                <scope line="256">
                    <declaration name="i" type="InputStream" line="259"/>
                    <declaration name="b" type="BufferedInputStream" line="260"/>
                    <declaration name="reader" type="NormalizerDataReader" line="261"/>
                    <declaration name="normBytes" type="byte[]" line="266"/>
                    <declaration name="combiningTableTop" type="int" line="268"/>
                    <declaration name="extraDataTop" type="int" line="271"/>
                    <declaration name="fcdBytes" type="byte[]" line="274"/>
                    <declaration name="auxBytes" type="byte[]" line="275"/>
                    <declaration name="formatVersion" type="byte[]" line="293"/>
                </scope>
            </method>
            <declaration name="JAMO_L_BASE" type="int" line="312"/>
            <declaration name="JAMO_V_BASE" type="int" line="313"/>
            <declaration name="JAMO_T_BASE" type="int" line="314"/>
            <declaration name="HANGUL_BASE" type="int" line="316"/>
            <declaration name="JAMO_L_COUNT" type="int" line="318"/>
            <declaration name="JAMO_V_COUNT" type="int" line="319"/>
            <declaration name="JAMO_T_COUNT" type="int" line="320"/>
            <declaration name="HANGUL_COUNT" type="int" line="321"/>
            <method name="isHangulWithoutJamoT" type="boolean" line="323">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="isNorm32Regular" type="boolean" line="331">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="isNorm32LeadSurrogate" type="boolean" line="336">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="isNorm32HangulOrJamo" type="boolean" line="341">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="isJamoVTNorm32JamoV" type="boolean" line="349">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <method name="getNorm32" type="long" line="355">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="getNorm32FromSurrogatePair" type="long" line="360">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="c2" type="char"/>
                </params>
                <comment line="361">
                    the surrogate index in norm32 stores only the number of the surrogate
                     index block see gennormstore.cgetFoldedNormValue()                    
                </comment>
            </method>
            <method name="getNorm32" type="long" line="369">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="getNorm32" type="long" line="378">
                <params>
                    <param name="p" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="378">
                                        
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="381">
                                        
                </comment>
                <declaration name="norm32" type="long" line="379"/>
                <scope line="380"/>
            </method>
            <method name="getUnicodeVersion" type="VersionInfo" line="388"/>
            <method name="getFCD16" type="char" line="393">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="getFCD16FromSurrogatePair" type="char" line="397">
                <params>
                    <param name="fcd16" type="char"/>
                    <param name="c2" type="char"/>
                </params>
                <comment line="398">
                    the surrogate index in fcd16 is an absolute offset over the
                     start of stage 1                    
                </comment>
            </method>
            <method name="getFCD16" type="int" line="403">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="getExtraDataIndex" type="int" line="407">
                <params>
                    <param name="norm32" type="long"/>
                </params>
            </method>
            <class name="DecomposeArgs" line="411">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <declaration name="cc" type="int" line="412"/>
                <declaration name="trailCC" type="int" line="413"/>
                <declaration name="length" type="int" line="414"/>
            </class>
            <javadoc line="416">
                get the canonical or compatibility decomposition for one character                
                <return>
                    index into the extraData array                    
                </return>
            </javadoc>
            <method name="decompose" type="int" line="424">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="qcMask" type="int"/>
                    <param name="args" type="DecomposeArgs"/>
                </params>
                <comment line="422">
                                        
                </comment>
                <comment line="422">
                                        
                </comment>
                <comment line="423">
                                        
                </comment>
                <comment line="429">
                                        
                </comment>
                <comment line="435">
                                        
                </comment>
                <comment line="440">
                                        
                </comment>
                <declaration name="p" type="int" line="425"/>
                <scope line="428"/>
                <scope line="434">
                    <declaration name="bothCCs" type="char" line="436"/>
                </scope>
                <scope line="439"/>
            </method>
            <javadoc line="449">
                get the canonical decomposition for one character                
                <return>
                    index into the extraData array                    
                </return>
            </javadoc>
            <method name="decompose" type="int" line="454">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="args" type="DecomposeArgs"/>
                </params>
                <comment line="453">
                                        
                </comment>
                <comment line="460">
                                        
                </comment>
                <comment line="465">
                                        
                </comment>
                <declaration name="p" type="int" line="456"/>
                <scope line="459">
                    <declaration name="bothCCs" type="char" line="461"/>
                </scope>
                <scope line="464"/>
            </method>
            <class name="NextCCArgs" line="474">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <declaration name="source" type="char[]" line="475"/>
                <declaration name="next" type="int" line="476"/>
                <declaration name="limit" type="int" line="477"/>
                <declaration name="c" type="char" line="478"/>
                <declaration name="c2" type="char" line="479"/>
            </class>
            <method name="getNextCC" type="int" line="487">
                <params>
                    <param name="args" type="NextCCArgs"/>
                </params>
                <comment line="488">
                                        
                </comment>
                <comment line="500">
                                        
                </comment>
                <declaration name="norm32" type="long" line="488"/>
                <scope line="493"/>
                <scope line="496">
                    <scope line="497"/>
                    <scope line="499">
                        <scope line="502"/>
                        <scope line="505"/>
                    </scope>
                </scope>
            </method>
            <class name="PrevArgs" line="515">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <declaration name="src" type="char[]" line="516"/>
                <declaration name="start" type="int" line="517"/>
                <declaration name="current" type="int" line="518"/>
                <declaration name="c" type="char" line="519"/>
                <declaration name="c2" type="char" line="520"/>
            </class>
            <method name="getPrevNorm32" type="long" line="531">
                <params>
                    <param name="args" type="PrevArgs"/>
                    <param name="minC" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="530">
                                        
                </comment>
                <comment line="531">
                                        
                </comment>
                <comment line="532">
                                        
                </comment>
                <comment line="537">
                    check for a surrogate before getting norm32 to see if we need to
                     predecrement further                    
                </comment>
                <comment line="545">
                                        
                </comment>
                <comment line="553">
                    all surrogate pairs with this lead surrogate have
                     only irrelevant data                    
                </comment>
                <comment line="558">
                                        
                </comment>
                <comment line="562">
                                        
                </comment>
                <declaration name="norm32" type="long" line="532"/>
                <scope line="540"/>
                <scope line="542"/>
                <scope line="544"/>
                <scope line="548">
                    <scope line="552"/>
                    <scope line="557"/>
                </scope>
                <scope line="561"/>
            </method>
            <method name="getPrevCC" type="int" line="572">
                <params>
                    <param name="args" type="PrevArgs"/>
                </params>
            </method>
            <method name="isNFDSafe" type="boolean" line="584">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="ccOrQCMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                </params>
                <comment line="583">
                                        
                </comment>
                <comment line="584">
                                        
                </comment>
                <comment line="586">
                                        
                </comment>
                <comment line="589">
                                        
                </comment>
                <comment line="592">
                                        
                </comment>
                <comment line="596">
                                        
                </comment>
                <scope line="585"/>
                <scope line="590">
                    <declaration name="args" type="DecomposeArgs" line="591"/>
                </scope>
                <scope line="595"/>
            </method>
            <method name="isTrueStarter" type="boolean" line="607">
                <params>
                    <param name="norm32" type="long"/>
                    <param name="ccOrQCMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                </params>
                <comment line="606">
                                        
                </comment>
                <comment line="607">
                                        
                </comment>
                <comment line="609">
                                        
                </comment>
                <comment line="612">
                                        
                </comment>
                <comment line="614">
                                        
                </comment>
                <comment line="616">
                                        
                </comment>
                <comment line="620">
                                        
                </comment>
                <comment line="622">
                                        
                </comment>
                <comment line="624">
                                        
                </comment>
                <scope line="608"/>
                <scope line="613">
                    <declaration name="p" type="int" line="614"/>
                    <declaration name="args" type="DecomposeArgs" line="615"/>
                    <scope line="619">
                        <declaration name="qcMask" type="int" line="620"/>
                        <scope line="623"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="634">
                simpler, single-character version of mergeOrdered() -
                  bubble-insert one single code point into the preceding string
                  which is already canonically ordered
                  (c, c2) may or may not yet have been inserted at src[current]..src[p]
                  it must be p=current+lengthof(c, c2) i.e. p=current+(c2==0 ? 1 : 2)
                  before: src[start]..src[current] is already ordered, and
                  src[current]..src[p]     may or may not hold (c, c2) but
                  must be exactly the same length as (c, c2)
                  after: src[start]..src[p] is ordered                
                <return>
                    the trailing combining class                    
                </return>
            </javadoc>
            <method name="insertOrdered" type="int" line="653">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="current" type="int"/>
                    <param name="p" type="int"/>
                    <param name="c" type="char"/>
                    <param name="c2" type="char"/>
                    <param name="cc" type="int"/>
                </params>
                <comment line="649">
                                        
                </comment>
                <comment line="653">
                                        
                </comment>
                <comment line="659">
                    search for the insertion point where cc&gt;=prevCC                    
                </comment>
                <comment line="665">
                    get the prevCC                    
                </comment>
                <comment line="670">
                    this will be the last code point, so keep its cc                    
                </comment>
                <comment line="683">
                    this is where we are right now with all these indicies:                    
                </comment>
                <comment line="684">
                    [start]..[pPreBack] 0..? code points that we can ignore                    
                </comment>
                <comment line="685">
                    [pPreBack]..[pBack] 0..1 code points with prevCC&lt;=cc                    
                </comment>
                <comment line="686">
                    [pBack]..[current] 0..n code points with &gt;cc, move up to insert (c, c2)                    
                </comment>
                <comment line="687">
                    [current]..[p]         1 code point (c, c2) with cc                    
                </comment>
                <comment line="689">
                    move the code units in between up                    
                </comment>
                <comment line="697">
                    insert (c, c2)                    
                </comment>
                <comment line="703">
                    we know the cc of the last code point                    
                </comment>
                <declaration name="back" type="int" line="654"/>
                <declaration name="r" type="int" line="655"/>
                <declaration name="prevCC" type="int" line="656"/>
                <scope line="658">
                    <declaration name="prevArgs" type="PrevArgs" line="661"/>
                    <scope line="669">
                        <scope line="673">
                            <scope line="676"/>
                        </scope>
                        <scope line="691"/>
                    </scope>
                </scope>
                <scope line="699"/>
            </method>
            <javadoc line="707">
                merge two UTF-16 string parts together
                  to canonically order (order by combining classes) their concatenation
                  the two strings may already be adjacent, so that the merging is done
                  in-place if the two strings are not adjacent, then the buffer holding the
                  first one must be large enough
                  the second string may or may not be ordered in itself
                  before: [start]..[current] is already ordered, and
                  [next]..[limit]    may be ordered in itself, but
                  is not in relation to [start..current[
                  after: [start..current+(limit-next)[ is ordered
                  the algorithm is a simple bubble-sort that takes the characters from
                  src[next++] and inserts them in correct combining class order into the
                  preceding part of the string
                  since this function is called much less often than the single-code point
                  insertOrdered(), it just uses that for easier maintenance                
                <return>
                    the trailing combining class                    
                </return>
            </javadoc>
            <method name="mergeOrdered" type="int" line="736">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="current" type="int"/>
                    <param name="data" type="char[]"/>
                    <param name="next" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="isOrdered" type="boolean"/>
                </params>
                <comment line="730">
                                        
                </comment>
                <comment line="738">
                                        
                </comment>
                <comment line="752">
                    does not bubble back                    
                </comment>
                <comment line="777">
                    we know the cc of the last code point                    
                </comment>
                <comment line="781">
                    copy the second string part                    
                </comment>
                <declaration name="r" type="int" line="737"/>
                <declaration name="cc" type="int" line="738"/>
                <declaration name="adjacent" type="boolean" line="739"/>
                <declaration name="ncArgs" type="NextCCArgs" line="742"/>
                <scope line="747">
                    <scope line="749">
                        <scope line="751">
                            <scope line="754"/>
                            <scope line="756">
                                <scope line="758"/>
                            </scope>
                            <scope line="762"/>
                            <scope line="764"/>
                        </scope>
                        <scope line="767"/>
                    </scope>
                </scope>
                <scope line="776"/>
                <scope line="779">
                    <scope line="780">
                        <scope line="782"/>
                    </scope>
                    <declaration name="prevArgs" type="PrevArgs" line="787"/>
                </scope>
            </method>
            <method name="mergeOrdered" type="int" line="800">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="current" type="int"/>
                    <param name="data" type="char[]"/>
                    <param name="next" type="int"/>
                    <param name="limit" type="int"/>
                </params>
            </method>
            <method name="quickCheck" type="NormalizerBase.QuickCheckResult" line="811">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="minNoMaybe" type="int"/>
                    <param name="qcMask" type="int"/>
                    <param name="options" type="int"/>
                    <param name="allowMaybe" type="boolean"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <comment line="826">
                    initialize                    
                </comment>
                <comment line="843">
                    check one above-minimum, relevant code unit                    
                </comment>
                <comment line="845">
                    c is a lead surrogate, get the real norm32                    
                </comment>
                <comment line="857">
                                        
                </comment>
                <comment line="861">
                    check the combining order                    
                </comment>
                <comment line="868">
                    check for &quot;no&quot; or &quot;maybe&quot; quick check flags                    
                </comment>
                <comment line="874">
                    &quot;maybe&quot; can only occur for NFC and NFKC                    
                </comment>
                <comment line="878">
                    normalize a section around here to see if it is really                    
                </comment>
                <comment line="879">
                    normalized or not                    
                </comment>
                <comment line="881">
                                        
                </comment>
                <comment line="883">
                    decomposition quick check mask                    
                </comment>
                <comment line="885">
                    find the previous starter                    
                </comment>
                <comment line="887">
                    set prevStarter to the beginning of the current character                    
                </comment>
                <comment line="890">
                    safe because unpaired surrogates do not result                    
                </comment>
                <comment line="891">
                    in &quot;maybe&quot;                    
                </comment>
                <comment line="898">
                    find the next true starter in [src..limit[ - modifies                    
                </comment>
                <comment line="899">
                    src to point to the next starter                    
                </comment>
                <comment line="903">
                    set the args for compose part                    
                </comment>
                <comment line="906">
                    decompose and recompose [prevStarter..src[                    
                </comment>
                <comment line="909">
                    compare the normalized version with the original                    
                </comment>
                <comment line="911">
                    normalization differs                    
                </comment>
                <comment line="915">
                    continue after the next starter                    
                </comment>
                <declaration name="ccOrQCMask" type="int" line="813"/>
                <declaration name="norm32" type="long" line="814"/>
                <declaration name="c" type="char" line="815"/>
                <declaration name="cc" type="char" line="816"/>
                <declaration name="qcNorm32" type="long" line="817"/>
                <declaration name="result" type="NormalizerBase.QuickCheckResult" line="818"/>
                <declaration name="args" type="ComposePartArgs" line="819"/>
                <declaration name="buffer" type="char[]" line="820"/>
                <declaration name="start" type="int" line="821"/>
                <scope line="823"/>
                <scope line="831">
                    <scope line="832">
                        <scope line="833"/>
                        <scope line="836"/>
                    </scope>
                    <scope line="844">
                        <scope line="846"/>
                        <scope line="849"/>
                    </scope>
                    <scope line="853"/>
                    <scope line="856"/>
                    <scope line="863"/>
                    <scope line="870"/>
                    <scope line="873">
                        <scope line="875"/>
                        <scope line="877">
                            <declaration name="prevStarter" type="int" line="880"/>
                            <declaration name="decompQCMask" type="int" line="881"/>
                            <scope line="889"/>
                            <scope line="910"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="decompose" type="int" line="930">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="dest" type="char[]"/>
                    <param name="destStart" type="int"/>
                    <param name="destLimit" type="int"/>
                    <param name="compat" type="boolean"/>
                    <param name="outTrailCC" type="int[]"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <comment line="938">
                                        
                </comment>
                <comment line="951">
                                        
                </comment>
                <comment line="959">
                    initialize to bogus value                    
                </comment>
                <comment line="962">
                    count code units below the minimum or with irrelevant data for
                     the quick check                    
                </comment>
                <comment line="973">
                                        
                </comment>
                <comment line="984">
                                        
                </comment>
                <comment line="989">
                                        
                </comment>
                <comment line="992">
                                        
                </comment>
                <comment line="993">
                    generally, set p and length to the decomposition string
                     in simple cases, p==NULL and (c, c2) will hold the length code
                     units to append in all cases, set cc to the lead and trailCC to
                     the trail combining class
                    
                     the following merge-sort of the current character into the
                     preceding, canonically ordered result text will use the
                     optimized insertOrdered()
                     if there is only one single code point to process;
                     this is indicated with p==NULL, and (c, c2) is the character to
                     insert
                     ((c, 0) for a BMP character and (lead surrogate, trail surrogate)
                     for a supplementary character)
                     otherwise, p[length] is merged in with _mergeOrdered()                    
                </comment>
                <comment line="1015">
                    Hangul syllable: decompose algorithmically                    
                </comment>
                <comment line="1039">
                    c is a lead surrogate, get the real norm32                    
                </comment>
                <comment line="1052">
                                        
                </comment>
                <comment line="1054">
                                        
                </comment>
                <comment line="1058">
                                        
                </comment>
                <comment line="1064">
                    c decomposes, get everything from the variable-length
                     extra data                    
                </comment>
                <comment line="1073">
                                        
                </comment>
                <comment line="1082">
                    append the decomposition to the destination buffer, assume
                     length&gt;0                    
                </comment>
                <comment line="1088">
                                        
                </comment>
                <comment line="1090">
                    (c, c2) is out of order with respect to the preceding
                      text                    
                </comment>
                <comment line="1097">
                                        
                </comment>
                <comment line="1104">
                    general: multiple code points (ordered by themselves)
                     from decomposition                    
                </comment>
                <comment line="1108">
                    the decomposition is out of order with respect to the
                      preceding text                    
                </comment>
                <comment line="1115">
                                        
                </comment>
                <comment line="1122">
                                        
                </comment>
                <comment line="1123">
                                        
                </comment>
                <declaration name="buffer" type="char[]" line="932"/>
                <declaration name="prevSrc" type="int" line="933"/>
                <declaration name="norm32" type="long" line="934"/>
                <declaration name="ccOrQCMask" type="int" line="935"/>
                <declaration name="reorderStartIndex" type="int" line="936"/>
                <declaration name="c" type="char" line="937"/>
                <declaration name="cc" type="int" line="938"/>
                <declaration name="p" type="char[]" line="939"/>
                <declaration name="pStart" type="int" line="940"/>
                <declaration name="destIndex" type="int" line="941"/>
                <declaration name="srcIndex" type="int" line="942"/>
                <scope line="943"/>
                <scope line="946"/>
                <scope line="961">
                    <scope line="968"/>
                    <scope line="974">
                        <scope line="976"/>
                    </scope>
                    <scope line="985"/>
                    <scope line="1009">
                        <scope line="1010"/>
                        <scope line="1014">
                            <scope line="1024"/>
                            <scope line="1027"/>
                        </scope>
                    </scope>
                    <scope line="1034">
                        <scope line="1035"/>
                        <scope line="1038">
                            <scope line="1041"/>
                            <scope line="1045"/>
                        </scope>
                        <scope line="1053"/>
                        <scope line="1057"/>
                        <scope line="1062">
                            <declaration name="arg" type="DecomposeArgs" line="1063"/>
                            <scope line="1072"/>
                        </scope>
                    </scope>
                    <scope line="1085">
                        <declaration name="reorderSplit" type="int" line="1086"/>
                        <scope line="1087">
                            <scope line="1089"/>
                            <scope line="1096">
                                <scope line="1099"/>
                            </scope>
                        </scope>
                        <scope line="1103">
                            <scope line="1107"/>
                            <scope line="1114">
                                <scope line="1116"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1121"/>
                    <scope line="1128"/>
                </scope>
            </method>
            <class name="NextCombiningArgs" line="1139">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <declaration name="source" type="char[]" line="1140"/>
                <declaration name="start" type="int" line="1141"/>
                <declaration name="c" type="char" line="1143"/>
                <declaration name="c2" type="char" line="1144"/>
                <declaration name="combiningIndex" type="int" line="1145"/>
                <declaration name="cc" type="char" line="1146"/>
            </class>
            <method name="getNextCombining" type="int" line="1152">
                <params>
                    <param name="args" type="NextCombiningArgs"/>
                    <param name="limit" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <comment line="1153">
                                        
                </comment>
                <comment line="1155">
                                        
                </comment>
                <comment line="1159">
                                        
                </comment>
                <comment line="1168">
                                        
                </comment>
                <comment line="1170">
                                        
                </comment>
                <comment line="1175">
                                        
                </comment>
                <comment line="1187">
                                        
                </comment>
                <declaration name="norm32" type="long" line="1153"/>
                <declaration name="combineFlags" type="int" line="1154"/>
                <scope line="1164"/>
                <scope line="1166">
                    <scope line="1167"/>
                    <scope line="1169"/>
                    <scope line="1174">
                        <scope line="1177"/>
                        <scope line="1180"/>
                    </scope>
                    <scope line="1186"/>
                    <scope line="1193">
                        <declaration name="index" type="int" line="1194"/>
                    </scope>
                </scope>
            </method>
            <method name="getCombiningIndexFromStarter" type="int" line="1210">
                <params>
                    <param name="c" type="char"/>
                    <param name="c2" type="char"/>
                </params>
                <comment line="1211">
                                        
                </comment>
                <declaration name="norm32" type="long" line="1211"/>
                <scope line="1214"/>
            </method>
            <method name="combine" type="int" line="1239">
                <params>
                    <param name="table" type="char[]"/>
                    <param name="tableStart" type="int"/>
                    <param name="combineBackIndex" type="int"/>
                    <param name="outValues" type="int[]"/>
                </params>
                <comment line="1238">
                                        
                </comment>
                <comment line="1240">
                                        
                </comment>
                <comment line="1247">
                                        
                </comment>
                <comment line="1256">
                                        
                </comment>
                <comment line="1258">
                                        
                </comment>
                <comment line="1261">
                                        
                </comment>
                <comment line="1264">
                    get the composition result code point from the variable-length
                     result value                    
                </comment>
                <comment line="1269">
                                        
                </comment>
                <comment line="1273">
                                        
                </comment>
                <comment line="1278">
                                        
                </comment>
                <comment line="1286">
                                        
                </comment>
                <declaration name="key" type="int" line="1240"/>
                <declaration name="value" type="int" line="1241"/>
                <scope line="1243"/>
                <scope line="1248">
                    <scope line="1250"/>
                </scope>
                <scope line="1257">
                    <scope line="1267">
                        <scope line="1268"/>
                        <scope line="1272"/>
                    </scope>
                    <scope line="1277"/>
                </scope>
                <scope line="1285"/>
            </method>
            <class name="RecomposeArgs" line="1292">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <declaration name="source" type="char[]" line="1293"/>
                <declaration name="start" type="int" line="1294"/>
                <declaration name="limit" type="int" line="1295"/>
            </class>
            <method name="recompose" type="char" line="1311">
                <params>
                    <param name="args" type="RecomposeArgs"/>
                    <param name="options" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <comment line="1313">
                                        
                </comment>
                <comment line="1314">
                                        
                </comment>
                <comment line="1315">
                                        
                </comment>
                <comment line="1316">
                                        
                </comment>
                <comment line="1320">
                                        
                </comment>
                <comment line="1321">
                                        
                </comment>
                <comment line="1322">
                                        
                </comment>
                <comment line="1339">
                    c is a Jamo VT, see if we can compose it with the
                     previous character                    
                </comment>
                <comment line="1342">
                                        
                </comment>
                <comment line="1344">
                                        
                </comment>
                <comment line="1348">
                    Jamo V, compose with previous Jamo L and following
                     Jamo T                    
                </comment>
                <comment line="1362">
                                        
                </comment>
                <comment line="1368">
                                        
                </comment>
                <comment line="1370">
                                        
                </comment>
                <comment line="1372">
                                        
                </comment>
                <comment line="1377">
                    Normally, the following can not occur:
                     Since the input is in NFD, there are no Hangul LV syllables that
                     a Jamo T could combine with.
                     All Jamo Ts are combined above when handling Jamo Vs.
                    
                     However, before the PRI #29 fix, this can occur due to
                     an intervening combining mark between the Hangul LV and the Jamo T.                    
                </comment>
                <comment line="1387">
                                        
                </comment>
                <comment line="1398">
                                        
                </comment>
                <comment line="1408">
                                        
                </comment>
                <comment line="1411">
                    not starter=NULL because the composition is a Hangul LV syllable
                     and might combine once more (but only before the PRI #29 fix)                    
                </comment>
                <comment line="1416">
                                        
                </comment>
                <comment line="1421">
                                        
                </comment>
                <comment line="1424">
                                        
                </comment>
                <comment line="1429">
                    now: cc==0 and the combining index does not include
                     &quot;forward&quot; -&gt; the rest of the loop body will reset starter
                     to NULL; technically, a composed Hangul syllable is a
                     starter, but it does not combine forward now that we have
                     consumed all eligible Jamos; for Jamo VT, combineFlags
                     does not contain _NORM_COMBINES_FWD                    
                </comment>
                <comment line="1439">
                                        
                </comment>
                <comment line="1441">
                                        
                </comment>
                <comment line="1445">
                                        
                </comment>
                <comment line="1448">
                                        
                </comment>
                <comment line="1453">
                    replace the starter with the composition, remove the
                     combining mark                    
                </comment>
                <comment line="1456">
                                        
                </comment>
                <comment line="1458">
                                        
                </comment>
                <comment line="1462">
                                        
                </comment>
                <comment line="1465">
                    the composition is shorter than the starter,                    
                </comment>
                <comment line="1475">
                    for U+1109A, U+1109C, and U+110AB                    
                </comment>
                <comment line="1478">
                                        
                </comment>
                <comment line="1481">
                    remove the combining mark by moving the following text                    
                </comment>
                <comment line="1493">
                                        
                </comment>
                <comment line="1495">
                                        
                </comment>
                <comment line="1500">
                                        
                </comment>
                <comment line="1508">
                                        
                </comment>
                <comment line="1513">
                                        
                </comment>
                <comment line="1519">
                                        
                </comment>
                <comment line="1521">
                                        
                </comment>
                <comment line="1523">
                                        
                </comment>
                <comment line="1533">
                                        
                </comment>
                <comment line="1537">
                                        
                </comment>
                <declaration name="remove" type="int" line="1312"/>
                <declaration name="combineFlags" type="int" line="1313"/>
                <declaration name="combineFwdIndex" type="int" line="1314"/>
                <declaration name="result" type="int" line="1315"/>
                <declaration name="prevCC" type="int" line="1316"/>
                <declaration name="starterIsSupplementary" type="boolean" line="1317"/>
                <declaration name="starter" type="int" line="1318"/>
                <declaration name="outValues" type="int[]" line="1319"/>
                <declaration name="ncArg" type="NextCombiningArgs" line="1325"/>
                <scope line="1331">
                    <scope line="1337">
                        <scope line="1338">
                            <scope line="1343">
                                <scope line="1347">
                                    <scope line="1352">
                                        <scope line="1358"/>
                                        <scope line="1361"/>
                                        <scope line="1365"/>
                                        <scope line="1367">
                                            <scope line="1369"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="1386">
                                    <scope line="1388">
                                        <scope line="1390"/>
                                    </scope>
                                </scope>
                                <scope line="1397">
                                    <scope line="1401"/>
                                </scope>
                                <scope line="1410">
                                    <scope line="1417"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1450">
                            <scope line="1460">
                                <scope line="1461"/>
                                <scope line="1464">
                                    <scope line="1470"/>
                                </scope>
                            </scope>
                            <scope line="1475"/>
                            <scope line="1483">
                                <scope line="1486"/>
                            </scope>
                            <scope line="1496"/>
                            <scope line="1501"/>
                            <scope line="1504"/>
                        </scope>
                    </scope>
                    <scope line="1515"/>
                    <scope line="1520">
                        <scope line="1522">
                            <scope line="1524"/>
                            <scope line="1527"/>
                        </scope>
                        <scope line="1532"/>
                    </scope>
                    <scope line="1536"/>
                </scope>
            </method>
            <method name="findPreviousStarter" type="int" line="1548">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="current" type="int"/>
                    <param name="ccOrQCMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                    <param name="minNoMaybe" type="char"/>
                </params>
                <comment line="1546">
                                        
                </comment>
                <comment line="1547">
                                        
                </comment>
                <declaration name="norm32" type="long" line="1549"/>
                <declaration name="args" type="PrevArgs" line="1550"/>
                <scope line="1555">
                    <scope line="1557"/>
                </scope>
            </method>
            <method name="findNextStarter" type="int" line="1570">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="qcMask" type="int"/>
                    <param name="decompQCMask" type="int"/>
                    <param name="minNoMaybe" type="char"/>
                </params>
                <comment line="1568">
                                        
                </comment>
                <comment line="1569">
                                        
                </comment>
                <comment line="1572">
                                        
                </comment>
                <comment line="1582">
                                        
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1591">
                                        
                </comment>
                <comment line="1595">
                                        
                </comment>
                <comment line="1598">
                                        
                </comment>
                <comment line="1604">
                                        
                </comment>
                <comment line="1610">
                                        
                </comment>
                <comment line="1612">
                    (c, c2) decomposes, get everything from the variable-length                    
                </comment>
                <comment line="1616">
                    get the first character&apos;s norm32 to check if it is a true                    
                </comment>
                <comment line="1619">
                                        
                </comment>
                <comment line="1623">
                                        
                </comment>
                <declaration name="p" type="int" line="1571"/>
                <declaration name="norm32" type="long" line="1572"/>
                <declaration name="ccOrQCMask" type="int" line="1573"/>
                <declaration name="c" type="char" line="1574"/>
                <declaration name="decompArgs" type="DecomposeArgs" line="1578"/>
                <scope line="1580">
                    <scope line="1581"/>
                    <scope line="1585"/>
                    <scope line="1590"/>
                    <scope line="1594">
                        <scope line="1597"/>
                        <scope line="1603"/>
                    </scope>
                    <scope line="1606"/>
                    <scope line="1611">
                        <scope line="1618"/>
                    </scope>
                </scope>
            </method>
            <class name="ComposePartArgs" line="1630">
                <comment line="148">
                                        
                </comment>
                <comment line="488">
                                        
                </comment>
                <comment line="530">
                                        
                </comment>
                <comment line="573">
                                        
                </comment>
                <comment line="731">
                                        
                </comment>
                <comment line="796">
                                        
                </comment>
                <comment line="1143">
                    int limit;                    
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1633">
                                        
                </comment>
                <declaration name="prevCC" type="int" line="1631"/>
                <declaration name="length" type="int" line="1632"/>
            </class>
            <method name="composePart" type="char[]" line="1640">
                <params>
                    <param name="args" type="ComposePartArgs"/>
                    <param name="prevStarter" type="int"/>
                    <param name="src" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="options" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <comment line="1644">
                                        
                </comment>
                <comment line="1659">
                                        
                </comment>
                <comment line="1671">
                                        
                </comment>
                <declaration name="recomposeLimit" type="int" line="1641"/>
                <declaration name="compat" type="boolean" line="1642"/>
                <declaration name="outTrailCC" type="int[]" line="1645"/>
                <declaration name="buffer" type="char[]" line="1646"/>
                <scope line="1648">
                    <scope line="1652"/>
                    <scope line="1654"/>
                </scope>
                <scope line="1662">
                    <declaration name="rcArgs" type="RecomposeArgs" line="1663"/>
                </scope>
            </method>
            <method name="composeHangul" type="boolean" line="1681">
                <params>
                    <param name="prev" type="char"/>
                    <param name="c" type="char"/>
                    <param name="norm32" type="long"/>
                    <param name="src" type="char[]"/>
                    <param name="srcIndex" type="int[]"/>
                    <param name="limit" type="int"/>
                    <param name="compat" type="boolean"/>
                    <param name="dest" type="char[]"/>
                    <param name="destIndex" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <comment line="1677">
                                        
                </comment>
                <comment line="1684">
                    c is a Jamo V, compose with previous Jamo L and                    
                </comment>
                <comment line="1691">
                    check if the next character is a Jamo T (normal or                    
                </comment>
                <comment line="1698">
                                        
                </comment>
                <comment line="1702">
                    if NFKC, then check for compatibility Jamo T                    
                </comment>
                <comment line="1706">
                                        
                </comment>
                <comment line="1712">
                                        
                </comment>
                <comment line="1721">
                                        
                </comment>
                <comment line="1730">
                    c is a Jamo T, compose with previous Hangul LV that does not                    
                </comment>
                <declaration name="start" type="int" line="1682"/>
                <scope line="1683">
                    <scope line="1687">
                        <scope line="1693">
                            <declaration name="next" type="char" line="1694"/>
                            <scope line="1697"/>
                            <scope line="1701">
                                <scope line="1705">
                                    <declaration name="p" type="int" line="1706"/>
                                    <declaration name="dcArgs" type="DecomposeArgs" line="1707"/>
                                    <scope line="1711"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1719">
                            <scope line="1720"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1729">
                    <scope line="1733"/>
                </scope>
            </method>
            <method name="compose" type="int" line="1750">
                <params>
                    <param name="src" type="char[]"/>
                    <param name="srcStart" type="int"/>
                    <param name="srcLimit" type="int"/>
                    <param name="dest" type="char[]"/>
                    <param name="destStart" type="int"/>
                    <param name="destLimit" type="int"/>
                    <param name="options" type="int"/>
                    <param name="nx" type="UnicodeSet"/>
                </params>
                <comment line="1753">
                                        
                </comment>
                <comment line="1757">
                                        
                </comment>
                <comment line="1770">
                    prevStarter points to the last character before the current one
                     that is a &quot;true&quot; starter with cc==0 and quick check &quot;yes&quot;.
                    
                     prevStarter will be used instead of looking for a true starter
                     while incrementally decomposing [prevStarter..prevSrc[
                     in _composePart(). Having a good prevStarter allows to just decompose
                     the entire [prevStarter..prevSrc[.
                    
                     When _composePart() backs out from prevSrc back to prevStarter,
                     then it also backs out destIndex by the same amount.
                     Therefore, at all times, the (prevSrc-prevStarter) source units
                     must correspond 1:1 to destination units counted with destIndex,
                     except for reordering.
                     This is true for the qc &quot;yes&quot; characters copied in the fast loop,
                     and for pure reordering.
                     prevStarter must be set forward to src when this is not true:
                     In _composePart() and after composing a Hangul syllable.
                    
                     This mechanism relies on the assumption that the decomposition of a
                     true starter also begins with a true starter. gennormstore.c checks
                     for this.                    
                </comment>
                <comment line="1796">
                                        
                </comment>
                <comment line="1796">
                                        
                </comment>
                <comment line="1799">
                                        
                </comment>
                <comment line="1804">
                    count code units below the minimum or with irrelevant data for                    
                </comment>
                <comment line="1815">
                                        
                </comment>
                <comment line="1824">
                    set prevStarter to the last character in the quick check                    
                </comment>
                <comment line="1836">
                                        
                </comment>
                <comment line="1841">
                                        
                </comment>
                <comment line="1844">
                    source buffer pointers:
                    
                      all done      quick check   current char  not yet
                                    &quot;yes&quot; but     (c, c2)       processed
                                    may combine
                                    forward
                     [-------------[-------------[-------------[-------------[
                     |             |             |             |             |
                     start         prevStarter   prevSrc       src           limit
                    
                    
                     destination buffer pointers and indexes:
                    
                      all done      might take    not filled yet
                                    characters for
                                    reordering
                     [-------------[-------------[-------------[
                     |             |             |             |
                     dest      reorderStartIndex destIndex     destCapacity                    
                </comment>
                <comment line="1866">
                                        
                </comment>
                <comment line="1867">
                    norm32 is for c=(src-1), and the quick check flag is &quot;no&quot; or
                     &quot;maybe&quot;, andor cc!=0
                     check for Jamo VT, then for surrogates and regular characters
                     c is not a Hangul syllable or Jamo L because
                     they are not marked with nomaybe for NFC &amp; NFKC(and their cc==0)                    
                </comment>
                <comment line="1875">
                    c is a Jamo VT:
                     try to compose with the previous character, Jamo V also with
                     a following Jamo T, and set values here right now in case we
                     just continue with the main loop                    
                </comment>
                <comment line="1898">
                    the Jamo VT did not compose into a Hangul syllable, just                    
                </comment>
                <comment line="1908">
                                        
                </comment>
                <comment line="1915">
                                        
                </comment>
                <comment line="1923">
                                        
                </comment>
                <comment line="1925">
                                        
                </comment>
                <comment line="1932">
                    find appropriate boundaries around this character,
                     decompose the source text from between the boundaries,
                     and recompose it
                    
                     this puts the intermediate text into the side buffer because
                     it might be longer than the recomposition end result,
                     or the destination buffer may be too short or missing
                    
                     note that destIndex may be adjusted backwards to account
                     for source text that passed the quick check but needed to
                     take part in the recomposition                    
                </comment>
                <comment line="1945">
                                        
                </comment>
                <comment line="1946">
                    find the last true starter in [prevStarter..src[
                     it is either the decomposition of the current character (at prevSrc),
                     or prevStarter                    
                </comment>
                <comment line="1954">
                                        
                </comment>
                <comment line="1958">
                                        
                </comment>
                <comment line="1961">
                    args.prevStarter = prevStarter;                    
                </comment>
                <comment line="1963">
                    args.destIndex = destIndex;                    
                </comment>
                <comment line="1968">
                                        
                </comment>
                <comment line="1975">
                    append the recomposed buffer contents to the destination                    
                </comment>
                <comment line="1984">
                                        
                </comment>
                <comment line="1985">
                                        
                </comment>
                <comment line="1994">
                                        
                </comment>
                <comment line="1997">
                    (c, c2) is out of order with respect to the preceding                    
                </comment>
                <comment line="2004">
                                        
                </comment>
                <comment line="2012">
                                        
                </comment>
                <comment line="2013">
                                        
                </comment>
                <declaration name="prevSrc" type="int" line="1752"/>
                <declaration name="norm32" type="long" line="1753"/>
                <declaration name="ccOrQCMask" type="int" line="1754"/>
                <declaration name="reorderStartIndex" type="int" line="1755"/>
                <declaration name="c" type="char" line="1756"/>
                <declaration name="cc" type="int" line="1757"/>
                <declaration name="ioIndex" type="int[]" line="1758"/>
                <declaration name="destIndex" type="int" line="1759"/>
                <declaration name="srcIndex" type="int" line="1760"/>
                <scope line="1762"/>
                <scope line="1765"/>
                <scope line="1803">
                    <scope line="1809"/>
                    <scope line="1816">
                        <scope line="1818"/>
                        <scope line="1829"/>
                    </scope>
                    <scope line="1837"/>
                    <scope line="1874">
                        <scope line="1890"/>
                    </scope>
                    <scope line="1903">
                        <scope line="1904"/>
                        <scope line="1907">
                            <scope line="1910"/>
                            <scope line="1914"/>
                        </scope>
                        <declaration name="args" type="ComposePartArgs" line="1921"/>
                        <scope line="1924"/>
                        <scope line="1927"/>
                        <scope line="1929">
                            <declaration name="p" type="char[]" line="1930"/>
                            <declaration name="decompQCMask" type="int" line="1945"/>
                            <scope line="1951"/>
                            <scope line="1953"/>
                            <scope line="1967"/>
                            <scope line="1977">
                                <declaration name="i" type="int" line="1978"/>
                                <scope line="1979"/>
                            </scope>
                            <scope line="1983"/>
                        </scope>
                    </scope>
                    <scope line="1995">
                        <scope line="1996">
                            <declaration name="reorderSplit" type="int" line="1999"/>
                        </scope>
                        <scope line="2003">
                            <scope line="2006"/>
                        </scope>
                    </scope>
                    <scope line="2011"/>
                </scope>
            </method>
            <method name="getCombiningClass" type="int" line="2022">
                <params>
                    <param name="c" type="int"/>
                </params>
                <declaration name="norm32" type="long" line="2023"/>
            </method>
            <method name="isFullCompositionExclusion" type="boolean" line="2028">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="2029">
                    <declaration name="aux" type="int" line="2030"/>
                </scope>
                <scope line="2032"/>
            </method>
            <method name="isCanonSafeStart" type="boolean" line="2037">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="2038">
                    <declaration name="aux" type="int" line="2039"/>
                </scope>
                <scope line="2041"/>
            </method>
            <method name="isNFSkippable" type="boolean" line="2047">
                <params>
                    <param name="c" type="int"/>
                    <param name="mode" type="NormalizerBase.Mode"/>
                    <param name="mask" type="long"/>
                </params>
                <comment line="2048">
                                        
                </comment>
                <comment line="2052">
                                        
                </comment>
                <comment line="2056">
                                        
                </comment>
                <comment line="2060">
                                        
                </comment>
                <comment line="2062">
                                        
                </comment>
                <comment line="2064">
                                        
                </comment>
                <comment line="2066">
                                        
                </comment>
                <comment line="2069">
                                        
                </comment>
                <comment line="2071">
                                        
                </comment>
                <comment line="2072">
                                        
                </comment>
                <comment line="2075">
                                        
                </comment>
                <comment line="2076">
                                        
                </comment>
                <comment line="2078">
                                        
                </comment>
                <comment line="2083">
                                        
                </comment>
                <comment line="2085">
                                        
                </comment>
                <declaration name="norm32" type="long" line="2048"/>
                <declaration name="aux" type="char" line="2050"/>
                <scope line="2055"/>
                <scope line="2059"/>
                <scope line="2065"/>
                <scope line="2070"/>
                <scope line="2077"/>
            </method>
            <method name="addPropertyStarts" type="UnicodeSet" line="2088">
                <params>
                    <param name="set" type="UnicodeSet"/>
                </params>
                <comment line="2091">
                                        
                </comment>
                <comment line="2092">
                    utrie_enum(&amp;normTrie, NULL, _enumPropertyStartsRange, set);                    
                </comment>
                <comment line="2100">
                    utrie_enum(&amp;fcdTrie, NULL, _enumPropertyStartsRange, set);                    
                </comment>
                <comment line="2109">
                    utrie_enum(&amp;auxTrie, NULL, _enumPropertyStartsRange, set);                    
                </comment>
                <comment line="2116">
                                        
                </comment>
                <comment line="2121">
                                        
                </comment>
                <comment line="2122">
                    for chaining                    
                </comment>
                <declaration name="c" type="int" line="2089"/>
                <declaration name="normIter" type="TrieIterator" line="2093"/>
                <declaration name="normResult" type="RangeValueIterator.Element" line="2094"/>
                <scope line="2096"/>
                <declaration name="fcdIter" type="TrieIterator" line="2101"/>
                <declaration name="fcdResult" type="RangeValueIterator.Element" line="2102"/>
                <scope line="2104"/>
                <scope line="2108">
                    <declaration name="auxIter" type="TrieIterator" line="2110"/>
                    <declaration name="auxResult" type="RangeValueIterator.Element" line="2111"/>
                    <scope line="2112"/>
                </scope>
                <scope line="2117"/>
            </method>
            <javadoc line="2125">
                Internal API, used in UCharacter.getIntPropertyValue().                
                <internal>
                                        
                </internal>
                <param>
                    c code point                    
                </param>
                <param>
                    modeValue numeric value compatible with Mode                    
                </param>
                <return>
                    numeric value compatible with QuickCheck                    
                </return>
            </javadoc>
            <method name="quickCheck" type="int" line="2132">
                <params>
                    <param name="c" type="int"/>
                    <param name="modeValue" type="int"/>
                </params>
                <comment line="2133">
                                        
                </comment>
                <comment line="2140">
                    YES                    
                </comment>
                <comment line="2142">
                    NO                    
                </comment>
                <comment line="2143">
                                        
                </comment>
                <comment line="2144">
                    MAYBE;                    
                </comment>
                <declaration name="qcMask" type="int" line="2133"/>
                <declaration name="norm32" type="int" line="2137"/>
                <scope line="2139"/>
                <scope line="2141"/>
                <scope line="2143"/>
            </method>
            <method name="strCompare" type="int" line="2150">
                <params>
                    <param name="s1" type="char[]"/>
                    <param name="s1Start" type="int"/>
                    <param name="s1Limit" type="int"/>
                    <param name="s2" type="char[]"/>
                    <param name="s2Start" type="int"/>
                    <param name="s2Limit" type="int"/>
                    <param name="codePointOrder" type="boolean"/>
                </params>
                <comment line="2156">
                                        
                </comment>
                <comment line="2173">
                                        
                </comment>
                <comment line="2183">
                                        
                </comment>
                <comment line="2197">
                                        
                </comment>
                <comment line="2202">
                                        
                </comment>
                <comment line="2204">
                    subtract 0x2800 from BMP code points to make them smaller than                    
                </comment>
                <comment line="2214">
                                        
                </comment>
                <comment line="2216">
                                        
                </comment>
                <comment line="2228">
                                        
                </comment>
                <comment line="2230">
                                        
                </comment>
                <comment line="2235">
                                        
                </comment>
                <declaration name="start1" type="int" line="2152"/>
                <declaration name="c1" type="char" line="2154"/>
                <declaration name="length1" type="int" line="2160"/>
                <declaration name="lengthResult" type="int" line="2165"/>
                <scope line="2167"/>
                <scope line="2170"/>
                <scope line="2173"/>
                <scope line="2178"/>
                <scope line="2182">
                    <scope line="2184"/>
                    <scope line="2190"/>
                </scope>
                <scope line="2203">
                    <scope line="2213"/>
                    <scope line="2215"/>
                    <scope line="2227"/>
                    <scope line="2229"/>
                </scope>
            </method>
            <declaration name="OPTIONS_NX_MASK" type="int" line="2280"/>
            <declaration name="OPTIONS_UNICODE_MASK" type="int" line="2281"/>
            <declaration name="OPTIONS_SETS_MASK" type="int" line="2282"/>
            <declaration name="nxCache" type="UnicodeSet[]" line="2284"/>
            <declaration name="NX_HANGUL" type="int" line="2288"/>
            <javadoc line="2288">
                Options bit 0, do not decompose Hangul syllables.                
                <draft>
                    ICU 2.6                    
                </draft>
            </javadoc>
            <declaration name="NX_CJK_COMPAT" type="int" line="2293"/>
            <javadoc line="2293">
                Options bit 1, do not decompose CJK compatibility characters.                
                <draft>
                    ICU 2.6                    
                </draft>
            </javadoc>
            <declaration name="BEFORE_PRI_29" type="int" line="2298"/>
            <javadoc line="2298">
                Options bit 8, use buggy recomposition described in
                  Unicode Public Review Issue #29
                  at http://www.unicode.org/review/resolved-pri.html#pri29
                  Used in IDNA implementation according to strict interpretation
                  of IDNA definition based on Unicode 3.2 which predates PRI #29.
                  See ICU4C unormimp.h                
                <draft>
                    ICU 3.2                    
                </draft>
            </javadoc>
            <declaration name="OPTIONS_COMPAT" type="int" line="2319"/>
            <javadoc line="2319">
                Options bit 12, for compatibility vs. canonical decomposition.                
            </javadoc>
            <declaration name="OPTIONS_COMPOSE_CONTIGUOUS" type="int" line="2321"/>
            <javadoc line="2321">
                Options bit 13, no discontiguous composition (FCC vs. NFC).                
            </javadoc>
            <method name="internalGetNXHangul" type="UnicodeSet" line="2333">
                <comment line="2334">
                                        
                </comment>
                <scope line="2336"/>
            </method>
            <method name="internalGetNXCJKCompat" type="UnicodeSet" line="2342">
                <comment line="2343">
                                        
                </comment>
                <comment line="2347">
                                        
                </comment>
                <comment line="2352">
                                        
                </comment>
                <comment line="2355">
                                        
                </comment>
                <comment line="2372">
                                        
                </comment>
                <scope line="2345">
                    <declaration name="set" type="UnicodeSet" line="2348"/>
                    <declaration name="it" type="UnicodeSetIterator" line="2356"/>
                    <declaration name="start" type="int" line="2357"/>
                    <declaration name="norm32" type="long" line="2358"/>
                    <scope line="2360">
                        <scope line="2363">
                            <scope line="2365"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="internalGetNXUnicode" type="UnicodeSet" line="2380">
                <params>
                    <param name="options" type="int"/>
                </params>
                <comment line="2387">
                                        
                </comment>
                <scope line="2382"/>
                <scope line="2386">
                    <declaration name="set" type="UnicodeSet" line="2388"/>
                </scope>
            </method>
            <method name="internalGetNX" type="UnicodeSet" line="2405">
                <params>
                    <param name="options" type="int"/>
                </params>
                <comment line="2409">
                                        
                </comment>
                <comment line="2420">
                                        
                </comment>
                <scope line="2408">
                    <scope line="2410"/>
                    <scope line="2413"/>
                    <scope line="2416"/>
                    <declaration name="set" type="UnicodeSet" line="2421"/>
                    <declaration name="other" type="UnicodeSet" line="2422"/>
                    <scope line="2427"/>
                    <scope line="2430"/>
                    <scope line="2433"/>
                </scope>
            </method>
            <method name="getNX" type="UnicodeSet" line="2442">
                <params>
                    <param name="options" type="int"/>
                </params>
                <comment line="2444">
                                        
                </comment>
                <scope line="2443"/>
                <scope line="2446"/>
            </method>
            <method name="nx_contains" type="boolean" line="2451">
                <params>
                    <param name="nx" type="UnicodeSet"/>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="nx_contains" type="boolean" line="2455">
                <params>
                    <param name="nx" type="UnicodeSet"/>
                    <param name="c" type="char"/>
                    <param name="c2" type="char"/>
                </params>
            </method>
            <javadoc line="2461">
                Get the canonical decomposition
                  sherman  for ComposedCharIter                
            </javadoc>
            <method name="getDecompose" type="int" line="2466">
                <params>
                    <param name="chars" type="int"/>
                    <param name="decomps" type="String"/>
                </params>
                <comment line="2474">
                    no cannoical above 0x3ffff                    
                </comment>
                <comment line="2475">
                    TBD !!!! the hack code heres save us about 50ms for startup                    
                </comment>
                <comment line="2476">
                    need a better solution/lookup                    
                </comment>
                <declaration name="args" type="DecomposeArgs" line="2467"/>
                <declaration name="length" type="int" line="2468"/>
                <declaration name="norm32" type="long" line="2469"/>
                <declaration name="ch" type="int" line="2470"/>
                <declaration name="index" type="int" line="2471"/>
                <declaration name="i" type="int" line="2472"/>
                <scope line="2474">
                    <scope line="2485"/>
                </scope>
            </method>
            <method name="needSingleQuotation" type="boolean" line="2497">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="canonicalDecomposeWithSingleQuotation" type="String" line="2505">
                <params>
                    <param name="string" type="String"/>
                </params>
                <comment line="2509">
                    MAX_BUF_SIZE_DECOMPOSE = 3                    
                </comment>
                <comment line="2526">
                    initialize                    
                </comment>
                <comment line="2534">
                    initialize to bogus value                    
                </comment>
                <comment line="2537">
                    quick check (1)less than minNoMaybe (2)no decomp (3)hangual                    
                </comment>
                <comment line="2547">
                    copy these code units all at once                    
                </comment>
                <comment line="2558">
                    end of source reached?                    
                </comment>
                <comment line="2562">
                    c already contains *src and norm32 is set for it, increment src                    
                </comment>
                <comment line="2569">
                    c is a lead surrogate, get the real norm32                    
                </comment>
                <comment line="2582">
                    get the decomposition and the lead and trail cc&apos;s                    
                </comment>
                <comment line="2584">
                    c does not decompose                    
                </comment>
                <comment line="2590">
                    c decomposes, get everything from the variable-length                    
                </comment>
                <comment line="2591">
                    extra data                    
                </comment>
                <comment line="2598">
                    fastpath a single code unit from decomposition                    
                </comment>
                <comment line="2606">
                    2 SingleQuotations                    
                </comment>
                <comment line="2607">
                    buffer overflow                    
                </comment>
                <comment line="2613">
                    append the decomposition to the destination buffer, assume length&gt;0                    
                </comment>
                <comment line="2617">
                    fastpath: single code point                    
                </comment>
                <comment line="2619">
                    if we need single quotation, no need to consider &quot;prevCC&quot;                    
                </comment>
                <comment line="2620">
                    and it must NOT be a supplementary pair                    
                </comment>
                <comment line="2626">
                    (c, c2) is out of order with respect to the preceding                    
                </comment>
                <comment line="2627">
                    text                    
                </comment>
                <comment line="2632">
                    just append (c, c2)                    
                </comment>
                <comment line="2639">
                    general: multiple code points (ordered by themselves)                    
                </comment>
                <comment line="2640">
                    from decomposition                    
                </comment>
                <comment line="2655">
                    just append the decomposition                    
                </comment>
                <declaration name="src" type="char[]" line="2506"/>
                <declaration name="srcIndex" type="int" line="2507"/>
                <declaration name="srcLimit" type="int" line="2508"/>
                <declaration name="dest" type="char[]" line="2509"/>
                <declaration name="destIndex" type="int" line="2510"/>
                <declaration name="destLimit" type="int" line="2511"/>
                <declaration name="buffer" type="char[]" line="2513"/>
                <declaration name="prevSrc" type="int" line="2514"/>
                <declaration name="norm32" type="long" line="2515"/>
                <declaration name="ccOrQCMask" type="int" line="2516"/>
                <declaration name="qcMask" type="int" line="2517"/>
                <declaration name="reorderStartIndex" type="int" line="2518"/>
                <declaration name="c" type="char" line="2519"/>
                <declaration name="minNoMaybe" type="char" line="2520"/>
                <declaration name="cc" type="int" line="2521"/>
                <declaration name="p" type="char[]" line="2522"/>
                <declaration name="pStart" type="int" line="2523"/>
                <scope line="2535">
                    <scope line="2541"/>
                    <scope line="2548">
                        <scope line="2550"/>
                    </scope>
                    <scope line="2559"/>
                    <scope line="2565"/>
                    <scope line="2568">
                        <scope line="2571"/>
                        <scope line="2575"/>
                    </scope>
                    <scope line="2583"/>
                    <scope line="2588">
                        <declaration name="arg" type="DecomposeArgs" line="2589"/>
                        <scope line="2597"/>
                    </scope>
                    <scope line="2606">
                        <declaration name="tmpBuf" type="char[]" line="2608"/>
                    </scope>
                    <scope line="2614">
                        <declaration name="reorderSplit" type="int" line="2615"/>
                        <scope line="2616">
                            <scope line="2618"/>
                            <scope line="2625"/>
                            <scope line="2631">
                                <scope line="2634"/>
                            </scope>
                        </scope>
                        <scope line="2638">
                            <scope line="2641">
                                <scope line="2646"/>
                            </scope>
                            <scope line="2650"/>
                            <scope line="2654">
                                <scope line="2656"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2663"/>
                </scope>
            </method>
            <declaration name="WITHOUT_CORRIGENDUM4_CORRECTIONS" type="int" line="2689"/>
            <declaration name="corrigendum4MappingTable" type="char[][]" line="2691"/>
            <method name="convert" type="String" line="2702">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="2703"/>
                <declaration name="ch" type="int" line="2707"/>
                <declaration name="dest" type="StringBuffer" line="2708"/>
                <declaration name="iter" type="UCharacterIterator" line="2709"/>
                <scope line="2711"/>
            </method>
        </class>
    </source>