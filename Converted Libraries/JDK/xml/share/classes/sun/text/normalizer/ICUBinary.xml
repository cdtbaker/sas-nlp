<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.io.InputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <class name="ICUBinary" line="6">
            <interface name="Authenticate">
                <javadoc line="7">
                    Special interface for data authentication                    
                </javadoc>
                <method name="isDataVersionAcceptable" type="boolean" line="11"/>
                <javadoc line="11">
                    Method used in ICUBinary.readHeader() to provide data format
                      authentication.                    
                    <param>
                        version version of the current data                        
                    </param>
                    <return>
                        true if dataformat is an acceptable version, false otherwise                        
                    </return>
                </javadoc>
            </interface>
            <javadoc line="19">
                &lt;p&gt;ICU data header reader method.
                  Takes a ICU generated big-endian input stream, parse the ICU standard
                  file header and authenticates them.&lt;/p&gt;
                  &lt;p&gt;Header format:
                  &lt;ul&gt;
                  &lt;li&gt; Header size (char)
                  &lt;li&gt; Magic number 1 (byte)
                  &lt;li&gt; Magic number 2 (byte)
                  &lt;li&gt; Rest of the header size (char)
                  &lt;li&gt; Reserved word (char)
                  &lt;li&gt; Big endian indicator (byte)
                  &lt;li&gt; Character set family indicator (byte)
                  &lt;li&gt; Size of a char (byte) for c++ and c use
                  &lt;li&gt; Reserved byte (byte)
                  &lt;li&gt; Data format identifier (4 bytes), each ICU data has its own
                  identifier to distinguish them. [0] major [1] minor
                  [2] milli [3] micro
                  &lt;li&gt; Data version (4 bytes), the change version of the ICU data
                  [0] major [1] minor [2] milli [3] micro
                  &lt;li&gt; Unicode version (4 bytes) this ICU is based on.
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Example of use:&lt;br&gt;
                  &lt;pre&gt;
                  try {
                  FileInputStream input = new FileInputStream(filename);
                  If (Utility.readICUDataHeader(input, dataformat, dataversion,
                  unicode) {
                  System.out.println(&quot;Verified file header, this is a ICU data file&quot;);
                  }
                  } catch (IOException e) {
                  System.out.println(&quot;This is not a ICU data file&quot;);
                  }
                  &lt;/pre&gt;
                  &lt;/p&gt;                
                <param>
                    inputStream input stream that contains the ICU data header                    
                </param>
                <param>
                    dataFormatIDExpected Data format expected. An array of 4 bytes
                      information about the data format.
                      E.g. data format ID 1.2.3.4. will became an array of
                      {1, 2, 3, 4}                    
                </param>
                <param>
                    authenticate user defined extra data authentication. This value
                      can be null, if no extra authentication is needed.                    
                </param>
                <exception>
                    IOException thrown if there is a read error or
                      when header authentication fails.                    
                </exception>
                <draft>
                    2.1                    
                </draft>
            </javadoc>
            <method name="readHeader" type="byte[]" line="67">
                <params>
                    <param name="inputStream" type="InputStream"/>
                    <param name="dataFormatIDExpected" type="byte"/>
                    <param name="authenticate" type="Authenticate"/>
                </params>
                <declaration name="input" type="DataInputStream" line="68"/>
                <declaration name="headersize" type="char" line="69"/>
                <declaration name="readcount" type="int" line="70"/>
                <declaration name="magic1" type="byte" line="71"/>
                <declaration name="magic2" type="byte" line="73"/>
                <scope line="75"/>
                <declaration name="bigendian" type="byte" line="82"/>
                <declaration name="charset" type="byte" line="84"/>
                <declaration name="charsize" type="byte" line="86"/>
                <declaration name="dataFormatID" type="byte" line="90"/>
                <declaration name="dataVersion" type="byte" line="93"/>
                <declaration name="unicodeVersion" type="byte" line="96"/>
                <scope line="99"/>
                <scope line="103"/>
            </method>
            <declaration name="MAGIC1" type="byte" line="108"/>
            <javadoc line="108">
                Magic numbers to authenticate the data file                
            </javadoc>
            <declaration name="MAGIC2" type="byte" line="112"/>
            <declaration name="BIG_ENDIAN_" type="byte" line="113"/>
            <javadoc line="113">
                File format authentication values                
            </javadoc>
            <declaration name="CHAR_SET_" type="byte" line="117"/>
            <declaration name="CHAR_SIZE_" type="byte" line="118"/>
            <declaration name="MAGIC_NUMBER_AUTHENTICATION_FAILED_" type="String" line="119"/>
            <javadoc line="119">
                Error messages                
            </javadoc>
            <declaration name="HEADER_AUTHENTICATION_FAILED_" type="String" line="123"/>
        </class>
    </source>