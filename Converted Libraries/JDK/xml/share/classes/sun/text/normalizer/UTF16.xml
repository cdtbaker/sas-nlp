<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <class name="UTF16" line="2">
            <javadoc line="2">
                &lt;p&gt;Standalone utility class providing UTF16 character conversions and
                  indexing conversions.&lt;/p&gt;
                  &lt;p&gt;Code that uses strings alone rarely need modification.
                  By design, UTF-16 does not allow overlap, so searching for strings is a safe
                  operation. Similarly, concatenation is always safe. Substringing is safe if
                  the start and end are both on UTF-32 boundaries. In normal code, the values
                  for start and end are on those boundaries, since they arose from operations
                  like searching. If not, the nearest UTF-32 boundaries can be determined
                  using &lt;code&gt;bounds()&lt;/code&gt;.&lt;/p&gt;
                  &lt;strong&gt;Examples:&lt;/strong&gt;
                  &lt;p&gt;The following examples illustrate use of some of these methods.
                  &lt;pre&gt;
                  // iteration forwards: Original
                  for (int i = 0; i &amp;lt; s.length(); ++i) {
                  char ch = s.charAt(i);
                  doSomethingWith(ch);
                  }
                  // iteration forwards: Changes for UTF-32
                  int ch;
                  for (int i = 0; i &amp;lt; s.length(); i+=UTF16.getCharCount(ch)) {
                  ch = UTF16.charAt(s,i);
                  doSomethingWith(ch);
                  }
                  // iteration backwards: Original
                  for (int i = s.length() -1; i &gt;= 0; --i) {
                  char ch = s.charAt(i);
                  doSomethingWith(ch);
                  }
                  // iteration backwards: Changes for UTF-32
                  int ch;
                  for (int i = s.length() -1; i &gt; 0; i-=UTF16.getCharCount(ch)) {
                  ch = UTF16.charAt(s,i);
                  doSomethingWith(ch);
                  }
                  &lt;/pre&gt;
                  &lt;strong&gt;Notes:&lt;/strong&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;strong&gt;Naming:&lt;/strong&gt; For clarity, High and Low surrogates are called
                  &lt;code&gt;Lead&lt;/code&gt; and &lt;code&gt;Trail&lt;/code&gt; in the API, which gives a better
                  sense of their ordering in a string. &lt;code&gt;offset16&lt;/code&gt; and
                  &lt;code&gt;offset32&lt;/code&gt; are used to distinguish offsets to UTF-16
                  boundaries vs offsets to UTF-32 boundaries. &lt;code&gt;int char32&lt;/code&gt; is
                  used to contain UTF-32 characters, as opposed to &lt;code&gt;char16&lt;/code&gt;,
                  which is a UTF-16 code unit.
                  &lt;/li&gt;
                  &lt;li&gt;
                  &lt;strong&gt;Roundtripping Offsets:&lt;/strong&gt; You can always roundtrip from a
                  UTF-32 offset to a UTF-16 offset and back. Because of the difference in
                  structure, you can roundtrip from a UTF-16 offset to a UTF-32 offset and
                  back if and only if &lt;code&gt;bounds(string, offset16) != TRAIL&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;li&gt;
                  &lt;strong&gt;Exceptions:&lt;/strong&gt; The error checking will throw an exception
                  if indices are out of bounds. Other than than that, all methods will
                  behave reasonably, even if unmatched surrogates or out-of-bounds UTF-32
                  values are present. &lt;code&gt;UCharacter.isLegal()&lt;/code&gt; can be used to check
                  for validity if desired.
                  &lt;/li&gt;
                  &lt;li&gt;
                  &lt;strong&gt;Unmatched Surrogates:&lt;/strong&gt; If the string contains unmatched
                  surrogates, then these are counted as one UTF-32 value. This matches
                  their iteration behavior, which is vital. It also matches common display
                  practice as missing glyphs (see the Unicode Standard Section 5.4, 5.5).
                  &lt;/li&gt;
                  &lt;li&gt;
                  &lt;strong&gt;Optimization:&lt;/strong&gt; The method implementations may need
                  optimization if the compiler doesn&apos;t fold static final methods. Since
                  surrogate pairs will form an exceeding small percentage of all the text
                  in the world, the singleton case should always be optimized for.
                  &lt;/li&gt;
                  &lt;/ul&gt;                
                <author>
                    Mark Davis, with help from Markus Scherer                    
                </author>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="CODEPOINT_MIN_VALUE" type="int" line="79"/>
            <javadoc line="79">
                The lowest Unicode code point value.                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="CODEPOINT_MAX_VALUE" type="int" line="84"/>
            <javadoc line="84">
                The highest Unicode code point value (scalar value) according to the
                  Unicode Standard.                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="SUPPLEMENTARY_MIN_VALUE" type="int" line="90"/>
            <javadoc line="90">
                The minimum value for Supplementary code points                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="LEAD_SURROGATE_MIN_VALUE" type="int" line="95"/>
            <javadoc line="95">
                Lead surrogate minimum value                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="TRAIL_SURROGATE_MIN_VALUE" type="int" line="100"/>
            <javadoc line="100">
                Trail surrogate minimum value                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="LEAD_SURROGATE_MAX_VALUE" type="int" line="105"/>
            <javadoc line="105">
                Lead surrogate maximum value                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="TRAIL_SURROGATE_MAX_VALUE" type="int" line="110"/>
            <javadoc line="110">
                Trail surrogate maximum value                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="SURROGATE_MIN_VALUE" type="int" line="115"/>
            <javadoc line="115">
                Surrogate minimum value                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <javadoc line="120">
                Extract a single UTF-32 value from a string.
                  Used when iterating forwards or backwards (with
                  &lt;code&gt;UTF16.getCharCount()&lt;/code&gt;, as well as random access. If a
                  validity check is required, use
                  &lt;code&gt;&lt;a href=&quot;../lang/UCharacter.html#isLegal(char)&quot;&gt;
                  UCharacter.isLegal()&lt;/a&gt;&lt;/code&gt; on the return value.
                  If the char retrieved is part of a surrogate pair, its supplementary
                  character will be returned. If a complete supplementary character is
                  not found the incomplete character will be returned                
                <param>
                    source array of UTF-16 chars                    
                </param>
                <param>
                    offset16 UTF-16 offset to the start of the character.                    
                </param>
                <return>
                    UTF-32 value for the UTF-32 value that contains the char at
                      offset16. The boundaries of that codepoint are the same as in
                      <code>bounds32()</code>.                    
                </return>
                <exception>
                    IndexOutOfBoundsException thrown if offset16 is out of
                      bounds.                    
                </exception>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="charAt" type="int" line="139">
                <params>
                    <param name="source" type="String"/>
                    <param name="offset16" type="int"/>
                </params>
                <declaration name="single" type="char" line="140"/>
                <scope line="141"/>
            </method>
            <method name="_charAt" type="int" line="146">
                <params>
                    <param name="source" type="String"/>
                    <param name="offset16" type="int"/>
                    <param name="single" type="char"/>
                </params>
                <scope line="147"/>
                <scope line="150">
                    <scope line="152">
                        <declaration name="trail" type="char" line="153"/>
                        <scope line="154"/>
                    </scope>
                </scope>
                <scope line="159">
                    <scope line="161">
                        <declaration name="lead" type="char" line="162"/>
                        <scope line="163"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="170">
                Extract a single UTF-32 value from a substring.
                  Used when iterating forwards or backwards (with
                  &lt;code&gt;UTF16.getCharCount()&lt;/code&gt;, as well as random access. If a
                  validity check is required, use
                  &lt;code&gt;&lt;a href=&quot;../lang/UCharacter.html#isLegal(char)&quot;&gt;UCharacter.isLegal()
                  &lt;/a&gt;&lt;/code&gt; on the return value.
                  If the char retrieved is part of a surrogate pair, its supplementary
                  character will be returned. If a complete supplementary character is
                  not found the incomplete character will be returned                
                <param>
                    source array of UTF-16 chars                    
                </param>
                <param>
                    start offset to substring in the source array for analyzing                    
                </param>
                <param>
                    limit offset to substring in the source array for analyzing                    
                </param>
                <param>
                    offset16 UTF-16 offset relative to start                    
                </param>
                <return>
                    UTF-32 value for the UTF-32 value that contains the char at
                      offset16. The boundaries of that codepoint are the same as in
                      <code>bounds32()</code>.                    
                </return>
                <exception>
                    IndexOutOfBoundsException thrown if offset16 is not within
                      the range of start and limit.                    
                </exception>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="charAt" type="int" line="191">
                <params>
                    <param name="source" type="char"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="offset16" type="int"/>
                </params>
                <scope line="193"/>
                <declaration name="single" type="char" line="196"/>
                <scope line="197"/>
                <scope line="200">
                    <scope line="202"/>
                    <declaration name="trail" type="char" line="205"/>
                    <scope line="206"/>
                </scope>
                <scope line="210">
                    <scope line="211"/>
                    <declaration name="lead" type="char" line="215"/>
                </scope>
            </method>
            <javadoc line="220">
                Determines how many chars this char32 requires.
                  If a validity check is required, use &lt;code&gt;
                  &lt;a href=&quot;../lang/UCharacter.html#isLegal(char)&quot;&gt;isLegal()&lt;/a&gt;&lt;/code&gt; on
                  char32 before calling.                
                <param>
                    char32 the input codepoint.                    
                </param>
                <return>
                    2 if is in supplementary space, otherwise 1.                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="getCharCount" type="int" line="229">
                <params>
                    <param name="char32" type="int"/>
                </params>
                <scope line="230"/>
            </method>
            <javadoc line="235">
                Determines whether the code value is a surrogate.                
                <param>
                    char16 the input character.                    
                </param>
                <return>
                    true iff the input character is a surrogate.                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="isSurrogate" type="boolean" line="241">
                <params>
                    <param name="char16" type="char"/>
                </params>
            </method>
            <javadoc line="244">
                Determines whether the character is a trail surrogate.                
                <param>
                    char16 the input character.                    
                </param>
                <return>
                    true iff the input character is a trail surrogate.                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="isTrailSurrogate" type="boolean" line="250">
                <params>
                    <param name="char16" type="char"/>
                </params>
            </method>
            <javadoc line="253">
                Determines whether the character is a lead surrogate.                
                <param>
                    char16 the input character.                    
                </param>
                <return>
                    true iff the input character is a lead surrogate                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="isLeadSurrogate" type="boolean" line="259">
                <params>
                    <param name="char16" type="char"/>
                </params>
            </method>
            <javadoc line="262">
                Returns the lead surrogate.
                  If a validity check is required, use
                  &lt;code&gt;&lt;a href=&quot;../lang/UCharacter.html#isLegal(char)&quot;&gt;isLegal()&lt;/a&gt;&lt;/code&gt;
                  on char32 before calling.                
                <param>
                    char32 the input character.                    
                </param>
                <return>
                    lead surrogate if the getCharCount(ch) is 2; <br>
                      and 0 otherwise (note: 0 is not a valid lead surrogate).                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="getLeadSurrogate" type="char" line="272">
                <params>
                    <param name="char32" type="int"/>
                </params>
                <scope line="273"/>
            </method>
            <javadoc line="278">
                Returns the trail surrogate.
                  If a validity check is required, use
                  &lt;code&gt;&lt;a href=&quot;../lang/UCharacter.html#isLegal(char)&quot;&gt;isLegal()&lt;/a&gt;&lt;/code&gt;
                  on char32 before calling.                
                <param>
                    char32 the input character.                    
                </param>
                <return>
                    the trail surrogate if the getCharCount(ch) is 2; <br>otherwise
                      the character itself                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="getTrailSurrogate" type="char" line="288">
                <params>
                    <param name="char32" type="int"/>
                </params>
                <scope line="289"/>
            </method>
            <javadoc line="294">
                Convenience method corresponding to String.valueOf(char). Returns a one
                  or two char string containing the UTF-32 value in UTF16 format. If a
                  validity check is required, use
                  &lt;code&gt;&lt;a href=&quot;../lang/UCharacter.html#isLegal(char)&quot;&gt;isLegal()&lt;/a&gt;&lt;/code&gt;
                  on char32 before calling.                
                <param>
                    char32 the input character.                    
                </param>
                <return>
                    string value of char32 in UTF16 format                    
                </return>
                <exception>
                    IllegalArgumentException thrown if char32 is a invalid
                      codepoint.                    
                </exception>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="valueOf" type="String" line="306">
                <params>
                    <param name="char32" type="int"/>
                </params>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                Append a single UTF-32 value to the end of a StringBuffer.
                  If a validity check is required, use
                  &lt;code&gt;&lt;a href=&quot;../lang/UCharacter.html#isLegal(char)&quot;&gt;isLegal()&lt;/a&gt;&lt;/code&gt;
                  on char32 before calling.                
                <param>
                    target the buffer to append to                    
                </param>
                <param>
                    char32 value to append.                    
                </param>
                <return>
                    the updated StringBuffer                    
                </return>
                <exception>
                    IllegalArgumentException thrown when char32 does not lie
                      within the range of the Unicode codepoints                    
                </exception>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="append" type="StringBuffer" line="324">
                <params>
                    <param name="target" type="StringBuffer"/>
                    <param name="char32" type="int"/>
                </params>
                <scope line="325"/>
                <scope line="328"/>
                <scope line="332"/>
            </method>
            <javadoc line="337">
                Shifts offset16 by the argument number of codepoints within a subarray.                
                <param>
                    source char array                    
                </param>
                <param>
                    start position of the subarray to be performed on                    
                </param>
                <param>
                    limit position of the subarray to be performed on                    
                </param>
                <param>
                    offset16 UTF16 position to shift relative to start                    
                </param>
                <param>
                    shift32 number of codepoints to shift                    
                </param>
                <return>
                    new shifted offset16 relative to start                    
                </return>
                <exception>
                    IndexOutOfBoundsException if the new offset16 is out of
                      bounds with respect to the subarray or the subarray bounds
                      are out of range.                    
                </exception>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="moveCodePointOffset" type="int" line="350">
                <params>
                    <param name="source" type="char"/>
                    <param name="start" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="offset16" type="int"/>
                    <param name="shift32" type="int"/>
                </params>
                <declaration name="size" type="int" line="351"/>
                <declaration name="count" type="int" line="352"/>
                <declaration name="ch" type="char" line="353"/>
                <declaration name="result" type="int" line="354"/>
                <scope line="355"/>
                <scope line="358"/>
                <scope line="361"/>
                <scope line="364">
                    <scope line="365"/>
                    <scope line="369">
                        <scope line="371"/>
                    </scope>
                </scope>
                <scope line="378">
                    <scope line="379"/>
                    <scope line="382">
                        <scope line="384"/>
                        <scope line="388"/>
                    </scope>
                </scope>
                <scope line="393"/>
            </method>
            <declaration name="LEAD_SURROGATE_SHIFT_" type="int" line="399"/>
            <javadoc line="399">
                Shift value for lead surrogate to form a supplementary character.                
            </javadoc>
            <declaration name="TRAIL_SURROGATE_MASK_" type="int" line="403"/>
            <javadoc line="403">
                Mask to retrieve the significant value from a trail surrogate.                
            </javadoc>
            <declaration name="LEAD_SURROGATE_OFFSET_" type="int" line="407"/>
            <javadoc line="407">
                Value that all lead surrogate starts with                
            </javadoc>
            <javadoc line="411">
                &lt;p&gt;Converts argument code point and returns a String object representing
                  the code point&apos;s value in UTF16 format.&lt;/p&gt;
                  &lt;p&gt;This method does not check for the validity of the codepoint, the
                  results are not guaranteed if a invalid codepoint is passed as
                  argument.&lt;/p&gt;
                  &lt;p&gt;The result is a string whose length is 1 for non-supplementary code
                  points, 2 otherwise.&lt;/p&gt;                
                <param>
                    ch code point                    
                </param>
                <return>
                    string representation of the code point                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="422">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="423"/>
                <declaration name="result" type="StringBuffer" line="426"/>
            </method>
        </class>
    </source>