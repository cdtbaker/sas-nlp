<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <class name="Utility" line="2">
            <javadoc line="3">
                Convenience utility to compare two Object[]s
                  Ought to be in System.                
                <param>
                    len the length to compare.
                      The start indices and start+len must be valid.                    
                </param>
            </javadoc>
            <method name="arrayRegionMatches" type="boolean" line="9">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="sourceStart" type="int"/>
                    <param name="target" type="char[]"/>
                    <param name="targetStart" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="sourceEnd" type="int" line="10"/>
                <declaration name="delta" type="int" line="11"/>
                <scope line="12"/>
            </method>
            <javadoc line="17">
                Convert characters outside the range U+0020 to U+007F to
                  Unicode escapes, and convert backslash to a double backslash.                
            </javadoc>
            <method name="escape" type="String" line="21">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="22"/>
                <scope line="23">
                    <declaration name="c" type="int" line="24"/>
                    <scope line="26">
                        <scope line="27"/>
                        <scope line="30"/>
                    </scope>
                    <scope line="34">
                        <declaration name="four" type="boolean" line="35"/>
                    </scope>
                </scope>
            </method>
            <declaration name="UNESCAPE_MAP" type="char[]" line="42"/>
            <javadoc line="43">
                Convert an escape to a 32-bit code point value.  We attempt
                  to parallel the icu4c unescapeAt() function.                
                <param>
                    offset16 an array containing offset to the character
                      &lt;em&gt;after&lt;/em&gt; the backslash.  Upon return offset16[0] will
                      be updated to point after the escape sequence.                    
                </param>
                <return>
                    character value from 0 to 10FFFF, or -1 on error.                    
                </return>
            </javadoc>
            <method name="unescapeAt" type="int" line="51">
                <params>
                    <param name="s" type="String"/>
                    <param name="offset16" type="int[]"/>
                </params>
                <declaration name="c" type="int" line="52"/>
                <declaration name="result" type="int" line="53"/>
                <declaration name="n" type="int" line="54"/>
                <declaration name="minDig" type="int" line="55"/>
                <declaration name="maxDig" type="int" line="56"/>
                <declaration name="bitsPerDigit" type="int" line="57"/>
                <declaration name="dig" type="int" line="58"/>
                <declaration name="i" type="int" line="59"/>
                <declaration name="braces" type="boolean" line="60"/>
                <declaration name="offset" type="int" line="61"/>
                <declaration name="length" type="int" line="62"/>
                <scope line="63"/>
                <scope line="77"/>
                <scope line="82"/>
                <scope line="88"/>
                <scope line="97">
                    <scope line="98">
                        <scope line="101"/>
                    </scope>
                    <scope line="108"/>
                    <scope line="111">
                        <scope line="112"/>
                    </scope>
                    <scope line="117"/>
                    <scope line="120">
                        <declaration name="ahead" type="int" line="121"/>
                        <scope line="123">
                            <declaration name="o" type="int" line="124"/>
                        </scope>
                        <scope line="128"/>
                    </scope>
                </scope>
                <scope line="136">
                    <scope line="137"/>
                    <scope line="141"/>
                </scope>
                <scope line="145"/>
            </method>
            <javadoc line="153">
                Convert a integer to size width hex uppercase digits.
                  E.g., hex(&apos;a&apos;, 4, str) =&gt; &quot;0041&quot;.
                  Append the output to the given StringBuffer.
                  If width is too small to fit, nothing will be appended to output.                
            </javadoc>
            <method name="hex" type="StringBuffer" line="159">
                <params>
                    <param name="ch" type="int"/>
                    <param name="width" type="int"/>
                    <param name="output" type="StringBuffer"/>
                </params>
            </method>
            <javadoc line="162">
                Convert a integer to size width (minimum) hex uppercase digits.
                  E.g., hex(&apos;a&apos;, 4, str) =&gt; &quot;0041&quot;.  If the integer requires more
                  than width digits, more will be used.                
            </javadoc>
            <method name="hex" type="String" line="167">
                <params>
                    <param name="ch" type="int"/>
                    <param name="width" type="int"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="168"/>
            </method>
            <javadoc line="171">
                Skip over a sequence of zero or more white space characters
                  at pos.  Return the index of the first non-white-space character
                  at or after pos, or str.length(), if there is none.                
            </javadoc>
            <method name="skipWhitespace" type="int" line="176">
                <params>
                    <param name="str" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="177">
                    <declaration name="c" type="int" line="178"/>
                    <scope line="179"/>
                </scope>
            </method>
            <declaration name="DIGITS" type="char" line="186"/>
            <javadoc line="187">
                Append the digits of a positive integer to the given
                  &lt;code&gt;StringBuffer&lt;/code&gt; in the given radix. This is
                  done recursively since it is easiest to generate the low-
                  order digit first, but it must be appended last.                
                <param>
                    result is the &lt;code&gt;StringBuffer&lt;/code&gt; to append to                    
                </param>
                <param>
                    n is the positive integer                    
                </param>
                <param>
                    radix is the radix, from 2 to 36 inclusive                    
                </param>
                <param>
                    minDigits is the minimum number of digits to append.                    
                </param>
            </javadoc>
            <method name="recursiveAppendNumber" type="void" line="197">
                <params>
                    <param name="result" type="StringBuffer"/>
                    <param name="n" type="int"/>
                    <param name="radix" type="int"/>
                    <param name="minDigits" type="int"/>
                </params>
                <declaration name="digit" type="int" line="198"/>
                <scope line="199"/>
            </method>
            <javadoc line="204">
                Append a number to the given StringBuffer in the given radix.
                  Standard digits &apos;0&apos;-&apos;9&apos; are used and letters &apos;A&apos;-&apos;Z&apos; for
                  radices 11 through 36.                
                <param>
                    result the digits of the number are appended here                    
                </param>
                <param>
                    n the number to be converted to digits; may be negative.
                      If negative, a &apos;-&apos; is prepended to the digits.                    
                </param>
                <param>
                    radix a radix from 2 to 36 inclusive.                    
                </param>
                <param>
                    minDigits the minimum number of digits, not including
                      any &apos;-&apos;, to produce.  Values less than 2 have no effect.  One
                      digit is always emitted regardless of this parameter.                    
                </param>
                <return>
                    a reference to result                    
                </return>
            </javadoc>
            <method name="appendNumber" type="StringBuffer" line="217">
                <params>
                    <param name="result" type="StringBuffer"/>
                    <param name="n" type="int"/>
                    <param name="radix" type="int"/>
                    <param name="minDigits" type="int"/>
                </params>
                <scope line="218"/>
                <declaration name="abs" type="int" line="221"/>
                <scope line="222"/>
            </method>
            <javadoc line="229">
                Return true if the character is NOT printable ASCII.  The tab,
                  newline and linefeed characters are considered unprintable.                
            </javadoc>
            <method name="isUnprintable" type="boolean" line="233">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="236">
                Escape unprintable characters using &lt;backslash&gt;uxxxx notation
                  for U+0000 to U+FFFF and &lt;backslash&gt;Uxxxxxxxx for U+10000 and
                  above.  If the character is printable ASCII, then do nothing
                  and return FALSE.  Otherwise, append the escaped notation and
                  return TRUE.                
            </javadoc>
            <method name="escapeUnprintable" type="boolean" line="243">
                <params>
                    <param name="result" type="StringBuffer"/>
                    <param name="c" type="int"/>
                </params>
                <scope line="244">
                    <scope line="246"/>
                    <scope line="253"/>
                </scope>
            </method>
            <javadoc line="264">
                Similar to StringBuffer.getChars, version 1.3.
                  Since JDK 1.2 implements StringBuffer.getChars differently, this method
                  is here to provide consistent results.
                  To be removed after JDK 1.2 ceased to be the reference platform.                
                <param>
                    src source string buffer                    
                </param>
                <param>
                    srcBegin offset to the start of the src to retrieve from                    
                </param>
                <param>
                    srcEnd offset to the end of the src to retrieve from                    
                </param>
                <param>
                    dst char array to store the retrieved chars                    
                </param>
                <param>
                    dstBegin offset to the start of the destination char array to
                      store the retrieved chars                    
                </param>
            </javadoc>
            <method name="getChars" type="void" line="276">
                <params>
                    <param name="src" type="StringBuffer"/>
                    <param name="srcBegin" type="int"/>
                    <param name="srcEnd" type="int"/>
                    <param name="dst" type="char"/>
                    <param name="dstBegin" type="int"/>
                </params>
                <scope line="277"/>
            </method>
        </class>
    </source>