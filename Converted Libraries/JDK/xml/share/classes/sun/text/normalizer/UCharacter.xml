<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.io.IOException"/>
        <import package="java.util.MissingResourceException"/>
        <class name="UCharacter" line="4">
            <javadoc line="4">
                &lt;p&gt;
                  The UCharacter class provides extensions to the
                  &lt;a href=&quot;http://java.sun.com/j2se/1.5/docs/api/java/lang/Character.html&quot;&gt;
                  java.lang.Character&lt;/a&gt; class. These extensions provide support for
                  more Unicode properties and together with the &lt;a href=../text/UTF16.html&gt;UTF16&lt;/a&gt;
                  class, provide support for supplementary characters (those with code
                  points above U+FFFF).
                  Each ICU release supports the latest version of Unicode available at that time.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Code points are represented in these API using ints. While it would be
                  more convenient in Java to have a separate primitive datatype for them,
                  ints suffice in the meantime.
                  &lt;/p&gt;
                  &lt;p&gt;
                  To use this class please add the jar file name icu4j.jar to the
                  class path, since it contains data files which supply the information used
                  by this file.&lt;br&gt;
                  E.g. In Windows &lt;br&gt;
                  &lt;code&gt;set CLASSPATH=%CLASSPATH%;$JAR_FILE_PATH/ucharacter.jar&lt;/code&gt;.&lt;br&gt;
                  Otherwise, another method would be to copy the files uprops.dat and
                  unames.icu from the icu4j source subdirectory
                  &lt;i&gt;$ICU4J_SRC/src/com.ibm.icu.impl.data&lt;/i&gt; to your class directory
                  &lt;i&gt;$ICU4J_CLASS/com.ibm.icu.impl.data&lt;/i&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Aside from the additions for UTF-16 support, and the updated Unicode
                  properties, the main differences between UCharacter and Character are:
                  &lt;ul&gt;
                  &lt;li&gt; UCharacter is not designed to be a char wrapper and does not have
                  APIs to which involves management of that single char.&lt;br&gt;
                  These include:
                  &lt;ul&gt;
                  &lt;li&gt; char charValue(),
                  &lt;li&gt; int compareTo(java.lang.Character, java.lang.Character), etc.
                  &lt;/ul&gt;
                  &lt;li&gt; UCharacter does not include Character APIs that are deprecated, nor
                  does it include the Java-specific character information, such as
                  boolean isJavaIdentifierPart(char ch).
                  &lt;li&gt; Character maps characters &apos;A&apos; - &apos;Z&apos; and &apos;a&apos; - &apos;z&apos; to the numeric
                  values &apos;10&apos; - &apos;35&apos;. UCharacter also does this in digit and
                  getNumericValue, to adhere to the java semantics of these
                  methods.  New methods unicodeDigit, and
                  getUnicodeNumericValue do not treat the above code points
                  as having numeric values.  This is a semantic change from ICU4J 1.3.1.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Further detail differences can be determined from the program
                  &lt;a href=&quot;http://source.icu-project.org/repos/icu/icu4j/trunk/src/com/ibm/icu/dev/test/lang/UCharacterCompare.java&quot;&gt;
                  com.ibm.icu.dev.test.lang.UCharacterCompare&lt;/a&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  In addition to Java compatibility functions, which calculate derived properties,
                  this API provides low-level access to the Unicode Character Database.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Unicode assigns each code point (not just assigned character) values for
                  many properties.
                  Most of them are simple boolean flags, or constants from a small enumerated list.
                  For some properties, values are strings or other relatively more complex types.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For more information see
                  &quot;About the Unicode Character Database&quot; (http://www.unicode.org/ucd/)
                  and the ICU User Guide chapter on Properties (http://www.icu-project.org/userguide/properties.html).
                  &lt;/p&gt;
                  &lt;p&gt;
                  There are also functions that provide easy migration from C/POSIX functions
                  like isblank(). Their use is generally discouraged because the C/POSIX
                  standards do not define their semantics beyond the ASCII range, which means
                  that different implementations exhibit very different behavior.
                  Instead, Unicode properties should be used directly.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There are also only a few, broad C/POSIX character classes, and they tend
                  to be used for conflicting purposes. For example, the &quot;isalpha()&quot; class
                  is sometimes used to determine word boundaries, while a more sophisticated
                  approach would at least distinguish initial letters from continuation
                  characters (the latter including combining marks).
                  (In ICU, BreakIterator is the most sophisticated API for word boundaries.)
                  Another example: There is no &quot;istitle()&quot; class for titlecase characters.
                  &lt;/p&gt;
                  &lt;p&gt;
                  ICU 3.4 and later provides API access for all twelve C/POSIX character classes.
                  ICU implements them according to the Standard Recommendations in
                  Annex C: Compatibility Properties of UTS #18 Unicode Regular Expressions
                  (http://www.unicode.org/reports/tr18/#Compatibility_Properties).
                  &lt;/p&gt;
                  &lt;p&gt;
                  API access for C/POSIX character classes is as follows:
                  - alpha:     isUAlphabetic(c) or hasBinaryProperty(c, UProperty.ALPHABETIC)
                  - lower:     isULowercase(c) or hasBinaryProperty(c, UProperty.LOWERCASE)
                  - upper:     isUUppercase(c) or hasBinaryProperty(c, UProperty.UPPERCASE)
                  - punct:     ((1&lt;&lt;getType(c)) &amp; ((1&lt;&lt;DASH_PUNCTUATION)|(1&lt;&lt;START_PUNCTUATION)|(1&lt;&lt;END_PUNCTUATION)|(1&lt;&lt;CONNECTOR_PUNCTUATION)|(1&lt;&lt;OTHER_PUNCTUATION)|(1&lt;&lt;INITIAL_PUNCTUATION)|(1&lt;&lt;FINAL_PUNCTUATION)))!=0
                  - digit:     isDigit(c) or getType(c)==DECIMAL_DIGIT_NUMBER
                  - xdigit:    hasBinaryProperty(c, UProperty.POSIX_XDIGIT)
                  - alnum:     hasBinaryProperty(c, UProperty.POSIX_ALNUM)
                  - space:     isUWhiteSpace(c) or hasBinaryProperty(c, UProperty.WHITE_SPACE)
                  - blank:     hasBinaryProperty(c, UProperty.POSIX_BLANK)
                  - cntrl:     getType(c)==CONTROL
                  - graph:     hasBinaryProperty(c, UProperty.POSIX_GRAPH)
                  - print:     hasBinaryProperty(c, UProperty.POSIX_PRINT)
                  &lt;/p&gt;
                  &lt;p&gt;
                  The C/POSIX character classes are also available in UnicodeSet patterns,
                  using patterns like [:graph:] or \p{graph}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Note: There are several ICU (and Java) whitespace functions.
                  Comparison:
                  - isUWhiteSpace=UCHAR_WHITE_SPACE: Unicode White_Space property;
                  most of general categories &quot;Z&quot; (separators) + most whitespace ISO controls
                  (including no-break spaces, but excluding IS1..IS4 and ZWSP)
                  - isWhitespace: Java isWhitespace; Z + whitespace ISO controls but excluding no-break spaces
                  - isSpaceChar: just Z (including no-break spaces)
                  &lt;/p&gt;
                  &lt;p&gt;
                  This class is not subclassable
                  &lt;/p&gt;                
                <author>
                    Syn Wee Quek                    
                </author>
                <stable>
                    ICU 2.1                    
                </stable>
                <see>
                    com.ibm.icu.lang.UCharacterEnums                    
                </see>
            </javadoc>
            <interface name="NumericType">
                <javadoc line="129">
                    Numeric Type constants.                    
                    <see>
                        UProperty#NUMERIC_TYPE                        
                    </see>
                    <stable>
                        ICU 2.4                        
                    </stable>
                </javadoc>
                <declaration name="DECIMAL" type="int" line="135"/>
                <javadoc line="135">
                    @stable ICU 2.4                    
                </javadoc>
            </interface>
            <declaration name="MIN_VALUE" type="int" line="140"/>
            <javadoc line="140">
                The lowest Unicode code point value.                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="MAX_VALUE" type="int" line="145"/>
            <javadoc line="145">
                The highest Unicode code point value (scalar value) according to the
                  Unicode Standard.
                  This is a 21-bit value (21 bits, rounded up).&lt;br&gt;
                  Up-to-date Unicode implementation of java.lang.Character.MIN_VALUE                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <declaration name="SUPPLEMENTARY_MIN_VALUE" type="int" line="153"/>
            <javadoc line="153">
                The minimum value for Supplementary code points                
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <javadoc line="158">
                Retrieves the numeric value of a decimal digit code point.
                  &lt;br&gt;This method observes the semantics of
                  &lt;code&gt;java.lang.Character.digit()&lt;/code&gt;.  Note that this
                  will return positive values for code points for which isDigit
                  returns false, just like java.lang.Character.
                  &lt;br&gt;&lt;em&gt;Semantic Change:&lt;/em&gt; In release 1.3.1 and
                  prior, this did not treat the European letters as having a
                  digit value, and also treated numeric letters and other numbers as
                  digits.
                  This has been changed to conform to the java semantics.
                  &lt;br&gt;A code point is a valid digit if and only if:
                  &lt;ul&gt;
                  &lt;li&gt;ch is a decimal digit or one of the european letters, and
                  &lt;li&gt;the value of ch is less than the specified radix.
                  &lt;/ul&gt;                
                <param>
                    ch the code point to query                    
                </param>
                <param>
                    radix the radix                    
                </param>
                <return>
                    the numeric value represented by the code point in the
                      specified radix, or -1 if the code point is not a decimal digit
                      or if its value is too large for the radix                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="digit" type="int" line="181">
                <params>
                    <param name="ch" type="int"/>
                    <param name="radix" type="int"/>
                </params>
                <declaration name="props" type="int" line="182"/>
                <declaration name="value" type="int" line="183"/>
                <scope line="184"/>
                <scope line="187"/>
            </method>
            <javadoc line="192">
                Returns the Bidirection property of a code point.
                  For example, 0x0041 (letter A) has the LEFT_TO_RIGHT directional
                  property.&lt;br&gt;
                  Result returned belongs to the interface
                  &lt;a href=UCharacterDirection.html&gt;UCharacterDirection&lt;/a&gt;                
                <param>
                    ch the code point to be determined its direction                    
                </param>
                <return>
                    direction constant from UCharacterDirection.                    
                </return>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="getDirection" type="int" line="202">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="205">
                Returns a code point corresponding to the two UTF16 characters.                
                <param>
                    lead the lead char                    
                </param>
                <param>
                    trail the trail char                    
                </param>
                <return>
                    code point if surrogate characters are valid.                    
                </return>
                <exception>
                    IllegalArgumentException thrown when argument characters do
                      not form a valid codepoint                    
                </exception>
                <stable>
                    ICU 2.1                    
                </stable>
            </javadoc>
            <method name="getCodePoint" type="int" line="214">
                <params>
                    <param name="lead" type="char"/>
                    <param name="trail" type="char"/>
                </params>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                &lt;p&gt;Get the &quot;age&quot; of the code point.&lt;/p&gt;
                  &lt;p&gt;The &quot;age&quot; is the Unicode version when the code point was first
                  designated (as a non-character or for Private Use) or assigned a
                  character.
                  &lt;p&gt;This can be useful to avoid emitting code points to receiving
                  processes that do not accept newer characters.&lt;/p&gt;
                  &lt;p&gt;The data is from the UCD file DerivedAge.txt.&lt;/p&gt;                
                <param>
                    ch The code point.                    
                </param>
                <return>
                    the Unicode version number                    
                </return>
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <method name="getAge" type="VersionInfo" line="232">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="233"/>
            </method>
            <declaration name="PROPERTY_" type="UCharacterProperty" line="238"/>
            <javadoc line="238">
                Database storing the sets of character property                
            </javadoc>
            <declaration name="PROPERTY_TRIE_INDEX_" type="char[]" line="242"/>
            <javadoc line="242">
                For optimization                
            </javadoc>
            <declaration name="PROPERTY_TRIE_DATA_" type="char[]" line="246"/>
            <declaration name="PROPERTY_INITIAL_VALUE_" type="int" line="247"/>
            <declaration name="gBdp" type="UBiDiProps" line="248"/>
            <scope line="249">
                <scope line="250"/>
                <scope line="256"/>
                <declaration name="bdp" type="UBiDiProps" line="259"/>
                <scope line="260"/>
                <scope line="263"/>
            </scope>
            <declaration name="NUMERIC_TYPE_SHIFT_" type="int" line="268"/>
            <javadoc line="268">
                Shift to get numeric type                
            </javadoc>
            <declaration name="NUMERIC_TYPE_MASK_" type="int" line="272"/>
            <javadoc line="272">
                Mask to get numeric type                
            </javadoc>
            <javadoc line="276">
                Getting the digit values of characters like &apos;A&apos; - &apos;Z&apos;, normal,
                  half-width and full-width. This method assumes that the other digit
                  characters are checked by the calling method.                
                <param>
                    ch character to test                    
                </param>
                <return>
                    -1 if ch is not a character of the form 'A' - 'Z', otherwise
                      its corresponding digit will be returned.                    
                </return>
            </javadoc>
            <method name="getEuropeanDigit" type="int" line="284">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="285"/>
                <scope line="288"/>
                <scope line="291"/>
            </method>
            <javadoc line="296">
                Gets the numeric type of the property argument                
                <param>
                    props 32 bit property                    
                </param>
                <return>
                    the numeric type                    
                </return>
            </javadoc>
            <method name="getNumericType" type="int" line="301">
                <params>
                    <param name="props" type="int"/>
                </params>
            </method>
            <javadoc line="304">
                Gets the property value at the index.
                  This is optimized.
                  Note this is alittle different from CharTrie the index m_trieData_
                  is never negative.
                  This is a duplicate of UCharacterProperty.getProperty. For optimization
                  purposes, this method calls the trie data directly instead of through
                  UCharacterProperty.getProperty.                
                <param>
                    ch code point whose property value is to be retrieved                    
                </param>
                <return>
                    property value of code point                    
                </return>
                <stable>
                    ICU 2.6                    
                </stable>
            </javadoc>
            <method name="getProperty" type="int" line="316">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="317">
                    <scope line="318"/>
                    <scope line="321"/>
                </scope>
                <scope line="325"/>
                <scope line="328"/>
            </method>
        </class>
    </source>