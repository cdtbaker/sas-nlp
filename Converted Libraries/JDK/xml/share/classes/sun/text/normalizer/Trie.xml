<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <class name="Trie" line="5">
            <javadoc line="5">
                &lt;p&gt;A trie is a kind of compressed, serializable table of values
                  associated with Unicode code points (0..0x10ffff).&lt;/p&gt;
                  &lt;p&gt;This class defines the basic structure of a trie and provides methods
                  to &lt;b&gt;retrieve the offsets to the actual data&lt;/b&gt;.&lt;/p&gt;
                  &lt;p&gt;Data will be the form of an array of basic types, char or int.&lt;/p&gt;
                  &lt;p&gt;The actual data format will have to be specified by the user in the
                  inner static interface com.ibm.icu.impl.Trie.DataManipulate.&lt;/p&gt;
                  &lt;p&gt;This trie implementation is optimized for getting offset while walking
                  forward through a UTF-16 string.
                  Therefore, the simplest and fastest access macros are the
                  fromLead() and fromOffsetTrail() methods.
                  The fromBMP() method are a little more complicated; they get offsets even
                  for lead surrogate codepoints, while the fromLead() method get special
                  &quot;folded&quot; offsets for lead surrogate code units if there is relevant data
                  associated with them.
                  From such a folded offsets, an offset needs to be extracted to supply
                  to the fromOffsetTrail() methods.
                  To handle such supplementary codepoints, some offset information are kept
                  in the data.&lt;/p&gt;
                  &lt;p&gt;Methods in com.ibm.icu.impl.Trie.DataManipulate are called to retrieve
                  that offset from the folded value for the lead surrogate unit.&lt;/p&gt;
                  &lt;p&gt;For examples of use, see com.ibm.icu.impl.CharTrie or
                  com.ibm.icu.impl.IntTrie.&lt;/p&gt;                
                <author>
                    synwee                    
                </author>
                <see>
                    com.ibm.icu.impl.CharTrie                    
                </see>
                <see>
                    com.ibm.icu.impl.IntTrie                    
                </see>
                <since>
                    release 2.1, Jan 01 2002                    
                </since>
            </javadoc>
            <interface name="DataManipulate">
                <javadoc line="35">
                    Character data in com.ibm.impl.Trie have different user-specified format
                      for different purposes.
                      This interface specifies methods to be implemented in order for
                      com.ibm.impl.Trie, to surrogate offset information encapsulated within
                      the data.                    
                </javadoc>
                <method name="getFoldingOffset" type="int" line="43"/>
                <javadoc line="43">
                    Called by com.ibm.icu.impl.Trie to extract from a lead surrogate&apos;s
                      data
                      the index array offset of the indexes for that lead surrogate.                    
                    <param>
                        value data value for a surrogate from the trie, including the
                          folding offset                        
                    </param>
                    <return>
                        data offset or 0 if there is no data for the lead surrogate                        
                    </return>
                </javadoc>
            </interface>
            <class name="DefaultGetFoldingOffset" line="53">
                <implements interface="DataManipulate"/>
                <method name="getFoldingOffset" type="int" line="54">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
            </class>
            <javadoc line="58">
                Trie constructor for CharTrie use.                
                <param>
                    inputStream ICU data file input stream which contains the
                      trie                    
                </param>
                <param>
                    dataManipulate object containing the information to parse the
                      trie data                    
                </param>
                <throws>
                    IOException thrown when input stream does not have the
                      right header.                    
                </throws>
            </javadoc>
            <method name="Trie" type="constructor" line="67">
                <params>
                    <param name="inputStream" type="InputStream"/>
                    <param name="dataManipulate" type="DataManipulate"/>
                </params>
                <declaration name="input" type="DataInputStream" line="68"/>
                <declaration name="signature" type="int" line="69"/>
                <scope line="71"/>
                <scope line="74"/>
                <scope line="77"/>
            </method>
            <javadoc line="85">
                Trie constructor                
                <param>
                    index array to be used for index                    
                </param>
                <param>
                    options used by the trie                    
                </param>
                <param>
                    dataManipulate object containing the information to parse the
                      trie data                    
                </param>
            </javadoc>
            <method name="Trie" type="constructor" line="92">
                <params>
                    <param name="index" type="char"/>
                    <param name="options" type="int"/>
                    <param name="dataManipulate" type="DataManipulate"/>
                </params>
                <scope line="94"/>
                <scope line="97"/>
            </method>
            <declaration name="LEAD_INDEX_OFFSET_" type="int" line="104"/>
            <javadoc line="104">
                Lead surrogate code points&apos; index displacement in the index array.
                  0x10000-0xd800=0x2800
                  0x2800 &gt;&gt; INDEX_STAGE_1_SHIFT_                
            </javadoc>
            <declaration name="INDEX_STAGE_1_SHIFT_" type="int" line="110"/>
            <javadoc line="110">
                Shift size for shifting right the input index. 1..9                
            </javadoc>
            <declaration name="INDEX_STAGE_2_SHIFT_" type="int" line="114"/>
            <javadoc line="114">
                Shift size for shifting left the index array values.
                  Increases possible data size with 16-bit index values at the cost
                  of compactability.
                  This requires blocks of stage 2 data to be aligned by
                  DATA_GRANULARITY.
                  0..INDEX_STAGE_1_SHIFT                
            </javadoc>
            <declaration name="DATA_BLOCK_LENGTH" type="int" line="123"/>
            <javadoc line="123">
                Number of data values in a stage 2 (data array) block.                
            </javadoc>
            <declaration name="INDEX_STAGE_3_MASK_" type="int" line="127"/>
            <javadoc line="127">
                Mask for getting the lower bits from the input index.
                  DATA_BLOCK_LENGTH - 1.                
            </javadoc>
            <declaration name="SURROGATE_BLOCK_BITS" type="int" line="132"/>
            <javadoc line="132">
                Number of bits of a trail surrogate that are used in index table lookups.                
            </javadoc>
            <declaration name="SURROGATE_BLOCK_COUNT" type="int" line="136"/>
            <javadoc line="136">
                Number of index (stage 1) entries per lead surrogate.
                  Same as number of index entries for 1024 trail surrogates,
                  ==0x400&gt;&gt;INDEX_STAGE_1_SHIFT_                
            </javadoc>
            <declaration name="BMP_INDEX_LENGTH" type="int" line="142"/>
            <javadoc line="142">
                Length of the BMP portion of the index (stage 1) array.                
            </javadoc>
            <declaration name="SURROGATE_MASK_" type="int" line="146"/>
            <javadoc line="146">
                Surrogate mask to use when shifting offset to retrieve supplementary
                  values                
            </javadoc>
            <declaration name="m_index_" type="char" line="151"/>
            <javadoc line="151">
                Index or UTF16 characters                
            </javadoc>
            <declaration name="m_dataManipulate_" type="DataManipulate" line="155"/>
            <javadoc line="155">
                Internal TrieValue which handles the parsing of the data value.
                  This class is to be implemented by the user                
            </javadoc>
            <declaration name="m_dataOffset_" type="int" line="160"/>
            <javadoc line="160">
                Start index of the data portion of the trie. CharTrie combines
                  index and data into a char array, so this is used to indicate the
                  initial offset to the data portion.
                  Note this index always points to the initial value.                
            </javadoc>
            <declaration name="m_dataLength_" type="int" line="167"/>
            <javadoc line="167">
                Length of the data array                
            </javadoc>
            <method name="getSurrogateOffset" type="int" line="171"/>
            <javadoc line="171">
                Gets the offset to the data which the surrogate pair points to.                
                <param>
                    lead lead surrogate                    
                </param>
                <param>
                    trail trailing surrogate                    
                </param>
                <return>
                    offset to data                    
                </return>
            </javadoc>
            <method name="getValue" type="int" line="178"/>
            <javadoc line="178">
                Gets the value at the argument index                
                <param>
                    index value at index will be retrieved                    
                </param>
                <return>
                    32 bit value                    
                </return>
            </javadoc>
            <method name="getInitialValue" type="int" line="184"/>
            <javadoc line="184">
                Gets the default initial value                
                <return>
                    32 bit value                    
                </return>
            </javadoc>
            <javadoc line="189">
                Gets the offset to the data which the index ch after variable offset
                  points to.
                  Note for locating a non-supplementary character data offset, calling
                  &lt;p&gt;
                  getRawOffset(0, ch);
                  &lt;/p&gt;
                  will do. Otherwise if it is a supplementary character formed by
                  surrogates lead and trail. Then we would have to call getRawOffset()
                  with getFoldingIndexOffset(). See getSurrogateOffset().                
                <param>
                    offset index offset which ch is to start from                    
                </param>
                <param>
                    ch index to be used after offset                    
                </param>
                <return>
                    offset to the data                    
                </return>
            </javadoc>
            <method name="getRawOffset" type="int" line="203">
                <params>
                    <param name="offset" type="int"/>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="206">
                Gets the offset to data which the BMP character points to
                  Treats a lead surrogate as a normal code point.                
                <param>
                    ch BMP character                    
                </param>
                <return>
                    offset to data                    
                </return>
            </javadoc>
            <method name="getBMPOffset" type="int" line="212">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="215">
                Gets the offset to the data which this lead surrogate character points
                  to.
                  Data at the returned offset may contain folding offset information for
                  the next trailing surrogate character.                
                <param>
                    ch lead surrogate character                    
                </param>
                <return>
                    offset to data                    
                </return>
            </javadoc>
            <method name="getLeadOffset" type="int" line="223">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="226">
                Internal trie getter from a code point.
                  Could be faster(?) but longer with
                  if((c32)&lt;=0xd7ff) { (result)=_TRIE_GET_RAW(trie, data, 0, c32); }
                  Gets the offset to data which the codepoint points to                
                <param>
                    ch codepoint                    
                </param>
                <return>
                    offset to data                    
                </return>
            </javadoc>
            <method name="getCodePointOffset" type="int" line="234">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="247"/>
            </method>
            <javadoc line="251">
                &lt;p&gt;Parses the inputstream and creates the trie index with it.&lt;/p&gt;
                  &lt;p&gt;This is overwritten by the child classes.                
                <param>
                    inputStream input stream containing the trie information                    
                </param>
                <exception>
                    IOException thrown when data reading fails.                    
                </exception>
            </javadoc>
            <method name="unserialize" type="void" line="257">
                <params>
                    <param name="inputStream" type="InputStream"/>
                </params>
                <declaration name="input" type="DataInputStream" line="259"/>
                <scope line="260"/>
            </method>
            <javadoc line="264">
                Determines if this is a 32 bit trie                
                <return>
                    true if options specifies this is a 32 bit trie                    
                </return>
            </javadoc>
            <method name="isIntTrie" type="boolean" line="268"/>
            <javadoc line="271">
                Determines if this is a 16 bit trie                
                <return>
                    true if this is a 16 bit trie                    
                </return>
            </javadoc>
            <method name="isCharTrie" type="boolean" line="275"/>
            <declaration name="HEADER_OPTIONS_LATIN1_IS_LINEAR_MASK_" type="int" line="278"/>
            <javadoc line="278">
                Latin 1 option mask                
            </javadoc>
            <declaration name="HEADER_SIGNATURE_" type="int" line="282"/>
            <javadoc line="282">
                Constant number to authenticate the byte block                
            </javadoc>
            <declaration name="HEADER_OPTIONS_SHIFT_MASK_" type="int" line="286"/>
            <javadoc line="286">
                Header option formatting                
            </javadoc>
            <declaration name="HEADER_OPTIONS_INDEX_SHIFT_" type="int" line="290"/>
            <declaration name="HEADER_OPTIONS_DATA_IS_32_BIT_" type="int" line="291"/>
            <declaration name="m_isLatin1Linear_" type="boolean" line="292"/>
            <javadoc line="292">
                Flag indicator for Latin quick access data block                
            </javadoc>
            <declaration name="m_options_" type="int" line="296"/>
            <javadoc line="296">
                &lt;p&gt;Trie options field.&lt;/p&gt;
                  &lt;p&gt;options bit field:&lt;br&gt;
                  9  1 = Latin-1 data is stored linearly at data + DATA_BLOCK_LENGTH&lt;br&gt;
                  8  0 = 16-bit data, 1=32-bit data&lt;br&gt;
                  7..4  INDEX_STAGE_1_SHIFT   // 0..INDEX_STAGE_2_SHIFT&lt;br&gt;
                  3..0  INDEX_STAGE_2_SHIFT   // 1..9&lt;br&gt;                
            </javadoc>
            <javadoc line="305">
                Authenticates raw data header.
                  Checking the header information, signature and options.                
                <param>
                    signature This contains the options and type of a Trie                    
                </param>
                <return>
                    true if the header is authenticated valid                    
                </return>
            </javadoc>
            <method name="checkHeader" type="boolean" line="311">
                <params>
                    <param name="signature" type="int"/>
                </params>
                <scope line="312"/>
                <scope line="315"/>
            </method>
        </class>
    </source>