<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.MissingResourceException"/>
        <class name="UCharacterProperty" line="6">
            <javadoc line="6">
                &lt;p&gt;Internal class used for Unicode character property database.&lt;/p&gt;
                  &lt;p&gt;This classes store binary data read from uprops.icu.
                  It does not have the capability to parse the data into more high-level
                  information. It only returns bytes of information when required.&lt;/p&gt;
                  &lt;p&gt;Due to the form most commonly used for retrieval, array of char is used
                  to store the binary data.&lt;/p&gt;
                  &lt;p&gt;UCharacterPropertyDB also contains information on accessing indexes to
                  significant points in the binary data.&lt;/p&gt;
                  &lt;p&gt;Responsibility for molding the binary data into more meaning form lies on
                  &lt;a href=UCharacter.html&gt;UCharacter&lt;/a&gt;.&lt;/p&gt;                
                <author>
                    Syn Wee Quek                    
                </author>
                <since>
                    release 2.1, february 1st 2002                    
                </since>
            </javadoc>
            <declaration name="m_trie_" type="CharTrie" line="21"/>
            <javadoc line="21">
                Trie data                
            </javadoc>
            <declaration name="m_trieIndex_" type="char[]" line="25"/>
            <javadoc line="25">
                Optimization
                  CharTrie index array                
            </javadoc>
            <declaration name="m_trieData_" type="char[]" line="30"/>
            <javadoc line="30">
                Optimization
                  CharTrie data array                
            </javadoc>
            <declaration name="m_trieInitialValue_" type="int" line="35"/>
            <javadoc line="35">
                Optimization
                  CharTrie data offset                
            </javadoc>
            <declaration name="m_unicodeVersion_" type="VersionInfo" line="40"/>
            <javadoc line="40">
                Unicode version                
            </javadoc>
            <declaration name="SRC_PROPSVEC" type="int" line="44"/>
            <javadoc line="44">
                From uchar.c/uprops.icu properties vectors trie                
            </javadoc>
            <declaration name="SRC_COUNT" type="int" line="48"/>
            <javadoc line="48">
                One more than the highest UPropertySource (SRC_) constant.                
            </javadoc>
            <javadoc line="52">
                Java friends implementation                
            </javadoc>
            <method name="setIndexData" type="void" line="55">
                <params>
                    <param name="friendagent" type="CharTrie.FriendAgent"/>
                </params>
            </method>
            <javadoc line="60">
                Gets the property value at the index.
                  This is optimized.
                  Note this is alittle different from CharTrie the index m_trieData_
                  is never negative.                
                <param>
                    ch code point whose property value is to be retrieved                    
                </param>
                <return>
                    property value of code point                    
                </return>
            </javadoc>
            <method name="getProperty" type="int" line="68">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <scope line="69">
                    <scope line="70"/>
                    <scope line="73"/>
                </scope>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Getting the unsigned numeric value of a character embedded in the property
                  argument                
                <param>
                    prop the character                    
                </param>
                <return>
                    unsigned numberic value                    
                </return>
            </javadoc>
            <method name="getUnsignedValue" type="int" line="91">
                <params>
                    <param name="prop" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                Gets the unicode additional properties.
                  C version getUnicodeProperties.                
                <param>
                    codepoint codepoint whose additional properties is to be
                      retrieved                    
                </param>
                <param>
                    column                    
                </param>
                <return>
                    unicode properties                    
                </return>
            </javadoc>
            <method name="getAdditional" type="int" line="102">
                <params>
                    <param name="codepoint" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                &lt;p&gt;Get the &quot;age&quot; of the code point.&lt;/p&gt;
                  &lt;p&gt;The &quot;age&quot; is the Unicode version when the code point was first
                  designated (as a non-character or for Private Use) or assigned a
                  character.&lt;/p&gt;
                  &lt;p&gt;This can be useful to avoid emitting code points to receiving
                  processes that do not accept newer characters.&lt;/p&gt;
                  &lt;p&gt;The data is from the UCD file DerivedAge.txt.&lt;/p&gt;
                  &lt;p&gt;This API does not check the validity of the codepoint.&lt;/p&gt;                
                <param>
                    codepoint The code point.                    
                </param>
                <return>
                    the Unicode version number                    
                </return>
            </javadoc>
            <method name="getAge" type="VersionInfo" line="123">
                <params>
                    <param name="codepoint" type="int"/>
                </params>
                <declaration name="version" type="int" line="124"/>
            </method>
            <javadoc line="127">
                Forms a supplementary code point from the argument character&lt;br&gt;
                  Note this is for internal use hence no checks for the validity of the
                  surrogate characters are done                
                <param>
                    lead lead surrogate character                    
                </param>
                <param>
                    trail trailing surrogate character                    
                </param>
                <return>
                    code point of the supplementary character                    
                </return>
            </javadoc>
            <method name="getRawSupplementary" type="int" line="135">
                <params>
                    <param name="lead" type="char"/>
                    <param name="trail" type="char"/>
                </params>
            </method>
            <javadoc line="138">
                Loads the property data and initialize the UCharacterProperty instance.                
                <throws>
                    MissingResourceException when data is missing or data has been corrupted                    
                </throws>
            </javadoc>
            <method name="getInstance" type="UCharacterProperty" line="142">
                <scope line="143">
                    <scope line="144"/>
                    <scope line="147"/>
                </scope>
            </method>
            <javadoc line="153">
                Checks if the argument c is to be treated as a white space in ICU
                  rules. Usually ICU rule white spaces are ignored unless quoted.
                  Equivalent to test for Pattern_White_Space Unicode property.
                  Stable set of characters, won&apos;t change.
                  See UAX #31 Identifier and Pattern Syntax: http://www.unicode.org/reports/tr31/                
                <param>
                    c codepoint to check                    
                </param>
                <return>
                    true if c is a ICU white space                    
                </return>
            </javadoc>
            <method name="isRuleWhiteSpace" type="boolean" line="162">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <declaration name="m_additionalTrie_" type="CharTrie" line="165"/>
            <javadoc line="165">
                Extra property trie                
            </javadoc>
            <declaration name="m_additionalVectors_" type="int" line="169"/>
            <javadoc line="169">
                Extra property vectors, 1st column for age and second for binary
                  properties.                
            </javadoc>
            <declaration name="m_additionalColumnsCount_" type="int" line="174"/>
            <javadoc line="174">
                Number of additional columns                
            </javadoc>
            <declaration name="m_maxBlockScriptValue_" type="int" line="178"/>
            <javadoc line="178">
                Maximum values for block, bits used as in vector word
                  0                
            </javadoc>
            <declaration name="m_maxJTGValue_" type="int" line="183"/>
            <javadoc line="183">
                Maximum values for script, bits used as in vector word
                  0                
            </javadoc>
            <declaration name="INSTANCE_" type="UCharacterProperty" line="188"/>
            <javadoc line="188">
                UnicodeData.txt property object                
            </javadoc>
            <declaration name="DATA_FILE_NAME_" type="String" line="192"/>
            <javadoc line="192">
                Default name of the datafile                
            </javadoc>
            <declaration name="DATA_BUFFER_SIZE_" type="int" line="196"/>
            <javadoc line="196">
                Default buffer size of datafile                
            </javadoc>
            <declaration name="VALUE_SHIFT_" type="int" line="200"/>
            <javadoc line="200">
                Numeric value shift                
            </javadoc>
            <declaration name="UNSIGNED_VALUE_MASK_AFTER_SHIFT_" type="int" line="204"/>
            <javadoc line="204">
                Mask to be applied after shifting to obtain an unsigned numeric value                
            </javadoc>
            <declaration name="LEAD_SURROGATE_SHIFT_" type="int" line="208"/>
            <javadoc line="208">
                Shift value for lead surrogate to form a supplementary character.                
            </javadoc>
            <declaration name="SURROGATE_OFFSET_" type="int" line="212"/>
            <javadoc line="212">
                Offset to add to combined surrogate pair to avoid msking.                
            </javadoc>
            <declaration name="FIRST_NIBBLE_SHIFT_" type="int" line="216"/>
            <javadoc line="216">
                First nibble shift                
            </javadoc>
            <declaration name="LAST_NIBBLE_MASK_" type="int" line="220"/>
            <javadoc line="220">
                Second nibble mask                
            </javadoc>
            <declaration name="AGE_SHIFT_" type="int" line="224"/>
            <javadoc line="224">
                Age value shift                
            </javadoc>
            <javadoc line="228">
                Constructor                
                <exception>
                    IOException thrown when data reading fails or data corrupted                    
                </exception>
            </javadoc>
            <method name="UCharacterProperty" type="constructor" line="232">
                <declaration name="is" type="InputStream" line="233"/>
                <declaration name="b" type="BufferedInputStream" line="234"/>
                <declaration name="reader" type="UCharacterPropertyReader" line="235"/>
            </method>
            <method name="upropsvec_addPropertyStarts" type="void" line="240">
                <params>
                    <param name="set" type="UnicodeSet"/>
                </params>
                <scope line="241">
                    <declaration name="propsVectorsIter" type="TrieIterator" line="242"/>
                    <declaration name="propsVectorsResult" type="RangeValueIterator.Element" line="243"/>
                    <scope line="244"/>
                </scope>
            </method>
        </class>
    </source>