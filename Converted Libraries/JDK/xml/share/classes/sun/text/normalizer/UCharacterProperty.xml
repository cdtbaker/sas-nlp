<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.MissingResourceException"/>
        <class name="UCharacterProperty" line="44">
            <comment line="62">
                public data members -----------------------------------------------                
            </comment>
            <comment line="88">
                uprops.h enum UPropertySource --------------------------------------- ***                
            </comment>
            <comment line="95">
                public methods ----------------------------------------------------                
            </comment>
            <comment line="259">
                protected variables -----------------------------------------------                
            </comment>
            <comment line="285">
                private variables -------------------------------------------------                
            </comment>
            <comment line="325">
                additional properties ----------------------------------------------                
            </comment>
            <comment line="340">
                private constructors --------------------------------------------------                
            </comment>
            <javadoc line="44">
                &lt;p&gt;Internal class used for Unicode character property database.&lt;/p&gt;
                  &lt;p&gt;This classes store binary data read from uprops.icu.
                  It does not have the capability to parse the data into more high-level
                  information. It only returns bytes of information when required.&lt;/p&gt;
                  &lt;p&gt;Due to the form most commonly used for retrieval, array of char is used
                  to store the binary data.&lt;/p&gt;
                  &lt;p&gt;UCharacterPropertyDB also contains information on accessing indexes to
                  significant points in the binary data.&lt;/p&gt;
                  &lt;p&gt;Responsibility for molding the binary data into more meaning form lies on
                  &lt;a href=UCharacter.html&gt;UCharacter&lt;/a&gt;.&lt;/p&gt;                
                <author>
                    Syn Wee Quek                    
                </author>
                <since>
                    release 2.1, february 1st 2002                    
                </since>
            </javadoc>
            <declaration name="m_trie_" type="CharTrie" line="63"/>
            <javadoc line="63">
                Trie data                
            </javadoc>
            <declaration name="m_trieIndex_" type="char[]" line="67"/>
            <javadoc line="67">
                Optimization
                  CharTrie index array                
            </javadoc>
            <declaration name="m_trieData_" type="char[]" line="72"/>
            <javadoc line="72">
                Optimization
                  CharTrie data array                
            </javadoc>
            <declaration name="m_trieInitialValue_" type="int" line="77"/>
            <javadoc line="77">
                Optimization
                  CharTrie data offset                
            </javadoc>
            <declaration name="m_unicodeVersion_" type="VersionInfo" line="82"/>
            <javadoc line="82">
                Unicode version                
            </javadoc>
            <declaration name="SRC_PROPSVEC" type="int" line="89"/>
            <javadoc line="89">
                From uchar.c/uprops.icu properties vectors trie                
            </javadoc>
            <declaration name="SRC_COUNT" type="int" line="91"/>
            <javadoc line="91">
                One more than the highest UPropertySource (SRC_) constant.                
            </javadoc>
            <javadoc line="96">
                Java friends implementation                
            </javadoc>
            <method name="setIndexData" type="void" line="100">
                <params>
                    <param name="friendagent" type="CharTrie.FriendAgent"/>
                </params>
            </method>
            <javadoc line="106">
                Gets the property value at the index.
                  This is optimized.
                  Note this is alittle different from CharTrie the index m_trieData_
                  is never negative.                
                <param>
                    ch code point whose property value is to be retrieved                    
                </param>
                <return>
                    property value of code point                    
                </return>
            </javadoc>
            <method name="getProperty" type="int" line="115">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <comment line="119">
                    BMP codepoint 0000..D7FF or DC00..FFFF                    
                </comment>
                <comment line="120">
                    optimized                    
                </comment>
                <comment line="121">
                    using try for ch &lt; 0 is faster than using an if statement                    
                </comment>
                <comment line="131">
                    lead surrogate D800..DBFF                    
                </comment>
                <comment line="139">
                    supplementary code point 10000..10FFFF                    
                </comment>
                <comment line="140">
                    look at the construction of supplementary characters                    
                </comment>
                <comment line="141">
                    trail forms the ends of it.                    
                </comment>
                <comment line="146">
                    ch is out of bounds                    
                </comment>
                <comment line="147">
                    return m_dataOffset_ if there is an error, in this case we return                    
                </comment>
                <comment line="148">
                    the default value: m_initialValue_                    
                </comment>
                <comment line="149">
                    we cannot assume that m_initialValue_ is at offset 0                    
                </comment>
                <comment line="150">
                    this is for optimization.                    
                </comment>
                <comment line="153">
                    this all is an inlined form of return m_trie_.getCodePointValue(ch);                    
                </comment>
                <scope line="118">
                    <scope line="121"/>
                    <scope line="126"/>
                </scope>
                <scope line="130"/>
                <scope line="138"/>
            </method>
            <javadoc line="156">
                Getting the unsigned numeric value of a character embedded in the property
                  argument                
                <param>
                    prop the character                    
                </param>
                <return>
                    unsigned numberic value                    
                </return>
            </javadoc>
            <method name="getUnsignedValue" type="int" line="163">
                <params>
                    <param name="prop" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Gets the unicode additional properties.
                  C version getUnicodeProperties.                
                <param>
                    codepoint codepoint whose additional properties is to be
                      retrieved                    
                </param>
                <param>
                    column                    
                </param>
                <return>
                    unicode properties                    
                </return>
            </javadoc>
            <method name="getAdditional" type="int" line="175">
                <params>
                    <param name="codepoint" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="176"/>
                <scope line="179"/>
            </method>
            <javadoc line="186">
                &lt;p&gt;Get the &quot;age&quot; of the code point.&lt;/p&gt;
                  &lt;p&gt;The &quot;age&quot; is the Unicode version when the code point was first
                  designated (as a non-character or for Private Use) or assigned a
                  character.&lt;/p&gt;
                  &lt;p&gt;This can be useful to avoid emitting code points to receiving
                  processes that do not accept newer characters.&lt;/p&gt;
                  &lt;p&gt;The data is from the UCD file DerivedAge.txt.&lt;/p&gt;
                  &lt;p&gt;This API does not check the validity of the codepoint.&lt;/p&gt;                
                <param>
                    codepoint The code point.                    
                </param>
                <return>
                    the Unicode version number                    
                </return>
            </javadoc>
            <method name="getAge" type="VersionInfo" line="199">
                <params>
                    <param name="codepoint" type="int"/>
                </params>
                <declaration name="version" type="int" line="200"/>
            </method>
            <javadoc line="206">
                Forms a supplementary code point from the argument character&lt;br&gt;
                  Note this is for internal use hence no checks for the validity of the
                  surrogate characters are done                
                <param>
                    lead lead surrogate character                    
                </param>
                <param>
                    trail trailing surrogate character                    
                </param>
                <return>
                    code point of the supplementary character                    
                </return>
            </javadoc>
            <method name="getRawSupplementary" type="int" line="215">
                <params>
                    <param name="lead" type="char"/>
                    <param name="trail" type="char"/>
                </params>
            </method>
            <javadoc line="219">
                Loads the property data and initialize the UCharacterProperty instance.                
                <throws>
                    MissingResourceException when data is missing or data has been corrupted                    
                </throws>
            </javadoc>
            <method name="getInstance" type="UCharacterProperty" line="224">
                <scope line="225">
                    <scope line="226"/>
                    <scope line="229"/>
                </scope>
            </method>
            <javadoc line="236">
                Checks if the argument c is to be treated as a white space in ICU
                  rules. Usually ICU rule white spaces are ignored unless quoted.
                  Equivalent to test for Pattern_White_Space Unicode property.
                  Stable set of characters, won&apos;t change.
                  See UAX #31 Identifier and Pattern Syntax: http://www.unicode.org/reports/tr31/                
                <param>
                    c codepoint to check                    
                </param>
                <return>
                    true if c is a ICU white space                    
                </return>
            </javadoc>
            <method name="isRuleWhiteSpace" type="boolean" line="246">
                <params>
                    <param name="c" type="int"/>
                </params>
                <comment line="247">
                    &quot;white space&quot; in the sense of ICU rule parsers
                    This is a FIXED LIST that is NOT DEPENDENT ON UNICODE PROPERTIES.
                    See UAX #31 Identifier and Pattern Syntax: http:www.unicode.orgreportstr31
                    U+0009..U+000D, U+0020, U+0085, U+200E..U+200F, and U+2028..U+2029
                    Equivalent to test for Pattern_White_Space Unicode property.                    
                </comment>
            </method>
            <declaration name="m_additionalTrie_" type="CharTrie" line="260"/>
            <javadoc line="260">
                Extra property trie                
            </javadoc>
            <declaration name="m_additionalVectors_" type="int" line="264"/>
            <javadoc line="264">
                Extra property vectors, 1st column for age and second for binary
                  properties.                
            </javadoc>
            <declaration name="m_additionalColumnsCount_" type="int" line="269"/>
            <javadoc line="269">
                Number of additional columns                
            </javadoc>
            <declaration name="m_maxBlockScriptValue_" type="int" line="273"/>
            <javadoc line="273">
                Maximum values for block, bits used as in vector word
                  0                
            </javadoc>
            <declaration name="m_maxJTGValue_" type="int" line="278"/>
            <javadoc line="278">
                Maximum values for script, bits used as in vector word
                  0                
            </javadoc>
            <declaration name="INSTANCE_" type="UCharacterProperty" line="286"/>
            <javadoc line="286">
                UnicodeData.txt property object                
            </javadoc>
            <declaration name="DATA_FILE_NAME_" type="String" line="291"/>
            <javadoc line="291">
                Default name of the datafile                
            </javadoc>
            <declaration name="DATA_BUFFER_SIZE_" type="int" line="296"/>
            <javadoc line="296">
                Default buffer size of datafile                
            </javadoc>
            <declaration name="VALUE_SHIFT_" type="int" line="301"/>
            <javadoc line="301">
                Numeric value shift                
            </javadoc>
            <declaration name="UNSIGNED_VALUE_MASK_AFTER_SHIFT_" type="int" line="306"/>
            <javadoc line="306">
                Mask to be applied after shifting to obtain an unsigned numeric value                
            </javadoc>
            <declaration name="LEAD_SURROGATE_SHIFT_" type="int" line="311"/>
            <javadoc line="311">
                Shift value for lead surrogate to form a supplementary character.                
            </javadoc>
            <declaration name="SURROGATE_OFFSET_" type="int" line="315"/>
            <javadoc line="315">
                Offset to add to combined surrogate pair to avoid msking.                
            </javadoc>
            <declaration name="FIRST_NIBBLE_SHIFT_" type="int" line="326"/>
            <javadoc line="326">
                First nibble shift                
            </javadoc>
            <declaration name="LAST_NIBBLE_MASK_" type="int" line="330"/>
            <javadoc line="330">
                Second nibble mask                
            </javadoc>
            <declaration name="AGE_SHIFT_" type="int" line="334"/>
            <javadoc line="334">
                Age value shift                
            </javadoc>
            <javadoc line="341">
                Constructor                
                <exception>
                    IOException thrown when data reading fails or data corrupted                    
                </exception>
            </javadoc>
            <method name="UCharacterProperty" type="constructor" line="346">
                <comment line="347">
                    jar access                    
                </comment>
                <declaration name="is" type="InputStream" line="348"/>
                <declaration name="b" type="BufferedInputStream" line="349"/>
                <declaration name="reader" type="UCharacterPropertyReader" line="350"/>
            </method>
            <method name="upropsvec_addPropertyStarts" type="void" line="357">
                <params>
                    <param name="set" type="UnicodeSet"/>
                </params>
                <comment line="358">
                                        
                </comment>
                <comment line="360">
                                        
                </comment>
                <scope line="359">
                    <declaration name="propsVectorsIter" type="TrieIterator" line="361"/>
                    <declaration name="propsVectorsResult" type="RangeValueIterator.Element" line="362"/>
                    <scope line="363"/>
                </scope>
            </method>
        </class>
    </source>